[{"original_method":"public void serialize(Inner inner, DataOutputPlus out, int version) throws IOException\n            {\n                if (inner.hash == null)\n                    out.writeInt(-1);\n                else\n                {\n                    out.writeInt(inner.hash.length);\n                    out.write(inner.hash);\n                }\n                Token.serializer.serialize(inner.token, out, version);\n                Hashable.serializer.serialize(inner.lchild, out, version);\n                Hashable.serializer.serialize(inner.rchild, out, version);\n            }","id":103000,"modified_method":"public void serialize(Inner inner, DataOutputPlus out, int version) throws IOException\n            {\n                if (version < MessagingService.VERSION_30)\n                {\n                    if (inner.hash == null)\n                        out.writeInt(-1);\n                    else\n                    {\n                        out.writeInt(inner.hash.length);\n                        out.write(inner.hash);\n                    }\n                }\n                Token.serializer.serialize(inner.token, out, version);\n                Hashable.serializer.serialize(inner.lchild, out, version);\n                Hashable.serializer.serialize(inner.rchild, out, version);\n            }","commit_id":"90e0013126e4875d696891c67d1b22fdb2b8ba7a","url":"https://github.com/apache/cassandra"},{"original_method":"public Leaf deserialize(DataInput in, IPartitioner p, int version) throws IOException\n            {\n                int hashLen = in.readInt();\n                byte[] hash = hashLen < 0 ? null : new byte[hashLen];\n                if (hash != null)\n                    in.readFully(hash);\n                return new Leaf(hash);\n            }","id":103001,"modified_method":"public Leaf deserialize(DataInput in, IPartitioner p, int version) throws IOException\n            {\n                int hashLen = version < MessagingService.VERSION_30 ? in.readInt() : in.readByte();\n                byte[] hash = hashLen < 0 ? null : new byte[hashLen];\n                if (hash != null)\n                    in.readFully(hash);\n                return new Leaf(hash);\n            }","commit_id":"90e0013126e4875d696891c67d1b22fdb2b8ba7a","url":"https://github.com/apache/cassandra"},{"original_method":"public Inner deserialize(DataInput in, IPartitioner p, int version) throws IOException\n            {\n                int hashLen = in.readInt();\n                byte[] hash = hashLen >= 0 ? new byte[hashLen] : null;\n                if (hash != null)\n                    in.readFully(hash);\n                Token token = Token.serializer.deserialize(in, p, version);\n                Hashable lchild = Hashable.serializer.deserialize(in, p, version);\n                Hashable rchild = Hashable.serializer.deserialize(in, p, version);\n                return new Inner(token, lchild, rchild);\n            }","id":103002,"modified_method":"public Inner deserialize(DataInput in, IPartitioner p, int version) throws IOException\n            {\n                if (version < MessagingService.VERSION_30)\n                {\n                    int hashLen = in.readInt();\n                    byte[] hash = hashLen >= 0 ? new byte[hashLen] : null;\n                    if (hash != null)\n                        in.readFully(hash);\n                }\n                Token token = Token.serializer.deserialize(in, p, version);\n                Hashable lchild = Hashable.serializer.deserialize(in, p, version);\n                Hashable rchild = Hashable.serializer.deserialize(in, p, version);\n                return new Inner(token, lchild, rchild);\n            }","commit_id":"90e0013126e4875d696891c67d1b22fdb2b8ba7a","url":"https://github.com/apache/cassandra"},{"original_method":"public long serializedSize(Leaf leaf, int version)\n            {\n                return leaf.hash == null\n                     ? TypeSizes.sizeof(-1)\n                     : TypeSizes.sizeof(leaf.hash().length) + leaf.hash().length;\n            }","id":103003,"modified_method":"public long serializedSize(Leaf leaf, int version)\n            {\n                long size = version < MessagingService.VERSION_30 ? TypeSizes.sizeof(1) : 1;\n                if (leaf.hash != null)\n                {\n                    size += leaf.hash().length;\n                }\n                return size;\n            }","commit_id":"90e0013126e4875d696891c67d1b22fdb2b8ba7a","url":"https://github.com/apache/cassandra"},{"original_method":"public long serializedSize(AbstractBounds<T> ab, int version)\n        {\n            int size = TypeSizes.sizeof(kindInt(ab));\n            size += serializer.serializedSize(ab.left, version);\n            size += serializer.serializedSize(ab.right, version);\n            return size;\n        }","id":103004,"modified_method":"public long serializedSize(AbstractBounds<T> ab, int version)\n        {\n            int size = version < MessagingService.VERSION_30\n                     ? TypeSizes.sizeof(kindInt(ab))\n                     : 1;\n            size += serializer.serializedSize(ab.left, version);\n            size += serializer.serializedSize(ab.right, version);\n            return size;\n        }","commit_id":"bd7d1198ac1e02785e912c7cfbb504ddaab6bb93","url":"https://github.com/apache/cassandra"},{"original_method":"public void serialize(AbstractBounds<T> range, DataOutputPlus out, int version) throws IOException\n        {\n            /*\n             * The first int tells us if it's a range or bounds (depending on the value) _and_ if it's tokens or keys (depending on the\n             * sign). We use negative kind for keys so as to preserve the serialization of token from older version.\n             */\n            out.writeInt(kindInt(range));\n            serializer.serialize(range.left, out, version);\n            serializer.serialize(range.right, out, version);\n        }","id":103005,"modified_method":"public void serialize(AbstractBounds<T> range, DataOutputPlus out, int version) throws IOException\n        {\n            /*\n             * The first int tells us if it's a range or bounds (depending on the value) _and_ if it's tokens or keys (depending on the\n             * sign). We use negative kind for keys so as to preserve the serialization of token from older version.\n             */\n            if (version < MessagingService.VERSION_30)\n                out.writeInt(kindInt(range));\n            else\n                out.writeByte(kindFlags(range));\n            serializer.serialize(range.left, out, version);\n            serializer.serialize(range.right, out, version);\n        }","commit_id":"bd7d1198ac1e02785e912c7cfbb504ddaab6bb93","url":"https://github.com/apache/cassandra"},{"original_method":"public AbstractBounds<T> deserialize(DataInput in, IPartitioner p, int version) throws IOException\n        {\n            int kind = in.readInt();\n            boolean isToken = kind >= 0;\n            if (!isToken)\n                kind = -(kind+1);\n\n            T left = serializer.deserialize(in, p, version);\n            T right = serializer.deserialize(in, p, version);\n            assert isToken == left instanceof Token;\n\n            if (kind == Type.RANGE.ordinal())\n                return new Range<T>(left, right);\n            return new Bounds<T>(left, right);\n        }","id":103006,"modified_method":"public AbstractBounds<T> deserialize(DataInput in, IPartitioner p, int version) throws IOException\n        {\n            boolean isToken, startInclusive, endInclusive;\n            if (version < MessagingService.VERSION_30)\n            {\n                int kind = in.readInt();\n                isToken = kind >= 0;\n                if (!isToken)\n                    kind = -(kind+1);\n\n                // Pre-3.0, everything that wasa not a Range was (wrongly) serialized as a Bound;\n                startInclusive = kind != Type.RANGE.ordinal();\n                endInclusive = true;\n            }\n            else\n            {\n                int flags = in.readUnsignedByte();\n                isToken = (flags & IS_TOKEN_FLAG) != 0;\n                startInclusive = (flags & START_INCLUSIVE_FLAG) != 0;\n                endInclusive = (flags & END_INCLUSIVE_FLAG) != 0;\n            }\n\n            T left = serializer.deserialize(in, p, version);\n            T right = serializer.deserialize(in, p, version);\n            assert isToken == left instanceof Token;\n\n            if (startInclusive)\n                return endInclusive ? new Bounds<T>(left, right) : new IncludingExcludingBounds<T>(left, right);\n            else\n                return endInclusive ? new Range<T>(left, right) : new ExcludingBounds<T>(left, right);\n        }","commit_id":"bd7d1198ac1e02785e912c7cfbb504ddaab6bb93","url":"https://github.com/apache/cassandra"},{"original_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.getShortFileName(fileName);\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(name));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, templateGroupId,\n\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId,\n\t\t\tgetKey(name), getMap(name), null, type, mode, language, script,\n\t\t\tfalse, false, StringPool.BLANK, null, serviceContext);\n\t}","id":103007,"modified_method":"protected void addDDMTemplate(\n\t\t\tlong templateGroupId, long ddmStructureId, String fileName,\n\t\t\tString language, String script, String type, String mode)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.getShortFileName(fileName);\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString templateKey = getKey(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\ttemplateKey);\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, templateGroupId,\n\t\t\tPortalUtil.getClassNameId(DDMStructure.class), ddmStructureId,\n\t\t\ttemplateKey, getMap(name), null, type, mode, language, script,\n\t\t\tfalse, false, StringPool.BLANK, null, serviceContext);\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addLayoutTemplate(InputStream inputStream) throws Exception {\n\t\tString content = StringUtil.read(inputStream);\n\n\t\tif (Validator.isNull(content)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(content);\n\n\t\tJSONObject layoutTemplateJSONObject = jsonObject.getJSONObject(\n\t\t\t\"layoutTemplate\");\n\n\t\tString name = layoutTemplateJSONObject.getString(\"name\");\n\n\t\tLayoutPrototype layoutPrototype = getLayoutPrototype(companyId, name);\n\n\t\tif (layoutPrototype != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Layout prototype with name \" + name +\n\t\t\t\t\t\t\t\" already exists for company \" + companyId);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tLayoutPrototypeLocalServiceUtil.deleteLayoutPrototype(\n\t\t\t\tlayoutPrototype);\n\t\t}\n\n\t\tlayoutPrototype =\n\t\t\tLayoutPrototypeLocalServiceUtil.addLayoutPrototype(\n\t\t\t\tuserId, companyId, getMap(name), name, true, serviceContext);\n\n\t\tJSONArray columnsJSONArray = layoutTemplateJSONObject.getJSONArray(\n\t\t\t\"columns\");\n\n\t\tLayout layout = layoutPrototype.getLayout();\n\n\t\taddLayoutColumns(\n\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX, columnsJSONArray);\n\n\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\tlayout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\tlayout.getTypeSettings());\n\t}","id":103008,"modified_method":"protected void addLayoutTemplate(InputStream inputStream) throws Exception {\n\t\tString content = StringUtil.read(inputStream);\n\n\t\tif (Validator.isNull(content)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJSONObject jsonObject = JSONFactoryUtil.createJSONObject(content);\n\n\t\tJSONObject layoutTemplateJSONObject = jsonObject.getJSONObject(\n\t\t\t\"layoutTemplate\");\n\n\t\tString layoutTemplateName = layoutTemplateJSONObject.getString(\"name\");\n\n\t\tString name = getName(layoutTemplateName);\n\n\t\tLayoutPrototype layoutPrototype = getLayoutPrototype(companyId, name);\n\n\t\tif (layoutPrototype != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Layout prototype with name \" + name +\n\t\t\t\t\t\t\t\" already exists for company \" + companyId);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tLayoutPrototypeLocalServiceUtil.deleteLayoutPrototype(\n\t\t\t\tlayoutPrototype);\n\t\t}\n\n\t\tlayoutPrototype =\n\t\t\tLayoutPrototypeLocalServiceUtil.addLayoutPrototype(\n\t\t\t\tuserId, companyId, getMap(name), name, true, serviceContext);\n\n\t\tJSONArray columnsJSONArray = layoutTemplateJSONObject.getJSONArray(\n\t\t\t\"columns\");\n\n\t\tLayout layout = layoutPrototype.getLayout();\n\n\t\taddLayoutColumns(\n\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX, columnsJSONArray);\n\n\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\tlayout.getGroupId(), layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\tlayout.getTypeSettings());\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tgetKey(name));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tddmStructure.getStructureId(), getKey(name), getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl), false,\n\t\t\tfalse, null, null, serviceContext);\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + name);\n\t}","id":103009,"modified_method":"protected void addDDMTemplates(\n\t\t\tString ddmStructureKey, String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString templateKey = getKey(fileName);\n\n\t\tString xsl = StringUtil.read(inputStream);\n\n\t\tsetServiceContext(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tddmStructureKey);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\ttemplateKey);\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tddmTemplate = DDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, PortalUtil.getClassNameId(DDMStructure.class),\n\t\t\tddmStructure.getStructureId(), templateKey, getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, null,\n\t\t\tgetDDMTemplateLanguage(fileName), replaceFileEntryURL(xsl), false,\n\t\t\tfalse, null, null, serviceContext);\n\n\t\taddJournalArticles(\n\t\t\tddmStructureKey, ddmTemplate.getTemplateKey(),\n\t\t\t_JOURNAL_ARTICLES_DIR_NAME + fileName);\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString name = FileUtil.stripExtension(file.getName());\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, classNameId, getKey(name));\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, classNameId, 0, getKey(name), getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK,\n\t\t\tgetDDMTemplateLanguage(name), script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","id":103010,"modified_method":"protected void addApplicationDisplayTemplate(\n\t\t\tString script, File file, long classNameId)\n\t\tthrows PortalException, SystemException {\n\n\t\tString fileName = FileUtil.stripExtension(file.getName());\n\n\t\tString name = getName(fileName);\n\n\t\tString templateKey = getKey(fileName);\n\n\t\tDDMTemplate ddmTemplate = DDMTemplateLocalServiceUtil.fetchTemplate(\n\t\t\tgroupId, classNameId, templateKey);\n\n\t\tif (ddmTemplate != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM template with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMTemplateLocalServiceUtil.deleteTemplate(ddmTemplate);\n\t\t}\n\n\t\tDDMTemplateLocalServiceUtil.addTemplate(\n\t\t\tuserId, groupId, classNameId, 0, templateKey, getMap(name), null,\n\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK,\n\t\t\tgetDDMTemplateLanguage(name), script, false, false,\n\t\t\tStringPool.BLANK, null, serviceContext);\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tgetKey(name));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, DDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class), getKey(name),\n\t\t\tgetMap(name), null, StringUtil.read(inputStream),\n\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDLDisplayTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLFormTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME);\n\t}","id":103011,"modified_method":"protected void addDDMStructures(String fileName, InputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString structureKey = getKey(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tstructureKey);\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, DDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID,\n\t\t\tPortalUtil.getClassNameId(DDLRecordSet.class), structureKey,\n\t\t\tgetMap(name), null, StringUtil.read(inputStream),\n\t\t\tPropsUtil.get(PropsKeys.DYNAMIC_DATA_LISTS_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDLDisplayTemplates(\n\t\t\tfileName, ddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_DISPLAY_TEMPLATE_DIR_NAME);\n\n\t\taddDDLFormTemplates(\n\t\t\tfileName, ddmStructure.getStructureKey(),\n\t\t\t_DDL_STRUCTURE_FORM_TEMPLATE_DIR_NAME);\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDLFormTemplates(String ddmStructureKey, String dirName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tFile dir = new File(\n\t\t\t_resourcesDir,\n\t\t\tdirName + \"/\" + ddmStructure.getName(Locale.getDefault()));\n\n\t\tif (!dir.isDirectory() || !dir.canRead()) {\n\t\t\treturn;\n\t\t}\n\n\t\tFile[] files = listFiles(dir);\n\n\t\tfor (File file : files) {\n\t\t\tString script = StringUtil.read(getInputStream(file));\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), file.getName(), \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","id":103012,"modified_method":"protected void addDDLFormTemplates(\n\t\t\tString fileName, String ddmStructureKey, String dirName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tFile dir = new File(_resourcesDir,dirName + \"/\" + fileName);\n\n\t\tif (!dir.isDirectory() || !dir.canRead()) {\n\t\t\treturn;\n\t\t}\n\n\t\tFile[] files = listFiles(dir);\n\n\t\tfor (File file : files) {\n\t\t\tString script = StringUtil.read(getInputStream(file));\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), file.getName(), \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tString name = FileUtil.stripExtension(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tgetKey(name));\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class), getKey(name),\n\t\t\tgetMap(name), null, xsd,\n\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + name);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + name);\n\t\t}\n\t}","id":103013,"modified_method":"protected void addDDMStructures(\n\t\t\tString parentDDMStructureKey, String fileName,\n\t\t\tInputStream inputStream)\n\t\tthrows Exception {\n\n\t\tfileName = FileUtil.stripExtension(fileName);\n\n\t\tString name = getName(fileName);\n\n\t\tString structureKey = getKey(fileName);\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(JournalArticle.class),\n\t\t\tstructureKey);\n\n\t\tif (ddmStructure != null) {\n\t\t\tif (!developerModeEnabled) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"DDM structure with name \" + name + \" and version \" +\n\t\t\t\t\t\t\tversion + \" already exists\");\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tDDMStructureLocalServiceUtil.deleteDDMStructure(ddmStructure);\n\t\t}\n\n\t\tString xsd = StringUtil.read(inputStream);\n\n\t\tif (isJournalStructureXSD(xsd)) {\n\t\t\txsd = JournalConverterUtil.getDDMXSD(xsd);\n\t\t}\n\n\t\tsetServiceContext(fileName);\n\n\t\tddmStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\tuserId, groupId, parentDDMStructureKey,\n\t\t\tPortalUtil.getClassNameId(JournalArticle.class), structureKey,\n\t\t\tgetMap(name), null, xsd,\n\t\t\tPropsUtil.get(PropsKeys.JOURNAL_ARTICLE_STORAGE_TYPE),\n\t\t\tDDMStructureConstants.TYPE_DEFAULT, serviceContext);\n\n\t\taddDDMTemplates(\n\t\t\tddmStructure.getStructureKey(),\n\t\t\t_JOURNAL_DDM_TEMPLATES_DIR_NAME + fileName);\n\n\t\tif (Validator.isNull(parentDDMStructureKey)) {\n\t\t\taddDDMStructures(\n\t\t\t\tddmStructure.getStructureKey(),\n\t\t\t\t_JOURNAL_DDM_STRUCTURES_DIR_NAME + fileName);\n\t\t}\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addDDLDisplayTemplates(\n\t\t\tString ddmStructureKey, String dirName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tFile dir = new File(\n\t\t\t_resourcesDir,\n\t\t\tdirName + \"/\" + ddmStructure.getName(Locale.getDefault()));\n\n\t\tif (!dir.isDirectory() || !dir.canRead()) {\n\t\t\treturn;\n\t\t}\n\n\t\tFile[] files = listFiles(dir);\n\n\t\tfor (File file : files) {\n\t\t\tString language = getDDMTemplateLanguage(file.getName());\n\n\t\t\tString script = StringUtil.read(getInputStream(file));\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), file.getName(),\n\t\t\t\tlanguage, script, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY,\n\t\t\t\tnull);\n\t\t}\n\t}","id":103014,"modified_method":"protected void addDDLDisplayTemplates(\n\t\t\tString fileName, String ddmStructureKey, String dirName)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tFile dir = new File(_resourcesDir, dirName + \"/\" + fileName);\n\n\t\tif (!dir.isDirectory() || !dir.canRead()) {\n\t\t\treturn;\n\t\t}\n\n\t\tFile[] files = listFiles(dir);\n\n\t\tfor (File file : files) {\n\t\t\tString language = getDDMTemplateLanguage(file.getName());\n\n\t\t\tString script = StringUtil.read(getInputStream(file));\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), file.getName(),\n\t\t\t\tlanguage, script, DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY,\n\t\t\t\tnull);\n\t\t}\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tprotected void addDDLDisplayTemplates(\n\t\t\tString ddmStructureKey, String displayTemplateDir)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(6);\n\n\t\tsb.append(resourcesDir);\n\t\tsb.append(displayTemplateDir);\n\t\tsb.append(\"/\");\n\t\tsb.append(ddmStructure.getName(Locale.getDefault()));\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath,\n\t\t\t\tgetDDMTemplateLanguage(resourcePath), script,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK);\n\t\t}\n\t}","id":103015,"modified_method":"@Override\n\tprotected void addDDLDisplayTemplates(\n\t\t\tString fileName, String ddmStructureKey, String displayTemplateDir)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(4);\n\n\t\tsb.append(resourcesDir);\n\t\tsb.append(displayTemplateDir);\n\t\tsb.append(\"/\");\n\t\tsb.append(fileName);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath,\n\t\t\t\tgetDDMTemplateLanguage(resourcePath), script,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_TYPE_DISPLAY, StringPool.BLANK);\n\t\t}\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n\tprotected void addDDLFormTemplates(\n\t\t\tString ddmStructureKey, String formTemplateDir)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(6);\n\n\t\tsb.append(resourcesDir);\n\t\tsb.append(formTemplateDir);\n\t\tsb.append(\"/\");\n\t\tsb.append(ddmStructure.getName(Locale.getDefault()));\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath, \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","id":103016,"modified_method":"@Override\n\tprotected void addDDLFormTemplates(\n\t\t\tString fileName, String ddmStructureKey, String formTemplateDir)\n\t\tthrows Exception {\n\n\t\tDDMStructure ddmStructure = DDMStructureLocalServiceUtil.getStructure(\n\t\t\tgroupId, PortalUtil.getClassNameId(DDLRecordSet.class),\n\t\t\tddmStructureKey);\n\n\t\tStringBundler sb = new StringBundler(4);\n\n\t\tsb.append(resourcesDir);\n\t\tsb.append(formTemplateDir);\n\t\tsb.append(\"/\");\n\t\tsb.append(fileName);\n\n\t\tSet<String> resourcePaths = servletContext.getResourcePaths(\n\t\t\tsb.toString());\n\n\t\tif (resourcePaths == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String resourcePath : resourcePaths) {\n\t\t\tURL url = servletContext.getResource(resourcePath);\n\n\t\t\tURLConnection urlConnection = url.openConnection();\n\n\t\t\tString script = StringUtil.read(urlConnection.getInputStream());\n\n\t\t\tif (Validator.isNull(script)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taddDDMTemplate(\n\t\t\t\tgroupId, ddmStructure.getStructureId(), resourcePath, \"xsd\",\n\t\t\t\tscript, DDMTemplateConstants.TEMPLATE_TYPE_FORM,\n\t\t\t\tDDMTemplateConstants.TEMPLATE_MODE_CREATE);\n\t\t}\n\t}","commit_id":"02638d626aa6fde2efeca1276989d0ab5fb57e0d","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public DatabaseLookupMessage(I2PAppContext context, boolean locallyCreated) {\n        super(context);\n        setSearchKey(null);\n        setFrom(null);\n        setDontIncludePeers(null);\n        \n        context.statManager().createRateStat(\"router.throttleNetDbDoSSend\", \"How many netDb lookup messages we are sending during a period with a DoS detected\", \"Throttle\", new long[] { 60*1000, 10*60*1000, 60*60*1000, 24*60*60*1000 });\n    \n        // only check DoS generation if we are creating the message...\n        if (locallyCreated) {\n            // we do this in the writeMessage so we know that we have all the data\n            int dosCount = detectDoS(context);\n            if (dosCount > 0) {\n                _log.log(Log.CRIT, \"Are we flooding the network with NetDb messages?  (\" + dosCount + \" messages so far)\", new Exception(\"Flood cause\"));\n            }\n        }\n    }","id":103017,"modified_method":"public DatabaseLookupMessage(I2PAppContext context, boolean locallyCreated) {\n        super(context);\n        setSearchKey(null);\n        setFrom(null);\n        setDontIncludePeers(null);\n        \n        context.statManager().createRateStat(\"router.throttleNetDbDoSSend\", \"How many netDb lookup messages we are sending during a period with a DoS detected\", \"Throttle\", new long[] { 60*1000, 10*60*1000, 60*60*1000, 24*60*60*1000 });\n    \n        // only check DoS generation if we are creating the message...\n        if (locallyCreated) {\n            // we do this in the writeMessage so we know that we have all the data\n            int dosCount = detectDoS(context);\n            if (dosCount > 0) {\n                if (_log.shouldLog(Log.WARN))\n                    _log.warn(\"Are we flooding the network with NetDb messages?  (\" + dosCount \n                              + \" messages so far)\", new Exception(\"Flood cause\"));\n            }\n        }\n    }","commit_id":"687ca781ab6f336f2a834c3084bf719dc8e35308","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Specify how far away from the \"correct\" time the computer is - a positive\n     * value means that the system time is slow, while a negative value means the system time is fast.\n     * Warning - overridden in RouterClock\n     *\n     * @param offsetMs the delta from System.currentTimeMillis() (NOT the delta from now())\n     */\n    public synchronized void setOffset(long offsetMs, boolean force) {\n        long delta = offsetMs - _offset;\n        if (!force) {\n            if ((offsetMs > MAX_OFFSET) || (offsetMs < 0 - MAX_OFFSET)) {\n                getLog().error(\"Maximum offset shift exceeded [\" + offsetMs + \"], NOT HONORING IT\");\n                return;\n            }\n            \n            // only allow substantial modifications before the first 10 minutes\n            if (_alreadyChanged && (System.currentTimeMillis() - _startedOn > 10 * 60 * 1000)) {\n                if ( (delta > MAX_LIVE_OFFSET) || (delta < 0 - MAX_LIVE_OFFSET) ) {\n                    getLog().log(Log.CRIT, \"The clock has already been updated, but you want to change it by \"\n                                           + delta + \" to \" + offsetMs + \"?  Did something break?\");\n                    return;\n                }\n            }\n            \n            if ((delta < MIN_OFFSET_CHANGE) && (delta > 0 - MIN_OFFSET_CHANGE)) {\n                getLog().debug(\"Not changing offset since it is only \" + delta + \"ms\");\n                _alreadyChanged = true;\n                return;\n            }\n        }\n        if (_alreadyChanged) {\n            if (delta > 15*1000)\n                getLog().log(Log.CRIT, \"Updating clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n            else if (getLog().shouldLog(Log.INFO))\n                getLog().info(\"Updating clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n            \n            if (!_statCreated) {\n                _context.statManager().createRequiredRateStat(\"clock.skew\", \"Clock step adjustment (ms)\", \"Clock\", new long[] { 10*60*1000, 3*60*60*1000, 24*60*60*1000 });\n                _statCreated = true;\n            }\n            _context.statManager().addRateData(\"clock.skew\", delta, 0);\n        } else {\n            getLog().log(Log.INFO, \"Initializing clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n        }\n        _alreadyChanged = true;\n        _offset = offsetMs;\n        fireOffsetChanged(delta);\n    }","id":103018,"modified_method":"/**\n     * Specify how far away from the \"correct\" time the computer is - a positive\n     * value means that the system time is slow, while a negative value means the system time is fast.\n     * Warning - overridden in RouterClock\n     *\n     * @param offsetMs the delta from System.currentTimeMillis() (NOT the delta from now())\n     */\n    public synchronized void setOffset(long offsetMs, boolean force) {\n        long delta = offsetMs - _offset;\n        if (!force) {\n            if ((offsetMs > MAX_OFFSET) || (offsetMs < 0 - MAX_OFFSET)) {\n                Log log = getLog();\n                if (log.shouldLog(Log.WARN))\n                    log.warn(\"Maximum offset shift exceeded [\" + offsetMs + \"], NOT HONORING IT\");\n                return;\n            }\n            \n            // only allow substantial modifications before the first 10 minutes\n            if (_alreadyChanged && (System.currentTimeMillis() - _startedOn > 10 * 60 * 1000)) {\n                if ( (delta > MAX_LIVE_OFFSET) || (delta < 0 - MAX_LIVE_OFFSET) ) {\n                    Log log = getLog();\n                    if (log.shouldLog(Log.WARN))\n                        log.warn(\"The clock has already been updated, but you want to change it by \"\n                                           + delta + \" to \" + offsetMs + \"?  Did something break?\");\n                    return;\n                }\n            }\n            \n            if ((delta < MIN_OFFSET_CHANGE) && (delta > 0 - MIN_OFFSET_CHANGE)) {\n                Log log = getLog();\n                if (log.shouldLog(Log.DEBUG))\n                    log.debug(\"Not changing offset since it is only \" + delta + \"ms\");\n                _alreadyChanged = true;\n                return;\n            }\n        }\n        if (_alreadyChanged) {\n            if (delta > 15*1000)\n                getLog().log(Log.CRIT, \"Updating clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n            else if (getLog().shouldLog(Log.INFO))\n                getLog().info(\"Updating clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n            \n            if (!_statCreated) {\n                _context.statManager().createRequiredRateStat(\"clock.skew\", \"Clock step adjustment (ms)\", \"Clock\", new long[] { 10*60*1000, 3*60*60*1000, 24*60*60*1000 });\n                _statCreated = true;\n            }\n            _context.statManager().addRateData(\"clock.skew\", delta, 0);\n        } else {\n            Log log = getLog();\n            if (log.shouldLog(Log.INFO))\n                log.info(\"Initializing clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms\");\n        }\n        _alreadyChanged = true;\n        _offset = offsetMs;\n        fireOffsetChanged(delta);\n    }","commit_id":"06b9b6a7fb1d89553ab3d8b0af6bb0bc602c9a88","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * @since 0.7.12\n     * @param offsetMs the delta from System.currentTimeMillis() (NOT the delta from now())\n     */\n    private synchronized void setOffset(long offsetMs, boolean force, int stratum) {\n        long delta = offsetMs - _offset;\n        if (!force) {\n            if ((offsetMs > MAX_OFFSET) || (offsetMs < 0 - MAX_OFFSET)) {\n                getLog().error(\"Maximum offset shift exceeded [\" + offsetMs + \"], NOT HONORING IT\");\n                return;\n            }\n            \n            // only allow substantial modifications before the first 10 minutes\n            if (_alreadyChanged && (System.currentTimeMillis() - _startedOn > 10 * 60 * 1000)) {\n                if ( (delta > MAX_LIVE_OFFSET) || (delta < 0 - MAX_LIVE_OFFSET) ) {\n                    getLog().log(Log.WARN, \"The clock has already been updated, ignoring request to change it by \"\n                                           + delta + \" to \" + offsetMs, new Exception());\n                    return;\n                }\n            }\n            \n            // let's be perfect\n            if (delta == 0) {\n                getLog().debug(\"Not changing offset, delta=0\");\n                _alreadyChanged = true;\n                return;\n            }\n\n            // only listen to a worse stratum if it's been a while\n            if (_alreadyChanged && stratum > _lastStratum &&\n                System.currentTimeMillis() - _lastChanged < MIN_DELAY_FOR_WORSE_STRATUM) {\n                getLog().debug(\"Ignoring update from a stratum \" + stratum +\n                              \" clock, we recently had an update from a stratum \" + _lastStratum + \" clock\");\n                return;\n            }\n            \n            // If so configured, check sanity of proposed clock offset\n            if (_context.getBooleanPropertyDefaultTrue(\"router.clockOffsetSanityCheck\") &&\n                _alreadyChanged) {\n\n                // Try calculating peer clock skew\n                long currentPeerClockSkew = ((RouterContext)_context).commSystem().getFramedAveragePeerClockSkew(50);\n\n                    // Predict the effect of applying the proposed clock offset\n                    long predictedPeerClockSkew = currentPeerClockSkew + delta;\n\n                    // Fail sanity check if applying the offset would increase peer clock skew\n                    if ((Math.abs(predictedPeerClockSkew) > (Math.abs(currentPeerClockSkew) + 5*1000)) ||\n                        (Math.abs(predictedPeerClockSkew) > 20*1000)) {\n\n                        getLog().error(\"Ignoring clock offset \" + offsetMs + \"ms (current \" + _offset +\n                                       \"ms) since it would increase peer clock skew from \" + currentPeerClockSkew +\n                                       \"ms to \" + predictedPeerClockSkew + \"ms. Bad time server?\");\n                        return;\n                    } else {\n                        getLog().debug(\"Approving clock offset \" + offsetMs + \"ms (current \" + _offset +\n                                       \"ms) since it would decrease peer clock skew from \" + currentPeerClockSkew +\n                                       \"ms to \" + predictedPeerClockSkew + \"ms.\");\n                    }\n            } // check sanity\n        }\n\n        // In first minute, allow a lower (better) stratum to do a step adjustment after\n        // a previous step adjustment.\n        // This allows NTP to trump a peer offset after a soft restart\n        if (_alreadyChanged &&\n            (stratum >= _lastStratum || _startedOn - System.currentTimeMillis() > 60*1000)) {\n            // Update the target offset, slewing will take care of the rest\n            if (delta > 15*1000)\n                getLog().logAlways(Log.WARN, \"Warning - Updating target clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms, Stratum \" + stratum);\n            else if (getLog().shouldLog(Log.INFO))\n                getLog().info(\"Updating target clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms, Stratum \" + stratum);\n            \n            if (!_statCreated) {\n                _context.statManager().createRequiredRateStat(\"clock.skew\", \"Clock step adjustment (ms)\", \"Clock\", new long[] { 10*60*1000, 3*60*60*1000, 24*60*60*1000 });\n                _statCreated = true;\n            }\n            _context.statManager().addRateData(\"clock.skew\", delta);\n            _desiredOffset = offsetMs;\n        } else {\n            getLog().log(Log.INFO, \"Initializing clock offset to \" + offsetMs + \"ms, Stratum \" + stratum);\n            _alreadyChanged = true;\n            _offset = offsetMs;\n            _desiredOffset = offsetMs;\n            // this is used by the JobQueue\n            fireOffsetChanged(delta);\n        }\n        _lastChanged = System.currentTimeMillis();\n        _lastStratum = stratum;\n\n    }","id":103019,"modified_method":"/**\n     * @since 0.7.12\n     * @param offsetMs the delta from System.currentTimeMillis() (NOT the delta from now())\n     */\n    private synchronized void setOffset(long offsetMs, boolean force, int stratum) {\n        long delta = offsetMs - _offset;\n        if (!force) {\n            if ((offsetMs > MAX_OFFSET) || (offsetMs < 0 - MAX_OFFSET)) {\n                Log log = getLog();\n                if (log.shouldLog(Log.WARN))\n                    log.warn(\"Maximum offset shift exceeded [\" + offsetMs + \"], NOT HONORING IT\");\n                return;\n            }\n            \n            // only allow substantial modifications before the first 10 minutes\n            if (_alreadyChanged && (System.currentTimeMillis() - _startedOn > 10 * 60 * 1000)) {\n                if ( (delta > MAX_LIVE_OFFSET) || (delta < 0 - MAX_LIVE_OFFSET) ) {\n                    Log log = getLog();\n                    if (log.shouldLog(Log.WARN))\n                        log.warn(\"The clock has already been updated, ignoring request to change it by \"\n                                           + delta + \" to \" + offsetMs, new Exception());\n                    return;\n                }\n            }\n            \n            // let's be perfect\n            if (delta == 0) {\n                getLog().debug(\"Not changing offset, delta=0\");\n                _alreadyChanged = true;\n                return;\n            }\n\n            // only listen to a worse stratum if it's been a while\n            if (_alreadyChanged && stratum > _lastStratum &&\n                System.currentTimeMillis() - _lastChanged < MIN_DELAY_FOR_WORSE_STRATUM) {\n                Log log = getLog();\n                if (log.shouldLog(Log.DEBUG))\n                    log.debug(\"Ignoring update from a stratum \" + stratum +\n                              \" clock, we recently had an update from a stratum \" + _lastStratum + \" clock\");\n                return;\n            }\n            \n            // If so configured, check sanity of proposed clock offset\n            if (_context.getBooleanPropertyDefaultTrue(\"router.clockOffsetSanityCheck\") &&\n                _alreadyChanged) {\n\n                // Try calculating peer clock skew\n                long currentPeerClockSkew = ((RouterContext)_context).commSystem().getFramedAveragePeerClockSkew(50);\n\n                    // Predict the effect of applying the proposed clock offset\n                    long predictedPeerClockSkew = currentPeerClockSkew + delta;\n\n                    // Fail sanity check if applying the offset would increase peer clock skew\n                    if ((Math.abs(predictedPeerClockSkew) > (Math.abs(currentPeerClockSkew) + 5*1000)) ||\n                        (Math.abs(predictedPeerClockSkew) > 20*1000)) {\n\n                        getLog().error(\"Ignoring clock offset \" + offsetMs + \"ms (current \" + _offset +\n                                       \"ms) since it would increase peer clock skew from \" + currentPeerClockSkew +\n                                       \"ms to \" + predictedPeerClockSkew + \"ms. Bad time server?\");\n                        return;\n                    } else {\n                        Log log = getLog();\n                        if (log.shouldLog(Log.DEBUG))\n                            log.debug(\"Approving clock offset \" + offsetMs + \"ms (current \" + _offset +\n                                       \"ms) since it would decrease peer clock skew from \" + currentPeerClockSkew +\n                                       \"ms to \" + predictedPeerClockSkew + \"ms.\");\n                    }\n            } // check sanity\n        }\n\n        // In first minute, allow a lower (better) stratum to do a step adjustment after\n        // a previous step adjustment.\n        // This allows NTP to trump a peer offset after a soft restart\n        if (_alreadyChanged &&\n            (stratum >= _lastStratum || _startedOn - System.currentTimeMillis() > 60*1000)) {\n            // Update the target offset, slewing will take care of the rest\n            if (delta > 15*1000)\n                getLog().logAlways(Log.WARN, \"Warning - Updating target clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms, Stratum \" + stratum);\n            else if (getLog().shouldLog(Log.INFO))\n                getLog().info(\"Updating target clock offset to \" + offsetMs + \"ms from \" + _offset + \"ms, Stratum \" + stratum);\n            \n            if (!_statCreated) {\n                _context.statManager().createRequiredRateStat(\"clock.skew\", \"Clock step adjustment (ms)\", \"Clock\", new long[] { 10*60*1000, 3*60*60*1000, 24*60*60*1000 });\n                _statCreated = true;\n            }\n            _context.statManager().addRateData(\"clock.skew\", delta);\n            _desiredOffset = offsetMs;\n        } else {\n            Log log = getLog();\n            if (log.shouldLog(Log.INFO))\n                log.info(\"Initializing clock offset to \" + offsetMs + \"ms, Stratum \" + stratum);\n            _alreadyChanged = true;\n            _offset = offsetMs;\n            _desiredOffset = offsetMs;\n            // this is used by the JobQueue\n            fireOffsetChanged(delta);\n        }\n        _lastChanged = System.currentTimeMillis();\n        _lastStratum = stratum;\n\n    }","commit_id":"06b9b6a7fb1d89553ab3d8b0af6bb0bc602c9a88","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void eventOccurred(Connection con) {\n            _log.log(Log.ERROR, \"Yell at jrandom: Event occurred on \" + con, new Exception(\"source\"));\n        }","id":103020,"modified_method":"public void eventOccurred(Connection con) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Yell at jrandom: Event occurred on \" + con, new Exception(\"source\"));\n        }","commit_id":"b80f70fc54aa8c0f9229bfc90e87c31c86e4890a","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"add-proxy: %s\", operation);\n\n                    Proxy proxy = new Proxy(operation);\n                    modcluster.addProxy(proxy.host, proxy.port);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103021,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"add-proxy: %s\", operation);\n\n                    Proxy proxy = new Proxy(operation);\n                    modcluster.addProxy(proxy.host, proxy.port);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.disable();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103022,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.disable();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"disable-context: %s\", operation);\n\n                    ContextHost contexthost = new ContextHost(operation);\n\n                    modcluster.disableContext(contexthost.webhost, contexthost.webcontext);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103023,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"disable-context: %s\", operation);\n\n                    ContextHost contexthost = new ContextHost(operation);\n\n                    modcluster.disableContext(contexthost.webhost, contexthost.webcontext);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.enable();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103024,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.enable();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"enable-context: %s\", operation);\n\n                    ContextHost contexthost = new ContextHost(operation);\n                    modcluster.enableContext(contexthost.webhost, contexthost.webcontext);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103025,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"enable-context: %s\", operation);\n\n                    ContextHost contexthost = new ContextHost(operation);\n                    modcluster.enableContext(contexthost.webhost, contexthost.webcontext);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyConfiguration();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ProxyConfiguration %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                            result.add(map.get(addr[i]));\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103026,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyConfiguration();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ProxyConfiguration %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                            result.add(map.get(addr[i]));\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyInfo();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ProxyInfo %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                            result.add(map.get(addr[i]));\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103027,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyInfo();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ProxyInfo %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                            result.add(map.get(addr[i]));\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyInfo();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ListProxies %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103028,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    Map<InetSocketAddress, String> map = modcluster.getProxyInfo();\n                    ROOT_LOGGER.debugf(\"Mod_cluster ListProxies %s\", map);\n                    if (!map.isEmpty()) {\n                        final ModelNode result = new ModelNode();\n                        Object[] addr = map.keySet().toArray();\n                        for (int i = 0; i < addr.length; i++) {\n                            InetSocketAddress address = (InetSocketAddress) addr[i];\n                            result.add(address.getHostName() + \":\" + address.getPort());\n                        }\n                        context.getResult().set(result);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.refresh();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103029,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.refresh();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"remove-proxy: %s\", operation);\n\n                    Proxy proxy = new Proxy(operation);\n                    modcluster.removeProxy(proxy.host, proxy.port);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103030,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"remove-proxy: %s\", operation);\n\n                    Proxy proxy = new Proxy(operation);\n                    modcluster.removeProxy(proxy.host, proxy.port);\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.reset();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103031,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    modcluster.reset();\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    List<Property> list = operation.asPropertyList();\n                    Iterator<Property> it= list.iterator();\n                    int waittime = 10;\n                    while(it.hasNext()) {\n                        Property prop= it.next();\n                        if (prop.getName().equals(\"waittime\")) {\n                            waittime = Integer.parseInt(ContextHost.RemoveQuotes(prop.getValue().toString()));\n                        }\n                    }\n                    modcluster.stop(waittime);\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103032,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    List<Property> list = operation.asPropertyList();\n                    Iterator<Property> it= list.iterator();\n                    int waittime = 10;\n                    while(it.hasNext()) {\n                        Property prop= it.next();\n                        if (prop.getName().equals(\"waittime\")) {\n                            waittime = Integer.parseInt(ContextHost.RemoveQuotes(prop.getValue().toString()));\n                        }\n                    }\n                    modcluster.stop(waittime);\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer()) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"stop-context: %s\", operation);\n                    ContextHost contexthost = new ContextHost(operation);\n\n                    modcluster.stopContext(contexthost.webhost, contexthost.webcontext, contexthost.waittime);\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","id":103033,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation)\n            throws OperationFailedException {\n        if (context.isNormalServer() && context.getServiceRegistry(false).getService(ModClusterService.NAME)!=null) {\n            context.addStep(new OperationStepHandler() {\n                @Override\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    ServiceController<?> controller = context.getServiceRegistry(false).getService(ModClusterService.NAME);\n                    ModCluster modcluster = (ModCluster) controller.getValue();\n                    ROOT_LOGGER.debugf(\"stop-context: %s\", operation);\n                    ContextHost contexthost = new ContextHost(operation);\n\n                    modcluster.stopContext(contexthost.webhost, contexthost.webcontext, contexthost.waittime);\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n\n        context.completeStep();\n    }","commit_id":"35f39b7ad657e7dc2feb6ea75b6c4a0a1adf55c6","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\trenderer.batch.begin();\r\n\t\trenderer.batch.drawText( renderer.font, \"Keys (w), (a), (d) to fly\", 0, app.getGraphics().getHeight(), Color.WHITE);\r\n\t\trenderer.batch.end();\r\n\t}","id":103034,"modified_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\tif( renderer.batch != null )\r\n\t\t{\r\n\t\t\trenderer.batch.begin();\r\n\t\t\trenderer.batch.drawText( renderer.font, \"Keys (w), (a), (d) to fly\", 0, app.getGraphics().getHeight(), Color.WHITE);\r\n\t\t\trenderer.batch.end();\r\n\t\t}\r\n\t}","commit_id":"b9abe264eb7cb8e19e2e20daea8d47dcdf3e5b23","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void render( Application app )\r\n\t{\r\n\t\tif( m_platform.getType() == BodyType.KinematicBody )\r\n\t\t{\r\n\t\t\tVector2 p = m_platform.getTransform().getPosition();\r\n\t\t\tVector2 v = m_platform.getLinearVelocity();\r\n\t\t\t\r\n\t\t\tif( (p.x < -10 && v.x < 0 ) ||\r\n\t\t\t\t(p.x > 10 && v.x > 0 ) )\r\n\t\t\t{\r\n\t\t\t\tv.x = -v.x;\r\n\t\t\t\tm_platform.setLinearVelocity(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\trenderer.batch.begin();\r\n\t\trenderer.batch.drawText( renderer.font, \"Keys: (d) dynamic, (s) static, (k) kinematic\", 0, app.getGraphics().getHeight(), Color.WHITE );\r\n\t\trenderer.batch.end();\r\n\t}","id":103035,"modified_method":"@Override\r\n\tpublic void render( Application app )\r\n\t{\r\n\t\tif( m_platform.getType() == BodyType.KinematicBody )\r\n\t\t{\r\n\t\t\tVector2 p = m_platform.getTransform().getPosition();\r\n\t\t\tVector2 v = m_platform.getLinearVelocity();\r\n\t\t\t\r\n\t\t\tif( (p.x < -10 && v.x < 0 ) ||\r\n\t\t\t\t(p.x > 10 && v.x > 0 ) )\r\n\t\t\t{\r\n\t\t\t\tv.x = -v.x;\r\n\t\t\t\tm_platform.setLinearVelocity(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\tif( renderer.batch != null )\r\n\t\t{\r\n\t\t\trenderer.batch.begin();\r\n\t\t\trenderer.batch.drawText( renderer.font, \"Keys: (d) dynamic, (s) static, (k) kinematic\", 0, app.getGraphics().getHeight(), Color.WHITE );\r\n\t\t\trenderer.batch.end();\r\n\t\t}\r\n\t}","commit_id":"b9abe264eb7cb8e19e2e20daea8d47dcdf3e5b23","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\trenderer.batch.begin();\r\n\t\trenderer.batch.drawText( renderer.font, \"Keys: (l) limits, (m) motors, (s) speed\", 0, app.getGraphics().getHeight(), Color.WHITE );\r\n\t\trenderer.batch.drawText( renderer.font, \"Motor Force = \" + m_joint.getMotorForce(), 0, app.getGraphics().getHeight() - 15, Color.WHITE );\r\n\t\trenderer.batch.end();\r\n\t}","id":103036,"modified_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\tif( renderer.batch != null )\r\n\t\t{\r\n\t\t\trenderer.batch.begin();\r\n\t\t\trenderer.batch.drawText( renderer.font, \"Keys: (l) limits, (m) motors, (s) speed\", 0, app.getGraphics().getHeight(), Color.WHITE );\r\n\t\t\trenderer.batch.drawText( renderer.font, \"Motor Force = \" + m_joint.getMotorForce(), 0, app.getGraphics().getHeight() - 15, Color.WHITE );\r\n\t\t\trenderer.batch.end();\r\n\t\t}\r\n\t}","commit_id":"b9abe264eb7cb8e19e2e20daea8d47dcdf3e5b23","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic boolean keyDown(int keycode) \r\n\t{\r\n\t\tif( keycode == Keys.KEYCODE_SPACE )\r\n\t\t{\r\n\t\t\ttests[testIndex].dispose( app );\r\n\t\t\ttestIndex++;\r\n\t\t\tif( testIndex >= tests.length )\r\n\t\t\t\ttestIndex = 0;\r\n\t\t\tBox2DTest test = tests[testIndex];\r\n\t\t\ttest.surfaceCreated( app );\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}","id":103037,"modified_method":"@Override\r\n\tpublic boolean keyDown(int keycode) \r\n\t{\r\n\t\tif( keycode == Keys.KEYCODE_SPACE )\r\n\t\t{\r\n\t\t\tapp.log( \"TestCollection\", \"disposing test '\" + tests[testIndex].getClass().getName() );\r\n\t\t\ttests[testIndex].dispose( app );\r\n\t\t\ttestIndex++;\r\n\t\t\tif( testIndex >= tests.length )\r\n\t\t\t\ttestIndex = 0;\r\n\t\t\tBox2DTest test = tests[testIndex];\r\n\t\t\ttest.surfaceCreated( app );\r\n\t\t\tapp.log( \"TestCollection\", \"created test '\" + tests[testIndex].getClass().getName() );\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}","commit_id":"b9abe264eb7cb8e19e2e20daea8d47dcdf3e5b23","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\trenderer.batch.begin();\r\n\t\trenderer.batch.drawText( renderer.font, \"Press: (,) to launch a bullet\", 0, app.getGraphics().getHeight(), Color.WHITE);\r\n\t\trenderer.batch.end();\r\n\t}","id":103038,"modified_method":"public void render( Application app )\r\n\t{\r\n\t\tsuper.render( app );\r\n\t\t\r\n\t\tif( renderer.batch != null )\r\n\t\t{\r\n\t\t\trenderer.batch.begin();\r\n\t\t\trenderer.batch.drawText( renderer.font, \"Press: (,) to launch a bullet\", 0, app.getGraphics().getHeight(), Color.WHITE);\r\n\t\t\trenderer.batch.end();\r\n\t\t}\r\n\t}","commit_id":"b9abe264eb7cb8e19e2e20daea8d47dcdf3e5b23","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void create () {\r\n\t\t// POT image, mananged\r\n\t\tpotTexture = new Texture(new URLHandle(\"http://libgdx.badlogicgames.com/bob.png\"));\r\n\r\n\t\t// non-POT image, not managed!\r\n\t\tPixmap pixmap = new Pixmap(new URLHandle(\"http://libgdx.badlogicgames.com/libgdx.png\"));\r\n\t\tint width = MathUtils.nextPowerOfTwo(pixmap.getWidth());\r\n\t\tint height = MathUtils.nextPowerOfTwo(pixmap.getHeight());\r\n\t\tPixmap potPixmap = new Pixmap(width, height, pixmap.getFormat());\r\n\t\tpotPixmap.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());\r\n\t\tnonPotTexture = new TextureRegion(new Texture(potPixmap), 0, 0, pixmap.getWidth(), pixmap.getHeight());\r\n\t\tpixmap.dispose();\r\n\t\tpotPixmap.dispose();\r\n\r\n\t\tbatch = new SpriteBatch();\r\n\t}","id":103039,"modified_method":"@Override\r\n\tpublic void create () {\r\n\t\tnew Thread(new Runnable() {\r\n\t\t\t/**\r\n\t\t\t * Downloads the content of the specified url to the array. The\r\n\t\t\t * array has to be big enough.\r\n\t\t\t */\r\n\t\t\tprivate int download(byte[] out, String url) {\r\n\t\t\t\tInputStream in = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tHttpURLConnection conn = null;\r\n\t\t\t\t\tconn = (HttpURLConnection)new URL(url).openConnection();\r\n\t\t\t\t\tconn.setDoInput(true);\r\n\t\t\t\t\tconn.setDoOutput(false);\r\n\t\t\t\t\tconn.setUseCaches(true);\r\n\t\t\t\t\tconn.connect();\r\n\t\t\t\t\tin = conn.getInputStream();\r\n\t\t\t\t\tint readBytes = 0;\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tint length = in.read(out, readBytes, out.length - readBytes);\r\n\t\t\t\t\t\tif (length == -1) break;\r\n\t\t\t\t\t\tif (length == 0) throw new RuntimeException(\"Buffer to small for downloading content\");\r\n\t\t\t\t\t\treadBytes += length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn readBytes;\r\n\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} finally {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (in != null) in.close();\r\n\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void run () {\r\n\t\t\t\tbyte[] bytes = new byte[200*1024]; // assuming the content is not bigger than 200kb.\r\n\t\t\t\tint numBytes = download(bytes, \"http://www.badlogicgames.com/wordpress/wp-content/uploads/2012/01/badlogic-new.png\");\r\n\t\t\t\tif(numBytes != 0) {\r\n\t\t\t\t\t// load the pixmap, make it a power of two if necessary (not needed for GL ES 2.0!)\r\n\t\t\t\t\tPixmap pixmap = new Pixmap(bytes, 0, numBytes);\r\n\t\t\t\t\tfinal int originalWidth = pixmap.getWidth();\r\n\t\t\t\t\tfinal int originalHeight = pixmap.getHeight();\r\n\t\t\t\t\tint width = MathUtils.nextPowerOfTwo(pixmap.getWidth());\r\n\t\t\t\t\tint height = MathUtils.nextPowerOfTwo(pixmap.getHeight());\r\n\t\t\t\t\tfinal Pixmap potPixmap = new Pixmap(width, height, pixmap.getFormat());\r\n\t\t\t\t\tpotPixmap.drawPixmap(pixmap, 0, 0, 0, 0, pixmap.getWidth(), pixmap.getHeight());\r\n\t\t\t\t\tpixmap.dispose();\r\n\t\t\t\t\tGdx.app.postRunnable(new Runnable() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void run () {\r\n\t\t\t\t\t\t\timage = new TextureRegion(new Texture(potPixmap), 0, 0, originalWidth, originalHeight);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}).start();\r\n\t\t\r\n\t\tfont = new BitmapFont();\r\n\t\tbatch = new SpriteBatch();\r\n\t}","commit_id":"cef99bb76c8059b0e2da4eee5cd978c89a2d65cf","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);\r\n\t\tGdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);\r\n\t\tbatch.begin();\r\n\t\tbatch.draw(potTexture, 100, 100);\r\n\t\tbatch.draw(nonPotTexture, 200, 200);\r\n\t\tbatch.end();\r\n\t}","id":103040,"modified_method":"@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);\r\n\t\tGdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);\r\n\t\t\r\n\t\tif(image != null) {\r\n\t\t\tbatch.begin();\r\n\t\t\tbatch.draw(image, 100, 100);\r\n\t\t\tbatch.end();\r\n\t\t} else {\r\n\t\t\tbatch.begin();\r\n\t\t\tfont.draw(batch, \"Downloading...\", 100, 100);\r\n\t\t\tbatch.end();\r\n\t\t}\r\n\t}","commit_id":"cef99bb76c8059b0e2da4eee5cd978c89a2d65cf","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(1, (float)Math.random(), 0, 1);\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\t\tGdx.gl.glEnable(GL20.GL_TEXTURE_2D);\r\n\t\ttexture.bind(0);\r\n\t\tshader.begin();\r\n\t\tshader.setUniformMatrix(\"u_projView\", matrix);\r\n\t\tshader.setUniformi(\"u_texture\", 0);\r\n\t\tmesh.render(shader, GL20.GL_TRIANGLES);\r\n\t\tshader.end();\r\n\t\t\r\n\t\tbatch.begin();\r\n\t\tfor(Vector2 position: positions) {\r\n\t\t\tbatch.draw(texture, position.x, position.y);\r\n\t\t}\r\n\t\tbatch.end();\r\n\t\tlabel.setText(\"fps:\" + Gdx.graphics.getFramesPerSecond() + \", delta: \" + Gdx.graphics.getDeltaTime());\r\n\t}","id":103041,"modified_method":"@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\t\tGdx.gl.glEnable(GL20.GL_TEXTURE_2D);\r\n\t\ttexture.bind(0);\r\n\t\tshader.begin();\r\n\t\tshader.setUniformMatrix(\"u_projView\", matrix);\r\n\t\tshader.setUniformi(\"u_texture\", 0);\r\n\t\tmesh.render(shader, GL20.GL_TRIANGLES);\r\n\t\tshader.end();\r\n\r\n\t\tif(sprite != null) {\r\n\t\t\tbatch.begin();\r\n\t\t\tsprite.rotate(Gdx.graphics.getDeltaTime() * 45);\r\n\t\t\tfor(Vector2 position: positions) {\r\n\t\t\t\tsprite.setPosition(position.x, position.y);\r\n\t\t\t\tsprite.draw(batch);\r\n\t\t\t}\r\n\t\t\tbatch.end();\r\n\t\t}\r\n\t\tlabel.setText(\"fps:\" + Gdx.graphics.getFramesPerSecond() + \", delta: \" + Gdx.graphics.getDeltaTime());\r\n\t}","commit_id":"d3fecf47d62eb96b4769fd2254784a08078fc045","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void create () {\r\n\t\tlabel = new Label(\"fps:\");\r\n\t\tDocument.get().getBody().appendChild(label.getElement());\r\n\t\t\r\n\t\tString vertexShader = \"attribute vec4 a_position;\\n\" +\r\n\t\t\t\"attribute vec2 a_texCoord0;\\n\" +\r\n\t\t\t\"uniform mat4 u_projView;\\n\" +\r\n\t\t\t\"varying vec4 v_color;\\n\" +\r\n\t\t\t\"varying vec2 v_texCoord;\\n\" +\r\n\t\t\t\"void main() {\\n\" +\r\n\t\t\t\"v_color = vec4(1, 1, 1, 1);\\n\"+\r\n\t\t\t\"v_texCoord = a_texCoord0;\\n\" + \r\n\t\t\t\"gl_Position = u_projView * a_position;\\n\" +\r\n\t\t\t\"}\\n\";\r\n\t\tString fragmentShader = \"#ifdef GL_ES\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"precision mediump float;\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"#endif\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"uniform sampler2D u_texture;\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"varying vec2 v_texCoord;\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"varying vec4 v_color;\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"void main() {\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"gl_FragColor = v_color * texture2D(u_texture, v_texCoord);\\n\" +\r\n\t\t\t\t\t\t\t\t\t \t\"}\\n\";\r\n\t\tshader = new ShaderProgram(vertexShader, fragmentShader);\r\n\t\tif(!shader.isCompiled()) throw new GdxRuntimeException(shader.getLog());\r\n\t\tmesh = new Mesh(VertexDataType.VertexBufferObject, true, 6, 0, VertexAttribute.Position(), VertexAttribute.TexCoords(0));\r\n\t\tmesh.setVertices(new float[] { -0.5f, -0.5f, 0, 0, 1,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  0.5f, -0.5f, 0, 1, 1,\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t  0.5f, 0.5f, 0, 1, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  0.5f, 0.5f, 0, 1, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  -0.5f, 0.5f, 0, 0, 0,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  -0.5f, -0.5f, 0, 0, 1 });\r\n\t\t\r\n\t\tPixmap pixmap = new Pixmap(32, 32, Format.RGBA8888);\r\n\t\tpixmap.setColor(0, 0, 1, 1);\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(1, 0, 0, 1);\r\n\t\tpixmap.drawLine(0, 0, 32, 32);\r\n\t\tpixmap.drawLine(32, 0, 0, 32);\r\n\t\ttexture = new Texture(pixmap);\r\n\t\ttexture.setFilter(TextureFilter.Linear, TextureFilter.Linear);\r\n\t\tpixmap.dispose();\r\n\t\t\r\n\t\tbatch = new SpriteBatch();\r\n\t\tpositions = new ArrayList<Vector2>();\r\n\t\tfor(int i = 0; i < 100; i++) {\r\n\t\t\tpositions.add(new Vector2(MathUtils.random() * Gdx.graphics.getWidth(), MathUtils.random() * Gdx.graphics.getHeight()));\r\n\t\t}\r\n\t}","id":103042,"modified_method":"@Override\r\n\tpublic void create () {\r\n\t\tlabel = new Label(\"fps:\");\r\n\t\tDocument.get().getBody().appendChild(label.getElement());\r\n\r\n\t\tString vertexShader = \"attribute vec4 a_position;\\n\" + \"attribute vec2 a_texCoord0;\\n\" + \"uniform mat4 u_projView;\\n\"\r\n\t\t\t+ \"varying vec4 v_color;\\n\" + \"varying vec2 v_texCoord;\\n\" + \"void main() {\\n\" + \"v_color = vec4(1, 1, 1, 1);\\n\"\r\n\t\t\t+ \"v_texCoord = a_texCoord0;\\n\" + \"gl_Position = u_projView * a_position;\\n\" + \"}\\n\";\r\n\t\tString fragmentShader = \"#ifdef GL_ES\\n\" + \"precision mediump float;\\n\" + \"#endif\\n\" + \"uniform sampler2D u_texture;\\n\"\r\n\t\t\t+ \"varying vec2 v_texCoord;\\n\" + \"varying vec4 v_color;\\n\" + \"void main() {\\n\"\r\n\t\t\t+ \"gl_FragColor = v_color * texture2D(u_texture, v_texCoord);\\n\" + \"}\\n\";\r\n\t\tshader = new ShaderProgram(vertexShader, fragmentShader);\r\n\t\tif (!shader.isCompiled()) throw new GdxRuntimeException(shader.getLog());\r\n\t\tmesh = new Mesh(VertexDataType.VertexBufferObject, true, 6, 0, VertexAttribute.Position(), VertexAttribute.TexCoords(0));\r\n\t\tmesh.setVertices(new float[] {-0.5f, -0.5f, 0, 0, 1, 0.5f, -0.5f, 0, 1, 1, 0.5f, 0.5f, 0, 1, 0, 0.5f, 0.5f, 0, 1, 0, -0.5f,\r\n\t\t\t0.5f, 0, 0, 0, -0.5f, -0.5f, 0, 0, 1});\r\n\r\n\t\tPixmap pixmap = new Pixmap(32, 32, Format.RGBA8888);\r\n\t\tpixmap.setColor(0, 0, 1, 1);\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(1, 0, 0, 1);\r\n\t\tpixmap.drawLine(0, 0, 32, 32);\r\n\t\tpixmap.drawLine(32, 0, 0, 32);\r\n\t\ttexture = new Texture(pixmap);\r\n\t\ttexture.setFilter(TextureFilter.Linear, TextureFilter.Linear);\r\n\t\tpixmap.dispose();\r\n\r\n\t\tfinal ImageElement img = createImage();\r\n\t\timg.setSrc(GWT.getHostPageBaseURL() + \"badlogic.jpg\");\r\n\t\thookOnLoad(img, new EventHandler() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onEvent (NativeEvent e) {\r\n\t\t\t\t// Load image data into the texture object once it's loaded.\r\n\t\t\t\ttexture.dispose();\r\n\t\t\t\tPixmap pixmap = new Pixmap(img);\r\n\t\t\t\ttexture = new Texture(pixmap);\r\n\t\t\t\ttexture.setFilter(TextureFilter.Linear, TextureFilter.Linear);\r\n\t\t\t\tpixmap.dispose();\r\n\t\t\t\tsprite = new Sprite(texture);\r\n\t\t\t\tsprite.setSize(64, 64);\r\n\t\t\t\tsprite.setOrigin(32, 32);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbatch = new SpriteBatch();\r\n\t\tpositions = new ArrayList<Vector2>();\r\n\t\tfor (int i = 0; i < 100; i++) {\r\n\t\t\tpositions.add(new Vector2(MathUtils.random() * Gdx.graphics.getWidth(), MathUtils.random() * Gdx.graphics.getHeight()));\r\n\t\t}\r\n\t}","commit_id":"d3fecf47d62eb96b4769fd2254784a08078fc045","url":"https://github.com/libgdx/libgdx"},{"original_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED EventBuilder\");\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","id":103043,"modified_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","commit_id":"b0f7b61b0af8070ff4dd72801ea4802a46b9dc42","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103044,"modified_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Add on standByConn: \" + cp.getUrl());\n                doAdd(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"b0f7b61b0af8070ff4dd72801ea4802a46b9dc42","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103045,"modified_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Update on standByConn: \" + cp.getUrl());\n                doUpdate(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"b0f7b61b0af8070ff4dd72801ea4802a46b9dc42","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103046,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"b0f7b61b0af8070ff4dd72801ea4802a46b9dc42","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103047,"modified_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Delete on standByConn: \" + cp.getUrl());\n                doDelete(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"b0f7b61b0af8070ff4dd72801ea4802a46b9dc42","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103048,"modified_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Delete on standByConn: \" + cp.getUrl());\n                doDelete(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"5986a47948d7ebcbd583af61233a635413e3184e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103049,"modified_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Update on standByConn: \" + cp.getUrl());\n                doUpdate(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"5986a47948d7ebcbd583af61233a635413e3184e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED EventBuilder\");\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","id":103050,"modified_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","commit_id":"5986a47948d7ebcbd583af61233a635413e3184e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103051,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"5986a47948d7ebcbd583af61233a635413e3184e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103052,"modified_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Add on standByConn: \" + cp.getUrl());\n                doAdd(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"5986a47948d7ebcbd583af61233a635413e3184e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED EventBuilder\");\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","id":103053,"modified_method":"private EventBuilder buildEvent(String uei, int nodeId) {\n        EventBuilder builder = new EventBuilder(uei, \"Provisioner\", new Date());\n        builder.setNodeid(nodeId);\n        return builder;\n    }","commit_id":"aeed71e0a34bdf7033f1f3e2a3cd019a5ee8967a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103054,"modified_method":"public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);\n            Assert.notNull(node, \"Rancid Provisioning Adapter update Node method failed to return node for given nodeId:\"+nodeId);\n            \n            // if the node exists and has different label then first delete old data\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();            \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                if (!rNode.getDeviceName().equals(node.getLabel())) {\n                    RWSClientApi.deleteRWSRancidNode(cp, rNode);\n                    RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                }\n            }\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNode);\n            \n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, getSuitableRancidNodeAuthentication(node));\n            \n            m_onmsNodeRancidNodeMap.replace(node.getId(), new RancidNodeContainer(rNode, rAuth));\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Update on standByConn: \" + cp.getUrl());\n                doUpdate(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"aeed71e0a34bdf7033f1f3e2a3cd019a5ee8967a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103055,"modified_method":"public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED deleteNode: nodeid: \" + nodeId);\n        \n        /*\n         * The work to maintain the hashmap boils down to needing to do deletes, so\n         * here we go.\n         */\n        try {\n\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.deleteRWSRancidNode(cp, rNode);\n  \n                RancidNodeAuthentication rAuth = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getAuth();\n                RWSClientApi.deleteRWSAuthNode(cp, rAuth);\n                m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);                \n            }\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Delete on standByConn: \" + cp.getUrl());\n                doDelete(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"aeed71e0a34bdf7033f1f3e2a3cd019a5ee8967a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103056,"modified_method":"public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: \" + nodeId);\n        try {\n            OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            \n            Assert.notNull(node, \"Rancid Provisioning Adapter addNode method failed to return node for given nodeId:\"+nodeId);\n            \n            RancidNode rNode = getSuitableRancidNode(node);\n            rNode.setStateUp(true);\n            RWSClientApi.createRWSRancidNode(cp, rNode);\n\n            RancidNodeAuthentication rAuth = getSuitableRancidNodeAuthentication(node);\n            RWSClientApi.createOrUpdateRWSAuthNode(cp, rAuth);\n            \n            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), new RancidNodeContainer(rNode, rAuth));\n            \n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry Add on standByConn: \" + cp.getUrl());\n                doAdd(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"aeed71e0a34bdf7033f1f3e2a3cd019a5ee8967a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","id":103057,"modified_method":"public void doNodeConfigChanged(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {\n        log().debug(\"RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: \" + nodeId);\n        try {\n            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {\n                RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId)).getNode();\n                RWSClientApi.updateRWSRancidNode(cp, rNode);\n            } else {\n                log().warn(\"No node found in nodeRancid Map for nodeid: \" + nodeId);\n            }\n        } catch (Exception e) {\n            cp = getStandByRWSConnection();\n            if (retry && cp != null) {\n                log().info(\"Rancid Provisioning Adapter: retry ConfigChange on standByConn: \" + cp.getUrl());\n                doNodeConfigChanged(nodeId, cp, false);\n            } else {\n                sendAndThrow(nodeId, e);            \n            }\n        }\n    }","commit_id":"aeed71e0a34bdf7033f1f3e2a3cd019a5ee8967a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void handleJoin(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node child = nodelist.item(i);\r\n            if (child.getNodeName().equalsIgnoreCase(\"multicast\")) {\r\n                handleMulticast(child);\r\n            } else if (child.getNodeName().equalsIgnoreCase(\"tcp-ip\")) {\r\n                handleTcpIp(child);\r\n            }\r\n        }\r\n    }","id":103058,"modified_method":"private void handleJoin(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node child = nodelist.item(i);\r\n            final String name = child.getNodeName().toLowerCase();\r\n            \r\n            if (\"multicast\".equals(name)) {\r\n                handleMulticast(child);\r\n            } else if (\"tcp-ip\".equals(name)) {\r\n                handleTcpIp(child);\r\n            }\r\n        }\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleInterfaces(final org.w3c.dom.Node node) {\r\n        final NamedNodeMap atts = node.getAttributes();\r\n        for (int a = 0; a < atts.getLength(); a++) {\r\n            final org.w3c.dom.Node att = atts.item(a);\r\n            final String value = att.getNodeValue();\r\n            if (att.getNodeName().equals(\"enabled\")) {\r\n                interfaces.enabled = checkTrue(value);\r\n            }\r\n        }\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            if (n.getNodeName().equalsIgnoreCase(\"interface\")) {\r\n                interfaces.lsInterfaces.add(value);\r\n            }\r\n        }\r\n    }","id":103059,"modified_method":"private void handleInterfaces(final org.w3c.dom.Node node) {\r\n        final NamedNodeMap atts = node.getAttributes();\r\n        for (int a = 0; a < atts.getLength(); a++) {\r\n            final org.w3c.dom.Node att = atts.item(a);\r\n            final String value = att.getNodeValue();\r\n            if (\"enabled\".equals(att.getNodeName())) {\r\n                interfaces.enabled = checkTrue(value);\r\n            }\r\n        }\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            if (\"interface\".equalsIgnoreCase(n.getNodeName())) {\r\n                interfaces.lsInterfaces.add(value);\r\n            }\r\n        }\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleGroup(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            final String nodeName = n.getNodeName();\r\n            if (\"name\".equalsIgnoreCase(nodeName)) {\r\n                groupName = value;\r\n            } else if (\"password\".equalsIgnoreCase(nodeName)) {\r\n                groupPassword = value;\r\n            }\r\n        }\r\n    }","id":103060,"modified_method":"private void handleGroup(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            final String nodeName = n.getNodeName().toLowerCase();\r\n            if (\"name\".equals(nodeName)) {\r\n                groupName = value;\r\n            } else if (\"password\".equals(nodeName)) {\r\n                groupPassword = value;\r\n            }\r\n        }\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleExecutor(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            if (n.getNodeName().equalsIgnoreCase(\"core-pool-size\")) {\r\n                executorConfig.setCorePoolSize(getIntegerValue(\"core-pool-size\", value, 10));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"max-pool-size\")) {\r\n                executorConfig.setMaxPoolsize(getIntegerValue(\"max-pool-size\", value, 50));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"keep-alive-seconds\")) {\r\n                executorConfig.setKeepAliveSeconds(getIntegerValue(\"keep-alive-seconds\", value, 50));\r\n            }\r\n        }\r\n    }","id":103061,"modified_method":"private void handleExecutor(final org.w3c.dom.Node node) {\r\n        final NodeList nodelist = node.getChildNodes();\r\n\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String name = n.getNodeName().toLowerCase();\r\n            final String value = getTextContent(n).trim();\r\n            \r\n            if (\"core-pool-size\".equals(name)) {\r\n                executorConfig.setCorePoolSize(getIntegerValue(\"core-pool-size\", value, ExecutorConfig.DEFAULT_CORE_POOL_SIZE));\r\n            } else if (\"max-pool-size\".equals(name)) {\r\n                executorConfig.setMaxPoolsize(getIntegerValue(\"max-pool-size\", value, ExecutorConfig.DEFAULT_MAX_POOL_SIZE));\r\n            } else if (\"keep-alive-seconds\".equals(name)) {\r\n                executorConfig.setKeepAliveSeconds(getIntegerValue(\"keep-alive-seconds\", value, ExecutorConfig.DEFAULT_KEEPALIVE_SECONDS));\r\n            }\r\n        }\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleQueue(final org.w3c.dom.Node node) {\r\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\r\n        final String name = getTextContent(attName);\r\n        final QueueConfig qConfig = new QueueConfig();\r\n        qConfig.setName(name);\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            if (n.getNodeName().equalsIgnoreCase(\"max-size-per-jvm\")) {\r\n                qConfig.setMaxSizePerJVM(getIntegerValue(\"max-size-per-jvm\", value, Integer.MAX_VALUE));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"time-to-live-seconds\")) {\r\n                qConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value, Integer.MAX_VALUE));\r\n            }\r\n        }\r\n        mapQueueConfigs.put(name, qConfig);\r\n    }","id":103062,"modified_method":"private void handleQueue(final org.w3c.dom.Node node) {\r\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\r\n        final String name = getTextContent(attName);\r\n        final QueueConfig qConfig = new QueueConfig();\r\n        qConfig.setName(name);\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String nodeName = n.getNodeName().toLowerCase();\r\n            final String value = getTextContent(n).trim();\r\n            \r\n            if (\"max-size-per-jvm\".equals(nodeName)) {\r\n                qConfig.setMaxSizePerJVM(getIntegerValue(\"max-size-per-jvm\", value, QueueConfig.DEFAULT_MAX_SIZE_PER_JVM));\r\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\r\n                qConfig.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value, QueueConfig.DEFAULT_TTL_SECONDS));\r\n            }\r\n        }\r\n        mapQueueConfigs.put(name, qConfig);\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private void handleMap(final org.w3c.dom.Node node) {\r\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\r\n        final String name = getTextContent(attName);\r\n        final MapConfig config = new MapConfig();\r\n        config.setName(name);\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String value = getTextContent(n).trim();\r\n            if (n.getNodeName().equalsIgnoreCase(\"backup-count\")) {\r\n                config.setBackupCount(getIntegerValue(\"backup-count\", value, MapConfig.DEFAULT_BACKUP_COUNT));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"eviction-policy\")) {\r\n                config.setEvictionPolicy(value);\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"max-size\")) {\r\n                config.setMaxSize(getIntegerValue(\"max-size\", value,\r\n                        MapConfig.DEFAULT_MAX_SIZE));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"eviction-percentage\")) {\r\n                config.setEvictionPercentage(getIntegerValue(\"eviction-percentage\", value,\r\n                        MapConfig.DEFAULT_EVICTION_PERCENTAGE));\r\n            } else if (n.getNodeName().equalsIgnoreCase(\"time-to-live-seconds\")) {\r\n                config.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value,\r\n                        MapConfig.DEFAULT_TTL_SECONDS));\r\n            }\r\n        }\r\n        mapMapConfigs.put(name, config);\r\n    }","id":103063,"modified_method":"private void handleMap(final org.w3c.dom.Node node) {\r\n        final Node attName = node.getAttributes().getNamedItem(\"name\");\r\n        final String name = getTextContent(attName);\r\n        final MapConfig config = new MapConfig();\r\n        config.setName(name);\r\n        final NodeList nodelist = node.getChildNodes();\r\n        for (int i = 0; i < nodelist.getLength(); i++) {\r\n            final org.w3c.dom.Node n = nodelist.item(i);\r\n            final String nodeName = n.getNodeName().toLowerCase();\r\n            final String value = getTextContent(n).trim();\r\n            \r\n            if (\"backup-count\".equals(nodeName)) {\r\n                config.setBackupCount(getIntegerValue(\"backup-count\", value, MapConfig.DEFAULT_BACKUP_COUNT));\r\n            } else if (\"eviction-policy\".equals(nodeName)) {\r\n                config.setEvictionPolicy(value);\r\n            } else if (\"max-size\".equals(nodeName)) {\r\n                config.setMaxSize(getIntegerValue(\"max-size\", value,\r\n                        MapConfig.DEFAULT_MAX_SIZE));\r\n            } else if (\"eviction-percentage\".equals(nodeName)) {\r\n                config.setEvictionPercentage(getIntegerValue(\"eviction-percentage\", value,\r\n                        MapConfig.DEFAULT_EVICTION_PERCENTAGE));\r\n            } else if (\"time-to-live-seconds\".equals(nodeName)) {\r\n                config.setTimeToLiveSeconds(getIntegerValue(\"time-to-live-seconds\", value,\r\n                        MapConfig.DEFAULT_TTL_SECONDS));\r\n            }\r\n        }\r\n        mapMapConfigs.put(name, config);\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private Config() {\r\n        boolean usingSystemConfig = false;\r\n        String configFile = System.getProperty(\"hazelcast.config\");\r\n        File fileConfig = null;\r\n        InputStream in = null;\r\n        try {\r\n            if (configFile != null) {\r\n                fileConfig = new File(configFile);\r\n                if (!fileConfig.exists()) {\r\n                    String msg = \"Config file at '\" + configFile + \"' doesn't exist.\";\r\n                    msg += \"\\nHazelcast will try to use the hazelcast.xml config file in the classpath.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                    fileConfig = null;\r\n                }\r\n            }\r\n\r\n            if (fileConfig == null) {\r\n                configFile = \"hazelcast.xml\";\r\n                fileConfig = new File(\"hazelcast.xml\");\r\n                if (!fileConfig.exists()) {\r\n                    fileConfig = null;\r\n                }\r\n            }\r\n\r\n            if (fileConfig != null) {\r\n                logger.log (Level.INFO, \"Using configuration file at \" + fileConfig.getAbsolutePath());\r\n                try {\r\n                    in = new FileInputStream(fileConfig);\r\n                    urlConfig = fileConfig.toURI().toURL();\r\n                    usingSystemConfig = true;\r\n                } catch (final Exception e) {\r\n                    String msg = \"Having problem reading config file at '\" + configFile + \"'.\";\r\n                    msg += \"\\nException message: \" + e.getMessage();\r\n                    msg += \"\\nHazelcast will try to use the hazelcast.xml config file in the jar.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                    in = null;\r\n                }\r\n            }\r\n\r\n            if (in == null) {\r\n                urlConfig = Config.class.getClassLoader().getResource(\"hazelcast.xml\");\r\n                if (urlConfig == null)\r\n                    return;\r\n                in = Config.class.getClassLoader().getResourceAsStream(\"hazelcast.xml\");\r\n                if (in == null) {\r\n                    String msg = \"Having problem reading config file hazelcast.xml in the classpath.\";\r\n                    msg += \"\\nHazelcast will start with default configuration.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                }\r\n            }\r\n            if (in == null)\r\n                return;\r\n\r\n            final DocumentBuilder builder = DocumentBuilderFactory.newInstance()\r\n                    .newDocumentBuilder();\r\n            Document doc = null;\r\n            try {\r\n                doc = builder.parse(in);\r\n                final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                Util.streamXML(doc, baos);\r\n                final byte[] bytes = baos.toByteArray();\r\n                final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\r\n                xmlConfig = Util.inputStreamToString(bais);\r\n                if (\"true\".equals(System.getProperty(\"hazelcast.config.print\"))) {\r\n                    logger.log(Level.INFO, \"Hazelcast config URL : \" + urlConfig);\r\n                    logger.log(Level.INFO, \"=== Hazelcast config xml ===\");\r\n                    logger.log(Level.INFO, xmlConfig);\r\n                    logger.log(Level.INFO, \"==============================\");\r\n                    logger.log(Level.INFO, \"\");\r\n                }\r\n            } catch (final Exception e) {\r\n                String msgPart = \"config file '\" + configFile + \"' set as a system property.\";\r\n                if (!usingSystemConfig)\r\n                    msgPart = \"hazelcast.xml config file in the classpath.\";\r\n                String msg = \"Having problem parsing the \" + msgPart;\r\n                msg += \"\\nException: \" + e.getMessage();\r\n                msg += \"\\nHazelcast will start with default configuration.\";\r\n                logger.log(Level.WARNING, msg);\r\n                return;\r\n            }\r\n            final Element docElement = doc.getDocumentElement();\r\n            try {\r\n                docElement.getTextContent();\r\n            } catch (final Throwable e) {\r\n                domLevel3 = false;\r\n            }\r\n            final NodeList nodelist = docElement.getChildNodes();\r\n            for (int i = 0; i < nodelist.getLength(); i++) {\r\n                final org.w3c.dom.Node node = nodelist.item(i);\r\n                if (node.getNodeName().equals(\"network\")) {\r\n                    handleNetwork(node);\r\n                } else if (node.getNodeName().equals(\"group\")) {\r\n                    handleGroup(node);\r\n                } else if (node.getNodeName().equals(\"executor-service\")) {\r\n                    handleExecutor(node);\r\n                } else if (node.getNodeName().equals(\"queue\")) {\r\n                    handleQueue(node);\r\n                } else if (node.getNodeName().equals(\"map\")) {\r\n                    handleMap(node);\r\n                } else if (node.getNodeName().equals(\"topic\")) {\r\n                    handleTopic(node);\r\n                }\r\n            }\r\n        } catch (final Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }","id":103064,"modified_method":"private Config() {\r\n        boolean usingSystemConfig = false;\r\n        String configFile = System.getProperty(\"hazelcast.config\");\r\n        File fileConfig = null;\r\n        InputStream in = null;\r\n        try {\r\n            if (configFile != null) {\r\n                fileConfig = new File(configFile);\r\n                if (!fileConfig.exists()) {\r\n                    String msg = \"Config file at '\" + configFile + \"' doesn't exist.\";\r\n                    msg += \"\\nHazelcast will try to use the hazelcast.xml config file in the classpath.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                    fileConfig = null;\r\n                }\r\n            }\r\n\r\n            if (fileConfig == null) {\r\n                configFile = \"hazelcast.xml\";\r\n                fileConfig = new File(\"hazelcast.xml\");\r\n                if (!fileConfig.exists()) {\r\n                    fileConfig = null;\r\n                }\r\n            }\r\n\r\n            if (fileConfig != null) {\r\n                logger.log (Level.INFO, \"Using configuration file at \" + fileConfig.getAbsolutePath());\r\n                try {\r\n                    in = new FileInputStream(fileConfig);\r\n                    urlConfig = fileConfig.toURI().toURL();\r\n                    usingSystemConfig = true;\r\n                } catch (final Exception e) {\r\n                    String msg = \"Having problem reading config file at '\" + configFile + \"'.\";\r\n                    msg += \"\\nException message: \" + e.getMessage();\r\n                    msg += \"\\nHazelcast will try to use the hazelcast.xml config file in the jar.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                    in = null;\r\n                }\r\n            }\r\n\r\n            if (in == null) {\r\n                urlConfig = Config.class.getClassLoader().getResource(\"hazelcast.xml\");\r\n                if (urlConfig == null)\r\n                    return;\r\n                in = Config.class.getClassLoader().getResourceAsStream(\"hazelcast.xml\");\r\n                if (in == null) {\r\n                    String msg = \"Having problem reading config file hazelcast.xml in the classpath.\";\r\n                    msg += \"\\nHazelcast will start with default configuration.\";\r\n                    logger.log(Level.WARNING, msg);\r\n                }\r\n            }\r\n            \r\n            if (in == null) {\r\n                return;\r\n            }\r\n\r\n            final DocumentBuilder builder = DocumentBuilderFactory.newInstance()\r\n                    .newDocumentBuilder();\r\n            Document doc = null;\r\n            try {\r\n                doc = builder.parse(in);\r\n                final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                Util.streamXML(doc, baos);\r\n                final byte[] bytes = baos.toByteArray();\r\n                final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\r\n                xmlConfig = Util.inputStreamToString(bais);\r\n                if (\"true\".equals(System.getProperty(\"hazelcast.config.print\"))) {\r\n                    logger.log(Level.INFO, \"Hazelcast config URL : \" + urlConfig);\r\n                    logger.log(Level.INFO, \"=== Hazelcast config xml ===\");\r\n                    logger.log(Level.INFO, xmlConfig);\r\n                    logger.log(Level.INFO, \"==============================\");\r\n                    logger.log(Level.INFO, \"\");\r\n                }\r\n            } catch (final Exception e) {\r\n                String msgPart = \"config file '\" + configFile + \"' set as a system property.\";\r\n                if (!usingSystemConfig) {\r\n                    msgPart = \"hazelcast.xml config file in the classpath.\";\r\n                }\r\n                String msg = \"Having problem parsing the \" + msgPart;\r\n                msg += \"\\nException: \" + e.getMessage();\r\n                msg += \"\\nHazelcast will start with default configuration.\";\r\n                logger.log(Level.WARNING, msg);\r\n                return;\r\n            }\r\n            final Element docElement = doc.getDocumentElement();\r\n            try {\r\n                docElement.getTextContent();\r\n            } catch (final Throwable e) {\r\n                domLevel3 = false;\r\n            }\r\n            final NodeList nodelist = docElement.getChildNodes();\r\n            for (int i = 0; i < nodelist.getLength(); i++) {\r\n                final org.w3c.dom.Node node = nodelist.item(i);\r\n                final String nodeName = node.getNodeName();\r\n                \r\n                if (\"network\".equals(nodeName)) {\r\n                    handleNetwork(node);\r\n                } else if (\"group\".equals(nodeName)) {\r\n                    handleGroup(node);\r\n                } else if (\"executor-service\".equals(nodeName)) {\r\n                    handleExecutor(node);\r\n                } else if (\"queue\".equals(nodeName)) {\r\n                    handleQueue(node);\r\n                } else if (\"map\".equals(nodeName)) {\r\n                    handleMap(node);\r\n                } else if (\"topic\".equals(nodeName)) {\r\n                    handleTopic(node);\r\n                }\r\n            }\r\n        } catch (final Exception e) {\r\n        \tlogger.log(Level.SEVERE, \"Error while creating configuration\", e);\r\n        \te.printStackTrace();\r\n        }\r\n    }","commit_id":"c01dd985c2f9589f7a25c17129f47e8305c08e6f","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public RVFDataset<String, ScorePhraseMeasures> choosedatums(boolean forLearningPattern, String answerLabel,\n      TwoDimensionalCounter<CandidatePhrase, E> wordsPatExtracted,\n      Counter<E> allSelectedPatterns, boolean computeRawFreq) throws IOException {\n\n    Counter<Integer> distSimClustersOfPositive = new ClassicCounter<Integer>();\n    if(constVars.expandPositivesWhenSampling && !constVars.useWordVectorsToComputeSim){\n      for(CandidatePhrase s: CollectionUtils.union(constVars.getLearnedWords(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel))){\n        String[] toks = s.getPhrase().split(\"\\\\s+\");\n        if(!constVars.getWordClassClusters().containsKey(s.getPhrase())){\n          for(String tok: toks){\n            if(constVars.getWordClassClusters().containsKey(tok)){\n              distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(tok));\n            }\n          }\n        } else\n        distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(s.getPhrase()));\n      }\n    }\n\n    //make all possible negative phrases\n    Map<String, Collection<CandidatePhrase>> allPossibleNegativePhrases = new HashMap<String, Collection<CandidatePhrase>>();\n    Collection<CandidatePhrase> negPhrases = new HashSet<CandidatePhrase>();\n    negPhrases.addAll(constVars.getOtherSemanticClassesWords());\n    negPhrases.addAll(constVars.getStopWords());\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.functionWords));\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.getEnglishWords()));\n    for(Entry<String, Counter<CandidatePhrase>> en: constVars.getLearnedWords().entrySet()) {\n      if (!en.getKey().equals(answerLabel)){\n        negPhrases.addAll(en.getValue().keySet());\n        negPhrases.addAll(constVars.getSeedLabelDictionary().get(en.getKey()));\n      }\n    }\n    allPossibleNegativePhrases.put(\"NEGATIVE\", negPhrases);\n\n\n    RVFDataset<String, ScorePhraseMeasures> dataset = new RVFDataset<String, ScorePhraseMeasures>();\n    int numpos = 0;\n    Set<CandidatePhrase> allNegativePhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allUnknownPhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allPositivePhrases = new HashSet<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToPositivePhrases = new ClassicCounter<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToNegativePhrases = new ClassicCounter<CandidatePhrase>();\n\n    //for all sentences brtch\n    ConstantsAndVariables.DataSentsIterator sentsIter = new ConstantsAndVariables.DataSentsIterator(constVars.batchProcessSents);\n    while(sentsIter.hasNext()) {\n      Pair<Map<String, DataInstance>, File> sentsf = sentsIter.next();\n      Map<String, DataInstance> sents = sentsf.first();\n      Redwood.log(Redwood.DBG, \"Sampling datums from \" + sentsf.second());\n      if (computeRawFreq)\n        Data.computeRawFreqIfNull(sents, PatternFactory.numWordsCompound);\n\n      List<List<String>> threadedSentIds = GetPatternsFromDataMultiClass.getThreadBatches(new ArrayList<String>(sents.keySet()), constVars.numThreads);\n      ExecutorService executor = Executors.newFixedThreadPool(constVars.numThreads);\n      List<Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>>> list = new ArrayList<Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>>>();\n\n      //multi-threaded choose positive, negative and unknown\n      for (List<String> keys : threadedSentIds) {\n        Callable<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> task = new ChooseDatumsThread(answerLabel, sents, keys, forLearningPattern, wordsPatExtracted, allSelectedPatterns,\n          distSimClustersOfPositive, allPossibleNegativePhrases);\n        Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> submit = executor.submit(task);\n        list.add(submit);\n      }\n\n      // Now retrieve the result\n      for (Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> future : list) {\n        try {\n          Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>> result = future.get();\n          allPositivePhrases.addAll(result.first());\n          allNegativePhrases.addAll(result.second());\n          allUnknownPhrases.addAll(result.third());\n          allCloseToPositivePhrases.addAll(result.fourth());\n        } catch (Exception e) {\n          executor.shutdownNow();\n          throw new RuntimeException(e);\n        }\n      }\n      executor.shutdown();\n    }\n\n    //Set<CandidatePhrase> knownPositivePhrases = CollectionUtils.unionAsSet(constVars.getLearnedWords().get(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel));\n    //TODO: this is kinda not nice; how is allpositivephrases different from positivephrases again?\n    allPositivePhrases.addAll(constVars.getLearnedWords().get(answerLabel).keySet());\n    //allPositivePhrases.addAll(knownPositivePhrases);\n\n    BufferedWriter logFile = null;\n    BufferedWriter logFileFeat = null;\n\n    if(constVars.logFileVectorSimilarity != null){\n      logFile = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity));\n      logFileFeat = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity+\"_feat\"));\n\n      if(wordVectors != null){\n      for(CandidatePhrase p : allPositivePhrases){\n        if(wordVectors.containsKey(p.getPhrase())){\n          logFile.write(p.getPhrase()+\"-P \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n        }\n      }\n      }\n    }\n\n    if(constVars.expandPositivesWhenSampling){\n      //TODO: patwtbyfrew\n      //Counters.retainTop(allCloseToPositivePhrases, (int) (allCloseToPositivePhrases.size()*constVars.subSampleUnkAsPosUsingSimPercentage));\n      Redwood.log(\"Expanding positives by adding \" + allCloseToPositivePhrases + \" phrases\");\n      allPositivePhrases.addAll(allCloseToPositivePhrases.keySet());\n      if(logFile != null && wordVectors != null){\n        for(CandidatePhrase p : allCloseToPositivePhrases.keySet()){\n          if(wordVectors.containsKey(p.getPhrase())){\n            logFile.write(p.getPhrase()+\"-PP \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n          }\n        }\n      }\n    }\n\n\n\n    System.out.println(\"all positive phrases are  \" + allPositivePhrases);\n    for(CandidatePhrase candidate: allPositivePhrases) {\n      Counter<ScorePhraseMeasures> feat = null;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, candidate);\n      } else {\n        feat = getFeatures(answerLabel, candidate, wordsPatExtracted.getCounter(candidate), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"true\");\n      dataset.add(datum);\n      numpos += 1;\n      if(logFileFeat !=null){\n        logFileFeat.write(\"POSITIVE \" + candidate.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n      }\n    }\n\n    Redwood.log(Redwood.DBG, \"Number of pure negative phrases is \" + allNegativePhrases.size());\n    Redwood.log(Redwood.DBG, \"Number of unknown phrases is \" + allUnknownPhrases.size());\n\n    if(constVars.subsampleUnkAsNegUsingSim){\n      double subSampleUnkAsNegUsingSimPercentage = 1.0;\n      Set<CandidatePhrase> chosenUnknown = chooseUnknownAsNegatives(allUnknownPhrases, answerLabel, subSampleUnkAsNegUsingSimPercentage, allPositivePhrases, allPossibleNegativePhrases, logFile);\n      Redwood.log(Redwood.DBG, \"Choosing \" + chosenUnknown.size() + \" unknowns as negative based to their similarity to the positive phrases\");\n      allNegativePhrases.addAll(chosenUnknown);\n    }\n    else{\n        allNegativePhrases.addAll(allUnknownPhrases);\n    }\n\n    if(allNegativePhrases.size() > numpos) {\n      Redwood.log(Redwood.WARN, \"Num of negative (\" + allNegativePhrases.size() + \") is higher than number of positive phrases (\" + numpos + \") = \" +\n        (allNegativePhrases.size() / (double)numpos) + \". \" +\n        \"Capping the number by taking the first numPositives as negative. Consider decreasing perSelectNeg and perSelectRand\");\n      int i = 0;\n      Set<CandidatePhrase> selectedNegPhrases = new HashSet<CandidatePhrase>();\n      for(CandidatePhrase p : allNegativePhrases){\n        if (i >= numpos)\n          break;\n        selectedNegPhrases.add(p);\n        i++;\n      }\n      allNegativePhrases.clear();\n      allNegativePhrases = selectedNegPhrases;\n    }\n\n    System.out.println(\"all negative phrases are \" + allNegativePhrases);\n    for(CandidatePhrase negative: allNegativePhrases){\n      Counter<ScorePhraseMeasures> feat;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, negative);\n      } else {\n        feat = getFeatures(answerLabel, negative, wordsPatExtracted.getCounter(negative), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"false\");\n      dataset.add(datum);\n\n      if(logFile!=null && wordVectors != null && wordVectors.containsKey(negative.getPhrase())){\n        logFile.write(negative.getPhrase()+\"-N\"+\" \" + ArrayUtils.toString(wordVectors.get(negative.getPhrase()), \" \")+\"\\n\");\n      }\n\n      if(logFileFeat !=null)\n        logFileFeat.write(\"NEGATIVE \" + negative.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n\n    }\n\n    if(logFile!=null){\n      logFile.close();\n      logFileFeat.close();\n    }\n\n    System.out.println(\"Before feature count threshold, dataset stats are \");\n    dataset.summaryStatistics();\n\n    int threshold = 2;\n    dataset.applyFeatureCountThreshold(threshold);\n    System.out.println(\"AFTER feature count threshold of \" + threshold + \", dataset stats are \");\n    dataset.summaryStatistics();\n\n    Redwood.log(Redwood.DBG, \"Eventually, number of positive datums:  \" + numpos + \" and number of negative datums: \" + allNegativePhrases.size());\n    return dataset;\n  }","id":103065,"modified_method":"public RVFDataset<String, ScorePhraseMeasures> choosedatums(boolean forLearningPattern, String answerLabel,\n      TwoDimensionalCounter<CandidatePhrase, E> wordsPatExtracted,\n      Counter<E> allSelectedPatterns, boolean computeRawFreq) throws IOException {\n\n    Counter<Integer> distSimClustersOfPositive = new ClassicCounter<Integer>();\n    if(constVars.expandPositivesWhenSampling && !constVars.useWordVectorsToComputeSim){\n      for(CandidatePhrase s: CollectionUtils.union(constVars.getLearnedWords(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel))){\n        String[] toks = s.getPhrase().split(\"\\\\s+\");\n        if(!constVars.getWordClassClusters().containsKey(s.getPhrase())){\n          for(String tok: toks){\n            if(constVars.getWordClassClusters().containsKey(tok)){\n              distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(tok));\n            }\n          }\n        } else\n        distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(s.getPhrase()));\n      }\n    }\n\n    //make all possible negative phrases\n    Map<String, Collection<CandidatePhrase>> allPossibleNegativePhrases = new HashMap<String, Collection<CandidatePhrase>>();\n    Collection<CandidatePhrase> negPhrases = new HashSet<CandidatePhrase>();\n    negPhrases.addAll(constVars.getOtherSemanticClassesWords());\n    negPhrases.addAll(constVars.getStopWords());\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.functionWords));\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.getEnglishWords()));\n    for(Entry<String, Counter<CandidatePhrase>> en: constVars.getLearnedWords().entrySet()) {\n      if (!en.getKey().equals(answerLabel)){\n        negPhrases.addAll(en.getValue().keySet());\n        negPhrases.addAll(constVars.getSeedLabelDictionary().get(en.getKey()));\n      }\n    }\n    allPossibleNegativePhrases.put(\"NEGATIVE\", negPhrases);\n\n\n    RVFDataset<String, ScorePhraseMeasures> dataset = new RVFDataset<String, ScorePhraseMeasures>();\n    int numpos = 0;\n    Set<CandidatePhrase> allNegativePhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allUnknownPhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allPositivePhrases = new HashSet<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToPositivePhrases = new ClassicCounter<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToNegativePhrases = new ClassicCounter<CandidatePhrase>();\n\n    //for all sentences brtch\n    ConstantsAndVariables.DataSentsIterator sentsIter = new ConstantsAndVariables.DataSentsIterator(constVars.batchProcessSents);\n    while(sentsIter.hasNext()) {\n      Pair<Map<String, DataInstance>, File> sentsf = sentsIter.next();\n      Map<String, DataInstance> sents = sentsf.first();\n      Redwood.log(Redwood.DBG, \"Sampling datums from \" + sentsf.second());\n      if (computeRawFreq)\n        Data.computeRawFreqIfNull(sents, PatternFactory.numWordsCompound);\n\n      List<List<String>> threadedSentIds = GetPatternsFromDataMultiClass.getThreadBatches(new ArrayList<String>(sents.keySet()), constVars.numThreads);\n      ExecutorService executor = Executors.newFixedThreadPool(constVars.numThreads);\n      List<Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>>> list = new ArrayList<Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>>>();\n\n      //multi-threaded choose positive, negative and unknown\n      for (List<String> keys : threadedSentIds) {\n        Callable<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> task = new ChooseDatumsThread(answerLabel, sents, keys, forLearningPattern, wordsPatExtracted, allSelectedPatterns,\n          distSimClustersOfPositive, allPossibleNegativePhrases);\n        Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> submit = executor.submit(task);\n        list.add(submit);\n      }\n\n      // Now retrieve the result\n      for (Future<Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>>> future : list) {\n        try {\n          Quintuple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>,  Counter<CandidatePhrase>> result = future.get();\n          allPositivePhrases.addAll(result.first());\n          allNegativePhrases.addAll(result.second());\n          allUnknownPhrases.addAll(result.third());\n          for(Entry<CandidatePhrase, Double> en : result.fourth().entrySet())\n            allCloseToPositivePhrases.setCount(en.getKey(), en.getValue());\n\n        } catch (Exception e) {\n          executor.shutdownNow();\n          throw new RuntimeException(e);\n        }\n      }\n      executor.shutdown();\n    }\n\n    //Set<CandidatePhrase> knownPositivePhrases = CollectionUtils.unionAsSet(constVars.getLearnedWords().get(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel));\n    //TODO: this is kinda not nice; how is allpositivephrases different from positivephrases again?\n    allPositivePhrases.addAll(constVars.getLearnedWords().get(answerLabel).keySet());\n    //allPositivePhrases.addAll(knownPositivePhrases);\n\n    BufferedWriter logFile = null;\n    BufferedWriter logFileFeat = null;\n\n    if(constVars.logFileVectorSimilarity != null){\n      logFile = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity));\n      logFileFeat = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity+\"_feat\"));\n\n      if(wordVectors != null){\n      for(CandidatePhrase p : allPositivePhrases){\n        if(wordVectors.containsKey(p.getPhrase())){\n          logFile.write(p.getPhrase()+\"-P \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n        }\n      }\n      }\n    }\n\n    if(constVars.expandPositivesWhenSampling){\n      //TODO: patwtbyfrew\n      //Counters.retainTop(allCloseToPositivePhrases, (int) (allCloseToPositivePhrases.size()*constVars.subSampleUnkAsPosUsingSimPercentage));\n      Redwood.log(\"Expanding positives by adding \" + allCloseToPositivePhrases + \" phrases\");\n      allPositivePhrases.addAll(allCloseToPositivePhrases.keySet());\n      if(logFile != null && wordVectors != null){\n        for(CandidatePhrase p : allCloseToPositivePhrases.keySet()){\n          if(wordVectors.containsKey(p.getPhrase())){\n            logFile.write(p.getPhrase()+\"-PP \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n          }\n        }\n      }\n    }\n\n\n\n    System.out.println(\"all positive phrases are  \" + allPositivePhrases);\n    for(CandidatePhrase candidate: allPositivePhrases) {\n      Counter<ScorePhraseMeasures> feat = null;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, candidate);\n      } else {\n        feat = getFeatures(answerLabel, candidate, wordsPatExtracted.getCounter(candidate), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"true\");\n      dataset.add(datum);\n      numpos += 1;\n      if(logFileFeat !=null){\n        logFileFeat.write(\"POSITIVE \" + candidate.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n      }\n    }\n\n    Redwood.log(Redwood.DBG, \"Number of pure negative phrases is \" + allNegativePhrases.size());\n    Redwood.log(Redwood.DBG, \"Number of unknown phrases is \" + allUnknownPhrases.size());\n\n    if(constVars.subsampleUnkAsNegUsingSim){\n      double subSampleUnkAsNegUsingSimPercentage = 1.0;\n      Set<CandidatePhrase> chosenUnknown = chooseUnknownAsNegatives(allUnknownPhrases, answerLabel, subSampleUnkAsNegUsingSimPercentage, allPositivePhrases, allPossibleNegativePhrases, logFile);\n      Redwood.log(Redwood.DBG, \"Choosing \" + chosenUnknown.size() + \" unknowns as negative based to their similarity to the positive phrases\");\n      allNegativePhrases.addAll(chosenUnknown);\n    }\n    else{\n        allNegativePhrases.addAll(allUnknownPhrases);\n    }\n\n    if(allNegativePhrases.size() > numpos) {\n      Redwood.log(Redwood.WARN, \"Num of negative (\" + allNegativePhrases.size() + \") is higher than number of positive phrases (\" + numpos + \") = \" +\n        (allNegativePhrases.size() / (double)numpos) + \". \" +\n        \"Capping the number by taking the first numPositives as negative. Consider decreasing perSelectNeg and perSelectRand\");\n      int i = 0;\n      Set<CandidatePhrase> selectedNegPhrases = new HashSet<CandidatePhrase>();\n      for(CandidatePhrase p : allNegativePhrases){\n        if (i >= numpos)\n          break;\n        selectedNegPhrases.add(p);\n        i++;\n      }\n      allNegativePhrases.clear();\n      allNegativePhrases = selectedNegPhrases;\n    }\n\n    System.out.println(\"all negative phrases are \" + allNegativePhrases);\n    for(CandidatePhrase negative: allNegativePhrases){\n      Counter<ScorePhraseMeasures> feat;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, negative);\n      } else {\n        feat = getFeatures(answerLabel, negative, wordsPatExtracted.getCounter(negative), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"false\");\n      dataset.add(datum);\n\n      if(logFile!=null && wordVectors != null && wordVectors.containsKey(negative.getPhrase())){\n        logFile.write(negative.getPhrase()+\"-N\"+\" \" + ArrayUtils.toString(wordVectors.get(negative.getPhrase()), \" \")+\"\\n\");\n      }\n\n      if(logFileFeat !=null)\n        logFileFeat.write(\"NEGATIVE \" + negative.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n\n    }\n\n    if(logFile!=null){\n      logFile.close();\n    }\n    if(logFileFeat != null){\n      logFileFeat.close();\n    }\n\n    System.out.println(\"Before feature count threshold, dataset stats are \");\n    dataset.summaryStatistics();\n\n    int threshold = 2;\n    dataset.applyFeatureCountThreshold(threshold);\n    System.out.println(\"AFTER feature count threshold of \" + threshold + \", dataset stats are \");\n    dataset.summaryStatistics();\n\n    Redwood.log(Redwood.DBG, \"Eventually, number of positive datums:  \" + numpos + \" and number of negative datums: \" + allNegativePhrases.size());\n    return dataset;\n  }","commit_id":"e1f15d296628af32fee79688dee05afcbb32886e","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private Counter<CandidatePhrase> computeSimWithWordVectors(Collection<CandidatePhrase> candidatePhrases, Collection<CandidatePhrase> otherPhrases, boolean ignoreWordRegex, String label){\n    final int numTopSimilar = 5;\n\n    Counter<CandidatePhrase> sims = new ClassicCounter<CandidatePhrase>(candidatePhrases.size());\n    for(CandidatePhrase p : candidatePhrases) {\n\n      Map<String, double[]> simsAvgMaxAllLabels = similaritiesWithLabeledPhrases.get(p.getPhrase());\n      if(simsAvgMaxAllLabels == null)\n        simsAvgMaxAllLabels = new HashMap<String, double[]>();\n      double[] simsAvgMax = simsAvgMaxAllLabels.get(label);\n      if(simsAvgMax == null) {\n        simsAvgMax = new double[Similarities.values().length];\n        Arrays.fill(simsAvgMax, 0);\n      }\n\n      if(wordVectors.containsKey(p.getPhrase()) && (! ignoreWordRegex || !PatternFactory.ignoreWordRegex.matcher(p.getPhrase()).matches())){\n\n        double[] d1 = wordVectors.get(p.getPhrase());\n\n        BinaryHeapPriorityQueue<CandidatePhrase> topSimPhs = new BinaryHeapPriorityQueue<CandidatePhrase>(numTopSimilar);\n        double allsum = 0;\n        double max = Double.MIN_VALUE;\n\n        boolean donotuse = false;\n\n        for (CandidatePhrase other : otherPhrases) {\n\n          if (p.equals(other)) {\n            donotuse = true;\n            break;\n          }\n\n          if (!wordVectors.containsKey(other.getPhrase()))\n            continue;\n\n          double sim;\n\n          PhrasePair pair = new PhrasePair(p.getPhrase(), other.getPhrase());\n          if (cacheSimilarities.containsKey(pair))\n            sim = cacheSimilarities.getCount(pair);\n          else {\n            double[] d2 = wordVectors.get(other.getPhrase());\n\n            double sum = 0;\n            double d1sq = 0;\n            double d2sq = 0;\n            for (int i = 0; i < d1.length; i++) {\n              sum += d1[i] * d2[i];\n              d1sq += d1[i] * d1[i];\n              d2sq += d2[i] * d2[i];\n            }\n            sim = sum / (Math.sqrt(d1sq) * Math.sqrt(d2sq));\n            cacheSimilarities.setCount(pair, sim);\n          }\n\n          topSimPhs.add(other, sim);\n          if(topSimPhs.size() > numTopSimilar)\n            topSimPhs.removeLastEntry();\n\n          //avgSim /= otherPhrases.size();\n          allsum += sim;\n          if(sim > max)\n            max = sim;\n        }\n\n        double finalSimScore = 0;\n        while(topSimPhs.hasNext()) {\n          finalSimScore += topSimPhs.getPriority();\n          topSimPhs.next();\n        }\n        finalSimScore /= numTopSimilar;\n\n        double prevNumItems = simsAvgMax[Similarities.NUMITEMS.ordinal()];\n        double prevAvg = simsAvgMax[Similarities.AVGSIM.ordinal()];\n        double prevMax = simsAvgMax[Similarities.MAXSIM.ordinal()];\n        double newNumItems = prevNumItems + otherPhrases.size();\n        double newAvg = (prevAvg*prevNumItems + allsum) /(newNumItems);\n        double newMax = prevMax > max ? prevMax: max;\n        simsAvgMax[Similarities.NUMITEMS.ordinal()] = newNumItems;\n        simsAvgMax[Similarities.AVGSIM.ordinal()] = newAvg;\n        simsAvgMax[Similarities.MAXSIM.ordinal()] = newMax;\n\n        if(!donotuse){\n          sims.setCount(p, finalSimScore);\n        }\n      }else{\n        sims.setCount(p, Double.MIN_VALUE);\n      }\n\n\n\n\n    }\n    return sims;\n  }","id":103066,"modified_method":"private Counter<CandidatePhrase> computeSimWithWordVectors(Collection<CandidatePhrase> candidatePhrases, Collection<CandidatePhrase> otherPhrases, boolean ignoreWordRegex, String label){\n    final int numTopSimilar = 3;\n\n    Counter<CandidatePhrase> sims = new ClassicCounter<CandidatePhrase>(candidatePhrases.size());\n    for(CandidatePhrase p : candidatePhrases) {\n\n      Map<String, double[]> simsAvgMaxAllLabels = similaritiesWithLabeledPhrases.get(p.getPhrase());\n      if(simsAvgMaxAllLabels == null)\n        simsAvgMaxAllLabels = new HashMap<String, double[]>();\n      double[] simsAvgMax = simsAvgMaxAllLabels.get(label);\n      if(simsAvgMax == null) {\n        simsAvgMax = new double[Similarities.values().length];\n        Arrays.fill(simsAvgMax, 0);\n      }\n\n      if(wordVectors.containsKey(p.getPhrase()) && (! ignoreWordRegex || !PatternFactory.ignoreWordRegex.matcher(p.getPhrase()).matches())){\n\n        double[] d1 = wordVectors.get(p.getPhrase());\n\n        BinaryHeapPriorityQueue<CandidatePhrase> topSimPhs = new BinaryHeapPriorityQueue<CandidatePhrase>(numTopSimilar);\n        double allsum = 0;\n        double max = Double.MIN_VALUE;\n\n        boolean donotuse = false;\n\n        for (CandidatePhrase other : otherPhrases) {\n\n          if (p.equals(other)) {\n            donotuse = true;\n            break;\n          }\n\n          if (!wordVectors.containsKey(other.getPhrase()))\n            continue;\n\n          double sim;\n\n          PhrasePair pair = new PhrasePair(p.getPhrase(), other.getPhrase());\n          if (cacheSimilarities.containsKey(pair))\n            sim = cacheSimilarities.getCount(pair);\n          else {\n            double[] d2 = wordVectors.get(other.getPhrase());\n\n            double sum = 0;\n            double d1sq = 0;\n            double d2sq = 0;\n            for (int i = 0; i < d1.length; i++) {\n              sum += d1[i] * d2[i];\n              d1sq += d1[i] * d1[i];\n              d2sq += d2[i] * d2[i];\n            }\n            sim = sum / (Math.sqrt(d1sq) * Math.sqrt(d2sq));\n            cacheSimilarities.setCount(pair, sim);\n          }\n\n          topSimPhs.add(other, sim);\n          if(topSimPhs.size() > numTopSimilar)\n            topSimPhs.removeLastEntry();\n\n          //avgSim /= otherPhrases.size();\n          allsum += sim;\n          if(sim > max)\n            max = sim;\n        }\n\n        double finalSimScore = 0;\n        int numEl = 0;\n        while(topSimPhs.hasNext()) {\n          finalSimScore += topSimPhs.getPriority();\n          topSimPhs.next();\n          numEl++;\n        }\n        finalSimScore /= numEl;\n\n        double prevNumItems = simsAvgMax[Similarities.NUMITEMS.ordinal()];\n        double prevAvg = simsAvgMax[Similarities.AVGSIM.ordinal()];\n        double prevMax = simsAvgMax[Similarities.MAXSIM.ordinal()];\n        double newNumItems = prevNumItems + otherPhrases.size();\n        double newAvg = (prevAvg*prevNumItems + allsum) /(newNumItems);\n        double newMax = prevMax > max ? prevMax: max;\n        simsAvgMax[Similarities.NUMITEMS.ordinal()] = newNumItems;\n        simsAvgMax[Similarities.AVGSIM.ordinal()] = newAvg;\n        simsAvgMax[Similarities.MAXSIM.ordinal()] = newMax;\n\n        if(!donotuse){\n          sims.setCount(p, finalSimScore);\n        }\n      }else{\n        sims.setCount(p, Double.MIN_VALUE);\n      }\n\n\n\n\n    }\n    return sims;\n  }","commit_id":"e1f15d296628af32fee79688dee05afcbb32886e","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n     * Replies true if there is a tag with an empty value for <code>key<\/code>.\n     * Replies false, if key is null.\n     *\n     * @param key the key\n     * @return true if there is a tag with an empty value for <code>key<\/code>\n     */\n    public boolean hasEmptyValue(String key) {\n        if (key == null) return false;\n        Set<String> values = getTagsFor(key).getValues();\n        return values.contains(\"\");\n    }","id":103067,"modified_method":"/**\n     * Replies true if there is a tag with an empty value for <code>key<\/code>.\n     * Replies false, if key is null.\n     *\n     * @param key the key\n     * @return true if there is a tag with an empty value for <code>key<\/code>\n     */\n    public boolean hasEmptyValue(String key) {\n        return generateStreamForKey(key).anyMatch(t -> t.getValue().isEmpty());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Adds a tag to the tag collection. If <code>tag<\/code> is null, nothing is added.\n     *\n     * @param tag the tag to add\n     */\n    public final void add(Tag tag) {\n        if (tag == null) return;\n        if (tags.contains(tag)) return;\n        tags.add(tag);\n    }","id":103068,"modified_method":"/**\n     * Adds a tag to the tag collection. If <code>tag<\/code> is null, nothing is added.\n     *\n     * @param tag the tag to add\n     */\n    public final void add(Tag tag) {\n        if (tag != null) {\n            tags.merge(tag, 1, (i, j) -> i + j);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Applies this tag collection to a collection of {@link org.openstreetmap.josm.data.osm.OsmPrimitive}s. Does nothing if\n     * primitives is null\n     *\n     * @param primitives the collection of primitives\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void applyTo(Collection<? extends Tagged> primitives) {\n        if (primitives == null) return;\n        if (!isApplicableToPrimitive())\n            throw new IllegalStateException(tr(\"Tag collection cannot be applied to a primitive because there are keys with multiple values.\"));\n        for (Tagged primitive: primitives) {\n            applyTo(primitive);\n        }\n    }","id":103069,"modified_method":"/**\n     * Applies this tag collection to a collection of {@link org.openstreetmap.josm.data.osm.OsmPrimitive}s. Does nothing if\n     * primitives is null\n     *\n     * @param primitives the collection of primitives\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void applyTo(Collection<? extends Tagged> primitives) {\n        if (primitives == null) return;\n        ensureApplicableToPrimitive();\n        for (Tagged primitive: primitives) {\n            applyTo(primitive);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true it there is at least one tag with a non empty value for key.\n     * Replies false if key is null.\n     *\n     * @param key the key\n     * @return true it there is at least one tag with a non empty value for key.\n     */\n    public boolean hasValuesFor(String key) {\n        if (key == null) return false;\n        Set<String> values = getTagsFor(key).getValues();\n        values.remove(\"\");\n        return !values.isEmpty();\n    }","id":103070,"modified_method":"/**\n     * Replies true it there is at least one tag with a non empty value for key.\n     * Replies false if key is null.\n     *\n     * @param key the key\n     * @return true it there is at least one tag with a non empty value for key.\n     */\n    public boolean hasValuesFor(String key) {\n        return generateStreamForKey(key).filter(t -> !t.getValue().isEmpty()).findAny().isPresent();\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if the this tag collection contains <code>tag<\/code>.\n     *\n     * @param tag the tag to look up\n     * @return true if the this tag collection contains <code>tag<\/code>; false, otherwise\n     */\n    public boolean contains(Tag tag) {\n        return tags.contains(tag);\n    }","id":103071,"modified_method":"/**\n     * Replies true if the this tag collection contains <code>tag<\/code>.\n     *\n     * @param tag the tag to look up\n     * @return true if the this tag collection contains <code>tag<\/code>; false, otherwise\n     */\n    public boolean contains(Tag tag) {\n        return tags.containsKey(tag);\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the set of keys which have at least 2 matching tags.\n     *\n     * @return the set of keys which have at least 2 matching tags.\n     */\n    public Set<String> getKeysWithMultipleValues() {\n        Map<String, Integer> counters = new HashMap<>();\n        for (Tag tag: tags) {\n            Integer v = counters.get(tag.getKey());\n            counters.put(tag.getKey(), (v == null) ? 1 : v+1);\n        }\n        Set<String> ret = new HashSet<>();\n        for (Entry<String, Integer> e : counters.entrySet()) {\n            if (e.getValue() > 1) {\n                ret.add(e.getKey());\n            }\n        }\n        return ret;\n    }","id":103072,"modified_method":"/**\n     * Replies the set of keys which have at least 2 matching tags.\n     *\n     * @return the set of keys which have at least 2 matching tags.\n     */\n    public Set<String> getKeysWithMultipleValues() {\n        HashSet<String> singleKeys = new HashSet<>();\n        return generateKeyStream().filter(key -> !singleKeys.add(key)).collect(Collectors.toSet());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replaces the tags of an {@link org.openstreetmap.josm.data.osm.OsmPrimitive} by the tags in this collection . Does nothing if\n     * primitive is null\n     *\n     * @param primitive  the primitive\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void replaceTagsOf(Tagged primitive) {\n        if (primitive == null) return;\n        if (!isApplicableToPrimitive())\n            throw new IllegalStateException(tr(\"Tag collection cannot be applied to a primitive because there are keys with multiple values.\"));\n        primitive.removeAll();\n        for (Tag tag: tags) {\n            primitive.put(tag.getKey(), tag.getValue());\n        }\n    }","id":103073,"modified_method":"/**\n     * Replaces the tags of an {@link org.openstreetmap.josm.data.osm.OsmPrimitive} by the tags in this collection . Does nothing if\n     * primitive is null\n     *\n     * @param primitive  the primitive\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void replaceTagsOf(Tagged primitive) {\n        if (primitive == null) return;\n        ensureApplicableToPrimitive();\n        primitive.removeAll();\n        for (Tag tag: tags.keySet()) {\n            primitive.put(tag.getKey(), tag.getValue());\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if this tag collection contains at least one tag with key <code>key<\/code>.\n     *\n     * @param key the key to look up\n     * @return true if this tag collection contains at least one tag with key <code>key<\/code>; false, otherwise\n     */\n    public boolean containsKey(String key) {\n        if (key == null) return false;\n        for (Tag tag: tags) {\n            if (tag.matchesKey(key)) return true;\n        }\n        return false;\n    }","id":103074,"modified_method":"/**\n     * Replies true if this tag collection contains at least one tag with key <code>key<\/code>.\n     *\n     * @param key the key to look up\n     * @return true if this tag collection contains at least one tag with key <code>key<\/code>; false, otherwise\n     * @deprecated Use {@link #hasTagsFor(String)} instead.\n     */\n    @Deprecated\n    public boolean containsKey(String key) {\n        return generateStreamForKey(key).findAny().isPresent();\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the tags of this tag collection as set\n     *\n     * @return the tags of this tag collection as set\n     */\n    public Set<Tag> asSet() {\n        return new HashSet<>(tags);\n    }","id":103075,"modified_method":"/**\n     * Replies the tags of this tag collection as set\n     *\n     * @return the tags of this tag collection as set\n     */\n    public Set<Tag> asSet() {\n        return new HashSet<>(tags.keySet());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Removes all tags in the tag collection <code>tags<\/code> from the current tag collection.\n     * Does nothing if <code>tags<\/code> is null.\n     *\n     * @param tags the tag collection to be removed.\n     */\n    public void remove(TagCollection tags) {\n        if (tags == null) return;\n        this.tags.removeAll(tags.tags);\n    }","id":103076,"modified_method":"/**\n     * Removes all tags in the tag collection <code>tags<\/code> from the current tag collection.\n     * Does nothing if <code>tags<\/code> is null.\n     *\n     * @param tags the tag collection to be removed.\n     */\n    public void remove(TagCollection tags) {\n        if (tags != null) {\n            tags.tags.keySet().stream().forEach(this::remove);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Applies this tag collection to an {@link org.openstreetmap.josm.data.osm.OsmPrimitive}. Does nothing if\n     * primitive is null\n     *\n     * @param primitive  the primitive\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void applyTo(Tagged primitive) {\n        if (primitive == null) return;\n        if (!isApplicableToPrimitive())\n            throw new IllegalStateException(tr(\"Tag collection cannot be applied to a primitive because there are keys with multiple values.\"));\n        for (Tag tag: tags) {\n            if (tag.getValue() == null || tag.getValue().isEmpty()) {\n                primitive.remove(tag.getKey());\n            } else {\n                primitive.put(tag.getKey(), tag.getValue());\n            }\n        }\n    }","id":103077,"modified_method":"/**\n     * Applies this tag collection to an {@link org.openstreetmap.josm.data.osm.OsmPrimitive}. Does nothing if\n     * primitive is null\n     *\n     * @param primitive  the primitive\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void applyTo(Tagged primitive) {\n        if (primitive == null) return;\n        ensureApplicableToPrimitive();\n        for (Tag tag: tags.keySet()) {\n            if (tag.getValue() == null || tag.getValue().isEmpty()) {\n                primitive.remove(tag.getKey());\n            } else {\n                primitive.put(tag.getKey(), tag.getValue());\n            }\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the set of values in this tag collection\n     *\n     * @return the set of values\n     */\n    public Set<String> getValues() {\n        Set<String> ret = new HashSet<>();\n        for (Tag tag: tags) {\n            ret.add(tag.getValue());\n        }\n        return ret;\n    }","id":103078,"modified_method":"/**\n     * Replies the set of values in this tag collection\n     *\n     * @return the set of values\n     */\n    public Set<String> getValues() {\n        return tags.keySet().stream().map(e -> e.getValue()).collect(Collectors.toSet());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Creates a clone of the tag collection <code>other<\/code>. Creats an empty\n     * tag collection if <code>other<\/code> is null.\n     *\n     * @param other the other collection\n     */\n    public TagCollection(TagCollection other) {\n        if (other != null) {\n            tags.addAll(other.tags);\n        }\n    }","id":103079,"modified_method":"/**\n     * Creates a clone of the tag collection <code>other<\/code>. Creats an empty\n     * tag collection if <code>other<\/code> is null.\n     *\n     * @param other the other collection\n     */\n    public TagCollection(TagCollection other) {\n        if (other != null) {\n            tags.putAll(other.tags);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Builds the intersection of this tag collection and another tag collection\n     *\n     * @param other the other tag collection. If null, replies an empty tag collection.\n     * @return the intersection of this tag collection and another tag collection\n     */\n    public TagCollection intersect(TagCollection other) {\n        TagCollection ret = new TagCollection();\n        if (other != null) {\n            for (Tag tag: tags) {\n                if (other.contains(tag)) {\n                    ret.add(tag);\n                }\n            }\n        }\n        return ret;\n    }","id":103080,"modified_method":"/**\n     * Builds the intersection of this tag collection and another tag collection\n     *\n     * @param other the other tag collection. If null, replies an empty tag collection.\n     * @return the intersection of this tag collection and another tag collection. All counts are set to 1.\n     */\n    public TagCollection intersect(TagCollection other) {\n        TagCollection ret = new TagCollection();\n        if (other != null) {\n            tags.keySet().stream().filter(other::contains).forEach(ret::add);\n        }\n        return ret;\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the set of values for a given key. Replies an empty collection if there\n     * are no values for the given key.\n     *\n     * @param key the key to look up\n     * @return the set of values for a given key. Replies an empty collection if there\n     * are no values for the given key\n     */\n    public Set<String> getValues(String key) {\n        Set<String> ret = new HashSet<>();\n        if (key == null) return ret;\n        for (Tag tag: tags) {\n            if (tag.matchesKey(key)) {\n                ret.add(tag.getValue());\n            }\n        }\n        return ret;\n    }","id":103081,"modified_method":"/**\n     * Replies the set of values for a given key. Replies an empty collection if there\n     * are no values for the given key.\n     *\n     * @param key the key to look up\n     * @return the set of values for a given key. Replies an empty collection if there\n     * are no values for the given key\n     */\n    public Set<String> getValues(String key) {\n        // null-safe\n        return generateStreamForKey(key).map(e -> e.getValue()).collect(Collectors.toSet());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if there is exactly one tag for <code>key<\/code> and\n     * if the value of this tag is not empty. Replies false if key is\n     * null.\n     *\n     * @param key the key\n     * @return true if there is exactly one tag for <code>key<\/code> and\n     * if the value of this tag is not empty\n     */\n    public boolean hasUniqueNonEmptyValue(String key) {\n        if (key == null) return false;\n        Set<String> values = getTagsFor(key).getValues();\n        return values.size() == 1 && !values.contains(\"\");\n    }","id":103082,"modified_method":"/**\n     * Replies true if there is exactly one tag for <code>key<\/code> and\n     * if the value of this tag is not empty. Replies false if key is\n     * null.\n     *\n     * @param key the key\n     * @return true if there is exactly one tag for <code>key<\/code> and\n     * if the value of this tag is not empty\n     */\n    public boolean hasUniqueNonEmptyValue(String key) {\n        return generateStreamForKey(key).filter(t -> !t.getValue().isEmpty()).count() == 1;\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if this tag collection contains all tags in <code>tags<\/code>. Replies\n     * false, if tags is null.\n     *\n     * @param tags the tags to look up\n     * @return true if this tag collection contains all tags in <code>tags<\/code>. Replies\n     * false, if tags is null.\n     */\n    public boolean containsAll(Collection<Tag> tags) {\n        if (tags == null) return false;\n        return this.tags.containsAll(tags);\n    }","id":103083,"modified_method":"/**\n     * Replies true if this tag collection contains all tags in <code>tags<\/code>. Replies\n     * false, if tags is null.\n     *\n     * @param tags the tags to look up\n     * @return true if this tag collection contains all tags in <code>tags<\/code>. Replies\n     * false, if tags is null.\n     */\n    public boolean containsAll(Collection<Tag> tags) {\n        if (tags == null) {\n            return false;\n        } else {\n            return this.tags.keySet().containsAll(tags);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies a tag collection with the tags for a given key. Replies an empty collection\n     * if key is null.\n     *\n     * @param key the key to look up\n     * @return a tag collection with the tags for a given key. Replies an empty collection\n     * if key is null.\n     */\n    public TagCollection getTagsFor(String key) {\n        TagCollection ret = new TagCollection();\n        if (key == null)\n            return ret;\n        for (Tag tag: tags) {\n            if (tag.matchesKey(key)) {\n                ret.add(tag);\n            }\n        }\n        return ret;\n    }","id":103084,"modified_method":"/**\n     * Replies a tag collection with the tags for a given key. Replies an empty collection\n     * if key is null.\n     *\n     * @param key the key to look up\n     * @return a tag collection with the tags for a given key. Replies an empty collection\n     * if key is null.\n     */\n    public TagCollection getTagsFor(String key) {\n        TagCollection ret = new TagCollection();\n        generateStreamForKey(key).forEach(ret::add);\n        return ret;\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if this tag collection at least one tag for every key in <code>keys<\/code>.\n     * Replies false, if <code>keys<\/code> is null. null values in <code>keys<\/code> are ignored.\n     *\n     * @param keys the keys to lookup\n     * @return true if this tag collection at least one tag for every key in <code>keys<\/code>.\n     */\n    public boolean containsAllKeys(Collection<String> keys) {\n        if (keys == null) return false;\n        for (String key: keys) {\n            if (key == null) {\n                continue;\n            }\n            if (!containsKey(key)) return false;\n        }\n        return true;\n    }","id":103085,"modified_method":"/**\n     * Replies true if this tag collection at least one tag for every key in <code>keys<\/code>.\n     * Replies false, if <code>keys<\/code> is null. null values in <code>keys<\/code> are ignored.\n     *\n     * @param keys the keys to lookup\n     * @return true if this tag collection at least one tag for every key in <code>keys<\/code>.\n     */\n    public boolean containsAllKeys(Collection<String> keys) {\n        if (keys == null) {\n            return false;\n        } else {\n            return keys.stream().filter(Objects::nonNull).allMatch(this::hasTagsFor);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replaces the tags of a collection of{@link org.openstreetmap.josm.data.osm.OsmPrimitive}s by the tags in this collection.\n     * Does nothing if primitives is null\n     *\n     * @param primitives the collection of primitives\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void replaceTagsOf(Collection<? extends Tagged> primitives) {\n        if (primitives == null) return;\n        if (!isApplicableToPrimitive())\n            throw new IllegalStateException(tr(\"Tag collection cannot be applied to a primitive because there are keys with multiple values.\"));\n        for (Tagged primitive: primitives) {\n            replaceTagsOf(primitive);\n        }\n    }","id":103086,"modified_method":"/**\n     * Replaces the tags of a collection of{@link org.openstreetmap.josm.data.osm.OsmPrimitive}s by the tags in this collection.\n     * Does nothing if primitives is null\n     *\n     * @param primitives the collection of primitives\n     * @throws IllegalStateException if this tag collection can't be applied\n     * because there are keys with multiple values\n     */\n    public void replaceTagsOf(Collection<? extends Tagged> primitives) {\n        if (primitives == null) return;\n        ensureApplicableToPrimitive();\n        for (Tagged primitive: primitives) {\n            replaceTagsOf(primitive);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Removes a collection of tags from the tag collection. Does nothing if <code>tags<\/code> is\n     * null.\n     *\n     * @param tags the tags to be removed\n     */\n    public void remove(Collection<Tag> tags) {\n        if (tags == null) return;\n        this.tags.removeAll(tags);\n    }","id":103087,"modified_method":"/**\n     * Removes a collection of tags from the tag collection. Does nothing if <code>tags<\/code> is\n     * null.\n     *\n     * @param tags the tags to be removed\n     */\n    public void remove(Collection<Tag> tags) {\n        if (tags != null) {\n            tags.stream().forEach(this::remove);\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies an iterator to iterate over the tags in this collection\n     *\n     * @return the iterator\n     */\n    @Override\n    public Iterator<Tag> iterator() {\n        return tags.iterator();\n    }","id":103088,"modified_method":"/**\n     * Replies an iterator to iterate over the tags in this collection\n     *\n     * @return the iterator\n     */\n    @Override\n    public Iterator<Tag> iterator() {\n        return tags.keySet().iterator();\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Removes all tags whose keys are equal to  <code>key<\/code>. Does nothing if <code>key<\/code>\n     * is null.\n     *\n     * @param key the key to be removed\n     */\n    public void removeByKey(String key) {\n        if (key == null) return;\n        Iterator<Tag> it = tags.iterator();\n        while (it.hasNext()) {\n            if (it.next().matchesKey(key)) {\n                it.remove();\n            }\n        }\n    }","id":103089,"modified_method":"/**\n     * Removes all tags whose keys are equal to  <code>key<\/code>. Does nothing if <code>key<\/code>\n     * is null.\n     *\n     * @param key the key to be removed\n     */\n    public void removeByKey(String key) {\n        if (key != null) {\n            Iterator<Tag> it = tags.keySet().iterator();\n            while (it.hasNext()) {\n                if (it.next().matchesKey(key)) {\n                    it.remove();\n                }\n            }\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the set of keys of this tag collection.\n     *\n     * @return the set of keys of this tag collection\n     */\n    public Set<String> getKeys() {\n        Set<String> ret = new HashSet<>();\n        for (Tag tag: tags) {\n            ret.add(tag.getKey());\n        }\n        return ret;\n    }","id":103090,"modified_method":"/**\n     * Replies the set of keys of this tag collection.\n     *\n     * @return the set of keys of this tag collection\n     */\n    public Set<String> getKeys() {\n        return generateKeyStream().collect(Collectors.toCollection(HashSet::new));\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the tags of this tag collection as list.\n     * Note that the order of the list is not preserved between method invocations.\n     *\n     * @return the tags of this tag collection as list.\n     */\n    public List<Tag> asList() {\n        return new ArrayList<>(tags);\n    }","id":103091,"modified_method":"/**\n     * Replies the tags of this tag collection as list.\n     * Note that the order of the list is not preserved between method invocations.\n     *\n     * @return the tags of this tag collection as list. There are no dupplicate values.\n     */\n    public List<Tag> asList() {\n        return new ArrayList<>(tags.keySet());\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies the number of tags with key <code>key<\/code>\n     *\n     * @param key the key to look up\n     * @return the number of tags with key <code>key<\/code>. 0, if key is null.\n     */\n    public int getNumTagsFor(String key) {\n        if (key == null) return 0;\n        int count = 0;\n        for (Tag tag: tags) {\n            if (tag.matchesKey(key)) {\n                count++;\n            }\n        }\n        return count;\n    }","id":103092,"modified_method":"/**\n     * Replies the number of tags with key <code>key<\/code>\n     *\n     * @param key the key to look up\n     * @return the number of tags with key <code>key<\/code>, including the empty \"\" value. 0, if key is null.\n     */\n    public int getNumTagsFor(String key) {\n        return (int) generateStreamForKey(key).count();\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if there is exactly one tag for <code>key<\/code> and if\n     * the value for this tag is empty. Replies false if key is null.\n     *\n     * @param key the key\n     * @return  true if there is exactly one tag for <code>key<\/code> and if\n     * the value for this tag is empty\n     */\n    public boolean hasUniqueEmptyValue(String key) {\n        if (key == null) return false;\n        Set<String> values = getTagsFor(key).getValues();\n        return values.size() == 1 && values.contains(\"\");\n    }","id":103093,"modified_method":"/**\n     * Replies true if there is exactly one tag for <code>key<\/code> and if\n     * the value for this tag is empty. Replies false if key is null.\n     *\n     * @param key the key\n     * @return  true if there is exactly one tag for <code>key<\/code> and if\n     * the value for this tag is empty\n     */\n    public boolean hasUniqueEmptyValue(String key) {\n        Set<String> values = getValues(key);\n        return values.size() == 1 && values.contains(\"\");\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Replies true if for every key there is one tag only, i.e. exactly one value.\n     *\n     * @return {@code true} if for every key there is one tag only\n     */\n    public boolean isApplicableToPrimitive() {\n        return size() == getKeys().size();\n    }","id":103094,"modified_method":"/**\n     * Replies true if for every key there is one tag only, i.e. exactly one value.\n     *\n     * @return {@code true} if for every key there is one tag only\n     */\n    public boolean isApplicableToPrimitive() {\n        return getKeysWithMultipleValues().isEmpty();\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Adds the tags of another tag collection to this collection. Adds nothing, if\n     * <code>tags<\/code> is null.\n     *\n     * @param tags the other tag collection\n     */\n    public final void add(TagCollection tags) {\n        if (tags == null) return;\n        this.tags.addAll(tags.tags);\n    }","id":103095,"modified_method":"/**\n     * Adds the tags of another tag collection to this collection. Adds nothing, if\n     * <code>tags<\/code> is null.\n     *\n     * @param tags the other tag collection\n     */\n    public final void add(TagCollection tags) {\n        if (tags != null) {\n            for (Entry<Tag, Integer> entry : tags.tags.entrySet()) {\n                this.tags.merge(entry.getKey(), entry.getValue(), (i, j) -> i + j);\n            }\n        }\n    }","commit_id":"844ebe11ec8165814fdb58e981e80176564cfb0d","url":"https://github.com/openstreetmap/josm"},{"original_method":"static public AServerLoad hslToASL(HServerLoad hsl) throws IOException {\n    AServerLoad asl = new AServerLoad();\n    asl.load = hsl.getLoad();\n    asl.maxHeapMB = hsl.getMaxHeapMB();\n    asl.memStoreSizeInMB = hsl.getMemStoreSizeInMB();\n    asl.numberOfRegions = hsl.getNumberOfRegions();\n    asl.numberOfRequests = hsl.getNumberOfRequests();\n\n    Collection<HServerLoad.RegionLoad> regionLoads = hsl.getRegionsLoad();\n    Schema s = Schema.createArray(ARegionLoad.SCHEMA$);\n    GenericData.Array<ARegionLoad> aregionLoads = null;\n    if (regionLoads != null) {\n      aregionLoads = new GenericData.Array<ARegionLoad>(regionLoads.size(), s);\n      for (HServerLoad.RegionLoad rl : regionLoads) {\n\taregionLoads.add(hrlToARL(rl));\n      }\n    } else {\n      aregionLoads = new GenericData.Array<ARegionLoad>(0, s);\n    }\n    asl.regionsLoad = aregionLoads;\n\n    asl.storefileIndexSizeInMB = hsl.getStorefileIndexSizeInMB();\n    asl.storefiles = hsl.getStorefiles();\n    asl.storefileSizeInMB = hsl.getStorefileSizeInMB();\n    asl.usedHeapMB = hsl.getUsedHeapMB();\n    return asl;\n  }","id":103096,"modified_method":"static public AServerLoad hslToASL(HServerLoad hsl) throws IOException {\n    AServerLoad asl = new AServerLoad();\n    asl.load = hsl.getLoad();\n    asl.maxHeapMB = hsl.getMaxHeapMB();\n    asl.memStoreSizeInMB = hsl.getMemStoreSizeInMB();\n    asl.numberOfRegions = hsl.getNumberOfRegions();\n    asl.numberOfRequests = hsl.getNumberOfRequests();\n\n    Collection<HServerLoad.RegionLoad> regionLoads = hsl.getRegionsLoad().values();\n    Schema s = Schema.createArray(ARegionLoad.SCHEMA$);\n    GenericData.Array<ARegionLoad> aregionLoads = null;\n    if (regionLoads != null) {\n      aregionLoads = new GenericData.Array<ARegionLoad>(regionLoads.size(), s);\n      for (HServerLoad.RegionLoad rl : regionLoads) {\n\taregionLoads.add(hrlToARL(rl));\n      }\n    } else {\n      aregionLoads = new GenericData.Array<ARegionLoad>(0, s);\n    }\n    asl.regionsLoad = aregionLoads;\n\n    asl.storefileIndexSizeInMB = hsl.getStorefileIndexSizeInMB();\n    asl.storefiles = hsl.getStorefiles();\n    asl.storefileSizeInMB = hsl.getStorefileSizeInMB();\n    asl.usedHeapMB = hsl.getUsedHeapMB();\n    return asl;\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"public void write(DataOutput out) throws IOException {\n    out.writeInt(numberOfRequests);\n    out.writeInt(usedHeapMB);\n    out.writeInt(maxHeapMB);\n    out.writeInt(numberOfRegions);\n    for (int i = 0; i < numberOfRegions; i++)\n      regionLoad.get(i).write(out);\n  }","id":103097,"modified_method":"public void write(DataOutput out) throws IOException {\n    out.writeInt(numberOfRequests);\n    out.writeInt(usedHeapMB);\n    out.writeInt(maxHeapMB);\n    out.writeInt(numberOfRegions);\n    for (RegionLoad rl: regionLoad.values())\n      rl.write(out);\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Constructor\n   * @param hsl the template HServerLoad\n   */\n  public HServerLoad(final HServerLoad hsl) {\n    this(hsl.numberOfRequests, hsl.usedHeapMB, hsl.maxHeapMB);\n    this.regionLoad.addAll(hsl.regionLoad);\n  }","id":103098,"modified_method":"/**\n   * Constructor\n   * @param hsl the template HServerLoad\n   */\n  public HServerLoad(final HServerLoad hsl) {\n    this(hsl.numberOfRequests, hsl.usedHeapMB, hsl.maxHeapMB);\n    for (Map.Entry<byte[], RegionLoad> e : hsl.regionLoad.entrySet()) {\n      this.regionLoad.put(e.getKey(), e.getValue());\n    }\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @return Size of store file indexes in MB\n   */\n  public int getStorefileIndexSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad)\n    \tcount += info.getStorefileIndexSizeMB();\n    return count;\n  }","id":103099,"modified_method":"/**\n   * @return Size of store file indexes in MB\n   */\n  public int getStorefileIndexSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad.values())\n    \tcount += info.getStorefileIndexSizeMB();\n    return count;\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @param load Instance of HServerLoad\n   */\n  public void addRegionInfo(final HServerLoad.RegionLoad load) {\n    this.numberOfRegions++;\n    this.regionLoad.add(load);\n  }","id":103100,"modified_method":"/**\n   * @param load Instance of HServerLoad\n   */\n  public void addRegionInfo(final HServerLoad.RegionLoad load) {\n    this.numberOfRegions++;\n    this.regionLoad.put(load.getName(), load);\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @return Count of storefiles on this regionserver\n   */\n  public int getStorefiles() {\n    int count = 0;\n    for (RegionLoad info: regionLoad)\n    \tcount += info.getStorefiles();\n    return count;\n  }","id":103101,"modified_method":"/**\n   * @return Count of storefiles on this regionserver\n   */\n  public int getStorefiles() {\n    int count = 0;\n    for (RegionLoad info: regionLoad.values())\n    \tcount += info.getStorefiles();\n    return count;\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @return region load metrics\n   */\n  public Collection<RegionLoad> getRegionsLoad() {\n    return Collections.unmodifiableCollection(regionLoad);\n  }","id":103102,"modified_method":"/**\n   * @return region load metrics\n   */\n  public Map<byte[], RegionLoad> getRegionsLoad() {\n    return Collections.unmodifiableMap(regionLoad);\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"public void readFields(DataInput in) throws IOException {\n    numberOfRequests = in.readInt();\n    usedHeapMB = in.readInt();\n    maxHeapMB = in.readInt();\n    numberOfRegions = in.readInt();\n    for (int i = 0; i < numberOfRegions; i++) {\n      RegionLoad rl = new RegionLoad();\n      rl.readFields(in);\n      regionLoad.add(rl);\n    }\n  }","id":103103,"modified_method":"public void readFields(DataInput in) throws IOException {\n    numberOfRequests = in.readInt();\n    usedHeapMB = in.readInt();\n    maxHeapMB = in.readInt();\n    numberOfRegions = in.readInt();\n    for (int i = 0; i < numberOfRegions; i++) {\n      RegionLoad rl = new RegionLoad();\n      rl.readFields(in);\n      regionLoad.put(rl.getName(), rl);\n    }\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @return Total size of store files in MB\n   */\n  public int getStorefileSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad)\n      count += info.getStorefileSizeMB();\n    return count;\n  }","id":103104,"modified_method":"/**\n   * @return Total size of store files in MB\n   */\n  public int getStorefileSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad.values())\n      count += info.getStorefileSizeMB();\n    return count;\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @param name\n   * @param stores\n   * @param storefiles\n   * @param memstoreSizeMB\n   * @param storefileIndexSizeMB\n   * @param requestsCount\n   * @deprecated Use {@link #addRegionInfo(RegionLoad)}\n   */\n  @Deprecated\n  public void addRegionInfo(final byte[] name, final int stores,\n      final int storefiles, final int storefileSizeMB,\n      final int memstoreSizeMB, final int storefileIndexSizeMB,\n      final long requestsCount) {\n    this.regionLoad.add(new HServerLoad.RegionLoad(name, stores, storefiles,\n      storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB, requestsCount));\n  }","id":103105,"modified_method":"/**\n   * @param name\n   * @param stores\n   * @param storefiles\n   * @param memstoreSizeMB\n   * @param storefileIndexSizeMB\n   * @param requestsCount\n   * @deprecated Use {@link #addRegionInfo(RegionLoad)}\n   */\n  @Deprecated\n  public void addRegionInfo(final byte[] name, final int stores,\n      final int storefiles, final int storefileSizeMB,\n      final int memstoreSizeMB, final int storefileIndexSizeMB,\n      final long requestsCount) {\n    this.regionLoad.put(name, new HServerLoad.RegionLoad(name, stores, storefiles,\n      storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB, requestsCount));\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @return Size of memstores in MB\n   */\n  public int getMemStoreSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad)\n    \tcount += info.getMemStoreSizeMB();\n    return count;\n  }","id":103106,"modified_method":"/**\n   * @return Size of memstores in MB\n   */\n  public int getMemStoreSizeInMB() {\n    int count = 0;\n    for (RegionLoad info: regionLoad.values())\n    \tcount += info.getMemStoreSizeMB();\n    return count;\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"@GET\n  @Produces({MIMETYPE_TEXT, MIMETYPE_XML, MIMETYPE_JSON, MIMETYPE_PROTOBUF})\n  public Response get(final @Context UriInfo uriInfo) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"GET \" + uriInfo.getAbsolutePath());\n    }\n    servlet.getMetrics().incrementRequests(1);\n    try {\n      HBaseAdmin admin = new HBaseAdmin(servlet.getConfiguration());\n      ClusterStatus status = admin.getClusterStatus();\n      StorageClusterStatusModel model = new StorageClusterStatusModel();\n      model.setRegions(status.getRegionsCount());\n      model.setRequests(status.getRequestsCount());\n      model.setAverageLoad(status.getAverageLoad());\n      for (HServerInfo info: status.getServerInfo()) {\n        HServerLoad load = info.getLoad();\n        StorageClusterStatusModel.Node node = \n          model.addLiveNode(\n            info.getServerAddress().getHostname() + \":\" + \n            Integer.toString(info.getServerAddress().getPort()),\n            info.getStartCode(), load.getUsedHeapMB(),\n            load.getMaxHeapMB());\n        node.setRequests(load.getNumberOfRequests());\n        for (HServerLoad.RegionLoad region: load.getRegionsLoad()) {\n          node.addRegion(region.getName(), region.getStores(),\n            region.getStorefiles(), region.getStorefileSizeMB(),\n            region.getMemStoreSizeMB(), region.getStorefileIndexSizeMB());\n        }\n      }\n      for (String name: status.getDeadServerNames()) {\n        model.addDeadNode(name);\n      }\n      ResponseBuilder response = Response.ok(model);\n      response.cacheControl(cacheControl);\n      return response.build();\n    } catch (IOException e) {\n      throw new WebApplicationException(e, \n                  Response.Status.SERVICE_UNAVAILABLE);\n    }\n  }","id":103107,"modified_method":"@GET\n  @Produces({MIMETYPE_TEXT, MIMETYPE_XML, MIMETYPE_JSON, MIMETYPE_PROTOBUF})\n  public Response get(final @Context UriInfo uriInfo) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"GET \" + uriInfo.getAbsolutePath());\n    }\n    servlet.getMetrics().incrementRequests(1);\n    try {\n      HBaseAdmin admin = new HBaseAdmin(servlet.getConfiguration());\n      ClusterStatus status = admin.getClusterStatus();\n      StorageClusterStatusModel model = new StorageClusterStatusModel();\n      model.setRegions(status.getRegionsCount());\n      model.setRequests(status.getRequestsCount());\n      model.setAverageLoad(status.getAverageLoad());\n      for (HServerInfo info: status.getServerInfo()) {\n        HServerLoad load = info.getLoad();\n        StorageClusterStatusModel.Node node = \n          model.addLiveNode(\n            info.getServerAddress().getHostname() + \":\" + \n            Integer.toString(info.getServerAddress().getPort()),\n            info.getStartCode(), load.getUsedHeapMB(),\n            load.getMaxHeapMB());\n        node.setRequests(load.getNumberOfRequests());\n        for (HServerLoad.RegionLoad region: load.getRegionsLoad().values()) {\n          node.addRegion(region.getName(), region.getStores(),\n            region.getStorefiles(), region.getStorefileSizeMB(),\n            region.getMemStoreSizeMB(), region.getStorefileIndexSizeMB());\n        }\n      }\n      for (String name: status.getDeadServerNames()) {\n        model.addDeadNode(name);\n      }\n      ResponseBuilder response = Response.ok(model);\n      response.cacheControl(cacheControl);\n      return response.build();\n    } catch (IOException e) {\n      throw new WebApplicationException(e, \n                  Response.Status.SERVICE_UNAVAILABLE);\n    }\n  }","commit_id":"c4fb32cc22d1094b3d09fd010c778ea238480193","url":"https://github.com/apache/hbase"},{"original_method":"public RVFDataset<String, ScorePhraseMeasures> choosedatums(boolean forLearningPattern, String answerLabel,\n      TwoDimensionalCounter<CandidatePhrase, E> wordsPatExtracted,\n      Counter<E> allSelectedPatterns, boolean computeRawFreq) throws IOException {\n\n    Counter<Integer> distSimClustersOfPositive = new ClassicCounter<Integer>();\n    if(constVars.expandPositivesWhenSampling && !constVars.useWordVectorsToComputeSim){\n      for(CandidatePhrase s: CollectionUtils.union(constVars.getLearnedWords(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel))){\n        String[] toks = s.getPhrase().split(\"\\\\s+\");\n        if(!constVars.getWordClassClusters().containsKey(s.getPhrase())){\n          for(String tok: toks){\n            if(constVars.getWordClassClusters().containsKey(tok)){\n              distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(tok));\n            }\n          }\n        } else\n        distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(s.getPhrase()));\n      }\n    }\n\n    //make all possible negative phrases\n    Map<String, Collection<CandidatePhrase>> allPossibleNegativePhrases = new HashMap<String, Collection<CandidatePhrase>>();\n    Collection<CandidatePhrase> negPhrases = new HashSet<CandidatePhrase>();\n    negPhrases.addAll(constVars.getOtherSemanticClassesWords());\n    negPhrases.addAll(constVars.getStopWords());\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.functionWords));\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.getEnglishWords()));\n    for(Entry<String, Counter<CandidatePhrase>> en: constVars.getLearnedWords().entrySet()) {\n      if (!en.getKey().equals(answerLabel)){\n        negPhrases.addAll(en.getValue().keySet());\n        negPhrases.addAll(constVars.getSeedLabelDictionary().get(en.getKey()));\n      }\n    }\n    allPossibleNegativePhrases.put(\"NEGATIVE\", negPhrases);\n\n\n    RVFDataset<String, ScorePhraseMeasures> dataset = new RVFDataset<String, ScorePhraseMeasures>();\n    int numpos = 0;\n    Set<CandidatePhrase> allNegativePhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allUnknownPhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allPositivePhrases = new HashSet<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToPositivePhrases = new ClassicCounter<CandidatePhrase>();\n\n    //for all sentences brtch\n    ConstantsAndVariables.DataSentsIterator sentsIter = new ConstantsAndVariables.DataSentsIterator(constVars.batchProcessSents);\n    while(sentsIter.hasNext()) {\n      Pair<Map<String, DataInstance>, File> sentsf = sentsIter.next();\n      Map<String, DataInstance> sents = sentsf.first();\n      Redwood.log(Redwood.DBG, \"Sampling datums from \" + sentsf.second());\n      if (computeRawFreq)\n        Data.computeRawFreqIfNull(sents, PatternFactory.numWordsCompound);\n\n      List<List<String>> threadedSentIds = GetPatternsFromDataMultiClass.getThreadBatches(new ArrayList<String>(sents.keySet()), constVars.numThreads);\n      ExecutorService executor = Executors.newFixedThreadPool(constVars.numThreads);\n      List<Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>>> list = new ArrayList<Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>>>();\n\n      //multi-threaded choose positive, negative and unknown\n      for (List<String> keys : threadedSentIds) {\n        Callable<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> task = new ChooseDatumsThread(answerLabel, sents, keys, forLearningPattern, wordsPatExtracted, allSelectedPatterns,\n          distSimClustersOfPositive, allPossibleNegativePhrases);\n        Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> submit = executor.submit(task);\n        list.add(submit);\n      }\n\n      // Now retrieve the result\n      for (Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> future : list) {\n        try {\n          Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>> result = future.get();\n          allPositivePhrases.addAll(result.first());\n          allNegativePhrases.addAll(result.second());\n          allUnknownPhrases.addAll(result.third());\n          allCloseToPositivePhrases.addAll(result.fourth());\n        } catch (Exception e) {\n          executor.shutdownNow();\n          throw new RuntimeException(e);\n        }\n      }\n      executor.shutdown();\n    }\n\n    //Set<CandidatePhrase> knownPositivePhrases = CollectionUtils.unionAsSet(constVars.getLearnedWords().get(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel));\n    //TODO: this is kinda not nice; how is allpositivephrases different from positivephrases again?\n    allPositivePhrases.addAll(constVars.getLearnedWords().get(answerLabel).keySet());\n    //allPositivePhrases.addAll(knownPositivePhrases);\n\n    BufferedWriter logFile = null;\n    BufferedWriter logFileFeat = null;\n\n    if(constVars.logFileVectorSimilarity != null){\n      logFile = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity));\n      logFileFeat = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity+\"_feat\"));\n\n      if(wordVectors != null){\n      for(CandidatePhrase p : allPositivePhrases){\n        if(wordVectors.containsKey(p.getPhrase())){\n          logFile.write(p.getPhrase()+\"-P \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n        }\n      }\n      }\n    }\n\n    if(constVars.expandPositivesWhenSampling){\n      //TODO: patwtbyfrew\n      //Counters.retainTop(allCloseToPositivePhrases, (int) (allCloseToPositivePhrases.size()*constVars.subSampleUnkAsPosUsingSimPercentage));\n      Redwood.log(\"Expanding positives by adding \" + allCloseToPositivePhrases + \" phrases\");\n      allPositivePhrases.addAll(allCloseToPositivePhrases.keySet());\n      if(logFile != null && wordVectors != null){\n        for(CandidatePhrase p : allCloseToPositivePhrases.keySet()){\n          if(wordVectors.containsKey(p.getPhrase())){\n            logFile.write(p.getPhrase()+\"-PP \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n          }\n        }\n      }\n    }\n\n\n\n    System.out.println(\"all positive phrases are  \" + allPositivePhrases);\n    for(CandidatePhrase candidate: allPositivePhrases) {\n      Counter<ScorePhraseMeasures> feat = null;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, candidate);\n      } else {\n        feat = getFeatures(answerLabel, candidate, wordsPatExtracted.getCounter(candidate), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"true\");\n      dataset.add(datum);\n      numpos += 1;\n      if(logFileFeat !=null){\n        logFileFeat.write(\"POSITIVE \" + candidate.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n      }\n    }\n\n    Redwood.log(Redwood.DBG, \"Number of pure negative phrases is \" + allNegativePhrases.size());\n    Redwood.log(Redwood.DBG, \"Number of unknown phrases is \" + allUnknownPhrases.size());\n\n    if(constVars.subsampleUnkAsNegUsingSim){\n      double subSampleUnkAsNegUsingSimPercentage = 1.0;\n      Set<CandidatePhrase> chosenUnknown = chooseUnknownAsNegatives(allUnknownPhrases, answerLabel, subSampleUnkAsNegUsingSimPercentage, allPositivePhrases, allPossibleNegativePhrases, logFile);\n      Redwood.log(Redwood.DBG, \"Choosing \" + chosenUnknown.size() + \" unknowns as negative based to their similarity to the positive phrases\");\n      allNegativePhrases.addAll(chosenUnknown);\n    }\n    else{\n        allNegativePhrases.addAll(allUnknownPhrases);\n    }\n\n    if(allNegativePhrases.size() > numpos) {\n      Redwood.log(Redwood.WARN, \"Num of negative (\" + allNegativePhrases.size() + \") is higher than number of positive phrases (\" + numpos + \") = \" +\n        (allNegativePhrases.size() / (double)numpos) + \". \" +\n        \"Capping the number by taking the first numPositives as negative. Consider decreasing perSelectNeg and perSelectRand\");\n      int i = 0;\n      Set<CandidatePhrase> selectedNegPhrases = new HashSet<CandidatePhrase>();\n      for(CandidatePhrase p : allNegativePhrases){\n        if (i >= numpos)\n          break;\n        selectedNegPhrases.add(p);\n        i++;\n      }\n      allNegativePhrases.clear();\n      allNegativePhrases = selectedNegPhrases;\n    }\n\n    System.out.println(\"all negative phrases are \" + allNegativePhrases);\n    for(CandidatePhrase negative: allNegativePhrases){\n      Counter<ScorePhraseMeasures> feat;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, negative);\n      } else {\n        feat = getFeatures(answerLabel, negative, wordsPatExtracted.getCounter(negative), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"false\");\n      dataset.add(datum);\n\n      if(logFile!=null && wordVectors != null && wordVectors.containsKey(negative.getPhrase())){\n        logFile.write(negative.getPhrase()+\"-N\"+\" \" + ArrayUtils.toString(wordVectors.get(negative.getPhrase()), \" \")+\"\\n\");\n      }\n\n      if(logFileFeat !=null)\n        logFileFeat.write(\"NEGATIVE \" + negative.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n\n    }\n\n    if(logFile!=null){\n      logFile.close();\n      logFileFeat.close();\n    }\n\n    System.out.println(\"Before feature count threshold, dataset stats are \");\n    dataset.summaryStatistics();\n\n    int threshold = 2;\n    dataset.applyFeatureCountThreshold(threshold);\n    System.out.println(\"AFTER feature count threshold of \" + threshold + \", dataset stats are \");\n    dataset.summaryStatistics();\n\n    Redwood.log(Redwood.DBG, \"Eventually, number of positive datums:  \" + numpos + \" and number of negative datums: \" + allNegativePhrases.size());\n    return dataset;\n  }","id":103108,"modified_method":"public RVFDataset<String, ScorePhraseMeasures> choosedatums(boolean forLearningPattern, String answerLabel,\n      TwoDimensionalCounter<CandidatePhrase, E> wordsPatExtracted,\n      Counter<E> allSelectedPatterns, boolean computeRawFreq) throws IOException {\n\n    Counter<Integer> distSimClustersOfPositive = new ClassicCounter<Integer>();\n    if(constVars.expandPositivesWhenSampling && !constVars.useWordVectorsToComputeSim){\n      for(CandidatePhrase s: CollectionUtils.union(constVars.getLearnedWords(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel))){\n        String[] toks = s.getPhrase().split(\"\\\\s+\");\n        if(!constVars.getWordClassClusters().containsKey(s.getPhrase())){\n          for(String tok: toks){\n            if(constVars.getWordClassClusters().containsKey(tok)){\n              distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(tok));\n            }\n          }\n        } else\n        distSimClustersOfPositive.incrementCount(constVars.getWordClassClusters().get(s.getPhrase()));\n      }\n    }\n\n    //make all possible negative phrases\n    Map<String, Collection<CandidatePhrase>> allPossibleNegativePhrases = new HashMap<String, Collection<CandidatePhrase>>();\n    Collection<CandidatePhrase> negPhrases = new HashSet<CandidatePhrase>();\n    negPhrases.addAll(constVars.getOtherSemanticClassesWords());\n    negPhrases.addAll(constVars.getStopWords());\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.functionWords));\n    negPhrases.addAll(CandidatePhrase.convertStringPhrases(constVars.getEnglishWords()));\n    for(Entry<String, Counter<CandidatePhrase>> en: constVars.getLearnedWords().entrySet()) {\n      if (!en.getKey().equals(answerLabel)){\n        negPhrases.addAll(en.getValue().keySet());\n        negPhrases.addAll(constVars.getSeedLabelDictionary().get(en.getKey()));\n      }\n    }\n    allPossibleNegativePhrases.put(\"NEGATIVE\", negPhrases);\n\n\n    RVFDataset<String, ScorePhraseMeasures> dataset = new RVFDataset<String, ScorePhraseMeasures>();\n    int numpos = 0;\n    Set<CandidatePhrase> allNegativePhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allUnknownPhrases = new HashSet<CandidatePhrase>();\n    Set<CandidatePhrase> allPositivePhrases = new HashSet<CandidatePhrase>();\n    Counter<CandidatePhrase> allCloseToPositivePhrases = new ClassicCounter<CandidatePhrase>();\n\n    //for all sentences brtch\n    ConstantsAndVariables.DataSentsIterator sentsIter = new ConstantsAndVariables.DataSentsIterator(constVars.batchProcessSents);\n    while(sentsIter.hasNext()) {\n      Pair<Map<String, DataInstance>, File> sentsf = sentsIter.next();\n      Map<String, DataInstance> sents = sentsf.first();\n      Redwood.log(Redwood.DBG, \"Sampling datums from \" + sentsf.second());\n      if (computeRawFreq)\n        Data.computeRawFreqIfNull(sents, PatternFactory.numWordsCompound);\n\n      List<List<String>> threadedSentIds = GetPatternsFromDataMultiClass.getThreadBatches(new ArrayList<String>(sents.keySet()), constVars.numThreads);\n      ExecutorService executor = Executors.newFixedThreadPool(constVars.numThreads);\n      List<Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>>> list = new ArrayList<Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>>>();\n\n      //multi-threaded choose positive, negative and unknown\n      for (List<String> keys : threadedSentIds) {\n        Callable<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> task = new ChooseDatumsThread(answerLabel, sents, keys, forLearningPattern, wordsPatExtracted, allSelectedPatterns,\n          distSimClustersOfPositive, allPossibleNegativePhrases);\n        Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> submit = executor.submit(task);\n        list.add(submit);\n      }\n\n      // Now retrieve the result\n      for (Future<Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>>> future : list) {\n        try {\n          Quadruple<Set<CandidatePhrase>, Set<CandidatePhrase>, Set<CandidatePhrase>, Counter<CandidatePhrase>> result = future.get();\n          allPositivePhrases.addAll(result.first());\n          allNegativePhrases.addAll(result.second());\n          allUnknownPhrases.addAll(result.third());\n          for(Entry<CandidatePhrase, Double> en : result.fourth().entrySet())\n            allCloseToPositivePhrases.setCount(en.getKey(), en.getValue());\n\n        } catch (Exception e) {\n          executor.shutdownNow();\n          throw new RuntimeException(e);\n        }\n      }\n      executor.shutdown();\n    }\n\n    //Set<CandidatePhrase> knownPositivePhrases = CollectionUtils.unionAsSet(constVars.getLearnedWords().get(answerLabel).keySet(), constVars.getSeedLabelDictionary().get(answerLabel));\n    //TODO: this is kinda not nice; how is allpositivephrases different from positivephrases again?\n    allPositivePhrases.addAll(constVars.getLearnedWords().get(answerLabel).keySet());\n    //allPositivePhrases.addAll(knownPositivePhrases);\n\n    BufferedWriter logFile = null;\n    BufferedWriter logFileFeat = null;\n\n    if(constVars.logFileVectorSimilarity != null){\n      logFile = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity));\n      logFileFeat = new BufferedWriter(new FileWriter(constVars.logFileVectorSimilarity+\"_feat\"));\n\n      if(wordVectors != null){\n      for(CandidatePhrase p : allPositivePhrases){\n        if(wordVectors.containsKey(p.getPhrase())){\n          logFile.write(p.getPhrase()+\"-P \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n        }\n      }\n      }\n    }\n\n    if(constVars.expandPositivesWhenSampling){\n      //TODO: patwtbyfrew\n      //Counters.retainTop(allCloseToPositivePhrases, (int) (allCloseToPositivePhrases.size()*constVars.subSampleUnkAsPosUsingSimPercentage));\n      Redwood.log(\"Expanding positives by adding \" + allCloseToPositivePhrases + \" phrases\");\n      allPositivePhrases.addAll(allCloseToPositivePhrases.keySet());\n      if(logFile != null && wordVectors != null){\n        for(CandidatePhrase p : allCloseToPositivePhrases.keySet()){\n          if(wordVectors.containsKey(p.getPhrase())){\n            logFile.write(p.getPhrase()+\"-PP \" + ArrayUtils.toString(wordVectors.get(p.getPhrase()), \" \")+\"\\n\");\n          }\n        }\n      }\n    }\n\n\n\n    System.out.println(\"all positive phrases are  \" + allPositivePhrases);\n    for(CandidatePhrase candidate: allPositivePhrases) {\n      Counter<ScorePhraseMeasures> feat = null;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, candidate);\n      } else {\n        feat = getFeatures(answerLabel, candidate, wordsPatExtracted.getCounter(candidate), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"true\");\n      dataset.add(datum);\n      numpos += 1;\n      if(logFileFeat !=null){\n        logFileFeat.write(\"POSITIVE \" + candidate.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n      }\n    }\n\n    Redwood.log(Redwood.DBG, \"Number of pure negative phrases is \" + allNegativePhrases.size());\n    Redwood.log(Redwood.DBG, \"Number of unknown phrases is \" + allUnknownPhrases.size());\n\n    if(constVars.subsampleUnkAsNegUsingSim){\n      double subSampleUnkAsNegUsingSimPercentage = 1.0;\n      Set<CandidatePhrase> chosenUnknown = chooseUnknownAsNegatives(allUnknownPhrases, answerLabel, subSampleUnkAsNegUsingSimPercentage, allPositivePhrases, allPossibleNegativePhrases, logFile);\n      Redwood.log(Redwood.DBG, \"Choosing \" + chosenUnknown.size() + \" unknowns as negative based to their similarity to the positive phrases\");\n      allNegativePhrases.addAll(chosenUnknown);\n    }\n    else{\n        allNegativePhrases.addAll(allUnknownPhrases);\n    }\n\n    if(allNegativePhrases.size() > numpos) {\n      Redwood.log(Redwood.WARN, \"Num of negative (\" + allNegativePhrases.size() + \") is higher than number of positive phrases (\" + numpos + \") = \" +\n        (allNegativePhrases.size() / (double)numpos) + \". \" +\n        \"Capping the number by taking the first numPositives as negative. Consider decreasing perSelectNeg and perSelectRand\");\n      int i = 0;\n      Set<CandidatePhrase> selectedNegPhrases = new HashSet<CandidatePhrase>();\n      for(CandidatePhrase p : allNegativePhrases){\n        if (i >= numpos)\n          break;\n        selectedNegPhrases.add(p);\n        i++;\n      }\n      allNegativePhrases.clear();\n      allNegativePhrases = selectedNegPhrases;\n    }\n\n    System.out.println(\"all negative phrases are \" + allNegativePhrases);\n    for(CandidatePhrase negative: allNegativePhrases){\n      Counter<ScorePhraseMeasures> feat;\n      //CandidatePhrase candidate = new CandidatePhrase(l.word());\n      if (forLearningPattern) {\n        feat = getPhraseFeaturesForPattern(answerLabel, negative);\n      } else {\n        feat = getFeatures(answerLabel, negative, wordsPatExtracted.getCounter(negative), allSelectedPatterns);\n      }\n      RVFDatum<String, ScorePhraseMeasures> datum = new RVFDatum<String, ScorePhraseMeasures>(feat, \"false\");\n      dataset.add(datum);\n\n      if(logFile!=null && wordVectors != null && wordVectors.containsKey(negative.getPhrase())){\n        logFile.write(negative.getPhrase()+\"-N\"+\" \" + ArrayUtils.toString(wordVectors.get(negative.getPhrase()), \" \")+\"\\n\");\n      }\n\n      if(logFileFeat !=null)\n        logFileFeat.write(\"NEGATIVE \" + negative.getPhrase() +\"\\t\" + Counters.toSortedByKeysString(feat,\"%1$s:%2$.0f\",\";\",\"%s\")+\"\\n\");\n\n    }\n\n    if(logFile!=null){\n      logFile.close();\n    }\n    if(logFileFeat != null){\n      logFileFeat.close();\n    }\n\n    System.out.println(\"Before feature count threshold, dataset stats are \");\n    dataset.summaryStatistics();\n\n    int threshold = 2;\n    dataset.applyFeatureCountThreshold(threshold);\n    System.out.println(\"AFTER feature count threshold of \" + threshold + \", dataset stats are \");\n    dataset.summaryStatistics();\n\n    Redwood.log(Redwood.DBG, \"Eventually, number of positive datums:  \" + numpos + \" and number of negative datums: \" + allNegativePhrases.size());\n    return dataset;\n  }","commit_id":"0eb30700edf53a88931aba5f36844a2775244295","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private Counter<CandidatePhrase> computeSimWithWordVectors(Collection<CandidatePhrase> candidatePhrases, Collection<CandidatePhrase> otherPhrases, boolean ignoreWordRegex, String label){\n    final int numTopSimilar = 5;\n\n    Counter<CandidatePhrase> sims = new ClassicCounter<CandidatePhrase>(candidatePhrases.size());\n    for(CandidatePhrase p : candidatePhrases) {\n\n      Map<String, double[]> simsAvgMaxAllLabels = similaritiesWithLabeledPhrases.get(p.getPhrase());\n      if(simsAvgMaxAllLabels == null)\n        simsAvgMaxAllLabels = new HashMap<String, double[]>();\n      double[] simsAvgMax = simsAvgMaxAllLabels.get(label);\n      if(simsAvgMax == null) {\n        simsAvgMax = new double[Similarities.values().length];\n        Arrays.fill(simsAvgMax, 0);\n      }\n\n      if(wordVectors.containsKey(p.getPhrase()) && (! ignoreWordRegex || !PatternFactory.ignoreWordRegex.matcher(p.getPhrase()).matches())){\n\n        double[] d1 = wordVectors.get(p.getPhrase());\n\n        BinaryHeapPriorityQueue<CandidatePhrase> topSimPhs = new BinaryHeapPriorityQueue<CandidatePhrase>(numTopSimilar);\n        double allsum = 0;\n        double max = Double.MIN_VALUE;\n\n        boolean donotuse = false;\n\n        for (CandidatePhrase other : otherPhrases) {\n\n          if (p.equals(other)) {\n            donotuse = true;\n            break;\n          }\n\n          if (!wordVectors.containsKey(other.getPhrase()))\n            continue;\n\n          double sim;\n\n          PhrasePair pair = new PhrasePair(p.getPhrase(), other.getPhrase());\n          if (cacheSimilarities.containsKey(pair))\n            sim = cacheSimilarities.getCount(pair);\n          else {\n            double[] d2 = wordVectors.get(other.getPhrase());\n\n            double sum = 0;\n            double d1sq = 0;\n            double d2sq = 0;\n            for (int i = 0; i < d1.length; i++) {\n              sum += d1[i] * d2[i];\n              d1sq += d1[i] * d1[i];\n              d2sq += d2[i] * d2[i];\n            }\n            sim = sum / (Math.sqrt(d1sq) * Math.sqrt(d2sq));\n            cacheSimilarities.setCount(pair, sim);\n          }\n\n          topSimPhs.add(other, sim);\n          if(topSimPhs.size() > numTopSimilar)\n            topSimPhs.removeLastEntry();\n\n          //avgSim /= otherPhrases.size();\n          allsum += sim;\n          if(sim > max)\n            max = sim;\n        }\n\n        double finalSimScore = 0;\n        while(topSimPhs.hasNext()) {\n          finalSimScore += topSimPhs.getPriority();\n          topSimPhs.next();\n        }\n        finalSimScore /= numTopSimilar;\n\n        double prevNumItems = simsAvgMax[Similarities.NUMITEMS.ordinal()];\n        double prevAvg = simsAvgMax[Similarities.AVGSIM.ordinal()];\n        double prevMax = simsAvgMax[Similarities.MAXSIM.ordinal()];\n        double newNumItems = prevNumItems + otherPhrases.size();\n        double newAvg = (prevAvg*prevNumItems + allsum) /(newNumItems);\n        double newMax = prevMax > max ? prevMax: max;\n        simsAvgMax[Similarities.NUMITEMS.ordinal()] = newNumItems;\n        simsAvgMax[Similarities.AVGSIM.ordinal()] = newAvg;\n        simsAvgMax[Similarities.MAXSIM.ordinal()] = newMax;\n\n        if(!donotuse){\n          sims.setCount(p, finalSimScore);\n        }\n      }else{\n        sims.setCount(p, Double.MIN_VALUE);\n      }\n\n\n\n\n    }\n    return sims;\n  }","id":103109,"modified_method":"private Counter<CandidatePhrase> computeSimWithWordVectors(Collection<CandidatePhrase> candidatePhrases, Collection<CandidatePhrase> otherPhrases, boolean ignoreWordRegex, String label){\n    final int numTopSimilar = 3;\n\n    Counter<CandidatePhrase> sims = new ClassicCounter<CandidatePhrase>(candidatePhrases.size());\n    for(CandidatePhrase p : candidatePhrases) {\n\n      Map<String, double[]> simsAvgMaxAllLabels = similaritiesWithLabeledPhrases.get(p.getPhrase());\n      if(simsAvgMaxAllLabels == null)\n        simsAvgMaxAllLabels = new HashMap<String, double[]>();\n      double[] simsAvgMax = simsAvgMaxAllLabels.get(label);\n      if(simsAvgMax == null) {\n        simsAvgMax = new double[Similarities.values().length];\n        Arrays.fill(simsAvgMax, 0);\n      }\n\n      if(wordVectors.containsKey(p.getPhrase()) && (! ignoreWordRegex || !PatternFactory.ignoreWordRegex.matcher(p.getPhrase()).matches())){\n\n        double[] d1 = wordVectors.get(p.getPhrase());\n\n        BinaryHeapPriorityQueue<CandidatePhrase> topSimPhs = new BinaryHeapPriorityQueue<CandidatePhrase>(numTopSimilar);\n        double allsum = 0;\n        double max = Double.MIN_VALUE;\n\n        boolean donotuse = false;\n\n        for (CandidatePhrase other : otherPhrases) {\n\n          if (p.equals(other)) {\n            donotuse = true;\n            break;\n          }\n\n          if (!wordVectors.containsKey(other.getPhrase()))\n            continue;\n\n          double sim;\n\n          PhrasePair pair = new PhrasePair(p.getPhrase(), other.getPhrase());\n          if (cacheSimilarities.containsKey(pair))\n            sim = cacheSimilarities.getCount(pair);\n          else {\n            double[] d2 = wordVectors.get(other.getPhrase());\n\n            double sum = 0;\n            double d1sq = 0;\n            double d2sq = 0;\n            for (int i = 0; i < d1.length; i++) {\n              sum += d1[i] * d2[i];\n              d1sq += d1[i] * d1[i];\n              d2sq += d2[i] * d2[i];\n            }\n            sim = sum / (Math.sqrt(d1sq) * Math.sqrt(d2sq));\n            cacheSimilarities.setCount(pair, sim);\n          }\n\n          topSimPhs.add(other, sim);\n          if(topSimPhs.size() > numTopSimilar)\n            topSimPhs.removeLastEntry();\n\n          //avgSim /= otherPhrases.size();\n          allsum += sim;\n          if(sim > max)\n            max = sim;\n        }\n\n        double finalSimScore = 0;\n        int numEl = 0;\n        while(topSimPhs.hasNext()) {\n          finalSimScore += topSimPhs.getPriority();\n          topSimPhs.next();\n          numEl++;\n        }\n        finalSimScore /= numEl;\n\n        double prevNumItems = simsAvgMax[Similarities.NUMITEMS.ordinal()];\n        double prevAvg = simsAvgMax[Similarities.AVGSIM.ordinal()];\n        double prevMax = simsAvgMax[Similarities.MAXSIM.ordinal()];\n        double newNumItems = prevNumItems + otherPhrases.size();\n        double newAvg = (prevAvg*prevNumItems + allsum) /(newNumItems);\n        double newMax = prevMax > max ? prevMax: max;\n        simsAvgMax[Similarities.NUMITEMS.ordinal()] = newNumItems;\n        simsAvgMax[Similarities.AVGSIM.ordinal()] = newAvg;\n        simsAvgMax[Similarities.MAXSIM.ordinal()] = newMax;\n\n        if(!donotuse){\n          sims.setCount(p, finalSimScore);\n        }\n      }else{\n        sims.setCount(p, Double.MIN_VALUE);\n      }\n\n\n\n\n    }\n    return sims;\n  }","commit_id":"0eb30700edf53a88931aba5f36844a2775244295","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n     * Checks one of the given property values has changed.<p>\n     *\n     * @param modelGroup the model group resource to check\n     * @param title the title\n     * @param description the description\n     * @param groupType the group type\n     *\n     * @return <code>true<\/code> in case of a property value change\n     *\n     * @throws CmsException in case reading the old property values fails\n     */\n    private boolean hasChangedProperty(CmsResource modelGroup, String title, String description, String groupType)\n    throws CmsException {\n\n        boolean propsChanged = false;\n        if (!title.equals(\n            m_cms.readPropertyObject(modelGroup, CmsPropertyDefinition.PROPERTY_TITLE, false).getValue())) {\n            propsChanged = true;\n        } else if (!description.equals(\n            m_cms.readPropertyObject(modelGroup, CmsPropertyDefinition.PROPERTY_DESCRIPTION, false).getValue())) {\n            propsChanged = true;\n        } else if (!groupType.equals(\n            m_cms.readPropertyObject(modelGroup, CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS, false).getValue())) {\n            propsChanged = true;\n        }\n        return propsChanged;\n    }","id":103110,"modified_method":"/**\n     * Checks one of the given property values has changed.<p>\n     *\n     * @param modelGroup the model group resource to check\n     * @param title the title\n     * @param description the description\n     * @param groupType the group type\n     *\n     * @return <code>true<\/code> in case of a property value change\n     *\n     * @throws CmsException in case reading the old property values fails\n     */\n    private boolean hasChangedProperty(CmsResource modelGroup, String title, String description, String groupType)\n    throws CmsException {\n\n        boolean propsChanged = false;\n        if (!matchesProperty(modelGroup, title, CmsPropertyDefinition.PROPERTY_TITLE)) {\n            propsChanged = true;\n        } else if (!matchesProperty(modelGroup, description, CmsPropertyDefinition.PROPERTY_DESCRIPTION)) {\n            propsChanged = true;\n        } else if (!matchesProperty(modelGroup, groupType, CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS)) {\n            propsChanged = true;\n        }\n        return propsChanged;\n    }","commit_id":"417bde7728fe93ba249f7708b6d937ec94ba3672","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Saves the model groups of the given container page.<p>\n     *\n     * @param page the container page\n     *\n     * @return the container page referencing the saved model groups\n     */\n    public CmsContainerPageBean saveModelGroups(CmsContainerPageBean page) {\n\n        Map<String, List<CmsContainerBean>> containersByParent = getContainerByParent(page);\n        Map<String, String> modelInstances = new HashMap<String, String>();\n        Set<String> descendingInstances = new HashSet<String>();\n        for (CmsContainerElementBean element : page.getElements()) {\n            String modelGroupId = null;\n            if (element.getIndividualSettings().containsKey(CmsContainerElement.MODEL_GROUP_ID)\n                || element.isModelGroup()) {\n                modelGroupId = element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_ID);\n                modelInstances.put(element.getInstanceId(), modelGroupId);\n                Set<String> childInstances = collectDescendingInstances(element.getInstanceId(), containersByParent);\n                descendingInstances.addAll(childInstances);\n                CmsResource modelGroup = null;\n                try {\n                    modelGroup = m_cms.readResource(new CmsUUID(modelGroupId));\n                    ensureLock(modelGroup);\n                    String title = element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_TITLE);\n                    String description = element.getIndividualSettings().get(\n                        CmsContainerElement.MODEL_GROUP_DESCRIPTION);\n                    String groupType = \"\";\n                    if (Boolean.valueOf(\n                        element.getIndividualSettings().get(CmsContainerElement.USE_AS_COPY_MODEL)).booleanValue()) {\n                        groupType = CmsContainerElement.USE_AS_COPY_MODEL;\n                    }\n                    if (hasChangedProperty(modelGroup, title, description, groupType)) {\n                        List<CmsProperty> props = new ArrayList<CmsProperty>();\n                        props.add(new CmsProperty(CmsPropertyDefinition.PROPERTY_TITLE, title, title));\n                        props.add(\n                            new CmsProperty(CmsPropertyDefinition.PROPERTY_DESCRIPTION, description, description));\n                        props.add(\n                            new CmsProperty(CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS, groupType, groupType));\n                        m_cms.writePropertyObjects(modelGroup, props);\n                    }\n                    List<CmsContainerBean> modelContainers = new ArrayList<CmsContainerBean>();\n                    CmsContainerElementBean baseElement = element.clone();\n                    CmsContainerBean baseContainer = new CmsContainerBean(\n                        MODEL_GROUP_BASE_CONTAINER,\n                        MODEL_GROUP_BASE_CONTAINER,\n                        null,\n                        Collections.singletonList(baseElement));\n                    modelContainers.add(baseContainer);\n                    for (String childInstance : childInstances) {\n                        if (containersByParent.containsKey(childInstance)) {\n                            modelContainers.addAll(containersByParent.get(childInstance));\n                        }\n                    }\n                    CmsContainerPageBean modelPage = new CmsContainerPageBean(modelContainers);\n                    CmsXmlContainerPage xmlCnt = CmsXmlContainerPageFactory.unmarshal(\n                        m_cms,\n                        m_cms.readFile(modelGroup));\n                    xmlCnt.save(m_cms, modelPage, true);\n                    tryUnlock(modelGroup);\n                } catch (CmsException e) {\n                    LOG.error(\"Error saving model group resource.\", e);\n                }\n            }\n        }\n        List<CmsContainerBean> containers = new ArrayList<CmsContainerBean>();\n        for (CmsContainerBean container : page.getContainers().values()) {\n            if ((container.getParentInstanceId() == null)\n                || !descendingInstances.contains(container.getParentInstanceId())) {\n                // iterate the container elements to replace the model group elements\n                List<CmsContainerElementBean> elements = new ArrayList<CmsContainerElementBean>();\n                for (CmsContainerElementBean element : container.getElements()) {\n                    if (modelInstances.containsKey(element.getInstanceId())) {\n                        CmsUUID modelId = new CmsUUID(modelInstances.get(element.getInstanceId()));\n                        CmsContainerElementBean replacer = new CmsContainerElementBean(\n                            modelId,\n                            element.getFormatterId(),\n                            element.getIndividualSettings(),\n                            false);\n                        elements.add(replacer);\n                    } else {\n                        elements.add(element);\n                    }\n                }\n                containers.add(\n                    new CmsContainerBean(\n                        container.getName(),\n                        container.getType(),\n                        container.getParentInstanceId(),\n                        container.getMaxElements(),\n                        elements));\n\n            }\n        }\n        return new CmsContainerPageBean(containers);\n\n    }","id":103111,"modified_method":"/**\n     * Saves the model groups of the given container page.<p>\n     *\n     * @param page the container page\n     *\n     * @return the container page referencing the saved model groups\n     */\n    public CmsContainerPageBean saveModelGroups(CmsContainerPageBean page) {\n\n        Map<String, List<CmsContainerBean>> containersByParent = getContainerByParent(page);\n        Map<String, String> modelInstances = new HashMap<String, String>();\n        Set<String> descendingInstances = new HashSet<String>();\n        for (CmsContainerElementBean element : page.getElements()) {\n            String modelGroupId = null;\n            if (element.getIndividualSettings().containsKey(CmsContainerElement.MODEL_GROUP_ID)\n                || element.isModelGroup()) {\n                modelGroupId = element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_ID);\n                modelInstances.put(element.getInstanceId(), modelGroupId);\n                Set<String> childInstances = collectDescendingInstances(element.getInstanceId(), containersByParent);\n                descendingInstances.addAll(childInstances);\n                CmsResource modelGroup = null;\n                try {\n                    modelGroup = m_cms.readResource(new CmsUUID(modelGroupId));\n                    ensureLock(modelGroup);\n                    String title = element.getIndividualSettings().get(CmsContainerElement.MODEL_GROUP_TITLE);\n                    String description = element.getIndividualSettings().get(\n                        CmsContainerElement.MODEL_GROUP_DESCRIPTION);\n                    String groupType = \"\";\n                    if (Boolean.valueOf(\n                        element.getIndividualSettings().get(CmsContainerElement.USE_AS_COPY_MODEL)).booleanValue()) {\n                        groupType = CmsContainerElement.USE_AS_COPY_MODEL;\n                    }\n                    if (hasChangedProperty(modelGroup, title, description, groupType)) {\n                        List<CmsProperty> props = new ArrayList<CmsProperty>();\n                        if (title == null) {\n                            title = \"\";\n                        }\n                        props.add(new CmsProperty(CmsPropertyDefinition.PROPERTY_TITLE, title, title));\n                        if (description == null) {\n                            description = \"\";\n                        }\n                        props.add(\n                            new CmsProperty(CmsPropertyDefinition.PROPERTY_DESCRIPTION, description, description));\n                        if (groupType == null) {\n                            groupType = \"\";\n                        }\n                        props.add(\n                            new CmsProperty(CmsPropertyDefinition.PROPERTY_TEMPLATE_ELEMENTS, groupType, groupType));\n                        m_cms.writePropertyObjects(modelGroup, props);\n                    }\n                    List<CmsContainerBean> modelContainers = new ArrayList<CmsContainerBean>();\n                    CmsContainerElementBean baseElement = element.clone();\n                    CmsContainerBean baseContainer = new CmsContainerBean(\n                        MODEL_GROUP_BASE_CONTAINER,\n                        MODEL_GROUP_BASE_CONTAINER,\n                        null,\n                        Collections.singletonList(baseElement));\n                    modelContainers.add(baseContainer);\n                    for (String childInstance : childInstances) {\n                        if (containersByParent.containsKey(childInstance)) {\n                            modelContainers.addAll(containersByParent.get(childInstance));\n                        }\n                    }\n                    CmsContainerPageBean modelPage = new CmsContainerPageBean(modelContainers);\n                    CmsXmlContainerPage xmlCnt = CmsXmlContainerPageFactory.unmarshal(\n                        m_cms,\n                        m_cms.readFile(modelGroup));\n                    xmlCnt.save(m_cms, modelPage, true);\n                    tryUnlock(modelGroup);\n                } catch (CmsException e) {\n                    LOG.error(\"Error saving model group resource.\", e);\n                }\n            }\n        }\n        List<CmsContainerBean> containers = new ArrayList<CmsContainerBean>();\n        for (CmsContainerBean container : page.getContainers().values()) {\n            if ((container.getParentInstanceId() == null)\n                || !descendingInstances.contains(container.getParentInstanceId())) {\n                // iterate the container elements to replace the model group elements\n                List<CmsContainerElementBean> elements = new ArrayList<CmsContainerElementBean>();\n                for (CmsContainerElementBean element : container.getElements()) {\n                    if (modelInstances.containsKey(element.getInstanceId())) {\n                        CmsUUID modelId = new CmsUUID(modelInstances.get(element.getInstanceId()));\n                        CmsContainerElementBean replacer = new CmsContainerElementBean(\n                            modelId,\n                            element.getFormatterId(),\n                            element.getIndividualSettings(),\n                            false);\n                        elements.add(replacer);\n                    } else {\n                        elements.add(element);\n                    }\n                }\n                containers.add(\n                    new CmsContainerBean(\n                        container.getName(),\n                        container.getType(),\n                        container.getParentInstanceId(),\n                        container.getMaxElements(),\n                        elements));\n\n            }\n        }\n        return new CmsContainerPageBean(containers);\n\n    }","commit_id":"417bde7728fe93ba249f7708b6d937ec94ba3672","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Override\n  public void handle(Request request, Response response) throws Exception {\n    String profileKey = request.mandatoryParam(PARAM_KEY);\n\n    DbSession session = dbClient.openSession(false);\n\n    try {\n      checkProfileExists(profileKey, session);\n      String selected = request.param(PARAM_SELECTED);\n      String query = request.param(PARAM_QUERY);\n      int pageSize = request.mandatoryParamAsInt(PARAM_PAGE_SIZE);\n      int page = request.mandatoryParamAsInt(PARAM_PAGE);\n\n      List<ProjectQprofileAssociationDto> projects = loadProjects(profileKey, session, selected, query);\n      Collections.sort(projects, new Comparator<ProjectQprofileAssociationDto>() {\n        @Override\n        public int compare(ProjectQprofileAssociationDto o1, ProjectQprofileAssociationDto o2) {\n          return new CompareToBuilder()\n            // First, sort by name\n            .append(o1.getProjectName(), o2.getProjectName())\n            // Then by UUID to disambiguate\n            .append(o1.getProjectUuid(), o2.getProjectUuid())\n            .toComparison();\n        }\n      });\n\n      Collection<Long> projectIds = Collections2.transform(projects, new NonNullInputFunction<ProjectQprofileAssociationDto, Long>() {\n        @Override\n        protected Long doApply(ProjectQprofileAssociationDto input) {\n          return input.getProjectId();\n        }\n      });\n\n      final Collection<Long> authorizedProjectIds = dbClient.authorizationDao().keepAuthorizedProjectIds(session, projectIds, UserSession.get().userId(), UserRole.USER);\n      Iterable<ProjectQprofileAssociationDto> authorizedProjects = Iterables.filter(projects, new Predicate<ProjectQprofileAssociationDto>() {\n        @Override\n        public boolean apply(ProjectQprofileAssociationDto input) {\n          return authorizedProjectIds.contains(input.getProjectId());\n        }\n      });\n\n      Paging paging = Paging.create(pageSize, page, authorizedProjectIds.size());\n\n      List<ProjectQprofileAssociationDto> pagedAuthorizedProjects = Lists.newArrayList(authorizedProjects);\n      if (pagedAuthorizedProjects.size() <= paging.offset()) {\n        pagedAuthorizedProjects = Lists.newArrayList();\n      } else if (pagedAuthorizedProjects.size() > paging.pageSize()) {\n        pagedAuthorizedProjects = pagedAuthorizedProjects.subList(paging.offset(), paging.offset() + pageSize);\n      }\n\n      writeProjects(response.newJsonWriter(), pagedAuthorizedProjects, paging);\n    } finally {\n      session.close();\n    }\n  }","id":103112,"modified_method":"@Override\n  public void handle(Request request, Response response) throws Exception {\n    String profileKey = request.mandatoryParam(PARAM_KEY);\n\n    DbSession session = dbClient.openSession(false);\n\n    try {\n      checkProfileExists(profileKey, session);\n      String selected = request.param(PARAM_SELECTED);\n      String query = request.param(PARAM_QUERY);\n      int pageSize = request.mandatoryParamAsInt(PARAM_PAGE_SIZE);\n      int page = request.mandatoryParamAsInt(PARAM_PAGE);\n\n      List<ProjectQprofileAssociationDto> projects = loadProjects(profileKey, session, selected, query);\n      Collections.sort(projects, new Comparator<ProjectQprofileAssociationDto>() {\n        @Override\n        public int compare(ProjectQprofileAssociationDto o1, ProjectQprofileAssociationDto o2) {\n          return new CompareToBuilder()\n            // First, sort by name\n            .append(o1.getProjectName(), o2.getProjectName())\n            // Then by UUID to disambiguate\n            .append(o1.getProjectUuid(), o2.getProjectUuid())\n            .toComparison();\n        }\n      });\n\n      Collection<Long> projectIds = Collections2.transform(projects, new NonNullInputFunction<ProjectQprofileAssociationDto, Long>() {\n        @Override\n        protected Long doApply(ProjectQprofileAssociationDto input) {\n          return input.getProjectId();\n        }\n      });\n\n      final Collection<Long> authorizedProjectIds = dbClient.authorizationDao().keepAuthorizedProjectIds(session, projectIds, UserSession.get().userId(), UserRole.USER);\n      Iterable<ProjectQprofileAssociationDto> authorizedProjects = Iterables.filter(projects, new Predicate<ProjectQprofileAssociationDto>() {\n        @Override\n        public boolean apply(ProjectQprofileAssociationDto input) {\n          return authorizedProjectIds.contains(input.getProjectId());\n        }\n      });\n\n      Paging paging = Paging.create(pageSize, page, authorizedProjectIds.size());\n\n      List<ProjectQprofileAssociationDto> pagedAuthorizedProjects = Lists.newArrayList(authorizedProjects);\n      if (pagedAuthorizedProjects.size() <= paging.offset()) {\n        pagedAuthorizedProjects = Lists.newArrayList();\n      } else if (pagedAuthorizedProjects.size() > paging.pageSize()) {\n        int endIndex = Math.min(paging.offset() + pageSize, pagedAuthorizedProjects.size());\n        pagedAuthorizedProjects = pagedAuthorizedProjects.subList(paging.offset(), endIndex);\n      }\n\n      writeProjects(response.newJsonWriter(), pagedAuthorizedProjects, paging);\n    } finally {\n      session.close();\n    }\n  }","commit_id":"e9f0f153b3635b0c8e7f506d7ef7857b12aad753","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void define(NewController controller) {\n    NewAction projects = controller.createAction(\"projects\")\n      .setSince(\"5.2\")\n      .setHandler(this)\n      .setDescription(\"List projects with their association status regarding a quality profile.\");\n    projects.createParam(PARAM_KEY)\n      .setDescription(\"A quality profile key.\")\n      .setRequired(true)\n      .setExampleValue(\"sonar-way-java-12345\");\n    projects.createParam(PARAM_SELECTED)\n      .setDescription(\"If specified, return only selected or deselected projects.\")\n      .setPossibleValues(SELECTION_SELECTED, SELECTION_DESELECTED, SELECTION_ALL)\n      .setDefaultValue(SELECTION_ALL);\n    projects.createParam(PARAM_QUERY)\n      .setDescription(\"If specified, return only projects whose name match the query.\");\n    projects.createParam(PARAM_PAGE_SIZE)\n      .setDescription(\"Size for the paging to apply\").setDefaultValue(100);\n    projects.createParam(PARAM_PAGE)\n      .setDescription(\"Index of the page to display\").setDefaultValue(1);\n  }","id":103113,"modified_method":"@Override\n  public void define(NewController controller) {\n    NewAction projects = controller.createAction(\"projects\")\n      .setSince(\"5.2\")\n      .setHandler(this)\n      .setDescription(\"List projects with their association status regarding a quality profile.\");\n    projects.createParam(PARAM_KEY)\n      .setDescription(\"A quality profile key.\")\n      .setRequired(true)\n      .setExampleValue(\"sonar-way-java-12345\");\n    projects.createParam(PARAM_SELECTED)\n      .setDescription(\"If specified, return only selected or deselected projects.\")\n      .setPossibleValues(SELECTION_SELECTED, SELECTION_DESELECTED, SELECTION_ALL)\n      .setDefaultValue(SELECTION_ALL);\n    projects.createParam(PARAM_QUERY)\n      .setDescription(\"If specified, return only projects whose name match the query.\");\n    projects.createParam(PARAM_PAGE_SIZE)\n      .setDescription(\"Size for the paging to apply.\").setDefaultValue(100);\n    projects.createParam(PARAM_PAGE)\n      .setDescription(\"Index of the page to display.\").setDefaultValue(1);\n  }","commit_id":"e9f0f153b3635b0c8e7f506d7ef7857b12aad753","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_paginate() throws Exception {\n    project1 = newProject(\"ABCD\", \"Project One\");\n    project2 = newProject(\"BCDE\", \"Project Two\");\n    project3 = newProject(\"CDEF\", \"Project Three\");\n    project4 = newProject(\"DEFA\", \"Project Four\");\n    dbClient.componentDao().insert(session, project1, project2, project3, project4);\n\n    addBrowsePermissionToAnyone(session, project1, project2, project3, project4);\n\n    associateProjectsWithProfile(session, xooP1, project1, project2, project3, project4);\n\n    session.commit();\n\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\")\n      .execute().assertJson(this.getClass(), \"selected_page1.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"2\")\n      .execute().assertJson(this.getClass(), \"selected_page2.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"3\")\n      .execute().assertJson(this.getClass(), \"empty.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"4\")\n      .execute().assertJson(this.getClass(), \"empty.json\");\n  }","id":103114,"modified_method":"@Test\n  public void should_paginate() throws Exception {\n    project1 = newProject(\"ABCD\", \"Project One\");\n    project2 = newProject(\"BCDE\", \"Project Two\");\n    project3 = newProject(\"CDEF\", \"Project Three\");\n    project4 = newProject(\"DEFA\", \"Project Four\");\n    dbClient.componentDao().insert(session, project1, project2, project3, project4);\n\n    addBrowsePermissionToAnyone(session, project1, project2, project3, project4);\n\n    associateProjectsWithProfile(session, xooP1, project1, project2, project3, project4);\n\n    session.commit();\n\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\")\n      .execute().assertJson(this.getClass(), \"selected_page1.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"2\")\n      .execute().assertJson(this.getClass(), \"selected_page2.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"3\")\n      .execute().assertJson(this.getClass(), \"empty.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"2\").setParam(\"page\", \"4\")\n      .execute().assertJson(this.getClass(), \"empty.json\");\n\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"3\").setParam(\"page\", \"1\")\n      .execute().assertJson(this.getClass(), \"selected_ps3_page1.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"3\").setParam(\"page\", \"2\")\n      .execute().assertJson(this.getClass(), \"selected_ps3_page2.json\");\n    newRequest().setParam(\"key\", xooP1.getKey()).setParam(\"selected\", \"selected\").setParam(\"pageSize\", \"3\").setParam(\"page\", \"3\")\n      .execute().assertJson(this.getClass(), \"empty.json\");\n  }","commit_id":"e9f0f153b3635b0c8e7f506d7ef7857b12aad753","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"feeds\")) {\n\t\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\t\tJournalFeedLocalServiceUtil.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tfeedActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"structures\")) {\n\t\t\tActionableDynamicQuery ddmStructureActionableDynamicQuery =\n\t\t\t\tgetDDMStructureActionableDynamicQuery(portletDataContext);\n\n\t\t\tddmStructureActionableDynamicQuery.performActions();\n\n\t\t\t// Export DDM structure default values\n\n\t\t\tActionableDynamicQuery\n\t\t\t\tddmStructureDefaultValueActionableDynamicQuery =\n\t\t\t\t\tgetDDMStructureDefaultValuesActionableDynamicQuery(\n\t\t\t\t\t\tportletDataContext);\n\n\t\t\tddmStructureDefaultValueActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"templates\")) {\n\t\t\tActionableDynamicQuery ddmTemplateActionableDynamicQuery =\n\t\t\t\tgetDDMTemplateActionableDynamicQuery(portletDataContext);\n\n\t\t\tddmTemplateActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"web-content\")) {\n\t\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\t\tJournalFolderLocalServiceUtil.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tfolderActionableDynamicQuery.performActions();\n\n\t\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\t\tarticleActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","id":103115,"modified_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"feeds\")) {\n\t\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\t\tJournalFeedLocalServiceUtil.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tfeedActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"folders\")) {\n\t\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\t\tJournalFolderLocalServiceUtil.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tfolderActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"structures\")) {\n\t\t\tActionableDynamicQuery ddmStructureActionableDynamicQuery =\n\t\t\t\tgetDDMStructureActionableDynamicQuery(portletDataContext);\n\n\t\t\tddmStructureActionableDynamicQuery.performActions();\n\n\t\t\t// Export DDM structure default values\n\n\t\t\tActionableDynamicQuery\n\t\t\t\tddmStructureDefaultValueActionableDynamicQuery =\n\t\t\t\t\tgetDDMStructureDefaultValuesActionableDynamicQuery(\n\t\t\t\t\t\tportletDataContext);\n\n\t\t\tddmStructureDefaultValueActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"templates\")) {\n\t\t\tActionableDynamicQuery ddmTemplateActionableDynamicQuery =\n\t\t\t\tgetDDMTemplateActionableDynamicQuery(portletDataContext);\n\n\t\t\tddmTemplateActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"web-content\")) {\n\t\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\t\tarticleActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","commit_id":"5a33922ac0b297fdb1ca190f727b759a2cd69b24","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\tnew StagedModelType(DDMStructure.class, JournalArticle.class),\n\t\t\tnew StagedModelType(DDMTemplate.class, DDMStructure.class),\n\t\t\tnew StagedModelType(JournalArticle.class),\n\t\t\tnew StagedModelType(JournalArticle.class, DDMStructure.class),\n\t\t\tnew StagedModelType(JournalFeed.class),\n\t\t\tnew StagedModelType(JournalFolder.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"web-content\", true, false,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\t\t\tNAMESPACE, \"referenced-content\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\t\t\tNAMESPACE, \"version-history\",\n\t\t\t\t\t\tJournalWebConfigurationValues.\n\t\t\t\t\t\t\tPUBLISH_VERSION_HISTORY_BY_DEFAULT)\n\t\t\t\t},\n\t\t\t\tJournalArticle.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"structures\", true, false, null,\n\t\t\t\tDDMStructure.class.getName(), JournalArticle.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"templates\", true, false, null,\n\t\t\t\tDDMTemplate.class.getName(), DDMStructure.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"feeds\", true, false, null,\n\t\t\t\tJournalFeed.class.getName()));\n\t\tsetPublishToLiveByDefault(\n\t\t\tJournalWebConfigurationValues.PUBLISH_TO_LIVE_BY_DEFAULT);\n\n\t\tXStreamAliasRegistryUtil.register(\n\t\t\tJournalArticleImpl.class, \"JournalArticle\");\n\t\tXStreamAliasRegistryUtil.register(JournalFeedImpl.class, \"JournalFeed\");\n\t\tXStreamAliasRegistryUtil.register(\n\t\t\tJournalFolderImpl.class, \"JournalFolder\");\n\t}","id":103116,"modified_method":"public JournalPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\tnew StagedModelType(DDMStructure.class, JournalArticle.class),\n\t\t\tnew StagedModelType(DDMTemplate.class, DDMStructure.class),\n\t\t\tnew StagedModelType(JournalArticle.class),\n\t\t\tnew StagedModelType(JournalArticle.class, DDMStructure.class),\n\t\t\tnew StagedModelType(JournalFeed.class),\n\t\t\tnew StagedModelType(JournalFolder.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"web-content\", true, false,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\t\t\tNAMESPACE, \"referenced-content\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\t\t\tNAMESPACE, \"version-history\",\n\t\t\t\t\t\tJournalWebConfigurationValues.\n\t\t\t\t\t\t\tPUBLISH_VERSION_HISTORY_BY_DEFAULT)\n\t\t\t\t},\n\t\t\t\tJournalArticle.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"structures\", true, false, null,\n\t\t\t\tDDMStructure.class.getName(), JournalArticle.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"templates\", true, false, null,\n\t\t\t\tDDMTemplate.class.getName(), DDMStructure.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"feeds\", true, false, null,\n\t\t\t\tJournalFeed.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"folders\", true, false, null,\n\t\t\t\tJournalFolder.class.getName()));\n\t\tsetPublishToLiveByDefault(\n\t\t\tJournalWebConfigurationValues.PUBLISH_TO_LIVE_BY_DEFAULT);\n\n\t\tXStreamAliasRegistryUtil.register(\n\t\t\tJournalArticleImpl.class, \"JournalArticle\");\n\t\tXStreamAliasRegistryUtil.register(JournalFeedImpl.class, \"JournalFeed\");\n\t\tXStreamAliasRegistryUtil.register(\n\t\t\tJournalFolderImpl.class, \"JournalFolder\");\n\t}","commit_id":"5a33922ac0b297fdb1ca190f727b759a2cd69b24","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"feeds\")) {\n\t\t\tElement feedsElement = portletDataContext.getImportDataGroupElement(\n\t\t\t\tJournalFeed.class);\n\n\t\t\tList<Element> feedElements = feedsElement.elements();\n\n\t\t\tfor (Element feedElement : feedElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, feedElement);\n\t\t\t}\n\t\t}\n\n\t\tElement articlesElement = portletDataContext.getImportDataGroupElement(\n\t\t\tJournalArticle.class);\n\n\t\tList<Element> articleElements = articlesElement.elements();\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"structures\")) {\n\t\t\tElement ddmStructuresElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tList<Element> ddmStructureElements =\n\t\t\t\tddmStructuresElement.elements();\n\n\t\t\tfor (Element ddmStructureElement : ddmStructureElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmStructureElement);\n\t\t\t}\n\n\t\t\t// Importing DDM structure default values\n\n\t\t\tfor (Element articleElement : articleElements) {\n\t\t\t\tString className = articleElement.attributeValue(\"class-name\");\n\n\t\t\t\tif (Validator.isNotNull(className) &&\n\t\t\t\t\tclassName.equals(DDMStructure.class.getName())) {\n\n\t\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\t\tportletDataContext, articleElement);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"templates\")) {\n\t\t\tElement ddmTemplatesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(DDMTemplate.class);\n\n\t\t\tList<Element> ddmTemplateElements = ddmTemplatesElement.elements();\n\n\t\t\tfor (Element ddmTemplateElement : ddmTemplateElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmTemplateElement);\n\t\t\t}\n\t\t}\n\n\t\tif (!portletDataContext.getBooleanParameter(NAMESPACE, \"web-content\")) {\n\t\t\treturn portletPreferences;\n\t\t}\n\n\t\tElement foldersElement = portletDataContext.getImportDataGroupElement(\n\t\t\tJournalFolder.class);\n\n\t\tList<Element> folderElements = foldersElement.elements();\n\n\t\tfor (Element folderElement : folderElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folderElement);\n\t\t}\n\n\t\tfor (Element articleElement : articleElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, articleElement);\n\t\t}\n\n\t\tJournalContentUtil.clearCache();\n\n\t\treturn portletPreferences;\n\t}","id":103117,"modified_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tJournalPermission.RESOURCE_NAME);\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"feeds\")) {\n\t\t\tElement feedsElement = portletDataContext.getImportDataGroupElement(\n\t\t\t\tJournalFeed.class);\n\n\t\t\tList<Element> feedElements = feedsElement.elements();\n\n\t\t\tfor (Element feedElement : feedElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, feedElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"folders\")) {\n\t\t\tElement foldersElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tJournalFolder.class);\n\n\t\t\tList<Element> folderElements = foldersElement.elements();\n\n\t\t\tfor (Element folderElement : folderElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, folderElement);\n\t\t\t}\n\t\t}\n\n\t\tElement articlesElement = portletDataContext.getImportDataGroupElement(\n\t\t\tJournalArticle.class);\n\n\t\tList<Element> articleElements = articlesElement.elements();\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"structures\")) {\n\t\t\tElement ddmStructuresElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tList<Element> ddmStructureElements =\n\t\t\t\tddmStructuresElement.elements();\n\n\t\t\tfor (Element ddmStructureElement : ddmStructureElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmStructureElement);\n\t\t\t}\n\n\t\t\t// Importing DDM structure default values\n\n\t\t\tfor (Element articleElement : articleElements) {\n\t\t\t\tString className = articleElement.attributeValue(\"class-name\");\n\n\t\t\t\tif (Validator.isNotNull(className) &&\n\t\t\t\t\tclassName.equals(DDMStructure.class.getName())) {\n\n\t\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\t\tportletDataContext, articleElement);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"templates\")) {\n\t\t\tElement ddmTemplatesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(DDMTemplate.class);\n\n\t\t\tList<Element> ddmTemplateElements = ddmTemplatesElement.elements();\n\n\t\t\tfor (Element ddmTemplateElement : ddmTemplateElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmTemplateElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"web-content\")) {\n\t\t\tfor (Element articleElement : articleElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, articleElement);\n\t\t\t}\n\n\t\t\tJournalContentUtil.clearCache();\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"5a33922ac0b297fdb1ca190f727b759a2cd69b24","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\tif (!portletDataContext.getBooleanParameter(NAMESPACE, \"record-sets\")) {\n\t\t\treturn getExportDataRootElementString(rootElement);\n\t\t}\n\n\t\tportletDataContext.addPortletPermissions(DDLPermission.RESOURCE_NAME);\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew DDLRecordSetExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","id":103118,"modified_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPortletPermissions(DDLPermission.RESOURCE_NAME);\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tNAMESPACE, \"data-definitions\")) {\n\n\t\t\tList<DDMTemplate> ddmTemplates = new ArrayList<DDMTemplate>();\n\n\t\t\tActionableDynamicQuery ddmStructureActionableDynamicQuery =\n\t\t\t\tgetDDMStructureActionableDynamicQuery(\n\t\t\t\t\tportletDataContext, ddmTemplates);\n\n\t\t\tddmStructureActionableDynamicQuery.performActions();\n\n\t\t\tfor (DDMTemplate ddmTemplate : ddmTemplates) {\n\t\t\t\tStagedModelDataHandlerUtil.exportStagedModel(\n\t\t\t\t\tportletDataContext, ddmTemplate);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"record-sets\")) {\n\t\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\t\tnew DDLRecordSetExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tactionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","commit_id":"93e0772f99c881027fb0cf4efbb6869d1f2988bc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew DDLRecordSetExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\t}","id":103119,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew DDLRecordSetExportActionableDynamicQuery(portletDataContext);\n\n\t\tactionableDynamicQuery.performCount();\n\n\t\tList<DDMTemplate> ddmTemplates = new ArrayList<DDMTemplate>();\n\n\t\tActionableDynamicQuery ddmStructureActionableDynamicQuery =\n\t\t\tgetDDMStructureActionableDynamicQuery(\n\t\t\t\tportletDataContext, ddmTemplates);\n\n\t\tddmStructureActionableDynamicQuery.performCount();\n\t}","commit_id":"93e0772f99c881027fb0cf4efbb6869d1f2988bc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DDLPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\tnew StagedModelType(DDLRecordSet.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"record-sets\", true, false, null,\n\t\t\t\tDDLRecordSet.class.getName()));\n\t\tsetImportControls(getExportControls());\n\t}","id":103120,"modified_method":"public DDLPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\t\tnew StagedModelType(DDLRecordSet.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"record-sets\", true, false, null,\n\t\t\t\tDDLRecordSet.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"data-definitions\", true, false, null,\n\t\t\t\tDDMStructure.class.getName(), DDLRecordSet.class.getName()));\n\t\tsetImportControls(getExportControls());\n\t}","commit_id":"93e0772f99c881027fb0cf4efbb6869d1f2988bc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tif (!portletDataContext.getBooleanParameter(NAMESPACE, \"record-sets\")) {\n\t\t\treturn null;\n\t\t}\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tDDLPermission.RESOURCE_NAME);\n\n\t\tElement recordSetsElement =\n\t\t\tportletDataContext.getImportDataGroupElement(DDLRecordSet.class);\n\n\t\tList<Element> recordSetElements = recordSetsElement.elements();\n\n\t\tfor (Element recordSetElement : recordSetElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, recordSetElement);\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":103121,"modified_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPortletPermissions(\n\t\t\tDDLPermission.RESOURCE_NAME);\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tNAMESPACE, \"data-definitions\")) {\n\n\t\t\tElement ddmStructuresElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tList<Element> ddmStructureElements =\n\t\t\t\tddmStructuresElement.elements();\n\n\t\t\tfor (Element ddmStructureElement : ddmStructureElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmStructureElement);\n\t\t\t}\n\n\t\t\tElement ddmTemplatesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(DDMTemplate.class);\n\n\t\t\tList<Element> ddmTemplateElements = ddmTemplatesElement.elements();\n\n\t\t\tfor (Element ddmTemplateElement : ddmTemplateElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmTemplateElement);\n\t\t\t}\n\t\t}\n\n\t\tif (!portletDataContext.getBooleanParameter(NAMESPACE, \"record-sets\")) {\n\t\t\tElement recordSetsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDDLRecordSet.class);\n\n\t\t\tList<Element> recordSetElements = recordSetsElement.elements();\n\n\t\t\tfor (Element recordSetElement : recordSetElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, recordSetElement);\n\t\t\t}\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"93e0772f99c881027fb0cf4efbb6869d1f2988bc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPortletPermissions(MBPermission.RESOURCE_NAME);\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\t\t_mbCategoryLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tcategoryActionableDynamicQuery.performActions();\n\n\t\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\t\tgetMessageActionableDynamicQuery(portletDataContext);\n\n\t\t\tmessageActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\t\t_mbThreadFlagLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tthreadFlagActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\t\t_mbBanLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tbanActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","id":103122,"modified_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPortletPermissions(MBPermission.RESOURCE_NAME);\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"categories\") ||\n\t\t\tportletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\n\t\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\t\t_mbCategoryLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tcategoryActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\t\tgetMessageActionableDynamicQuery(portletDataContext);\n\n\t\t\tmessageActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\t\t_mbThreadFlagLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tthreadFlagActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\t\t_mbBanLocalService.getExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tbanActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","commit_id":"a23d8367e584373420a59d21159e71e793fce0bd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPortletPermissions(MBPermission.RESOURCE_NAME);\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tElement categoriesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBCategory.class);\n\n\t\t\tList<Element> categoryElements = categoriesElement.elements();\n\n\t\t\tfor (Element categoryElement : categoryElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, categoryElement);\n\t\t\t}\n\n\t\t\tElement messagesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBMessage.class);\n\n\t\t\tList<Element> messageElements = messagesElement.elements();\n\n\t\t\tfor (Element messageElement : messageElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, messageElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tElement threadFlagsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tMBThreadFlag.class);\n\n\t\t\tList<Element> threadFlagElements = threadFlagsElement.elements();\n\n\t\t\tfor (Element threadFlagElement : threadFlagElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, threadFlagElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tElement userBansElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBBan.class);\n\n\t\t\tList<Element> userBanElements = userBansElement.elements();\n\n\t\t\tfor (Element userBanElement : userBanElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, userBanElement);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":103123,"modified_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPortletPermissions(MBPermission.RESOURCE_NAME);\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"categories\") ||\n\t\t\tportletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\n\t\t\tElement categoriesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBCategory.class);\n\n\t\t\tList<Element> categoryElements = categoriesElement.elements();\n\n\t\t\tfor (Element categoryElement : categoryElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, categoryElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tElement messagesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBMessage.class);\n\n\t\t\tList<Element> messageElements = messagesElement.elements();\n\n\t\t\tfor (Element messageElement : messageElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, messageElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tElement threadFlagsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tMBThreadFlag.class);\n\n\t\t\tList<Element> threadFlagElements = threadFlagsElement.elements();\n\n\t\t\tfor (Element threadFlagElement : threadFlagElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, threadFlagElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tElement userBansElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBBan.class);\n\n\t\t\tList<Element> userBanElements = userBansElement.elements();\n\n\t\t\tfor (Element userBanElement : userBanElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, userBanElement);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"a23d8367e584373420a59d21159e71e793fce0bd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Activate\n\tprotected void activate() {\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\tnew StagedModelType(MBBan.class),\n\t\t\tnew StagedModelType(MBCategory.class),\n\t\t\tnew StagedModelType(MBMessage.class),\n\t\t\tnew StagedModelType(MBThread.class),\n\t\t\tnew StagedModelType(MBThreadFlag.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"messages\", true, false, null,\n\t\t\t\tMBMessage.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"thread-flags\", true, false, null,\n\t\t\t\tMBThreadFlag.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"user-bans\", true, false, null,\n\t\t\t\tMBBan.class.getName()));\n\t\tsetImportControls(getExportControls());\n\t\tsetPublishToLiveByDefault(\n\t\t\tPropsValues.MESSAGE_BOARDS_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","id":103124,"modified_method":"@Activate\n\tprotected void activate() {\n\t\tsetDeletionSystemEventStagedModelTypes(\n\t\t\tnew StagedModelType(MBBan.class),\n\t\t\tnew StagedModelType(MBCategory.class),\n\t\t\tnew StagedModelType(MBMessage.class),\n\t\t\tnew StagedModelType(MBThread.class),\n\t\t\tnew StagedModelType(MBThreadFlag.class));\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"categories\", true, false, null,\n\t\t\t\tMBCategory.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"messages\", true, false, null,\n\t\t\t\tMBMessage.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"thread-flags\", true, false, null,\n\t\t\t\tMBThreadFlag.class.getName()),\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"user-bans\", true, false, null,\n\t\t\t\tMBBan.class.getName()));\n\t\tsetImportControls(getExportControls());\n\t\tsetPublishToLiveByDefault(\n\t\t\tPropsValues.MESSAGE_BOARDS_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","commit_id":"a23d8367e584373420a59d21159e71e793fce0bd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPermissions(\n\t\t\tDLPermission.RESOURCE_NAME, portletDataContext.getScopeGroupId());\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"rootFolderId\", null));\n\n\t\tif (rootFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\trootElement.addAttribute(\n\t\t\t\t\"root-folder-id\", String.valueOf(rootFolderId));\n\t\t}\n\n\t\tActionableDynamicQuery fileEntryTypeActionableDynamicQuery =\n\t\t\tgetDLFileEntryTypeActionableDynamicQuery(portletDataContext);\n\n\t\tfileEntryTypeActionableDynamicQuery.performActions();\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tfolderActionableDynamicQuery.performActions();\n\n\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\tfileEntryActionableDynamicQuery.performActions();\n\n\t\tif (!portletDataContext.getBooleanParameter(NAMESPACE, \"shortcuts\")) {\n\t\t\treturn getExportDataRootElementString(rootElement);\n\t\t}\n\n\t\tActionableDynamicQuery fileShortcutActionableDynamicQuery =\n\t\t\tgetDLFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\tfileShortcutActionableDynamicQuery.performActions();\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","id":103125,"modified_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPermissions(\n\t\t\tDLPermission.RESOURCE_NAME, portletDataContext.getScopeGroupId());\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\tportletPreferences.getValue(\"rootFolderId\", null));\n\n\t\tif (rootFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\trootElement.addAttribute(\n\t\t\t\t\"root-folder-id\", String.valueOf(rootFolderId));\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"documents\")) {\n\t\t\tActionableDynamicQuery fileEntryTypeActionableDynamicQuery =\n\t\t\t\tgetDLFileEntryTypeActionableDynamicQuery(portletDataContext);\n\n\t\t\tfileEntryTypeActionableDynamicQuery.performActions();\n\n\t\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\t\tfolderActionableDynamicQuery.performActions();\n\n\t\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\t\tfileEntryActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"shortcuts\")) {\n\t\t\tActionableDynamicQuery fileShortcutActionableDynamicQuery =\n\t\t\t\tgetDLFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\t\tfileShortcutActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","commit_id":"423706b73442463dba99428a227cbca38a571a67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPermissions(\n\t\t\tDLPermission.RESOURCE_NAME, portletDataContext.getSourceGroupId(),\n\t\t\tportletDataContext.getScopeGroupId());\n\n\t\tElement fileEntryTypesElement =\n\t\t\tportletDataContext.getImportDataGroupElement(DLFileEntryType.class);\n\n\t\tList<Element> fileEntryTypeElements = fileEntryTypesElement.elements();\n\n\t\tfor (Element fileEntryTypeElement : fileEntryTypeElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, fileEntryTypeElement);\n\t\t}\n\n\t\tElement foldersElement = portletDataContext.getImportDataGroupElement(\n\t\t\tFolder.class);\n\n\t\tList<Element> folderElements = foldersElement.elements();\n\n\t\tfor (Element folderElement : folderElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folderElement);\n\t\t}\n\n\t\tElement fileEntriesElement =\n\t\t\tportletDataContext.getImportDataGroupElement(FileEntry.class);\n\n\t\tList<Element> fileEntryElements = fileEntriesElement.elements();\n\n\t\tfor (Element fileEntryElement : fileEntryElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, fileEntryElement);\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"shortcuts\")) {\n\t\t\tElement fileShortcutsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDLFileShortcut.class);\n\n\t\t\tList<Element> fileShortcutElements =\n\t\t\t\tfileShortcutsElement.elements();\n\n\t\t\tfor (Element fileShortcutElement : fileShortcutElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, fileShortcutElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"ranks\")) {\n\t\t\tElement fileRanksElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(DLFileRank.class);\n\n\t\t\tList<Element> fileRankElements = fileRanksElement.elements();\n\n\t\t\tfor (Element fileRankElement : fileRankElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, fileRankElement);\n\t\t\t}\n\t\t}\n\n\t\tElement rootElement = portletDataContext.getImportDataRootElement();\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\trootElement.attributeValue(\"root-folder-id\"));\n\n\t\tif (rootFolderId > 0) {\n\t\t\tMap<Long, Long> folderIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tFolder.class);\n\n\t\t\trootFolderId = MapUtil.getLong(\n\t\t\t\tfolderIds, rootFolderId, rootFolderId);\n\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"rootFolderId\", String.valueOf(rootFolderId));\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","id":103126,"modified_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPermissions(\n\t\t\tDLPermission.RESOURCE_NAME, portletDataContext.getSourceGroupId(),\n\t\t\tportletDataContext.getScopeGroupId());\n\n\t\tElement fileEntryTypesElement =\n\t\t\tportletDataContext.getImportDataGroupElement(DLFileEntryType.class);\n\n\t\tList<Element> fileEntryTypeElements = fileEntryTypesElement.elements();\n\n\t\tfor (Element fileEntryTypeElement : fileEntryTypeElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, fileEntryTypeElement);\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"documents\")) {\n\t\t\tElement foldersElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(Folder.class);\n\n\t\t\tList<Element> folderElements = foldersElement.elements();\n\n\t\t\tfor (Element folderElement : folderElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, folderElement);\n\t\t\t}\n\n\t\t\tElement fileEntriesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(FileEntry.class);\n\n\t\t\tList<Element> fileEntryElements = fileEntriesElement.elements();\n\n\t\t\tfor (Element fileEntryElement : fileEntryElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, fileEntryElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"shortcuts\")) {\n\t\t\tElement fileShortcutsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tDLFileShortcut.class);\n\n\t\t\tList<Element> fileShortcutElements =\n\t\t\t\tfileShortcutsElement.elements();\n\n\t\t\tfor (Element fileShortcutElement : fileShortcutElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, fileShortcutElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"ranks\")) {\n\t\t\tElement fileRanksElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(DLFileRank.class);\n\n\t\t\tList<Element> fileRankElements = fileRanksElement.elements();\n\n\t\t\tfor (Element fileRankElement : fileRankElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, fileRankElement);\n\t\t\t}\n\t\t}\n\n\t\tElement rootElement = portletDataContext.getImportDataRootElement();\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\trootElement.attributeValue(\"root-folder-id\"));\n\n\t\tif (rootFolderId > 0) {\n\t\t\tMap<Long, Long> folderIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tFolder.class);\n\n\t\t\trootFolderId = MapUtil.getLong(\n\t\t\t\tfolderIds, rootFolderId, rootFolderId);\n\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"rootFolderId\", String.valueOf(rootFolderId));\n\t\t}\n\n\t\treturn portletPreferences;\n\t}","commit_id":"423706b73442463dba99428a227cbca38a571a67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public DLPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDataPortletPreferences(\"rootFolderId\");\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"folders-and-documents\", true, true),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"shortcuts\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"previews-and-thumbnails\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ranks\"));\n\t\tsetExportMetadataControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"folders-and-documents\", true,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"categories\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"comments\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ratings\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"tags\")\n\t\t\t\t}));\n\t\tsetPublishToLiveByDefault(PropsValues.DL_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","id":103127,"modified_method":"public DLPortletDataHandler() {\n\t\tsetDataLocalized(true);\n\t\tsetDataPortletPreferences(\"rootFolderId\");\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"documents\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"shortcuts\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"previews-and-thumbnails\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ranks\"));\n\t\tsetExportMetadataControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"folders-and-documents\", true,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"categories\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"comments\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ratings\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"tags\")\n\t\t\t\t}));\n\t\tsetPublishToLiveByDefault(PropsValues.DL_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","commit_id":"423706b73442463dba99428a227cbca38a571a67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n         * Creates directory services, starts LDAP server and KDCServer\n         * \n         * @param managementClient\n         * @param containerId\n         * @throws Exception\n         * @see org.jboss.as.arquillian.api.ServerSetupTask#setup(org.jboss.as.arquillian.container.ManagementClient,\n         *      java.lang.String)\n         */\n        public void setup(ManagementClient managementClient, String containerId) throws Exception {\n            directoryService = DSAnnotationProcessor.getDirectoryService();\n            final SchemaManager schemaManager = directoryService.getSchemaManager();\n            try {\n                for (LdifEntry ldifEntry : new LdifReader(\n                        LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class.getSimpleName()\n                                + \".ldif\"))) {\n                    directoryService.getAdminSession().add(new DefaultEntry(schemaManager, ldifEntry.getEntry()));\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw e;\n            }\n            final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer(\n                    (CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class));\n            FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE);\n            IOUtils.copy(getClass().getResourceAsStream(KEYSTORE_FILENAME), fos);\n            fos.close();\n            createLdapServer.setKeyStore(KEYSTORE_FILE.getAbsolutePath());\n            fixTransportAddress(createLdapServer, StringUtils.strip(Utils.getSecondaryTestAddress(managementClient), \"[]\"));\n            ldapServer = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, directoryService);\n            ldapServer.start();\n        }","id":103128,"modified_method":"/**\n         * Creates directory services, starts LDAP server and KDCServer\n         * \n         * @param managementClient\n         * @param containerId\n         * @throws Exception\n         * @see org.jboss.as.arquillian.api.ServerSetupTask#setup(org.jboss.as.arquillian.container.ManagementClient,\n         *      java.lang.String)\n         */\n        public void setup(ManagementClient managementClient, String containerId) throws Exception {\n            directoryService = DSAnnotationProcessor.getDirectoryService();\n            final String hostname = Utils.getSecondaryTestAddress(managementClient);\n            final Map<String, String> map = new HashMap<String, String>();\n            map.put(\"hostname\", hostname);\n            map.put(\"ldapPort\", Integer.toString(LDAP_PORT));\n            map.put(\"ldapsPort\", Integer.toString(LDAPS_PORT));\n            final String ldifContent = StrSubstitutor.replace(\n                    IOUtils.toString(\n                            LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class\n                                    .getSimpleName() + \".ldif\"), \"UTF-8\"), map);\n            LOGGER.debug(ldifContent);\n\n            final SchemaManager schemaManager = directoryService.getSchemaManager();\n            try {\n                for (LdifEntry ldifEntry : new LdifReader(IOUtils.toInputStream(ldifContent))) {\n                    directoryService.getAdminSession().add(new DefaultEntry(schemaManager, ldifEntry.getEntry()));\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw e;\n            }\n            final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer(\n                    (CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class));\n            FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE);\n            IOUtils.copy(getClass().getResourceAsStream(KEYSTORE_FILENAME), fos);\n            fos.close();\n            createLdapServer.setKeyStore(KEYSTORE_FILE.getAbsolutePath());\n            fixTransportAddress(createLdapServer, Utils.getSecondaryTestAddress(managementClient, false));\n            ldapServer = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, directoryService);\n            ldapServer.start();\n        }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests role assignment.\n     * \n     * @param webAppURL\n     * @throws MalformedURLException\n     * @throws ClientProtocolException\n     * @throws IOException\n     * @throws URISyntaxException\n     */\n    private void testDeployment(URL webAppURL, String username, boolean hasJdukeRole) throws MalformedURLException,\n            ClientProtocolException, IOException, URISyntaxException {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, username, \"theduke\", 200);\n\n        if (hasJdukeRole) {\n            assertInRole(rolesResponse, \"jduke\");\n        } else {\n            assertNotInRole(rolesResponse, \"jduke\");\n        }\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"TheDuke2\");\n        assertNotInRole(rolesResponse, \"Echo2\");\n\n        //assigned roles\n        assertInRole(rolesResponse, \"TheDuke\");\n        assertInRole(rolesResponse, \"Echo\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm()\n                + PrincipalPrintingServlet.SERVLET_PATH.substring(1) + \"?\" + QUERY_ROLES);\n        final String principal = Utils.makeCallWithBasicAuthn(principalPrintingURL, username, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", username, principal);\n    }","id":103129,"modified_method":"/**\n     * Tests role assignment for given deployment (web-app URL).\n     */\n    private void testDeployment(URL webAppURL, String username, String... assignedRoles) throws MalformedURLException,\n            ClientProtocolException, IOException, URISyntaxException, LoginException {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, username, \"theduke\", 200);\n\n        final List<String> assignedRolesList = Arrays.asList(assignedRoles);\n\n        for (String role : ROLE_NAMES) {\n            if (assignedRolesList.contains(role)) {\n                assertInRole(rolesResponse, role);\n            } else {\n                assertNotInRole(rolesResponse, role);\n            }\n        }\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm()\n                + PrincipalPrintingServlet.SERVLET_PATH.substring(1) + \"?\" + QUERY_ROLES);\n        final String principal = Utils.makeCallWithBasicAuthn(principalPrintingURL, username, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", username, principal);\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 2.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP2)\n    public void test2(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", true);\n    }","id":103130,"modified_method":"/**\n     * Test case for Example 2.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP2)\n    public void test2(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", \"TheDuke\", \"Echo\", \"jduke\");\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 3.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP3)\n    public void test3(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"Java Duke\", false);\n    }","id":103131,"modified_method":"/**\n     * Test case for Example 3.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP3)\n    @Ignore(\"AS7-5737 LdapExtLoginModule fails with follow referral\")\n    public void test3(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"Java Duke\", \"TheDuke\", \"Echo\", \"Admin\");\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 5.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP5)\n    public void test5(@ArquillianResource URL webAppURL) throws Exception {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, \"jduke\", \"theduke\", 200);\n\n        assertInRole(rolesResponse, \"R1\");\n        assertNotInRole(rolesResponse, \"R2\");\n        assertNotInRole(rolesResponse, \"jduke\");\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"RG1\");\n    }","id":103132,"modified_method":"/**\n     * Test case for Example 5.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP5)\n    public void test5(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", \"R1\");\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"private Map<String, String> getCommonOptions() {\n            final Map<String, String> moduleOptions = new HashMap<String, String>();\n            moduleOptions.put(\"java.naming.factory.initial\", \"com.sun.jndi.ldap.LdapCtxFactory\");\n            moduleOptions.put(\"java.naming.security.authentication\", \"simple\");\n            moduleOptions.put(\"bindDN\", SECURITY_PRINCIPAL);\n            moduleOptions.put(\"bindCredential\", SECURITY_CREDENTIALS);\n            return moduleOptions;\n        }","id":103133,"modified_method":"private Map<String, String> getCommonOptions() {\n            final Map<String, String> moduleOptions = new HashMap<String, String>();\n            moduleOptions.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            moduleOptions.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n            moduleOptions.put(\"bindDN\", SECURITY_PRINCIPAL);\n            moduleOptions.put(\"bindCredential\", SECURITY_CREDENTIALS);\n            moduleOptions.put(\"throwValidateError\", \"true\");\n            return moduleOptions;\n        }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 1.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP1)\n    public void test1(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", false);\n    }","id":103134,"modified_method":"/**\n     * Test case for Example 1.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP1)\n    @Ignore(\"AS7-5737 LdapExtLoginModule fails with follow referral\")\n    public void test1(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"jduke\", \"TheDuke\", \"Echo\", \"Admin\");\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test case for Example 4.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP4)\n    public void test4(@ArquillianResource URL webAppURL) throws Exception {\n        final URL rolesPrintingURL = new URL(webAppURL.toExternalForm() + RolePrintingServlet.SERVLET_PATH.substring(1) + \"?\"\n                + QUERY_ROLES);\n        final String userName = \"Java Duke\";\n        final String rolesResponse = Utils.makeCallWithBasicAuthn(rolesPrintingURL, userName, \"theduke\", 200);\n\n        assertNotInRole(rolesResponse, \"jduke\");\n        assertNotInRole(rolesResponse, \"Java Duke\");\n        assertNotInRole(rolesResponse, \"Roles\");\n        assertNotInRole(rolesResponse, \"JBossAdmin\");\n        assertNotInRole(rolesResponse, \"R4\");\n        //assigned roles\n        assertInRole(rolesResponse, \"RG2\");\n        assertInRole(rolesResponse, \"R1\");\n        assertInRole(rolesResponse, \"R2\");\n        assertInRole(rolesResponse, \"R3\");\n        assertInRole(rolesResponse, \"R5\");\n\n        final URL principalPrintingURL = new URL(webAppURL.toExternalForm()\n                + PrincipalPrintingServlet.SERVLET_PATH.substring(1) + \"?\" + QUERY_ROLES);\n        final String principal = Utils.makeCallWithBasicAuthn(principalPrintingURL, userName, \"theduke\", 200);\n        assertEquals(\"Unexpected Principal name\", userName, principal);\n    }","id":103135,"modified_method":"/**\n     * Test case for Example 4.\n     * \n     * @throws Exception\n     */\n    @Test\n    @OperateOnDeployment(DEP4)\n    public void test4(@ArquillianResource URL webAppURL) throws Exception {\n        testDeployment(webAppURL, \"Java Duke\", \"RG2\", \"R1\", \"R2\", \"R3\", \"R5\");\n    }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n         * Returns SecurityDomains configuration for this testcase.\n         * \n         * @see org.jboss.as.test.integration.security.common.AbstractSecurityDomainsServerSetupTask#getSecurityDomains()\n         */\n        @Override\n        protected SecurityDomain[] getSecurityDomains() {\n            final String secondaryTestAddress = Utils.getSecondaryTestAddress(managementClient);\n            final SecurityDomain sd1 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP1)\n                    .loginModules(\n                            new SecurityModule.Builder().name(\"org.jboss.security.auth.spi.LdapExtLoginModule\")\n                                    .options(getCommonOptions()).putOption(\"baseCtxDN\", \"ou=People,dc=jboss,dc=org\")\n                                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT)\n                                    .putOption(\"baseFilter\", \"(uid={0})\").putOption(\"rolesCtxDN\", \"ou=Roles,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(member={1})\").putOption(\"roleAttributeID\", \"cn\")\n                                    .putOption(\"throwValidateError\", \"true\").build()) //\n                    .build();\n            final SecurityDomain sd2 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP2)\n                    .loginModules(\n                            new SecurityModule.Builder().name(\"LdapExtended\").options(getCommonOptions())\n                                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT)\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example2,dc=jboss,dc=org\")\n                                    .putOption(\"baseFilter\", \"(uid={0})\")\n                                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example2,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(cn={0})\").putOption(\"roleAttributeID\", \"description\")\n                                    .putOption(\"roleAttributeIsDN\", \"true\").putOption(\"roleNameAttributeID\", \"cn\")\n                                    .putOption(\"roleRecursion\", \"0\").putOption(\"throwValidateError\", \"true\").build()) //\n                    .build();\n            final SecurityDomain sd3 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP3)\n                    .loginModules(\n                            new SecurityModule.Builder()\n                                    .name(LdapExtLoginModule.class.getName())\n                                    .options(getCommonOptions())\n                                    .putOption(\"java.naming.provider.url\", \"ldaps://\" + secondaryTestAddress + \":\" + LDAPS_PORT)\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example3,dc=jboss,dc=org\")\n                                    .putOption(\"baseFilter\", \"(cn={0})\")\n                                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example3,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(member={1})\").putOption(\"roleAttributeID\", \"cn\")\n                                    .putOption(\"roleRecursion\", \"0\").putOption(\"throwValidateError\", \"true\").build()) //\n                    .build();\n            final SecurityDomain sd4 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP4)\n                    .loginModules(\n                            new SecurityModule.Builder()\n                                    .name(LdapExtLoginModule.class.getName())\n                                    .options(getCommonOptions())\n                                    .putOption(\"java.naming.provider.url\", \"ldaps://\" + secondaryTestAddress + \":\" + LDAPS_PORT)\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example4,dc=jboss,dc=org\")\n                                    .putOption(\"baseFilter\", \"(cn={0})\")\n                                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example4,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(member={1})\").putOption(\"roleAttributeID\", \"cn\")\n                                    .putOption(\"roleRecursion\", \"1\").putOption(\"throwValidateError\", \"true\").build()) //\n                    .build();\n            final SecurityDomain sd5 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP5)\n                    .loginModules(\n                            new SecurityModule.Builder().name(LdapExtLoginModule.class.getName()).options(getCommonOptions())\n                                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT) //\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example5,dc=jboss,dc=org\") //\n                                    .putOption(\"baseFilter\", \"(uid={0})\") //\n                                    .putOption(\"rolesCtxDN\", \"ou=People,o=example5,dc=jboss,dc=org\") //\n                                    .putOption(\"roleFilter\", \"(uid={0})\") //\n                                    .putOption(\"roleAttributeID\", \"employeeNumber\").build()) //\n                    .build();\n            return new SecurityDomain[] { sd1, sd2, sd3, sd4, sd5 };\n        }","id":103136,"modified_method":"/**\n         * Returns SecurityDomains configuration for this testcase.\n         * \n         * @see org.jboss.as.test.integration.security.common.AbstractSecurityDomainsServerSetupTask#getSecurityDomains()\n         */\n        @Override\n        protected SecurityDomain[] getSecurityDomains() {\n            final String secondaryTestAddress = Utils.getSecondaryTestAddress(managementClient);\n            final SecurityDomain sd1 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP1)\n                    .loginModules(\n                            new SecurityModule.Builder().name(\"org.jboss.security.auth.spi.LdapExtLoginModule\")\n                                    .options(getCommonOptions()).putOption(Context.REFERRAL, \"follow\")\n                                    .putOption(\"baseCtxDN\", \"ou=People,dc=jboss,dc=org\")\n                                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT)\n                                    .putOption(\"baseFilter\", \"(uid={0})\").putOption(\"rolesCtxDN\", \"ou=Roles,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(|(objectClass=referral)(member={1}))\")\n                                    .putOption(\"roleAttributeID\", \"cn\").build()) //\n                    .build();\n            final SecurityModule.Builder sd2LoginModuleBuilder = new SecurityModule.Builder().name(\"LdapExtended\")\n                    .options(getCommonOptions()).putOption(Context.REFERRAL, \"ignore\")\n                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT)\n                    .putOption(\"baseCtxDN\", \"ou=People,o=example2,dc=jboss,dc=org\").putOption(\"baseFilter\", \"(uid={0})\")\n                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example2,dc=jboss,dc=org\")\n                    .putOption(\"roleFilter\", \"(|(objectClass=referral)(cn={0}))\").putOption(\"roleAttributeID\", \"description\")\n                    .putOption(\"roleAttributeIsDN\", \"true\").putOption(\"roleNameAttributeID\", \"cn\")\n                    .putOption(\"roleRecursion\", \"0\");\n            final SecurityDomain sd2 = new SecurityDomain.Builder().name(SECURITY_DOMAIN_NAME_PREFIX + DEP2)\n                    .loginModules(sd2LoginModuleBuilder.build()).build();\n            sd2LoginModuleBuilder.putOption(Context.REFERRAL, \"throw\");\n            final SecurityDomain sd2throw = new SecurityDomain.Builder().name(SECURITY_DOMAIN_NAME_PREFIX + DEP2_THROW)\n                    .loginModules(sd2LoginModuleBuilder.build()).build();\n            final SecurityDomain sd3 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP3)\n                    .loginModules(\n                            new SecurityModule.Builder()\n                                    .name(LdapExtLoginModule.class.getName())\n                                    .options(getCommonOptions())\n                                    .putOption(Context.REFERRAL, \"follow\")\n                                    .putOption(\"java.naming.provider.url\", \"ldaps://\" + secondaryTestAddress + \":\" + LDAPS_PORT)\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example3,dc=jboss,dc=org\")\n                                    .putOption(\"baseFilter\", \"(cn={0})\")\n                                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example3,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(|(objectClass=referral)(member={1}))\")\n                                    .putOption(\"roleAttributeID\", \"cn\").putOption(\"roleRecursion\", \"0\").build()) //\n                    .build();\n            final SecurityDomain sd4 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP4)\n                    .loginModules(\n                            new SecurityModule.Builder()\n                                    .name(LdapExtLoginModule.class.getName())\n                                    .options(getCommonOptions())\n                                    .putOption(Context.REFERRAL, \"ignore\")\n                                    .putOption(\"java.naming.provider.url\", \"ldaps://\" + secondaryTestAddress + \":\" + LDAPS_PORT)\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example4,dc=jboss,dc=org\")\n                                    .putOption(\"baseFilter\", \"(cn={0})\")\n                                    .putOption(\"rolesCtxDN\", \"ou=Roles,o=example4,dc=jboss,dc=org\")\n                                    .putOption(\"roleFilter\", \"(|(objectClass=referral)(member={1}))\")\n                                    .putOption(\"roleAttributeID\", \"cn\").putOption(\"roleRecursion\", \"1\").build()) //\n                    .build();\n            final SecurityDomain sd5 = new SecurityDomain.Builder()\n                    .name(SECURITY_DOMAIN_NAME_PREFIX + DEP5)\n                    .loginModules(\n                            new SecurityModule.Builder().name(LdapExtLoginModule.class.getName()).options(getCommonOptions())\n                                    .putOption(Context.REFERRAL, \"throw\")\n                                    .putOption(\"java.naming.provider.url\", \"ldap://\" + secondaryTestAddress + \":\" + LDAP_PORT) //\n                                    .putOption(\"baseCtxDN\", \"ou=People,o=example5,dc=jboss,dc=org\") //\n                                    .putOption(\"baseFilter\", \"(uid={0})\") //\n                                    .putOption(\"rolesCtxDN\", \"ou=People,o=example5,dc=jboss,dc=org\") //\n                                    .putOption(\"roleFilter\", \"(uid={0})\") //\n                                    .putOption(\"roleAttributeID\", \"employeeNumber\").build()) //\n                    .build();\n            return new SecurityDomain[] { sd1, sd2, sd2throw, sd3, sd4, sd5 };\n        }","commit_id":"dc36255432ed3f77b5e4ae83dc62328b732aac46","url":"https://github.com/wildfly/wildfly"},{"original_method":"public FileReferenceSet(String str,\n                          PsiElement element,\n                          int startInElement,\n                          ReferenceType type,\n                          PsiReferenceProvider provider,\n                          final boolean isCaseSensitive){\n    myType = type;\n    myElement = element;\n    myStartInElement = startInElement;\n    myProvider = provider;\n    myCaseSensitive = isCaseSensitive;\n    myPathString = str.trim();\n\n    reparse(str);\n  }","id":103137,"modified_method":"public FileReferenceSet(String str,\n                          PsiElement element,\n                          int startInElement,\n                          ReferenceType type,\n                          PsiReferenceProvider provider,\n                          final boolean isCaseSensitive){\n    this(str, element, startInElement, type, provider, isCaseSensitive, true);\n  }","commit_id":"d0b50715cc5b86c63111502754a9187dedf19cec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void reparse(String str){\n    final List<FileReference> referencesList = new ArrayList<FileReference>();\n    int currentSlash = -1;\n    while(currentSlash + 1 < str.length() && str.charAt(currentSlash + 1) == ' ') currentSlash++;\n    if (currentSlash + 1 < str.length() && str.charAt(currentSlash + 1) == SEPARATOR) currentSlash++;\n    int index = 0;\n    FileReference currentContextRef;\n\n    while(true){\n      final int nextSlash = str.indexOf(SEPARATOR, currentSlash + 1);\n      final String subreferenceText = nextSlash > 0 ? str.substring(currentSlash + 1, nextSlash) : str.substring(currentSlash + 1);\n      if (subreferenceText.length() > 0) {\n        currentContextRef = new FileReference(this, new TextRange(myStartInElement + currentSlash + 1,\n                                                                  myStartInElement + (nextSlash > 0 ? nextSlash : str.length())),\n                                              index++, subreferenceText);\n        referencesList.add(currentContextRef);\n      }\n      if ((currentSlash = nextSlash) < 0) {\n        break;\n      }\n    }\n\n    setReferences(referencesList.toArray(new FileReference[referencesList.size()]));\n  }","id":103138,"modified_method":"protected void reparse(String str){\n    final List<FileReference> referencesList = new ArrayList<FileReference>();\n    int currentSlash = -1;\n    while(currentSlash + 1 < str.length() && str.charAt(currentSlash + 1) == ' ') currentSlash++;\n    if (currentSlash + 1 < str.length() && str.charAt(currentSlash + 1) == SEPARATOR) currentSlash++;\n    int index = 0;\n    FileReference currentContextRef;\n\n    while(true){\n      final int nextSlash = str.indexOf(SEPARATOR, currentSlash + 1);\n      final String subreferenceText = nextSlash > 0 ? str.substring(currentSlash + 1, nextSlash) : str.substring(currentSlash + 1);\n      if (subreferenceText.length() > 0 || myAllowEmptyFileReferenceAtEnd) { // ? check at end\n        currentContextRef = new FileReference(this, new TextRange(myStartInElement + currentSlash + 1,\n                                                                  myStartInElement + (nextSlash > 0 ? nextSlash : str.length())),\n                                              index++, subreferenceText);\n        referencesList.add(currentContextRef);\n      }\n      if ((currentSlash = nextSlash) < 0) {\n        break;\n      }\n    }\n\n    setReferences(referencesList.toArray(new FileReference[referencesList.size()]));\n  }","commit_id":"d0b50715cc5b86c63111502754a9187dedf19cec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ReferenceProvidersRegistry() {\n    // Temp scopes declarations\n    myTempScopes.add(PsiIdentifier.class);\n\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagValueManipulator());\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n    myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER, new JspxIncludePathReferenceProvider());\n    myReferenceTypeToProviderMap.put(DYNAMIC_PATH_REFERENCES_PROVIDER, new JspxDynamicPathReferenceProvider());\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, new PropertiesReferenceProvider());\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"class\", \"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new TextFilter(\"useBean\"),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ), 2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    RegisterInPsi.referenceProviders(this);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"extends\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    final CustomizableReferenceProvider classReferenceProvider = (CustomizableReferenceProvider)getProviderByType(CLASS_REFERENCE_PROVIDER);\n    final CustomizingReferenceProvider qualifiedClassReferenceProvider = new CustomizingReferenceProvider(classReferenceProvider);\n    qualifiedClassReferenceProvider.addCustomization(JavaClassReferenceProvider.RESOLVE_QUALIFIED_CLASS_NAME, true);\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.attribute\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"attribute\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"variable-class\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.variable\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"variable\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"import\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ),\n      new JspImportListReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"errorPage\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"file\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"include\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.include\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"value\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"url\")\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"url\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new OrFilter(\n                new TextFilter(\"import\"),\n                new TextFilter(\"redirect\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"key\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new NamespaceFilter(XmlUtil.JSTL_FORMAT_URIS),\n              new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)\n            ),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"altKey\",\"titleKey\",\"pageKey\",\"srcKey\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n            new ClassFilter(XmlTag.class)\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"page\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new OrFilter(\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.JSP_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"include\",\"forward\")\n              )\n            ),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"rewrite\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlTagReferenceProvider(\n      new String[]{\"welcome-file\",\"location\",\"taglib-location\"},\n      new NamespaceFilter(XmlUtil.WEB_XML_URIS),\n      true,\n      getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"tagdir\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"uri\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ),\n      new JspUriReferenceProvider()\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      classListProvider\n    );\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS), XmlToken.class,\n                              classListProvider);\n\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"function-class\", \"tag-class\", \"tei-class\", \"variable-class\", \"type\", \"path\",\n        \"function-signature\", \"name\", \"name-given\"\n      },\n      new NamespaceFilter(MetaRegistry.TAGLIB_URIS),\n      true,\n      new TaglibReferenceProvider( getProviderByType(CLASS_REFERENCE_PROVIDER) )\n    );\n\n    final NamespaceFilter jsfNsFilter = new NamespaceFilter(XmlUtil.JSF_URIS);\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"render-kit-class\",\"renderer-class\",\"managed-bean-class\",\"attribute-class\",\"component-class\",\n        \"converter-for-class\", \"converter-class\", \"key-class\", \"value-class\",\n        \"referenced-bean-class\", \"validator-class\", \"application-factory\", \"faces-context-factory\",\n        \"render-kit-factory\", \"lifecycle-factory\", \"view-handler\", \"variable-resolver\", \"phase-listener\",\n        \"property-resolver\", \"state-manager\", \"action-listener\", \"navigation-handler\"\n      },\n      jsfNsFilter,\n      true,\n      getProviderByType(CLASS_REFERENCE_PROVIDER) \n    );\n\n    final JSFReferencesProvider jsfProvider = new JSFReferencesProvider();\n    \n    registerXmlTagReferenceProvider(\n      new String[] { \"property-name\", \"property-class\" },\n      jsfNsFilter,\n      true,\n      jsfProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\n        \"src\", \"href\", \"action\", \"background\", \"width\", \"height\", \"type\", \"bgcolor\", \"color\", \"vlink\", \"link\", \"alink\", \"text\", \"name\"\n      },\n      provider.getFilter(),\n      false,\n      provider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(\n      new ElementFilter() {\n        public boolean isAcceptable(Object element, PsiElement context) {\n          if (context instanceof PsiLiteralExpression) {\n            PsiLiteralExpression literalExpression = (PsiLiteralExpression) context;\n            final Map<String, Object> annotationParams = new HashMap<String, Object>();\n            annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null);\n            if (I18nUtil.mustBePropertyKey(literalExpression, annotationParams)) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        public boolean isClassAcceptable(Class hintClass) {\n          return true;\n        }\n      }, PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"ref\",\"type\",\"base\",\"name\",\"substitutionGroup\",\"memberTypes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(MetaRegistry.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:type\"},\n      null,\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:noNamespaceSchemaLocation\"},\n      null,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"schemaLocation\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(MetaRegistry.SCHEMA_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"import\",\"include\")\n            )\n          ), 2\n        )\n      ),\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      uriProvider.getNamespaceAttributeFilter(),\n      uriProvider\n    );\n\n    final JspReferencesProvider jspReferencesProvider = new JspReferencesProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"fragment\",\"name\",\"property\",\"id\",\"name-given\",\"dynamic-attributes\",\"name-from-attribute\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(\n              new String[] {\n                XmlUtil.JSP_URI,\n                XmlUtil.STRUTS_BEAN_URI,\n                XmlUtil.STRUTS_LOGIC_URI\n              }\n            )\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"var\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS)\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"scope\"},\n      null,\n      jspReferencesProvider\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new TextFilter(\"property\"),\n              new NamespaceFilter(XmlUtil.SPRING_CORE_URI)\n            )\n          ), 2\n        )\n      ),\n      new SpringReferencesProvider()\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.HIBERNATE_URIS),\n              new TextFilter(new String[] { \"property\",\"list\",\"map\",\"set\", \"array\", \"bag\", \"idbag\", \"primitive-array\", \"many-to-one\", \"one-to-one\"} )\n            )\n          ), 2\n        )\n      ),\n      new HibernateReferencesProvider()\n    );\n  }","id":103139,"modified_method":"private ReferenceProvidersRegistry() {\n    // Temp scopes declarations\n    myTempScopes.add(PsiIdentifier.class);\n\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagValueManipulator());\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n    myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER, new JspxIncludePathReferenceProvider());\n    myReferenceTypeToProviderMap.put(DYNAMIC_PATH_REFERENCES_PROVIDER, new JspxDynamicPathReferenceProvider());\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, new PropertiesReferenceProvider());\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"class\", \"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new TextFilter(\"useBean\"),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ), 2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    RegisterInPsi.referenceProviders(this);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"extends\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    final CustomizableReferenceProvider classReferenceProvider = (CustomizableReferenceProvider)getProviderByType(CLASS_REFERENCE_PROVIDER);\n    final CustomizingReferenceProvider qualifiedClassReferenceProvider = new CustomizingReferenceProvider(classReferenceProvider);\n    qualifiedClassReferenceProvider.addCustomization(JavaClassReferenceProvider.RESOLVE_QUALIFIED_CLASS_NAME, true);\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.attribute\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"attribute\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"variable-class\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.variable\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"variable\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"import\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ),\n      new JspImportListReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"errorPage\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"file\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"include\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.include\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    final CustomizableReferenceProvider dynamicPathReferenceProvider = (CustomizableReferenceProvider)getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER);\n    final CustomizingReferenceProvider dynamicPathReferenceProviderNoEmptyFileReferencesAtEnd = new CustomizingReferenceProvider(dynamicPathReferenceProvider);\n    dynamicPathReferenceProviderNoEmptyFileReferencesAtEnd.addCustomization(\n      JspxDynamicPathReferenceProvider.ALLOW_REFERENCING_DIR_WITH_END_SLASH,\n      true\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"value\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"url\")\n            )\n          ), 2\n        )\n      ), dynamicPathReferenceProviderNoEmptyFileReferencesAtEnd\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"url\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new OrFilter(\n                new TextFilter(\"import\"),\n                new TextFilter(\"redirect\")\n              )\n            )\n          ), 2\n        )\n      ), dynamicPathReferenceProviderNoEmptyFileReferencesAtEnd\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"key\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new NamespaceFilter(XmlUtil.JSTL_FORMAT_URIS),\n              new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)\n            ),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"altKey\",\"titleKey\",\"pageKey\",\"srcKey\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n            new ClassFilter(XmlTag.class)\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"page\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new OrFilter(\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.JSP_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"include\",\"forward\")\n              )\n            ),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"rewrite\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlTagReferenceProvider(\n      new String[]{\"welcome-file\",\"location\",\"taglib-location\"},\n      new NamespaceFilter(XmlUtil.WEB_XML_URIS),\n      true,\n      getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"tagdir\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"uri\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ),\n      new JspUriReferenceProvider()\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      classListProvider\n    );\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS), XmlToken.class,\n                              classListProvider);\n\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"function-class\", \"tag-class\", \"tei-class\", \"variable-class\", \"type\", \"path\",\n        \"function-signature\", \"name\", \"name-given\"\n      },\n      new NamespaceFilter(MetaRegistry.TAGLIB_URIS),\n      true,\n      new TaglibReferenceProvider( getProviderByType(CLASS_REFERENCE_PROVIDER) )\n    );\n\n    final NamespaceFilter jsfNsFilter = new NamespaceFilter(XmlUtil.JSF_URIS);\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"render-kit-class\",\"renderer-class\",\"managed-bean-class\",\"attribute-class\",\"component-class\",\n        \"converter-for-class\", \"converter-class\", \"key-class\", \"value-class\",\n        \"referenced-bean-class\", \"validator-class\", \"application-factory\", \"faces-context-factory\",\n        \"render-kit-factory\", \"lifecycle-factory\", \"view-handler\", \"variable-resolver\", \"phase-listener\",\n        \"property-resolver\", \"state-manager\", \"action-listener\", \"navigation-handler\"\n      },\n      jsfNsFilter,\n      true,\n      getProviderByType(CLASS_REFERENCE_PROVIDER) \n    );\n\n    final JSFReferencesProvider jsfProvider = new JSFReferencesProvider();\n    \n    registerXmlTagReferenceProvider(\n      new String[] { \"property-name\", \"property-class\" },\n      jsfNsFilter,\n      true,\n      jsfProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\n        \"src\", \"href\", \"action\", \"background\", \"width\", \"height\", \"type\", \"bgcolor\", \"color\", \"vlink\", \"link\", \"alink\", \"text\", \"name\"\n      },\n      provider.getFilter(),\n      false,\n      provider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(\n      new ElementFilter() {\n        public boolean isAcceptable(Object element, PsiElement context) {\n          if (context instanceof PsiLiteralExpression) {\n            PsiLiteralExpression literalExpression = (PsiLiteralExpression) context;\n            final Map<String, Object> annotationParams = new HashMap<String, Object>();\n            annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null);\n            if (I18nUtil.mustBePropertyKey(literalExpression, annotationParams)) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        public boolean isClassAcceptable(Class hintClass) {\n          return true;\n        }\n      }, PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"ref\",\"type\",\"base\",\"name\",\"substitutionGroup\",\"memberTypes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(MetaRegistry.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:type\"},\n      null,\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:noNamespaceSchemaLocation\"},\n      null,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"schemaLocation\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(MetaRegistry.SCHEMA_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"import\",\"include\")\n            )\n          ), 2\n        )\n      ),\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      uriProvider.getNamespaceAttributeFilter(),\n      uriProvider\n    );\n\n    final JspReferencesProvider jspReferencesProvider = new JspReferencesProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"fragment\",\"name\",\"property\",\"id\",\"name-given\",\"dynamic-attributes\",\"name-from-attribute\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(\n              new String[] {\n                XmlUtil.JSP_URI,\n                XmlUtil.STRUTS_BEAN_URI,\n                XmlUtil.STRUTS_LOGIC_URI\n              }\n            )\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"var\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS)\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"scope\"},\n      null,\n      jspReferencesProvider\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new TextFilter(\"property\"),\n              new NamespaceFilter(XmlUtil.SPRING_CORE_URI)\n            )\n          ), 2\n        )\n      ),\n      new SpringReferencesProvider()\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.HIBERNATE_URIS),\n              new TextFilter(new String[] { \"property\",\"list\",\"map\",\"set\", \"array\", \"bag\", \"idbag\", \"primitive-array\", \"many-to-one\", \"one-to-one\"} )\n            )\n          ), 2\n        )\n      ),\n      new HibernateReferencesProvider()\n    );\n  }","commit_id":"d0b50715cc5b86c63111502754a9187dedf19cec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public JavaResolveResult advancedResolve(boolean incompleteCode) {\n        if (!myElement.isValid()) return JavaResolveResult.EMPTY;\n        String qName = getElement().getText().substring(getReference(0).getRangeInElement().getStartOffset(), getRangeInElement().getEndOffset());\n        if (myIndex == myReferences.length - 1) {\n          final PsiClass aClass = myElement.getManager().findClass(qName, GlobalSearchScope.allScope(myElement.getProject()));\n          if (aClass != null) return new ClassCandidateInfo(aClass, PsiSubstitutor.EMPTY, false, false, myElement);\n        }\n        PsiElement resolveResult = myElement.getManager().findPackage(qName);\n        if(resolveResult == null)\n          resolveResult = myElement.getManager().findClass(qName, GlobalSearchScope.allScope(myElement.getProject()));\n\n        if(resolveResult == null){\n          final PsiFile containingFile = myElement.getContainingFile();\n          if(containingFile instanceof PsiJavaFile) {\n            final ClassResolverProcessor processor = new ClassResolverProcessor(getCanonicalText(), myElement);\n            containingFile.processDeclarations(processor, PsiSubstitutor.EMPTY, null, myElement);\n            if(processor.getResult().length == 1) return processor.getResult()[0];\n          }\n        }\n        return resolveResult != null ?\n               new ClassCandidateInfo(resolveResult, PsiSubstitutor.EMPTY, false, false, myElement):\n               JavaResolveResult.EMPTY;\n      }","id":103140,"modified_method":"public JavaResolveResult advancedResolve(boolean incompleteCode) {\n        if (!myElement.isValid()) return JavaResolveResult.EMPTY;\n        String qName = getElement().getText().substring(getReference(0).getRangeInElement().getStartOffset(), getRangeInElement().getEndOffset());\n        \n        if (myIndex == myReferences.length - 1) {\n          final PsiClass aClass = myElement.getManager().findClass(qName, GlobalSearchScope.allScope(myElement.getProject()));\n          if (aClass != null) {\n            return new ClassCandidateInfo(aClass, PsiSubstitutor.EMPTY, false, false, myElement);\n          }\n        }\n        PsiElement resolveResult = myElement.getManager().findPackage(qName);\n        if(resolveResult == null)\n          resolveResult = myElement.getManager().findClass(qName, GlobalSearchScope.allScope(myElement.getProject()));\n\n        if(resolveResult == null){\n          final PsiFile containingFile = myElement.getContainingFile();\n          if(containingFile instanceof PsiJavaFile) {\n            final ClassResolverProcessor processor = new ClassResolverProcessor(getCanonicalText(), myElement);\n            containingFile.processDeclarations(processor, PsiSubstitutor.EMPTY, null, myElement);\n            if(processor.getResult().length == 1) {\n              final JavaResolveResult javaResolveResult = processor.getResult()[0];\n              \n              if (javaResolveResult != JavaResolveResult.EMPTY && options != null) {\n                final Boolean value = RESOLVE_QUALIFIED_CLASS_NAME.getValue(options);\n                if (value != null && value.booleanValue()) {\n                  final String qualifiedName = ((PsiClass)javaResolveResult.getElement()).getQualifiedName();\n  \n                  if (!qName.equals(qualifiedName)) {\n                    return JavaResolveResult.EMPTY;\n                  }\n                }\n              }\n              \n              return javaResolveResult;\n            }\n          }\n        }\n        return resolveResult != null ?\n               new ClassCandidateInfo(resolveResult, PsiSubstitutor.EMPTY, false, false, myElement):\n               JavaResolveResult.EMPTY;\n      }","commit_id":"1abf8fe0a4f75640f90ac0f83bfd2204801c2669","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ReferenceProvidersRegistry() {\n    // Temp scopes declarations\n    myTempScopes.add(PsiIdentifier.class);\n\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagValueManipulator());\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n    myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER, new JspxIncludePathReferenceProvider());\n    myReferenceTypeToProviderMap.put(DYNAMIC_PATH_REFERENCES_PROVIDER, new JspxDynamicPathReferenceProvider());\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, new PropertiesReferenceProvider());\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"class\", \"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new TextFilter(\"useBean\"),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ), 2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    RegisterInPsi.referenceProviders(this);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"extends\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.attribute\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"attribute\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"variable-class\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.variable\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"variable\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"import\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ),\n      new JspImportListReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"errorPage\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"file\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"include\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.include\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"value\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"url\")\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"url\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new OrFilter(\n                new TextFilter(\"import\"),\n                new TextFilter(\"redirect\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"key\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new NamespaceFilter(XmlUtil.JSTL_FORMAT_URIS),\n              new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)\n            ),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"altKey\",\"titleKey\",\"pageKey\",\"srcKey\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n            new ClassFilter(XmlTag.class)\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"page\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new OrFilter(\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.JSP_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"include\",\"forward\")\n              )\n            ),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"rewrite\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"tagdir\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"uri\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ),\n      new JspUriReferenceProvider()\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      classListProvider\n    );\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS), XmlToken.class,\n                              classListProvider);\n\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"function-class\", \"tag-class\", \"tei-class\", \"variable-class\", \"type\", \"path\",\n        \"function-signature\", \"name\", \"name-given\"\n      },\n      new NamespaceFilter(MetaRegistry.TAGLIB_URIS),\n      true,\n      new TaglibReferenceProvider( getProviderByType(CLASS_REFERENCE_PROVIDER) )\n    );\n\n    final NamespaceFilter jsfNsFilter = new NamespaceFilter(XmlUtil.JSF_URIS);\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"render-kit-class\",\"renderer-class\",\"managed-bean-class\",\"attribute-class\",\"component-class\",\n        \"converter-for-class\", \"converter-class\", \"key-class\", \"value-class\",\n        \"referenced-bean-class\", \"validator-class\", \"application-factory\", \"faces-context-factory\",\n        \"render-kit-factory\", \"lifecycle-factory\", \"view-handler\", \"variable-resolver\", \"phase-listener\",\n        \"property-resolver\", \"state-manager\", \"action-listener\", \"navigation-handler\"\n      },\n      jsfNsFilter,\n      true,\n      getProviderByType(CLASS_REFERENCE_PROVIDER) \n    );\n\n    final JSFReferencesProvider jsfProvider = new JSFReferencesProvider();\n    \n    registerXmlTagReferenceProvider(\n      new String[] { \"property-name\", \"property-class\" },\n      jsfNsFilter,\n      true,\n      jsfProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\n        \"src\", \"href\", \"action\", \"background\", \"width\", \"height\", \"type\", \"bgcolor\", \"color\", \"vlink\", \"link\", \"alink\", \"text\", \"name\"\n      },\n      provider.getFilter(),\n      false,\n      provider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"ref\",\"type\",\"base\",\"name\",\"substitutionGroup\",\"memberTypes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(MetaRegistry.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:type\"},\n      null,\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:noNamespaceSchemaLocation\"},\n      null,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"schemaLocation\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(MetaRegistry.SCHEMA_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"import\",\"include\")\n            )\n          ), 2\n        )\n      ),\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      uriProvider.getNamespaceAttributeFilter(),\n      uriProvider\n    );\n\n    final JspReferencesProvider jspReferencesProvider = new JspReferencesProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"fragment\",\"name\",\"property\",\"id\",\"name-given\",\"dynamic-attributes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(\n              new String[] {\n                XmlUtil.JSP_URI,\n                XmlUtil.STRUTS_BEAN_URI,\n                XmlUtil.STRUTS_LOGIC_URI\n              }\n            )\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"var\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS)\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"scope\"},\n      null,\n      jspReferencesProvider\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new TextFilter(\"property\"),\n              new NamespaceFilter(XmlUtil.SPRING_CORE_URI)\n            )\n          ), 2\n        )\n      ),\n      new SpringReferencesProvider()\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.HIBERNATE_URIS),\n              new TextFilter(new String[] { \"property\",\"list\",\"map\",\"set\", \"array\", \"bag\", \"idbag\", \"primitive-array\", \"many-to-one\", \"one-to-one\"} )\n            )\n          ), 2\n        )\n      ),\n      new HibernateReferencesProvider()\n    );\n  }","id":103141,"modified_method":"private ReferenceProvidersRegistry() {\n    // Temp scopes declarations\n    myTempScopes.add(PsiIdentifier.class);\n\n    // Manipulators mapping\n    registerManipulator(XmlAttributeValue.class, new XmlAttributeValueManipulator());\n    registerManipulator(PsiPlainTextFile.class, new PlainFileManipulator());\n    registerManipulator(XmlToken.class, new XmlTokenManipulator());\n    registerManipulator(PsiLiteralExpression.class, new StringLiteralManipulator());\n    registerManipulator(XmlTag.class, new XmlTagValueManipulator());\n    // Binding declarations\n\n    myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER, new JavaClassReferenceProvider());\n    myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER, new JspxIncludePathReferenceProvider());\n    myReferenceTypeToProviderMap.put(DYNAMIC_PATH_REFERENCES_PROVIDER, new JspxDynamicPathReferenceProvider());\n    myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER, new PropertiesReferenceProvider());\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"class\", \"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new TextFilter(\"useBean\"),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ), 2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    RegisterInPsi.referenceProviders(this);\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"extends\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), getProviderByType(CLASS_REFERENCE_PROVIDER)\n    );\n\n    final CustomizableReferenceProvider classReferenceProvider = (CustomizableReferenceProvider)getProviderByType(CLASS_REFERENCE_PROVIDER);\n    final CustomizingReferenceProvider qualifiedClassReferenceProvider = new CustomizingReferenceProvider(classReferenceProvider);\n    qualifiedClassReferenceProvider.addCustomization(JavaClassReferenceProvider.RESOLVE_QUALIFIED_CLASS_NAME, true);\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"type\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.attribute\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"attribute\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"variable-class\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.variable\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"variable\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ), \n      qualifiedClassReferenceProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"import\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ),\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              )\n            ),\n            new NamespaceFilter(XmlUtil.JSP_URI)\n          ),\n          2\n        )\n      ),\n      new JspImportListReferenceProvider()\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"errorPage\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"page\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.page\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"file\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new OrFilter(\n              new AndFilter(\n                new ClassFilter(JspDirective.class),\n                new TextFilter(\"include\")\n              ),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"directive.include\")\n              ))\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"value\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"url\")\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"url\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new OrFilter(\n                new TextFilter(\"import\"),\n                new TextFilter(\"redirect\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"key\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new OrFilter(\n              new NamespaceFilter(XmlUtil.JSTL_FORMAT_URIS),\n              new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)\n            ),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"altKey\",\"titleKey\",\"pageKey\",\"srcKey\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n            new ClassFilter(XmlTag.class)\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"code\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.SPRING_URI),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"message\", \"theme\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PROPERTIES_FILE_KEY_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"page\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new OrFilter(\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.JSP_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"include\",\"forward\")\n              )\n            ),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),\n              new AndFilter(\n                new ClassFilter(XmlTag.class),\n                new TextFilter(\"rewrite\")\n              )\n            )\n          ), 2\n        )\n      ), getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[]{\"tagdir\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ), getProviderByType(PATH_REFERENCES_PROVIDER)\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] { \"uri\" },\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(XmlUtil.JSP_URI),\n            new AndFilter(\n              new ClassFilter(JspDirective.class),\n              new TextFilter(\"taglib\")\n            )\n          ), 2\n        )\n      ),\n      new JspUriReferenceProvider()\n    );\n\n    final JavaClassListReferenceProvider classListProvider = new JavaClassListReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI), 2)),\n      classListProvider\n    );\n\n    registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS), XmlToken.class,\n                              classListProvider);\n\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"function-class\", \"tag-class\", \"tei-class\", \"variable-class\", \"type\", \"path\",\n        \"function-signature\", \"name\", \"name-given\"\n      },\n      new NamespaceFilter(MetaRegistry.TAGLIB_URIS),\n      true,\n      new TaglibReferenceProvider( getProviderByType(CLASS_REFERENCE_PROVIDER) )\n    );\n\n    final NamespaceFilter jsfNsFilter = new NamespaceFilter(XmlUtil.JSF_URIS);\n    registerXmlTagReferenceProvider(\n      new String[] {\n        \"render-kit-class\",\"renderer-class\",\"managed-bean-class\",\"attribute-class\",\"component-class\",\n        \"converter-for-class\", \"converter-class\", \"key-class\", \"value-class\",\n        \"referenced-bean-class\", \"validator-class\", \"application-factory\", \"faces-context-factory\",\n        \"render-kit-factory\", \"lifecycle-factory\", \"view-handler\", \"variable-resolver\", \"phase-listener\",\n        \"property-resolver\", \"state-manager\", \"action-listener\", \"navigation-handler\"\n      },\n      jsfNsFilter,\n      true,\n      getProviderByType(CLASS_REFERENCE_PROVIDER) \n    );\n\n    final JSFReferencesProvider jsfProvider = new JSFReferencesProvider();\n    \n    registerXmlTagReferenceProvider(\n      new String[] { \"property-name\", \"property-class\" },\n      jsfNsFilter,\n      true,\n      jsfProvider\n    );\n\n    final DtdReferencesProvider dtdReferencesProvider = new DtdReferencesProvider();\n    //registerReferenceProvider(null, XmlEntityDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlEntityRef.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlDoctype.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlAttlistDecl.class,dtdReferencesProvider);\n    registerReferenceProvider(null, XmlElementContentSpec.class,dtdReferencesProvider);\n\n    URIReferenceProvider uriProvider = new URIReferenceProvider();\n\n    registerTypeWithProvider(URI_PROVIDER,uriProvider);\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      dtdReferencesProvider.getSystemReferenceFilter(),\n      uriProvider\n    );\n\n    //registerReferenceProvider(PsiPlainTextFile.class, new JavaClassListReferenceProvider());\n\n    HtmlReferenceProvider provider = new HtmlReferenceProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\n        \"src\", \"href\", \"action\", \"background\", \"width\", \"height\", \"type\", \"bgcolor\", \"color\", \"vlink\", \"link\", \"alink\", \"text\", \"name\"\n      },\n      provider.getFilter(),\n      false,\n      provider\n    );\n\n    final PsiReferenceProvider filePathReferenceProvider = new FilePathReferenceProvider();\n    registerReferenceProvider(PsiLiteralExpression.class, filePathReferenceProvider);\n\n    final SchemaReferencesProvider schemaReferencesProvider = new SchemaReferencesProvider();\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"ref\",\"type\",\"base\",\"name\",\"substitutionGroup\",\"memberTypes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new NamespaceFilter(MetaRegistry.SCHEMA_URIS), 2\n        )\n      ),\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:type\"},\n      null,\n      schemaReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"xsi:noNamespaceSchemaLocation\"},\n      null,\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"schemaLocation\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new NamespaceFilter(MetaRegistry.SCHEMA_URIS),\n            new AndFilter(\n              new ClassFilter(XmlTag.class),\n              new TextFilter(\"import\",\"include\")\n            )\n          ), 2\n        )\n      ),\n      uriProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      null,\n      uriProvider.getNamespaceAttributeFilter(),\n      uriProvider\n    );\n\n    final JspReferencesProvider jspReferencesProvider = new JspReferencesProvider();\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"fragment\",\"name\",\"property\",\"id\",\"name-given\",\"dynamic-attributes\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(\n              new String[] {\n                XmlUtil.JSP_URI,\n                XmlUtil.STRUTS_BEAN_URI,\n                XmlUtil.STRUTS_LOGIC_URI\n              }\n            )\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"var\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new NamespaceFilter(XmlUtil.JSTL_CORE_URIS)\n          ), 2\n        )\n      ),\n      jspReferencesProvider\n    );\n\n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"scope\"},\n      null,\n      jspReferencesProvider\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new TextFilter(\"property\"),\n              new NamespaceFilter(XmlUtil.SPRING_CORE_URI)\n            )\n          ), 2\n        )\n      ),\n      new SpringReferencesProvider()\n    );\n    \n    registerXmlAttributeValueReferenceProvider(\n      new String[] {\"name\"},\n      new ScopeFilter(\n        new ParentElementFilter(\n          new AndFilter(\n            new ClassFilter(XmlTag.class),\n            new AndFilter(\n              new NamespaceFilter(XmlUtil.HIBERNATE_URIS),\n              new TextFilter(new String[] { \"property\",\"list\",\"map\",\"set\", \"array\", \"bag\", \"idbag\", \"primitive-array\", \"many-to-one\", \"one-to-one\"} )\n            )\n          ), 2\n        )\n      ),\n      new HibernateReferencesProvider()\n    );\n  }","commit_id":"1abf8fe0a4f75640f90ac0f83bfd2204801c2669","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Callback for the Subscribe to channels button, it attempts to subscribe\n     * to the channels containing the Packages.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward subscribeToChannels(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        RequestContext requestContext = new RequestContext(request);\n        Long sid = requestContext.getRequiredParam(\"sid\");\n        Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                getDecl(sid));\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n        \n        try {\n            syncToVictim(requestContext, sid, pkgIdCombos, \n                    ProfileManager.OPTION_SUBSCRIBE);\n\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"newprofile\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"newprofile\"),\n                    params);\n        }\n    }","id":103142,"modified_method":"/**\n     * Callback for the Subscribe to channels button, it attempts to subscribe\n     * to the channels containing the Packages.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward subscribeToChannels(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        RequestContext requestContext = new RequestContext(request);\n        Long sid = requestContext.getRequiredParam(\"sid\");\n        Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request,\n                getDecl(sid));\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n        \n        syncToVictim(requestContext, sid, pkgIdCombos,\n                ProfileManager.OPTION_SUBSCRIBE);\n        return getStrutsDelegate().forwardParams(\n                mapping.findForward(\"showprofile\"), params);\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Callback for the Remove packages button, it removes the missing packages\n     * and proceeds with the package sync.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward removePackagesFromSync(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        RequestContext rctx = new RequestContext(request);\n        Long sid = new RequestContext(request).getRequiredParam(\"sid\");\n        //Long prid = RhnHelper.getParamAsLong(request, \"prid\", true);\n        Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                getDecl(sid));\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n     \n        try {\n            syncToVictim(rctx, sid, pkgIdCombos, ProfileManager.OPTION_REMOVE);\n            \n            return getStrutsDelegate().forwardParams(mapping.findForward(\"newprofile\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"newprofile\"),\n                    params);\n        }\n    }","id":103143,"modified_method":"/**\n     * Callback for the Remove packages button, it removes the missing packages\n     * and proceeds with the package sync.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward removePackagesFromSync(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        RequestContext context = new RequestContext(request);\n        Long sid = context.getRequiredParam(\"sid\");\n        Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                getDecl(sid));\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n\n        syncToVictim(context, sid, pkgIdCombos, ProfileManager.OPTION_REMOVE);\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"showprofile\"),\n                    params);        \n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Callback for the Select New Package Profile button, basically\n     * forwards to the main Package -> Profile page allowing the user\n     * to select a new package profile to compare against.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward selectNewPackageProfile(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        Long sid = new RequestContext(request).getRequiredParam(\"sid\");\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"newprofile\"),\n                params);\n    }","id":103144,"modified_method":"/**\n     * Callback for the Select New Package Profile button, basically\n     * forwards to the main Package -> Profile page allowing the user\n     * to select a new package profile to compare against.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return ActionForward\n     */\n    public ActionForward selectNewPackageProfile(ActionMapping mapping,\n            ActionForm formIn,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n        Long sid = new RequestContext(request).getRequiredParam(\"sid\");\n        Map params = new HashMap();\n        params.put(\"sid\", sid);\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"showprofile\"),\n                params);\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private PackageAction syncToVictim(RequestContext requestContext, Long sid,\n            Set pkgIdCombos, String option) {\n        \n        PackageAction pa = null;\n        Long time = requestContext.getParamAsLong(\"date\");\n        Date earliest;\n        if (time == null) {\n            earliest = new Date();\n        }\n        else {\n            earliest = new Date(time.longValue());\n        }\n        \n        if (isProfileSync(requestContext)) {\n            Long prid = requestContext.getRequiredParam(\"prid\");\n            \n            pa = ProfileManager.syncToProfile(requestContext.getCurrentUser(), sid,\n                    prid, pkgIdCombos, option, earliest);\n            \n            if (pa == null) {\n                createMessage(requestContext.getRequest(), \"message.nopackagestosync\");\n                return null;\n            }\n            \n            List args = new ArrayList();\n            args.add(sid.toString());\n            args.add(pa.getId().toString());\n            args.add(requestContext.lookupAndBindServer().getName());\n            args.add(ProfileManager.lookupByIdAndOrg(prid,\n                    requestContext.getCurrentUser().getOrg()).getName());\n            \n            createMessage(requestContext.getRequest(), \"message.syncpackages\", args);\n        }\n        else if (isSystemSync(requestContext)) {\n            Long sid1 = requestContext.getRequiredParam(\"sid_1\");\n            pa = ProfileManager.syncToSystem(requestContext.getCurrentUser(), sid,\n                    sid1, pkgIdCombos, option, earliest);\n            \n            if (pa == null) {\n                createMessage(requestContext.getRequest(), \"message.nopackagestosync\");\n                return null;\n            }\n            \n            List args = new ArrayList();\n            args.add(sid.toString());\n            args.add(pa.getId().toString());\n            args.add(requestContext.lookupAndBindServer().getName());\n            args.add(SystemManager.lookupByIdAndUser(sid1,\n                    requestContext.getCurrentUser()).getName());\n            \n            createMessage(requestContext.getRequest(), \"message.syncpackages\", args);\n        }\n        \n        addHardwareMessage(pa, requestContext);\n        \n        return pa;\n    }","id":103145,"modified_method":"private PackageAction syncToVictim(RequestContext requestContext, Long sid,\n            Set pkgIdCombos, String option) {\n        \n        PackageAction pa = null;\n        Date time = new Date(requestContext.getParamAsLong(\"time\"));\n        \n        if (isProfileSync(requestContext)) {\n            Long prid = requestContext.getRequiredParam(\"prid\");\n            \n            pa = ProfileManager.syncToProfile(requestContext.getCurrentUser(), sid,\n                    prid, pkgIdCombos, option, time);\n            \n            if (pa == null) {\n                createMessage(requestContext.getRequest(), \"message.nopackagestosync\");\n                return null;\n            }\n            \n            List args = new ArrayList();\n            args.add(sid.toString());\n            args.add(pa.getId().toString());\n            args.add(requestContext.lookupAndBindServer().getName());\n            args.add(ProfileManager.lookupByIdAndOrg(prid,\n                    requestContext.getCurrentUser().getOrg()).getName());\n            \n            createMessage(requestContext.getRequest(), \"message.syncpackages\", args);\n        }\n        else if (isSystemSync(requestContext)) {\n            Long sid1 = requestContext.getRequiredParam(\"sid_1\");\n            pa = ProfileManager.syncToSystem(requestContext.getCurrentUser(), sid,\n                    sid1, pkgIdCombos, option, time);\n            \n            if (pa == null) {\n                createMessage(requestContext.getRequest(), \"message.nopackagestosync\");\n                return null;\n            }\n            \n            List args = new ArrayList();\n            args.add(sid.toString());\n            args.add(pa.getId().toString());\n            args.add(requestContext.lookupAndBindServer().getName());\n            args.add(SystemManager.lookupByIdAndUser(sid1,\n                    requestContext.getCurrentUser()).getName());\n            \n            createMessage(requestContext.getRequest(), \"message.syncpackages\", args);\n        }\n        \n        addHardwareMessage(pa, requestContext);\n        \n        return pa;\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/** {@inheritDoc} */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        processRequestAttributes(requestContext);\n\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        String type = requestContext.getParam(\"sync\", true);\n        if (\"system\".equals(type)) {\n            Long sid1 = requestContext.getRequiredParam(RequestContext.SID1);\n            request.setAttribute(ListTagHelper.PARENT_URL, \n                    request.getRequestURI() + \"?sid=\" + sid + \"&sid_1=\" + sid1);  \n        }\n        else if (\"profile\".equals(type)) {\n            Long prid = requestContext.getRequiredParam(RequestContext.PRID);\n            request.setAttribute(ListTagHelper.PARENT_URL, \n                    request.getRequestURI() + \"?sid=\" + sid + \"&prid=\" + prid);  \n        }\n\n        DataResult dr = getDataResult(request);\n        request.setAttribute(DATA_SET, dr);        \n\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                request.getParameterMap());\n    }","id":103146,"modified_method":"/** {@inheritDoc} */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long sid1 = requestContext.getParamAsLong(RequestContext.SID1);\n        Long prid = requestContext.getParamAsLong(RequestContext.PRID);\n        String sync = requestContext.getParam(\"sync\", Boolean.FALSE);\n        Long time = requestContext.getRequiredParam(\"time\");\n\n        ListHelper helper = new ListHelper(this, request);\n        helper.execute();\n\n        if (request.getParameter(RequestContext.DISPATCH) != null) {\n            Map param = new HashMap();\n            param.put(RequestContext.SID, sid);\n            param.put(RequestContext.SID1, sid1);\n            param.put(RequestContext.PRID, prid);\n            param.put(RequestContext.DISPATCH,\n                    request.getParameter(RequestContext.DISPATCH));\n            param.put(\"sync\", sync);\n            param.put(\"time\", time);\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"submit\"),\n                    param);\n        }\n        requestContext.lookupAndBindServer();\n\n        requestContext.copyParamToAttributes(\"time\");\n        return mapping.findForward(\"default\");\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"protected String getDecl(Long sid) {\n        return DECL_ACTION.getDecl(sid);\n    }","id":103147,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    protected String getDecl(Long sid) {\n        return DECL_ACTION.getDecl(sid);\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/** {@inheritDoc} */\n    public ActionForward scheduleSync(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        User user = requestContext.getCurrentUser();\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long prid = requestContext.getRequiredParam(RequestContext.PRID);\n        \n        //get the earliest time this action should be performed from the form\n        DynaActionForm form = (DynaActionForm) formIn;\n        Date earliest = getStrutsDelegate().readDatePicker(form, \"date\",\n                DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Calling syncToProfile\");\n        }\n        \n        try {\n            Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                    getDecl(sid));\n\n            PackageAction pa = ProfileManager.syncToProfile(user, sid, prid, \n                    pkgIdCombos, null, earliest);\n            \n            if (pa != null) {\n               \n                addHardwareMessage(pa, requestContext);\n                \n                // sid, actionid, servername, profilename\n                List args = new ArrayList();\n                args.add(sid.toString());\n                args.add(pa.getId().toString());\n                args.add(requestContext.lookupAndBindServer().getName());\n                args.add(ProfileManager.lookupByIdAndOrg(prid, user.getOrg()).getName());\n                \n                createMessage(request, \"message.syncpackages\", args);\n            }\n            else {\n                createMessage(request, \"message.nopackagestosync\");\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Returned from syncToProfile\");\n            }\n            \n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.PRID, prid);\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"success\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.PRID, prid);\n            params.put(\"sync\", \"profile\");\n            params.put(\"date\", new Long(earliest.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"missing\"),\n                    params);\n        }\n    }","id":103148,"modified_method":"/** {@inheritDoc} */\n    public ActionForward scheduleSync(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        User user = requestContext.getCurrentUser();\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long prid = requestContext.getRequiredParam(RequestContext.PRID);\n        Date time = new Date(requestContext.getRequiredParam(\"time\"));\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Calling syncToProfile\");\n        }\n        \n        try {\n            Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                    getDecl(sid));\n\n            PackageAction pa = ProfileManager.syncToProfile(user, sid, prid, \n                    pkgIdCombos, null, time);\n            \n            if (pa != null) {\n               \n                addHardwareMessage(pa, requestContext);\n                \n                // sid, actionid, servername, profilename\n                List args = new ArrayList();\n                args.add(sid.toString());\n                args.add(pa.getId().toString());\n                args.add(requestContext.lookupAndBindServer().getName());\n                args.add(ProfileManager.lookupByIdAndOrg(prid, user.getOrg()).getName());\n                \n                createMessage(request, \"message.syncpackages\", args);\n            }\n            else {\n                createMessage(request, \"message.nopackagestosync\");\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Returned from syncToProfile\");\n            }\n            \n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.PRID, prid);\n            params.put(\"time\", new Long(time.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"success\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.PRID, prid);\n            params.put(\"sync\", \"profile\");\n            params.put(\"time\", new Long(time.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"missing\"),\n                    params);\n        }\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/** {@inheritDoc} */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n\n        Long prid = requestContext.getRequiredParam(RequestContext.PRID);\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        \n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Profile profile = ProfileManager.lookupByIdAndOrg(prid, user.getOrg());\n\n        DataResult itemsToBeSynced = getDataResult(request, user);\n\n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        DatePicker picker = getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n\n        request.setAttribute(\"date\", picker); \n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"profilename\", profile.getName());\n        requestContext.copyParamToAttributes(RequestContext.SID);\n        requestContext.copyParamToAttributes(RequestContext.PRID);\n        request.setAttribute(ListTagHelper.PARENT_URL, \n                request.getRequestURI() + \"?sid=\" + sid + \"&prid=\" + prid);  \n        request.setAttribute(DATA_SET, itemsToBeSynced);        \n        \n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                                       request.getParameterMap());\n    }","id":103149,"modified_method":"/** {@inheritDoc} */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n\n        Long prid = requestContext.getRequiredParam(RequestContext.PRID);\n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        \n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Profile profile = ProfileManager.lookupByIdAndOrg(prid, user.getOrg());\n\n        ListHelper helper = new ListHelper(this, request);\n        helper.execute();\n\n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (requestContext.wasDispatched(\"schedulesync.jsp.schedulesync\")) {\n            Date time = getStrutsDelegate().readDatePicker(dynaForm, \"date\",\n                    DatePicker.YEAR_RANGE_POSITIVE);\n            Map syncParam = new HashMap();\n            syncParam.put(RequestContext.SID, sid);\n            syncParam.put(RequestContext.PRID, prid);\n            syncParam.put(RequestContext.DISPATCH,\n                    request.getParameter(RequestContext.DISPATCH));\n            syncParam.put(\"time\", time.getTime());\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"sync\"),\n                    syncParam);\n        }\n\n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"profilename\", profile.getName());\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                                       request.getParameterMap());\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Schedules the synchronization of packages.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return null because we are sending a redirect\n     */\n    public ActionForward scheduleSync(ActionMapping mapping,\n                                   ActionForm formIn,\n                                   HttpServletRequest request,\n                                   HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        User user = requestContext.getCurrentUser();\n        Long sid = requestContext.getRequiredParam(\"sid\");\n        Long sid1 = requestContext.getRequiredParam(\"sid_1\");\n        \n        //get the earliest time this action should be performed from the form\n        DynaActionForm form = (DynaActionForm) formIn;\n        Date earliest = getStrutsDelegate().readDatePicker(form, \"date\",\n                DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Calling syncToSystem\");\n        }\n        \n        try {\n            Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                    getDecl(sid));\n\n            PackageAction pa = ProfileManager.syncToSystem(user, sid, sid1, \n                    pkgIdCombos, null, earliest);\n            \n            if (pa != null) {\n                addHardwareMessage(pa, requestContext);\n            \n                // sid, actionid, servername, profilename\n                List args = new ArrayList();\n                args.add(sid.toString());\n                args.add(pa.getId().toString());\n                args.add(requestContext.lookupAndBindServer().getName());\n                args.add(SystemManager.lookupByIdAndUser(sid1, user).getName());\n            \n                createMessage(request, \"message.syncpackages\", args);\n            }\n            else {\n                createMessage(request, \"message.nopackagestosync\");\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Returned from syncToProfile\");\n            }\n            \n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.SID1, sid1);\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"success\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.SID1, sid1);\n            params.put(\"sync\", \"system\");\n            params.put(\"date\", new Long(earliest.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"missing\"),\n                    params);\n        }\n    }","id":103150,"modified_method":"/**\n     * Schedules the synchronization of packages.\n     * @param mapping ActionMapping\n     * @param formIn ActionForm\n     * @param request HttpServletRequest\n     * @param response HttpServletResponse\n     * @return null because we are sending a redirect\n     */\n    public ActionForward scheduleSync(ActionMapping mapping,\n                                   ActionForm formIn,\n                                   HttpServletRequest request,\n                                   HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        User user = requestContext.getCurrentUser();\n        Long sid = requestContext.getRequiredParam(\"sid\");\n        Long sid1 = requestContext.getRequiredParam(\"sid_1\");\n        Date time = new Date(requestContext.getRequiredParam(\"time\"));\n        \n        if (log.isDebugEnabled()) {\n            log.debug(\"Calling syncToSystem\");\n        }\n        \n        try {\n            Set <String> pkgIdCombos = SessionSetHelper.lookupAndBind(request, \n                    getDecl(sid));\n\n            PackageAction pa = ProfileManager.syncToSystem(user, sid, sid1, \n                    pkgIdCombos, null, time);\n            \n            if (pa != null) {\n\n                addHardwareMessage(pa, requestContext);\n            \n                // sid, actionid, servername, profilename\n                List args = new ArrayList();\n                args.add(sid.toString());\n                args.add(pa.getId().toString());\n                args.add(requestContext.lookupAndBindServer().getName());\n                args.add(SystemManager.lookupByIdAndUser(sid1, user).getName());\n            \n                createMessage(request, \"message.syncpackages\", args);\n            }\n            else {\n                createMessage(request, \"message.nopackagestosync\");\n            }\n            \n            if (log.isDebugEnabled()) {\n                log.debug(\"Returned from syncToProfile\");\n            }\n            \n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.SID1, sid1);\n            params.put(\"time\", new Long(time.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"success\"),\n                    params);\n        }\n        catch (MissingPackagesException mpe) {\n            Map params = new HashMap();\n            params.put(RequestContext.SID, sid);\n            params.put(RequestContext.SID1, sid1);\n            params.put(\"sync\", \"system\");\n            params.put(\"time\", new Long(time.getTime()));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"missing\"),\n                    params);\n        }\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/** {@inheritDoc} */\n    public final ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        \n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long sid1 = requestContext.getRequiredParam(RequestContext.SID1);\n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Server server1 = SystemManager.lookupByIdAndUser(sid1, user);\n        \n        ListHelper helper = new ListHelper(this, request);\n        helper.execute();\n\n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        DatePicker picker = getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (requestContext.wasDispatched(\"schedulesync.jsp.schedulesync\")) {\n            Map syncParam = new HashMap();\n            syncParam.put(RequestContext.SID, sid);\n            syncParam.put(RequestContext.SID1, sid1);\n            syncParam.put(RequestContext.DISPATCH,\n                    request.getParameter(RequestContext.DISPATCH));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"sync\"),\n                    syncParam);\n        }\n\n        request.setAttribute(\"date\", picker);\n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"system1\", server1);\n\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                request.getParameterMap());\n    }","id":103151,"modified_method":"/** {@inheritDoc} */\n    public final ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        \n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long sid1 = requestContext.getRequiredParam(RequestContext.SID1);\n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Server server1 = SystemManager.lookupByIdAndUser(sid1, user);\n        \n        ListHelper helper = new ListHelper(this, request);\n        helper.execute();\n\n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (requestContext.wasDispatched(\"schedulesync.jsp.schedulesync\")) {\n            Date time = getStrutsDelegate().readDatePicker(dynaForm, \"date\",\n                    DatePicker.YEAR_RANGE_POSITIVE);\n            Map syncParam = new HashMap();\n            syncParam.put(RequestContext.SID, sid);\n            syncParam.put(RequestContext.SID1, sid1);\n            syncParam.put(RequestContext.DISPATCH,\n                    request.getParameter(RequestContext.DISPATCH));\n            syncParam.put(\"time\", time.getTime());\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"sync\"),\n                    syncParam);\n        }\n\n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"system1\", server1);\n\n        return mapping.findForward(\"default\");\n    }","commit_id":"84d12a3dd96d67b38e8b30465673a404fa0e33cc","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/** {@inheritDoc} */\n    public final ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        \n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long sid1 = requestContext.getRequiredParam(RequestContext.SID1);\n        \n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Server server1 = SystemManager.lookupByIdAndUser(sid1, user);\n        \n        DataResult itemsToBeSynced = getDataResult(request, user);\n        \n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        DatePicker picker = getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n       \n        request.setAttribute(\"date\", picker);\n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"system1\", server1);\n        requestContext.copyParamToAttributes(RequestContext.SID);\n        requestContext.copyParamToAttributes(RequestContext.SID1);\n        request.setAttribute(ListTagHelper.PARENT_URL, \n                request.getRequestURI() + \"?sid=\" + sid + \"&sid_1=\" + sid1);  \n        request.setAttribute(DATA_SET, itemsToBeSynced);\n            \n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                                      request.getParameterMap());\n    }","id":103152,"modified_method":"/** {@inheritDoc} */\n    public final ActionForward execute(ActionMapping mapping,\n                                 ActionForm formIn,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response) {\n        \n        RequestContext requestContext = new RequestContext(request);\n        \n        Long sid = requestContext.getRequiredParam(RequestContext.SID);\n        Long sid1 = requestContext.getRequiredParam(RequestContext.SID1);\n        User user = requestContext.getLoggedInUser();\n        Server server = SystemManager.lookupByIdAndUser(sid, user);\n        Server server1 = SystemManager.lookupByIdAndUser(sid1, user);\n        \n        ListHelper helper = new ListHelper(this, request);\n        helper.execute();\n\n        DynaActionForm dynaForm = (DynaActionForm) formIn;\n        DatePicker picker = getStrutsDelegate().prepopulateDatePicker(request, dynaForm,\n                \"date\", DatePicker.YEAR_RANGE_POSITIVE);\n\n        if (requestContext.wasDispatched(\"schedulesync.jsp.schedulesync\")) {\n            Map syncParam = new HashMap();\n            syncParam.put(RequestContext.SID, sid);\n            syncParam.put(RequestContext.SID1, sid1);\n            syncParam.put(RequestContext.DISPATCH,\n                    request.getParameter(RequestContext.DISPATCH));\n            return getStrutsDelegate().forwardParams(mapping.findForward(\"sync\"),\n                    syncParam);\n        }\n\n        request.setAttribute(\"date\", picker);\n        request.setAttribute(\"system\", server);\n        request.setAttribute(\"system1\", server1);\n\n        return getStrutsDelegate().forwardParams(mapping.findForward(\"default\"),\n                request.getParameterMap());\n    }","commit_id":"ec6c07075589500acb45d4192e7f50352ddc2377","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private void showAnnotationMethodsInfo(final Project project,\n                                         final Editor editor,\n                                         PsiAnnotation annotation,\n                                         PsiMethod highlightedMethod) {\n    final PsiElement resolved = annotation.getNameReferenceElement().resolve();\n    if (!(resolved instanceof PsiClass) || !((PsiClass)resolved).isAnnotationType()) return;\n\n    final PsiMethod[] methods = ((PsiClass)resolved).getMethods();\n    if (methods.length == 0) return;\n\n    final ParameterInfoComponent component = new ParameterInfoComponent(methods, editor);\n    component.update();\n    component.setHighlightedMethod(highlightedMethod);\n\n    final PsiAnnotationParameterList parameterList = annotation.getParameterList();\n    showParameterListHint(component, editor, parameterList, project, ParameterInfoController.DEFAULT_PARAMETER_CLOSE_CHARS);\n  }","id":103153,"modified_method":"private void showAnnotationMethodsInfo(final Project project,\n                                         final Editor editor,\n                                         PsiAnnotation annotation,\n                                         PsiMethod highlightedMethod,\n                                         final PsiClass annotationInterface) {\n    final PsiMethod[] methods = annotationInterface.getMethods();\n    if (methods.length == 0) return;\n\n    final ParameterInfoComponent component = new ParameterInfoComponent(methods, editor);\n    component.update();\n    component.setHighlightedMethod(highlightedMethod);\n\n    final PsiAnnotationParameterList parameterList = annotation.getParameterList();\n    showParameterListHint(component, editor, parameterList, project, ParameterInfoController.DEFAULT_PARAMETER_CLOSE_CHARS);\n  }","commit_id":"ae82bd533f45e3ee99d57cb45174ef82867dfd73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void invoke(final Project project, final Editor editor, PsiFile file, int lbraceOffset, PsiMethod highlightedMethod) {\n    ApplicationManager.getApplication().assertIsDispatchThread();\n\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    Lookup lookup = LookupManager.getInstance(project).getActiveLookup();\n    if (lookup != null) {\n      LookupItem item = lookup.getCurrentItem();\n      if (item != null) {\n        if (item.getObject() instanceof PsiMethod) {\n          showLookupMethodInfo(project, item, editor);\n        }\n        else if (item.getObject() instanceof XmlElementDescriptor) {\n          showEditorHint(new Object[]{item.getObject()}, editor, project);\n        }\n      }\n      return;\n    }\n\n    int offset = editor.getCaretModel().getOffset();\n    PsiExpressionList list = ParameterInfoController.findArgumentList(file, offset, lbraceOffset);\n    if (list != null) {\n      showMethodInfo(project, editor, list, highlightedMethod);\n    }\n\n    if (file.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {\n      PsiReferenceParameterList refParamList = ParameterInfoController.findParentOfType(file, offset, PsiReferenceParameterList.class);\n      if (refParamList != null) {\n        showTypeParameterInfo(project, editor, refParamList);\n      }\n    }\n\n    PsiAnnotation annotation = ParameterInfoController.findParentOfType(file, offset, PsiAnnotation.class);\n    if (annotation != null) {\n      final PsiElement resolved = annotation.getNameReferenceElement().resolve();\n      if (resolved instanceof PsiClass && ((PsiClass)resolved).isAnnotationType()) {\n        final PsiAnnotationMethod method = ParameterInfoController.findAnnotationMethod(file, offset);\n        showAnnotationMethodsInfo(project, editor, annotation, method);\n      }\n    }\n    final XmlTag tag = ParameterInfoController.findXmlTag(file, offset);\n    if (tag != null) {\n      showTagInfo(project, editor, tag);\n    }\n  }","id":103154,"modified_method":"public void invoke(final Project project, final Editor editor, PsiFile file, int lbraceOffset, PsiMethod highlightedMethod) {\n    ApplicationManager.getApplication().assertIsDispatchThread();\n\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    Lookup lookup = LookupManager.getInstance(project).getActiveLookup();\n    if (lookup != null) {\n      LookupItem item = lookup.getCurrentItem();\n      if (item != null) {\n        if (item.getObject() instanceof PsiMethod) {\n          showLookupMethodInfo(project, item, editor);\n        }\n        else if (item.getObject() instanceof XmlElementDescriptor) {\n          showEditorHint(new Object[]{item.getObject()}, editor, project);\n        }\n      }\n      return;\n    }\n\n    int offset = editor.getCaretModel().getOffset();\n    PsiExpressionList list = ParameterInfoController.findArgumentList(file, offset, lbraceOffset);\n    if (list != null) {\n      showMethodInfo(project, editor, list, highlightedMethod);\n    }\n\n    if (file.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {\n      PsiReferenceParameterList refParamList = ParameterInfoController.findParentOfType(file, offset, PsiReferenceParameterList.class);\n      if (refParamList != null) {\n        showTypeParameterInfo(project, editor, refParamList);\n      }\n    }\n\n    PsiAnnotation annotation = ParameterInfoController.findParentOfType(file, offset, PsiAnnotation.class);\n    if (annotation != null) {\n      final PsiJavaCodeReferenceElement nameReference = annotation.getNameReferenceElement();\n      if (nameReference != null) {\n        final PsiElement resolved = nameReference.resolve();\n        if (resolved instanceof PsiClass) {\n          final PsiClass aClass = (PsiClass)resolved;\n          if (aClass.isAnnotationType()) {\n            final PsiAnnotationMethod method = ParameterInfoController.findAnnotationMethod(file, offset);\n            showAnnotationMethodsInfo(project, editor, annotation, method, aClass);\n          }\n        }\n      }\n    }\n    final XmlTag tag = ParameterInfoController.findXmlTag(file, offset);\n    if (tag != null) {\n      showTagInfo(project, editor, tag);\n    }\n  }","commit_id":"ae82bd533f45e3ee99d57cb45174ef82867dfd73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @return Point in layered pane coordinate system\n   */\n  private Point chooseBestHintPosition(Project project, Editor editor, int line, int col, LightweightHint hint) {\n    HintManager hintManager = HintManager.getInstance();\n    Dimension hintSize = hint.getComponent().getPreferredSize();\n    JComponent editorComponent = editor.getComponent();\n    JLayeredPane layeredPane = editorComponent.getRootPane().getLayeredPane();\n\n    Point p1;\n    Point p2;\n    boolean isLookupShown = LookupManager.getInstance(project).getActiveLookup() != null;\n    if (isLookupShown) {\n      p1 = hintManager.getHintPosition(hint, editor, HintManager.UNDER);\n      p2 = hintManager.getHintPosition(hint, editor, HintManager.ABOVE);\n    }\n    else {\n      LogicalPosition pos = new LogicalPosition(line, col);\n      p1 = hintManager.getHintPosition(hint, editor, pos, HintManager.UNDER);\n      p2 = hintManager.getHintPosition(hint, editor, pos, HintManager.ABOVE);\n    }\n\n    p1.x = Math.min(p1.x, layeredPane.getWidth() - hintSize.width);\n    p1.x = Math.max(p1.x, 0);\n    p2.x = Math.min(p2.x, layeredPane.getWidth() - hintSize.width);\n    p2.x = Math.max(p2.x, 0);\n    boolean p1Ok = p1.y + hintSize.height < layeredPane.getHeight();\n    boolean p2Ok = p2.y >= 0;\n\n    if (isLookupShown) {\n      if (p2Ok) return p2;\n      if (p1Ok) return p1;\n    }\n    else {\n      if (p1Ok) return p1;\n      if (p2Ok) return p2;\n    }\n\n    int underSpace = layeredPane.getHeight() - p1.y;\n    int aboveSpace = p2.y;\n    Point p = aboveSpace > underSpace ? new Point(p2.x, 0) : p1;\n    return p;\n  }","id":103155,"modified_method":"/**\n   * @return Point in layered pane coordinate system\n   */\n  private Point chooseBestHintPosition(Project project, Editor editor, int line, int col, LightweightHint hint) {\n    HintManager hintManager = HintManager.getInstance();\n    Dimension hintSize = hint.getComponent().getPreferredSize();\n    JComponent editorComponent = editor.getComponent();\n    JLayeredPane layeredPane = editorComponent.getRootPane().getLayeredPane();\n\n    Point p1;\n    Point p2;\n    boolean isLookupShown = LookupManager.getInstance(project).getActiveLookup() != null;\n    if (isLookupShown) {\n      p1 = hintManager.getHintPosition(hint, editor, HintManager.UNDER);\n      p2 = hintManager.getHintPosition(hint, editor, HintManager.ABOVE);\n    }\n    else {\n      LogicalPosition pos = new LogicalPosition(line, col);\n      p1 = hintManager.getHintPosition(hint, editor, pos, HintManager.UNDER);\n      p2 = hintManager.getHintPosition(hint, editor, pos, HintManager.ABOVE);\n    }\n\n    p1.x = Math.min(p1.x, layeredPane.getWidth() - hintSize.width);\n    p1.x = Math.max(p1.x, 0);\n    p2.x = Math.min(p2.x, layeredPane.getWidth() - hintSize.width);\n    p2.x = Math.max(p2.x, 0);\n    boolean p1Ok = p1.y + hintSize.height < layeredPane.getHeight();\n    boolean p2Ok = p2.y >= 0;\n\n    if (isLookupShown) {\n      if (p2Ok) return p2;\n      if (p1Ok) return p1;\n    }\n    else {\n      if (p1Ok) return p1;\n      if (p2Ok) return p2;\n    }\n\n    int underSpace = layeredPane.getHeight() - p1.y;\n    int aboveSpace = p2.y;\n    return aboveSpace > underSpace ? new Point(p2.x, 0) : p1;\n  }","commit_id":"ae82bd533f45e3ee99d57cb45174ef82867dfd73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void showEditorHint(Object[] descriptors, final Editor editor, final Project project) {\n    ParameterInfoComponent component = new ParameterInfoComponent(descriptors, editor);\n    component.update();\n\n    final LightweightHint hint = new LightweightHint(component);\n    final HintManager hintManager = HintManager.getInstance();\n    final Point p = chooseBestHintPosition(project, editor, -1, -1, hint);\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      public void run() {\n        if (!editor.getComponent().isShowing()) return;\n        ;\n\n        hintManager.showEditorHint(hint, editor, p,\n                                   HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_LOOKUP_ITEM_CHANGE | HintManager.UPDATE_BY_SCROLLING,\n                                   0, false);\n      }\n    });\n  }","id":103156,"modified_method":"private void showEditorHint(Object[] descriptors, final Editor editor, final Project project) {\n    ParameterInfoComponent component = new ParameterInfoComponent(descriptors, editor);\n    component.update();\n\n    final LightweightHint hint = new LightweightHint(component);\n    final HintManager hintManager = HintManager.getInstance();\n    final Point p = chooseBestHintPosition(project, editor, -1, -1, hint);\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      public void run() {\n        if (!editor.getComponent().isShowing()) return;\n        hintManager.showEditorHint(hint, editor, p,\n                                   HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_LOOKUP_ITEM_CHANGE | HintManager.UPDATE_BY_SCROLLING,\n                                   0, false);\n      }\n    });\n  }","commit_id":"ae82bd533f45e3ee99d57cb45174ef82867dfd73","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiAnnotationMemberValue findAttributeValue(PsiAnnotation annotation, @NonNls String attributeName) {\n    final PsiAnnotationMemberValue value = findDeclaredAttributeValue(annotation, attributeName);\n    if (value != null) return value;\n\n    if (attributeName == null) attributeName = \"value\";\n    PsiElement resolved = annotation.getNameReferenceElement().resolve();\n    if (resolved != null) {\n      PsiMethod[] methods = ((PsiClass)resolved).getMethods();\n      for (PsiMethod method : methods) {\n        if (method instanceof PsiAnnotationMethod && ObjectUtils.equals(method.getName(), attributeName)) {\n          return ((PsiAnnotationMethod)method).getDefaultValue();\n        }\n      }\n    }\n    return null;\n  }","id":103157,"modified_method":"@Nullable\n  public static PsiAnnotationMemberValue findAttributeValue(PsiAnnotation annotation, @NonNls String attributeName) {\n    final PsiAnnotationMemberValue value = findDeclaredAttributeValue(annotation, attributeName);\n    if (value != null) return value;\n\n    if (attributeName == null) attributeName = \"value\";\n    final PsiJavaCodeReferenceElement referenceElement = annotation.getNameReferenceElement();\n    if (referenceElement != null) {\n      PsiElement resolved = referenceElement.resolve();\n      if (resolved != null) {\n        PsiMethod[] methods = ((PsiClass)resolved).getMethods();\n        for (PsiMethod method : methods) {\n          if (method instanceof PsiAnnotationMethod && ObjectUtils.equals(method.getName(), attributeName)) {\n            return ((PsiAnnotationMethod)method).getDefaultValue();\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"c44764e238abb9f60a0dcaee60f5fc0eca4cdf67","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            // TODO remove - let other validation steps pick this up\r\n            if (hasAnnotation(cNode, ImmutableASTTransformation.MY_TYPE)) {\r\n                addError(MY_TYPE_NAME + \" class '\" + cNode.getName() + \"' can't also be \" + ImmutableASTTransformation.MY_TYPE_NAME, parent);\r\n            }\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            if (!hasAnnotation(cNode, TupleConstructorASTTransformation.MY_TYPE)) {\r\n                createConstructor(cNode, false, true, false, false, false, false, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, EqualsAndHashCodeASTTransformation.MY_TYPE)) {\r\n                createHashCode(cNode, false, false, false, excludes, includes);\r\n                createEquals(cNode, false, false, true, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, ToStringASTTransformation.MY_TYPE)) {\r\n                createToString(cNode, false, false, excludes, includes, false);\r\n            }\r\n        }\r\n    }","id":103158,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            // TODO remove - let other validation steps pick this up\r\n            if (hasAnnotation(cNode, ImmutableASTTransformation.MY_TYPE)) {\r\n                addError(MY_TYPE_NAME + \" class '\" + cNode.getName() + \"' can't also be \" + ImmutableASTTransformation.MY_TYPE_NAME, parent);\r\n            }\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            if (!hasAnnotation(cNode, TupleConstructorASTTransformation.MY_TYPE)) {\r\n                createConstructor(cNode, false, true, false, false, false, false, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, EqualsAndHashCodeASTTransformation.MY_TYPE)) {\r\n                createHashCode(cNode, false, false, false, excludes, includes);\r\n                createEquals(cNode, false, false, true, excludes, includes);\r\n            }\r\n            if (!hasAnnotation(cNode, ToStringASTTransformation.MY_TYPE)) {\r\n                createToString(cNode, false, false, excludes, includes, false);\r\n            }\r\n        }\r\n    }","commit_id":"e007accae60aae2a421ce09597bb0e228457e6b9","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean useCanEqual = !memberHasValue(anno, \"useCanEqual\", false);\r\n            if (callSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: callSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = tokenize((String) getMemberValue(canonical, \"excludes\"));\r\n                if (includes == null || includes.isEmpty()) includes = tokenize((String) getMemberValue(canonical, \"includes\"));\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createHashCode(cNode, false, includeFields, callSuper, excludes, includes);\r\n            createEquals(cNode, includeFields, callSuper, useCanEqual, excludes, includes);\r\n        }\r\n    }","id":103159,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean useCanEqual = !memberHasValue(anno, \"useCanEqual\", false);\r\n            if (callSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: callSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = getMemberList(canonical, \"excludes\");\r\n                if (includes == null || includes.isEmpty()) includes = getMemberList(canonical, \"includes\");\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createHashCode(cNode, false, includeFields, callSuper, excludes, includes);\r\n            createEquals(cNode, includeFields, callSuper, useCanEqual, excludes, includes);\r\n        }\r\n    }","commit_id":"e007accae60aae2a421ce09597bb0e228457e6b9","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            boolean ignoreNulls = memberHasValue(anno, \"ignoreNulls\", true);\r\n\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = tokenize((String) getMemberValue(canonical, \"excludes\"));\r\n                if (includes == null || includes.isEmpty()) includes = tokenize((String) getMemberValue(canonical, \"includes\"));\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createToString(cNode, includeSuper, includeFields, excludes, includes, includeNames, ignoreNulls);\r\n        }\r\n    }","id":103160,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            boolean ignoreNulls = memberHasValue(anno, \"ignoreNulls\", true);\r\n\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = tokenize((String) getMemberValue(canonical, \"excludes\"));\r\n                if (includes == null || includes.isEmpty()) includes = tokenize((String) getMemberValue(canonical, \"includes\"));\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createToString(cNode, includeSuper, includeFields, excludes, includes, includeNames, ignoreNulls);\r\n        }\r\n    }","commit_id":"e007accae60aae2a421ce09597bb0e228457e6b9","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            cNode.addInterface(CLONEABLE_TYPE);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            AutoCloneStyle style = getStyle(anno, \"style\");\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<FieldNode> list = getInstancePropertyFields(cNode);\r\n            if (includeFields) {\r\n                list.addAll(getInstanceNonPropertyFields(cNode));\r\n            }\r\n            if (style == null) style = AutoCloneStyle.CLONE;\r\n            switch (style) {\r\n                case COPY_CONSTRUCTOR:\r\n                    createCloneCopyConstructor(cNode, list, excludes);\r\n                    break;\r\n                case SERIALIZATION:\r\n                    createCloneSerialization(cNode, list, excludes);\r\n                    break;\r\n                case CLONE:\r\n                    createClone(cNode, list, excludes);\r\n                    break;\r\n            }\r\n        }\r\n    }","id":103161,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            cNode.addInterface(CLONEABLE_TYPE);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            AutoCloneStyle style = getStyle(anno, \"style\");\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<FieldNode> list = getInstancePropertyFields(cNode);\r\n            if (includeFields) {\r\n                list.addAll(getInstanceNonPropertyFields(cNode));\r\n            }\r\n            if (style == null) style = AutoCloneStyle.CLONE;\r\n            switch (style) {\r\n                case COPY_CONSTRUCTOR:\r\n                    createCloneCopyConstructor(cNode, list, excludes);\r\n                    break;\r\n                case SERIALIZATION:\r\n                    createCloneSerialization(cNode, list, excludes);\r\n                    break;\r\n                case CLONE:\r\n                    createClone(cNode, list, excludes);\r\n                    break;\r\n            }\r\n        }\r\n    }","commit_id":"7802df0932957d57e558a5f4efdf47fec23d4797","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            cNode.addInterface(EXTERNALIZABLE_TYPE);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<FieldNode> list = getInstancePropertyFields(cNode);\r\n            if (includeFields) {\r\n                list.addAll(getInstanceNonPropertyFields(cNode));\r\n            }\r\n            createWriteExternal(cNode, excludes, list);\r\n            createReadExternal(cNode, excludes, list);\r\n        }\r\n    }","id":103162,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            cNode.addInterface(EXTERNALIZABLE_TYPE);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<FieldNode> list = getInstancePropertyFields(cNode);\r\n            if (includeFields) {\r\n                list.addAll(getInstanceNonPropertyFields(cNode));\r\n            }\r\n            createWriteExternal(cNode, excludes, list);\r\n            createReadExternal(cNode, excludes, list);\r\n        }\r\n    }","commit_id":"7802df0932957d57e558a5f4efdf47fec23d4797","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            boolean ignoreNulls = memberHasValue(anno, \"ignoreNulls\", true);\r\n\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = tokenize((String) getMemberValue(canonical, \"excludes\"));\r\n                if (includes == null || includes.isEmpty()) includes = tokenize((String) getMemberValue(canonical, \"includes\"));\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createToString(cNode, includeSuper, includeFields, excludes, includes, includeNames, ignoreNulls);\r\n        }\r\n    }","id":103163,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeSuper = memberHasValue(anno, \"includeSuper\", true);\r\n            if (includeSuper && cNode.getSuperClass().getName().equals(\"java.lang.Object\")) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: includeSuper=true but '\" + cNode.getName() + \"' has no super class.\", anno);\r\n            }\r\n            boolean includeNames = memberHasValue(anno, \"includeNames\", true);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            boolean ignoreNulls = memberHasValue(anno, \"ignoreNulls\", true);\r\n\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = getMemberList(canonical, \"excludes\");\r\n                if (includes == null || includes.isEmpty()) includes = getMemberList(canonical, \"includes\");\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createToString(cNode, includeSuper, includeFields, excludes, includes, includeNames, ignoreNulls);\r\n        }\r\n    }","commit_id":"7802df0932957d57e558a5f4efdf47fec23d4797","url":"https://github.com/apache/groovy"},{"original_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            boolean includeProperties = !memberHasValue(anno, \"includeProperties\", false);\r\n            boolean includeSuperFields = memberHasValue(anno, \"includeSuperFields\", true);\r\n            boolean includeSuperProperties = memberHasValue(anno, \"includeSuperProperties\", true);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean force = memberHasValue(anno, \"force\", true);\r\n            List<String> excludes = tokenize((String) getMemberValue(anno, \"excludes\"));\r\n            List<String> includes = tokenize((String) getMemberValue(anno, \"includes\"));\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = tokenize((String) getMemberValue(canonical, \"excludes\"));\r\n                if (includes == null || includes.isEmpty()) includes = tokenize((String) getMemberValue(canonical, \"includes\"));\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createConstructor(cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes, includes);\r\n        }\r\n    }","id":103164,"modified_method":"public void visit(ASTNode[] nodes, SourceUnit source) {\r\n        init(nodes, source);\r\n        AnnotatedNode parent = (AnnotatedNode) nodes[1];\r\n        AnnotationNode anno = (AnnotationNode) nodes[0];\r\n        if (!MY_TYPE.equals(anno.getClassNode())) return;\r\n\r\n        if (parent instanceof ClassNode) {\r\n            ClassNode cNode = (ClassNode) parent;\r\n            checkNotInterface(cNode, MY_TYPE_NAME);\r\n            boolean includeFields = memberHasValue(anno, \"includeFields\", true);\r\n            boolean includeProperties = !memberHasValue(anno, \"includeProperties\", false);\r\n            boolean includeSuperFields = memberHasValue(anno, \"includeSuperFields\", true);\r\n            boolean includeSuperProperties = memberHasValue(anno, \"includeSuperProperties\", true);\r\n            boolean callSuper = memberHasValue(anno, \"callSuper\", true);\r\n            boolean force = memberHasValue(anno, \"force\", true);\r\n            List<String> excludes = getMemberList(anno, \"excludes\");\r\n            List<String> includes = getMemberList(anno, \"includes\");\r\n            if (hasAnnotation(cNode, CanonicalASTTransformation.MY_TYPE)) {\r\n                AnnotationNode canonical = cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);\r\n                if (excludes == null || excludes.isEmpty()) excludes = getMemberList(canonical, \"excludes\");\r\n                if (includes == null || includes.isEmpty()) includes = getMemberList(canonical, \"includes\");\r\n            }\r\n            if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {\r\n                addError(\"Error during \" + MY_TYPE_NAME + \" processing: Only one of 'includes' and 'excludes' should be supplied not both.\", anno);\r\n            }\r\n            createConstructor(cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes, includes);\r\n        }\r\n    }","commit_id":"7802df0932957d57e558a5f4efdf47fec23d4797","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n        public void visitBinaryExpression(JetBinaryExpression expression) {\n            IElementType operationType = expression.getOperationReference().getReferencedNameElementType();\n            JetExpression right = expression.getRight();\n            if (operationType == JetTokens.ANDAND) {\n                value(expression.getLeft(), false, true);\n                Label resultLabel = builder.createUnboundLabel();\n                builder.jumpOnFalse(resultLabel);\n                if (right != null) {\n                    value(right, false, true);\n                }\n                builder.bindLabel(resultLabel);\n                if (!inCondition) {\n                    builder.read(expression);\n                }\n            }\n            else if (operationType == JetTokens.OROR) {\n                value(expression.getLeft(), false, true);\n                Label resultLabel = builder.createUnboundLabel();\n                builder.jumpOnTrue(resultLabel);\n                if (right != null) {\n                    value(right, false, true);\n                }\n                builder.bindLabel(resultLabel);\n                if (!inCondition) {\n                    builder.read(expression);\n                }\n            }\n            else if (operationType == JetTokens.EQ) {\n                JetExpression left = JetPsiUtil.deparenthesize(expression.getLeft());\n                if (right != null) {\n                    value(right, false, false);\n                }\n                if (left instanceof JetSimpleNameExpression) {\n                    builder.write(expression, left);\n                }\n                else if (left instanceof JetArrayAccessExpression) {\n                    JetArrayAccessExpression arrayAccessExpression = (JetArrayAccessExpression) left;\n                    for (JetExpression index : arrayAccessExpression.getIndexExpressions()) {\n                        value(index, false, false);\n                    }\n                    value(arrayAccessExpression.getArrayExpression(), false, false);\n                    value(expression.getOperationReference(), false, false);\n                    builder.write(expression, left); // TODO : ???\n                } else {\n                    builder.unsupported(expression); // TODO\n                }\n            }\n            else if (JetTypeInferrer.assignmentOperationNames.containsKey(operationType)) {\n                JetExpression left = expression.getLeft();\n                value(left, false, false);\n                if (right != null) {\n                    value(right, false, false);\n                }\n                if (left instanceof JetSimpleNameExpression) {\n                    builder.write(expression, left);\n                }\n                else {\n                    builder.unsupported(expression); // TODO\n                }\n            }\n            else {\n                value(expression.getLeft(), false, false);\n                if (right != null) {\n                    value(right, false, false);\n                }\n                value(expression.getOperationReference(), false, false);\n                builder.read(expression);\n            }\n        }","id":103165,"modified_method":"@Override\n        public void visitBinaryExpression(JetBinaryExpression expression) {\n            IElementType operationType = expression.getOperationReference().getReferencedNameElementType();\n            JetExpression right = expression.getRight();\n            if (operationType == JetTokens.ANDAND) {\n                value(expression.getLeft(), false, true);\n                Label resultLabel = builder.createUnboundLabel();\n                builder.jumpOnFalse(resultLabel);\n                if (right != null) {\n                    value(right, false, true);\n                }\n                builder.bindLabel(resultLabel);\n                if (!inCondition) {\n                    builder.read(expression);\n                }\n            }\n            else if (operationType == JetTokens.OROR) {\n                value(expression.getLeft(), false, true);\n                Label resultLabel = builder.createUnboundLabel();\n                builder.jumpOnTrue(resultLabel);\n                if (right != null) {\n                    value(right, false, true);\n                }\n                builder.bindLabel(resultLabel);\n                if (!inCondition) {\n                    builder.read(expression);\n                }\n            }\n            else if (operationType == JetTokens.EQ) {\n                JetExpression left = JetPsiUtil.deparenthesize(expression.getLeft());\n                if (right != null) {\n                    value(right, false, false);\n                }\n                if (left instanceof JetSimpleNameExpression) {\n                    builder.write(expression, left);\n                }\n                else if (left instanceof JetArrayAccessExpression) {\n                    JetArrayAccessExpression arrayAccessExpression = (JetArrayAccessExpression) left;\n                    visitAssignToArrayAccess(expression, arrayAccessExpression);\n                } else {\n                    builder.unsupported(expression); // TODO\n                }\n            }\n            else if (JetTypeInferrer.assignmentOperationNames.containsKey(operationType)) {\n                JetExpression left = JetPsiUtil.deparenthesize(expression.getLeft());\n                if (left != null) {\n                    value(left, false, false);\n                }\n                if (right != null) {\n                    value(right, false, false);\n                }\n                if (left instanceof JetSimpleNameExpression || left instanceof JetArrayAccessExpression) {\n                    value(expression.getOperationReference(), false, false);\n                    builder.write(expression, left);\n                }\n                else if (left != null) {\n                    builder.unsupported(expression); // TODO\n                }\n            }\n            else {\n                value(expression.getLeft(), false, false);\n                if (right != null) {\n                    value(right, false, false);\n                }\n                value(expression.getOperationReference(), false, false);\n                builder.read(expression);\n            }\n        }","commit_id":"e9f923630336d08da77222dd1512f32c1795bb1f","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static boolean checkFoldableWhenExpressionWithAssignments(JetWhenExpression whenExpression) {\n        if (!JetPsiUtil.checkWhenExpressionHasSingleElse(whenExpression)) return false;\n\n        List<JetWhenEntry> entries = whenExpression.getEntries();\n\n        if (entries.isEmpty()) return false;\n\n        List<JetBinaryExpression> assignments = new ArrayList<JetBinaryExpression>();\n        for (JetWhenEntry entry : entries) {\n            JetBinaryExpression assignment = checkAndGetFoldableBranchedAssignment(entry.getExpression());\n            if (assignment == null) return false;\n            assignments.add(assignment);\n        }\n\n        assert !assignments.isEmpty();\n\n        JetBinaryExpression firstAssignment = assignments.get(0);\n        for (JetBinaryExpression assignment : assignments) {\n            if (!checkAssignmentsMatch(assignment, firstAssignment)) return false;\n        }\n\n        return true;\n    }","id":103166,"modified_method":"private static boolean checkFoldableWhenExpressionWithAssignments(JetWhenExpression whenExpression) {\n        if (!JetPsiUtil.checkWhenExpressionHasSingleElse(whenExpression)) return false;\n\n        List<JetWhenEntry> entries = whenExpression.getEntries();\n\n        if (entries.isEmpty()) return false;\n\n        List<JetBinaryExpression> assignments = new ArrayList<JetBinaryExpression>();\n        for (JetWhenEntry entry : entries) {\n            JetBinaryExpression assignment = getFoldableBranchedAssignment(entry.getExpression());\n            if (assignment == null) return false;\n            assignments.add(assignment);\n        }\n\n        assert !assignments.isEmpty();\n\n        JetBinaryExpression firstAssignment = assignments.get(0);\n        for (JetBinaryExpression assignment : assignments) {\n            if (!checkAssignmentsMatch(assignment, firstAssignment)) return false;\n        }\n\n        return true;\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void foldWhenExpressionWithReturns(JetWhenExpression whenExpression) {\n        Project project = whenExpression.getProject();\n\n        assert !whenExpression.getEntries().isEmpty() : FOLD_WITHOUT_CHECK;\n\n        JetReturnExpression returnExpr = (JetReturnExpression)whenExpression.replace(JetPsiFactory.createReturn(project, whenExpression));\n        whenExpression = (JetWhenExpression)returnExpr.getReturnedExpression();\n\n        assert whenExpression != null : FOLD_WITHOUT_CHECK;\n\n        for (JetWhenEntry entry : whenExpression.getEntries()) {\n            JetReturnExpression currReturn = checkAndGetFoldableBranchedReturn(entry.getExpression());\n\n            assert currReturn != null : FOLD_WITHOUT_CHECK;\n\n            JetExpression currExpr = currReturn.getReturnedExpression();\n\n            assert currExpr != null : FOLD_WITHOUT_CHECK;\n\n            currReturn.replace(currExpr);\n        }\n    }","id":103167,"modified_method":"public static void foldWhenExpressionWithReturns(JetWhenExpression whenExpression) {\n        Project project = whenExpression.getProject();\n\n        assert !whenExpression.getEntries().isEmpty() : FOLD_WITHOUT_CHECK;\n\n        JetReturnExpression newReturnExpression = JetPsiFactory.createReturn(project, whenExpression);\n        JetWhenExpression newWhenExpression = (JetWhenExpression)newReturnExpression.getReturnedExpression();\n\n        assert newWhenExpression != null : FOLD_WITHOUT_CHECK;\n\n        for (JetWhenEntry entry : newWhenExpression.getEntries()) {\n            JetReturnExpression currReturn = getFoldableBranchedReturn(entry.getExpression());\n\n            assert currReturn != null : FOLD_WITHOUT_CHECK;\n\n            JetExpression currExpr = currReturn.getReturnedExpression();\n\n            assert currExpr != null : FOLD_WITHOUT_CHECK;\n\n            currReturn.replace(currExpr);\n        }\n\n        whenExpression.replace(newReturnExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static boolean checkFoldableIfExpressionWithAssignments(JetIfExpression ifExpression) {\n        JetExpression thenBranch = ifExpression.getThen();\n        JetExpression elseBranch = ifExpression.getElse();\n\n        JetBinaryExpression thenAssignment = checkAndGetFoldableBranchedAssignment(thenBranch);\n        JetBinaryExpression elseAssignment = checkAndGetFoldableBranchedAssignment(elseBranch);\n\n        if (thenAssignment == null || elseAssignment == null) return false;\n\n        return checkAssignmentsMatch(thenAssignment, elseAssignment);\n    }","id":103168,"modified_method":"private static boolean checkFoldableIfExpressionWithAssignments(JetIfExpression ifExpression) {\n        JetExpression thenBranch = ifExpression.getThen();\n        JetExpression elseBranch = ifExpression.getElse();\n\n        JetBinaryExpression thenAssignment = getFoldableBranchedAssignment(thenBranch);\n        JetBinaryExpression elseAssignment = getFoldableBranchedAssignment(elseBranch);\n\n        if (thenAssignment == null || elseAssignment == null) return false;\n\n        return checkAssignmentsMatch(thenAssignment, elseAssignment);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void foldWhenExpressionWithAssignments(JetWhenExpression whenExpression) {\n        Project project = whenExpression.getProject();\n\n        assert !whenExpression.getEntries().isEmpty() : FOLD_WITHOUT_CHECK;\n\n        JetBinaryExpression firstAssignment = checkAndGetFoldableBranchedAssignment(whenExpression.getEntries().get(0).getExpression());\n\n        assert firstAssignment != null : FOLD_WITHOUT_CHECK;\n\n        String op = firstAssignment.getOperationReference().getText();\n        JetSimpleNameExpression lhs = (JetSimpleNameExpression) firstAssignment.getLeft();\n\n        JetBinaryExpression assignment =\n                (JetBinaryExpression)whenExpression.replace(JetPsiFactory.createBinaryExpression(project, lhs, op, whenExpression));\n        whenExpression = (JetWhenExpression)assignment.getRight();\n\n        assert whenExpression != null : FOLD_WITHOUT_CHECK;\n\n        for (JetWhenEntry entry : whenExpression.getEntries()) {\n            JetBinaryExpression currAssignment = checkAndGetFoldableBranchedAssignment(entry.getExpression());\n\n            assert currAssignment != null : FOLD_WITHOUT_CHECK;\n\n            JetExpression currRhs = currAssignment.getRight();\n\n            assert currRhs != null : FOLD_WITHOUT_CHECK;\n\n            currAssignment.replace(currRhs);\n        }\n    }","id":103169,"modified_method":"public static void foldWhenExpressionWithAssignments(JetWhenExpression whenExpression) {\n        Project project = whenExpression.getProject();\n\n        assert !whenExpression.getEntries().isEmpty() : FOLD_WITHOUT_CHECK;\n\n        JetBinaryExpression firstAssignment = getFoldableBranchedAssignment(whenExpression.getEntries().get(0).getExpression());\n\n        assert firstAssignment != null : FOLD_WITHOUT_CHECK;\n\n        String op = firstAssignment.getOperationReference().getText();\n        JetSimpleNameExpression lhs = (JetSimpleNameExpression) firstAssignment.getLeft();\n\n        JetBinaryExpression assignment = JetPsiFactory.createBinaryExpression(project, lhs, op, whenExpression);\n        JetWhenExpression newWhenExpression = (JetWhenExpression)assignment.getRight();\n\n        assert newWhenExpression != null : FOLD_WITHOUT_CHECK;\n\n        for (JetWhenEntry entry : newWhenExpression.getEntries()) {\n            JetBinaryExpression currAssignment = getFoldableBranchedAssignment(entry.getExpression());\n\n            assert currAssignment != null : FOLD_WITHOUT_CHECK;\n\n            JetExpression currRhs = currAssignment.getRight();\n\n            assert currRhs != null : FOLD_WITHOUT_CHECK;\n\n            currAssignment.replace(currRhs);\n        }\n\n        whenExpression.replace(assignment);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void foldIfExpressionWithAsymmetricReturns(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetExpression condition = ifExpression.getCondition();\n        JetExpression thenRoot = ifExpression.getThen();\n        JetExpression elseRoot = (JetExpression)JetPsiUtil.skipTrailingWhitespacesAndComments(ifExpression);\n\n        assert condition != null : FOLD_WITHOUT_CHECK;\n        assert thenRoot != null : FOLD_WITHOUT_CHECK;\n        assert elseRoot != null : FOLD_WITHOUT_CHECK;\n\n        JetIfExpression newIfExpr = JetPsiFactory.createIf(project, condition, thenRoot, elseRoot);\n        JetReturnExpression newReturnExpr = JetPsiFactory.createReturn(project, newIfExpr);\n        newReturnExpr = (JetReturnExpression) ifExpression.replace(newReturnExpr);\n\n        JetReturnExpression oldReturn = (JetReturnExpression)JetPsiUtil.skipTrailingWhitespacesAndComments(newReturnExpr);\n\n        assert oldReturn != null : FOLD_WITHOUT_CHECK;\n\n        oldReturn.delete();\n\n        newIfExpr = (JetIfExpression)newReturnExpr.getReturnedExpression();\n\n        assert newIfExpr != null : FOLD_WITHOUT_CHECK;\n\n        JetReturnExpression thenReturn = checkAndGetFoldableBranchedReturn(newIfExpr.getThen());\n        JetReturnExpression elseReturn = checkAndGetFoldableBranchedReturn(newIfExpr.getElse());\n\n        assert thenReturn != null : FOLD_WITHOUT_CHECK;\n        assert elseReturn != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenExpr = thenReturn.getReturnedExpression();\n        JetExpression elseExpr = elseReturn.getReturnedExpression();\n\n        assert thenExpr != null : FOLD_WITHOUT_CHECK;\n        assert elseExpr != null : FOLD_WITHOUT_CHECK;\n\n        thenReturn.replace(thenExpr);\n        elseReturn.replace(elseExpr);\n    }","id":103170,"modified_method":"public static void foldIfExpressionWithAsymmetricReturns(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetExpression condition = ifExpression.getCondition();\n        JetExpression thenRoot = ifExpression.getThen();\n        JetExpression elseRoot = (JetExpression)JetPsiUtil.skipTrailingWhitespacesAndComments(ifExpression);\n\n        assert condition != null : FOLD_WITHOUT_CHECK;\n        assert thenRoot != null : FOLD_WITHOUT_CHECK;\n        assert elseRoot != null : FOLD_WITHOUT_CHECK;\n\n        JetIfExpression newIfExpression = JetPsiFactory.createIf(project, condition, thenRoot, elseRoot);\n        JetReturnExpression newReturnExpression = JetPsiFactory.createReturn(project, newIfExpression);\n\n        newIfExpression = (JetIfExpression)newReturnExpression.getReturnedExpression();\n\n        assert newIfExpression != null : FOLD_WITHOUT_CHECK;\n\n        JetReturnExpression thenReturn = getFoldableBranchedReturn(newIfExpression.getThen());\n        JetReturnExpression elseReturn = getFoldableBranchedReturn(newIfExpression.getElse());\n\n        assert thenReturn != null : FOLD_WITHOUT_CHECK;\n        assert elseReturn != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenExpr = thenReturn.getReturnedExpression();\n        JetExpression elseExpr = elseReturn.getReturnedExpression();\n\n        assert thenExpr != null : FOLD_WITHOUT_CHECK;\n        assert elseExpr != null : FOLD_WITHOUT_CHECK;\n\n        thenReturn.replace(thenExpr);\n        elseReturn.replace(elseExpr);\n\n        elseRoot.delete();\n        ifExpression.replace(newReturnExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static boolean checkFoldableIfExpressionWithAsymmetricReturns(JetIfExpression ifExpression) {\n        if (checkAndGetFoldableBranchedReturn(ifExpression.getThen()) == null ||\n            ifExpression.getElse() != null) {\n            return false;\n        }\n\n        PsiElement nextElement = JetPsiUtil.skipTrailingWhitespacesAndComments(ifExpression);\n        return (nextElement instanceof JetExpression) && checkAndGetFoldableBranchedReturn((JetExpression)nextElement) != null;\n    }","id":103171,"modified_method":"private static boolean checkFoldableIfExpressionWithAsymmetricReturns(JetIfExpression ifExpression) {\n        if (getFoldableBranchedReturn(ifExpression.getThen()) == null ||\n            ifExpression.getElse() != null) {\n            return false;\n        }\n\n        PsiElement nextElement = JetPsiUtil.skipTrailingWhitespacesAndComments(ifExpression);\n        return (nextElement instanceof JetExpression) && getFoldableBranchedReturn((JetExpression) nextElement) != null;\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static JetBinaryExpression checkAndGetFoldableBranchedAssignment(JetExpression branch) {\n        return (JetBinaryExpression)JetPsiUtil.getOutermostLastBlockElement(branch, CHECK_ASSIGNMENT);\n    }","id":103172,"modified_method":"private static JetBinaryExpression getFoldableBranchedAssignment(JetExpression branch) {\n        return (JetBinaryExpression)JetPsiUtil.getOutermostLastBlockElement(branch, CHECK_ASSIGNMENT);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static boolean checkFoldableWhenExpressionWithReturns(JetWhenExpression whenExpression) {\n        if (!JetPsiUtil.checkWhenExpressionHasSingleElse(whenExpression)) return false;\n\n        List<JetWhenEntry> entries = whenExpression.getEntries();\n\n        if (entries.isEmpty()) return false;\n\n        for (JetWhenEntry entry : entries) {\n            if (checkAndGetFoldableBranchedReturn(entry.getExpression()) == null) return false;\n        }\n\n        return true;\n    }","id":103173,"modified_method":"private static boolean checkFoldableWhenExpressionWithReturns(JetWhenExpression whenExpression) {\n        if (!JetPsiUtil.checkWhenExpressionHasSingleElse(whenExpression)) return false;\n\n        List<JetWhenEntry> entries = whenExpression.getEntries();\n\n        if (entries.isEmpty()) return false;\n\n        for (JetWhenEntry entry : entries) {\n            if (getFoldableBranchedReturn(entry.getExpression()) == null) return false;\n        }\n\n        return true;\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static boolean checkFoldableIfExpressionWithReturns(JetIfExpression ifExpression) {\n        return checkAndGetFoldableBranchedReturn(ifExpression.getThen()) != null &&\n               checkAndGetFoldableBranchedReturn(ifExpression.getElse()) != null;\n    }","id":103174,"modified_method":"private static boolean checkFoldableIfExpressionWithReturns(JetIfExpression ifExpression) {\n        return getFoldableBranchedReturn(ifExpression.getThen()) != null &&\n               getFoldableBranchedReturn(ifExpression.getElse()) != null;\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void foldIfExpressionWithReturns(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetReturnExpression returnExpr = (JetReturnExpression)ifExpression.replace(JetPsiFactory.createReturn(project, ifExpression));\n        ifExpression = (JetIfExpression)returnExpr.getReturnedExpression();\n\n        assert ifExpression != null : FOLD_WITHOUT_CHECK;\n\n        JetReturnExpression thenReturn = checkAndGetFoldableBranchedReturn(ifExpression.getThen());\n        JetReturnExpression elseReturn = checkAndGetFoldableBranchedReturn(ifExpression.getElse());\n\n        assert thenReturn != null : FOLD_WITHOUT_CHECK;\n        assert elseReturn != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenExpr = thenReturn.getReturnedExpression();\n        JetExpression elseExpr = elseReturn.getReturnedExpression();\n\n        assert thenExpr != null : FOLD_WITHOUT_CHECK;\n        assert elseExpr != null : FOLD_WITHOUT_CHECK;\n\n        thenReturn.replace(thenExpr);\n        elseReturn.replace(elseExpr);\n    }","id":103175,"modified_method":"public static void foldIfExpressionWithReturns(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetReturnExpression newReturnExpression = JetPsiFactory.createReturn(project, ifExpression);\n        JetIfExpression newIfExpression = (JetIfExpression)newReturnExpression.getReturnedExpression();\n\n        assert newIfExpression != null;\n\n        JetReturnExpression thenReturn = getFoldableBranchedReturn(newIfExpression.getThen());\n        JetReturnExpression elseReturn = getFoldableBranchedReturn(newIfExpression.getElse());\n\n        assert thenReturn != null : FOLD_WITHOUT_CHECK;\n        assert elseReturn != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenExpr = thenReturn.getReturnedExpression();\n        JetExpression elseExpr = elseReturn.getReturnedExpression();\n\n        assert thenExpr != null : FOLD_WITHOUT_CHECK;\n        assert elseExpr != null : FOLD_WITHOUT_CHECK;\n\n        thenReturn.replace(thenExpr);\n        elseReturn.replace(elseExpr);\n\n        ifExpression.replace(newReturnExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void foldIfExpressionWithAssignments(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetBinaryExpression thenAssignment = checkAndGetFoldableBranchedAssignment(ifExpression.getThen());\n\n        assert thenAssignment != null : FOLD_WITHOUT_CHECK;\n\n        String op = thenAssignment.getOperationReference().getText();\n        JetSimpleNameExpression lhs = (JetSimpleNameExpression) thenAssignment.getLeft();\n\n        JetBinaryExpression assignment =\n                (JetBinaryExpression)ifExpression.replace(JetPsiFactory.createBinaryExpression(project, lhs, op, ifExpression));\n        ifExpression = (JetIfExpression)assignment.getRight();\n\n        assert ifExpression != null : FOLD_WITHOUT_CHECK;\n\n        thenAssignment = checkAndGetFoldableBranchedAssignment(ifExpression.getThen());\n        JetBinaryExpression elseAssignment = checkAndGetFoldableBranchedAssignment(ifExpression.getElse());\n\n        assert thenAssignment != null : FOLD_WITHOUT_CHECK;\n        assert elseAssignment != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenRhs = thenAssignment.getRight();\n        JetExpression elseRhs = elseAssignment.getRight();\n\n        assert thenRhs != null : FOLD_WITHOUT_CHECK;\n        assert elseRhs != null : FOLD_WITHOUT_CHECK;\n\n        thenAssignment.replace(thenRhs);\n        elseAssignment.replace(elseRhs);\n    }","id":103176,"modified_method":"public static void foldIfExpressionWithAssignments(JetIfExpression ifExpression) {\n        Project project = ifExpression.getProject();\n\n        JetBinaryExpression thenAssignment = getFoldableBranchedAssignment(ifExpression.getThen());\n\n        assert thenAssignment != null : FOLD_WITHOUT_CHECK;\n\n        String op = thenAssignment.getOperationReference().getText();\n        JetSimpleNameExpression lhs = (JetSimpleNameExpression) thenAssignment.getLeft();\n\n        JetBinaryExpression assignment = JetPsiFactory.createBinaryExpression(project, lhs, op, ifExpression);\n        JetIfExpression newIfExpression = (JetIfExpression)assignment.getRight();\n\n        assert newIfExpression != null : FOLD_WITHOUT_CHECK;\n\n        thenAssignment = getFoldableBranchedAssignment(newIfExpression.getThen());\n        JetBinaryExpression elseAssignment = getFoldableBranchedAssignment(newIfExpression.getElse());\n\n        assert thenAssignment != null : FOLD_WITHOUT_CHECK;\n        assert elseAssignment != null : FOLD_WITHOUT_CHECK;\n\n        JetExpression thenRhs = thenAssignment.getRight();\n        JetExpression elseRhs = elseAssignment.getRight();\n\n        assert thenRhs != null : FOLD_WITHOUT_CHECK;\n        assert elseRhs != null : FOLD_WITHOUT_CHECK;\n\n        thenAssignment.replace(thenRhs);\n        elseAssignment.replace(elseRhs);\n\n        ifExpression.replace(assignment);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static JetReturnExpression checkAndGetFoldableBranchedReturn(JetExpression branch) {\n        return (JetReturnExpression)JetPsiUtil.getOutermostLastBlockElement(branch, CHECK_RETURN);\n    }","id":103177,"modified_method":"private static JetReturnExpression getFoldableBranchedReturn(JetExpression branch) {\n        return (JetReturnExpression)JetPsiUtil.getOutermostLastBlockElement(branch, CHECK_RETURN);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void unfoldAssignmentToWhen(@NotNull JetBinaryExpression assignment) {\n        Project project = assignment.getProject();\n        String op = assignment.getOperationReference().getText();\n        String lhsText = assignment.getLeft().getText();\n        JetWhenExpression whenExpression = (JetWhenExpression)assignment.getRight();\n\n        assert whenExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        whenExpression = (JetWhenExpression)assignment.replace(whenExpression);\n\n        for (JetWhenEntry entry : whenExpression.getEntries()) {\n            JetExpression currExpr = getOutermostLastBlockElement(entry.getExpression());\n\n            assert currExpr != null : UNFOLD_WITHOUT_CHECK;\n\n            currExpr.replace(JetPsiFactory.createBinaryExpression(project, JetPsiFactory.createExpression(project, lhsText), op, currExpr));\n        }\n    }","id":103178,"modified_method":"public static void unfoldAssignmentToWhen(@NotNull JetBinaryExpression assignment) {\n        Project project = assignment.getProject();\n        String op = assignment.getOperationReference().getText();\n        JetExpression lhs = assignment.getLeft();\n        JetWhenExpression whenExpression = (JetWhenExpression)assignment.getRight();\n\n        assert whenExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        JetWhenExpression newWhenExpression = (JetWhenExpression) whenExpression.copy();\n\n        for (JetWhenEntry entry : newWhenExpression.getEntries()) {\n            JetExpression currExpr = getOutermostLastBlockElement(entry.getExpression());\n\n            assert currExpr != null : UNFOLD_WITHOUT_CHECK;\n\n            currExpr.replace(JetPsiFactory.createBinaryExpression(project, lhs, op, currExpr));\n        }\n\n        assignment.replace(newWhenExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void unfoldReturnToWhen(@NotNull JetReturnExpression returnExpression) {\n        Project project = returnExpression.getProject();\n        JetWhenExpression whenExpression = (JetWhenExpression)returnExpression.getReturnedExpression();\n\n        assert whenExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        whenExpression = (JetWhenExpression)returnExpression.replace(whenExpression);\n\n        for (JetWhenEntry entry : whenExpression.getEntries()) {\n            JetExpression currExpr = getOutermostLastBlockElement(entry.getExpression());\n\n            assert currExpr != null : UNFOLD_WITHOUT_CHECK;\n\n            currExpr.replace(JetPsiFactory.createReturn(project, currExpr));\n        }\n    }","id":103179,"modified_method":"public static void unfoldReturnToWhen(@NotNull JetReturnExpression returnExpression) {\n        Project project = returnExpression.getProject();\n        JetWhenExpression whenExpression = (JetWhenExpression)returnExpression.getReturnedExpression();\n\n        assert whenExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        JetWhenExpression newWhenExpression = (JetWhenExpression) whenExpression.copy();\n\n        for (JetWhenEntry entry : newWhenExpression.getEntries()) {\n            JetExpression currExpr = getOutermostLastBlockElement(entry.getExpression());\n\n            assert currExpr != null : UNFOLD_WITHOUT_CHECK;\n\n            currExpr.replace(JetPsiFactory.createReturn(project, currExpr));\n        }\n\n        returnExpression.replace(newWhenExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void unfoldReturnToIf(@NotNull JetReturnExpression returnExpression) {\n        Project project = returnExpression.getProject();\n        JetIfExpression ifExpression = (JetIfExpression)returnExpression.getReturnedExpression();\n\n        assert ifExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        ifExpression = (JetIfExpression)returnExpression.replace(ifExpression);\n\n        JetExpression thenExpr = getOutermostLastBlockElement(ifExpression.getThen());\n        JetExpression elseExpr = getOutermostLastBlockElement(ifExpression.getElse());\n\n        assert thenExpr != null : UNFOLD_WITHOUT_CHECK;\n        assert elseExpr != null : UNFOLD_WITHOUT_CHECK;\n\n        thenExpr.replace(JetPsiFactory.createReturn(project, thenExpr));\n        elseExpr.replace(JetPsiFactory.createReturn(project, elseExpr));\n    }","id":103180,"modified_method":"public static void unfoldReturnToIf(@NotNull JetReturnExpression returnExpression) {\n        Project project = returnExpression.getProject();\n        JetIfExpression ifExpression = (JetIfExpression)returnExpression.getReturnedExpression();\n\n        assert ifExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        JetIfExpression newIfExpression = (JetIfExpression) ifExpression.copy();\n\n        JetExpression thenExpr = getOutermostLastBlockElement(newIfExpression.getThen());\n        JetExpression elseExpr = getOutermostLastBlockElement(newIfExpression.getElse());\n\n        assert thenExpr != null : UNFOLD_WITHOUT_CHECK;\n        assert elseExpr != null : UNFOLD_WITHOUT_CHECK;\n\n        thenExpr.replace(JetPsiFactory.createReturn(project, thenExpr));\n        elseExpr.replace(JetPsiFactory.createReturn(project, elseExpr));\n\n        returnExpression.replace(newIfExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static void unfoldAssignmentToIf(@NotNull JetBinaryExpression assignment) {\n        Project project = assignment.getProject();\n        String op = assignment.getOperationReference().getText();\n        String lhsText = assignment.getLeft().getText();\n        JetIfExpression ifExpression = (JetIfExpression)assignment.getRight();\n\n        assert ifExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        ifExpression = (JetIfExpression)assignment.replace(ifExpression);\n\n        JetExpression thenExpr = getOutermostLastBlockElement(ifExpression.getThen());\n        JetExpression elseExpr = getOutermostLastBlockElement(ifExpression.getElse());\n\n        assert thenExpr != null : UNFOLD_WITHOUT_CHECK;\n        assert elseExpr != null : UNFOLD_WITHOUT_CHECK;\n\n        thenExpr.replace(JetPsiFactory.createBinaryExpression(project, JetPsiFactory.createExpression(project, lhsText), op, thenExpr));\n        elseExpr.replace(JetPsiFactory.createBinaryExpression(project, JetPsiFactory.createExpression(project, lhsText), op, elseExpr));\n    }","id":103181,"modified_method":"public static void unfoldAssignmentToIf(@NotNull JetBinaryExpression assignment) {\n        Project project = assignment.getProject();\n        String op = assignment.getOperationReference().getText();\n        JetExpression lhs = assignment.getLeft();\n        JetIfExpression ifExpression = (JetIfExpression)assignment.getRight();\n\n        assert ifExpression != null : UNFOLD_WITHOUT_CHECK;\n\n        JetIfExpression newIfExpression = (JetIfExpression) ifExpression.copy();\n\n        JetExpression thenExpr = getOutermostLastBlockElement(newIfExpression.getThen());\n        JetExpression elseExpr = getOutermostLastBlockElement(newIfExpression.getElse());\n\n        assert thenExpr != null : UNFOLD_WITHOUT_CHECK;\n        assert elseExpr != null : UNFOLD_WITHOUT_CHECK;\n\n        thenExpr.replace(JetPsiFactory.createBinaryExpression(project, lhs, op, thenExpr));\n        elseExpr.replace(JetPsiFactory.createBinaryExpression(project, lhs, op, elseExpr));\n\n        assignment.replace(newIfExpression);\n    }","commit_id":"fe3d7492574dc7faffab1ab5f7b3926c143bbcd6","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void packMapHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                ensure( 1 );\n                buffer.put( (byte) (TINY_MAP | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                ensure( 2 );\n                buffer.put( MAP_8 );\n                buffer.put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                ensure( 3 );\n                buffer.put( MAP_16 );\n                buffer.putShort( (short) size );\n            }\n            else\n            {\n                ensure( 5 );\n                buffer.put( MAP_32 );\n                buffer.putInt( size );\n            }\n        }","id":103182,"modified_method":"public void packMapHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                out.ensure( 1 )\n                   .put( (byte) (TINY_MAP | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                out.ensure( 2 )\n                   .put( MAP_8 )\n                   .put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                out.ensure( 3 )\n                   .put( MAP_16 )\n                   .putShort( (short) size );\n            }\n            else\n            {\n                out.ensure( 5 )\n                   .put( MAP_32 )\n                   .putInt( size );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public PackValue unpack() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerByte == NULL )\n            {\n                return NULL_VALUE;\n            }\n            else if ( markerByte == TRUE )\n            {\n                return PackValue.BooleanValue.TRUE;\n            }\n            else if ( markerByte == FALSE )\n            {\n                return PackValue.BooleanValue.FALSE;\n            }\n            else if ( markerByte == FLOAT_64 )\n            {\n                ensure( 8 );\n                return new PackValue.FloatValue( buffer.getDouble() );\n            }\n            else if ( markerByte == INT_8 )\n            {\n                ensure( 1 );\n                return PackValue.IntegerValue.getInstance( buffer.get() );\n            }\n            else if ( markerByte == INT_16 )\n            {\n                ensure( 2 );\n                return PackValue.IntegerValue.getInstance( buffer.getShort() );\n            }\n            else if ( markerByte == INT_32 )\n            {\n                ensure( 4 );\n                return PackValue.IntegerValue.getInstance( buffer.getInt() );\n            }\n            else if ( markerByte == INT_64 )\n            {\n                ensure( 8 );\n                return PackValue.IntegerValue.getInstance( buffer.getLong() );\n            }\n            else if ( markerByte == BYTES_8 )\n            {\n                return PackValue.BytesValue.getInstance( unpackBytes( unpackUINT8() ) );\n            }\n            else if ( markerByte == BYTES_16 )\n            {\n                return PackValue.BytesValue.getInstance( unpackBytes( unpackUINT16() ) );\n            }\n            else if ( markerByte == BYTES_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.BytesValue.getInstance( unpackBytes( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"BYTES_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_TEXT )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( markerLowNibble ) );\n            }\n            else if ( markerByte == TEXT_8 )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( unpackUINT8() ) );\n            }\n            else if ( markerByte == TEXT_16 )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( unpackUINT16() ) );\n            }\n            else if ( markerByte == TEXT_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.TextValue.getInstance( unpackBytes( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"TEXT_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_LIST )\n            {\n                return PackValue.ListValue.getInstance( unpackList( markerLowNibble ) );\n            }\n            else if ( markerByte == LIST_8 )\n            {\n                return PackValue.ListValue.getInstance( unpackList( unpackUINT8() ) );\n            }\n            else if ( markerByte == LIST_16 )\n            {\n                return PackValue.ListValue.getInstance( unpackList( unpackUINT16() ) );\n            }\n            else if ( markerByte == LIST_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.ListValue.getInstance( unpackList( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"LIST_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_MAP )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( markerLowNibble ) );\n            }\n            else if ( markerByte == MAP_8 )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( unpackUINT8() ) );\n            }\n            else if ( markerByte == MAP_16 )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( unpackUINT16() ) );\n            }\n            else if ( markerByte == MAP_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.MapValue.getInstance( unpackMap( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"MAP_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_STRUCT )\n            {\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( markerLowNibble ) );\n            }\n            else if ( markerByte == STRUCT_8 )\n            {\n                int size = unpackUINT8();\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( size ) );\n            }\n            else if ( markerByte == STRUCT_16 )\n            {\n                int size = unpackUINT16();\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( size ) );\n            }\n            else { return PackValue.IntegerValue.getInstance( markerByte ); }\n        }","id":103183,"modified_method":"public PackValue unpack() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerByte == NULL )\n            {\n                return NULL_VALUE;\n            }\n            else if ( markerByte == TRUE )\n            {\n                return PackValue.BooleanValue.TRUE;\n            }\n            else if ( markerByte == FALSE )\n            {\n                return PackValue.BooleanValue.FALSE;\n            }\n            else if ( markerByte == FLOAT_64 )\n            {\n                return new PackValue.FloatValue( in.ensure( 8 ).getDouble() );\n            }\n            else if ( markerByte == INT_8 )\n            {\n                return PackValue.IntegerValue.getInstance( in.ensure( 1 ).get() );\n            }\n            else if ( markerByte == INT_16 )\n            {\n                return PackValue.IntegerValue.getInstance( in.ensure( 2 ).getShort() );\n            }\n            else if ( markerByte == INT_32 )\n            {\n                return PackValue.IntegerValue.getInstance( in.ensure( 4 ).getInt() );\n            }\n            else if ( markerByte == INT_64 )\n            {\n                return PackValue.IntegerValue.getInstance( in.ensure( 8 ).getLong() );\n            }\n            else if ( markerByte == BYTES_8 )\n            {\n                return PackValue.BytesValue.getInstance( unpackBytes( unpackUINT8() ) );\n            }\n            else if ( markerByte == BYTES_16 )\n            {\n                return PackValue.BytesValue.getInstance( unpackBytes( unpackUINT16() ) );\n            }\n            else if ( markerByte == BYTES_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.BytesValue.getInstance( unpackBytes( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"BYTES_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_TEXT )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( markerLowNibble ) );\n            }\n            else if ( markerByte == TEXT_8 )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( unpackUINT8() ) );\n            }\n            else if ( markerByte == TEXT_16 )\n            {\n                return PackValue.TextValue.getInstance( unpackBytes( unpackUINT16() ) );\n            }\n            else if ( markerByte == TEXT_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.TextValue.getInstance( unpackBytes( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"TEXT_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_LIST )\n            {\n                return PackValue.ListValue.getInstance( unpackList( markerLowNibble ) );\n            }\n            else if ( markerByte == LIST_8 )\n            {\n                return PackValue.ListValue.getInstance( unpackList( unpackUINT8() ) );\n            }\n            else if ( markerByte == LIST_16 )\n            {\n                return PackValue.ListValue.getInstance( unpackList( unpackUINT16() ) );\n            }\n            else if ( markerByte == LIST_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.ListValue.getInstance( unpackList( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"LIST_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_MAP )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( markerLowNibble ) );\n            }\n            else if ( markerByte == MAP_8 )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( unpackUINT8() ) );\n            }\n            else if ( markerByte == MAP_16 )\n            {\n                return PackValue.MapValue.getInstance( unpackMap( unpackUINT16() ) );\n            }\n            else if ( markerByte == MAP_32 )\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return PackValue.MapValue.getInstance( unpackMap( (int) size ) );\n                }\n                else\n                {\n                    throw new Overflow( \"MAP_32 too long for Java\" );\n                }\n            }\n            else if ( markerHighNibble == TINY_STRUCT )\n            {\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( markerLowNibble ) );\n            }\n            else if ( markerByte == STRUCT_8 )\n            {\n                int size = unpackUINT8();\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( size ) );\n            }\n            else if ( markerByte == STRUCT_16 )\n            {\n                int size = unpackUINT16();\n                char signature = unpackStructSignature();\n                return PackValue.StructValue.getInstance( signature, unpackList( size ) );\n            }\n            else { return PackValue.IntegerValue.getInstance( markerByte ); }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public double unpackDouble() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            if(markerByte == FLOAT_64)\n            {\n                ensure( 8 );\n                return buffer.getDouble();\n            }\n            throw new Unexpected( \"Expected a double, but got: \" + toHexString( markerByte ));\n        }","id":103184,"modified_method":"public double unpackDouble() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            if(markerByte == FLOAT_64)\n            {\n                return in.ensure( 8 ).getDouble();\n            }\n            throw new Unexpected( \"Expected a double, but got: \" + toHexString( markerByte ));\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void packStructHeader( int size, char signature ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                ensure( 2 );\n                buffer.put( (byte) (TINY_STRUCT | size) );\n                buffer.put( (byte) signature );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                ensure( 3 );\n                buffer.put( STRUCT_8 );\n                buffer.put( (byte) size );\n                buffer.put( (byte) signature );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                ensure( 4 );\n                buffer.put( STRUCT_16 );\n                buffer.putShort( (short) size );\n                buffer.put( (byte) signature );\n            }\n            else\n            {\n                throw new Overflow(\n                        \"Structures cannot have more than \" + Short.MAX_VALUE + \" fields\" );\n            }\n        }","id":103185,"modified_method":"public void packStructHeader( int size, char signature ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                out.ensure( 2 )\n                   .put( (byte) (TINY_STRUCT | size) )\n                   .put( (byte) signature );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                out.ensure( 3 )\n                   .put( STRUCT_8 )\n                   .put( (byte) size )\n                   .put( (byte) signature );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                out.ensure( 4 )\n                   .put( STRUCT_16 )\n                   .putShort( (short) size )\n                   .put( (byte) signature );\n            }\n            else\n            {\n                throw new Overflow(\n                        \"Structures cannot have more than \" + Short.MAX_VALUE + \" fields\" );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ByteBuffer packNull() throws IOException\n        {\n            ensure( 1 );\n            return buffer.put( NULL );\n        }","id":103186,"modified_method":"public void packNull() throws IOException\n        {\n            out.ensure( 1 )\n               .put( NULL );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void reset( WritableByteChannel channel )\n        {\n            this.channel = channel;\n            this.buffer.clear();\n        }","id":103187,"modified_method":"public void reset( WritableByteChannel channel )\n        {\n            ((BufferedChannelOutput) out).reset( channel );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Unpacker( int bufferCapacity )\n        {\n            assert bufferCapacity >= 8 : \"Buffer must be at least 8 bytes.\";\n            this.buffer = ByteBuffer.allocateDirect( bufferCapacity ).order( ByteOrder.BIG_ENDIAN );\n        }","id":103188,"modified_method":"public Unpacker( int bufferCapacity )\n        {\n            assert bufferCapacity >= 8 : \"Buffer must be at least 8 bytes.\";\n            this.in = new BufferedChannelInput( bufferCapacity );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Unpacker reset( ReadableByteChannel ch )\n        {\n            this.channel = ch;\n            this.buffer.position(0);\n            this.buffer.limit(0);\n            return this;\n        }","id":103189,"modified_method":"public Unpacker reset( ReadableByteChannel ch )\n        {\n            ((BufferedChannelInput)in).reset( ch );\n            return this;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long unpackListHeader() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble  = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_LIST ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case LIST_8: return unpackUINT8();\n            case LIST_16: return unpackUINT16();\n            case LIST_32: return unpackUINT32();\n            default: throw new Unexpected( \"Expected a list, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103190,"modified_method":"public long unpackListHeader() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble  = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_LIST ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case LIST_8: return unpackUINT8();\n            case LIST_16: return unpackUINT16();\n            case LIST_32: return unpackUINT32();\n            default: throw new Unexpected( \"Expected a list, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public PackType peekNextType() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get(buffer.position());\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n\n            switch(markerHighNibble)\n            {\n            case TINY_TEXT:   return PackType.TEXT;\n            case TINY_LIST:   return PackType.LIST;\n            case TINY_MAP:    return PackType.MAP;\n            case TINY_STRUCT: return PackType.STRUCT;\n            }\n\n            switch(markerByte)\n            {\n            case NULL:\n                return PackType.NULL;\n            case TRUE:\n            case FALSE:\n                return PackType.BOOLEAN;\n            case FLOAT_64:\n                return PackType.FLOAT;\n            case BYTES_8:\n            case BYTES_16:\n            case BYTES_32:\n                return PackType.BYTES;\n            case TEXT_8:\n            case TEXT_16:\n            case TEXT_32:\n                return PackType.TEXT;\n            case LIST_8:\n            case LIST_16:\n            case LIST_32:\n                return PackType.LIST;\n            case MAP_8:\n            case MAP_16:\n            case MAP_32:\n                return PackType.MAP;\n            case STRUCT_8:\n            case STRUCT_16:\n                return PackType.STRUCT;\n            default:\n                return PackType.INTEGER;\n            }\n        }","id":103191,"modified_method":"public PackType peekNextType() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).peek();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n\n            switch(markerHighNibble)\n            {\n            case TINY_TEXT:   return PackType.TEXT;\n            case TINY_LIST:   return PackType.LIST;\n            case TINY_MAP:    return PackType.MAP;\n            case TINY_STRUCT: return PackType.STRUCT;\n            }\n\n            switch(markerByte)\n            {\n            case NULL:\n                return PackType.NULL;\n            case TRUE:\n            case FALSE:\n                return PackType.BOOLEAN;\n            case FLOAT_64:\n                return PackType.FLOAT;\n            case BYTES_8:\n            case BYTES_16:\n            case BYTES_32:\n                return PackType.BYTES;\n            case TEXT_8:\n            case TEXT_16:\n            case TEXT_32:\n                return PackType.TEXT;\n            case LIST_8:\n            case LIST_16:\n            case LIST_32:\n                return PackType.LIST;\n            case MAP_8:\n            case MAP_16:\n            case MAP_32:\n                return PackType.MAP;\n            case STRUCT_8:\n            case STRUCT_16:\n                return PackType.STRUCT;\n            default:\n                return PackType.INTEGER;\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private int unpackUINT16() throws IOException\n        {\n            ensure( 2 );\n            return buffer.getShort() & 0xFFFF;\n        }","id":103192,"modified_method":"private int unpackUINT16() throws IOException\n        {\n            return in.ensure( 2 ).getShort() & 0xFFFF;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private byte[] unpackBytes( int size ) throws IOException\n        {\n            if ( size == 0 ) return EMPTY_BYTE_ARRAY;\n            byte[] heapBuffer = new byte[size];\n            int index = 0;\n            while(index < size)\n            {\n                int toRead = Math.min( buffer.remaining(), size - index );\n                buffer.get( heapBuffer, index, toRead );\n                index += toRead;\n\n                if(buffer.remaining() == 0 && index < size)\n                {\n                    ensure( Math.min(size - index, buffer.capacity()) );\n                }\n            }\n            return heapBuffer;\n        }","id":103193,"modified_method":"private byte[] unpackBytes( int size ) throws IOException\n        {\n            if ( size == 0 ) return EMPTY_BYTE_ARRAY;\n            byte[] heapBuffer = new byte[size];\n            int index = 0;\n            while(index < size)\n            {\n                int toRead = Math.min( in.remaining(), size - index );\n                in.get( heapBuffer, index, toRead );\n                index += toRead;\n\n                if(in.remaining() == 0 && index < size)\n                {\n                    in.attemptUpTo( size - index );\n                }\n            }\n            return heapBuffer;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void packBytesHeader( int size ) throws IOException\n        {\n            if ( size <= Byte.MAX_VALUE )\n            {\n                ensure( 2 );\n                buffer.put( BYTES_8 );\n                buffer.put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                ensure( 3 );\n                buffer.put( BYTES_16 );\n                buffer.putShort( (short) size );\n            }\n            else\n            {\n                ensure( 5 );\n                buffer.put( BYTES_32 );\n                buffer.putInt( size );\n            }\n        }","id":103194,"modified_method":"public void packBytesHeader( int size ) throws IOException\n        {\n            if ( size <= Byte.MAX_VALUE )\n            {\n                out.ensure( 2 )\n                   .put( BYTES_8 )\n                   .put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                out.ensure( 3 )\n                   .put( BYTES_16 )\n                   .putShort( (short) size );\n            }\n            else\n            {\n                out.ensure( 5 )\n                   .put( BYTES_32 )\n                   .putInt( size );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void pack( long value ) throws IOException\n        {\n            if ( value >= MINUS_2_TO_THE_4 && value < PLUS_2_TO_THE_7)\n            {\n                ensure( 1 );\n                buffer.put( (byte) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_7 && value < MINUS_2_TO_THE_4 )\n            {\n                ensure( 2 );\n                buffer.put( INT_8 );\n                buffer.put( (byte) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_15 && value < PLUS_2_TO_THE_15 )\n            {\n                ensure( 3 );\n                buffer.put( INT_16 );\n                buffer.putShort( (short) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31 )\n            {\n                ensure( 5 );\n                buffer.put( INT_32 );\n                buffer.putInt( (int) value );\n            }\n            else\n            {\n                ensure( 9 );\n                buffer.put( INT_64 );\n                buffer.putLong( value );\n            }\n        }","id":103195,"modified_method":"public void pack( long value ) throws IOException\n        {\n            if ( value >= MINUS_2_TO_THE_4 && value < PLUS_2_TO_THE_7)\n            {\n                out.ensure( 1 )\n                   .put( (byte) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_7 && value < MINUS_2_TO_THE_4 )\n            {\n                out.ensure( 2 )\n                   .put( INT_8 )\n                   .put( (byte) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_15 && value < PLUS_2_TO_THE_15 )\n            {\n                out.ensure( 3 )\n                   .put( INT_16 )\n                   .putShort( (short) value );\n            }\n            else if ( value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31 )\n            {\n                out.ensure( 5 )\n                   .put( INT_32 )\n                   .putInt( (int) value );\n            }\n            else\n            {\n                out.ensure( 9 )\n                   .put( INT_64 )\n                   .putLong( value );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void packRaw( byte[] data ) throws IOException\n        {\n            int index = 0;\n            while(index < data.length)\n            {\n                int amountToWrite = Math.min( buffer.remaining(), data.length - index );\n\n                buffer.put( data, index, amountToWrite );\n                index += amountToWrite;\n\n                if(buffer.remaining() == 0)\n                {\n                    flush();\n                }\n            }\n        }","id":103196,"modified_method":"public void packRaw( byte[] data ) throws IOException\n        {\n            int index = 0;\n            while(index < data.length)\n            {\n                int amountToWrite = Math.min( out.remaining(), data.length - index );\n\n                out.put( data, index, amountToWrite );\n                index += amountToWrite;\n\n                if( out.remaining() == 0)\n                {\n                    flush();\n                }\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Packer( int bufferCapacity )\n        {\n            this.buffer = ByteBuffer.allocateDirect( bufferCapacity ).order( ByteOrder.BIG_ENDIAN );\n        }","id":103197,"modified_method":"public Packer( PackOutput out )\n        {\n            this.out = out;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public char unpackStructSignature() throws IOException\n        {\n            ensure( 1 );\n            return (char) buffer.get();\n        }","id":103198,"modified_method":"public char unpackStructSignature() throws IOException\n        {\n            return (char) in.ensure( 1 ).get();\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void pack( double value ) throws IOException\n        {\n            ensure( 9 );\n            buffer.put( FLOAT_64 );\n            buffer.putDouble( value );\n        }","id":103199,"modified_method":"public void pack( double value ) throws IOException\n        {\n            out.ensure( 9 )\n               .put( FLOAT_64 )\n               .putDouble( value );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public byte[] unpackUtf8() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_TEXT ) { return unpackBytes( markerLowNibble ); }\n            switch(markerByte)\n            {\n            case TEXT_8: return unpackBytes( unpackUINT8() );\n            case TEXT_16: return unpackBytes( unpackUINT16() );\n            case TEXT_32:\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return unpackBytes( (int) size );\n                }\n                else\n                {\n                    throw new Overflow( \"TEXT_32 too long for Java\" );\n                }\n            }\n            default: throw new Unexpected( \"Expected a string, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103200,"modified_method":"public byte[] unpackUtf8() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_TEXT ) { return unpackBytes( markerLowNibble ); }\n            switch(markerByte)\n            {\n            case TEXT_8: return unpackBytes( unpackUINT8() );\n            case TEXT_16: return unpackBytes( unpackUINT16() );\n            case TEXT_32:\n            {\n                long size = unpackUINT32();\n                if ( size <= Integer.MAX_VALUE )\n                {\n                    return unpackBytes( (int) size );\n                }\n                else\n                {\n                    throw new Overflow( \"TEXT_32 too long for Java\" );\n                }\n            }\n            default: throw new Unexpected( \"Expected a string, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long unpackMapHeader() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_MAP ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case MAP_8: return unpackUINT8();\n            case MAP_16: return unpackUINT16();\n            case MAP_32: return unpackUINT32();\n            default: throw new Unexpected( \"Expected a map, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103201,"modified_method":"public long unpackMapHeader() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_MAP ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case MAP_8: return unpackUINT8();\n            case MAP_16: return unpackUINT16();\n            case MAP_32: return unpackUINT32();\n            default: throw new Unexpected( \"Expected a map, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void packListHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                ensure( 1 );\n                buffer.put( (byte) (TINY_LIST | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                ensure( 2 );\n                buffer.put( LIST_8 );\n                buffer.put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                ensure( 3 );\n                buffer.put( LIST_16 );\n                buffer.putShort( (short) size );\n            }\n            else\n            {\n                ensure( 5 );\n                buffer.put( LIST_32 );\n                buffer.putInt( size );\n            }\n        }","id":103202,"modified_method":"public void packListHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                out.ensure( 1 )\n                   .put( (byte) (TINY_LIST | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                out.ensure( 2 )\n                   .put( LIST_8 )\n                   .put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                out.ensure( 3 )\n                   .put( LIST_16 )\n                   .putShort( (short) size );\n            }\n            else\n            {\n                out.ensure( 5 )\n                   .put( LIST_32 )\n                   .putInt( size );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long unpackLong() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            if ( markerByte >= MINUS_2_TO_THE_4) { return markerByte; }\n            switch(markerByte)\n            {\n            case INT_8:   ensure(1); return buffer.get();\n            case INT_16:  ensure(2); return buffer.getShort();\n            case INT_32:  ensure(4); return buffer.getInt();\n            case INT_64:  ensure(8); return buffer.getLong();\n            default: throw new Unexpected( \"Expected an integer, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103203,"modified_method":"public long unpackLong() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            if ( markerByte >= MINUS_2_TO_THE_4) { return markerByte; }\n            switch(markerByte)\n            {\n            case INT_8:   return in.ensure( 1 ).get();\n            case INT_16:  return in.ensure( 2 ).getShort();\n            case INT_32:  return in.ensure( 4 ).getInt();\n            case INT_64:  return in.ensure( 8 ).getLong();\n            default: throw new Unexpected( \"Expected an integer, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void packTextHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                ensure( 1 );\n                buffer.put( (byte) (TINY_TEXT | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                ensure( 2 );\n                buffer.put( TEXT_8 );\n                buffer.put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                ensure( 3 );\n                buffer.put( TEXT_16 );\n                buffer.putShort( (short) size );\n            }\n            else\n            {\n                ensure( 5 );\n                buffer.put( TEXT_32 );\n                buffer.putInt( size );\n            }\n        }","id":103204,"modified_method":"public void packTextHeader( int size ) throws IOException\n        {\n            if ( size < 0x10 )\n            {\n                out.ensure( 1 )\n                   .put( (byte) (TINY_TEXT | size) );\n            }\n            else if ( size <= Byte.MAX_VALUE )\n            {\n                out.ensure( 2 )\n                   .put( TEXT_8 )\n                   .put( (byte) size );\n            }\n            else if ( size <= Short.MAX_VALUE )\n            {\n                out.ensure( 3 )\n                   .put( TEXT_16 )\n                   .putShort( (short) size );\n            }\n            else\n            {\n                out.ensure( 5 )\n                   .put( TEXT_32 )\n                   .putInt( size );\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private long unpackUINT32() throws IOException\n        {\n            ensure( 4 );\n            return buffer.getInt() & 0xFFFFFFFFL;\n        }","id":103205,"modified_method":"private long unpackUINT32() throws IOException\n        {\n            return in.ensure( 4 ).getInt() & 0xFFFFFFFFL;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public long unpackStructHeader() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_STRUCT ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case STRUCT_8: return unpackUINT8();\n            case STRUCT_16: return unpackUINT16();\n            default: throw new Unexpected( \"Expected a struct, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103206,"modified_method":"public long unpackStructHeader() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n\n            if ( markerHighNibble == TINY_STRUCT ) { return markerLowNibble; }\n            switch(markerByte)\n            {\n            case STRUCT_8: return unpackUINT8();\n            case STRUCT_16: return unpackUINT16();\n            default: throw new Unexpected( \"Expected a struct, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private int unpackUINT8() throws IOException\n        {\n            ensure( 1 );\n            return buffer.get() & 0xFF;\n        }","id":103207,"modified_method":"private int unpackUINT8() throws IOException\n        {\n            return in.ensure( 1 ).get() & 0xFF;\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean hasNext() throws IOException\n        {\n            return buffer.remaining() > 0 || attempt( 1 );\n        }","id":103208,"modified_method":"public boolean hasNext() throws IOException\n        {\n            return in.remaining() > 0 || in.attempt( 1 );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void flush() throws IOException\n        {\n            buffer.flip();\n            do { channel.write( buffer ); } while( buffer.remaining() > 0 );\n            buffer.clear();\n        }","id":103209,"modified_method":"public void flush() throws IOException\n        {\n            out.flush();\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public boolean unpackBoolean() throws IOException\n        {\n            ensure( 1 );\n            final byte markerByte = buffer.get();\n            switch(markerByte)\n            {\n            case TRUE: return true;\n            case FALSE: return false;\n            default: throw new Unexpected( \"Expected a boolean, but got: \" + toHexString( markerByte ));\n            }\n        }","id":103210,"modified_method":"public boolean unpackBoolean() throws IOException\n        {\n            final byte markerByte = in.ensure( 1 ).get();\n            switch(markerByte)\n            {\n            case TRUE: return true;\n            case FALSE: return false;\n            default: throw new Unexpected( \"Expected a boolean, but got: \" + toHexString( markerByte ));\n            }\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void pack( boolean value ) throws IOException\n        {\n            ensure( 1 );\n            buffer.put( value ? TRUE : FALSE );\n        }","id":103211,"modified_method":"public void pack( boolean value ) throws IOException\n        {\n            out.ensure( 1 )\n               .put( value ? TRUE : FALSE );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Machine( int bufferSize )\n        {\n            this.output = new ByteArrayOutputStream();\n            this.writable = Channels.newChannel( this.output );\n            this.packer = new PackStream.Packer( this.writable, bufferSize );\n        }","id":103212,"modified_method":"public Machine( int bufferSize )\n        {\n            this.output = new ByteArrayOutputStream();\n            this.writable = Channels.newChannel( this.output );\n            this.packer = new PackStream.Packer( new BufferedChannelOutput( this.writable, bufferSize) );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Machine()\n        {\n            this.output = new ByteArrayOutputStream();\n            this.writable = Channels.newChannel( this.output );\n            this.packer = new PackStream.Packer( this.writable );\n        }","id":103213,"modified_method":"public Machine()\n        {\n            this.output = new ByteArrayOutputStream();\n            this.writable = Channels.newChannel( this.output );\n            this.packer = new PackStream.Packer( new BufferedChannelOutput( this.writable ) );\n        }","commit_id":"72c97b5670b75eed5b2e6cd206ea5486542b621e","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static KotlinModuleDescriptionGenerator.DependencyProvider getDependencyProvider(\n            final ModuleChunk chunk,\n            final boolean tests,\n            final VirtualFile mainOutputPath\n    ) {\n        return new KotlinModuleDescriptionGenerator.DependencyProvider() {\n            @Override\n            public void processClassPath(@NotNull KotlinModuleDescriptionGenerator.DependencyProcessor processor) {\n                // TODO: have a bootclasspath in script API\n                processor.processClassPathSection(\"Boot classpath\", ioFiles(chunk.getCompilationBootClasspathFiles()));\n\n                processor.processClassPathSection(\"Compilation classpath\", ioFiles(chunk.getCompilationClasspathFiles()));\n\n                // This is for java files in same roots\n                processor.processClassPathSection(\"Java classpath (for Java sources)\", ioFiles(Arrays.asList(chunk.getSourceRoots())));\n\n\n                if (tests && mainOutputPath != null) {\n                    processor.processClassPathSection(\"Main output\", Arrays.asList(ioFile(mainOutputPath)));\n                }\n\n                processor.processAnnotationRoots(getAnnotationRootPaths(chunk));\n            }\n        };\n    }","id":103214,"modified_method":"private static KotlinModuleDescriptionBuilder.DependencyProvider getDependencyProvider(\n            final ModuleChunk chunk,\n            final boolean tests,\n            final VirtualFile mainOutputPath\n    ) {\n        return new KotlinModuleDescriptionBuilder.DependencyProvider() {\n            @Override\n            public void processClassPath(@NotNull KotlinModuleDescriptionBuilder.DependencyProcessor processor) {\n                // TODO: have a bootclasspath in script API\n                processor.processClassPathSection(\"Boot classpath\", ioFiles(chunk.getCompilationBootClasspathFiles()));\n\n                processor.processClassPathSection(\"Compilation classpath\", ioFiles(chunk.getCompilationClasspathFiles()));\n\n                // This is for java files in same roots\n                processor.processClassPathSection(\"Java classpath (for Java sources)\", ioFiles(Arrays.asList(chunk.getSourceRoots())));\n\n\n                if (tests && mainOutputPath != null) {\n                    processor.processClassPathSection(\"Main output\", Arrays.asList(ioFile(mainOutputPath)));\n                }\n\n                processor.processAnnotationRoots(getAnnotationRootPaths(chunk));\n            }\n        };\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static File tryToWriteScriptFile(\n            CompileContext compileContext,\n            Chunk<Module> moduleChunk,\n            List<VirtualFile> files,\n            Module module,\n            boolean tests, VirtualFile mainOutput, File outputDir\n    ) {\n        List<File> sourceFiles = ContainerUtil.newArrayList(ioFiles(files));\n        ModuleChunk chunk = new ModuleChunk((CompileContextEx)compileContext, moduleChunk, Collections.<Module, List<VirtualFile>>emptyMap());\n        String moduleName = moduleChunk.getNodes().iterator().next().getName();\n        File outputDirectoryForTests = ioFile(compileContext.getModuleOutputDirectoryForTests(module));\n        File moduleOutputDirectory = ioFile(compileContext.getModuleOutputDirectory(module));\n\n        // Filter the output we are writing to\n        Set<File> outputDirectoriesToFilter = ContainerUtil.newHashSet(outputDirectoryForTests);\n        if (!tests) {\n            outputDirectoriesToFilter.add(moduleOutputDirectory);\n        }\n        CharSequence script = KotlinModuleScriptGenerator.INSTANCE.generateModuleScript(\n                moduleName,\n                moduleOutputDirectory.getAbsolutePath(),\n                getDependencyProvider(chunk, tests, mainOutput),\n                sourceFiles,\n                tests,\n                outputDirectoriesToFilter\n        );\n\n        File scriptFile = new File(outputDir, \"script.kts\");\n        try {\n            FileUtil.writeToFile(scriptFile, script.toString());\n        }\n        catch (IOException e) {\n            compileContext.addMessage(CompilerMessageCategory.ERROR, \"[Internal Error] Cannot write script to \" + scriptFile.getAbsolutePath(), \"\", -1, -1);\n            return null;\n        }\n        return scriptFile;\n    }","id":103215,"modified_method":"public static File tryToWriteScriptFile(\n            CompileContext compileContext,\n            Chunk<Module> moduleChunk,\n            List<VirtualFile> files,\n            Module module,\n            boolean tests, VirtualFile mainOutput, File outputDir\n    ) {\n        List<File> sourceFiles = ContainerUtil.newArrayList(ioFiles(files));\n        ModuleChunk chunk = new ModuleChunk((CompileContextEx)compileContext, moduleChunk, Collections.<Module, List<VirtualFile>>emptyMap());\n        String moduleName = moduleChunk.getNodes().iterator().next().getName();\n        File outputDirectoryForTests = ioFile(compileContext.getModuleOutputDirectoryForTests(module));\n        File moduleOutputDirectory = ioFile(compileContext.getModuleOutputDirectory(module));\n\n        // Filter the output we are writing to\n        Set<File> outputDirectoriesToFilter = ContainerUtil.newHashSet(outputDirectoryForTests);\n        if (!tests) {\n            outputDirectoriesToFilter.add(moduleOutputDirectory);\n        }\n        CharSequence script = KotlinModuleScriptBuilderFactory.INSTANCE.create().addModule(\n                moduleName,\n                moduleOutputDirectory.getAbsolutePath(),\n                getDependencyProvider(chunk, tests, mainOutput),\n                sourceFiles,\n                tests,\n                outputDirectoriesToFilter\n        ).asText();\n\n        File scriptFile = new File(outputDir, \"script.kts\");\n        try {\n            FileUtil.writeToFile(scriptFile, script.toString());\n        }\n        catch (IOException e) {\n            compileContext.addMessage(CompilerMessageCategory.ERROR, \"[Internal Error] Cannot write script to \" + scriptFile.getAbsolutePath(), \"\", -1, -1);\n            return null;\n        }\n        return scriptFile;\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    public ExitCode build(\n            CompileContext context,\n            ModuleChunk chunk,\n            DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder,\n            OutputConsumer outputConsumer\n    ) throws ProjectBuildException, IOException {\n        MessageCollector messageCollector = new MessageCollectorAdapter(context);\n        // Workaround for Android Studio\n        if (!isJavaPluginEnabled(context)) {\n            messageCollector.report(INFO, \"Kotlin JPS plugin is disabled\", CompilerMessageLocation.NO_LOCATION);\n            return ExitCode.NOTHING_DONE;\n        }\n\n        messageCollector.report(INFO, \"Kotlin JPS plugin version \" + KotlinVersion.VERSION, CompilerMessageLocation.NO_LOCATION);\n\n        if (chunk.getModules().size() > 1) {\n            // We do not support circular dependencies, but if they are present, we should not break the build,\n            // so we simply yield a warning and report NOTHING_DONE\n            messageCollector.report(\n                    WARNING, \"Circular dependencies are not supported. \" +\n                             \"The following modules depend on each other: \" + StringUtil.join(chunk.getModules(), MODULE_NAME, \", \") + \". \" +\n                             \"Kotlin is not compiled for these modules\",\n                    CompilerMessageLocation.NO_LOCATION);\n            return ExitCode.NOTHING_DONE;\n        }\n\n        ModuleBuildTarget representativeTarget = chunk.representativeTarget();\n\n        // For non-incremental build: take all sources\n        if (!dirtyFilesHolder.hasDirtyFiles()) {\n            return ExitCode.NOTHING_DONE;\n        }\n        List<File> sourceFiles = KotlinSourceFileCollector.getAllKotlinSourceFiles(representativeTarget);\n        //List<File> sourceFiles = KotlinSourceFileCollector.getDirtySourceFiles(dirtyFilesHolder);\n\n        if (sourceFiles.isEmpty()) {\n            return ExitCode.NOTHING_DONE;\n        }\n\n        File outputDir = representativeTarget.getOutputDir();\n\n        CompilerEnvironment environment = CompilerEnvironment.getEnvironmentFor(PathUtil.getKotlinPathsForJpsPluginOrJpsTests(), outputDir);\n        if (!environment.success()) {\n            environment.reportErrorsTo(messageCollector);\n            return ExitCode.ABORT;\n        }\n\n        assert outputDir != null : \"CompilerEnvironment must have checked for outputDir to be not null, but it didn't\";\n\n        OutputItemsCollectorImpl outputItemCollector = new OutputItemsCollectorImpl(outputDir);\n\n        if (JpsUtils.isJsKotlinModule(representativeTarget)) {\n            File outputFile = new File(outputDir, representativeTarget.getModule().getName() + \".js\");\n\n            KotlinCompilerRunner.runK2JsCompiler(\n                    messageCollector,\n                    environment,\n                    outputItemCollector,\n                    sourceFiles,\n                    JpsJsModuleUtils.getLibraryFilesAndDependencies(representativeTarget),\n                    outputFile);\n        }\n        else {\n            File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, representativeTarget, sourceFiles);\n\n            KotlinCompilerRunner.runK2JvmCompiler(\n                    messageCollector,\n                    environment,\n                    moduleFile,\n                    outputItemCollector,\n                    /*runOutOfProcess = */false);\n        }\n\n        for (SimpleOutputItem outputItem : outputItemCollector.getOutputs()) {\n            outputConsumer.registerOutputFile(\n                    representativeTarget,\n                    outputItem.getOutputFile(),\n                    paths(outputItem.getSourceFiles()));\n        }\n\n        return ExitCode.OK;\n    }","id":103216,"modified_method":"@Override\n    public ExitCode build(\n            CompileContext context,\n            ModuleChunk chunk,\n            DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder,\n            OutputConsumer outputConsumer\n    ) throws ProjectBuildException, IOException {\n        MessageCollector messageCollector = new MessageCollectorAdapter(context);\n        // Workaround for Android Studio\n        if (!isJavaPluginEnabled(context)) {\n            messageCollector.report(INFO, \"Kotlin JPS plugin is disabled\", CompilerMessageLocation.NO_LOCATION);\n            return ExitCode.NOTHING_DONE;\n        }\n\n        messageCollector.report(INFO, \"Kotlin JPS plugin version \" + KotlinVersion.VERSION, CompilerMessageLocation.NO_LOCATION);\n\n        ModuleBuildTarget representativeTarget = chunk.representativeTarget();\n\n        // For non-incremental build: take all sources\n        if (!dirtyFilesHolder.hasDirtyFiles()) {\n            return ExitCode.NOTHING_DONE;\n        }\n\n        File outputDir = representativeTarget.getOutputDir();\n\n        CompilerEnvironment environment = CompilerEnvironment.getEnvironmentFor(PathUtil.getKotlinPathsForJpsPluginOrJpsTests(), outputDir);\n        if (!environment.success()) {\n            environment.reportErrorsTo(messageCollector);\n            return ExitCode.ABORT;\n        }\n\n        assert outputDir != null : \"CompilerEnvironment must have checked for outputDir to be not null, but it didn't\";\n\n        OutputItemsCollectorImpl outputItemCollector = new OutputItemsCollectorImpl(outputDir);\n\n        if (JpsUtils.isJsKotlinModule(representativeTarget)) {\n            if (chunk.getModules().size() > 1) {\n                // We do not support circular dependencies, but if they are present, we do our best should not break the build,\n                // so we simply yield a warning and report NOTHING_DONE\n                messageCollector.report(\n                        WARNING, \"Circular dependencies are not supported. \" +\n                                 \"The following JS modules depend on each other: \" + StringUtil.join(chunk.getModules(), MODULE_NAME, \", \") + \". \" +\n                                 \"Kotlin is not compiled for these modules\",\n                        CompilerMessageLocation.NO_LOCATION);\n                return ExitCode.NOTHING_DONE;\n            }\n\n            List<File> sourceFiles = KotlinSourceFileCollector.getAllKotlinSourceFiles(representativeTarget);\n            //List<File> sourceFiles = KotlinSourceFileCollector.getDirtySourceFiles(dirtyFilesHolder);\n\n            if (sourceFiles.isEmpty()) {\n                return ExitCode.NOTHING_DONE;\n            }\n\n            File outputFile = new File(outputDir, representativeTarget.getModule().getName() + \".js\");\n\n            KotlinCompilerRunner.runK2JsCompiler(\n                    messageCollector,\n                    environment,\n                    outputItemCollector,\n                    sourceFiles,\n                    JpsJsModuleUtils.getLibraryFilesAndDependencies(representativeTarget),\n                    outputFile);\n        }\n        else {\n            if (chunk.getModules().size() > 1) {\n                messageCollector.report(\n                        WARNING, \"Circular dependencies are only partially supported. \" +\n                                 \"The following modules depend on each other: \" + StringUtil.join(chunk.getModules(), MODULE_NAME, \", \") + \". \" +\n                                 \"Kotlin will compile them, but some strange effect may happen\",\n                        CompilerMessageLocation.NO_LOCATION);\n            }\n\n            File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, chunk);\n            if (moduleFile == null) {\n                // No Kotlin sources found\n                return ExitCode.NOTHING_DONE;\n            }\n\n            KotlinCompilerRunner.runK2JvmCompiler(\n                    messageCollector,\n                    environment,\n                    moduleFile,\n                    outputItemCollector,\n                    /*runOutOfProcess = */false);\n        }\n\n        for (SimpleOutputItem outputItem : outputItemCollector.getOutputs()) {\n            outputConsumer.registerOutputFile(\n                    representativeTarget,\n                    outputItem.getOutputFile(),\n                    paths(outputItem.getSourceFiles()));\n        }\n\n        return ExitCode.OK;\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static DependencyProvider getKotlinModuleDependencies(final CompileContext context, final ModuleBuildTarget target) {\n        return new DependencyProvider() {\n            @Override\n            public void processClassPath(@NotNull KotlinModuleDescriptionGenerator.DependencyProcessor processor) {\n                processor.processClassPathSection(\"Classpath\", findClassPathRoots(target));\n                processor.processClassPathSection(\"Java Source Roots\", findSourceRoots(context, target));\n                processor.processAnnotationRoots(findAnnotationRoots(target));\n            }\n        };\n    }","id":103217,"modified_method":"private static DependencyProvider getKotlinModuleDependencies(final CompileContext context, final ModuleBuildTarget target) {\n        return new DependencyProvider() {\n            @Override\n            public void processClassPath(@NotNull DependencyProcessor processor) {\n                processor.processClassPathSection(\"Classpath\", findClassPathRoots(target));\n                processor.processClassPathSection(\"Java Source Roots\", findSourceRoots(context, target));\n                processor.processAnnotationRoots(findAnnotationRoots(target));\n            }\n        };\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static File generateModuleDescription(CompileContext context, ModuleBuildTarget target, List<File> sourceFiles)\n            throws IOException\n    {\n        File outputDir = target.getOutputDir();\n        if (outputDir == null) {\n            throw new IllegalStateException(\"No output directory found for \" + target);\n\n        }\n        CharSequence moduleScriptText = GENERATOR.generateModuleScript(\n                target.getId(),\n                outputDir.getAbsolutePath(),\n                getKotlinModuleDependencies(context, target),\n                sourceFiles,\n                target.isTests(),\n                // this excludes the output directory from the class path, to be removed for true incremental compilation\n                Collections.singleton(outputDir)\n        );\n\n        File scriptFile = new File(outputDir, \"script.\" + GENERATOR.getFileExtension());\n\n        writeScriptToFile(context, moduleScriptText, scriptFile);\n\n        return scriptFile;\n    }","id":103218,"modified_method":"@Nullable\n    public static File generateModuleDescription(CompileContext context, ModuleChunk chunk)\n            throws IOException\n    {\n        KotlinModuleDescriptionBuilder builder = FACTORY.create();\n\n        boolean noSources = true;\n\n        for (ModuleBuildTarget target : chunk.getTargets()) {\n            File outputDir = getOutputDir(target);\n\n            List<File> sourceFiles = KotlinSourceFileCollector.getAllKotlinSourceFiles(target);\n            noSources &= sourceFiles.isEmpty();\n\n            builder.addModule(\n                    target.getId(),\n                    outputDir.getAbsolutePath(),\n                    getKotlinModuleDependencies(context, target),\n                    sourceFiles,\n                    target.isTests(),\n                    // this excludes the output directory from the class path, to be removed for true incremental compilation\n                    Collections.singleton(outputDir)\n            );\n        }\n\n        if (noSources) return null;\n\n        File scriptFile = new File(getOutputDir(chunk.representativeTarget()), \"script.\" + FACTORY.getFileExtension());\n\n        writeScriptToFile(context, builder.asText(), scriptFile);\n\n        return scriptFile;\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testFiltered() throws Exception {\n        String actual = KotlinModuleXmlGenerator.INSTANCE.generateModuleScript(\n                \"name\",\n                \"output\",\n                new KotlinModuleDescriptionGenerator.DependencyProvider() {\n                    @Override\n                    public void processClassPath(@NotNull KotlinModuleDescriptionGenerator.DependencyProcessor processor) {\n                        processor.processAnnotationRoots(Arrays.asList(new File(\"a1/f1\"), new File(\"a2\")));\n                        processor.processClassPathSection(\"s1\", Arrays.asList(new File(\"cp1\"), new File(\"cp2\")));\n                    }\n                },\n                Arrays.asList(new File(\"s1\"), new File(\"s2\")),\n                false,\n                Collections.singleton(new File(\"cp1\"))).toString();\n        String expected = FileUtil.loadFile(new File(\"idea/testData/modules.xml/filtered.xml\"));\n        UsefulTestCase.assertSameLines(expected, actual);\n    }","id":103219,"modified_method":"public void testFiltered() throws Exception {\n        String actual = KotlinModuleXmlBuilderFactory.INSTANCE.create().addModule(\n                \"name\",\n                \"output\",\n                new KotlinModuleDescriptionBuilder.DependencyProvider() {\n                    @Override\n                    public void processClassPath(@NotNull KotlinModuleDescriptionBuilder.DependencyProcessor processor) {\n                        processor.processAnnotationRoots(Arrays.asList(new File(\"a1/f1\"), new File(\"a2\")));\n                        processor.processClassPathSection(\"s1\", Arrays.asList(new File(\"cp1\"), new File(\"cp2\")));\n                    }\n                },\n                Arrays.asList(new File(\"s1\"), new File(\"s2\")),\n                false,\n                Collections.singleton(new File(\"cp1\"))).asText().toString();\n        String expected = FileUtil.loadFile(new File(\"idea/testData/modules.xml/filtered.xml\"));\n        UsefulTestCase.assertSameLines(expected, actual);\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testBasic() throws Exception {\n        String actual = KotlinModuleXmlGenerator.INSTANCE.generateModuleScript(\n                \"name\",\n                \"output\",\n                new KotlinModuleDescriptionGenerator.DependencyProvider() {\n                    @Override\n                    public void processClassPath(@NotNull KotlinModuleDescriptionGenerator.DependencyProcessor processor) {\n                        processor.processAnnotationRoots(Arrays.asList(new File(\"a1/f1\"), new File(\"a2\")));\n                        processor.processClassPathSection(\"s1\", Arrays.asList(new File(\"cp1\"), new File(\"cp2\")));\n                    }\n                },\n                Arrays.asList(new File(\"s1\"), new File(\"s2\")),\n                false,\n                Collections.<File>emptySet()).toString();\n        String expected = FileUtil.loadFile(new File(\"idea/testData/modules.xml/basic.xml\"));\n        UsefulTestCase.assertSameLines(expected, actual);\n    }","id":103220,"modified_method":"public void testBasic() throws Exception {\n        String actual = KotlinModuleXmlBuilderFactory.INSTANCE.create().addModule(\n                \"name\",\n                \"output\",\n                new KotlinModuleDescriptionBuilder.DependencyProvider() {\n                    @Override\n                    public void processClassPath(@NotNull KotlinModuleDescriptionBuilder.DependencyProcessor processor) {\n                        processor.processAnnotationRoots(Arrays.asList(new File(\"a1/f1\"), new File(\"a2\")));\n                        processor.processClassPathSection(\"s1\", Arrays.asList(new File(\"cp1\"), new File(\"cp2\")));\n                    }\n                },\n                Arrays.asList(new File(\"s1\"), new File(\"s2\")),\n                false,\n                Collections.<File>emptySet()).asText().toString();\n        String expected = FileUtil.loadFile(new File(\"idea/testData/modules.xml/basic.xml\"));\n        UsefulTestCase.assertSameLines(expected, actual);\n    }","commit_id":"60425b15e6dcf3b35965a7f0817fdeaf78aa6263","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void readMoreUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n        int age = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        short gender = LEBinaryTools.getUByte(block, offset);\n        infoData.add(genders[gender]);\n        offset += 1;\n\n        offset = readStrings(block, tmp, offset);\n        try\n        {\n            infoData.add(new ServerStoredDetails.WebPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n\n        int birthdayYear = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        short birthdayMonth = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        short birthdayDay = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        if(birthdayYear == 0 || birthdayMonth == 0 || birthdayDay == 0)\n        {\n            infoData.add(new ServerStoredDetails.BirthDateDetail(null));\n        }\n        else\n        {\n            Calendar birthDate = Calendar.getInstance();\n            birthDate.set(Calendar.YEAR, birthdayYear);\n            birthDate.set(Calendar.MONTH, birthdayMonth);\n            birthDate.set(Calendar.DAY_OF_MONTH, birthdayDay);\n\n            infoData.add(new ServerStoredDetails.BirthDateDetail(birthDate));\n        }\n\n        short speakingLanguage1 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        infoData.add(new ServerStoredDetails.SpokenLanguageDetail(\n            spokenLanguages[speakingLanguage1]));\n\n        short speakingLanguage2 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        infoData.add(new ServerStoredDetails.SpokenLanguageDetail(\n            spokenLanguages[speakingLanguage2]));\n\n        short speakingLanguage3 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        infoData.add(new ServerStoredDetails.SpokenLanguageDetail(\n            spokenLanguages[speakingLanguage3]));\n\n        int moreInfoUnknown = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        offset = readStrings(block, tmp, offset);\n        infoData.add(new OriginCityDetail(tmp[0]));\n\n        offset = readStrings(block, tmp, offset);\n        infoData.add(new OriginProvinceDetail(tmp[0]));\n\n        int originCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        infoData.add(new OriginCountryDetail(getCountry(originCountryCode)));\n\n        short userGMTOffset = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        TimeZone userTimeZone = null;\n        if(userGMTOffset >= 0)\n            userTimeZone = TimeZone.getTimeZone(\"GMT+\" + userGMTOffset);\n        else\n            userTimeZone = TimeZone.getTimeZone(\"GMT\" + userGMTOffset);\n\n        infoData.add(new ServerStoredDetails.TimeZoneDetail(\"GMT Offest\", userTimeZone));\n    }","id":103221,"modified_method":"private void readMoreUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n//        int age = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        short genderCode = LEBinaryTools.getUByte(block, offset);\n        ServerStoredDetails.GenderDetail gender = genders[genderCode];\n        if(gender != null)\n            infoData.add(gender);\n        offset += 1;\n\n        offset = readStrings(block, tmp, offset);\n        try\n        {\n            if(tmp[0] != null)\n                infoData.add(new ServerStoredDetails.WebPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n\n        int birthdayYear = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        short birthdayMonth = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        short birthdayDay = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        if(birthdayYear != 0 && birthdayMonth != 0 && birthdayDay != 0)\n        {\n            Calendar birthDate = Calendar.getInstance();\n            birthDate.set(Calendar.YEAR, birthdayYear);\n            birthDate.set(Calendar.MONTH, birthdayMonth);\n            birthDate.set(Calendar.DAY_OF_MONTH, birthdayDay);\n\n            infoData.add(new ServerStoredDetails.BirthDateDetail(birthDate));\n        }\n\n        short speakingLanguage1 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        logger.trace(\"read lang 1 \" + speakingLanguage1);\n        Locale spokenLanguage1 = getSpokenLanguage(speakingLanguage1);\n        if(spokenLanguage1 != null)\n        infoData.add(\n            new ServerStoredDetails.SpokenLanguageDetail(spokenLanguage1));\n\n        short speakingLanguage2 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        logger.trace(\"read lang 2 \" + speakingLanguage2);\n        Locale spokenLanguage2 = getSpokenLanguage(speakingLanguage2);\n        if(spokenLanguage2 != null)\n        infoData.add(\n            new ServerStoredDetails.SpokenLanguageDetail(spokenLanguage2));\n\n        short speakingLanguage3 = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n        logger.trace(\"read lang 3 \" + speakingLanguage3);\n        Locale spokenLanguage3 = getSpokenLanguage(speakingLanguage3);\n        if(spokenLanguage3 != null)\n        infoData.add(\n            new ServerStoredDetails.SpokenLanguageDetail(spokenLanguage3));\n\n//        int moreInfoUnknown = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        offset = readStrings(block, tmp, offset);\n        if(tmp[0] != null)\n            infoData.add(new OriginCityDetail(tmp[0]));\n\n        offset = readStrings(block, tmp, offset);\n        if(tmp[0] != null)\n            infoData.add(new OriginProvinceDetail(tmp[0]));\n\n        int originCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        Locale originCountryLocale = getCountry(originCountryCode);\n        if(originCountryLocale != null)\n            infoData.add(new OriginCountryDetail(originCountryLocale));\n\n        short userGMTOffset = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        TimeZone userTimeZone = null;\n        if(userGMTOffset >= 0)\n            userTimeZone = TimeZone.getTimeZone(\"GMT+\" + userGMTOffset);\n        else\n            userTimeZone = TimeZone.getTimeZone(\"GMT\" + userGMTOffset);\n\n        infoData.add(new ServerStoredDetails.TimeZoneDetail(\"GMT Offest\", userTimeZone));\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"protected Vector getInfoForRequest(int requestID)\n    {\n        Vector res = (Vector) retreivedInfo.get(new Integer(requestID));\n\n        if (res == null)\n        {\n            // this indicates that the info data\n            // doesn't exists, so this is the first packet\n            // from the sequence (basic info)\n\n            res = new Vector();\n            retreivedInfo.put(new Integer(requestID), res);\n        }\n\n        return res;\n    }","id":103222,"modified_method":"protected List getInfoForRequest(int requestID)\n    {\n        List res = (List) retreivedInfo.get(new Integer(requestID));\n\n        if (res == null)\n        {\n            // this indicates that the info data\n            // doesn't exists, so this is the first packet\n            // from the sequence (basic info)\n\n            res = new LinkedList();\n            retreivedInfo.put(new Integer(requestID), res);\n        }\n\n        return res;\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readHomePageUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n\n        //1-enabled, 0-disabled\n        short enabled = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        int homePageCategory = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        try\n        {\n            infoData.add(new ServerStoredDetails.WebPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n    }","id":103223,"modified_method":"private void readHomePageUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n\n        //1-enabled, 0-disabled\n//        short enabled = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n//        int homePageCategory = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        try\n        {\n            if(tmp[0] != null)\n                infoData.add(new ServerStoredDetails.WebPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"public FullInfoCmd(String senderUin, Vector changedData, boolean isToBeCleared)\n    {\n        super(21,2);\n        this.senderUin = senderUin;\n\n        Iterator iter = changedData.iterator();\n        while(iter.hasNext())\n        {\n            ServerStoredDetails.GenericDetail item =\n                (ServerStoredDetails.GenericDetail)iter.next();\n\n            if(isToBeCleared)\n                changeDataTlvs.add(getClearTlv(item));\n            else\n                changeDataTlvs.add(getTlvForChange(item));\n        }\n    }","id":103224,"modified_method":"public FullInfoCmd(String senderUin, List changedData, List toBeCleared)\n    {\n        super(21,2);\n        this.senderUin = senderUin;\n\n        // if toBeCleared == null. make it empty one\n        if(toBeCleared == null)\n            toBeCleared = new ArrayList();\n\n        // fix the spoken languages must be 3\n        int lastSpokenIndex = -1;\n        int countOfLanguages = 0;\n        boolean isLanguageFound = false;\n        for(int i = 0; i < changedData.size(); i++)\n        {\n            Object item = changedData.get(i);\n            if(item instanceof ServerStoredDetails.SpokenLanguageDetail)\n            {\n                isLanguageFound = true;\n                lastSpokenIndex = i;\n                countOfLanguages++;\n            }\n        }\n\n        if(isLanguageFound)\n        {\n            for (int i = countOfLanguages; i < 3; i++)\n            {\n                lastSpokenIndex++;\n                changedData.add(lastSpokenIndex,\n                                new ServerStoredDetails.SpokenLanguageDetail(null));\n            }\n        }\n\n        Iterator iter = changedData.iterator();\n        while(iter.hasNext())\n        {\n            ServerStoredDetails.GenericDetail item =\n                (ServerStoredDetails.GenericDetail)iter.next();\n\n            if(toBeCleared.contains(item))\n                changeDataTlvs.add(getClearTlv(item));\n            else\n                changeDataTlvs.add(getTlvForChange(item));\n        }\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private DetailTlv getClearTlv(ServerStoredDetails.GenericDetail detail)\n    {\n        int typeOfDetail = ((int[])supportedTypes.get(detail.getClass()))[1];\n\n        DetailTlv result = new DetailTlv(((int[])supportedTypes.get(detail.getClass()))[1]);\n\n        switch(typeOfDetail)\n        {\n            case 0x01A4 : //CountryDetail\n            case 0x0334 : //OriginCountryDetail\n            case 0x02B2 : //WorkCountryDetail\n                result.writeUShort(0);break;\n\n            case 0x0186 : //SpokenLanguageDetail\n                result.writeUShort(0);\n            case 0x017C : //GenderDetail\n                result.writeUByte(0);\n            case 0x023A : //BirthDateDetail\n                result.writeUShort(0);\n                result.writeUShort(0);\n                result.writeUShort(0);\n            case 0x01CC : //WorkOcupationDetail\n                result.writeUShort(0);\n            case 0x01EA : //InterestDetail\n                result.writeUShort(0);\n                result.writeString(\"\");\n            case 0x0316 :\n                result.writeUByte(0);\n            default :\n                result.writeString(\"\");\n        }\n\n        return result;\n    }","id":103225,"modified_method":"private DetailTlv getClearTlv(ServerStoredDetails.GenericDetail detail)\n    {\n        int typeOfDetail = ((int[])supportedTypes.get(detail.getClass()))[1];\n\n        DetailTlv result = new DetailTlv(((int[])supportedTypes.get(detail.getClass()))[1]);\n\n        switch(typeOfDetail)\n        {\n            case 0x01A4 : //CountryDetail\n            case 0x0334 : //OriginCountryDetail\n            case 0x02B2 : //WorkCountryDetail\n                result.writeUShort(0);break;\n\n            case 0x0186 : //SpokenLanguageDetail\n                logger.trace(\"write lang 0\");\n                result.writeUShort(0);\n            case 0x017C : //GenderDetail\n                result.writeUByte(0);\n            case 0x023A : //BirthDateDetail\n                result.writeUShort(0);\n                result.writeUShort(0);\n                result.writeUShort(0);\n            case 0x01CC : //WorkOcupationDetail\n                result.writeUShort(0);\n            case 0x01EA : //InterestDetail\n                result.writeUShort(0);\n                result.writeString(\"\");\n            case 0x0316 :\n                result.writeUByte(0);\n            default :\n                result.writeString(\"\");\n        }\n\n        return result;\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private DetailTlv getTlvForChange(ServerStoredDetails.GenericDetail detail)\n    {\n        int typeOfDetail = ((int[])supportedTypes.get(detail.getClass()))[1];\n\n        DetailTlv result = new DetailTlv(((int[])supportedTypes.get(detail.getClass()))[1]);\n\n        switch(typeOfDetail)\n        {\n            case 0x01A4 : //CountryDetail\n            case 0x0334 : //OriginCountryDetail\n            case 0x02B2 : //WorkCountryDetail\n                result.writeUShort(getCountryCode(((ServerStoredDetails.LocaleDetail)detail).getLocale()));break;\n\n            case 0x0186 : //SpokenLanguageDetail\n                writeLanguageCode((ServerStoredDetails.LocaleDetail)detail, result);\n            case 0x017C : //GenderDetail\n                writeGenderCode((ServerStoredDetails.GenderDetail)detail, result);\n            case 0x023A : //BirthDateDetail\n                writeCalendarCode((ServerStoredDetails.CalendarDetail)detail, result);\n            case 0x01CC : //WorkOcupationDetail\n                writeOccupationCode((WorkOcupationDetail)detail, result);\n            case 0x01EA : //InterestDetail\n                writeInterestCode((InterestDetail)detail, result);\n            default :\n                writeGenericDetail(detail, result);\n        }\n\n        return result;\n    }","id":103226,"modified_method":"private DetailTlv getTlvForChange(ServerStoredDetails.GenericDetail detail)\n    {\n        int typeOfDetail = ((int[])supportedTypes.get(detail.getClass()))[1];\n\n        DetailTlv result = new DetailTlv(typeOfDetail);\n\n        switch(typeOfDetail)\n        {\n            case 0x01A4 : //CountryDetail\n            case 0x0334 : //OriginCountryDetail\n            case 0x02B2 : //WorkCountryDetail\n                result.writeUShort(getCountryCode(((ServerStoredDetails.LocaleDetail)detail).getLocale()));break;\n\n            case 0x0186 : //SpokenLanguageDetail\n                writeLanguageCode((ServerStoredDetails.LocaleDetail)detail, result);break;\n            case 0x017C : //GenderDetail\n                writeGenderCode((ServerStoredDetails.GenderDetail)detail, result);break;\n            case 0x023A : //BirthDateDetail\n                writeCalendarCode((ServerStoredDetails.CalendarDetail)detail, result);break;\n            case 0x01CC : //WorkOcupationDetail\n                writeOccupationCode((WorkOcupationDetail)detail, result);break;\n            case 0x01EA : //InterestDetail\n                writeInterestCode((InterestDetail)detail, result);break;\n            default :\n                writeGenericDetail(detail, result);\n        }\n\n        return result;\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void writeLanguageCode(ServerStoredDetails.LocaleDetail detail, DetailTlv tlv)\n    {\n        String newLang = detail.getLocale().getLanguage();\n        for(int i = 0; i < spokenLanguages.length; i++)\n        {\n            if(spokenLanguages[i].getLanguage().equals(newLang))\n            {\n                tlv.writeUShort(i);\n                return;\n            }\n        }\n    }","id":103227,"modified_method":"private void writeLanguageCode(ServerStoredDetails.LocaleDetail detail, DetailTlv tlv)\n    {\n        Locale newLang = detail.getLocale();\n        if(newLang == null)\n        {\n            // this indicates that we must set language as not specified\n            tlv.writeUShort(0);\n            logger.trace(\"write lang 0\");\n        }\n        else\n        {\n            for (int i = 1; i < spokenLanguages.length; i++)\n            {\n                // indicating that language is not set\n                if (getSpokenLanguage(i).equals(newLang))\n                {\n                    logger.trace(\"write lang \" + i);\n                    tlv.writeUShort(i);\n                    return;\n                }\n            }\n        }\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"public Vector getInfo()\n    {\n        return getInfoForRequest(getRequestID());\n    }","id":103228,"modified_method":"public List getInfo()\n    {\n        return getInfoForRequest(getRequestID());\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readInterestsUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n        short interestsCount = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        String[] interests = new String[interestsCount];\n        int[] categories = new int[interestsCount];\n\n        for (int i = 0; i < interestsCount; i++)\n        {\n            // per interest\n            int categoty = LEBinaryTools.getUShort(block, offset);\n            offset += 2;\n\n            offset = readStrings(block, tmp, offset);\n\n            if(categoty != 0)\n            {\n                // as the categories are between 100 and 150 we shift them\n                // because their string representations are stored in array\n                categoty = categoty - 99;\n            }\n            infoData.add(new InterestDetail(tmp[0], interestsCategories[categoty]));\n        }\n    }","id":103229,"modified_method":"private void readInterestsUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n        short interestsCount = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n//        String[] interests = new String[interestsCount];\n//        int[] categories = new int[interestsCount];\n\n        for (int i = 0; i < interestsCount; i++)\n        {\n            // per interest\n            int categoty = LEBinaryTools.getUShort(block, offset);\n            offset += 2;\n\n            offset = readStrings(block, tmp, offset);\n\n            if(categoty != 0)\n            {\n                // as the categories are between 100 and 150 we shift them\n                // because their string representations are stored in array\n                categoty = categoty - 99;\n            }\n            infoData.add(new InterestDetail(tmp[0], interestsCategories[categoty]));\n        }\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readUserAboutInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        infoData.add(new NotesDetail(tmp[0]));\n    }","id":103230,"modified_method":"private void readUserAboutInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        if(tmp[0] != null)\n            infoData.add(new NotesDetail(tmp[0]));\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readEmailUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n        short emailCount = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n        String[] emails = new String[emailCount];\n        short[] emailRights = new short[emailCount];\n\n        for (int i = 0; i < emailCount; i++)\n        {\n            // per email rights\n            short publish = LEBinaryTools.getUByte(block, offset);\n            offset += 1;\n\n            offset = readStrings(block, tmp, offset);\n            infoData.add(new ServerStoredDetails.EmailAddressDetail(tmp[0]));\n            emailRights[i] = publish;\n        }\n    }","id":103231,"modified_method":"private void readEmailUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n        String[] tmp = new String[1];\n\n        short emailCount = LEBinaryTools.getUByte(block, offset);\n        offset += 1;\n\n//        short[] emailRights = new short[emailCount];\n        for (int i = 0; i < emailCount; i++)\n        {\n            // per email rights\n            short publish = LEBinaryTools.getUByte(block, offset);\n            offset += 1;\n\n            offset = readStrings(block, tmp, offset);\n            if(tmp[0] != null)\n                infoData.add(new ServerStoredDetails.EmailAddressDetail(tmp[0]));\n//            emailRights[i] = publish;\n        }\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readWorkUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n\n        String[] workAddress = new String[6];\n        offset = readStrings(block, workAddress, offset);\n        infoData.add(new ServerStoredDetails.WorkCityDetail(workAddress[0]));\n        infoData.add(new ServerStoredDetails.WorkProvinceDetail(workAddress[1]));\n        infoData.add(new ServerStoredDetails.WorkPhoneDetail(workAddress[2]));\n        infoData.add(new WorkFaxDetail(workAddress[3]));\n        infoData.add(new ServerStoredDetails.WorkAddressDetail(workAddress[4]));\n        infoData.add(new ServerStoredDetails.WorkPostalCodeDetail(workAddress[5]));\n\n        int workCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        infoData.add(\n            new ServerStoredDetails.WorkCountryDetail(getCountry(workCountryCode)));\n\n        String[] workInfo = new String[3];\n        offset = readStrings(block, workInfo, offset);\n        infoData.add(new ServerStoredDetails.WorkOrganizationNameDetail(workInfo[0]));\n        infoData.add(new WorkDepartmentNameDetail(workInfo[1]));\n        infoData.add(new WorkPositionNameDetail(workInfo[2]));\n\n        int workOccupationCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        if(workOccupationCode == 99)\n            infoData.add(new WorkOcupationDetail(occupations[occupations.length - 1]));\n        else\n            infoData.add(new WorkOcupationDetail(occupations[workOccupationCode]));\n\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        try\n        {\n            infoData.add(new ServerStoredDetails.WorkPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n    }","id":103232,"modified_method":"private void readWorkUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        int offset = 1;\n\n        String[] workAddress = new String[6];\n        offset = readStrings(block, workAddress, offset);\n        if(workAddress[0] != null)\n            infoData.add(new ServerStoredDetails.WorkCityDetail(workAddress[0]));\n        if(workAddress[1] != null)\n            infoData.add(new ServerStoredDetails.WorkProvinceDetail(workAddress[1]));\n        if(workAddress[2] != null)\n            infoData.add(new ServerStoredDetails.WorkPhoneDetail(workAddress[2]));\n        if(workAddress[3] != null)\n            infoData.add(new WorkFaxDetail(workAddress[3]));\n        if(workAddress[4] != null)\n            infoData.add(new ServerStoredDetails.WorkAddressDetail(workAddress[4]));\n        if(workAddress[5] != null)\n            infoData.add(new ServerStoredDetails.WorkPostalCodeDetail(workAddress[5]));\n\n        int workCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        Locale workCountry = getCountry(workCountryCode);\n        if(workCountry != null)\n            infoData.add(new ServerStoredDetails.WorkCountryDetail(workCountry));\n\n        String[] workInfo = new String[3];\n        offset = readStrings(block, workInfo, offset);\n        if(workInfo[0] != null)\n            infoData.add(new ServerStoredDetails.WorkOrganizationNameDetail(workInfo[0]));\n        if(workInfo[1] != null)\n            infoData.add(new WorkDepartmentNameDetail(workInfo[1]));\n        if(workInfo[2] != null)\n            infoData.add(new WorkPositionNameDetail(workInfo[2]));\n\n        int workOccupationCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        if(workOccupationCode == 99)\n            infoData.add(new WorkOcupationDetail(occupations[occupations.length - 1]));\n        else\n            infoData.add(new WorkOcupationDetail(occupations[workOccupationCode]));\n\n        String[] tmp = new String[1];\n        offset = readStrings(block, tmp, offset);\n\n        try\n        {\n            if(tmp[0] != null)\n                infoData.add(new ServerStoredDetails.WorkPageDetail(new URL(tmp[0])));\n        }\n        catch (MalformedURLException ex)\n        {}\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void readBasicUserInfo(ByteBlock block, int requestID)\n    {\n        Vector infoData = getInfoForRequest(requestID);\n\n        // sequence of 11 String fields\n        String bscInfo[] = new String[11];\n        int offset = readStrings(block, bscInfo, 1);\n\n        int homeCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        infoData.add(new ServerStoredDetails.CountryDetail(getCountry(homeCountryCode)));\n\n        // the following are not used\n//        short GMT_Offset = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short authFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short webAwareFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short directConnectionPermissionsFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short publishPrimaryEmailFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n\n\n        // everything is read lets store it\n        infoData.add(new ServerStoredDetails.NicknameDetail(bscInfo[0]));\n        infoData.add(new ServerStoredDetails.FirstNameDetail(bscInfo[1]));\n        infoData.add(new ServerStoredDetails.LastNameDetail(bscInfo[2]));\n        infoData.add(new ServerStoredDetails.EmailAddressDetail(bscInfo[3]));\n        infoData.add(new ServerStoredDetails.CityDetail(bscInfo[4]));\n        infoData.add(new ServerStoredDetails.ProvinceDetail(bscInfo[5]));\n        infoData.add(new ServerStoredDetails.PhoneNumberDetail(bscInfo[6]));\n        infoData.add(new ServerStoredDetails.FaxDetail(bscInfo[7]));\n        infoData.add(new ServerStoredDetails.AddressDetail(bscInfo[8]));\n        infoData.add(new ServerStoredDetails.MobilePhoneDetail(bscInfo[9]));\n        infoData.add(new ServerStoredDetails.PostalCodeDetail(bscInfo[10]));\n    }","id":103233,"modified_method":"private void readBasicUserInfo(ByteBlock block, int requestID)\n    {\n        List infoData = getInfoForRequest(requestID);\n\n        // sequence of 11 String fields\n        String bscInfo[] = new String[11];\n        int offset = readStrings(block, bscInfo, 1);\n\n        int homeCountryCode = LEBinaryTools.getUShort(block, offset);\n        offset += 2;\n        Locale countryCodeLocale = getCountry(homeCountryCode);\n        if(countryCodeLocale != null)\n            infoData.add(new ServerStoredDetails.CountryDetail(countryCodeLocale));\n\n        // the following are not used\n//        short GMT_Offset = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short authFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short webAwareFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short directConnectionPermissionsFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n//        short publishPrimaryEmailFlag = LEBinaryTools.getUByte(block, offset);\n//        offset++;\n\n        // everything is read lets store it\n        if(bscInfo[0] != null)\n            infoData.add(new ServerStoredDetails.NicknameDetail(bscInfo[0]));\n        if(bscInfo[1] != null)\n            infoData.add(new ServerStoredDetails.FirstNameDetail(bscInfo[1]));\n        if(bscInfo[2] != null)\n            infoData.add(new ServerStoredDetails.LastNameDetail(bscInfo[2]));\n        if(bscInfo[3] != null)\n            infoData.add(new ServerStoredDetails.EmailAddressDetail(bscInfo[3]));\n        if(bscInfo[4] != null)\n            infoData.add(new ServerStoredDetails.CityDetail(bscInfo[4]));\n        if(bscInfo[5] != null)\n            infoData.add(new ServerStoredDetails.ProvinceDetail(bscInfo[5]));\n        if(bscInfo[6] != null)\n            infoData.add(new ServerStoredDetails.PhoneNumberDetail(bscInfo[6]));\n        if(bscInfo[7] != null)\n            infoData.add(new ServerStoredDetails.FaxDetail(bscInfo[7]));\n        if(bscInfo[8] != null)\n            infoData.add(new ServerStoredDetails.AddressDetail(bscInfo[8]));\n        if(bscInfo[9] != null)\n            infoData.add(new ServerStoredDetails.MobilePhoneDetail(bscInfo[9]));\n        if(bscInfo[10] != null)\n            infoData.add(new ServerStoredDetails.PostalCodeDetail(bscInfo[10]));\n    }","commit_id":"9205c119794128e79735468c88ba0af4d62d6396","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Handle server requests.\n     *\n     * @param mapping The ActionMapping used to select this instance\n     * @param form    The optional ActionForm bean for this request (if any)\n     * @param req     The HTTP request we are processing\n     * @param resp    The HTTP response we are creating\n     * @throws IOException      if an input/output error occurs\n     * @throws ServletException if a servlet exception occurs\n     */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm form,\n                                 HttpServletRequest req,\n                                 HttpServletResponse resp)\n            throws Exception, ServletException {\n        String action = mapping.getName();\n\n        MonitorPlugin monitor = null;\n        FileUploadPlugin fileupload = null;\n        XWikiContext context = null;\n\n        try {\n            XWikiRequest request = new XWikiServletRequest(req);\n            XWikiResponse response = new XWikiServletResponse(resp);\n            context = Utils.prepareContext(mapping.getName(), request, response,\n                    new XWikiServletContext(servlet.getServletContext()));\n\n            // Add the form to the context\n            context.setForm((XWikiForm) form);\n            XWiki xwiki = null;\n            try {\n                xwiki = XWiki.getXWiki(context);\n            } catch (XWikiException e) {\n                if (e.getCode() == XWikiException.ERROR_XWIKI_DOES_NOT_EXIST) {\n                    // redirect\n                    String redirect = context.getWiki().Param(\"xwiki.virtual.redirect\");\n                    response.sendRedirect(redirect);\n                    return null;\n                } else\n                    throw e;\n            }\n\n            // Parses multipart so that parms in multipart are available for all actions\n            fileupload = Utils.handleMultipart(req, context);\n\n            XWikiURLFactory urlf = xwiki.getURLFactoryService().createURLFactory(context.getMode(), context);\n            context.setURLFactory(urlf);\n            String sajax = request.get(\"ajax\");\n            boolean ajax = false;\n            if (sajax != null && !sajax.trim().equals(\"\") && !sajax.equals(\"0\")) {\n                ajax = true;\n            }\n            context.put(\"ajax\", new Boolean(ajax));\n\n            // Any error before this will be treated using a redirection to an error page\n\n            // Start monitoring timer\n            monitor = (MonitorPlugin) xwiki.getPlugin(\"monitor\", context);\n            if (monitor != null)\n                monitor.startRequest(\"\", mapping.getName(), context.getURL());\n            if (monitor != null)\n                monitor.startTimer(\"request\");\n\n            VelocityContext vcontext = null;\n            // Prepare velocity context\n            vcontext = XWikiVelocityRenderer.prepareContext(context);\n\n            try {\n                // Prepare documents and put them in the context\n                if (xwiki.prepareDocuments(request, context, vcontext) == false)\n                    return null;\n\n                // Let's handle the notification and make sure it never fails\n                try {\n                    xwiki.getNotificationManager().preverify(context.getDoc(), mapping.getName(), context);\n                }\n                catch (Throwable e) {\n                    e.printStackTrace();\n                }\n                if (monitor != null)\n                    monitor.setWikiPage(context.getDoc().getFullName());\n\n                String renderResult = null;\n                XWikiDocument doc = context.getDoc();\n                if (action(context)) {\n                    renderResult = render(context);\n                }\n\n                if (renderResult != null) {\n                    if ((doc.isNew() && (\"view\".equals(action) || \"delete\".equals(action)))) {\n                        String page = Utils.getPage(request, \"docdoesnotexist\");\n                        Utils.parseTemplate(page, context);\n                    } else {\n                        String page = Utils.getPage(request, renderResult);\n                        Utils.parseTemplate(page, !page.equals(\"direct\"), context);\n                    }\n                }\n                return null;\n            } catch (Throwable e) {\n                if (!(e instanceof XWikiException)) {\n                   e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_UNKNOWN,\n                            \"Uncaught exception\", e);\n                }\n\n                try {\n                    XWikiException xex = (XWikiException) e;\n                    if (xex.getCode() == XWikiException.ERROR_XWIKI_ACCESS_DENIED) {\n                        Utils.parseTemplate(\"accessdenied\", context);\n                        return null;\n                    } else if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_INACTIVE) {\n                        String page = Utils.getPage(request, \"userinactive\");\n                        Utils.parseTemplate(page, context);\n                        return null;\n                    }else if(xex.getCode() == XWikiException.ERROR_XWIKI_APP_ATTACHMENT_NOT_FOUND){\n                        String page = Utils.getPage(request, \"exception\");\n                        context.put(\"message\",\"attachmentdoesnotexist\");\n                        Utils.parseTemplate(page, context);\n                        return null;\n                    }\n                    vcontext.put(\"exp\", e);\n                    Log log = LogFactory.getLog(XWikiAction.class);\n                    if (log.isWarnEnabled()) {\n                        log.warn(\"Uncaught exception: \" + e.getMessage(), e);\n                    }\n                    Utils.parseTemplate(Utils.getPage(request, \"exception\"), context);\n                    return null;\n                } catch (Exception e2) {\n                    // I hope this never happens\n                    e.printStackTrace();\n                    e2.printStackTrace();\n                    return null;\n                }\n            }\n            finally {\n\n                // Let's make sure we have flushed content and closed\n                try {\n                    response.getWriter().flush();\n                } catch (Throwable e) {\n                }\n\n                if (monitor != null)\n                    monitor.endTimer(\"request\");\n\n                if (monitor != null)\n                    monitor.startTimer(\"notify\");\n\n                // Let's handle the notification and make sure it never fails\n                try {\n                    xwiki.getNotificationManager().verify(context.getDoc(), mapping.getName(), context);\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                    }\n\n                if (monitor != null)\n                    monitor.endTimer(\"notify\");\n\n                // Make sure we cleanup database connections\n                // There could be cases where we have some\n                if ((context != null) && (xwiki != null)) {\n                    xwiki.getStore().cleanUp(context);\n                }\n            }\n        }\n        finally {\n            // End request\n            if (monitor != null)\n                monitor.endRequest();\n            if (fileupload != null)\n                fileupload.cleanFileList(context);\n\n            MDC.remove(\"url\");\n        }\n    }","id":103234,"modified_method":"/**\n     * Handle server requests.\n     *\n     * @param mapping The ActionMapping used to select this instance\n     * @param form    The optional ActionForm bean for this request (if any)\n     * @param req     The HTTP request we are processing\n     * @param resp    The HTTP response we are creating\n     * @throws IOException      if an input/output error occurs\n     * @throws ServletException if a servlet exception occurs\n     */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm form,\n                                 HttpServletRequest req,\n                                 HttpServletResponse resp)\n            throws Exception, ServletException {\n        String action = mapping.getName();\n\n        MonitorPlugin monitor = null;\n        FileUploadPlugin fileupload = null;\n        XWikiContext context = null;\n\n        try {\n            XWikiRequest request = new XWikiServletRequest(req);\n            XWikiResponse response = new XWikiServletResponse(resp);\n            context = Utils.prepareContext(mapping.getName(), request, response,\n                    new XWikiServletContext(servlet.getServletContext()));\n\n            // Add the form to the context\n            context.setForm((XWikiForm) form);\n            XWiki xwiki = null;\n            try {\n                xwiki = XWiki.getXWiki(context);\n            } catch (XWikiException e) {\n                if (e.getCode() == XWikiException.ERROR_XWIKI_DOES_NOT_EXIST) {\n                    // redirect\n                    String redirect = context.getWiki().Param(\"xwiki.virtual.redirect\");\n                    response.sendRedirect(redirect);\n                    return null;\n                } else\n                    throw e;\n            }\n\n            // Parses multipart so that parms in multipart are available for all actions\n            fileupload = Utils.handleMultipart(req, context);\n\n            XWikiURLFactory urlf = xwiki.getURLFactoryService().createURLFactory(context.getMode(), context);\n            context.setURLFactory(urlf);\n            String sajax = request.get(\"ajax\");\n            boolean ajax = false;\n            if (sajax != null && !sajax.trim().equals(\"\") && !sajax.equals(\"0\")) {\n                ajax = true;\n            }\n            context.put(\"ajax\", new Boolean(ajax));\n\n            // Any error before this will be treated using a redirection to an error page\n\n            // Start monitoring timer\n            monitor = (MonitorPlugin) xwiki.getPlugin(\"monitor\", context);\n            if (monitor != null)\n                monitor.startRequest(\"\", mapping.getName(), context.getURL());\n            if (monitor != null)\n                monitor.startTimer(\"request\");\n\n            VelocityContext vcontext = null;\n            // Prepare velocity context\n            vcontext = XWikiVelocityRenderer.prepareContext(context);\n\n            try {\n                // Prepare documents and put them in the context\n                if (xwiki.prepareDocuments(request, context, vcontext) == false)\n                    return null;\n\n                // Let's handle the notification and make sure it never fails\n                try {\n                    xwiki.getNotificationManager().preverify(context.getDoc(), mapping.getName(), context);\n                }\n                catch (Throwable e) {\n                    e.printStackTrace();\n                }\n                if (monitor != null)\n                    monitor.setWikiPage(context.getDoc().getFullName());\n\n                String renderResult = null;\n                XWikiDocument doc = context.getDoc();\n                if (action(context)) {\n                    renderResult = render(context);\n                }\n\n                if (renderResult != null) {\n                    if ((doc.isNew() && (\"view\".equals(action) || \"delete\".equals(action)))) {\n                        String page = Utils.getPage(request, \"docdoesnotexist\");\n                        Utils.parseTemplate(page, context);\n                    } else {\n                        String page = Utils.getPage(request, renderResult);\n                        Utils.parseTemplate(page, !page.equals(\"direct\"), context);\n                    }\n                }\n                return null;\n            } catch (Throwable e) {\n                if (!(e instanceof XWikiException)) {\n                   e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_UNKNOWN,\n                            \"Uncaught exception\", e);\n                }\n\n                try {\n                    XWikiException xex = (XWikiException) e;\n                    if (xex.getCode() == XWikiException.ERROR_XWIKI_ACCESS_DENIED) {\n                        Utils.parseTemplate(\"accessdenied\", context);\n                        return null;\n                    } else if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_INACTIVE) {\n                        Utils.parseTemplate(\"userinactive\", context);\n                        return null;\n                    }else if(xex.getCode() == XWikiException.ERROR_XWIKI_APP_ATTACHMENT_NOT_FOUND){\n                        context.put(\"message\",\"attachmentdoesnotexist\");\n                        Utils.parseTemplate(\"exception\", context);\n                        return null;\n                    }\n                    vcontext.put(\"exp\", e);\n                    Log log = LogFactory.getLog(XWikiAction.class);\n                    if (log.isWarnEnabled()) {\n                        log.warn(\"Uncaught exception: \" + e.getMessage(), e);\n                    }\n                    Utils.parseTemplate(Utils.getPage(request, \"exception\"), context);\n                    return null;\n                } catch (Exception e2) {\n                    // I hope this never happens\n                    e.printStackTrace();\n                    e2.printStackTrace();\n                    return null;\n                }\n            }\n            finally {\n\n                // Let's make sure we have flushed content and closed\n                try {\n                    response.getWriter().flush();\n                } catch (Throwable e) {\n                }\n\n                if (monitor != null)\n                    monitor.endTimer(\"request\");\n\n                if (monitor != null)\n                    monitor.startTimer(\"notify\");\n\n                // Let's handle the notification and make sure it never fails\n                try {\n                    xwiki.getNotificationManager().verify(context.getDoc(), mapping.getName(), context);\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                    }\n\n                if (monitor != null)\n                    monitor.endTimer(\"notify\");\n\n                // Make sure we cleanup database connections\n                // There could be cases where we have some\n                if ((context != null) && (xwiki != null)) {\n                    xwiki.getStore().cleanUp(context);\n                }\n            }\n        }\n        finally {\n            // End request\n            if (monitor != null)\n                monitor.endRequest();\n            if (fileupload != null)\n                fileupload.cleanFileList(context);\n\n            MDC.remove(\"url\");\n        }\n    }","commit_id":"b95f01e31b0227db6e2fc1d319a72b59e0302f46","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected void handleException(XWikiRequest request, XWikiResponse response, Throwable e, XWikiContext context) {\r\n\r\n        if (!(e instanceof XWikiException)) {\r\n            e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_UNKNOWN,\r\n                    \"Uncaught exception\", e);\r\n        }\r\n\r\n        VelocityContext vcontext = ((VelocityContext) context.get(\"vcontext\"));\r\n        if (vcontext == null) {\r\n            vcontext = new VelocityContext();\r\n            context.put(\"vcontext\", vcontext);\r\n        }\r\n        vcontext.put(\"exp\", e);\r\n\r\n        try {\r\n            XWikiException xex = (XWikiException) e;\r\n            if (xex.getCode() == XWikiException.ERROR_XWIKI_ACCESS_DENIED) {\r\n                String page = Utils.getPage(request, \"accessdenied\");\r\n                Utils.parseTemplate(page, context);\r\n                return;\r\n            } else if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_INACTIVE) {\r\n                String page = Utils.getPage(request, \"userinactive\");\r\n                Utils.parseTemplate(page, context);\r\n                return;\r\n            }\r\n            Utils.parseTemplate(Utils.getPage(request, \"exception\"), context);\r\n        } catch (Exception e2) {\r\n            // I hope this never happens\r\n            e.printStackTrace();\r\n            e2.printStackTrace();\r\n        }\r\n    }","id":103235,"modified_method":"protected void handleException(XWikiRequest request, XWikiResponse response, Throwable e, XWikiContext context) {\r\n\r\n        if (!(e instanceof XWikiException)) {\r\n            e = new XWikiException(XWikiException.MODULE_XWIKI_APP, XWikiException.ERROR_XWIKI_UNKNOWN,\r\n                    \"Uncaught exception\", e);\r\n        }\r\n\r\n        VelocityContext vcontext = ((VelocityContext) context.get(\"vcontext\"));\r\n        if (vcontext == null) {\r\n            vcontext = new VelocityContext();\r\n            context.put(\"vcontext\", vcontext);\r\n        }\r\n        vcontext.put(\"exp\", e);\r\n\r\n        try {\r\n            XWikiException xex = (XWikiException) e;\r\n            if (xex.getCode() == XWikiException.ERROR_XWIKI_ACCESS_DENIED) {\r\n                Utils.parseTemplate(\"accessdenied\", context);\r\n                return;\r\n            } else if (xex.getCode() == XWikiException.ERROR_XWIKI_USER_INACTIVE) {\r\n                Utils.parseTemplate(\"userinactive\", context);\r\n                return;\r\n            }\r\n            Utils.parseTemplate(Utils.getPage(request, \"exception\"), context);\r\n        } catch (Exception e2) {\r\n            // I hope this never happens\r\n            e.printStackTrace();\r\n            e2.printStackTrace();\r\n        }\r\n    }","commit_id":"b95f01e31b0227db6e2fc1d319a72b59e0302f46","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n  public boolean execute(@NotNull FunctionalExpressionSearch.SearchParameters queryParameters,\n                         @NotNull Processor<PsiFunctionalExpression> consumer) {\n    final PsiClass aClass = queryParameters.getElementToSearch();\n    if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        return LambdaUtil.isFunctionalClass(aClass);\n      }\n    }) || !PsiUtil.isLanguageLevel8OrHigher(aClass)) {\n      return true;\n    }\n    final ArrayList<PsiFunctionalExpression> functionalExpressions = new ArrayList<>();\n    collectFunctionalExpressions(aClass, functionalExpressions, queryParameters.getEffectiveSearchScope());\n    for (PsiFunctionalExpression functionalExpression : functionalExpressions) {\n      if (!consumer.process(functionalExpression)) return false;\n    }\n    return true;\n  }","id":103236,"modified_method":"@Override\n  public boolean execute(@NotNull FunctionalExpressionSearch.SearchParameters queryParameters,\n                         @NotNull Processor<PsiFunctionalExpression> consumer) {\n    final PsiClass aClass = queryParameters.getElementToSearch();\n    if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() {\n      @Override\n      public Boolean compute() {\n        return LambdaUtil.isFunctionalClass(aClass);\n      }\n    }) || !PsiUtil.isLanguageLevel8OrHigher(aClass)) {\n      return true;\n    }\n    return collectFunctionalExpressions(aClass, queryParameters.getEffectiveSearchScope(), consumer);\n  }","commit_id":"90f3c6f3fed25335b3d64553cc7fe94854581d7b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void collectFunctionalExpressions(final PsiClass aClass, final Collection<PsiFunctionalExpression> result, final SearchScope searchScope) {\n    final SearchScope classScope = ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>() {\n      @Override\n      public SearchScope compute() {\n        return aClass.getUseScope();\n      }\n    });\n    final SearchScope useScope = searchScope.intersectWith(classScope);\n    final Project project = aClass.getProject();\n    final GlobalSearchScope scope = useScope instanceof GlobalSearchScope ? (GlobalSearchScope)useScope : new EverythingGlobalScope(project);\n    final Collection<PsiMethod> lambdaCandidates = ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiMethod>>() {\n      @Override\n      public Collection<PsiMethod> compute() {\n        final String functionalInterfaceName = aClass.getName();\n        final GlobalSearchScope useClassScope = classScope instanceof GlobalSearchScope ? (GlobalSearchScope)classScope : scope;\n        return JavaMethodParameterTypesIndex.getInstance().get(functionalInterfaceName, project, useClassScope);\n      }\n    });\n    for (PsiMethod psiMethod : lambdaCandidates) {\n      for (PsiReference ref : MethodReferencesSearch.search(psiMethod, scope, false)) {\n        final PsiElement refElement = ref.getElement();\n        if (refElement != null) {\n          final PsiElement candidateElement = refElement.getParent();\n          if (candidateElement instanceof PsiCallExpression) {\n            final PsiExpressionList argumentList = ((PsiCallExpression)candidateElement).getArgumentList();\n            if (argumentList != null) {\n              ApplicationManager.getApplication().runReadAction(new Runnable() {\n                public void run() {\n                  final PsiExpression[] args = argumentList.getExpressions();\n                  for (PsiExpression arg : args) {\n                    if (arg instanceof PsiFunctionalExpression) {\n                      final PsiFunctionalExpression functionalExpression = (PsiFunctionalExpression)arg;\n                      final PsiType functionalType = functionalExpression.getFunctionalInterfaceType();\n                      if (PsiUtil.resolveClassInType(functionalType) == aClass) {\n                        result.add(functionalExpression);\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    for (PsiReference reference : ReferencesSearch.search(aClass, scope)) {\n      final PsiElement element = reference.getElement();\n      if (element != null) {\n        final PsiElement parent = element.getParent();\n        if (parent instanceof PsiTypeElement) {\n          final PsiElement gParent = parent.getParent();\n          if (gParent instanceof PsiVariable) {\n            final PsiExpression initializer = PsiUtil.skipParenthesizedExprDown(((PsiVariable)gParent).getInitializer());\n            if (initializer instanceof PsiFunctionalExpression) {\n              result.add((PsiFunctionalExpression)initializer);\n            }\n            for (PsiReference varRef : ReferencesSearch.search(parent, scope)) {\n              final PsiElement varElement = varRef.getElement();\n              if (varElement != null) {\n                final PsiElement varElementParent = varElement.getParent();\n                if (varElementParent instanceof PsiAssignmentExpression && \n                    ((PsiAssignmentExpression)varElementParent).getLExpression() == varElement) {\n                  final PsiExpression rExpression = PsiUtil.skipParenthesizedExprDown(((PsiAssignmentExpression)varElementParent).getRExpression());\n                  if (rExpression instanceof PsiFunctionalExpression) {\n                    result.add((PsiFunctionalExpression)rExpression);\n                  }\n                }\n              }\n            }\n          } else if (gParent instanceof PsiMethod) {\n            final PsiReturnStatement[] returnStatements = ApplicationManager.getApplication().runReadAction(\n              new Computable<PsiReturnStatement[]>() {\n                @Override\n                public PsiReturnStatement[] compute() {\n                  return PsiUtil.findReturnStatements((PsiMethod)gParent);\n                }\n              });\n            for (PsiReturnStatement returnStatement : returnStatements) {\n              final PsiExpression returnValue = returnStatement.getReturnValue();\n              if (returnValue instanceof PsiFunctionalExpression) {\n                result.add((PsiFunctionalExpression)returnValue);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","id":103237,"modified_method":"public static boolean collectFunctionalExpressions(final PsiClass aClass,\n                                                     final SearchScope searchScope,\n                                                     final Processor<PsiFunctionalExpression> consumer) {\n    final SearchScope classScope = ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>() {\n      @Override\n      public SearchScope compute() {\n        return aClass.getUseScope();\n      }\n    });\n    final SearchScope useScope = searchScope.intersectWith(classScope);\n    final Project project = aClass.getProject();\n    final GlobalSearchScope scope = useScope instanceof GlobalSearchScope ? (GlobalSearchScope)useScope : new EverythingGlobalScope(project);\n    final Collection<PsiMethod> lambdaCandidates = ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiMethod>>() {\n      @Override\n      public Collection<PsiMethod> compute() {\n        final String functionalInterfaceName = aClass.getName();\n        final GlobalSearchScope useClassScope = classScope instanceof GlobalSearchScope ? (GlobalSearchScope)classScope : scope;\n        return JavaMethodParameterTypesIndex.getInstance().get(functionalInterfaceName, project, useClassScope);\n      }\n    });\n    for (PsiMethod psiMethod : lambdaCandidates) {\n      for (PsiReference ref : MethodReferencesSearch.search(psiMethod, scope, false)) {\n        final PsiElement refElement = ref.getElement();\n        if (refElement != null) {\n          final PsiElement candidateElement = refElement.getParent();\n          if (candidateElement instanceof PsiCallExpression) {\n            final PsiExpressionList argumentList = ((PsiCallExpression)candidateElement).getArgumentList();\n            if (argumentList != null) {\n              final Boolean accepted = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() {\n                @Override\n                public Boolean compute() {\n                  final PsiExpression[] args = argumentList.getExpressions();\n                  for (PsiExpression arg : args) {\n                    if (arg instanceof PsiFunctionalExpression) {\n                      final PsiFunctionalExpression functionalExpression = (PsiFunctionalExpression)arg;\n                      final PsiType functionalType = functionalExpression.getFunctionalInterfaceType();\n                      if (PsiUtil.resolveClassInType(functionalType) == aClass) {\n                        if (!consumer.process(functionalExpression)) return false;\n                      }\n                    }\n                  }\n                  return true;\n                }\n              });\n              if (!accepted) return false;\n            }\n          }\n        }\n      }\n    }\n\n    for (PsiReference reference : ReferencesSearch.search(aClass, scope)) {\n      final PsiElement element = reference.getElement();\n      if (element != null) {\n        final PsiElement parent = element.getParent();\n        if (parent instanceof PsiTypeElement) {\n          final PsiElement gParent = parent.getParent();\n          if (gParent instanceof PsiVariable) {\n            final PsiExpression initializer = PsiUtil.skipParenthesizedExprDown(((PsiVariable)gParent).getInitializer());\n            if (initializer instanceof PsiFunctionalExpression) {\n              if (!consumer.process((PsiFunctionalExpression)initializer)) return false;\n            }\n            for (PsiReference varRef : ReferencesSearch.search(parent, scope)) {\n              final PsiElement varElement = varRef.getElement();\n              if (varElement != null) {\n                final PsiElement varElementParent = varElement.getParent();\n                if (varElementParent instanceof PsiAssignmentExpression && \n                    ((PsiAssignmentExpression)varElementParent).getLExpression() == varElement) {\n                  final PsiExpression rExpression = PsiUtil.skipParenthesizedExprDown(((PsiAssignmentExpression)varElementParent).getRExpression());\n                  if (rExpression instanceof PsiFunctionalExpression) {\n                    if (!consumer.process((PsiFunctionalExpression)rExpression)) return false;\n                  }\n                }\n              }\n            }\n          } else if (gParent instanceof PsiMethod) {\n            final PsiReturnStatement[] returnStatements = ApplicationManager.getApplication().runReadAction(\n              new Computable<PsiReturnStatement[]>() {\n                @Override\n                public PsiReturnStatement[] compute() {\n                  return PsiUtil.findReturnStatements((PsiMethod)gParent);\n                }\n              });\n            for (PsiReturnStatement returnStatement : returnStatements) {\n              final PsiExpression returnValue = returnStatement.getReturnValue();\n              if (returnValue instanceof PsiFunctionalExpression) {\n                if (!consumer.process((PsiFunctionalExpression)returnValue)) return false;\n              }\n            }\n          }\n        }\n      }\n    }\n    return true;\n  }","commit_id":"90f3c6f3fed25335b3d64553cc7fe94854581d7b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if(player != null){\r\n                int x = game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game);\r\n\r\n            Mana mana = new Mana();\r\n            for(int i = 0; i < x; i++){\r\n                ChoiceColor choiceColor = new ChoiceColor();\r\n                while (!player.choose(Outcome.Benefit, choiceColor, game)) {\r\n                    if (!player.isInGame()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if (choiceColor.getColor().isBlack()) {\r\n                    mana.addBlack();\r\n                } else if (choiceColor.getColor().isBlue()) {\r\n                    mana.addBlue();\r\n                } else if (choiceColor.getColor().isRed()) {\r\n                    mana.addRed();\r\n                } else if (choiceColor.getColor().isGreen()) {\r\n                    mana.addGreen();\r\n                } else if (choiceColor.getColor().isWhite()) {\r\n                    mana.addWhite();\r\n                }\r\n            }\r\n\r\n\r\n            if (mana != null) {\r\n                player.getManaPool().addMana(mana, game, source);\r\n                return true;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }","id":103238,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if(player != null){\r\n                int x = game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game);\r\n\r\n            Mana mana = new Mana();\r\n            for(int i = 0; i < x; i++){\r\n                ChoiceColor choiceColor = new ChoiceColor();\r\n                while (!player.choose(Outcome.Benefit, choiceColor, game)) {\r\n                    if (!player.isInGame()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if (choiceColor.getColor().isBlack()) {\r\n                    mana.addBlack();\r\n                } else if (choiceColor.getColor().isBlue()) {\r\n                    mana.addBlue();\r\n                } else if (choiceColor.getColor().isRed()) {\r\n                    mana.addRed();\r\n                } else if (choiceColor.getColor().isGreen()) {\r\n                    mana.addGreen();\r\n                } else if (choiceColor.getColor().isWhite()) {\r\n                    mana.addWhite();\r\n                }\r\n            }\r\n\r\n            player.getManaPool().addMana(mana, game, source);\r\n            return true;\r\n\r\n        }\r\n        return false;\r\n    }","commit_id":"933d861cd5844ee1a185a5733aa71e9187377ace","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        Permanent enchantment = game.getPermanent(this.getSourceId());\r\n        if(event.getType() == GameEvent.EventType.TAPPED_FOR_MANA){\r\n            if (enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":103239,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {        \r\n        if(event.getType() == GameEvent.EventType.TAPPED_FOR_MANA){\r\n            Permanent enchantment = game.getPermanent(this.getSourceId());\r\n            if (enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"933d861cd5844ee1a185a5733aa71e9187377ace","url":"https://github.com/magefree/mage"},{"original_method":"public AddManaToManaPoolEffect(Mana mana) {\r\n        super(Outcome.PutManaInPool);\r\n        this.mana = mana;\r\n        this.staticText = \"add \" + mana.toString() + \" to that player's mana pool\";\r\n    }","id":103240,"modified_method":"public AddManaToManaPoolEffect(Mana mana, String textManaPoolOwner) {\r\n        super(Outcome.PutManaInPool);\r\n        this.mana = mana;\r\n        this.staticText = \"add \" + mana.toString() + \" to \" + textManaPoolOwner + \" mana pool\";\r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"public EladamrisVineyard(UUID ownerId) {\r\n        super(ownerId, 118, \"Eladamri's Vineyard\", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, \"{G}\");\r\n        this.expansionSetCode = \"TMP\";\r\n\r\n        this.color.setGreen(true);\r\n\r\n        // At the beginning of each player's precombat main phase, add {G}{G} to that player's mana pool.\r\n        this.addAbility(new BeginningOfPreCombatMainTriggeredAbility(\r\n                Zone.BATTLEFIELD, new AddManaToManaPoolEffect(GreenMana(2)), TargetController.ANY, false, true));          \r\n    }","id":103241,"modified_method":"public EladamrisVineyard(UUID ownerId) {\r\n        super(ownerId, 118, \"Eladamri's Vineyard\", Rarity.RARE, new CardType[]{CardType.ENCHANTMENT}, \"{G}\");\r\n        this.expansionSetCode = \"TMP\";\r\n\r\n        this.color.setGreen(true);\r\n\r\n        // At the beginning of each player's precombat main phase, add {G}{G} to that player's mana pool.\r\n        this.addAbility(new BeginningOfPreCombatMainTriggeredAbility(\r\n                Zone.BATTLEFIELD, new AddManaToManaPoolEffect(GreenMana(2), \"that player's\"), TargetController.ANY, false, true));          \r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        UUID objectId = source.getFirstTarget();\r\n        UUID sourceId = source.getSourceId();\r\n\r\n        StackObject stackObject = game.getStack().getStackObject(objectId);\r\n        if (stackObject != null && !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER, objectId, sourceId, stackObject.getControllerId()))) {\r\n            if (stackObject instanceof Spell) {\r\n                game.rememberLKI(objectId, Zone.STACK, (Spell) stackObject);\r\n            }\r\n            game.getStack().remove(stackObject);\r\n            MageObject targetObject = game.getObject(stackObject.getSourceId());\r\n            Zone targetZone = Zone.LIBRARY;\r\n            if (targetObject instanceof Card) {\r\n                Card card = (Card) targetObject;\r\n                Player player = game.getPlayer(source.getControllerId());\r\n                boolean top = player.chooseUse(Outcome.Neutral, \"Put \" + card.getName() + \" on top of the library? Otherwise it will be put on the bottom.\", game);\r\n                card.moveToZone(targetZone, sourceId, game, top);\r\n                game.informPlayers(player.getName() + \" has put \" + card.getName() + \" on \" + (top ? \"top\" : \"the bottom\") + \" of the library.\");\r\n            } else {\r\n                game.informPlayers(\"Server: Couldn't move card to zone = \" + targetZone + \" as it has other than Card type.\");\r\n            }\r\n            game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERED, objectId, sourceId, stackObject.getControllerId()));\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":103242,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        UUID objectId = source.getFirstTarget();\r\n        UUID sourceId = source.getSourceId();\r\n        // counter code from Spellstack\r\n        StackObject stackObject = game.getStack().getStackObject(objectId);\r\n        MageObject sourceObject = game.getObject(sourceId);\r\n        if (stackObject != null && sourceObject != null) {\r\n            if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.COUNTER, objectId, sourceId, stackObject.getControllerId()))) {\r\n                if ( stackObject instanceof Spell ) {\r\n                    game.rememberLKI(objectId, Zone.STACK, (Spell)stackObject);\r\n                }                \r\n                // Hinder specific code\r\n                ReplacementEffectImpl effect = new HinderReplacementEffect();\r\n                effect.setTargetPointer(new FixedTarget(stackObject.getId()));\r\n                game.addEffect(effect, source);\r\n                // Hinder specific code end\r\n                game.informPlayers(new StringBuilder(stackObject.getName()).append(\" is countered by \").append(sourceObject.getLogName()).toString());\r\n                game.getStack().remove(stackObject);\r\n                stackObject.counter(sourceId, game); // tries to move to graveyard                \r\n                game.fireEvent(GameEvent.getEvent(GameEvent.EventType.COUNTERED, objectId, sourceId, stackObject.getControllerId()));\r\n            } else {\r\n                game.informPlayers(new StringBuilder(stackObject.getName()).append(\" could not be countered by \").append(sourceObject.getLogName()).toString());\r\n            }\r\n            return true;\r\n        }\r\n        return false;        \r\n        // counter code from Spellstack end\r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"public MagusOfTheVineyard(UUID ownerId) {\r\n        super(ownerId, 166, \"Magus of the Vineyard\", Rarity.RARE, new CardType[]{CardType.CREATURE}, \"{G}\");\r\n        this.expansionSetCode = \"CMD\";\r\n        this.subtype.add(\"Human\");\r\n        this.subtype.add(\"Wizard\");\r\n\r\n        this.color.setGreen(true);\r\n        this.power = new MageInt(1);\r\n        this.toughness = new MageInt(1);\r\n\r\n        // At the beginning of each player's precombat main phase, add {G}{G} to that player's mana pool.\r\n        this.addAbility(new BeginningOfPreCombatMainTriggeredAbility(\r\n                Zone.BATTLEFIELD, new AddManaToManaPoolEffect(GreenMana(2)), TargetController.ANY, false, true));        \r\n    }","id":103243,"modified_method":"public MagusOfTheVineyard(UUID ownerId) {\r\n        super(ownerId, 166, \"Magus of the Vineyard\", Rarity.RARE, new CardType[]{CardType.CREATURE}, \"{G}\");\r\n        this.expansionSetCode = \"CMD\";\r\n        this.subtype.add(\"Human\");\r\n        this.subtype.add(\"Wizard\");\r\n\r\n        this.color.setGreen(true);\r\n        this.power = new MageInt(1);\r\n        this.toughness = new MageInt(1);\r\n\r\n        // At the beginning of each player's precombat main phase, add {G}{G} to that player's mana pool.\r\n        this.addAbility(new BeginningOfPreCombatMainTriggeredAbility(\r\n                Zone.BATTLEFIELD, new AddManaToManaPoolEffect(GreenMana(2), \"that player's\"), TargetController.ANY, false, true));        \r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        boolean result = false;\r\n        Spell spell = game.getStack().getSpell(getTargetPointer().getFirst(game, source));\r\n        if (spell != null) {\r\n            result = game.getStack().counter(getTargetPointer().getFirst(game, source), source.getSourceId(), game);\r\n            int mana = spell.getConvertedManaCost();\r\n            AtTheBeginOfPreCombatMainDelayedTriggeredAbility delayedAbility =\r\n                    new AtTheBeginOfPreCombatMainDelayedTriggeredAbility(new PlasmCaptureManaEffect(mana), TargetController.YOU);\r\n            delayedAbility.setSourceId(source.getSourceId());\r\n            delayedAbility.setControllerId(source.getControllerId());\r\n            game.addDelayedTriggeredAbility(delayedAbility);\r\n        }\r\n        return result;\r\n    }","id":103244,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = game.getStack().getSpell(getTargetPointer().getFirst(game, source));\r\n        if (spell != null) {\r\n            game.getStack().counter(getTargetPointer().getFirst(game, source), source.getSourceId(), game);\r\n            // mana gets added also if counter is not successful\r\n            int mana = spell.getConvertedManaCost();\r\n            AtTheBeginOMainPhaseDelayedTriggeredAbility delayedAbility =\r\n                    new AtTheBeginOMainPhaseDelayedTriggeredAbility(new PlasmCaptureManaEffect(mana), TargetController.YOU, PhaseSelection.NEXT_PRECOMBAT_MAIN);\r\n            delayedAbility.setSourceId(source.getSourceId());\r\n            delayedAbility.setControllerId(source.getControllerId());\r\n            game.addDelayedTriggeredAbility(delayedAbility);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if(player != null){\r\n            Mana mana = new Mana();\r\n            for(int i = 0; i < amountOfMana; i++){\r\n                ChoiceColor choiceColor = new ChoiceColor();\r\n                while (!player.choose(Outcome.Benefit, choiceColor, game)) {\r\n                    if (!player.isInGame()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (choiceColor.getColor().isBlack()) {\r\n                    mana.addBlack();\r\n                } else if (choiceColor.getColor().isBlue()) {\r\n                    mana.addBlue();\r\n                } else if (choiceColor.getColor().isRed()) {\r\n                    mana.addRed();\r\n                } else if (choiceColor.getColor().isGreen()) {\r\n                    mana.addGreen();\r\n                } else if (choiceColor.getColor().isWhite()) {\r\n                    mana.addWhite();\r\n                }\r\n            }\r\n\r\n\r\n            if (mana != null) {\r\n                player.getManaPool().addMana(mana, game, source);\r\n                return true;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }","id":103245,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if(player != null){\r\n            Mana mana = new Mana();\r\n            for(int i = 0; i < amountOfMana; i++){\r\n                ChoiceColor choiceColor = new ChoiceColor();\r\n                while (!player.choose(Outcome.Benefit, choiceColor, game)) {\r\n                    if (!player.isInGame()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (choiceColor.getColor().isBlack()) {\r\n                    mana.addBlack();\r\n                } else if (choiceColor.getColor().isBlue()) {\r\n                    mana.addBlue();\r\n                } else if (choiceColor.getColor().isRed()) {\r\n                    mana.addRed();\r\n                } else if (choiceColor.getColor().isGreen()) {\r\n                    mana.addGreen();\r\n                } else if (choiceColor.getColor().isWhite()) {\r\n                    mana.addWhite();\r\n                }\r\n            }\r\n\r\n            player.getManaPool().addMana(mana, game, source);\r\n            return true;\r\n\r\n        }\r\n        return false;\r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public void postResolve(Card card, Ability source, UUID controllerId, Game game) {\r\n        card.moveToZone(Zone.HAND, source.getSourceId(), game, false);\r\n    }","id":103246,"modified_method":"@Override\r\n    public void postResolve(Card card, Ability source, UUID controllerId, Game game) {\r\n        Player controller = game.getPlayer(controllerId);\r\n        if (controller != null) {\r\n            controller.moveCardToHandWithInfo(card, source.getSourceId(), game, Zone.STACK);\r\n        }\r\n    }","commit_id":"48e8be4fc23acd46bb20f6d2360d42f679820d52","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player you = game.getPlayer(source.getControllerId());\r\n        Mana mana = new Mana();\r\n        if (you != null) {\r\n            for (Permanent permanent : game.getBattlefield().getActivePermanents(you.getId(), game)) {\r\n                if (permanent.getColor().contains(ObjectColor.BLACK)\r\n                        && !mana.contains(Mana.BlackMana)) {\r\n                    mana = Mana.BlackMana(1);\r\n                }\r\n                if (permanent.getColor().contains(ObjectColor.BLUE)\r\n                        && !mana.contains(Mana.BlueMana)) {\r\n                    mana = Mana.BlueMana(1);\r\n                }\r\n                if (permanent.getColor().contains(ObjectColor.RED)\r\n                        && !mana.contains(Mana.RedMana)) {\r\n                    mana = Mana.RedMana(1);\r\n                }\r\n                if (permanent.getColor().contains(ObjectColor.GREEN)\r\n                        && !mana.contains(Mana.GreenMana)) {\r\n                    mana = Mana.GreenMana(1);\r\n                }\r\n                if (permanent.getColor().contains(ObjectColor.WHITE)\r\n                        && !mana.contains(Mana.WhiteMana)) {\r\n                    mana = Mana.WhiteMana(1);\r\n                }\r\n            }\r\n        }\r\n        if (you != null && mana != null) {\r\n            you.getManaPool().addMana(mana, game, source);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":103247,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player you = game.getPlayer(source.getControllerId());        \r\n        if (you != null) {\r\n            Mana mana = new Mana();\r\n            for (Permanent permanent : game.getBattlefield().getAllActivePermanents(you.getId())) {\r\n                if (mana.getBlack() == 0 && permanent.getColor().isBlack()) {\r\n                    mana.addBlack();\r\n                }\r\n                if (mana.getBlue() == 0 && permanent.getColor().isBlue()) {\r\n                    mana.addBlue();\r\n                }\r\n                if (mana.getRed() == 0 && permanent.getColor().isRed()) {\r\n                    mana.addRed();\r\n                }\r\n                if (mana.getGreen() == 0 && permanent.getColor().isGreen()) {\r\n                    mana.addGreen();\r\n                }\r\n                if (mana.getWhite() == 0 && permanent.getColor().isWhite()) {\r\n                    mana.addWhite();\r\n                }\r\n            }\r\n            you.getManaPool().addMana(mana, game, source);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"da099c2da53accbe1ef2af3d48864fa374f0153b","url":"https://github.com/magefree/mage"},{"original_method":"private void defineConfigurationsForSourceSet(SourceSet sourceSet, ConfigurationContainer configurations) {\n        Configuration compileConfiguration = configurations.findByName(sourceSet.getCompileConfigurationName());\n        if (compileConfiguration == null) {\n            compileConfiguration = configurations.create(sourceSet.getCompileConfigurationName());\n        }\n        compileConfiguration.setVisible(false);\n        compileConfiguration.setDescription(String.format(\"Compile dependencies for %s.\", sourceSet));\n\n        Configuration runtimeConfiguration = configurations.findByName(sourceSet.getRuntimeConfigurationName());\n        if (runtimeConfiguration == null) {\n            runtimeConfiguration = configurations.create(sourceSet.getRuntimeConfigurationName());\n        }\n        runtimeConfiguration.setVisible(false);\n        runtimeConfiguration.extendsFrom(compileConfiguration);\n        runtimeConfiguration.setDescription(String.format(\"Runtime classpath for %s.\", sourceSet));\n\n        Configuration compileOnlyConfiguration = configurations.findByName(sourceSet.getCompileOnlyConfigurationName());\n        if (compileOnlyConfiguration == null) {\n            compileOnlyConfiguration = configurations.create(sourceSet.getCompileOnlyConfigurationName());\n        }\n        compileOnlyConfiguration.setVisible(false);\n        compileOnlyConfiguration.extendsFrom(compileConfiguration);\n        compileOnlyConfiguration.setDescription(String.format(\"Compile only classpath for %s.\", sourceSet));\n\n        Configuration compileClasspathConfiguration = configurations.findByName(sourceSet.getCompileClasspathConfigurationName());\n        if (compileClasspathConfiguration == null) {\n            compileClasspathConfiguration = configurations.create(sourceSet.getCompileClasspathConfigurationName());\n        }\n        compileClasspathConfiguration.setVisible(false);\n        compileClasspathConfiguration.extendsFrom(compileOnlyConfiguration);\n        compileClasspathConfiguration.setDescription(String.format(\"Compile classpath for %s.\", sourceSet));\n\n        sourceSet.setCompileClasspath(compileClasspathConfiguration);\n        sourceSet.setRuntimeClasspath(sourceSet.getOutput().plus(runtimeConfiguration));\n    }","id":103248,"modified_method":"private void defineConfigurationsForSourceSet(SourceSet sourceSet, ConfigurationContainer configurations) {\n        Configuration compileConfiguration = configurations.maybeCreate(sourceSet.getCompileConfigurationName());\n        compileConfiguration.setVisible(false);\n        compileConfiguration.setDescription(String.format(\"Dependencies for %s.\", sourceSet));\n\n        Configuration runtimeConfiguration = configurations.maybeCreate(sourceSet.getRuntimeConfigurationName());\n        runtimeConfiguration.setVisible(false);\n        runtimeConfiguration.extendsFrom(compileConfiguration);\n        runtimeConfiguration.setDescription(String.format(\"Runtime dependencies for %s.\", sourceSet));\n\n        Configuration compileOnlyConfiguration = configurations.maybeCreate(sourceSet.getCompileOnlyConfigurationName());\n        compileOnlyConfiguration.setVisible(false);\n        compileOnlyConfiguration.extendsFrom(compileConfiguration);\n        compileOnlyConfiguration.setDescription(String.format(\"Compile dependencies for %s.\", sourceSet));\n\n        Configuration compileClasspathConfiguration = configurations.maybeCreate(sourceSet.getCompileClasspathConfigurationName());\n        compileClasspathConfiguration.setVisible(false);\n        compileClasspathConfiguration.extendsFrom(compileOnlyConfiguration);\n        compileClasspathConfiguration.setDescription(String.format(\"Compile classpath for %s.\", sourceSet));\n\n        sourceSet.setCompileClasspath(compileClasspathConfiguration);\n        sourceSet.setRuntimeClasspath(sourceSet.getOutput().plus(runtimeConfiguration));\n    }","commit_id":"0bb0f1d118a7d67641133728d1a4b36a73cca2f0","url":"https://github.com/gradle/gradle"},{"original_method":"private CSourceSet createCUnitSourceSet(ProjectNativeComponent testedComponent, FunctionalSourceSet componentTestSources) {\n        // TODO:DAZ Add PolyMorphicDomainObjectContainer.maybeCreate(name, type)\n        CSourceSet cunitSourceSet = (CSourceSet) componentTestSources.findByName(\"cunit\");\n        if (cunitSourceSet == null) {\n            cunitSourceSet = componentTestSources.create(\"cunit\", CSourceSet.class);\n        }\n        // TODO:DAZ This duplicates ApplySourceSetConventions, but is executed _after_ that rule.\n        if (cunitSourceSet.getSource().getSrcDirs().isEmpty()) {\n            cunitSourceSet.getSource().srcDir(String.format(\"src/%s/%s\", componentTestSources.getName(), cunitSourceSet.getName()));\n        }\n        // TODO:DAZ Allow sourceSet.lib Collection<LanguageSourceSet>\n        for (LanguageSourceSet componentSourceSet : testedComponent.getSource().withType(CSourceSet.class)) {\n            cunitSourceSet.lib(componentSourceSet);\n        }\n        createCUnitLauncherTask(cunitSourceSet);\n        return cunitSourceSet;\n    }","id":103249,"modified_method":"private CSourceSet createCUnitSourceSet(ProjectNativeComponent testedComponent, FunctionalSourceSet componentTestSources) {\n        CSourceSet cunitSourceSet = componentTestSources.maybeCreate(\"cunit\", CSourceSet.class);\n        // TODO:DAZ This duplicates ApplySourceSetConventions, but is executed _after_ that rule.\n        if (cunitSourceSet.getSource().getSrcDirs().isEmpty()) {\n            cunitSourceSet.getSource().srcDir(String.format(\"src/%s/%s\", componentTestSources.getName(), cunitSourceSet.getName()));\n        }\n        // TODO:DAZ Allow sourceSet.lib Collection<LanguageSourceSet>\n        for (LanguageSourceSet componentSourceSet : testedComponent.getSource().withType(CSourceSet.class)) {\n            cunitSourceSet.lib(componentSourceSet);\n        }\n        createCUnitLauncherTask(cunitSourceSet);\n        return cunitSourceSet;\n    }","commit_id":"7752902cf5605cc9ac4294d0b54fb95cde227f44","url":"https://github.com/gradle/gradle"},{"original_method":"private static Iterable<SNode> usedDevkits(SNode module) {\n    return ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\");\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\"), \"devkit\", false);\n      }\n    });\n  }","id":103250,"modified_method":"private static Iterable<SNode> usedDevkits(SNode module) {\n    return Sequence.fromIterable(dependencies(module)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\");\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\"), \"devkit\", false);\n      }\n    });\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static Iterable<SNode> getDependencies(SNode module, final boolean reexport) {\n    Iterable<SNode> dependencies = ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\") && SPropertyOperations.getBoolean(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\"), \"reexport\") == reexport;\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\"), \"module\", false);\n      }\n    });\n\n    if (reexport) {\n      return dependencies;\n    }\n\n    Iterable<SNode> solutionsFromDevkits = Sequence.fromIterable(includingExtended(usedDevkits(module))).translate(new ITranslator2<SNode, SNode>() {\n      public Iterable<SNode> translate(SNode it) {\n        return ListSequence.fromList(SLinkOperations.getTargets(it, \"exports\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode iit) {\n            return SNodeOperations.isInstanceOf(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode iit) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\"), \"solution\", false);\n          }\n        });\n      }\n    });\n    // \"core\" language is added in loadModules pre-script \n    return IterableUtil.distinct(IterableUtil.merge(dependencies, solutionsFromDevkits));\n  }","id":103251,"modified_method":"private static Iterable<SNode> getDependencies(SNode module, final boolean reexport) {\n    Iterable<SNode> dependencies = Sequence.fromIterable(dependencies(module)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\") && SPropertyOperations.getBoolean(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\"), \"reexport\") == reexport;\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\"), \"module\", false);\n      }\n    });\n\n    if (reexport) {\n      return dependencies;\n    }\n\n    Iterable<SNode> solutionsFromDevkits = Sequence.fromIterable(includingExtended(usedDevkits(module))).translate(new ITranslator2<SNode, SNode>() {\n      public Iterable<SNode> translate(SNode it) {\n        return ListSequence.fromList(SLinkOperations.getTargets(it, \"exports\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode iit) {\n            return SNodeOperations.isInstanceOf(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode iit) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\"), \"solution\", false);\n          }\n        });\n      }\n    });\n    // \"core\" language is added in loadModules pre-script \n    return IterableUtil.distinct(IterableUtil.merge(dependencies, solutionsFromDevkits));\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static Iterable<SNode> includingExtendedLanguages(Iterable<SNode> langs) {\n    return new RecursiveIterator<SNode>(Sequence.fromIterable(langs).iterator(), false) {\n      protected Iterator<SNode> children(SNode node) {\n        return ListSequence.fromList(SLinkOperations.getTargets(node, \"dependencies\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\"), \"language\", false);\n          }\n        }).iterator();\n      }\n    };\n  }","id":103252,"modified_method":"private static Iterable<SNode> includingExtendedLanguages(Iterable<SNode> langs) {\n    return new RecursiveIterator<SNode>(Sequence.fromIterable(langs).iterator(), false) {\n      protected Iterator<SNode> children(SNode node) {\n        return Sequence.fromIterable(dependencies(node)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\"), \"language\", false);\n          }\n        }).iterator();\n      }\n    };\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static Iterable<SNode> getUsedLanguages(SNode module) {\n    Iterable<SNode> usedLangs = ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\");\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\"), \"language\", false);\n      }\n    });\n\n    Iterable<SNode> languagesFromDevkits = Sequence.fromIterable(includingExtended(usedDevkits(module))).translate(new ITranslator2<SNode, SNode>() {\n      public Iterable<SNode> translate(SNode it) {\n        return ListSequence.fromList(SLinkOperations.getTargets(it, \"exports\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode iit) {\n            return SNodeOperations.isInstanceOf(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode iit) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\"), \"language\", false);\n          }\n        });\n      }\n    });\n\n    // use \"core\" language is added in loadModules pre-script \n    return includingExtendedLanguages(IterableUtil.merge(usedLangs, languagesFromDevkits));\n  }","id":103253,"modified_method":"private static Iterable<SNode> getUsedLanguages(SNode module) {\n    Iterable<SNode> usedLangs = Sequence.fromIterable(dependencies(module)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\");\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\"), \"language\", false);\n      }\n    });\n\n    Iterable<SNode> languagesFromDevkits = Sequence.fromIterable(includingExtended(usedDevkits(module))).translate(new ITranslator2<SNode, SNode>() {\n      public Iterable<SNode> translate(SNode it) {\n        return ListSequence.fromList(SLinkOperations.getTargets(it, \"exports\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode iit) {\n            return SNodeOperations.isInstanceOf(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\");\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode iit) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(iit, \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\"), \"language\", false);\n          }\n        });\n      }\n    });\n\n    // use \"core\" language is added in loadModules pre-script \n    return includingExtendedLanguages(IterableUtil.merge(usedLangs, languagesFromDevkits));\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {\n    return SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n  }","id":103254,"modified_method":"public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {\n    return SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.mps.structure.BuildMps_Language\") || SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentNode), \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void importLanguageDeps() {\n    LanguageDescriptor descriptor = ((LanguageDescriptor) myModuleDescriptor);\n    for (ModuleReference lang : descriptor.getExtendedLanguages()) {\n      SNode resolved = SNodeOperations.as(visible.resolve(lang.getModuleFqName(), lang.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n      if (resolved == null) {\n        report(\"cannot find extended language in dependencies: \" + lang.getModuleFqName(), myModule);\n        continue;\n      }\n      SNode ul = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\", null);\n      SLinkOperations.setTarget(ul, \"language\", resolved, false);\n      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).addElement(ul);\n    }\n  }","id":103255,"modified_method":"private void importLanguageDeps() {\n    LanguageDescriptor descriptor = ((LanguageDescriptor) myModuleDescriptor);\n    for (ModuleReference lang : descriptor.getExtendedLanguages()) {\n      SNode resolved = SNodeOperations.as(visible.resolve(lang.getModuleFqName(), lang.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n      if (resolved == null) {\n        report(\"cannot find extended language in dependencies: \" + lang.getModuleFqName(), myModule);\n        continue;\n      }\n      SNode ul = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\", null);\n      SLinkOperations.setTarget(ul, \"language\", resolved, false);\n      SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n      SLinkOperations.setTarget(res, \"dependency\", ul, true);\n      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).addElement(res);\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void importRequired() {\n    loadFile();\n    if (myModuleDescriptor != null) {\n      SPropertyOperations.set(myModule, \"uuid\", myModuleDescriptor.getModuleReference().getModuleId().toString());\n      SPropertyOperations.set(myModule, \"name\", myModuleDescriptor.getModuleReference().getModuleFqName());\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n        SPropertyOperations.set(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"doNotCompile\", \"\" + (myModuleDescriptor instanceof SolutionDescriptor && !(((SolutionDescriptor) myModuleDescriptor).getCompileInMPS())));\n        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).clear();\n        importDependencies();\n        if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\") && myModuleDescriptor instanceof LanguageDescriptor) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"runtime\", true)).clear();\n          importRuntime();\n          importLanguageDeps();\n        }\n      }\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_DevKit\")) {\n        importDevkit();\n      }\n    }\n  }","id":103256,"modified_method":"public void importRequired() {\n    loadFile();\n    if (myModuleDescriptor != null) {\n      SPropertyOperations.set(myModule, \"uuid\", myModuleDescriptor.getModuleReference().getModuleId().toString());\n      SPropertyOperations.set(myModule, \"name\", myModuleDescriptor.getModuleReference().getModuleFqName());\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n        SPropertyOperations.set(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"doNotCompile\", \"\" + (myModuleDescriptor instanceof SolutionDescriptor && !(((SolutionDescriptor) myModuleDescriptor).getCompileInMPS())));\n        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).removeWhere(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\");\n          }\n        });\n        importDependencies();\n        if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\") && myModuleDescriptor instanceof LanguageDescriptor) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"runtime\", true)).clear();\n          importRuntime();\n          importLanguageDeps();\n        }\n      }\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_DevKit\")) {\n        importDevkit();\n      }\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void importDependencies() {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      if (!(reexport)) {\n        continue;\n      }\n\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved = SNodeOperations.as(visible.resolve(moduleRef.getModuleFqName(), moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n      if (resolved != null) {\n        SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n        SLinkOperations.setTarget(res, \"module\", resolved, false);\n        SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n      } else {\n        SNode res = SModelOperations.createNewNode(SNodeOperations.getModel(myModule), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", null);\n        SPropertyOperations.set(res, \"targetId\", moduleRef.getModuleId().toString());\n        SPropertyOperations.set(res, \"targetName\", moduleRef.getModuleFqName());\n        SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n      }\n    }\n  }","id":103257,"modified_method":"private void importDependencies() {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      if (!(reexport)) {\n        continue;\n      }\n\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved = SNodeOperations.as(visible.resolve(moduleRef.getModuleFqName(), moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n      if (resolved != null) {\n        SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n        SLinkOperations.setTarget(res, \"module\", resolved, false);\n        SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n        SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n        SLinkOperations.setTarget(extr, \"dependency\", res, true);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n      } else {\n        SNode res = SModelOperations.createNewNode(SNodeOperations.getModel(myModule), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", null);\n        SPropertyOperations.set(res, \"targetId\", moduleRef.getModuleId().toString());\n        SPropertyOperations.set(res, \"targetName\", moduleRef.getModuleFqName());\n        SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n        SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n        SLinkOperations.setTarget(extr, \"dependency\", res, true);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n      }\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectDependencies(boolean checkOnly) {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n    Map<String, Boolean> usedModuleIds = new HashMap<String, Boolean>();\n    for (SNode dep : SLinkOperations.getTargets(module, \"dependencies\", true)) {\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\")) {\n        SNode onModule = SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\");\n        usedModuleIds.put(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"), SPropertyOperations.getBoolean(onModule, \"reexport\"));\n      } else if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\")) {\n        SNode onModule = SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\");\n        usedModuleIds.put(SPropertyOperations.getString(onModule, \"targetId\"), SPropertyOperations.getBoolean(onModule, \"reexport\"));\n      }\n    }\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved = SNodeOperations.as(visible.resolve(moduleRef.getModuleFqName(), moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n      boolean found = false;\n      if (usedModuleIds.containsKey(moduleRef.getModuleId().toString())) {\n        found = true;\n        boolean foundReexport = usedModuleIds.get(moduleRef.getModuleId().toString());\n        if (foundReexport != reexport) {\n          report(\"wrong reexport status for dependency in build script for: \" + moduleRef.getModuleId().toString(), myOriginalModule);\n        }\n      }\n\n      if (!(found)) {\n        if (reexport) {\n          report(\"reexport dependency should be extracted into build script: \" + dep.getModuleRef().toString(), myOriginalModule);\n        }\n        if (checkOnly) {\n          continue;\n        }\n\n        if (resolved != null) {\n          SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n          SLinkOperations.setTarget(res, \"module\", resolved, false);\n          SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n          ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n        } else {\n          SNode res = SModelOperations.createNewNode(SNodeOperations.getModel(myModule), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", null);\n          SPropertyOperations.set(res, \"targetId\", moduleRef.getModuleId().toString());\n          SPropertyOperations.set(res, \"targetName\", moduleRef.getModuleFqName());\n          SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n          ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n        }\n      }\n    }\n  }","id":103258,"modified_method":"private void collectDependencies(boolean checkOnly) {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n    Map<String, Boolean> usedModuleIds = new HashMap<String, Boolean>();\n    Set<String> extractedModules = new HashSet<String>();\n    for (SNode dep : SLinkOperations.getTargets(module, \"dependencies\", true)) {\n      boolean extracted = false;\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\")) {\n        dep = SLinkOperations.getTarget(SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true);\n        extracted = true;\n      }\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\")) {\n        SNode onModule = SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\");\n        usedModuleIds.put(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"), SPropertyOperations.getBoolean(onModule, \"reexport\"));\n        if (extracted) {\n          extractedModules.add(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"));\n        }\n      }\n    }\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved = SNodeOperations.as(visible.resolve(moduleRef.getModuleFqName(), moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n      boolean found = false;\n      if (usedModuleIds.containsKey(moduleRef.getModuleId().toString())) {\n        found = true;\n        boolean foundReexport = usedModuleIds.get(moduleRef.getModuleId().toString());\n        if (foundReexport != reexport) {\n          report(\"wrong reexport status for dependency in build script for: \" + moduleRef.getModuleId().toString(), myOriginalModule);\n        }\n      }\n\n      if (reexport && !(extractedModules.contains(moduleRef.getModuleId().toString()))) {\n        report(\"reexport dependency should be extracted into build script: \" + dep.getModuleRef().toString(), myOriginalModule);\n      }\n      if (!(found)) {\n        if (checkOnly) {\n          continue;\n        }\n\n        if (resolved != null) {\n          SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n          SLinkOperations.setTarget(res, \"module\", resolved, false);\n          SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n          ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n        } else {\n          SNode res = SModelOperations.createNewNode(SNodeOperations.getModel(myModule), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", null);\n          SPropertyOperations.set(res, \"targetId\", moduleRef.getModuleId().toString());\n          SPropertyOperations.set(res, \"targetName\", moduleRef.getModuleFqName());\n          SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n          ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n        }\n      }\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void checkLanguageDeps() {\n    LanguageDescriptor descriptor = ((LanguageDescriptor) myModuleDescriptor);\n    for (ModuleReference lang : descriptor.getExtendedLanguages()) {\n      final SNode resolved = SNodeOperations.as(visible.resolve(lang.getModuleFqName(), lang.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n      if (resolved == null) {\n        report(\"cannot find extended language in dependencies: \" + lang.getModuleFqName(), myModule);\n        continue;\n      }\n      if (!(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"dependencies\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\") && SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\"), \"language\", false) == resolved;\n        }\n      }))) {\n\n        report(\"extends language dependency should be extracted into build script: \" + lang.toString(), myOriginalModule);\n      }\n    }\n  }","id":103259,"modified_method":"private void checkLanguageDeps() {\n    LanguageDescriptor descriptor = ((LanguageDescriptor) myModuleDescriptor);\n    for (ModuleReference lang : descriptor.getExtendedLanguages()) {\n      final SNode resolved = SNodeOperations.as(visible.resolve(lang.getModuleFqName(), lang.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Language\");\n      if (resolved == null) {\n        report(\"cannot find extended language in dependencies: \" + lang.getModuleFqName(), myModule);\n        continue;\n      }\n      if (!(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"dependencies\", true)).any(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          SNode em = SNodeOperations.as(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\");\n          return em != null && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(em, \"dependency\", true), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(em, \"dependency\", true), \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\"), \"language\", false) == resolved;\n        }\n      }))) {\n\n        report(\"extends language dependency should be extracted into build script: \" + lang.toString(), myOriginalModule);\n      }\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", \"jetbrains.mps.build.structure.BuildProjectPart\", false, new String[]{\"jetbrains.mps.build.structure.BuildProjectPart\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{\"uuid\"}, new String[]{});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKit\", \"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\"}, new String[]{}, new String[]{\"language\"});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\", \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\"}, new String[]{}, new String[]{\"solution\"});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitRef\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"devkit\"});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Group\", \"jetbrains.mps.build.structure.BuildProjectPart\", false, new String[]{\"jetbrains.mps.build.structure.BuildProjectPart\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Language\", \"jetbrains.mps.build.mps.structure.BuildMps_Module\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_Module\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Module\", \"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\"}, new String[]{\"doNotCompile\"}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"language\"});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"devkit\"});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"reexport\"}, new String[]{\"module\"});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"reexport\"}, new String[]{\"module\"});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"targetName\", \"targetId\", \"reexport\"}, new String[]{});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"language\"});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\"}, new String[]{}, new String[]{});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\"}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\"}, new String[]{}, new String[]{\"solution\"});\n      case 22:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 23:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Solution\", \"jetbrains.mps.build.mps.structure.BuildMps_Module\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_Module\"}, new String[]{}, new String[]{});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","id":103260,"modified_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", \"jetbrains.mps.build.structure.BuildProjectPart\", false, new String[]{\"jetbrains.mps.build.structure.BuildProjectPart\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{\"uuid\"}, new String[]{});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKit\", \"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\"}, new String[]{}, new String[]{\"language\"});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExportSolution\", \"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_DevKitExport\"}, new String[]{}, new String[]{\"solution\"});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_DevKitRef\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{\"devkit\"});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Group\", \"jetbrains.mps.build.structure.BuildProjectPart\", false, new String[]{\"jetbrains.mps.build.structure.BuildProjectPart\", \"jetbrains.mps.lang.core.structure.INamedConcept\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Language\", \"jetbrains.mps.build.mps.structure.BuildMps_Module\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_Module\"}, new String[]{}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Module\", \"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_AbstractModule\"}, new String[]{\"doNotCompile\"}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyExtendLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"language\"});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnDevKit\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"devkit\"});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnJavaModule\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"reexport\"}, new String[]{\"module\"});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"reexport\"}, new String[]{\"module\"});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModuleById\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{\"targetName\", \"targetId\", \"reexport\"}, new String[]{});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyUseLanguage\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependency\"}, new String[]{}, new String[]{\"language\"});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\"}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleJavaSource\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleModelRoot\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\"}, new String[]{}, new String[]{});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 22:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\", \"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_ModuleRuntime\"}, new String[]{}, new String[]{\"solution\"});\n      case 23:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleSource\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 24:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.build.mps.structure.BuildMps_Solution\", \"jetbrains.mps.build.mps.structure.BuildMps_Module\", false, new String[]{\"jetbrains.mps.build.mps.structure.BuildMps_Module\"}, new String[]{}, new String[]{});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","commit_id":"a76e90589b68c78eeb04a4f34b86e2d0c7517394","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a1a0a2a41(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103261,"modified_method":"private static boolean eq_a65dpo_a0a1a0a2a61(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0ab0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":103262,"modified_method":"private static boolean eq_a65dpo_a0a0a0b0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", true, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    if (!(completingByRightParen)) {\n      otherParentedNodes = ListSequence.fromList(otherParentedNodes).reversedList();\n    }\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression);\n\n      if (eq_a65dpo_a0d0l0g(ListSequence.fromList(otherParentPath.value).last(), topExp)) {\n        if (eq_a65dpo_a0a0d0l0g(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n\n        if (eq_a65dpo_a0a5a3a11a6_0(firstCommon, otherExpression) || eq_a65dpo_a0a5a3a11a6(firstCommon, myExpression)) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n        SNode otherPredecesor = ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1);\n        SNode myPredecesor = ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1);\n        // Does left parented node come from the left and right parented node from the right? \n        if ((completingByRightParen && eq_a65dpo_a0a0a0k0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a01a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a01a3a11a6_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0k0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n          break;\n        }\n      }\n      index--;\n    }\n\n    if (index == -1) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    SNode leftTurn = findLeftTurn(leftExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    SNode rightTurn = findRightTurn(rightExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    if (eq_a65dpo_a0w0g(leftTurn, rightTurn)) {\n      assert eq_a65dpo_a0a0w0g(leftTurn, firstCommon);\n      SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n      SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n      return parens;\n    }\n\n    SNode leftAccumulator;\n    SNode rightAccumulator;\n    if (neq_a65dpo_a0ab0g(leftTurn, firstCommon)) {\n      leftAccumulator = SLinkOperations.getTarget(leftTurn, \"rightExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(leftTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = leftTurn;\n      while (neq_a65dpo_a0e0ab0g(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a62a6(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n          leftAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      leftAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n    }\n\n    if (neq_a65dpo_a0cb0g(rightTurn, firstCommon)) {\n      rightAccumulator = SLinkOperations.getTarget(rightTurn, \"leftExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(rightTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = rightTurn;\n      while (neq_a65dpo_a0e0cb0g(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a82a6(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n          rightAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      rightAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n    }\n\n    SNode parens = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null);\n    if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) != null)) {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true));\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) != null)) {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), true);\n        SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n      } else {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", parens, true);\n      }\n    } else {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true));\n      SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n    }\n\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n    SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n    return parens;\n  }","id":103263,"modified_method":"private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", true, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    if (!(completingByRightParen)) {\n      otherParentedNodes = ListSequence.fromList(otherParentedNodes).reversedList();\n    }\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression);\n\n      if (eq_a65dpo_a0d0l0g(ListSequence.fromList(otherParentPath.value).last(), topExp)) {\n        if (eq_a65dpo_a0a0d0l0g(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          System.out.println(\"CCCCCC\");\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n\n        if (eq_a65dpo_a0a5a3a11a6_0(firstCommon, otherExpression) || eq_a65dpo_a0a5a3a11a6(firstCommon, myExpression)) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n        SNode otherPredecesor = ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1);\n        SNode myPredecesor = ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1);\n        if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n          // Does left parented node come from the left and right parented node from the right? \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a1a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a9a3a11a6_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0b0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n            break;\n          }\n        } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\")) {\n          // In case of a ternary operator expression being the first common predecessor \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), otherPredecesor) && eq_a65dpo_a0a0a1a0j0d0l0g_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), myPredecesor) && eq_a65dpo_a0a0b0a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), otherPredecesor)) {\n            break;\n          }\n        }\n      }\n      index--;\n    }\n    if (index == -1) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n      SNode leftTurn = findLeftTurn(leftExpression, firstCommon);\n      SNode rightTurn = findRightTurn(rightExpression, firstCommon);\n      if (eq_a65dpo_a0c0t0g(leftTurn, rightTurn)) {\n        assert eq_a65dpo_a0a0c0t0g(leftTurn, firstCommon);\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n    } else {\n      assert SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode ternaryExpr = SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode leftTurn = findLeftTurn(leftExpression, ternaryExpr);\n      SNode rightTurn = findRightTurn(rightExpression, ternaryExpr);\n\n      // Wrap the whole ternary operator expression in parens \n      if (eq_a65dpo_a0g0a91a6(leftTurn, rightTurn)) {\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(ternaryExpr, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", ternaryExpr, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n    }\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0k0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103264,"modified_method":"private static boolean eq_a65dpo_a0a0b0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0c0o(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":103265,"modified_method":"private static boolean neq_a65dpo_a0c0i(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static List<SNode> parentPath(SNode leaf) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    List<SNode> path = new ArrayList<SNode>();\n    ListSequence.fromList(path).addElement(leaf);\n    while ((SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"))) {\n      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"));\n      currentNode = SNodeOperations.getParent(currentNode);\n      if (!(SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"))) {\n        break;\n      }\n    }\n    return path;\n  }","id":103266,"modified_method":"private static List<SNode> parentPath(SNode leaf) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    List<SNode> path = new ArrayList<SNode>();\n    ListSequence.fromList(path).addElement(leaf);\n    while ((SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"))) {\n      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"));\n\n      // need to break out to avoid the possibility of having two ternary operator expressions in the path \n      // binary operation cannot be a parent of ternary operator expression \n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\")) {\n        // <node> \n      }\n\n      currentNode = SNodeOperations.getParent(currentNode);\n      if (!(SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") || SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"))) {\n        break;\n      }\n    }\n    return path;\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0k0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103267,"modified_method":"private static boolean eq_a65dpo_a0a0a1a0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0w0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103268,"modified_method":"private static boolean eq_a65dpo_a0g0a91a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a4a82a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103269,"modified_method":"private static boolean eq_a65dpo_a0a0a4a2a8(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0e0cb0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":103270,"modified_method":"private static boolean neq_a65dpo_a0e0c0i(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    SNode previous = leaf;\n    while (neq_a65dpo_a0c0o(previous, stopNode)) {\n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n        if (leftTurn && eq_a65dpo_a0a0a0a2a41(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n        if (!(leftTurn) && eq_a65dpo_a0a1a0a2a41(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n      }\n      previous = currentNode;\n      currentNode = SNodeOperations.getParent(currentNode);\n    }\n    return stopNode;\n  }","id":103271,"modified_method":"private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    SNode previous = leaf;\n    while (neq_a65dpo_a0c0q(previous, stopNode)) {\n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n        if (leftTurn && eq_a65dpo_a0a0a0a2a61(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n        if (!(leftTurn) && eq_a65dpo_a0a1a0a2a61(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n      }\n      previous = currentNode;\n      currentNode = SNodeOperations.getParent(currentNode);\n    }\n    return stopNode;\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a01a3a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103272,"modified_method":"private static boolean eq_a65dpo_a0a0a1a9a3a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0cb0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":103273,"modified_method":"private static boolean eq_a65dpo_a0c0t0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0e0ab0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":103274,"modified_method":"private static boolean neq_a65dpo_a0e0e0i(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a4a62a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103275,"modified_method":"private static boolean eq_a65dpo_a0a0a4a4a8(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a01a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103276,"modified_method":"private static boolean eq_a65dpo_a0a0a1a9a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0w0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103277,"modified_method":"private static boolean eq_a65dpo_a0a0c0t0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0a2a41(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103278,"modified_method":"private static boolean eq_a65dpo_a0a0a0a2a61(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"4e0f75bee67a9488eac23670fc4b4d143923e801","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0b0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103279,"modified_method":"private static boolean eq_a65dpo_a0a0a0b0l0c0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a1a9a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103280,"modified_method":"private static boolean eq_a65dpo_a0a0a1a11a2a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a1a9a3a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103281,"modified_method":"private static boolean eq_a65dpo_a0a0a1a11a2a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a1a0j0d0l0g_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103282,"modified_method":"private static boolean eq_a65dpo_a0a0a1a0l0c0l0g_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a1a0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103283,"modified_method":"private static boolean eq_a65dpo_a0a0j0c0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", true, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    if (!(completingByRightParen)) {\n      otherParentedNodes = ListSequence.fromList(otherParentedNodes).reversedList();\n    }\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression);\n\n      if (eq_a65dpo_a0d0l0g(ListSequence.fromList(otherParentPath.value).last(), topExp)) {\n        if (eq_a65dpo_a0a0d0l0g(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n\n        if ((eq_a65dpo_a0a0a5a3a11a6_0(firstCommon, otherExpression) || eq_a65dpo_a0a0a5a3a11a6(firstCommon, myExpression)) && SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.DotExpression\")) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n        SNode otherPredecesor = ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1);\n        SNode myPredecesor = ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1);\n        if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n          // Does left parented node come from the left and right parented node from the right? \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a1a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a9a3a11a6_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0b0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n            break;\n          }\n        } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\")) {\n          // In case of a ternary operator expression being the first common predecessor \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), otherPredecesor) && eq_a65dpo_a0a0a1a0j0d0l0g_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a0j0d0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), myPredecesor) && eq_a65dpo_a0a0b0a9a3a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), otherPredecesor)) {\n            break;\n          }\n        }\n      }\n      index--;\n    }\n    if (index == -1) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n      SNode leftTurn = findLeftTurn(leftExpression, firstCommon);\n      SNode rightTurn = findRightTurn(rightExpression, firstCommon);\n      if (eq_a65dpo_a0c0t0g(leftTurn, rightTurn)) {\n        assert eq_a65dpo_a0a0c0t0g(leftTurn, firstCommon);\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n    } else {\n      assert SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode ternaryExpr = SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode leftTurn = findLeftTurn(leftExpression, ternaryExpr);\n      SNode rightTurn = findRightTurn(rightExpression, ternaryExpr);\n\n      // Wrap the whole ternary operator expression in parens \n      if (eq_a65dpo_a0g0a91a6(leftTurn, rightTurn)) {\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(ternaryExpr, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", ternaryExpr, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n    }\n  }","id":103284,"modified_method":"private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression, completingByRightParen);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", true, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    if (!(completingByRightParen)) {\n      otherParentedNodes = ListSequence.fromList(otherParentedNodes).reversedList();\n    }\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression, !(completingByRightParen));\n      if (ListSequence.fromList(myParentPath).contains(ListSequence.fromList(otherParentPath.value).last()) || ListSequence.fromList(otherParentPath.value).contains(ListSequence.fromList(myParentPath).last())) {\n        if (eq_a65dpo_a0a0c0l0g(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n\n        if ((eq_a65dpo_a0a0a5a2a11a6_0(firstCommon, otherExpression) || eq_a65dpo_a0a0a5a2a11a6(firstCommon, myExpression)) && SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.DotExpression\")) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n\n        SNode otherPredecesor = (eq_a65dpo_a0a0i0c0l0g(firstCommon, otherExpression) ? firstCommon : ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1));\n        SNode myPredecesor = (eq_a65dpo_a0a0j0c0l0g(firstCommon, myExpression) ? firstCommon : ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1));\n\n        if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n          // Does left parented node come from the left and right parented node from the right? \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0l0c0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a1a11a2a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a11a2a11a6_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0b0l0c0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n            break;\n          }\n        } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\")) {\n          // In case of a ternary operator expression being the first common predecessor \n          if ((completingByRightParen && eq_a65dpo_a0a0a0b0a11a2a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), otherPredecesor) && eq_a65dpo_a0a0a1a0l0c0l0g_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a1a0l0c0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), myPredecesor) && eq_a65dpo_a0a0b0a11a2a11a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true), otherPredecesor)) {\n            break;\n          }\n        } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\")) {\n          if ((completingByRightParen && eq_a65dpo_a0a0a0a1l0c0l0g_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\"), \"expression\", true), myPredecesor)) || (!(completingByRightParen) && eq_a65dpo_a0a0a0a1l0c0l0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\"), \"expression\", true), otherPredecesor))) {\n            break;\n          }\n        }\n      }\n      index--;\n    }\n    if (index == -1) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n      SNode leftTurn = findLeftTurn(leftExpression, firstCommon);\n      SNode rightTurn = findRightTurn(rightExpression, firstCommon);\n      if (eq_a65dpo_a0c0t0g(leftTurn, rightTurn)) {\n        assert eq_a65dpo_a0a0c0t0g(leftTurn, firstCommon);\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n\n\n\n    } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\")) {\n      SNode castExpr = SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\");\n      SNode leftTurn = firstCommon;\n      SNode rightTurn = findRightTurn(rightExpression, castExpr);\n\n      // Wrap the whole cast expression in parens \n      if (eq_a65dpo_a0f0a91a6(leftTurn, rightTurn)) {\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(castExpr, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", castExpr, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n\n\n\n    } else {\n      assert SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode ternaryExpr = SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n      SNode leftTurn = findLeftTurn(leftExpression, ternaryExpr);\n      SNode rightTurn = findRightTurn(rightExpression, ternaryExpr);\n\n      // Wrap the whole ternary operator expression in parens \n      if (eq_a65dpo_a0g0a91a6(leftTurn, rightTurn)) {\n        SNode parens = SNodeFactoryOperations.replaceWithNewChild(ternaryExpr, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n        SLinkOperations.setTarget(parens, \"expression\", ternaryExpr, true);\n        return parens;\n      }\n\n      return ParenthesisUtil.rebalance(leftTurn, firstCommon, rightTurn);\n    }\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a5a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103285,"modified_method":"private static boolean eq_a65dpo_a0a0a5a2a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static List<SNode> parentPath(SNode leaf) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    List<SNode> path = new ArrayList<SNode>();\n    ListSequence.fromList(path).addElement(leaf);\n    while ((SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"))) {\n      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"));\n\n      // need to break out to avoid the possibility of having two ternary operator expressions in the path \n      // binary operation cannot be a parent of ternary operator expression \n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\")) {\n        // <node> \n      }\n\n      currentNode = SNodeOperations.getParent(currentNode);\n      if (!(SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") || SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"))) {\n        break;\n      }\n    }\n    return path;\n  }","id":103286,"modified_method":"private static List<SNode> parentPath(SNode leaf, boolean rightParen) {\n    List<SNode> path = new ArrayList<SNode>();\n    ListSequence.fromList(path).addElement(leaf);\n    SNode currentNode = SNodeOperations.getParent(leaf);\n\n    while ((SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"))) {\n      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"));\n\n      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.Expression\"), \"virtual_isCompileTimeConstant_1238860258777\", new Object[]{}) || SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") || SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"))) {\n\n        if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.CastExpression\") && rightParen && isTheRightMostExpression(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.CastExpression\"), \"expression\", true), leaf)) {\n          // continue adding parents \n\n\n        } else {\n          break;\n        }\n      }\n\n      // need to break out to avoid the possibility of having two ternary operator expressions in the path \n      // binary operation cannot be a parent of ternary operator expression, parens around ternary are required \n\n      currentNode = SNodeOperations.getParent(currentNode);\n    }\n    return path;\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0b0a9a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103287,"modified_method":"private static boolean eq_a65dpo_a0a0a0b0a11a2a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0b0a9a3a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103288,"modified_method":"private static boolean eq_a65dpo_a0a0b0a11a2a11a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103289,"modified_method":"private static boolean eq_a65dpo_a0a0c0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103290,"modified_method":"private static boolean eq_a65dpo_a0a0a0a1l0c0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a5a3a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103291,"modified_method":"private static boolean eq_a65dpo_a0a0a5a2a11a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0b0j0d0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":103292,"modified_method":"private static boolean eq_a65dpo_a0a0b0l0c0l0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode rebalance(SNode leftTurn, SNode firstCommon, SNode rightTurn) {\n    SNode leftAccumulator;\n    SNode rightAccumulator;\n    if (neq_a65dpo_a0c0i(leftTurn, firstCommon)) {\n      leftAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(leftTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = leftTurn;\n      while (neq_a65dpo_a0e0c0i(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a2a8(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n          leftAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      leftAccumulator = (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true));\n      SNodeOperations.detachNode(leftAccumulator);\n    }\n\n    if (neq_a65dpo_a0e0i(rightTurn, firstCommon)) {\n      rightAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(rightTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = rightTurn;\n      while (neq_a65dpo_a0a4a4a8(current, firstCommon) && !(SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"))) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a4a8(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n          rightAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n\n    } else {\n      rightAccumulator = (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true));\n      SNodeOperations.detachNode(rightAccumulator);\n    }\n\n    SNode parens = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null);\n    if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) != null)) {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true));\n        if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) != null)) {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), true);\n          SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n        } else {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", parens, true);\n        }\n      } else {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true));\n        SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n      }\n\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n    } else {\n      assert SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n\n      SNode bottomMostTernary = ParenthesisUtil.findBottomMostTernary(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"));\n\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true) != null)) {\n        bottomMostTernary = (bottomMostTernary == null ? SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\") : bottomMostTernary);\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(bottomMostTernary, \"ifFalse\", true));\n        if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true) != null)) {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), true);\n          SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n        } else {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", parens, true);\n        }\n      } else {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true));\n        SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n      }\n\n      SLinkOperations.setTarget(bottomMostTernary, \"ifFalse\", rightAccumulator, true);\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", leftAccumulator, true);\n    }\n    SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n    return parens;\n  }","id":103293,"modified_method":"private static SNode rebalance(SNode leftTurn, SNode firstCommon, SNode rightTurn) {\n    SNode leftAccumulator;\n    SNode rightAccumulator;\n    if (neq_a65dpo_a0c0i(leftTurn, firstCommon)) {\n      leftAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(leftTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = leftTurn;\n      while (neq_a65dpo_a0e0c0i(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a2a8(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n          leftAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\")) {\n        leftAccumulator = firstCommon;\n      } else {\n        leftAccumulator = (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true));\n        SNodeOperations.detachNode(leftAccumulator);\n      }\n    }\n\n    if (neq_a65dpo_a0e0i(rightTurn, firstCommon)) {\n      rightAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(rightTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = rightTurn;\n      while (neq_a65dpo_a0a4a4a8(current, firstCommon) && !(SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\") || SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.CastExpression\"))) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a4a8(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n          rightAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n\n    } else {\n      rightAccumulator = (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") ? SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) : SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true));\n      SNodeOperations.detachNode(rightAccumulator);\n    }\n\n    SNode parens = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null);\n    if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) != null)) {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true));\n        if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) != null)) {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), true);\n          SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n        } else {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", parens, true);\n        }\n      } else {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true));\n        SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n      }\n\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n\n\n\n    } else if (SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\")) {\n      SNodeOperations.replaceWithAnother(firstCommon, rightTurn);\n      SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", parens, true);\n      SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.CastExpression\"), \"expression\", rightAccumulator, true);\n\n    } else {\n      assert SNodeOperations.isInstanceOf(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\");\n\n      SNode bottomMostTernary = ParenthesisUtil.findBottomMostTernary(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"));\n\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"ifFalse\", true) != null)) {\n        bottomMostTernary = (bottomMostTernary == null ? SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\") : bottomMostTernary);\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(bottomMostTernary, \"ifFalse\", true));\n        if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true) != null)) {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true), true);\n          SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n        } else {\n          SLinkOperations.setTarget(SNodeOperations.cast(rightTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", parens, true);\n        }\n      } else {\n        SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", true));\n        SLinkOperations.setTarget(SNodeOperations.cast(leftTurn, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", parens, true);\n      }\n\n      SLinkOperations.setTarget(bottomMostTernary, \"ifFalse\", rightAccumulator, true);\n      SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\"), \"condition\", leftAccumulator, true);\n    }\n    SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n    return parens;\n  }","commit_id":"c0189e55278bb25a7d272834ac4efcb8e87217e3","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected void checkUnsetGroupUsersMembershipPolicy(\n\t\t\tlong groupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(groupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<Group> mandatoryGroups =\n\t\t\t\tMembershipPolicyUtil.getMandatoryGroups(user);\n\n\t\t\tif (mandatoryGroups.contains(group)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.GROUP_MEMBERSHIP_REQUIRED);\n\n\t\t\t\t\tmembershipPolicyException.addGroup(group);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103294,"modified_method":"protected void checkUnsetGroupUsersMembershipPolicy(\n\t\t\tlong groupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(groupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<Group> mandatoryGroups =\n\t\t\t\tMembershipPolicyUtil.getMandatoryGroups(user);\n\n\t\t\tif (!mandatoryGroups.contains(group)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.GROUP_MEMBERSHIP_REQUIRED);\n\n\t\t\t\tmembershipPolicyException.addGroup(group);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkUnsetUserGroupUsersMembershipPolicy(\n\t\t\tlong userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tUserGroup userGroup = userGroupPersistence.findByPrimaryKey(\n\t\t\tuserGroupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<UserGroup> mandatoryUserGroups =\n\t\t\t\tMembershipPolicyUtil.getMandatoryUserGroups(user);\n\n\t\t\tif (mandatoryUserGroups.contains(userGroup)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\t\tUSER_GROUP_MEMBERSHIP_REQUIRED);\n\n\t\t\t\t\tmembershipPolicyException.addUserGroup(userGroup);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103295,"modified_method":"protected void checkUnsetUserGroupUsersMembershipPolicy(\n\t\t\tlong userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tUserGroup userGroup = userGroupPersistence.findByPrimaryKey(\n\t\t\tuserGroupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<UserGroup> mandatoryUserGroups =\n\t\t\t\tMembershipPolicyUtil.getMandatoryUserGroups(user);\n\n\t\t\tif (!mandatoryUserGroups.contains(userGroup)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\tUSER_GROUP_MEMBERSHIP_REQUIRED);\n\n\t\t\t\tmembershipPolicyException.addUserGroup(userGroup);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkAddGroupUsersMembershipPolicy(\n\t\t\tlong groupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(groupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (!MembershipPolicyUtil.isMembershipAllowed(group, user)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.GROUP_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\t\tmembershipPolicyException.addGroup(group);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103296,"modified_method":"protected void checkAddGroupUsersMembershipPolicy(\n\t\t\tlong groupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tGroup group = groupPersistence.findByPrimaryKey(groupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (MembershipPolicyUtil.isMembershipAllowed(group, user)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.GROUP_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\tmembershipPolicyException.addGroup(group);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkUnsetRoleUsersMembershipPolicy(\n\t\t\tlong roleId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tRole role = rolePersistence.findByPrimaryKey(roleId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<Role> mandatoryRoles = MembershipPolicyUtil.getMandatoryRoles(\n\t\t\t\tuser);\n\n\t\t\tif (mandatoryRoles.contains(role)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.ROLE_MEMBERSHIP_REQUIRED);\n\n\t\t\t\t\tmembershipPolicyException.addRole(role);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103297,"modified_method":"protected void checkUnsetRoleUsersMembershipPolicy(\n\t\t\tlong roleId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tRole role = rolePersistence.findByPrimaryKey(roleId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tSet<Role> mandatoryRoles = MembershipPolicyUtil.getMandatoryRoles(\n\t\t\t\tuser);\n\n\t\t\tif (!mandatoryRoles.contains(role)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.ROLE_MEMBERSHIP_REQUIRED);\n\n\t\t\t\tmembershipPolicyException.addRole(role);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkAddOrganizationUsersMembershipPolicy(\n\t\t\tlong organizationId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tOrganization organization = organizationPersistence.findByPrimaryKey(\n\t\t\torganizationId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userLocalService.fetchUser(userId);\n\n\t\t\tif (!MembershipPolicyUtil.isMembershipAllowed(organization, user)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException =\n\t\t\t\t\t\tnew MembershipPolicyException(\n\t\t\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\t\t\tORGANIZATION_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\t\tmembershipPolicyException.addOrganization(organization);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103298,"modified_method":"protected void checkAddOrganizationUsersMembershipPolicy(\n\t\t\tlong organizationId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tOrganization organization = organizationPersistence.findByPrimaryKey(\n\t\t\torganizationId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userLocalService.fetchUser(userId);\n\n\t\t\tif (MembershipPolicyUtil.isMembershipAllowed(organization, user)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\tORGANIZATION_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\tmembershipPolicyException.addOrganization(organization);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkAddRoleUsersMembershipPolicy(\n\t\t\tlong roleId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tRole role = rolePersistence.findByPrimaryKey(roleId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (!MembershipPolicyUtil.isMembershipAllowed(role, user)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.ROLE_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\t\tmembershipPolicyException.addRole(role);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103299,"modified_method":"protected void checkAddRoleUsersMembershipPolicy(\n\t\t\tlong roleId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tRole role = rolePersistence.findByPrimaryKey(roleId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (MembershipPolicyUtil.isMembershipAllowed(role, user)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.ROLE_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\tmembershipPolicyException.addRole(role);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkAddUserGroupUsersMembershipPolicy(\n\t\t\tlong userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tUserGroup userGroup = userGroupPersistence.findByPrimaryKey(\n\t\t\tuserGroupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (!MembershipPolicyUtil.isMembershipAllowed(userGroup, user)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\t\tUSER_GROUP_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\t\tmembershipPolicyException.addUserGroup(userGroup);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103300,"modified_method":"protected void checkAddUserGroupUsersMembershipPolicy(\n\t\t\tlong userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tUserGroup userGroup = userGroupPersistence.findByPrimaryKey(\n\t\t\tuserGroupId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\n\t\t\tif (MembershipPolicyUtil.isMembershipAllowed(userGroup, user)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\tUSER_GROUP_MEMBERSHIP_NOT_ALLOWED);\n\n\t\t\t\tmembershipPolicyException.addUserGroup(userGroup);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void checkUnsetOrganizationUsersMembershipPolicy(\n\t\t\tlong organizationId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tOrganization organization = organizationPersistence.findByPrimaryKey(\n\t\t\torganizationId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userLocalService.fetchUser(userId);\n\n\t\t\tSet<Organization> mandatoryOrganizations =\n\t\t\t\tMembershipPolicyUtil.getMandatoryOrganizations(user);\n\n\t\t\tif (mandatoryOrganizations.contains(organization)) {\n\t\t\t\tif (membershipPolicyException == null) {\n\t\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\t\tORGANIZATION_MEMBERSHIP_REQUIRED);\n\n\t\t\t\t\tmembershipPolicyException.addOrganization(organization);\n\t\t\t\t}\n\n\t\t\t\tmembershipPolicyException.addUser(user);\n\t\t\t}\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","id":103301,"modified_method":"protected void checkUnsetOrganizationUsersMembershipPolicy(\n\t\t\tlong organizationId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tMembershipPolicyException membershipPolicyException = null;\n\n\t\tOrganization organization = organizationPersistence.findByPrimaryKey(\n\t\t\torganizationId);\n\n\t\tfor (long userId : userIds) {\n\t\t\tUser user = userLocalService.fetchUser(userId);\n\n\t\t\tSet<Organization> mandatoryOrganizations =\n\t\t\t\tMembershipPolicyUtil.getMandatoryOrganizations(user);\n\n\t\t\tif (!mandatoryOrganizations.contains(organization)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (membershipPolicyException == null) {\n\t\t\t\tmembershipPolicyException = new MembershipPolicyException(\n\t\t\t\t\tMembershipPolicyException.\n\t\t\t\t\t\tORGANIZATION_MEMBERSHIP_REQUIRED);\n\n\t\t\t\tmembershipPolicyException.addOrganization(organization);\n\t\t\t}\n\n\t\t\tmembershipPolicyException.addUser(user);\n\t\t}\n\n\t\tif (membershipPolicyException != null) {\n\t\t\tthrow membershipPolicyException;\n\t\t}\n\t}","commit_id":"ee3a959243bb57235a4c27915b99f87e0bd4329f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n   * Parses a single command.\n   * @param cmd command\n   * @return process\n   * @throws QueryException query exception\n   */\n  private Proc parse(final Cmd cmd) throws QueryException {\n    switch(cmd) {\n      // user commands\n\n      case CREATE: case C:\n        switch(consume(CmdCreate.class, cmd)) {\n          case DATABASE: case DB:\n            return new CreateDB(string(cmd), name(null));\n          case COLLECTION: case COLL:\n            return new CreateColl(name(cmd));\n          case INDEX:\n            return new CreateIndex(consume(CmdIndex.class, cmd));\n          case FS:\n            return new CreateFS(string(cmd), name(cmd));\n          case MAB:\n            return new CreateMAB(string(cmd), name(null));\n          case USER:\n            return new CreateUser(name(cmd), name(null));\n        }\n        break;\n      case ALTER:\n        key(USER, cmd);\n        return new AlterUser(name(cmd), name(null));\n      case OPEN: case O:\n        return new Open(name(cmd));\n      case CHECK:\n        return new Check(string(cmd));\n      case ADD:\n        return new Add(string(cmd));\n      case DELETE:\n        return new Delete(string(cmd));\n      case INFO: case I:\n        switch(consume(CmdInfo.class, cmd)) {\n          case NULL:\n            return new Info();\n          case DATABASE: case DB:\n            return new InfoDB();\n          case INDEX:\n            return new InfoIndex();\n          case TABLE:\n            String arg1 = number(null);\n            final String arg2 = arg1 != null ? number(null) : null;\n            if(arg1 == null) arg1 = xquery(null);\n            return new InfoTable(arg1, arg2);\n          case USERS:\n            return new InfoUsers();\n        }\n        break;\n      case CLOSE:\n        return new Close();\n      case LIST:\n        return new List();\n      case DROP:\n        switch(consume(CmdDrop.class, cmd)) {\n          case DATABASE: case DB:\n            return new DropDB(name(cmd));\n          case INDEX:\n            return new DropIndex(consume(CmdIndex.class, cmd));\n          case USER:\n            final String name = name(cmd);\n            final String db = key(ON, null) ? name(cmd) : null;\n            return new DropUser(name, db);\n        }\n        break;\n      case OPTIMIZE:\n        return new Optimize();\n      case EXPORT:\n        return new Export(string(cmd), string(null));\n      case XQUERY: case X:\n        return new XQuery(xquery(cmd));\n      case RUN:\n        return new Run(string(cmd));\n      case FIND:\n        return new Find(string(cmd));\n      case CS:\n        return new Cs(xquery(cmd));\n      case SET:\n        final String opt = name(cmd);\n        final String val = string(null);\n        final Object type = ctx.prop.object(opt.toUpperCase());\n        if(type == null) help(null, cmd);\n        return new Set(opt, val);\n      case PASSWORD:\n        return new Password(name(null));\n      case HELP:\n        String hc = name(null);\n        if(hc != null) {\n          qp = qm;\n          hc = consume(Cmd.class, cmd).toString();\n        }\n        return new Help(hc);\n      case EXIT: case QUIT: case Q:\n        return new Exit();\n\n      // admin commands\n      case KILL:\n        return new Kill(name(cmd));\n      case SHOW:\n        final CmdShow show = consume(CmdShow.class, cmd);\n        switch(show) {\n          case DATABASES:\n          case SESSIONS:\n          case USERS:\n            return new Show(show);\n          default:\n        }\n        break;\n      case GRANT:\n        CmdPerm perm = consume(CmdPerm.class, cmd);\n        if(perm == null) help(null, cmd);\n        String db = key(ON, null) ? name(cmd) : null;\n        key(TO, cmd);\n        return db == null ? new Grant(perm, name(cmd)) :\n          new Grant(perm, name(cmd), db);\n      case REVOKE:\n        perm = consume(CmdPerm.class, cmd);\n        if(perm == null) help(null, cmd);\n        db = key(ON, null) ? name(cmd) : null;\n        key(FROM, cmd);\n        return db == null ? new Revoke(perm, name(cmd)) :\n          new Revoke(perm, name(cmd), db);\n      default:\n    }\n    return null;\n  }","id":103302,"modified_method":"/**\n   * Parses a single command.\n   * @param cmd command\n   * @return process\n   * @throws QueryException query exception\n   */\n  private Proc parse(final Cmd cmd) throws QueryException {\n    switch(cmd) {\n      // user commands\n\n      case CREATE: case C:\n        switch(consume(CmdCreate.class, cmd)) {\n          case DATABASE: case DB:\n            return new CreateDB(string(cmd), name(null));\n          case COLLECTION: case COLL:\n            return new CreateColl(name(cmd));\n          case INDEX:\n            return new CreateIndex(consume(CmdIndex.class, cmd));\n          case FS:\n            return new CreateFS(string(cmd), name(cmd));\n          case MAB:\n            return new CreateMAB(string(cmd), name(null));\n          case USER:\n            return new CreateUser(name(cmd), name(null));\n        }\n        break;\n      case ALTER:\n        key(USER, cmd);\n        return new AlterUser(name(cmd), name(null));\n      case OPEN: case O:\n        return new Open(name(cmd));\n      case CHECK:\n        return new Check(string(cmd));\n      case ADD:\n        return new Add(string(cmd));\n      case DELETE:\n        return new Delete(string(cmd));\n      case INFO: case I:\n        switch(consume(CmdInfo.class, cmd)) {\n          case NULL:\n            return new Info();\n          case DATABASE: case DB:\n            return new InfoDB();\n          case INDEX:\n            return new InfoIndex();\n          case TABLE:\n            String arg1 = number(null);\n            final String arg2 = arg1 != null ? number(null) : null;\n            if(arg1 == null) arg1 = xquery(null);\n            return new InfoTable(arg1, arg2);\n        }\n        break;\n      case CLOSE:\n        return new Close();\n      case LIST:\n        return new List();\n      case DROP:\n        switch(consume(CmdDrop.class, cmd)) {\n          case DATABASE: case DB:\n            return new DropDB(name(cmd));\n          case INDEX:\n            return new DropIndex(consume(CmdIndex.class, cmd));\n          case USER:\n            final String name = name(cmd);\n            final String db = key(ON, null) ? name(cmd) : null;\n            return new DropUser(name, db);\n        }\n        break;\n      case OPTIMIZE:\n        return new Optimize();\n      case EXPORT:\n        return new Export(string(cmd), string(null));\n      case XQUERY: case X:\n        return new XQuery(xquery(cmd));\n      case RUN:\n        return new Run(string(cmd));\n      case FIND:\n        return new Find(string(cmd));\n      case CS:\n        return new Cs(xquery(cmd));\n      case SET:\n        final String opt = name(cmd);\n        final String val = string(null);\n        final Object type = ctx.prop.object(opt.toUpperCase());\n        if(type == null) help(null, cmd);\n        return new Set(opt, val);\n      case PASSWORD:\n        return new Password(name(null));\n      case HELP:\n        String hc = name(null);\n        if(hc != null) {\n          qp = qm;\n          hc = consume(Cmd.class, cmd).toString();\n        }\n        return new Help(hc);\n      case EXIT: case QUIT: case Q:\n        return new Exit();\n\n      // admin commands\n      case KILL:\n        return new Kill(name(cmd));\n      case SHOW:\n        final CmdShow show = consume(CmdShow.class, cmd);\n        switch(show) {\n          case DATABASES:\n          case SESSIONS:\n            return new Show(show);\n          case USERS:\n            final String db = key(ON, null) ? name(cmd) : null;\n            return new Show(show, db);\n          default:\n        }\n        break;\n      case GRANT:\n        CmdPerm perm = consume(CmdPerm.class, cmd);\n        if(perm == null) help(null, cmd);\n        String db = key(ON, null) ? name(cmd) : null;\n        key(TO, cmd);\n        return db == null ? new Grant(perm, name(cmd)) :\n          new Grant(perm, name(cmd), db);\n      case REVOKE:\n        perm = consume(CmdPerm.class, cmd);\n        if(perm == null) help(null, cmd);\n        db = key(ON, null) ? name(cmd) : null;\n        key(FROM, cmd);\n        return db == null ? new Revoke(perm, name(cmd)) :\n          new Revoke(perm, name(cmd), db);\n      default:\n    }\n    return null;\n  }","commit_id":"c7f0c3c9774584760d9c5e332b0f8f2f9e413735","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Reacts on user input.\r\n   * @param cmp calling component\r\n   */\r\n  public void action(final Object cmp) {\r\n    String msg = null;\r\n    try {\r\n      if(cmp == change) {\r\n        for(final Proc p : permps) {\r\n          if(!sess.execute(p)) {\r\n            msg = sess.info();\r\n            break;\r\n          }\r\n        }\r\n        permps.clear();\r\n        if(global) {\r\n          setData();\r\n        } else {\r\n          setDataL();\r\n        }\r\n      } else if(cmp == create) {\r\n        final String u = user.getText();\r\n        final String p = new String(pass.getPassword());\r\n        if(!sess.execute(new CreateUser(u, p))) msg = sess.info();\r\n        user.setText(\"\");\r\n        pass.setText(\"\");\r\n        setData();\r\n      } else if(cmp == drop) {\r\n        final String u = dropUser.getSelectedItem().toString();\r\n        if(Dialog.confirm(this, Main.info(DRQUESTION, u)) &&\r\n          !sess.execute(new DropUser(u))) msg = sess.info();\r\n        setData();\r\n      } else if(cmp == alter) {\r\n        final String u = alterUser.getSelectedItem().toString();\r\n        final String p = new String(newpass.getPassword());\r\n        if(!sess.execute(new AlterUser(u, p))) msg = sess.info();\r\n        newpass.setText(\"\");\r\n        setData();\r\n      } else if(cmp == remove) {\r\n        final String u = removeUser.getSelectedItem().toString();\r\n        final String db = databases.getSelectedItem().toString();\r\n        if(!sess.execute(new DropUser(u, db))) msg = sess.info();\r\n        setDataL();\r\n      } else if(cmp == add) {\r\n        final String value = addUser.getSelectedItem().toString();\r\n        for(final StringList l : tempP) {\r\n          if(l.get(0).equals(value)) {\r\n            final String db = databases.getSelectedItem().toString();\r\n            for(int i = 1; i <= 2; i++) {\r\n              final String o = l.get(i);\r\n              final Object val = o.equals(\"\") ? Boolean.FALSE : o.equals(\"X\") ?\r\n                  Boolean.TRUE : o;\r\n              final String right = CmdPerm.values()[i - 1].toString();\r\n              permps.add(val.equals(true) ? new Grant(right, value, db) :\r\n                new Revoke(right, value, db));\r\n            }\r\n          }\r\n        }\r\n        action(change);\r\n      } else if(cmp == databases) {\r\n        try {\r\n          sess.execute(new Close());\r\n          sess.execute(new Open(databases.getSelectedItem().toString()));\r\n          setDataL();\r\n        } catch(final IOException e1) {\r\n          addUser.removeAllItems();\r\n          removeUser.removeAllItems();\r\n          data = new Table();\r\n          msg = e1.getMessage();\r\n          ((TableModel) table.getModel()).fireTableChanged(null);\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      Main.debug(ex);\r\n      if(ex instanceof BindException) msg = SERVERBIND;\r\n      else if(ex instanceof LoginException) msg = SERVERLOGIN;\r\n      else msg = ex.getMessage(); // SERVERERR;\r\n    }\r\n\r\n    final boolean n = user.getText().matches(\"[\\\\w]*\");\r\n    final boolean p = new String(pass.getPassword()).matches(\"[\\\\w]*\");\r\n    final boolean np = new String(newpass.getPassword()).matches(\"[\\\\w]*\");\r\n    boolean na = !user.getText().equals(ADMIN);\r\n    for(int i = 0; i < dropUser.getItemCount(); i++) {\r\n      na &= !user.getText().equals(dropUser.getItemAt(i).toString());\r\n    }\r\n\r\n    boolean warn = true;\r\n    if(msg != null) {\r\n      warn = false;\r\n    } else if(!(n && p && np && na)) {\r\n      msg = !na ? Main.info(USERKNOWN, user.getText()) : Main.info(\r\n          INVALID, !n ? SERVERUSER : SERVERPW);\r\n    }\r\n    info.setError(msg, warn);\r\n\r\n    alter.setEnabled(np && newpass.getPassword().length != 0\r\n        && alterUser.getSelectedIndex() != -1);\r\n    create.setEnabled(n && p && na\r\n        && !user.getText().isEmpty() && pass.getPassword().length != 0);\r\n    drop.setEnabled(dropUser.getSelectedIndex() != -1);\r\n    remove.setEnabled(removeUser.getSelectedIndex() != -1);\r\n    add.setEnabled(addUser.getSelectedIndex() != -1);\r\n    change.setEnabled(false);\r\n  }","id":103303,"modified_method":"/**\r\n   * Reacts on user input.\r\n   * @param cmp calling component\r\n   */\r\n  public void action(final Object cmp) {\r\n    String msg = null;\r\n    try {\r\n      final Object di = databases.getSelectedItem();\r\n      final String db = di == null ? null : di.toString();\r\n      if(cmp == change) {\r\n        for(final Proc p : permps) {\r\n          if(!sess.execute(p)) {\r\n            msg = sess.info();\r\n            break;\r\n          }\r\n        }\r\n        permps.clear();\r\n        if(global) {\r\n          setData();\r\n        } else {\r\n          setDataL(db);\r\n        }\r\n      } else if(cmp == create) {\r\n        final String u = user.getText();\r\n        final String p = new String(pass.getPassword());\r\n        if(!sess.execute(new CreateUser(u, p))) msg = sess.info();\r\n        user.setText(\"\");\r\n        pass.setText(\"\");\r\n        setData();\r\n      } else if(cmp == drop) {\r\n        final String u = dropUser.getSelectedItem().toString();\r\n        if(Dialog.confirm(this, Main.info(DRQUESTION, u)) &&\r\n          !sess.execute(new DropUser(u))) msg = sess.info();\r\n        setData();\r\n      } else if(cmp == alter) {\r\n        final String u = alterUser.getSelectedItem().toString();\r\n        final String p = new String(newpass.getPassword());\r\n        if(!sess.execute(new AlterUser(u, p))) msg = sess.info();\r\n        newpass.setText(\"\");\r\n        setData();\r\n      } else if(cmp == remove) {\r\n        final String u = removeUser.getSelectedItem().toString();\r\n        if(!sess.execute(new DropUser(u, db))) msg = sess.info();\r\n        setDataL(db);\r\n      } else if(cmp == add) {\r\n        final String value = addUser.getSelectedItem().toString();\r\n        for(final StringList l : tempP) {\r\n          if(l.get(0).equals(value)) {\r\n            for(int i = 1; i <= 2; i++) {\r\n              final String o = l.get(i);\r\n              final Object val = o.equals(\"\") ? Boolean.FALSE : o.equals(\"X\") ?\r\n                  Boolean.TRUE : o;\r\n              final String right = CmdPerm.values()[i - 1].toString();\r\n              permps.add(val.equals(true) ? new Grant(right, value, db) :\r\n                new Revoke(right, value, db));\r\n            }\r\n          }\r\n        }\r\n        action(change);\r\n      } else if(cmp == databases) {\r\n        try {\r\n          setDataL(databases.getSelectedItem().toString());\r\n        } catch(final IOException e1) {\r\n          addUser.removeAllItems();\r\n          removeUser.removeAllItems();\r\n          data = new Table();\r\n          msg = e1.getMessage();\r\n          ((TableModel) table.getModel()).fireTableChanged(null);\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      Main.debug(ex);\r\n      if(ex instanceof BindException) msg = SERVERBIND;\r\n      else if(ex instanceof LoginException) msg = SERVERLOGIN;\r\n      else msg = ex.getMessage(); // SERVERERR;\r\n    }\r\n\r\n    final boolean n = user.getText().matches(\"[\\\\w]*\");\r\n    final boolean p = new String(pass.getPassword()).matches(\"[\\\\w]*\");\r\n    final boolean np = new String(newpass.getPassword()).matches(\"[\\\\w]*\");\r\n    boolean na = !user.getText().equals(ADMIN);\r\n    for(int i = 0; i < dropUser.getItemCount(); i++) {\r\n      na &= !user.getText().equals(dropUser.getItemAt(i).toString());\r\n    }\r\n\r\n    boolean warn = true;\r\n    if(msg != null) {\r\n      warn = false;\r\n    } else if(!(n && p && np && na)) {\r\n      msg = !na ? Main.info(USERKNOWN, user.getText()) : Main.info(\r\n          INVALID, !n ? SERVERUSER : SERVERPW);\r\n    }\r\n    info.setError(msg, warn);\r\n\r\n    alter.setEnabled(np && newpass.getPassword().length != 0\r\n        && alterUser.getSelectedIndex() != -1);\r\n    create.setEnabled(n && p && na\r\n        && !user.getText().isEmpty() && pass.getPassword().length != 0);\r\n    drop.setEnabled(dropUser.getSelectedIndex() != -1);\r\n    remove.setEnabled(removeUser.getSelectedIndex() != -1);\r\n    add.setEnabled(addUser.getSelectedIndex() != -1);\r\n    change.setEnabled(false);\r\n  }","commit_id":"c7f0c3c9774584760d9c5e332b0f8f2f9e413735","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Sets new data.\r\n   * @throws IOException I/O Exception\r\n   */\r\n  public void setData() throws IOException {\r\n    final CachedOutput out = new CachedOutput();\r\n    if(!sess.execute(new Show(CmdShow.USERS), out))\r\n      throw new IOException(sess.info());\r\n\r\n    data = new Table(out.toString());\r\n    dropUser.removeAllItems();\r\n    alterUser.removeAllItems();\r\n    TokenList tmp = null;\r\n    for(final TokenList o : data.contents) {\r\n      final String check = Token.string(o.get(0));\r\n      if(!check.equals(ADMIN)) {\r\n        dropUser.addItem(check);\r\n      } else {\r\n        tmp = o;\r\n      }\r\n      alterUser.addItem(check);\r\n    }\r\n    dropUser.setSelectedIndex(-1);\r\n    alterUser.setSelectedIndex(-1);\r\n    data.contents.remove(tmp);\r\n    ((TableModel) table.getModel()).fireTableChanged(null);\r\n  }","id":103304,"modified_method":"/**\r\n   * Sets local data.\r\n   * @param db database to be opened\r\n   * @throws IOException I/O Exception\r\n   */\r\n  void setDataL(final String db) throws IOException {\r\n    CachedOutput out = new CachedOutput();\r\n    if(!sess.execute(new Show(CmdShow.USERS, db), out))\r\n      throw new IOException(sess.info());\r\n    final String users = out.toString();\r\n    out = new CachedOutput();\r\n    if(!sess.execute(new Show(CmdShow.USERS), out))\r\n      throw new IOException(sess.info());\r\n\r\n    data = new Table(users);\r\n    removeUser.removeAllItems();\r\n    addUser.removeAllItems();\r\n    tempP.clear();\r\n\r\n    final Table data2 = new Table(out.toString());\r\n    final StringList tmp1 = new StringList();\r\n    for(final TokenList l : data.contents) tmp1.add(Token.string(l.get(0)));\r\n    final StringList tmp2 = new StringList();\r\n    for(final TokenList l : data2.contents) tmp2.add(Token.string(l.get(0)));\r\n\r\n    for(final String s : tmp2) {\r\n      if(s.equals(ADMIN)) continue;\r\n      if(!tmp1.contains(s)) {\r\n        addUser.addItem(s);\r\n        for(final TokenList l : data2.contents) {\r\n          if(Token.string(l.get(0)).equals(s)) {\r\n            final StringList tmp = new StringList();\r\n            tmp.add(s);\r\n            tmp.add(Token.string(l.get(1)));\r\n            tmp.add(Token.string(l.get(2)));\r\n            tempP.add(tmp);\r\n          }\r\n        }\r\n      } else {\r\n        removeUser.addItem(s);\r\n      }\r\n    }\r\n    removeUser.setSelectedIndex(-1);\r\n    addUser.setSelectedIndex(-1);\r\n    ((TableModel) table.getModel()).fireTableChanged(null);\r\n  }","commit_id":"c7f0c3c9774584760d9c5e332b0f8f2f9e413735","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Default constructor.\r\n   * @param cmd show command\r\n   */\r\n  public Show(final Object cmd) {\r\n    super(cmd.toString());\r\n  }","id":103305,"modified_method":"/**\r\n   * Default constructor.\r\n   * @param cmd show command\r\n   */\r\n  public Show(final Object cmd) {\r\n    this(cmd, null);\r\n  }","commit_id":"c7f0c3c9774584760d9c5e332b0f8f2f9e413735","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  protected boolean exec(final PrintOutput out) throws IOException {\r\n    switch(getOption(CmdShow.class)) {\r\n      case DATABASES:\r\n        out.println(context.pool.info());\r\n        break;\r\n      case SESSIONS:\r\n        out.println(context.sessions.info());\r\n        break;\r\n      case USERS:\r\n        out.println(context.users.info());\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    return true;\r\n  }","id":103306,"modified_method":"@Override\r\n  protected boolean exec(final PrintOutput out) throws IOException {\r\n    switch(getOption(CmdShow.class)) {\r\n      case DATABASES:\r\n        out.println(context.pool.info());\r\n        break;\r\n      case SESSIONS:\r\n        out.println(context.sessions.info());\r\n        break;\r\n      case USERS:\r\n        final String db = args[1];\r\n        if(db == null) {\r\n          out.println(context.users.info());\r\n        } else {\r\n          try {\r\n            final Data data = Open.open(context, db);\r\n            final ArrayList<User> loc = data.meta.users;\r\n            for(int i = 0; i < loc.size(); i++) {\r\n              final User us = context.users.get(loc.get(i).name);\r\n              if(us == null) loc.remove(loc.get(i--));\r\n            }\r\n            out.println(data.meta.users.info());\r\n            data.flush();\r\n            Close.close(context, data);\r\n            return true;\r\n          } catch(final IOException ex) {\r\n            Main.debug(ex);\r\n            final String msg = ex.getMessage();\r\n            return msg.isEmpty() ? error(DBOPENERR, db) : error(msg);\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    return true;\r\n  }","commit_id":"c7f0c3c9774584760d9c5e332b0f8f2f9e413735","url":"https://github.com/BaseXdb/basex"},{"original_method":"public Tool getData() {\n    Tool tool = createTool();\n\n    tool.setName(convertString(myNameField.getText()));\n    tool.setDescription(convertString(myDescriptionField.getText()));\n    tool.setGroup(myGroupCombo.getSelectedItem() != null ? convertString(myGroupCombo.getSelectedItem().toString()) : null);\n    tool.setShownInMainMenu(myShowInMainMenuCheckbox.isSelected());\n    tool.setShownInEditor(myShowInEditorCheckbox.isSelected());\n    tool.setShownInProjectViews(myShowInProjectTreeCheckbox.isSelected());\n    tool.setShownInSearchResultsPopup(myShowInSearchResultsPopupCheckbox.isSelected());\n    tool.setUseConsole(myUseConsoleCheckbox.isSelected());\n    tool.setShowConsoleOnStdOut(myShowConsoleOnStdOutCheckbox.isSelected());\n    tool.setShowConsoleOnStdErr(myShowConsoleOnStdErrCheckbox.isSelected());\n    tool.setFilesSynchronizedAfterRun(mySynchronizedAfterRunCheckbox.isSelected());\n    tool.setEnabled(myEnabled);\n\n    tool.setWorkingDirectory(toSystemIndependentFormat(myTfCommandWorkingDirectory.getText()));\n    tool.setProgram(convertString(myTfCommand.getText()));\n    tool.setParameters(convertString(myParametersField.getText()));\n\n    tool.setOutputFilters(myOutputFilters);\n\n    return tool;\n  }","id":103307,"modified_method":"public Tool getData() {\n    Tool tool = createTool();\n\n    tool.setName(convertString(myNameField.getText()));\n    tool.setDescription(convertString(myDescriptionField.getText()));\n    Object selectedItem = myGroupCombo.getSelectedItem();\n    tool.setGroup(StringUtil.notNullize(selectedItem != null ? convertString(selectedItem.toString()) : \"\"));\n    tool.setShownInMainMenu(myShowInMainMenuCheckbox.isSelected());\n    tool.setShownInEditor(myShowInEditorCheckbox.isSelected());\n    tool.setShownInProjectViews(myShowInProjectTreeCheckbox.isSelected());\n    tool.setShownInSearchResultsPopup(myShowInSearchResultsPopupCheckbox.isSelected());\n    tool.setUseConsole(myUseConsoleCheckbox.isSelected());\n    tool.setShowConsoleOnStdOut(myShowConsoleOnStdOutCheckbox.isSelected());\n    tool.setShowConsoleOnStdErr(myShowConsoleOnStdErrCheckbox.isSelected());\n    tool.setFilesSynchronizedAfterRun(mySynchronizedAfterRunCheckbox.isSelected());\n    tool.setEnabled(myEnabled);\n\n    tool.setWorkingDirectory(toSystemIndependentFormat(myTfCommandWorkingDirectory.getText()));\n    tool.setProgram(convertString(myTfCommand.getText()));\n    tool.setParameters(convertString(myParametersField.getText()));\n\n    tool.setOutputFilters(myOutputFilters);\n\n    return tool;\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String toCurrentSystemFormat(String s) {\n    if (s == null) return null;\n    s = s.trim();\n    if (s.length() == 0) return null;\n    return s.replace('/', File.separatorChar);\n  }","id":103308,"modified_method":"private String toCurrentSystemFormat(String s) {\n    if (s == null) return null;\n    s = s.trim();\n    if (s.isEmpty()) return null;\n    return s.replace('/', File.separatorChar);\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void addWorkingDirectoryBrowseAction(final JPanel pane,\n                                                 FixedSizeButton browseDirectoryButton,\n                                                 JTextField tfCommandWorkingDirectory) {\n    browseDirectoryButton.addActionListener(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();\n          PathChooserDialog chooser = FileChooserFactory.getInstance().createPathChooser(descriptor, myProject, pane);\n\n          chooser.choose(null, new Consumer<List<VirtualFile>>() {\n            @Override\n            public void consume(List<VirtualFile> files) {\n              VirtualFile file = files.size() > 0 ? files.get(0) : null;\n              if (file != null) {\n                myTfCommandWorkingDirectory.setText(file.getPresentableUrl());\n              }\n            }\n          });\n        }\n      }\n    );\n  }","id":103309,"modified_method":"protected void addWorkingDirectoryBrowseAction(final JPanel pane,\n                                                 FixedSizeButton browseDirectoryButton,\n                                                 JTextField tfCommandWorkingDirectory) {\n    browseDirectoryButton.addActionListener(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();\n          PathChooserDialog chooser = FileChooserFactory.getInstance().createPathChooser(descriptor, myProject, pane);\n\n          chooser.choose(null, new Consumer<List<VirtualFile>>() {\n            @Override\n            public void consume(List<VirtualFile> files) {\n              VirtualFile file = !files.isEmpty() ? files.get(0) : null;\n              if (file != null) {\n                myTfCommandWorkingDirectory.setText(file.getPresentableUrl());\n              }\n            }\n          });\n        }\n      }\n    );\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String toSystemIndependentFormat(String s) {\n    if (s == null) return null;\n    s = s.trim();\n    if (s.length() == 0) return null;\n    return s.replace(File.separatorChar, '/');\n  }","id":103310,"modified_method":"private String toSystemIndependentFormat(String s) {\n    if (s == null) return null;\n    s = s.trim();\n    if (s.isEmpty()) return null;\n    return s.replace(File.separatorChar, '/');\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void addCommandBrowseAction(final JPanel pane, FixedSizeButton browseCommandButton, JTextField tfCommand) {\n    browseCommandButton.addActionListener(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFileOrExecutableAppDescriptor();\n          PathChooserDialog chooser = FileChooserFactory.getInstance().createPathChooser(descriptor, myProject, pane);\n          chooser.choose(null, new Consumer<List<VirtualFile>>() {\n            @Override\n            public void consume(List<VirtualFile> files) {\n              VirtualFile file = files.size() > 0 ? files.get(0) : null;\n              if (file != null) {\n                myTfCommand.setText(file.getPresentableUrl());\n                String workingDirectory = myTfCommandWorkingDirectory.getText();\n                if (workingDirectory == null || workingDirectory.length() == 0) {\n                  VirtualFile parent = file.getParent();\n                  if (parent != null && parent.isDirectory()) {\n                    myTfCommandWorkingDirectory.setText(parent.getPresentableUrl());\n                  }\n                }\n              }\n            }\n          });\n        }\n      }\n    );\n  }","id":103311,"modified_method":"protected void addCommandBrowseAction(final JPanel pane, FixedSizeButton browseCommandButton, JTextField tfCommand) {\n    browseCommandButton.addActionListener(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFileOrExecutableAppDescriptor();\n          PathChooserDialog chooser = FileChooserFactory.getInstance().createPathChooser(descriptor, myProject, pane);\n          chooser.choose(null, new Consumer<List<VirtualFile>>() {\n            @Override\n            public void consume(List<VirtualFile> files) {\n              VirtualFile file = !files.isEmpty() ? files.get(0) : null;\n              if (file != null) {\n                myTfCommand.setText(file.getPresentableUrl());\n                String workingDirectory = myTfCommandWorkingDirectory.getText();\n                if (workingDirectory == null || workingDirectory.isEmpty()) {\n                  VirtualFile parent = file.getParent();\n                  if (parent != null && parent.isDirectory()) {\n                    myTfCommandWorkingDirectory.setText(parent.getPresentableUrl());\n                  }\n                }\n              }\n            }\n          });\n        }\n      }\n    );\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String convertString(String s) {\n    if (s != null && s.trim().length() == 0) return null;\n    return s;\n  }","id":103312,"modified_method":"private String convertString(String s) {\n    if (s != null && s.trim().isEmpty()) return null;\n    return s;\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void handleOKButton() {\n    setOKActionEnabled(myNameField.getText().trim().length() > 0);\n  }","id":103313,"modified_method":"private void handleOKButton() {\n    setOKActionEnabled(!myNameField.getText().trim().isEmpty());\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public ToolsGroup<T> readScheme(@NotNull final Document document) throws InvalidDataException, IOException, JDOMException {\n    Element root = document.getRootElement();\n    if (root == null || !TOOL_SET.equals(root.getName())) {\n      throw new InvalidDataException();\n    }\n\n    String groupName = root.getAttributeValue(ATTRIBUTE_NAME);\n    ToolsGroup<T> result = createToolsGroup(groupName);\n\n    final PathMacroManager macroManager = PathMacroManager.getInstance(ApplicationManager.getApplication());\n\n    for (final Object o : root.getChildren(TOOL)) {\n      Element element = (Element)o;\n\n      T tool = createTool();\n\n      readToolAttributes(element, tool);\n\n      Element exec = element.getChild(EXEC);\n      if (exec != null) {\n        for (final Object o1 : exec.getChildren(ELEMENT_OPTION)) {\n          Element optionElement = (Element)o1;\n\n          String name = optionElement.getAttributeValue(ATTRIBUTE_NAME);\n          String value = optionElement.getAttributeValue(ATTRIBUTE_VALUE);\n\n          if (WORKING_DIRECTORY.equals(name)) {\n            if (value != null) {\n              final String replace = macroManager.expandPath(value).replace('/', File.separatorChar);\n              tool.setWorkingDirectory(replace);\n            }\n          }\n          if (COMMAND.equals(name)) {\n            tool.setProgram(macroManager.expandPath(ToolManager.convertString(value)));\n          }\n          if (PARAMETERS.equals(name)) {\n            tool.setParameters(macroManager.expandPath(ToolManager.convertString(value)));\n          }\n        }\n      }\n\n      for (final Object o2 : element.getChildren(FILTER)) {\n        Element childNode = (Element)o2;\n\n        FilterInfo filterInfo = new FilterInfo();\n        filterInfo.readExternal(childNode);\n        tool.addOutputFilter(filterInfo);\n      }\n\n      tool.setGroup(groupName);\n      result.addElement(tool);\n    }\n\n    return result;\n  }","id":103314,"modified_method":"@Override\n  public ToolsGroup<T> readScheme(@NotNull final Document document) throws InvalidDataException, IOException, JDOMException {\n    Element root = document.getRootElement();\n    if (root == null || !TOOL_SET.equals(root.getName())) {\n      throw new InvalidDataException();\n    }\n\n    String groupName = StringUtil.notNullize(root.getAttributeValue(ATTRIBUTE_NAME));\n    ToolsGroup<T> result = createToolsGroup(groupName);\n\n    final PathMacroManager macroManager = PathMacroManager.getInstance(ApplicationManager.getApplication());\n\n    for (final Object o : root.getChildren(TOOL)) {\n      Element element = (Element)o;\n\n      T tool = createTool();\n\n      readToolAttributes(element, tool);\n\n      Element exec = element.getChild(EXEC);\n      if (exec != null) {\n        for (final Object o1 : exec.getChildren(ELEMENT_OPTION)) {\n          Element optionElement = (Element)o1;\n\n          String name = optionElement.getAttributeValue(ATTRIBUTE_NAME);\n          String value = optionElement.getAttributeValue(ATTRIBUTE_VALUE);\n\n          if (WORKING_DIRECTORY.equals(name)) {\n            if (value != null) {\n              final String replace = macroManager.expandPath(value).replace('/', File.separatorChar);\n              tool.setWorkingDirectory(replace);\n            }\n          }\n          if (COMMAND.equals(name)) {\n            tool.setProgram(macroManager.expandPath(ToolManager.convertString(value)));\n          }\n          if (PARAMETERS.equals(name)) {\n            tool.setParameters(macroManager.expandPath(ToolManager.convertString(value)));\n          }\n        }\n      }\n\n      for (final Object o2 : element.getChildren(FILTER)) {\n        Element childNode = (Element)o2;\n\n        FilterInfo filterInfo = new FilterInfo();\n        filterInfo.readExternal(childNode);\n        tool.addOutputFilter(filterInfo);\n      }\n\n      tool.setGroup(groupName);\n      result.addElement(tool);\n    }\n\n    return result;\n  }","commit_id":"ec8500e98c0a07dd5978d04f830e335d0f3f6199","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public void addCommands(Collection<OsmPrimitive> sel, List<Command> cmds) {\n\t\t\tString display = combo.getSelectedItem().toString();\n\t\t\tString value = null;\n\t\t\tif(display == null && combo.isEditable())\n\t\t\t\tdisplay = combo.getEditor().getItem().toString();\n\n\t\t\tif (display != null)\n\t\t\t{\n\t\t\t\tfor (String key : lhm.keySet()) {\n\t\t\t\t\tString k = lhm.get(key);\n\t\t\t\t\tif (k != null && k.equals(display)) value=key;\n\t\t\t\t}\n\t\t\t\tif(value == null)\n\t\t\t\t\tvalue = display;\n\t\t\t}\n\n\t\t\t// no change if same as before\n\t\t\tif (value.equals(originalValue) || (originalValue == null && (value == null || value.length() == 0))) return;\n\t\t\t\n\t\t\tif (delete_if_empty && value != null && value.length() == 0)\n\t\t\t\tvalue = null;\n\t\t\tcmds.add(new ChangePropertyCommand(sel, key, value));\n\t\t}","id":103315,"modified_method":"@Override public void addCommands(Collection<OsmPrimitive> sel, List<Command> cmds) {\n\t\t\tObject obj = combo.getSelectedItem();\n\t\t\tString display = (obj == null) ? null : obj.toString();\n\t\t\tString value = null;\n\t\t\tif(display == null && combo.isEditable())\n\t\t\t\tdisplay = combo.getEditor().getItem().toString();\n\n\t\t\tif (display != null)\n\t\t\t{\n\t\t\t\tfor (String key : lhm.keySet()) {\n\t\t\t\t\tString k = lhm.get(key);\n\t\t\t\t\tif (k != null && k.equals(display)) value=key;\n\t\t\t\t}\n\t\t\t\tif(value == null)\n\t\t\t\t\tvalue = display;\n\t\t\t}\n\t\t\telse\n\t\t\t\tvalue = \"\";\n\n\t\t\t// no change if same as before\n\t\t\tif (value.equals(originalValue) || (originalValue == null && (value == null || value.length() == 0))) return;\n\t\t\t\n\t\t\tif (delete_if_empty && value != null && value.length() == 0)\n\t\t\t\tvalue = null;\n\t\t\tcmds.add(new ChangePropertyCommand(sel, key, value));\n\t\t}","commit_id":"9fadbbb340bd0a5741df55efd66ec97454b25564","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Returns the keep alive method.\n     * @return the keep alive method\n     */\n    String getKeepAliveMethod()\n    {\n        return keepAliveMethodBox.getSelectedItem().toString();\n    }","id":103316,"modified_method":"/**\n     * Returns the keep alive method.\n     * @return the keep alive method\n     */\n    String getKeepAliveMethod()\n    {\n        Object selItem = keepAliveMethodBox.getSelectedItem();\n\n        if(selItem != null)\n            return selItem.toString();\n        else\n            return null;\n    }","commit_id":"a04b92c7230cd82be4ab05caae3a9c268fea558d","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an account for the given user and password.\n     *\n     * @param providerFactory the ProtocolProviderFactory which will create\n     * the account\n     * @param userName the user identifier\n     * @param passwd the password\n     * @return the <tt>ProtocolProviderService<\/tt> for the new account.\n     * @throws OperationFailedException problem installing account\n     */\n    private ProtocolProviderService installAccount(\n            ProtocolProviderFactory providerFactory,\n            String userName,\n            String passwd)\n        throws OperationFailedException\n    {\n        Hashtable<String, String> accountProperties\n            = new Hashtable<String, String>();\n\n        accountProperties.put(ProtocolProviderFactory.PROTOCOL, getProtocol());\n        String protocolIconPath = getProtocolIconPath();\n        if (protocolIconPath != null)\n            accountProperties.put(  ProtocolProviderFactory.PROTOCOL_ICON_PATH,\n                                    protocolIconPath);\n\n        String accountIconPath = getAccountIconPath();\n        if (accountIconPath != null)\n            accountProperties.put(  ProtocolProviderFactory.ACCOUNT_ICON_PATH,\n                                    accountIconPath);\n\n        if(registration.isRememberPassword())\n        {\n            accountProperties.put(ProtocolProviderFactory.PASSWORD, passwd);\n        }\n\n        String serverAddress = null;\n        if (registration.getServerAddress() != null)\n            serverAddress = registration.getServerAddress();\n\n        if(SIPAccountRegistrationForm.getServerFromUserName(userName) == null\n            && registration.getDefaultDomain() != null)\n        {\n            // we have only a username and we want to add\n            // a defautl domain\n            userName = userName + \"@\" + registration.getDefaultDomain();\n\n            if(serverAddress == null)\n                serverAddress = registration.getDefaultDomain();\n        }\n\n        if (serverAddress != null)\n        {\n            accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,\n                serverAddress);\n\n            if (userName.indexOf(serverAddress) < 0)\n                accountProperties.put(\n                    ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,\n                    Boolean.toString(true));\n        }\n\n        if(registration.getDisplayName() != null)\n            accountProperties.put(ProtocolProviderFactory.DISPLAY_NAME,\n                registration.getDisplayName());\n\n        if(registration.getAuthorizationName() != null)\n            accountProperties.put(ProtocolProviderFactory.AUTHORIZATION_NAME,\n                registration.getAuthorizationName());\n\n        accountProperties.put(ProtocolProviderFactory.SERVER_PORT,\n                registration.getServerPort());\n\n        String proxyAddress = null;\n        if (registration.getProxy() != null)\n            proxyAddress = registration.getProxy();\n\n        if (proxyAddress != null)\n            accountProperties.put(ProtocolProviderFactory.PROXY_ADDRESS,\n                proxyAddress);\n\n        accountProperties.put(ProtocolProviderFactory.PROXY_PORT,\n                registration.getProxyPort());\n\n        accountProperties.put(ProtocolProviderFactory.PREFERRED_TRANSPORT,\n                registration.getPreferredTransport());\n\n        accountProperties.put(ProtocolProviderFactory.IS_PRESENCE_ENABLED,\n                Boolean.toString(registration.isEnablePresence()));\n\n        // when we are creating registerless account make sure that\n        // we don't use PA\n        if(serverAddress != null)\n        {\n            accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,\n                Boolean.toString(registration.isForceP2PMode()));\n        }\n        else\n        {\n            accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,\n                Boolean.TRUE.toString());\n        }\n\n        accountProperties.put(ProtocolProviderFactory.DEFAULT_ENCRYPTION,\n                Boolean.toString(registration.isDefaultEncryption()));\n\n        accountProperties.put(ProtocolProviderFactory.DEFAULT_SIPZRTP_ATTRIBUTE,\n                Boolean.toString(registration.isSipZrtpAttribute()));\n\n        accountProperties.put(ProtocolProviderFactory.POLLING_PERIOD,\n                registration.getPollingPeriod());\n\n        accountProperties.put(ProtocolProviderFactory.SUBSCRIPTION_EXPIRATION,\n                registration.getSubscriptionExpiration());\n\n        if(registration.getKeepAliveMethod() != null)\n            accountProperties.put(\"KEEP_ALIVE_METHOD\",\n                registration.getKeepAliveMethod());\n\n        accountProperties.put(\"KEEP_ALIVE_INTERVAL\",\n            registration.getKeepAliveInterval());\n\n        if(isModification)\n        {\n            accountProperties.put(ProtocolProviderFactory.USER_ID, userName);\n            providerFactory.modifyAccount(  protocolProvider,\n                                            accountProperties);\n\n            this.isModification  = false;\n\n            return protocolProvider;\n        }\n\n        try\n        {\n            AccountID accountID = providerFactory.installAccount(\n                    userName, accountProperties);\n\n            ServiceReference serRef = providerFactory\n                .getProviderForAccount(accountID);\n\n            protocolProvider\n                = (ProtocolProviderService) SIPAccRegWizzActivator.bundleContext\n                    .getService(serRef);\n        }\n        catch (IllegalStateException exc)\n        {\n            logger.warn(exc.getMessage());\n\n            throw new OperationFailedException(\n                \"Account already exists.\",\n                OperationFailedException.IDENTIFICATION_CONFLICT);\n        }\n        catch (Exception exc)\n        {\n            logger.warn(exc.getMessage());\n\n            throw new OperationFailedException(\n                exc.getMessage(),\n                OperationFailedException.GENERAL_ERROR);\n        }\n\n        return protocolProvider;\n    }","id":103317,"modified_method":"/**\n     * Creates an account for the given user and password.\n     *\n     * @param providerFactory the ProtocolProviderFactory which will create\n     * the account\n     * @param userName the user identifier\n     * @param passwd the password\n     * @return the <tt>ProtocolProviderService<\/tt> for the new account.\n     * @throws OperationFailedException problem installing account\n     */\n    private ProtocolProviderService installAccount(\n            ProtocolProviderFactory providerFactory,\n            String userName,\n            String passwd)\n        throws OperationFailedException\n    {\n        Hashtable<String, String> accountProperties\n            = new Hashtable<String, String>();\n\n        accountProperties.put(ProtocolProviderFactory.PROTOCOL, getProtocol());\n        String protocolIconPath = getProtocolIconPath();\n        if (protocolIconPath != null)\n            accountProperties.put(  ProtocolProviderFactory.PROTOCOL_ICON_PATH,\n                                    protocolIconPath);\n\n        String accountIconPath = getAccountIconPath();\n        if (accountIconPath != null)\n            accountProperties.put(  ProtocolProviderFactory.ACCOUNT_ICON_PATH,\n                                    accountIconPath);\n\n        if(registration.isRememberPassword())\n        {\n            accountProperties.put(ProtocolProviderFactory.PASSWORD, passwd);\n        }\n\n        String serverAddress = null;\n        String serverFromUsername =\n            SIPAccountRegistrationForm.getServerFromUserName(userName);\n\n        if (registration.getServerAddress() != null)\n            serverAddress = registration.getServerAddress();\n\n        if(serverFromUsername == null\n            && registration.getDefaultDomain() != null)\n        {\n            // we have only a username and we want to add\n            // a defautl domain\n            userName = userName + \"@\" + registration.getDefaultDomain();\n\n            if(serverAddress == null)\n                serverAddress = registration.getDefaultDomain();\n        }\n        else if(serverAddress == null &&\n            serverFromUsername != null)\n        {\n            serverAddress = serverFromUsername;\n        }\n\n        if (serverAddress != null)\n        {\n            accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,\n                serverAddress);\n\n            if (userName.indexOf(serverAddress) < 0)\n                accountProperties.put(\n                    ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,\n                    Boolean.toString(true));\n        }\n\n        if(registration.getDisplayName() != null)\n            accountProperties.put(ProtocolProviderFactory.DISPLAY_NAME,\n                registration.getDisplayName());\n\n        if(registration.getAuthorizationName() != null)\n            accountProperties.put(ProtocolProviderFactory.AUTHORIZATION_NAME,\n                registration.getAuthorizationName());\n\n        accountProperties.put(ProtocolProviderFactory.SERVER_PORT,\n                registration.getServerPort());\n\n        String proxyAddress = null;\n        if (registration.getProxy() != null)\n            proxyAddress = registration.getProxy();\n\n        if (proxyAddress != null)\n            accountProperties.put(ProtocolProviderFactory.PROXY_ADDRESS,\n                proxyAddress);\n\n        accountProperties.put(ProtocolProviderFactory.PROXY_PORT,\n                registration.getProxyPort());\n\n        accountProperties.put(ProtocolProviderFactory.PREFERRED_TRANSPORT,\n                registration.getPreferredTransport());\n\n        accountProperties.put(ProtocolProviderFactory.IS_PRESENCE_ENABLED,\n                Boolean.toString(registration.isEnablePresence()));\n\n        // when we are creating registerless account make sure that\n        // we don't use PA\n        if(serverAddress != null)\n        {\n            accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,\n                Boolean.toString(registration.isForceP2PMode()));\n        }\n        else\n        {\n            accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,\n                Boolean.TRUE.toString());\n        }\n\n        accountProperties.put(ProtocolProviderFactory.DEFAULT_ENCRYPTION,\n                Boolean.toString(registration.isDefaultEncryption()));\n\n        accountProperties.put(ProtocolProviderFactory.DEFAULT_SIPZRTP_ATTRIBUTE,\n                Boolean.toString(registration.isSipZrtpAttribute()));\n\n        accountProperties.put(ProtocolProviderFactory.POLLING_PERIOD,\n                registration.getPollingPeriod());\n\n        accountProperties.put(ProtocolProviderFactory.SUBSCRIPTION_EXPIRATION,\n                registration.getSubscriptionExpiration());\n\n        if(registration.getKeepAliveMethod() != null)\n            accountProperties.put(\"KEEP_ALIVE_METHOD\",\n                registration.getKeepAliveMethod());\n\n        accountProperties.put(\"KEEP_ALIVE_INTERVAL\",\n            registration.getKeepAliveInterval());\n\n        if(isModification)\n        {\n            accountProperties.put(ProtocolProviderFactory.USER_ID, userName);\n            providerFactory.modifyAccount(  protocolProvider,\n                                            accountProperties);\n\n            this.isModification  = false;\n\n            return protocolProvider;\n        }\n\n        try\n        {\n            AccountID accountID = providerFactory.installAccount(\n                    userName, accountProperties);\n\n            ServiceReference serRef = providerFactory\n                .getProviderForAccount(accountID);\n\n            protocolProvider\n                = (ProtocolProviderService) SIPAccRegWizzActivator.bundleContext\n                    .getService(serRef);\n        }\n        catch (IllegalStateException exc)\n        {\n            logger.warn(exc.getMessage());\n\n            throw new OperationFailedException(\n                \"Account already exists.\",\n                OperationFailedException.IDENTIFICATION_CONFLICT);\n        }\n        catch (Exception exc)\n        {\n            logger.warn(exc.getMessage());\n\n            throw new OperationFailedException(\n                exc.getMessage(),\n                OperationFailedException.GENERAL_ERROR);\n        }\n\n        return protocolProvider;\n    }","commit_id":"a04b92c7230cd82be4ab05caae3a9c268fea558d","url":"https://github.com/jitsi/jitsi"},{"original_method":"private synchronized void initializeSubsystem(Configuration hbaseConf,\n                                                Configuration metricsConf) {\n    if (!isInitialized) {\n      hBaseAccessor = new PhoenixHBaseAccessor(hbaseConf, metricsConf);\n      // Initialize schema\n      hBaseAccessor.initMetricSchema();\n      // Initialize metadata from store\n      metricMetadataManager = new TimelineMetricMetadataManager(hBaseAccessor, metricsConf);\n      metricMetadataManager.initializeMetadata();\n      // Initialize policies before TTL update\n      hBaseAccessor.initPolicies();\n      // Alter TTL on tables\n      hBaseAccessor.alterMetricTableTTL();\n\n      if (Boolean.parseBoolean(metricsConf.get(USE_GROUPBY_AGGREGATOR_QUERIES, \"true\"))) {\n        LOG.info(\"Using group by aggregators for aggregating host and cluster metrics.\");\n      }\n\n      // Start the cluster aggregator second\n      TimelineMetricAggregator secondClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorSecond(hBaseAccessor, metricsConf, metricMetadataManager);\n      scheduleAggregatorThread(secondClusterAggregator, metricsConf);\n\n      // Start the minute cluster aggregator\n      TimelineMetricAggregator minuteClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorMinute(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(minuteClusterAggregator, metricsConf);\n\n      // Start the hourly cluster aggregator\n      TimelineMetricAggregator hourlyClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorHourly(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(hourlyClusterAggregator, metricsConf);\n\n      // Start the daily cluster aggregator\n      TimelineMetricAggregator dailyClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorDaily(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(dailyClusterAggregator, metricsConf);\n\n      // Start the minute host aggregator\n      TimelineMetricAggregator minuteHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorMinute(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(minuteHostAggregator, metricsConf);\n\n      // Start the hourly host aggregator\n      TimelineMetricAggregator hourlyHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorHourly(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(hourlyHostAggregator, metricsConf);\n\n      // Start the daily host aggregator\n      TimelineMetricAggregator dailyHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorDaily(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(dailyHostAggregator, metricsConf);\n\n      if (!configuration.isTimelineMetricsServiceWatcherDisabled()) {\n        int initDelay = configuration.getTimelineMetricsServiceWatcherInitDelay();\n        int delay = configuration.getTimelineMetricsServiceWatcherDelay();\n        // Start the watchdog\n        executorService.scheduleWithFixedDelay(\n          new TimelineMetricStoreWatcher(this, configuration), initDelay, delay,\n          TimeUnit.SECONDS);\n        LOG.info(\"Started watchdog for timeline metrics store with initial \" +\n          \"delay = \" + initDelay + \", delay = \" + delay);\n      }\n\n      isInitialized = true;\n    }\n\n  }","id":103318,"modified_method":"private synchronized void initializeSubsystem(Configuration hbaseConf,\n                                                Configuration metricsConf) {\n    if (!isInitialized) {\n      hBaseAccessor = new PhoenixHBaseAccessor(hbaseConf, metricsConf);\n      // Initialize schema\n      hBaseAccessor.initMetricSchema();\n      // Initialize metadata from store\n      metricMetadataManager = new TimelineMetricMetadataManager(hBaseAccessor, metricsConf);\n      metricMetadataManager.initializeMetadata();\n      // Initialize policies before TTL update\n      hBaseAccessor.initPoliciesAndTTL();\n\n      if (Boolean.parseBoolean(metricsConf.get(USE_GROUPBY_AGGREGATOR_QUERIES, \"true\"))) {\n        LOG.info(\"Using group by aggregators for aggregating host and cluster metrics.\");\n      }\n\n      // Start the cluster aggregator second\n      TimelineMetricAggregator secondClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorSecond(hBaseAccessor, metricsConf, metricMetadataManager);\n      scheduleAggregatorThread(secondClusterAggregator, metricsConf);\n\n      // Start the minute cluster aggregator\n      TimelineMetricAggregator minuteClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorMinute(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(minuteClusterAggregator, metricsConf);\n\n      // Start the hourly cluster aggregator\n      TimelineMetricAggregator hourlyClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorHourly(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(hourlyClusterAggregator, metricsConf);\n\n      // Start the daily cluster aggregator\n      TimelineMetricAggregator dailyClusterAggregator =\n        TimelineMetricAggregatorFactory.createTimelineClusterAggregatorDaily(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(dailyClusterAggregator, metricsConf);\n\n      // Start the minute host aggregator\n      TimelineMetricAggregator minuteHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorMinute(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(minuteHostAggregator, metricsConf);\n\n      // Start the hourly host aggregator\n      TimelineMetricAggregator hourlyHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorHourly(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(hourlyHostAggregator, metricsConf);\n\n      // Start the daily host aggregator\n      TimelineMetricAggregator dailyHostAggregator =\n        TimelineMetricAggregatorFactory.createTimelineMetricAggregatorDaily(hBaseAccessor, metricsConf);\n      scheduleAggregatorThread(dailyHostAggregator, metricsConf);\n\n      if (!configuration.isTimelineMetricsServiceWatcherDisabled()) {\n        int initDelay = configuration.getTimelineMetricsServiceWatcherInitDelay();\n        int delay = configuration.getTimelineMetricsServiceWatcherDelay();\n        // Start the watchdog\n        executorService.scheduleWithFixedDelay(\n          new TimelineMetricStoreWatcher(this, configuration), initDelay, delay,\n          TimeUnit.SECONDS);\n        LOG.info(\"Started watchdog for timeline metrics store with initial \" +\n          \"delay = \" + initDelay + \", delay = \" + delay);\n      }\n\n      isInitialized = true;\n    }\n\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testInitPolicies() throws Exception {\n    HBaseAdmin hBaseAdmin = hdb.getHBaseAdmin();\n\n    // Verify policies are unset\n    for (String tableName : PHOENIX_TABLES) {\n      HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n\n      Assert.assertFalse(\"Normalizer disabled by default.\", tableDescriptor.isNormalizationEnabled());\n      Assert.assertNull(\"Default compaction policy is null.\",\n        tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY));\n    }\n\n    hdb.initPolicies();\n\n    // Verify expected policies are set\n    boolean normalizerEnabled = false;\n    String compactionPolicy = null;\n    for (int i = 0; i < 10; i++) {\n      LOG.warn(\"Policy check retry : \" + i);\n      for (String tableName : PHOENIX_TABLES) {\n        HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n        normalizerEnabled = tableDescriptor.isNormalizationEnabled();\n        compactionPolicy = tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY);\n        LOG.debug(\"Table: \" + tableName + \", normalizerEnabled = \" + normalizerEnabled);\n        LOG.debug(\"Table: \" + tableName + \", compactionPolicy = \" + compactionPolicy);\n        // Best effort for 20 seconds\n        if (!normalizerEnabled || compactionPolicy == null) {\n          Thread.sleep(2000l);\n        }\n      }\n    }\n\n    Assert.assertTrue(\"Normalizer enabled.\", normalizerEnabled);\n    Assert.assertEquals(\"FIFO compaction policy is set.\", FIFO_COMPACTION_POLICY_CLASS, compactionPolicy);\n\n    hBaseAdmin.close();\n  }","id":103319,"modified_method":"@Test\n  public void testInitPoliciesAndTTL() throws Exception {\n    HBaseAdmin hBaseAdmin = hdb.getHBaseAdmin();\n    String precisionTtl = \"\";\n    // Verify policies are unset\n    for (String tableName : PHOENIX_TABLES) {\n      HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n\n      Assert.assertFalse(\"Normalizer disabled by default.\", tableDescriptor.isNormalizationEnabled());\n      Assert.assertNull(\"Default compaction policy is null.\",\n        tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY));\n\n      for (HColumnDescriptor family : tableDescriptor.getColumnFamilies()) {\n        if (tableName.equals(METRICS_RECORD_TABLE_NAME)) {\n          precisionTtl = family.getValue(\"TTL\");\n        }\n      }\n      Assert.assertEquals(\"Precision TTL value.\", hdb.getDaysInSeconds(\"1\"), precisionTtl);\n    }\n\n    Field f = PhoenixHBaseAccessor.class.getDeclaredField(\"tableTTL\");\n    f.setAccessible(true);\n    Map<String, String> precisionValues = (Map<String, String>) f.get(hdb);\n    precisionValues.put(METRICS_RECORD_TABLE_NAME, hdb.getDaysInSeconds(\"2\"));\n    f.set(hdb, precisionValues);\n\n    hdb.initPoliciesAndTTL();\n\n    // Verify expected policies are set\n    boolean normalizerEnabled = false;\n    String compactionPolicy = null;\n    for (int i = 0; i < 10; i++) {\n      LOG.warn(\"Policy check retry : \" + i);\n      for (String tableName : PHOENIX_TABLES) {\n        HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n        normalizerEnabled = tableDescriptor.isNormalizationEnabled();\n        compactionPolicy = tableDescriptor.getConfigurationValue(HSTORE_COMPACTION_CLASS_KEY);\n        LOG.debug(\"Table: \" + tableName + \", normalizerEnabled = \" + normalizerEnabled);\n        LOG.debug(\"Table: \" + tableName + \", compactionPolicy = \" + compactionPolicy);\n        // Best effort for 20 seconds\n        if (!normalizerEnabled || compactionPolicy == null) {\n          Thread.sleep(2000l);\n        }\n        if (tableName.equals(METRICS_RECORD_TABLE_NAME)) {\n          for (HColumnDescriptor family : tableDescriptor.getColumnFamilies()) {\n            precisionTtl = family.getValue(\"TTL\");\n          }\n        }\n      }\n    }\n\n    Assert.assertTrue(\"Normalizer enabled.\", normalizerEnabled);\n    Assert.assertEquals(\"FIFO compaction policy is set.\", FIFO_COMPACTION_POLICY_CLASS, compactionPolicy);\n    Assert.assertEquals(\"Precision TTL value not changed.\", hdb.getDaysInSeconds(\"2\"), precisionTtl);\n\n    hBaseAdmin.close();\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"protected void initMetricSchema() {\n    Connection conn = null;\n    Statement stmt = null;\n\n    String encoding = metricsConf.get(HBASE_ENCODING_SCHEME, DEFAULT_ENCODING);\n    String compression = metricsConf.get(HBASE_COMPRESSION_SCHEME, DEFAULT_TABLE_COMPRESSION);\n\n\n    try {\n      LOG.info(\"Initializing metrics schema...\");\n      conn = getConnectionRetryingOnException();\n      stmt = conn.createStatement();\n\n      // Metadata\n      String metadataSql = String.format(CREATE_METRICS_METADATA_TABLE_SQL,\n        encoding, compression);\n      stmt.executeUpdate(metadataSql);\n      String hostedAppSql = String.format(CREATE_HOSTED_APPS_METADATA_TABLE_SQL,\n        encoding, compression);\n      stmt.executeUpdate(hostedAppSql);\n\n      // Host level\n      String precisionSql = String.format(CREATE_METRICS_TABLE_SQL,\n        encoding, precisionTtl, compression);\n      String splitPoints = metricsConf.get(PRECISION_TABLE_SPLIT_POINTS);\n      if (!StringUtils.isEmpty(splitPoints)) {\n        precisionSql += getSplitPointsStr(splitPoints);\n      }\n      stmt.executeUpdate(precisionSql);\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_MINUTE_TABLE_NAME, encoding, hostMinTtl, compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_HOURLY_TABLE_NAME, encoding, hostHourTtl, compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_DAILY_TABLE_NAME, encoding, hostDailyTtl, compression));\n\n      // Cluster level\n      String aggregateSql = String.format(CREATE_METRICS_CLUSTER_AGGREGATE_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_TABLE_NAME, encoding, clusterMinTtl, compression);\n      splitPoints = metricsConf.get(AGGREGATE_TABLE_SPLIT_POINTS);\n      if (!StringUtils.isEmpty(splitPoints)) {\n        aggregateSql += getSplitPointsStr(splitPoints);\n      }\n      stmt.executeUpdate(aggregateSql);\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME, encoding, clusterHourTtl, compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME, encoding, clusterHourTtl, compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME, encoding, clusterDailyTtl, compression));\n\n\n      conn.commit();\n\n      LOG.info(\"Metrics schema initialized.\");\n    } catch (SQLException | InterruptedException sql) {\n      LOG.error(\"Error creating Metrics Schema in HBase using Phoenix.\", sql);\n      throw new MetricsSystemInitializationException(\n        \"Error creating Metrics Schema in HBase using Phoenix.\", sql);\n    } finally {\n      if (stmt != null) {\n        try {\n          stmt.close();\n        } catch (SQLException e) {\n          // Ignore\n        }\n      }\n      if (conn != null) {\n        try {\n          conn.close();\n        } catch (SQLException e) {\n          // Ignore\n        }\n      }\n    }\n  }","id":103320,"modified_method":"protected void initMetricSchema() {\n    Connection conn = null;\n    Statement stmt = null;\n\n    String encoding = metricsConf.get(HBASE_ENCODING_SCHEME, DEFAULT_ENCODING);\n    String compression = metricsConf.get(HBASE_COMPRESSION_SCHEME, DEFAULT_TABLE_COMPRESSION);\n\n\n    try {\n      LOG.info(\"Initializing metrics schema...\");\n      conn = getConnectionRetryingOnException();\n      stmt = conn.createStatement();\n\n      // Metadata\n      String metadataSql = String.format(CREATE_METRICS_METADATA_TABLE_SQL,\n        encoding, compression);\n      stmt.executeUpdate(metadataSql);\n      String hostedAppSql = String.format(CREATE_HOSTED_APPS_METADATA_TABLE_SQL,\n        encoding, compression);\n      stmt.executeUpdate(hostedAppSql);\n\n      // Host level\n      String precisionSql = String.format(CREATE_METRICS_TABLE_SQL,\n        encoding, tableTTL.get(METRICS_RECORD_TABLE_NAME), compression);\n      String splitPoints = metricsConf.get(PRECISION_TABLE_SPLIT_POINTS);\n      if (!StringUtils.isEmpty(splitPoints)) {\n        precisionSql += getSplitPointsStr(splitPoints);\n      }\n      stmt.executeUpdate(precisionSql);\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_MINUTE_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_AGGREGATE_MINUTE_TABLE_NAME),\n        compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_HOURLY_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_AGGREGATE_HOURLY_TABLE_NAME),\n        compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_AGGREGATE_TABLE_SQL,\n        METRICS_AGGREGATE_DAILY_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_AGGREGATE_DAILY_TABLE_NAME),\n        compression));\n\n      // Cluster level\n      String aggregateSql = String.format(CREATE_METRICS_CLUSTER_AGGREGATE_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_CLUSTER_AGGREGATE_TABLE_NAME),\n        compression);\n      splitPoints = metricsConf.get(AGGREGATE_TABLE_SPLIT_POINTS);\n      if (!StringUtils.isEmpty(splitPoints)) {\n        aggregateSql += getSplitPointsStr(splitPoints);\n      }\n      stmt.executeUpdate(aggregateSql);\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME),\n        compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME),\n        compression));\n      stmt.executeUpdate(String.format(CREATE_METRICS_CLUSTER_AGGREGATE_GROUPED_TABLE_SQL,\n        METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME, encoding,\n        tableTTL.get(METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME),\n        compression));\n\n\n      conn.commit();\n\n      LOG.info(\"Metrics schema initialized.\");\n    } catch (SQLException | InterruptedException sql) {\n      LOG.error(\"Error creating Metrics Schema in HBase using Phoenix.\", sql);\n      throw new MetricsSystemInitializationException(\n        \"Error creating Metrics Schema in HBase using Phoenix.\", sql);\n    } finally {\n      if (stmt != null) {\n        try {\n          stmt.close();\n        } catch (SQLException e) {\n          // Ignore\n        }\n      }\n      if (conn != null) {\n        try {\n          conn.close();\n        } catch (SQLException e) {\n          // Ignore\n        }\n      }\n    }\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"protected void initPolicies() {\n    boolean enableNormalizer = hbaseConf.getBoolean(\"hbase.normalizer.enabled\", true);\n    boolean enableFifoCompaction = metricsConf.getBoolean(\"timeline.metrics.hbase.fifo.compaction.enabled\", true);\n\n    if (!enableNormalizer && !enableFifoCompaction) {\n      return;\n    }\n\n    HBaseAdmin hBaseAdmin = null;\n    try {\n      hBaseAdmin = dataSource.getHBaseAdmin();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to initialize HBaseAdmin for setting policies.\", e);\n    }\n\n    if (hBaseAdmin != null) {\n      for (String tableName : PHOENIX_TABLES) {\n        try {\n          boolean modifyTable = false;\n          HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n\n          if (enableNormalizer &&\n              !tableDescriptor.isNormalizationEnabled()) {\n            tableDescriptor.setNormalizationEnabled(true);\n            LOG.info(\"Enabling normalizer for \" + tableName);\n            modifyTable = true;\n          }\n\n          Map<String, String> config = tableDescriptor.getConfiguration();\n          if (enableFifoCompaction &&\n             !FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {\n            tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,\n              FIFO_COMPACTION_POLICY_CLASS);\n            LOG.info(\"Setting config property \" + HSTORE_COMPACTION_CLASS_KEY +\n              \" = \" + FIFO_COMPACTION_POLICY_CLASS + \" for \" + tableName);\n            // Need to set blockingStoreFiles to 1000 for FIFO\n            tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, \"1000\");\n            LOG.info(\"Setting config property \" + BLOCKING_STORE_FILES_KEY +\n              \" = \" + 1000 + \" for \" + tableName);\n            modifyTable = true;\n          }\n          // Set back original policy if fifo disabled\n          if (!enableFifoCompaction &&\n             FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {\n            tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,\n              DEFAULT_COMPACTION_POLICY_CLASS);\n            LOG.info(\"Setting config property \" + HSTORE_COMPACTION_CLASS_KEY +\n              \" = \" + DEFAULT_COMPACTION_POLICY_CLASS + \" for \" + tableName);\n            tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, \"300\");\n            LOG.info(\"Setting config property \" + BLOCKING_STORE_FILES_KEY +\n              \" = \" + 300 + \" for \" + tableName);\n            modifyTable = true;\n          }\n\n          // Persist only if anything changed\n          if (modifyTable) {\n            hBaseAdmin.modifyTable(tableName.getBytes(), tableDescriptor);\n          }\n\n        } catch (IOException e) {\n          LOG.error(\"Failed setting policies for \" + tableName, e);\n        }\n      }\n      try {\n        hBaseAdmin.close();\n      } catch (IOException e) {\n        LOG.warn(\"Exception on HBaseAdmin close.\", e);\n      }\n    }\n  }","id":103321,"modified_method":"protected void initPoliciesAndTTL() {\n    boolean enableNormalizer = hbaseConf.getBoolean(\"hbase.normalizer.enabled\", true);\n    boolean enableFifoCompaction = metricsConf.getBoolean(\"timeline.metrics.hbase.fifo.compaction.enabled\", true);\n\n    if (!enableNormalizer && !enableFifoCompaction) {\n      return;\n    }\n\n    HBaseAdmin hBaseAdmin = null;\n    try {\n      hBaseAdmin = dataSource.getHBaseAdmin();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to initialize HBaseAdmin for setting policies.\", e);\n    }\n\n    if (hBaseAdmin != null) {\n      for (String tableName : PHOENIX_TABLES) {\n        try {\n          boolean modifyTable = false;\n          HTableDescriptor tableDescriptor = hBaseAdmin.getTableDescriptor(tableName.getBytes());\n\n          if (enableNormalizer &&\n              !tableDescriptor.isNormalizationEnabled()) {\n            tableDescriptor.setNormalizationEnabled(true);\n            LOG.info(\"Enabling normalizer for \" + tableName);\n            modifyTable = true;\n          }\n\n          Map<String, String> config = tableDescriptor.getConfiguration();\n          if (enableFifoCompaction &&\n             !FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {\n            tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,\n              FIFO_COMPACTION_POLICY_CLASS);\n            LOG.info(\"Setting config property \" + HSTORE_COMPACTION_CLASS_KEY +\n              \" = \" + FIFO_COMPACTION_POLICY_CLASS + \" for \" + tableName);\n            // Need to set blockingStoreFiles to 1000 for FIFO\n            tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, \"1000\");\n            LOG.info(\"Setting config property \" + BLOCKING_STORE_FILES_KEY +\n              \" = \" + 1000 + \" for \" + tableName);\n            modifyTable = true;\n          }\n          // Set back original policy if fifo disabled\n          if (!enableFifoCompaction &&\n             FIFO_COMPACTION_POLICY_CLASS.equals(config.get(HSTORE_COMPACTION_CLASS_KEY))) {\n            tableDescriptor.setConfiguration(HSTORE_COMPACTION_CLASS_KEY,\n              DEFAULT_COMPACTION_POLICY_CLASS);\n            LOG.info(\"Setting config property \" + HSTORE_COMPACTION_CLASS_KEY +\n              \" = \" + DEFAULT_COMPACTION_POLICY_CLASS + \" for \" + tableName);\n            tableDescriptor.setConfiguration(BLOCKING_STORE_FILES_KEY, \"300\");\n            LOG.info(\"Setting config property \" + BLOCKING_STORE_FILES_KEY +\n              \" = \" + 300 + \" for \" + tableName);\n            modifyTable = true;\n          }\n          // Change TTL setting to match user configuration\n          HColumnDescriptor[] columnFamilies = tableDescriptor.getColumnFamilies();\n          if (columnFamilies != null) {\n            for (HColumnDescriptor family : columnFamilies) {\n              String ttlValue = family.getValue(\"TTL\");\n              if (StringUtils.isEmpty(ttlValue) ||\n                  !ttlValue.trim().equals(tableTTL.get(tableName))) {\n                family.setValue(\"TTL\", tableTTL.get(tableName));\n                LOG.info(\"Setting TTL on table: \" + tableName + \" to : \" +\n                  tableTTL.get(tableName) + \" seconds.\");\n                modifyTable = true;\n              }\n            }\n          }\n\n          // Persist only if anything changed\n          if (modifyTable) {\n            hBaseAdmin.modifyTable(tableName.getBytes(), tableDescriptor);\n          }\n\n        } catch (IOException e) {\n          LOG.error(\"Failed setting policies for \" + tableName, e);\n        }\n      }\n      try {\n        hBaseAdmin.close();\n      } catch (IOException e) {\n        LOG.warn(\"Exception on HBaseAdmin close.\", e);\n      }\n    }\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"private String getDaysInSeconds(String daysString) {\n    double days = Double.valueOf(daysString.trim());\n    return String.valueOf((int)(days*86400));\n  }","id":103322,"modified_method":"String getDaysInSeconds(String daysString) {\n    double days = Double.valueOf(daysString.trim());\n    return String.valueOf((int) (days * 86400));\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"PhoenixHBaseAccessor(Configuration hbaseConf,\n                       Configuration metricsConf,\n                       PhoenixConnectionProvider dataSource) {\n    this.hbaseConf = hbaseConf;\n    this.metricsConf = metricsConf;\n    RESULTSET_LIMIT = metricsConf.getInt(GLOBAL_RESULT_LIMIT, RESULTSET_LIMIT);\n    try {\n      Class.forName(\"org.apache.phoenix.jdbc.PhoenixDriver\");\n    } catch (ClassNotFoundException e) {\n      LOG.error(\"Phoenix client jar not found in the classpath.\", e);\n      throw new IllegalStateException(e);\n    }\n    this.dataSource = dataSource;\n    this.retryCounterFactory = new RetryCounterFactory(metricsConf.getInt(GLOBAL_MAX_RETRIES, 10),\n      (int) SECONDS.toMillis(metricsConf.getInt(GLOBAL_RETRY_INTERVAL, 5)));\n    this.outOfBandTimeAllowance = metricsConf.getLong(OUT_OFF_BAND_DATA_TIME_ALLOWANCE,\n      DEFAULT_OUT_OF_BAND_TIME_ALLOWANCE);\n    this.skipBlockCacheForAggregatorsEnabled = metricsConf.getBoolean(AGGREGATORS_SKIP_BLOCK_CACHE, false);\n\n    precisionTtl = getDaysInSeconds(metricsConf.get(PRECISION_TABLE_TTL, \"1\"));           //1 day\n    hostMinTtl = getDaysInSeconds(metricsConf.get(HOST_MINUTE_TABLE_TTL, \"7\"));           //7 days\n    hostHourTtl = getDaysInSeconds(metricsConf.get(HOST_HOUR_TABLE_TTL, \"30\"));           //30 days\n    hostDailyTtl = getDaysInSeconds(metricsConf.get(HOST_DAILY_TABLE_TTL, \"365\"));        //1 year\n    clusterSecTtl = getDaysInSeconds(metricsConf.get(CLUSTER_SECOND_TABLE_TTL, \"7\"));     //7 days\n    clusterMinTtl = getDaysInSeconds(metricsConf.get(CLUSTER_MINUTE_TABLE_TTL, \"30\"));    //30 days\n    clusterHourTtl = getDaysInSeconds(metricsConf.get(CLUSTER_HOUR_TABLE_TTL, \"365\"));    //1 year\n    clusterDailyTtl = getDaysInSeconds(metricsConf.get(CLUSTER_DAILY_TABLE_TTL, \"730\"));  //2 years\n  }","id":103323,"modified_method":"PhoenixHBaseAccessor(Configuration hbaseConf,\n                       Configuration metricsConf,\n                       PhoenixConnectionProvider dataSource) {\n    this.hbaseConf = hbaseConf;\n    this.metricsConf = metricsConf;\n    RESULTSET_LIMIT = metricsConf.getInt(GLOBAL_RESULT_LIMIT, RESULTSET_LIMIT);\n    try {\n      Class.forName(\"org.apache.phoenix.jdbc.PhoenixDriver\");\n    } catch (ClassNotFoundException e) {\n      LOG.error(\"Phoenix client jar not found in the classpath.\", e);\n      throw new IllegalStateException(e);\n    }\n    this.dataSource = dataSource;\n    this.retryCounterFactory = new RetryCounterFactory(metricsConf.getInt(GLOBAL_MAX_RETRIES, 10),\n      (int) SECONDS.toMillis(metricsConf.getInt(GLOBAL_RETRY_INTERVAL, 5)));\n    this.outOfBandTimeAllowance = metricsConf.getLong(OUT_OFF_BAND_DATA_TIME_ALLOWANCE,\n      DEFAULT_OUT_OF_BAND_TIME_ALLOWANCE);\n    this.skipBlockCacheForAggregatorsEnabled = metricsConf.getBoolean(AGGREGATORS_SKIP_BLOCK_CACHE, false);\n\n    tableTTL.put(METRICS_RECORD_TABLE_NAME, getDaysInSeconds(metricsConf.get(PRECISION_TABLE_TTL, \"1\")));                            //1 day\n    tableTTL.put(METRICS_AGGREGATE_MINUTE_TABLE_NAME, getDaysInSeconds(metricsConf.get(HOST_MINUTE_TABLE_TTL, \"7\")));                //7 days\n    tableTTL.put(METRICS_AGGREGATE_HOURLY_TABLE_NAME, getDaysInSeconds(metricsConf.get(HOST_HOUR_TABLE_TTL, \"30\")));                 //30 days\n    tableTTL.put(METRICS_AGGREGATE_DAILY_TABLE_NAME, getDaysInSeconds(metricsConf.get(HOST_DAILY_TABLE_TTL, \"365\")));                //1 year\n    tableTTL.put(METRICS_CLUSTER_AGGREGATE_TABLE_NAME, getDaysInSeconds(metricsConf.get(CLUSTER_SECOND_TABLE_TTL, \"7\")));            //7 days\n    tableTTL.put(METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME, getDaysInSeconds(metricsConf.get(CLUSTER_MINUTE_TABLE_TTL, \"30\")));    //30 days\n    tableTTL.put(METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME, getDaysInSeconds(metricsConf.get(CLUSTER_HOUR_TABLE_TTL, \"365\")));     //1 year\n    tableTTL.put(METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME, getDaysInSeconds(metricsConf.get(CLUSTER_DAILY_TABLE_TTL, \"730\")));     //2 years\n  }","commit_id":"0cc8382f1f5b6e9bde2eb7be0d7d3b45f37cd75a","url":"https://github.com/apache/ambari"},{"original_method":"private OID convertPrivProtocol(String privProtocol) {\n    \n        //Returning null here is okay because the SNMP4J library supports\n        //this value as null when creating the Snmp session.\n        if (privProtocol == null)\n            return null;\n        \n        if (privProtocol.equals(\"DES\")) {\n            return PrivDES.ID;\n        } else if ((privProtocol.equals(\"AES128\")) || (privProtocol.equals(\"AES\"))) {\n            return PrivAES128.ID;\n        } else if (privProtocol.equals(\"AES192\")) {\n            return PrivAES192.ID;\n        } else if (privProtocol.equals(\"AES256\")) {\n            return PrivAES256.ID;\n        } else {\n            throw new IllegalArgumentException(\"Privacy protocol \" + privProtocol + \" not supported\");\n        }\n    \n    }","id":103324,"modified_method":"private OID convertPrivProtocol(String privProtocol) {\n        /*\n         * Returning null here is okay because the SNMP4J library supports\n         * this value as null when creating the Snmp session.\n         */\n        if (privProtocol == null) {\n            return null;\n        }\n        \n        if (privProtocol.equals(\"DES\")) {\n            return PrivDES.ID;\n        } else if ((privProtocol.equals(\"AES128\")) || (privProtocol.equals(\"AES\"))) {\n            return PrivAES128.ID;\n        } else if (privProtocol.equals(\"AES192\")) {\n            return PrivAES192.ID;\n        } else if (privProtocol.equals(\"AES256\")) {\n            return PrivAES256.ID;\n        } else {\n            throw new IllegalArgumentException(\"Privacy protocol \" + privProtocol + \" not supported\");\n        }\n    \n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OID convertAuthProtocol(String authProtocol) {\n        \n        //Returning null here is okay because the SNMP4J library supports\n        //this value as null when creating the Snmp session.\n        if (authProtocol == null)\n            return null;\n        \n        if (authProtocol.equals(\"MD5\")) {\n            return AuthMD5.ID;\n        } else if (authProtocol.equals(\"SHA\")) {\n            return AuthSHA.ID;\n        } else {\n            throw new IllegalArgumentException(\"Authentication protocol unsupported: \" + authProtocol);\n        }            \n    }","id":103325,"modified_method":"private OID convertAuthProtocol(String authProtocol) {\n        /*\n         * Returning null here is okay because the SNMP4J library supports\n         * this value as null when creating the Snmp session.\n         */\n        if (authProtocol == null) {\n            return null;\n        }\n        \n        if (authProtocol.equals(\"MD5\")) {\n            return AuthMD5.ID;\n        } else if (authProtocol.equals(\"SHA\")) {\n            return AuthSHA.ID;\n        } else {\n            throw new IllegalArgumentException(\"Authentication protocol unsupported: \" + authProtocol);\n        }            \n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SnmpGet implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        get was unsuccessful, then the first elment\n     *        of the array will be null and lenth of 1. \n     */\n    public SnmpValue[] get(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids) {\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.GET, oids);\n    }","id":103326,"modified_method":"/**\n     * SnmpGet implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        get was unsuccessful, then the first elment\n     *        of the array will be null and lenth of 1. \n     */\n    public SnmpValue[] get(SnmpAgentConfig agentConfig, SnmpObjId[] oids) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.GET, oids, null);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP GetNext implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        getNext was unsuccessful, then the first element\n     *        of the array will be null and length of 1. \n     */\n    public SnmpValue[] getNext(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids) {\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.GETNEXT, oids);\n    }","id":103327,"modified_method":"/**\n     * SNMP GetNext implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        getNext was unsuccessful, then the first element\n     *        of the array will be null and length of 1. \n     */\n    public SnmpValue[] getNext(SnmpAgentConfig agentConfig, SnmpObjId[] oids) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"getNext: OID: \"+oids+\" for Agent:\"+agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.GETNEXT, oids, null);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Sends and SNMP4J request pdu.  The attributes in SnmpAgentConfig should have been\n     * adapted from default SnmpAgentConfig values to those compatible with the SNMP4J library.\n     * \n     * @param agentConfig\n     * @param pduType TODO\n     * @param oids\n     * @return\n     */\n    private SnmpValue[] send(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids, SnmpValue[] values) {\n        \n        SnmpValue[] retvalues = { null };\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession(agentConfig);\n            session.listen();\n            \n            session.getUSM().addUser((agentConfig.getSecurityName()),\n                    new UsmUser(agentConfig.getSecurityName(),\n                            agentConfig.getAuthProtocol(),\n                            agentConfig.getAuthPassPhrase(),\n                            agentConfig.getPrivProtocol(),\n                            agentConfig.getPrivPassPhrase()));\n            \n            Target target = agentConfig.getTarget();\n            PDU pdu = SnmpHelpers.createPDU(agentConfig.getVersion());\n            pdu.setType(pduType);\n            \n            //TODO:log this\n            if (!buildPdu(pdu, oids, values))\n                return null;\n            \n            ResponseEvent responseEvent = session.send(pdu, target);\n            \n            if (responseEvent.getResponse() == null) {\n                log().warn(\"send: Timeout.  Agent: \"+agentConfig);\n            } else if (responseEvent.getResponse().get(0).getSyntax() == SMIConstants.SYNTAX_NULL) {\n                retvalues[0] = null;\n            } else if (responseEvent.getError() != null) {\n                log().warn(\"send: Error during get operation.  Error: \"+responseEvent.getError().getLocalizedMessage());\n            } else if (responseEvent.getResponse().getType() == PDU.REPORT) {\n                log().warn(\"send: Error during get operation.  Report returned with varbinds: \"+responseEvent.getResponse().getVariableBindings());\n            } else if (responseEvent.getResponse().getVariableBindings().size() < 1) {\n                log().warn(\"send: Received PDU with 0 varbinds.\");\n            } else {\n                \n                retvalues = new Snmp4JValue[responseEvent.getResponse().getVariableBindings().size()];\n                \n                for (int i=0; i<retvalues.length; i++) {\n                    retvalues[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());\n                }\n                \n                if (log().isDebugEnabled())\n                    log().debug(\"send: Snmp operation successful. Value: \"+values);\n            }\n            \n        } catch (IOException e) {\n            log().error(\"getNext: Could not create Snmp session for Agent: \"+agentConfig+\". \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Error closinging SNMP connection: \" + e, e);\n                }\n            }\n        }\n        return retvalues;\n        \n    }","id":103328,"modified_method":"protected PDU buildPdu(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids, SnmpValue[] values) {\n        PDU pdu = agentConfig.createPdu(pduType);\n        \n        if (values == null) {\n            for (SnmpObjId oid : oids) {\n                pdu.add(new VariableBinding(new OID(oid.toString())));\n            }\n        } else {\n            // TODO should this throw an exception?  This situation is fairly bogus and probably signifies a coding error.\n            if (oids.length != values.length) {\n                Exception e = new Exception(\"This is a bogus exception so we can get a stack backtrace\");\n                log().error(\"PDU to prepare has object values but not the same number as there are OIDs.  There are \" + oids.length + \" OIDs and \" + values.length + \" object values.\", e);\n                return null;\n            }\n        \n            for (int i = 0; i < oids.length; i++) {\n                pdu.add(new VariableBinding(new OID(oids[i].toString()), new Snmp4JValue(values[i].getType(), values[i].getBytes()).getVariable()));\n            }\n        }\n        \n        // TODO should this throw an exception?  This situation is fairly bogus.\n        if (pdu.getVariableBindings().size() != oids.length) {\n            Exception e = new Exception(\"This is a bogus exception so we can get a stack backtrace\");\n            log().error(\"Prepared PDU does not have as many variable bindings as there are OIDs.  There are \" + oids.length + \" OIDs and \" + pdu.getVariableBindings() + \" variable bindings.\", e);\n            return null;\n        }\n        \n        return pdu;\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void unregisterForTraps(TrapNotificationListener listener, int snmpTrapPort) throws IOException {\n        RegistrationInfo info = s_registrations.remove(listener);\n        info.getSession().close();\n    }","id":103329,"modified_method":"public void unregisterForTraps(TrapNotificationListener listener, int snmpTrapPort) throws IOException {\n        RegistrationInfo info = s_registrations.remove(listener);\n        closeQuietly(info.getSession());\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP4J get helper that takes a single SnmpObjId\n     * and calls get with an array.lenght =1 and returns\n     * the first element of the returned array of SnmpValue.\n     * \n     * @param agentConfig\n     * @param oid\n     *\n     */\n    public SnmpValue get(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oid+\" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = {oid};\n        SnmpValue[] values = get(agentConfig, oids);\n        \n        return values[0];\n    }","id":103330,"modified_method":"/**\n     * SNMP4J get helper that takes a single SnmpObjId\n     * and calls get with an array.lenght =1 and returns\n     * the first element of the returned array of SnmpValue.\n     * \n     * @param agentConfig\n     * @param oid\n     *\n     */\n    public SnmpValue get(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"get: OID: \"+oid+\" for Agent:\"+agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] retvalues = get(agentConfig, oids);\n        \n        return retvalues[0];\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Sends and SNMP4J request pdu.  The attributes in SnmpAgentConfig should have been\n     * adapted from default SnmpAgentConfig values to those compatible with the SNMP4J library.\n     * \n     * @param agentConfig\n     * @param pduType TODO\n     * @param oids\n     * @return\n     */\n    protected SnmpValue[] send(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids) {\n        \n        SnmpValue[] values = { null };\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession(agentConfig);\n            session.listen();\n            \n            session.getUSM().addUser((agentConfig.getSecurityName()),\n                    new UsmUser(agentConfig.getSecurityName(),\n                            agentConfig.getAuthProtocol(),\n                            agentConfig.getAuthPassPhrase(),\n                            agentConfig.getPrivProtocol(),\n                            agentConfig.getPrivPassPhrase()));\n            \n            Target target = agentConfig.getTarget();\n            PDU pdu = SnmpHelpers.createPDU(agentConfig.getVersion());\n            pdu.setType(pduType);\n            \n            //TODO:log this\n            if (!buildPdu(pdu, oids))\n                return null;\n            \n            ResponseEvent responseEvent = session.send(pdu, target);\n            \n            if (responseEvent.getResponse() == null) {\n                log().warn(\"send: Timeout.  Agent: \"+agentConfig);\n            } else if (responseEvent.getResponse().get(0).getSyntax() == SMIConstants.SYNTAX_NULL) {\n                values[0] = null;\n            } else if (responseEvent.getError() != null) {\n                log().warn(\"send: Error during get operation.  Error: \"+responseEvent.getError().getLocalizedMessage());\n            } else if (responseEvent.getResponse().getType() == PDU.REPORT) {\n                log().warn(\"send: Error during get operation.  Report returned with varbinds: \"+responseEvent.getResponse().getVariableBindings());\n            } else if (responseEvent.getResponse().getVariableBindings().size() < 1) {\n                log().warn(\"send: Received PDU with 0 varbinds.\");\n            } else {\n                \n                values = new Snmp4JValue[responseEvent.getResponse().getVariableBindings().size()];\n                \n                for (int i=0; i<values.length; i++) {\n                    values[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());\n                }\n                \n                if (log().isDebugEnabled())\n                    log().debug(\"send: Snmp operation successful. Value: \"+values);\n            }\n            \n        } catch (IOException e) {\n            log().error(\"getNext: Could not create Snmp session for Agent: \"+agentConfig+\". \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Error closinging SNMP connection: \" + e, e);\n                }\n            }\n        }\n        return values;\n        \n    }","id":103331,"modified_method":"private SnmpValue[] buildAndSendPdu(SnmpAgentConfig agentConfig, int type, SnmpObjId[] oids, SnmpValue[] values) {\n        Snmp4JAgentConfig snmp4jAgentConfig = new Snmp4JAgentConfig(agentConfig);\n        \n        PDU pdu = buildPdu(snmp4jAgentConfig, type, oids, values);\n        if (pdu == null) {\n            return null;\n        }\n        \n        return send(snmp4jAgentConfig, pdu, true);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue set(SnmpAgentConfig agentConfig, SnmpObjId oid, SnmpValue value) {\n        if (log().isDebugEnabled())\n            log().debug(\"set: OID: \"+oid+\" value: \" + value.toString() + \" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = {oid};\n        SnmpValue[] values = {value};\n        return set(agentConfig, oids,values)[0];\n        \n    }","id":103332,"modified_method":"public SnmpValue set(SnmpAgentConfig agentConfig, SnmpObjId oid, SnmpValue value) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"set: OID: \" + oid + \" value: \" + value.toString() + \" for Agent: \" + agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] values = { value };\n        SnmpValue[] retvalues = set(agentConfig, oids, values);\n        \n        return retvalues[0];\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void send(String agentAddress, int port, String community, PDU pdu) throws Exception {\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession();\n            \n            Address targetAddress = GenericAddress.parse(\"udp:\"+agentAddress+\"/\"+port);\n            CommunityTarget target = new CommunityTarget(targetAddress, new OctetString(community.getBytes()));\n            target.setVersion(pdu instanceof PDUv1 ? SnmpConstants.version1 : SnmpConstants.version2c);\n        \n            session.send(pdu, target);\n        } catch (IOException e) {\n            log().error(\"send: Could not create Snmp session for \" + agentAddress + \"/\" + port + \": \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Could not close SNMP session: \" + e, e);\n                }\n            }\n        }\n    }","id":103333,"modified_method":"protected SnmpAgentConfig buildAgentConfig(String address, int port, String community, PDU pdu) throws UnknownHostException {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getByName(address));\n        config.setPort(port);\n        config.setVersion(pdu instanceof PDUv1 ? SnmpAgentConfig.VERSION1 : SnmpAgentConfig.VERSION2C);\n        return config;\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue[] set(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids, SnmpValue[] values) {\n        \n    \tSnmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" values: \" + values + \" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.SET, oids, values);\n    }","id":103334,"modified_method":"public SnmpValue[] set(SnmpAgentConfig agentConfig, SnmpObjId[] oids, SnmpValue[] values) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"set: OIDs: \" + oids + \" values: \" + values + \" for Agent: \" + agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.SET, oids, values);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP4J getNext implementation\n     * \n     * @param agentConfig\n     * @param oid\n     * \n     */\n    public SnmpValue getNext(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled())\n            log().debug(\"getNext: OID: \"+oid+\" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] values = getNext(agentConfig, oids);\n        return values[0];\n    }","id":103335,"modified_method":"/**\n     * SNMP4J getNext implementation\n     * \n     * @param agentConfig\n     * @param oid\n     * \n     */\n    public SnmpValue getNext(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"getNext: OID: \"+oid+\" for Agent:\"+agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] retvalues = getNext(agentConfig, oids);\n        return retvalues[0];\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void send(String destAddr, int destPort, String community) throws Exception {\n        m_strategy.send(destAddr, destPort, community, m_pdu);\n    }","id":103336,"modified_method":"public void send(String destAddr, int destPort, String community) throws Exception {\n        SnmpAgentConfig snmpAgentConfig = m_strategy.buildAgentConfig(destAddr, destPort, community, m_pdu);\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        \n        m_strategy.send(agentConfig, m_pdu, false);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void reset() {\n            m_bulkPdu = SnmpHelpers.createPDU(getVersion());\n            m_bulkPdu.setType(PDU.GETBULK);\n        }","id":103337,"modified_method":"public void reset() {\n            m_bulkPdu = m_agentConfig.createPdu(PDU.GETBULK);\n        }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void reset() {\n            m_nextPdu = SnmpHelpers.createPDU(getVersion());\n            m_nextPdu.setType(PDU.GETNEXT);\n        }","id":103338,"modified_method":"public void reset() {\n            m_nextPdu = m_agentConfig.createPdu(PDU.GETNEXT);\n        }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(PDU response) {\n            \n            try {\n                log().debug(\"Received a tracker pdu of type \"+PDU.getTypeString(response.getType())+\" from \"+getAddress()+\" of size \"+response.size()+\" errorStatus = \"+response.getErrorStatusText()+\" errorIndex = \"+response.getErrorIndex());\n                if (response.getType() != PDU.REPORT) {\n                    if (!processErrors(response.getErrorStatus(), response.getErrorIndex())) {\n                        for(int i = 0; i < response.size(); i++) {\n                            VariableBinding vb = response.get(i);\n                            SnmpObjId receivedOid = SnmpObjId.get(vb.getOid().getValue());\n                            SnmpValue val = new Snmp4JValue(vb.getVariable());\n                            Snmp4JWalker.this.processResponse(receivedOid, val);\n                        }\n                    }\n                    buildAndSendNextPdu();\n                } else {\n                    handleAuthError(\"A REPORT Pdu was returned from the agent.  This is most likely an authentication problem.  Please check the config\");\n                }\n            } catch (Throwable e) {\n                handleFatalError(e);\n            }\n        }","id":103339,"modified_method":"public void processResponse(PDU response) {\n            try {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"Received a tracker pdu of type \"+PDU.getTypeString(response.getType())+\" from \"+getAddress()+\" of size \"+response.size()+\" errorStatus = \"+response.getErrorStatusText()+\" errorIndex = \"+response.getErrorIndex());\n                }\n                if (response.getType() != PDU.REPORT) {\n                    if (!processErrors(response.getErrorStatus(), response.getErrorIndex())) {\n                        for (int i = 0; i < response.size(); i++) {\n                            VariableBinding vb = response.get(i);\n                            SnmpObjId receivedOid = SnmpObjId.get(vb.getOid().getValue());\n                            SnmpValue val = new Snmp4JValue(vb.getVariable());\n                            Snmp4JWalker.this.processResponse(receivedOid, val);\n                        }\n                    }\n                    buildAndSendNextPdu();\n                } else {\n                    handleAuthError(\"A REPORT Pdu was returned from the agent.  This is most likely an authentication problem.  Please check the config\");\n                }\n            } catch (Throwable e) {\n                handleFatalError(e);\n            }\n        }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void sendNextPdu(WalkerPduBuilder pduBuilder) throws IOException {\n        Snmp4JPduBuilder snmp4JPduBuilder = (Snmp4JPduBuilder)pduBuilder;\n        if (m_session == null) {\n            m_session = SnmpHelpers.createSnmpSession(m_agentConfig);\n            m_session.listen();\n        }\n        \n        log().debug(\"Sending tracker pdu of size \"+snmp4JPduBuilder.getPdu().size());\n        m_session.send(snmp4JPduBuilder.getPdu(), m_tgt, null, m_listener);\n    }","id":103340,"modified_method":"protected void sendNextPdu(WalkerPduBuilder pduBuilder) throws IOException {\n        Snmp4JPduBuilder snmp4JPduBuilder = (Snmp4JPduBuilder)pduBuilder;\n        if (m_session == null) {\n            m_session = m_agentConfig.createSnmpSession();\n            m_session.listen();\n        }\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Sending tracker pdu of size \"+snmp4JPduBuilder.getPdu().size());\n        }\n        m_session.send(snmp4JPduBuilder.getPdu(), m_tgt, null, m_listener);\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void onResponse(ResponseEvent responseEvent) {\n        \t// need to cancel this here otherwise SNMP4J Keeps it around forever... go figure\n        \tm_session.cancel(responseEvent.getRequest(), this);\n            if (responseEvent.getError() instanceof InterruptedException) {\n                log().debug(\"Interruption event.  We have probably tried to close the session due to an error: \"+responseEvent.getError());\n            } \n            else if (responseEvent.getResponse() == null) {\n                handleTimeout(getName()+\": snmpTimeoutError for: \" + getAddress());\n            } else if (responseEvent.getError() != null){\n                handleError(getName()+\": snmpInternalError: \" + responseEvent.getError() + \" for: \" + getAddress());\n            } else {\n                processResponse(responseEvent.getResponse());\n            }\n            \n        }","id":103341,"modified_method":"public void onResponse(ResponseEvent responseEvent) {\n        \t// need to cancel this here otherwise SNMP4J Keeps it around forever... go figure\n        \tm_session.cancel(responseEvent.getRequest(), this);\n            if (responseEvent.getError() instanceof InterruptedException) {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"Interruption event.  We have probably tried to close the session due to an error: \" + responseEvent.getError(), responseEvent.getError());\n                }\n            } else if (responseEvent.getResponse() == null) {\n                handleTimeout(getName()+\": snmpTimeoutError for: \" + getAddress());\n            } else if (responseEvent.getError() != null){\n                handleError(getName()+\": snmpInternalError: \" + responseEvent.getError() + \" for: \" + getAddress());\n            } else {\n                processResponse(responseEvent.getResponse());\n            }\n            \n        }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        \n        if (log().isDebugEnabled())\n            log().debug(\"Walking \"+getName()+\" for \"+getAddress()+\" using version \"+SnmpHelpers.versionString(getVersion())+\" with config: \"+m_agentConfig);\n            \n        super.start();\n    }","id":103342,"modified_method":"public void start() {\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Walking \"+getName()+\" for \"+getAddress()+\" using version \"+m_agentConfig.getVersionString()+\" with config: \"+m_agentConfig);\n        }\n            \n        super.start();\n    }","commit_id":"2443521054b2d1beaa8788b1776f66ecd82ca751","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OID convertAuthProtocol(String authProtocol) {\n        \n        //Returning null here is okay because the SNMP4J library supports\n        //this value as null when creating the Snmp session.\n        if (authProtocol == null)\n            return null;\n        \n        if (authProtocol.equals(\"MD5\")) {\n            return AuthMD5.ID;\n        } else if (authProtocol.equals(\"SHA\")) {\n            return AuthSHA.ID;\n        } else {\n            throw new IllegalArgumentException(\"Authentication protocol unsupported: \" + authProtocol);\n        }            \n    }","id":103343,"modified_method":"private OID convertAuthProtocol(String authProtocol) {\n        /*\n         * Returning null here is okay because the SNMP4J library supports\n         * this value as null when creating the Snmp session.\n         */\n        if (authProtocol == null) {\n            return null;\n        }\n        \n        if (authProtocol.equals(\"MD5\")) {\n            return AuthMD5.ID;\n        } else if (authProtocol.equals(\"SHA\")) {\n            return AuthSHA.ID;\n        } else {\n            throw new IllegalArgumentException(\"Authentication protocol unsupported: \" + authProtocol);\n        }            \n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private OID convertPrivProtocol(String privProtocol) {\n    \n        //Returning null here is okay because the SNMP4J library supports\n        //this value as null when creating the Snmp session.\n        if (privProtocol == null)\n            return null;\n        \n        if (privProtocol.equals(\"DES\")) {\n            return PrivDES.ID;\n        } else if ((privProtocol.equals(\"AES128\")) || (privProtocol.equals(\"AES\"))) {\n            return PrivAES128.ID;\n        } else if (privProtocol.equals(\"AES192\")) {\n            return PrivAES192.ID;\n        } else if (privProtocol.equals(\"AES256\")) {\n            return PrivAES256.ID;\n        } else {\n            throw new IllegalArgumentException(\"Privacy protocol \" + privProtocol + \" not supported\");\n        }\n    \n    }","id":103344,"modified_method":"private OID convertPrivProtocol(String privProtocol) {\n        /*\n         * Returning null here is okay because the SNMP4J library supports\n         * this value as null when creating the Snmp session.\n         */\n        if (privProtocol == null) {\n            return null;\n        }\n        \n        if (privProtocol.equals(\"DES\")) {\n            return PrivDES.ID;\n        } else if ((privProtocol.equals(\"AES128\")) || (privProtocol.equals(\"AES\"))) {\n            return PrivAES128.ID;\n        } else if (privProtocol.equals(\"AES192\")) {\n            return PrivAES192.ID;\n        } else if (privProtocol.equals(\"AES256\")) {\n            return PrivAES256.ID;\n        } else {\n            throw new IllegalArgumentException(\"Privacy protocol \" + privProtocol + \" not supported\");\n        }\n    \n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP4J getNext implementation\n     * \n     * @param agentConfig\n     * @param oid\n     * \n     */\n    public SnmpValue getNext(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled())\n            log().debug(\"getNext: OID: \"+oid+\" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] values = getNext(agentConfig, oids);\n        return values[0];\n    }","id":103345,"modified_method":"/**\n     * SNMP4J getNext implementation\n     * \n     * @param agentConfig\n     * @param oid\n     * \n     */\n    public SnmpValue getNext(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"getNext: OID: \"+oid+\" for Agent:\"+agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] retvalues = getNext(agentConfig, oids);\n        return retvalues[0];\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SnmpGet implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        get was unsuccessful, then the first elment\n     *        of the array will be null and lenth of 1. \n     */\n    public SnmpValue[] get(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids) {\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.GET, oids);\n    }","id":103346,"modified_method":"/**\n     * SnmpGet implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        get was unsuccessful, then the first elment\n     *        of the array will be null and lenth of 1. \n     */\n    public SnmpValue[] get(SnmpAgentConfig agentConfig, SnmpObjId[] oids) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.GET, oids, null);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Sends and SNMP4J request pdu.  The attributes in SnmpAgentConfig should have been\n     * adapted from default SnmpAgentConfig values to those compatible with the SNMP4J library.\n     * \n     * @param agentConfig\n     * @param pduType TODO\n     * @param oids\n     * @return\n     */\n    protected SnmpValue[] send(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids) {\n        \n        SnmpValue[] values = { null };\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession(agentConfig);\n            session.listen();\n            \n            session.getUSM().addUser((agentConfig.getSecurityName()),\n                    new UsmUser(agentConfig.getSecurityName(),\n                            agentConfig.getAuthProtocol(),\n                            agentConfig.getAuthPassPhrase(),\n                            agentConfig.getPrivProtocol(),\n                            agentConfig.getPrivPassPhrase()));\n            \n            Target target = agentConfig.getTarget();\n            PDU pdu = SnmpHelpers.createPDU(agentConfig.getVersion());\n            pdu.setType(pduType);\n            \n            //TODO:log this\n            if (!buildPdu(pdu, oids))\n                return null;\n            \n            ResponseEvent responseEvent = session.send(pdu, target);\n            \n            if (responseEvent.getResponse() == null) {\n                log().warn(\"send: Timeout.  Agent: \"+agentConfig);\n            } else if (responseEvent.getResponse().get(0).getSyntax() == SMIConstants.SYNTAX_NULL) {\n                values[0] = null;\n            } else if (responseEvent.getError() != null) {\n                log().warn(\"send: Error during get operation.  Error: \"+responseEvent.getError().getLocalizedMessage());\n            } else if (responseEvent.getResponse().getType() == PDU.REPORT) {\n                log().warn(\"send: Error during get operation.  Report returned with varbinds: \"+responseEvent.getResponse().getVariableBindings());\n            } else if (responseEvent.getResponse().getVariableBindings().size() < 1) {\n                log().warn(\"send: Received PDU with 0 varbinds.\");\n            } else {\n                \n                values = new Snmp4JValue[responseEvent.getResponse().getVariableBindings().size()];\n                \n                for (int i=0; i<values.length; i++) {\n                    values[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());\n                }\n                \n                if (log().isDebugEnabled())\n                    log().debug(\"send: Snmp operation successful. Value: \"+values);\n            }\n            \n        } catch (IOException e) {\n            log().error(\"getNext: Could not create Snmp session for Agent: \"+agentConfig+\". \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Error closinging SNMP connection: \" + e, e);\n                }\n            }\n        }\n        return values;\n        \n    }","id":103347,"modified_method":"private SnmpValue[] buildAndSendPdu(SnmpAgentConfig agentConfig, int type, SnmpObjId[] oids, SnmpValue[] values) {\n        Snmp4JAgentConfig snmp4jAgentConfig = new Snmp4JAgentConfig(agentConfig);\n        \n        PDU pdu = buildPdu(snmp4jAgentConfig, type, oids, values);\n        if (pdu == null) {\n            return null;\n        }\n        \n        return send(snmp4jAgentConfig, pdu, true);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue set(SnmpAgentConfig agentConfig, SnmpObjId oid, SnmpValue value) {\n        if (log().isDebugEnabled())\n            log().debug(\"set: OID: \"+oid+\" value: \" + value.toString() + \" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = {oid};\n        SnmpValue[] values = {value};\n        return set(agentConfig, oids,values)[0];\n        \n    }","id":103348,"modified_method":"public SnmpValue set(SnmpAgentConfig agentConfig, SnmpObjId oid, SnmpValue value) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"set: OID: \" + oid + \" value: \" + value.toString() + \" for Agent: \" + agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] values = { value };\n        SnmpValue[] retvalues = set(agentConfig, oids, values);\n        \n        return retvalues[0];\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void send(String agentAddress, int port, String community, PDU pdu) throws Exception {\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession();\n            \n            Address targetAddress = GenericAddress.parse(\"udp:\"+agentAddress+\"/\"+port);\n            CommunityTarget target = new CommunityTarget(targetAddress, new OctetString(community.getBytes()));\n            target.setVersion(pdu instanceof PDUv1 ? SnmpConstants.version1 : SnmpConstants.version2c);\n        \n            session.send(pdu, target);\n        } catch (IOException e) {\n            log().error(\"send: Could not create Snmp session for \" + agentAddress + \"/\" + port + \": \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Could not close SNMP session: \" + e, e);\n                }\n            }\n        }\n    }","id":103349,"modified_method":"protected SnmpAgentConfig buildAgentConfig(String address, int port, String community, PDU pdu) throws UnknownHostException {\n        SnmpAgentConfig config = new SnmpAgentConfig();\n        config.setAddress(InetAddress.getByName(address));\n        config.setPort(port);\n        config.setVersion(pdu instanceof PDUv1 ? SnmpAgentConfig.VERSION1 : SnmpAgentConfig.VERSION2C);\n        return config;\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP4J get helper that takes a single SnmpObjId\n     * and calls get with an array.lenght =1 and returns\n     * the first element of the returned array of SnmpValue.\n     * \n     * @param agentConfig\n     * @param oid\n     *\n     */\n    public SnmpValue get(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oid+\" for Agent:\"+agentConfig);\n        \n        SnmpObjId[] oids = {oid};\n        SnmpValue[] values = get(agentConfig, oids);\n        \n        return values[0];\n    }","id":103350,"modified_method":"/**\n     * SNMP4J get helper that takes a single SnmpObjId\n     * and calls get with an array.lenght =1 and returns\n     * the first element of the returned array of SnmpValue.\n     * \n     * @param agentConfig\n     * @param oid\n     *\n     */\n    public SnmpValue get(SnmpAgentConfig agentConfig, SnmpObjId oid) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"get: OID: \"+oid+\" for Agent:\"+agentConfig);\n        }\n        \n        SnmpObjId[] oids = { oid };\n        SnmpValue[] retvalues = get(agentConfig, oids);\n        \n        return retvalues[0];\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * SNMP GetNext implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        getNext was unsuccessful, then the first element\n     *        of the array will be null and length of 1. \n     */\n    public SnmpValue[] getNext(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids) {\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.GETNEXT, oids);\n    }","id":103351,"modified_method":"/**\n     * SNMP GetNext implementation.\n     * \n     * @param agentConfig\n     * @param oids\n     * @return\n     *        Returns an array of Snmp4JValues.  If the\n     *        getNext was unsuccessful, then the first element\n     *        of the array will be null and length of 1. \n     */\n    public SnmpValue[] getNext(SnmpAgentConfig agentConfig, SnmpObjId[] oids) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"getNext: OID: \"+oids+\" for Agent:\"+agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.GETNEXT, oids, null);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue[] set(SnmpAgentConfig snmpAgentConfig, SnmpObjId[] oids, SnmpValue[] values) {\n        \n    \tSnmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        if (log().isDebugEnabled())\n            log().debug(\"get: OID: \"+oids+\" values: \" + values + \" for Agent:\"+agentConfig);\n        \n        return send(agentConfig, PDU.SET, oids, values);\n    }","id":103352,"modified_method":"public SnmpValue[] set(SnmpAgentConfig agentConfig, SnmpObjId[] oids, SnmpValue[] values) {\n        if (log().isDebugEnabled()) {\n            log().debug(\"set: OIDs: \" + oids + \" values: \" + values + \" for Agent: \" + agentConfig);\n        }\n        \n        return buildAndSendPdu(agentConfig, PDU.SET, oids, values);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Sends and SNMP4J request pdu.  The attributes in SnmpAgentConfig should have been\n     * adapted from default SnmpAgentConfig values to those compatible with the SNMP4J library.\n     * \n     * @param agentConfig\n     * @param pduType TODO\n     * @param oids\n     * @return\n     */\n    private SnmpValue[] send(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids, SnmpValue[] values) {\n        \n        SnmpValue[] retvalues = { null };\n        Snmp session = null;\n        \n        try {\n            session = SnmpHelpers.createSnmpSession(agentConfig);\n            session.listen();\n            \n            session.getUSM().addUser((agentConfig.getSecurityName()),\n                    new UsmUser(agentConfig.getSecurityName(),\n                            agentConfig.getAuthProtocol(),\n                            agentConfig.getAuthPassPhrase(),\n                            agentConfig.getPrivProtocol(),\n                            agentConfig.getPrivPassPhrase()));\n            \n            Target target = agentConfig.getTarget();\n            PDU pdu = SnmpHelpers.createPDU(agentConfig.getVersion());\n            pdu.setType(pduType);\n            \n            //TODO:log this\n            if (!buildPdu(pdu, oids, values))\n                return null;\n            \n            ResponseEvent responseEvent = session.send(pdu, target);\n            \n            if (responseEvent.getResponse() == null) {\n                log().warn(\"send: Timeout.  Agent: \"+agentConfig);\n            } else if (responseEvent.getResponse().get(0).getSyntax() == SMIConstants.SYNTAX_NULL) {\n                retvalues[0] = null;\n            } else if (responseEvent.getError() != null) {\n                log().warn(\"send: Error during get operation.  Error: \"+responseEvent.getError().getLocalizedMessage());\n            } else if (responseEvent.getResponse().getType() == PDU.REPORT) {\n                log().warn(\"send: Error during get operation.  Report returned with varbinds: \"+responseEvent.getResponse().getVariableBindings());\n            } else if (responseEvent.getResponse().getVariableBindings().size() < 1) {\n                log().warn(\"send: Received PDU with 0 varbinds.\");\n            } else {\n                \n                retvalues = new Snmp4JValue[responseEvent.getResponse().getVariableBindings().size()];\n                \n                for (int i=0; i<retvalues.length; i++) {\n                    retvalues[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());\n                }\n                \n                if (log().isDebugEnabled())\n                    log().debug(\"send: Snmp operation successful. Value: \"+values);\n            }\n            \n        } catch (IOException e) {\n            log().error(\"getNext: Could not create Snmp session for Agent: \"+agentConfig+\". \" + e, e);\n        } finally {\n            if (session != null) {\n                try {\n                    session.close();\n                } catch (IOException e) {\n                    log().error(\"send: Error closinging SNMP connection: \" + e, e);\n                }\n            }\n        }\n        return retvalues;\n        \n    }","id":103353,"modified_method":"protected PDU buildPdu(Snmp4JAgentConfig agentConfig, int pduType, SnmpObjId[] oids, SnmpValue[] values) {\n        PDU pdu = agentConfig.createPdu(pduType);\n        \n        if (values == null) {\n            for (SnmpObjId oid : oids) {\n                pdu.add(new VariableBinding(new OID(oid.toString())));\n            }\n        } else {\n            // TODO should this throw an exception?  This situation is fairly bogus and probably signifies a coding error.\n            if (oids.length != values.length) {\n                Exception e = new Exception(\"This is a bogus exception so we can get a stack backtrace\");\n                log().error(\"PDU to prepare has object values but not the same number as there are OIDs.  There are \" + oids.length + \" OIDs and \" + values.length + \" object values.\", e);\n                return null;\n            }\n        \n            for (int i = 0; i < oids.length; i++) {\n                pdu.add(new VariableBinding(new OID(oids[i].toString()), new Snmp4JValue(values[i].getType(), values[i].getBytes()).getVariable()));\n            }\n        }\n        \n        // TODO should this throw an exception?  This situation is fairly bogus.\n        if (pdu.getVariableBindings().size() != oids.length) {\n            Exception e = new Exception(\"This is a bogus exception so we can get a stack backtrace\");\n            log().error(\"Prepared PDU does not have as many variable bindings as there are OIDs.  There are \" + oids.length + \" OIDs and \" + pdu.getVariableBindings() + \" variable bindings.\", e);\n            return null;\n        }\n        \n        return pdu;\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void unregisterForTraps(TrapNotificationListener listener, int snmpTrapPort) throws IOException {\n        RegistrationInfo info = s_registrations.remove(listener);\n        info.getSession().close();\n    }","id":103354,"modified_method":"public void unregisterForTraps(TrapNotificationListener listener, int snmpTrapPort) throws IOException {\n        RegistrationInfo info = s_registrations.remove(listener);\n        closeQuietly(info.getSession());\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void send(String destAddr, int destPort, String community) throws Exception {\n        m_strategy.send(destAddr, destPort, community, m_pdu);\n    }","id":103355,"modified_method":"public void send(String destAddr, int destPort, String community) throws Exception {\n        SnmpAgentConfig snmpAgentConfig = m_strategy.buildAgentConfig(destAddr, destPort, community, m_pdu);\n        Snmp4JAgentConfig agentConfig = new Snmp4JAgentConfig(snmpAgentConfig);\n        \n        m_strategy.send(agentConfig, m_pdu, false);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void reset() {\n            m_nextPdu = SnmpHelpers.createPDU(getVersion());\n            m_nextPdu.setType(PDU.GETNEXT);\n        }","id":103356,"modified_method":"public void reset() {\n            m_nextPdu = m_agentConfig.createPdu(PDU.GETNEXT);\n        }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void reset() {\n            m_bulkPdu = SnmpHelpers.createPDU(getVersion());\n            m_bulkPdu.setType(PDU.GETBULK);\n        }","id":103357,"modified_method":"public void reset() {\n            m_bulkPdu = m_agentConfig.createPdu(PDU.GETBULK);\n        }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void onResponse(ResponseEvent responseEvent) {\n        \t// need to cancel this here otherwise SNMP4J Keeps it around forever... go figure\n        \tm_session.cancel(responseEvent.getRequest(), this);\n            if (responseEvent.getError() instanceof InterruptedException) {\n                log().debug(\"Interruption event.  We have probably tried to close the session due to an error: \"+responseEvent.getError());\n            } \n            else if (responseEvent.getResponse() == null) {\n                handleTimeout(getName()+\": snmpTimeoutError for: \" + getAddress());\n            } else if (responseEvent.getError() != null){\n                handleError(getName()+\": snmpInternalError: \" + responseEvent.getError() + \" for: \" + getAddress());\n            } else {\n                processResponse(responseEvent.getResponse());\n            }\n            \n        }","id":103358,"modified_method":"public void onResponse(ResponseEvent responseEvent) {\n        \t// need to cancel this here otherwise SNMP4J Keeps it around forever... go figure\n        \tm_session.cancel(responseEvent.getRequest(), this);\n            if (responseEvent.getError() instanceof InterruptedException) {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"Interruption event.  We have probably tried to close the session due to an error: \" + responseEvent.getError(), responseEvent.getError());\n                }\n            } else if (responseEvent.getResponse() == null) {\n                handleTimeout(getName()+\": snmpTimeoutError for: \" + getAddress());\n            } else if (responseEvent.getError() != null){\n                handleError(getName()+\": snmpInternalError: \" + responseEvent.getError() + \" for: \" + getAddress());\n            } else {\n                processResponse(responseEvent.getResponse());\n            }\n            \n        }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(PDU response) {\n            \n            try {\n                log().debug(\"Received a tracker pdu of type \"+PDU.getTypeString(response.getType())+\" from \"+getAddress()+\" of size \"+response.size()+\" errorStatus = \"+response.getErrorStatusText()+\" errorIndex = \"+response.getErrorIndex());\n                if (response.getType() != PDU.REPORT) {\n                    if (!processErrors(response.getErrorStatus(), response.getErrorIndex())) {\n                        for(int i = 0; i < response.size(); i++) {\n                            VariableBinding vb = response.get(i);\n                            SnmpObjId receivedOid = SnmpObjId.get(vb.getOid().getValue());\n                            SnmpValue val = new Snmp4JValue(vb.getVariable());\n                            Snmp4JWalker.this.processResponse(receivedOid, val);\n                        }\n                    }\n                    buildAndSendNextPdu();\n                } else {\n                    handleAuthError(\"A REPORT Pdu was returned from the agent.  This is most likely an authentication problem.  Please check the config\");\n                }\n            } catch (Throwable e) {\n                handleFatalError(e);\n            }\n        }","id":103359,"modified_method":"public void processResponse(PDU response) {\n            try {\n                if (log().isDebugEnabled()) {\n                    log().debug(\"Received a tracker pdu of type \"+PDU.getTypeString(response.getType())+\" from \"+getAddress()+\" of size \"+response.size()+\" errorStatus = \"+response.getErrorStatusText()+\" errorIndex = \"+response.getErrorIndex());\n                }\n                if (response.getType() != PDU.REPORT) {\n                    if (!processErrors(response.getErrorStatus(), response.getErrorIndex())) {\n                        for (int i = 0; i < response.size(); i++) {\n                            VariableBinding vb = response.get(i);\n                            SnmpObjId receivedOid = SnmpObjId.get(vb.getOid().getValue());\n                            SnmpValue val = new Snmp4JValue(vb.getVariable());\n                            Snmp4JWalker.this.processResponse(receivedOid, val);\n                        }\n                    }\n                    buildAndSendNextPdu();\n                } else {\n                    handleAuthError(\"A REPORT Pdu was returned from the agent.  This is most likely an authentication problem.  Please check the config\");\n                }\n            } catch (Throwable e) {\n                handleFatalError(e);\n            }\n        }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void start() {\n        \n        if (log().isDebugEnabled())\n            log().debug(\"Walking \"+getName()+\" for \"+getAddress()+\" using version \"+SnmpHelpers.versionString(getVersion())+\" with config: \"+m_agentConfig);\n            \n        super.start();\n    }","id":103360,"modified_method":"public void start() {\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Walking \"+getName()+\" for \"+getAddress()+\" using version \"+m_agentConfig.getVersionString()+\" with config: \"+m_agentConfig);\n        }\n            \n        super.start();\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void sendNextPdu(WalkerPduBuilder pduBuilder) throws IOException {\n        Snmp4JPduBuilder snmp4JPduBuilder = (Snmp4JPduBuilder)pduBuilder;\n        if (m_session == null) {\n            m_session = SnmpHelpers.createSnmpSession(m_agentConfig);\n            m_session.listen();\n        }\n        \n        log().debug(\"Sending tracker pdu of size \"+snmp4JPduBuilder.getPdu().size());\n        m_session.send(snmp4JPduBuilder.getPdu(), m_tgt, null, m_listener);\n    }","id":103361,"modified_method":"protected void sendNextPdu(WalkerPduBuilder pduBuilder) throws IOException {\n        Snmp4JPduBuilder snmp4JPduBuilder = (Snmp4JPduBuilder)pduBuilder;\n        if (m_session == null) {\n            m_session = m_agentConfig.createSnmpSession();\n            m_session.listen();\n        }\n        \n        if (log().isDebugEnabled()) {\n            log().debug(\"Sending tracker pdu of size \"+snmp4JPduBuilder.getPdu().size());\n        }\n        m_session.send(snmp4JPduBuilder.getPdu(), m_tgt, null, m_listener);\n    }","commit_id":"3b2ad27a28abfc84b6b7d0988417e387fc2415a9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(SelectValuesMeta)smi;\n\t\tdata=(SelectValuesData)sdi;\n\n\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\tdata.firstselect   = true;\n\t\t\tdata.firstdeselect = true;\n\t\t\tdata.firstmetadata = true;\n\n\t\t\tdata.select=false;\n\t\t\tdata.deselect=false;\n\t\t\tdata.metadata=false;\n\t\t\t\n\t\t\tif (meta.getSelectName()!=null && meta.getSelectName().length>0) data.select   = true;\n\t\t\tif (meta.getDeleteName()!=null && meta.getDeleteName().length>0) data.deselect = true;\n\t\t\tif (meta.getMetaName()!=null && meta.getMetaName().length>0) data.metadata = true;\n\t\t\t\n\t\t\tboolean atLeastOne = data.select || data.deselect || data.metadata;\n\t\t\tif (!atLeastOne)\n\t\t\t{\n\t\t\t\tsetErrors(1);\n\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.InputShouldContainData\")); //$NON-NLS-1$\n\t\t\t}\n\t\t\t\n\t\t\treturn atLeastOne; // One of those three has to work!\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}","id":103362,"modified_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(SelectValuesMeta)smi;\n\t\tdata=(SelectValuesData)sdi;\n\n\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\tdata.firstselect   = true;\n\t\t\tdata.firstdeselect = true;\n\t\t\tdata.firstmetadata = true;\n\n\t\t\tdata.select=false;\n\t\t\tdata.deselect=false;\n\t\t\tdata.metadata=false;\n\t\t\t\n\t\t\tif (!Const.isEmpty(meta.getSelectName())) data.select   = true;\n\t\t\tif (!Const.isEmpty(meta.getDeleteName())) data.deselect = true;\n\t\t\tif (!Const.isEmpty(meta.getMeta())) data.metadata = true;\n\t\t\t\n\t\t\tboolean atLeastOne = data.select || data.deselect || data.metadata;\n\t\t\tif (!atLeastOne)\n\t\t\t{\n\t\t\t\tsetErrors(1);\n\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.InputShouldContainData\")); //$NON-NLS-1$\n\t\t\t}\n\t\t\t\n\t\t\treturn atLeastOne; // One of those three has to work!\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t   \n\t   Change the meta-data of certain fields.<p>\n\t   This, we can do VERY fast.<p>\n\t   \n\t   @param row The row to manipulate\n\t   @return true if everything went well, false if we need to stop because of an error!\n\t * @throws KettleValueException \n\t   \n\t*/\n\tprivate synchronized Object[] metadataValues(RowMetaInterface rowMeta, Object[] rowData) throws KettleValueException\n\t{\n\t\tif (data.firstmetadata)\n\t\t{\n\t\t\tdata.firstmetadata=false;\n\n\t\t\tdata.metanrs=new int[meta.getMetaName().length];\n\t\t\tfor (int i=0;i<data.metanrs.length;i++) \n\t\t\t{\n\t\t\t\tdata.metanrs[i]=rowMeta.indexOfValue(meta.getMetaName()[i]);\n\t\t\t\tif (data.metanrs[i]<0)\n\t\t\t\t{\n\t\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.CouldNotFindField\",meta.getMetaName()[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\tsetErrors(1);\n\t\t\t\t\tstopAll();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Check for doubles in the selected fields...\n\t\t\tint cnt[] = new int[meta.getMetaName().length];\n\t\t\tfor (int i=0;i<meta.getMetaName().length;i++)\n\t\t\t{\n\t\t\t\tcnt[i]=0;\n\t\t\t\tfor (int j=0;j<meta.getMetaName().length;j++)\n\t\t\t\t{\n\t\t\t\t\tif (meta.getMetaName()[i].equals(meta.getMetaName()[j])) cnt[i]++;\n\t\t\t\t\t\n\t\t\t\t\tif (cnt[i]>1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.FieldCouldNotSpecifiedMoreThanTwice2\",meta.getMetaName()[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t\tsetErrors(1);\n\t\t\t\t\t\tstopAll();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// Change the data too \n\t\t//\n\t\tfor (int i=0;i<data.metanrs.length;i++)\n\t\t{\n\t\t\tint index = data.metanrs[i];\n\t\t\tValueMetaInterface fromMeta = rowMeta.getValueMeta(index);\n            ValueMetaInterface toMeta   = data.metadataRowMeta.getValueMeta(index);\n\t\t\t\n\t\t\t// If we need to change from BINARY_STRING storage type to NORMAL...\n\t\t\t//\n\t\t\tif (fromMeta.isStorageBinaryString() && meta.getMetaStorageType()[i]==ValueMetaInterface.STORAGE_TYPE_NORMAL)\n\t\t\t{\n\t\t\t\trowData[index] = fromMeta.convertBinaryStringToNativeType((byte[]) rowData[index]);\n\t\t\t}\n\t\t\tif (meta.getMetaType()[i]!=ValueMetaInterface.TYPE_NONE)\n            {\n                switch(toMeta.getType())\n                {\n                case ValueMetaInterface.TYPE_STRING    : rowData[index] = fromMeta.getString(rowData[index]); break;\n                case ValueMetaInterface.TYPE_NUMBER    : rowData[index] = fromMeta.getNumber(rowData[index]); break;\n                case ValueMetaInterface.TYPE_INTEGER   : rowData[index] = fromMeta.getInteger(rowData[index]); break;\n                case ValueMetaInterface.TYPE_DATE      : rowData[index] = fromMeta.getDate(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BIGNUMBER : rowData[index] = fromMeta.getBigNumber(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BOOLEAN   : rowData[index] = fromMeta.getBoolean(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BINARY    : rowData[index] = fromMeta.getBinary(rowData[index]); break;\n                default: throw new KettleValueException(\"Unable to convert data type of value '\"+fromMeta+\"' to data type \"+toMeta.getType());\n                }\n            }\n\t\t}\n\n\t\treturn rowData;\n\t}","id":103363,"modified_method":"/**\n\t   \n\t   Change the meta-data of certain fields.<p>\n\t   This, we can do VERY fast.<p>\n\t   \n\t   @param row The row to manipulate\n\t   @return true if everything went well, false if we need to stop because of an error!\n\t * @throws KettleValueException \n\t   \n\t*/\n\tprivate synchronized Object[] metadataValues(RowMetaInterface rowMeta, Object[] rowData) throws KettleValueException\n\t{\n\t\tif (data.firstmetadata)\n\t\t{\n\t\t\tdata.firstmetadata=false;\n\n\t\t\tdata.metanrs=new int[meta.getMeta().length];\n\t\t\tfor (int i=0;i<data.metanrs.length;i++) \n\t\t\t{\n\t\t\t\tdata.metanrs[i]=rowMeta.indexOfValue(meta.getMeta()[i].getName());\n\t\t\t\tif (data.metanrs[i]<0)\n\t\t\t\t{\n\t\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.CouldNotFindField\",meta.getMeta()[i].getName())); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\tsetErrors(1);\n\t\t\t\t\tstopAll();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Check for doubles in the selected fields...\n\t\t\tint cnt[] = new int[meta.getMeta().length];\n\t\t\tfor (int i=0;i<meta.getMeta().length;i++)\n\t\t\t{\n\t\t\t\tcnt[i]=0;\n\t\t\t\tfor (int j=0;j<meta.getMeta().length;j++)\n\t\t\t\t{\n\t\t\t\t\tif (meta.getMeta()[i].getName().equals(meta.getMeta()[j].getName())) cnt[i]++;\n\t\t\t\t\t\n\t\t\t\t\tif (cnt[i]>1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlogError(Messages.getString(\"SelectValues.Log.FieldCouldNotSpecifiedMoreThanTwice2\",meta.getMeta()[i].getName())); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t\tsetErrors(1);\n\t\t\t\t\t\tstopAll();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Also apply the metadata on the row meta to allow us to convert the data correctly, with the correct mask.\r\n\t\t\t//\r\n\t\t\tfor (int i=0;i<data.metanrs.length;i++) \r\n\t\t\t{\r\n\t\t\t\tSelectMetadataChange change = meta.getMeta()[i];\r\n\t\t\t\tValueMetaInterface valueMeta = rowMeta.getValueMeta(data.metanrs[i]);\r\n\t\t\t\tif (!Const.isEmpty(change.getConversionMask()))\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueMeta.setConversionMask(change.getConversionMask());\r\n\t\t\t\t}\r\n\t\t\t\tif (!Const.isEmpty(change.getDecimalSymbol()))\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueMeta.setDecimalSymbol(change.getDecimalSymbol());\r\n\t\t\t\t}\r\n\t\t\t\tif (!Const.isEmpty(change.getGroupingSymbol()))\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueMeta.setGroupingSymbol(change.getGroupingSymbol());\r\n\t\t\t\t}\r\n\t\t\t\tif (!Const.isEmpty(change.getCurrencySymbol()))\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueMeta.setCurrencySymbol(change.getCurrencySymbol());\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// Change the data too \n\t\t//\n\t\tfor (int i=0;i<data.metanrs.length;i++)\n\t\t{\n\t\t\tint index = data.metanrs[i];\n\t\t\tValueMetaInterface fromMeta = rowMeta.getValueMeta(index);\n            ValueMetaInterface toMeta   = data.metadataRowMeta.getValueMeta(index);\n\t\t\t\n\t\t\t// If we need to change from BINARY_STRING storage type to NORMAL...\n\t\t\t//\n\t\t\tif (fromMeta.isStorageBinaryString() && meta.getMeta()[i].getStorageType()==ValueMetaInterface.STORAGE_TYPE_NORMAL)\n\t\t\t{\n\t\t\t\trowData[index] = fromMeta.convertBinaryStringToNativeType((byte[]) rowData[index]);\n\t\t\t}\n\t\t\tif (meta.getMeta()[i].getType()!=ValueMetaInterface.TYPE_NONE)\n            {\n                switch(toMeta.getType())\n                {\n                case ValueMetaInterface.TYPE_STRING    : rowData[index] = fromMeta.getString(rowData[index]); break;\n                case ValueMetaInterface.TYPE_NUMBER    : rowData[index] = fromMeta.getNumber(rowData[index]); break;\n                case ValueMetaInterface.TYPE_INTEGER   : rowData[index] = fromMeta.getInteger(rowData[index]); break;\n                case ValueMetaInterface.TYPE_DATE      : rowData[index] = fromMeta.getDate(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BIGNUMBER : rowData[index] = fromMeta.getBigNumber(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BOOLEAN   : rowData[index] = fromMeta.getBoolean(rowData[index]); break;\n                case ValueMetaInterface.TYPE_BINARY    : rowData[index] = fromMeta.getBinary(rowData[index]); break;\n                default: throw new KettleValueException(\"Unable to convert data type of value '\"+fromMeta+\"' to data type \"+toMeta.getType());\n                }\n            }\n\t\t}\n\n\t\treturn rowData;\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\n\t{\n\t\tif (Const.isEmpty(wStepname.getText())) return;\n\n\t\tstepname = wStepname.getText(); // return value\n\t\t\n\t\t// copy info to meta class (input)\n\n\t\tint nrfields = wFields.nrNonEmpty();\n\t\tint nrremove = wRemove.nrNonEmpty();\n\t\tint nrmeta   = wMeta.nrNonEmpty();\n\t\t\n\t\tinput.allocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tTableItem item = wFields.getNonEmpty(i);\n\t\t\tinput.getSelectName()        [i] = item.getText(1);\n\t\t\tinput.getSelectRename()      [i] = item.getText(2);\n\t\t\tif (input.getSelectRename()[i]==null || input.getSelectName()[i].length()==0)\n\t\t\t\tinput.getSelectRename()[i] = input.getSelectName()[i];\n\t\t\tinput.getSelectLength()      [i] = Const.toInt(item.getText(3), -2);\n\t\t\tinput.getSelectPrecision()   [i] = Const.toInt(item.getText(4), -2);\n\t\t\t\n\t\t\tif (input.getSelectLength()   [i]<-2) input.getSelectLength()   [i]=-2;\n\t\t\tif (input.getSelectPrecision()[i]<-2) input.getSelectPrecision()[i]=-2;\n\t\t}\n\t\tinput.setSelectingAndSortingUnspecifiedFields( wUnspecified.getSelection() );\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tTableItem item = wRemove.getNonEmpty(i);\n\t\t\tinput.getDeleteName()        [i] = item.getText(1);\n\t\t}\n\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\n\t\t\tTableItem item = wMeta.getNonEmpty(i);\n\t\t\tinput.getMetaName()        [i] = item.getText(1);\n\t\t\tinput.getMetaRename()      [i] = item.getText(2);\n\t\t\tif (input.getMetaRename()[i]==null || input.getMetaName()[i].length()==0)\n\t\t\t\tinput.getMetaRename()[i] = input.getMetaName()[i];\n\t\t\tinput.getMetaType()        [i] = ValueMeta.getType( item.getText(3) );\n\t\t\tinput.getMetaLength()      [i] = Const.toInt(item.getText(4), -2);\n\t\t\tinput.getMetaPrecision()   [i] = Const.toInt(item.getText(5), -2);\n\t\t\t\n\t\t\tif (input.getMetaLength()   [i]<-2) input.getMetaLength()   [i]=-2;\n\t\t\tif (input.getMetaPrecision()[i]<-2) input.getMetaPrecision()[i]=-2;\n\t\t\tif (Messages.getString(\"System.Combo.Yes\").equalsIgnoreCase(item.getText(6))) input.getMetaStorageType()[i]=ValueMetaInterface.STORAGE_TYPE_NORMAL;\n\t\t}\n\t\tdispose();\n\t}","id":103364,"modified_method":"private void ok()\n\t{\n\t\tif (Const.isEmpty(wStepname.getText())) return;\n\n\t\tstepname = wStepname.getText(); // return value\n\t\t\n\t\t// copy info to meta class (input)\n\n\t\tint nrfields = wFields.nrNonEmpty();\n\t\tint nrremove = wRemove.nrNonEmpty();\n\t\tint nrmeta   = wMeta.nrNonEmpty();\n\t\t\n\t\tinput.allocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tTableItem item = wFields.getNonEmpty(i);\n\t\t\tinput.getSelectName()        [i] = item.getText(1);\n\t\t\tinput.getSelectRename()      [i] = item.getText(2);\n\t\t\tif (input.getSelectRename()[i]==null || input.getSelectName()[i].length()==0)\n\t\t\t\tinput.getSelectRename()[i] = input.getSelectName()[i];\n\t\t\tinput.getSelectLength()      [i] = Const.toInt(item.getText(3), -2);\n\t\t\tinput.getSelectPrecision()   [i] = Const.toInt(item.getText(4), -2);\n\t\t\t\n\t\t\tif (input.getSelectLength()   [i]<-2) input.getSelectLength()   [i]=-2;\n\t\t\tif (input.getSelectPrecision()[i]<-2) input.getSelectPrecision()[i]=-2;\n\t\t}\n\t\tinput.setSelectingAndSortingUnspecifiedFields( wUnspecified.getSelection() );\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tTableItem item = wRemove.getNonEmpty(i);\n\t\t\tinput.getDeleteName()        [i] = item.getText(1);\n\t\t}\n\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\r\n\t\t\tSelectMetadataChange change = new SelectMetadataChange();\r\n\t\t\tinput.getMeta()[i] = change;\r\n\t\t\t\r\n\t\t\tTableItem item = wMeta.getNonEmpty(i);\r\n\t\t\t\n\t\t\tchange.setName(item.getText(1));\n\t\t\tchange.setRename(item.getText(2));\n\t\t\tif (Const.isEmpty(change.getRename()))\r\n\t\t\t{\n\t\t\t\tchange.setRename(change.getName());\r\n\t\t\t}\n\t\t\tchange.setType(ValueMeta.getType(item.getText(3)) );\n\t\t\tchange.setLength(Const.toInt(item.getText(4), -2));\n\t\t\tchange.setPrecision(Const.toInt(item.getText(5), -2));\n\t\t\t\n\t\t\tif (change.getLength()<-2) change.setLength(-2);\n\t\t\tif (change.getPrecision()<-2) change.setPrecision(-2);\n\t\t\tif (Messages.getString(\"System.Combo.Yes\").equalsIgnoreCase(item.getText(6))) \r\n\t\t\t{\r\n\t\t\t\tchange.setStorageType(ValueMetaInterface.STORAGE_TYPE_NORMAL);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchange.setConversionMask(item.getText(7));\n\t\t\tchange.setDecimalSymbol(item.getText(8));\r\n\t\t\tchange.setGroupingSymbol(item.getText(9));\r\n\t\t\tchange.setCurrencySymbol(item.getText(10));\r\n\t\t}\n\t\tdispose();\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\t\n\t\twTabFolder.setSelection(0); // Default\n\t\t\n\t\t/*\n\t\t * Select fields\n\t\t */\n\t\tif (input.getSelectName()!=null && input.getSelectName().length>0)\n\t\t{\n\t\t\tfor (int i=0;i<input.getSelectName().length;i++)\n\t\t\t{\n\t\t\t\tTableItem item = wFields.table.getItem(i);\n\t\t\t\tif (input.getSelectName()[i]!=null) \n\t\t\t\t\titem.setText(1, input.getSelectName()     [i]);\n\t\t\t\tif (input.getSelectRename()[i]!=null && !input.getSelectRename()[i].equals(input.getSelectName()[i]))\n\t\t\t\t\titem.setText(2, input.getSelectRename()   [i]);\n\t\t\t\titem.setText(3, input.getSelectLength()   [i]==-2?\"\":\"\"+input.getSelectLength()   [i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText(4, input.getSelectPrecision()[i]==-2?\"\":\"\"+input.getSelectPrecision()[i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t\twTabFolder.setSelection(0);\n\t\t}\n\t\twUnspecified.setSelection( input.isSelectingAndSortingUnspecifiedFields() );\n\t\t\n\t\t/*\n\t\t * Remove certain fields...\n\t\t */\n\t\tif (input.getDeleteName()!=null && input.getDeleteName().length>0) \n\t\t{\n\t\t\tfor (int i=0;i<input.getDeleteName().length;i++)\n\t\t\t{\n\t\t\t\tTableItem item = wRemove.table.getItem(i);\n\t\t\t\tif (input.getDeleteName()[i]!=null)  item.setText(1, input.getDeleteName()     [i]);\n\t\t\t}\n\t\t\twRemove.setRowNums();\n\t\t\twRemove.optWidth(true);\n\t\t\twTabFolder.setSelection(1);\n\t\t}\n\n\t\t/*\n\t\t * Change the meta-data of certain fields\n\t\t */\n\t\tif (input.getMetaName()!=null && input.getMetaName().length>0)\n\t\t{\n\t\t\tfor (int i=0;i<input.getMetaName().length;i++)\n\t\t\t{\n\t\t\t\tTableItem item = wMeta.table.getItem(i);\n\t\t\t\tif (input.getMetaName()[i]!=null) \n\t\t\t\t\titem.setText(1, input.getMetaName()     [i]);\n\t\t\t\tif (input.getMetaRename()[i]!=null && !input.getMetaRename()[i].equals(input.getMetaName()[i]))\n\t\t\t\t\titem.setText(2, input.getMetaRename()   [i]);\n\t\t\t\titem.setText(3, ValueMeta.getTypeDesc( input.getMetaType()[i]) );\n\t\t\t\titem.setText(4, input.getMetaLength()   [i]==-2?\"\":\"\"+input.getMetaLength()   [i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText(5, input.getMetaPrecision()[i]==-2?\"\":\"\"+input.getMetaPrecision()[i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText(6, input.getMetaStorageType()[i]==ValueMetaInterface.STORAGE_TYPE_NORMAL?Messages.getString(\"System.Combo.Yes\"):Messages.getString(\"System.Combo.No\")); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t\twMeta.setRowNums();\n\t\t\twMeta.optWidth(true);\n\t\t\twTabFolder.setSelection(2);\n\t\t}\n\n\t\twStepname.setFocus();\n\t\twStepname.selectAll();\n\t}","id":103365,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\t\n\t\twTabFolder.setSelection(0); // Default\n\t\t\n\t\t/*\n\t\t * Select fields\n\t\t */\n\t\tif (input.getSelectName()!=null && input.getSelectName().length>0)\n\t\t{\n\t\t\tfor (int i=0;i<input.getSelectName().length;i++)\n\t\t\t{\n\t\t\t\tTableItem item = wFields.table.getItem(i);\n\t\t\t\tif (input.getSelectName()[i]!=null) \n\t\t\t\t\titem.setText(1, input.getSelectName()     [i]);\n\t\t\t\tif (input.getSelectRename()[i]!=null && !input.getSelectRename()[i].equals(input.getSelectName()[i]))\n\t\t\t\t\titem.setText(2, input.getSelectRename()   [i]);\n\t\t\t\titem.setText(3, input.getSelectLength()   [i]==-2?\"\":\"\"+input.getSelectLength()   [i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText(4, input.getSelectPrecision()[i]==-2?\"\":\"\"+input.getSelectPrecision()[i]); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t\twTabFolder.setSelection(0);\n\t\t}\n\t\twUnspecified.setSelection( input.isSelectingAndSortingUnspecifiedFields() );\n\t\t\n\t\t/*\n\t\t * Remove certain fields...\n\t\t */\n\t\tif (input.getDeleteName()!=null && input.getDeleteName().length>0) \n\t\t{\n\t\t\tfor (int i=0;i<input.getDeleteName().length;i++)\n\t\t\t{\n\t\t\t\tTableItem item = wRemove.table.getItem(i);\n\t\t\t\tif (input.getDeleteName()[i]!=null)  item.setText(1, input.getDeleteName()     [i]);\n\t\t\t}\n\t\t\twRemove.setRowNums();\n\t\t\twRemove.optWidth(true);\n\t\t\twTabFolder.setSelection(1);\n\t\t}\n\n\t\t/*\n\t\t * Change the meta-data of certain fields\n\t\t */\n\t\tif (!Const.isEmpty(input.getMeta()))\n\t\t{\n\t\t\tfor (int i=0;i<input.getMeta().length;i++)\n\t\t\t{\r\n\t\t\t\tSelectMetadataChange change = input.getMeta()[i];\r\n\t\t\t\t\n\t\t\t\tTableItem item = wMeta.table.getItem(i);\n\t\t\t\titem.setText( 1, Const.NVL(change.getName(), \"\"));\n\t\t\t\tif (change.getRename()!=null && !change.getRename().equals(change.getName()))\r\n\t\t\t\t{\n\t\t\t\t\titem.setText(2, change.getRename());\r\n\t\t\t\t}\n\t\t\t\titem.setText( 3, ValueMeta.getTypeDesc( change.getType()) );\n\t\t\t\titem.setText( 4, change.getLength()   ==-2?\"\":\"\"+change.getLength()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText( 5, change.getPrecision()==-2?\"\":\"\"+change.getPrecision()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText( 6, change.getStorageType()==ValueMetaInterface.STORAGE_TYPE_NORMAL?Messages.getString(\"System.Combo.Yes\"):Messages.getString(\"System.Combo.No\")); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\titem.setText( 7, Const.NVL(change.getConversionMask(), \"\"));\r\n\t\t\t\titem.setText( 8, Const.NVL(change.getDecimalSymbol(), \"\"));\r\n\t\t\t\titem.setText( 9, Const.NVL(change.getGroupingSymbol(), \"\"));\r\n\t\t\t\titem.setText(10, Const.NVL(change.getCurrencySymbol(), \"\"));\r\n\t\t\t}\n\t\t\twMeta.setRowNums();\n\t\t\twMeta.optWidth(true);\n\t\t\twTabFolder.setSelection(2);\n\t\t}\n\n\t\twStepname.setFocus();\n\t\twStepname.selectAll();\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener() \n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e) \n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = input.hasChanged();\n\n\t\tlsGet      = new Listener() { public void handleEvent(Event e) { get();    } };\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"SelectValuesDialog.Shell.Label\")); //$NON-NLS-1$\n\t\t\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Stepname line\n\t\twlStepname=new Label(shell, SWT.RIGHT);\n\t\twlStepname.setText(Messages.getString(\"SelectValuesDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);\n\t\tfdlStepname=new FormData();\n\t\tfdlStepname.left = new FormAttachment(0, 0);\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\n\t\twlStepname.setLayoutData(fdlStepname);\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\t\tfdStepname=new FormData();\n\t\tfdStepname.left = new FormAttachment(middle, 0);\n\t\tfdStepname.top  = new FormAttachment(0, margin);\n\t\tfdStepname.right= new FormAttachment(100, 0);\n\t\twStepname.setLayoutData(fdStepname);\n\n\t\t// The folders!\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n\t\t\n\t\t//////////////////////////\n\t\t// START OF SELECT TAB ///\n\t\t//////////////////////////\n\t\t\n\t\twSelectTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twSelectTab.setText(Messages.getString(\"SelectValuesDialog.SelectTab.TabItem\")); //$NON-NLS-1$\n\t\t\n\t\twSelectComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wSelectComp);\n\n\t\tFormLayout selectLayout = new FormLayout();\n\t\tselectLayout.marginWidth  = margin;\n\t\tselectLayout.marginHeight = margin;\n\t\twSelectComp.setLayout(selectLayout);\n\n\t\twlUnspecified=new Label(wSelectComp, SWT.RIGHT);\n\t\twlUnspecified.setText(Messages.getString(\"SelectValuesDialog.Unspecified.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlUnspecified);\n\t\tfdlUnspecified=new FormData();\n\t\tfdlUnspecified.left = new FormAttachment(0, 0);\n\t\tfdlUnspecified.right = new FormAttachment(middle, 0);\n\t\tfdlUnspecified.bottom = new FormAttachment(100, 0);\n\t\twlUnspecified.setLayoutData(fdlUnspecified);\n\n\t\twUnspecified=new Button(wSelectComp, SWT.CHECK);\n\t\tprops.setLook(wUnspecified);\n\t\tfdUnspecified=new FormData();\n\t\tfdUnspecified.left = new FormAttachment(middle, margin);\n\t\tfdUnspecified.right = new FormAttachment(100, 0);\n\t\tfdUnspecified.bottom = new FormAttachment(100, 0);\n\t\twUnspecified.setLayoutData(fdUnspecified);\n\n\t\t\n\t\twlFields=new Label(wSelectComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"SelectValuesDialog.Fields.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlFields);\n\t\tfdlFields=new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.top  = new FormAttachment(0, 0);\n\t\twlFields.setLayoutData(fdlFields);\n\t\t\n\t\tfinal int FieldsCols=4;\n\t\tfinal int FieldsRows=input.getSelectName().length;\n\t\t\n\t\tColumnInfo[] colinf=new ColumnInfo[FieldsCols];\n\t\tcolinf[0]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")},   false ); //$NON-NLS-1$\n\t\tcolinf[1]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.RenameTo\"), ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\t\tcolinf[2]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Length\"),    ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\t\tcolinf[3]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Precision\"), ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\n\t\tfieldColumns.add(colinf[0]);\n\t\twFields=new TableView(transMeta, wSelectComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colinf, \n\t\t\t\t\t\t      FieldsRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetSelect = new Button(wSelectComp, SWT.PUSH);\n\t\twGetSelect.setText(Messages.getString(\"SelectValuesDialog.GetSelect.Button\")); //$NON-NLS-1$\n\t\twGetSelect.addListener(SWT.Selection, lsGet);\n\t\tfdGetSelect = new FormData();\n\t\tfdGetSelect.right = new FormAttachment(100, 0);\n\t\tfdGetSelect.top   = new FormAttachment(wlFields, margin);\n\t\twGetSelect.setLayoutData(fdGetSelect);\n\n\t\twDoMapping = new Button(wSelectComp, SWT.PUSH);\n\t\twDoMapping.setText(Messages.getString(\"SelectValuesDialog.DoMapping.Button\")); //$NON-NLS-1$\n\n\t\twDoMapping.addListener(SWT.Selection, new Listener() { \tpublic void handleEvent(Event arg0) { generateMappings();}});\n\n\t\tfdGetSelect = new FormData();\n\t\tfdGetSelect.right = new FormAttachment(100, 0);\n\t\tfdGetSelect.top   = new FormAttachment(wGetSelect, 0);\n\t\twDoMapping.setLayoutData(fdGetSelect);\n\n\t\tfdFields=new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top  = new FormAttachment(wlFields, margin);\n\t\tfdFields.right  = new FormAttachment(wGetSelect, -margin);\n\t\tfdFields.bottom = new FormAttachment(wUnspecified, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tfdSelectComp=new FormData();\n\t\tfdSelectComp.left  = new FormAttachment(0, 0);\n\t\tfdSelectComp.top   = new FormAttachment(0, 0);\n\t\tfdSelectComp.right = new FormAttachment(100, 0);\n\t\tfdSelectComp.bottom= new FormAttachment(100, 0);\n\t\twSelectComp.setLayoutData(fdSelectComp);\n\t\n\t\twSelectComp.layout();\n\t\twSelectTab.setControl(wSelectComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF SELECT TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t// START OF REMOVE TAB \n\t\t/////////////////////////////////////////////////////////////\n\t\twRemoveTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twRemoveTab.setText(Messages.getString(\"SelectValuesDialog.RemoveTab.TabItem\")); //$NON-NLS-1$\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = margin;\n\t\tcontentLayout.marginHeight = margin;\n\t\t\n\t\twRemoveComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wRemoveComp);\n\t\twRemoveComp.setLayout(contentLayout);\n\n\t\twlRemove=new Label(wRemoveComp, SWT.NONE);\n\t\twlRemove.setText(Messages.getString(\"SelectValuesDialog.Remove.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlRemove);\n\t\tfdlRemove=new FormData();\n\t\tfdlRemove.left = new FormAttachment(0, 0);\n\t\tfdlRemove.top  = new FormAttachment(0, 0);\n\t\twlRemove.setLayoutData(fdlRemove);\n\n\t\tfinal int RemoveCols=1;\n\t\tfinal int RemoveRows=input.getDeleteName().length;\n\t\t\n\t\tColumnInfo[] colrem=new ColumnInfo[RemoveCols];\n\t\tcolrem[0]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")},  false ); //$NON-NLS-1$\n\t\tfieldColumns.add(colrem[0]);\n\t\twRemove=new TableView(transMeta, wRemoveComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colrem, \n\t\t\t\t\t\t      RemoveRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetRemove = new Button(wRemoveComp, SWT.PUSH);\n\t\twGetRemove.setText(Messages.getString(\"SelectValuesDialog.GetRemove.Button\")); //$NON-NLS-1$\n\t\twGetRemove.addListener(SWT.Selection, lsGet);\n\t\tfdGetRemove = new FormData();\n\t\tfdGetRemove.right = new FormAttachment(100, 0);\n\t\tfdGetRemove.top   = new FormAttachment(50, 0);\n\t\twGetRemove.setLayoutData(fdGetRemove);\n\n\t\tfdRemove=new FormData();\n\t\tfdRemove.left = new FormAttachment(0, 0);\n\t\tfdRemove.top  = new FormAttachment(wlRemove, margin);\n\t\tfdRemove.right  = new FormAttachment(wGetRemove, -margin);\n\t\tfdRemove.bottom = new FormAttachment(100, 0);\n\t\twRemove.setLayoutData(fdRemove);\n\t\t\n\t\tfdRemoveComp = new FormData();\n\t\tfdRemoveComp.left  = new FormAttachment(0, 0);\n\t\tfdRemoveComp.top   = new FormAttachment(0, 0);\n\t\tfdRemoveComp.right = new FormAttachment(100, 0);\n\t\tfdRemoveComp.bottom= new FormAttachment(100, 0);\n\t\twRemoveComp.setLayoutData(fdRemoveComp);\n\n\t\twRemoveComp.layout();\n\t\twRemoveTab.setControl(wRemoveComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF REMOVE TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t\n\t\t//////////////////////////\n\t\t// START OF META TAB  ///\n\t\t//////////////////////////\n\t\t\n\t\twMetaTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twMetaTab.setText(Messages.getString(\"SelectValuesDialog.MetaTab.TabItem\")); //$NON-NLS-1$\n\t\t\n\t\twMetaComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wMetaComp);\n\n\t\tFormLayout metaLayout = new FormLayout();\n\t\tmetaLayout.marginWidth  = margin;\n\t\tmetaLayout.marginHeight = margin;\n\t\twMetaComp.setLayout(metaLayout);\n\t\t\n\t\twlMeta=new Label(wMetaComp, SWT.NONE);\n\t\twlMeta.setText(Messages.getString(\"SelectValuesDialog.Meta.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlMeta);\n\t\tfdlMeta=new FormData();\n\t\tfdlMeta.left = new FormAttachment(0, 0);\n\t\tfdlMeta.top  = new FormAttachment(0, 0);\n\t\twlMeta.setLayoutData(fdlMeta);\n\t\t\n\t\tfinal int MetaRows=input.getMetaName().length;\n\t\t\n\t\tColumnInfo[] colmeta=new ColumnInfo[] {\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"),     ColumnInfo.COLUMN_TYPE_CCOMBO,   new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")}, false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Renameto\"),      ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Type\"),          ColumnInfo.COLUMN_TYPE_CCOMBO,   ValueMeta.getAllTypes(), false), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Length\"),        ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Precision\"),     ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Storage.Label\"), ColumnInfo.COLUMN_TYPE_CCOMBO,   new String[] {Messages.getString(\"System.Combo.Yes\"), Messages.getString(\"System.Combo.No\"), } ), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t};\n\t\tcolmeta[5].setToolTip(Messages.getString(\"SelectValuesDialog.ColumnInfo.Storage.Tooltip\"));\n\t\tfieldColumns.add(colmeta[0]);\n\t\twMeta=new TableView(transMeta, wMetaComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colmeta, \n\t\t\t\t\t\t      MetaRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetMeta = new Button(wMetaComp, SWT.PUSH);\n\t\twGetMeta.setText(Messages.getString(\"SelectValuesDialog.GetMeta.Button\")); //$NON-NLS-1$\n\t\twGetMeta.addListener(SWT.Selection, lsGet);\n\t\tfdGetMeta = new FormData();\n\t\tfdGetMeta.right = new FormAttachment(100, 0);\n\t\tfdGetMeta.top   = new FormAttachment(50, 0);\n\t\twGetMeta.setLayoutData(fdGetMeta);\n\n\t\tfdMeta=new FormData();\n\t\tfdMeta.left = new FormAttachment(0, 0);\n\t\tfdMeta.top  = new FormAttachment(wlMeta, margin);\n\t\tfdMeta.right  = new FormAttachment(wGetMeta, -margin);\n\t\tfdMeta.bottom = new FormAttachment(100, 0);\n\t\twMeta.setLayoutData(fdMeta);\n\n\t\tfdMetaComp=new FormData();\n\t\tfdMetaComp.left  = new FormAttachment(0, 0);\n\t\tfdMetaComp.top   = new FormAttachment(0, 0);\n\t\tfdMetaComp.right = new FormAttachment(100, 0);\n\t\tfdMetaComp.bottom= new FormAttachment(100, 0);\n\t\twMetaComp.setLayoutData(fdMetaComp);\n\t\n\t\twMetaComp.layout();\n\t\twMetaTab.setControl(wMetaComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF META TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF TAB FOLDER\n\t\t/////////////////////////////////////////////////////////////\n\n\n\t\t\n\t\t\n\t\twOK=new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\")); //$NON-NLS-1$\n\t\twCancel=new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wCancel }, margin, wTabFolder);\n\n\t\t// Add listeners\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\t\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\t\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\t\t\n\t\twStepname.addSelectionListener( lsDef );\n\t\t\t\t\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\t\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\n\t\tgetData();\n\t\tinput.setChanged(changed);\n\n\t\tsetComboValues();\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","id":103366,"modified_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener() \n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e) \n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = input.hasChanged();\n\n\t\tlsGet      = new Listener() { public void handleEvent(Event e) { get();    } };\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"SelectValuesDialog.Shell.Label\")); //$NON-NLS-1$\n\t\t\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Stepname line\n\t\twlStepname=new Label(shell, SWT.RIGHT);\n\t\twlStepname.setText(Messages.getString(\"SelectValuesDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);\n\t\tfdlStepname=new FormData();\n\t\tfdlStepname.left = new FormAttachment(0, 0);\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\n\t\twlStepname.setLayoutData(fdlStepname);\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\t\tfdStepname=new FormData();\n\t\tfdStepname.left = new FormAttachment(middle, 0);\n\t\tfdStepname.top  = new FormAttachment(0, margin);\n\t\tfdStepname.right= new FormAttachment(100, 0);\n\t\twStepname.setLayoutData(fdStepname);\n\n\t\t// The folders!\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n\t\t\n\t\t//////////////////////////\n\t\t// START OF SELECT TAB ///\n\t\t//////////////////////////\n\t\t\n\t\twSelectTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twSelectTab.setText(Messages.getString(\"SelectValuesDialog.SelectTab.TabItem\")); //$NON-NLS-1$\n\t\t\n\t\twSelectComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wSelectComp);\n\n\t\tFormLayout selectLayout = new FormLayout();\n\t\tselectLayout.marginWidth  = margin;\n\t\tselectLayout.marginHeight = margin;\n\t\twSelectComp.setLayout(selectLayout);\n\n\t\twlUnspecified=new Label(wSelectComp, SWT.RIGHT);\n\t\twlUnspecified.setText(Messages.getString(\"SelectValuesDialog.Unspecified.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlUnspecified);\n\t\tfdlUnspecified=new FormData();\n\t\tfdlUnspecified.left = new FormAttachment(0, 0);\n\t\tfdlUnspecified.right = new FormAttachment(middle, 0);\n\t\tfdlUnspecified.bottom = new FormAttachment(100, 0);\n\t\twlUnspecified.setLayoutData(fdlUnspecified);\n\n\t\twUnspecified=new Button(wSelectComp, SWT.CHECK);\n\t\tprops.setLook(wUnspecified);\n\t\tfdUnspecified=new FormData();\n\t\tfdUnspecified.left = new FormAttachment(middle, margin);\n\t\tfdUnspecified.right = new FormAttachment(100, 0);\n\t\tfdUnspecified.bottom = new FormAttachment(100, 0);\n\t\twUnspecified.setLayoutData(fdUnspecified);\n\n\t\t\n\t\twlFields=new Label(wSelectComp, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"SelectValuesDialog.Fields.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlFields);\n\t\tfdlFields=new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.top  = new FormAttachment(0, 0);\n\t\twlFields.setLayoutData(fdlFields);\n\t\t\n\t\tfinal int FieldsCols=4;\n\t\tfinal int FieldsRows=input.getSelectName().length;\n\t\t\n\t\tColumnInfo[] colinf=new ColumnInfo[FieldsCols];\n\t\tcolinf[0]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")},   false ); //$NON-NLS-1$\n\t\tcolinf[1]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.RenameTo\"), ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\t\tcolinf[2]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Length\"),    ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\t\tcolinf[3]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Precision\"), ColumnInfo.COLUMN_TYPE_TEXT,   false ); //$NON-NLS-1$\n\n\t\tfieldColumns.add(colinf[0]);\n\t\twFields=new TableView(transMeta, wSelectComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colinf, \n\t\t\t\t\t\t      FieldsRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetSelect = new Button(wSelectComp, SWT.PUSH);\n\t\twGetSelect.setText(Messages.getString(\"SelectValuesDialog.GetSelect.Button\")); //$NON-NLS-1$\n\t\twGetSelect.addListener(SWT.Selection, lsGet);\n\t\tfdGetSelect = new FormData();\n\t\tfdGetSelect.right = new FormAttachment(100, 0);\n\t\tfdGetSelect.top   = new FormAttachment(wlFields, margin);\n\t\twGetSelect.setLayoutData(fdGetSelect);\n\n\t\twDoMapping = new Button(wSelectComp, SWT.PUSH);\n\t\twDoMapping.setText(Messages.getString(\"SelectValuesDialog.DoMapping.Button\")); //$NON-NLS-1$\n\n\t\twDoMapping.addListener(SWT.Selection, new Listener() { \tpublic void handleEvent(Event arg0) { generateMappings();}});\n\n\t\tfdGetSelect = new FormData();\n\t\tfdGetSelect.right = new FormAttachment(100, 0);\n\t\tfdGetSelect.top   = new FormAttachment(wGetSelect, 0);\n\t\twDoMapping.setLayoutData(fdGetSelect);\n\n\t\tfdFields=new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top  = new FormAttachment(wlFields, margin);\n\t\tfdFields.right  = new FormAttachment(wGetSelect, -margin);\n\t\tfdFields.bottom = new FormAttachment(wUnspecified, -margin);\n\t\twFields.setLayoutData(fdFields);\n\n\t\tfdSelectComp=new FormData();\n\t\tfdSelectComp.left  = new FormAttachment(0, 0);\n\t\tfdSelectComp.top   = new FormAttachment(0, 0);\n\t\tfdSelectComp.right = new FormAttachment(100, 0);\n\t\tfdSelectComp.bottom= new FormAttachment(100, 0);\n\t\twSelectComp.setLayoutData(fdSelectComp);\n\t\n\t\twSelectComp.layout();\n\t\twSelectTab.setControl(wSelectComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF SELECT TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t// START OF REMOVE TAB \n\t\t/////////////////////////////////////////////////////////////\n\t\twRemoveTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twRemoveTab.setText(Messages.getString(\"SelectValuesDialog.RemoveTab.TabItem\")); //$NON-NLS-1$\n\n\t\tFormLayout contentLayout = new FormLayout ();\n\t\tcontentLayout.marginWidth  = margin;\n\t\tcontentLayout.marginHeight = margin;\n\t\t\n\t\twRemoveComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wRemoveComp);\n\t\twRemoveComp.setLayout(contentLayout);\n\n\t\twlRemove=new Label(wRemoveComp, SWT.NONE);\n\t\twlRemove.setText(Messages.getString(\"SelectValuesDialog.Remove.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlRemove);\n\t\tfdlRemove=new FormData();\n\t\tfdlRemove.left = new FormAttachment(0, 0);\n\t\tfdlRemove.top  = new FormAttachment(0, 0);\n\t\twlRemove.setLayoutData(fdlRemove);\n\n\t\tfinal int RemoveCols=1;\n\t\tfinal int RemoveRows=input.getDeleteName().length;\n\t\t\n\t\tColumnInfo[] colrem=new ColumnInfo[RemoveCols];\n\t\tcolrem[0]=new ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")},  false ); //$NON-NLS-1$\n\t\tfieldColumns.add(colrem[0]);\n\t\twRemove=new TableView(transMeta, wRemoveComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colrem, \n\t\t\t\t\t\t      RemoveRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetRemove = new Button(wRemoveComp, SWT.PUSH);\n\t\twGetRemove.setText(Messages.getString(\"SelectValuesDialog.GetRemove.Button\")); //$NON-NLS-1$\n\t\twGetRemove.addListener(SWT.Selection, lsGet);\n\t\tfdGetRemove = new FormData();\n\t\tfdGetRemove.right = new FormAttachment(100, 0);\n\t\tfdGetRemove.top   = new FormAttachment(50, 0);\n\t\twGetRemove.setLayoutData(fdGetRemove);\n\n\t\tfdRemove=new FormData();\n\t\tfdRemove.left = new FormAttachment(0, 0);\n\t\tfdRemove.top  = new FormAttachment(wlRemove, margin);\n\t\tfdRemove.right  = new FormAttachment(wGetRemove, -margin);\n\t\tfdRemove.bottom = new FormAttachment(100, 0);\n\t\twRemove.setLayoutData(fdRemove);\n\t\t\n\t\tfdRemoveComp = new FormData();\n\t\tfdRemoveComp.left  = new FormAttachment(0, 0);\n\t\tfdRemoveComp.top   = new FormAttachment(0, 0);\n\t\tfdRemoveComp.right = new FormAttachment(100, 0);\n\t\tfdRemoveComp.bottom= new FormAttachment(100, 0);\n\t\twRemoveComp.setLayoutData(fdRemoveComp);\n\n\t\twRemoveComp.layout();\n\t\twRemoveTab.setControl(wRemoveComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF REMOVE TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t\n\t\t//////////////////////////\n\t\t// START OF META TAB  ///\n\t\t//////////////////////////\n\t\t\n\t\twMetaTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twMetaTab.setText(Messages.getString(\"SelectValuesDialog.MetaTab.TabItem\")); //$NON-NLS-1$\n\t\t\n\t\twMetaComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wMetaComp);\n\n\t\tFormLayout metaLayout = new FormLayout();\n\t\tmetaLayout.marginWidth  = margin;\n\t\tmetaLayout.marginHeight = margin;\n\t\twMetaComp.setLayout(metaLayout);\n\t\t\n\t\twlMeta=new Label(wMetaComp, SWT.NONE);\n\t\twlMeta.setText(Messages.getString(\"SelectValuesDialog.Meta.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlMeta);\n\t\tfdlMeta=new FormData();\n\t\tfdlMeta.left = new FormAttachment(0, 0);\n\t\tfdlMeta.top  = new FormAttachment(0, 0);\n\t\twlMeta.setLayoutData(fdlMeta);\n\t\t\n\t\tfinal int MetaRows=input.getMeta().length;\n\t\t\n\t\tColumnInfo[] colmeta=new ColumnInfo[] {\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Fieldname\"),     ColumnInfo.COLUMN_TYPE_CCOMBO,   new String[]{Messages.getString(\"SelectValuesDialog.ColumnInfo.Loading\")}, false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Renameto\"),      ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Type\"),          ColumnInfo.COLUMN_TYPE_CCOMBO,   ValueMeta.getAllTypes(), false), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Length\"),        ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Precision\"),     ColumnInfo.COLUMN_TYPE_TEXT,     false ), //$NON-NLS-1$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Storage.Label\"), ColumnInfo.COLUMN_TYPE_CCOMBO,   new String[] {Messages.getString(\"System.Combo.Yes\"), Messages.getString(\"System.Combo.No\"), } ), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Format\"),        ColumnInfo.COLUMN_TYPE_CCOMBO,   Const.getConversionFormats() ), //$NON-NLS-1$\r\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Decimal\"),       ColumnInfo.COLUMN_TYPE_TEXT,     false),\r\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Grouping\"),      ColumnInfo.COLUMN_TYPE_TEXT,     false),\r\n\t\t\tnew ColumnInfo(Messages.getString(\"SelectValuesDialog.ColumnInfo.Currency\"),      ColumnInfo.COLUMN_TYPE_TEXT,     false),\r\n\t\t};\n\t\tcolmeta[5].setToolTip(Messages.getString(\"SelectValuesDialog.ColumnInfo.Storage.Tooltip\"));\n\t\tfieldColumns.add(colmeta[0]);\n\t\twMeta=new TableView(transMeta, wMetaComp, \n\t\t\t\t\t\t      SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \n\t\t\t\t\t\t      colmeta, \n\t\t\t\t\t\t      MetaRows,  \n\t\t\t\t\t\t      lsMod,\n\t\t\t\t\t\t      props\n\t\t\t\t\t\t      );\n\n\t\twGetMeta = new Button(wMetaComp, SWT.PUSH);\n\t\twGetMeta.setText(Messages.getString(\"SelectValuesDialog.GetMeta.Button\")); //$NON-NLS-1$\n\t\twGetMeta.addListener(SWT.Selection, lsGet);\n\t\tfdGetMeta = new FormData();\n\t\tfdGetMeta.right = new FormAttachment(100, 0);\n\t\tfdGetMeta.top   = new FormAttachment(50, 0);\n\t\twGetMeta.setLayoutData(fdGetMeta);\n\n\t\tfdMeta=new FormData();\n\t\tfdMeta.left = new FormAttachment(0, 0);\n\t\tfdMeta.top  = new FormAttachment(wlMeta, margin);\n\t\tfdMeta.right  = new FormAttachment(wGetMeta, -margin);\n\t\tfdMeta.bottom = new FormAttachment(100, 0);\n\t\twMeta.setLayoutData(fdMeta);\n\n\t\tfdMetaComp=new FormData();\n\t\tfdMetaComp.left  = new FormAttachment(0, 0);\n\t\tfdMetaComp.top   = new FormAttachment(0, 0);\n\t\tfdMetaComp.right = new FormAttachment(100, 0);\n\t\tfdMetaComp.bottom= new FormAttachment(100, 0);\n\t\twMetaComp.setLayoutData(fdMetaComp);\n\t\n\t\twMetaComp.layout();\n\t\twMetaTab.setControl(wMetaComp);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF META TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF TAB FOLDER\n\t\t/////////////////////////////////////////////////////////////\n\n\n\t\t\n\t\t\n\t\twOK=new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\")); //$NON-NLS-1$\n\t\twCancel=new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wCancel }, margin, wTabFolder);\n\n\t\t// Add listeners\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\t\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\t\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\t\t\n\t\twStepname.addSelectionListener( lsDef );\n\t\t\t\t\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\t\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\n\t\tgetData();\n\t\tinput.setChanged(changed);\n\n\t\tsetComboValues();\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void check(List<CheckResultInterface> remarks, TransMeta transMeta, StepMeta stepMeta, RowMetaInterface prev, String input[], String output[], RowMetaInterface info)\n\t{\n\t\tCheckResult cr;\n\t\t\n\t\tif (prev!=null && prev.size()>0)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.StepReceivingFields\",prev.size()+\"\"), stepMeta); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tremarks.add(cr);\n\n\t\t\t/*\n\t\t\t * Take care of the normal SELECT fields...\n\t\t\t */\n\t\t\tString  error_message=\"\"; //$NON-NLS-1$\n\t\t\tboolean error_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.selectName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(selectName[i]);\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+selectName[i]+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.SelectedFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllSelectedFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.selectName.length>0)\n\t\t\t{\n\t\t\t\t// Starting from prev...\n\t\t\t\tfor (int i=0;i<prev.size();i++)\n\t\t\t\t{\n\t\t\t\t\tValueMetaInterface pv = prev.getValueMeta(i);\n\t\t\t\t\tint idx = Const.indexOfString(pv.getName(), selectName);\n\t\t\t\t\tif (idx<0) \n\t\t\t\t\t{\n\t\t\t\t\t\terror_message+=\"\\t\\t\"+pv.getName()+\" (\"+pv.getTypeDesc()+\")\"+Const.CR; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\t\t\t\terror_found=true;\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tif (error_found) \n\t\t\t\t{\n\t\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.FieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\t\n\t\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_COMMENT, error_message, stepMeta);\n\t\t\t\t\tremarks.add(cr);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllSelectedFieldsFound2\"), stepMeta); //$NON-NLS-1$\n\t\t\t\t\tremarks.add(cr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * How about the DE-SELECT (remove) fields...\n\t\t\t */\n\t\t\n\t\t\terror_message=\"\"; //$NON-NLS-1$\n\t\t\terror_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.deleteName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(deleteName[i]);\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+deleteName[i]+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.DeSelectedFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllDeSelectedFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * How about the Meta-fields...?\n\t\t\t */\n\t\t\terror_message=\"\"; //$NON-NLS-1$\n\t\t\terror_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.metaName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(metaName[i]);\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+metaName[i]+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.MetadataFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllMetadataFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, Messages.getString(\"SelectValuesMeta.CheckResult.FieldsNotFound2\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\n\t\t// See if we have input streams leading to this step!\n\t\tif (input.length>0)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.StepReceivingInfoFromOtherSteps\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, Messages.getString(\"SelectValuesMeta.CheckResult.NoInputReceivedError\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\t\t\n\t\t// Check for doubles in the selected fields...\n\t\tint cnt[] = new int[selectName.length];\n\t\tboolean error_found = false;\n\t\tString error_message=\"\"; //$NON-NLS-1$\n\t\t\n\t\tfor (int i=0;i<selectName.length;i++)\n\t\t{\n\t\t\tcnt[i]=0;\n\t\t\tfor (int j=0;j<selectName.length;j++)\n\t\t\t{\n\t\t\t\tif (selectName[i].equals(selectName[j])) cnt[i]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt[i]>1)\n\t\t\t{\n\t\t\t\tif (!error_found) // first time...\n\t\t\t\t{\n\t\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.DuplicateFieldsSpecified\")+Const.CR; //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\terror_found=true;\n\t\t\t\t}\n\t\t\t\terror_message+=Messages.getString(\"SelectValuesMeta.CheckResult.OccurentRow\",i+\" : \"+selectName[i]+\"  (\"+cnt[i])+Const.CR; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\terror_found=true;\n\t\t\t}\n\t\t}\n\t\tif (error_found)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\tremarks.add(cr);\n\t\t}\n\t}","id":103367,"modified_method":"public void check(List<CheckResultInterface> remarks, TransMeta transMeta, StepMeta stepMeta, RowMetaInterface prev, String input[], String output[], RowMetaInterface info)\n\t{\n\t\tCheckResult cr;\n\t\t\n\t\tif (prev!=null && prev.size()>0)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.StepReceivingFields\",prev.size()+\"\"), stepMeta); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tremarks.add(cr);\n\n\t\t\t/*\n\t\t\t * Take care of the normal SELECT fields...\n\t\t\t */\n\t\t\tString  error_message=\"\"; //$NON-NLS-1$\n\t\t\tboolean error_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.selectName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(selectName[i]);\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+selectName[i]+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.SelectedFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllSelectedFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.selectName.length>0)\n\t\t\t{\n\t\t\t\t// Starting from prev...\n\t\t\t\tfor (int i=0;i<prev.size();i++)\n\t\t\t\t{\n\t\t\t\t\tValueMetaInterface pv = prev.getValueMeta(i);\n\t\t\t\t\tint idx = Const.indexOfString(pv.getName(), selectName);\n\t\t\t\t\tif (idx<0) \n\t\t\t\t\t{\n\t\t\t\t\t\terror_message+=\"\\t\\t\"+pv.getName()+\" (\"+pv.getTypeDesc()+\")\"+Const.CR; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\t\t\t\terror_found=true;\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tif (error_found) \n\t\t\t\t{\n\t\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.FieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\t\n\t\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_COMMENT, error_message, stepMeta);\n\t\t\t\t\tremarks.add(cr);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllSelectedFieldsFound2\"), stepMeta); //$NON-NLS-1$\n\t\t\t\t\tremarks.add(cr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * How about the DE-SELECT (remove) fields...\n\t\t\t */\n\t\t\n\t\t\terror_message=\"\"; //$NON-NLS-1$\n\t\t\terror_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.deleteName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(deleteName[i]);\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+deleteName[i]+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.DeSelectedFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllDeSelectedFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * How about the Meta-fields...?\n\t\t\t */\n\t\t\terror_message=\"\"; //$NON-NLS-1$\n\t\t\terror_found=false;\n\t\t\t\n\t\t\t// Starting from selected fields in ...\n\t\t\tfor (int i=0;i< this.meta.length;i++)\n\t\t\t{\n\t\t\t\tint idx = prev.indexOfValue(this.meta[i].getName());\n\t\t\t\tif (idx<0)\n\t\t\t\t{\n\t\t\t\t\terror_message+=\"\\t\\t\"+this.meta[i].getName()+Const.CR; //$NON-NLS-1$\n\t\t\t\t\terror_found=true;\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (error_found) \n\t\t\t{\n\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.MetadataFieldsNotFound\")+Const.CR+Const.CR+error_message; //$NON-NLS-1$\n\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.AllMetadataFieldsFound\"), stepMeta); //$NON-NLS-1$\n\t\t\t\tremarks.add(cr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, Messages.getString(\"SelectValuesMeta.CheckResult.FieldsNotFound2\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\n\t\t// See if we have input streams leading to this step!\n\t\tif (input.length>0)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_OK, Messages.getString(\"SelectValuesMeta.CheckResult.StepReceivingInfoFromOtherSteps\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, Messages.getString(\"SelectValuesMeta.CheckResult.NoInputReceivedError\"), stepMeta); //$NON-NLS-1$\n\t\t\tremarks.add(cr);\n\t\t}\n\t\t\n\t\t// Check for doubles in the selected fields...\n\t\tint cnt[] = new int[selectName.length];\n\t\tboolean error_found = false;\n\t\tString error_message=\"\"; //$NON-NLS-1$\n\t\t\n\t\tfor (int i=0;i<selectName.length;i++)\n\t\t{\n\t\t\tcnt[i]=0;\n\t\t\tfor (int j=0;j<selectName.length;j++)\n\t\t\t{\n\t\t\t\tif (selectName[i].equals(selectName[j])) cnt[i]++;\n\t\t\t}\n\t\t\t\n\t\t\tif (cnt[i]>1)\n\t\t\t{\n\t\t\t\tif (!error_found) // first time...\n\t\t\t\t{\n\t\t\t\t\terror_message=Messages.getString(\"SelectValuesMeta.CheckResult.DuplicateFieldsSpecified\")+Const.CR; //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\terror_found=true;\n\t\t\t\t}\n\t\t\t\terror_message+=Messages.getString(\"SelectValuesMeta.CheckResult.OccurentRow\",i+\" : \"+selectName[i]+\"  (\"+cnt[i])+Const.CR; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\terror_found=true;\n\t\t\t}\n\t\t}\n\t\tif (error_found)\n\t\t{\n\t\t\tcr = new CheckResult(CheckResultInterface.TYPE_RESULT_ERROR, error_message, stepMeta);\n\t\t\tremarks.add(cr);\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_transformation, long id_step)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tfor (int i=0;i<selectName.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_name\",      selectName[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_rename\",    selectRename[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_length\",    selectLength[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_precision\", selectPrecision[i]); //$NON-NLS-1$\n\t\t\t}\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"select_unspecified\", selectingAndSortingUnspecifiedFields); //$NON-NLS-1$\n\t\n\t\t\tfor (int i=0;i<deleteName.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"remove_name\",      deleteName[i]); //$NON-NLS-1$\n\t\t\t}\n\t\n\t\t\tfor (int i=0;i<metaName.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_name\",         metaName[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_rename\",       metaRename[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_type\",         metaType[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_length\",       metaLength[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_precision\",    metaPrecision[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_storage_type\", ValueMeta.getStorageTypeCode(metaStorageType[i])); //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(Messages.getString(\"SelectValuesMeta.Exception.UnableToSaveStepInfoToRepository\")+id_step, e); //$NON-NLS-1$\n\t\t}\n\n\t}","id":103368,"modified_method":"public void saveRep(Repository rep, long id_transformation, long id_step)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tfor (int i=0;i<selectName.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_name\",      selectName[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_rename\",    selectRename[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_length\",    selectLength[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_precision\", selectPrecision[i]); //$NON-NLS-1$\n\t\t\t}\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"select_unspecified\", selectingAndSortingUnspecifiedFields); //$NON-NLS-1$\n\t\n\t\t\tfor (int i=0;i<deleteName.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"remove_name\",      deleteName[i]); //$NON-NLS-1$\n\t\t\t}\n\t\n\t\t\tfor (int i=0;i<meta.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_name\",            meta[i].getName()); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_rename\",          meta[i].getRename()); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_type\",            meta[i].getType()); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_length\",          meta[i].getLength()); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_precision\",       meta[i].getPrecision()); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_storage_type\",    ValueMeta.getStorageTypeCode(meta[i].getStorageType())); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_conversion_mask\", meta[i].getConversionMask()); //$NON-NLS-1$\r\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_decimal_symbol\",  meta[i].getDecimalSymbol()); //$NON-NLS-1$\r\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_grouping_symbol\", meta[i].getGroupingSymbol()); //$NON-NLS-1$\r\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"meta_currency_symbol\", meta[i].getCurrencySymbol()); //$NON-NLS-1$\r\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(Messages.getString(\"SelectValuesMeta.Exception.UnableToSaveStepInfoToRepository\")+id_step, e); //$NON-NLS-1$\n\t\t}\n\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void allocate(int nrfields, int nrremove, int nrmeta)\n\t{\n\t\tselectName      = new String[nrfields];\n\t\tselectRename    = new String[nrfields];\n\t\tselectLength    = new int   [nrfields];\n\t\tselectPrecision = new int   [nrfields];\n\t\t\n\t\tdeleteName      = new String[nrremove];\n\t\t\n\t\tmetaName        = new String[nrmeta];\n\t\tmetaRename      = new String[nrmeta];\n\t\tmetaType        = new int   [nrmeta];\n\t\tmetaLength      = new int   [nrmeta];\n\t\tmetaPrecision   = new int   [nrmeta];\n\t\tmetaStorageType = new int   [nrmeta];\n\t\t\n\t\tfor (int i=0;i<metaStorageType.length;i++) metaStorageType[i]=-1; // not used by default!\n\t}","id":103369,"modified_method":"public void allocate(int nrfields, int nrremove, int nrmeta)\n\t{\n\t\tselectName      = new String[nrfields];\n\t\tselectRename    = new String[nrfields];\n\t\tselectLength    = new int   [nrfields];\n\t\tselectPrecision = new int   [nrfields];\n\t\t\n\t\tdeleteName      = new String[nrremove];\n\t\t\r\n\t\tmeta            = new SelectMetadataChange[nrmeta];\n\t\t\n\t\t// for (int i=0;i<meta.length;i++) meta[i].setStorageType(-1); // not used by default!\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n     * @return Returns the metaType.\n     */\n    public int[] getMetaType()\n    {\n        return metaType;\n    }","id":103370,"modified_method":"/**\r\n\t * @return the meta\r\n\t */\r\n\tpublic SelectMetadataChange[] getMeta() {\r\n\t\treturn meta;\r\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Object clone()\n\t{\n\t\tSelectValuesMeta retval = (SelectValuesMeta)super.clone();\n\n\t\tint nrfields = selectName.length;\n\t\tint nrremove = deleteName.length;\n\t\tint nrmeta   = metaName.length;\n\t\t\n\t\tretval.allocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tretval.selectName     [i] = selectName[i];\n\t\t\tretval.selectRename   [i] = selectRename[i];\n\t\t\tretval.selectLength   [i] = selectLength[i];\n\t\t\tretval.selectPrecision[i] = selectPrecision[i];\n\t\t}\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tretval.deleteName     [i] = deleteName[i];\n\t\t}\n\t\t\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\n\t\t\tretval.metaName       [i] = metaName[i];\n\t\t\tretval.metaRename     [i] = metaRename[i];\n\t\t\tretval.metaType       [i] = metaType[i];\n\t\t\tretval.metaLength     [i] = metaLength[i];\n\t\t\tretval.metaPrecision  [i] = metaPrecision[i];\n\t\t\tretval.metaStorageType[i] = metaStorageType[i];\n\t\t}\n\n\t\treturn retval;\n\t}","id":103371,"modified_method":"public Object clone()\n\t{\n\t\tSelectValuesMeta retval = (SelectValuesMeta)super.clone();\n\n\t\tint nrfields = selectName.length;\n\t\tint nrremove = deleteName.length;\n\t\tint nrmeta   = meta.length;\n\t\t\n\t\tretval.allocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tretval.selectName     [i] = selectName[i];\n\t\t\tretval.selectRename   [i] = selectRename[i];\n\t\t\tretval.selectLength   [i] = selectLength[i];\n\t\t\tretval.selectPrecision[i] = selectPrecision[i];\n\t\t}\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tretval.deleteName     [i] = deleteName[i];\n\t\t}\n\t\t\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\r\n\t\t\tretval.getMeta()[i] = meta[i].clone();\r\n\t\t}\n\n\t\treturn retval;\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void readData(Node step) throws KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tNode fields = XMLHandler.getSubNode(step, \"fields\"); //$NON-NLS-1$\n\t\n\t\t\tint nrfields   = XMLHandler.countNodes(fields, \"field\"); //$NON-NLS-1$\n\t\t\tint nrremove   = XMLHandler.countNodes(fields, \"remove\"); //$NON-NLS-1$\n\t\t\tint nrmeta     = XMLHandler.countNodes(fields, \"meta\"); //$NON-NLS-1$\n\t\t\tallocate(nrfields, nrremove, nrmeta);\n\t\t\t\n\t\t\tfor (int i=0;i<nrfields;i++)\n\t\t\t{\n\t\t\t\tNode line = XMLHandler.getSubNodeByNr(fields, \"field\", i); //$NON-NLS-1$\n\t\t\t\tselectName     [i] = XMLHandler.getTagValue(line, \"name\"); //$NON-NLS-1$\n\t\t\t\tselectRename   [i] = XMLHandler.getTagValue(line, \"rename\"); //$NON-NLS-1$\n\t\t\t\tselectLength   [i] = Const.toInt(XMLHandler.getTagValue(line, \"length\"), -2); //$NON-NtagLS-1$\n\t\t\t\tselectPrecision[i] = Const.toInt(XMLHandler.getTagValue(line, \"precision\"), -2); //$NON-NLS-1$\n\t\t\t}\n\t\t\tselectingAndSortingUnspecifiedFields = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(fields, \"select_unspecified\"));\n\t\n\t\t\tfor (int i=0;i<nrremove;i++)\n\t\t\t{\n\t\t\t\tNode line = XMLHandler.getSubNodeByNr(fields, \"remove\", i); //$NON-NLS-1$\n\t\t\t\tdeleteName     [i] = XMLHandler.getTagValue(line, \"name\"); //$NON-NLS-1$\n\t\t\t}\n\t\n\t\t\tfor (int i=0;i<nrmeta;i++)\n\t\t\t{\n\t\t\t\tNode line = XMLHandler.getSubNodeByNr(fields, \"meta\", i); //$NON-NLS-1$\n\t\t\t\tmetaName       [i] = XMLHandler.getTagValue(line, \"name\"); //$NON-NLS-1$\n\t\t\t\tmetaRename     [i] = XMLHandler.getTagValue(line, \"rename\"); //$NON-NLS-1$\n\t\t\t\tmetaType       [i] = ValueMeta.getType(XMLHandler.getTagValue(line, \"type\")); //$NON-NLS-1$\n\t\t\t\tmetaLength     [i] = Const.toInt(XMLHandler.getTagValue(line, \"length\"), -2); //$NON-NLS-1$\n\t\t\t\tmetaPrecision  [i] = Const.toInt(XMLHandler.getTagValue(line, \"precision\"), -2); //$NON-NLS-1$\n\t\t\t\tmetaStorageType[i] = ValueMeta.getStorageType( XMLHandler.getTagValue(line, \"storage_type\") ); //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(Messages.getString(\"SelectValuesMeta.Exception.UnableToReadStepInfoFromXML\"), e); //$NON-NLS-1$\n\t\t}\n\t}","id":103372,"modified_method":"private void readData(Node step) throws KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tNode fields = XMLHandler.getSubNode(step, \"fields\"); //$NON-NLS-1$\n\t\n\t\t\tint nrfields   = XMLHandler.countNodes(fields, \"field\"); //$NON-NLS-1$\n\t\t\tint nrremove   = XMLHandler.countNodes(fields, \"remove\"); //$NON-NLS-1$\n\t\t\tint nrmeta     = XMLHandler.countNodes(fields, SelectMetadataChange.XML_TAG); //$NON-NLS-1$\n\t\t\tallocate(nrfields, nrremove, nrmeta);\n\t\t\t\n\t\t\tfor (int i=0;i<nrfields;i++)\n\t\t\t{\n\t\t\t\tNode line = XMLHandler.getSubNodeByNr(fields, \"field\", i); //$NON-NLS-1$\n\t\t\t\tselectName     [i] = XMLHandler.getTagValue(line, \"name\"); //$NON-NLS-1$\n\t\t\t\tselectRename   [i] = XMLHandler.getTagValue(line, \"rename\"); //$NON-NLS-1$\n\t\t\t\tselectLength   [i] = Const.toInt(XMLHandler.getTagValue(line, \"length\"), -2); //$NON-NtagLS-1$\n\t\t\t\tselectPrecision[i] = Const.toInt(XMLHandler.getTagValue(line, \"precision\"), -2); //$NON-NLS-1$\n\t\t\t}\n\t\t\tselectingAndSortingUnspecifiedFields = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(fields, \"select_unspecified\"));\n\t\n\t\t\tfor (int i=0;i<nrremove;i++)\n\t\t\t{\n\t\t\t\tNode line = XMLHandler.getSubNodeByNr(fields, \"remove\", i); //$NON-NLS-1$\n\t\t\t\tdeleteName     [i] = XMLHandler.getTagValue(line, \"name\"); //$NON-NLS-1$\n\t\t\t}\n\t\n\t\t\tfor (int i=0;i<nrmeta;i++)\n\t\t\t{\n\t\t\t\tNode metaNode = XMLHandler.getSubNodeByNr(fields, SelectMetadataChange.XML_TAG, i); //$NON-NLS-1$\n\t\t\t\tmeta[i] = new SelectMetadataChange(metaNode);\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(Messages.getString(\"SelectValuesMeta.Exception.UnableToReadStepInfoFromXML\"), e); //$NON-NLS-1$\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void getMetadataFields(RowMetaInterface inputRowMeta, String name)\n\t{\n\t\tif (metaName!=null && metaName.length>0) // METADATA mode: change the meta-data of the values mentioned...\n\t\t{\n\t\t\tfor (int i=0;i<metaName.length;i++)\n\t\t\t{\n\t\t\t\tint idx = inputRowMeta.indexOfValue(metaName[i]);\n\t\t\t\tif (idx>=0)  // We found the value\n\t\t\t\t{\n\t\t\t\t\t// This is the value we need to change:\n\t\t\t\t\tValueMetaInterface v = inputRowMeta.getValueMeta(idx);\n\t\t\t\t\t\n\t\t\t\t\t// Do we need to rename ?\n\t\t\t\t\tif (!v.getName().equals(metaRename[i]) && metaRename[i]!=null && metaRename[i].length()>0)\n\t\t\t\t\t{\n\t\t\t\t\t\tv.setName(metaRename[i]);\n\t\t\t\t\t\tv.setOrigin(name);\n\t\t\t\t\t}\n\t\t\t\t\t// Change the type?\n\t\t\t\t\tif (metaType[i]!=ValueMetaInterface.TYPE_NONE)\n\t\t\t\t\t{\n\t\t\t\t\t\tv.setType(metaType[i]);\n\t\t\t\t\t}\n\t\t\t\t\tif (metaLength[i]!=-2   ) { v.setLength(metaLength[i]);       v.setOrigin(name); } \n\t\t\t\t\tif (metaPrecision[i]!=-2) { v.setPrecision(metaPrecision[i]); v.setOrigin(name); }\n\t\t\t\t\tif (metaStorageType[i]>=0) { v.setStorageType(metaStorageType[i]); }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":103373,"modified_method":"public void getMetadataFields(RowMetaInterface inputRowMeta, String name)\n\t{\n\t\tif (meta!=null && meta.length>0) // METADATA mode: change the meta-data of the values mentioned...\n\t\t{\n\t\t\tfor (int i=0;i<meta.length;i++)\n\t\t\t{\r\n\t\t\t\tSelectMetadataChange metaChange = meta[i];\r\n\t\t\t\t\n\t\t\t\tint idx = inputRowMeta.indexOfValue(metaChange.getName());\n\t\t\t\tif (idx>=0)  // We found the value\n\t\t\t\t{\n\t\t\t\t\t// This is the value we need to change:\n\t\t\t\t\tValueMetaInterface v = inputRowMeta.getValueMeta(idx);\n\t\t\t\t\t\n\t\t\t\t\t// Do we need to rename ?\n\t\t\t\t\tif (!v.getName().equals(metaChange.getRename()) && !Const.isEmpty(metaChange.getRename()))\n\t\t\t\t\t{\n\t\t\t\t\t\tv.setName(metaChange.getRename());\n\t\t\t\t\t\tv.setOrigin(name);\n\t\t\t\t\t}\n\t\t\t\t\t// Change the type?\n\t\t\t\t\tif (metaChange.getType()!=ValueMetaInterface.TYPE_NONE)\n\t\t\t\t\t{\n\t\t\t\t\t\tv.setType(metaChange.getType());\n\t\t\t\t\t}\n\t\t\t\t\tif (metaChange.getLength()     != -2) { v.setLength(metaChange.getLength());       v.setOrigin(name); } \n\t\t\t\t\tif (metaChange.getPrecision()  != -2) { v.setPrecision(metaChange.getPrecision()); v.setOrigin(name); }\n\t\t\t\t\tif (metaChange.getStorageType() >= 0) { v.setStorageType(metaChange.getStorageType()); v.setOrigin(name); }\r\n\t\t\t\t\tif (!Const.isEmpty(metaChange.getConversionMask())) \r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\tv.setConversionMask(metaChange.getConversionMask());\r\n\t\t\t\t\t\tv.setOrigin(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!Const.isEmpty(metaChange.getDecimalSymbol())) \r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\tv.setDecimalSymbol(metaChange.getDecimalSymbol());\r\n\t\t\t\t\t\tv.setOrigin(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!Const.isEmpty(metaChange.getGroupingSymbol())) \r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\tv.setGroupingSymbol(metaChange.getGroupingSymbol());\r\n\t\t\t\t\t\tv.setOrigin(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!Const.isEmpty(metaChange.getCurrencySymbol())) \r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\tv.setCurrencySymbol(metaChange.getCurrencySymbol());\r\n\t\t\t\t\t\tv.setOrigin(name);\r\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void readRep(Repository rep, long id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tint nrfields = rep.countNrStepAttributes(id_step, \"field_name\"); //$NON-NLS-1$\n\t\t\tint nrremove = rep.countNrStepAttributes(id_step, \"remove_name\"); //$NON-NLS-1$\n\t\t\tint nrmeta   = rep.countNrStepAttributes(id_step, \"meta_name\"); //$NON-NLS-1$\n\t\t\t\n\t\t\tallocate(nrfields, nrremove, nrmeta);\n\t\n\t\t\tfor (int i=0;i<nrfields;i++)\n\t\t\t{\n\t\t\t\tselectName[i]      =      rep.getStepAttributeString (id_step, i, \"field_name\"); //$NON-NLS-1$\n\t\t\t\tselectRename[i]    =      rep.getStepAttributeString (id_step, i, \"field_rename\"); //$NON-NLS-1$\n\t\t\t\tselectLength[i]    = (int)rep.getStepAttributeInteger(id_step, i, \"field_length\"); //$NON-NLS-1$\n\t\t\t\tselectPrecision[i] = (int)rep.getStepAttributeInteger(id_step, i, \"field_precision\"); //$NON-NLS-1$\n\t\t\t}\n\t\t\tselectingAndSortingUnspecifiedFields = rep.getStepAttributeBoolean(id_step, \"select_unspecified\");\n\t\t\t\n\t\t\tfor (int i=0;i<nrremove;i++)\n\t\t\t{\n\t\t\t\tdeleteName[i]      =      rep.getStepAttributeString(id_step, i, \"remove_name\"); //$NON-NLS-1$\n\t\t\t}\n\n\t\t\tfor (int i=0;i<nrmeta;i++)\n\t\t\t{\n\t\t\t\tmetaName[i]      =      rep.getStepAttributeString (id_step, i, \"meta_name\"); //$NON-NLS-1$\n\t\t\t\tmetaRename[i]    =      rep.getStepAttributeString (id_step, i, \"meta_rename\"); //$NON-NLS-1$\n\t\t\t\tmetaType[i]      = (int)rep.getStepAttributeInteger(id_step, i, \"meta_type\"); //$NON-NLS-1$\n\t\t\t\tmetaLength[i]    = (int)rep.getStepAttributeInteger(id_step, i, \"meta_length\"); //$NON-NLS-1$\n\t\t\t\tmetaPrecision[i] = (int)rep.getStepAttributeInteger(id_step, i, \"meta_precision\"); //$NON-NLS-1$\n\t\t\t\tmetaStorageType[i] = ValueMeta.getStorageType(rep.getStepAttributeString (id_step, i, \"meta_storage_type\")); //$NON-NLS-1$ \n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(Messages.getString(\"SelectValuesMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository\"), e); //$NON-NLS-1$\n\t\t}\n\t}","id":103374,"modified_method":"public void readRep(Repository rep, long id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tint nrfields = rep.countNrStepAttributes(id_step, \"field_name\"); //$NON-NLS-1$\n\t\t\tint nrremove = rep.countNrStepAttributes(id_step, \"remove_name\"); //$NON-NLS-1$\n\t\t\tint nrmeta   = rep.countNrStepAttributes(id_step, \"meta_name\"); //$NON-NLS-1$\n\t\t\t\n\t\t\tallocate(nrfields, nrremove, nrmeta);\n\t\n\t\t\tfor (int i=0;i<nrfields;i++)\n\t\t\t{\n\t\t\t\tselectName[i]      =      rep.getStepAttributeString (id_step, i, \"field_name\"); //$NON-NLS-1$\n\t\t\t\tselectRename[i]    =      rep.getStepAttributeString (id_step, i, \"field_rename\"); //$NON-NLS-1$\n\t\t\t\tselectLength[i]    = (int)rep.getStepAttributeInteger(id_step, i, \"field_length\"); //$NON-NLS-1$\n\t\t\t\tselectPrecision[i] = (int)rep.getStepAttributeInteger(id_step, i, \"field_precision\"); //$NON-NLS-1$\n\t\t\t}\n\t\t\tselectingAndSortingUnspecifiedFields = rep.getStepAttributeBoolean(id_step, \"select_unspecified\");\n\t\t\t\n\t\t\tfor (int i=0;i<nrremove;i++)\n\t\t\t{\n\t\t\t\tdeleteName[i]      =      rep.getStepAttributeString(id_step, i, \"remove_name\"); //$NON-NLS-1$\n\t\t\t}\n\n\t\t\tfor (int i=0;i<nrmeta;i++)\n\t\t\t{\r\n\t\t\t\tmeta[i] = new SelectMetadataChange();\n\t\t\t\tmeta[i].setName(rep.getStepAttributeString (id_step, i, \"meta_name\")); //$NON-NLS-1$\n\t\t\t\tmeta[i].setRename(rep.getStepAttributeString (id_step, i, \"meta_rename\")); //$NON-NLS-1$\n\t\t\t\tmeta[i].setType((int)rep.getStepAttributeInteger(id_step, i, \"meta_type\")); //$NON-NLS-1$\n\t\t\t\tmeta[i].setLength((int)rep.getStepAttributeInteger(id_step, i, \"meta_length\")); //$NON-NLS-1$\n\t\t\t\tmeta[i].setPrecision((int)rep.getStepAttributeInteger(id_step, i, \"meta_precision\")); //$NON-NLS-1$\n\t\t\t\tmeta[i].setStorageType(ValueMeta.getStorageType(rep.getStepAttributeString (id_step, i, \"meta_storage_type\"))); //$NON-NLS-1$ \n\t\t\t\tmeta[i].setConversionMask(rep.getStepAttributeString (id_step, i, \"meta_conversion_mask\")); //$NON-NLS-1$\r\n\t\t\t\tmeta[i].setDecimalSymbol(rep.getStepAttributeString (id_step, i, \"meta_decimal_symbol\")); //$NON-NLS-1$\r\n\t\t\t\tmeta[i].setGroupingSymbol(rep.getStepAttributeString (id_step, i, \"meta_grouping_symbol\")); //$NON-NLS-1$\r\n\t\t\t\tmeta[i].setCurrencySymbol(rep.getStepAttributeString (id_step, i, \"meta_currency_symbol\")); //$NON-NLS-1$\r\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(Messages.getString(\"SelectValuesMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository\"), e); //$NON-NLS-1$\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDefault()\n\t{\n\t\tint nrfields = 0;\n\t\tint nrremove = 0;\n\t\tint nrmeta   = 0;\n\n\t\tallocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tselectName     [i] = \"fieldname\"+(i+1); //$NON-NLS-1$\n\t\t\tselectRename   [i] = \"\"; //$NON-NLS-1$\n\t\t\tselectLength   [i] = -2;\n\t\t\tselectPrecision[i] = -2;\n\t\t}\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tdeleteName     [i] = \"fieldname\"+(i+1); //$NON-NLS-1$\n\t\t}\n\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\n\t\t\tmetaName       [i] = \"fieldname\"+(i+1); //$NON-NLS-1$\n\t\t\tmetaRename     [i] = \"\"; //$NON-NLS-1$\n\t\t\tmetaType       [i] = ValueMetaInterface.TYPE_NONE;\n\t\t\tmetaLength     [i] = -2;\n\t\t\tmetaPrecision  [i] = -2;\n\t\t\tmetaStorageType[i] = -1;\n\t\t}\n\t}","id":103375,"modified_method":"public void setDefault()\n\t{\n\t\tint nrfields = 0;\n\t\tint nrremove = 0;\n\t\tint nrmeta   = 0;\n\n\t\tallocate(nrfields, nrremove, nrmeta);\n\t\t\n\t\tfor (int i=0;i<nrfields;i++)\n\t\t{\n\t\t\tselectName     [i] = \"fieldname\"+(i+1); //$NON-NLS-1$\n\t\t\tselectRename   [i] = \"\"; //$NON-NLS-1$\n\t\t\tselectLength   [i] = -2;\n\t\t\tselectPrecision[i] = -2;\n\t\t}\n\n\t\tfor (int i=0;i<nrremove;i++)\n\t\t{\n\t\t\tdeleteName     [i] = \"fieldname\"+(i+1); //$NON-NLS-1$\n\t\t}\n\n\t\tfor (int i=0;i<nrmeta;i++)\n\t\t{\r\n\t\t\tmeta[i] = new SelectMetadataChange(\"fieldname\"+(i+1), \"\", ValueMetaInterface.TYPE_NONE, -2, -2, -1, null, null, null, null);\n\t\t}\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(\"    <fields>\"); //$NON-NLS-1$\n\t\tfor (int i=0;i<selectName.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <field>\"); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"name\",      selectName[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"rename\",    selectRename[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"length\",    selectLength[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"precision\", selectPrecision[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/field>\"); //$NON-NLS-1$\n\t\t}\n\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"select_unspecified\", selectingAndSortingUnspecifiedFields)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tfor (int i=0;i<deleteName.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <remove>\"); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"name\",      deleteName[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/remove>\"); //$NON-NLS-1$\n\t\t}\n\t\tfor (int i=0;i<metaName.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <meta>\"); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"name\",         metaName[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"rename\",       metaRename[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"type\",         ValueMeta.getTypeDesc(metaType[i])) ); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"length\",       metaLength[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"precision\",    metaPrecision[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"storage_type\", ValueMeta.getStorageTypeCode(metaStorageType[i]))); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/meta>\"); //$NON-NLS-1$\n\t\t}\n\t\tretval.append(\"    <\/fields>\"); //$NON-NLS-1$\n\n\t\treturn retval.toString();\n\t}","id":103376,"modified_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(\"    <fields>\"); //$NON-NLS-1$\n\t\tfor (int i=0;i<selectName.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <field>\"); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"name\",      selectName[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"rename\",    selectRename[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"length\",    selectLength[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"precision\", selectPrecision[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/field>\"); //$NON-NLS-1$\n\t\t}\n\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"select_unspecified\", selectingAndSortingUnspecifiedFields)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tfor (int i=0;i<deleteName.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <remove>\"); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"name\",      deleteName[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/remove>\"); //$NON-NLS-1$\n\t\t}\n\t\tfor (int i=0;i<meta.length;i++)\n\t\t{\r\n\t\t\tretval.append(meta[i].getXML());\n\t\t}\n\t\tretval.append(\"    <\/fields>\"); //$NON-NLS-1$\n\n\t\treturn retval.toString();\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean copyTable(DatabaseMeta sourceDBInfo, DatabaseMeta targetDBInfo, String tablename)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//\r\n\t\t\t// Create a new transformation...\r\n\t\t\t//\r\n\t\t\tTransMeta meta = new TransMeta();\r\n\t\t\tmeta.addDatabase(sourceDBInfo);\r\n\t\t\tmeta.addDatabase(targetDBInfo);\r\n\r\n\t\t\t//\r\n\t\t\t// Add a note\r\n\t\t\t//\r\n\t\t\tString note = Messages.getString(\"Spoon.Message.Note.ReadInformationFromTableOnDB\", tablename,\r\n\t\t\t\t\tsourceDBInfo.getDatabaseName())\r\n\t\t\t\t\t+ Const.CR;// \"Reads information from table [\"+tablename+\"]\r\n\t\t\t// on database [\"+sourceDBInfo+\"]\"\r\n\t\t\tnote += Messages.getString(\"Spoon.Message.Note.WriteInformationToTableOnDB\", tablename,\r\n\t\t\t\t\ttargetDBInfo.getDatabaseName());// \"After that, it writes\r\n\t\t\t// the information to table\r\n\t\t\t// [\"+tablename+\"] on\r\n\t\t\t// database\r\n\t\t\t// [\"+targetDBInfo+\"]\"\r\n\t\t\tNotePadMeta ni = new NotePadMeta(note, 150, 10, -1, -1);\r\n\t\t\tmeta.addNote(ni);\r\n\r\n\t\t\t// \r\n\t\t\t// create the source step...\r\n\t\t\t//\r\n\t\t\tString fromstepname = Messages.getString(\"Spoon.Message.Note.ReadFromTable\", tablename); // \"read\r\n\t\t\t// from\r\n\t\t\t// [\"+tablename+\"]\";\r\n\t\t\tTableInputMeta tii = new TableInputMeta();\r\n\t\t\ttii.setDatabaseMeta(sourceDBInfo);\r\n\t\t\ttii.setSQL(\"SELECT * FROM \" + tablename);\r\n\r\n\t\t\tStepLoader steploader = StepLoader.getInstance();\r\n\r\n\t\t\tString fromstepid = steploader.getStepPluginID(tii);\r\n\t\t\tStepMeta fromstep = new StepMeta(fromstepid, fromstepname, tii);\r\n\t\t\tfromstep.setLocation(150, 100);\r\n\t\t\tfromstep.setDraw(true);\r\n\t\t\tfromstep.setDescription(Messages.getString(\"Spoon.Message.Note.ReadInformationFromTableOnDB\",\r\n\t\t\t\t\ttablename, sourceDBInfo.getDatabaseName()));\r\n\t\t\tmeta.addStep(fromstep);\r\n\r\n\t\t\t//\r\n\t\t\t// add logic to rename fields in case any of the field names contain\r\n\t\t\t// reserved words...\r\n\t\t\t// Use metadata logic in SelectValues, use SelectValueInfo...\r\n\t\t\t//\r\n\t\t\tDatabase sourceDB = new Database(sourceDBInfo);\r\n\t\t\tsourceDB.shareVariablesWith(meta);\r\n\t\t\tsourceDB.connect();\r\n\r\n\t\t\t// Get the fields for the input table...\r\n\t\t\tRowMetaInterface fields = sourceDB.getTableFields(tablename);\r\n\r\n\t\t\t// See if we need to deal with reserved words...\r\n\t\t\tint nrReserved = targetDBInfo.getNrReservedWords(fields);\r\n\t\t\tif (nrReserved > 0)\r\n\t\t\t{\r\n\t\t\t\tSelectValuesMeta svi = new SelectValuesMeta();\r\n\t\t\t\tsvi.allocate(0, 0, nrReserved);\r\n\t\t\t\tint nr = 0;\r\n\t\t\t\tfor (int i = 0; i < fields.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tValueMetaInterface v = fields.getValueMeta(i);\r\n\t\t\t\t\tif (targetDBInfo.isReservedWord(v.getName()))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsvi.getMetaName()[nr] = v.getName();\r\n\t\t\t\t\t\tsvi.getMetaRename()[nr] = targetDBInfo.quoteField(v.getName());\r\n\t\t\t\t\t\tnr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tString selstepname = Messages.getString(\"Spoon.Message.Note.HandleReservedWords\"); // \"Handle\r\n\t\t\t\t// reserved\r\n\t\t\t\t// words\";\r\n\t\t\t\tString selstepid = steploader.getStepPluginID(svi);\r\n\t\t\t\tStepMeta selstep = new StepMeta(selstepid, selstepname, svi);\r\n\t\t\t\tselstep.setLocation(350, 100);\r\n\t\t\t\tselstep.setDraw(true);\r\n\t\t\t\tselstep.setDescription(Messages.getString(\"Spoon.Message.Note.RenamesReservedWords\",\r\n\t\t\t\t\t\ttargetDBInfo.getDatabaseTypeDesc()));// \"Renames\r\n\t\t\t\t// reserved\r\n\t\t\t\t// words for\r\n\t\t\t\t// \"+targetDBInfo.getDatabaseTypeDesc()\r\n\t\t\t\tmeta.addStep(selstep);\r\n\r\n\t\t\t\tTransHopMeta shi = new TransHopMeta(fromstep, selstep);\r\n\t\t\t\tmeta.addTransHop(shi);\r\n\t\t\t\tfromstep = selstep;\r\n\t\t\t}\r\n\r\n\t\t\t// \r\n\t\t\t// Create the target step...\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// Add the TableOutputMeta step...\r\n\t\t\t//\r\n\t\t\tString tostepname = Messages.getString(\"Spoon.Message.Note.WriteToTable\", tablename);\r\n\t\t\tTableOutputMeta toi = new TableOutputMeta();\r\n\t\t\ttoi.setDatabaseMeta(targetDBInfo);\r\n\t\t\ttoi.setTablename(tablename);\r\n\t\t\ttoi.setCommitSize(200);\r\n\t\t\ttoi.setTruncateTable(true);\r\n\r\n\t\t\tString tostepid = steploader.getStepPluginID(toi);\r\n\t\t\tStepMeta tostep = new StepMeta(tostepid, tostepname, toi);\r\n\t\t\ttostep.setLocation(550, 100);\r\n\t\t\ttostep.setDraw(true);\r\n\t\t\ttostep.setDescription(Messages.getString(\"Spoon.Message.Note.WriteInformationToTableOnDB2\",\r\n\t\t\t\t\ttablename, targetDBInfo.getDatabaseName()));\r\n\t\t\tmeta.addStep(tostep);\r\n\r\n\t\t\t//\r\n\t\t\t// Add a hop between the two steps...\r\n\t\t\t//\r\n\t\t\tTransHopMeta hi = new TransHopMeta(fromstep, tostep);\r\n\t\t\tmeta.addTransHop(hi);\r\n\r\n\t\t\t// OK, if we're still here: overwrite the current transformation...\r\n\t\t\t// Set a name on this generated transformation\r\n\t\t\t// \r\n\t\t\tString name = \"Copy table from [\" + sourceDBInfo.getName() + \"] to [\" + targetDBInfo.getName()\r\n\t\t\t\t\t+ \"]\";\r\n\t\t\tString transName = name;\r\n\t\t\tint nr = 1;\r\n\t\t\tif (spoon.delegates.trans.getTransformation(transName) != null)\r\n\t\t\t{\r\n\t\t\t\tnr++;\r\n\t\t\t\ttransName = name + \" \" + nr;\r\n\t\t\t}\r\n\t\t\tmeta.setName(transName);\r\n\t\t\tspoon.delegates.trans.addTransGraph(meta);\r\n\r\n\t\t\tspoon.refreshGraph();\r\n\t\t\tspoon.refreshTree();\r\n\t\t} catch (Exception e)\r\n\t\t{\r\n\t\t\tnew ErrorDialog(spoon.getShell(), Messages.getString(\"Spoon.Dialog.UnexpectedError.Title\"),\r\n\t\t\t\t\tMessages.getString(\"Spoon.Dialog.UnexpectedError.Message\"), new KettleException(e\r\n\t\t\t\t\t\t\t.getMessage(), e));\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}","id":103377,"modified_method":"public boolean copyTable(DatabaseMeta sourceDBInfo, DatabaseMeta targetDBInfo, String tablename)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//\r\n\t\t\t// Create a new transformation...\r\n\t\t\t//\r\n\t\t\tTransMeta meta = new TransMeta();\r\n\t\t\tmeta.addDatabase(sourceDBInfo);\r\n\t\t\tmeta.addDatabase(targetDBInfo);\r\n\r\n\t\t\t//\r\n\t\t\t// Add a note\r\n\t\t\t//\r\n\t\t\tString note = Messages.getString(\"Spoon.Message.Note.ReadInformationFromTableOnDB\", tablename,\r\n\t\t\t\t\tsourceDBInfo.getDatabaseName())\r\n\t\t\t\t\t+ Const.CR;// \"Reads information from table [\"+tablename+\"]\r\n\t\t\t// on database [\"+sourceDBInfo+\"]\"\r\n\t\t\tnote += Messages.getString(\"Spoon.Message.Note.WriteInformationToTableOnDB\", tablename,\r\n\t\t\t\t\ttargetDBInfo.getDatabaseName());// \"After that, it writes\r\n\t\t\t// the information to table\r\n\t\t\t// [\"+tablename+\"] on\r\n\t\t\t// database\r\n\t\t\t// [\"+targetDBInfo+\"]\"\r\n\t\t\tNotePadMeta ni = new NotePadMeta(note, 150, 10, -1, -1);\r\n\t\t\tmeta.addNote(ni);\r\n\r\n\t\t\t// \r\n\t\t\t// create the source step...\r\n\t\t\t//\r\n\t\t\tString fromstepname = Messages.getString(\"Spoon.Message.Note.ReadFromTable\", tablename); // \"read\r\n\t\t\t// from\r\n\t\t\t// [\"+tablename+\"]\";\r\n\t\t\tTableInputMeta tii = new TableInputMeta();\r\n\t\t\ttii.setDatabaseMeta(sourceDBInfo);\r\n\t\t\ttii.setSQL(\"SELECT * FROM \" + tablename);\r\n\r\n\t\t\tStepLoader steploader = StepLoader.getInstance();\r\n\r\n\t\t\tString fromstepid = steploader.getStepPluginID(tii);\r\n\t\t\tStepMeta fromstep = new StepMeta(fromstepid, fromstepname, tii);\r\n\t\t\tfromstep.setLocation(150, 100);\r\n\t\t\tfromstep.setDraw(true);\r\n\t\t\tfromstep.setDescription(Messages.getString(\"Spoon.Message.Note.ReadInformationFromTableOnDB\",\r\n\t\t\t\t\ttablename, sourceDBInfo.getDatabaseName()));\r\n\t\t\tmeta.addStep(fromstep);\r\n\r\n\t\t\t//\r\n\t\t\t// add logic to rename fields in case any of the field names contain\r\n\t\t\t// reserved words...\r\n\t\t\t// Use metadata logic in SelectValues, use SelectValueInfo...\r\n\t\t\t//\r\n\t\t\tDatabase sourceDB = new Database(sourceDBInfo);\r\n\t\t\tsourceDB.shareVariablesWith(meta);\r\n\t\t\tsourceDB.connect();\r\n\r\n\t\t\t// Get the fields for the input table...\r\n\t\t\tRowMetaInterface fields = sourceDB.getTableFields(tablename);\r\n\r\n\t\t\t// See if we need to deal with reserved words...\r\n\t\t\tint nrReserved = targetDBInfo.getNrReservedWords(fields);\r\n\t\t\tif (nrReserved > 0)\r\n\t\t\t{\r\n\t\t\t\tSelectValuesMeta svi = new SelectValuesMeta();\r\n\t\t\t\tsvi.allocate(0, 0, nrReserved);\r\n\t\t\t\tint nr = 0;\r\n\t\t\t\tfor (int i = 0; i < fields.size(); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tValueMetaInterface v = fields.getValueMeta(i);\r\n\t\t\t\t\tif (targetDBInfo.isReservedWord(v.getName()))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsvi.getMeta()[nr].setName(v.getName());\r\n\t\t\t\t\t\tsvi.getMeta()[nr].setRename(targetDBInfo.quoteField(v.getName()));\r\n\t\t\t\t\t\tnr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tString selstepname = Messages.getString(\"Spoon.Message.Note.HandleReservedWords\"); // \"Handle\r\n\t\t\t\t// reserved\r\n\t\t\t\t// words\";\r\n\t\t\t\tString selstepid = steploader.getStepPluginID(svi);\r\n\t\t\t\tStepMeta selstep = new StepMeta(selstepid, selstepname, svi);\r\n\t\t\t\tselstep.setLocation(350, 100);\r\n\t\t\t\tselstep.setDraw(true);\r\n\t\t\t\tselstep.setDescription(Messages.getString(\"Spoon.Message.Note.RenamesReservedWords\",\r\n\t\t\t\t\t\ttargetDBInfo.getDatabaseTypeDesc()));// \"Renames\r\n\t\t\t\t// reserved\r\n\t\t\t\t// words for\r\n\t\t\t\t// \"+targetDBInfo.getDatabaseTypeDesc()\r\n\t\t\t\tmeta.addStep(selstep);\r\n\r\n\t\t\t\tTransHopMeta shi = new TransHopMeta(fromstep, selstep);\r\n\t\t\t\tmeta.addTransHop(shi);\r\n\t\t\t\tfromstep = selstep;\r\n\t\t\t}\r\n\r\n\t\t\t// \r\n\t\t\t// Create the target step...\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// Add the TableOutputMeta step...\r\n\t\t\t//\r\n\t\t\tString tostepname = Messages.getString(\"Spoon.Message.Note.WriteToTable\", tablename);\r\n\t\t\tTableOutputMeta toi = new TableOutputMeta();\r\n\t\t\ttoi.setDatabaseMeta(targetDBInfo);\r\n\t\t\ttoi.setTablename(tablename);\r\n\t\t\ttoi.setCommitSize(200);\r\n\t\t\ttoi.setTruncateTable(true);\r\n\r\n\t\t\tString tostepid = steploader.getStepPluginID(toi);\r\n\t\t\tStepMeta tostep = new StepMeta(tostepid, tostepname, toi);\r\n\t\t\ttostep.setLocation(550, 100);\r\n\t\t\ttostep.setDraw(true);\r\n\t\t\ttostep.setDescription(Messages.getString(\"Spoon.Message.Note.WriteInformationToTableOnDB2\",\r\n\t\t\t\t\ttablename, targetDBInfo.getDatabaseName()));\r\n\t\t\tmeta.addStep(tostep);\r\n\r\n\t\t\t//\r\n\t\t\t// Add a hop between the two steps...\r\n\t\t\t//\r\n\t\t\tTransHopMeta hi = new TransHopMeta(fromstep, tostep);\r\n\t\t\tmeta.addTransHop(hi);\r\n\r\n\t\t\t// OK, if we're still here: overwrite the current transformation...\r\n\t\t\t// Set a name on this generated transformation\r\n\t\t\t// \r\n\t\t\tString name = \"Copy table from [\" + sourceDBInfo.getName() + \"] to [\" + targetDBInfo.getName()\r\n\t\t\t\t\t+ \"]\";\r\n\t\t\tString transName = name;\r\n\t\t\tint nr = 1;\r\n\t\t\tif (spoon.delegates.trans.getTransformation(transName) != null)\r\n\t\t\t{\r\n\t\t\t\tnr++;\r\n\t\t\t\ttransName = name + \" \" + nr;\r\n\t\t\t}\r\n\t\t\tmeta.setName(transName);\r\n\t\t\tspoon.delegates.trans.addTransGraph(meta);\r\n\r\n\t\t\tspoon.refreshGraph();\r\n\t\t\tspoon.refreshTree();\r\n\t\t} catch (Exception e)\r\n\t\t{\r\n\t\t\tnew ErrorDialog(spoon.getShell(), Messages.getString(\"Spoon.Dialog.UnexpectedError.Title\"),\r\n\t\t\t\t\tMessages.getString(\"Spoon.Dialog.UnexpectedError.Message\"), new KettleException(e\r\n\t\t\t\t\t\t\t.getMessage(), e));\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\r\n     * Creates a new Transformation using input parameters such as the tablename to read from.\r\n     * @param transformationName The name of the transformation\r\n     * @param sourceDatabaseName The name of the database to read from\r\n     * @param sourceTableName The name of the table to read from\r\n     * @param sourceFields The field names we want to read from the source table\r\n     * @param targetDatabaseName The name of the target database\r\n     * @param targetTableName The name of the target table we want to write to\r\n     * @param targetFields The names of the fields in the target table (same number of fields as sourceFields)\r\n     * @return A new transformation\r\n     * @throws KettleException In the rare case something goes wrong\r\n     */\r\n    public static final TransMeta buildCopyTable(String transformationName, String sourceDatabaseName, String sourceTableName, String[] sourceFields, String targetDatabaseName, String targetTableName, String[] targetFields) throws KettleException\r\n    {\r\n        EnvUtil.environmentInit();\r\n        try\r\n        {\r\n            //\r\n            // Create a new transformation...\r\n            //\r\n            TransMeta transMeta = new TransMeta();\r\n            transMeta.setName(transformationName);\r\n            \r\n            // Add the database connections\r\n            for (int i=0;i<databasesXML.length;i++)\r\n            {\r\n                DatabaseMeta databaseMeta = new DatabaseMeta(databasesXML[i]);\r\n                transMeta.addDatabase(databaseMeta);\r\n            }\r\n            \r\n            DatabaseMeta sourceDBInfo = transMeta.findDatabase(sourceDatabaseName);\r\n            DatabaseMeta targetDBInfo = transMeta.findDatabase(targetDatabaseName);\r\n\r\n            \r\n            //\r\n            // Add a note\r\n            //\r\n            String note = \"Reads information from table [\" + sourceTableName+ \"] on database [\" + sourceDBInfo + \"]\" + Const.CR;\r\n            note += \"After that, it writes the information to table [\" + targetTableName + \"] on database [\" + targetDBInfo + \"]\";\r\n            NotePadMeta ni = new NotePadMeta(note, 150, 10, -1, -1);\r\n            transMeta.addNote(ni);\r\n\r\n            // \r\n            // create the source step...\r\n            //\r\n            String fromstepname = \"read from [\" + sourceTableName + \"]\";\r\n            TableInputMeta tii = new TableInputMeta();\r\n            tii.setDatabaseMeta(sourceDBInfo);\r\n            String selectSQL = \"SELECT \"+Const.CR;\r\n            for (int i=0;i<sourceFields.length;i++)\r\n            {\r\n                if (i>0) selectSQL+=\", \"; else selectSQL+=\"  \";\r\n                selectSQL+=sourceFields[i]+Const.CR;\r\n            }\r\n            selectSQL+=\"FROM \"+sourceTableName;\r\n            tii.setSQL(selectSQL);\r\n\r\n            StepLoader steploader = StepLoader.getInstance();\r\n\r\n            String fromstepid = steploader.getStepPluginID(tii);\r\n            StepMeta fromstep = new StepMeta(fromstepid, fromstepname, (StepMetaInterface) tii);\r\n            fromstep.setLocation(150, 100);\r\n            fromstep.setDraw(true);\r\n            fromstep.setDescription(\"Reads information from table [\" + sourceTableName + \"] on database [\" + sourceDBInfo + \"]\");\r\n            transMeta.addStep(fromstep);\r\n\r\n            //\r\n            // add logic to rename fields\r\n            // Use metadata logic in SelectValues, use SelectValueInfo...\r\n            //\r\n            SelectValuesMeta svi = new SelectValuesMeta();\r\n            svi.allocate(0, 0, sourceFields.length);\r\n            for (int i = 0; i < sourceFields.length; i++)\r\n            {\r\n                svi.getMetaName()[i] = sourceFields[i];\r\n                svi.getMetaRename()[i] = targetFields[i];\r\n            }\r\n\r\n            String selstepname = \"Rename field names\";\r\n            String selstepid = steploader.getStepPluginID(svi);\r\n            StepMeta selstep = new StepMeta(selstepid, selstepname, (StepMetaInterface) svi);\r\n            selstep.setLocation(350, 100);\r\n            selstep.setDraw(true);\r\n            selstep.setDescription(\"Rename field names\");\r\n            transMeta.addStep(selstep);\r\n\r\n            TransHopMeta shi = new TransHopMeta(fromstep, selstep);\r\n            transMeta.addTransHop(shi);\r\n            fromstep = selstep;\r\n\r\n            // \r\n            // Create the target step...\r\n            //\r\n            //\r\n            // Add the TableOutputMeta step...\r\n            //\r\n            String tostepname = \"write to [\" + targetTableName + \"]\";\r\n            TableOutputMeta toi = new TableOutputMeta();\r\n            toi.setDatabaseMeta(targetDBInfo);\r\n            toi.setTablename(targetTableName);\r\n            toi.setCommitSize(200);\r\n            toi.setTruncateTable(true);\r\n\r\n            String tostepid = steploader.getStepPluginID(toi);\r\n            StepMeta tostep = new StepMeta(tostepid, tostepname, (StepMetaInterface) toi);\r\n            tostep.setLocation(550, 100);\r\n            tostep.setDraw(true);\r\n            tostep.setDescription(\"Write information to table [\" + targetTableName + \"] on database [\" + targetDBInfo + \"]\");\r\n            transMeta.addStep(tostep);\r\n\r\n            //\r\n            // Add a hop between the two steps...\r\n            //\r\n            TransHopMeta hi = new TransHopMeta(fromstep, tostep);\r\n            transMeta.addTransHop(hi);\r\n\r\n            // OK, if we're still here: overwrite the current transformation...\r\n            return transMeta;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            throw new KettleException(\"An unexpected error occurred creating the new transformation\", e);\r\n        }\r\n    }","id":103378,"modified_method":"/**\r\n     * Creates a new Transformation using input parameters such as the tablename to read from.\r\n     * @param transformationName The name of the transformation\r\n     * @param sourceDatabaseName The name of the database to read from\r\n     * @param sourceTableName The name of the table to read from\r\n     * @param sourceFields The field names we want to read from the source table\r\n     * @param targetDatabaseName The name of the target database\r\n     * @param targetTableName The name of the target table we want to write to\r\n     * @param targetFields The names of the fields in the target table (same number of fields as sourceFields)\r\n     * @return A new transformation\r\n     * @throws KettleException In the rare case something goes wrong\r\n     */\r\n    public static final TransMeta buildCopyTable(String transformationName, String sourceDatabaseName, String sourceTableName, String[] sourceFields, String targetDatabaseName, String targetTableName, String[] targetFields) throws KettleException\r\n    {\r\n        EnvUtil.environmentInit();\r\n        try\r\n        {\r\n            //\r\n            // Create a new transformation...\r\n            //\r\n            TransMeta transMeta = new TransMeta();\r\n            transMeta.setName(transformationName);\r\n            \r\n            // Add the database connections\r\n            for (int i=0;i<databasesXML.length;i++)\r\n            {\r\n                DatabaseMeta databaseMeta = new DatabaseMeta(databasesXML[i]);\r\n                transMeta.addDatabase(databaseMeta);\r\n            }\r\n            \r\n            DatabaseMeta sourceDBInfo = transMeta.findDatabase(sourceDatabaseName);\r\n            DatabaseMeta targetDBInfo = transMeta.findDatabase(targetDatabaseName);\r\n\r\n            \r\n            //\r\n            // Add a note\r\n            //\r\n            String note = \"Reads information from table [\" + sourceTableName+ \"] on database [\" + sourceDBInfo + \"]\" + Const.CR;\r\n            note += \"After that, it writes the information to table [\" + targetTableName + \"] on database [\" + targetDBInfo + \"]\";\r\n            NotePadMeta ni = new NotePadMeta(note, 150, 10, -1, -1);\r\n            transMeta.addNote(ni);\r\n\r\n            // \r\n            // create the source step...\r\n            //\r\n            String fromstepname = \"read from [\" + sourceTableName + \"]\";\r\n            TableInputMeta tii = new TableInputMeta();\r\n            tii.setDatabaseMeta(sourceDBInfo);\r\n            String selectSQL = \"SELECT \"+Const.CR;\r\n            for (int i=0;i<sourceFields.length;i++)\r\n            {\r\n                if (i>0) selectSQL+=\", \"; else selectSQL+=\"  \";\r\n                selectSQL+=sourceFields[i]+Const.CR;\r\n            }\r\n            selectSQL+=\"FROM \"+sourceTableName;\r\n            tii.setSQL(selectSQL);\r\n\r\n            StepLoader steploader = StepLoader.getInstance();\r\n\r\n            String fromstepid = steploader.getStepPluginID(tii);\r\n            StepMeta fromstep = new StepMeta(fromstepid, fromstepname, (StepMetaInterface) tii);\r\n            fromstep.setLocation(150, 100);\r\n            fromstep.setDraw(true);\r\n            fromstep.setDescription(\"Reads information from table [\" + sourceTableName + \"] on database [\" + sourceDBInfo + \"]\");\r\n            transMeta.addStep(fromstep);\r\n\r\n            //\r\n            // add logic to rename fields\r\n            // Use metadata logic in SelectValues, use SelectValueInfo...\r\n            //\r\n            SelectValuesMeta svi = new SelectValuesMeta();\r\n            svi.allocate(0, 0, sourceFields.length);\r\n            for (int i = 0; i < sourceFields.length; i++)\r\n            {\r\n                svi.getMeta()[i].setName(sourceFields[i]);\r\n                svi.getMeta()[i].setRename(targetFields[i]);\r\n            }\r\n\r\n            String selstepname = \"Rename field names\";\r\n            String selstepid = steploader.getStepPluginID(svi);\r\n            StepMeta selstep = new StepMeta(selstepid, selstepname, (StepMetaInterface) svi);\r\n            selstep.setLocation(350, 100);\r\n            selstep.setDraw(true);\r\n            selstep.setDescription(\"Rename field names\");\r\n            transMeta.addStep(selstep);\r\n\r\n            TransHopMeta shi = new TransHopMeta(fromstep, selstep);\r\n            transMeta.addTransHop(shi);\r\n            fromstep = selstep;\r\n\r\n            // \r\n            // Create the target step...\r\n            //\r\n            //\r\n            // Add the TableOutputMeta step...\r\n            //\r\n            String tostepname = \"write to [\" + targetTableName + \"]\";\r\n            TableOutputMeta toi = new TableOutputMeta();\r\n            toi.setDatabaseMeta(targetDBInfo);\r\n            toi.setTablename(targetTableName);\r\n            toi.setCommitSize(200);\r\n            toi.setTruncateTable(true);\r\n\r\n            String tostepid = steploader.getStepPluginID(toi);\r\n            StepMeta tostep = new StepMeta(tostepid, tostepname, (StepMetaInterface) toi);\r\n            tostep.setLocation(550, 100);\r\n            tostep.setDraw(true);\r\n            tostep.setDescription(\"Write information to table [\" + targetTableName + \"] on database [\" + targetDBInfo + \"]\");\r\n            transMeta.addStep(tostep);\r\n\r\n            //\r\n            // Add a hop between the two steps...\r\n            //\r\n            TransHopMeta hi = new TransHopMeta(fromstep, tostep);\r\n            transMeta.addTransHop(hi);\r\n\r\n            // OK, if we're still here: overwrite the current transformation...\r\n            return transMeta;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            throw new KettleException(\"An unexpected error occurred creating the new transformation\", e);\r\n        }\r\n    }","commit_id":"78aa93961577b8a8ba4ea0243de902fa7867cc77","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private boolean commonChecks(HttpServerExchange exchange) throws Exception {\n     // AS7-2284 If we are starting or stopping, tell caller the service is unavailable and to try again\n        // later. If \"stopping\" it's either a reload, in which case trying again will eventually succeed,\n        // or it's a true process stop eventually the server will have stopped.\n        @SuppressWarnings(\"deprecation\")\n        ControlledProcessState.State currentState = controlledProcessStateService.getCurrentState();\n        if (currentState == ControlledProcessState.State.STARTING\n                || currentState == ControlledProcessState.State.STOPPING) {\n            exchange.getResponseHeaders().add(Headers.RETRY_AFTER, \"2\"); //  2 secs is just a guesstimate\n            Common.SERVICE_UNAVAIABLE.handleRequest(exchange);\n            return false;\n        }\n\n        /*\n         * Completely disallow OPTIONS - if the browser suspects this is a cross site request just reject it.\n         */\n        final HttpString requestMethod = exchange.getRequestMethod();\n        if (!Methods.POST.equals(requestMethod) && !Methods.GET.equals(requestMethod)) {\n            if (Methods.OPTIONS.equals(requestMethod)) {\n                ROOT_LOGGER.debug(\"Request rejected due to 'OPTIONS' method which is not supported.\");\n            } else {\n                ROOT_LOGGER.debug(\"Request rejected as method not one of (GET,POST).\");\n            }\n            Common.METHOD_NOT_ALLOWED_HANDLER.handleRequest(exchange);\n            return false;\n        }\n\n        /*\n         *  Origin check, if it is set the Origin header should match the Host otherwise reject the request.\n         *\n         *  This check is for cross site scripted GET and POST requests.\n         */\n        final HeaderMap headers = exchange.getRequestHeaders();\n        if (headers.contains(Headers.ORIGIN)) {\n            String origin = headers.getFirst(Headers.ORIGIN);\n            String host = headers.getFirst(Headers.HOST);\n            String protocol = exchange.getRequestScheme();\n            //This browser set header should not need IPv6 escaping\n            String allowedOrigin = protocol + \"://\" + host;\n\n            // This will reject multi-origin Origin headers due to the exact match.\n            if (origin.equals(allowedOrigin) == false) {\n                ROOT_LOGGER.debug(\"Request rejected due to HOST/ORIGIN mis-match.\");\n                ResponseCodeHandler.HANDLE_403.handleRequest(exchange);\n                return false;\n            }\n        }\n        return true;\n    }","id":103379,"modified_method":"private boolean commonChecks(HttpServerExchange exchange) throws Exception {\n\n        // Check for context flag set by LogoutHandler\n        if (exchange.getQueryParameters().containsKey(LogoutHandler.CONTEXT)) {\n            contextLogout(exchange);\n            return false;\n        }\n\n        // AS7-2284 If we are starting or stopping, tell caller the service is unavailable and to try again\n        // later. If \"stopping\" it's either a reload, in which case trying again will eventually succeed,\n        // or it's a true process stop eventually the server will have stopped.\n        @SuppressWarnings(\"deprecation\")\n        ControlledProcessState.State currentState = controlledProcessStateService.getCurrentState();\n        if (currentState == ControlledProcessState.State.STARTING\n                || currentState == ControlledProcessState.State.STOPPING) {\n            exchange.getResponseHeaders().add(Headers.RETRY_AFTER, \"2\"); //  2 secs is just a guesstimate\n            Common.SERVICE_UNAVAIABLE.handleRequest(exchange);\n            return false;\n        }\n\n        /*\n         * Completely disallow OPTIONS - if the browser suspects this is a cross site request just reject it.\n         */\n        final HttpString requestMethod = exchange.getRequestMethod();\n        if (!Methods.POST.equals(requestMethod) && !Methods.GET.equals(requestMethod)) {\n            if (Methods.OPTIONS.equals(requestMethod)) {\n                ROOT_LOGGER.debug(\"Request rejected due to 'OPTIONS' method which is not supported.\");\n            } else {\n                ROOT_LOGGER.debug(\"Request rejected as method not one of (GET,POST).\");\n            }\n            Common.METHOD_NOT_ALLOWED_HANDLER.handleRequest(exchange);\n            return false;\n        }\n\n        /*\n         *  Origin check, if it is set the Origin header should match the Host otherwise reject the request.\n         *\n         *  This check is for cross site scripted GET and POST requests.\n         */\n        final HeaderMap headers = exchange.getRequestHeaders();\n        if (headers.contains(Headers.ORIGIN)) {\n            String origin = headers.getFirst(Headers.ORIGIN);\n            String host = headers.getFirst(Headers.HOST);\n            String protocol = exchange.getRequestScheme();\n            //This browser set header should not need IPv6 escaping\n            String allowedOrigin = protocol + \"://\" + host;\n\n            // This will reject multi-origin Origin headers due to the exact match.\n            if (origin.equals(allowedOrigin) == false) {\n                ROOT_LOGGER.debug(\"Request rejected due to HOST/ORIGIN mis-match.\");\n                ResponseCodeHandler.HANDLE_403.handleRequest(exchange);\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"c703ea1fbb70ee011e26ceb1c54261fd9a021642","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        final HeaderMap requestHeaders = exchange.getRequestHeaders();\n        final HeaderMap responseHeaders = exchange.getResponseHeaders();\n\n        String authorization = requestHeaders.getFirst(AUTHORIZATION);\n        String rawQuery = exchange.getQueryString();\n        boolean query = rawQuery != null && rawQuery.contains(\"logout\");\n\n        String userAgent = requestHeaders.getFirst(USER_AGENT);\n        boolean opera = userAgent != null && userAgent.contains(\"Opera\");\n        boolean win = !opera && userAgent != null && userAgent.contains(\"MSIE\");\n\n        String referrer = responseHeaders.getFirst(REFERER);\n\n        // Calculate location URL\n        String protocol = \"http\";\n        String host = null;\n        if (referrer != null) {\n            try {\n                URI uri = new URI(referrer);\n                protocol = uri.getScheme();\n                host = uri.getHost() + (uri.getPort() == -1 ? \"\" : \":\" + String.valueOf(uri.getPort()));\n            } catch (URISyntaxException e) {\n            }\n        }\n\n        // Last resort\n        if (host == null) {\n            host = requestHeaders.getFirst(HOST);\n            if (host == null) {\n                exchange.setResponseCode(StatusCodes.INTERNAL_SERVER_ERROR);\n\n                return;\n            }\n        }\n        /*\n         * Main sequence of events:\n         *\n         * 1. Redirect to self using user:pass@host form of authority. This forces Safari to overwrite its cache. (Also forces\n         * FF and Chrome, but not absolutely necessary) Set the logout query param as a state signal for step 2 2. Send 401\n         * digest without a nonce stale marker, this will force FF and Chrome and likely other browsers to assume an invalid\n         * (old) password. In the case of Opera, which doesn't invalidate under such a circumstance, send an invalid realm. This\n         * will overwrite its auth cache, since it indexes it by host and not realm. 3. The credentials in 307 redirect wlll be\n         * transparently accepted and a final redirect to the console is performed. Opera ignores these, so the user must hit\n         * escape which will use javascript to perform the redirect\n         *\n         * In the case of Internet Explorer, all of this will be bypassed and will simply redirect to the console. The console\n         * MUST use a special javascript call before redirecting to logout.\n         */\n        if (!win && (authorization == null || !authorization.contains(\"enter-login-here\"))) {\n            if (!query) {\n                responseHeaders.add(LOCATION, protocol + \"://enter-login-here:blah@\" + host + \"/logout?logout\");\n                exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n\n                return;\n            }\n\n            DigestAuthenticationMechanism mech = opera ? fakeRealmdigestMechanism : digestMechanism;\n            mech.sendChallenge(exchange, null);\n            String reply = \"<html><script type='text/javascript'>window.location=\\\"\" + protocol + \"://\" + host\n                    + \"/\\\";<\/script><\/html>\";\n            exchange.setResponseCode(StatusCodes.UNAUTHORIZED);\n            exchange.getResponseSender().send(reply, IoCallback.END_EXCHANGE);\n\n            return;\n        }\n\n        // Success, now back to the login screen\n        responseHeaders.add(LOCATION, protocol + \"://\" + host + \"/\");\n        exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n    }","id":103380,"modified_method":"@Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        final HeaderMap requestHeaders = exchange.getRequestHeaders();\n        final HeaderMap responseHeaders = exchange.getResponseHeaders();\n\n        String referrer = responseHeaders.getFirst(REFERER);\n        String protocol = \"http\";\n        String host = null;\n        if (referrer != null) {\n            try {\n                URI uri = new URI(referrer);\n                protocol = uri.getScheme();\n                host = uri.getHost() + (uri.getPort() == -1 ? \"\" : \":\" + String.valueOf(uri.getPort()));\n            } catch (URISyntaxException e) {\n            }\n        }\n        if (host == null) {\n            host = requestHeaders.getFirst(HOST);\n            if (host == null) {\n                exchange.setResponseCode(StatusCodes.INTERNAL_SERVER_ERROR);\n                return;\n            }\n        }\n\n        /*\n         * Main sequence of events:\n         *\n         * 1. Redirect to DomainApiCheckHandler to logout from the securioty context. Then redirect back to this\n         * handler.\n         *\n         * 2. Redirect to self using user:pass@host form of authority. This forces Safari to overwrite its cache. (Also\n         * forces FF and Chrome, but not absolutely necessary) Set the exit flag as a state signal for step 3\n         *\n         * 3. Send 401 digest without a nonce stale marker, this will force FF and Chrome and likely other browsers to\n         * assume an invalid (old) password. In the case of Opera, which doesn't invalidate under such a circumstance,\n         * send an invalid realm. This will overwrite its auth cache, since it indexes it by host and not realm.\n         *\n         * 4. The credentials in 307 redirect wlll be transparently accepted and a final redirect to the console is\n         * performed. Opera ignores these, so the user must hit escape which will use javascript to perform the redirect\n         *\n         * In the case of Internet Explorer, all of this will be bypassed and will simply redirect to the console. The console\n         * MUST use a special javascript call before redirecting to logout.\n         */\n        String userAgent = requestHeaders.getFirst(USER_AGENT);\n        boolean opera = userAgent != null && userAgent.contains(\"Opera\");\n        boolean win = !opera && userAgent != null && userAgent.contains(\"MSIE\");\n\n        String rawQuery = exchange.getQueryString();\n        boolean exit = rawQuery != null && rawQuery.contains(EXIT);\n        boolean redirect = rawQuery != null && rawQuery.contains(REDIRECT);\n\n        if (win) {\n            responseHeaders.add(LOCATION, protocol + \"://\" + host + \"/\");\n            exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n        } else {\n            if (!redirect && !exit) {\n                // Hand over to DomainApiCheckHandler\n                responseHeaders.add(LOCATION, protocol + \"://\" + host + \"/management?\" + CONTEXT);\n                exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n            } else {\n                // Do the redirects to finish the logout\n                String authorization = requestHeaders.getFirst(AUTHORIZATION);\n\n                if (authorization == null || !authorization.contains(\"enter-login-here\")) {\n                    if (!exit) {\n                        responseHeaders.add(LOCATION, protocol + \"://enter-login-here:blah@\" + host + \"/logout?\" + EXIT);\n                        exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n                        return;\n                    }\n\n                    DigestAuthenticationMechanism mech = opera ? fakeRealmdigestMechanism : digestMechanism;\n                    mech.sendChallenge(exchange, null);\n                    String reply = \"<html><script type='text/javascript'>window.location=\\\"\" + protocol + \"://\" + host\n                            + \"/\\\";<\/script><\/html>\";\n                    exchange.setResponseCode(StatusCodes.UNAUTHORIZED);\n                    exchange.getResponseSender().send(reply, IoCallback.END_EXCHANGE);\n                    return;\n                }\n\n                // Success, now back to the login screen\n                responseHeaders.add(LOCATION, protocol + \"://\" + host + \"/\");\n                exchange.setResponseCode(StatusCodes.TEMPORARY_REDIRECT);\n            }\n        }\n    }","commit_id":"c703ea1fbb70ee011e26ceb1c54261fd9a021642","url":"https://github.com/wildfly/wildfly"},{"original_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      return ListSequence.fromListAndArray(new ArrayList<Shortcut>(), new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl \" + objects[0]), null));\n    }","id":103381,"modified_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      List<Shortcut> _result = new ArrayList<Shortcut>();\n      _result.add(new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl \" + objects[0]), null));\n      return _result;\n    }","commit_id":"1acb7f371a665935cfe36949b37b5abed126c92e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      return ListSequence.fromListAndArray(new ArrayList<Shortcut>(), new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl shift \" + objects[0]), null));\n    }","id":103382,"modified_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      List<Shortcut> _result = new ArrayList<Shortcut>();\n      _result.add(new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl shift \" + objects[0]), null));\n      return _result;\n    }","commit_id":"1acb7f371a665935cfe36949b37b5abed126c92e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      return ListSequence.fromListAndArray(new ArrayList<Shortcut>(), new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl \" + objects[0]), null));\n    }","id":103383,"modified_method":"public List<Shortcut> getShortcutsFor(Object... objects) {\n      List<Shortcut> _result = new ArrayList<Shortcut>();\n      _result.add(new KeyboardShortcut(KeyStroke.getKeyStroke(\"ctrl \" + objects[0]), null));\n      return _result;\n    }","commit_id":"1acb7f371a665935cfe36949b37b5abed126c92e","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**A method which sets up for converting the active viewer to a Jpeg file*/\n    public void createJpeg(File location)\n    {\n         //retrives the current map and gets its size\n         MapViewer currentMap = VUE.getActiveViewer();\n                \n         Rectangle2D bounds = currentMap.getAllComponentBounds();\n         int xLocation = (int)bounds.getX() + 5, yLocation = (int)bounds.getY() + 5;\n         Dimension size = new Dimension((int)bounds.getWidth() + xLocation, (int)bounds.getHeight() + yLocation);\n        \n         //creates an image object and sets up the graphics object of the image\n         BufferedImage mapImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);\n         Graphics g = mapImage.getGraphics();\n                \n         g.setClip(0, 0, size.width, size.height);\n        \n         //let the map draws to the image object's graphic object\n         currentMap.paintComponent(g);\n                \n         //outlining the returned image\n         //g.setColor(Color.black);\n         //g.drawRect(0, 0, size.width - 1, size.height - 1);\n        \n         //begins the conversion to the file\n         convert(mapImage, location, \"jpeg\");\n    }","id":103384,"modified_method":"/**A method which sets up for converting the active viewer to a Jpeg file*/\n    public void createJpeg(File location)\n    {\n         //retrives the current map and gets its size\n         MapViewer currentViewer = VUE.getActiveViewer();\n         LWMap currentMap = VUE.getActiveMap();\n         \n         Rectangle2D bounds = currentViewer.getAllComponentBounds();\n         Dimension size = new Dimension((int)bounds.getWidth(), (int)bounds.getHeight());\n         \n         //creates an image object and sets up the graphics object of the image\n         BufferedImage mapImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);\n         Graphics2D g = (Graphics2D) mapImage.getGraphics();\n        \n         //draws the background and the border of the image\n         g.setColor(Color.white);\n         g.fillRect(0, 0, size.width, size.height);\n         g.setColor(Color.black);\n         g.drawRect(0, 0, size.width-1, size.height-1);\n             \n         //translate and set the clip for the map content\n         g.translate(-(int)bounds.getX(), -(int)bounds.getY());\n         g.setClip(0, 0, size.width, size.height);\n            \n         DrawContext dc = new DrawContext(g, 1.0);\n         // render the map\n         currentMap.draw(dc);\n        \n         //begins the conversion to the file\n         convert(mapImage, location, \"jpeg\");\n    }","commit_id":"c981ec9c029e622e3752c0701327464c634be5e1","url":"https://github.com/VUE/VUE"},{"original_method":"/**A method which converts the given Java graphics into the SVG form and writes the output\n       to a given file*/\n    public void createSVG(File location)\n    {\n        //gets the currently selected map\n        MapViewer map = VUE.getActiveViewer();\n        \n        //sets up the document object model\n        Document document = new DocumentImpl();\n        SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n       \n        Rectangle2D bounds = map.getAllComponentBounds();\n        int xLocation = (int)bounds.getX() + 5, yLocation = (int)bounds.getY() + 5;\n        Dimension size = new Dimension((int)bounds.getWidth() + xLocation, (int)bounds.getHeight() + yLocation);\n        \n        svgGenerator.setClip(0, 0, size.width, size.height);\n        \n        //renders the map image into the SVGGraphics object\n        map.paintComponent(svgGenerator);\n        \n        //svgGenerator.setColor(Color.black);\n        //svgGenerator.drawRect(0, 0, size.width - 1, size.height - 1);\n        \n        try\n        {\n            //using the SVGGraphics object, write the SVG content to the given file\n            FileWriter out = new FileWriter(location);\n            svgGenerator.stream(out, false);\n            out.flush();\n            out.close();\n        }\n        \n        catch (IOException e)\n        {\n            System.err.println(\"Couldn't convert to SVG:\" + e);\n        }\n        \n        //there might be a better way to do this\n        replaceHeader(location);\n    }","id":103385,"modified_method":"/**A method which converts the given Java graphics into the SVG form and writes the output\n       to a given file*/\n    public void createSVG(File location)\n    {\n        //gets the currently selected map\n        MapViewer currentViewer = VUE.getActiveViewer();\n        LWMap currentMap = VUE.getActiveMap();\n        \n        //sets up the document object model\n        Document document = new DocumentImpl();\n        SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n       \n        //Rectangle2D bounds = map.getAllComponentBounds();\n        //int xLocation = (int)bounds.getX() + 5, yLocation = (int)bounds.getY() + 5;\n        //Dimension size = new Dimension((int)bounds.getWidth() + xLocation, (int)bounds.getHeight() + yLocation);\n        \n        Rectangle2D bounds = currentViewer.getAllComponentBounds();\n        Dimension size = new Dimension((int)bounds.getWidth(), (int)bounds.getHeight());\n        \n        //draws the background and the border of the image\n        svgGenerator.setColor(Color.white);\n        svgGenerator.fillRect(0, 0, size.width, size.height);\n        svgGenerator.setColor(Color.black);\n        svgGenerator.drawRect(0, 0, size.width-1, size.height-1);\n        \n        //translate and set the clip for the map content\n        svgGenerator.translate(-(int)bounds.getX(), -(int)bounds.getY());\n        svgGenerator.setClip(0, 0, size.width, size.height);\n                \n        //renders the map image into the SVGGraphics object\n        //map.paintComponent(svgGenerator);\n          \n        DrawContext dc = new DrawContext(svgGenerator, 1.0);\n        // render the map\n        currentMap.draw(dc);\n        \n        try\n        {\n            //using the SVGGraphics object, write the SVG content to the given file\n            FileWriter out = new FileWriter(location);\n            svgGenerator.stream(out, false);\n            out.flush();\n            out.close();\n        }\n        \n        catch (IOException e)\n        {\n            System.err.println(\"Couldn't convert to SVG:\" + e);\n        }\n        \n        //there might be a better way to do this\n        replaceHeader(location);\n    }","commit_id":"c981ec9c029e622e3752c0701327464c634be5e1","url":"https://github.com/VUE/VUE"},{"original_method":"private void processDrag(final MouseEvent e) {\n    if (myDragCancelled || !MouseDragHelper.checkModifiers(e)) return;\n    if (!isDraggingNow()) {\n      if (myPressedPoint == null) return;\n      if (isWithinDeadZone(e)) return;\n\n      myDragPane = findLayeredPane(e);\n      if (myDragPane == null) return;\n      final BufferedImage image = UIUtil.createImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);\n      paint(image.getGraphics());\n      myDragButtonImage = new JLabel(new JBImageIcon(image)) {\n\n        public String toString() {\n          return \"Image for: \" + StripeButton.this.toString();\n        }\n      };\n\n      myDragButtonImage.addMouseListener(new MouseAdapter() {\n        @Override\n        public void mouseReleased(MouseEvent e) {\n          finishDragging();\n          myPressedPoint = null;\n          myDragButtonImage = null;\n          super.mouseReleased(e);\n        }\n      });\n      myDragPane.add(myDragButtonImage, JLayeredPane.POPUP_LAYER);\n      myDragButtonImage.setSize(myDragButtonImage.getPreferredSize());\n      setVisible(false);\n      myPane.startDrag();\n      myDragKeyEventDispatcher = new DragKeyEventDispatcher();\n      KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(myDragKeyEventDispatcher);\n    }\n    if (!isDraggingNow()) return;\n\n    Point xy = SwingUtilities.convertPoint(e.getComponent(), e.getPoint(), myDragPane);\n    if (myPressedPoint != null) {\n      xy.x -= myPressedPoint.x;\n      xy.y -= myPressedPoint.y;\n    }\n    myDragButtonImage.setLocation(xy);\n\n    SwingUtilities.convertPointToScreen(xy, myDragPane);\n\n    final Stripe stripe = myPane.getStripeFor(new Rectangle(xy, myDragButtonImage.getSize()), (Stripe)getParent());\n    if (stripe == null) {\n      if (myLastStripe != null) {\n        myLastStripe.resetDrop();\n      }\n    } else {\n      if (myLastStripe != null && myLastStripe != stripe) {\n        myLastStripe.resetDrop();\n      }\n      stripe.processDropButton(this, myDragButtonImage, xy);\n    }\n\n    myLastStripe = stripe;\n  }","id":103386,"modified_method":"private void processDrag(final MouseEvent e) {\n    if (myDragCancelled || !MouseDragHelper.checkModifiers(e)) return;\n    if (!isDraggingNow()) {\n      if (myPressedPoint == null) return;\n      if (isWithinDeadZone(e)) return;\n\n      myDragPane = findLayeredPane(e);\n      if (myDragPane == null) return;\n      int width = getWidth() - 1; // -1 because StripeButtonUI.paint will not paint 1 pixel in case (anchor == ToolWindowAnchor.LEFT)\n      int height = getHeight() - 1; // -1 because StripeButtonUI.paint will not paint 1 pixel in case (anchor.isHorizontal())\n      BufferedImage image = UIUtil.createImage(width, height, BufferedImage.TYPE_INT_RGB);\n      Graphics graphics = image.getGraphics();\n      graphics.setColor(UIUtil.getBgFillColor(getParent()));\n      graphics.fillRect(0, 0, width, height);\n      paint(graphics);\n      graphics.dispose();\n      myDragButtonImage = new JLabel(new JBImageIcon(image)) {\n\n        public String toString() {\n          return \"Image for: \" + StripeButton.this.toString();\n        }\n      };\n\n      myDragButtonImage.addMouseListener(new MouseAdapter() {\n        @Override\n        public void mouseReleased(MouseEvent e) {\n          finishDragging();\n          myPressedPoint = null;\n          myDragButtonImage = null;\n          super.mouseReleased(e);\n        }\n      });\n      myDragPane.add(myDragButtonImage, JLayeredPane.POPUP_LAYER);\n      myDragButtonImage.setSize(myDragButtonImage.getPreferredSize());\n      setVisible(false);\n      myPane.startDrag();\n      myDragKeyEventDispatcher = new DragKeyEventDispatcher();\n      KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(myDragKeyEventDispatcher);\n    }\n    if (!isDraggingNow()) return;\n\n    Point xy = SwingUtilities.convertPoint(e.getComponent(), e.getPoint(), myDragPane);\n    if (myPressedPoint != null) {\n      xy.x -= myPressedPoint.x;\n      xy.y -= myPressedPoint.y;\n    }\n    myDragButtonImage.setLocation(xy);\n\n    SwingUtilities.convertPointToScreen(xy, myDragPane);\n\n    final Stripe stripe = myPane.getStripeFor(new Rectangle(xy, myDragButtonImage.getSize()), (Stripe)getParent());\n    if (stripe == null) {\n      if (myLastStripe != null) {\n        myLastStripe.resetDrop();\n      }\n    } else {\n      if (myLastStripe != null && myLastStripe != stripe) {\n        myLastStripe.resetDrop();\n      }\n      stripe.processDropButton(this, myDragButtonImage, xy);\n    }\n\n    myLastStripe = stripe;\n  }","commit_id":"96dfde44c5e85958e8a93f2990b5f09f9af79537","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @param template\n   * @param predefinedVarValues\n   * @param listener\n   * @return returns if template invokation is finished\n   */\n  /*public boolean startTemplate(@NotNull Template template,\n                               Map<String, String> predefinedVarValues,\n                               @Nullable final TemplateInvokationListener listener) {\n    final boolean[] templateEnded = new boolean[]{false};\n    final boolean[] templateFinished = new boolean[]{false};\n    myTemplateManager.startTemplate(myEditor, template, false, predefinedVarValues, new TemplateEditingAdapter() {\n      @Override\n      public void templateFinished(Template template, final boolean brokenOff) {\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          public void run() {\n            if (brokenOff) {\n              reformat();\n            }\n          }\n        });\n        if (brokenOff) return;\n        templateFinished[0] = true;\n        if (templateEnded[0] && listener != null) {\n          listener.finished(true);\n        }\n      }\n\n      @Override\n      public void waitingForInput(Template template) {\n        reformat();\n      }\n    });\n    templateEnded[0] = true;\n    if (templateFinished[0] && listener != null) {\n      listener.finished(false);\n    }\n    return templateFinished[0];\n  }*/\n  public boolean startTemplate(@NotNull TemplateImpl template,\n                               Map<String, String> predefinedVarValues,\n                               @Nullable final TemplateInvokationListener listener) {\n    moveToOffset(myBuilder.insertTemplate(myOffset, template, predefinedVarValues));\n    if (listener != null) {\n      listener.finished(false);\n    }\n    return true;\n  }","id":103387,"modified_method":"/**\n   * @param template\n   * @param predefinedVarValues\n   * @param listener\n   * @return returns if template invokation is finished\n   */\n  /*public boolean startTemplate(@NotNull Template template,\n                               Map<String, String> predefinedVarValues,\n                               @Nullable final TemplateInvokationListener listener) {\n    final boolean[] templateEnded = new boolean[]{false};\n    final boolean[] templateFinished = new boolean[]{false};\n    myTemplateManager.startTemplate(myEditor, template, false, predefinedVarValues, new TemplateEditingAdapter() {\n      @Override\n      public void templateFinished(Template template, final boolean brokenOff) {\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          public void run() {\n            if (brokenOff) {\n              reformat();\n            }\n          }\n        });\n        if (brokenOff) return;\n        templateFinished[0] = true;\n        if (templateEnded[0] && listener != null) {\n          listener.finished(true);\n        }\n      }\n\n      @Override\n      public void waitingForInput(Template template) {\n        reformat();\n      }\n    });\n    templateEnded[0] = true;\n    if (templateFinished[0] && listener != null) {\n      listener.finished(false);\n    }\n    return templateFinished[0];\n  }*/\n  public void startTemplate(@NotNull TemplateImpl template,\n                            Map<String, String> predefinedVarValues) {\n    int offset = myBuilder.insertTemplate(myOffset, template, predefinedVarValues);\n    moveToOffset(offset);\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @param key\n   * @param predefinedVarValues\n   * @param listener            @return returns if template invokation is finished\n   */\n  public boolean startTemplate(@NotNull String key,\n                               Map<String, String> predefinedVarValues,\n                               @Nullable TemplateInvokationListener listener) {\n    List<TemplateImpl> templates = getMatchingTemplates(key);\n    templates = filterApplicableCandidates(templates);\n    if (templates.size() > 0) {\n      TemplateImpl template = templates.get(0);\n      return startTemplate(template, predefinedVarValues, listener);\n    }\n    else if (listener != null) {\n      listener.finished(false);\n    }\n    return true;\n  }","id":103388,"modified_method":"/**\n   * @param key\n   * @param predefinedVarValues\n   * @param listener            @return returns if template invokation is finished\n   */\n  public void startTemplate(@NotNull String key,\n                            Map<String, String> predefinedVarValues) {\n    List<TemplateImpl> templates = getMatchingTemplates(key);\n    templates = filterApplicableCandidates(templates);\n    if (templates.size() > 0) {\n      TemplateImpl template = templates.get(0);\n      startTemplate(template, predefinedVarValues);\n    }\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    final Document document = myEditor.getDocument();\n    final VirtualFile file = FileDocumentManager.getInstance().getFile(document);\n    if (file != null) {\n      ReadonlyStatusHandler.getInstance(myFile.getProject()).ensureFilesWritable(file);\n    }\n\n    String selection = myEditor.getSelectionModel().getSelectedText();\n\n    if (selection != null) {\n      selection = selection.trim();\n      final CustomTemplateCallback callback = new CustomTemplateCallback(myEditor, myFile);\n      myTemplate.wrap(selection, callback, new TemplateInvokationListener() {\n        public void finished(boolean inSeparateEvent) {\n          callback.finish();\n        }\n      });\n    }\n  }","id":103389,"modified_method":"public void actionPerformed(AnActionEvent e) {\n    final Document document = myEditor.getDocument();\n    final VirtualFile file = FileDocumentManager.getInstance().getFile(document);\n    if (file != null) {\n      ReadonlyStatusHandler.getInstance(myFile.getProject()).ensureFilesWritable(file);\n    }\n\n    String selection = myEditor.getSelectionModel().getSelectedText();\n\n    if (selection != null) {\n      selection = selection.trim();\n      final CustomTemplateCallback callback = new CustomTemplateCallback(myEditor, myFile);\n      myTemplate.wrap(selection, callback, new TemplateInvokationListener() {\n        public void finished() {\n          callback.finish();\n        }\n      });\n    }\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean invoke(int startIndex) {\n    final int n = myTokens.size();\n    TemplateToken templateToken = null;\n    int number = -1;\n    for (int i = startIndex; i < n; i++) {\n      final int finalI = i;\n      Token token = myTokens.get(i);\n      switch (myState) {\n        case OPERATION:\n          if (templateToken != null) {\n            if (token instanceof MarkerToken || token instanceof OperationToken) {\n              final char sign = token instanceof OperationToken ? ((OperationToken)token).mySign : XmlZenCodingTemplate.MARKER;\n              if (sign == '+' || (mySurroundedText == null && sign == XmlZenCodingTemplate.MARKER)) {\n                final Object key = new Object();\n                myCallback.fixStartOfTemplate(key);\n                TemplateInvokationListener listener = new TemplateInvokationListener() {\n                  public void finished(boolean inSeparateEvent) {\n                    myState = State.WORD;\n                    if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n                      myCallback.fixEndOffset();\n                    }\n                    if (sign == '+') {\n                      myCallback.gotoEndOfTemplate(key);\n                    }\n                    if (inSeparateEvent) {\n                      invoke(finalI + 1);\n                    }\n                  }\n                };\n                if (!invokeTemplate(templateToken, myCallback, listener, 0)) {\n                  return false;\n                }\n                templateToken = null;\n              }\n              else if (sign == '>' || (mySurroundedText != null && sign == XmlZenCodingTemplate.MARKER)) {\n                if (!startTemplateAndGotoChild(templateToken, finalI)) {\n                  return false;\n                }\n                templateToken = null;\n              }\n              else if (sign == '*') {\n                myState = State.NUMBER;\n              }\n            }\n            else {\n              fail();\n            }\n          }\n          break;\n        case WORD:\n          if (token instanceof TemplateToken) {\n            templateToken = ((TemplateToken)token);\n            myState = State.OPERATION;\n          }\n          else {\n            fail();\n          }\n          break;\n        case NUMBER:\n          if (token instanceof NumberToken) {\n            number = ((NumberToken)token).myNumber;\n            myState = State.AFTER_NUMBER;\n          }\n          else {\n            fail();\n          }\n          break;\n        case AFTER_NUMBER:\n          if (token instanceof MarkerToken || token instanceof OperationToken) {\n            char sign = token instanceof OperationToken ? ((OperationToken)token).mySign : XmlZenCodingTemplate.MARKER;\n            if (sign == '+' || (mySurroundedText == null && sign == XmlZenCodingTemplate.MARKER)) {\n              if (!invokeTemplateSeveralTimes(templateToken, 0, number, finalI)) {\n                return false;\n              }\n              templateToken = null;\n            }\n            else if (number > 1) {\n              return invokeTemplateAndProcessTail(templateToken, 0, number, i + 1, startIndex != myFromIndex);\n            }\n            else {\n              assert number == 1;\n              if (!startTemplateAndGotoChild(templateToken, finalI)) {\n                return false;\n              }\n              templateToken = null;\n            }\n            myState = State.WORD;\n          }\n          else {\n            fail();\n          }\n          break;\n      }\n    }\n    if (mySurroundedText != null) {\n      insertText(myCallback, mySurroundedText);\n    }\n    finish(startIndex != myFromIndex);\n    return true;\n  }","id":103390,"modified_method":"private void invoke(int startIndex) {\n    final int n = myTokens.size();\n    TemplateToken templateToken = null;\n    int number = -1;\n    for (int i = startIndex; i < n; i++) {\n      Token token = myTokens.get(i);\n      switch (myState) {\n        case OPERATION:\n          if (templateToken != null) {\n            if (token instanceof MarkerToken || token instanceof OperationToken) {\n              final char sign = token instanceof OperationToken ? ((OperationToken)token).mySign : XmlZenCodingTemplate.MARKER;\n              if (sign == '+' || (mySurroundedText == null && sign == XmlZenCodingTemplate.MARKER)) {\n                final Object key = new Object();\n                myCallback.fixStartOfTemplate(key);\n                invokeTemplate(templateToken, myCallback, 0);\n                myState = State.WORD;\n                if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n                  myCallback.fixEndOffset();\n                }\n                if (sign == '+') {\n                  myCallback.gotoEndOfTemplate(key);\n                }\n                templateToken = null;\n              }\n              else if (sign == '>' || (mySurroundedText != null && sign == XmlZenCodingTemplate.MARKER)) {\n                startTemplateAndGotoChild(templateToken);\n                templateToken = null;\n              }\n              else if (sign == '*') {\n                myState = State.NUMBER;\n              }\n            }\n            else {\n              fail();\n            }\n          }\n          break;\n        case WORD:\n          if (token instanceof TemplateToken) {\n            templateToken = ((TemplateToken)token);\n            myState = State.OPERATION;\n          }\n          else {\n            fail();\n          }\n          break;\n        case NUMBER:\n          if (token instanceof NumberToken) {\n            number = ((NumberToken)token).myNumber;\n            myState = State.AFTER_NUMBER;\n          }\n          else {\n            fail();\n          }\n          break;\n        case AFTER_NUMBER:\n          if (token instanceof MarkerToken || token instanceof OperationToken) {\n            char sign = token instanceof OperationToken ? ((OperationToken)token).mySign : XmlZenCodingTemplate.MARKER;\n            if (sign == '+' || (mySurroundedText == null && sign == XmlZenCodingTemplate.MARKER)) {\n              invokeTemplateSeveralTimes(templateToken, 0, number);\n              templateToken = null;\n            }\n            else if (number > 1) {\n              invokeTemplateAndProcessTail(templateToken, 0, number, i + 1);\n              return;\n            }\n            else {\n              assert number == 1;\n              startTemplateAndGotoChild(templateToken);\n              templateToken = null;\n            }\n            myState = State.WORD;\n          }\n          else {\n            fail();\n          }\n          break;\n      }\n    }\n    if (mySurroundedText != null) {\n      insertText(myCallback, mySurroundedText);\n    }\n    finish();\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean invokeTemplateSeveralTimes(final TemplateToken templateToken,\n                                             final int startIndex,\n                                             final int count,\n                                             final int globalIndex) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    for (int i = startIndex; i < count; i++) {\n      final int finalI = i;\n      TemplateInvokationListener listener = new TemplateInvokationListener() {\n        public void finished(boolean inSeparateEvent) {\n          myState = State.WORD;\n          if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n            myCallback.fixEndOffset();\n          }\n          myCallback.gotoEndOfTemplate(key);\n          if (inSeparateEvent) {\n            if (finalI + 1 < count) {\n              invokeTemplateSeveralTimes(templateToken, finalI + 1, count, globalIndex);\n            }\n            else {\n              invoke(globalIndex + 1);\n            }\n          }\n        }\n      };\n      if (!invokeTemplate(templateToken, myCallback, listener, i)) {\n        return false;\n      }\n    }\n    return true;\n  }","id":103391,"modified_method":"private void invokeTemplateSeveralTimes(final TemplateToken templateToken,\n                                          final int startIndex,\n                                          final int count) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    for (int i = startIndex; i < count; i++) {\n      invokeTemplate(templateToken, myCallback, i);\n      myState = State.WORD;\n      if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n        myCallback.fixEndOffset();\n      }\n      myCallback.gotoEndOfTemplate(key);\n    }\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean startTemplateAndGotoChild(TemplateToken templateToken, final int index) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    TemplateInvokationListener listener = new TemplateInvokationListener() {\n      public void finished(boolean inSeparateEvent) {\n        myState = State.WORD;\n        gotoChild(key);\n        if (inSeparateEvent) {\n          invoke(index + 1);\n        }\n      }\n    };\n    if (!invokeTemplate(templateToken, myCallback, listener, 0)) {\n      return false;\n    }\n    return true;\n  }","id":103392,"modified_method":"private void startTemplateAndGotoChild(TemplateToken templateToken) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    invokeTemplate(templateToken, myCallback, 0);\n    myState = State.WORD;\n    gotoChild(key);\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean invokeTemplate(TemplateToken token,\n                                        final CustomTemplateCallback callback,\n                                        final TemplateInvokationListener listener,\n                                        int numberInIteration) {\n    List<Pair<String, String>> attr2value = new ArrayList<Pair<String, String>>(token.myAttribute2Value);\n    if (callback.isLiveTemplateApplicable(token.myKey)) {\n      return invokeExistingLiveTemplate(token, callback, listener, numberInIteration, attr2value);\n    }\n    else {\n      TemplateImpl template = new TemplateImpl(\"\", \"\");\n      template.addTextSegment('<' + token.myKey);\n      if (attr2value.size() > 0) {\n        template.addVariable(ATTRS, \"\", \"\", false);\n        template.addVariableSegment(ATTRS);\n      }\n      template.addTextSegment(\">\");\n      if (XmlZenCodingTemplate.isTrueXml(callback) || !HtmlUtil.isSingleHtmlTag(token.myKey)) {\n        template.addVariableSegment(TemplateImpl.END);\n        template.addTextSegment(\"<\/\" + token.myKey + \">\");\n      }\n      template.setToReformat(true);\n      Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n      return callback.startTemplate(template, predefinedValues, listener);\n    }\n  }","id":103393,"modified_method":"private static void invokeTemplate(TemplateToken token,\n                                     final CustomTemplateCallback callback,\n                                     int numberInIteration) {\n    List<Pair<String, String>> attr2value = new ArrayList<Pair<String, String>>(token.myAttribute2Value);\n    if (callback.isLiveTemplateApplicable(token.myKey)) {\n      invokeExistingLiveTemplate(token, callback, numberInIteration, attr2value);\n    }\n    else {\n      TemplateImpl template = new TemplateImpl(\"\", \"\");\n      template.addTextSegment('<' + token.myKey);\n      if (attr2value.size() > 0) {\n        template.addVariable(ATTRS, \"\", \"\", false);\n        template.addVariableSegment(ATTRS);\n      }\n      template.addTextSegment(\">\");\n      if (XmlZenCodingTemplate.isTrueXml(callback) || !HtmlUtil.isSingleHtmlTag(token.myKey)) {\n        template.addVariableSegment(TemplateImpl.END);\n        template.addTextSegment(\"<\/\" + token.myKey + \">\");\n      }\n      template.setToReformat(true);\n      Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n      callback.startTemplate(template, predefinedValues);\n    }\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean invokeTemplateAndProcessTail(final TemplateToken templateToken,\n                                               final int startIndex,\n                                               final int count,\n                                               final int tailStart,\n                                               boolean separateEvent) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    for (int i = startIndex; i < count; i++) {\n      final int finalI = i;\n      final boolean[] flag = new boolean[]{false};\n      TemplateInvokationListener listener = new TemplateInvokationListener() {\n        public void finished(boolean inSeparateEvent) {\n          gotoChild(key);\n          if (interpret(myTokens, tailStart, myCallback, State.WORD, mySurroundedText, new TemplateInvokationListener() {\n            public void finished(boolean inSeparateEvent) {\n              if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n                myCallback.fixEndOffset();\n              }\n              myCallback.gotoEndOfTemplate(key);\n              if (inSeparateEvent) {\n                invokeTemplateAndProcessTail(templateToken, finalI + 1, count, tailStart, true);\n              }\n            }\n          })) {\n            if (inSeparateEvent) {\n              invokeTemplateAndProcessTail(templateToken, finalI + 1, count, tailStart, true);\n            }\n          }\n          else {\n            flag[0] = true;\n          }\n        }\n      };\n      if (!invokeTemplate(templateToken, myCallback, listener, i) || flag[0]) {\n        return false;\n      }\n    }\n    finish(separateEvent);\n    return true;\n  }","id":103394,"modified_method":"private void invokeTemplateAndProcessTail(final TemplateToken templateToken,\n                                            final int startIndex,\n                                            final int count,\n                                            final int tailStart) {\n    final Object key = new Object();\n    myCallback.fixStartOfTemplate(key);\n    for (int i = startIndex; i < count; i++) {\n      invokeTemplate(templateToken, myCallback, i);\n      gotoChild(key);\n      interpret(myTokens, tailStart, myCallback, State.WORD, mySurroundedText);\n      if (myCallback.getOffset() != myCallback.getEndOfTemplate(key)) {\n        myCallback.fixEndOffset();\n      }\n      myCallback.gotoEndOfTemplate(key);\n    }\n    finish();\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean interpret(List<Token> tokens,\n                                  int startIndex,\n                                  CustomTemplateCallback callback,\n                                  State initialState,\n                                  String surroundedText,\n                                  TemplateInvokationListener listener) {\n    XmlZenCodingInterpreter interpreter =\n      new XmlZenCodingInterpreter(tokens, startIndex, callback, initialState, surroundedText, listener);\n    return interpreter.invoke(startIndex);\n  }","id":103395,"modified_method":"public static void interpret(List<Token> tokens,\n                               int startIndex,\n                               CustomTemplateCallback callback,\n                               State initialState,\n                               String surroundedText) {\n    XmlZenCodingInterpreter interpreter =\n      new XmlZenCodingInterpreter(tokens, callback, initialState, surroundedText);\n    interpreter.invoke(startIndex);\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private XmlZenCodingInterpreter(List<Token> tokens,\n                                  int fromIndex,\n                                  CustomTemplateCallback callback,\n                                  State initialState,\n                                  String surroundedText,\n                                  TemplateInvokationListener listener) {\n    myTokens = tokens;\n    myFromIndex = fromIndex;\n    myCallback = callback;\n    mySurroundedText = surroundedText;\n    myListener = listener;\n    myState = initialState;\n  }","id":103396,"modified_method":"private XmlZenCodingInterpreter(List<Token> tokens,\n                                  CustomTemplateCallback callback,\n                                  State initialState,\n                                  String surroundedText) {\n    myTokens = tokens;\n    myCallback = callback;\n    mySurroundedText = surroundedText;\n    myState = initialState;\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean invokeExistingLiveTemplate(TemplateToken token,\n                                                    CustomTemplateCallback callback,\n                                                    TemplateInvokationListener listener,\n                                                    int numberInIteration,\n                                                    List<Pair<String, String>> attr2value) {\n    if (token.myTemplate != null) {\n      if (attr2value.size() > 0 || XmlZenCodingTemplate.isTrueXml(callback)) {\n        TemplateImpl modifiedTemplate = token.myTemplate.copy();\n        XmlTag tag = XmlZenCodingTemplate.parseXmlTagInTemplate(token.myTemplate.getString(), callback, true);\n        if (tag != null) {\n          for (Iterator<Pair<String, String>> iterator = attr2value.iterator(); iterator.hasNext();) {\n            Pair<String, String> pair = iterator.next();\n            if (tag.getAttribute(pair.first) != null) {\n              tag.setAttribute(pair.first, getValue(pair, numberInIteration));\n              iterator.remove();\n            }\n          }\n          if (XmlZenCodingTemplate.isTrueXml(callback)) {\n            closeUnclosingTags(tag);\n          }\n          String text = null;\n          if (!containsAttrsVar(modifiedTemplate) && attr2value.size() > 0) {\n            String textWithAttrs = addAttrsVar(modifiedTemplate, tag);\n            if (textWithAttrs != null) {\n              text = textWithAttrs;\n            }\n            else {\n              for (Iterator<Pair<String, String>> iterator = attr2value.iterator(); iterator.hasNext();) {\n                Pair<String, String> pair = iterator.next();\n                tag.setAttribute(pair.first, getValue(pair, numberInIteration));\n                iterator.remove();\n              }\n            }\n          }\n          if (text == null) {\n            text = tag.getContainingFile().getText();\n          }\n          modifiedTemplate.setString(text);\n          removeVariablesWhichHasNoSegment(modifiedTemplate);\n          Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n          return callback.startTemplate(modifiedTemplate, predefinedValues, listener);\n        }\n      }\n      return callback.startTemplate(token.myTemplate, null, listener);\n    }\n    else {\n      Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n      return callback.startTemplate(token.myKey, predefinedValues, listener);\n    }\n  }","id":103397,"modified_method":"private static void invokeExistingLiveTemplate(TemplateToken token,\n                                                 CustomTemplateCallback callback,\n                                                 int numberInIteration,\n                                                 List<Pair<String, String>> attr2value) {\n    if (token.myTemplate != null) {\n      if (attr2value.size() > 0 || XmlZenCodingTemplate.isTrueXml(callback)) {\n        TemplateImpl modifiedTemplate = token.myTemplate.copy();\n        XmlTag tag = XmlZenCodingTemplate.parseXmlTagInTemplate(token.myTemplate.getString(), callback, true);\n        if (tag != null) {\n          for (Iterator<Pair<String, String>> iterator = attr2value.iterator(); iterator.hasNext();) {\n            Pair<String, String> pair = iterator.next();\n            if (tag.getAttribute(pair.first) != null) {\n              tag.setAttribute(pair.first, getValue(pair, numberInIteration));\n              iterator.remove();\n            }\n          }\n          if (XmlZenCodingTemplate.isTrueXml(callback)) {\n            closeUnclosingTags(tag);\n          }\n          String text = null;\n          if (!containsAttrsVar(modifiedTemplate) && attr2value.size() > 0) {\n            String textWithAttrs = addAttrsVar(modifiedTemplate, tag);\n            if (textWithAttrs != null) {\n              text = textWithAttrs;\n            }\n            else {\n              for (Iterator<Pair<String, String>> iterator = attr2value.iterator(); iterator.hasNext();) {\n                Pair<String, String> pair = iterator.next();\n                tag.setAttribute(pair.first, getValue(pair, numberInIteration));\n                iterator.remove();\n              }\n            }\n          }\n          if (text == null) {\n            text = tag.getContainingFile().getText();\n          }\n          modifiedTemplate.setString(text);\n          removeVariablesWhichHasNoSegment(modifiedTemplate);\n          Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n          callback.startTemplate(modifiedTemplate, predefinedValues);\n          return;\n        }\n      }\n      callback.startTemplate(token.myTemplate, null);\n    }\n    else {\n      Map<String, String> predefinedValues = buildPredefinedValues(attr2value, numberInIteration);\n      callback.startTemplate(token.myKey, predefinedValues);\n    }\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void expand(String key,\n                             @NotNull CustomTemplateCallback callback,\n                             String surroundedText,\n                             @Nullable TemplateInvokationListener listener) {\n    List<Token> tokens = parse(key, callback);\n    assert tokens != null;\n    XmlZenCodingInterpreter.interpret(tokens, 0, callback, State.WORD, surroundedText, listener);\n  }","id":103398,"modified_method":"private static void expand(String key,\n                             @NotNull CustomTemplateCallback callback,\n                             String surroundedText) {\n    List<Token> tokens = parse(key, callback);\n    assert tokens != null;\n    XmlZenCodingInterpreter.interpret(tokens, 0, callback, State.WORD, surroundedText);\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void expand(String key, @NotNull CustomTemplateCallback callback, @Nullable TemplateInvokationListener listener) {\n    expand(key, callback, null, listener);\n  }","id":103399,"modified_method":"public void expand(String key, @NotNull CustomTemplateCallback callback) {\n    expand(key, callback, null);\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void doWrap(final String selection,\n                             final String abbreviation,\n                             final CustomTemplateCallback callback,\n                             final TemplateInvokationListener listener) {\n    ApplicationManager.getApplication().runWriteAction(new Runnable() {\n      public void run() {\n        CommandProcessor.getInstance().executeCommand(callback.getProject(), new Runnable() {\n          public void run() {\n            EditorModificationUtil.deleteSelectedText(callback.getEditor());\n            PsiDocumentManager.getInstance(callback.getProject()).commitAllDocuments();\n            callback.fixInitialState();\n            expand(abbreviation, callback, selection, listener);\n          }\n        }, CodeInsightBundle.message(\"insert.code.template.command\"), null);\n      }\n    });\n  }","id":103400,"modified_method":"private static void doWrap(final String selection,\n                             final String abbreviation,\n                             final CustomTemplateCallback callback,\n                             final TemplateInvokationListener listener) {\n    ApplicationManager.getApplication().runWriteAction(new Runnable() {\n      public void run() {\n        CommandProcessor.getInstance().executeCommand(callback.getProject(), new Runnable() {\n          public void run() {\n            EditorModificationUtil.deleteSelectedText(callback.getEditor());\n            PsiDocumentManager.getInstance(callback.getProject()).commitAllDocuments();\n            callback.fixInitialState();\n            expand(abbreviation, callback, selection);\n            if (listener != null) {\n              listener.finished();\n            }\n          }\n        }, CodeInsightBundle.message(\"insert.code.template.command\"), null);\n      }\n    });\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean startZenCoding(Editor editor, PsiFile file, String abbreviation) {\n    int caretAt = editor.getCaretModel().getOffset();\n    if (isApplicable(file, caretAt)) {\n      final CustomTemplateCallback callback = new CustomTemplateCallback(editor, file);\n      TemplateInvokationListener listener = new TemplateInvokationListener() {\n        public void finished(boolean inSeparateEvent) {\n          callback.finish();\n        }\n      };\n      if (abbreviation != null) {\n        String selection = callback.getEditor().getSelectionModel().getSelectedText();\n        assert selection != null;\n        selection = selection.trim();\n        doWrap(selection, abbreviation, callback, listener);\n      }\n      else {\n        XmlZenCodingTemplate template = new XmlZenCodingTemplate();\n        String key = template.computeTemplateKey(callback);\n        if (key != null) {\n          int offsetBeforeKey = caretAt - key.length();\n          callback.getEditor().getDocument().deleteString(offsetBeforeKey, caretAt);\n          template.expand(key, callback, listener);\n          return true;\n        }\n        // if it is simple live template invokation, we should start it using TemplateManager because template may be ambiguous\n        /*TemplateManager manager = TemplateManager.getInstance(file.getProject());\n        return manager.startTemplate(editor, TemplateSettings.getInstance().getDefaultShortcutChar());*/\n      }\n    }\n    return false;\n  }","id":103401,"modified_method":"public static boolean startZenCoding(Editor editor, PsiFile file, String abbreviation) {\n    int caretAt = editor.getCaretModel().getOffset();\n    if (isApplicable(file, caretAt)) {\n      final CustomTemplateCallback callback = new CustomTemplateCallback(editor, file);\n      if (abbreviation != null) {\n        String selection = callback.getEditor().getSelectionModel().getSelectedText();\n        assert selection != null;\n        selection = selection.trim();\n        doWrap(selection, abbreviation, callback, new TemplateInvokationListener() {\n          public void finished() {\n            callback.finish();\n          }\n        });\n      }\n      else {\n        XmlZenCodingTemplate template = new XmlZenCodingTemplate();\n        String key = template.computeTemplateKey(callback);\n        if (key != null) {\n          int offsetBeforeKey = caretAt - key.length();\n          callback.getEditor().getDocument().deleteString(offsetBeforeKey, caretAt);\n          template.expand(key, callback);\n          callback.finish();\n          return true;\n        }\n        // if it is simple live template invokation, we should start it using TemplateManager because template may be ambiguous\n        /*TemplateManager manager = TemplateManager.getInstance(file.getProject());\n        return manager.startTemplate(editor, TemplateSettings.getInstance().getDefaultShortcutChar());*/\n      }\n    }\n    return false;\n  }","commit_id":"6041a907e73047bdc11391f5e95cab34759b30b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void foundRedundantNullCheck(Location location, RedundantBranch redundantBranch) {\n\t\tString sourceFile = classContext.getJavaClass().getSourceFileName();\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\n\t\tboolean redundantNullCheck = redundantBranch.checkedValue;\n\t\tint priority = redundantNullCheck ? LOW_PRIORITY : NORMAL_PRIORITY;\n\t\t\n\t\tBugInstance bugInstance =\n\t\t\tnew BugInstance(this, \"RCN_REDUNDANT_COMPARISON_TO_NULL\", priority)\n\t\t\t\t.addClassAndMethod(methodGen, sourceFile)\n\t\t\t\t.addSourceLine(methodGen, sourceFile, location.getHandle());\n\t\t\n\t\tif (AnalysisContext.currentAnalysisContext().getBoolProperty(\n\t\t\t\tFindBugsAnalysisProperties.RELAXED_REPORTING_MODE)) {\n\t\t\tWarningPropertySet propertySet = new WarningPropertySet();\n\t\t\tWarningPropertyUtil.addPropertiesForLocation(propertySet, classContext, method, location);\n\t\t\tif (redundantBranch.checkedValue) {\n\t\t\t\tpropertySet.addProperty(NullDerefProperty.CHECKED_VALUE);\n\t\t\t}\n\t\t\t\n\t\t\tpropertySet.decorateBugInstance(bugInstance);\n\t\t\t\n\t\t\tpriority = propertySet.computePriority(NORMAL_PRIORITY);\n\t\t\tbugInstance.setPriority(priority);\n\t\t}\n\n\t\tbugReporter.reportBug(bugInstance);\n\t}","id":103402,"modified_method":"public void foundRedundantNullCheck(Location location, RedundantBranch redundantBranch) {\n\t\tString sourceFile = classContext.getJavaClass().getSourceFileName();\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\t\t\n\t\tboolean isChecked = redundantBranch.firstValue.isChecked() ||  redundantBranch.secondValue.isChecked();\n\t\tboolean wouldHaveBeenAKaboom = redundantBranch.firstValue.wouldHaveBeenAKaboom() ||  redundantBranch.secondValue.wouldHaveBeenAKaboom();\n\t\t\n\t\t\n\t\tint priority = NORMAL_PRIORITY;\n\t\tif (isChecked) priority--;\n\t\tif (wouldHaveBeenAKaboom) priority--;\n\t\t\n\t\tboolean bothNull =  redundantBranch.firstValue.isDefinitelyNull() && redundantBranch.secondValue.isDefinitelyNull();\t\t\n\t\t\n\t\tString warning;\n\t\tif (bothNull) warning = \"RCN_REDUNDANT_COMPARISON_TO_NULL_BOTH_NULL\";\n\t\telse warning = \"RCN_REDUNDANT_COMPARISON_TO_NULL_DIFFERENT\";\n\t\t\n\t\tBugInstance bugInstance =\n\t\t\tnew BugInstance(this, warning, priority)\n\t\t\t\t.addClassAndMethod(methodGen, sourceFile)\n\t\t\t\t.addSourceLine(methodGen, sourceFile, location.getHandle());\n\t\t\n\t\tif (AnalysisContext.currentAnalysisContext().getBoolProperty(\n\t\t\t\tFindBugsAnalysisProperties.RELAXED_REPORTING_MODE)) {\n\t\t\tWarningPropertySet propertySet = new WarningPropertySet();\n\t\t\tWarningPropertyUtil.addPropertiesForLocation(propertySet, classContext, method, location);\n\t\t\tif (isChecked) \n\t\t\t\tpropertySet.addProperty(NullDerefProperty.CHECKED_VALUE);\n\t\t\tif (wouldHaveBeenAKaboom) \n\t\t\t\tpropertySet.addProperty(NullDerefProperty.WOULD_HAVE_BEEN_A_KABOOM);\n\t\t\t\n\t\t\t\n\t\t\tpropertySet.decorateBugInstance(bugInstance);\n\t\t\t\n\t\t\tpriority = propertySet.computePriority(NORMAL_PRIORITY);\n\t\t\tbugInstance.setPriority(priority);\n\t\t}\n\n\t\tbugReporter.reportBug(bugInstance);\n\t}","commit_id":"9ce36d392d218f4ab6bab5a6483703aba7ce8335","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void analyzeRefComparisonBranch(\n\t\t\tBasicBlock basicBlock,\n\t\t\tInstructionHandle lastHandle) throws DataflowAnalysisException {\n\t\t\n\t\tLocation location = new Location(lastHandle, basicBlock);\n\n\t\tIsNullValueFrame frame = invDataflow.getFactAtLocation(location);\n\t\tif (!frame.isValid()) {\n\t\t\t// Probably dead code due to pruning infeasible exception edges.\n\t\t\treturn;\n\t\t}\n\t\tif (frame.getStackDepth() < 2)\n\t\t\tthrow new DataflowAnalysisException(\"Stack underflow at \" + lastHandle);\n\n\t\t// Find the line number.\n\t\tint lineNumber = getLineNumber(method, lastHandle);\n\t\tif (lineNumber < 0)\n\t\t\treturn;\n\n\t\tint numSlots = frame.getNumSlots();\n\t\tIsNullValue top = frame.getValue(numSlots - 1);\n\t\tIsNullValue topNext = frame.getValue(numSlots - 2);\n\n\t\tboolean definitelySame = top.isDefinitelyNull() && topNext.isDefinitelyNull();\n\t\tboolean definitelyDifferent =\n\t\t        (top.isDefinitelyNull() && topNext.isDefinitelyNotNull()) ||\n\t\t        (top.isDefinitelyNotNull() && topNext.isDefinitelyNull());\n\n\t\tif (definitelySame || definitelyDifferent) {\n\t\t\tif (definitelySame) {\n\t\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" always same\");\n\t\t\t\tdefinitelySameBranchSet.set(lineNumber);\n\t\t\t}\n\t\t\tif (definitelyDifferent) {\n\t\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" always different\");\n\t\t\t\tdefinitelyDifferentBranchSet.set(lineNumber);\n\t\t\t}\n\n\t\t\t// If at least one of the values compared was\n\t\t\t// the result of an explicit null value or null check,\n\t\t\t// remember it.  We report these cases as low\n\t\t\t// priority.\n\t\t\tboolean checkedValue = top.isChecked() || topNext.isChecked();\n\n\t\t\t//reportRedundantNullCheck(classContext, method, lastHandle);\n\t\t\tRedundantBranch redundantBranch = new RedundantBranch(location, lineNumber, checkedValue);\n\t\t\tif (DEBUG) System.out.println(\"Adding redundant branch: \" + redundantBranch);\n\t\t\tredundantBranchList.add(redundantBranch);\n\t\t} else {\n\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" undetermined\");\n\t\t\tundeterminedBranchSet.set(lineNumber);\n\t\t}\n\t}","id":103403,"modified_method":"private void analyzeRefComparisonBranch(\n\t\t\tBasicBlock basicBlock,\n\t\t\tInstructionHandle lastHandle) throws DataflowAnalysisException {\n\t\t\n\t\tLocation location = new Location(lastHandle, basicBlock);\n\n\t\tIsNullValueFrame frame = invDataflow.getFactAtLocation(location);\n\t\tif (!frame.isValid()) {\n\t\t\t// Probably dead code due to pruning infeasible exception edges.\n\t\t\treturn;\n\t\t}\n\t\tif (frame.getStackDepth() < 2)\n\t\t\tthrow new DataflowAnalysisException(\"Stack underflow at \" + lastHandle);\n\n\t\t// Find the line number.\n\t\tint lineNumber = getLineNumber(method, lastHandle);\n\t\tif (lineNumber < 0)\n\t\t\treturn;\n\n\t\tint numSlots = frame.getNumSlots();\n\t\tIsNullValue top = frame.getValue(numSlots - 1);\n\t\tIsNullValue topNext = frame.getValue(numSlots - 2);\n\n\t\tboolean definitelySame = top.isDefinitelyNull() && topNext.isDefinitelyNull();\n\t\tboolean definitelyDifferent =\n\t\t        (top.isDefinitelyNull() && topNext.isDefinitelyNotNull()) ||\n\t\t        (top.isDefinitelyNotNull() && topNext.isDefinitelyNull());\n\n\t\tif (definitelySame || definitelyDifferent) {\n\t\t\tif (definitelySame) {\n\t\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" always same\");\n\t\t\t\tdefinitelySameBranchSet.set(lineNumber);\n\t\t\t}\n\t\t\tif (definitelyDifferent) {\n\t\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" always different\");\n\t\t\t\tdefinitelyDifferentBranchSet.set(lineNumber);\n\t\t\t}\n\n\n\t\t\t//reportRedundantNullCheck(classContext, method, lastHandle);\n\t\t\tRedundantBranch redundantBranch = new RedundantBranch(location, lineNumber, top, topNext);\n\t\t\tif (DEBUG) System.out.println(\"Adding redundant branch: \" + redundantBranch);\n\t\t\tredundantBranchList.add(redundantBranch);\n\t\t} else {\n\t\t\tif (DEBUG) System.out.println(\"Line \" + lineNumber + \" undetermined\");\n\t\t\tundeterminedBranchSet.set(lineNumber);\n\t\t}\n\t}","commit_id":"9ce36d392d218f4ab6bab5a6483703aba7ce8335","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Constructor.\n\t * \n\t * @param location     Location of ref comparison\n\t * @param lineNumber   line number of ref comparison\n\t * @param checkedValue true if the value is a \"checked\" value\n\t */\n\tpublic RedundantBranch(Location location, int lineNumber, boolean checkedValue) {\n\t\tthis.location = location;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.checkedValue = checkedValue;\n\t}","id":103404,"modified_method":"/**\n\t * Constructor.\n\t * \n\t * @param location     Location of ref comparison\n\t * @param lineNumber   line number of ref comparison\n\t */\n\tpublic RedundantBranch(Location location, int lineNumber,  IsNullValue firstValue, IsNullValue secondValue) {\n\t\tthis.location = location;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.firstValue = firstValue;\n\t\tthis.secondValue = secondValue;\n\t}","commit_id":"9ce36d392d218f4ab6bab5a6483703aba7ce8335","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void analyzeMethod(ClassContext classContext, Method method)\n\t\t\tthrows DataflowAnalysisException, CFGBuilderException {\n\t\t\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"    Analyzing method \" + classContext.getJavaClass().getClassName() + \".\" + method.getName());\n\t\t}\n\t\t\n\t\tJavaClass javaClass = classContext.getJavaClass();\n\t\t\n\t\tBugAccumulator accumulator = new BugAccumulator(bugReporter);\n\t\tDataflow<BitSet, LiveLocalStoreAnalysis> llsaDataflow =\n\t\t\tclassContext.getLiveLocalStoreDataflow(method);\n\t\t\n\t\tint numLocals = method.getCode().getMaxLocals();\n\t\tint [] localStoreCount = new int[numLocals];\n\t\tint [] localLoadCount = new int[numLocals];\n\t\tint [] localIncrementCount = new int[numLocals];\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\t\tCFG cfg = classContext.getCFG(method);\n\t\tBitSet liveStoreSetAtEntry = llsaDataflow.getAnalysis().getResultFact(cfg.getEntry());\n\t\tBitSet complainedAbout = new BitSet();\n\t\t\n\t\t// Get number of locals that are parameters.\n\t\tint localsThatAreParameters = PreorderVisitor.getNumberArguments(method.getSignature());\n\t\tif (!method.isStatic()) localsThatAreParameters++;\n\t\t\n\t\t// Scan method to determine number of loads, stores, and increments\n\t\t// of local variables.\n\t\tcountLocalStoresLoadsAndIncrements(\n\t\t\t\tlocalStoreCount, localLoadCount, localIncrementCount, cfg);\n\t\t\n\t\t// Scan method for\n\t\t// - dead stores\n\t\t// - stores to parameters that are dead upon entry to the method\n\t\tfor (Iterator<Location> i = cfg.locationIterator(); i.hasNext(); ) {\n\t\t\tLocation location = i.next();\n\t\t\t\n\t\t\tBugInstance pendingBugReportAboutOverwrittenParameter = null;\n\t\t\ttry {\n\t\t\tWarningPropertySet propertySet = new WarningPropertySet();\n\t\t\t// Skip any instruction which is not a store\n\t\t\tif (!isStore(location))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t// Heuristic: exception handler blocks often contain\n\t\t\t// dead stores generated by the compiler.\n\t\t\tif (location.getBasicBlock().isExceptionHandler())\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.EXCEPTION_HANDLER);\n\t\t\t\n\t\t\tIndexedInstruction ins = (IndexedInstruction) location.getHandle().getInstruction();\n\t\t\t\n\t\t\t\n\t\t\tLocalVariableAnnotation lvAnnotation \n\t\t\t= LocalVariableAnnotation.getLocalVariableAnnotation(method, location, ins);\t\t\t\n\t\t\t\n\t\t\tString name = lvAnnotation.getName();\n            if (name.charAt(0) == '$' || name.charAt(0) == '_') propertySet.addProperty(DeadLocalStoreProperty.SYNTHETIC_NAME);\n            if (EXCLUDED_LOCALS.contains(name)) continue;\n\t\t\tpropertySet.setProperty(DeadLocalStoreProperty.LOCAL_NAME, name);\n\t\t\t\n\t\t\tint local = ins.getIndex();\n\t\t\t// Is this a store to a parameter which was dead on entry to the method?\n\t\t\tboolean parameterThatIsDeadAtEntry = local < localsThatAreParameters\n\t\t\t\t&& !llsaDataflow.getAnalysis().isStoreAlive(liveStoreSetAtEntry, local);\n\t\t\tif (parameterThatIsDeadAtEntry && !complainedAbout.get(local)) {\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t// TODO: add warning properties?\n\t\t\t\tpendingBugReportAboutOverwrittenParameter = new BugInstance(this, \"IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN\", NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(methodGen, javaClass.getSourceFileName())\n\t\t\t\t\t.add(lvAnnotation)\n\t\t\t\t\t.addSourceLine(classContext, methodGen, javaClass.getSourceFileName(), location.getHandle());\n\t\t\t\tcomplainedAbout.set(local);\n\t\t\t}\n\t\t\t\n\t\t\tboolean storeOfNull = false;\n\t\t\tInstructionHandle prevInsHandle = location.getHandle().getPrev();\n\t\t\tif (prevInsHandle != null) {\n\t\t\t\tInstruction prevIns = prevInsHandle.getInstruction();\n\t\t\t\tif (prevIns instanceof LDC || prevIns instanceof ConstantPushInstruction)\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( prevIns instanceof ACONST_NULL) {\n\t\t\t\t\tstoreOfNull = true;\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.STORE_OF_NULL);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t// Get live stores at this instruction.\n\t\t\t// Note that the analysis also computes which stores were\n\t\t\t// killed by a subsequent unconditional store.\n\t\t\tBitSet liveStoreSet = llsaDataflow.getAnalysis().getFactAtLocation(location);\n\t\t\t\n\t\t\t// Is store alive?\n\t\t\tif (llsaDataflow.getAnalysis().isStoreAlive(liveStoreSet, local))\n\t\t\t\tcontinue;\n\t\t\t// Store is dead\n\t\t\t\n\t\t\t// Ignore assignments that were killed by a subsequent assignment.\n\t\t\tboolean killedBySubsequentStore = llsaDataflow.getAnalysis().killedByStore(liveStoreSet, local);\n\t\t\tif (killedBySubsequentStore)\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.KILLED_BY_SUBSEQUENT_STORE);\n\t\t\t\n\t\t\t// Ignore dead assignments of null and 0.\n\t\t\t// These often indicate defensive programming.\n\t\t\tInstructionHandle prev = location.getBasicBlock().getPredecessorOf(location.getHandle());\n\t\t\tint prevOpCode = -1;\n\n\t\t\tif (prev != null\n\t\t\t\t\t&& defensiveConstantValueOpcodes.get(prev.getInstruction().getOpcode())) {\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEFENSIVE_CONSTANT_OPCODE);\n\t\t\t\tprevOpCode = prev.getInstruction().getOpcode();\n\t\t\t\t}\n\n\t\t\tif (prev != null && prev.getInstruction() instanceof GETFIELD) {\n\t\t\t\tInstructionHandle prev2 = prev.getPrev();\n\n\t\t\t\tif (prev2 != null\n                                && prev2.getInstruction() instanceof ALOAD)\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.CACHING_VALUE);\n\t\t\t}\n\n\t\t\t\n\t\t\tif (ins instanceof IINC) {\n\t\t\t\t// special handling of IINC\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEAD_INCREMENT);\n\t\t\t\tif (localIncrementCount[local] == 1) {\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.SINGLE_DEAD_INCREMENT);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (ins instanceof ASTORE && prev != null) { \n\t\t\t\t// Look for objects created but never used\n\t\t\t\t\n\t\t\t\tInstruction prevIns = prev.getInstruction();\n\t\t\t\tif ((prevIns instanceof INVOKESPECIAL &&\n\t\t\t\t\t\t((INVOKESPECIAL)prevIns).getMethodName(methodGen.getConstantPool()).equals(\"<init>\"))\n\t\t\t\t\t\t|| prevIns instanceof ANEWARRAY\n\t\t\t\t\t\t|| prevIns instanceof NEWARRAY\n\t\t\t\t\t\t|| prevIns instanceof MULTIANEWARRAY) {\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEAD_OBJECT_STORE);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (!killedBySubsequentStore\n\t\t\t\t    && localStoreCount[local] == 2 && localLoadCount[local] > 0) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.TWO_STORES_MULTIPLE_LOADS);\n\t\t\t\t\n\t\t\t} else if (!parameterThatIsDeadAtEntry && localStoreCount[local] == 1) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.SINGLE_STORE);\n\t\t\t\t\n\t\t\t} else if (!parameterThatIsDeadAtEntry && localLoadCount[local] == 0) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.NO_LOADS);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (parameterThatIsDeadAtEntry) {\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.PARAM_DEAD_ON_ENTRY);\n\t\t\t\tif (pendingBugReportAboutOverwrittenParameter != null)\n\t\t\t\t\tpendingBugReportAboutOverwrittenParameter.setPriority(Detector.HIGH_PRIORITY);\n\t\t\t}\n\n\t\t\tif (localStoreCount[local] > 3) \n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.MANY_STORES);\n\t\t\tint priority = propertySet.computePriority(NORMAL_PRIORITY);\n\t\t\tif (priority <= Detector.EXP_PRIORITY) {\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Report the warning\t\t\t\t\n\t\t\t\tBugInstance bugInstance = new BugInstance(this, storeOfNull ? \"DLS_DEAD_LOCAL_STORE_OF_NULL\" : \"DLS_DEAD_LOCAL_STORE\", priority)\n\t\t\t\t\t.addClassAndMethod(methodGen, javaClass.getSourceFileName())\n\t\t\t\t\t.add(lvAnnotation);\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t// If in relaxed reporting mode, encode heuristic information.\n\t\t\t\tif (FindBugsAnalysisFeatures.isRelaxedMode()) {\n\t\t\t\t\t// Add general-purpose warning properties\n\t\t\t\t\tWarningPropertyUtil.addPropertiesForLocation(\n\t\t\t\t\t\t\tpropertySet,\n\t\t\t\t\t\t\tclassContext,\n\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\tlocation);\n\t\t\t\t\t\n\t\t\t\t\t// Turn all warning properties into BugProperties\n\t\t\t\t\tpropertySet.decorateBugInstance(bugInstance);\n\t\t\t\t}\n\t\t\t\tSourceLineAnnotation sourceLineAnnotation =\n\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(classContext, methodGen, javaClass.getSourceFileName(), \n\t\t\t\t\t\t\tlocation.getHandle());\n\t\t\t\t\n\n\t\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\n\t\t\t\t\tjavaClass.getSourceFileName() + \" : \" +\n\t\t\t\t\t\tmethodGen.getName());\n\t\t\t\tSystem.out.println(\"priority: \" + priority);\n\t\t\t\tSystem.out.println(\"Reporting \" + bugInstance);\n\t\t\t\tSystem.out.println(propertySet);\n\t\t\t\t}\n\t\t\t\taccumulator.accumulateBug(bugInstance, sourceLineAnnotation);\n\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (pendingBugReportAboutOverwrittenParameter  != null) \n\t\t\t\t\tbugReporter.reportBug(pendingBugReportAboutOverwrittenParameter);\n\t\t\t}\n\t\t}\n\t\taccumulator.reportAccumulatedBugs();\n\t}","id":103405,"modified_method":"private void analyzeMethod(ClassContext classContext, Method method)\n\t\t\tthrows DataflowAnalysisException, CFGBuilderException {\n\t\t\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"    Analyzing method \" + classContext.getJavaClass().getClassName() + \".\" + method.getName());\n\t\t}\n\t\t\n\t\tJavaClass javaClass = classContext.getJavaClass();\n\t\t\n\t\tBugAccumulator accumulator = new BugAccumulator(bugReporter);\n\t\tDataflow<BitSet, LiveLocalStoreAnalysis> llsaDataflow =\n\t\t\tclassContext.getLiveLocalStoreDataflow(method);\n\t\t\n\t\tint numLocals = method.getCode().getMaxLocals();\n\t\tint [] localStoreCount = new int[numLocals];\n\t\tint [] localLoadCount = new int[numLocals];\n\t\tint [] localIncrementCount = new int[numLocals];\n\t\tMethodGen methodGen = classContext.getMethodGen(method);\n\t\tCFG cfg = classContext.getCFG(method);\n\t\tBitSet liveStoreSetAtEntry = llsaDataflow.getAnalysis().getResultFact(cfg.getEntry());\n\t\tBitSet complainedAbout = new BitSet();\n\t\t\n\t\t// Get number of locals that are parameters.\n\t\tint localsThatAreParameters = PreorderVisitor.getNumberArguments(method.getSignature());\n\t\tif (!method.isStatic()) localsThatAreParameters++;\n\t\t\n\t\t// Scan method to determine number of loads, stores, and increments\n\t\t// of local variables.\n\t\tcountLocalStoresLoadsAndIncrements(\n\t\t\t\tlocalStoreCount, localLoadCount, localIncrementCount, cfg);\n\t\t\n\t\t// Scan method for\n\t\t// - dead stores\n\t\t// - stores to parameters that are dead upon entry to the method\n\t\tfor (Iterator<Location> i = cfg.locationIterator(); i.hasNext(); ) {\n\t\t\tLocation location = i.next();\n\t\t\t\n\t\t\tBugInstance pendingBugReportAboutOverwrittenParameter = null;\n\t\t\ttry {\n\t\t\tWarningPropertySet propertySet = new WarningPropertySet();\n\t\t\t// Skip any instruction which is not a store\n\t\t\tif (!isStore(location))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t// Heuristic: exception handler blocks often contain\n\t\t\t// dead stores generated by the compiler.\n\t\t\tif (location.getBasicBlock().isExceptionHandler())\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.EXCEPTION_HANDLER);\n\t\t\t\n\t\t\tIndexedInstruction ins = (IndexedInstruction) location.getHandle().getInstruction();\n\t\t\t\n\t\t\t\n\t\t\tLocalVariableAnnotation lvAnnotation \n\t\t\t= LocalVariableAnnotation.getLocalVariableAnnotation(method, location, ins);\t\t\t\n\t\t\t\n\t\t\tString name = lvAnnotation.getName();\n            if (name.charAt(0) == '$' || name.charAt(0) == '_') propertySet.addProperty(DeadLocalStoreProperty.SYNTHETIC_NAME);\n            if (EXCLUDED_LOCALS.contains(name)) continue;\n\t\t\tpropertySet.setProperty(DeadLocalStoreProperty.LOCAL_NAME, name);\n\t\t\t\n\t\t\tint local = ins.getIndex();\n            boolean isParameter = local < localsThatAreParameters;\n            if (isParameter)\n                propertySet.addProperty(DeadLocalStoreProperty.IS_PARAMETER);\n\t\t\t// Is this a store to a parameter which was dead on entry to the method?\n\t\t\tboolean parameterThatIsDeadAtEntry = isParameter\n\t\t\t\t&& !llsaDataflow.getAnalysis().isStoreAlive(liveStoreSetAtEntry, local);\n\t\t\tif (parameterThatIsDeadAtEntry && !complainedAbout.get(local)) {\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t// TODO: add warning properties?\n\t\t\t\tpendingBugReportAboutOverwrittenParameter = new BugInstance(this, \"IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN\", NORMAL_PRIORITY)\n\t\t\t\t\t.addClassAndMethod(methodGen, javaClass.getSourceFileName())\n\t\t\t\t\t.add(lvAnnotation)\n\t\t\t\t\t.addSourceLine(classContext, methodGen, javaClass.getSourceFileName(), location.getHandle());\n\t\t\t\tcomplainedAbout.set(local);\n\t\t\t}\n            // Get live stores at this instruction.\n            // Note that the analysis also computes which stores were\n            // killed by a subsequent unconditional store.\n            BitSet liveStoreSet = llsaDataflow.getAnalysis().getFactAtLocation(location);\n            \n            // Is store alive?\n            if (llsaDataflow.getAnalysis().isStoreAlive(liveStoreSet, local))\n                continue;\n            // Store is dead\n\n\t\t\tboolean storeOfNull = false;\n\t\t\tInstructionHandle prevInsHandle = location.getHandle().getPrev();\n\t\t\tif (prevInsHandle != null) {\n\t\t\t\tInstruction prevIns = prevInsHandle.getInstruction();\n\t\t\t\tif (prevIns instanceof LDC || prevIns instanceof ConstantPushInstruction)\n                    propertySet.addProperty(DeadLocalStoreProperty.STORE_OF_CONSTANT);\n                else if ( prevIns instanceof ACONST_NULL) {\n\t\t\t\t\tstoreOfNull = true;\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.STORE_OF_NULL);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t\n\t\t\t// Ignore assignments that were killed by a subsequent assignment.\n\t\t\tboolean killedBySubsequentStore = llsaDataflow.getAnalysis().killedByStore(liveStoreSet, local);\n\t\t\tif (killedBySubsequentStore)\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.KILLED_BY_SUBSEQUENT_STORE);\n\t\t\t\n\t\t\t// Ignore dead assignments of null and 0.\n\t\t\t// These often indicate defensive programming.\n\t\t\tInstructionHandle prev = location.getBasicBlock().getPredecessorOf(location.getHandle());\n\t\t\tint prevOpCode = -1;\n\n\t\t\tif (prev != null\n\t\t\t\t\t&& defensiveConstantValueOpcodes.get(prev.getInstruction().getOpcode())) {\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEFENSIVE_CONSTANT_OPCODE);\n\t\t\t\tprevOpCode = prev.getInstruction().getOpcode();\n\t\t\t\t}\n\n\t\t\tif (prev != null && prev.getInstruction() instanceof GETFIELD) {\n\t\t\t\tInstructionHandle prev2 = prev.getPrev();\n\n\t\t\t\tif (prev2 != null\n                                && prev2.getInstruction() instanceof ALOAD)\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.CACHING_VALUE);\n\t\t\t}\n\n\t\t\t\n\t\t\tif (ins instanceof IINC) {\n\t\t\t\t// special handling of IINC\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEAD_INCREMENT);\n\t\t\t\tif (localIncrementCount[local] == 1) {\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.SINGLE_DEAD_INCREMENT);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (ins instanceof ASTORE && prev != null) { \n\t\t\t\t// Look for objects created but never used\n\t\t\t\t\n\t\t\t\tInstruction prevIns = prev.getInstruction();\n\t\t\t\tif ((prevIns instanceof INVOKESPECIAL &&\n\t\t\t\t\t\t((INVOKESPECIAL)prevIns).getMethodName(methodGen.getConstantPool()).equals(\"<init>\"))\n\t\t\t\t\t\t|| prevIns instanceof ANEWARRAY\n\t\t\t\t\t\t|| prevIns instanceof NEWARRAY\n\t\t\t\t\t\t|| prevIns instanceof MULTIANEWARRAY) {\n\t\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.DEAD_OBJECT_STORE);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if (!killedBySubsequentStore\n\t\t\t\t    && localStoreCount[local] == 2 && localLoadCount[local] > 0) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.TWO_STORES_MULTIPLE_LOADS);\n\t\t\t\t\n\t\t\t} else if (!parameterThatIsDeadAtEntry && localStoreCount[local] == 1) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tif (!isParameter) propertySet.addProperty(DeadLocalStoreProperty.SINGLE_STORE);\n\t\t\t\t\n\t\t\t} else if (!parameterThatIsDeadAtEntry && localLoadCount[local] == 0) {\n\t\t\t\t// TODO: why is this significant?\n\t\t\t\t\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.NO_LOADS);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (parameterThatIsDeadAtEntry) {\n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.PARAM_DEAD_ON_ENTRY);\n\t\t\t\tif (pendingBugReportAboutOverwrittenParameter != null)\n\t\t\t\t\tpendingBugReportAboutOverwrittenParameter.setPriority(Detector.HIGH_PRIORITY);\n\t\t\t}\n\n\t\t\tif (localStoreCount[local] > 3) \n\t\t\t\tpropertySet.addProperty(DeadLocalStoreProperty.MANY_STORES);\n\t\t\tint priority = propertySet.computePriority(NORMAL_PRIORITY);\n\t\t\tif (priority <= Detector.EXP_PRIORITY) {\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Report the warning\t\t\t\t\n\t\t\t\tBugInstance bugInstance = new BugInstance(this, storeOfNull ? \"DLS_DEAD_LOCAL_STORE_OF_NULL\" : \"DLS_DEAD_LOCAL_STORE\", priority)\n\t\t\t\t\t.addClassAndMethod(methodGen, javaClass.getSourceFileName())\n\t\t\t\t\t.add(lvAnnotation);\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t// If in relaxed reporting mode, encode heuristic information.\n\t\t\t\tif (FindBugsAnalysisFeatures.isRelaxedMode()) {\n\t\t\t\t\t// Add general-purpose warning properties\n\t\t\t\t\tWarningPropertyUtil.addPropertiesForLocation(\n\t\t\t\t\t\t\tpropertySet,\n\t\t\t\t\t\t\tclassContext,\n\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\tlocation);\n\t\t\t\t\t\n\t\t\t\t\t// Turn all warning properties into BugProperties\n\t\t\t\t\tpropertySet.decorateBugInstance(bugInstance);\n\t\t\t\t}\n\t\t\t\tSourceLineAnnotation sourceLineAnnotation =\n\t\t\t\t\tSourceLineAnnotation.fromVisitedInstruction(classContext, methodGen, javaClass.getSourceFileName(), \n\t\t\t\t\t\t\tlocation.getHandle());\n\t\t\t\t\n\n\t\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\n\t\t\t\t\tjavaClass.getSourceFileName() + \" : \" +\n\t\t\t\t\t\tmethodGen.getName());\n\t\t\t\tSystem.out.println(\"priority: \" + priority);\n\t\t\t\tSystem.out.println(\"Reporting \" + bugInstance);\n\t\t\t\tSystem.out.println(propertySet);\n\t\t\t\t}\n\t\t\t\taccumulator.accumulateBug(bugInstance, sourceLineAnnotation);\n\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (pendingBugReportAboutOverwrittenParameter  != null) \n\t\t\t\t\tbugReporter.reportBug(pendingBugReportAboutOverwrittenParameter);\n\t\t\t}\n\t\t}\n\t\taccumulator.reportAccumulatedBugs();\n\t}","commit_id":"4a8e326c98fa68bb3bb81670578dd367d648cf0c","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public void foundGuaranteedNullDeref(@NonNull\n\tSet<Location> assignedNullLocationSet, @NonNull\n\tSet<Location> derefLocationSet, SortedSet<Location> doomedLocations,\n\t\t\tValueNumberDataflow vna, ValueNumber refValue,\n\t\t\tBugAnnotation variableAnnotation, NullValueUnconditionalDeref deref,\n\t\t\tboolean npeIfStatementCovered) {\n\t\tif (refValue.hasFlag(ValueNumber.CONSTANT_CLASS_OBJECT))\n\t\t\treturn;\n\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"Found guaranteed null deref in \"\n\t\t\t\t\t+ method.getName());\n\t\t\tfor (Location loc : doomedLocations)\n\t\t\t\tSystem.out.println(\"Doomed at \" + loc);\n\t\t}\n\n\t\tString bugType = \"NP_GUARANTEED_DEREF\";\n\t\tint priority = NORMAL_PRIORITY;\n\n\t\tif (deref.isMethodReturnValue())\n\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\";\n\t\telse {\n\t\t\tif (deref.isAlwaysOnExceptionPath())\n\t\t\t\tbugType += \"_ON_EXCEPTION_PATH\";\n\t\t\telse priority = HIGH_PRIORITY;\n\t\t\tif (!npeIfStatementCovered)\n\t\t\t\tpriority++;\n\t\t}\n\n\t\t// Add Locations in the set of locations at least one of which\n\t\t// is guaranteed to be dereferenced\n\n\t\tSortedSet<Location> sourceLocations;\n\t\tif (doomedLocations.isEmpty() || doomedLocations.size() > 3\n\t\t\t\t&& doomedLocations.size() > assignedNullLocationSet.size())\n\t\t\tsourceLocations = new TreeSet<Location>(assignedNullLocationSet);\n\t\telse\n\t\t\tsourceLocations = doomedLocations;\n\n\t\tif (doomedLocations.isEmpty() || derefLocationSet.isEmpty())\n\t\t\treturn;\n\t\tboolean derefOutsideCatchBlock = false;\n\t\tfor (Location loc : derefLocationSet)\n\t\t\tif (!inCatchNullBlock(loc)) {\n\t\t\t\tderefOutsideCatchBlock = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tboolean uniqueDereferenceLocations = false;\n\t\tLineNumberTable table = method.getLineNumberTable();\n\t\tif (table == null)\n\t\t\tuniqueDereferenceLocations = true;\n\t\telse {\n\t\t\tBitSet linesMentionedMultipleTimes = ClassContext.linesMentionedMultipleTimes(method);\n\t\t\tfor(Location loc : derefLocationSet) {\n\t\t\t  int lineNumber = table.getSourceLine(loc.getHandle().getPosition());\n\t\t\t  if (!linesMentionedMultipleTimes.get(lineNumber)) uniqueDereferenceLocations = true;\n\t\t\t}\n\t\t}\n\n\n\t\tif (!derefOutsideCatchBlock) {\n\t\t\tif (!uniqueDereferenceLocations || skipIfInsideCatchNull())\n\t\t\t\treturn;\n\t\t\tpriority++;\n\t\t}\n\t\tif (!uniqueDereferenceLocations)\n\t\t\tpriority++;\n\n\t\t// Create BugInstance\n\n\t\tBitSet knownNull = new BitSet();\n\n\t\tSortedSet<SourceLineAnnotation> knownNullLocations = new TreeSet<SourceLineAnnotation>();\n\t\tfor (Location loc : sourceLocations) {\n\t\t\tSourceLineAnnotation sourceLineAnnotation = SourceLineAnnotation\n\t\t\t\t\t.fromVisitedInstruction(classContext, method, loc);\n\t\t\tif (sourceLineAnnotation == null)\n\t\t\t\tcontinue;\n\t\t\tint startLine = sourceLineAnnotation.getStartLine();\n\t\t\tif (startLine == -1)\n\t\t\t\tknownNullLocations.add(sourceLineAnnotation);\n\t\t\telse if (!knownNull.get(startLine)) {\n\t\t\t\tknownNull.set(startLine);\n\t\t\t\tknownNullLocations.add(sourceLineAnnotation);\n\t\t\t}\n\t\t}\n\n\t\tFieldAnnotation storedField = null;\n\t\tMethodAnnotation invokedMethod = null;\n\t\tint parameterNumber = -1;\n\t\tif (derefLocationSet.size() == 1) {\n\t\t\tLocation loc = derefLocationSet.iterator().next();\n\n\t\t\tPointerUsageRequiringNonNullValue pu = null;\n\t\t\ttry {\n\t\t\t\tUsagesRequiringNonNullValues usages = classContext.getUsagesRequiringNonNullValues(method);\n\t\t\t\tpu = usages.get(loc, refValue);\n\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t   AnalysisContext.logError(\"Error getting UsagesRequiringNonNullValues for \" + method, e);\n\t\t\t} catch (CFGBuilderException e) {\n\t\t\t\tAnalysisContext.logError(\"Error getting UsagesRequiringNonNullValues for \" + method, e);\n\t\t\t}\n\n\n\t\t\tif (pu != null) {\n\n\n\t\t\tif (pu.getReturnFromNonNullMethod()) {\n\t\t\t\tbugType = \"NP_NONNULL_RETURN_VIOLATION\";\n\t\t\t\tString methodName = method.getName();\n\t\t\t\tString methodSig = method.getSignature();\n\t\t\t\tif (methodName.equals(\"clone\") && methodSig.equals(\"()Ljava/lang/Object;\")) {\n\t\t\t\t\tbugType = \"NP_CLONE_COULD_RETURN_NULL\";\n\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t\t} else if (methodName.equals(\"toString\") && methodSig.equals(\"()Ljava/lang/String;\")) {\n\t\t\t\t\tbugType = \"NP_TOSTRING_COULD_RETURN_NULL\";\n\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tXField nonNullField = pu.getNonNullField();\n\t\t\t\tif (nonNullField != null) {\n\t\t\t\t\tstoredField =  FieldAnnotation.fromXField( nonNullField );\n\t\t\t\t\tbugType = \"NP_STORE_INTO_NONNULL_FIELD\";\n\t\t\t\t} else {\n\t\t\t\t\tXMethodParameter nonNullParameter = pu.getNonNullParameter();\n\t\t\t\t\tif (nonNullParameter != null) {\n\t\t\t\t\t\tXMethodParameter mp = nonNullParameter ;\n\t\t\t\t\t\tinvokedMethod =  MethodAnnotation.fromXMethod(mp.getMethod());\n\t\t\t\t\t\tparameterNumber = mp.getParameterNumber();\n\t\t\t\t\t\tbugType = \"NP_NULL_PARAM_DEREF\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t} else  if (!deref.isAlwaysOnExceptionPath())\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH\";\n\t\t\telse\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_EXCEPTION\";\n\n\t\t\tif (deref.isMethodReturnValue())\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\";\n\n\t\t}\n\n\n\n\t\tBugInstance bugInstance = new BugInstance(this, bugType, priority)\n\t\t\t\t.addClassAndMethod(classContext.getJavaClass(), method);\n\t\tif (invokedMethod != null)\n\t\t\tbugInstance.addMethod(invokedMethod).describe(\"METHOD_CALLED\")\n\t\t\t.addInt(parameterNumber+1).describe(\"INT_MAYBE_NULL_ARG\");\n\t\tif (storedField!= null)\n\t\t\tbugInstance.addField(storedField).describe(\"FIELD_STORED\");\n\t\tbugInstance.add(variableAnnotation);\n\t\tif (variableAnnotation instanceof FieldAnnotation)\n\t\t\tbugInstance.describe(\"FIELD_CONTAINS_VALUE\");\n\t\tfor (Location loc : derefLocationSet)\n\t\t\tbugInstance.addSourceLine(classContext, method, loc).describe(getDescription(loc, refValue));\n\n\t\tfor (SourceLineAnnotation sourceLineAnnotation : knownNullLocations)\n\t\t\tbugInstance.add(sourceLineAnnotation).describe(\n\t\t\t\"SOURCE_LINE_KNOWN_NULL\");\n\n\n\t\t// If all deref locations are doomed\n\t\t// (i.e., locations where a normal return is not possible),\n\t\t// add a warning property indicating such.\n\n\t\t// Are all derefs at doomed locations?\n\t\tboolean allDerefsAtDoomedLocations = true;\n\t\tfor (Location derefLoc : derefLocationSet) {\n\t\t\tif (!isDoomed(derefLoc)) {\n\t\t\t\tallDerefsAtDoomedLocations = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (allDerefsAtDoomedLocations) {\n\t\t\t// Add a WarningProperty\n\t\t\tWarningPropertySet propertySet = new WarningPropertySet();\n\t\t\tpropertySet.addProperty(DoomedCodeWarningProperty.DOOMED_CODE);\n\t\t\tpropertySet.decorateBugInstance(bugInstance);\n\t\t}\n\n\n\t\t// Report it\n\t\tbugReporter.reportBug(bugInstance);\n\t}","id":103406,"modified_method":"public void foundGuaranteedNullDeref(@NonNull\n\tSet<Location> assignedNullLocationSet, @NonNull\n\tSet<Location> derefLocationSet, SortedSet<Location> doomedLocations,\n\t\t\tValueNumberDataflow vna, ValueNumber refValue,\n\t\t\tBugAnnotation variableAnnotation, NullValueUnconditionalDeref deref,\n\t\t\tboolean npeIfStatementCovered) {\n\t\tif (refValue.hasFlag(ValueNumber.CONSTANT_CLASS_OBJECT))\n\t\t\treturn;\n\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(\"Found guaranteed null deref in \"\n\t\t\t\t\t+ method.getName());\n\t\t\tfor (Location loc : doomedLocations)\n\t\t\t\tSystem.out.println(\"Doomed at \" + loc);\n\t\t}\n\n\t\tString bugType = \"NP_GUARANTEED_DEREF\";\n\t\tint priority = NORMAL_PRIORITY;\n\n\t\tif (deref.isMethodReturnValue())\n\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\";\n\t\telse {\n\t\t\tif (deref.isAlwaysOnExceptionPath())\n\t\t\t\tbugType += \"_ON_EXCEPTION_PATH\";\n\t\t\telse priority = HIGH_PRIORITY;\n\t\t\tif (!npeIfStatementCovered)\n\t\t\t\tpriority++;\n\t\t}\n\n\t\t// Add Locations in the set of locations at least one of which\n\t\t// is guaranteed to be dereferenced\n\n\t\tSortedSet<Location> sourceLocations;\n\t\tif (doomedLocations.isEmpty() || doomedLocations.size() > 3\n\t\t\t\t&& doomedLocations.size() > assignedNullLocationSet.size())\n\t\t\tsourceLocations = new TreeSet<Location>(assignedNullLocationSet);\n\t\telse\n\t\t\tsourceLocations = doomedLocations;\n\n\t\tif (doomedLocations.isEmpty() || derefLocationSet.isEmpty())\n\t\t\treturn;\n\t\tboolean derefOutsideCatchBlock = false;\n\t\tfor (Location loc : derefLocationSet)\n\t\t\tif (!inCatchNullBlock(loc)) {\n\t\t\t\tderefOutsideCatchBlock = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tboolean uniqueDereferenceLocations = false;\n\t\tLineNumberTable table = method.getLineNumberTable();\n\t\tif (table == null)\n\t\t\tuniqueDereferenceLocations = true;\n\t\telse {\n\t\t\tBitSet linesMentionedMultipleTimes = ClassContext.linesMentionedMultipleTimes(method);\n\t\t\tfor(Location loc : derefLocationSet) {\n\t\t\t  int lineNumber = table.getSourceLine(loc.getHandle().getPosition());\n\t\t\t  if (!linesMentionedMultipleTimes.get(lineNumber)) uniqueDereferenceLocations = true;\n\t\t\t}\n\t\t}\n\n\n\t\tif (!derefOutsideCatchBlock) {\n\t\t\tif (!uniqueDereferenceLocations || skipIfInsideCatchNull())\n\t\t\t\treturn;\n\t\t\tpriority++;\n\t\t}\n\t\tif (!uniqueDereferenceLocations)\n\t\t\tpriority++;\n\n\t\t// Create BugInstance\n\n\t\tBitSet knownNull = new BitSet();\n\n\t\tSortedSet<SourceLineAnnotation> knownNullLocations = new TreeSet<SourceLineAnnotation>();\n\t\tfor (Location loc : sourceLocations) {\n\t\t\tSourceLineAnnotation sourceLineAnnotation = SourceLineAnnotation\n\t\t\t\t\t.fromVisitedInstruction(classContext, method, loc);\n\t\t\tif (sourceLineAnnotation == null)\n\t\t\t\tcontinue;\n\t\t\tint startLine = sourceLineAnnotation.getStartLine();\n\t\t\tif (startLine == -1)\n\t\t\t\tknownNullLocations.add(sourceLineAnnotation);\n\t\t\telse if (!knownNull.get(startLine)) {\n\t\t\t\tknownNull.set(startLine);\n\t\t\t\tknownNullLocations.add(sourceLineAnnotation);\n\t\t\t}\n\t\t}\n\n\t\tFieldAnnotation storedField = null;\n\t\tMethodAnnotation invokedMethod = null;\n\t\tint parameterNumber = -1;\n\t\tif (derefLocationSet.size() == 1) {\n\t\t\tLocation loc = derefLocationSet.iterator().next();\n\n\t\t\tPointerUsageRequiringNonNullValue pu = null;\n\t\t\ttry {\n\t\t\t\tUsagesRequiringNonNullValues usages = classContext.getUsagesRequiringNonNullValues(method);\n\t\t\t\tpu = usages.get(loc, refValue);\n\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t   AnalysisContext.logError(\"Error getting UsagesRequiringNonNullValues for \" + method, e);\n\t\t\t} catch (CFGBuilderException e) {\n\t\t\t\tAnalysisContext.logError(\"Error getting UsagesRequiringNonNullValues for \" + method, e);\n\t\t\t}\n\n\n\t\t\tif (pu != null) {\n\n\n\t\t\tif (pu.getReturnFromNonNullMethod()) {\n\t\t\t\tbugType = \"NP_NONNULL_RETURN_VIOLATION\";\n\t\t\t\tString methodName = method.getName();\n\t\t\t\tString methodSig = method.getSignature();\n\t\t\t\tif (methodName.equals(\"clone\") && methodSig.equals(\"()Ljava/lang/Object;\")) {\n\t\t\t\t\tbugType = \"NP_CLONE_COULD_RETURN_NULL\";\n\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t\t} else if (methodName.equals(\"toString\") && methodSig.equals(\"()Ljava/lang/String;\")) {\n\t\t\t\t\tbugType = \"NP_TOSTRING_COULD_RETURN_NULL\";\n\t\t\t\t\tpriority = NORMAL_PRIORITY;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tXField nonNullField = pu.getNonNullField();\n\t\t\t\tif (nonNullField != null) {\n\t\t\t\t\tstoredField =  FieldAnnotation.fromXField( nonNullField );\n\t\t\t\t\tbugType = \"NP_STORE_INTO_NONNULL_FIELD\";\n\t\t\t\t} else {\n\t\t\t\t\tXMethodParameter nonNullParameter = pu.getNonNullParameter();\n\t\t\t\t\tif (nonNullParameter != null) {\n\t\t\t\t\t\tXMethodParameter mp = nonNullParameter ;\n\t\t\t\t\t\tinvokedMethod =  MethodAnnotation.fromXMethod(mp.getMethod());\n\t\t\t\t\t\tparameterNumber = mp.getParameterNumber();\n\t\t\t\t\t\tbugType = \"NP_NULL_PARAM_DEREF\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t} else  if (!deref.isAlwaysOnExceptionPath())\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH\";\n\t\t\telse\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_EXCEPTION\";\n\n\t\t\tif (deref.isMethodReturnValue())\n\t\t\t\tbugType = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\";\n\n\t\t}\n\n\n\t\tXMethod calledFrom = XFactory.createXMethod(classContext.getJavaClass(), method);\n\t\tboolean uncallable = !AnalysisContext.currentXFactory().isCalledDirectlyOrIndirectly(calledFrom) \n\t\t\t\t&& !calledFrom.isPublic() && !(calledFrom.isProtected() && classContext.getJavaClass().isPublic());\n\t\tif (uncallable) priority++;\t\t\t\n\n\t\tBugInstance bugInstance = new BugInstance(this, bugType, priority)\n\t\t\t\t.addClassAndMethod(classContext.getJavaClass(), method);\n\t\tif (invokedMethod != null)\n\t\t\tbugInstance.addMethod(invokedMethod).describe(\"METHOD_CALLED\")\n\t\t\t.addInt(parameterNumber+1).describe(\"INT_MAYBE_NULL_ARG\");\n\t\tif (storedField!= null)\n\t\t\tbugInstance.addField(storedField).describe(\"FIELD_STORED\");\n\t\tbugInstance.add(variableAnnotation);\n\t\tif (variableAnnotation instanceof FieldAnnotation)\n\t\t\tbugInstance.describe(\"FIELD_CONTAINS_VALUE\");\n\t\tfor (Location loc : derefLocationSet)\n\t\t\tbugInstance.addSourceLine(classContext, method, loc).describe(getDescription(loc, refValue));\n\n\t\tfor (SourceLineAnnotation sourceLineAnnotation : knownNullLocations)\n\t\t\tbugInstance.add(sourceLineAnnotation).describe(\n\t\t\t\"SOURCE_LINE_KNOWN_NULL\");\n\n\n\t\t// If all deref locations are doomed\n\t\t// (i.e., locations where a normal return is not possible),\n\t\t// add a warning property indicating such.\n\n\t\t// Are all derefs at doomed locations?\n\t\tboolean allDerefsAtDoomedLocations = true;\n\t\tfor (Location derefLoc : derefLocationSet) {\n\t\t\tif (!isDoomed(derefLoc)) {\n\t\t\t\tallDerefsAtDoomedLocations = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tWarningPropertySet<WarningProperty> propertySet = new WarningPropertySet<WarningProperty>();\n\n\t\tif (allDerefsAtDoomedLocations) {\n\t\t\t// Add a WarningProperty\n\t\t\tpropertySet.addProperty(DoomedCodeWarningProperty.DOOMED_CODE);\n\t\t}\n\t\tif (uncallable)\n\t\t\tpropertySet.addProperty(GeneralWarningProperty.IN_UNCALLABLE_METHOD);\n\t\tpropertySet.decorateBugInstance(bugInstance);\n\n\n\t\t// Report it\n\t\tbugReporter.reportBug(bugInstance);\n\t}","commit_id":"1b8350e49d6f20248e80b0c29ccc4808ca7e1d5f","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"protected MinaEndpoint createSocketEndpoint(String uri, MinaConfiguration configuration) {\n        boolean minaLogger = configuration.isMinaLogger();\n        long timeout = configuration.getTimeout();\n        boolean sync = configuration.isSync();\n        List<IoFilter> filters = configuration.getFilters();\n        final int processorCount = Runtime.getRuntime().availableProcessors() + 1;\n\n        IoAcceptor acceptor = new SocketAcceptor(processorCount,\n                getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaSocketAcceptor\"));\n        IoConnector connector = new SocketConnector(processorCount,\n                getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaSocketConnector\"));\n        SocketAddress address = new InetSocketAddress(configuration.getHost(), configuration.getPort());\n\n        // connector config\n        SocketConnectorConfig connectorConfig = new SocketConnectorConfig();\n        // must use manual thread model according to Mina documentation\n        connectorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureCodecFactory(\"MinaProducer\", connectorConfig, configuration);\n        connectorConfig.getFilterChain().addLast(\"threadPool\",\n                new ExecutorFilter(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaThreadPool\")));\n        if (minaLogger) {\n            connectorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, connectorConfig.getFilterChain());\n\n        // set connect timeout to mina in seconds\n        connectorConfig.setConnectTimeout((int) (timeout / 1000));\n\n        // acceptor connectorConfig\n        SocketAcceptorConfig acceptorConfig = new SocketAcceptorConfig();\n        // must use manual thread model according to Mina documentation\n        acceptorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureCodecFactory(\"MinaConsumer\", acceptorConfig, configuration);\n        acceptorConfig.setReuseAddress(true);\n        acceptorConfig.setDisconnectOnUnbind(true);\n        acceptorConfig.getFilterChain().addLast(\"threadPool\",\n                new ExecutorFilter(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaThreadPool\")));\n        if (minaLogger) {\n            acceptorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, acceptorConfig.getFilterChain());\n\n        MinaEndpoint endpoint = new MinaEndpoint(uri, this);\n        endpoint.setAddress(address);\n        endpoint.setAcceptor(acceptor);\n        endpoint.setAcceptorConfig(acceptorConfig);\n        endpoint.setConnector(connector);\n        endpoint.setConnectorConfig(connectorConfig);\n        endpoint.setConfiguration(configuration);\n\n        // set sync or async mode after endpoint is created\n        if (sync) {\n            endpoint.setExchangePattern(ExchangePattern.InOut);\n        } else {\n            endpoint.setExchangePattern(ExchangePattern.InOnly);\n        }\n\n        return endpoint;\n    }","id":103407,"modified_method":"protected MinaEndpoint createSocketEndpoint(String uri, MinaConfiguration configuration) {\n        boolean minaLogger = configuration.isMinaLogger();\n        long timeout = configuration.getTimeout();\n        boolean sync = configuration.isSync();\n        List<IoFilter> filters = configuration.getFilters();\n        final int processorCount = Runtime.getRuntime().availableProcessors() + 1;\n\n        ExecutorService acceptorPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaSocketAcceptor\");\n        ExecutorService connectorPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaSocketConnector\");\n        ExecutorService workerPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaThreadPool\");\n\n        IoAcceptor acceptor = new SocketAcceptor(processorCount, acceptorPool);\n        IoConnector connector = new SocketConnector(processorCount, connectorPool);\n        SocketAddress address = new InetSocketAddress(configuration.getHost(), configuration.getPort());\n\n        // connector config\n        SocketConnectorConfig connectorConfig = new SocketConnectorConfig();\n        // must use manual thread model according to Mina documentation\n        connectorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureCodecFactory(\"MinaProducer\", connectorConfig, configuration);\n        connectorConfig.getFilterChain().addLast(\"threadPool\", new ExecutorFilter(workerPool));\n        if (minaLogger) {\n            connectorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, connectorConfig.getFilterChain());\n\n        // set connect timeout to mina in seconds\n        connectorConfig.setConnectTimeout((int) (timeout / 1000));\n\n        // acceptor connectorConfig\n        SocketAcceptorConfig acceptorConfig = new SocketAcceptorConfig();\n        // must use manual thread model according to Mina documentation\n        acceptorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureCodecFactory(\"MinaConsumer\", acceptorConfig, configuration);\n        acceptorConfig.setReuseAddress(true);\n        acceptorConfig.setDisconnectOnUnbind(true);\n        acceptorConfig.getFilterChain().addLast(\"threadPool\", new ExecutorFilter(workerPool));\n        if (minaLogger) {\n            acceptorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, acceptorConfig.getFilterChain());\n\n        MinaEndpoint endpoint = new MinaEndpoint(uri, this);\n        endpoint.setAddress(address);\n        endpoint.setAcceptor(acceptor);\n        endpoint.setAcceptorConfig(acceptorConfig);\n        endpoint.setConnector(connector);\n        endpoint.setConnectorConfig(connectorConfig);\n        endpoint.setConfiguration(configuration);\n\n        // enlist threads pools in use on endpoint\n        endpoint.addThreadPool(acceptorPool);\n        endpoint.addThreadPool(connectorPool);\n        endpoint.addThreadPool(workerPool);\n\n        // set sync or async mode after endpoint is created\n        if (sync) {\n            endpoint.setExchangePattern(ExchangePattern.InOut);\n        } else {\n            endpoint.setExchangePattern(ExchangePattern.InOnly);\n        }\n\n        return endpoint;\n    }","commit_id":"73692f39fffbf9b3cd212ab63497ba8d95019ee8","url":"https://github.com/apache/camel"},{"original_method":"protected MinaEndpoint createDatagramEndpoint(String uri, MinaConfiguration configuration) {\n        boolean minaLogger = configuration.isMinaLogger();\n        long timeout = configuration.getTimeout();\n        boolean transferExchange = configuration.isTransferExchange();\n        boolean sync = configuration.isSync();\n        List<IoFilter> filters = configuration.getFilters();\n\n        IoAcceptor acceptor = new DatagramAcceptor(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaDatagramAcceptor\"));\n        IoConnector connector = new DatagramConnector(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaDatagramConnector\"));\n        SocketAddress address = new InetSocketAddress(configuration.getHost(), configuration.getPort());\n\n        if (transferExchange) {\n            throw new IllegalArgumentException(\"transferExchange=true is not supported for datagram protocol\");\n        }\n\n        DatagramConnectorConfig connectorConfig = new DatagramConnectorConfig();\n        // must use manual thread model according to Mina documentation\n        connectorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureDataGramCodecFactory(\"MinaProducer\", connectorConfig, configuration);\n        connectorConfig.getFilterChain().addLast(\"threadPool\",\n                new ExecutorFilter(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaThreadPool\")));\n        if (minaLogger) {\n            connectorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, connectorConfig.getFilterChain());\n        // set connect timeout to mina in seconds\n        connectorConfig.setConnectTimeout((int) (timeout / 1000));\n\n        DatagramAcceptorConfig acceptorConfig = new DatagramAcceptorConfig();\n        // must use manual thread model according to Mina documentation\n        acceptorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureDataGramCodecFactory(\"MinaConsumer\", acceptorConfig, configuration);\n        acceptorConfig.setDisconnectOnUnbind(true);\n        // reuse address is default true for datagram\n        acceptorConfig.getFilterChain().addLast(\"threadPool\",\n                new ExecutorFilter(getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, \"MinaThreadPool\")));\n        if (minaLogger) {\n            acceptorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, acceptorConfig.getFilterChain());\n\n        MinaEndpoint endpoint = new MinaEndpoint(uri, this);\n        endpoint.setAddress(address);\n        endpoint.setAcceptor(acceptor);\n        endpoint.setAcceptorConfig(acceptorConfig);\n        endpoint.setConnector(connector);\n        endpoint.setConnectorConfig(connectorConfig);\n        endpoint.setConfiguration(configuration);\n        // set sync or async mode after endpoint is created\n        if (sync) {\n            endpoint.setExchangePattern(ExchangePattern.InOut);\n        } else {\n            endpoint.setExchangePattern(ExchangePattern.InOnly);\n        }\n\n        return endpoint;\n    }","id":103408,"modified_method":"protected MinaEndpoint createDatagramEndpoint(String uri, MinaConfiguration configuration) {\n        boolean minaLogger = configuration.isMinaLogger();\n        long timeout = configuration.getTimeout();\n        boolean transferExchange = configuration.isTransferExchange();\n        boolean sync = configuration.isSync();\n        List<IoFilter> filters = configuration.getFilters();\n\n        ExecutorService acceptorPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaDatagramAcceptor\");\n        ExecutorService connectorPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaDatagramConnector\");\n        ExecutorService workerPool = getCamelContext().getExecutorServiceManager().newCachedThreadPool(this, \"MinaThreadPool\");\n\n        IoAcceptor acceptor = new DatagramAcceptor(acceptorPool);\n        IoConnector connector = new DatagramConnector(connectorPool);\n        SocketAddress address = new InetSocketAddress(configuration.getHost(), configuration.getPort());\n\n        if (transferExchange) {\n            throw new IllegalArgumentException(\"transferExchange=true is not supported for datagram protocol\");\n        }\n\n        DatagramConnectorConfig connectorConfig = new DatagramConnectorConfig();\n        // must use manual thread model according to Mina documentation\n        connectorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureDataGramCodecFactory(\"MinaProducer\", connectorConfig, configuration);\n        connectorConfig.getFilterChain().addLast(\"threadPool\", new ExecutorFilter(workerPool));\n        if (minaLogger) {\n            connectorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, connectorConfig.getFilterChain());\n        // set connect timeout to mina in seconds\n        connectorConfig.setConnectTimeout((int) (timeout / 1000));\n\n        DatagramAcceptorConfig acceptorConfig = new DatagramAcceptorConfig();\n        // must use manual thread model according to Mina documentation\n        acceptorConfig.setThreadModel(ThreadModel.MANUAL);\n        configureDataGramCodecFactory(\"MinaConsumer\", acceptorConfig, configuration);\n        acceptorConfig.setDisconnectOnUnbind(true);\n        // reuse address is default true for datagram\n        acceptorConfig.getFilterChain().addLast(\"threadPool\", new ExecutorFilter(workerPool));\n        if (minaLogger) {\n            acceptorConfig.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        }\n        appendIoFiltersToChain(filters, acceptorConfig.getFilterChain());\n\n        MinaEndpoint endpoint = new MinaEndpoint(uri, this);\n        endpoint.setAddress(address);\n        endpoint.setAcceptor(acceptor);\n        endpoint.setAcceptorConfig(acceptorConfig);\n        endpoint.setConnector(connector);\n        endpoint.setConnectorConfig(connectorConfig);\n        endpoint.setConfiguration(configuration);\n\n        // enlist threads pools in use on endpoint\n        endpoint.addThreadPool(acceptorPool);\n        endpoint.addThreadPool(connectorPool);\n        endpoint.addThreadPool(workerPool);\n\n        // set sync or async mode after endpoint is created\n        if (sync) {\n            endpoint.setExchangePattern(ExchangePattern.InOut);\n        } else {\n            endpoint.setExchangePattern(ExchangePattern.InOnly);\n        }\n\n        return endpoint;\n    }","commit_id":"73692f39fffbf9b3cd212ab63497ba8d95019ee8","url":"https://github.com/apache/camel"},{"original_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tscreenHeight = getScreenHeight();\n\t\tskipHalfScreenStateLimit = screenHeight * SKIP_HALF_SCREEN_STATE_KOEF;\n\n\t\tviewHeight = screenHeight - getStatusBarHeight();\n\n\t\tfabPaddingTopPx = dpToPx(FAB_PADDING_TOP_DP);\n\t\tmarkerPaddingPx = dpToPx(MARKER_PADDING_DP);\n\t\tmarkerPaddingXPx = dpToPx(MARKER_PADDING_X_DP);\n\n\t\tmenu = getMapActivity().getContextMenu();\n\t\tleftTitleButtonController = menu.getLeftTitleButtonController();\n\t\trightTitleButtonController = menu.getRightTitleButtonController();\n\t\ttopRightTitleButtonController = menu.getTopRightTitleButtonController();\n\t\ttitleProgressController = menu.getTitleProgressController();\n\n\t\tmap = getMapActivity().getMapView();\n\t\tRotatedTileBox box = map.getCurrentRotatedTileBox().copy();\n\t\tcustomMapCenter = menu.getMapCenter() != null;\n\t\tif (!customMapCenter) {\n\t\t\tmapCenter = box.getCenterLatLon();\n\t\t\tmenu.setMapCenter(mapCenter);\n\t\t\tdouble markerLat = menu.getLatLon().getLatitude();\n\t\t\tdouble markerLon = menu.getLatLon().getLongitude();\n\t\t\torigMarkerX = (int)box.getPixXFromLatLon(markerLat, markerLon);\n\t\t\torigMarkerY = (int)box.getPixYFromLatLon(markerLat, markerLon);\n\t\t} else {\n\t\t\tmapCenter = menu.getMapCenter();\n\t\t\torigMarkerX = box.getCenterPixelX();\n\t\t\torigMarkerY = box.getCenterPixelY();\n\t\t}\n\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\t// Left title button\n\t\tfinal Button leftTitleButton = (Button) view.findViewById(R.id.title_button);\n\t\tif (leftTitleButtonController != null) {\n\t\t\tleftTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tleftTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Right title button\n\t\tfinal Button rightTitleButton = (Button) view.findViewById(R.id.title_button_right);\n\t\tif (rightTitleButtonController != null) {\n\t\t\trightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\trightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Top Right title button\n\t\tfinal Button topRightTitleButton = (Button) view.findViewById(R.id.title_button_top_right);\n\t\tif (topRightTitleButtonController != null) {\n\t\t\ttopRightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttopRightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Progress bar\n\t\tif (titleProgressController != null) {\n\t\t\tfinal ImageView progressButton = (ImageView) view.findViewById(R.id.progressButton);\n\t\t\tprogressButton.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t\tprogressButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttitleProgressController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tmenu.updateData();\n\t\tupdateButtonsAndProgress();\n\n\t\tif (menu.isLandscapeLayout()) {\n\t\t\tmainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t\tView fabContainer = view.findViewById(R.id.context_menu_fab_container);\n\t\t\tfabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t}\n\n\t\trunLayoutListener();\n\n\t\tfinal GestureDetector singleTapDetector = new GestureDetector(view.getContext(), new SingleTapConfirm());\n\n\t\tfinal View.OnTouchListener slideTouchListener = new View.OnTouchListener() {\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\t\t\tprivate float maxVelocityY;\n\n\t\t\tprivate boolean hasMoved;\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tif (singleTapDetector.onTouchEvent(event)) {\n\t\t\t\t\tshowOnMap(menu.getLatLon(), true, false);\n\n\t\t\t\t\tif (hasMoved) {\n\t\t\t\t\t\tapplyPosY(getViewY(), false, false, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (menu.isLandscapeLayout()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\thasMoved = false;\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = getViewY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tmaxVelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\thasMoved = true;\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = getViewY() + (y - dy);\n\t\t\t\t\t\tsetViewY((int) newY, false, false);\n\n\t\t\t\t\t\tmenuFullHeight = view.getHeight() - (int) newY + 10;\n\t\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\t\tViewGroup.LayoutParams lp = mainView.getLayoutParams();\n\t\t\t\t\t\t\tlp.height = Math.max(menuFullHeight, menuTitleHeight);\n\t\t\t\t\t\t\tmainView.setLayoutParams(lp);\n\t\t\t\t\t\t\tmainView.requestLayout();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tvelocityY = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (velocityY > maxVelocityY)\n\t\t\t\t\t\t\tmaxVelocityY = velocityY;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\t\tint currentY = getViewY();\n\t\t\t\t\t\t\n\t\t\t\t\t\tslidingUp = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tboolean skipHalfScreenState = Math.abs(currentY - dyMain) > skipHalfScreenStateLimit;\n\t\t\t\t\t\tchangeMenuState(currentY, skipHalfScreenState, slidingUp, slidingDown);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\ttopView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowView = view.findViewById(R.id.context_menu_top_shadow);\n\t\ttopShadowView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowAllView = view.findViewById(R.id.context_menu_top_shadow_all);\n\t\ttopShadowAllView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\tif (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN)\n\t\t\t\t\treturn slideTouchListener.onTouch(v, event);\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tbuildHeader();\n\n\t\t// FAB\n\t\tfabView = (ImageView)view.findViewById(R.id.context_menu_fab_view);\n\t\tif (menu.fabVisible()) {\n\t\t\tfabView.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmenu.fabPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfabView.setVisibility(View.GONE);\n\t\t}\n\n\t\tif (!menu.buttonsVisible()) {\n\t\t\tView buttonsTopBorder = view.findViewById(R.id.buttons_top_border);\n\t\t\tView buttons = view.findViewById(R.id.context_menu_buttons);\n\t\t\tbuttonsTopBorder.setVisibility(View.GONE);\n\t\t\tbuttons.setVisibility(View.GONE);\n\t\t}\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonFavoritePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonWaypoint = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_flag_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonWaypoint.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonWaypointPressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_gshare_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonSharePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.map_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonMorePressed();\n\t\t\t}\n\t\t});\n\n\t\tbuildBottomView();\n\n\t\tgetMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);\n\n\t\treturn view;\n\t}","id":103409,"modified_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tscreenHeight = getScreenHeight();\n\t\tskipHalfScreenStateLimit = screenHeight * SKIP_HALF_SCREEN_STATE_KOEF;\n\n\t\tviewHeight = screenHeight - getStatusBarHeight();\n\n\t\tfabPaddingTopPx = dpToPx(FAB_PADDING_TOP_DP);\n\t\tmarkerPaddingPx = dpToPx(MARKER_PADDING_DP);\n\t\tmarkerPaddingXPx = dpToPx(MARKER_PADDING_X_DP);\n\n\t\tmenu = getMapActivity().getContextMenu();\n\t\tleftTitleButtonController = menu.getLeftTitleButtonController();\n\t\trightTitleButtonController = menu.getRightTitleButtonController();\n\t\ttopRightTitleButtonController = menu.getTopRightTitleButtonController();\n\t\ttitleProgressController = menu.getTitleProgressController();\n\n\t\tmap = getMapActivity().getMapView();\n\t\tRotatedTileBox box = map.getCurrentRotatedTileBox().copy();\n\t\tcustomMapCenter = menu.getMapCenter() != null;\n\t\tif (!customMapCenter) {\n\t\t\tmapCenter = box.getCenterLatLon();\n\t\t\tmenu.setMapCenter(mapCenter);\n\t\t\tdouble markerLat = menu.getLatLon().getLatitude();\n\t\t\tdouble markerLon = menu.getLatLon().getLongitude();\n\t\t\torigMarkerX = (int)box.getPixXFromLatLon(markerLat, markerLon);\n\t\t\torigMarkerY = (int)box.getPixYFromLatLon(markerLat, markerLon);\n\t\t} else {\n\t\t\tmapCenter = menu.getMapCenter();\n\t\t\torigMarkerX = box.getCenterPixelX();\n\t\t\torigMarkerY = box.getCenterPixelY();\n\t\t}\n\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\t// Left title button\n\t\tfinal Button leftTitleButton = (Button) view.findViewById(R.id.title_button);\n\t\tif (leftTitleButtonController != null) {\n\t\t\tleftTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tleftTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Right title button\n\t\tfinal Button rightTitleButton = (Button) view.findViewById(R.id.title_button_right);\n\t\tif (rightTitleButtonController != null) {\n\t\t\trightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\trightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Top Right title button\n\t\tfinal Button topRightTitleButton = (Button) view.findViewById(R.id.title_button_top_right);\n\t\tif (topRightTitleButtonController != null) {\n\t\t\ttopRightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttopRightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Progress bar\n\t\tif (titleProgressController != null) {\n\t\t\tfinal ImageView progressButton = (ImageView) view.findViewById(R.id.progressButton);\n\t\t\tprogressButton.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t\tprogressButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttitleProgressController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tmenu.updateData();\n\t\tupdateButtonsAndProgress();\n\n\t\tif (menu.isLandscapeLayout()) {\n\t\t\tmainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t\tView fabContainer = view.findViewById(R.id.context_menu_fab_container);\n\t\t\tfabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t}\n\n\t\trunLayoutListener();\n\n\t\tfinal GestureDetector singleTapDetector = new GestureDetector(view.getContext(), new SingleTapConfirm());\n\n\t\tfinal View.OnTouchListener slideTouchListener = new View.OnTouchListener() {\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\t\t\tprivate float maxVelocityY;\n\n\t\t\tprivate boolean hasMoved;\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tif (singleTapDetector.onTouchEvent(event)) {\n\t\t\t\t\tshowOnMap(menu.getLatLon(), true, false);\n\n\t\t\t\t\tif (hasMoved) {\n\t\t\t\t\t\tapplyPosY(getViewY(), false, false, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (menu.isLandscapeLayout()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\thasMoved = false;\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = getViewY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tmaxVelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\thasMoved = true;\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = getViewY() + (y - dy);\n\t\t\t\t\t\tsetViewY((int) newY, false, false);\n\n\t\t\t\t\t\tmenuFullHeight = view.getHeight() - (int) newY + 10;\n\t\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\t\tViewGroup.LayoutParams lp = mainView.getLayoutParams();\n\t\t\t\t\t\t\tlp.height = Math.max(menuFullHeight, menuTitleHeight);\n\t\t\t\t\t\t\tmainView.setLayoutParams(lp);\n\t\t\t\t\t\t\tmainView.requestLayout();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tvelocityY = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (velocityY > maxVelocityY)\n\t\t\t\t\t\t\tmaxVelocityY = velocityY;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\t\tint currentY = getViewY();\n\t\t\t\t\t\t\n\t\t\t\t\t\tslidingUp = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tboolean skipHalfScreenState = Math.abs(currentY - dyMain) > skipHalfScreenStateLimit;\n\t\t\t\t\t\tchangeMenuState(currentY, skipHalfScreenState, slidingUp, slidingDown);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\ttopView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowView = view.findViewById(R.id.context_menu_top_shadow);\n\t\ttopShadowView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowAllView = view.findViewById(R.id.context_menu_top_shadow_all);\n\t\ttopShadowAllView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\tif (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN)\n\t\t\t\t\treturn slideTouchListener.onTouch(v, event);\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tbuildHeader();\n\n\t\t// FAB\n\t\tfabView = (ImageView)view.findViewById(R.id.context_menu_fab_view);\n\t\tif (menu.fabVisible()) {\n\t\t\tfabView.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmenu.fabPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfabView.setVisibility(View.GONE);\n\t\t}\n\n\t\tif (!menu.buttonsVisible()) {\n\t\t\tView buttonsTopBorder = view.findViewById(R.id.buttons_top_border);\n\t\t\tView buttons = view.findViewById(R.id.context_menu_buttons);\n\t\t\tbuttonsTopBorder.setVisibility(View.GONE);\n\t\t\tbuttons.setVisibility(View.GONE);\n\t\t}\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonFavoritePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonWaypoint = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\t// Correct use of destination vs. waypoit icon on button:\n\t\tif (getMyApplication().getTargetPointsHelper().getPointToNavigate() == null) {\n\t\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_flag_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t} else {\n\t\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_waypoints,\n\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t}\n\t\tbuttonWaypoint.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonWaypointPressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_gshare_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonSharePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.map_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonMorePressed();\n\t\t\t}\n\t\t});\n\n\t\tbuildBottomView();\n\n\t\tgetMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);\n\n\t\treturn view;\n\t}","commit_id":"37690180eddb794133a5abe3cd7f46081f80032d","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tscreenHeight = getScreenHeight();\n\t\tskipHalfScreenStateLimit = screenHeight * SKIP_HALF_SCREEN_STATE_KOEF;\n\n\t\tviewHeight = screenHeight - getStatusBarHeight();\n\n\t\tfabPaddingTopPx = dpToPx(FAB_PADDING_TOP_DP);\n\t\tmarkerPaddingPx = dpToPx(MARKER_PADDING_DP);\n\t\tmarkerPaddingXPx = dpToPx(MARKER_PADDING_X_DP);\n\n\t\tmenu = getMapActivity().getContextMenu();\n\t\tleftTitleButtonController = menu.getLeftTitleButtonController();\n\t\trightTitleButtonController = menu.getRightTitleButtonController();\n\t\ttopRightTitleButtonController = menu.getTopRightTitleButtonController();\n\t\ttitleProgressController = menu.getTitleProgressController();\n\n\t\tmap = getMapActivity().getMapView();\n\t\tRotatedTileBox box = map.getCurrentRotatedTileBox().copy();\n\t\tcustomMapCenter = menu.getMapCenter() != null;\n\t\tif (!customMapCenter) {\n\t\t\tmapCenter = box.getCenterLatLon();\n\t\t\tmenu.setMapCenter(mapCenter);\n\t\t\tdouble markerLat = menu.getLatLon().getLatitude();\n\t\t\tdouble markerLon = menu.getLatLon().getLongitude();\n\t\t\torigMarkerX = (int)box.getPixXFromLatLon(markerLat, markerLon);\n\t\t\torigMarkerY = (int)box.getPixYFromLatLon(markerLat, markerLon);\n\t\t} else {\n\t\t\tmapCenter = menu.getMapCenter();\n\t\t\torigMarkerX = box.getCenterPixelX();\n\t\t\torigMarkerY = box.getCenterPixelY();\n\t\t}\n\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\t// Left title button\n\t\tfinal Button leftTitleButton = (Button) view.findViewById(R.id.title_button);\n\t\tif (leftTitleButtonController != null) {\n\t\t\tleftTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tleftTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Right title button\n\t\tfinal Button rightTitleButton = (Button) view.findViewById(R.id.title_button_right);\n\t\tif (rightTitleButtonController != null) {\n\t\t\trightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\trightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Top Right title button\n\t\tfinal Button topRightTitleButton = (Button) view.findViewById(R.id.title_button_top_right);\n\t\tif (topRightTitleButtonController != null) {\n\t\t\ttopRightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttopRightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Progress bar\n\t\tif (titleProgressController != null) {\n\t\t\tfinal ImageView progressButton = (ImageView) view.findViewById(R.id.progressButton);\n\t\t\tprogressButton.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t\tprogressButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttitleProgressController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tmenu.updateData();\n\t\tupdateButtonsAndProgress();\n\n\t\tif (menu.isLandscapeLayout()) {\n\t\t\tmainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t\tView fabContainer = view.findViewById(R.id.context_menu_fab_container);\n\t\t\tfabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t}\n\n\t\trunLayoutListener();\n\n\t\tfinal GestureDetector singleTapDetector = new GestureDetector(view.getContext(), new SingleTapConfirm());\n\n\t\tfinal View.OnTouchListener slideTouchListener = new View.OnTouchListener() {\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\t\t\tprivate float maxVelocityY;\n\n\t\t\tprivate boolean hasMoved;\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tif (singleTapDetector.onTouchEvent(event)) {\n\t\t\t\t\tshowOnMap(menu.getLatLon(), true, false);\n\n\t\t\t\t\tif (hasMoved) {\n\t\t\t\t\t\tapplyPosY(getViewY(), false, false);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (menu.isLandscapeLayout()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\thasMoved = false;\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = getViewY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tmaxVelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\thasMoved = true;\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = getViewY() + (y - dy);\n\t\t\t\t\t\tsetViewY((int) newY, false, false);\n\n\t\t\t\t\t\tmenuFullHeight = view.getHeight() - (int) newY + 10;\n\t\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\t\tViewGroup.LayoutParams lp = mainView.getLayoutParams();\n\t\t\t\t\t\t\tlp.height = Math.max(menuFullHeight, menuTitleHeight);\n\t\t\t\t\t\t\tmainView.setLayoutParams(lp);\n\t\t\t\t\t\t\tmainView.requestLayout();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tvelocityY = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (velocityY > maxVelocityY)\n\t\t\t\t\t\t\tmaxVelocityY = velocityY;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\t\tint currentY = getViewY();\n\t\t\t\t\t\t\n\t\t\t\t\t\tslidingUp = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tboolean skipHalfScreenState = Math.abs(currentY - dyMain) > skipHalfScreenStateLimit;\n\t\t\t\t\t\tboolean needCloseMenu = false;\n\n\t\t\t\t\t\tint oldMenuState = menu.getCurrentMenuState();\n\t\t\t\t\t\tif (menuBottomViewHeight > 0 && slidingUp) {\n\t\t\t\t\t\t\tmenu.slideUp();\n\t\t\t\t\t\t\tif (skipHalfScreenState) {\n\t\t\t\t\t\t\t\tmenu.slideUp();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (slidingDown) {\n\t\t\t\t\t\t\tneedCloseMenu = !menu.slideDown();\n\t\t\t\t\t\t\tif (!needCloseMenu && skipHalfScreenState) {\n\t\t\t\t\t\t\t\tmenu.slideDown();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint newMenuState = menu.getCurrentMenuState();\n\t\t\t\t\t\tboolean needMapAdjust = oldMenuState != newMenuState && newMenuState != MenuController.MenuState.FULL_SCREEN;\n\n\t\t\t\t\t\tapplyPosY(currentY, needCloseMenu, needMapAdjust);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tprivate void applyPosY(final int currentY, final boolean needCloseMenu, boolean needMapAdjust) {\n\t\t\t\tfinal int posY = getPosY(needCloseMenu);\n\t\t\t\tif (currentY != posY) {\n\t\t\t\t\tif (posY < currentY) {\n\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\tmainView.animate().y(posY)\n\t\t\t\t\t\t\t\t.setDuration(200)\n\t\t\t\t\t\t\t\t.setInterpolator(new DecelerateInterpolator())\n\t\t\t\t\t\t\t\t.setListener(new AnimatorListenerAdapter() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onAnimationCancel(Animator animation) {\n\t\t\t\t\t\t\t\t\t\tif (needCloseMenu) {\n\t\t\t\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onAnimationEnd(Animator animation) {\n\t\t\t\t\t\t\t\t\t\tif (needCloseMenu) {\n\t\t\t\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.start();\n\n\t\t\t\t\t\tfabView.animate().y(getFabY(posY))\n\t\t\t\t\t\t\t\t.setDuration(200)\n\t\t\t\t\t\t\t\t.setInterpolator(new DecelerateInterpolator())\n\t\t\t\t\t\t\t\t.start();\n\n\t\t\t\t\t\tif (needMapAdjust) {\n\t\t\t\t\t\t\tadjustMapPosition(posY, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetViewY(posY, false, needMapAdjust);\n\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\ttopView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowView = view.findViewById(R.id.context_menu_top_shadow);\n\t\ttopShadowView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowAllView = view.findViewById(R.id.context_menu_top_shadow_all);\n\t\ttopShadowAllView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\tif (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN)\n\t\t\t\t\treturn slideTouchListener.onTouch(v, event);\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tbuildHeader();\n\n\t\t// FAB\n\t\tfabView = (ImageView)view.findViewById(R.id.context_menu_fab_view);\n\t\tif (menu.fabVisible()) {\n\t\t\tfabView.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmenu.fabPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfabView.setVisibility(View.GONE);\n\t\t}\n\n\t\tif (!menu.buttonsVisible()) {\n\t\t\tView buttonsTopBorder = view.findViewById(R.id.buttons_top_border);\n\t\t\tView buttons = view.findViewById(R.id.context_menu_buttons);\n\t\t\tbuttonsTopBorder.setVisibility(View.GONE);\n\t\t\tbuttons.setVisibility(View.GONE);\n\t\t}\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonFavoritePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonWaypoint = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\t//buttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_waypoints,\n\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_flag_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonWaypoint.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonWaypointPressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonSharePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonMorePressed();\n\t\t\t}\n\t\t});\n\n\t\tbuildBottomView();\n\n\t\tgetMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);\n\n\t\treturn view;\n\t}","id":103410,"modified_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tscreenHeight = getScreenHeight();\n\t\tskipHalfScreenStateLimit = screenHeight * SKIP_HALF_SCREEN_STATE_KOEF;\n\n\t\tviewHeight = screenHeight - getStatusBarHeight();\n\n\t\tfabPaddingTopPx = dpToPx(FAB_PADDING_TOP_DP);\n\t\tmarkerPaddingPx = dpToPx(MARKER_PADDING_DP);\n\t\tmarkerPaddingXPx = dpToPx(MARKER_PADDING_X_DP);\n\n\t\tmenu = getMapActivity().getContextMenu();\n\t\tleftTitleButtonController = menu.getLeftTitleButtonController();\n\t\trightTitleButtonController = menu.getRightTitleButtonController();\n\t\ttopRightTitleButtonController = menu.getTopRightTitleButtonController();\n\t\ttitleProgressController = menu.getTitleProgressController();\n\n\t\tmap = getMapActivity().getMapView();\n\t\tRotatedTileBox box = map.getCurrentRotatedTileBox().copy();\n\t\tcustomMapCenter = menu.getMapCenter() != null;\n\t\tif (!customMapCenter) {\n\t\t\tmapCenter = box.getCenterLatLon();\n\t\t\tmenu.setMapCenter(mapCenter);\n\t\t\tdouble markerLat = menu.getLatLon().getLatitude();\n\t\t\tdouble markerLon = menu.getLatLon().getLongitude();\n\t\t\torigMarkerX = (int)box.getPixXFromLatLon(markerLat, markerLon);\n\t\t\torigMarkerY = (int)box.getPixYFromLatLon(markerLat, markerLon);\n\t\t} else {\n\t\t\tmapCenter = menu.getMapCenter();\n\t\t\torigMarkerX = box.getCenterPixelX();\n\t\t\torigMarkerY = box.getCenterPixelY();\n\t\t}\n\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\t// Left title button\n\t\tfinal Button leftTitleButton = (Button) view.findViewById(R.id.title_button);\n\t\tif (leftTitleButtonController != null) {\n\t\t\tleftTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tleftTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Right title button\n\t\tfinal Button rightTitleButton = (Button) view.findViewById(R.id.title_button_right);\n\t\tif (rightTitleButtonController != null) {\n\t\t\trightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\trightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Top Right title button\n\t\tfinal Button topRightTitleButton = (Button) view.findViewById(R.id.title_button_top_right);\n\t\tif (topRightTitleButtonController != null) {\n\t\t\ttopRightTitleButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttopRightTitleButtonController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Progress bar\n\t\tif (titleProgressController != null) {\n\t\t\tfinal ImageView progressButton = (ImageView) view.findViewById(R.id.progressButton);\n\t\t\tprogressButton.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t\tprogressButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\ttitleProgressController.buttonPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tmenu.updateData();\n\t\tupdateButtonsAndProgress();\n\n\t\tif (menu.isLandscapeLayout()) {\n\t\t\tmainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t\tView fabContainer = view.findViewById(R.id.context_menu_fab_container);\n\t\t\tfabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),\n\t\t\t\t\tViewGroup.LayoutParams.MATCH_PARENT));\n\t\t}\n\n\t\trunLayoutListener();\n\n\t\tfinal GestureDetector singleTapDetector = new GestureDetector(view.getContext(), new SingleTapConfirm());\n\n\t\tfinal View.OnTouchListener slideTouchListener = new View.OnTouchListener() {\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\t\t\tprivate float maxVelocityY;\n\n\t\t\tprivate boolean hasMoved;\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tif (singleTapDetector.onTouchEvent(event)) {\n\t\t\t\t\tshowOnMap(menu.getLatLon(), true, false);\n\n\t\t\t\t\tif (hasMoved) {\n\t\t\t\t\t\tapplyPosY(getViewY(), false, false);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (menu.isLandscapeLayout()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\thasMoved = false;\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = getViewY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tmaxVelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\thasMoved = true;\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = getViewY() + (y - dy);\n\t\t\t\t\t\tsetViewY((int) newY, false, false);\n\n\t\t\t\t\t\tmenuFullHeight = view.getHeight() - (int) newY + 10;\n\t\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\t\tViewGroup.LayoutParams lp = mainView.getLayoutParams();\n\t\t\t\t\t\t\tlp.height = Math.max(menuFullHeight, menuTitleHeight);\n\t\t\t\t\t\t\tmainView.setLayoutParams(lp);\n\t\t\t\t\t\t\tmainView.requestLayout();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tvelocityY = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (velocityY > maxVelocityY)\n\t\t\t\t\t\t\tmaxVelocityY = velocityY;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\t\tint currentY = getViewY();\n\t\t\t\t\t\t\n\t\t\t\t\t\tslidingUp = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tboolean skipHalfScreenState = Math.abs(currentY - dyMain) > skipHalfScreenStateLimit;\n\t\t\t\t\t\tboolean needCloseMenu = false;\n\n\t\t\t\t\t\tint oldMenuState = menu.getCurrentMenuState();\n\t\t\t\t\t\tif (menuBottomViewHeight > 0 && slidingUp) {\n\t\t\t\t\t\t\tmenu.slideUp();\n\t\t\t\t\t\t\tif (skipHalfScreenState) {\n\t\t\t\t\t\t\t\tmenu.slideUp();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (slidingDown) {\n\t\t\t\t\t\t\tneedCloseMenu = !menu.slideDown();\n\t\t\t\t\t\t\tif (!needCloseMenu && skipHalfScreenState) {\n\t\t\t\t\t\t\t\tmenu.slideDown();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint newMenuState = menu.getCurrentMenuState();\n\t\t\t\t\t\tboolean needMapAdjust = oldMenuState != newMenuState && newMenuState != MenuController.MenuState.FULL_SCREEN;\n\n\t\t\t\t\t\tapplyPosY(currentY, needCloseMenu, needMapAdjust);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tprivate void applyPosY(final int currentY, final boolean needCloseMenu, boolean needMapAdjust) {\n\t\t\t\tfinal int posY = getPosY(needCloseMenu);\n\t\t\t\tif (currentY != posY) {\n\t\t\t\t\tif (posY < currentY) {\n\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!oldAndroid()) {\n\t\t\t\t\t\tmainView.animate().y(posY)\n\t\t\t\t\t\t\t\t.setDuration(200)\n\t\t\t\t\t\t\t\t.setInterpolator(new DecelerateInterpolator())\n\t\t\t\t\t\t\t\t.setListener(new AnimatorListenerAdapter() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onAnimationCancel(Animator animation) {\n\t\t\t\t\t\t\t\t\t\tif (needCloseMenu) {\n\t\t\t\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onAnimationEnd(Animator animation) {\n\t\t\t\t\t\t\t\t\t\tif (needCloseMenu) {\n\t\t\t\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.start();\n\n\t\t\t\t\t\tfabView.animate().y(getFabY(posY))\n\t\t\t\t\t\t\t\t.setDuration(200)\n\t\t\t\t\t\t\t\t.setInterpolator(new DecelerateInterpolator())\n\t\t\t\t\t\t\t\t.start();\n\n\t\t\t\t\t\tif (needMapAdjust) {\n\t\t\t\t\t\t\tadjustMapPosition(posY, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetViewY(posY, false, needMapAdjust);\n\t\t\t\t\t\tupdateMainViewLayout(posY);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\ttopView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowView = view.findViewById(R.id.context_menu_top_shadow);\n\t\ttopShadowView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowAllView = view.findViewById(R.id.context_menu_top_shadow_all);\n\t\ttopShadowAllView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\tif (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN)\n\t\t\t\t\treturn slideTouchListener.onTouch(v, event);\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tbuildHeader();\n\n\t\t// FAB\n\t\tfabView = (ImageView)view.findViewById(R.id.context_menu_fab_view);\n\t\tif (menu.fabVisible()) {\n\t\t\tfabView.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmenu.fabPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfabView.setVisibility(View.GONE);\n\t\t}\n\n\t\tif (!menu.buttonsVisible()) {\n\t\t\tView buttonsTopBorder = view.findViewById(R.id.buttons_top_border);\n\t\t\tView buttons = view.findViewById(R.id.context_menu_buttons);\n\t\t\tbuttonsTopBorder.setVisibility(View.GONE);\n\t\t\tbuttons.setVisibility(View.GONE);\n\t\t}\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonFavoritePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonWaypoint = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\tif (getMyApplication().getTargetPointsHelper().getPointToNavigate() == null) {\n\t\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_flag_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t} else {\n\t\t\tbuttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_waypoints,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\t}\n\t\tbuttonWaypoint.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonWaypointPressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonSharePressed();\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dashboard_subheader_text_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmenu.buttonMorePressed();\n\t\t\t}\n\t\t});\n\n\t\tbuildBottomView();\n\n\t\tgetMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);\n\n\t\treturn view;\n\t}","commit_id":"5f3636c39b9f2fcda830ffc9082427a935e8d7ff","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static void updateCurrentTrack(View v, final Activity ctx, OsmandApplication app) {\n\t\tif (OsmandPlugin.getEnabledPlugin(OsmandMonitoringPlugin.class) == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (v == null) {\n\t\t\treturn;\n\t\t}\n\t\tfinal boolean isRecording = app.getSettings().SAVE_GLOBAL_TRACK_TO_GPX.get();\n\t\tImageButton stop = ((ImageButton) v.findViewById(R.id.stop));\n\t\tstop.setImageDrawable(app.getIconsCache().getContentIcon(\n\t\t\t\tisRecording ? R.drawable.ic_action_rec_stop : R.drawable.ic_play_dark));\n\t\tstop.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinal OsmandMonitoringPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmandMonitoringPlugin.class);\n\t\t\t\tif (isRecording) {\n\t\t\t\t\tplugin.stopRecording();\n\t\t\t\t} else {\n\t\t\t\t\tplugin.startGPXMonitoring(ctx);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tSavingTrackHelper sth = app.getSavingTrackHelper();\n\t\tImageButton save = ((ImageButton) v.findViewById(R.id.show_on_map));\n\t\tsave.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tRunnable run = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfinal OsmandMonitoringPlugin plugin = OsmandPlugin\n\t\t\t\t\t\t\t\t.getEnabledPlugin(OsmandMonitoringPlugin.class);\n\t\t\t\t\t\tplugin.saveCurrentTrack();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trun.run();\n\t\t\t}\n\t\t});\n\t\tif (sth.getPoints() > 0 || sth.getDistance() > 0) {\n\t\t\tsave.setVisibility(View.VISIBLE);\n\t\t} else {\n\t\t\tsave.setVisibility(View.GONE);\n\t\t}\n\t\tsave.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_action_gsave_dark));\n\n\t\t((TextView) v.findViewById(R.id.points_count)).setText(sth.getPoints() + \"\");\n\t\t((TextView) v.findViewById(R.id.distance))\n\t\t\t\t.setText(OsmAndFormatter.getFormattedDistance(sth.getDistance(), app));\n\t\tv.findViewById(R.id.points_icon).setVisibility(View.VISIBLE);\n\t\tImageView distance = (ImageView) v.findViewById(R.id.distance_icon);\n\t\tdistance.setVisibility(View.VISIBLE);\n\t\tdistance.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_distance));\n\t\tImageView pointsCount = (ImageView) v.findViewById(R.id.points_icon);\n\t\tpointsCount.setVisibility(View.VISIBLE);\n\t\tpointsCount.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_point));\n\n\t}","id":103411,"modified_method":"public static void updateCurrentTrack(View v, final Activity ctx, OsmandApplication app) {\n\t\tif (OsmandPlugin.getEnabledPlugin(OsmandMonitoringPlugin.class) == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (v == null) {\n\t\t\treturn;\n\t\t}\n\t\tfinal boolean isRecording = app.getSettings().SAVE_GLOBAL_TRACK_TO_GPX.get();\n\t\tImageButton stop = ((ImageButton) v.findViewById(R.id.stop));\n\t\tif(isRecording) {\n\t\t\tstop.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_action_rec_stop));\n\t\t} else {\n\t\t\tstop.setImageDrawable(app.getIconsCache().getIcon(R.drawable.ic_action_rec_start, R.color.recording_color));\n\t\t}\n\t\tstop.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinal OsmandMonitoringPlugin plugin = OsmandPlugin.getEnabledPlugin(OsmandMonitoringPlugin.class);\n\t\t\t\tif (isRecording) {\n\t\t\t\t\tplugin.stopRecording();\n\t\t\t\t} else {\n\t\t\t\t\tplugin.startGPXMonitoring(ctx);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tSavingTrackHelper sth = app.getSavingTrackHelper();\n\t\tImageButton save = ((ImageButton) v.findViewById(R.id.show_on_map));\n\t\tsave.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tRunnable run = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfinal OsmandMonitoringPlugin plugin = OsmandPlugin\n\t\t\t\t\t\t\t\t.getEnabledPlugin(OsmandMonitoringPlugin.class);\n\t\t\t\t\t\tplugin.saveCurrentTrack();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trun.run();\n\t\t\t}\n\t\t});\n\t\tif (sth.getPoints() > 0 || sth.getDistance() > 0) {\n\t\t\tsave.setVisibility(View.VISIBLE);\n\t\t} else {\n\t\t\tsave.setVisibility(View.GONE);\n\t\t}\n\t\tsave.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_action_gsave_dark));\n\n\t\t((TextView) v.findViewById(R.id.points_count)).setText(sth.getPoints() + \"\");\n\t\t((TextView) v.findViewById(R.id.distance))\n\t\t\t\t.setText(OsmAndFormatter.getFormattedDistance(sth.getDistance(), app));\n\t\tv.findViewById(R.id.points_icon).setVisibility(View.VISIBLE);\n\t\tImageView distance = (ImageView) v.findViewById(R.id.distance_icon);\n\t\tdistance.setVisibility(View.VISIBLE);\n\t\tdistance.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_distance));\n\t\tImageView pointsCount = (ImageView) v.findViewById(R.id.points_icon);\n\t\tpointsCount.setVisibility(View.VISIBLE);\n\t\tpointsCount.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_point));\n\n\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void updatePlayButton(final RoutingHelper routingHelper, final MapActivity map, final ImageView play) {\n\t\tboolean toContinueNavigation = routingHelper.isRoutePlanningMode();\n\t\tplay.setImageDrawable(getMyApplication().getIconsCache().getContentIcon(\n\t\t\t\ttoContinueNavigation? R.drawable.ic_play_dark : R.drawable.ic_action_rec_stop ) \n\t\t\t\t);\n\t\tplay.setContentDescription(getString(toContinueNavigation ? R.string.continue_navigation :\n\t\t\tR.string.pause_navigation));\n\t\tplay.setOnClickListener(new View.OnClickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif(routingHelper.isRoutePlanningMode()) {\n\t\t\t\t\troutingHelper.setRoutePlanningMode(false);\n\t\t\t\t\troutingHelper.setFollowingMode(true);\n\t\t\t\t} else {\n\t\t\t\t\troutingHelper.setRoutePlanningMode(true);\n\t\t\t\t\troutingHelper.setFollowingMode(false);\n\t\t\t\t\troutingHelper.setPauseNaviation(true);\n\t\t\t\t}\n\t\t\t\tupdatePlayButton(routingHelper, map, play);\n\t\t\t\tmap.getMapViewTrackingUtilities().switchToRoutePlanningMode();\n\t\t\t\tmap.refreshMap();\n\t\t\t}\n\t\t});\n\t}","id":103412,"modified_method":"private void updatePlayButton(final RoutingHelper routingHelper, final MapActivity map, final ImageView play) {\n\t\tboolean toContinueNavigation = routingHelper.isRoutePlanningMode();\n\t\tplay.setImageDrawable(getMyApplication().getIconsCache().getContentIcon(\n\t\t\t\ttoContinueNavigation? R.drawable.ic_play_dark : R.drawable.ic_pause ) \n\t\t\t\t);\n\t\tplay.setContentDescription(getString(toContinueNavigation ? R.string.continue_navigation :\n\t\t\tR.string.pause_navigation));\n\t\tplay.setOnClickListener(new View.OnClickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif(routingHelper.isRoutePlanningMode()) {\n\t\t\t\t\troutingHelper.setRoutePlanningMode(false);\n\t\t\t\t\troutingHelper.setFollowingMode(true);\n\t\t\t\t} else {\n\t\t\t\t\troutingHelper.setRoutePlanningMode(true);\n\t\t\t\t\troutingHelper.setFollowingMode(false);\n\t\t\t\t\troutingHelper.setPauseNaviation(true);\n\t\t\t\t}\n\t\t\t\tupdatePlayButton(routingHelper, map, play);\n\t\t\t\tmap.getMapViewTrackingUtilities().switchToRoutePlanningMode();\n\t\t\t\tmap.refreshMap();\n\t\t\t}\n\t\t});\n\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void select(int mode) {\n\t\tif (searchPoint == null) {\n\t\t\tAccessibleToast.makeText(getActivity(), R.string.please_select_address, Toast.LENGTH_SHORT).show();\n\t\t\treturn;\n\t\t}\n\t\tAddressInformation ai = new AddressInformation();\n\t\tPointDescription pointDescription = ai.getHistoryName();\n\t\tif (!Algorithms.isEmpty(street2) && !Algorithms.isEmpty(street)) {\n\t\t\tai = AddressInformation.build2StreetIntersection(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street2);\n\t\t\tpointDescription.setTypeName(region + \", \" + city);\n\t\t} else if (!Algorithms.isEmpty(building)) {\n\t\t\tai = AddressInformation.buildBuilding(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street + \", \" + building);\n\t\t\tpointDescription.setTypeName(region + \", \" + city);\n\t\t} else if (!Algorithms.isEmpty(street)) {\n\t\t\tai = AddressInformation.buildStreet(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street);\n\t\t\tpointDescription.setTypeName(region + \", \" + city);\n\t\t} else if(!Algorithms.isEmpty(city)) {\n\t\t\tai = AddressInformation.buildCity(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(city);\n\t\t\tpointDescription.setTypeName(region);\n\t\t}\n\n\t\tif(mode == ADD_TO_FAVORITE) {\n\t\t\tBundle b = new Bundle();\n\t\t\tDialog dlg = FavoriteDialogs.createAddFavouriteDialog(getActivity(), b);\n\t\t\tdlg.show();\n\t\t\tFavoriteDialogs.prepareAddFavouriteDialog(getActivity(), dlg, b, searchPoint.getLatitude(), searchPoint.getLongitude(),\n\t\t\t\t\tpointDescription);\n\t\t} else if(mode == SELECT_POINT ){\n\t\t\tIntent intent = getActivity().getIntent();\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_INTENT_KEY, ai.objectName);\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_LAT, searchPoint.getLatitude());\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_LON, searchPoint.getLongitude());\n\t\t\tgetActivity().setResult(SELECT_ADDRESS_POINT_RESULT_OK, intent);\n\t\t\tgetActivity().finish();\n\t\t} else {\n\t\t\tif (mode == NAVIGATE_TO) {\n\t\t\t\tDirectionsDialogs.directionsToDialogAndLaunchMap(getActivity(), searchPoint.getLatitude(), searchPoint.getLongitude(),  pointDescription);\n\t\t\t} else if (mode == ADD_WAYPOINT) {\n\t\t\t\tDirectionsDialogs.addWaypointDialogAndLaunchMap(getActivity(), searchPoint.getLatitude(), searchPoint.getLongitude(), pointDescription);\n\t\t\t} else if (mode == SHOW_ON_MAP) {\n\t\t\t\tosmandSettings.setMapLocationToShow(searchPoint.getLatitude(), searchPoint.getLongitude(), ai.zoom, pointDescription);\n\t\t\t\tMapActivity.launchMapActivityMoveToTop(getActivity());\n\t\t\t}\n\t\t}\n\t}","id":103413,"modified_method":"public void select(int mode) {\n\t\tif (searchPoint == null) {\n\t\t\tAccessibleToast.makeText(getActivity(), R.string.please_select_address, Toast.LENGTH_SHORT).show();\n\t\t\treturn;\n\t\t}\n\t\tAddressInformation ai = new AddressInformation();\n\t\tPointDescription pointDescription = ai.getHistoryName();\n\t\tif (!Algorithms.isEmpty(street2) && !Algorithms.isEmpty(street)) {\n\t\t\tai = AddressInformation.build2StreetIntersection(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street2);\n\t\t\tpointDescription.setTypeName(getRegionName() + \", \" + city);\n\t\t} else if (!Algorithms.isEmpty(building)) {\n\t\t\tai = AddressInformation.buildBuilding(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street + \", \" + building);\n\t\t\tpointDescription.setTypeName(getRegionName() + \", \" + city);\n\t\t} else if (!Algorithms.isEmpty(street)) {\n\t\t\tai = AddressInformation.buildStreet(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(street);\n\t\t\tpointDescription.setTypeName(getRegionName() + \", \" + city);\n\t\t} else if(!Algorithms.isEmpty(city)) {\n\t\t\tai = AddressInformation.buildCity(getActivity(), osmandSettings);\n\t\t\tpointDescription.setName(city);\n\t\t\tpointDescription.setTypeName(getRegionName());\n\t\t}\n\n\t\tif(mode == ADD_TO_FAVORITE) {\n\t\t\tBundle b = new Bundle();\n\t\t\tDialog dlg = FavoriteDialogs.createAddFavouriteDialog(getActivity(), b);\n\t\t\tdlg.show();\n\t\t\tFavoriteDialogs.prepareAddFavouriteDialog(getActivity(), dlg, b, searchPoint.getLatitude(), searchPoint.getLongitude(),\n\t\t\t\t\tpointDescription);\n\t\t} else if(mode == SELECT_POINT ){\n\t\t\tIntent intent = getActivity().getIntent();\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_INTENT_KEY, ai.objectName);\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_LAT, searchPoint.getLatitude());\n\t\t\tintent.putExtra(SELECT_ADDRESS_POINT_LON, searchPoint.getLongitude());\n\t\t\tgetActivity().setResult(SELECT_ADDRESS_POINT_RESULT_OK, intent);\n\t\t\tgetActivity().finish();\n\t\t} else {\n\t\t\tif (mode == NAVIGATE_TO) {\n\t\t\t\tDirectionsDialogs.directionsToDialogAndLaunchMap(getActivity(), searchPoint.getLatitude(), searchPoint.getLongitude(),  pointDescription);\n\t\t\t} else if (mode == ADD_WAYPOINT) {\n\t\t\t\tDirectionsDialogs.addWaypointDialogAndLaunchMap(getActivity(), searchPoint.getLatitude(), searchPoint.getLongitude(), pointDescription);\n\t\t\t} else if (mode == SHOW_ON_MAP) {\n\t\t\t\tosmandSettings.setMapLocationToShow(searchPoint.getLatitude(), searchPoint.getLongitude(), ai.zoom, pointDescription);\n\t\t\t\tMapActivity.launchMapActivityMoveToTop(getActivity());\n\t\t\t}\n\t\t}\n\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static AddressInformation buildBuilding(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString postcode = settings.getLastSearchedPostcode();\n\t\t\tString city = settings.getLastSearchedCityName();\n\t\t\tString cityName = !Algorithms.isEmpty(postcode) ? postcode : city;\n\t\t\tString street = settings.getLastSearchedStreet();\n\t\t\tString building = settings.getLastSearchedBuilding();\n\t\t\tai.objectName = cityName+\", \"+ street + \" \" + building;\n\t\t\tai.objectType = ctx.getString(R.string.search_address_building);;\n\t\t\tai.zoom = 17;\n\t\t\treturn ai;\n\t\t}","id":103414,"modified_method":"public static AddressInformation buildBuilding(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString cityName = getCityName(settings);\n\t\t\tString street = settings.getLastSearchedStreet();\n\t\t\tString building = settings.getLastSearchedBuilding();\n\t\t\tai.objectName = street + \" \" + building;\n\t\t\tai.objectType = cityName;\n\t\t\tai.zoom = 17;\n\t\t\treturn ai;\n\t\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static AddressInformation buildCity(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString city = settings.getLastSearchedCityName();\n\t\t\tai.objectName = city;\n\t\t\tai.objectType = ctx.getString(R.string.search_address_city);\n\t\t\tai.zoom = 14;\n\t\t\treturn ai;\n\t\t}","id":103415,"modified_method":"public static AddressInformation buildCity(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString city = settings.getLastSearchedCityName();\n\t\t\tai.objectName = city;\n\t\t\tai.objectType = getRegionName(ctx, settings);\n\t\t\tai.zoom = 14;\n\t\t\treturn ai;\n\t\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected void updateUI(){\n\t\tfindViewById(R.id.ResetCountry).setEnabled(!Algorithms.isEmpty(region));\n\t\tif(Algorithms.isEmpty(region)){\n\t\t\tcountryButton.setText(R.string.ChooseCountry);\n\t\t} else {\n\t\t\tcountryButton.setText(region.replace('_', ' '));\n\t\t}\n\n\t\tfindViewById(R.id.ResetCity).setEnabled(!Algorithms.isEmpty(city) || !Algorithms.isEmpty(postcode));\n\t\tif(Algorithms.isEmpty(city) && Algorithms.isEmpty(postcode)){\n\t\t\tcityButton.setText(R.string.choose_city);\n\t\t} else {\n\t\t\tif(!Algorithms.isEmpty(postcode)){\n\t\t\t\tcityButton.setText(postcode);\n\t\t\t} else {\n\t\t\t\tcityButton.setText(city.replace('_', ' '));\n\t\t\t}\n\t\t}\n\t\tcityButton.setEnabled(!Algorithms.isEmpty(region));\n\n\t\tfindViewById(R.id.ResetStreet).setEnabled(!Algorithms.isEmpty(street));\n\t\tif(Algorithms.isEmpty(street)){\n\t\t\tstreetButton.setText(R.string.choose_street);\n\t\t} else {\n\t\t\tstreetButton.setText(street);\n\t\t}\n\t\tstreetButton.setEnabled(!Algorithms.isEmpty(city) || !Algorithms.isEmpty(postcode));\n\t\t\n\t\tbuildingButton.setEnabled(!Algorithms.isEmpty(street));\n\t\tfindViewById(R.id.RadioGroup).setVisibility(Algorithms.isEmpty(street) ? View.GONE : View.VISIBLE);\n\t\t\n\t\tif(radioBuilding){\n\t\t\t((RadioButton)findViewById(R.id.RadioBuilding)).setChecked(true);\n\t\t} else {\n\t\t\t((RadioButton)findViewById(R.id.RadioIntersStreet)).setChecked(true);\n\t\t}\n\t\tupdateBuildingSection();\n\t}","id":103416,"modified_method":"protected void updateUI(){\n\t\tfindViewById(R.id.ResetCountry).setEnabled(!Algorithms.isEmpty(region));\n\t\tif(Algorithms.isEmpty(region)){\n\t\t\tcountryButton.setText(R.string.ChooseCountry);\n\t\t} else {\n\t\t\tString rnname = getRegionName();\n\t\t\tcountryButton.setText(rnname);\n\t\t}\n\n\t\tfindViewById(R.id.ResetCity).setEnabled(!Algorithms.isEmpty(city) || !Algorithms.isEmpty(postcode));\n\t\tif(Algorithms.isEmpty(city) && Algorithms.isEmpty(postcode)){\n\t\t\tcityButton.setText(R.string.choose_city);\n\t\t} else {\n\t\t\tif(!Algorithms.isEmpty(postcode)){\n\t\t\t\tcityButton.setText(postcode);\n\t\t\t} else {\n\t\t\t\tcityButton.setText(city.replace('_', ' '));\n\t\t\t}\n\t\t}\n\t\tcityButton.setEnabled(!Algorithms.isEmpty(region));\n\n\t\tfindViewById(R.id.ResetStreet).setEnabled(!Algorithms.isEmpty(street));\n\t\tif(Algorithms.isEmpty(street)){\n\t\t\tstreetButton.setText(R.string.choose_street);\n\t\t} else {\n\t\t\tstreetButton.setText(street);\n\t\t}\n\t\tstreetButton.setEnabled(!Algorithms.isEmpty(city) || !Algorithms.isEmpty(postcode));\n\t\t\n\t\tbuildingButton.setEnabled(!Algorithms.isEmpty(street));\n\t\tfindViewById(R.id.RadioGroup).setVisibility(Algorithms.isEmpty(street) ? View.GONE : View.VISIBLE);\n\t\t\n\t\tif(radioBuilding){\n\t\t\t((RadioButton)findViewById(R.id.RadioBuilding)).setChecked(true);\n\t\t} else {\n\t\t\t((RadioButton)findViewById(R.id.RadioIntersStreet)).setChecked(true);\n\t\t}\n\t\tupdateBuildingSection();\n\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static AddressInformation build2StreetIntersection(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString postcode = settings.getLastSearchedPostcode();\n\t\t\tString city = settings.getLastSearchedCityName();\n\t\t\tString cityName = !Algorithms.isEmpty(postcode) ? postcode : city;\n\t\t\tai.objectName = settings.getLastSearchedStreet() +\" x \" +\n \t\t\t\t\tsettings.getLastSearchedIntersectedStreet() + \" \" + cityName;\n\t\t\tai.objectType = ctx.getString(R.string.search_address_street_option);\n\t\t\tai.zoom = 17;\n\t\t\treturn ai;\n\t\t}","id":103417,"modified_method":"public static AddressInformation build2StreetIntersection(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString cityName = getCityName(settings);\n\t\t\tai.objectName = settings.getLastSearchedStreet() +\" x \" +\n \t\t\t\t\tsettings.getLastSearchedIntersectedStreet() + \" \" + cityName;\n\t\t\tai.objectType = cityName;\n\t\t\tai.zoom = 17;\n\t\t\treturn ai;\n\t\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static AddressInformation buildStreet(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString postcode = settings.getLastSearchedPostcode();\n\t\t\tString city = settings.getLastSearchedCityName();\n\t\t\tString cityName = !Algorithms.isEmpty(postcode) ? postcode : city;\n\t\t\tString street = settings.getLastSearchedStreet();\n\t\t\tai.objectName = cityName + \", \" + street;\n\t\t\tai.objectType = ctx.getString(R.string.search_address_street);\n\t\t\tai.zoom = 16;\n\t\t\treturn ai;\n\t\t}","id":103418,"modified_method":"public static AddressInformation buildStreet(Context ctx, OsmandSettings settings){\n\t\t\tAddressInformation ai = new AddressInformation();\n\t\t\tString cityName = getCityName(settings);\n\t\t\tString street = settings.getLastSearchedStreet();\n\t\t\tai.objectName = street;\n\t\t\tai.objectType = cityName;\n\t\t\tai.zoom = 16;\n\t\t\treturn ai;\n\t\t}","commit_id":"12a5e3fdff0a74167c542ccd096d4ad3723c7aa8","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n     * The \"listener\" that updates the UI of this panel based on the changes of\n     * fields on this panel. This is also the method to check whether all the\n     * fields on this panel are correctly filled and decides whether to enable\n     * the \"Next\" button or not.\n     *\n     * @param e the document event\n     */\n    public void updateUI(DocumentEvent e) {\n        // Enable the Next button if the current DSP panel is valid\n        String err = getCurrentDSProcessor().validatePanel();\n        if (null == err)\n            this.wizPanel.enableNextButton(true);\n        else\n            this.wizPanel.enableNextButton(false);\n    }","id":103419,"modified_method":"/**\n     * The \"listener\" that updates the UI of this panel based on the changes of\n     * fields on this panel. This is also the method to check whether all the\n     * fields on this panel are correctly filled and decides whether to enable\n     * the \"Next\" button or not.\n     *\n     * @param e the document event\n     */\n    public void updateUI(DocumentEvent e) {\n        // Enable the Next button if the current DSP panel is valid\n        this.wizPanel.enableNextButton(getCurrentDSProcessor().validatePanel());\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Changes the current panel to the given panel.\n     *\n     * @param panel instance of ImageTypePanel to change to\n     */\n    private void updateCurrentPanel(JPanel panel) {\n        currentPanel = panel;\n        typePanel.removeAll();\n        typePanel.add((JPanel) currentPanel, BorderLayout.CENTER);\n        typePanel.validate();\n        typePanel.repaint();\n        currentPanel.addPropertyChangeListener(new PropertyChangeListener() {\n            @Override\n            public void propertyChange(PropertyChangeEvent evt) {\n                if (evt.getPropertyName().equals(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString())) {\n                    updateUI(null);\n                }\n                if (evt.getPropertyName().equals(AddImageWizardChooseDataSourceVisual.EVENT.FOCUS_NEXT.toString())) {\n                    wizPanel.moveFocusToNext();\n                }\n            }\n        });\n      \n        updateUI(null);\n    }","id":103420,"modified_method":"/**\n     * Changes the current panel to the given panel.\n     *\n     * @param panel instance of ImageTypePanel to change to\n     */\n    private void updateCurrentPanel(JPanel panel) {\n        currentPanel = panel;\n        typePanel.removeAll();\n        typePanel.add((JPanel) currentPanel, BorderLayout.CENTER);\n        typePanel.validate();\n        typePanel.repaint();\n        currentPanel.addPropertyChangeListener(new PropertyChangeListener() {\n            @Override\n            public void propertyChange(PropertyChangeEvent evt) {\n                if (evt.getPropertyName().equals(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString())) {\n                    updateUI(null);\n                }\n                if (evt.getPropertyName().equals(DataSourceProcessor.DSP_PANEL_EVENT.FOCUS_NEXT.toString())) {\n                    wizPanel.moveFocusToNext();\n                }\n            }\n        });\n      \n        updateUI(null);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public String validatePanel() {\n       \n        if (imageFilePanel.validatePanel() )\n           return null;\n       else \n           return \"Error in panel\";    \n   }","id":103421,"modified_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public boolean validatePanel() {\n       \n        return imageFilePanel.validatePanel(); \n   }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public void removeUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString(), false, true);\n    }","id":103422,"modified_method":"@Override\n    public void removeUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public void changedUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString(), false, true);\n    }","id":103423,"modified_method":"@Override\n    public void changedUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed\n        String oldText = pathTextField.getText();\n        // set the current directory of the FileChooser if the ImagePath Field is valid\n        File currentDir = new File(oldText);\n        if (currentDir.exists()) {\n            fc.setCurrentDirectory(currentDir);\n        }\n\n        int retval = fc.showOpenDialog(this);\n        if (retval == JFileChooser.APPROVE_OPTION) {\n            String path = fc.getSelectedFile().getPath();\n            pathTextField.setText(path);\n        }\n        pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.FOCUS_NEXT.toString(), false, true);\n    }","id":103424,"modified_method":"private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed\n        String oldText = pathTextField.getText();\n        // set the current directory of the FileChooser if the ImagePath Field is valid\n        File currentDir = new File(oldText);\n        if (currentDir.exists()) {\n            fc.setCurrentDirectory(currentDir);\n        }\n\n        int retval = fc.showOpenDialog(this);\n        if (retval == JFileChooser.APPROVE_OPTION) {\n            String path = fc.getSelectedFile().getPath();\n            pathTextField.setText(path);\n        }\n        pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.FOCUS_NEXT.toString(), false, true);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Update functions are called by the pathTextField which has this set\n     * as it's DocumentEventListener. Each update function fires a property change\n     * to be caught by the parent panel.\n     * @param e the event, which is ignored\n     */\n    @Override\n    public void insertUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString(), false, true);\n    }","id":103425,"modified_method":"/**\n     * Update functions are called by the pathTextField which has this set\n     * as it's DocumentEventListener. Each update function fires a property change\n     * to be caught by the parent panel.\n     * @param e the event, which is ignored\n     */\n    @Override\n    public void insertUpdate(DocumentEvent e) {\n        pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public String validatePanel() {\n       \n        if (localDiskPanel.validatePanel() )\n           return null;\n       else \n           return \"Error in panel\";    \n   }","id":103426,"modified_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public boolean validatePanel() {\n           return localDiskPanel.validatePanel();\n   }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public void setSelectedItem(Object anItem) {\n            if(ready) {\n                selected = anItem;\n                enableNext = true;\n                pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString(), false, true);\n            }\n        }","id":103427,"modified_method":"@Override\n        public void setSelectedItem(Object anItem) {\n            if(ready) {\n                selected = anItem;\n                enableNext = true;\n                pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);\n            }\n        }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public String validatePanel() {\n       \n        if (localFilesPanel.validatePanel() )\n           return null;\n       else \n           return \"Error in panel\";    \n   }","id":103428,"modified_method":"/**\n     * Validates the data collected by the JPanel\n     *\n     * @return String returns NULL if success, error string if there is any errors  \n     **/  \n   @Override\n   public boolean validatePanel() {\n        return localFilesPanel.validatePanel();\n   }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed\n        int returnVal = localFileChooser.showOpenDialog(this);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            File [] files = localFileChooser.getSelectedFiles();\n            for (File f : files) {\n                currentFiles.add(f);\n            }\n            \n            //update label\n            StringBuilder allPaths = new StringBuilder();\n            for (File f : currentFiles) {\n                allPaths.append(f.getAbsolutePath()).append(\"\\n\");\n            }\n            this.selectedPaths.setText(allPaths.toString());\n            this.selectedPaths.setToolTipText(allPaths.toString());\n            \n        }\n        \n        if (!currentFiles.isEmpty()) {\n            enableNext = true;\n        }\n        else {\n            enableNext = false;\n        }\n        pcs.firePropertyChange(AddImageWizardChooseDataSourceVisual.EVENT.UPDATE_UI.toString(), false, true);\n    }","id":103429,"modified_method":"private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed\n        int returnVal = localFileChooser.showOpenDialog(this);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            File [] files = localFileChooser.getSelectedFiles();\n            for (File f : files) {\n                currentFiles.add(f);\n            }\n            \n            //update label\n            StringBuilder allPaths = new StringBuilder();\n            for (File f : currentFiles) {\n                allPaths.append(f.getAbsolutePath()).append(\"\\n\");\n            }\n            this.selectedPaths.setText(allPaths.toString());\n            this.selectedPaths.setToolTipText(allPaths.toString());\n            \n        }\n        \n        if (!currentFiles.isEmpty()) {\n            enableNext = true;\n        }\n        else {\n            enableNext = false;\n        }\n        pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);\n    }","commit_id":"5e118737da5cd5443e5103d7d7b91366641250a5","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public java.lang.String connect(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[1]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"connect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n    }","id":103430,"modified_method":"public java.lang.String connect(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[1]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"connect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"private static void _initOperationDesc1(){\n        org.apache.axis.description.OperationDesc oper;\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"store\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"), byte[].class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in4\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[0] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"connect\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"connectReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[1] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"disconnect\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[2] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"removeCollection\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"removeCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[3] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"removeDocument\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"removeDocumentReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[4] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"createCollection\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"createCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[5] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xupdate\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"));\n        oper.setReturnClass(int.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xupdateReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[6] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xupdateResource\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"));\n        oper.setReturnClass(int.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xupdateResourceReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[7] = oper;\n\n    }","id":103431,"modified_method":"private static void _initOperationDesc1(){\n        org.apache.axis.description.OperationDesc oper;\n        org.apache.axis.description.ParameterDesc param;\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"store\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"), byte[].class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in4\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[0] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"connect\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"connectReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[1] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"disconnect\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[2] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"removeCollection\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"removeCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[3] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"removeDocument\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"removeDocumentReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[4] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"createCollection\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"));\n        oper.setReturnClass(boolean.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"createCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[5] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xupdate\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"));\n        oper.setReturnClass(int.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xupdateReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[6] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xupdateResource\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"));\n        oper.setReturnClass(int.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xupdateResourceReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[7] = oper;\n\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public void disconnect(java.lang.String in0) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[2]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"disconnect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n    }","id":103432,"modified_method":"public void disconnect(java.lang.String in0) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[2]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"disconnect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public void store(java.lang.String in0, byte[] in1, java.lang.String in2, java.lang.String in3, boolean in4) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[0]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"store\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2, in3, new java.lang.Boolean(in4)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n    }","id":103433,"modified_method":"public void store(java.lang.String in0, byte[] in1, java.lang.String in2, java.lang.String in3, boolean in4) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[0]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"store\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2, in3, new java.lang.Boolean(in4)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public AdminSoapBindingStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {\n        if (service == null) {\n            super.service = new org.apache.axis.client.Service();\n        } else {\n            super.service = service;\n        }\n    }","id":103434,"modified_method":"public AdminSoapBindingStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {\n        if (service == null) {\n            super.service = new org.apache.axis.client.Service();\n        } else {\n            super.service = service;\n        }\n        ((org.apache.axis.client.Service)super.service).setTypeMappingVersion(\"1.2\");\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public int xupdateResource(java.lang.String in0, java.lang.String in1, java.lang.String in2) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[7]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xupdateResource\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Integer) _resp).intValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Integer) org.apache.axis.utils.JavaUtils.convert(_resp, int.class)).intValue();\n            }\n        }\n    }","id":103435,"modified_method":"public int xupdateResource(java.lang.String in0, java.lang.String in1, java.lang.String in2) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[7]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xupdateResource\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Integer) _resp).intValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Integer) org.apache.axis.utils.JavaUtils.convert(_resp, int.class)).intValue();\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public boolean removeDocument(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[4]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"removeDocument\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n    }","id":103436,"modified_method":"public boolean removeDocument(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[4]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"removeDocument\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public boolean createCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[5]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"createCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n    }","id":103437,"modified_method":"public boolean createCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[5]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"createCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"protected org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {\n        try {\n            org.apache.axis.client.Call _call =\n                    (org.apache.axis.client.Call) super.service.createCall();\n            if (super.maintainSessionSet) {\n                _call.setMaintainSession(super.maintainSession);\n            }\n            if (super.cachedUsername != null) {\n                _call.setUsername(super.cachedUsername);\n            }\n            if (super.cachedPassword != null) {\n                _call.setPassword(super.cachedPassword);\n            }\n            if (super.cachedEndpoint != null) {\n                _call.setTargetEndpointAddress(super.cachedEndpoint);\n            }\n            if (super.cachedTimeout != null) {\n                _call.setTimeout(super.cachedTimeout);\n            }\n            if (super.cachedPortName != null) {\n                _call.setPortName(super.cachedPortName);\n            }\n            java.util.Enumeration keys = super.cachedProperties.keys();\n            while (keys.hasMoreElements()) {\n                java.lang.String key = (java.lang.String) keys.nextElement();\n                _call.setProperty(key, super.cachedProperties.get(key));\n            }\n            return _call;\n        }\n        catch (java.lang.Throwable _t) {\n            throw new org.apache.axis.AxisFault(\"Failure trying to get the Call object\", _t);\n        }\n    }","id":103438,"modified_method":"protected org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {\n        try {\n            org.apache.axis.client.Call _call = super._createCall();\n            if (super.maintainSessionSet) {\n                _call.setMaintainSession(super.maintainSession);\n            }\n            if (super.cachedUsername != null) {\n                _call.setUsername(super.cachedUsername);\n            }\n            if (super.cachedPassword != null) {\n                _call.setPassword(super.cachedPassword);\n            }\n            if (super.cachedEndpoint != null) {\n                _call.setTargetEndpointAddress(super.cachedEndpoint);\n            }\n            if (super.cachedTimeout != null) {\n                _call.setTimeout(super.cachedTimeout);\n            }\n            if (super.cachedPortName != null) {\n                _call.setPortName(super.cachedPortName);\n            }\n            java.util.Enumeration keys = super.cachedProperties.keys();\n            while (keys.hasMoreElements()) {\n                java.lang.String key = (java.lang.String) keys.nextElement();\n                _call.setProperty(key, super.cachedProperties.get(key));\n            }\n            return _call;\n        }\n        catch (java.lang.Throwable _t) {\n            throw new org.apache.axis.AxisFault(\"Failure trying to get the Call object\", _t);\n        }\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public int xupdate(java.lang.String in0, java.lang.String in1, java.lang.String in2) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[6]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xupdate\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Integer) _resp).intValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Integer) org.apache.axis.utils.JavaUtils.convert(_resp, int.class)).intValue();\n            }\n        }\n    }","id":103439,"modified_method":"public int xupdate(java.lang.String in0, java.lang.String in1, java.lang.String in2) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[6]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xupdate\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, in2});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Integer) _resp).intValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Integer) org.apache.axis.utils.JavaUtils.convert(_resp, int.class)).intValue();\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public boolean removeCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[3]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"removeCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n    }","id":103440,"modified_method":"public boolean removeCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[3]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"removeCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return ((java.lang.Boolean) _resp).booleanValue();\n            } catch (java.lang.Exception _exception) {\n                return ((java.lang.Boolean) org.apache.axis.utils.JavaUtils.convert(_resp, boolean.class)).booleanValue();\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public java.lang.String getResource(java.lang.String in0, java.lang.String in1, boolean in2, boolean in3) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[0]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"getResource\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, new java.lang.Boolean(in2), new java.lang.Boolean(in3)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n    }","id":103441,"modified_method":"public java.lang.String getResource(java.lang.String in0, java.lang.String in1, boolean in2, boolean in3) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[0]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"getResource\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, new java.lang.Boolean(in2), new java.lang.Boolean(in3)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public org.exist.soap.QueryResponse xquery(java.lang.String in0, byte[] in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[6]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xquery\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.QueryResponse) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.QueryResponse) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.QueryResponse.class);\n            }\n        }\n    }","id":103442,"modified_method":"public org.exist.soap.QueryResponse xquery(java.lang.String in0, byte[] in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[6]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"xquery\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.QueryResponse) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.QueryResponse) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.QueryResponse.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public org.exist.soap.Collection listCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[9]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"listCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.Collection) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.Collection) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.Collection.class);\n            }\n        }\n    }","id":103443,"modified_method":"public org.exist.soap.Collection listCollection(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[9]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"listCollection\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.Collection) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.Collection) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.Collection.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"protected org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {\n        try {\n            org.apache.axis.client.Call _call =\n                    (org.apache.axis.client.Call) super.service.createCall();\n            if (super.maintainSessionSet) {\n                _call.setMaintainSession(super.maintainSession);\n            }\n            if (super.cachedUsername != null) {\n                _call.setUsername(super.cachedUsername);\n            }\n            if (super.cachedPassword != null) {\n                _call.setPassword(super.cachedPassword);\n            }\n            if (super.cachedEndpoint != null) {\n                _call.setTargetEndpointAddress(super.cachedEndpoint);\n            }\n            if (super.cachedTimeout != null) {\n                _call.setTimeout(super.cachedTimeout);\n            }\n            if (super.cachedPortName != null) {\n                _call.setPortName(super.cachedPortName);\n            }\n            java.util.Enumeration keys = super.cachedProperties.keys();\n            while (keys.hasMoreElements()) {\n                java.lang.String key = (java.lang.String) keys.nextElement();\n                _call.setProperty(key, super.cachedProperties.get(key));\n            }\n            // All the type mapping information is registered\n            // when the first call is made.\n            // The type mapping information is actually registered in\n            // the TypeMappingRegistry of the service, which\n            // is the reason why registration is only needed for the first call.\n            synchronized (this) {\n                if (firstCall()) {\n                    // must set encoding style before registering serializers\n                    _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n                    _call.setEncodingStyle(org.apache.axis.Constants.URI_SOAP11_ENC);\n                    for (int i = 0; i < cachedSerFactories.size(); ++i) {\n                        java.lang.Class cls = (java.lang.Class) cachedSerClasses.get(i);\n                        javax.xml.namespace.QName qName =\n                                (javax.xml.namespace.QName) cachedSerQNames.get(i);\n                        java.lang.Class sf = (java.lang.Class)\n                                 cachedSerFactories.get(i);\n                        java.lang.Class df = (java.lang.Class)\n                                 cachedDeserFactories.get(i);\n                        _call.registerTypeMapping(cls, qName, sf, df, false);\n                    }\n                }\n            }\n            return _call;\n        }\n        catch (java.lang.Throwable _t) {\n            throw new org.apache.axis.AxisFault(\"Failure trying to get the Call object\", _t);\n        }\n    }","id":103444,"modified_method":"protected org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {\n        try {\n            org.apache.axis.client.Call _call = super._createCall();\n            if (super.maintainSessionSet) {\n                _call.setMaintainSession(super.maintainSession);\n            }\n            if (super.cachedUsername != null) {\n                _call.setUsername(super.cachedUsername);\n            }\n            if (super.cachedPassword != null) {\n                _call.setPassword(super.cachedPassword);\n            }\n            if (super.cachedEndpoint != null) {\n                _call.setTargetEndpointAddress(super.cachedEndpoint);\n            }\n            if (super.cachedTimeout != null) {\n                _call.setTimeout(super.cachedTimeout);\n            }\n            if (super.cachedPortName != null) {\n                _call.setPortName(super.cachedPortName);\n            }\n            java.util.Enumeration keys = super.cachedProperties.keys();\n            while (keys.hasMoreElements()) {\n                java.lang.String key = (java.lang.String) keys.nextElement();\n                _call.setProperty(key, super.cachedProperties.get(key));\n            }\n            // All the type mapping information is registered\n            // when the first call is made.\n            // The type mapping information is actually registered in\n            // the TypeMappingRegistry of the service, which\n            // is the reason why registration is only needed for the first call.\n            synchronized (this) {\n                if (firstCall()) {\n                    // must set encoding style before registering serializers\n                    _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n                    _call.setEncodingStyle(org.apache.axis.Constants.URI_SOAP11_ENC);\n                    for (int i = 0; i < cachedSerFactories.size(); ++i) {\n                        java.lang.Class cls = (java.lang.Class) cachedSerClasses.get(i);\n                        javax.xml.namespace.QName qName =\n                                (javax.xml.namespace.QName) cachedSerQNames.get(i);\n                        java.lang.Object x = cachedSerFactories.get(i);\n                        if (x instanceof Class) {\n                            java.lang.Class sf = (java.lang.Class)\n                                 cachedSerFactories.get(i);\n                            java.lang.Class df = (java.lang.Class)\n                                 cachedDeserFactories.get(i);\n                            _call.registerTypeMapping(cls, qName, sf, df, false);\n                        }\n                        else if (x instanceof javax.xml.rpc.encoding.SerializerFactory) {\n                            org.apache.axis.encoding.SerializerFactory sf = (org.apache.axis.encoding.SerializerFactory)\n                                 cachedSerFactories.get(i);\n                            org.apache.axis.encoding.DeserializerFactory df = (org.apache.axis.encoding.DeserializerFactory)\n                                 cachedDeserFactories.get(i);\n                            _call.registerTypeMapping(cls, qName, sf, df, false);\n                        }\n                    }\n                }\n            }\n            return _call;\n        }\n        catch (java.lang.Throwable _t) {\n            throw new org.apache.axis.AxisFault(\"Failure trying to get the Call object\", _t);\n        }\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public byte[] getResourceData(java.lang.String in0, java.lang.String in1, boolean in2, boolean in3, boolean in4) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[5]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"getResourceData\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, new java.lang.Boolean(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (byte[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (byte[]) org.apache.axis.utils.JavaUtils.convert(_resp, byte[].class);\n            }\n        }\n    }","id":103445,"modified_method":"public byte[] getResourceData(java.lang.String in0, java.lang.String in1, boolean in2, boolean in3, boolean in4) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[5]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"getResourceData\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1, new java.lang.Boolean(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4)});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (byte[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (byte[]) org.apache.axis.utils.JavaUtils.convert(_resp, byte[].class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public byte[][] retrieveData(java.lang.String in0, int in1, int in2, boolean in3, boolean in4, java.lang.String in5) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[7]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieveData\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4), in5});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (byte[][]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (byte[][]) org.apache.axis.utils.JavaUtils.convert(_resp, byte[][].class);\n            }\n        }\n    }","id":103446,"modified_method":"public byte[][] retrieveData(java.lang.String in0, int in1, int in2, boolean in3, boolean in4, java.lang.String in5) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[7]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieveData\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4), in5});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (byte[][]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (byte[][]) org.apache.axis.utils.JavaUtils.convert(_resp, byte[][].class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"private static void _initOperationDesc1(){\n        org.apache.axis.description.OperationDesc oper;\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"getResource\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"getResourceReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[0] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"query\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\"));\n        oper.setReturnClass(org.exist.soap.QueryResponse.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"queryReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[1] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"connect\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"connectReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[2] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieve\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in4\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in5\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\"));\n        oper.setReturnClass(java.lang.String[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[3] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"disconnect\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[4] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"getResourceData\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in4\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"));\n        oper.setReturnClass(byte[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"getResourceDataReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[5] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xquery\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"), byte[].class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\"));\n        oper.setReturnClass(org.exist.soap.QueryResponse.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xqueryReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[6] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieveData\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in4\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in5\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_base64Binary\"));\n        oper.setReturnClass(byte[][].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveDataReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[7] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieveByDocument\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in2\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in3\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in4\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in5\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in6\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\"));\n        oper.setReturnClass(java.lang.String[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveByDocumentReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[8] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"listCollection\");\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in0\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.addParameter(new javax.xml.namespace.QName(\"\", \"in1\"), new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"Collection\"));\n        oper.setReturnClass(org.exist.soap.Collection.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"listCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[9] = oper;\n\n    }","id":103447,"modified_method":"private static void _initOperationDesc1(){\n        org.apache.axis.description.OperationDesc oper;\n        org.apache.axis.description.ParameterDesc param;\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"getResource\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"getResourceReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[0] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"query\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\"));\n        oper.setReturnClass(org.exist.soap.QueryResponse.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"queryReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[1] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"connect\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"));\n        oper.setReturnClass(java.lang.String.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"connectReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[2] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieve\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in4\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in5\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\"));\n        oper.setReturnClass(java.lang.String[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[3] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"disconnect\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[4] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"getResourceData\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in4\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"));\n        oper.setReturnClass(byte[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"getResourceDataReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[5] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"xquery\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"base64Binary\"), byte[].class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\"));\n        oper.setReturnClass(org.exist.soap.QueryResponse.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"xqueryReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[6] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieveData\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in4\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in5\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_base64Binary\"));\n        oper.setReturnClass(byte[][].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveDataReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[7] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"retrieveByDocument\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in2\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"int\"), int.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in3\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in4\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in5\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"boolean\"), boolean.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in6\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\"));\n        oper.setReturnClass(java.lang.String[].class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"retrieveByDocumentReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[8] = oper;\n\n        oper = new org.apache.axis.description.OperationDesc();\n        oper.setName(\"listCollection\");\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in0\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"\", \"in1\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n        oper.addParameter(param);\n        oper.setReturnType(new javax.xml.namespace.QName(\"urn:exist\", \"Collection\"));\n        oper.setReturnClass(org.exist.soap.Collection.class);\n        oper.setReturnQName(new javax.xml.namespace.QName(\"\", \"listCollectionReturn\"));\n        oper.setStyle(org.apache.axis.constants.Style.RPC);\n        oper.setUse(org.apache.axis.constants.Use.ENCODED);\n        _operations[9] = oper;\n\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public java.lang.String[] retrieve(java.lang.String in0, int in1, int in2, boolean in3, boolean in4, java.lang.String in5) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[3]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieve\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4), in5});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String[]) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String[].class);\n            }\n        }\n    }","id":103448,"modified_method":"public java.lang.String[] retrieve(java.lang.String in0, int in1, int in2, boolean in3, boolean in4, java.lang.String in5) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[3]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieve\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), new java.lang.Boolean(in3), new java.lang.Boolean(in4), in5});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String[]) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String[].class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public org.exist.soap.QueryResponse query(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[1]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"query\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.QueryResponse) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.QueryResponse) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.QueryResponse.class);\n            }\n        }\n    }","id":103449,"modified_method":"public org.exist.soap.QueryResponse query(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[1]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"query\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (org.exist.soap.QueryResponse) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (org.exist.soap.QueryResponse) org.apache.axis.utils.JavaUtils.convert(_resp, org.exist.soap.QueryResponse.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public void disconnect(java.lang.String in0) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[4]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"disconnect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n    }","id":103450,"modified_method":"public void disconnect(java.lang.String in0) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[4]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"disconnect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        extractAttachments(_call);\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public QuerySoapBindingStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {\n        if (service == null) {\n            super.service = new org.apache.axis.client.Service();\n        } else {\n            super.service = service;\n        }\n            java.lang.Class cls;\n            javax.xml.namespace.QName qName;\n            java.lang.Class beansf = org.apache.axis.encoding.ser.BeanSerializerFactory.class;\n            java.lang.Class beandf = org.apache.axis.encoding.ser.BeanDeserializerFactory.class;\n            java.lang.Class enumsf = org.apache.axis.encoding.ser.EnumSerializerFactory.class;\n            java.lang.Class enumdf = org.apache.axis.encoding.ser.EnumDeserializerFactory.class;\n            java.lang.Class arraysf = org.apache.axis.encoding.ser.ArraySerializerFactory.class;\n            java.lang.Class arraydf = org.apache.axis.encoding.ser.ArrayDeserializerFactory.class;\n            java.lang.Class simplesf = org.apache.axis.encoding.ser.SimpleSerializerFactory.class;\n            java.lang.Class simpledf = org.apache.axis.encoding.ser.SimpleDeserializerFactory.class;\n            java.lang.Class simplelistsf = org.apache.axis.encoding.ser.SimpleListSerializerFactory.class;\n            java.lang.Class simplelistdf = org.apache.axis.encoding.ser.SimpleListDeserializerFactory.class;\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\");\n            cachedSerQNames.add(qName);\n            cls = java.lang.String[].class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(arraysf);\n            cachedDeserFactories.add(arraydf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_base64Binary\");\n            cachedSerQNames.add(qName);\n            cls = byte[][].class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(arraysf);\n            cachedDeserFactories.add(arraydf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseCollection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseCollection.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"Collection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.Collection.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOfQueryResponseDocument\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseDocument[].class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(arraysf);\n            cachedDeserFactories.add(arraydf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOfQueryResponseCollection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseCollection[].class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(arraysf);\n            cachedDeserFactories.add(arraydf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponse.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseDocument\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseDocument.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n    }","id":103451,"modified_method":"public QuerySoapBindingStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {\n        if (service == null) {\n            super.service = new org.apache.axis.client.Service();\n        } else {\n            super.service = service;\n        }\n        ((org.apache.axis.client.Service)super.service).setTypeMappingVersion(\"1.2\");\n            java.lang.Class cls;\n            javax.xml.namespace.QName qName;\n            javax.xml.namespace.QName qName2;\n            java.lang.Class beansf = org.apache.axis.encoding.ser.BeanSerializerFactory.class;\n            java.lang.Class beandf = org.apache.axis.encoding.ser.BeanDeserializerFactory.class;\n            java.lang.Class enumsf = org.apache.axis.encoding.ser.EnumSerializerFactory.class;\n            java.lang.Class enumdf = org.apache.axis.encoding.ser.EnumDeserializerFactory.class;\n            java.lang.Class arraysf = org.apache.axis.encoding.ser.ArraySerializerFactory.class;\n            java.lang.Class arraydf = org.apache.axis.encoding.ser.ArrayDeserializerFactory.class;\n            java.lang.Class simplesf = org.apache.axis.encoding.ser.SimpleSerializerFactory.class;\n            java.lang.Class simpledf = org.apache.axis.encoding.ser.SimpleDeserializerFactory.class;\n            java.lang.Class simplelistsf = org.apache.axis.encoding.ser.SimpleListSerializerFactory.class;\n            java.lang.Class simplelistdf = org.apache.axis.encoding.ser.SimpleListDeserializerFactory.class;\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_base64Binary\");\n            cachedSerQNames.add(qName);\n            cls = byte[][].class;\n            cachedSerClasses.add(cls);\n            qName = new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"byte\");\n            qName2 = null;\n            cachedSerFactories.add(new org.apache.axis.encoding.ser.ArraySerializerFactory(qName, qName2));\n            cachedDeserFactories.add(new org.apache.axis.encoding.ser.ArrayDeserializerFactory());\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOf_xsd_string\");\n            cachedSerQNames.add(qName);\n            cls = java.lang.String[].class;\n            cachedSerClasses.add(cls);\n            qName = new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\");\n            qName2 = null;\n            cachedSerFactories.add(new org.apache.axis.encoding.ser.ArraySerializerFactory(qName, qName2));\n            cachedDeserFactories.add(new org.apache.axis.encoding.ser.ArrayDeserializerFactory());\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOfQueryResponseCollection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseCollection[].class;\n            cachedSerClasses.add(cls);\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseCollection\");\n            qName2 = null;\n            cachedSerFactories.add(new org.apache.axis.encoding.ser.ArraySerializerFactory(qName, qName2));\n            cachedDeserFactories.add(new org.apache.axis.encoding.ser.ArrayDeserializerFactory());\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"ArrayOfQueryResponseDocument\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseDocument[].class;\n            cachedSerClasses.add(cls);\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseDocument\");\n            qName2 = null;\n            cachedSerFactories.add(new org.apache.axis.encoding.ser.ArraySerializerFactory(qName, qName2));\n            cachedDeserFactories.add(new org.apache.axis.encoding.ser.ArrayDeserializerFactory());\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"Collection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.Collection.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponse\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponse.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseCollection\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseCollection.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n            qName = new javax.xml.namespace.QName(\"urn:exist\", \"QueryResponseDocument\");\n            cachedSerQNames.add(qName);\n            cls = org.exist.soap.QueryResponseDocument.class;\n            cachedSerClasses.add(cls);\n            cachedSerFactories.add(beansf);\n            cachedDeserFactories.add(beandf);\n\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public java.lang.String[] retrieveByDocument(java.lang.String in0, int in1, int in2, java.lang.String in3, boolean in4, boolean in5, java.lang.String in6) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[8]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieveByDocument\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), in3, new java.lang.Boolean(in4), new java.lang.Boolean(in5), in6});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String[]) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String[].class);\n            }\n        }\n    }","id":103452,"modified_method":"public java.lang.String[] retrieveByDocument(java.lang.String in0, int in1, int in2, java.lang.String in3, boolean in4, boolean in5, java.lang.String in6) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[8]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"retrieveByDocument\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, new java.lang.Integer(in1), new java.lang.Integer(in2), in3, new java.lang.Boolean(in4), new java.lang.Boolean(in5), in6});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String[]) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String[]) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String[].class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"public java.lang.String connect(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[2]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"connect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n    }","id":103453,"modified_method":"public java.lang.String connect(java.lang.String in0, java.lang.String in1) throws java.rmi.RemoteException {\n        if (super.cachedEndpoint == null) {\n            throw new org.apache.axis.NoEndPointException();\n        }\n        org.apache.axis.client.Call _call = createCall();\n        _call.setOperation(_operations[2]);\n        _call.setUseSOAPAction(true);\n        _call.setSOAPActionURI(\"\");\n        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);\n        _call.setOperationName(new javax.xml.namespace.QName(\"urn:exist\", \"connect\"));\n\n        setRequestHeaders(_call);\n        setAttachments(_call);\n try {        java.lang.Object _resp = _call.invoke(new java.lang.Object[] {in0, in1});\n\n        if (_resp instanceof java.rmi.RemoteException) {\n            throw (java.rmi.RemoteException)_resp;\n        }\n        else {\n            extractAttachments(_call);\n            try {\n                return (java.lang.String) _resp;\n            } catch (java.lang.Exception _exception) {\n                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);\n            }\n        }\n  } catch (org.apache.axis.AxisFault axisFaultException) {\n  throw axisFaultException;\n}\n    }","commit_id":"50ee4d792d00c61f0c6a8210806fada5e83173d6","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Keeps only minimal URL encoding. Currently, XWiki's URL factory over encodes the URLs in order to protect them\n     * from XWiki 1.0 syntax parser.\n     * \n     * @param component a URL component\n     * @return the given string with minimal URL encoding\n     */\n    private String withMinimalURLEncoding(String component)\n    {\n        try {\n            return URLEncoder.encode(URLDecoder.decode(component, URL_ENCODING), URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            // This should never happen.\n            return component;\n        }\n    }","id":103454,"modified_method":"/**\n     * Keeps only minimal URL encoding. Currently, XWiki's URL factory over encodes the URLs in order to protect them\n     * from XWiki 1.0 syntax parser.\n     * <p>\n     * This method also ensures that the path to the temporary file is fully encoded (has the canonical form) even if\n     * the URL used to access the file is partially decoded (which can happen for instance when XWiki is behind Apache's\n     * {@code mode_proxy} with {@code nocanon} option disabled).\n     * \n     * @param encodedPathSegment an encoded URL path segment\n     * @return the given string with minimal URL encoding\n     */\n    private String withMinimalURLEncoding(String encodedPathSegment)\n    {\n        return encodeURLPathSegment(decodeURLPathSegment(encodedPathSegment));\n    }","commit_id":"e49257257d1c09b688ba3da5fdb0212f6bd240cd","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Returns the temporary file corresponding to the specified URI.\n     * \n     * @param uri request URI.\n     * @param context xwiki context.\n     * @return temporary file corresponding to the specified URI or null if no such file can be located.\n     */\n    protected File getTemporaryFile(String uri, XWikiContext context)\n    {\n        Matcher matcher = URI_PATTERN.matcher(uri);\n        File result = null;\n        if (matcher.find()) {\n            String wiki = context.getWikiId();\n            try {\n                wiki = URLEncoder.encode(wiki, URL_ENCODING);\n            } catch (UnsupportedEncodingException e) {\n                // This should never happen;\n            }\n            String space = withMinimalURLEncoding(matcher.group(1));\n            String page = withMinimalURLEncoding(matcher.group(2));\n            String module = withMinimalURLEncoding(matcher.group(3));\n            // The file path is used as is, without any modifications (no decoding/encoding is performed). The modules\n            // that create the temporary files and the corresponding URLs used to access them are responsible for\n            // encoding the file path components so that they don't contain invalid characters.\n            String filePath = matcher.group(4);\n            String prefix = String.format(\"temp/%s/%s/%s/%s/\", module, wiki, space, page);\n            String path = URI.create(prefix + filePath).normalize().toString();\n            if (path.startsWith(prefix)) {\n                result = new File(this.environment.getTemporaryDirectory(), path);\n                result = result.exists() ? result : null;\n            }\n        }\n        return result;\n    }","id":103455,"modified_method":"/**\n     * Returns the temporary file corresponding to the specified URI.\n     * \n     * @param uri request URI.\n     * @param context xwiki context.\n     * @return temporary file corresponding to the specified URI or null if no such file can be located.\n     */\n    protected File getTemporaryFile(String uri, XWikiContext context)\n    {\n        Matcher matcher = URI_PATTERN.matcher(uri);\n        File result = null;\n        if (matcher.find()) {\n            List<String> pathSegments = new ArrayList<String>();\n            // Add all the path segments.\n            pathSegments.add(\"temp\");\n            // temp/module\n            pathSegments.add(withMinimalURLEncoding(matcher.group(3)));\n            // temp/module/wiki\n            pathSegments.add(encodeURLPathSegment(context.getWikiId()));\n            // temp/module/wiki/space\n            pathSegments.add(withMinimalURLEncoding(matcher.group(1)));\n            // temp/module/wiki/space/page\n            pathSegments.add(withMinimalURLEncoding(matcher.group(2)));\n            // Save the path prefix before adding the file path to be able to check if the file path tries to get out of\n            // the parent folder (e.g. using '/../').\n            String prefix = StringUtils.join(pathSegments, PATH_SEPARATOR);\n            // temp/module/wiki/space/page/path/to/file.tmp\n            for (String filePathSegment : matcher.group(4).split(PATH_SEPARATOR)) {\n                pathSegments.add(withMinimalURLEncoding(filePathSegment));\n            }\n            String path = URI.create(StringUtils.join(pathSegments, PATH_SEPARATOR)).normalize().toString();\n            if (path.startsWith(prefix)) {\n                result = new File(this.environment.getTemporaryDirectory(), path);\n                result = result.exists() ? result : null;\n            }\n        }\n        return result;\n    }","commit_id":"e49257257d1c09b688ba3da5fdb0212f6bd240cd","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates an empty file at the specified path.\n     * \n     * @param path the file path\n     * @throws IOException if creating the empty file fails\n     */\n    private void createEmptyFile(String path) throws IOException\n    {\n        File emptyFile = new File(base, path);\n        emptyFile.getParentFile().mkdirs();\n        emptyFile.createNewFile();\n    }","id":103456,"modified_method":"/**\n     * Creates an empty file at the specified path.\n     * \n     * @param path the file path\n     * @throws IOException if creating the empty file fails\n     */\n    private void createEmptyFile(String path) throws IOException\n    {\n        File emptyFile = new File(base, path);\n        emptyFile.getParentFile().mkdirs();\n        emptyFile.createNewFile();\n        emptyFile.deleteOnExit();\n    }","commit_id":"e49257257d1c09b688ba3da5fdb0212f6bd240cd","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    @SuppressWarnings(\"rawtypes\") // Supertype uses raw type\n    public Collection<Class<? extends LifecycleComponent>> getGuiceServiceClasses() {\n        logger.debug(\"Register gce compute and metadata services\");\n        return Collections.singletonList(\n            GceModule.getComputeServiceImpl(),\n            GceModule.getMetadataServiceImpl());\n    }","id":103457,"modified_method":"@Override\n    @SuppressWarnings(\"rawtypes\") // Supertype uses raw type\n    public Collection<Class<? extends LifecycleComponent>> getGuiceServiceClasses() {\n        logger.debug(\"Register gce compute and metadata services\");\n        Collection<Class<? extends LifecycleComponent>> services = new ArrayList<>();\n        services.add(GceModule.getComputeServiceImpl());\n        services.add(GceModule.getMetadataServiceImpl());\n        return services;\n    }","commit_id":"11ec3a4af610f1ec78318cabc4959fcc35ac3081","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static List<String> generateDescriptors(final DescriptionContainer module,\n                    final Options options,\n                    final Log logger)\n    throws SCRDescriptorException {\n        int metatypeCount = 0;\n        for(final ComponentContainer component : module.getComponents()) {\n            if ( component.getMetatypeContainer() != null ) {\n                metatypeCount++;\n            }\n        }\n        // write meta type info if there is a file name\n        if (!StringUtils.isEmpty(options.getMetaTypeName())) {\n            final File parentDir = new File(options.getOutputDirectory(), \"OSGI-INF\");\n            final File mtDir = new File(parentDir, \"metatype\");\n\n            final File mtFile = new File(mtDir, options.getMetaTypeName());\n\n            if (metatypeCount > 0) {\n                logger.info(\"Generating \" + metatypeCount + \" MetaType Descriptors to \" + mtFile);\n                mtFile.getParentFile().mkdirs();\n                MetaTypeIO.write(module, mtFile);\n                return Collections.singletonList(parentDir.getName() + '/' + mtDir.getName() + '/' + mtFile.getName());\n            }\n            if (mtFile.exists()) {\n                mtFile.delete();\n            }\n\n        } else {\n            if ( metatypeCount > 0 ) {\n                logger.info(\"Meta type file name is not set: meta type info is not written.\");\n            }\n        }\n        return null;\n    }","id":103458,"modified_method":"public static List<String> generateDescriptors(final DescriptionContainer module,\n                    final Options options,\n                    final Log logger)\n    throws SCRDescriptorException {\n        int metatypeCount = 0;\n        for(final ComponentContainer component : module.getComponents()) {\n            if ( component.getMetatypeContainer() != null ) {\n                metatypeCount++;\n            }\n        }\n        // write meta type info if there is a file name\n        if (!StringUtils.isEmpty(options.getMetaTypeName())) {\n            final File parentDir = new File(options.getOutputDirectory(), \"OSGI-INF\");\n            final File mtDir = new File(parentDir, \"metatype\");\n\n            final File mtFile = new File(mtDir, options.getMetaTypeName());\n\n            if (metatypeCount > 0) {\n                mtDir.mkdirs();\n\n                final List<String> fileNames = new ArrayList<String>();\n                if ( options.isGenerateSeparateDescriptors() ) {\n                    for(final ComponentContainer component : module.getComponents() ) {\n                        if ( component.getMetatypeContainer() != null ) {\n                            final File file = new File(mtDir, component.getClassDescription().getDescribedClass().getName() + \".xml\");\n                            logger.info(\"Generating 1 MetaType Descriptor in \" + file);\n                            MetaTypeIO.write(module, Collections.singletonList(component), file);\n                            fileNames.add(parentDir.getName() + '/' + mtDir.getName() + '/' + file.getName());\n                        }\n                    }\n                } else {\n                    logger.info(\"Generating \" + metatypeCount + \" MetaType Descriptors in \" + mtFile);\n                    MetaTypeIO.write(module, module.getComponents(), mtFile);\n                    fileNames.add(parentDir.getName() + '/' + mtDir.getName() + '/' + mtFile.getName());\n                }\n                return fileNames;\n            }\n            if (mtFile.exists()) {\n                mtFile.delete();\n            }\n\n        } else {\n            if ( metatypeCount > 0 ) {\n                logger.info(\"Meta type file name is not set: meta type info is not written.\");\n            }\n        }\n        return null;\n    }","commit_id":"bb0e47c78681a45ba4e0efffc5185f233fd285c9","url":"https://github.com/apache/felix"},{"original_method":"private static void write(final DescriptionContainer metaData, final File file)\n    throws SCRDescriptorException {\n        try {\n            generateXML(metaData, IOUtils.getSerializer(file));\n        } catch (final SAXException e) {\n            throw new SCRDescriptorException(\"Unable to generate xml\", file.toString(), e);\n        }\n    }","id":103459,"modified_method":"/**\n     * Generate the xml top level element and start streaming\n     * the meta data.\n     * @param metaData\n     * @param contentHandler\n     * @throws SAXException\n     */\n    private static void write(final DescriptionContainer metaData, final List<ComponentContainer> components, final File file)\n    throws SCRDescriptorException {\n        try {\n            final ContentHandler contentHandler = IOUtils.getSerializer(file);\n\n            contentHandler.startDocument();\n            contentHandler.startPrefixMapping(PREFIX, NAMESPACE_URI);\n\n            final AttributesImpl ai = new AttributesImpl();\n            IOUtils.addAttribute(ai, \"localization\", MetaTypeService.METATYPE_DOCUMENTS_LOCATION + \"/metatype\");\n\n            contentHandler.startElement(NAMESPACE_URI, METADATA_ELEMENT, METADATA_ELEMENT_QNAME, ai);\n            IOUtils.newline(contentHandler);\n\n            for(final ComponentContainer comp : metaData.getComponents()) {\n                if ( comp.getMetatypeContainer() != null ) {\n                    generateOCDXML(comp.getMetatypeContainer(), contentHandler);\n                    generateDesignateXML(comp.getMetatypeContainer(), contentHandler);\n                }\n            }\n\n            // end wrapper element\n            contentHandler.endElement(NAMESPACE_URI, METADATA_ELEMENT, METADATA_ELEMENT_QNAME);\n            IOUtils.newline(contentHandler);\n            contentHandler.endPrefixMapping(PREFIX);\n            contentHandler.endDocument();\n        } catch (final SAXException e) {\n            throw new SCRDescriptorException(\"Unable to generate xml\", file.toString(), e);\n        }\n    }","commit_id":"bb0e47c78681a45ba4e0efffc5185f233fd285c9","url":"https://github.com/apache/felix"},{"original_method":"@Inject\n    public GceComputeServiceImpl(Settings settings, NetworkService networkService) {\n        super(settings);\n        this.project = PROJECT_SETTING.get(settings);\n        this.zones = ZONE_SETTING.get(settings);\n        this.gceHost = GCE_HOST.get(settings);\n        this.metaDataUrl =  gceHost + \"/computeMetadata/v1/instance\";\n        this.gceRootUrl = GCE_ROOT_URL.get(settings);\n        tokenServerEncodedUrl = metaDataUrl + \"/service-accounts/default/token\";\n        this.validateCerts = GCE_VALIDATE_CERTIFICATES.get(settings);\n        networkService.addCustomNameResolver(new GceNameResolver(settings, this));\n    }","id":103460,"modified_method":"@Inject\n    public GceComputeServiceImpl(Settings settings) {\n        super(settings);\n        this.project = PROJECT_SETTING.get(settings);\n        this.zones = ZONE_SETTING.get(settings);\n        this.gceHost = GCE_HOST.get(settings);\n        this.metaDataUrl =  gceHost + \"/computeMetadata/v1/instance\";\n        this.gceRootUrl = GCE_ROOT_URL.get(settings);\n        this.tokenServerEncodedUrl = metaDataUrl + \"/service-accounts/default/token\";\n        this.validateCerts = GCE_VALIDATE_CERTIFICATES.get(settings);\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public GceComputeServiceMock(Settings settings, NetworkService networkService) {\n        super(settings, networkService);\n        this.mockHttpTransport = configureMock();\n    }","id":103461,"modified_method":"public GceComputeServiceMock(Settings settings) {\n        super(settings);\n        this.mockHttpTransport = GceMockUtils.configureMock();\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@BeforeClass\n    public static void startHttpd() throws Exception {\n        logDir = createTempDir();\n        SSLContext sslContext = getSSLContext();\n        httpsServer = HttpsServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0);\n        httpServer = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0);\n        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n        httpServer.createContext(\"/computeMetadata/v1/instance/service-accounts/default/token\", (s) -> {\n            String response = GceComputeServiceMock.readGoogleInternalJsonResponse(\n                \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\");\n            byte[] responseAsBytes = response.getBytes(StandardCharsets.UTF_8);\n            s.sendResponseHeaders(200, responseAsBytes.length);\n            OutputStream responseBody = s.getResponseBody();\n            responseBody.write(responseAsBytes);\n            responseBody.close();\n        });\n\n        httpsServer.createContext(\"/compute/v1/projects/testproject/zones/primaryzone/instances\", (s) -> {\n            Headers headers = s.getResponseHeaders();\n            headers.add(\"Content-Type\", \"application/json; charset=UTF-8\");\n            ESLogger logger = Loggers.getLogger(GceDiscoverTests.class);\n            try {\n                Path[] files = FileSystemUtils.files(logDir);\n                StringBuilder builder = new StringBuilder(\"{\\\"id\\\": \\\"dummy\\\",\\\"items\\\":[\");\n                int foundFiles = 0;\n                for (int i = 0; i < files.length; i++) {\n                    Path resolve = files[i].resolve(\"transport.ports\");\n                    if (Files.exists(resolve)) {\n                        if (foundFiles++ > 0) {\n                            builder.append(\",\");\n                        }\n                        List<String> addressses = Files.readAllLines(resolve);\n                        Collections.shuffle(addressses, random());\n                        logger.debug(\"addresses for node: [{}] published addresses [{}]\", files[i].getFileName(), addressses);\n                        builder.append(\"{\\\"description\\\": \\\"ES Node \").append(files[i].getFileName())\n                            .append(\"\\\",\\\"networkInterfaces\\\": [ {\");\n                        builder.append(\"\\\"networkIP\\\": \\\"\").append(addressses.get(0)).append(\"\\\"}],\");\n                        builder.append(\"\\\"status\\\" : \\\"RUNNING\\\"}\");\n                    }\n                }\n                builder.append(\"]}\");\n                String responseString = builder.toString();\n                final byte[] responseAsBytes = responseString.getBytes(StandardCharsets.UTF_8);\n                s.sendResponseHeaders(200, responseAsBytes.length);\n                OutputStream responseBody = s.getResponseBody();\n                responseBody.write(responseAsBytes);\n                responseBody.close();\n            } catch (Exception e) {\n                //\n                byte[] responseAsBytes =  (\"{ \\\"error\\\" : {\\\"message\\\" : \\\"\" + e.toString() + \"\\\" } }\").getBytes(StandardCharsets.UTF_8);\n                s.sendResponseHeaders(500, responseAsBytes.length);\n                OutputStream responseBody = s.getResponseBody();\n                responseBody.write(responseAsBytes);\n                responseBody.close();\n            }\n\n\n        });\n        httpsServer.start();\n        httpServer.start();\n    }","id":103462,"modified_method":"@BeforeClass\n    public static void startHttpd() throws Exception {\n        logDir = createTempDir();\n        SSLContext sslContext = getSSLContext();\n        httpsServer = HttpsServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0);\n        httpServer = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0);\n        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n        httpServer.createContext(\"/computeMetadata/v1/instance/service-accounts/default/token\", (s) -> {\n            String response = GceMockUtils.readGoogleInternalJsonResponse(\n                \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\");\n            byte[] responseAsBytes = response.getBytes(StandardCharsets.UTF_8);\n            s.sendResponseHeaders(200, responseAsBytes.length);\n            OutputStream responseBody = s.getResponseBody();\n            responseBody.write(responseAsBytes);\n            responseBody.close();\n        });\n\n        httpsServer.createContext(\"/compute/v1/projects/testproject/zones/primaryzone/instances\", (s) -> {\n            Headers headers = s.getResponseHeaders();\n            headers.add(\"Content-Type\", \"application/json; charset=UTF-8\");\n            ESLogger logger = Loggers.getLogger(GceDiscoverTests.class);\n            try {\n                Path[] files = FileSystemUtils.files(logDir);\n                StringBuilder builder = new StringBuilder(\"{\\\"id\\\": \\\"dummy\\\",\\\"items\\\":[\");\n                int foundFiles = 0;\n                for (int i = 0; i < files.length; i++) {\n                    Path resolve = files[i].resolve(\"transport.ports\");\n                    if (Files.exists(resolve)) {\n                        if (foundFiles++ > 0) {\n                            builder.append(\",\");\n                        }\n                        List<String> addressses = Files.readAllLines(resolve);\n                        Collections.shuffle(addressses, random());\n                        logger.debug(\"addresses for node: [{}] published addresses [{}]\", files[i].getFileName(), addressses);\n                        builder.append(\"{\\\"description\\\": \\\"ES Node \").append(files[i].getFileName())\n                            .append(\"\\\",\\\"networkInterfaces\\\": [ {\");\n                        builder.append(\"\\\"networkIP\\\": \\\"\").append(addressses.get(0)).append(\"\\\"}],\");\n                        builder.append(\"\\\"status\\\" : \\\"RUNNING\\\"}\");\n                    }\n                }\n                builder.append(\"]}\");\n                String responseString = builder.toString();\n                final byte[] responseAsBytes = responseString.getBytes(StandardCharsets.UTF_8);\n                s.sendResponseHeaders(200, responseAsBytes.length);\n                OutputStream responseBody = s.getResponseBody();\n                responseBody.write(responseAsBytes);\n                responseBody.close();\n            } catch (Exception e) {\n                //\n                byte[] responseAsBytes =  (\"{ \\\"error\\\" : {\\\"message\\\" : \\\"\" + e.toString() + \"\\\" } }\").getBytes(StandardCharsets.UTF_8);\n                s.sendResponseHeaders(500, responseAsBytes.length);\n                OutputStream responseBody = s.getResponseBody();\n                responseBody.write(responseAsBytes);\n                responseBody.close();\n            }\n\n\n        });\n        httpsServer.start();\n        httpServer.start();\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public Collection<Module> nodeModules() {\n        return Collections.singletonList(new GceModule());\n    }","id":103463,"modified_method":"@Override\n    public Collection<Module> nodeModules() {\n        return Collections.singletonList(new GceModule(settings));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    @SuppressWarnings(\"rawtypes\") // Supertype uses raw type\n    public Collection<Class<? extends LifecycleComponent>> nodeServices() {\n        return Collections.singletonList(GceModule.getComputeServiceImpl());\n    }","id":103464,"modified_method":"@Override\n    @SuppressWarnings(\"rawtypes\") // Supertype uses raw type\n    public Collection<Class<? extends LifecycleComponent>> nodeServices() {\n        logger.debug(\"Register gce compute and metadata services\");\n        Collection<Class<? extends LifecycleComponent>> services = new ArrayList<>();\n        services.add(GceModule.getComputeServiceImpl());\n        services.add(GceModule.getMetadataServiceImpl());\n        return services;\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void onModule(SettingsModule settingsModule) {\n        // Register GCE settings\n        settingsModule.registerSetting(GceComputeService.PROJECT_SETTING);\n        settingsModule.registerSetting(GceComputeService.ZONE_SETTING);\n        settingsModule.registerSetting(GceUnicastHostsProvider.TAGS_SETTING);\n        settingsModule.registerSetting(GceComputeService.REFRESH_SETTING);\n        settingsModule.registerSetting(GceComputeService.RETRY_SETTING);\n        settingsModule.registerSetting(GceComputeService.MAX_WAIT_SETTING);\n    }","id":103465,"modified_method":"public void onModule(SettingsModule settingsModule) {\n        logger.debug(\"registering GCE Settings\");\n        // Register GCE settings\n        settingsModule.registerSetting(GceComputeService.PROJECT_SETTING);\n        settingsModule.registerSetting(GceComputeService.ZONE_SETTING);\n        settingsModule.registerSetting(GceUnicastHostsProvider.TAGS_SETTING);\n        settingsModule.registerSetting(GceComputeService.REFRESH_SETTING);\n        settingsModule.registerSetting(GceComputeService.RETRY_SETTING);\n        settingsModule.registerSetting(GceComputeService.MAX_WAIT_SETTING);\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void onModule(DiscoveryModule discoveryModule) {\n        discoveryModule.addDiscoveryType(GCE, ZenDiscovery.class);\n        // If discovery.type: gce, we add Gce as a unicast provider\n            discoveryModule.addUnicastHostProvider(GCE, GceUnicastHostsProvider.class);\n    }","id":103466,"modified_method":"public void onModule(DiscoveryModule discoveryModule) {\n        logger.debug(\"Register gce discovery type and gce unicast provider\");\n        discoveryModule.addDiscoveryType(GCE, ZenDiscovery.class);\n        discoveryModule.addUnicastHostProvider(GCE, GceUnicastHostsProvider.class);\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithDifferentTagsAndNoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103467,"modified_method":"public void testNodesWithDifferentTagsAndNoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalSettingsMissingProject() {\n        Settings nodeSettings = Settings.builder()\n            .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"us-central1-b\")\n            .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","id":103468,"modified_method":"public void testIllegalSettingsMissingProject() {\n        Settings nodeSettings = Settings.builder()\n            .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"us-central1-b\")\n            .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * For issue https://github.com/elastic/elasticsearch-cloud-gce/issues/43\n     */\n    public void testZeroNode43() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"us-central1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(0));\n    }","id":103469,"modified_method":"/**\n     * For issue https://github.com/elastic/elasticsearch-cloud-gce/issues/43\n     */\n    public void testZeroNode43() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"us-central1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(0));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testMultipleZonesAndTwoNodesInSameZone() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103470,"modified_method":"public void testMultipleZonesAndTwoNodesInSameZone() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithSameTagsAndNoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103471,"modified_method":"public void testNodesWithSameTagsAndNoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithSameTagsAndOneTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103472,"modified_method":"public void testNodesWithSameTagsAndOneTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithDifferentTagsAndTwoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\", \"dev\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(1));\n        assertThat(discoveryNodes.get(0).getId(), is(\"#cloud-test2-0\"));\n    }","id":103473,"modified_method":"public void testNodesWithDifferentTagsAndTwoTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\", \"dev\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(1));\n        assertThat(discoveryNodes.get(0).getId(), is(\"#cloud-test2-0\"));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testMultipleZonesAndTwoNodesInDifferentZones() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103474,"modified_method":"public void testMultipleZonesAndTwoNodesInDifferentZones() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .putArray(GceComputeService.ZONE_SETTING.getKey(), \"us-central1-a\", \"europe-west1-b\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalSettingsMissingZone() {\n        Settings nodeSettings = Settings.builder()\n            .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n            .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","id":103475,"modified_method":"public void testIllegalSettingsMissingZone() {\n        Settings nodeSettings = Settings.builder()\n            .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n            .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithSameTagsAndTwoTagsSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\", \"dev\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","id":103476,"modified_method":"public void testNodesWithSameTagsAndTwoTagsSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\", \"dev\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(2));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testIllegalSettingsMissingAllRequired() {\n        Settings nodeSettings = Settings.EMPTY;\n        mock = new GceComputeServiceMock(Settings.EMPTY, networkService);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","id":103477,"modified_method":"public void testIllegalSettingsMissingAllRequired() {\n        Settings nodeSettings = Settings.EMPTY;\n        mock = new GceComputeServiceMock(nodeSettings);\n        try {\n            buildDynamicNodes(mock, nodeSettings);\n            fail(\"We expect an IllegalArgumentException for incomplete settings\");\n        } catch (IllegalArgumentException expected) {\n            assertThat(expected.getMessage(), containsString(\"one or more gce discovery settings are missing.\"));\n        }\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNodesWithDifferentTagsAndOneTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings, networkService);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(1));\n        assertThat(discoveryNodes.get(0).getId(), is(\"#cloud-test2-0\"));\n    }","id":103478,"modified_method":"public void testNodesWithDifferentTagsAndOneTagSet() {\n        Settings nodeSettings = Settings.builder()\n                .put(GceComputeService.PROJECT_SETTING.getKey(), projectName)\n                .put(GceComputeService.ZONE_SETTING.getKey(), \"europe-west1-b\")\n                .putArray(GceUnicastHostsProvider.TAGS_SETTING.getKey(), \"elasticsearch\")\n                .build();\n        mock = new GceComputeServiceMock(nodeSettings);\n        List<DiscoveryNode> discoveryNodes = buildDynamicNodes(mock, nodeSettings);\n        assertThat(discoveryNodes, hasSize(1));\n        assertThat(discoveryNodes.get(0).getId(), is(\"#cloud-test2-0\"));\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void configure() {\n        bind(GceComputeService.class).to(computeServiceImpl).asEagerSingleton();\n    }","id":103479,"modified_method":"@Override\n    protected void configure() {\n        logger.debug(\"configure GceModule (bind compute and metadata services)\");\n        bind(GceComputeService.class).to(computeServiceImpl).asEagerSingleton();\n        bind(GceMetadataService.class).to(metadataServiceImpl).asEagerSingleton();\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * @param value the gce hostname type to discover.\n     * @return the appropriate host resolved from gce meta-data.\n     * @see CustomNameResolver#resolveIfPossible(String)\n     */\n    private InetAddress[] resolve(String value) throws IOException {\n        String gceMetadataPath;\n        if (value.equals(GceAddressResolverType.GCE.configName)) {\n            // We replace network placeholder with default network interface value: 0\n            gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, \"{{network}}\", \"0\");\n        } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {\n            gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName;\n        } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {\n            // We extract the network interface from gce:privateIp:XX\n            String network = \"0\";\n            String[] privateIpConfig = Strings.splitStringToArray(value, ':');\n            if (privateIpConfig != null && privateIpConfig.length == 3) {\n                network = privateIpConfig[2];\n            }\n\n            // We replace network placeholder with network interface value\n            gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, \"{{network}}\", network);\n        } else {\n            throw new IllegalArgumentException(\"[\" + value + \"] is not one of the supported GCE network.host setting. \" +\n                    \"Expecting _gce_, _gce:privateIp:X_, _gce:hostname_\");\n        }\n\n        try {\n            String metadataResult = gceComputeService.metadata(gceMetadataPath);\n            if (metadataResult == null || metadataResult.length() == 0) {\n                throw new IOException(\"no gce metadata returned from [\" + gceMetadataPath + \"] for [\" + value + \"]\");\n            }\n            // only one address: because we explicitly ask for only one via the GceHostnameType\n            return new InetAddress[] { InetAddress.getByName(metadataResult) };\n        } catch (IOException e) {\n            throw new IOException(\"IOException caught when fetching InetAddress from [\" + gceMetadataPath + \"]\", e);\n        }\n    }","id":103480,"modified_method":"/**\n     * @param value the gce hostname type to discover.\n     * @return the appropriate host resolved from gce meta-data.\n     * @see CustomNameResolver#resolveIfPossible(String)\n     */\n    private InetAddress[] resolve(String value) throws IOException {\n        String gceMetadataPath;\n        if (value.equals(GceAddressResolverType.GCE.configName)) {\n            // We replace network placeholder with default network interface value: 0\n            gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, \"{{network}}\", \"0\");\n        } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {\n            gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName;\n        } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {\n            // We extract the network interface from gce:privateIp:XX\n            String network = \"0\";\n            String[] privateIpConfig = Strings.splitStringToArray(value, ':');\n            if (privateIpConfig != null && privateIpConfig.length == 3) {\n                network = privateIpConfig[2];\n            }\n\n            // We replace network placeholder with network interface value\n            gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, \"{{network}}\", network);\n        } else {\n            throw new IllegalArgumentException(\"[\" + value + \"] is not one of the supported GCE network.host setting. \" +\n                    \"Expecting _gce_, _gce:privateIp:X_, _gce:hostname_\");\n        }\n\n        try {\n            String metadataResult = gceMetadataService.metadata(gceMetadataPath);\n            if (metadataResult == null || metadataResult.length() == 0) {\n                throw new IOException(\"no gce metadata returned from [\" + gceMetadataPath + \"] for [\" + value + \"]\");\n            }\n            // only one address: because we explicitly ask for only one via the GceHostnameType\n            return new InetAddress[] { InetAddress.getByName(metadataResult) };\n        } catch (IOException e) {\n            throw new IOException(\"IOException caught when fetching InetAddress from [\" + gceMetadataPath + \"]\", e);\n        }\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Construct a {@link CustomNameResolver}.\n     */\n    public GceNameResolver(Settings settings, GceComputeService gceComputeService) {\n        super(settings);\n        this.gceComputeService = gceComputeService;\n    }","id":103481,"modified_method":"/**\n     * Construct a {@link CustomNameResolver}.\n     */\n    public GceNameResolver(Settings settings, GceMetadataService gceMetadataService) {\n        super(settings);\n        this.gceMetadataService = gceMetadataService;\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Utility test method to test different settings\n     * @param gceNetworkSetting tested network.host property\n     * @param expected expected InetAddress, null if we expect an exception\n     * @throws IOException Well... If something goes wrong :)\n     */\n    private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException {\n        Settings nodeSettings = Settings.builder()\n                .put(\"network.host\", gceNetworkSetting)\n                .build();\n\n        NetworkService networkService = new NetworkService(nodeSettings);\n        GceComputeServiceMock mock = new GceComputeServiceMock(nodeSettings, networkService);\n        networkService.addCustomNameResolver(new GceNameResolver(nodeSettings, mock));\n        try {\n            InetAddress[] addresses = networkService.resolveBindHostAddresses(null);\n            if (expected == null) {\n                fail(\"We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_\");\n            }\n            assertThat(addresses, arrayContaining(expected));\n        } catch (IllegalArgumentException e) {\n            if (expected != null) {\n                // We were expecting something and not an exception\n                throw e;\n            }\n            // We check that we get the expected exception\n            assertThat(e.getMessage(), containsString(\"is not one of the supported GCE network.host setting\"));\n        }\n    }","id":103482,"modified_method":"/**\n     * Utility test method to test different settings\n     * @param gceNetworkSetting tested network.host property\n     * @param expected expected InetAddress, null if we expect an exception\n     * @throws IOException Well... If something goes wrong :)\n     */\n    private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException {\n        Settings nodeSettings = Settings.builder()\n                .put(\"network.host\", gceNetworkSetting)\n                .build();\n\n        NetworkService networkService = new NetworkService(nodeSettings);\n        GceMetadataServiceMock mock = new GceMetadataServiceMock(nodeSettings, networkService);\n        networkService.addCustomNameResolver(new GceNameResolver(nodeSettings, mock));\n        try {\n            InetAddress[] addresses = networkService.resolveBindHostAddresses(null);\n            if (expected == null) {\n                fail(\"We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_\");\n            }\n            assertThat(addresses, arrayContaining(expected));\n        } catch (IllegalArgumentException e) {\n            if (expected != null) {\n                // We were expecting something and not an exception\n                throw e;\n            }\n            // We check that we get the expected exception\n            assertThat(e.getMessage(), containsString(\"is not one of the supported GCE network.host setting\"));\n        }\n    }","commit_id":"c16d309c8c05f2dd80d2b2dcb36a1bb129c82743","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected void frameworkEventWarning(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isWarnEnabled()) {\n\t\t\tlog.warn(\n\t\t\t\t\"[WARNING] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103483,"modified_method":"protected void frameworkEventWarning(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isWarnEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.warn(\n\t\t\t\"[WARNING] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventStopped(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[STOPPED] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103484,"modified_method":"protected void frameworkEventStopped(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[STOPPED] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventInfo(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\"[INFO] \" + frameworkEvent.getSource());\n\t\t}\n\t}","id":103485,"modified_method":"protected void frameworkEventInfo(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\"[INFO] \" + frameworkEvent.getSource());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventStarted(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[STARTED] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103486,"modified_method":"protected void frameworkEventStarted(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[STARTED] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventPackagesRefreshed(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[PACKAGES_REFRESHED] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103487,"modified_method":"protected void frameworkEventPackagesRefreshed(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[PACKAGES_REFRESHED] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventError(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isErrorEnabled()) {\n\t\t\tlog.error(\n\t\t\t\t\"[ERROR] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103488,"modified_method":"protected void frameworkEventError(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isErrorEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.error(\n\t\t\t\"[ERROR] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventStoppedUpdate(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[STOPPED_UPDATE] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103489,"modified_method":"protected void frameworkEventStoppedUpdate(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[STOPPED_UPDATE] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventStoppedBootClasspathModified(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[STOPPED_BOOTCLASSPATH_MODIFIED] \" +\n\t\t\t\t\tframeworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103490,"modified_method":"protected void frameworkEventStoppedBootClasspathModified(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[STOPPED_BOOTCLASSPATH_MODIFIED] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventWaitTimedout(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[WAIT_TIMEDOUT] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103491,"modified_method":"protected void frameworkEventWaitTimedout(FrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[WAIT_TIMEDOUT] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void frameworkEventStartLevelChanged(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (log.isInfoEnabled()) {\n\t\t\tlog.info(\n\t\t\t\t\"[STARTLEVEL_CHANGED] \" + frameworkEvent.getSource(),\n\t\t\t\tframeworkEvent.getThrowable());\n\t\t}\n\t}","id":103492,"modified_method":"protected void frameworkEventStartLevelChanged(\n\t\t\tFrameworkEvent frameworkEvent)\n\t\tthrows Exception {\n\n\t\tBundle bundle = frameworkEvent.getBundle();\n\n\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\tif (!log.isInfoEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlog.info(\n\t\t\t\"[STARTLEVEL_CHANGED] \" + frameworkEvent.getSource(),\n\t\t\tframeworkEvent.getThrowable());\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _getBundleExportPackages(\n\t\t\tString[] bundleSymbolicNames, List<String> packages)\n\t\tthrows Exception {\n\n\t\tClassLoader classLoader = PortalClassLoaderUtil.getClassLoader();\n\n\t\tEnumeration<URL> enu = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tURL url = enu.nextElement();\n\n\t\t\tManifest manifest = new Manifest(url.openStream());\n\n\t\t\tAttributes attributes = manifest.getMainAttributes();\n\n\t\t\tString bundleSymbolicName = attributes.getValue(\n\t\t\t\tConstants.BUNDLE_SYMBOLICNAME);\n\n\t\t\tif (Validator.isNull(bundleSymbolicName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString bundleVersionString = attributes.getValue(\n\t\t\t\tConstants.BUNDLE_VERSION);\n\n\t\t\tfor (String curBundleSymbolicName : bundleSymbolicNames) {\n\t\t\t\tif (!bundleSymbolicName.startsWith(curBundleSymbolicName)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString exportPackage = attributes.getValue(\n\t\t\t\t\tConstants.EXPORT_PACKAGE);\n\n\t\t\t\tMap<String, Map<String, String>> exportPackageMap =\n\t\t\t\t\tOSGiHeader.parseHeader(exportPackage);\n\n\t\t\t\tfor (Map.Entry<String, Map<String, String>> entry :\n\t\t\t\t\t\texportPackageMap.entrySet()) {\n\n\t\t\t\t\tString javaPackage = entry.getKey();\n\t\t\t\t\tMap<String, String> javaPackageMap = entry.getValue();\n\n\t\t\t\t\tif (javaPackageMap.containsKey(\"version\")) {\n\t\t\t\t\t\tString version = javaPackageMap.get(\"version\");\n\n\t\t\t\t\t\tjavaPackage = javaPackage.concat(\n\t\t\t\t\t\t\t\";version=\\\"\").concat(version).concat(\"\\\"\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tjavaPackage = javaPackage.concat(\n\t\t\t\t\t\t\t\";version=\\\"\").concat(bundleVersionString).concat(\n\t\t\t\t\t\t\t\t\"\\\"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tpackages.add(javaPackage);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}","id":103493,"modified_method":"private void _getBundleExportPackages(\n\t\t\tString[] bundleSymbolicNames, List<String> packages)\n\t\tthrows Exception {\n\n\t\tClassLoader classLoader = PortalClassLoaderUtil.getClassLoader();\n\n\t\tEnumeration<URL> enu = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tURL url = enu.nextElement();\n\n\t\t\tManifest manifest = new Manifest(url.openStream());\n\n\t\t\tAttributes attributes = manifest.getMainAttributes();\n\n\t\t\tString bundleSymbolicName = attributes.getValue(\n\t\t\t\tConstants.BUNDLE_SYMBOLICNAME);\n\n\t\t\tif (Validator.isNull(bundleSymbolicName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (String curBundleSymbolicName : bundleSymbolicNames) {\n\t\t\t\tif (!bundleSymbolicName.startsWith(curBundleSymbolicName)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString exportPackage = attributes.getValue(\n\t\t\t\t\tConstants.EXPORT_PACKAGE);\n\n\t\t\t\tMap<String, Map<String, String>> exportPackageMap =\n\t\t\t\t\tOSGiHeader.parseHeader(exportPackage);\n\n\t\t\t\tfor (Map.Entry<String, Map<String, String>> entry :\n\t\t\t\t\t\texportPackageMap.entrySet()) {\n\n\t\t\t\t\tString javaPackage = entry.getKey();\n\t\t\t\t\tMap<String, String> javaPackageMap = entry.getValue();\n\n\t\t\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\t\t\tsb.append(javaPackage);\n\t\t\t\t\tsb.append(\";version=\\\"\");\n\n\t\t\t\t\tif (javaPackageMap.containsKey(\"version\")) {\n\t\t\t\t\t\tString version = javaPackageMap.get(\"version\");\n\n\t\t\t\t\t\tsb.append(version);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tString bundleVersionString = attributes.getValue(\n\t\t\t\t\t\t\tConstants.BUNDLE_VERSION);\n\n\t\t\t\t\t\tsb.append(bundleVersionString);\n\t\t\t\t\t}\n\n\t\t\t\t\tsb.append(\"\\\"\");\n\n\t\t\t\t\tjavaPackage = sb.toString();\n\n\t\t\t\t\tpackages.add(javaPackage);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void serviceChanged(ServiceEvent serviceEvent) {\n\t\ttry {\n\t\t\tint type = serviceEvent.getType();\n\n\t\t\tServiceReference<?> serviceReference =\n\t\t\t\tserviceEvent.getServiceReference();\n\n\t\t\tBundle bundle = serviceReference.getBundle();\n\n\t\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\t\tif (!log.isInfoEnabled()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString message = serviceReference.toString();\n\n\t\t\tif (type == ServiceEvent.MODIFIED) {\n\t\t\t\tlog.info(\"[MODIFIED] \" + message);\n\t\t\t}\n\t\t\telse if (type == ServiceEvent.REGISTERED) {\n\t\t\t\tlog.info(\"[REGISTERED] \" + message);\n\t\t\t}\n\t\t\telse if (type == ServiceEvent.UNREGISTERING) {\n\t\t\t\tlog.info(\"[UNREGISTERING] \" + message);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","id":103494,"modified_method":"public void serviceChanged(ServiceEvent serviceEvent) {\n\t\ttry {\n\t\t\tServiceReference<?> serviceReference =\n\t\t\t\tserviceEvent.getServiceReference();\n\n\t\t\tBundle bundle = serviceReference.getBundle();\n\n\t\t\tLog log = LogFactoryUtil.getLog(bundle.getSymbolicName());\n\n\t\t\tif (!log.isInfoEnabled()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint type = serviceEvent.getType();\n\n\t\t\tif (type == ServiceEvent.MODIFIED) {\n\t\t\t\tlog.info(\"[MODIFIED] \" + serviceReference.toString());\n\t\t\t}\n\t\t\telse if (type == ServiceEvent.REGISTERED) {\n\t\t\t\tlog.info(\"[REGISTERED] \" + serviceReference.toString());\n\t\t\t}\n\t\t\telse if (type == ServiceEvent.UNREGISTERING) {\n\t\t\t\tlog.info(\"[UNREGISTERING] \" + serviceReference.toString());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"79cf985686918061b406ea3757629834d2b25868","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ShortcutSet getRerun() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_RERUN));\n  }","id":103495,"modified_method":"public static ShortcutSet getRerun() {\n    return shortcutsById(IdeActions.ACTION_RERUN);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getEditSource() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_EDIT_SOURCE));\n  }","id":103496,"modified_method":"public static ShortcutSet getEditSource() {\n    return shortcutsById(IdeActions.ACTION_EDIT_SOURCE);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getRename() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_RENAME));\n  }","id":103497,"modified_method":"public static ShortcutSet getRename() {\n    return shortcutsById(IdeActions.ACTION_RENAME);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getViewSource() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_VIEW_SOURCE));\n  }","id":103498,"modified_method":"public static ShortcutSet getViewSource() {\n    return shortcutsById(IdeActions.ACTION_VIEW_SOURCE);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getNew() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_NEW_ELEMENT));\n  }","id":103499,"modified_method":"public static ShortcutSet getNew() {\n    return shortcutsById(IdeActions.ACTION_NEW_ELEMENT);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getCopy() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_COPY));\n  }","id":103500,"modified_method":"public static ShortcutSet getCopy() {\n    return shortcutsById(IdeActions.ACTION_COPY);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getMove() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_MOVE));\n  }","id":103501,"modified_method":"public static ShortcutSet getMove() {\n    return shortcutsById(IdeActions.ACTION_MOVE);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getContextHelp() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_CONTEXT_HELP));\n  }","id":103502,"modified_method":"public static ShortcutSet getContextHelp() {\n    return shortcutsById(IdeActions.ACTION_CONTEXT_HELP);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getCloseActiveWindow() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_CLOSE));\n  }","id":103503,"modified_method":"public static ShortcutSet getCloseActiveWindow() {\n    return shortcutsById(IdeActions.ACTION_CLOSE);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ShortcutSet getFind() {\n    return new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_FIND));\n  }","id":103504,"modified_method":"public static ShortcutSet getFind() {\n    return shortcutsById(IdeActions.ACTION_FIND);\n  }","commit_id":"6451d0158ed2179eddd3252f4dbb427822dd2715","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public LocalIssueTracking(ResourceCache resourceCache, IssueCache issueCache, IssueTracking tracking,\n    LastLineHashes lastLineHashes, IssueWorkflow workflow, IssueUpdater updater,\n    ActiveRules activeRules, InputPathCache inputPathCache, PreviousIssueRepository previousIssueCache) {\n    this.resourceCache = resourceCache;\n    this.issueCache = issueCache;\n    this.tracking = tracking;\n    this.lastLineHashes = lastLineHashes;\n    this.workflow = workflow;\n    this.updater = updater;\n    this.inputPathCache = inputPathCache;\n    this.previousIssueCache = previousIssueCache;\n    this.changeContext = IssueChangeContext.createScan(((Project) resourceCache.getRoot().resource()).getAnalysisDate());\n    this.activeRules = activeRules;\n  }","id":103505,"modified_method":"public LocalIssueTracking(ResourceCache resourceCache, IssueCache issueCache, IssueTracking tracking,\n    LastLineHashes lastLineHashes, IssueWorkflow workflow, IssueUpdater updater,\n    ActiveRules activeRules, InputPathCache inputPathCache, PreviousIssueRepository previousIssueCache, ProjectRepositories projectRepositories) {\n    this.resourceCache = resourceCache;\n    this.issueCache = issueCache;\n    this.tracking = tracking;\n    this.lastLineHashes = lastLineHashes;\n    this.workflow = workflow;\n    this.updater = updater;\n    this.inputPathCache = inputPathCache;\n    this.previousIssueCache = previousIssueCache;\n    this.projectRepositories = projectRepositories;\n    this.changeContext = IssueChangeContext.createScan(((Project) resourceCache.getRoot().resource()).getAnalysisDate());\n    this.activeRules = activeRules;\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void execute() {\n    previousIssueCache.load();\n\n    for (BatchResource component : resourceCache.all()) {\n      trackIssues(component);\n    }\n  }","id":103506,"modified_method":"public void execute() {\n    if (projectRepositories.lastAnalysisDate() == null) {\n      LOG.debug(\"No previous analysis, skipping issue tracking\");\n      return;\n    }\n\n    previousIssueCache.load();\n\n    for (BatchResource component : resourceCache.all()) {\n      trackIssues(component);\n    }\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public ProjectRepositories load(ProjectRepositoryQuery query) {\n    boolean hasScanPerm = UserSession.get().hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);\n    checkPermission(query.isPreview());\n\n    DbSession session = dbClient.openSession(false);\n    try {\n      ProjectRepositories ref = new ProjectRepositories();\n      String projectKey = query.getModuleKey();\n      ComponentDto module = dbClient.componentDao().getNullableByKey(session, query.getModuleKey());\n      // Current project/module can be null when analysing a new project\n      if (module != null) {\n        ComponentDto project = getProject(module, session);\n        if (!project.key().equals(module.key())) {\n          addSettings(ref, module.getKey(), getSettingsFromParents(module, hasScanPerm, session));\n          projectKey = project.key();\n        }\n\n        List<ComponentDto> modulesTree = dbClient.componentDao().selectModulesTree(session, module.uuid());\n        Map<String, String> moduleUuidsByKey = moduleUuidsByKey(module, modulesTree);\n        Map<String, Long> moduleIdsByKey = moduleIdsByKey(module, modulesTree);\n\n        List<PropertyDto> modulesTreeSettings = dbClient.propertiesDao().selectModulePropertiesTree(module.uuid(), session);\n        TreeModuleSettings treeModuleSettings = new TreeModuleSettings(moduleUuidsByKey, moduleIdsByKey, modulesTree, modulesTreeSettings, module);\n\n        addSettingsToChildrenModules(ref, query.getModuleKey(), Maps.<String, String>newHashMap(), treeModuleSettings, hasScanPerm, session);\n        addFileData(session, ref, modulesTree, module.uuid());\n      }\n\n      addProfiles(ref, projectKey, query.getProfileName(), session);\n      addActiveRules(ref);\n      addManualRules(ref);\n      return ref;\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":103507,"modified_method":"public ProjectRepositories load(ProjectRepositoryQuery query) {\n    boolean hasScanPerm = UserSession.get().hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);\n    checkPermission(query.isPreview());\n\n    DbSession session = dbClient.openSession(false);\n    try {\n      ProjectRepositories ref = new ProjectRepositories();\n      String projectKey = query.getModuleKey();\n      ComponentDto module = dbClient.componentDao().getNullableByKey(session, query.getModuleKey());\n      // Current project/module can be null when analysing a new project\n      if (module != null) {\n        UserSession.get().checkComponentPermission(UserRole.USER, query.getModuleKey(),\n          \"You're not authorized to access to project '\" + module.name() + \"', please contact your SonarQube administrator.\");\n\n        ComponentDto project = getProject(module, session);\n        if (!project.key().equals(module.key())) {\n          addSettings(ref, module.getKey(), getSettingsFromParents(module, hasScanPerm, session));\n          projectKey = project.key();\n        }\n\n        List<ComponentDto> modulesTree = dbClient.componentDao().selectModulesTree(session, module.uuid());\n        Map<String, String> moduleUuidsByKey = moduleUuidsByKey(module, modulesTree);\n        Map<String, Long> moduleIdsByKey = moduleIdsByKey(module, modulesTree);\n\n        List<PropertyDto> modulesTreeSettings = dbClient.propertiesDao().selectModulePropertiesTree(module.uuid(), session);\n        TreeModuleSettings treeModuleSettings = new TreeModuleSettings(moduleUuidsByKey, moduleIdsByKey, modulesTree, modulesTreeSettings, module);\n\n        addSettingsToChildrenModules(ref, query.getModuleKey(), Maps.<String, String>newHashMap(), treeModuleSettings, hasScanPerm, session);\n        addFileData(session, ref, modulesTree, module.uuid());\n\n        // FIXME need real value but actually only used to know if there is a previous analysis in local issue tracking mode so any value is\n        // ok\n        ref.setLastAnalysisDate(new Date());\n      } else {\n        ref.setLastAnalysisDate(null);\n      }\n\n      addProfiles(ref, projectKey, query.getProfileName(), session);\n      addActiveRules(ref);\n      addManualRules(ref);\n      return ref;\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void checkPermission(boolean preview) {\n    UserSession userSession = UserSession.get();\n    boolean hasScanPerm = userSession.hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);\n    boolean hasPreviewPerm = userSession.hasGlobalPermission(GlobalPermissions.PREVIEW_EXECUTION);\n    if (!hasPreviewPerm && !hasScanPerm) {\n      throw new ForbiddenException(\"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\");\n    }\n    if (!preview && !hasScanPerm) {\n      throw new ForbiddenException(\"You're only authorized to execute a local (dry run) SonarQube analysis without pushing the results to the SonarQube server. \" +\n        \"Please contact your SonarQube administrator.\");\n    }\n  }","id":103508,"modified_method":"private void checkPermission(boolean preview) {\n    UserSession userSession = UserSession.get();\n    boolean hasScanPerm = userSession.hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);\n    boolean hasPreviewPerm = userSession.hasGlobalPermission(GlobalPermissions.PREVIEW_EXECUTION);\n    if (!hasPreviewPerm && !hasScanPerm) {\n      throw new ForbiddenException(\"You're not authorized to execute any SonarQube analysis. Please contact your SonarQube administrator.\");\n    }\n    if (!preview && !hasScanPerm) {\n      throw new ForbiddenException(\"You're only authorized to execute a local (preview) SonarQube analysis without pushing the results to the SonarQube server. \" +\n        \"Please contact your SonarQube administrator.\");\n    }\n    if (preview && !hasPreviewPerm) {\n      throw new ForbiddenException(\"You're not authorized to execute a preview analysis. Please contact your SonarQube administrator.\");\n    }\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_active_rules() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    RuleKey ruleKey = RuleKey.of(\"squid\", \"AvoidCycle\");\n    RuleDto rule = RuleTesting.newDto(ruleKey).setName(\"Avoid Cycle\").setConfigKey(\"squid-1\").setLanguage(ServerTester.Xoo.KEY);\n    tester.get(DbClient.class).ruleDao().insert(dbSession, rule);\n    tester.get(DbClient.class).ruleDao().addRuleParam(dbSession, rule, RuleParamDto.createFor(rule)\n      .setName(\"max\").setDefaultValue(\"10\").setType(RuleParamType.INTEGER.type()));\n\n    RuleActivation activation = new RuleActivation(ruleKey);\n    activation.setSeverity(Severity.MINOR);\n    activation.setParameter(\"max\", \"2\");\n    tester.get(RuleActivator.class).activate(dbSession, activation, profileDto.getKey());\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<ActiveRule> activeRules = newArrayList(ref.activeRules());\n    assertThat(activeRules).hasSize(1);\n    assertThat(activeRules.get(0).repositoryKey()).isEqualTo(\"squid\");\n    assertThat(activeRules.get(0).ruleKey()).isEqualTo(\"AvoidCycle\");\n    assertThat(activeRules.get(0).name()).isEqualTo(\"Avoid Cycle\");\n    assertThat(activeRules.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(activeRules.get(0).severity()).isEqualTo(\"MINOR\");\n    assertThat(activeRules.get(0).internalKey()).isEqualTo(\"squid-1\");\n    assertThat(activeRules.get(0).params()).isEqualTo(ImmutableMap.of(\"max\", \"2\"));\n  }","id":103509,"modified_method":"@Test\n  public void return_active_rules() throws Exception {\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    RuleKey ruleKey = RuleKey.of(\"squid\", \"AvoidCycle\");\n    RuleDto rule = RuleTesting.newDto(ruleKey).setName(\"Avoid Cycle\").setConfigKey(\"squid-1\").setLanguage(ServerTester.Xoo.KEY);\n    tester.get(DbClient.class).ruleDao().insert(dbSession, rule);\n    tester.get(DbClient.class).ruleDao().addRuleParam(dbSession, rule, RuleParamDto.createFor(rule)\n      .setName(\"max\").setDefaultValue(\"10\").setType(RuleParamType.INTEGER.type()));\n\n    RuleActivation activation = new RuleActivation(ruleKey);\n    activation.setSeverity(Severity.MINOR);\n    activation.setParameter(\"max\", \"2\");\n    tester.get(RuleActivator.class).activate(dbSession, activation, profileDto.getKey());\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<ActiveRule> activeRules = newArrayList(ref.activeRules());\n    assertThat(activeRules).hasSize(1);\n    assertThat(activeRules.get(0).repositoryKey()).isEqualTo(\"squid\");\n    assertThat(activeRules.get(0).ruleKey()).isEqualTo(\"AvoidCycle\");\n    assertThat(activeRules.get(0).name()).isEqualTo(\"Avoid Cycle\");\n    assertThat(activeRules.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(activeRules.get(0).severity()).isEqualTo(\"MINOR\");\n    assertThat(activeRules.get(0).internalKey()).isEqualTo(\"squid-1\");\n    assertThat(activeRules.get(0).params()).isEqualTo(ImmutableMap.of(\"max\", \"2\"));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_quality_profile_from_given_profile_name() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setProfileName(\"SonarQube way\"));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","id":103510,"modified_method":"@Test\n  public void return_quality_profile_from_given_profile_name() throws Exception {\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setProfileName(\"SonarQube way\"));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_sub_module_settings_including_settings_from_parent_modules() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103511,"modified_method":"@Test\n  public void return_sub_module_settings_including_settings_from_parent_modules() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), subModule.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_manual_rules() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    RuleDto rule = RuleTesting.newManualRule(\"manualRuleKey\").setName(\"Name manualRuleKey\");\n    tester.get(DbClient.class).ruleDao().insert(dbSession, rule);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<ActiveRule> activeRules = newArrayList(ref.activeRules());\n    assertThat(activeRules).extracting(\"repositoryKey\").containsOnly(RuleKey.MANUAL_REPOSITORY_KEY);\n    assertThat(activeRules).extracting(\"ruleKey\").containsOnly(\"manualRuleKey\");\n    assertThat(activeRules).extracting(\"name\").containsOnly(\"Name manualRuleKey\");\n    assertThat(activeRules).extracting(\"language\").containsNull();\n    assertThat(activeRules).extracting(\"severity\").containsNull();\n  }","id":103512,"modified_method":"@Test\n  public void return_manual_rules() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    RuleDto rule = RuleTesting.newManualRule(\"manualRuleKey\").setName(\"Name manualRuleKey\");\n    tester.get(DbClient.class).ruleDao().insert(dbSession, rule);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<ActiveRule> activeRules = newArrayList(ref.activeRules());\n    assertThat(activeRules).extracting(\"repositoryKey\").containsOnly(RuleKey.MANUAL_REPOSITORY_KEY);\n    assertThat(activeRules).extracting(\"ruleKey\").containsOnly(\"manualRuleKey\");\n    assertThat(activeRules).extracting(\"name\").containsOnly(\"Name manualRuleKey\");\n    assertThat(activeRules).extracting(\"language\").containsNull();\n    assertThat(activeRules).extracting(\"severity\").containsNull();\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_sub_module_settings_inherited_from_project_and_module() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n    // No sub module property\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103513,"modified_method":"@Test\n  public void return_sub_module_settings_inherited_from_project_and_module() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module property\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), subModule.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n    // No sub module property\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_project_with_two_modules() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module1 = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module1);\n\n    // Module 1 properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module1.getId()), dbSession);\n    // This property should not be found on the other module\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module1.getId()), dbSession);\n\n    ComponentDto module2 = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module2);\n\n    // Module 2 property\n    tester.get(DbClient.class).propertiesDao()\n      .setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-APPLICATION\").setResourceId(module2.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module1.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n    assertThat(ref.settings(module2.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-APPLICATION\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","id":103514,"modified_method":"@Test\n  public void return_project_with_two_modules() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module1 = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module1);\n\n    // Module 1 properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module1.getId()), dbSession);\n    // This property should not be found on the other module\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module1.getId()), dbSession);\n\n    ComponentDto module2 = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module2);\n\n    // Module 2 property\n    tester.get(DbClient.class).propertiesDao()\n      .setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-APPLICATION\").setResourceId(module2.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module1.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n    assertThat(ref.settings(module2.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-APPLICATION\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_provisioned_project_settings() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    // No snapshot attached on the project -> provisioned project\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","id":103515,"modified_method":"@Test\n  public void return_provisioned_project_settings() throws Exception {\n    // No snapshot attached on the project -> provisioned project\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_project_settings() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()),\n      dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()),\n      dbSession);\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    Map<String, String> projectSettings = ref.settings(project.key());\n    assertThat(projectSettings).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","id":103516,"modified_method":"@Test\n  public void return_project_settings() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()),\n      dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()),\n      dbSession);\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    Map<String, String> projectSettings = ref.settings(project.key());\n    assertThat(projectSettings).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_not_preview_and_only_dry_run_permission() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.PREVIEW_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    dbSession.commit();\n\n    try {\n      loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setPreview(false));\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(ForbiddenException.class).hasMessage(\n        \"You're only authorized to execute a local (dry run) SonarQube analysis without pushing the results to the SonarQube server. \" +\n          \"Please contact your SonarQube administrator.\");\n    }\n  }","id":103517,"modified_method":"@Test\n  public void fail_when_not_preview_and_only_dry_run_permission() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.PREVIEW_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    dbSession.commit();\n\n    try {\n      loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setPreview(false));\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(ForbiddenException.class).hasMessage(\n        \"You're only authorized to execute a local (preview) SonarQube analysis without pushing the results to the SonarQube server. \" +\n          \"Please contact your SonarQube administrator.\");\n    }\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_file_data_from_module() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // File on project\n    ComponentDto projectFile = ComponentTesting.newFileDto(project, \"projectFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, projectFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(projectFile).setSrcHash(\"123456\"));\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // File on module\n    ComponentDto moduleFile = ComponentTesting.newFileDto(module, \"moduleFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, moduleFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(moduleFile).setSrcHash(\"789456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(module.key()));\n    assertThat(ref.fileData(module.key(), moduleFile.path()).hash()).isEqualTo(\"789456\");\n    assertThat(ref.fileData(project.key(), projectFile.path())).isNull();\n  }","id":103518,"modified_method":"@Test\n  public void return_file_data_from_module() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // File on project\n    ComponentDto projectFile = ComponentTesting.newFileDto(project, \"projectFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, projectFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(projectFile).setSrcHash(\"123456\"));\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), module.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // File on module\n    ComponentDto moduleFile = ComponentTesting.newFileDto(module, \"moduleFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, moduleFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(moduleFile).setSrcHash(\"789456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(module.key()));\n    assertThat(ref.fileData(module.key(), moduleFile.path()).hash()).isEqualTo(\"789456\");\n    assertThat(ref.fileData(project.key(), projectFile.path())).isNull();\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_provisioned_project_profile() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    // No snapshot attached on the project -> provisioned project\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","id":103519,"modified_method":"@Test\n  public void return_provisioned_project_profile() throws Exception {\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    // No snapshot attached on the project -> provisioned project\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_sub_module_settings() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n    // No project properties\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n    // No module properties\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(subModule.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(subModule.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103520,"modified_method":"@Test\n  public void return_sub_module_settings() throws Exception {\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n    // No project properties\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n    // No module properties\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), subModule.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(subModule.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(subModule.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_quality_profile_from_project_profile() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","id":103521,"modified_method":"@Test\n  public void return_quality_profile_from_project_profile() throws Exception {\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\").setResourceId(project.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_file_data_from_multi_modules() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // File on project\n    ComponentDto projectFile = ComponentTesting.newFileDto(project, \"projectFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, projectFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(projectFile).setSrcHash(\"123456\"));\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // File on module\n    ComponentDto moduleFile = ComponentTesting.newFileDto(module, \"moduleFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, moduleFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(moduleFile).setSrcHash(\"789456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.fileData(project.key(), projectFile.path()).hash()).isEqualTo(\"123456\");\n    assertThat(ref.fileData(module.key(), moduleFile.path()).hash()).isEqualTo(\"789456\");\n  }","id":103522,"modified_method":"@Test\n  public void return_file_data_from_multi_modules() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // File on project\n    ComponentDto projectFile = ComponentTesting.newFileDto(project, \"projectFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, projectFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(projectFile).setSrcHash(\"123456\"));\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // File on module\n    ComponentDto moduleFile = ComponentTesting.newFileDto(module, \"moduleFile\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, moduleFile);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(moduleFile).setSrcHash(\"789456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.fileData(project.key(), projectFile.path()).hash()).isEqualTo(\"123456\");\n    assertThat(ref.fileData(module.key(), moduleFile.path()).hash()).isEqualTo(\"789456\");\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_project_with_module_with_sub_module() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER-DAO\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER-DAO\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103523,"modified_method":"@Test\n  public void return_project_with_module_with_sub_module() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module.getId()), dbSession);\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n\n    // Sub module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER-DAO\").setResourceId(subModule.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER-DAO\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_no_quality_profile_for_a_language() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto().setKey(\"org.codehaus.sonar:sonar\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    dbSession.commit();\n\n    try {\n      loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"No quality profile can been found on language 'xoo' for project 'org.codehaus.sonar:sonar'\");\n    }\n  }","id":103524,"modified_method":"@Test\n  public void fail_when_no_quality_profile_for_a_language() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto().setKey(\"org.codehaus.sonar:sonar\");\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    dbSession.commit();\n\n    try {\n      loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"No quality profile can been found on language 'xoo' for project 'org.codehaus.sonar:sonar'\");\n    }\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_quality_profile_from_default_profile() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","id":103525,"modified_method":"@Test\n  public void return_quality_profile_from_default_profile() throws Exception {\n    Date ruleUpdatedAt = DateUtils.parseDateTime(\"2014-01-14T13:00:00+0100\");\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n\n    QualityProfileDto profileDto = QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY, \"SonarQube way\"), \"abcd\").setRulesUpdatedAt(\n      DateUtils.formatDateTime(ruleUpdatedAt));\n    tester.get(DbClient.class).qualityProfileDao().insert(dbSession, profileDto);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.profile.xoo\").setValue(\"SonarQube way\"), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    List<QProfile> profiles = newArrayList(ref.qProfiles());\n    assertThat(profiles).hasSize(1);\n    assertThat(profiles.get(0).key()).isEqualTo(\"abcd\");\n    assertThat(profiles.get(0).name()).isEqualTo(\"SonarQube way\");\n    assertThat(profiles.get(0).language()).isEqualTo(\"xoo\");\n    assertThat(profiles.get(0).rulesUpdatedAt()).isEqualTo(ruleUpdatedAt);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_project_with_module_settings_inherited_from_project() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // No property on module -> should have the same as project\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","id":103526,"modified_method":"@Test\n  public void return_project_with_module_settings_inherited_from_project() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // No property on module -> should have the same as project\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_project_with_module_settings() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103527,"modified_method":"@Test\n  public void return_project_with_module_settings() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n\n    // Module properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR-SERVER\").setResourceId(module.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(module.getId()), dbSession);\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\"\n      ));\n    assertThat(ref.settings(module.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR-SERVER\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void not_returned_secured_settings_with_only_preview_permission() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.PREVIEW_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()),\n      dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()),\n      dbSession);\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setPreview(true));\n    Map<String, String> projectSettings = ref.settings(project.key());\n    assertThat(projectSettings).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\"\n      ));\n  }","id":103528,"modified_method":"@Test\n  public void not_returned_secured_settings_with_only_preview_permission() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.PREVIEW_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()),\n      dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(\n      new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()),\n      dbSession);\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()).setPreview(true));\n    Map<String, String> projectSettings = ref.settings(project.key());\n    assertThat(projectSettings).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_file_data_from_single_project() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    ComponentDto file = ComponentTesting.newFileDto(project, \"file\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, file);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(file).setSrcHash(\"123456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.fileDataByPath(project.key())).hasSize(1);\n    FileData fileData = ref.fileData(project.key(), file.path());\n    assertThat(fileData.hash()).isEqualTo(\"123456\");\n  }","id":103529,"modified_method":"@Test\n  public void return_file_data_from_single_project() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), project.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    ComponentDto file = ComponentTesting.newFileDto(project, \"file\");\n    tester.get(DbClient.class).componentDao().insert(dbSession, file);\n    tester.get(FileSourceDao.class).insert(newFileSourceDto(file).setSrcHash(\"123456\"));\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));\n    assertThat(ref.fileDataByPath(project.key())).hasSize(1);\n    FileData fileData = ref.fileData(project.key(), file.path());\n    assertThat(fileData.hash()).isEqualTo(\"123456\");\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_sub_module_settings_only_inherited_from_project() throws Exception {\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);\n\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n    // No module property\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n    // No sub module property\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","id":103530,"modified_method":"@Test\n  public void return_sub_module_settings_only_inherited_from_project() throws Exception {\n    ComponentDto project = ComponentTesting.newProjectDto();\n    tester.get(DbClient.class).componentDao().insert(dbSession, project);\n    addDefaultProfile();\n\n    // Project properties\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.project.key\").setValue(\"SONAR\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.jira.login.secured\").setValue(\"john\").setResourceId(project.getId()), dbSession);\n    tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey(\"sonar.coverage.exclusions\").setValue(\"**/*.java\").setResourceId(project.getId()), dbSession);\n\n    ComponentDto module = ComponentTesting.newModuleDto(project);\n    tester.get(DbClient.class).componentDao().insert(dbSession, module);\n    // No module property\n\n    ComponentDto subModule = ComponentTesting.newModuleDto(module);\n    MockUserSession.set().setLogin(\"john\").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION).addComponentPermission(UserRole.USER, project.getKey(), subModule.getKey());\n    tester.get(DbClient.class).componentDao().insert(dbSession, subModule);\n    // No sub module property\n\n    dbSession.commit();\n\n    ProjectRepositories ref = loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));\n    assertThat(ref.settings(project.key())).isEmpty();\n    assertThat(ref.settings(module.key())).isEmpty();\n    assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of(\n      \"sonar.jira.project.key\", \"SONAR\",\n      \"sonar.jira.login.secured\", \"john\",\n      \"sonar.coverage.exclusions\", \"**/*.java\"\n      ));\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Ensures that user implies the specified global permission. If not a {@link org.sonar.server.exceptions.ForbiddenException} is thrown.\n   */\n  public UserSession checkGlobalPermission(String globalPermission) {\n    if (!hasGlobalPermission(globalPermission)) {\n      throw new ForbiddenException(INSUFFICIENT_PRIVILEGES_MESSAGE);\n    }\n    return this;\n  }","id":103531,"modified_method":"/**\n   * Ensures that user implies the specified global permission. If not a {@link org.sonar.server.exceptions.ForbiddenException} is thrown.\n   */\n  public UserSession checkGlobalPermission(String globalPermission) {\n    return checkGlobalPermission(globalPermission, null);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Ensures that user implies the specified project permission on a component. If not a {@link org.sonar.server.exceptions.ForbiddenException} is thrown.\n   */\n  public UserSession checkComponentPermission(String projectPermission, String componentKey) {\n    if (!hasComponentPermission(projectPermission, componentKey)) {\n      throw new ForbiddenException(INSUFFICIENT_PRIVILEGES_MESSAGE);\n    }\n    return this;\n  }","id":103532,"modified_method":"/**\n   * Ensures that user implies the specified project permission on a component. If not a {@link org.sonar.server.exceptions.ForbiddenException} is thrown.\n   */\n  public UserSession checkComponentPermission(String projectPermission, String componentKey) {\n    return checkComponentPermission(projectPermission, componentKey, INSUFFICIENT_PRIVILEGES_MESSAGE);\n  }","commit_id":"b9b8790a3f75f9693f710fb19ed920d07a88c925","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public void processSessionEvent(@NotNull SessionEvent event, @NotNull XDebugSession session) {\n    }","id":103533,"modified_method":"@Override\n    public void processSessionEvent(@NotNull SessionEvent event) {\n    }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private XDebugSessionTab(@NotNull XDebugSessionImpl session,\n                           @Nullable Icon icon,\n                           @Nullable ExecutionEnvironment environment) {\n    super(session.getProject(), \"Debug\", session.getSessionName(), GlobalSearchScope.allScope(session.getProject()));\n\n    setSession(session, environment, icon);\n\n    myUi.addContent(createFramesContent(), 0, PlaceInGrid.left, false);\n    myUi.addContent(createVariablesContent(session), 0, PlaceInGrid.center, false);\n    myUi.addContent(createWatchesContent(session), 0, PlaceInGrid.right, false);\n\n    for (XDebugView view : myViews) {\n      Disposer.register(this, view);\n    }\n\n    attachToSession(session);\n\n    DefaultActionGroup focus = new DefaultActionGroup();\n    focus.add(ActionManager.getInstance().getAction(XDebuggerActions.FOCUS_ON_BREAKPOINT));\n    myUi.getOptions().setAdditionalFocusActions(focus);\n\n    myUi.addListener(new ContentManagerAdapter() {\n      @Override\n      public void selectionChanged(ContentManagerEvent event) {\n        Content content = event.getContent();\n        XDebugSessionImpl session = mySession;\n        if (session != null && content.isSelected() && DebuggerContentInfo.WATCHES_CONTENT.equals(ViewImpl.ID.get(content))) {\n          if (myWatchesView.rebuildNeeded()) {\n            myWatchesView.processSessionEvent(XDebugView.SessionEvent.SETTINGS_CHANGED, session);\n          }\n        }\n      }\n    }, this);\n\n    rebuildViews();\n  }","id":103534,"modified_method":"private XDebugSessionTab(@NotNull XDebugSessionImpl session,\n                           @Nullable Icon icon,\n                           @Nullable ExecutionEnvironment environment) {\n    super(session.getProject(), \"Debug\", session.getSessionName(), GlobalSearchScope.allScope(session.getProject()));\n\n    setSession(session, environment, icon);\n\n    myUi.addContent(createFramesContent(), 0, PlaceInGrid.left, false);\n    myUi.addContent(createVariablesContent(session), 0, PlaceInGrid.center, false);\n    myUi.addContent(createWatchesContent(session), 0, PlaceInGrid.right, false);\n\n    for (XDebugView view : myViews) {\n      Disposer.register(this, view);\n    }\n\n    attachToSession(session);\n\n    DefaultActionGroup focus = new DefaultActionGroup();\n    focus.add(ActionManager.getInstance().getAction(XDebuggerActions.FOCUS_ON_BREAKPOINT));\n    myUi.getOptions().setAdditionalFocusActions(focus);\n\n    myUi.addListener(new ContentManagerAdapter() {\n      @Override\n      public void selectionChanged(ContentManagerEvent event) {\n        Content content = event.getContent();\n        XDebugSessionImpl session = mySession;\n        if (session != null && content.isSelected() && DebuggerContentInfo.WATCHES_CONTENT.equals(ViewImpl.ID.get(content))) {\n          if (myWatchesView.rebuildNeeded()) {\n            myWatchesView.processSessionEvent(XDebugView.SessionEvent.SETTINGS_CHANGED);\n          }\n        }\n      }\n    }, this);\n\n    rebuildViews();\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void rebuildViews() {\n    AppUIUtil.invokeLaterIfProjectAlive(getProject(), new Runnable() {\n      @Override\n      public void run() {\n        XDebugSessionImpl session = mySession;\n        if (session != null) {\n          for (XDebugView view : myViews) {\n            view.processSessionEvent(XDebugView.SessionEvent.SETTINGS_CHANGED, session);\n          }\n        }\n      }\n    });\n  }","id":103535,"modified_method":"public void rebuildViews() {\n    AppUIUtil.invokeLaterIfProjectAlive(getProject(), new Runnable() {\n      @Override\n      public void run() {\n        for (XDebugView view : myViews) {\n          view.processSessionEvent(XDebugView.SessionEvent.SETTINGS_CHANGED);\n        }\n      }\n    });\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public XDebugView() {\n    myClearAlarm = new SingleAlarm(new Runnable() {\n      @Override\n      public void run() {\n        clear(session);\n        session = null;\n      }\n    }, VIEW_CLEAR_DELAY, this);\n  }","id":103536,"modified_method":"public XDebugView() {\n    myClearAlarm = new SingleAlarm(new Runnable() {\n      @Override\n      public void run() {\n        clear();\n      }\n    }, VIEW_CLEAR_DELAY, this);\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected final void requestClear(@NotNull XDebugSession session) {\n    this.session = session;\n    myClearAlarm.cancelAndRequest();\n  }","id":103537,"modified_method":"protected final void requestClear() {\n    myClearAlarm.cancelAndRequest();\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected final void cancelClear() {\n    session = null;\n    myClearAlarm.cancel();\n  }","id":103538,"modified_method":"protected final void cancelClear() {\n    myClearAlarm.cancel();\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public abstract void processSessionEvent(@NotNull SessionEvent event, @NotNull XDebugSession session);","id":103539,"modified_method":"public abstract void processSessionEvent(@NotNull SessionEvent event);","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void onSessionEvent(final @NotNull XDebugView.SessionEvent event) {\n    AppUIUtil.invokeLaterIfProjectAlive(session.getProject(), new Runnable() {\n      @Override\n      public void run() {\n        myDebugView.processSessionEvent(event, session);\n      }\n    });\n  }","id":103540,"modified_method":"private void onSessionEvent(final @NotNull XDebugView.SessionEvent event) {\n    AppUIUtil.invokeLaterIfProjectAlive(session.getProject(), new Runnable() {\n      @Override\n      public void run() {\n        myDebugView.processSessionEvent(event);\n      }\n    });\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event, @NotNull XDebugSession session) {\n    if (event == SessionEvent.BEFORE_RESUME) {\n      return;\n    }\n    if (event == SessionEvent.FRAME_CHANGED) {\n      XStackFrame currentStackFrame = session.getCurrentStackFrame();\n      if (currentStackFrame != null) {\n        myFramesList.setSelectedValue(currentStackFrame, true);\n      }\n      return;\n    }\n\n    myListenersEnabled = false;\n    for (StackFramesListBuilder builder : myBuilders.values()) {\n      builder.dispose();\n    }\n    myBuilders.clear();\n    mySelectedStack = null;\n    XSuspendContext suspendContext = session.getSuspendContext();\n    if (suspendContext == null) {\n      requestClear(session);\n      return;\n    }\n\n    if (event == SessionEvent.PAUSED) {\n      // clear immediately\n      cancelClear();\n      clear(session);\n    }\n\n    XExecutionStack[] executionStacks = suspendContext.getExecutionStacks();\n    addExecutionStacks(Arrays.asList(executionStacks));\n\n    XExecutionStack activeExecutionStack = suspendContext.getActiveExecutionStack();\n    myThreadComboBox.setSelectedItem(activeExecutionStack);\n    myThreadsPanel.removeAll();\n    myThreadsPanel.add(myToolbar.getComponent(), BorderLayout.EAST);\n    final boolean invisible = executionStacks.length == 1 && StringUtil.isEmpty(executionStacks[0].getDisplayName());\n    if (!invisible) {\n      myThreadsPanel.add(myThreadComboBox, BorderLayout.CENTER);\n    }\n    myToolbar.setAddSeparatorFirst(!invisible);\n    updateFrames(activeExecutionStack, session);\n    myListenersEnabled = true;\n  }","id":103541,"modified_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event) {\n    if (event == SessionEvent.BEFORE_RESUME) {\n      return;\n    }\n\n    XDebugSession session = getSession(getMainPanel());\n\n    if (event == SessionEvent.FRAME_CHANGED) {\n      XStackFrame currentStackFrame = session == null ? null : session.getCurrentStackFrame();\n      if (currentStackFrame != null) {\n        myFramesList.setSelectedValue(currentStackFrame, true);\n      }\n      return;\n    }\n\n    myListenersEnabled = false;\n    for (StackFramesListBuilder builder : myBuilders.values()) {\n      builder.dispose();\n    }\n    myBuilders.clear();\n    mySelectedStack = null;\n    XSuspendContext suspendContext = session == null ? null : session.getSuspendContext();\n    if (suspendContext == null) {\n      requestClear();\n      return;\n    }\n\n    if (event == SessionEvent.PAUSED) {\n      // clear immediately\n      cancelClear();\n      clear();\n    }\n\n    XExecutionStack[] executionStacks = suspendContext.getExecutionStacks();\n    addExecutionStacks(Arrays.asList(executionStacks));\n\n    XExecutionStack activeExecutionStack = suspendContext.getActiveExecutionStack();\n    myThreadComboBox.setSelectedItem(activeExecutionStack);\n    myThreadsPanel.removeAll();\n    myThreadsPanel.add(myToolbar.getComponent(), BorderLayout.EAST);\n    final boolean invisible = executionStacks.length == 1 && StringUtil.isEmpty(executionStacks[0].getDisplayName());\n    if (!invisible) {\n      myThreadsPanel.add(myThreadComboBox, BorderLayout.CENTER);\n    }\n    myToolbar.setAddSeparatorFirst(!invisible);\n    updateFrames(activeExecutionStack, session);\n    myListenersEnabled = true;\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void processSessionEvent(@NotNull SessionEvent event, @NotNull XDebugSession session) {\n  }","id":103542,"modified_method":"@Override\n  public void processSessionEvent(@NotNull SessionEvent event) {\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event, @NotNull XDebugSession session) {\n    XStackFrame stackFrame = session.getCurrentStackFrame();\n    XDebuggerTree tree = getTree();\n\n    if (event == SessionEvent.BEFORE_RESUME || event == SessionEvent.SETTINGS_CHANGED) {\n      saveCurrentTreeState(stackFrame);\n      if (event == SessionEvent.BEFORE_RESUME) {\n        return;\n      }\n    }\n\n    tree.markNodesObsolete();\n    if (stackFrame != null) {\n      cancelClear();\n      buildTreeAndRestoreState(stackFrame);\n    }\n    else {\n      requestClear(session);\n    }\n  }","id":103543,"modified_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event) {\n    XDebugSession session = getSession(getPanel());\n    XStackFrame stackFrame = session == null ? null : session.getCurrentStackFrame();\n    XDebuggerTree tree = getTree();\n\n    if (event == SessionEvent.BEFORE_RESUME || event == SessionEvent.SETTINGS_CHANGED) {\n      saveCurrentTreeState(stackFrame);\n      if (event == SessionEvent.BEFORE_RESUME) {\n        return;\n      }\n    }\n\n    tree.markNodesObsolete();\n    if (stackFrame != null) {\n      cancelClear();\n      buildTreeAndRestoreState(stackFrame);\n    }\n    else {\n      requestClear();\n    }\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event, @NotNull XDebugSession session) {\n    if (getMainPanel().isShowing() || ApplicationManager.getApplication().isUnitTestMode()) {\n      myRebuildNeeded = false;\n    }\n    else {\n      myRebuildNeeded = true;\n      return;\n    }\n\n    XStackFrame stackFrame = session.getCurrentStackFrame();\n    XDebuggerTree tree = myTreePanel.getTree();\n\n    if (event == SessionEvent.BEFORE_RESUME || event == SessionEvent.SETTINGS_CHANGED) {\n      if (myTreeRestorer != null) {\n        myTreeRestorer.dispose();\n      }\n      myTreeState = XDebuggerTreeState.saveState(tree);\n      if (event == SessionEvent.BEFORE_RESUME) {\n        return;\n      }\n    }\n\n    if (stackFrame != null) {\n      cancelClear();\n      tree.setSourcePosition(stackFrame.getSourcePosition());\n      myRootNode.updateWatches(stackFrame.getEvaluator());\n      if (myTreeState != null) {\n        myTreeRestorer = myTreeState.restoreState(tree);\n      }\n    }\n    else {\n      requestClear(session);\n    }\n  }","id":103544,"modified_method":"@Override\n  public void processSessionEvent(@NotNull final SessionEvent event) {\n    if (getMainPanel().isShowing() || ApplicationManager.getApplication().isUnitTestMode()) {\n      myRebuildNeeded = false;\n    }\n    else {\n      myRebuildNeeded = true;\n      return;\n    }\n\n    XDebuggerTree tree = myTreePanel.getTree();\n\n    if (event == SessionEvent.BEFORE_RESUME || event == SessionEvent.SETTINGS_CHANGED) {\n      if (myTreeRestorer != null) {\n        myTreeRestorer.dispose();\n      }\n      myTreeState = XDebuggerTreeState.saveState(tree);\n      if (event == SessionEvent.BEFORE_RESUME) {\n        return;\n      }\n    }\n\n    XDebugSession session = getSession(getMainPanel());\n    XStackFrame stackFrame = session == null ? null : session.getCurrentStackFrame();\n    if (stackFrame != null) {\n      cancelClear();\n      tree.setSourcePosition(stackFrame.getSourcePosition());\n      myRootNode.updateWatches(stackFrame.getEvaluator());\n      if (myTreeState != null) {\n        myTreeRestorer = myTreeState.restoreState(tree);\n      }\n    }\n    else {\n      requestClear();\n    }\n  }","commit_id":"a912d8487c5b6ef6ee0e6c2b8755b4292b7b6e86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public EntityCrypto(GenericDelegator delegator) {\n        this.delegator = delegator;\n        this.keyMap = new HashMap();\n\n        // check the key table and make sure there\n        // make sure there are some dummy keys\n        synchronized(EntityCrypto.class) {\n            try {\n                long size = delegator.findCountByAnd(\"EntityKeyStore\");\n                if (size == 0) {\n                    for (int i = 0; i < 20; i++) {\n                        String randomName = this.getRandomString();\n                        this.getKeyFromStore(randomName);\n                    }\n                }\n            } catch (GenericEntityException e) {\n                Debug.logError(e, module);\n            }\n        }\n    }","id":103545,"modified_method":"public EntityCrypto(GenericDelegator delegator) {\n        this.delegator = delegator;\n        this.keyMap = new HashMap<String, SecretKey>();\n\n        // check the key table and make sure there\n        // make sure there are some dummy keys\n        synchronized(EntityCrypto.class) {\n            try {\n                long size = delegator.findCountByAnd(\"EntityKeyStore\");\n                if (size == 0) {\n                    for (int i = 0; i < 20; i++) {\n                        String randomName = this.getRandomString();\n                        this.getKeyFromStore(randomName);\n                    }\n                }\n            } catch (GenericEntityException e) {\n                Debug.logError(e, module);\n            }\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"protected SecretKey getKeyFromStore(String keyName) throws EntityCryptoException {\n        GenericValue keyValue = null;\n        try {\n            keyValue = delegator.findByPrimaryKey(\"EntityKeyStore\", UtilMisc.toMap(\"keyName\", keyName));\n        } catch (GenericEntityException e) {\n            throw new EntityCryptoException(e);\n        }\n        if (keyValue == null || keyValue.get(\"keyText\") == null) {\n            SecretKey key = null;\n            try {\n                key = DesCrypt.generateKey();\n            } catch (NoSuchAlgorithmException e) {\n                throw new EntityCryptoException(e);\n            }\n            GenericValue newValue = delegator.makeValue(\"EntityKeyStore\");\n            newValue.set(\"keyText\", StringUtil.toHexString(key.getEncoded()));\n            newValue.set(\"keyName\", keyName);\n\n            Transaction parentTransaction = null;\n            boolean beganTrans = false;\n            try {\n                beganTrans = TransactionUtil.begin();\n            } catch (GenericTransactionException e) {\n                throw new EntityCryptoException(e);\n            }\n\n            if (!beganTrans) {\n                try {\n                    parentTransaction = TransactionUtil.suspend();\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n\n                // now start a new transaction\n                try {\n                    beganTrans = TransactionUtil.begin();\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n            }\n\n            try {\n                delegator.create(newValue);\n            } catch (GenericEntityException e) {\n                try {\n                    TransactionUtil.rollback(beganTrans, \"Error creating encrypted value\", e);\n                } catch (GenericTransactionException e1) {\n                    Debug.logError(e1, \"Could not rollback transaction\", module);\n                }\n                throw new EntityCryptoException(e);\n            } finally {\n                try {\n                    TransactionUtil.commit(beganTrans);\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n                // resume the parent transaction\n                if (parentTransaction != null) {\n                    try {\n                        TransactionUtil.resume(parentTransaction);\n                    } catch (GenericTransactionException e) {\n                        throw new EntityCryptoException(e);\n                    }\n                }\n            }\n\n\n            return key;\n        } else {\n            byte[] keyBytes = StringUtil.fromHexString(keyValue.getString(\"keyText\"));\n            try {\n                return DesCrypt.getDesKey(keyBytes);\n            } catch (GeneralException e) {\n                throw new EntityCryptoException(e);\n            }\n        }\n    }","id":103546,"modified_method":"protected SecretKey getKeyFromStore(String keyName) throws EntityCryptoException {\n        GenericValue keyValue = null;\n        try {\n            keyValue = delegator.findByPrimaryKey(\"EntityKeyStore\", \"keyName\", keyName);\n        } catch (GenericEntityException e) {\n            throw new EntityCryptoException(e);\n        }\n        if (keyValue == null || keyValue.get(\"keyText\") == null) {\n            SecretKey key = null;\n            try {\n                key = DesCrypt.generateKey();\n            } catch (NoSuchAlgorithmException e) {\n                throw new EntityCryptoException(e);\n            }\n            GenericValue newValue = delegator.makeValue(\"EntityKeyStore\");\n            newValue.set(\"keyText\", StringUtil.toHexString(key.getEncoded()));\n            newValue.set(\"keyName\", keyName);\n\n            Transaction parentTransaction = null;\n            boolean beganTrans = false;\n            try {\n                beganTrans = TransactionUtil.begin();\n            } catch (GenericTransactionException e) {\n                throw new EntityCryptoException(e);\n            }\n\n            if (!beganTrans) {\n                try {\n                    parentTransaction = TransactionUtil.suspend();\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n\n                // now start a new transaction\n                try {\n                    beganTrans = TransactionUtil.begin();\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n            }\n\n            try {\n                delegator.create(newValue);\n            } catch (GenericEntityException e) {\n                try {\n                    TransactionUtil.rollback(beganTrans, \"Error creating encrypted value\", e);\n                } catch (GenericTransactionException e1) {\n                    Debug.logError(e1, \"Could not rollback transaction\", module);\n                }\n                throw new EntityCryptoException(e);\n            } finally {\n                try {\n                    TransactionUtil.commit(beganTrans);\n                } catch (GenericTransactionException e) {\n                    throw new EntityCryptoException(e);\n                }\n                // resume the parent transaction\n                if (parentTransaction != null) {\n                    try {\n                        TransactionUtil.resume(parentTransaction);\n                    } catch (GenericTransactionException e) {\n                        throw new EntityCryptoException(e);\n                    }\n                }\n            }\n\n\n            return key;\n        } else {\n            byte[] keyBytes = StringUtil.fromHexString(keyValue.getString(\"keyText\"));\n            try {\n                return DesCrypt.getDesKey(keyBytes);\n            } catch (GeneralException e) {\n                throw new EntityCryptoException(e);\n            }\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"protected SecretKey getKey(String name) throws EntityCryptoException {\n        SecretKey key = (SecretKey) keyMap.get(name);\n        if (key == null) {\n            synchronized(this) {\n                String keyName = HashCrypt.getDigestHash(name);\n                key = this.getKeyFromStore(keyName);\n                keyMap.put(name, key);\n            }\n        }\n        return key;\n    }","id":103547,"modified_method":"protected SecretKey getKey(String name) throws EntityCryptoException {\n        SecretKey key = keyMap.get(name);\n        if (key == null) {\n            synchronized(this) {\n                String keyName = HashCrypt.getDigestHash(name);\n                key = this.getKeyFromStore(keyName);\n                keyMap.put(name, key);\n            }\n        }\n        return key;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static void checkValueList(List valueList, GenericDelegator delegator, List errorMessages) throws GenericEntityException {\n        if (valueList == null) return;\n        \n        Iterator valueIter = valueList.iterator();\n        while (valueIter.hasNext()) {\n            GenericValue checkValue = (GenericValue) valueIter.next();\n            checkSingleValue(checkValue, delegator, errorMessages);\n        }\n    }","id":103548,"modified_method":"public static void checkValueList(List valueList, GenericDelegator delegator, List<Object> errorMessages) throws GenericEntityException {\n        if (valueList == null) return;\n        \n        Iterator valueIter = valueList.iterator();\n        while (valueIter.hasNext()) {\n            GenericValue checkValue = (GenericValue) valueIter.next();\n            checkSingleValue(checkValue, delegator, errorMessages);\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static void checkSingleValue(GenericValue checkValue, GenericDelegator delegator, List errorMessages) throws GenericEntityException {\n        if (checkValue == null) {\n            errorMessages.add(\"Got a value to check was null\");\n            return;\n        }\n        // to check get the PK, find by that, compare all fields\n        GenericPK checkPK = null;\n        \n        try {\n            checkPK = checkValue.getPrimaryKey();\n            GenericValue currentValue = delegator.findByPrimaryKey(checkPK);\n            if (currentValue == null) {\n                errorMessages.add(\"Entity [\" + checkPK.getEntityName() + \"] record not found for pk: \" + checkPK);\n                return;\n            }\n\n            ModelEntity modelEntity = checkValue.getModelEntity();\n            List nonpkFieldNameList = modelEntity.getNoPkFieldNames();\n            Iterator nonpkFieldNameIter = nonpkFieldNameList.iterator();\n            while (nonpkFieldNameIter.hasNext()) {\n                String nonpkFieldName = (String) nonpkFieldNameIter.next();\n                // skip the fields the entity engine maintains\n                if (ModelEntity.CREATE_STAMP_FIELD.equals(nonpkFieldName) || ModelEntity.CREATE_STAMP_TX_FIELD.equals(nonpkFieldName) ||\n                        ModelEntity.STAMP_FIELD.equals(nonpkFieldName) || ModelEntity.STAMP_TX_FIELD.equals(nonpkFieldName)) {\n                    continue;\n                }\n                \n                Object checkField = checkValue.get(nonpkFieldName);\n                Object currentField = currentValue.get(nonpkFieldName);\n\n                if (checkField != null && !checkField.equals(currentField)) {\n                    errorMessages.add(\"Field [\" + modelEntity.getEntityName() + \".\" + nonpkFieldName + \n                            \"] did not match; file value [\" + checkField + \"], db value [\" + currentField + \"] pk [\" + checkPK + \"]\");\n                }\n            }\n        } catch (GenericEntityException e) {\n            throw e;\n        } catch (Throwable t) {\n            String errMsg;\n            if (checkPK == null) {\n                errMsg = \"Error checking value [\" + checkValue + \"]: \" + t.toString();\n            } else {\n                errMsg = \"Error checking entity [\" + checkPK.getEntityName() + \"] with pk [\" + checkPK.getAllFields() + \"]: \" + t.toString();\n            }\n            errorMessages.add(errMsg);\n            Debug.logError(t, errMsg, module);\n        }\n    }","id":103549,"modified_method":"public static void checkSingleValue(GenericValue checkValue, GenericDelegator delegator, List<Object> errorMessages) throws GenericEntityException {\n        if (checkValue == null) {\n            errorMessages.add(\"Got a value to check was null\");\n            return;\n        }\n        // to check get the PK, find by that, compare all fields\n        GenericPK checkPK = null;\n        \n        try {\n            checkPK = checkValue.getPrimaryKey();\n            GenericValue currentValue = delegator.findByPrimaryKey(checkPK);\n            if (currentValue == null) {\n                errorMessages.add(\"Entity [\" + checkPK.getEntityName() + \"] record not found for pk: \" + checkPK);\n                return;\n            }\n\n            ModelEntity modelEntity = checkValue.getModelEntity();\n            for (String nonpkFieldName: modelEntity.getNoPkFieldNames()) {\n                // skip the fields the entity engine maintains\n                if (ModelEntity.CREATE_STAMP_FIELD.equals(nonpkFieldName) || ModelEntity.CREATE_STAMP_TX_FIELD.equals(nonpkFieldName) ||\n                        ModelEntity.STAMP_FIELD.equals(nonpkFieldName) || ModelEntity.STAMP_TX_FIELD.equals(nonpkFieldName)) {\n                    continue;\n                }\n                \n                Object checkField = checkValue.get(nonpkFieldName);\n                Object currentField = currentValue.get(nonpkFieldName);\n\n                if (checkField != null && !checkField.equals(currentField)) {\n                    errorMessages.add(\"Field [\" + modelEntity.getEntityName() + \".\" + nonpkFieldName + \n                            \"] did not match; file value [\" + checkField + \"], db value [\" + currentField + \"] pk [\" + checkPK + \"]\");\n                }\n            }\n        } catch (GenericEntityException e) {\n            throw e;\n        } catch (Throwable t) {\n            String errMsg;\n            if (checkPK == null) {\n                errMsg = \"Error checking value [\" + checkValue + \"]: \" + t.toString();\n            } else {\n                errMsg = \"Error checking entity [\" + checkPK.getEntityName() + \"] with pk [\" + checkPK.getAllFields() + \"]: \" + t.toString();\n            }\n            errorMessages.add(errMsg);\n            Debug.logError(t, errMsg, module);\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static int assertData(URL dataUrl, GenericDelegator delegator, List errorMessages) throws GenericEntityException, SAXException, ParserConfigurationException, IOException {\n        int rowsChecked = 0;\n\n        if (dataUrl == null) {\n            String errMsg = \"Cannot assert/check data, dataUrl was null\";\n            errorMessages.add(errMsg);\n            Debug.logError(errMsg, module);\n            return 0;\n        }\n\n        Debug.logVerbose(\"Loading XML Resource: \" + dataUrl.toExternalForm(), module);\n\n        try {\n            List checkValueList = delegator.readXmlDocument(dataUrl);\n            Iterator checkValueIter = checkValueList.iterator();\n            while (checkValueIter.hasNext()) {\n                GenericValue checkValue = (GenericValue) checkValueIter.next();\n                checkSingleValue(checkValue, delegator, errorMessages);\n                rowsChecked++;\n            }\n        } catch (GenericEntityException e) {\n            String xmlError = \"Error checking/asserting XML Resource: \" + dataUrl.toExternalForm() + \"; Error was: \" + e.getMessage();\n            Debug.logError(e, xmlError, module);\n            // instead of adding this as a message, throw the real exception; then caller has more control\n            //errorMessages.add(xmlError);\n            throw e;\n        }\n\n        return rowsChecked;\n    }","id":103550,"modified_method":"public static int assertData(URL dataUrl, GenericDelegator delegator, List<Object> errorMessages) throws GenericEntityException, SAXException, ParserConfigurationException, IOException {\n        int rowsChecked = 0;\n\n        if (dataUrl == null) {\n            String errMsg = \"Cannot assert/check data, dataUrl was null\";\n            errorMessages.add(errMsg);\n            Debug.logError(errMsg, module);\n            return 0;\n        }\n\n        Debug.logVerbose(\"Loading XML Resource: \" + dataUrl.toExternalForm(), module);\n\n        try {\n            List checkValueList = delegator.readXmlDocument(dataUrl);\n            Iterator checkValueIter = checkValueList.iterator();\n            while (checkValueIter.hasNext()) {\n                GenericValue checkValue = (GenericValue) checkValueIter.next();\n                checkSingleValue(checkValue, delegator, errorMessages);\n                rowsChecked++;\n            }\n        } catch (GenericEntityException e) {\n            String xmlError = \"Error checking/asserting XML Resource: \" + dataUrl.toExternalForm() + \"; Error was: \" + e.getMessage();\n            Debug.logError(e, xmlError, module);\n            // instead of adding this as a message, throw the real exception; then caller has more control\n            //errorMessages.add(xmlError);\n            throw e;\n        }\n\n        return rowsChecked;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static int generateData(GenericDelegator delegator, List errorMessages) throws GenericEntityException {\n        int rowsChanged = 0;\n        ModelReader reader = delegator.getModelReader();\n        Collection entityCol = reader.getEntityNames();\n        Iterator classNamesIterator = entityCol.iterator();\n        while (classNamesIterator != null && classNamesIterator.hasNext()) {\n            ModelEntity entity = reader.getModelEntity((String) classNamesIterator.next());\n            String baseName = entity.getPlainTableName();\n            if (entity instanceof ModelViewEntity) {\n                baseName = ModelUtil.javaNameToDbName(entity.getEntityName());\n            }\n\n            if (baseName != null) {\n                try {\n                    List toBeStored = new LinkedList();\n                    toBeStored.add(\n                        delegator.makeValue(\n                            \"SecurityPermission\",\n                            UtilMisc.toMap(\n                                \"permissionId\",\n                                baseName + \"_ADMIN\",\n                                \"description\",\n                                \"Permission to Administer a \" + entity.getEntityName() + \" entity.\")));\n                    toBeStored.add(delegator.makeValue(\"SecurityGroupPermission\", UtilMisc.toMap(\"groupId\", \"FULLADMIN\", \"permissionId\", baseName + \"_ADMIN\")));\n                    rowsChanged += delegator.storeAll(toBeStored);\n                } catch (GenericEntityException e) {\n                    errorMessages.add(\"[install.generateData] ERROR: Failed Security Generation for entity \\\"\" + baseName + \"\\\"\");\n                }\n\n                /*\n                toStore.add(delegator.makeValue(\"SecurityPermission\", UtilMisc.toMap(\"permissionId\", baseName + \"_VIEW\", \"description\", \"Permission to View a \" + entity.getEntityName() + \" entity.\")));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", UtilMisc.toMap(\"permissionId\", baseName + \"_CREATE\", \"description\", \"Permission to Create a \" + entity.getEntityName() + \" entity.\")));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", UtilMisc.toMap(\"permissionId\", baseName + \"_UPDATE\", \"description\", \"Permission to Update a \" + entity.getEntityName() + \" entity.\")));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", UtilMisc.toMap(\"permissionId\", baseName + \"_DELETE\", \"description\", \"Permission to Delete a \" + entity.getEntityName() + \" entity.\")));\n                \n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", UtilMisc.toMap(\"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_VIEW\")));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", UtilMisc.toMap(\"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_CREATE\")));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", UtilMisc.toMap(\"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_UPDATE\")));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", UtilMisc.toMap(\"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_DELETE\")));\n                */\n            }\n        }\n\n        return rowsChanged;\n    }","id":103551,"modified_method":"public static int generateData(GenericDelegator delegator, List<Object> errorMessages) throws GenericEntityException {\n        int rowsChanged = 0;\n        ModelReader reader = delegator.getModelReader();\n        for (String entityName: reader.getEntityNames()) {\n            ModelEntity entity = reader.getModelEntity(entityName);\n            String baseName = entity.getPlainTableName();\n            if (entity instanceof ModelViewEntity) {\n                baseName = ModelUtil.javaNameToDbName(entity.getEntityName());\n            }\n\n            if (baseName != null) {\n                try {\n                    List<GenericValue> toBeStored = new LinkedList<GenericValue>();\n                    toBeStored.add(\n                        delegator.makeValue(\n                            \"SecurityPermission\",\n                                \"permissionId\",\n                                baseName + \"_ADMIN\",\n                                \"description\",\n                                \"Permission to Administer a \" + entity.getEntityName() + \" entity.\"));\n                    toBeStored.add(delegator.makeValue(\"SecurityGroupPermission\", \"groupId\", \"FULLADMIN\", \"permissionId\", baseName + \"_ADMIN\"));\n                    rowsChanged += delegator.storeAll(toBeStored);\n                } catch (GenericEntityException e) {\n                    errorMessages.add(\"[install.generateData] ERROR: Failed Security Generation for entity \\\"\" + baseName + \"\\\"\");\n                }\n\n                /*\n                toStore.add(delegator.makeValue(\"SecurityPermission\", \"permissionId\", baseName + \"_VIEW\", \"description\", \"Permission to View a \" + entity.getEntityName() + \" entity.\"));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", \"permissionId\", baseName + \"_CREATE\", \"description\", \"Permission to Create a \" + entity.getEntityName() + \" entity.\"));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", \"permissionId\", baseName + \"_UPDATE\", \"description\", \"Permission to Update a \" + entity.getEntityName() + \" entity.\"));\n                toStore.add(delegator.makeValue(\"SecurityPermission\", \"permissionId\", baseName + \"_DELETE\", \"description\", \"Permission to Delete a \" + entity.getEntityName() + \" entity.\"));\n                \n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", \"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_VIEW\"));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", \"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_CREATE\"));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", \"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_UPDATE\"));\n                toStore.add(delegator.makeValue(\"SecurityGroupPermission\", \"groupId\", \"FLEXADMIN\", \"permissionId\", baseName + \"_DELETE\"));\n                */\n            }\n        }\n\n        return rowsChanged;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List errorMessages) throws GenericEntityException {\n        return loadData(dataUrl, helperName, delegator, errorMessages, -1);\n    }","id":103552,"modified_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List<Object> errorMessages) throws GenericEntityException {\n        return loadData(dataUrl, helperName, delegator, errorMessages, -1);\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List errorMessages, int txTimeout) throws GenericEntityException {\n        return loadData(dataUrl, helperName, delegator, errorMessages, txTimeout, false, false, false);\n    }","id":103553,"modified_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List<Object> errorMessages, int txTimeout) throws GenericEntityException {\n        return loadData(dataUrl, helperName, delegator, errorMessages, txTimeout, false, false, false);\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List errorMessages, int txTimeout, boolean dummyFks, boolean maintainTxs, boolean tryInsert) throws GenericEntityException {\n        int rowsChanged = 0;\n        \n        if (dataUrl == null) {\n            String errMsg = \"Cannot load data, dataUrl was null\";\n            errorMessages.add(errMsg);\n            Debug.logError(errMsg, module);\n            return 0;\n        }\n\n        Debug.logVerbose(\"[install.loadData] Loading XML Resource: \\\"\" + dataUrl.toExternalForm() + \"\\\"\", module);\n\n        try {\n            /* The OLD way\n              List toBeStored = delegator.readXmlDocument(url);\n              delegator.storeAll(toBeStored);\n              rowsChanged += toBeStored.size();\n             */\n\n            EntitySaxReader reader = null;\n            if (txTimeout > 0) {\n                reader = new EntitySaxReader(delegator, txTimeout);\n            } else {\n                reader = new EntitySaxReader(delegator);\n            }\n            reader.setCreateDummyFks(dummyFks);\n            reader.setMaintainTxStamps(maintainTxs);\n            rowsChanged += reader.parse(dataUrl);\n        } catch (Exception e) {\n            String xmlError = \"[install.loadData]: Error loading XML Resource \\\"\" + dataUrl.toExternalForm() + \"\\\"; Error was: \" + e.getMessage();\n            errorMessages.add(xmlError);\n            Debug.logError(e, xmlError, module);\n        }\n\n        return rowsChanged;\n    }","id":103554,"modified_method":"public static int loadData(URL dataUrl, String helperName, GenericDelegator delegator, List<Object> errorMessages, int txTimeout, boolean dummyFks, boolean maintainTxs, boolean tryInsert) throws GenericEntityException {\n        int rowsChanged = 0;\n        \n        if (dataUrl == null) {\n            String errMsg = \"Cannot load data, dataUrl was null\";\n            errorMessages.add(errMsg);\n            Debug.logError(errMsg, module);\n            return 0;\n        }\n\n        Debug.logVerbose(\"[install.loadData] Loading XML Resource: \\\"\" + dataUrl.toExternalForm() + \"\\\"\", module);\n\n        try {\n            /* The OLD way\n              List toBeStored = delegator.readXmlDocument(url);\n              delegator.storeAll(toBeStored);\n              rowsChanged += toBeStored.size();\n             */\n\n            EntitySaxReader reader = null;\n            if (txTimeout > 0) {\n                reader = new EntitySaxReader(delegator, txTimeout);\n            } else {\n                reader = new EntitySaxReader(delegator);\n            }\n            reader.setCreateDummyFks(dummyFks);\n            reader.setMaintainTxStamps(maintainTxs);\n            rowsChanged += reader.parse(dataUrl);\n        } catch (Exception e) {\n            String xmlError = \"[install.loadData]: Error loading XML Resource \\\"\" + dataUrl.toExternalForm() + \"\\\"; Error was: \" + e.getMessage();\n            errorMessages.add(xmlError);\n            Debug.logError(e, xmlError, module);\n        }\n\n        return rowsChanged;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static String getPathsString(String helperName) {\n        StringBuilder pathBuffer = new StringBuilder();\n        if (helperName != null && helperName.length() > 0) {\n            DatasourceInfo datasourceInfo = EntityConfigUtil.getDatasourceInfo(helperName);\n            List sqlLoadPathElements = datasourceInfo.sqlLoadPaths;\n            Iterator slpIter = sqlLoadPathElements.iterator();\n            while (slpIter.hasNext()) {\n                Element sqlLoadPathElement = (Element) slpIter.next();\n                String prependEnv = sqlLoadPathElement.getAttribute(\"prepend-env\");\n                pathBuffer.append(pathBuffer.length() == 0 ? \"\" : \";\");\n                if (prependEnv != null && prependEnv.length() > 0) {\n                    pathBuffer.append(System.getProperty(prependEnv));\n                    pathBuffer.append(\"/\");\n                }\n                pathBuffer.append(sqlLoadPathElement.getAttribute(\"path\"));\n            }\n        }\n        return pathBuffer.toString();\n    }","id":103555,"modified_method":"public static String getPathsString(String helperName) {\n        StringBuilder pathBuffer = new StringBuilder();\n        if (helperName != null && helperName.length() > 0) {\n            DatasourceInfo datasourceInfo = EntityConfigUtil.getDatasourceInfo(helperName);\n            for (Element sqlLoadPathElement: datasourceInfo.sqlLoadPaths) {\n                String prependEnv = sqlLoadPathElement.getAttribute(\"prepend-env\");\n                pathBuffer.append(pathBuffer.length() == 0 ? \"\" : \";\");\n                if (prependEnv != null && prependEnv.length() > 0) {\n                    pathBuffer.append(System.getProperty(prependEnv));\n                    pathBuffer.append(\"/\");\n                }\n                pathBuffer.append(sqlLoadPathElement.getAttribute(\"path\"));\n            }\n        }\n        return pathBuffer.toString();\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static List getUrlList(String helperName, String componentName, List readerNames) {\n        String paths = getPathsString(helperName);\n        List urlList = new LinkedList();\n        \n        // first get files from resources\n        if (readerNames != null) {\n            Iterator readDataIter = readerNames.iterator();\n            while (readDataIter.hasNext()) {\n                Object readerInfo = readDataIter.next();\n                String readerName = null;\n                if (readerInfo instanceof String) {\n                    readerName = (String) readerInfo;\n                } else if (readerInfo instanceof Element) {\n                    readerName = ((Element) readerInfo).getAttribute(\"reader-name\");\n                } else {\n                    throw new IllegalArgumentException(\"Reader name list does not contain String(s) or Element(s)\");\n                }\n\n                // get all of the main resource model stuff, ie specified in the entityengine.xml file\n                EntityDataReaderInfo entityDataReaderInfo = EntityConfigUtil.getEntityDataReaderInfo(readerName);\n                \n                if (entityDataReaderInfo != null) {\n                    List resourceElements = entityDataReaderInfo.resourceElements;\n                    Iterator resIter = resourceElements.iterator();\n                    while (resIter.hasNext()) {\n                        Element resourceElement = (Element) resIter.next();\n                        ResourceHandler handler = new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement);\n                        try {\n                            urlList.add(handler.getURL());\n                        } catch (GenericConfigException e) {\n                            String errorMsg = \"Could not get URL for Main ResourceHandler: \" + e.toString();\n                            Debug.logWarning(errorMsg, module);\n                        }\n                    }\n        \n                    // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file\n                    List componentResourceInfos = ComponentConfig.getAllEntityResourceInfos(\"data\", componentName);\n                    Iterator componentResourceInfoIter = componentResourceInfos.iterator();\n                    while (componentResourceInfoIter.hasNext()) {\n                        ComponentConfig.EntityResourceInfo componentResourceInfo = (ComponentConfig.EntityResourceInfo) componentResourceInfoIter.next();\n                        if (readerName.equals(componentResourceInfo.readerName)) {\n                            ResourceHandler handler = componentResourceInfo.createResourceHandler();\n                            try {\n                                urlList.add(handler.getURL());\n                            } catch (GenericConfigException e) {\n                                String errorMsg = \"Could not get URL for Component ResourceHandler: \" + e.toString();\n                                Debug.logWarning(errorMsg, module);\n                            }\n                        }\n                    }\n                } else {\n                    String errorMsg = \"Could not find entity-date-reader named: \" + readerName;\n                    Debug.logWarning(errorMsg, module);\n                }\n            }\n        } else {\n            String errorMsg = \"Could not find datasource named: \" + helperName;\n            Debug.logWarning(errorMsg, module);\n        }\n        \n        // get files from the paths string\n        if (paths != null && paths.length() > 0) {\n            StringTokenizer tokenizer = new StringTokenizer(paths, \";\");\n            while (tokenizer.hasMoreTokens()) {\n                String path = tokenizer.nextToken().toLowerCase();\n                File loadDir = new File(path);\n                if (loadDir.exists() && loadDir.isDirectory()) {\n                    File[] files = loadDir.listFiles();\n                    List tempFileList = new LinkedList();\n                    for (int i = 0; i < files.length; i++) {\n                        if (files[i].getName().toLowerCase().endsWith(\".xml\")) {\n                            tempFileList.add(files[i]);\n                        }\n                    }\n                    Collections.sort(tempFileList);\n                    Iterator tempFileIter = tempFileList.iterator();\n                    while (tempFileIter.hasNext()) {\n                        File dataFile = (File) tempFileIter.next();\n                        if (dataFile.exists()) {\n                            URL url = null;\n                            try {\n                                url = dataFile.toURI().toURL();\n                                urlList.add(url);\n                            } catch (java.net.MalformedURLException e) {\n                                String xmlError = \"Error loading XML file \\\"\" + dataFile.getAbsolutePath() + \"\\\"; Error was: \" + e.getMessage();\n                                Debug.logError(xmlError, module);\n                            }\n                        } else {\n                            String errorMsg = \"Could not find file: \\\"\" + dataFile.getAbsolutePath() + \"\\\"\";\n                            Debug.logError(errorMsg, module);\n                        }\n                    }\n                }\n            }\n        }\n\n        return urlList;\n    }","id":103556,"modified_method":"public static List<URL> getUrlList(String helperName, String componentName, List readerNames) {\n        String paths = getPathsString(helperName);\n        List<URL> urlList = new LinkedList<URL>();\n        \n        // first get files from resources\n        if (readerNames != null) {\n            for (Object readerInfo: readerNames) {\n                String readerName = null;\n                if (readerInfo instanceof String) {\n                    readerName = (String) readerInfo;\n                } else if (readerInfo instanceof Element) {\n                    readerName = ((Element) readerInfo).getAttribute(\"reader-name\");\n                } else {\n                    throw new IllegalArgumentException(\"Reader name list does not contain String(s) or Element(s)\");\n                }\n\n                // get all of the main resource model stuff, ie specified in the entityengine.xml file\n                EntityDataReaderInfo entityDataReaderInfo = EntityConfigUtil.getEntityDataReaderInfo(readerName);\n                \n                if (entityDataReaderInfo != null) {\n                    for (Element resourceElement: entityDataReaderInfo.resourceElements) {\n                        ResourceHandler handler = new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement);\n                        try {\n                            urlList.add(handler.getURL());\n                        } catch (GenericConfigException e) {\n                            String errorMsg = \"Could not get URL for Main ResourceHandler: \" + e.toString();\n                            Debug.logWarning(errorMsg, module);\n                        }\n                    }\n        \n                    // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file\n                    for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos(\"data\", componentName)) {\n                        if (readerName.equals(componentResourceInfo.readerName)) {\n                            ResourceHandler handler = componentResourceInfo.createResourceHandler();\n                            try {\n                                urlList.add(handler.getURL());\n                            } catch (GenericConfigException e) {\n                                String errorMsg = \"Could not get URL for Component ResourceHandler: \" + e.toString();\n                                Debug.logWarning(errorMsg, module);\n                            }\n                        }\n                    }\n                } else {\n                    String errorMsg = \"Could not find entity-date-reader named: \" + readerName;\n                    Debug.logWarning(errorMsg, module);\n                }\n            }\n        } else {\n            String errorMsg = \"Could not find datasource named: \" + helperName;\n            Debug.logWarning(errorMsg, module);\n        }\n        \n        // get files from the paths string\n        if (paths != null && paths.length() > 0) {\n            StringTokenizer tokenizer = new StringTokenizer(paths, \";\");\n            while (tokenizer.hasMoreTokens()) {\n                String path = tokenizer.nextToken().toLowerCase();\n                File loadDir = new File(path);\n                if (loadDir.exists() && loadDir.isDirectory()) {\n                    File[] files = loadDir.listFiles();\n                    List<File> tempFileList = new LinkedList<File>();\n                    for (File file: files) {\n                        if (file.getName().toLowerCase().endsWith(\".xml\")) {\n                            tempFileList.add(file);\n                        }\n                    }\n                    Collections.sort(tempFileList);\n                    for (File dataFile: tempFileList) {\n                        if (dataFile.exists()) {\n                            URL url = null;\n                            try {\n                                url = dataFile.toURI().toURL();\n                                urlList.add(url);\n                            } catch (java.net.MalformedURLException e) {\n                                String xmlError = \"Error loading XML file \\\"\" + dataFile.getAbsolutePath() + \"\\\"; Error was: \" + e.getMessage();\n                                Debug.logError(xmlError, module);\n                            }\n                        } else {\n                            String errorMsg = \"Could not find file: \\\"\" + dataFile.getAbsolutePath() + \"\\\"\";\n                            Debug.logError(errorMsg, module);\n                        }\n                    }\n                }\n            }\n        }\n\n        return urlList;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"protected void writeValues(List valuesToWrite) throws GenericEntityException {\n        if (this.checkDataOnly) {\n            EntityDataAssert.checkValueList(valuesToWrite, delegator, this.getMessageList());\n        } else {\n            delegator.storeAll(valuesToWrite, doCacheClear, createDummyFks);\n        }\n    }","id":103557,"modified_method":"protected void writeValues(List<GenericValue> valuesToWrite) throws GenericEntityException {\n        if (this.checkDataOnly) {\n            EntityDataAssert.checkValueList(valuesToWrite, delegator, this.getMessageList());\n        } else {\n            delegator.storeAll(valuesToWrite, doCacheClear, createDummyFks);\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public void endElement(CharArray namespaceURI, CharArray localName, CharArray fullName) throws org.xml.sax.SAXException {\n        if (Debug.verboseOn()) Debug.logVerbose(\"endElement: localName=\" + localName + \", fullName=\" + fullName + \", numberRead=\" + numberRead, module);\n        String fullNameString = fullName.toString();\n        if (\"entity-engine-xml\".equals(fullNameString)) {\n            return;\n        }\n        if (\"entity-engine-transform-xml\".equals(fullNameString)) {\n            // transform file & parse it, then return\n            URL templateUrl = UtilURL.fromResource(templatePath.toString());\n\n            if (templateUrl == null) {\n                throw new SAXException(\"Could not find transform template with resource path: \" + templatePath);\n            } else {\n                try {\n                    Reader templateReader = new InputStreamReader(templateUrl.openStream());\n\n                    StringWriter outWriter = new StringWriter();\n                    Configuration config = new Configuration();\n                    config.setObjectWrapper(BeansWrapper.getDefaultInstance());\n                    config.setSetting(\"datetime_format\", \"yyyy-MM-dd HH:mm:ss.SSS\");\n\n                    Template template = new Template(\"FMImportFilter\", templateReader, config);\n                    NodeModel nodeModel = NodeModel.wrap(this.rootNodeForTemplate);\n\n                    Map context = FastMap.newInstance();\n                    BeansWrapper wrapper = BeansWrapper.getDefaultInstance();\n                    TemplateHashModel staticModels = wrapper.getStaticModels();\n                    context.put(\"Static\", staticModels);\n\n                    context.put(\"doc\", nodeModel);\n                    template.process(context, outWriter);\n                    String s = outWriter.toString();\n                    if (Debug.verboseOn()) Debug.logVerbose(\"transformed xml: \" + s, module);\n\n                    EntitySaxReader reader = new EntitySaxReader(delegator);\n                    reader.setUseTryInsertMethod(this.useTryInsertMethod);\n                    try {\n                        reader.setTransactionTimeout(this.transactionTimeout);\n                    } catch (GenericTransactionException e1) {\n                        // couldn't set tx timeout, shouldn't be a big deal\n                    }\n\n                    numberRead += reader.parse(s);\n                } catch (TemplateException e) {\n                    throw new SAXException(\"Error storing value\", e);\n                } catch(IOException e) {\n                    throw new SAXException(\"Error storing value\", e);\n                }\n            }\n\n            return;\n        }\n\n        if (isParseForTemplate) {\n            this.currentNodeForTemplate = this.currentNodeForTemplate.getParentNode();\n            return;\n        }\n\n        if (currentValue != null) {\n            if (currentFieldName != null) {\n                if (currentFieldValue != null && currentFieldValue.length() > 0) {\n                    if (currentValue.getModelEntity().isField(currentFieldName.toString())) {\n                        ModelEntity modelEntity = currentValue.getModelEntity();\n                        ModelField modelField = modelEntity.getField(currentFieldName.toString());\n                        String type = modelField.getType();\n                        if (type != null && type.equals(\"blob\")) {\n                            byte strData[] = new byte[currentFieldValue.length()];\n                            strData = currentFieldValue.toString().getBytes();\n                            byte binData[] = new byte[currentFieldValue.length()];\n                            binData = Base64.base64Decode(strData);\n                            currentValue.setBytes(currentFieldName.toString(), binData);\n                        } else {\n                            currentValue.setString(currentFieldName.toString(), currentFieldValue.toString());\n                        }\n                    } else {\n                        Debug.logWarning(\"Ignoring invalid field name [\" + currentFieldName + \"] found for the entity: \" + currentValue.getEntityName() + \" with value=\" + currentFieldValue, module);\n                    }\n                    currentFieldValue = null;\n                }\n                currentFieldName = null;\n            } else {\n                // before we write currentValue check to see if PK is there, if not and it is one field, generate it from a sequence using the entity name\n                if (!currentValue.containsPrimaryKey()) {\n                    if (currentValue.getModelEntity().getPksSize() == 1) {\n                        ModelField modelField = currentValue.getModelEntity().getOnlyPk();\n                        String newSeq = delegator.getNextSeqId(currentValue.getEntityName());\n                        currentValue.setString(modelField.getName(), newSeq);\n                    } else {\n                        throw new SAXException(\"Cannot store value with incomplete primary key with more than 1 primary key field: \" + currentValue);\n                    }\n                }\n\n                try {\n                    if (this.useTryInsertMethod && !this.checkDataOnly) {\n                        // this technique is faster for data sets where most, if not all, values do not already exist in the database\n                        try {\n                            currentValue.create();\n                        } catch (GenericEntityException e1) {\n                            // create failed, try a store, if that fails too we have a real error and the catch outside of this should handle it\n                            currentValue.store();\n                        }\n                    } else {\n                        valuesToWrite.add(currentValue);\n                        if (valuesToWrite.size() >= valuesPerWrite) {\n                            writeValues(valuesToWrite);\n                            valuesToWrite.clear();\n                        }\n                    }\n                    numberRead++;\n                    if ((numberRead % valuesPerMessage) == 0) {\n                        Debug.logImportant(\"Another \" + valuesPerMessage + \" values imported: now up to \" + numberRead, module);\n                    }\n                    currentValue = null;\n                } catch (GenericEntityException e) {\n                    String errMsg = \"Error storing value\";\n                    Debug.logError(e, errMsg, module);\n                    throw new SAXException(errMsg, e);\n                }\n            }\n        }\n    }","id":103558,"modified_method":"public void endElement(CharArray namespaceURI, CharArray localName, CharArray fullName) throws org.xml.sax.SAXException {\n        if (Debug.verboseOn()) Debug.logVerbose(\"endElement: localName=\" + localName + \", fullName=\" + fullName + \", numberRead=\" + numberRead, module);\n        String fullNameString = fullName.toString();\n        if (\"entity-engine-xml\".equals(fullNameString)) {\n            return;\n        }\n        if (\"entity-engine-transform-xml\".equals(fullNameString)) {\n            // transform file & parse it, then return\n            URL templateUrl = UtilURL.fromResource(templatePath.toString());\n\n            if (templateUrl == null) {\n                throw new SAXException(\"Could not find transform template with resource path: \" + templatePath);\n            } else {\n                try {\n                    Reader templateReader = new InputStreamReader(templateUrl.openStream());\n\n                    StringWriter outWriter = new StringWriter();\n                    Configuration config = new Configuration();\n                    config.setObjectWrapper(BeansWrapper.getDefaultInstance());\n                    config.setSetting(\"datetime_format\", \"yyyy-MM-dd HH:mm:ss.SSS\");\n\n                    Template template = new Template(\"FMImportFilter\", templateReader, config);\n                    NodeModel nodeModel = NodeModel.wrap(this.rootNodeForTemplate);\n\n                    Map<String, Object> context = FastMap.newInstance();\n                    BeansWrapper wrapper = BeansWrapper.getDefaultInstance();\n                    TemplateHashModel staticModels = wrapper.getStaticModels();\n                    context.put(\"Static\", staticModels);\n\n                    context.put(\"doc\", nodeModel);\n                    template.process(context, outWriter);\n                    String s = outWriter.toString();\n                    if (Debug.verboseOn()) Debug.logVerbose(\"transformed xml: \" + s, module);\n\n                    EntitySaxReader reader = new EntitySaxReader(delegator);\n                    reader.setUseTryInsertMethod(this.useTryInsertMethod);\n                    try {\n                        reader.setTransactionTimeout(this.transactionTimeout);\n                    } catch (GenericTransactionException e1) {\n                        // couldn't set tx timeout, shouldn't be a big deal\n                    }\n\n                    numberRead += reader.parse(s);\n                } catch (TemplateException e) {\n                    throw new SAXException(\"Error storing value\", e);\n                } catch(IOException e) {\n                    throw new SAXException(\"Error storing value\", e);\n                }\n            }\n\n            return;\n        }\n\n        if (isParseForTemplate) {\n            this.currentNodeForTemplate = this.currentNodeForTemplate.getParentNode();\n            return;\n        }\n\n        if (currentValue != null) {\n            if (currentFieldName != null) {\n                if (currentFieldValue != null && currentFieldValue.length() > 0) {\n                    if (currentValue.getModelEntity().isField(currentFieldName.toString())) {\n                        ModelEntity modelEntity = currentValue.getModelEntity();\n                        ModelField modelField = modelEntity.getField(currentFieldName.toString());\n                        String type = modelField.getType();\n                        if (type != null && type.equals(\"blob\")) {\n                            byte strData[] = new byte[currentFieldValue.length()];\n                            strData = currentFieldValue.toString().getBytes();\n                            byte binData[] = new byte[currentFieldValue.length()];\n                            binData = Base64.base64Decode(strData);\n                            currentValue.setBytes(currentFieldName.toString(), binData);\n                        } else {\n                            currentValue.setString(currentFieldName.toString(), currentFieldValue.toString());\n                        }\n                    } else {\n                        Debug.logWarning(\"Ignoring invalid field name [\" + currentFieldName + \"] found for the entity: \" + currentValue.getEntityName() + \" with value=\" + currentFieldValue, module);\n                    }\n                    currentFieldValue = null;\n                }\n                currentFieldName = null;\n            } else {\n                // before we write currentValue check to see if PK is there, if not and it is one field, generate it from a sequence using the entity name\n                if (!currentValue.containsPrimaryKey()) {\n                    if (currentValue.getModelEntity().getPksSize() == 1) {\n                        ModelField modelField = currentValue.getModelEntity().getOnlyPk();\n                        String newSeq = delegator.getNextSeqId(currentValue.getEntityName());\n                        currentValue.setString(modelField.getName(), newSeq);\n                    } else {\n                        throw new SAXException(\"Cannot store value with incomplete primary key with more than 1 primary key field: \" + currentValue);\n                    }\n                }\n\n                try {\n                    if (this.useTryInsertMethod && !this.checkDataOnly) {\n                        // this technique is faster for data sets where most, if not all, values do not already exist in the database\n                        try {\n                            currentValue.create();\n                        } catch (GenericEntityException e1) {\n                            // create failed, try a store, if that fails too we have a real error and the catch outside of this should handle it\n                            currentValue.store();\n                        }\n                    } else {\n                        valuesToWrite.add(currentValue);\n                        if (valuesToWrite.size() >= valuesPerWrite) {\n                            writeValues(valuesToWrite);\n                            valuesToWrite.clear();\n                        }\n                    }\n                    numberRead++;\n                    if ((numberRead % valuesPerMessage) == 0) {\n                        Debug.logImportant(\"Another \" + valuesPerMessage + \" values imported: now up to \" + numberRead, module);\n                    }\n                    currentValue = null;\n                } catch (GenericEntityException e) {\n                    String errMsg = \"Error storing value\";\n                    Debug.logError(e, errMsg, module);\n                    throw new SAXException(errMsg, e);\n                }\n            }\n        }\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public void setMessageList(List messageList) {\n        this.messageList = messageList;\n    }","id":103559,"modified_method":"public void setMessageList(List<Object> messageList) {\n        this.messageList = messageList;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static List getDescendantTypes(GenericValue typeValue) {\n        // assumes Child relation is \"Child<entityName>\"\n        List descendantTypes = new ArrayList();\n\n        // first get all childrenTypes ...\n        List childrenTypes = null;\n        try {\n            childrenTypes = typeValue.getRelatedCache(\"Child\" + typeValue.getEntityName());\n        } catch (GenericEntityException e) {\n            Debug.logWarning(e, module);\n            return null;\n        }\n        if (childrenTypes == null)\n            return null;\n\n        // ... and add them as direct descendants\n        descendantTypes.addAll(childrenTypes);\n\n        // then add all descendants of the children\n        Iterator childrenTypeIter = childrenTypes.iterator();\n        while (childrenTypeIter.hasNext()) {\n            GenericValue childType = (GenericValue) childrenTypeIter.next();\n            List childTypeDescendants = getDescendantTypes(childType);\n            if (childTypeDescendants != null) {\n                descendantTypes.addAll(childTypeDescendants);\n            }\n        }\n\n        return descendantTypes;\n    }","id":103560,"modified_method":"public static List<GenericValue> getDescendantTypes(GenericValue typeValue) {\n        // assumes Child relation is \"Child<entityName>\"\n        List<GenericValue> descendantTypes = new ArrayList<GenericValue>();\n\n        // first get all childrenTypes ...\n        List<GenericValue> childrenTypes = null;\n        try {\n            childrenTypes = typeValue.getRelatedCache(\"Child\" + typeValue.getEntityName());\n        } catch (GenericEntityException e) {\n            Debug.logWarning(e, module);\n            return null;\n        }\n        if (childrenTypes == null)\n            return null;\n\n        // ... and add them as direct descendants\n        descendantTypes.addAll(childrenTypes);\n\n        // then add all descendants of the children\n        for (GenericValue childType: childrenTypes) {\n            List<GenericValue> childTypeDescendants = getDescendantTypes(childType);\n            if (childTypeDescendants != null) {\n                descendantTypes.addAll(childTypeDescendants);\n            }\n        }\n\n        return descendantTypes;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public static boolean isType(Collection thisCollection, String typeRelation, GenericValue targetType) {\n        Iterator iter = thisCollection.iterator();\n\n        while (iter.hasNext()) {\n            try {\n                GenericValue related = ((GenericValue) iter.next()).getRelatedOne(typeRelation);\n\n                if (isType(related, targetType)) {\n                    return true;\n                } // else keep looking\n            } catch (GenericEntityException e) {\n                continue;\n            }\n        }\n        return false;\n    }","id":103561,"modified_method":"public static boolean isType(Collection<GenericValue> thisCollection, String typeRelation, GenericValue targetType) {\n        for (GenericValue value: thisCollection) {\n            try {\n                GenericValue related = value.getRelatedOne(typeRelation);\n                if (isType(related, targetType)) {\n                    return true;\n                } // else keep looking\n            } catch (GenericEntityException e) {\n                continue;\n            }\n        }\n        return false;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"private SequenceBank getBank(String seqName, ModelEntity seqModelEntity) {\n        SequenceBank bank = (SequenceBank) sequences.get(seqName);\n\n        if (bank == null) {\n            synchronized(this) {\n                bank = (SequenceBank) sequences.get(seqName);\n                if (bank == null) {\n                    bank = new SequenceBank(seqName, seqModelEntity, this);\n                    sequences.put(seqName, bank);\n                }\n            }\n        }\n        \n        return bank;\n    }","id":103562,"modified_method":"private SequenceBank getBank(String seqName, ModelEntity seqModelEntity) {\n        SequenceBank bank = (SequenceBank) sequences.get(seqName);\n\n        if (bank == null) {\n            synchronized(this) {\n                bank = sequences.get(seqName);\n                if (bank == null) {\n                    bank = new SequenceBank(seqName, seqModelEntity, this);\n                    sequences.put(seqName, bank);\n                }\n            }\n        }\n        \n        return bank;\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"public void forceBankRefresh(String seqName, long staggerMax) {\n        // don't use the get method because we don't want to create if it fails\n        SequenceBank bank = (SequenceBank) sequences.get(seqName);\n        if (bank == null) {\n            return;\n        }\n        \n        bank.refresh(staggerMax);\n    }","id":103563,"modified_method":"public void forceBankRefresh(String seqName, long staggerMax) {\n        // don't use the get method because we don't want to create if it fails\n        SequenceBank bank = sequences.get(seqName);\n        if (bank == null) {\n            return;\n        }\n        \n        bank.refresh(staggerMax);\n    }","commit_id":"90cdc7bcc9f8ec61493dcdd079f0259388c62794","url":"https://github.com/apache/ofbiz"},{"original_method":"/**\r\n     * Returns a list of all currently registered providers, which support the\r\n     * given <tt>operationSetClass<\/tt>.\r\n     *\r\n     * @param opSetClass the operation set class for which we're looking\r\n     * for providers\r\n     * @return a list of all currently registered providers, which support the\r\n     * given <tt>operationSetClass<\/tt>\r\n     */\r\n    public static List<ProtocolProviderService> getRegisteredProviders(\r\n        Class<? extends OperationSet> opSetClass)\r\n    {\r\n        List<ProtocolProviderService> opSetProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n\r\n        for (ProtocolProviderFactory providerFactory : UtilActivator\r\n            .getProtocolProviderFactories().values())\r\n        {\r\n            ServiceReference serRef;\r\n            ProtocolProviderService protocolProvider;\r\n\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                serRef = providerFactory.getProviderForAccount(accountID);\r\n\r\n                protocolProvider\r\n                    = (ProtocolProviderService) UtilActivator.bundleContext\r\n                        .getService(serRef);\r\n\r\n                if (protocolProvider.getOperationSet(opSetClass) != null\r\n                    && protocolProvider.isRegistered())\r\n                {\r\n                    opSetProviders.add(protocolProvider);\r\n                }\r\n            }\r\n        }\r\n        return opSetProviders;\r\n    }","id":103564,"modified_method":"/**\r\n     * Returns a list of all currently registered providers, which support the\r\n     * given <tt>operationSetClass<\/tt>.\r\n     *\r\n     * @param opSetClass the operation set class for which we're looking\r\n     * for providers\r\n     * @return a list of all currently registered providers, which support the\r\n     * given <tt>operationSetClass<\/tt>\r\n     */\r\n    public static List<ProtocolProviderService> getRegisteredProviders(\r\n            Class<? extends OperationSet> opSetClass)\r\n    {\r\n        List<ProtocolProviderService> opSetProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n\r\n        for (ProtocolProviderFactory providerFactory\r\n                : UtilActivator.getProtocolProviderFactories().values())\r\n        {\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                ServiceReference ref\r\n                    = providerFactory.getProviderForAccount(accountID);\r\n\r\n                if (ref != null)\r\n                {\r\n                    ProtocolProviderService protocolProvider\r\n                        = (ProtocolProviderService)\r\n                            UtilActivator.bundleContext.getService(ref);\r\n\r\n                    if ((protocolProvider.getOperationSet(opSetClass) != null)\r\n                            && protocolProvider.isRegistered())\r\n                    {\r\n                        opSetProviders.add(protocolProvider);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return opSetProviders;\r\n    }","commit_id":"3018bab9f831f7c7cb572d3a23d8e6dbd7783ec2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Returns a <tt>ProtocolProviderFactory<\/tt> for a given protocol\r\n     * provider.\r\n     * @param protocolName the name of the protocol\r\n     * @return a <tt>ProtocolProviderFactory<\/tt> for a given protocol\r\n     * provider\r\n     */\r\n    public static ProtocolProviderFactory getProtocolProviderFactory(\r\n            String protocolName)\r\n    {\r\n        String osgiFilter = \"(\"\r\n            + ProtocolProviderFactory.PROTOCOL\r\n            + \"=\"+protocolName+\")\";\r\n\r\n        ProtocolProviderFactory protocolProviderFactory = null;\r\n        try\r\n        {\r\n            ServiceReference[] serRefs\r\n                = UtilActivator.bundleContext.getServiceReferences(\r\n                    ProtocolProviderFactory.class.getName(), osgiFilter);\r\n\r\n            if (serRefs != null && serRefs.length > 0)\r\n                protocolProviderFactory\r\n                    = (ProtocolProviderFactory) UtilActivator.bundleContext\r\n                        .getService(serRefs[0]);\r\n        }\r\n        catch (InvalidSyntaxException ex)\r\n        {\r\n            logger.error(\"AccountUtils : \" + ex);\r\n        }\r\n\r\n        return protocolProviderFactory;\r\n    }","id":103565,"modified_method":"/**\r\n     * Returns a <tt>ProtocolProviderFactory<\/tt> for a given protocol\r\n     * provider.\r\n     * @param protocolName the name of the protocol\r\n     * @return a <tt>ProtocolProviderFactory<\/tt> for a given protocol\r\n     * provider\r\n     */\r\n    public static ProtocolProviderFactory getProtocolProviderFactory(\r\n            String protocolName)\r\n    {\r\n        String osgiFilter\r\n            = \"(\" + ProtocolProviderFactory.PROTOCOL + \"=\" + protocolName + \")\";\r\n        ProtocolProviderFactory protocolProviderFactory = null;\r\n\r\n        try\r\n        {\r\n            ServiceReference[] refs\r\n                = UtilActivator.bundleContext.getServiceReferences(\r\n                        ProtocolProviderFactory.class.getName(),\r\n                        osgiFilter);\r\n\r\n            if ((refs != null) && (refs.length > 0))\r\n            {\r\n                protocolProviderFactory\r\n                    = (ProtocolProviderFactory)\r\n                        UtilActivator.bundleContext.getService(refs[0]);\r\n            }\r\n        }\r\n        catch (InvalidSyntaxException ex)\r\n        {\r\n            logger.error(\"AccountUtils : \" + ex);\r\n        }\r\n        return protocolProviderFactory;\r\n    }","commit_id":"3018bab9f831f7c7cb572d3a23d8e6dbd7783ec2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Returns a list of all currently registered telephony providers for the\r\n     * given protocol name.\r\n     * @param protocolName the protocol name\r\n     * @param operationSetClass the operation set class for which we're looking\r\n     * for providers\r\n     * @return a list of all currently registered providers for the given\r\n     * <tt>protocolName<\/tt> and supporting the given <tt>operationSetClass<\/tt>\r\n     */\r\n    public static List<ProtocolProviderService> getRegisteredProviders(\r\n        String protocolName,\r\n        Class<? extends OperationSet> operationSetClass)\r\n    {\r\n        List<ProtocolProviderService> opSetProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n\r\n        ProtocolProviderFactory providerFactory\r\n            = getProtocolProviderFactory(protocolName);\r\n\r\n        if (providerFactory != null)\r\n        {\r\n            ServiceReference serRef;\r\n            ProtocolProviderService protocolProvider;\r\n\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                serRef = providerFactory.getProviderForAccount(accountID);\r\n\r\n                protocolProvider\r\n                    = (ProtocolProviderService) UtilActivator.bundleContext\r\n                        .getService(serRef);\r\n\r\n                if (protocolProvider.getOperationSet(operationSetClass) != null\r\n                    && protocolProvider.isRegistered())\r\n                {\r\n                    opSetProviders.add(protocolProvider);\r\n                }\r\n            }\r\n        }\r\n        return opSetProviders;\r\n    }","id":103566,"modified_method":"/**\r\n     * Returns a list of all currently registered telephony providers for the\r\n     * given protocol name.\r\n     * @param protocolName the protocol name\r\n     * @param opSetClass the operation set class for which we're looking for\r\n     * providers\r\n     * @return a list of all currently registered providers for the given\r\n     * <tt>protocolName<\/tt> and supporting the given <tt>operationSetClass<\/tt>\r\n     */\r\n    public static List<ProtocolProviderService> getRegisteredProviders(\r\n            String protocolName,\r\n            Class<? extends OperationSet> opSetClass)\r\n    {\r\n        List<ProtocolProviderService> opSetProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n        ProtocolProviderFactory providerFactory\r\n            = getProtocolProviderFactory(protocolName);\r\n\r\n        if (providerFactory != null)\r\n        {\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                ServiceReference ref\r\n                    = providerFactory.getProviderForAccount(accountID);\r\n\r\n                if (ref != null)\r\n                {\r\n                    ProtocolProviderService protocolProvider\r\n                        = (ProtocolProviderService)\r\n                            UtilActivator.bundleContext.getService(ref);\r\n\r\n                    if ((protocolProvider.getOperationSet(opSetClass) != null)\r\n                            && protocolProvider.isRegistered())\r\n                    {\r\n                        opSetProviders.add(protocolProvider);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return opSetProviders;\r\n    }","commit_id":"3018bab9f831f7c7cb572d3a23d8e6dbd7783ec2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Returns the <tt>ProtocolProviderService<\/tt> corresponding to the given\r\n     * account identifier that is registered in the given factory\r\n     * @param accountID the identifier of the account\r\n     * @return the <tt>ProtocolProviderService<\/tt> corresponding to the given\r\n     * account identifier that is registered in the given factory\r\n     */\r\n    public static ProtocolProviderService getRegisteredProviderForAccount(\r\n                                                        AccountID accountID)\r\n    {\r\n        for (ProtocolProviderFactory factory\r\n                : UtilActivator.getProtocolProviderFactories().values())\r\n        {\r\n            if (factory.getRegisteredAccounts().contains(accountID))\r\n            {\r\n                ServiceReference serRef\r\n                    = factory.getProviderForAccount(accountID);\r\n\r\n                if (serRef != null)\r\n                {\r\n                    return\r\n                        (ProtocolProviderService)\r\n                            UtilActivator.bundleContext.getService(serRef);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }","id":103567,"modified_method":"/**\r\n     * Returns the <tt>ProtocolProviderService<\/tt> corresponding to the given\r\n     * account identifier that is registered in the given factory\r\n     * @param accountID the identifier of the account\r\n     * @return the <tt>ProtocolProviderService<\/tt> corresponding to the given\r\n     * account identifier that is registered in the given factory\r\n     */\r\n    public static ProtocolProviderService getRegisteredProviderForAccount(\r\n                                                        AccountID accountID)\r\n    {\r\n        for (ProtocolProviderFactory factory\r\n                : UtilActivator.getProtocolProviderFactories().values())\r\n        {\r\n            if (factory.getRegisteredAccounts().contains(accountID))\r\n            {\r\n                ServiceReference ref\r\n                    = factory.getProviderForAccount(accountID);\r\n\r\n                if (ref != null)\r\n                {\r\n                    return\r\n                        (ProtocolProviderService)\r\n                            UtilActivator.bundleContext.getService(ref);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }","commit_id":"3018bab9f831f7c7cb572d3a23d8e6dbd7783ec2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Returns all registered protocol providers.\r\n     *\r\n     * @return a list of all registered providers\r\n     */\r\n    public static Collection<ProtocolProviderService> getRegisteredProviders()\r\n    {\r\n        List<ProtocolProviderService> registeredProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n\r\n        for (ProtocolProviderFactory providerFactory : UtilActivator\r\n            .getProtocolProviderFactories().values())\r\n        {\r\n            ServiceReference serRef;\r\n            ProtocolProviderService protocolProvider;\r\n\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                serRef = providerFactory.getProviderForAccount(accountID);\r\n\r\n                protocolProvider\r\n                    = (ProtocolProviderService) UtilActivator.bundleContext\r\n                        .getService(serRef);\r\n\r\n                registeredProviders.add(protocolProvider);\r\n            }\r\n        }\r\n        return registeredProviders;\r\n    }","id":103568,"modified_method":"/**\r\n     * Returns all registered protocol providers.\r\n     *\r\n     * @return a list of all registered providers\r\n     */\r\n    public static Collection<ProtocolProviderService> getRegisteredProviders()\r\n    {\r\n        List<ProtocolProviderService> registeredProviders\r\n            = new LinkedList<ProtocolProviderService>();\r\n\r\n        for (ProtocolProviderFactory providerFactory\r\n                : UtilActivator.getProtocolProviderFactories().values())\r\n        {\r\n            for (AccountID accountID : providerFactory.getRegisteredAccounts())\r\n            {\r\n                ServiceReference ref\r\n                    = providerFactory.getProviderForAccount(accountID);\r\n\r\n                if (ref != null)\r\n                {\r\n                    ProtocolProviderService protocolProvider\r\n                        = (ProtocolProviderService)\r\n                            UtilActivator.bundleContext.getService(ref);\r\n\r\n                    registeredProviders.add(protocolProvider);\r\n                }\r\n            }\r\n        }\r\n        return registeredProviders;\r\n    }","commit_id":"3018bab9f831f7c7cb572d3a23d8e6dbd7783ec2","url":"https://github.com/jitsi/jitsi"},{"original_method":"/** Used internally. If overridden, call parent's method first */\n    public void stopInternal() {\n        up_queue.close(false);  // this should terminate up_handler thread\n\n        if(up_handler != null && up_handler.isAlive()) {\n            try {\n                up_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(up_handler.isAlive()) {\n                up_handler.interrupt();  // still alive ? let's just kill it without mercy...\n                try {\n                    up_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(up_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"up_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is still alive\");\n            }\n        }\n        up_handler=null;\n\n        down_queue.close(false); // this should terminate down_handler thread\n        if(down_handler != null && down_handler.isAlive()) {\n            try {\n                down_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(down_handler.isAlive()) {\n                down_handler.interrupt(); // still alive ? let's just kill it without mercy...\n                try {\n                    down_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(down_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"down_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is is still alive\");\n            }\n        }\n        down_handler=null;\n    }","id":103569,"modified_method":"/** Used internally. If overridden, call parent's method first */\n    public void stopInternal() {\n        up_queue.close(false);  // this should terminate up_handler thread\n\n        if(up_handler != null && up_handler.isAlive()) {\n            try {\n                up_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(up_handler != null && up_handler.isAlive()) {\n                up_handler.interrupt();  // still alive ? let's just kill it without mercy...\n                try {\n                    up_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(up_handler != null && up_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"up_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is still alive\");\n            }\n        }\n        up_handler=null;\n\n        down_queue.close(false); // this should terminate down_handler thread\n        if(down_handler != null && down_handler.isAlive()) {\n            try {\n                down_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(down_handler != null && down_handler.isAlive()) {\n                down_handler.interrupt(); // still alive ? let's just kill it without mercy...\n                try {\n                    down_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(down_handler != null && down_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"down_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is is still alive\");\n            }\n        }\n        down_handler=null;\n    }","commit_id":"1f8e648230f721d4f22c01bdb3961a6e47d80fc8","url":"https://github.com/belaban/JGroups"},{"original_method":"/** Used internally. If overridden, call parent's method first */\n    public void stopInternal() {\n        up_queue.close(false);  // this should terminate up_handler thread\n\n        if(up_handler != null && up_handler.isAlive()) {\n            try {\n                up_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(up_handler.isAlive()) {\n                up_handler.interrupt();  // still alive ? let's just kill it without mercy...\n                try {\n                    up_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(up_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"up_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is still alive\");\n            }\n        }\n        up_handler=null;\n\n        down_queue.close(false); // this should terminate down_handler thread\n        if(down_handler != null && down_handler.isAlive()) {\n            try {\n                down_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(down_handler.isAlive()) {\n                down_handler.interrupt(); // still alive ? let's just kill it without mercy...\n                try {\n                    down_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(down_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"down_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is is still alive\");\n            }\n        }\n        down_handler=null;\n    }","id":103570,"modified_method":"/** Used internally. If overridden, call parent's method first */\n    public void stopInternal() {\n        up_queue.close(false);  // this should terminate up_handler thread\n\n        if(up_handler != null && up_handler.isAlive()) {\n            try {\n                up_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(up_handler != null && up_handler.isAlive()) {\n                up_handler.interrupt();  // still alive ? let's just kill it without mercy...\n                try {\n                    up_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(up_handler != null && up_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"up_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is still alive\");\n            }\n        }\n        up_handler=null;\n\n        down_queue.close(false); // this should terminate down_handler thread\n        if(down_handler != null && down_handler.isAlive()) {\n            try {\n                down_handler.join(THREAD_JOIN_TIMEOUT);\n            }\n            catch(Exception ex) {\n            }\n            if(down_handler != null && down_handler.isAlive()) {\n                down_handler.interrupt(); // still alive ? let's just kill it without mercy...\n                try {\n                    down_handler.join(THREAD_JOIN_TIMEOUT);\n                }\n                catch(Exception ex) {\n                }\n                if(down_handler != null && down_handler.isAlive())\n                    Trace.error(\"Protocol.stopInternal()\", \"down_handler thread for \" + getName() +\n                                                           \" was interrupted (in order to be terminated), but is is still alive\");\n            }\n        }\n        down_handler=null;\n    }","commit_id":"243bd8c0e628bf21042c8413e27258b52517ce15","url":"https://github.com/belaban/JGroups"},{"original_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(64).append(super\n\t\t\t\t.getOuterAttrs());\n\t\tappendAsapAttr(sb, Events.ON_SELECT);\n\n\t\tfinal String clkattrs = getAllOnClickAttrs();\n\t\tif (clkattrs != null)\n\t\t\tsb.append(clkattrs);\n\t\tHTMLs.appendAttribute(sb, \"z.sel\", isSelected());\n\t\tHTMLs.appendAttribute(sb, \"z.box\", getTabbox().getUuid());\n\t\tHTMLs.appendAttribute(sb, \"z.panel\", getLinkedPanel().getUuid());\n\t\tHTMLs.appendAttribute(sb, \"z.disabled\", isDisabled());\n\t\treturn sb.toString();\n\t}","id":103571,"modified_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(64).append(super\n\t\t\t\t.getOuterAttrs());\n\t\tappendAsapAttr(sb, Events.ON_SELECT);\n\n\t\tfinal String clkattrs = getAllOnClickAttrs();\n\t\tif (clkattrs != null)\n\t\t\tsb.append(clkattrs);\n\t\tHTMLs.appendAttribute(sb, \"z.sel\", isSelected());\n\t\tHTMLs.appendAttribute(sb, \"z.box\", getTabbox().getUuid());\n\t\tfinal Tabpanel panel = getLinkedPanel();\n\t\tif (panel != null)\n\t\t\tHTMLs.appendAttribute(sb, \"z.panel\", panel.getUuid());\n\t\tHTMLs.appendAttribute(sb, \"z.disabled\", isDisabled());\n\t\treturn sb.toString();\n\t}","commit_id":"17a636ecf4470bd25f232b7221b62dbb893ead72","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtab.render(comp, out);\n\t\t\treturn; //done\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\n\t\tfinal int colspan = self.isClosable() ? 4 : 3;\n\t\twh.write(\"<td id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.write(\" z.sel=\\\"\").write(self.isSelected()).write(\"\\\" z.box=\\\"\")\n\t\t\t.write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(self.getLinkedPanel().getUuid()).write(\"\\\">\");\n\n\t\twh.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan)\n\t\t\t.write(\"\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m');\n\t\tif (!Strings.isBlank(self.getHeight()))\n\t\t\twh.write(\"\\\" style=\\\"height:\").write(self.getHeight());\n\t\twh.writeln(\"\\\"><td class=\\\"\")\n\t\t\t.write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t.write(\"\\\"><a href=\\\"javascript:;\\\"\").write(\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\")\n\t\t\t.write(self.getImgTag());\n\t\tnew Out(self.getLabel()).render(out);\n\t\twh.writeln(\"<\/a><\/td>\");\n\n\t\tif (self.isClosable()) {\n\t\t\t// Bug 1780044: width cannot (and need not) be specified\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><img id=\\\"\")\n\t\t\t\t.write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\"))\n\t\t\t\t.writeln(\"\\\"/><\/td>\");\n\t\t}\n\n\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan).write(\"\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td><\/tr><\/table><\/td>\");\n\t}","id":103572,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtab.render(comp, out);\n\t\t\treturn; //done\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\t\tfinal Tabpanel panel = self.getLinkedPanel();\n\n\t\tfinal int colspan = self.isClosable() ? 4 : 3;\n\t\twh.write(\"<td id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.write(\" z.sel=\\\"\").write(self.isSelected()).write(\"\\\" z.box=\\\"\")\n\t\t\t.write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(panel==null?\"\":panel.getUuid()).write(\"\\\">\");\n\n\t\twh.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan)\n\t\t\t.write(\"\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m');\n\t\tif (!Strings.isBlank(self.getHeight()))\n\t\t\twh.write(\"\\\" style=\\\"height:\").write(self.getHeight());\n\t\twh.writeln(\"\\\"><td class=\\\"\")\n\t\t\t.write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t.write(\"\\\"><a href=\\\"javascript:;\\\"\").write(\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\")\n\t\t\t.write(self.getImgTag());\n\t\tnew Out(self.getLabel()).render(out);\n\t\twh.writeln(\"<\/a><\/td>\");\n\n\t\tif (self.isClosable()) {\n\t\t\t// Bug 1780044: width cannot (and need not) be specified\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><img id=\\\"\")\n\t\t\t\t.write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\"))\n\t\t\t\t.writeln(\"\\\"/><\/td>\");\n\t\t}\n\n\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan).write(\"\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td><\/tr><\/table><\/td>\");\n\t}","commit_id":"b56d62e253dca20ce3dbbf8b467a0b78fa5fb9e5","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\n\t\twh.write(\"<tr id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(\" z.sel=\\\"\").write(self.isSelected())\n\t\t\t.write(\"\\\" z.box=\\\"\").write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(self.getLinkedPanel().getUuid()).writeln(\"\\\">\");\n\n\t\twh.write(\"<td align=\\\"right\\\"\").writeAttr(\"width\", self.getWidth())\n\t\t\t.writeln(\"><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"3\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m')\n\t\t\t.write(\"\\\"><td class=\\\"\").write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t.write(\"\\\" id=\\\"\").write(self.getUuid()).write(\"!real\\\"\").write(self.getInnerAttrs())\n\t\t\t.write(\"><a href=\\\"javascript:;\\\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\");\n\t\t\twh.write(self.getImgTag());\n\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\twh.writeln(\"<\/a><\/td>\");\n\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\t\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\t\t\n\t\t\n\t\tif(self.isClosable()){\n\t\t\twh.write(\"<tr height=\\\"8\\\"><td class=\\\"\").write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td align=\\\"center\\\" valign=\\\"buttom\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><img id=\\\"\").write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\")).writeln(\"\\\"/><\/td>\")\n\t\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\t\t}\n\t\t\n\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"3\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.writeln(\"<\/tr><\/table><\/td><\/tr>\");\n\t}","id":103573,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\t\tfinal Tabpanel panel = self.getLinkedPanel();\n\n\t\twh.write(\"<tr id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(\" z.sel=\\\"\").write(self.isSelected())\n\t\t\t.write(\"\\\" z.box=\\\"\").write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(panel==null?\"\":panel.getUuid()).writeln(\"\\\">\");\n\n\t\twh.write(\"<td align=\\\"right\\\"\").writeAttr(\"width\", self.getWidth())\n\t\t\t.writeln(\"><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"3\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m')\n\t\t\t.write(\"\\\"><td class=\\\"\").write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t.write(\"\\\" id=\\\"\").write(self.getUuid()).write(\"!real\\\"\").write(self.getInnerAttrs())\n\t\t\t.write(\"><a href=\\\"javascript:;\\\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\");\n\t\t\twh.write(self.getImgTag());\n\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\twh.writeln(\"<\/a><\/td>\");\n\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\t\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\t\t\n\t\t\n\t\tif(self.isClosable()){\n\t\t\twh.write(\"<tr height=\\\"8\\\"><td class=\\\"\").write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td align=\\\"center\\\" valign=\\\"buttom\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><img id=\\\"\").write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\")).writeln(\"\\\"/><\/td>\")\n\t\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\t\t}\n\t\t\n\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"3\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.writeln(\"<\/tr><\/table><\/td><\/tr>\");\n\t}","commit_id":"b56d62e253dca20ce3dbbf8b467a0b78fa5fb9e5","url":"https://github.com/zkoss/zk"},{"original_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        String correlationId = messageInfoMapping.getCorrelationId(message);\n\n        List results = new ArrayList();\n        int correlationSequence = 1;\n        SplitMessage splitMessage = getMessageParts(message, getEndpoints());\n\n        // Cache the properties here because for some message types getting the\n        // properties can be expensive\n        Map props = new HashMap();\n        for (Iterator iterator = message.getPropertyNames().iterator(); iterator.hasNext();)\n        {\n            String propertyKey = (String) iterator.next();\n            props.put(propertyKey, message.getProperty(propertyKey));\n        }\n\n        for (int i = 0; i < splitMessage.size(); i++)\n        {\n            SplitMessage.MessagePart part = splitMessage.getPart(i);\n\n            MuleMessage sendMessage;\n            if (part.getPart() instanceof MuleMessage)\n            {\n                sendMessage = (MuleMessage) part.getPart();\n            }\n            else\n            {\n                sendMessage = new org.mule.DefaultMuleMessage(part.getPart(), props, muleContext);\n            }\n\n            try\n            {\n                if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n                {\n                    boolean correlationSet = message.getCorrelationId() != null;\n                    if (!correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n                    {\n                        sendMessage.setCorrelationId(correlationId);\n                    }\n\n                    // take correlation group size from the message properties, set by concrete \n                    // message splitter implementations\n                    sendMessage.setCorrelationGroupSize(splitMessage.size());\n                    sendMessage.setCorrelationSequence(correlationSequence++);\n                }\n\n                //Use sync config from endpoint\n                boolean synchronous = part.getEndpoint().isSynchronous();\n\n                if (synchronous)\n                {\n                    results.add(getMessage(sendRequest(session, sendMessage, part.getEndpoint(), true)));\n                }\n                else\n                {\n                    sendRequest(session, sendMessage, part.getEndpoint(), false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(sendMessage, part.getEndpoint(), e);\n            }\n        }\n\n        MuleMessage resultMessage =  resultsHandler.aggregateResults(results, message, muleContext);\n        return createEvent(resultMessage, event);\n    }","id":103574,"modified_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        String correlationId = messageInfoMapping.getCorrelationId(message);\n\n        List<MuleEvent> results = new ArrayList<MuleEvent>();\n        int correlationSequence = 1;\n        SplitMessage splitMessage = getMessageParts(message, getEndpoints());\n\n        // Cache the properties here because for some message types getting the\n        // properties can be expensive\n        Map props = new HashMap();\n        for (Iterator iterator = message.getPropertyNames().iterator(); iterator.hasNext();)\n        {\n            String propertyKey = (String) iterator.next();\n            props.put(propertyKey, message.getProperty(propertyKey));\n        }\n\n        for (int i = 0; i < splitMessage.size(); i++)\n        {\n            SplitMessage.MessagePart part = splitMessage.getPart(i);\n\n            MuleMessage sendMessage;\n            if (part.getPart() instanceof MuleMessage)\n            {\n                sendMessage = (MuleMessage) part.getPart();\n            }\n            else\n            {\n                sendMessage = new org.mule.DefaultMuleMessage(part.getPart(), props, muleContext);\n            }\n\n            try\n            {\n                if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n                {\n                    boolean correlationSet = message.getCorrelationId() != null;\n                    if (!correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n                    {\n                        sendMessage.setCorrelationId(correlationId);\n                    }\n\n                    // take correlation group size from the message properties, set by concrete \n                    // message splitter implementations\n                    sendMessage.setCorrelationGroupSize(splitMessage.size());\n                    sendMessage.setCorrelationSequence(correlationSequence++);\n                }\n\n                //Use sync config from endpoint\n                boolean synchronous = part.getEndpoint().isSynchronous();\n\n                if (synchronous)\n                {\n                    results.add(sendRequest(session, sendMessage, part.getEndpoint(), true));\n                }\n                else\n                {\n                    sendRequest(session, sendMessage, part.getEndpoint(), false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(sendMessage, part.getEndpoint(), e);\n            }\n        }\n\n        return resultsHandler.aggregateResults(results, muleContext, event);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"/** @eturn the message from a (possibly null) event */\n    protected final MuleMessage getMessage(MuleEvent event)\n    {\n        return event == null ? null : event.getMessage();\n    }","id":103575,"modified_method":"/** @eturn the message from a (possibly null) event */\n    protected static MuleMessage getMessage(MuleEvent event)\n    {\n        return event == null ? null : event.getMessage();\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"/** @eturn a possible null event created to hold a possible null message */\n    protected final MuleEvent createEvent(MuleMessage message, MuleEvent previous)\n    {\n        return message == null ? null : new DefaultMuleEvent(message, previous);\n    }","id":103576,"modified_method":"/** @eturn a possible null event created to hold a possible null message */\n    protected static MuleEvent createEvent(MuleMessage message, MuleEvent previous)\n    {\n        return message == null ? null : new DefaultMuleEvent(message, previous);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleEvent route(MuleEvent event)\n        throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        List recipients = this.getRecipients(message);\n        List results = new ArrayList();\n        \n        if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n        {\n            boolean correlationSet = message.getCorrelationGroupSize() != -1;\n            if (correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n            {\n                logger.debug(\"CorrelationId is already set, not setting Correlation group size\");\n            }\n            else\n            {\n                // the correlationId will be set by the AbstractOutboundRouter\n                message.setCorrelationGroupSize(recipients.size());\n            }\n        }\n\n        MuleMessage result;\n        OutboundEndpoint endpoint;\n        MuleMessage request;\n\n        for (Iterator iterator = recipients.iterator(); iterator.hasNext();)\n        {\n            Object recipient = iterator.next();\n            // Make a copy of the message. Question is do we do a proper clone? in\n            // which case there\n            // would potentially be multiple messages with the same id...\n            request = new DefaultMuleMessage(message.getPayload(), message, muleContext);\n            endpoint = getRecipientEndpoint(request, recipient);\n\n            boolean sync = (this.synchronous==null ? endpoint.isSynchronous() : this.synchronous.booleanValue());\n            try\n            {\n                if (sync)\n                {\n                    results.add(getMessage(sendRequest(session, request, endpoint, true)));\n                }\n                else\n                {\n                    sendRequest(session, request, endpoint, false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(request, endpoint, e);\n            }\n        }\n\n        return createEvent(resultsHandler.aggregateResults(results, message, muleContext), event);\n    }","id":103577,"modified_method":"public MuleEvent route(MuleEvent event)\n        throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        List recipients = this.getRecipients(message);\n        List<MuleEvent> results = new ArrayList<MuleEvent>();\n        \n        if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n        {\n            boolean correlationSet = message.getCorrelationGroupSize() != -1;\n            if (correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n            {\n                logger.debug(\"CorrelationId is already set, not setting Correlation group size\");\n            }\n            else\n            {\n                // the correlationId will be set by the AbstractOutboundRouter\n                message.setCorrelationGroupSize(recipients.size());\n            }\n        }\n\n        MuleMessage result;\n        OutboundEndpoint endpoint;\n        MuleMessage request;\n\n        for (Iterator iterator = recipients.iterator(); iterator.hasNext();)\n        {\n            Object recipient = iterator.next();\n            // Make a copy of the message. Question is do we do a proper clone? in\n            // which case there\n            // would potentially be multiple messages with the same id...\n            request = new DefaultMuleMessage(message.getPayload(), message, muleContext);\n            endpoint = getRecipientEndpoint(request, recipient);\n\n            boolean sync = (this.synchronous==null ? endpoint.isSynchronous() : this.synchronous.booleanValue());\n            try\n            {\n                if (sync)\n                {\n                    results.add(sendRequest(session, request, endpoint, true));\n                }\n                else\n                {\n                    sendRequest(session, request, endpoint, false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(request, endpoint, e);\n            }\n        }\n\n        return resultsHandler.aggregateResults(results, muleContext, event);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleMessage aggregateResults(List<MuleMessage> results, MuleMessage orginalMessage, MuleContext muleContext)\n    {\n        if (results == null || results.size() == 0)\n        {\n            return null;\n        }\n        else if (results.size() == 1)\n        {\n            return results.get(0);\n        }\n        else\n        {\n            MuleMessageCollection coll = new DefaultMessageCollection(muleContext);\n            for (Iterator<MuleMessage> iterator = results.iterator(); iterator.hasNext();)\n            {\n                MuleMessage muleMessage = iterator.next();\n                if(muleMessage!=null)\n                {\n                    coll.addMessage(muleMessage);\n                }\n            }\n            return coll;\n        }\n    }","id":103578,"modified_method":"public MuleEvent aggregateResults(List<MuleEvent> results, MuleContext muleContext, MuleEvent previous)\n    {\n        MuleMessage aggregate;\n\n        if (results == null || results.size() == 0)\n        {\n            aggregate = null;\n        }\n        else if (results.size() == 1)\n        {\n            aggregate = AbstractOutboundRouter.getMessage(results.get(0));\n        }\n        else\n        {\n            MuleMessageCollection coll = new DefaultMessageCollection(muleContext);\n            for (MuleEvent event : results)\n            {\n                MuleMessage muleMessage = AbstractOutboundRouter.getMessage(event);\n                if(muleMessage!=null)\n                {\n                    coll.addMessage(muleMessage);\n                }\n            }\n            aggregate = coll;\n        }\n\n        return AbstractOutboundRouter.createEvent(aggregate, previous);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        List<Object> endpoints;\n        String endpointName;\n\n        String prop = expressionConfig.getFullExpression(expressionManager);\n        if (!muleContext.getExpressionManager().isValidExpression(prop))\n        {\n            throw new CouldNotRouteOutboundMessageException(\n                    CoreMessages.expressionInvalidForProperty(\"expression\", prop), message, null);\n        }\n\n        Object property = null;\n        try\n        {\n            property = muleContext.getExpressionManager().evaluate(prop, message);\n        }\n        catch (ExpressionRuntimeException e)\n        {\n            logger.error(e.getMessage());\n        }\n        \n        if (property == null && getDefaultEndpointName() == null)\n        {\n            throw new CouldNotRouteOutboundMessageException(\n                    CoreMessages.expressionResultWasNull(expressionConfig.getFullExpression(expressionManager)), message, null);\n        }\n        else if(property==null)\n        {\n            logger.info(\"Expression: \" + prop + \" returned null, using default endpoint: \" + getDefaultEndpointName());\n            property = getDefaultEndpointName();\n        }\n\n        if (property instanceof String)\n        {\n            endpoints = new ArrayList<Object>(1);\n            endpoints.add(property);\n        }\n        else if (property instanceof List)\n        {\n            endpoints = (List<Object>) property;\n        }\n        else\n        {\n            throw new CouldNotRouteOutboundMessageException(CoreMessages.propertyIsNotSupportedType(\n                    expressionConfig.getFullExpression(expressionManager), new Class[]{String.class, List.class}, property.getClass()), message, null);\n        }\n\n        List<MuleMessage> results = new ArrayList<MuleMessage>(endpoints.size());\n\n        for (Iterator<Object> iterator = endpoints.iterator(); iterator.hasNext();)\n        {\n            endpointName = iterator.next().toString();\n\n            if (StringUtils.isEmpty(endpointName))\n            {\n                throw new CouldNotRouteOutboundMessageException(\n                        CoreMessages.objectIsNull(\"Endpoint Name: \" + expressionConfig.getFullExpression(expressionManager)), message, null);\n            }\n            OutboundEndpoint ep = null;\n            try\n            {\n                ep = lookupEndpoint(endpointName);\n                if (ep == null)\n                {\n                    throw new CouldNotRouteOutboundMessageException(CoreMessages.objectNotFound(\"Endpoint\",\n                            endpointName), message, ep);\n                }\n                if (ep.isSynchronous())\n                {\n                    results.add(getMessage(sendRequest(session, message, ep, true)));\n                }\n                else\n                {\n                    sendRequest(session, message, ep, false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(message, ep, e);\n            }\n        }\n        return createEvent(resultsHandler.aggregateResults(results, message, muleContext), event);\n    }","id":103579,"modified_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n\n        List<Object> endpoints;\n        String endpointName;\n\n        String prop = expressionConfig.getFullExpression(expressionManager);\n        if (!muleContext.getExpressionManager().isValidExpression(prop))\n        {\n            throw new CouldNotRouteOutboundMessageException(\n                    CoreMessages.expressionInvalidForProperty(\"expression\", prop), message, null);\n        }\n\n        Object property = null;\n        try\n        {\n            property = muleContext.getExpressionManager().evaluate(prop, message);\n        }\n        catch (ExpressionRuntimeException e)\n        {\n            logger.error(e.getMessage());\n        }\n        \n        if (property == null && getDefaultEndpointName() == null)\n        {\n            throw new CouldNotRouteOutboundMessageException(\n                    CoreMessages.expressionResultWasNull(expressionConfig.getFullExpression(expressionManager)), message, null);\n        }\n        else if(property==null)\n        {\n            logger.info(\"Expression: \" + prop + \" returned null, using default endpoint: \" + getDefaultEndpointName());\n            property = getDefaultEndpointName();\n        }\n\n        if (property instanceof String)\n        {\n            endpoints = new ArrayList<Object>(1);\n            endpoints.add(property);\n        }\n        else if (property instanceof List)\n        {\n            endpoints = (List<Object>) property;\n        }\n        else\n        {\n            throw new CouldNotRouteOutboundMessageException(CoreMessages.propertyIsNotSupportedType(\n                    expressionConfig.getFullExpression(expressionManager), new Class[]{String.class, List.class}, property.getClass()), message, null);\n        }\n\n        List<MuleEvent> results = new ArrayList<MuleEvent>(endpoints.size());\n\n        for (Iterator<Object> iterator = endpoints.iterator(); iterator.hasNext();)\n        {\n            endpointName = iterator.next().toString();\n\n            if (StringUtils.isEmpty(endpointName))\n            {\n                throw new CouldNotRouteOutboundMessageException(\n                        CoreMessages.objectIsNull(\"Endpoint Name: \" + expressionConfig.getFullExpression(expressionManager)), message, null);\n            }\n            OutboundEndpoint ep = null;\n            try\n            {\n                ep = lookupEndpoint(endpointName);\n                if (ep == null)\n                {\n                    throw new CouldNotRouteOutboundMessageException(CoreMessages.objectNotFound(\"Endpoint\",\n                            endpointName), message, ep);\n                }\n                if (ep.isSynchronous())\n                {\n                    results.add(sendRequest(session, message, ep, true));\n                }\n                else\n                {\n                    sendRequest(session, message, ep, false);\n                }\n            }\n            catch (MuleException e)\n            {\n                throw new CouldNotRouteOutboundMessageException(message, ep, e);\n            }\n        }\n        return resultsHandler.aggregateResults(results, muleContext, event);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * The first endpoint contains exception payload in return message, second\n     * succeeds. Events are being sent synchronously.\n     */\n    public void testFirstHadExceptionPayloadSuccessSecondSyncWithExceptionPayload() throws Exception\n    {\n        Mock mockSession = MuleTestUtils.getMockSession();\n        mockSession.matchAndReturn(\"getFlowConstruct\", getTestService());\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"TestFailEndpoint\", \"test://Failure?exchange-pattern=request-response\");\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"TestSuccessEndpoint\", \"test://Success?exchange-pattern=request-response\");\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n        ExceptionBasedRouter router = new ExceptionBasedRouter();\n        router.setMuleContext(muleContext);\n        router.addEndpoint((OutboundEndpoint) mockendpoint1.proxy());\n        router.addEndpoint((OutboundEndpoint) mockendpoint2.proxy());\n\n        MuleMessage message = new DefaultMuleMessage(\"test event\", muleContext);\n        MuleMessage expectedResultMessage = new DefaultMuleMessage(\"Return event\", muleContext);\n        MuleEvent expectedResultEvent = new OutboundRoutingTestEvent(expectedResultMessage, null);\n\n\n        assertTrue(router.isMatch(message));\n\n        // remote endpoint failed and set an exception payload on the returned\n        // message\n        MuleMessage exPayloadMessage = new DefaultMuleMessage(\"there was a failure\", muleContext);\n        exPayloadMessage.setExceptionPayload(new DefaultExceptionPayload(new RuntimeException()));\n        MuleEvent exPayloadMessageEvent = new OutboundRoutingTestEvent(exPayloadMessage, null);\n\n\n        final MuleSession session = (MuleSession)mockSession.proxy();\n        // 1st failure\n        mockendpoint1.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), exPayloadMessage);\n        // next endpoint\n        mockendpoint2.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), expectedResultEvent);\n        MuleEvent actualResult = router.route(new OutboundRoutingTestEvent(message, session));\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n\n        assertEquals(\"Got an invalid return message.\", expectedResultMessage, actualResult.getMessage());\n    }","id":103580,"modified_method":"/**\n     * The first endpoint contains exception payload in return message, second\n     * succeeds. Events are being sent synchronously.\n     */\n    public void testFirstHadExceptionPayloadSuccessSecondSyncWithExceptionPayload() throws Exception\n    {\n        Mock mockSession = MuleTestUtils.getMockSession();\n        mockSession.matchAndReturn(\"getFlowConstruct\", getTestService());\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"TestFailEndpoint\", \"test://Failure?exchange-pattern=request-response\");\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"TestSuccessEndpoint\", \"test://Success?exchange-pattern=request-response\");\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n        ExceptionBasedRouter router = new ExceptionBasedRouter();\n        router.setMuleContext(muleContext);\n        router.addEndpoint((OutboundEndpoint) mockendpoint1.proxy());\n        router.addEndpoint((OutboundEndpoint) mockendpoint2.proxy());\n\n        MuleMessage message = new DefaultMuleMessage(\"test event\", muleContext);\n        MuleMessage expectedResultMessage = new DefaultMuleMessage(\"Return event\", muleContext);\n        MuleEvent expectedResultEvent = new OutboundRoutingTestEvent(expectedResultMessage, null);\n\n\n        assertTrue(router.isMatch(message));\n\n        // remote endpoint failed and set an exception payload on the returned\n        // message\n        MuleMessage exPayloadMessage = new DefaultMuleMessage(\"there was a failure\", muleContext);\n        exPayloadMessage.setExceptionPayload(new DefaultExceptionPayload(new RuntimeException()));\n        MuleEvent exPayloadMessageEvent = new OutboundRoutingTestEvent(exPayloadMessage, null);\n\n\n        final MuleSession session = (MuleSession)mockSession.proxy();\n        // 1st failure\n        mockendpoint1.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), exPayloadMessageEvent);\n        // next endpoint\n        mockendpoint2.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), expectedResultEvent);\n        MuleEvent actualResult = router.route(new OutboundRoutingTestEvent(message, session));\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n\n        assertEquals(\"Got an invalid return message.\", expectedResultMessage, actualResult.getMessage());\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * The first endpoint fails, second succeeds. Events are being forced into a sync\n     * mode, until we reach the last one.\n     */\n    public void testFailFirstSuccessSecondAsync() throws Exception\n    {\n        Mock mockSession = MuleTestUtils.getMockSession();\n        mockSession.matchAndReturn(\"getFlowConstruct\", getTestService());\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"TestFailEndpoint\", \"test://Failure?exchange-pattern=request-response\");\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"TestSuccessEndpoint\", \"test://Success?exchange-pattern=request-response\");\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n\n        ExceptionBasedRouter router = new ExceptionBasedRouter();\n        router.setMuleContext(muleContext);\n        router.addEndpoint((OutboundEndpoint) mockendpoint1.proxy());\n        router.addEndpoint((OutboundEndpoint) mockendpoint2.proxy());\n\n        MuleMessage message = new DefaultMuleMessage(\"test event\", muleContext);\n        MuleMessage expectedResultMessage = new DefaultMuleMessage(\"Return event\", muleContext);\n        MuleEvent event = new OutboundRoutingTestEvent(expectedResultMessage, null);\n\n\n        assertTrue(router.isMatch(message));\n\n        final MuleSession session = (MuleSession)mockSession.proxy();\n        // exception to throw\n        MuleException rex = new RoutingException(message, endpoint1);\n\n        mockendpoint1.expectAndThrow(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), rex);\n        mockendpoint2.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), event);\n        MuleEvent actualResult = router.route(new OutboundRoutingTestEvent(message, session));\n        assertNull(\"Async call should not return any results.\", actualResult);\n\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n\n    }","id":103581,"modified_method":"/**\n     * The first endpoint fails, second succeeds. Events are being forced into a sync\n     * mode, until we reach the last one.\n     */\n    public void testFailFirstSuccessSecondAsync() throws Exception\n    {\n        Mock mockSession = MuleTestUtils.getMockSession();\n        mockSession.matchAndReturn(\"getFlowConstruct\", getTestService());\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"TestFailEndpoint\", \"test://Failure?exchange-pattern=request-response\");\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"TestSuccessEndpoint\", \"test://Success?exchange-pattern=one-way\");\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n\n        ExceptionBasedRouter router = new ExceptionBasedRouter();\n        router.setMuleContext(muleContext);\n        router.addEndpoint((OutboundEndpoint) mockendpoint1.proxy());\n        router.addEndpoint((OutboundEndpoint) mockendpoint2.proxy());\n\n        MuleMessage message = new DefaultMuleMessage(\"test event\", muleContext);\n        MuleMessage expectedResultMessage = new DefaultMuleMessage(\"Return event\", muleContext);\n        MuleEvent event = new OutboundRoutingTestEvent(expectedResultMessage, null);\n\n\n        assertTrue(router.isMatch(message));\n\n        final MuleSession session = (MuleSession)mockSession.proxy();\n        // exception to throw\n        MuleException rex = new RoutingException(message, endpoint1);\n\n        mockendpoint1.expectAndThrow(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), rex);\n        mockendpoint2.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), event);\n        MuleEvent actualResult = router.route(new OutboundRoutingTestEvent(message, session));\n        assertNull(\"Async call should not return any results.\", actualResult);\n\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n        if (endpoints == null || endpoints.size() == 0)\n        {\n            throw new RoutePathNotFoundException(CoreMessages.noEndpointsForRouter(), message, null);\n        }\n        if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n        {\n            boolean correlationSet = message.getCorrelationId() != null;\n            if (correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n            {\n                logger.debug(\"CorrelationId is already set, not setting Correlation group size\");\n            }\n            else\n            {\n                // the correlationId will be set by the AbstractOutboundRouter\n                message.setCorrelationGroupSize(endpoints.size());\n            }\n        }\n\n        List results = new ArrayList(endpoints.size());\n        try\n        {\n            OutboundEndpoint endpoint;\n            for (int i = 0; i < endpoints.size(); i++)\n            {\n                endpoint = endpoints.get(i);\n                if(endpoint.getFilter()==null || (endpoint.getFilter()!=null && endpoint.getFilter().accept(message)))\n                {\n                    if (((DefaultMuleMessage) message).isConsumable())\n                    {\n                        throw new MessagingException(\n                            CoreMessages.cannotCopyStreamPayload(message.getPayload().getClass().getName()),\n                            message);\n                    }\n                    \n                    MuleMessage clonedMessage = new DefaultMuleMessage(message.getPayload(), \n                        message, muleContext);\n                    if (endpoint.isSynchronous())\n                    {\n                        results.add(getMessage(sendRequest(session, clonedMessage, endpoint, true)));\n                    }\n                    else\n                    {\n                        sendRequest(session, clonedMessage, endpoint, false);\n                    }\n                }\n            }\n        }\n        catch (MuleException e)\n        {\n            throw new CouldNotRouteOutboundMessageException(message, endpoints.get(0), e);\n        }\n        return createEvent(resultsHandler.aggregateResults(results, message, muleContext), event);\n    }","id":103582,"modified_method":"@Override\n    public MuleEvent route(MuleEvent event) throws RoutingException\n    {\n        MuleMessage message = event.getMessage();\n        MuleSession session = event.getSession();\n        if (endpoints == null || endpoints.size() == 0)\n        {\n            throw new RoutePathNotFoundException(CoreMessages.noEndpointsForRouter(), message, null);\n        }\n        if (enableCorrelation != ENABLE_CORRELATION_NEVER)\n        {\n            boolean correlationSet = message.getCorrelationId() != null;\n            if (correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET))\n            {\n                logger.debug(\"CorrelationId is already set, not setting Correlation group size\");\n            }\n            else\n            {\n                // the correlationId will be set by the AbstractOutboundRouter\n                message.setCorrelationGroupSize(endpoints.size());\n            }\n        }\n\n        List<MuleEvent> results = new ArrayList<MuleEvent>(endpoints.size());\n        try\n        {\n            OutboundEndpoint endpoint;\n            for (int i = 0; i < endpoints.size(); i++)\n            {\n                endpoint = endpoints.get(i);\n                if(endpoint.getFilter()==null || (endpoint.getFilter()!=null && endpoint.getFilter().accept(message)))\n                {\n                    if (((DefaultMuleMessage) message).isConsumable())\n                    {\n                        throw new MessagingException(\n                            CoreMessages.cannotCopyStreamPayload(message.getPayload().getClass().getName()),\n                            message);\n                    }\n                    \n                    MuleMessage clonedMessage = new DefaultMuleMessage(message.getPayload(), \n                        message, muleContext);\n                    if (endpoint.isSynchronous())\n                    {\n                        results.add(sendRequest(session, clonedMessage, endpoint, true));\n                    }\n                    else\n                    {\n                        sendRequest(session, clonedMessage, endpoint, false);\n                    }\n                }\n            }\n        }\n        catch (MuleException e)\n        {\n            throw new CouldNotRouteOutboundMessageException(message, endpoints.get(0), e);\n        }\n        return resultsHandler.aggregateResults(results, muleContext, event);\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testMulticastingRouterMixedSyncAsync() throws Exception\n    {\n        Mock session = MuleTestUtils.getMockSession();\n        session.matchAndReturn(\"getFlowConstruct\", getTestService());\n        session.matchAndReturn(\"setFlowConstruct\", RouterTestUtils.getArgListCheckerFlowConstruct(), null);\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"Test1Provider\", \"test://Test1Provider?exchange-pattern=request-response\");\n        assertNotNull(endpoint1);\n\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"Test2Provider\", \"test://Test2Provider?exchange-pattern=request-response\");\n        assertNotNull(endpoint2);\n\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n\n        MulticastingRouter router = createObject(MulticastingRouter.class);\n        \n        List<OutboundEndpoint> endpoints = new ArrayList<OutboundEndpoint>();\n        endpoints.add((OutboundEndpoint) mockendpoint1.proxy());\n        endpoints.add((OutboundEndpoint) mockendpoint2.proxy());\n        router.setEndpoints(endpoints);\n\n\n        MuleMessage message = new DefaultMuleMessage(TEST_MESSAGE, muleContext);\n\n        assertTrue(router.isMatch(message));\n        MuleEvent event = new OutboundRoutingTestEvent(message, null);\n\n        mockendpoint1.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), event);\n        mockendpoint2.expect(\"process\", RouterTestUtils.getArgListCheckerMuleEvent());\n        MuleEvent result = router.route(new OutboundRoutingTestEvent(message, (MuleSession)session.proxy()));\n        assertNotNull(result);\n        assertEquals(message, result.getMessage());\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n    }","id":103583,"modified_method":"public void testMulticastingRouterMixedSyncAsync() throws Exception\n    {\n        Mock session = MuleTestUtils.getMockSession();\n        session.matchAndReturn(\"getFlowConstruct\", getTestService());\n        session.matchAndReturn(\"setFlowConstruct\", RouterTestUtils.getArgListCheckerFlowConstruct(), null);\n\n        OutboundEndpoint endpoint1 = getTestOutboundEndpoint(\"Test1Provider\", \"test://Test1Provider?exchange-pattern=request-response\");\n        assertNotNull(endpoint1);\n\n        OutboundEndpoint endpoint2 = getTestOutboundEndpoint(\"Test2Provider\", \"test://Test2Provider?exchange-pattern=request-response\");\n        assertNotNull(endpoint2);\n\n        Mock mockendpoint1 = RouterTestUtils.getMockEndpoint(endpoint1);\n        Mock mockendpoint2 = RouterTestUtils.getMockEndpoint(endpoint2);\n\n        MulticastingRouter router = createObject(MulticastingRouter.class);\n        \n        List<OutboundEndpoint> endpoints = new ArrayList<OutboundEndpoint>();\n        endpoints.add((OutboundEndpoint) mockendpoint1.proxy());\n        endpoints.add((OutboundEndpoint) mockendpoint2.proxy());\n        router.setEndpoints(endpoints);\n\n\n        MuleMessage message = new DefaultMuleMessage(TEST_MESSAGE, muleContext);\n\n        assertTrue(router.isMatch(message));\n        MuleEvent event = new OutboundRoutingTestEvent(message, null);\n\n        mockendpoint1.expectAndReturn(\"process\", RouterTestUtils.getArgListCheckerMuleEvent(), event);\n        mockendpoint2.expect(\"process\", RouterTestUtils.getArgListCheckerMuleEvent());\n        MuleEvent result = router.route(new OutboundRoutingTestEvent(message, (MuleSession)session.proxy()));\n        assertNotNull(result);\n        assertEquals(getPayload(message), getPayload(result.getMessage()));\n        mockendpoint1.verify();\n        mockendpoint2.verify();\n    }","commit_id":"6e61bc18cfe8ff0009c28c753c824ab3671a2df3","url":"https://github.com/mulesoft/mule"},{"original_method":"public String toString() {\n        StringBuffer buff = new StringBuffer(\"AgentConfig[\");\n        buff.append(\"Address: \" + InetAddressUtils.str(m_address));\n        buff.append(\", ProxyForAddress: \" + InetAddressUtils.str(m_proxyFor));\n        buff.append(\", Port: \" + getPort());\n        buff.append(\", Community: \" + getReadCommunity());\n        buff.append(\", Timeout: \" + getTimeout());\n        buff.append(\", Retries: \" + getRetries());\n        buff.append(\", MaxVarsPerPdu: \" + getMaxVarsPerPdu());\n        buff.append(\", MaxRepetitions: \" + getMaxRepetitions());\n        buff.append(\", Max request size: \" + getMaxRequestSize());\n        buff.append(\", Version: \" + versionToString(getVersion()));\n        if (getVersion() == VERSION3) {\n            buff.append(\", Security level: \" + getSecurityLevel());\n            buff.append(\", Security name: \" + getSecurityName());\n            buff.append(\", auth-passphrase: \" + getAuthPassPhrase());\n            buff.append(\", auth-protocol: \" + getAuthProtocol());\n            buff.append(\", priv-passprhase: \" + getPrivPassPhrase());\n            buff.append(\", priv-protocol: \" + getPrivProtocol());\n        }\n        buff.append(\"]\");\n        return buff.toString();\n    }","id":103584,"modified_method":"public String toString() {\n        StringBuffer buff = new StringBuffer(\"AgentConfig[\");\n        buff.append(\"Address: \" + m_address == null? null : InetAddressUtils.str(m_address));\n        buff.append(\", ProxyForAddress: \" + m_proxyFor == null? null : InetAddressUtils.str(m_proxyFor));\n        buff.append(\", Port: \" + getPort());\n        buff.append(\", Community: \" + getReadCommunity());\n        buff.append(\", Timeout: \" + getTimeout());\n        buff.append(\", Retries: \" + getRetries());\n        buff.append(\", MaxVarsPerPdu: \" + getMaxVarsPerPdu());\n        buff.append(\", MaxRepetitions: \" + getMaxRepetitions());\n        buff.append(\", Max request size: \" + getMaxRequestSize());\n        buff.append(\", Version: \" + versionToString(getVersion()));\n        if (getVersion() == VERSION3) {\n            buff.append(\", Security level: \" + getSecurityLevel());\n            buff.append(\", Security name: \" + getSecurityName());\n            buff.append(\", auth-passphrase: \" + getAuthPassPhrase());\n            buff.append(\", auth-protocol: \" + getAuthProtocol());\n            buff.append(\", priv-passprhase: \" + getPrivPassPhrase());\n            buff.append(\", priv-protocol: \" + getPrivProtocol());\n        }\n        buff.append(\"]\");\n        return buff.toString();\n    }","commit_id":"dd993acf2802537bc07f941dce433ee3ae03ef48","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public String toProtocolConfigString() {\n        StringBuffer buff = new StringBuffer(\"snmp:\");\n        buff.append(\"address=\" + InetAddressUtils.str(m_address));\n        buff.append(\",port=\" + getPort());\n        buff.append(\",timeout=\" + getTimeout());\n        buff.append(\",retries=\" + getRetries());\n        buff.append(\",max-vars-per-pdu=\" + getMaxVarsPerPdu());\n        buff.append(\",max-repetitions=\" + getMaxRepetitions());\n        buff.append(\",max-request-size=\" + getMaxRequestSize());\n        buff.append(\",version=\" + versionToString(getVersion()));\n        if (getVersion() == VERSION3) {\n            buff.append(\",security-level=\" + getSecurityLevel());\n            buff.append(\",security-name=\" + getSecurityName());\n            buff.append(\",auth-passphrase=\" + getAuthPassPhrase());\n            buff.append(\",auth-protocol=\" + getAuthProtocol());\n            buff.append(\",priv-passprhase=\" + getPrivPassPhrase());\n            buff.append(\",priv-protocol=\" + getPrivProtocol());\n        } else {\n            buff.append(\",read-community=\" + getReadCommunity());\n        }\n        return buff.toString();\n\n    }","id":103585,"modified_method":"public String toProtocolConfigString() {\n        StringBuffer buff = new StringBuffer(\"snmp:\");\n        buff.append(\"address=\" + address == null? null : InetAddressUtils.str(m_address));\n        buff.append(\",port=\" + getPort());\n        buff.append(\",timeout=\" + getTimeout());\n        buff.append(\",retries=\" + getRetries());\n        buff.append(\",max-vars-per-pdu=\" + getMaxVarsPerPdu());\n        buff.append(\",max-repetitions=\" + getMaxRepetitions());\n        buff.append(\",max-request-size=\" + getMaxRequestSize());\n        buff.append(\",version=\" + versionToString(getVersion()));\n        if (getVersion() == VERSION3) {\n            buff.append(\",security-level=\" + getSecurityLevel());\n            buff.append(\",security-name=\" + getSecurityName());\n            buff.append(\",auth-passphrase=\" + getAuthPassPhrase());\n            buff.append(\",auth-protocol=\" + getAuthProtocol());\n            buff.append(\",priv-passprhase=\" + getPrivPassPhrase());\n            buff.append(\",priv-protocol=\" + getPrivProtocol());\n        } else {\n            buff.append(\",read-community=\" + getReadCommunity());\n        }\n        return buff.toString();\n\n    }","commit_id":"dd993acf2802537bc07f941dce433ee3ae03ef48","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\r\n\tpublic void println(final Object obj) {\r\n\t\tlogger.info(obj.toString());\r\n\t}","id":103586,"modified_method":"@Override\r\n\tpublic void println(final Object obj) {\r\n\t\tif (obj == null)\r\n\t\t\tlogger.info(\"null\");\r\n\t\telse\r\n\t\t\tlogger.info(obj.toString());\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","id":103587,"modified_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, false);\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tif (!noWebServices) {\r\n    \t\t\tconnectionLogs.supressConnectionErrors();\r\n    \t\t\ttry {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\t//assuming eager mode, PU installs on this even if already installed\r\n    \t\t\t\tif (waitForWebUi) {\r\n        \t\t\t\twebuiInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t} else {\r\n    \t\t\t\t    // log an estimation of the Webui URL\r\n    \t\t\t\t    webuiInstaller.logServiceLocation();\r\n    \t\t\t\t}\r\n    \t\t\t\tURL restUrl = restInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t    \t\t\t\t\r\n    \t\t\t\twaitForConnection(restUrl, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t} finally {\r\n    \t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n    \t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","id":103588,"modified_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit, boolean isLocalCloud) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tList<AbstractManagementServiceInstaller> waitForManagementServices = new LinkedList<AbstractManagementServiceInstaller>();\r\n\t\t\t\r\n\t\t\tconnectionLogs.supressConnectionErrors();\r\n\t\t\ttry {\r\n\t\t\t\tif (!noWebServices) {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();    \t\t\t\t\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();    \t\t\t\t\t\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\tif (waitForWebUi)\r\n        \t\t\t\twaitForManagementServices.add(webuiInstaller);\r\n    \t\t\t\telse\r\n    \t\t\t\t\twebuiInstaller.logServiceLocation();\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\trestInstaller.setWaitForConnection();\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\twaitForManagementServices.add(restInstaller);\r\n    \t\t\t\t\r\n    \t\t\t} \r\n\t\t\t\tif (!noManagementSpace) {\r\n\t\t\t\t\tfinal boolean highlyAvailable = !isLocalCloud;\r\n\t\t\t\t\tManagementSpaceServiceInstaller managementSpaceInstaller = new ManagementSpaceServiceInstaller();\r\n\t\t\t\t\tmanagementSpaceInstaller.setAdmin(agent.getAdmin());\r\n\t\t\t\t\tmanagementSpaceInstaller.setVerbose(verbose);\r\n\t\t\t\t\tmanagementSpaceInstaller.setMemory(MANAGEMENT_SPACE_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n\t\t\t\t\tmanagementSpaceInstaller.setServiceName(MANAGEMENT_SPACE_NAME);\r\n\t\t\t\t\tmanagementSpaceInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\t\t\tmanagementSpaceInstaller.setHighlyAvailable(highlyAvailable);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\tmanagementSpaceInstaller.install();\r\n    \t\t\t\t\twaitForManagementServices.add(managementSpaceInstaller);\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + MANAGEMENT_SPACE_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (AbstractManagementServiceInstaller managementServiceInstaller : waitForManagementServices) {\r\n\t\t\t\t\tmanagementServiceInstaller.waitForInstallation(adminFacade, agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","id":103589,"modified_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, true);\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Properties getContextProperties() {\r\n\t\tProperties props = new Properties();\r\n\t\tprops.put(\"com.gs.application\", MANAGEMENT_APPLICATION_NAME);\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","id":103590,"modified_method":"@Override\r\n\tprotected Properties getContextProperties() {\r\n    \tProperties props = super.getContextProperties();\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void initInIntegratedContainer(final Service service,\r\n\t\t\tfinal String dir) {\r\n\t\tthis.service = service;\r\n\t\tthis.serviceDirectory = dir;\r\n\t\tthis.clusterInfo = new ClusterInfo(null, 1, 0, 1, 0);\r\n\t\tif (service != null) {\r\n\t\t\tthis.clusterInfo.setName(service.getName());\r\n\t\t}\r\n\r\n\t\tthis.applicationName = CloudifyConstants.DEFAULT_APPLICATION_NAME;\r\n\t\tthis.serviceName = service.getName();\r\n\r\n\t\tinitialized = true;\r\n\r\n\t}","id":103591,"modified_method":"public void initInIntegratedContainer(final Service service,\r\n\t\t\tfinal String dir) {\r\n\t\tthis.service = service;\r\n\t\tthis.serviceDirectory = dir;\r\n\t\tthis.clusterInfo = new ClusterInfo(null, 1, 0, 1, 0);\r\n\t\tif (service != null) {\r\n\t\t\tthis.clusterInfo.setName(service.getName());\r\n\t\t}\r\n\r\n\t\tthis.applicationName = CloudifyConstants.DEFAULT_APPLICATION_NAME;\r\n\t\tthis.serviceName = service.getName();\r\n\r\n\t\tthis.attributesFacade = new AttributesFacade(this, admin);\r\n\t\tinitialized = true;\r\n\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void init(final Service service, final Admin admin,\r\n\t\t\tfinal String dir, ClusterInfo clusterInfo) {\r\n\t\tthis.service = service;\r\n\t\tthis.admin = admin;\r\n\t\tthis.serviceDirectory = dir;\r\n\t\tthis.clusterInfo = clusterInfo;\r\n\r\n\t\tif (clusterInfo == null) {\r\n\t\t\tthis.applicationName = CloudifyConstants.DEFAULT_APPLICATION_NAME;\r\n\t\t\tthis.serviceName = service.getName();\r\n\t\t} else {\r\n\t\t\tlogger.info(\"Parsing full service name from PU name: \"\r\n\t\t\t\t\t+ clusterInfo.getName());\r\n\t\t\tFullServiceName fullServiceName = ServiceUtils\r\n\t\t\t\t\t.getFullServiceName(clusterInfo.getName());\r\n\t\t\tlogger.info(\"Got full service name: \" + fullServiceName);\r\n\t\t\tthis.serviceName = fullServiceName.getServiceName();\r\n\t\t\tthis.applicationName = fullServiceName.getApplicationName();\r\n\r\n\t\t}\r\n\t\tif (admin != null) {\r\n\t\t\tboolean found = this.admin.getLookupServices().waitFor(1, 30,\r\n\t\t\t\t\tTimeUnit.SECONDS);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new AdminException(\r\n\t\t\t\t\t\t\"A service context could not be created as the Admin API could not find a lookup service in the network, using groups: \"\r\n\t\t\t\t\t\t\t\t+ Arrays.toString(admin.getGroups())\r\n\t\t\t\t\t\t\t\t+ \" and locators: \"\r\n\t\t\t\t\t\t\t\t+ Arrays.toString(admin.getLocators()));\r\n\t\t\t}\r\n\t\t}\r\n\t\tinitialized = true;\r\n\r\n\t}","id":103592,"modified_method":"public void init(final Service service, final Admin admin,\r\n\t\t\tfinal String dir, ClusterInfo clusterInfo) {\r\n\t\tthis.service = service;\r\n\t\tthis.admin = admin;\r\n\t\tthis.serviceDirectory = dir;\r\n\t\tthis.clusterInfo = clusterInfo;\r\n\r\n\t\tif (clusterInfo == null) {\r\n\t\t\tthis.applicationName = CloudifyConstants.DEFAULT_APPLICATION_NAME;\r\n\t\t\tthis.serviceName = service.getName();\r\n\t\t} else {\r\n\t\t\tlogger.info(\"Parsing full service name from PU name: \"\r\n\t\t\t\t\t+ clusterInfo.getName());\r\n\t\t\tFullServiceName fullServiceName = ServiceUtils\r\n\t\t\t\t\t.getFullServiceName(clusterInfo.getName());\r\n\t\t\tlogger.info(\"Got full service name: \" + fullServiceName);\r\n\t\t\tthis.serviceName = fullServiceName.getServiceName();\r\n\t\t\tthis.applicationName = fullServiceName.getApplicationName();\r\n\r\n\t\t}\r\n\t\tif (admin != null) {\r\n\t\t\tboolean found = this.admin.getLookupServices().waitFor(1, 30,\r\n\t\t\t\t\tTimeUnit.SECONDS);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new AdminException(\r\n\t\t\t\t\t\t\"A service context could not be created as the Admin API could not find a lookup service in the network, using groups: \"\r\n\t\t\t\t\t\t\t\t+ Arrays.toString(admin.getGroups())\r\n\t\t\t\t\t\t\t\t+ \" and locators: \"\r\n\t\t\t\t\t\t\t\t+ Arrays.toString(admin.getLocators()));\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.attributesFacade = new AttributesFacade(this, admin);\r\n\t\tinitialized = true;\r\n\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","id":103593,"modified_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setNoManagementSpace(noManagementSpace);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","commit_id":"96e650ecd6e4094b314143ad1c2ba0abf528bb99","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tif (!noWebServices) {\r\n    \t\t\tconnectionLogs.supressConnectionErrors();\r\n    \t\t\ttry {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\t//assuming eager mode, PU installs on this even if already installed\r\n    \t\t\t\tif (waitForWebUi) {\r\n        \t\t\t\twebuiInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t} else {\r\n    \t\t\t\t    // log an estimation of the Webui URL\r\n    \t\t\t\t    webuiInstaller.logServiceLocation();\r\n    \t\t\t\t}\r\n    \t\t\t\tURL restUrl = restInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t    \t\t\t\t\r\n    \t\t\t\twaitForConnection(restUrl, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t} finally {\r\n    \t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n    \t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","id":103594,"modified_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit, boolean isLocalCloud) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tList<AbstractManagementServiceInstaller> waitForManagementServices = new LinkedList<AbstractManagementServiceInstaller>();\r\n\t\t\t\r\n\t\t\tconnectionLogs.supressConnectionErrors();\r\n\t\t\ttry {\r\n\t\t\t\tif (!noWebServices) {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();    \t\t\t\t\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();    \t\t\t\t\t\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\tif (waitForWebUi)\r\n        \t\t\t\twaitForManagementServices.add(webuiInstaller);\r\n    \t\t\t\telse\r\n    \t\t\t\t\twebuiInstaller.logServiceLocation();\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\trestInstaller.setWaitForConnection();\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\twaitForManagementServices.add(restInstaller);\r\n    \t\t\t\t\r\n    \t\t\t} \r\n\t\t\t\tif (!noManagementSpace) {\r\n\t\t\t\t\tfinal boolean highlyAvailable = !isLocalCloud;\r\n\t\t\t\t\tManagementSpaceServiceInstaller managementSpaceInstaller = new ManagementSpaceServiceInstaller();\r\n\t\t\t\t\tmanagementSpaceInstaller.setAdmin(agent.getAdmin());\r\n\t\t\t\t\tmanagementSpaceInstaller.setVerbose(verbose);\r\n\t\t\t\t\tmanagementSpaceInstaller.setMemory(MANAGEMENT_SPACE_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n\t\t\t\t\tmanagementSpaceInstaller.setServiceName(MANAGEMENT_SPACE_NAME);\r\n\t\t\t\t\tmanagementSpaceInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\t\t\tmanagementSpaceInstaller.setHighlyAvailable(highlyAvailable);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\tmanagementSpaceInstaller.install();\r\n    \t\t\t\t\twaitForManagementServices.add(managementSpaceInstaller);\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + MANAGEMENT_SPACE_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (AbstractManagementServiceInstaller managementServiceInstaller : waitForManagementServices) {\r\n\t\t\t\t\tmanagementServiceInstaller.waitForInstallation(adminFacade, agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","commit_id":"52507bdbb655ce08654bacf2d7133ad5993ce87f","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","id":103595,"modified_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, true);\r\n\t}","commit_id":"52507bdbb655ce08654bacf2d7133ad5993ce87f","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","id":103596,"modified_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, false);\r\n\t}","commit_id":"52507bdbb655ce08654bacf2d7133ad5993ce87f","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private Properties getContextProperties() {\r\n\t\tProperties props = new Properties();\r\n\t\tprops.put(\"com.gs.application\", MANAGEMENT_APPLICATION_NAME);\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","id":103597,"modified_method":"@Override\r\n\tprotected Properties getContextProperties() {\r\n    \tProperties props = super.getContextProperties();\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","commit_id":"52507bdbb655ce08654bacf2d7133ad5993ce87f","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","id":103598,"modified_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setNoManagementSpace(noManagementSpace);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","commit_id":"52507bdbb655ce08654bacf2d7133ad5993ce87f","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, true);\r\n\t}","id":103599,"modified_method":"public void startLocalCloudOnLocalhostAndWait(int timeout, TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tsetDefaultLocalcloudLookup();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(LOCALCLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","commit_id":"c29a324704358755467854594f24edfba5264ef6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit, false);\r\n\t}","id":103600,"modified_method":"public void startManagementOnLocalhostAndWait(int timeout,TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {\r\n\t\t\r\n\t\tsetZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\r\n\t\tsetDefaultNicAddress();\r\n\t\t\r\n\t\tstartManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, timeout, timeunit);\r\n\t}","commit_id":"c29a324704358755467854594f24edfba5264ef6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit, boolean isLocalCloud) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tList<AbstractManagementServiceInstaller> waitForManagementServices = new LinkedList<AbstractManagementServiceInstaller>();\r\n\t\t\t\r\n\t\t\tconnectionLogs.supressConnectionErrors();\r\n\t\t\ttry {\r\n\t\t\t\tif (!noWebServices) {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();    \t\t\t\t\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();    \t\t\t\t\t\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\tif (waitForWebUi)\r\n        \t\t\t\twaitForManagementServices.add(webuiInstaller);\r\n    \t\t\t\telse\r\n    \t\t\t\t\twebuiInstaller.logServiceLocation();\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\trestInstaller.setWaitForConnection();\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\twaitForManagementServices.add(restInstaller);\r\n    \t\t\t\t\r\n    \t\t\t} \r\n\t\t\t\tif (!noManagementSpace) {\r\n\t\t\t\t\tfinal boolean highlyAvailable = !isLocalCloud;\r\n\t\t\t\t\tManagementSpaceServiceInstaller managementSpaceInstaller = new ManagementSpaceServiceInstaller();\r\n\t\t\t\t\tmanagementSpaceInstaller.setAdmin(agent.getAdmin());\r\n\t\t\t\t\tmanagementSpaceInstaller.setVerbose(verbose);\r\n\t\t\t\t\tmanagementSpaceInstaller.setMemory(MANAGEMENT_SPACE_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n\t\t\t\t\tmanagementSpaceInstaller.setServiceName(MANAGEMENT_SPACE_NAME);\r\n\t\t\t\t\tmanagementSpaceInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n\t\t\t\t\tmanagementSpaceInstaller.setHighlyAvailable(highlyAvailable);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\tmanagementSpaceInstaller.install();\r\n    \t\t\t\t\twaitForManagementServices.add(managementSpaceInstaller);\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + MANAGEMENT_SPACE_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (AbstractManagementServiceInstaller managementServiceInstaller : waitForManagementServices) {\r\n\t\t\t\t\tmanagementServiceInstaller.waitForInstallation(adminFacade, agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","id":103601,"modified_method":"private void startManagementOnLocalhostAndWaitInternal(String[] gsAgentArgs, int timeout,TimeUnit timeunit) \r\n\t\tthrows CLIException, InterruptedException, TimeoutException {\r\n\t\tlong end = System.currentTimeMillis() + timeunit.toMillis(timeout);\r\n\t\t\r\n\t\tConnectionLogsFilter connectionLogs = new ConnectionLogsFilter(); \r\n\t\tconnectionLogs.supressConnectionErrors();\r\n\t\tfinal Admin admin = createAdmin();\r\n\t\ttry {\r\n\t\t\tsetLookupDefaults(admin);\r\n\t\t\tGridServiceAgent agent;\r\n\t\t\ttry {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twaitForExistingAgent(admin, progressInSeconds, TimeUnit.SECONDS);\r\n\t\t\t\t\tthrow new CLIException(\"Agent already running on local machine.\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (TimeoutException e ) {\r\n\t\t\t\t\t// no existing agent running on local machine\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\trunGsAgentOnLocalHost(\"agent and management processes\", gsAgentArgs);\r\n\t\t\t\tagent = waitForNewAgent(admin, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t} finally {\r\n\t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n\t\t\t}\r\n\t\t\twaitForManagementProcesses(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n\t\t\t\r\n\t\t\tif (!noWebServices) {\r\n    \t\t\tconnectionLogs.supressConnectionErrors();\r\n    \t\t\ttry {\r\n    \t\t\t\tManagementWebServiceInstaller webuiInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\twebuiInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\twebuiInstaller.setVerbose(verbose);\r\n    \t\t\t\twebuiInstaller.setProgress(progressInSeconds,TimeUnit.SECONDS);\r\n    \t\t\t\twebuiInstaller.setMemory(WEBUI_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\twebuiInstaller.setPort(WEBUI_PORT);\r\n    \t\t\t\twebuiInstaller.setWarFile(new File(WEBUI_FILE));\r\n    \t\t\t\twebuiInstaller.setServiceName(WEBUI_NAME);\r\n    \t\t\t\twebuiInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\twebuiInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + WEBUI_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\tManagementWebServiceInstaller restInstaller = new ManagementWebServiceInstaller();\r\n    \t\t\t\trestInstaller.setAdmin(agent.getAdmin());\r\n    \t\t\t\trestInstaller.setProgress(progressInSeconds, TimeUnit.SECONDS);\r\n    \t\t\t\trestInstaller.setVerbose(verbose);\r\n    \t\t\t\trestInstaller.setMemory(REST_MEMORY_IN_MB, MemoryUnit.MEGABYTES);\r\n    \t\t\t\trestInstaller.setPort(REST_PORT);\r\n    \t\t\t\trestInstaller.setWarFile(new File(REST_FILE));\r\n    \t\t\t\trestInstaller.setServiceName(REST_NAME);\r\n    \t\t\t\trestInstaller.setManagementZone(MANAGEMENT_GSA_ZONE);\r\n    \t\t\t\ttry {\r\n    \t\t\t\t\trestInstaller.install();\r\n    \t\t\t\t}\r\n    \t\t\t\tcatch (ProcessingUnitAlreadyDeployedException e) {\r\n    \t\t\t\t\tif (verbose) {\r\n    \t\t\t\t\t\tlogger.info(\"Service \" + REST_NAME + \" already installed\");\r\n    \t\t\t\t\t}\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t\t//assuming eager mode, PU installs on this even if already installed\r\n    \t\t\t\tif (waitForWebUi) {\r\n        \t\t\t\twebuiInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t} else {\r\n    \t\t\t\t    // log an estimation of the Webui URL\r\n    \t\t\t\t    webuiInstaller.logServiceLocation();\r\n    \t\t\t\t}\r\n    \t\t\t\tURL restUrl = restInstaller.waitForProcessingUnitInstance(agent, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t\t    \t\t\t\t\r\n    \t\t\t\twaitForConnection(restUrl, ShellUtils.millisUntil(TIMEOUT_ERROR_MESSAGE, end), TimeUnit.MILLISECONDS);\r\n    \t\t\t} finally {\r\n    \t\t\t\tconnectionLogs.restoreConnectionErrors();\t\t\t\t\r\n    \t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tadmin.close();\r\n\t\t}\r\n\t}","commit_id":"c29a324704358755467854594f24edfba5264ef6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\r\n\tprotected Properties getContextProperties() {\r\n    \tProperties props = super.getContextProperties();\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","id":103602,"modified_method":"private Properties getContextProperties() {\r\n\t\tProperties props = new Properties();\r\n\t\tprops.put(\"com.gs.application\", MANAGEMENT_APPLICATION_NAME);\r\n\t\tprops.put(\"web.port\", String.valueOf(port));\r\n\t\tprops.put(\"web.context\", \"/\");\r\n\t\tprops.put(\"web.context.unique\", \"true\");\r\n\t\treturn props;\r\n\t}","commit_id":"c29a324704358755467854594f24edfba5264ef6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setNoManagementSpace(noManagementSpace);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","id":103603,"modified_method":"@Override\r\n\t\tprotected Object doExecute() throws Exception {\r\n\t\t\t\t\t    \r\n\t\t    if (timeoutInMinutes < 0) {\r\n\t\t        throw new CLIException(\"-timeout cannot be negative\");\r\n\t\t    }\r\n\t\t    \r\n\t\t\tLocalhostGridAgentBootstrapper installer = new LocalhostGridAgentBootstrapper();\r\n\t\t\tinstaller.setVerbose(verbose);\r\n\t\t\tinstaller.setLookupGroups(lookupGroups);\r\n\t\t\tinstaller.setLookupLocators(lookupLocators);\r\n\t\t\tinstaller.setNicAddress(nicAddress);\r\n\t\t\tinstaller.setProgressInSeconds(10);\r\n\t\t\tinstaller.setAdminFacade((AdminFacade) session.get(Constants.ADMIN_FACADE));\r\n\t\t\tinstaller.setNoWebServices(noWebServices);\r\n\t\t\tinstaller.setAutoShutdown(autoShutdown);\r\n\t\t\tinstaller.setWaitForWebui(true);\r\n\t\t\tinstaller.startManagementOnLocalhostAndWait(timeoutInMinutes, TimeUnit.MINUTES);\r\n\t\t\treturn \"Management started succesfully. Use the shutdown-management command to shutdown management processes running on local machine.\";\r\n\t\t}","commit_id":"c29a324704358755467854594f24edfba5264ef6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public OutputStream getOutputStream() throws IOException {\n\t\tsynchronized (this) {\n\t\t\tFile file = getFile();\n\t\t\tif(freed)\n\t\t\t\tthrow new IOException(\"File already freed\");\n\t\t\tif(isReadOnly())\n\t\t\t\tthrow new IOException(\"Bucket is read-only: \"+this);\n\t\t\t\n\t\t\tif(createFileOnly() && file.exists())\n\t\t\t\tthrow new FileExistsException(file);\n\t\t\t\n\t\t\tif(streams != null && !streams.isEmpty())\n\t\t\t\tLogger.error(this, \"Streams open on \"+this+\" while opening an output stream!: \"+streams);\n\t\t\t\n\t\t\tFile tempfile = createFileOnly() ? getTempfile() : file;\n\t\t\tlong streamNumber = ++fileRestartCounter;\n\t\t\t\n\t\t\tFileBucketOutputStream os = \n\t\t\t\tnew FileBucketOutputStream(tempfile, streamNumber);\n\t\t\t\n\t\t\tif(Logger.shouldLog(Logger.DEBUG, this))\n\t\t\t\tLogger.debug(this, \"Creating \"+os, new Exception(\"debug\"));\n\t\t\t\n\t\t\taddStream(os);\n\t\t\treturn os;\n\t\t}\n\t}","id":103604,"modified_method":"public OutputStream getOutputStream() throws IOException {\n\t\tsynchronized (this) {\n\t\t\tFile file = getFile();\n\t\t\tif(freed)\n\t\t\t\tthrow new IOException(\"File already freed\");\n\t\t\tif(isReadOnly())\n\t\t\t\tthrow new IOException(\"Bucket is read-only: \"+this);\n\t\t\t\n\t\t\tif(createFileOnly() && file.exists())\n\t\t\t\tthrow new FileExistsException(file);\n\t\t\t\n\t\t\tif(streams != null && !streams.isEmpty())\n\t\t\t\tLogger.error(this, \"Streams open on \"+this+\" while opening an output stream!: \"+streams);\n\t\t\t\n\t\t\tFile tempfile = createFileOnly() ? getTempfile() : file;\n\t\t\tlong streamNumber = ++fileRestartCounter;\n\t\t\t\n\t\t\tFileBucketOutputStream os = \n\t\t\t\tnew FileBucketOutputStream(tempfile, streamNumber);\n\t\t\t\n\t\t\tif(logDEBUG)\n\t\t\t\tLogger.debug(this, \"Creating \"+os, new Exception(\"debug\"));\n\t\t\t\n\t\t\taddStream(os);\n\t\t\treturn os;\n\t\t}\n\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Actually delete the underlying file. Called by finalizer, will not be\n\t * called twice. But length must still be valid when calling it.\n\t */\n\tprotected synchronized void deleteFile() {\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Deleting \"+getFile()+\" for \"+this, new Exception(\"debug\"));\n\t\tgetFile().delete();\n\t}","id":103605,"modified_method":"/**\n\t * Actually delete the underlying file. Called by finalizer, will not be\n\t * called twice. But length must still be valid when calling it.\n\t */\n\tprotected synchronized void deleteFile() {\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Deleting \"+getFile()+\" for \"+this, new Exception(\"debug\"));\n\t\tgetFile().delete();\n\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"public synchronized InputStream getInputStream() throws IOException {\n\t\tif(freed)\n\t\t\tthrow new IOException(\"File already freed\");\n\t\tFile file = getFile();\n\t\tif(!file.exists()) {\n\t\t\tLogger.normal(this, \"File does not exist: \"+file+\" for \"+this);\n\t\t\treturn new NullInputStream();\n\t\t} else {\n\t\t\tFileBucketInputStream is =\n\t\t\t\tnew FileBucketInputStream(file);\n\t\t\taddStream(is);\n\t\t\tif(Logger.shouldLog(Logger.DEBUG, this))\n\t\t\t\tLogger.debug(this, \"Creating \"+is, new Exception(\"debug\"));\n\t\t\treturn is;\n\t\t}\n\t}","id":103606,"modified_method":"public synchronized InputStream getInputStream() throws IOException {\n\t\tif(freed)\n\t\t\tthrow new IOException(\"File already freed\");\n\t\tFile file = getFile();\n\t\tif(!file.exists()) {\n\t\t\tLogger.normal(this, \"File does not exist: \"+file+\" for \"+this);\n\t\t\treturn new NullInputStream();\n\t\t} else {\n\t\t\tFileBucketInputStream is =\n\t\t\t\tnew FileBucketInputStream(file);\n\t\t\taddStream(is);\n\t\t\tif(logDEBUG)\n\t\t\t\tLogger.debug(this, \"Creating \"+is, new Exception(\"debug\"));\n\t\t\treturn is;\n\t\t}\n\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"@Override\n\t\tpublic void close() throws IOException {\n\t\t\tFile file;\n\t\t\tsynchronized(this) {\n\t\t\t\tif(closed) return;\n\t\t\t\tclosed = true;\n\t\t\t\tfile = getFile();\n\t\t\t}\n\t\t\tremoveStream(this);\n\t\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Closing \"+BaseFileBucket.this);\n\t\t\ttry {\n\t\t\t\tsuper.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Failed closing \"+BaseFileBucket.this+\" : \"+e, e);\n\t\t\t\tif(createFileOnly()) tempfile.delete();\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tif(createFileOnly()) {\n\t\t\t\tif(file.exists()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"File exists creating file for \"+this);\n\t\t\t\t\ttempfile.delete();\n\t\t\t\t\tthrow new FileExistsException(file);\n\t\t\t\t}\n\t\t\t\tif(!tempfile.renameTo(file)) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Cannot rename file for \"+this);\n\t\t\t\t\tif(file.exists()) throw new FileExistsException(file);\n\t\t\t\t\ttempfile.delete();\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Deleted, cannot rename file for \"+this);\n\t\t\t\t\tthrow new IOException(\"Cannot rename file\");\n\t\t\t\t}\n\t\t\t}\n\t\t}","id":103607,"modified_method":"@Override\n\t\tpublic void close() throws IOException {\n\t\t\tFile file;\n\t\t\tsynchronized(this) {\n\t\t\t\tif(closed) return;\n\t\t\t\tclosed = true;\n\t\t\t\tfile = getFile();\n\t\t\t}\n\t\t\tremoveStream(this);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Closing \"+BaseFileBucket.this);\n\t\t\ttry {\n\t\t\t\tsuper.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Failed closing \"+BaseFileBucket.this+\" : \"+e, e);\n\t\t\t\tif(createFileOnly()) tempfile.delete();\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tif(createFileOnly()) {\n\t\t\t\tif(file.exists()) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"File exists creating file for \"+this);\n\t\t\t\t\ttempfile.delete();\n\t\t\t\t\tthrow new FileExistsException(file);\n\t\t\t\t}\n\t\t\t\tif(!tempfile.renameTo(file)) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Cannot rename file for \"+this);\n\t\t\t\t\tif(file.exists()) throw new FileExistsException(file);\n\t\t\t\t\ttempfile.delete();\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Deleted, cannot rename file for \"+this);\n\t\t\t\t\tthrow new IOException(\"Cannot rename file\");\n\t\t\t\t}\n\t\t\t}\n\t\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"protected FileBucketOutputStream(\n\t\t\tFile tempfile, long restartCount)\n\t\t\tthrows FileNotFoundException {\n\t\t\tsuper(tempfile, false);\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Writing to \"+tempfile+\" for \"+getFile());\n\t\t\tthis.tempfile = tempfile;\n\t\t\tresetLength();\n\t\t\tthis.restartCount = restartCount;\n\t\t\tclosed = false;\n\t\t}","id":103608,"modified_method":"protected FileBucketOutputStream(\n\t\t\tFile tempfile, long restartCount)\n\t\t\tthrows FileNotFoundException {\n\t\t\tsuper(tempfile, false);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Writing to \"+tempfile+\" for \"+getFile());\n\t\t\tthis.tempfile = tempfile;\n\t\t\tresetLength();\n\t\t\tthis.restartCount = restartCount;\n\t\t\tclosed = false;\n\t\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"/** Parse some metadata from a DataInputStream\n\t * @throws IOException If an I/O error occurs, or the data is incomplete. */\n\tpublic Metadata(DataInputStream dis, long length) throws IOException, MetadataParseException {\n\t\tlong magic = dis.readLong();\n\t\tif(magic != FREENET_METADATA_MAGIC)\n\t\t\tthrow new MetadataParseException(\"Invalid magic \"+magic);\n\t\tshort version = dis.readShort();\n\t\tif(version != 0)\n\t\t\tthrow new MetadataParseException(\"Unsupported version \"+version);\n\t\tdocumentType = dis.readByte();\n\t\tif((documentType < 0) || (documentType > 5))\n\t\t\tthrow new MetadataParseException(\"Unsupported document type: \"+documentType);\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(logMINOR) Logger.minor(this, \"Document type: \"+documentType);\n\t\t\n\t\tboolean compressed = false;\n\t\tif((documentType == SIMPLE_REDIRECT) || (documentType == MULTI_LEVEL_METADATA)\n\t\t\t\t|| (documentType == ARCHIVE_MANIFEST) || (documentType == ARCHIVE_INTERNAL_REDIRECT)) {\n\t\t\tshort flags = dis.readShort();\n\t\t\tsplitfile = (flags & FLAGS_SPLITFILE) == FLAGS_SPLITFILE;\n\t\t\tdbr = (flags & FLAGS_DBR) == FLAGS_DBR;\n\t\t\tnoMIME = (flags & FLAGS_NO_MIME) == FLAGS_NO_MIME;\n\t\t\tcompressedMIME = (flags & FLAGS_COMPRESSED_MIME) == FLAGS_COMPRESSED_MIME;\n\t\t\textraMetadata = (flags & FLAGS_EXTRA_METADATA) == FLAGS_EXTRA_METADATA;\n\t\t\tfullKeys = (flags & FLAGS_FULL_KEYS) == FLAGS_FULL_KEYS;\n\t\t\tcompressed = (flags & FLAGS_COMPRESSED) == FLAGS_COMPRESSED;\n\t\t}\n\t\t\n\t\tif(documentType == ARCHIVE_MANIFEST) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Archive manifest\");\n\t\t\tarchiveType = ARCHIVE_TYPE.getArchiveType(dis.readShort());\n\t\t\tif(archiveType == null)\n\t\t\t\tthrow new MetadataParseException(\"Unrecognized archive type \"+archiveType);\n\t\t}\n\n\t\tif(splitfile) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Splitfile\");\n\t\t\tdataLength = dis.readLong();\n\t\t\tif(dataLength < -1)\n\t\t\t\tthrow new MetadataParseException(\"Invalid real content length \"+dataLength);\n\t\t\t\n\t\t\tif(dataLength == -1) {\n\t\t\t\tif(splitfile)\n\t\t\t\t\tthrow new MetadataParseException(\"Splitfile must have a real-length\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(compressed) {\n\t\t\tcompressionCodec = COMPRESSOR_TYPE.getCompressorByMetadataID(dis.readShort());\n\t\t\tif(compressionCodec == null)\n\t\t\t\tthrow new MetadataParseException(\"Unrecognized splitfile compression codec \"+compressionCodec);\n\t\t\t\n\t\t\tdecompressedLength = dis.readLong();\n\t\t}\n\t\t\n\t\tif(noMIME) {\n\t\t\tmimeType = null;\n\t\t\tif(logMINOR) Logger.minor(this, \"noMIME enabled\");\n\t\t} else {\n\t\t\tif(compressedMIME) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Compressed MIME\");\n\t\t\t\tshort x = dis.readShort();\n\t\t\t\tcompressedMIMEValue = (short) (x & 32767); // chop off last bit\n\t\t\t\thasCompressedMIMEParams = (compressedMIMEValue & 32768) == 32768;\n\t\t\t\tif(hasCompressedMIMEParams) {\n\t\t\t\t\tcompressedMIMEParams = dis.readShort();\n\t\t\t\t\tif(compressedMIMEParams != 0) {\n\t\t\t\t\t\tthrow new MetadataParseException(\"Unrecognized MIME params ID (not yet implemented)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmimeType = DefaultMIMETypes.byNumber(x);\n\t\t\t} else {\n\t\t\t\t// Read an actual raw MIME type\n\t\t\t\tbyte l = dis.readByte();\n\t\t\t\tint len = l & 0xff; // positive\n\t\t\t\tbyte[] toRead = new byte[len];\n\t\t\t\tdis.readFully(toRead);\n\t\t\t\t// Use UTF-8 for everything, for simplicity\n\t\t\t\tmimeType = new String(toRead, \"UTF-8\");\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Raw MIME\");\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"MIME = \"+mimeType);\n\t\t}\n\t\t\n\t\tif(dbr) {\n\t\t\tthrow new MetadataParseException(\"Do not support DBRs pending decision on putting them in the key!\");\n\t\t}\n\t\t\n\t\tif(extraMetadata) {\n\t\t\tint numberOfExtraFields = (dis.readShort()) & 0xffff;\n\t\t\tfor(int i=0;i<numberOfExtraFields;i++) {\n\t\t\t\tshort type = dis.readShort();\n\t\t\t\tint len = (dis.readByte() & 0xff);\n\t\t\t\tbyte[] buf = new byte[len];\n\t\t\t\tdis.readFully(buf);\n\t\t\t\tLogger.normal(this, \"Ignoring type \"+type+\" extra-client-metadata field of \"+len+\" bytes\");\n\t\t\t}\n\t\t\textraMetadata = false; // can't parse, can't write\n\t\t}\n\t\t\n\t\tclientMetadata = new ClientMetadata(mimeType);\n\t\t\n\t\tif((!splitfile) && ((documentType == SIMPLE_REDIRECT) || (documentType == ARCHIVE_MANIFEST))) {\n\t\t\tsimpleRedirectKey = readKey(dis);\n\t\t} else if(splitfile) {\n\t\t\tsplitfileAlgorithm = dis.readShort();\n\t\t\tif(!((splitfileAlgorithm == SPLITFILE_NONREDUNDANT) ||\n\t\t\t\t\t(splitfileAlgorithm == SPLITFILE_ONION_STANDARD)))\n\t\t\t\tthrow new MetadataParseException(\"Unknown splitfile algorithm \"+splitfileAlgorithm);\n\t\t\t\n\t\t\tif(splitfileAlgorithm == SPLITFILE_NONREDUNDANT)\n\t\t\t\tthrow new MetadataParseException(\"Non-redundant splitfile invalid\");\n\t\t\t\n\t\t\tint paramsLength = dis.readInt();\n\t\t\tif(paramsLength > MAX_SPLITFILE_PARAMS_LENGTH)\n\t\t\t\tthrow new MetadataParseException(\"Too many bytes of splitfile parameters: \"+paramsLength);\n\t\t\t\n\t\t\tif(paramsLength > 0) {\n\t\t\t\tsplitfileParams = new byte[paramsLength];\n\t\t\t\tdis.readFully(splitfileParams);\n\t\t\t} else if(paramsLength < 0) {\n\t\t\t\tthrow new MetadataParseException(\"Invalid splitfile params length: \"+paramsLength);\n\t\t\t}\n\t\t\t\n\t\t\tsplitfileBlocks = dis.readInt(); // 64TB file size limit :)\n\t\t\tif(splitfileBlocks < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid number of blocks: \"+splitfileBlocks);\n\t\t\tif(splitfileBlocks > MAX_SPLITFILE_BLOCKS)\n\t\t\t\tthrow new MetadataParseException(\"Too many splitfile blocks (soft limit to prevent memory DoS): \"+splitfileBlocks);\n\t\t\tsplitfileCheckBlocks = dis.readInt();\n\t\t\tif(splitfileCheckBlocks < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid number of check blocks: \"+splitfileCheckBlocks);\n\t\t\tif(splitfileCheckBlocks > MAX_SPLITFILE_BLOCKS)\n\t\t\t\tthrow new MetadataParseException(\"Too many splitfile check-blocks (soft limit to prevent memory DoS): \"+splitfileCheckBlocks);\n\t\t\t\n\t\t\tsplitfileDataKeys = new ClientCHK[splitfileBlocks];\n\t\t\tsplitfileCheckKeys = new ClientCHK[splitfileCheckBlocks];\n\t\t\tfor(int i=0;i<splitfileDataKeys.length;i++)\n\t\t\t\tif((splitfileDataKeys[i] = readCHK(dis)) == null)\n\t\t\t\t\tthrow new MetadataParseException(\"Null data key \"+i);\n\t\t\tfor(int i=0;i<splitfileCheckKeys.length;i++)\n\t\t\t\tif((splitfileCheckKeys[i] = readCHK(dis)) == null)\n\t\t\t\t\tthrow new MetadataParseException(\"Null check key: \"+i);\n\t\t}\n\t\t\n\t\tif(documentType == SIMPLE_MANIFEST) {\n\t\t\tint manifestEntryCount = dis.readInt();\n\t\t\tif(manifestEntryCount < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid manifest entry count: \"+manifestEntryCount);\n\t\t\t\n\t\t\tmanifestEntries = new HashMap();\n\t\t\t\n\t\t\t// Parse the sub-Manifest.\n\t\t\t\n\t\t\tLogger.minor(this, \"Simple manifest, \"+manifestEntryCount+\" entries\");\n\t\t\t\n\t\t\tfor(int i=0;i<manifestEntryCount;i++) {\n\t\t\t\tshort nameLength = dis.readShort();\n\t\t\t\tbyte[] buf = new byte[nameLength];\n\t\t\t\tdis.readFully(buf);\n\t\t\t\tString name = new String(buf, \"UTF-8\").intern();\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Entry \"+i+\" name \"+name);\n\t\t\t\tshort len = dis.readShort();\n\t\t\t\tif(len < 0)\n\t\t\t\t\tthrow new MetadataParseException(\"Invalid manifest entry size: \"+len);\n\t\t\t\tif(len > length)\n\t\t\t\t\tthrow new MetadataParseException(\"Impossibly long manifest entry: \"+len+\" - metadata size \"+length);\n\t\t\t\tbyte[] data = new byte[len];\n\t\t\t\tdis.readFully(data);\n\t\t\t\ttry {\n\t\t\t\t\tMetadata m = Metadata.construct(data);\n\t\t\t\t\tmanifestEntries.put(name, m);\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\tLogger.error(this, \"Could not parse sub-manifest: \"+t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"End of manifest\"); // Make it easy to search for it!\n\t\t}\n\t\t\n\t\tif(documentType == ARCHIVE_INTERNAL_REDIRECT) {\n\t\t\tint len = dis.readShort();\n\t\t\tif(logMINOR) Logger.minor(this, \"Reading zip internal redirect length \"+len);\n\t\t\tbyte[] buf = new byte[len];\n\t\t\tdis.readFully(buf);\n\t\t\tnameInArchive = new String(buf, \"UTF-8\");\n\t\t\tif(logMINOR) Logger.minor(this, \"Archive internal redirect: \"+nameInArchive+\" (\"+len+ ')');\n\t\t}\n\t}","id":103609,"modified_method":"/** Parse some metadata from a DataInputStream\n\t * @throws IOException If an I/O error occurs, or the data is incomplete. */\n\tpublic Metadata(DataInputStream dis, long length) throws IOException, MetadataParseException {\n\t\tlong magic = dis.readLong();\n\t\tif(magic != FREENET_METADATA_MAGIC)\n\t\t\tthrow new MetadataParseException(\"Invalid magic \"+magic);\n\t\tshort version = dis.readShort();\n\t\tif(version != 0)\n\t\t\tthrow new MetadataParseException(\"Unsupported version \"+version);\n\t\tdocumentType = dis.readByte();\n\t\tif((documentType < 0) || (documentType > 5))\n\t\t\tthrow new MetadataParseException(\"Unsupported document type: \"+documentType);\n\t\tif(logMINOR) Logger.minor(this, \"Document type: \"+documentType);\n\t\t\n\t\tboolean compressed = false;\n\t\tif((documentType == SIMPLE_REDIRECT) || (documentType == MULTI_LEVEL_METADATA)\n\t\t\t\t|| (documentType == ARCHIVE_MANIFEST) || (documentType == ARCHIVE_INTERNAL_REDIRECT)) {\n\t\t\tshort flags = dis.readShort();\n\t\t\tsplitfile = (flags & FLAGS_SPLITFILE) == FLAGS_SPLITFILE;\n\t\t\tdbr = (flags & FLAGS_DBR) == FLAGS_DBR;\n\t\t\tnoMIME = (flags & FLAGS_NO_MIME) == FLAGS_NO_MIME;\n\t\t\tcompressedMIME = (flags & FLAGS_COMPRESSED_MIME) == FLAGS_COMPRESSED_MIME;\n\t\t\textraMetadata = (flags & FLAGS_EXTRA_METADATA) == FLAGS_EXTRA_METADATA;\n\t\t\tfullKeys = (flags & FLAGS_FULL_KEYS) == FLAGS_FULL_KEYS;\n\t\t\tcompressed = (flags & FLAGS_COMPRESSED) == FLAGS_COMPRESSED;\n\t\t}\n\t\t\n\t\tif(documentType == ARCHIVE_MANIFEST) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Archive manifest\");\n\t\t\tarchiveType = ARCHIVE_TYPE.getArchiveType(dis.readShort());\n\t\t\tif(archiveType == null)\n\t\t\t\tthrow new MetadataParseException(\"Unrecognized archive type \"+archiveType);\n\t\t}\n\n\t\tif(splitfile) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Splitfile\");\n\t\t\tdataLength = dis.readLong();\n\t\t\tif(dataLength < -1)\n\t\t\t\tthrow new MetadataParseException(\"Invalid real content length \"+dataLength);\n\t\t\t\n\t\t\tif(dataLength == -1) {\n\t\t\t\tif(splitfile)\n\t\t\t\t\tthrow new MetadataParseException(\"Splitfile must have a real-length\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(compressed) {\n\t\t\tcompressionCodec = COMPRESSOR_TYPE.getCompressorByMetadataID(dis.readShort());\n\t\t\tif(compressionCodec == null)\n\t\t\t\tthrow new MetadataParseException(\"Unrecognized splitfile compression codec \"+compressionCodec);\n\t\t\t\n\t\t\tdecompressedLength = dis.readLong();\n\t\t}\n\t\t\n\t\tif(noMIME) {\n\t\t\tmimeType = null;\n\t\t\tif(logMINOR) Logger.minor(this, \"noMIME enabled\");\n\t\t} else {\n\t\t\tif(compressedMIME) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Compressed MIME\");\n\t\t\t\tshort x = dis.readShort();\n\t\t\t\tcompressedMIMEValue = (short) (x & 32767); // chop off last bit\n\t\t\t\thasCompressedMIMEParams = (compressedMIMEValue & 32768) == 32768;\n\t\t\t\tif(hasCompressedMIMEParams) {\n\t\t\t\t\tcompressedMIMEParams = dis.readShort();\n\t\t\t\t\tif(compressedMIMEParams != 0) {\n\t\t\t\t\t\tthrow new MetadataParseException(\"Unrecognized MIME params ID (not yet implemented)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmimeType = DefaultMIMETypes.byNumber(x);\n\t\t\t} else {\n\t\t\t\t// Read an actual raw MIME type\n\t\t\t\tbyte l = dis.readByte();\n\t\t\t\tint len = l & 0xff; // positive\n\t\t\t\tbyte[] toRead = new byte[len];\n\t\t\t\tdis.readFully(toRead);\n\t\t\t\t// Use UTF-8 for everything, for simplicity\n\t\t\t\tmimeType = new String(toRead, \"UTF-8\");\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Raw MIME\");\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"MIME = \"+mimeType);\n\t\t}\n\t\t\n\t\tif(dbr) {\n\t\t\tthrow new MetadataParseException(\"Do not support DBRs pending decision on putting them in the key!\");\n\t\t}\n\t\t\n\t\tif(extraMetadata) {\n\t\t\tint numberOfExtraFields = (dis.readShort()) & 0xffff;\n\t\t\tfor(int i=0;i<numberOfExtraFields;i++) {\n\t\t\t\tshort type = dis.readShort();\n\t\t\t\tint len = (dis.readByte() & 0xff);\n\t\t\t\tbyte[] buf = new byte[len];\n\t\t\t\tdis.readFully(buf);\n\t\t\t\tLogger.normal(this, \"Ignoring type \"+type+\" extra-client-metadata field of \"+len+\" bytes\");\n\t\t\t}\n\t\t\textraMetadata = false; // can't parse, can't write\n\t\t}\n\t\t\n\t\tclientMetadata = new ClientMetadata(mimeType);\n\t\t\n\t\tif((!splitfile) && ((documentType == SIMPLE_REDIRECT) || (documentType == ARCHIVE_MANIFEST))) {\n\t\t\tsimpleRedirectKey = readKey(dis);\n\t\t} else if(splitfile) {\n\t\t\tsplitfileAlgorithm = dis.readShort();\n\t\t\tif(!((splitfileAlgorithm == SPLITFILE_NONREDUNDANT) ||\n\t\t\t\t\t(splitfileAlgorithm == SPLITFILE_ONION_STANDARD)))\n\t\t\t\tthrow new MetadataParseException(\"Unknown splitfile algorithm \"+splitfileAlgorithm);\n\t\t\t\n\t\t\tif(splitfileAlgorithm == SPLITFILE_NONREDUNDANT)\n\t\t\t\tthrow new MetadataParseException(\"Non-redundant splitfile invalid\");\n\t\t\t\n\t\t\tint paramsLength = dis.readInt();\n\t\t\tif(paramsLength > MAX_SPLITFILE_PARAMS_LENGTH)\n\t\t\t\tthrow new MetadataParseException(\"Too many bytes of splitfile parameters: \"+paramsLength);\n\t\t\t\n\t\t\tif(paramsLength > 0) {\n\t\t\t\tsplitfileParams = new byte[paramsLength];\n\t\t\t\tdis.readFully(splitfileParams);\n\t\t\t} else if(paramsLength < 0) {\n\t\t\t\tthrow new MetadataParseException(\"Invalid splitfile params length: \"+paramsLength);\n\t\t\t}\n\t\t\t\n\t\t\tsplitfileBlocks = dis.readInt(); // 64TB file size limit :)\n\t\t\tif(splitfileBlocks < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid number of blocks: \"+splitfileBlocks);\n\t\t\tif(splitfileBlocks > MAX_SPLITFILE_BLOCKS)\n\t\t\t\tthrow new MetadataParseException(\"Too many splitfile blocks (soft limit to prevent memory DoS): \"+splitfileBlocks);\n\t\t\tsplitfileCheckBlocks = dis.readInt();\n\t\t\tif(splitfileCheckBlocks < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid number of check blocks: \"+splitfileCheckBlocks);\n\t\t\tif(splitfileCheckBlocks > MAX_SPLITFILE_BLOCKS)\n\t\t\t\tthrow new MetadataParseException(\"Too many splitfile check-blocks (soft limit to prevent memory DoS): \"+splitfileCheckBlocks);\n\t\t\t\n\t\t\tsplitfileDataKeys = new ClientCHK[splitfileBlocks];\n\t\t\tsplitfileCheckKeys = new ClientCHK[splitfileCheckBlocks];\n\t\t\tfor(int i=0;i<splitfileDataKeys.length;i++)\n\t\t\t\tif((splitfileDataKeys[i] = readCHK(dis)) == null)\n\t\t\t\t\tthrow new MetadataParseException(\"Null data key \"+i);\n\t\t\tfor(int i=0;i<splitfileCheckKeys.length;i++)\n\t\t\t\tif((splitfileCheckKeys[i] = readCHK(dis)) == null)\n\t\t\t\t\tthrow new MetadataParseException(\"Null check key: \"+i);\n\t\t}\n\t\t\n\t\tif(documentType == SIMPLE_MANIFEST) {\n\t\t\tint manifestEntryCount = dis.readInt();\n\t\t\tif(manifestEntryCount < 0)\n\t\t\t\tthrow new MetadataParseException(\"Invalid manifest entry count: \"+manifestEntryCount);\n\t\t\t\n\t\t\tmanifestEntries = new HashMap();\n\t\t\t\n\t\t\t// Parse the sub-Manifest.\n\t\t\t\n\t\t\tif(logMINOR)Logger.minor(this, \"Simple manifest, \"+manifestEntryCount+\" entries\");\n\t\t\t\n\t\t\tfor(int i=0;i<manifestEntryCount;i++) {\n\t\t\t\tshort nameLength = dis.readShort();\n\t\t\t\tbyte[] buf = new byte[nameLength];\n\t\t\t\tdis.readFully(buf);\n\t\t\t\tString name = new String(buf, \"UTF-8\").intern();\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Entry \"+i+\" name \"+name);\n\t\t\t\tshort len = dis.readShort();\n\t\t\t\tif(len < 0)\n\t\t\t\t\tthrow new MetadataParseException(\"Invalid manifest entry size: \"+len);\n\t\t\t\tif(len > length)\n\t\t\t\t\tthrow new MetadataParseException(\"Impossibly long manifest entry: \"+len+\" - metadata size \"+length);\n\t\t\t\tbyte[] data = new byte[len];\n\t\t\t\tdis.readFully(data);\n\t\t\t\ttry {\n\t\t\t\t\tMetadata m = Metadata.construct(data);\n\t\t\t\t\tmanifestEntries.put(name, m);\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\tLogger.error(this, \"Could not parse sub-manifest: \"+t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(logMINOR) Logger.minor(this, \"End of manifest\"); // Make it easy to search for it!\n\t\t}\n\t\t\n\t\tif(documentType == ARCHIVE_INTERNAL_REDIRECT) {\n\t\t\tint len = dis.readShort();\n\t\t\tif(logMINOR) Logger.minor(this, \"Reading zip internal redirect length \"+len);\n\t\t\tbyte[] buf = new byte[len];\n\t\t\tdis.readFully(buf);\n\t\t\tnameInArchive = new String(buf, \"UTF-8\");\n\t\t\tif(logMINOR) Logger.minor(this, \"Archive internal redirect: \"+nameInArchive+\" (\"+len+ ')');\n\t\t}\n\t}","commit_id":"a4a03acf6a7ddea247ee907cfcedaba16a4fc7e8","url":"https://github.com/freenet/fred"},{"original_method":"public FreenetURI(\n\t\tString keyType,\n\t\tString docName,\n\t\tString[] metaStr,\n\t\tbyte[] routingKey,\n\t\tbyte[] cryptoKey, byte[] extra2) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = keyType.trim().toUpperCase().intern();\n\t\tthis.docName = docName;\n\t\tthis.metaStr = metaStr;\n\t\tthis.routingKey = routingKey;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra2;\n\t\tthis.suggestedEdition = -1;\n\t\tLogger.minor(this, \"Created from components: \"+toString(), new Exception(\"debug\"));\n\t}","id":103610,"modified_method":"public FreenetURI(\n\t\tString keyType,\n\t\tString docName,\n\t\tString[] metaStr,\n\t\tbyte[] routingKey,\n\t\tbyte[] cryptoKey, byte[] extra2) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = keyType.trim().toUpperCase().intern();\n\t\tthis.docName = docName;\n\t\tthis.metaStr = metaStr;\n\t\tthis.routingKey = routingKey;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra2;\n\t\tthis.suggestedEdition = -1;\n\t\tif (logMINOR) Logger.minor(this, \"Created from components: \"+toString(), new Exception(\"debug\"));\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public String toString(boolean prefix, boolean pureAscii) {\n\t\tif(keyType == null) {\n\t\t\t// Not activated or something...\n\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"Not activated?? in toString(\"+prefix+\",\"+pureAscii+\")\");\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder b;\n\t\tif(prefix)\n\t\t\tb = new StringBuilder(\"freenet:\");\n\t\telse\n\t\t\tb = new StringBuilder();\n\n\t\tb.append(keyType).append('@');\n\n\t\tif(!\"KSK\".equals(keyType)) {\n\t\t\tif(routingKey != null)\n\t\t\t\tb.append(Base64.encode(routingKey));\n\t\t\tif(cryptoKey != null)\n\t\t\t\tb.append(',').append(Base64.encode(cryptoKey));\n\t\t\tif(extra != null)\n\t\t\t\tb.append(',').append(Base64.encode(extra));\n\t\t\tif(docName != null)\n\t\t\t\tb.append('/');\n\t\t}\n\n\t\tif(docName != null)\n\t\t\tb.append(URLEncoder.encode(docName, \"/\", pureAscii));\n\t\tif(keyType.equals(\"USK\")) {\n\t\t\tb.append('/');\n\t\t\tb.append(suggestedEdition);\n\t\t}\n\t\tif(metaStr != null)\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tb.append('/').append(URLEncoder.encode(metaStr[i], \"/\", pureAscii));\n\t\t\t}\n\t\treturn b.toString();\n\t}","id":103611,"modified_method":"public String toString(boolean prefix, boolean pureAscii) {\n\t\tif(keyType == null) {\n\t\t\t// Not activated or something...\n\t\t\tif(logMINOR) Logger.minor(this, \"Not activated?? in toString(\"+prefix+\",\"+pureAscii+\")\");\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder b;\n\t\tif(prefix)\n\t\t\tb = new StringBuilder(\"freenet:\");\n\t\telse\n\t\t\tb = new StringBuilder();\n\n\t\tb.append(keyType).append('@');\n\n\t\tif(!\"KSK\".equals(keyType)) {\n\t\t\tif(routingKey != null)\n\t\t\t\tb.append(Base64.encode(routingKey));\n\t\t\tif(cryptoKey != null)\n\t\t\t\tb.append(',').append(Base64.encode(cryptoKey));\n\t\t\tif(extra != null)\n\t\t\t\tb.append(',').append(Base64.encode(extra));\n\t\t\tif(docName != null)\n\t\t\t\tb.append('/');\n\t\t}\n\n\t\tif(docName != null)\n\t\t\tb.append(URLEncoder.encode(docName, \"/\", pureAscii));\n\t\tif(keyType.equals(\"USK\")) {\n\t\t\tb.append('/');\n\t\t\tb.append(suggestedEdition);\n\t\t}\n\t\tif(metaStr != null)\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tb.append('/').append(URLEncoder.encode(metaStr[i], \"/\", pureAscii));\n\t\t\t}\n\t\treturn b.toString();\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public FreenetURI(\n\t\tString keyType,\n\t\tString docName,\n\t\tString[] metaStr,\n\t\tbyte[] routingKey,\n\t\tbyte[] cryptoKey, byte[] extra2,\n\t\tlong suggestedEdition) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = keyType.trim().toUpperCase().intern();\n\t\tthis.docName = docName;\n\t\tthis.metaStr = metaStr;\n\t\tthis.routingKey = routingKey;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra2;\n\t\tthis.suggestedEdition = suggestedEdition;\n\t\tLogger.minor(this, \"Created from components (B): \"+toString(), new Exception(\"debug\"));\n\t}","id":103612,"modified_method":"public FreenetURI(\n\t\tString keyType,\n\t\tString docName,\n\t\tString[] metaStr,\n\t\tbyte[] routingKey,\n\t\tbyte[] cryptoKey, byte[] extra2,\n\t\tlong suggestedEdition) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = keyType.trim().toUpperCase().intern();\n\t\tthis.docName = docName;\n\t\tthis.metaStr = metaStr;\n\t\tthis.routingKey = routingKey;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra2;\n\t\tthis.suggestedEdition = suggestedEdition;\n\t\tif (logMINOR) Logger.minor(this, \"Created from components (B): \"+toString(), new Exception(\"debug\"));\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public FreenetURI(String URI) throws MalformedURLException {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tif(URI == null)\n\t\t\tthrow new MalformedURLException(\"No URI specified\");\n\t\t\n\t\tURI = URI.trim();\n\t\tif(URI.indexOf('@') < 0 || URI.indexOf('/') < 0)\n\t\t\t// Encoded URL?\n\t\t\ttry {\n\t\t\t\tURI = URLDecoder.decode(URI, false);\n\t\t\t} catch(URLEncodedFormatException e) {\n\t\t\t\tthrow new MalformedURLException(\"Invalid URI: no @ or /, or @ or / is escaped but there are invalid escapes\");\n\t\t\t}\n\t\t\n\t\tURI = URI_PREFIX.matcher(URI).replaceFirst(\"\");\n\t\t\t\n\t\t// decode keyType\n\t\tint atchar = URI.indexOf('@');\n\t\tif(atchar == -1)\n\t\t\tthrow new MalformedURLException(\"There is no @ in that URI! (\" + URI + ')');\n\n\t\tString _keyType = URI.substring(0, atchar).toUpperCase();\n\t\tURI = URI.substring(atchar + 1);\n\t\t\n\t\tboolean validKeyType = false;\n\t\tfor(int i = 0; i < VALID_KEY_TYPES.length; i++) {\n\t\t\tif (_keyType.equals(VALID_KEY_TYPES[i])) {\n\t\t\t\tvalidKeyType = true;\n\t\t\t\t_keyType = VALID_KEY_TYPES[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tkeyType = _keyType;\n\t\tif(!validKeyType)\n\t\t\tthrow new MalformedURLException(\"Invalid key type: \" + keyType);\n\n\t\tboolean isSSK = \"SSK\".equals(keyType);\n\t\tboolean isUSK = \"USK\".equals(keyType);\n\t\tboolean isKSK = \"KSK\".equals(keyType);\n\n\t\t// decode metaString\n\t\tArrayList<String> sv = null;\n\t\tint slash2;\n\t\tsv = new ArrayList<String>();\n\t\tif (isKSK) URI = \"/\" + URI; // ensure that KSK docNames are decoded\n\t\twhile ((slash2 = URI.lastIndexOf('/')) != -1) {\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = URLDecoder.decode(URI.substring(slash2 + 1 /* \"/\".length() */), true);\n\t\t\t} catch(URLEncodedFormatException e) {\n\t\t\t\tMalformedURLException ue = new MalformedURLException(e.toString());\n\t\t\t\tue.initCause(e);\n\t\t\t\tthrow ue;\n\t\t\t}\n\t\t\tif(s != null)\n\t\t\t\tsv.add(s);\n\t\t\tURI = URI.substring(0, slash2);\n\t\t}\n\n\t\t// sv is *backwards*\n\t\t// this makes for more efficient handling\n\n\t\tif(isSSK || isUSK || isKSK) {\n\n\t\t\tif(sv.isEmpty())\n\t\t\t\tthrow new MalformedURLException(\"No docname for \" + keyType);\n\t\t\tdocName = sv.remove(sv.size() - 1);\n\t\t\tif(isUSK) {\n\t\t\t\tif(sv.isEmpty())\n\t\t\t\t\tthrow new MalformedURLException(\"No suggested edition number for USK\");\n\t\t\t\ttry {\n\t\t\t\t\tsuggestedEdition = Long.parseLong(sv.remove(sv.size() - 1));\n\t\t\t\t} catch(NumberFormatException e) {\n\t\t\t\t\tMalformedURLException e1 = new MalformedURLException(\"Invalid suggested edition: \" + e);\n\t\t\t\t\te1.initCause(e);\n\t\t\t\t\tthrow e1;\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tsuggestedEdition = -1;\n\t\t} else {\n\t\t\t// docName not necessary, nor is it supported, for CHKs.\n\t\t\tdocName = null;\n\t\t\tsuggestedEdition = -1;\n\t\t}\n\n\t\tif(!sv.isEmpty()) {\n\t\t\tmetaStr = new String[sv.size()];\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tmetaStr[i] = sv.get(metaStr.length - 1 - i).intern();\n\t\t\t\tif(metaStr[i] == null)\n\t\t\t\t\tthrow new NullPointerException();\n\t\t\t}\n\t\t} else\n\t\t\tmetaStr = null;\n\n\t\tif(isKSK) {\n\t\t\troutingKey = extra = cryptoKey = null;\n\t\t\treturn;\n\t\t}\n\n\t\t// strip 'file extensions' from CHKs\n\t\t// added by aum (david@rebirthing.co.nz)\n\t\tif(\"CHK\".equals(keyType))\n\t\t\tURI = URI.split(\"[.]\")[0];\n\n\t\t// URI now contains: routingKey[,cryptoKey][,metaInfo]\n\t\tStringTokenizer st = new StringTokenizer(URI, \",\");\n\t\ttry {\n\t\t\tif(st.hasMoreTokens())\n\t\t\t\troutingKey = Base64.decode(st.nextToken());\n\t\t\telse {\n\t\t\t\troutingKey = cryptoKey = extra = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!st.hasMoreTokens()) {\n\t\t\t\tcryptoKey = extra = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Can be cryptokey or name-value pair.\n\t\t\tString t = st.nextToken();\n\t\t\tcryptoKey = Base64.decode(t);\n\t\t\tif(!st.hasMoreTokens()) {\n\t\t\t\textra = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textra = Base64.decode(st.nextToken());\n\n\t\t} catch(IllegalBase64Exception e) {\n\t\t\tthrow new MalformedURLException(\"Invalid Base64 quantity: \" + e);\n\t\t}\n\t\tLogger.minor(this, \"Created from parse: \"+toString()+\" from \"+URI, new Exception(\"debug\"));\n\t}","id":103613,"modified_method":"public FreenetURI(String URI) throws MalformedURLException {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tif(URI == null)\n\t\t\tthrow new MalformedURLException(\"No URI specified\");\n\t\t\n\t\tURI = URI.trim();\n\t\tif(URI.indexOf('@') < 0 || URI.indexOf('/') < 0)\n\t\t\t// Encoded URL?\n\t\t\ttry {\n\t\t\t\tURI = URLDecoder.decode(URI, false);\n\t\t\t} catch(URLEncodedFormatException e) {\n\t\t\t\tthrow new MalformedURLException(\"Invalid URI: no @ or /, or @ or / is escaped but there are invalid escapes\");\n\t\t\t}\n\t\t\n\t\tURI = URI_PREFIX.matcher(URI).replaceFirst(\"\");\n\t\t\t\n\t\t// decode keyType\n\t\tint atchar = URI.indexOf('@');\n\t\tif(atchar == -1)\n\t\t\tthrow new MalformedURLException(\"There is no @ in that URI! (\" + URI + ')');\n\n\t\tString _keyType = URI.substring(0, atchar).toUpperCase();\n\t\tURI = URI.substring(atchar + 1);\n\t\t\n\t\tboolean validKeyType = false;\n\t\tfor(int i = 0; i < VALID_KEY_TYPES.length; i++) {\n\t\t\tif (_keyType.equals(VALID_KEY_TYPES[i])) {\n\t\t\t\tvalidKeyType = true;\n\t\t\t\t_keyType = VALID_KEY_TYPES[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tkeyType = _keyType;\n\t\tif(!validKeyType)\n\t\t\tthrow new MalformedURLException(\"Invalid key type: \" + keyType);\n\n\t\tboolean isSSK = \"SSK\".equals(keyType);\n\t\tboolean isUSK = \"USK\".equals(keyType);\n\t\tboolean isKSK = \"KSK\".equals(keyType);\n\n\t\t// decode metaString\n\t\tArrayList<String> sv = null;\n\t\tint slash2;\n\t\tsv = new ArrayList<String>();\n\t\tif (isKSK) URI = \"/\" + URI; // ensure that KSK docNames are decoded\n\t\twhile ((slash2 = URI.lastIndexOf('/')) != -1) {\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = URLDecoder.decode(URI.substring(slash2 + 1 /* \"/\".length() */), true);\n\t\t\t} catch(URLEncodedFormatException e) {\n\t\t\t\tMalformedURLException ue = new MalformedURLException(e.toString());\n\t\t\t\tue.initCause(e);\n\t\t\t\tthrow ue;\n\t\t\t}\n\t\t\tif(s != null)\n\t\t\t\tsv.add(s);\n\t\t\tURI = URI.substring(0, slash2);\n\t\t}\n\n\t\t// sv is *backwards*\n\t\t// this makes for more efficient handling\n\n\t\tif(isSSK || isUSK || isKSK) {\n\n\t\t\tif(sv.isEmpty())\n\t\t\t\tthrow new MalformedURLException(\"No docname for \" + keyType);\n\t\t\tdocName = sv.remove(sv.size() - 1);\n\t\t\tif(isUSK) {\n\t\t\t\tif(sv.isEmpty())\n\t\t\t\t\tthrow new MalformedURLException(\"No suggested edition number for USK\");\n\t\t\t\ttry {\n\t\t\t\t\tsuggestedEdition = Long.parseLong(sv.remove(sv.size() - 1));\n\t\t\t\t} catch(NumberFormatException e) {\n\t\t\t\t\tMalformedURLException e1 = new MalformedURLException(\"Invalid suggested edition: \" + e);\n\t\t\t\t\te1.initCause(e);\n\t\t\t\t\tthrow e1;\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tsuggestedEdition = -1;\n\t\t} else {\n\t\t\t// docName not necessary, nor is it supported, for CHKs.\n\t\t\tdocName = null;\n\t\t\tsuggestedEdition = -1;\n\t\t}\n\n\t\tif(!sv.isEmpty()) {\n\t\t\tmetaStr = new String[sv.size()];\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tmetaStr[i] = sv.get(metaStr.length - 1 - i).intern();\n\t\t\t\tif(metaStr[i] == null)\n\t\t\t\t\tthrow new NullPointerException();\n\t\t\t}\n\t\t} else\n\t\t\tmetaStr = null;\n\n\t\tif(isKSK) {\n\t\t\troutingKey = extra = cryptoKey = null;\n\t\t\treturn;\n\t\t}\n\n\t\t// strip 'file extensions' from CHKs\n\t\t// added by aum (david@rebirthing.co.nz)\n\t\tif(\"CHK\".equals(keyType))\n\t\t\tURI = URI.split(\"[.]\")[0];\n\n\t\t// URI now contains: routingKey[,cryptoKey][,metaInfo]\n\t\tStringTokenizer st = new StringTokenizer(URI, \",\");\n\t\ttry {\n\t\t\tif(st.hasMoreTokens())\n\t\t\t\troutingKey = Base64.decode(st.nextToken());\n\t\t\telse {\n\t\t\t\troutingKey = cryptoKey = extra = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!st.hasMoreTokens()) {\n\t\t\t\tcryptoKey = extra = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Can be cryptokey or name-value pair.\n\t\t\tString t = st.nextToken();\n\t\t\tcryptoKey = Base64.decode(t);\n\t\t\tif(!st.hasMoreTokens()) {\n\t\t\t\textra = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textra = Base64.decode(st.nextToken());\n\n\t\t} catch(IllegalBase64Exception e) {\n\t\t\tthrow new MalformedURLException(\"Invalid Base64 quantity: \" + e);\n\t\t}\n\t\tif (logMINOR) Logger.minor(this, \"Created from parse: \"+toString()+\" from \"+URI, new Exception(\"debug\"));\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Write a binary representation of this URI, with a short length, so it can be passed over if necessary.\n\t * @param dos The stream to write to.\n\t * @throws MalformedURLException If the key could not be written because of inconsistencies or other\n\t * problems in the key itself.\n\t * @throws IOException If an error occurred while writing the key.\n\t */\n\tpublic void writeFullBinaryKeyWithLength(DataOutputStream dos) throws IOException {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputStream ndos = new DataOutputStream(baos);\n\t\twriteFullBinaryKey(ndos);\n\t\tndos.close();\n\t\tbyte[] data = baos.toByteArray();\n\t\tif(data.length > Short.MAX_VALUE)\n\t\t\tthrow new MalformedURLException(\"Full key too long: \" + data.length + \" - \" + this);\n\t\tdos.writeShort((short) data.length);\n\t\tif(Logger.shouldLog(Logger.MINOR, FreenetURI.class))\n\t\t\tLogger.minor(this, \"Written \" + data.length + \" bytes\");\n\t\tdos.write(data);\n\t}","id":103614,"modified_method":"/**\n\t * Write a binary representation of this URI, with a short length, so it can be passed over if necessary.\n\t * @param dos The stream to write to.\n\t * @throws MalformedURLException If the key could not be written because of inconsistencies or other\n\t * problems in the key itself.\n\t * @throws IOException If an error occurred while writing the key.\n\t */\n\tpublic void writeFullBinaryKeyWithLength(DataOutputStream dos) throws IOException {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputStream ndos = new DataOutputStream(baos);\n\t\twriteFullBinaryKey(ndos);\n\t\tndos.close();\n\t\tbyte[] data = baos.toByteArray();\n\t\tif(data.length > Short.MAX_VALUE)\n\t\t\tthrow new MalformedURLException(\"Full key too long: \" + data.length + \" - \" + this);\n\t\tdos.writeShort((short) data.length);\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Written \" + data.length + \" bytes\");\n\t\tdos.write(data);\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public String getPreferredFilename() {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tLogger.minor(this, \"Getting preferred filename for \" + this);\n\t\tArrayList<String> names = new ArrayList<String>();\n\t\tif(keyType != null && (keyType.equals(\"KSK\") || keyType.equals(\"SSK\") || keyType.equals(\"USK\"))) {\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Adding docName: \" + docName);\n\t\t\tnames.add(docName);\n\t\t\tif(keyType.equals(\"USK\"))\n\t\t\t\tnames.add(Long.toString(suggestedEdition));\n\t\t}\n\t\tif(metaStr != null)\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Adding metaString \" + i + \": \" + metaStr[i]);\n\t\t\t\tnames.add(metaStr[i]);\n\t\t\t}\n\t\tStringBuilder out = new StringBuilder();\n\t\tfor(int i = 0; i < names.size(); i++) {\n\t\t\tString s = names.get(i);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"name \" + i + \" = \" + s);\n\t\t\ts = FileUtil.sanitize(s);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Sanitized name \" + i + \" = \" + s);\n\t\t\tif(s.length() > 0) {\n\t\t\t\tif(out.length() > 0)\n\t\t\t\t\tout.append('-');\n\t\t\t\tout.append(s);\n\t\t\t}\n\t\t}\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"out = \" + out.toString());\n\t\tif(out.length() == 0) {\n\t\t\tif(routingKey != null) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Returning base64 encoded routing key\");\n\t\t\t\treturn Base64.encode(routingKey);\n\t\t\t}\n\t\t\treturn \"unknown\";\n\t\t}\n\t\treturn out.toString();\n\t}","id":103615,"modified_method":"public String getPreferredFilename() {\n\t\tif (logMINOR)\n\t\t\tLogger.minor(this, \"Getting preferred filename for \" + this);\n\t\tArrayList<String> names = new ArrayList<String>();\n\t\tif(keyType != null && (keyType.equals(\"KSK\") || keyType.equals(\"SSK\") || keyType.equals(\"USK\"))) {\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Adding docName: \" + docName);\n\t\t\tnames.add(docName);\n\t\t\tif(keyType.equals(\"USK\"))\n\t\t\t\tnames.add(Long.toString(suggestedEdition));\n\t\t}\n\t\tif(metaStr != null)\n\t\t\tfor(int i = 0; i < metaStr.length; i++) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Adding metaString \" + i + \": \" + metaStr[i]);\n\t\t\t\tnames.add(metaStr[i]);\n\t\t\t}\n\t\tStringBuilder out = new StringBuilder();\n\t\tfor(int i = 0; i < names.size(); i++) {\n\t\t\tString s = names.get(i);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"name \" + i + \" = \" + s);\n\t\t\ts = FileUtil.sanitize(s);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Sanitized name \" + i + \" = \" + s);\n\t\t\tif(s.length() > 0) {\n\t\t\t\tif(out.length() > 0)\n\t\t\t\t\tout.append('-');\n\t\t\t\tout.append(s);\n\t\t\t}\n\t\t}\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"out = \" + out.toString());\n\t\tif(out.length() == 0) {\n\t\t\tif(routingKey != null) {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Returning base64 encoded routing key\");\n\t\t\t\treturn Base64.encode(routingKey);\n\t\t\t}\n\t\t\treturn \"unknown\";\n\t\t}\n\t\treturn out.toString();\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public static FreenetURI readFullBinaryKeyWithLength(DataInputStream dis) throws IOException {\n\t\tint len = dis.readShort();\n\t\tbyte[] buf = new byte[len];\n\t\tdis.readFully(buf);\n\t\tif(Logger.shouldLog(Logger.MINOR, FreenetURI.class))\n\t\t\tLogger.minor(FreenetURI.class, \"Read \" + len + \" bytes for key\");\n\t\treturn fromFullBinaryKey(buf);\n\t}","id":103616,"modified_method":"public static FreenetURI readFullBinaryKeyWithLength(DataInputStream dis) throws IOException {\n\t\tint len = dis.readShort();\n\t\tbyte[] buf = new byte[len];\n\t\tdis.readFully(buf);\n\t\tif(logMINOR) Logger.minor(FreenetURI.class, \"Read \" + len + \" bytes for key\");\n\t\treturn fromFullBinaryKey(buf);\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public FreenetURI(FreenetURI uri) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tkeyType = uri.keyType;\n\t\tdocName = uri.docName;\n\t\tif(uri.metaStr != null) {\n\t\t\tmetaStr = new String[uri.metaStr.length];\n\t\t\tSystem.arraycopy(uri.metaStr, 0, metaStr, 0, metaStr.length);\n\t\t} else metaStr = null;\n\t\tif(uri.routingKey != null) {\n\t\t\troutingKey = new byte[uri.routingKey.length];\n\t\t\tSystem.arraycopy(uri.routingKey, 0, routingKey, 0, routingKey.length);\n\t\t} else\n\t\t\troutingKey = null;\n\t\tif(uri.cryptoKey != null) {\n\t\t\tcryptoKey = new byte[uri.cryptoKey.length];\n\t\t\tSystem.arraycopy(uri.cryptoKey, 0, cryptoKey, 0, cryptoKey.length);\n\t\t} else\n\t\t\tcryptoKey = null;\n\t\tif(uri.extra != null) {\n\t\t\textra = new byte[uri.extra.length];\n\t\t\tSystem.arraycopy(uri.extra, 0, extra, 0, extra.length);\n\t\t} else\n\t\t\textra = null;\n\t\tthis.suggestedEdition = uri.suggestedEdition;\n\t\tLogger.minor(this, \"Copied: \"+toString()+\" from \"+uri.toString(), new Exception(\"debug\"));\n\t}","id":103617,"modified_method":"public FreenetURI(FreenetURI uri) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tkeyType = uri.keyType;\n\t\tdocName = uri.docName;\n\t\tif(uri.metaStr != null) {\n\t\t\tmetaStr = new String[uri.metaStr.length];\n\t\t\tSystem.arraycopy(uri.metaStr, 0, metaStr, 0, metaStr.length);\n\t\t} else metaStr = null;\n\t\tif(uri.routingKey != null) {\n\t\t\troutingKey = new byte[uri.routingKey.length];\n\t\t\tSystem.arraycopy(uri.routingKey, 0, routingKey, 0, routingKey.length);\n\t\t} else\n\t\t\troutingKey = null;\n\t\tif(uri.cryptoKey != null) {\n\t\t\tcryptoKey = new byte[uri.cryptoKey.length];\n\t\t\tSystem.arraycopy(uri.cryptoKey, 0, cryptoKey, 0, cryptoKey.length);\n\t\t} else\n\t\t\tcryptoKey = null;\n\t\tif(uri.extra != null) {\n\t\t\textra = new byte[uri.extra.length];\n\t\t\tSystem.arraycopy(uri.extra, 0, extra, 0, extra.length);\n\t\t} else\n\t\t\textra = null;\n\t\tthis.suggestedEdition = uri.suggestedEdition;\n\t\tif(logMINOR) Logger.minor(this, \"Copied: \"+toString()+\" from \"+uri.toString(), new Exception(\"debug\"));\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"/** USK constructor from components. */\n\tpublic FreenetURI(byte[] pubKeyHash, byte[] cryptoKey, byte[] extra, String siteName, long suggestedEdition2) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = \"USK\";\n\t\tthis.routingKey = pubKeyHash;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra;\n\t\tthis.docName = siteName;\n\t\tthis.suggestedEdition = suggestedEdition2;\n\t\tmetaStr = null;\n\t\tLogger.minor(this, \"Created from components (USK): \"+toString(), new Exception(\"debug\"));\n\t}","id":103618,"modified_method":"/** USK constructor from components. */\n\tpublic FreenetURI(byte[] pubKeyHash, byte[] cryptoKey, byte[] extra, String siteName, long suggestedEdition2) {\n//\t\tthis.uniqueHashCode = super.hashCode();\n\t\tthis.keyType = \"USK\";\n\t\tthis.routingKey = pubKeyHash;\n\t\tthis.cryptoKey = cryptoKey;\n\t\tthis.extra = extra;\n\t\tthis.docName = siteName;\n\t\tthis.suggestedEdition = suggestedEdition2;\n\t\tmetaStr = null;\n\t\tif (logMINOR) Logger.minor(this, \"Created from components (USK): \"+toString(), new Exception(\"debug\"));\n\t}","commit_id":"31de759f499e4d39bc171856f246c573a0af7b1c","url":"https://github.com/freenet/fred"},{"original_method":"public void deactivate(ObjectContainer container) {\n\t\tif(Logger.shouldLog(Logger.MINOR, this)) Logger.minor(this, \"Deactivating FECJob...\");\n\t\tif(dataBlockStatus != null) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++)\n\t\t\t\tcontainer.deactivate(dataBlockStatus[i], 2);\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++)\n\t\t\t\tcontainer.deactivate(checkBlockStatus[i], 2);\n\t\t}\n\t\tif(dataBlocks != null) {\n\t\t\tfor(int i=0;i<dataBlocks.length;i++)\n\t\t\t\tcontainer.deactivate(dataBlocks[i], 1);\n\t\t}\n\t\tif(checkBlocks != null) {\n\t\t\tfor(int i=0;i<checkBlocks.length;i++)\n\t\t\t\tcontainer.deactivate(checkBlocks[i], 1);\n\t\t}\n\t}","id":103619,"modified_method":"public void deactivate(ObjectContainer container) {\n\t\tif(logMINOR) Logger.minor(this, \"Deactivating FECJob...\");\n\t\tif(dataBlockStatus != null) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++)\n\t\t\t\tcontainer.deactivate(dataBlockStatus[i], 2);\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++)\n\t\t\t\tcontainer.deactivate(checkBlockStatus[i], 2);\n\t\t}\n\t\tif(dataBlocks != null) {\n\t\t\tfor(int i=0;i<dataBlocks.length;i++)\n\t\t\t\tcontainer.deactivate(dataBlocks[i], 1);\n\t\t}\n\t\tif(checkBlocks != null) {\n\t\t\tfor(int i=0;i<checkBlocks.length;i++)\n\t\t\t\tcontainer.deactivate(checkBlocks[i], 1);\n\t\t}\n\t}","commit_id":"0768479319a8ca55eb704af678a23d6e8a055300","url":"https://github.com/freenet/fred"},{"original_method":"public boolean activateForExecution(ObjectContainer container) {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(logMINOR) Logger.minor(this, \"Activating FECJob...\");\n\t\tif(dataBlockStatus != null && logMINOR) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++)\n\t\t\t\tLogger.minor(this, \"Data block status \"+i+\": \"+dataBlockStatus[i]+\" (before activation)\");\n\t\t}\n\t\tcontainer.activate(this, 2);\n\t\tboolean hasDataBlocks = false;\n\t\tint countDataBlocks = 0;\n\t\tint countNullDataBlocks = 0;\n\t\tif(dataBlockStatus != null) {\n\t\t\thasDataBlocks = true;\n\t\t\tcountDataBlocks = dataBlockStatus.length;\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tcontainer.activate(dataBlockStatus[i], 2);\n\t\t\t\tif(dataBlockStatus[i] == null)\n\t\t\t\t\tcountNullDataBlocks++;\n\t\t\t}\n\t\t}\n\t\tif(dataBlockStatus != null && logMINOR) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++)\n\t\t\t\tLogger.minor(this, \"Data block status \"+i+\": \"+dataBlockStatus[i]+\" (after activation)\");\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++)\n\t\t\t\tcontainer.activate(checkBlockStatus[i], 2);\n\t\t}\n\t\tif(dataBlocks != null) {\n\t\t\thasDataBlocks = true;\n\t\t\tcountDataBlocks = dataBlocks.length;\n\t\t\tfor(int i=0;i<dataBlocks.length;i++) {\n\t\t\t\tcontainer.activate(dataBlocks[i], 1);\n\t\t\t\tLogger.minor(this, \"Data bucket \"+i+\": \"+dataBlocks[i]+\" (after activation)\");\n\t\t\t\tif(dataBlocks[i] == null)\n\t\t\t\t\tcountNullDataBlocks++;\n\t\t\t}\n\t\t}\n\t\tif(checkBlocks != null) {\n\t\t\tfor(int i=0;i<checkBlocks.length;i++)\n\t\t\t\tcontainer.activate(checkBlocks[i], 1);\n\t\t}\n\t\tif(!isADecodingJob) {\n\t\t\t// First find the target\n\t\t\tif(!hasDataBlocks) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: No data blocks or data block status\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(hasDataBlocks && countDataBlocks == 0) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: \"+countDataBlocks+\" blocks\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(hasDataBlocks && countNullDataBlocks > 0) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: \"+countDataBlocks+\" blocks but \"+countNullDataBlocks+\" are null!\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","id":103620,"modified_method":"public boolean activateForExecution(ObjectContainer container) {\n\t\tif(logMINOR) Logger.minor(this, \"Activating FECJob...\");\n\t\tif(dataBlockStatus != null && logMINOR) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Data block status \"+i+\": \"+dataBlockStatus[i]+\" (before activation)\");\n\t\t\t}\n\t\t}\n\t\tcontainer.activate(this, 2);\n\t\tboolean hasDataBlocks = false;\n\t\tint countDataBlocks = 0;\n\t\tint countNullDataBlocks = 0;\n\t\tif(dataBlockStatus != null) {\n\t\t\thasDataBlocks = true;\n\t\t\tcountDataBlocks = dataBlockStatus.length;\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tcontainer.activate(dataBlockStatus[i], 2);\n\t\t\t\tif(dataBlockStatus[i] == null)\n\t\t\t\t\tcountNullDataBlocks++;\n\t\t\t}\n\t\t}\n\t\tif(dataBlockStatus != null && logMINOR) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Data block status \"+i+\": \"+dataBlockStatus[i]+\" (after activation)\");\n\t\t\t}\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++)\n\t\t\t\tcontainer.activate(checkBlockStatus[i], 2);\n\t\t}\n\t\tif(dataBlocks != null) {\n\t\t\thasDataBlocks = true;\n\t\t\tcountDataBlocks = dataBlocks.length;\n\t\t\tfor(int i=0;i<dataBlocks.length;i++) {\n\t\t\t\tcontainer.activate(dataBlocks[i], 1);\n\t\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Data bucket \"+i+\": \"+dataBlocks[i]+\" (after activation)\");\n\t\t\t\tif(dataBlocks[i] == null)\n\t\t\t\t\tcountNullDataBlocks++;\n\t\t\t}\n\t\t}\n\t\tif(checkBlocks != null) {\n\t\t\tfor(int i=0;i<checkBlocks.length;i++)\n\t\t\t\tcontainer.activate(checkBlocks[i], 1);\n\t\t}\n\t\tif(!isADecodingJob) {\n\t\t\t// First find the target\n\t\t\tif(!hasDataBlocks) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: No data blocks or data block status\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(hasDataBlocks && countDataBlocks == 0) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: \"+countDataBlocks+\" blocks\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(hasDataBlocks && countNullDataBlocks > 0) {\n\t\t\t\tLogger.error(this, \"Invalid job: Encoding: \"+countDataBlocks+\" blocks but \"+countNullDataBlocks+\" are null!\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}","commit_id":"0768479319a8ca55eb704af678a23d6e8a055300","url":"https://github.com/freenet/fred"},{"original_method":"public void storeBlockStatuses(ObjectContainer container) {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(logMINOR) Logger.minor(this, \"Storing block statuses\");\n\t\tif(dataBlockStatus != null) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tSplitfileBlock block = dataBlockStatus[i];\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Storing data block \"+i+\": \"+block);\n\t\t\t\tblock.storeTo(container);\n\t\t\t}\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++) {\n\t\t\t\tSplitfileBlock block = checkBlockStatus[i];\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Storing check block \"+i+\": \"+block);\n\t\t\t\tblock.storeTo(container);\n\t\t\t}\n\t\t}\n\t}","id":103621,"modified_method":"public void storeBlockStatuses(ObjectContainer container) {\n\t\tif(logMINOR) Logger.minor(this, \"Storing block statuses\");\n\t\tif(dataBlockStatus != null) {\n\t\t\tfor(int i=0;i<dataBlockStatus.length;i++) {\n\t\t\t\tSplitfileBlock block = dataBlockStatus[i];\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Storing data block \"+i+\": \"+block);\n\t\t\t\tblock.storeTo(container);\n\t\t\t}\n\t\t}\n\t\tif(checkBlockStatus != null) {\n\t\t\tfor(int i=0;i<checkBlockStatus.length;i++) {\n\t\t\t\tSplitfileBlock block = checkBlockStatus[i];\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Storing check block \"+i+\": \"+block);\n\t\t\t\tblock.storeTo(container);\n\t\t\t}\n\t\t}\n\t}","commit_id":"0768479319a8ca55eb704af678a23d6e8a055300","url":"https://github.com/freenet/fred"},{"original_method":"public void cancel(ObjectContainer container, ClientContext context) {\n\t\tboolean logMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tif(logMINOR) Logger.minor(this, \"Cancelling \"+this, new Exception(\"debug\"));\n\t\tClientGetState s;\n\t\tsynchronized(this) {\n\t\t\tif(super.cancel()) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Already cancelled \"+this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ts = currentState;\n\t\t}\n\t\tif(persistent())\n\t\t\tcontainer.store(this);\n\t\tif(s != null) {\n\t\t\tif(persistent())\n\t\t\t\tcontainer.activate(s, 1);\n\t\t\tif(logMINOR) Logger.minor(this, \"Cancelling \"+s+\" for \"+this+\" instance \"+super.toString());\n\t\t\ts.cancel(container, context);\n\t\t\tif(persistent())\n\t\t\t\tcontainer.deactivate(s, 1);\n\t\t} else {\n\t\t\tif(logMINOR) Logger.minor(this, \"Nothing to cancel\");\n\t\t}\n\t}","id":103622,"modified_method":"public void cancel(ObjectContainer container, ClientContext context) {\n\t\tif(logMINOR) Logger.minor(this, \"Cancelling \"+this, new Exception(\"debug\"));\n\t\tClientGetState s;\n\t\tsynchronized(this) {\n\t\t\tif(super.cancel()) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Already cancelled \"+this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ts = currentState;\n\t\t}\n\t\tif(persistent())\n\t\t\tcontainer.store(this);\n\t\tif(s != null) {\n\t\t\tif(persistent())\n\t\t\t\tcontainer.activate(s, 1);\n\t\t\tif(logMINOR) Logger.minor(this, \"Cancelling \"+s+\" for \"+this+\" instance \"+super.toString());\n\t\t\ts.cancel(container, context);\n\t\t\tif(persistent())\n\t\t\t\tcontainer.deactivate(s, 1);\n\t\t} else {\n\t\t\tif(logMINOR) Logger.minor(this, \"Nothing to cancel\");\n\t\t}\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public boolean start(boolean restart, FreenetURI overrideURI, ObjectContainer container, ClientContext context) throws FetchException {\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Starting \"+this+\" persistent=\"+persistent());\n\t\ttry {\n\t\t\t// FIXME synchronization is probably unnecessary.\n\t\t\t// But we DEFINITELY do not want to synchronize while calling currentState.schedule(),\n\t\t\t// which can call onSuccess and thereby almost anything.\n\t\t\tsynchronized(this) {\n\t\t\t\tif(overrideURI != null) uri = overrideURI;\n\t\t\t\tif(finished) {\n\t\t\t\t\tif(!restart) return false;\n\t\t\t\t\tcurrentState = null;\n\t\t\t\t\tcancelled = false;\n\t\t\t\t\tfinished = false;\n\t\t\t\t}\n\t\t\t\tcurrentState = SingleFileFetcher.create(this, this, \n\t\t\t\t\t\turi, ctx, actx, ctx.maxNonSplitfileRetries, 0, false, -1, true,\n\t\t\t\t\t\treturnBucket, true, container, context);\n\t\t\t}\n\t\t\tif(cancelled) cancel();\n\t\t\t// schedule() may deactivate stuff, so store it now.\n\t\t\tif(persistent()) {\n\t\t\t\tcontainer.store(currentState);\n\t\t\t\tcontainer.store(this);\n\t\t\t}\n\t\t\tif(currentState != null && !finished) {\n\t\t\t\tif(binaryBlobBucket != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbinaryBlobStream = new DataOutputStream(new BufferedOutputStream(binaryBlobBucket.getOutputStream()));\n\t\t\t\t\t\tBinaryBlob.writeBinaryBlobHeader(binaryBlobStream);\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, \"Failed to open binary blob bucket\", e), null, container, context);\n\t\t\t\t\t\tif(persistent())\n\t\t\t\t\t\t\tcontainer.store(this);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentState.schedule(container, context);\n\t\t\t}\n\t\t\tif(cancelled) cancel();\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new FetchException(FetchException.INVALID_URI, e);\n\t\t} catch (KeyListenerConstructionException e) {\n\t\t\tonFailure(e.getFetchException(), currentState, container, context);\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n\t\t\tcontainer.deactivate(currentState, 1);\n\t\t}\n\t\treturn true;\n\t}","id":103623,"modified_method":"public boolean start(boolean restart, FreenetURI overrideURI, ObjectContainer container, ClientContext context) throws FetchException {\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Starting \"+this+\" persistent=\"+persistent());\n\t\ttry {\n\t\t\t// FIXME synchronization is probably unnecessary.\n\t\t\t// But we DEFINITELY do not want to synchronize while calling currentState.schedule(),\n\t\t\t// which can call onSuccess and thereby almost anything.\n\t\t\tsynchronized(this) {\n\t\t\t\tif(overrideURI != null) uri = overrideURI;\n\t\t\t\tif(finished) {\n\t\t\t\t\tif(!restart) return false;\n\t\t\t\t\tcurrentState = null;\n\t\t\t\t\tcancelled = false;\n\t\t\t\t\tfinished = false;\n\t\t\t\t}\n\t\t\t\tcurrentState = SingleFileFetcher.create(this, this, \n\t\t\t\t\t\turi, ctx, actx, ctx.maxNonSplitfileRetries, 0, false, -1, true,\n\t\t\t\t\t\treturnBucket, true, container, context);\n\t\t\t}\n\t\t\tif(cancelled) cancel();\n\t\t\t// schedule() may deactivate stuff, so store it now.\n\t\t\tif(persistent()) {\n\t\t\t\tcontainer.store(currentState);\n\t\t\t\tcontainer.store(this);\n\t\t\t}\n\t\t\tif(currentState != null && !finished) {\n\t\t\t\tif(binaryBlobBucket != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbinaryBlobStream = new DataOutputStream(new BufferedOutputStream(binaryBlobBucket.getOutputStream()));\n\t\t\t\t\t\tBinaryBlob.writeBinaryBlobHeader(binaryBlobStream);\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, \"Failed to open binary blob bucket\", e), null, container, context);\n\t\t\t\t\t\tif(persistent())\n\t\t\t\t\t\t\tcontainer.store(this);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentState.schedule(container, context);\n\t\t\t}\n\t\t\tif(cancelled) cancel();\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new FetchException(FetchException.INVALID_URI, e);\n\t\t} catch (KeyListenerConstructionException e) {\n\t\t\tonFailure(e.getFetchException(), currentState, container, context);\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n\t\t\tcontainer.deactivate(currentState, 1);\n\t\t}\n\t\treturn true;\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public boolean canRestart() {\n\t\tif(currentState != null && !finished) {\n\t\t\tLogger.minor(this, \"Cannot restart because not finished for \"+uri);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}","id":103624,"modified_method":"public boolean canRestart() {\n\t\tif(currentState != null && !finished) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Cannot restart because not finished for \"+uri);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public void onSuccess(FetchResult result, ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Succeeded from \"+state+\" on \"+this);\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\tif(!closeBinaryBlobStream(container, context)) return;\n\t\tsynchronized(this) {\n\t\t\tfinished = true;\n\t\t\tcurrentState = null;\n\t\t}\n\t\t// Rest of method does not need to be synchronized.\n\t\t// Variables will be updated on exit of method, and the only thing that is\n\t\t// set is the returnBucket and the result. Not locking not only prevents\n\t\t// nested locking resulting in deadlocks, it also prevents long locks due to\n\t\t// doing massive encrypted I/Os while holding a lock.\n\t\tif((returnBucket != null) && (result.asBucket() != returnBucket)) {\n\t\t\tBucket from = result.asBucket();\n\t\t\tBucket to = returnBucket;\n\t\t\ttry {\n\t\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\t\tLogger.minor(this, \"Copying - returnBucket not respected by client.async\");\n\t\t\t\tif(persistent()) {\n\t\t\t\t\tcontainer.activate(from, 5);\n\t\t\t\t\tcontainer.activate(returnBucket, 5);\n\t\t\t\t}\n\t\t\t\tBucketTools.copy(from, to);\n\t\t\t\tfrom.free();\n\t\t\t\tif(persistent())\n\t\t\t\t\tfrom.removeFrom(container);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLogger.error(this, \"Error copying from \"+from+\" to \"+to+\" : \"+e.toString(), e);\n\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, e.toString()), state /* not strictly to blame, but we're not ako ClientGetState... */, container, context);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = new FetchResult(result, to);\n\t\t} else {\n\t\t\tif(returnBucket != null && Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\tLogger.minor(this, \"client.async returned data in returnBucket\");\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.activate(state, 1);\n\t\t\tstate.removeFrom(container, context);\n\t\t}\n\t\tFetchResult res = result;\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n\t\t\tcontainer.activate(clientCallback, 1);\n\t\t}\n\t\tclientCallback.onSuccess(res, ClientGetter.this, container);\n\t}","id":103625,"modified_method":"public void onSuccess(FetchResult result, ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Succeeded from \"+state+\" on \"+this);\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\tif(!closeBinaryBlobStream(container, context)) return;\n\t\tsynchronized(this) {\n\t\t\tfinished = true;\n\t\t\tcurrentState = null;\n\t\t}\n\t\t// Rest of method does not need to be synchronized.\n\t\t// Variables will be updated on exit of method, and the only thing that is\n\t\t// set is the returnBucket and the result. Not locking not only prevents\n\t\t// nested locking resulting in deadlocks, it also prevents long locks due to\n\t\t// doing massive encrypted I/Os while holding a lock.\n\t\tif((returnBucket != null) && (result.asBucket() != returnBucket)) {\n\t\t\tBucket from = result.asBucket();\n\t\t\tBucket to = returnBucket;\n\t\t\ttry {\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Copying - returnBucket not respected by client.async\");\n\t\t\t\tif(persistent()) {\n\t\t\t\t\tcontainer.activate(from, 5);\n\t\t\t\t\tcontainer.activate(returnBucket, 5);\n\t\t\t\t}\n\t\t\t\tBucketTools.copy(from, to);\n\t\t\t\tfrom.free();\n\t\t\t\tif(persistent())\n\t\t\t\t\tfrom.removeFrom(container);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLogger.error(this, \"Error copying from \"+from+\" to \"+to+\" : \"+e.toString(), e);\n\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, e.toString()), state /* not strictly to blame, but we're not ako ClientGetState... */, container, context);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = new FetchResult(result, to);\n\t\t} else {\n\t\t\tif(returnBucket != null && logMINOR)\n\t\t\t\tLogger.minor(this, \"client.async returned data in returnBucket\");\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.activate(state, 1);\n\t\t\tstate.removeFrom(container, context);\n\t\t}\n\t\tFetchResult res = result;\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n\t\t\tcontainer.activate(clientCallback, 1);\n\t\t}\n\t\tclientCallback.onSuccess(res, ClientGetter.this, container);\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public void onTransition(ClientGetState oldState, ClientGetState newState, ObjectContainer container) {\n\t\tsynchronized(this) {\n\t\t\tif(currentState == oldState) {\n\t\t\t\tcurrentState = newState;\n\t\t\t\tLogger.minor(this, \"Transition: \"+oldState+\" -> \"+newState+\" on \"+this+\" persistent = \"+persistent()+\" instance = \"+super.toString(), new Exception(\"debug\"));\n\t\t\t} else {\n\t\t\t\tLogger.minor(this, \"Ignoring transition: \"+oldState+\" -> \"+newState+\" because current = \"+currentState+\" on \"+this+\" persistent = \"+persistent(), new Exception(\"debug\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n//\t\t\tcontainer.deactivate(this, 1);\n//\t\t\tSystem.gc();\n//\t\t\tSystem.runFinalization();\n//\t\t\tSystem.gc();\n//\t\t\tSystem.runFinalization();\n//\t\t\tcontainer.activate(this, 1);\n//\t\t\tsynchronized(this) {\n//\t\t\t\tLogger.minor(this, \"Post transition: \"+currentState);\n//\t\t\t}\n\t\t}\n\t}","id":103626,"modified_method":"public void onTransition(ClientGetState oldState, ClientGetState newState, ObjectContainer container) {\n\t\tsynchronized(this) {\n\t\t\tif(currentState == oldState) {\n\t\t\t\tcurrentState = newState;\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Transition: \"+oldState+\" -> \"+newState+\" on \"+this+\" persistent = \"+persistent()+\" instance = \"+super.toString(), new Exception(\"debug\"));\n\t\t\t} else {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Ignoring transition: \"+oldState+\" -> \"+newState+\" because current = \"+currentState+\" on \"+this+\" persistent = \"+persistent(), new Exception(\"debug\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(persistent()) {\n\t\t\tcontainer.store(this);\n//\t\t\tcontainer.deactivate(this, 1);\n//\t\t\tSystem.gc();\n//\t\t\tSystem.runFinalization();\n//\t\t\tSystem.gc();\n//\t\t\tSystem.runFinalization();\n//\t\t\tcontainer.activate(this, 1);\n//\t\t\tsynchronized(this) {\n//\t\t\t\tLogger.minor(this, \"Post transition: \"+currentState);\n//\t\t\t}\n\t\t}\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"void addKeyToBinaryBlob(ClientKeyBlock block, ObjectContainer container, ClientContext context) {\n\t\tif(binaryBlobKeysAddedAlready == null) return;\n\t\tif(persistent()) {\n\t\t\tcontainer.activate(binaryBlobStream, 1);\n\t\t\tcontainer.activate(binaryBlobKeysAddedAlready, 1);\n\t\t}\n\t\tif(Logger.shouldLog(Logger.MINOR, this)) \n\t\t\tLogger.minor(this, \"Adding key \"+block.getClientKey().getURI()+\" to \"+this, new Exception(\"debug\"));\n\t\tKey key = block.getKey();\n\t\tsynchronized(binaryBlobKeysAddedAlready) {\n\t\t\tif(binaryBlobStream == null) return;\n\t\t\tif(binaryBlobKeysAddedAlready.contains(key)) return;\n\t\t\tbinaryBlobKeysAddedAlready.add(key);\n\t\t\ttry {\n\t\t\t\tBinaryBlob.writeKey(binaryBlobStream, block, key);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLogger.error(this, \"Failed to write key to binary blob stream: \"+e, e);\n\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, \"Failed to write key to binary blob stream: \"+e), null, container, context);\n\t\t\t\tbinaryBlobStream = null;\n\t\t\t\tbinaryBlobKeysAddedAlready.clear();\n\t\t\t}\n\t\t}\n\t}","id":103627,"modified_method":"void addKeyToBinaryBlob(ClientKeyBlock block, ObjectContainer container, ClientContext context) {\n\t\tif(binaryBlobKeysAddedAlready == null) return;\n\t\tif(persistent()) {\n\t\t\tcontainer.activate(binaryBlobStream, 1);\n\t\t\tcontainer.activate(binaryBlobKeysAddedAlready, 1);\n\t\t}\n\t\tif(logMINOR) \n\t\t\tLogger.minor(this, \"Adding key \"+block.getClientKey().getURI()+\" to \"+this, new Exception(\"debug\"));\n\t\tKey key = block.getKey();\n\t\tsynchronized(binaryBlobKeysAddedAlready) {\n\t\t\tif(binaryBlobStream == null) return;\n\t\t\tif(binaryBlobKeysAddedAlready.contains(key)) return;\n\t\t\tbinaryBlobKeysAddedAlready.add(key);\n\t\t\ttry {\n\t\t\t\tBinaryBlob.writeKey(binaryBlobStream, block, key);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLogger.error(this, \"Failed to write key to binary blob stream: \"+e, e);\n\t\t\t\tonFailure(new FetchException(FetchException.BUCKET_ERROR, \"Failed to write key to binary blob stream: \"+e), null, container, context);\n\t\t\t\tbinaryBlobStream = null;\n\t\t\t\tbinaryBlobKeysAddedAlready.clear();\n\t\t\t}\n\t\t}\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public void onBlockSetFinished(ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Set finished\", new Exception(\"debug\"));\n\t\tblockSetFinalized(container, context);\n\t}","id":103628,"modified_method":"public void onBlockSetFinished(ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Set finished\", new Exception(\"debug\"));\n\t\tblockSetFinalized(container, context);\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public void onFailure(FetchException e, ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\tLogger.minor(this, \"Failed from \"+state+\" : \"+e+\" on \"+this, e);\n\t\tcloseBinaryBlobStream(container, context);\n\t\tif(persistent() && state != null) {\n\t\t\tcontainer.activate(state, 1);\n\t\t\tstate.removeFrom(container, context);\n\t\t}\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\twhile(true) {\n\t\t\tif(e.mode == FetchException.ARCHIVE_RESTART) {\n\t\t\t\tint ar;\n\t\t\t\tsynchronized(this) {\n\t\t\t\t\tarchiveRestarts++;\n\t\t\t\t\tar = archiveRestarts;\n\t\t\t\t}\n\t\t\t\tif(Logger.shouldLog(Logger.MINOR, this))\n\t\t\t\t\tLogger.minor(this, \"Archive restart on \"+this+\" ar=\"+ar);\n\t\t\t\tif(ar > ctx.maxArchiveRestarts)\n\t\t\t\t\te = new FetchException(FetchException.TOO_MANY_ARCHIVE_RESTARTS);\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstart(container, context);\n\t\t\t\t\t} catch (FetchException e1) {\n\t\t\t\t\t\te = e1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(e.errorCodes != null && e.errorCodes.isOneCodeOnly())\n\t\t\t\te = new FetchException(e.errorCodes.getFirstCode(), e);\n\t\t\tif(e.mode == FetchException.DATA_NOT_FOUND && super.successfulBlocks > 0)\n\t\t\t\te = new FetchException(e, FetchException.ALL_DATA_NOT_FOUND);\n\t\t\tLogger.minor(this, \"onFailure(\"+e+\", \"+state+\") on \"+this+\" for \"+uri, e);\n\t\t\tfinal FetchException e1 = e;\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\tclientCallback.onFailure(e1, ClientGetter.this, container);\n\t\t\treturn;\n\t\t}\n\t}","id":103629,"modified_method":"public void onFailure(FetchException e, ClientGetState state, ObjectContainer container, ClientContext context) {\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Failed from \"+state+\" : \"+e+\" on \"+this, e);\n\t\tcloseBinaryBlobStream(container, context);\n\t\tif(persistent() && state != null) {\n\t\t\tcontainer.activate(state, 1);\n\t\t\tstate.removeFrom(container, context);\n\t\t}\n\t\tif(persistent())\n\t\t\tcontainer.activate(uri, 5);\n\t\twhile(true) {\n\t\t\tif(e.mode == FetchException.ARCHIVE_RESTART) {\n\t\t\t\tint ar;\n\t\t\t\tsynchronized(this) {\n\t\t\t\t\tarchiveRestarts++;\n\t\t\t\t\tar = archiveRestarts;\n\t\t\t\t}\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"Archive restart on \"+this+\" ar=\"+ar);\n\t\t\t\tif(ar > ctx.maxArchiveRestarts)\n\t\t\t\t\te = new FetchException(FetchException.TOO_MANY_ARCHIVE_RESTARTS);\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstart(container, context);\n\t\t\t\t\t} catch (FetchException e1) {\n\t\t\t\t\t\te = e1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsynchronized(this) {\n\t\t\t\tfinished = true;\n\t\t\t\tcurrentState = null;\n\t\t\t}\n\t\t\tif(e.errorCodes != null && e.errorCodes.isOneCodeOnly())\n\t\t\t\te = new FetchException(e.errorCodes.getFirstCode(), e);\n\t\t\tif(e.mode == FetchException.DATA_NOT_FOUND && super.successfulBlocks > 0)\n\t\t\t\te = new FetchException(e, FetchException.ALL_DATA_NOT_FOUND);\n\t\t\tif(logMINOR) Logger.minor(this, \"onFailure(\"+e+\", \"+state+\") on \"+this+\" for \"+uri, e);\n\t\t\tfinal FetchException e1 = e;\n\t\t\tif(persistent())\n\t\t\t\tcontainer.store(this);\n\t\t\tclientCallback.onFailure(e1, ClientGetter.this, container);\n\t\t\treturn;\n\t\t}\n\t}","commit_id":"aa76a7965438a4baff9af55f41b52f87f21f8014","url":"https://github.com/freenet/fred"},{"original_method":"public <IFD extends IndexFieldData<?>> IFD getForField(FieldMapper<?> mapper) {\n        final FieldMapper.Names fieldNames = mapper.names();\n        final FieldDataType type = mapper.fieldDataType();\n        final boolean docValues = mapper.hasDocValues();\n        IndexFieldData<?> fieldData = loadedFieldData.get(fieldNames.indexName());\n        if (fieldData == null) {\n            synchronized (loadedFieldData) {\n                fieldData = loadedFieldData.get(fieldNames.indexName());\n                if (fieldData == null) {\n                    IndexFieldData.Builder builder = null;\n                    String format = type.getFormat(indexSettings);\n                    if (format != null && FieldDataType.DOC_VALUES_FORMAT_VALUE.equals(format) && !docValues) {\n                        logger.warn(\"field [\" + fieldNames.fullName() + \"] has no doc values, will use default field data format\");\n                        format = null;\n                    }\n                    if (format != null) {\n                        builder = buildersByTypeAndFormat.get(Tuple.tuple(type.getType(), format));\n                        if (builder == null) {\n                            logger.warn(\"failed to find format [\" + format + \"] for field [\" + fieldNames.fullName() + \"], will use default\");\n                        }\n                    }\n                    if (builder == null && docValues) {\n                        builder = docValuesBuildersByType.get(type.getType());\n                    }\n                    if (builder == null) {\n                        builder = buildersByType.get(type.getType());\n                    }\n                    if (builder == null) {\n                        throw new ElasticsearchIllegalArgumentException(\"failed to find field data builder for field \" + fieldNames.fullName() + \", and type \" + type.getType());\n                    }\n\n                    IndexFieldDataCache cache = fieldDataCaches.get(fieldNames.indexName());\n                    if (cache == null) {\n                        //  we default to node level cache, which in turn defaults to be unbounded\n                        // this means changing the node level settings is simple, just set the bounds there\n                        String cacheType = type.getSettings().get(\"cache\", indexSettings.get(\"index.fielddata.cache\", \"node\"));\n                        if (\"resident\".equals(cacheType)) {\n                            cache = new IndexFieldDataCache.Resident(indexService, fieldNames, type);\n                        } else if (\"soft\".equals(cacheType)) {\n                            cache = new IndexFieldDataCache.Soft(indexService, fieldNames, type);\n                        } else if (\"node\".equals(cacheType)) {\n                            cache = indicesFieldDataCache.buildIndexFieldDataCache(indexService, index, fieldNames, type);\n                        } else {\n                            throw new ElasticsearchIllegalArgumentException(\"cache type not supported [\" + cacheType + \"] for field [\" + fieldNames.fullName() + \"]\");\n                        }\n                        fieldDataCaches.put(fieldNames.indexName(), cache);\n                    }\n\n                    fieldData = builder.build(index, indexSettings, mapper, cache, circuitBreakerService, indexService.mapperService());\n                    loadedFieldData.put(fieldNames.indexName(), fieldData);\n                }\n            }\n        }\n        return (IFD) fieldData;\n    }","id":103630,"modified_method":"public <IFD extends IndexFieldData<?>> IFD getForField(FieldMapper<?> mapper) {\n        final FieldMapper.Names fieldNames = mapper.names();\n        final FieldDataType type = mapper.fieldDataType();\n        final boolean docValues = mapper.hasDocValues();\n        IndexFieldData<?> fieldData = loadedFieldData.get(fieldNames.indexName());\n        if (fieldData == null) {\n            synchronized (loadedFieldData) {\n                fieldData = loadedFieldData.get(fieldNames.indexName());\n                if (fieldData == null) {\n                    IndexFieldData.Builder builder = null;\n                    String format = type.getFormat(indexSettings);\n                    if (format != null && FieldDataType.DOC_VALUES_FORMAT_VALUE.equals(format) && !docValues) {\n                        logger.warn(\"field [\" + fieldNames.fullName() + \"] has no doc values, will use default field data format\");\n                        format = null;\n                    }\n                    if (format != null) {\n                        builder = buildersByTypeAndFormat.get(Tuple.tuple(type.getType(), format));\n                        if (builder == null) {\n                            logger.warn(\"failed to find format [\" + format + \"] for field [\" + fieldNames.fullName() + \"], will use default\");\n                        }\n                    }\n                    if (builder == null && docValues) {\n                        builder = docValuesBuildersByType.get(type.getType());\n                    }\n                    if (builder == null) {\n                        builder = buildersByType.get(type.getType());\n                    }\n                    if (builder == null) {\n                        throw new ElasticsearchIllegalArgumentException(\"failed to find field data builder for field \" + fieldNames.fullName() + \", and type \" + type.getType());\n                    }\n\n                    IndexFieldDataCache cache = fieldDataCaches.get(fieldNames.indexName());\n                    if (cache == null) {\n                        //  we default to node level cache, which in turn defaults to be unbounded\n                        // this means changing the node level settings is simple, just set the bounds there\n                        String cacheType = type.getSettings().get(\"cache\", indexSettings.get(\"index.fielddata.cache\", \"node\"));\n                        if (\"resident\".equals(cacheType)) {\n                            cache = new IndexFieldDataCache.Resident(indexService, fieldNames, type, indicesFieldDataCacheListener);\n                        } else if (\"soft\".equals(cacheType)) {\n                            cache = new IndexFieldDataCache.Soft(indexService, fieldNames, type, indicesFieldDataCacheListener);\n                        } else if (\"node\".equals(cacheType)) {\n                            cache = indicesFieldDataCache.buildIndexFieldDataCache(indexService, index, fieldNames, type);\n                        } else {\n                            throw new ElasticsearchIllegalArgumentException(\"cache type not supported [\" + cacheType + \"] for field [\" + fieldNames.fullName() + \"]\");\n                        }\n                        fieldDataCaches.put(fieldNames.indexName(), cache);\n                    }\n\n                    fieldData = builder.build(index, indexSettings, mapper, cache, circuitBreakerService, indexService.mapperService());\n                    loadedFieldData.put(fieldNames.indexName(), fieldData);\n                }\n            }\n        }\n        return (IFD) fieldData;\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public IndexFieldDataService(Index index, CircuitBreakerService circuitBreakerService) {\n        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS), circuitBreakerService);\n    }","id":103631,"modified_method":"public IndexFieldDataService(Index index, CircuitBreakerService circuitBreakerService) {\n        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCacheListener(circuitBreakerService)), circuitBreakerService, new IndicesFieldDataCacheListener(circuitBreakerService));\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public IndexFieldDataService(Index index, @IndexSettings Settings indexSettings, IndicesFieldDataCache indicesFieldDataCache,\n                                 CircuitBreakerService circuitBreakerService) {\n        super(index, indexSettings);\n        this.indicesFieldDataCache = indicesFieldDataCache;\n        this.circuitBreakerService = circuitBreakerService;\n    }","id":103632,"modified_method":"@Inject\n    public IndexFieldDataService(Index index, @IndexSettings Settings indexSettings, IndicesFieldDataCache indicesFieldDataCache,\n                                 CircuitBreakerService circuitBreakerService, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {\n        super(index, indexSettings);\n        this.indicesFieldDataCache = indicesFieldDataCache;\n        this.circuitBreakerService = circuitBreakerService;\n        this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public IndicesFieldDataCache(Settings settings) {\n        super(settings);\n        this.size = componentSettings.get(\"size\", \"-1\");\n        this.sizeInBytes = componentSettings.getAsMemory(\"size\", \"-1\").bytes();\n        this.expire = componentSettings.getAsTime(\"expire\", null);\n        buildCache();\n    }","id":103633,"modified_method":"@Inject\n    public IndicesFieldDataCache(Settings settings, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {\n        super(settings);\n        this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;\n        this.size = componentSettings.get(\"size\", \"-1\");\n        this.sizeInBytes = componentSettings.getAsMemory(\"size\", \"-1\").bytes();\n        this.expire = componentSettings.getAsTime(\"expire\", null);\n        buildCache();\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void onRemoval(RemovalNotification<Key, AtomicFieldData> notification) {\n        Key key = notification.getKey();\n        if (key == null || key.listener == null) {\n            return; // nothing to do here really...\n        }\n        IndexFieldCache indexCache = key.indexCache;\n        long sizeInBytes = key.sizeInBytes;\n        AtomicFieldData value = notification.getValue();\n        if (sizeInBytes == -1 && value != null) {\n            sizeInBytes = value.getMemorySizeInBytes();\n        }\n        key.listener.onUnload(indexCache.fieldNames, indexCache.fieldDataType, notification.wasEvicted(), sizeInBytes, value);\n    }","id":103634,"modified_method":"@Override\n    public void onRemoval(RemovalNotification<Key, AtomicFieldData> notification) {\n        Key key = notification.getKey();\n        assert key != null && key.listeners != null;\n\n        IndexFieldCache indexCache = key.indexCache;\n        long sizeInBytes = key.sizeInBytes;\n        AtomicFieldData value = notification.getValue();\n        if (sizeInBytes == -1 && value != null) {\n            sizeInBytes = value.getMemorySizeInBytes();\n        }\n        for (IndexFieldDataCache.Listener listener : key.listeners) {\n            listener.onUnload(indexCache.fieldNames, indexCache.fieldDataType, notification.wasEvicted(), sizeInBytes, value);\n        }\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public <FD extends AtomicFieldData, IFD extends IndexFieldData<FD>> FD load(final AtomicReaderContext context, final IFD indexFieldData) throws Exception {\n            final Key key = new Key(this, context.reader().getCoreCacheKey());\n            //noinspection unchecked\n            return (FD) cache.get(key, new Callable<AtomicFieldData>() {\n                @Override\n                public AtomicFieldData call() throws Exception {\n                    SegmentReaderUtils.registerCoreListener(context.reader(), IndexFieldCache.this);\n                    AtomicFieldData fieldData = indexFieldData.loadDirect(context);\n\n                    if (indexService != null) {\n                        ShardId shardId = ShardUtils.extractShardId(context.reader());\n                        if (shardId != null) {\n                            IndexShard shard = indexService.shard(shardId.id());\n                            if (shard != null) {\n                                key.listener = shard.fieldData();\n                            }\n                        }\n                    }\n\n                    if (key.listener != null) {\n                        key.listener.onLoad(fieldNames, fieldDataType, fieldData);\n                    }\n\n                    return fieldData;\n                }\n            });\n        }","id":103635,"modified_method":"@Override\n        public <FD extends AtomicFieldData, IFD extends IndexFieldData<FD>> FD load(final AtomicReaderContext context, final IFD indexFieldData) throws Exception {\n            final Key key = new Key(this, context.reader().getCoreCacheKey());\n            //noinspection unchecked\n            return (FD) cache.get(key, new Callable<AtomicFieldData>() {\n                @Override\n                public AtomicFieldData call() throws Exception {\n                    SegmentReaderUtils.registerCoreListener(context.reader(), IndexFieldCache.this);\n                    AtomicFieldData fieldData = indexFieldData.loadDirect(context);\n                    key.listeners.add(indicesFieldDataCacheListener);\n\n                    if (indexService != null) {\n                        ShardId shardId = ShardUtils.extractShardId(context.reader());\n                        if (shardId != null) {\n                            IndexShard shard = indexService.shard(shardId.id());\n                            if (shard != null) {\n                                key.listeners.add(shard.fieldData());\n                            }\n                        }\n                    }\n                    for (Listener listener : key.listeners) {\n                        listener.onLoad(fieldNames, fieldDataType, fieldData);\n                    }\n                    return fieldData;\n                }\n            });\n        }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void configure() {\n        bind(IndicesLifecycle.class).to(InternalIndicesLifecycle.class).asEagerSingleton();\n\n        bind(IndicesService.class).to(InternalIndicesService.class).asEagerSingleton();\n\n        bind(RecoverySettings.class).asEagerSingleton();\n        bind(RecoveryTarget.class).asEagerSingleton();\n        bind(RecoverySource.class).asEagerSingleton();\n\n        bind(IndicesStore.class).asEagerSingleton();\n        bind(IndicesClusterStateService.class).asEagerSingleton();\n        bind(IndexingMemoryController.class).asEagerSingleton();\n        bind(IndicesFilterCache.class).asEagerSingleton();\n        bind(IndicesFieldDataCache.class).asEagerSingleton();\n        bind(IndicesTermsFilterCache.class).asEagerSingleton();\n        bind(TransportNodesListShardStoreMetaData.class).asEagerSingleton();\n        bind(IndicesTTLService.class).asEagerSingleton();\n        bind(IndicesWarmer.class).to(InternalIndicesWarmer.class).asEagerSingleton();\n        bind(UpdateHelper.class).asEagerSingleton();\n\n        bind(CircuitBreakerService.class).to(InternalCircuitBreakerService.class).asEagerSingleton();\n    }","id":103636,"modified_method":"@Override\n    protected void configure() {\n        bind(IndicesLifecycle.class).to(InternalIndicesLifecycle.class).asEagerSingleton();\n\n        bind(IndicesService.class).to(InternalIndicesService.class).asEagerSingleton();\n\n        bind(RecoverySettings.class).asEagerSingleton();\n        bind(RecoveryTarget.class).asEagerSingleton();\n        bind(RecoverySource.class).asEagerSingleton();\n\n        bind(IndicesStore.class).asEagerSingleton();\n        bind(IndicesClusterStateService.class).asEagerSingleton();\n        bind(IndexingMemoryController.class).asEagerSingleton();\n        bind(IndicesFilterCache.class).asEagerSingleton();\n        bind(IndicesFieldDataCache.class).asEagerSingleton();\n        bind(IndicesTermsFilterCache.class).asEagerSingleton();\n        bind(TransportNodesListShardStoreMetaData.class).asEagerSingleton();\n        bind(IndicesTTLService.class).asEagerSingleton();\n        bind(IndicesWarmer.class).to(InternalIndicesWarmer.class).asEagerSingleton();\n        bind(UpdateHelper.class).asEagerSingleton();\n\n        bind(CircuitBreakerService.class).to(InternalCircuitBreakerService.class).asEagerSingleton();\n        bind(IndicesFieldDataCacheListener.class).asEagerSingleton();\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSimple2() throws Exception {\n\n        //TODO this test seems to have problems with more shards and/or 1 replica instead of 0\n        client().admin().indices().prepareCreate(\"index\").setSettings(\n                ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 0)\n                        .build()\n        ).execute().actionGet();\n        client().admin().indices().prepareCreate(\"test\").setSettings(\n                ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 0)\n                        .build()\n        ).execute().actionGet();\n        ensureGreen();\n\n        // introduce the doc\n        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject(\"doc\")\n                .field(\"field1\", 1)\n                .field(\"field2\", \"value\")\n                .endObject().endObject();\n\n        PercolateResponse response = client().preparePercolate().setSource(doc)\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .execute().actionGet();\n        assertMatchCount(response, 0l);\n        assertThat(response.getMatches(), emptyArray());\n\n        // add first query...\n        client().prepareIndex(\"test\", PercolatorService.TYPE_NAME, \"test1\")\n                .setSource(XContentFactory.jsonBuilder().startObject().field(\"query\", termQuery(\"field2\", \"value\")).endObject())\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n\n        // add second query...\n        client().prepareIndex(\"test\", PercolatorService.TYPE_NAME, \"test2\")\n                .setSource(XContentFactory.jsonBuilder().startObject().field(\"query\", termQuery(\"field1\", 1)).endObject())\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc)\n                .execute().actionGet();\n        assertMatchCount(response, 2l);\n        assertThat(response.getMatches(), arrayWithSize(2));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContainingInAnyOrder(\"test1\", \"test2\"));\n\n\n        client().prepareDelete(\"test\", PercolatorService.TYPE_NAME, \"test2\").execute().actionGet();\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n\n        // add a range query (cached)\n        // add a query\n        client().prepareIndex(\"test1\", PercolatorService.TYPE_NAME)\n                .setSource(\n                        XContentFactory.jsonBuilder().startObject().field(\"query\",\n                                constantScoreQuery(FilterBuilders.rangeFilter(\"field2\").from(\"value\").includeLower(true))\n                        ).endObject()\n                )\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n    }","id":103637,"modified_method":"@Test\n    public void testSimple2() throws Exception {\n\n        //TODO this test seems to have problems with more shards and/or 1 replica instead of 0\n        client().admin().indices().prepareCreate(\"index\").setSettings(\n                ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 0)\n                        .build()\n        ).execute().actionGet();\n        client().admin().indices().prepareCreate(\"test\").setSettings(\n                ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 0)\n                        .build()\n        ).execute().actionGet();\n        ensureGreen();\n\n        // introduce the doc\n        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject(\"doc\")\n                .field(\"field1\", 1)\n                .field(\"field2\", \"value\")\n                .endObject().endObject();\n\n        PercolateResponse response = client().preparePercolate().setSource(doc)\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .execute().actionGet();\n        assertMatchCount(response, 0l);\n        assertThat(response.getMatches(), emptyArray());\n\n        // add first query...\n        client().prepareIndex(\"test\", PercolatorService.TYPE_NAME, \"test1\")\n                .setSource(XContentFactory.jsonBuilder().startObject().field(\"query\", termQuery(\"field2\", \"value\")).endObject())\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n\n        // add second query...\n        client().prepareIndex(\"test\", PercolatorService.TYPE_NAME, \"test2\")\n                .setSource(XContentFactory.jsonBuilder().startObject().field(\"query\", termQuery(\"field1\", 1)).endObject())\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc)\n                .execute().actionGet();\n        assertMatchCount(response, 2l);\n        assertThat(response.getMatches(), arrayWithSize(2));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContainingInAnyOrder(\"test1\", \"test2\"));\n\n\n        client().prepareDelete(\"test\", PercolatorService.TYPE_NAME, \"test2\").execute().actionGet();\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n\n        // add a range query (cached)\n        // add a query\n        client().prepareIndex(\"test1\", PercolatorService.TYPE_NAME)\n                .setSource(\n                        XContentFactory.jsonBuilder().startObject().field(\"query\",\n                                constantScoreQuery(FilterBuilders.rangeFilter(\"field2\").from(1).to(5).includeLower(true).setExecution(\"fielddata\"))\n                        ).endObject()\n                )\n                .execute().actionGet();\n\n        response = client().preparePercolate()\n                .setIndices(\"test\").setDocumentType(\"type1\")\n                .setSource(doc).execute().actionGet();\n        assertMatchCount(response, 1l);\n        assertThat(response.getMatches(), arrayWithSize(1));\n        assertThat(convertFromTextArray(response.getMatches(), \"test\"), arrayContaining(\"test1\"));\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public ShardFieldData(ShardId shardId, @IndexSettings Settings indexSettings, CircuitBreakerService breakerService) {\n        super(shardId, indexSettings);\n        this.breakerService = breakerService;\n    }","id":103638,"modified_method":"@Inject\n    public ShardFieldData(ShardId shardId, @IndexSettings Settings indexSettings) {\n        super(shardId, indexSettings);\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void onUnload(FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes, @Nullable AtomicFieldData fieldData) {\n        if (wasEvicted) {\n            evictionsMetric.inc();\n        }\n        if (sizeInBytes != -1) {\n            // Since field data is being unloaded (due to expiration or manual\n            // clearing), we also need to decrement the used bytes in the breaker\n            breakerService.getBreaker().addWithoutBreaking(-sizeInBytes);\n\n            totalMetric.dec(sizeInBytes);\n\n            String keyFieldName = fieldNames.indexName();\n            CounterMetric total = perFieldTotals.get(keyFieldName);\n            if (total != null) {\n                total.dec(sizeInBytes);\n            }\n        }\n    }","id":103639,"modified_method":"@Override\n    public void onUnload(FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes, @Nullable AtomicFieldData fieldData) {\n        if (wasEvicted) {\n            evictionsMetric.inc();\n        }\n        if (sizeInBytes != -1) {\n            totalMetric.dec(sizeInBytes);\n\n            String keyFieldName = fieldNames.indexName();\n            CounterMetric total = perFieldTotals.get(keyFieldName);\n            if (total != null) {\n                total.dec(sizeInBytes);\n            }\n        }\n    }","commit_id":"b7451533c893214caf754737036330d3dea892cd","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void onRemoval(RemovalNotification<Key, AtomicFieldData> notification) {\n        if (notification.getKey() != null && notification.getKey().listener != null) {\n            IndexFieldCache indexCache = notification.getKey().indexCache;\n            long sizeInBytes = notification.getKey().sizeInBytes;\n            if (sizeInBytes == -1 && notification.getValue() != null) {\n                sizeInBytes = notification.getValue().getMemorySizeInBytes();\n            }\n            notification.getKey().listener.onUnload(indexCache.fieldNames, indexCache.fieldDataType, notification.wasEvicted(), sizeInBytes, notification.getValue());\n        }\n    }","id":103640,"modified_method":"@Override\n    public void onRemoval(RemovalNotification<Key, AtomicFieldData> notification) {\n        Key key = notification.getKey();\n        if (key == null || key.listener == null) {\n            return; // nothing to do here really...\n        }\n        IndexFieldCache indexCache = key.indexCache;\n        long sizeInBytes = key.sizeInBytes;\n        AtomicFieldData value = notification.getValue();\n        if (sizeInBytes == -1 && value != null) {\n            sizeInBytes = value.getMemorySizeInBytes();\n        }\n        key.listener.onUnload(indexCache.fieldNames, indexCache.fieldDataType, notification.wasEvicted(), sizeInBytes, value);\n    }","commit_id":"f465a6b5891269c0061487f623c175d373856128","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\r\n     * Initializes a new <tt>AsyncContactQuery<\/tt> instance which is to perform\r\n     * a specific <tt>query<\/tt> on behalf of a specific <tt>contactSource<\/tt>.\r\n     *\r\n     * @param contactSource the <tt>ContactSourceService<\/tt> which is to\r\n     * perform the new <tt>ContactQuery<\/tt> instance\r\n     * @param query the <tt>String<\/tt> for which <tt>contactSource<\/tt> is\r\n     * being queried\r\n     */\r\n    protected AsyncContactQuery(T contactSource, String query)\r\n    {\r\n        super(contactSource);\r\n\r\n        this.query = (query == null) ? null : query.toLowerCase();\r\n    }","id":103641,"modified_method":"/**\r\n     * Initializes a new <tt>AsyncContactQuery<\/tt> instance which is to perform\r\n     * a specific <tt>query<\/tt> on behalf of a specific <tt>contactSource<\/tt>.\r\n     *\r\n     * @param contactSource the <tt>ContactSourceService<\/tt> which is to\r\n     * perform the new <tt>ContactQuery<\/tt> instance\r\n     * @param query the <tt>Pattern<\/tt> for which <tt>contactSource<\/tt> is\r\n     * being queried\r\n     */\r\n    protected AsyncContactQuery(T contactSource, Pattern query)\r\n    {\r\n        super(contactSource);\r\n\r\n        this.query = query;\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Initializes a new <tt>MacOSXAddrBookContactQuery<\/tt> which is to perform\r\n     * a specific <tt>query<\/tt> in the Address Book of Mac OS X on behalf of a\r\n     * specific <tt>MacOSXAddrBookContactSourceService<\/tt>.\r\n     *\r\n     * @param contactSource the <tt>MacOSXAddrBookContactSourceService<\/tt>\r\n     * which is to perform the new <tt>ContactQuery<\/tt> instance\r\n     * @param query the <tt>String<\/tt> for which <tt>contactSource<\/tt> i.e.\r\n     * the Address Book of Mac OS X is being queried\r\n     */\r\n    public MacOSXAddrBookContactQuery(\r\n            MacOSXAddrBookContactSourceService contactSource,\r\n            String query)\r\n    {\r\n        super(contactSource, query);\r\n    }","id":103642,"modified_method":"/**\r\n     * Initializes a new <tt>MacOSXAddrBookContactQuery<\/tt> which is to perform\r\n     * a specific <tt>query<\/tt> in the Address Book of Mac OS X on behalf of a\r\n     * specific <tt>MacOSXAddrBookContactSourceService<\/tt>.\r\n     *\r\n     * @param contactSource the <tt>MacOSXAddrBookContactSourceService<\/tt>\r\n     * which is to perform the new <tt>ContactQuery<\/tt> instance\r\n     * @param query the <tt>Pattern<\/tt> for which <tt>contactSource<\/tt> i.e.\r\n     * the Address Book of Mac OS X is being queried\r\n     */\r\n    public MacOSXAddrBookContactQuery(\r\n            MacOSXAddrBookContactSourceService contactSource,\r\n            Pattern query)\r\n    {\r\n        super(contactSource, query);\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Determines whether an <tt>ABPerson<\/tt> represented by the values of its\r\n     * {@link #ABPERSON_PROPERTIES} matches {@link #query}.\r\n     * \r\n     * @param values the values of the <tt>ABPERSON_PROPERTIES<\/tt> which\r\n     * represent the <tt>ABPerson<\/tt> to be determined whether it matches\r\n     * <tt>query<\/tt>\r\n     * @return <tt>true<\/tt> if the <tt>ABPerson<\/tt> represented by the\r\n     * specified <tt>values<\/tt> matches <tt>query<\/tt>; otherwise,\r\n     * <tt>false<\/tt>\r\n     */\r\n    private boolean matches(Object[] values)\r\n    {\r\n        for (Object value : values)\r\n        {\r\n            if (value instanceof String)\r\n            {\r\n                if (((String) value).toLowerCase().contains(query))\r\n                    return true;\r\n            }\r\n            else if (value instanceof Object[])\r\n            {\r\n                for (Object subValue : (Object[]) value)\r\n                {\r\n                    if ((subValue instanceof String)\r\n                            && ((String) subValue)\r\n                                    .toLowerCase().contains(query))\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":103643,"modified_method":"/**\r\n     * Determines whether an <tt>ABPerson<\/tt> represented by the values of its\r\n     * {@link #ABPERSON_PROPERTIES} matches {@link #query}.\r\n     * \r\n     * @param values the values of the <tt>ABPERSON_PROPERTIES<\/tt> which\r\n     * represent the <tt>ABPerson<\/tt> to be determined whether it matches\r\n     * <tt>query<\/tt>\r\n     * @return <tt>true<\/tt> if the <tt>ABPerson<\/tt> represented by the\r\n     * specified <tt>values<\/tt> matches <tt>query<\/tt>; otherwise,\r\n     * <tt>false<\/tt>\r\n     */\r\n    private boolean matches(Object[] values)\r\n    {\r\n        for (Object value : values)\r\n        {\r\n            if (value instanceof String)\r\n            {\r\n                if (query.matcher((String) value).find())\r\n                    return true;\r\n            }\r\n            else if (value instanceof Object[])\r\n            {\r\n                for (Object subValue : (Object[]) value)\r\n                {\r\n                    if ((subValue instanceof String)\r\n                            && query.matcher((String) subValue).find())\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Performs this <tt>AsyncContactQuery<\/tt> in a background <tt>Thread<\/tt>.\r\n     *\r\n     * @see AsyncContactQuery#run()\r\n     */\r\n    protected void run()\r\n    {\r\n        foreachPerson(\r\n            query,\r\n            new PtrCallback()\r\n            {\r\n                public boolean callback(long person)\r\n                {\r\n                    return onPerson(person);\r\n                }\r\n            });\r\n    }","id":103644,"modified_method":"/**\r\n     * Performs this <tt>AsyncContactQuery<\/tt> in a background <tt>Thread<\/tt>.\r\n     *\r\n     * @see AsyncContactQuery#run()\r\n     */\r\n    protected void run()\r\n    {\r\n        foreachPerson(\r\n            query.toString(),\r\n            new PtrCallback()\r\n            {\r\n                public boolean callback(long person)\r\n                {\r\n                    return onPerson(person);\r\n                }\r\n            });\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Queries this <tt>ContactSourceService<\/tt> for <tt>SourceContact<\/tt>s\r\n     * which match a specific <tt>query<\/tt> <tt>String<\/tt>.\r\n     *\r\n     * @param query the <tt>String<\/tt> which this <tt>ContactSourceService<\/tt>\r\n     * is being queried for\r\n     * @return a <tt>ContactQuery<\/tt> which represents the query of this\r\n     * <tt>ContactSourceService<\/tt> implementation for the specified\r\n     * <tt>String<\/tt> and via which the matching <tt>SourceContact<\/tt>s (if\r\n     * any) will be returned\r\n     * @see ContactSourceService#queryContactSource(String)\r\n     */\r\n    public ContactQuery queryContactSource(String query)\r\n    {\r\n        MacOSXAddrBookContactQuery mosxabcq\r\n            = new MacOSXAddrBookContactQuery(this, query);\r\n\r\n        mosxabcq.start();\r\n        return mosxabcq;\r\n    }","id":103645,"modified_method":"/**\r\n     * Queries this <tt>ContactSourceService<\/tt> for <tt>SourceContact<\/tt>s\r\n     * which match a specific <tt>query<\/tt> <tt>Pattern<\/tt>.\r\n     *\r\n     * @param query the <tt>Pattern<\/tt> which this\r\n     * <tt>ContactSourceService<\/tt> is being queried for\r\n     * @return a <tt>ContactQuery<\/tt> which represents the query of this\r\n     * <tt>ContactSourceService<\/tt> implementation for the specified\r\n     * <tt>Pattern<\/tt> and via which the matching <tt>SourceContact<\/tt>s (if\r\n     * any) will be returned\r\n     * @see ExtendedContactSourceService#queryContactSource(Pattern)\r\n     */\r\n    public ContactQuery queryContactSource(Pattern query)\r\n    {\r\n        MacOSXAddrBookContactQuery mosxabcq\r\n            = new MacOSXAddrBookContactQuery(this, query);\r\n\r\n        mosxabcq.start();\r\n        return mosxabcq;\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Notifies this <tt>MsOutlookAddrBookContactQuery<\/tt> about a specific\r\n     * <tt>MAPI_MAILUSER<\/tt>.\r\n     *\r\n     * @param iUnknown a pointer to an <tt>IUnknown<\/tt> instance for the\r\n     * <tt>MAPI_MAILUSER<\/tt> to notify about\r\n     * @return <tt>true<\/tt> if this <tt>MsOutlookAddrBookContactQuery<\/tt>\r\n     * is to continue being called; otherwise, <tt>false<\/tt>\r\n     * @throws MsOutlookMAPIHResultException if anything goes wrong while\r\n     * getting the properties of the specified <tt>MAPI_MAILUSER<\/tt>\r\n     */\r\n    private boolean onMailUser(long iUnknown)\r\n        throws MsOutlookMAPIHResultException\r\n    {\r\n        Object[] props\r\n            = IMAPIProp_GetProps(\r\n                    iUnknown,\r\n                    MAPI_MAILUSER_PROP_IDS,\r\n                    MAPI_UNICODE);\r\n        long objType\r\n            = (props[PR_OBJECT_TYPE] instanceof Long)\r\n                ? ((Long) props[PR_OBJECT_TYPE]).longValue()\r\n                : 0;\r\n\r\n        /*\r\n         * If we have results from the Contacts folder(s), don't read from the\r\n         * Address Book because there may be duplicates.\r\n         */\r\n        if ((MAPI_MAILUSER == objType) && (mapiMessageCount != 0))\r\n            return false;\r\n\r\n        boolean matches = false;\r\n\r\n        for (Object prop : props)\r\n        {\r\n            if ((prop instanceof String)\r\n                    && ((String) prop).toLowerCase().contains(query))\r\n            {\r\n                matches = true;\r\n                break;\r\n            }\r\n        }\r\n        if (matches)\r\n        {\r\n            List<ContactDetail> contactDetails\r\n                = new LinkedList<ContactDetail>();\r\n\r\n            for (int i = 0; i < CONTACT_DETAIL_PROP_INDEXES.length; i++)\r\n            {\r\n                Object prop = props[CONTACT_DETAIL_PROP_INDEXES[i]];\r\n\r\n                if (prop instanceof String)\r\n                {\r\n                    String stringProp = (String) prop;\r\n\r\n                    if (stringProp.length() != 0)\r\n                        contactDetails.add(new ContactDetail(stringProp));\r\n                }\r\n            }\r\n\r\n            AddrBookSourceContact sourceContact\r\n                = new AddrBookSourceContact(\r\n                        getContactSource(),\r\n                        (String) props[PR_DISPLAY_NAME],\r\n                        contactDetails);\r\n\r\n            if (MAPI_MESSAGE == objType)\r\n            {\r\n                ++mapiMessageCount;\r\n\r\n                try\r\n                {\r\n                    Object[] images\r\n                        = IMAPIProp_GetProps(\r\n                                iUnknown,\r\n                                new long[] { PR_ATTACHMENT_CONTACTPHOTO },\r\n                                0);\r\n                    Object image = images[0];\r\n\r\n                    if (image instanceof byte[])\r\n                        sourceContact.setImage((byte[]) image);\r\n                }\r\n                catch (MsOutlookMAPIHResultException ex)\r\n                {\r\n                    // Ignore it, the image isn't as vital as the SourceContact.\r\n                }\r\n            }\r\n\r\n            addQueryResult(sourceContact);\r\n        }\r\n        return (getStatus() == QUERY_IN_PROGRESS);\r\n    }","id":103646,"modified_method":"/**\r\n     * Notifies this <tt>MsOutlookAddrBookContactQuery<\/tt> about a specific\r\n     * <tt>MAPI_MAILUSER<\/tt>.\r\n     *\r\n     * @param iUnknown a pointer to an <tt>IUnknown<\/tt> instance for the\r\n     * <tt>MAPI_MAILUSER<\/tt> to notify about\r\n     * @return <tt>true<\/tt> if this <tt>MsOutlookAddrBookContactQuery<\/tt>\r\n     * is to continue being called; otherwise, <tt>false<\/tt>\r\n     * @throws MsOutlookMAPIHResultException if anything goes wrong while\r\n     * getting the properties of the specified <tt>MAPI_MAILUSER<\/tt>\r\n     */\r\n    private boolean onMailUser(long iUnknown)\r\n        throws MsOutlookMAPIHResultException\r\n    {\r\n        Object[] props\r\n            = IMAPIProp_GetProps(\r\n                    iUnknown,\r\n                    MAPI_MAILUSER_PROP_IDS,\r\n                    MAPI_UNICODE);\r\n        long objType\r\n            = (props[PR_OBJECT_TYPE] instanceof Long)\r\n                ? ((Long) props[PR_OBJECT_TYPE]).longValue()\r\n                : 0;\r\n\r\n        /*\r\n         * If we have results from the Contacts folder(s), don't read from the\r\n         * Address Book because there may be duplicates.\r\n         */\r\n        if ((MAPI_MAILUSER == objType) && (mapiMessageCount != 0))\r\n            return false;\r\n\r\n        boolean matches = false;\r\n\r\n        for (Object prop : props)\r\n        {\r\n            if ((prop instanceof String) && query.matcher((String) prop).find())\r\n            {\r\n                matches = true;\r\n                break;\r\n            }\r\n        }\r\n        if (matches)\r\n        {\r\n            List<ContactDetail> contactDetails\r\n                = new LinkedList<ContactDetail>();\r\n\r\n            for (int i = 0; i < CONTACT_DETAIL_PROP_INDEXES.length; i++)\r\n            {\r\n                Object prop = props[CONTACT_DETAIL_PROP_INDEXES[i]];\r\n\r\n                if (prop instanceof String)\r\n                {\r\n                    String stringProp = (String) prop;\r\n\r\n                    if (stringProp.length() != 0)\r\n                        contactDetails.add(new ContactDetail(stringProp));\r\n                }\r\n            }\r\n\r\n            AddrBookSourceContact sourceContact\r\n                = new AddrBookSourceContact(\r\n                        getContactSource(),\r\n                        (String) props[PR_DISPLAY_NAME],\r\n                        contactDetails);\r\n\r\n            if (MAPI_MESSAGE == objType)\r\n            {\r\n                ++mapiMessageCount;\r\n\r\n                try\r\n                {\r\n                    Object[] images\r\n                        = IMAPIProp_GetProps(\r\n                                iUnknown,\r\n                                new long[] { PR_ATTACHMENT_CONTACTPHOTO },\r\n                                0);\r\n                    Object image = images[0];\r\n\r\n                    if (image instanceof byte[])\r\n                        sourceContact.setImage((byte[]) image);\r\n                }\r\n                catch (MsOutlookMAPIHResultException ex)\r\n                {\r\n                    // Ignore it, the image isn't as vital as the SourceContact.\r\n                }\r\n            }\r\n\r\n            addQueryResult(sourceContact);\r\n        }\r\n        return (getStatus() == QUERY_IN_PROGRESS);\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Initializes a new <tt>MsOutlookAddrBookContactQuery<\/tt> instance to\r\n     * be performed by a specific\r\n     * <tt>MsOutlookAddrBookContactSourceService<\/tt>.\r\n     *\r\n     * @param msoabcss the <tt>MsOutlookAddrBookContactSourceService<\/tt>\r\n     * which is to perform the new <tt>ContactQuery<\/tt>\r\n     * @param query the <tt>String<\/tt> for which <tt>msoabcss<\/tt> is being\r\n     * queried\r\n     */\r\n    public MsOutlookAddrBookContactQuery(\r\n            MsOutlookAddrBookContactSourceService msoabcss,\r\n            String query)\r\n    {\r\n        super(msoabcss, query);\r\n    }","id":103647,"modified_method":"/**\r\n     * Initializes a new <tt>MsOutlookAddrBookContactQuery<\/tt> instance to\r\n     * be performed by a specific\r\n     * <tt>MsOutlookAddrBookContactSourceService<\/tt>.\r\n     *\r\n     * @param msoabcss the <tt>MsOutlookAddrBookContactSourceService<\/tt>\r\n     * which is to perform the new <tt>ContactQuery<\/tt>\r\n     * @param query the <tt>Pattern<\/tt> for which <tt>msoabcss<\/tt> is being\r\n     * queried\r\n     */\r\n    public MsOutlookAddrBookContactQuery(\r\n            MsOutlookAddrBookContactSourceService msoabcss,\r\n            Pattern query)\r\n    {\r\n        super(msoabcss, query);\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Performs this <tt>AsyncContactQuery<\/tt> in a background <tt>Thread<\/tt>.\r\n     *\r\n     * @see AsyncContactQuery#run()\r\n     */\r\n    protected void run()\r\n    {\r\n        foreachMailUser(\r\n            query,\r\n            new PtrCallback()\r\n            {\r\n                public boolean callback(long iUnknown)\r\n                {\r\n                    try\r\n                    {\r\n                        return onMailUser(iUnknown);\r\n                    }\r\n                    catch (MsOutlookMAPIHResultException ex)\r\n                    {\r\n                        ex.printStackTrace(System.err);\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n    }","id":103648,"modified_method":"/**\r\n     * Performs this <tt>AsyncContactQuery<\/tt> in a background <tt>Thread<\/tt>.\r\n     *\r\n     * @see AsyncContactQuery#run()\r\n     */\r\n    protected void run()\r\n    {\r\n        foreachMailUser(\r\n            query.toString(),\r\n            new PtrCallback()\r\n            {\r\n                public boolean callback(long iUnknown)\r\n                {\r\n                    try\r\n                    {\r\n                        return onMailUser(iUnknown);\r\n                    }\r\n                    catch (MsOutlookMAPIHResultException ex)\r\n                    {\r\n                        ex.printStackTrace(System.err);\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\r\n     * Queries this <tt>ContactSourceService<\/tt> for <tt>SourceContact<\/tt>s\r\n     * which match a specific <tt>query<\/tt> <tt>String<\/tt>.\r\n     *\r\n     * @param query the <tt>String<\/tt> which this <tt>ContactSourceService<\/tt>\r\n     * is being queried for\r\n     * @return a <tt>ContactQuery<\/tt> which represents the query of this\r\n     * <tt>ContactSourceService<\/tt> implementation for the specified\r\n     * <tt>String<\/tt> and via which the matching <tt>SourceContact<\/tt>s (if\r\n     * any) will be returned\r\n     * @see ContactSourceService#queryContactSource(String)\r\n     */\r\n    public ContactQuery queryContactSource(String query)\r\n    {\r\n        MsOutlookAddrBookContactQuery msoabcq\r\n            = new MsOutlookAddrBookContactQuery(this, query);\r\n\r\n        synchronized (queries)\r\n        {\r\n            queries.add(msoabcq);\r\n        }\r\n\r\n        boolean msoabcqHasStarted = false;\r\n\r\n        try\r\n        {\r\n            msoabcq.start();\r\n            msoabcqHasStarted = true;\r\n        }\r\n        finally\r\n        {\r\n            if (!msoabcqHasStarted)\r\n            {\r\n                synchronized (queries)\r\n                {\r\n                    if (queries.remove(msoabcq))\r\n                        queries.notify();\r\n                }\r\n            }\r\n        }\r\n        return msoabcq;\r\n    }","id":103649,"modified_method":"/**\r\n     * Queries this <tt>ContactSourceService<\/tt> for <tt>SourceContact<\/tt>s\r\n     * which match a specific <tt>query<\/tt> <tt>Pattern<\/tt>.\r\n     *\r\n     * @param query the <tt>Pattern<\/tt> which this\r\n     * <tt>ContactSourceService<\/tt> is being queried for\r\n     * @return a <tt>ContactQuery<\/tt> which represents the query of this\r\n     * <tt>ContactSourceService<\/tt> implementation for the specified\r\n     * <tt>Pattern<\/tt> and via which the matching <tt>SourceContact<\/tt>s (if\r\n     * any) will be returned\r\n     * @see ExtendedContactSourceService#queryContactSource(Pattern)\r\n     */\r\n    public ContactQuery queryContactSource(Pattern query)\r\n    {\r\n        MsOutlookAddrBookContactQuery msoabcq\r\n            = new MsOutlookAddrBookContactQuery(this, query);\r\n\r\n        synchronized (queries)\r\n        {\r\n            queries.add(msoabcq);\r\n        }\r\n\r\n        boolean msoabcqHasStarted = false;\r\n\r\n        try\r\n        {\r\n            msoabcq.start();\r\n            msoabcqHasStarted = true;\r\n        }\r\n        finally\r\n        {\r\n            if (!msoabcqHasStarted)\r\n            {\r\n                synchronized (queries)\r\n                {\r\n                    if (queries.remove(msoabcq))\r\n                        queries.notify();\r\n                }\r\n            }\r\n        }\r\n        return msoabcq;\r\n    }","commit_id":"ec3ea08dd5ffe659064a76455766650c047d76ab","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void postUnmarshalling(Message msg, Address dest, Address src, boolean multicast) {\n        msg.setDest(dest);\n    }","id":103650,"modified_method":"public void postUnmarshalling(Message msg, Address dest, Address src, boolean multicast) {\n         if(multicast)\n            msg.setDest(null);\n        else\n            msg.setDest(dest);\n    }","commit_id":"6de37517e03d8603bd629ce00bf8f75ac8d24b54","url":"https://github.com/belaban/JGroups"},{"original_method":"public void postUnmarshallingList(Message msg, Address dest, boolean multicast) {\n        msg.setDest(dest);\n    }","id":103651,"modified_method":"public void postUnmarshallingList(Message msg, Address dest, boolean multicast) {\n         if(multicast)\n            msg.setDest(null);\n        else\n            msg.setDest(dest);\n    }","commit_id":"6de37517e03d8603bd629ce00bf8f75ac8d24b54","url":"https://github.com/belaban/JGroups"},{"original_method":"public void postUnmarshallingList(Message msg, Address dest, boolean multicast) {\n        msg.setDest(dest);\n    }","id":103652,"modified_method":"public void postUnmarshallingList(Message msg, Address dest, boolean multicast) {\n         if(multicast)\n            msg.setDest(null);\n        else\n            msg.setDest(dest);\n    }","commit_id":"4b5a0f82537367391732d642b33f0ed6037a4897","url":"https://github.com/belaban/JGroups"},{"original_method":"public void postUnmarshalling(Message msg, Address dest, Address src, boolean multicast) {\n        msg.setDest(dest);\n    }","id":103653,"modified_method":"public void postUnmarshalling(Message msg, Address dest, Address src, boolean multicast) {\n         if(multicast)\n            msg.setDest(null);\n        else\n            msg.setDest(dest);\n    }","commit_id":"4b5a0f82537367391732d642b33f0ed6037a4897","url":"https://github.com/belaban/JGroups"},{"original_method":"public void execute(EditorContext context) {\n    EditorComponent component = context.getNodeEditorComponent();\n    CollectionUtil.map(\n    CollectionUtil.filter(((EditorCell_Collection) component.getRootCell()).dfsCells(), new Condition<EditorCell>() {\n      public boolean met(EditorCell object) {\n        return object.canBePossiblyFolded() && !object.isFolded();\n      }\n    }), new Mapper<EditorCell, Void>() {\n      public Void map(EditorCell editorCell) {\n        ((EditorCell_Collection)editorCell).fold();\n        return null;\n      }\n    });\n    EditorCell selectedCell = component.getSelectedCell();\n    if (selectedCell.isUnderFolded()) {\n      EditorCell cell = selectedCell;\n      EditorCell prevCell = null;\n      while (cell != null) {\n        prevCell = cell;\n        cell = cell.getFoldedAbove();\n      }\n      component.changeSelection(prevCell);\n    }\n  }","id":103654,"modified_method":"public void execute(EditorContext context) {\n    EditorComponent component = context.getNodeEditorComponent();\n    for (EditorCell cell : ((EditorCell_Collection) component.getRootCell()).dfsCells()) {\n      if (cell.canBePossiblyFolded() && !cell.isFolded()) {\n        ((EditorCell_Collection) cell).fold();\n      }\n    }\n    EditorCell selectedCell = component.getSelectedCell();\n    if (selectedCell.isUnderFolded()) {\n      EditorCell cell = selectedCell;\n      EditorCell prevCell = null;\n      while (cell != null) {\n        prevCell = cell;\n        cell = cell.getFoldedAbove();\n      }\n      component.changeSelection(prevCell);\n    }\n  }","commit_id":"b7d5c2415d239ee7264f0de2b56a8c42d60dcd9e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(EditorContext context) {\n    CollectionUtil.map(\n    CollectionUtil.filter(((EditorCell_Collection)context.getNodeEditorComponent().getRootCell()).dfsCells(), new Condition<EditorCell>() {\n      public boolean met(EditorCell object) {\n        return object.isFolded();\n      }\n    }), new Mapper<EditorCell, Void>() {\n      public Void map(EditorCell editorCell) {\n        ((EditorCell_Collection)editorCell).unfold();\n        return null;\n      }\n    });\n  }","id":103655,"modified_method":"public void execute(EditorContext context) {\n    for (EditorCell cell : ((EditorCell_Collection)context.getNodeEditorComponent().getRootCell()).dfsCells()) {\n      if (cell.isFolded()) {\n        ((EditorCell_Collection) cell).unfold();\n      }\n    }\n  }","commit_id":"b7d5c2415d239ee7264f0de2b56a8c42d60dcd9e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute(EditorContext context) {\n    List<SNode> nodeList = new LinkedList<SNode>();\n    EditorComponent editorComponent = context.getNodeEditorComponent();\n    TextBuilder textBuilder = TextRenderUtil.getTextBuilderForSelectedCellsOfEditor(editorComponent);\n\n    NodeRangeSelection nodeRangeSelection = editorComponent.getNodeRangeSelection();\n    if (nodeRangeSelection.isActive()) {\n      nodeList.addAll(nodeRangeSelection.getNodes());\n      LOG.debug(\"Copy \" + nodeList.size() + \" nodes : \");\n      for (SNode aNodeList : nodeList) {\n        LOG.debug(\"    \" + aNodeList.getDebugText());\n      }\n    } else {\n      nodeList.add(editorComponent.getSelectedCell().getSNode());\n      LOG.debug(\"Copy node : \" + nodeList.get(0).getDebugText());\n    }\n    List<SNode> copyNodeList = new ArrayList<SNode>();\n    Map<SNode, Set<SNode>> nodesAndAttributes = new HashMap<SNode, Set<SNode>>();\n    for (SNode node : nodeList) {\n      final SNode parent = node.getParent();\n      if (parent != null && AttributesRolesUtil.isAttributeRole(node.getRole_())) {\n\n        EditorCell selectedCell = editorComponent.getSelectedCell();\n        Condition<EditorCell> condition = new Condition<EditorCell>() {\n          public boolean met(EditorCell object) {\n            SNode selectedNode = object.getSNode();\n            return selectedNode != null &&\n                    selectedNode.getParent() == parent && AttributesRolesUtil.isAttributeRole(selectedNode.getRole_());\n          }\n        };\n\n        Mapper<EditorCell, SNode> mapper = new Mapper<EditorCell, SNode>() {\n          public SNode map(EditorCell editorCell) {\n            return editorCell.getSNode();\n          }\n        };\n        Set<SNode> selectedAttributes = new HashSet<SNode>();\n        if (selectedCell instanceof EditorCell_Collection) {\n          EditorCell_Collection selectedCollection = (EditorCell_Collection) selectedCell;\n          selectedAttributes.addAll(CollectionUtil.map(CollectionUtil.filter(selectedCollection.dfsCells(), condition), mapper));\n        } else {\n          if (condition.met(selectedCell)) {\n            selectedAttributes.add(selectedCell.getSNode());\n          }\n        }\n        copyNodeList.add(parent);\n        nodesAndAttributes.put(parent, selectedAttributes);\n      } else {\n        copyNodeList.add(node);\n      }\n    }\n\n    CopyPasteUtil.copyNodesAndTextToClipboard(copyNodeList, nodesAndAttributes, textBuilder.getText());\n  }","id":103656,"modified_method":"public void execute(EditorContext context) {\n    List<SNode> nodeList = new LinkedList<SNode>();\n    EditorComponent editorComponent = context.getNodeEditorComponent();\n    TextBuilder textBuilder = TextRenderUtil.getTextBuilderForSelectedCellsOfEditor(editorComponent);\n\n    NodeRangeSelection nodeRangeSelection = editorComponent.getNodeRangeSelection();\n    if (nodeRangeSelection.isActive()) {\n      nodeList.addAll(nodeRangeSelection.getNodes());\n      LOG.debug(\"Copy \" + nodeList.size() + \" nodes : \");\n      for (SNode aNodeList : nodeList) {\n        LOG.debug(\"    \" + aNodeList.getDebugText());\n      }\n    } else {\n      nodeList.add(editorComponent.getSelectedCell().getSNode());\n      LOG.debug(\"Copy node : \" + nodeList.get(0).getDebugText());\n    }\n    List<SNode> copyNodeList = new ArrayList<SNode>();\n    Map<SNode, Set<SNode>> nodesAndAttributes = new HashMap<SNode, Set<SNode>>();\n    for (SNode node : nodeList) {\n      final SNode parent = node.getParent();\n      if (parent != null && AttributesRolesUtil.isAttributeRole(node.getRole_())) {\n\n        EditorCell selectedCell = editorComponent.getSelectedCell();\n        Condition<EditorCell> condition = new Condition<EditorCell>() {\n          public boolean met(EditorCell object) {\n            SNode selectedNode = object.getSNode();\n            return selectedNode != null &&\n                    selectedNode.getParent() == parent && AttributesRolesUtil.isAttributeRole(selectedNode.getRole_());\n          }\n        };\n\n        Set<SNode> selectedAttributes = new HashSet<SNode>();\n        if (selectedCell instanceof EditorCell_Collection) {\n          EditorCell_Collection selectedCollection = (EditorCell_Collection) selectedCell;\n          for (EditorCell cell : selectedCollection.dfsCells()) {\n            if (condition.met(cell)) {\n              selectedAttributes.add(cell.getSNode());\n            }\n          }\n        } else {\n          if (condition.met(selectedCell)) {\n            selectedAttributes.add(selectedCell.getSNode());\n          }\n        }\n        copyNodeList.add(parent);\n        nodesAndAttributes.put(parent, selectedAttributes);\n      } else {\n        copyNodeList.add(node);\n      }\n    }\n\n    CopyPasteUtil.copyNodesAndTextToClipboard(copyNodeList, nodesAndAttributes, textBuilder.getText());\n  }","commit_id":"2c835c8902806faada3b950026fa19ed56b01ff8","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public static PsiSubstitutor inferFromReturnType(@NotNull PsiTypeParameter[] typeParameters,\n                                                   final PsiType returnType,\n                                                   @Nullable final PsiType interfaceMethodReturnType,\n                                                   @NotNull PsiSubstitutor psiSubstitutor,\n                                                   final LanguageLevel languageLevel,\n                                                   final Project project) {\n    if (interfaceMethodReturnType == null) return psiSubstitutor;\n    final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(project).getResolveHelper();\n    final PsiSubstitutor substitutor =\n      resolveHelper.inferTypeArguments(typeParameters, new PsiType[]{interfaceMethodReturnType}, new PsiType[]{returnType}, languageLevel);\n    for (PsiTypeParameter typeParameter : typeParameters) {\n      final PsiType inferredType = substitutor.substitute(typeParameter);\n      if (PsiUtil.resolveClassInType(inferredType) != typeParameter) {\n        psiSubstitutor = psiSubstitutor.put(typeParameter, inferredType);\n      }\n    }\n    return psiSubstitutor;\n  }","id":103657,"modified_method":"@NotNull\n  public static PsiSubstitutor inferFromReturnType(@NotNull PsiTypeParameter[] typeParameters,\n                                                   final PsiType returnType,\n                                                   @Nullable final PsiType interfaceMethodReturnType,\n                                                   @NotNull PsiSubstitutor psiSubstitutor,\n                                                   final LanguageLevel languageLevel,\n                                                   final Project project) {\n    if (returnType == PsiType.VOID || interfaceMethodReturnType == PsiType.VOID) return psiSubstitutor;\n    final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(project).getResolveHelper();\n    final PsiSubstitutor substitutor =\n      resolveHelper.inferTypeArguments(typeParameters, new PsiType[]{interfaceMethodReturnType}, new PsiType[]{returnType}, languageLevel);\n    for (PsiTypeParameter typeParameter : typeParameters) {\n      final PsiType inferredType = substitutor.substitute(typeParameter);\n      if (PsiUtil.resolveClassInType(inferredType) != typeParameter) {\n        psiSubstitutor = psiSubstitutor.put(typeParameter, inferredType);\n      }\n    }\n    return psiSubstitutor;\n  }","commit_id":"18d0ee619be0e913919b55aacc11512a2a95af6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n      @Override\n      public CandidateInfo resolveConflict(@NotNull List<CandidateInfo> conflicts) {\n        if (mySignature == null) return null;\n\n        final PsiType[] parameterTypes = mySignature.getParameterTypes();\n        boolean hasReceiver = PsiMethodReferenceUtil.hasReceiver(parameterTypes, myQualifierResolveResult,\n                                                                 PsiMethodReferenceExpressionImpl.this);\n\n        final List<CandidateInfo> firstCandidates = new ArrayList<CandidateInfo>();\n        final List<CandidateInfo> secondCandidates = new ArrayList<CandidateInfo>();\n        for (CandidateInfo conflict : conflicts) {\n          if (!(conflict instanceof MethodCandidateInfo)) continue;\n          final PsiMethod psiMethod = ((MethodCandidateInfo)conflict).getElement();\n          if (psiMethod == null) continue;\n          PsiSubstitutor subst = PsiSubstitutor.EMPTY;\n          subst = subst.putAll(TypeConversionUtil.getSuperClassSubstitutor(psiMethod.getContainingClass(), myQualifierResolveResult.getContainingClass(), mySubstitutor));\n          subst = subst.putAll(conflict.getSubstitutor());\n          final PsiType[] signatureParameterTypes2 = psiMethod.getSignature(subst).getParameterTypes();\n\n          final boolean varArgs = psiMethod.isVarArgs();\n\n          if (parameterTypes.length == signatureParameterTypes2.length || (varArgs && !myFunctionalMethodVarArgs && Math.abs(parameterTypes.length - signatureParameterTypes2.length) <= 1)) {\n            boolean correct = true;\n            for (int i = 0; i < parameterTypes.length; i++) {\n              final PsiType type1 = subst.substitute(GenericsUtil.eliminateWildcards(parameterTypes[i]));\n              if (varArgs && i >= signatureParameterTypes2.length - 1) {\n                final PsiType type2 = signatureParameterTypes2[signatureParameterTypes2.length - 1];\n                correct &= TypeConversionUtil.isAssignable(type2, type1) || TypeConversionUtil.isAssignable(((PsiArrayType)type2).getComponentType(), type1);\n              }\n              else {\n                correct &= TypeConversionUtil.isAssignable(signatureParameterTypes2[i], type1);\n              }\n            }\n            if (correct) {\n              firstCandidates.add(conflict);\n            }\n          }\n\n          if (hasReceiver && parameterTypes.length == signatureParameterTypes2.length + 1) {\n            boolean correct = true;\n            for (int i = 0; i < signatureParameterTypes2.length; i++) {\n              final PsiType type1 = subst.substitute(GenericsUtil.eliminateWildcards(parameterTypes[i + 1]));\n              final PsiType type2 = signatureParameterTypes2[i];\n              final boolean assignable = TypeConversionUtil.isAssignable(type2, type1);\n              if (varArgs && i == signatureParameterTypes2.length - 1) {\n                correct &= assignable || TypeConversionUtil.isAssignable(((PsiArrayType)type2).getComponentType(), type1);\n              }\n              else {\n                correct &= assignable;\n              }\n            }\n            if (correct) {\n              secondCandidates.add(conflict);\n            }\n          }\n        }\n\n        final int acceptedCount = secondCandidates.size() + firstCandidates.size();\n        if (acceptedCount != 1) {\n          if (acceptedCount == 0) {\n            conflicts.clear();\n          }\n          firstCandidates.addAll(secondCandidates);\n          conflicts.clear();\n          conflicts.addAll(firstCandidates);\n          return null;\n        }\n        return !firstCandidates.isEmpty() ? firstCandidates.get(0) : secondCandidates.get(0);\n      }","id":103658,"modified_method":"@Nullable\n      @Override\n      public CandidateInfo resolveConflict(@NotNull List<CandidateInfo> conflicts) {\n        if (mySignature == null) return null;\n\n        final PsiType[] parameterTypes = mySignature.getParameterTypes();\n        boolean hasReceiver = PsiMethodReferenceUtil.hasReceiver(parameterTypes, myQualifierResolveResult,\n                                                                 PsiMethodReferenceExpressionImpl.this);\n\n        final List<CandidateInfo> firstCandidates = new ArrayList<CandidateInfo>();\n        final List<CandidateInfo> secondCandidates = new ArrayList<CandidateInfo>();\n        for (CandidateInfo conflict : conflicts) {\n          if (!(conflict instanceof MethodCandidateInfo)) continue;\n          final PsiMethod psiMethod = ((MethodCandidateInfo)conflict).getElement();\n          if (psiMethod == null) continue;\n          PsiSubstitutor substitutor = conflict.getSubstitutor();\n          final PsiType[] signatureParameterTypes2 = psiMethod.getSignature(substitutor).getParameterTypes();\n\n          final boolean varArgs = psiMethod.isVarArgs();\n\n          if (parameterTypes.length == signatureParameterTypes2.length || (varArgs && !myFunctionalMethodVarArgs && Math.abs(parameterTypes.length - signatureParameterTypes2.length) <= 1)) {\n            boolean correct = true;\n            for (int i = 0; i < parameterTypes.length; i++) {\n              final PsiType type1 = substitutor.substitute(GenericsUtil.eliminateWildcards(parameterTypes[i]));\n              if (varArgs && i >= signatureParameterTypes2.length - 1) {\n                final PsiType type2 = signatureParameterTypes2[signatureParameterTypes2.length - 1];\n                correct &= TypeConversionUtil.isAssignable(type2, type1) || TypeConversionUtil.isAssignable(((PsiArrayType)type2).getComponentType(), type1);\n              }\n              else {\n                correct &= TypeConversionUtil.isAssignable(signatureParameterTypes2[i], type1);\n              }\n            }\n            if (correct) {\n              firstCandidates.add(conflict);\n            }\n          }\n\n          if (hasReceiver && parameterTypes.length == signatureParameterTypes2.length + 1) {\n            boolean correct = true;\n            for (int i = 0; i < signatureParameterTypes2.length; i++) {\n              final PsiType type1 = substitutor.substitute(GenericsUtil.eliminateWildcards(parameterTypes[i + 1]));\n              final PsiType type2 = signatureParameterTypes2[i];\n              final boolean assignable = TypeConversionUtil.isAssignable(type2, type1);\n              if (varArgs && i == signatureParameterTypes2.length - 1) {\n                correct &= assignable || TypeConversionUtil.isAssignable(((PsiArrayType)type2).getComponentType(), type1);\n              }\n              else {\n                correct &= assignable;\n              }\n            }\n            if (correct) {\n              secondCandidates.add(conflict);\n            }\n          }\n        }\n\n        final int acceptedCount = secondCandidates.size() + firstCandidates.size();\n        if (acceptedCount != 1) {\n          if (acceptedCount == 0) {\n            conflicts.clear();\n          }\n          firstCandidates.addAll(secondCandidates);\n          conflicts.clear();\n          conflicts.addAll(firstCandidates);\n          return null;\n        }\n        return !firstCandidates.isEmpty() ? firstCandidates.get(0) : secondCandidates.get(0);\n      }","commit_id":"18d0ee619be0e913919b55aacc11512a2a95af6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    @Override\n    public ResolveResult[] resolve(@NotNull PsiJavaReference reference, boolean incompleteCode) {\n      final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult = PsiMethodReferenceUtil.getQualifierResolveResult(PsiMethodReferenceExpressionImpl.this);\n\n      final PsiClass containingClass = qualifierResolveResult.getContainingClass();\n      PsiSubstitutor substitutor = qualifierResolveResult.getSubstitutor();\n\n      if (containingClass != null) {\n        final PsiElement element = getReferenceNameElement();\n        final boolean isConstructor = isConstructor();\n        if (element instanceof PsiIdentifier || isConstructor) {\n          if (isConstructor && (containingClass.isEnum() || containingClass.hasModifierProperty(PsiModifier.ABSTRACT))) {\n            return JavaResolveResult.EMPTY_ARRAY;\n          }\n          PsiType functionalInterfaceType = null;\n          final Map<PsiMethodReferenceExpression,PsiType> map = PsiMethodReferenceUtil.ourRefs.get();\n          if (map != null) {\n            functionalInterfaceType = map.get(PsiMethodReferenceExpressionImpl.this);\n          }\n          if (functionalInterfaceType == null) {\n            functionalInterfaceType = getFunctionalInterfaceType();\n          }\n          final PsiClassType.ClassResolveResult resolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType);\n          final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(resolveResult);\n          final MethodSignature signature = interfaceMethod != null ? interfaceMethod.getSignature(LambdaUtil.getSubstitutor(interfaceMethod, resolveResult)) : null;\n          final PsiType interfaceMethodReturnType = LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);\n          PsiFile containingFile = getContainingFile();\n          final LanguageLevel languageLevel = PsiUtil.getLanguageLevel(containingFile);\n          if (isConstructor && interfaceMethod != null) {\n            final PsiTypeParameter[] typeParameters = containingClass.getTypeParameters();\n            final boolean isRawSubst = PsiUtil.isRawSubstitutor(containingClass, substitutor);\n            Project project = containingClass.getProject();\n            final PsiClassType returnType = JavaPsiFacade.getElementFactory(project).createType(containingClass,\n                                                                                                     isRawSubst ? PsiSubstitutor.EMPTY : substitutor);\n\n            substitutor = LambdaUtil.inferFromReturnType(typeParameters, returnType, GenericsUtil.eliminateWildcards(interfaceMethodReturnType), substitutor, languageLevel,\n                                                         project);\n\n            if (containingClass.getConstructors().length == 0) {\n              ClassCandidateInfo candidateInfo = null;\n              if ((containingClass.getContainingClass() == null || !isLocatedInStaticContext(containingClass)) && signature.getParameterTypes().length == 0 ||\n                  PsiMethodReferenceUtil.onArrayType(containingClass, signature)) {\n                candidateInfo = new ClassCandidateInfo(containingClass, substitutor);\n              }\n              return candidateInfo == null ? JavaResolveResult.EMPTY_ARRAY : new JavaResolveResult[]{candidateInfo};\n            }\n          }\n\n          final MethodReferenceConflictResolver conflictResolver =\n            new MethodReferenceConflictResolver(qualifierResolveResult, signature, interfaceMethod != null && interfaceMethod.isVarArgs());\n          final PsiConflictResolver[] resolvers;\n          if (signature != null) {\n            final PsiType[] parameterTypes = signature.getParameterTypes();\n            resolvers = new PsiConflictResolver[]{conflictResolver, new MethodRefsSpecificResolver(parameterTypes, languageLevel)};\n          }\n          else {\n            resolvers = new PsiConflictResolver[]{conflictResolver};\n          }\n          final MethodCandidatesProcessor processor =\n            new MethodCandidatesProcessor(PsiMethodReferenceExpressionImpl.this, containingFile, resolvers, new SmartList<CandidateInfo>()) {\n              @Override\n              protected MethodCandidateInfo createCandidateInfo(final PsiMethod method,\n                                                                final PsiSubstitutor substitutor,\n                                                                final boolean staticProblem,\n                                                                final boolean accessible) {\n                final PsiExpressionList argumentList = getArgumentList();\n                final PsiType[] typeParameters = PsiMethodReferenceExpressionImpl.this.getTypeParameters();\n                return new MethodCandidateInfo(method, substitutor, !accessible, staticProblem, argumentList, myCurrentFileContext,\n                                               argumentList != null ? argumentList.getExpressionTypes() : null, typeParameters.length > 0 ? typeParameters : null,\n                                               getLanguageLevel()) {\n                  @NotNull\n                  @Override\n                  public PsiSubstitutor inferTypeArguments(@NotNull ParameterTypeInferencePolicy policy, boolean includeReturnConstraint) {\n                    return inferTypeArgumentsFromInterfaceMethod(signature, interfaceMethodReturnType, method, substitutor, languageLevel);\n                  }\n                };\n              }\n          };\n          processor.setIsConstructor(isConstructor);\n          processor.setName(isConstructor ? containingClass.getName() : element.getText());\n          final PsiExpression expression = getQualifierExpression();\n          if (expression == null || !(expression.getType() instanceof PsiArrayType)) {\n            processor.setAccessClass(containingClass);\n          }\n\n          if (qualifierResolveResult.isReferenceTypeQualified() && isLocatedInStaticContext(containingClass)) {\n             processor.handleEvent(JavaScopeProcessorEvent.START_STATIC, null);\n          }\n          ResolveState state = ResolveState.initial().put(PsiSubstitutor.KEY, substitutor);\n          containingClass.processDeclarations(processor, state,\n                                              PsiMethodReferenceExpressionImpl.this,\n                                              PsiMethodReferenceExpressionImpl.this);\n          return processor.getResult();\n        }\n      }\n      return JavaResolveResult.EMPTY_ARRAY;\n    }","id":103659,"modified_method":"@NotNull\n    @Override\n    public ResolveResult[] resolve(@NotNull PsiJavaReference reference, boolean incompleteCode) {\n      final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult = PsiMethodReferenceUtil.getQualifierResolveResult(PsiMethodReferenceExpressionImpl.this);\n\n      final PsiClass containingClass = qualifierResolveResult.getContainingClass();\n      PsiSubstitutor substitutor = qualifierResolveResult.getSubstitutor();\n\n      if (containingClass != null) {\n        final PsiElement element = getReferenceNameElement();\n        final boolean isConstructor = isConstructor();\n        if (element instanceof PsiIdentifier || isConstructor) {\n          if (isConstructor && (containingClass.isEnum() || containingClass.hasModifierProperty(PsiModifier.ABSTRACT))) {\n            return JavaResolveResult.EMPTY_ARRAY;\n          }\n          PsiType functionalInterfaceType = null;\n          final Map<PsiMethodReferenceExpression,PsiType> map = PsiMethodReferenceUtil.ourRefs.get();\n          if (map != null) {\n            functionalInterfaceType = map.get(PsiMethodReferenceExpressionImpl.this);\n          }\n          if (functionalInterfaceType == null) {\n            functionalInterfaceType = getFunctionalInterfaceType();\n          }\n          final PsiClassType.ClassResolveResult resolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType);\n          final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(resolveResult);\n          final MethodSignature signature = interfaceMethod != null ? interfaceMethod.getSignature(LambdaUtil.getSubstitutor(interfaceMethod, resolveResult)) : null;\n          final PsiType interfaceMethodReturnType = LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);\n          PsiFile containingFile = getContainingFile();\n          final LanguageLevel languageLevel = PsiUtil.getLanguageLevel(containingFile);\n          if (isConstructor && interfaceMethod != null) {\n            final PsiTypeParameter[] typeParameters = containingClass.getTypeParameters();\n            final boolean isRawSubst = PsiUtil.isRawSubstitutor(containingClass, substitutor);\n            Project project = containingClass.getProject();\n            final PsiClassType returnType = JavaPsiFacade.getElementFactory(project).createType(containingClass,\n                                                                                                     isRawSubst ? PsiSubstitutor.EMPTY : substitutor);\n\n            substitutor = LambdaUtil.inferFromReturnType(typeParameters, returnType, GenericsUtil.eliminateWildcards(interfaceMethodReturnType), substitutor, languageLevel,\n                                                         project);\n\n            if (containingClass.getConstructors().length == 0) {\n              ClassCandidateInfo candidateInfo = null;\n              if ((containingClass.getContainingClass() == null || !isLocatedInStaticContext(containingClass)) && signature.getParameterTypes().length == 0 ||\n                  PsiMethodReferenceUtil.onArrayType(containingClass, signature)) {\n                candidateInfo = new ClassCandidateInfo(containingClass, substitutor);\n              }\n              return candidateInfo == null ? JavaResolveResult.EMPTY_ARRAY : new JavaResolveResult[]{candidateInfo};\n            }\n          }\n\n          final MethodReferenceConflictResolver conflictResolver =\n            new MethodReferenceConflictResolver(qualifierResolveResult, signature, interfaceMethod != null && interfaceMethod.isVarArgs());\n          final PsiConflictResolver[] resolvers;\n          if (signature != null) {\n            final PsiType[] parameterTypes = signature.getParameterTypes();\n            resolvers = new PsiConflictResolver[]{conflictResolver, new MethodRefsSpecificResolver(parameterTypes, languageLevel)};\n          }\n          else {\n            resolvers = new PsiConflictResolver[]{conflictResolver};\n          }\n          final MethodCandidatesProcessor processor =\n            new MethodCandidatesProcessor(PsiMethodReferenceExpressionImpl.this, containingFile, resolvers, new SmartList<CandidateInfo>()) {\n              @Override\n              protected MethodCandidateInfo createCandidateInfo(final PsiMethod method,\n                                                                final PsiSubstitutor substitutor,\n                                                                final boolean staticProblem,\n                                                                final boolean accessible) {\n                final PsiExpressionList argumentList = getArgumentList();\n                final PsiType[] typeParameters = PsiMethodReferenceExpressionImpl.this.getTypeParameters();\n                return new MethodCandidateInfo(method, substitutor, !accessible, staticProblem, argumentList, myCurrentFileContext,\n                                               argumentList != null ? argumentList.getExpressionTypes() : null, typeParameters.length > 0 ? typeParameters : null,\n                                               getLanguageLevel()) {\n                  @NotNull\n                  @Override\n                  public PsiSubstitutor inferTypeArguments(@NotNull ParameterTypeInferencePolicy policy, boolean includeReturnConstraint) {\n                    return inferTypeArgumentsFromInterfaceMethod(signature, interfaceMethodReturnType, method, substitutor, languageLevel, qualifierResolveResult);\n                  }\n                };\n              }\n          };\n          processor.setIsConstructor(isConstructor);\n          processor.setName(isConstructor ? containingClass.getName() : element.getText());\n          final PsiExpression expression = getQualifierExpression();\n          if (expression == null || !(expression.getType() instanceof PsiArrayType)) {\n            processor.setAccessClass(containingClass);\n          }\n\n          if (qualifierResolveResult.isReferenceTypeQualified() && isLocatedInStaticContext(containingClass)) {\n             processor.handleEvent(JavaScopeProcessorEvent.START_STATIC, null);\n          }\n          ResolveState state = ResolveState.initial().put(PsiSubstitutor.KEY, substitutor);\n          containingClass.processDeclarations(processor, state,\n                                              PsiMethodReferenceExpressionImpl.this,\n                                              PsiMethodReferenceExpressionImpl.this);\n          return processor.getResult();\n        }\n      }\n      return JavaResolveResult.EMPTY_ARRAY;\n    }","commit_id":"18d0ee619be0e913919b55aacc11512a2a95af6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    private PsiSubstitutor inferTypeArgumentsFromInterfaceMethod(@Nullable MethodSignature signature,\n                                                                 @Nullable PsiType interfaceMethodReturnType,\n                                                                 PsiMethod method,\n                                                                 PsiSubstitutor substitutor,\n                                                                 LanguageLevel languageLevel) {\n      if (signature == null) return PsiSubstitutor.EMPTY;\n      PsiType[] types = method.getSignature(PsiUtil.isRawSubstitutor(method, substitutor) ? PsiSubstitutor.EMPTY : substitutor).getParameterTypes();\n      PsiType[] rightTypes = signature.getParameterTypes();\n      if (!method.isVarArgs() || types.length == 0) {\n        if (types.length < rightTypes.length) {\n          return getSubstitutor(rightTypes[0]);\n        } else if (types.length > rightTypes.length) {\n          return getSubstitutor(types[0]);\n        }\n      } else {\n        if (rightTypes.length != types.length || rightTypes[rightTypes.length - 1].getArrayDimensions() != types[types.length-1].getArrayDimensions()) {\n          boolean expandTypeArray = types.length < rightTypes.length;\n          int min = Math.min(types.length, rightTypes.length);\n          types = Arrays.copyOf(types, min);\n          if (expandTypeArray) {\n            types[types.length - 1] = ((PsiArrayType)types[types.length - 1]).getComponentType();\n          }\n          rightTypes = Arrays.copyOf(rightTypes, min);\n        }\n      }\n\n      for (int i = 0; i < rightTypes.length; i++) {\n        rightTypes[i] = GenericsUtil.eliminateWildcards(rightTypes[i]);\n      }\n      final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(getProject()).getResolveHelper();\n      PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(method.getTypeParameters(), types, rightTypes, languageLevel);\n      if (method.isConstructor()) {\n        psiSubstitutor = psiSubstitutor.putAll(resolveHelper.inferTypeArguments(method.getContainingClass().getTypeParameters(), types, rightTypes, languageLevel));\n      }\n      if (!PsiUtil.isRawSubstitutor(method, substitutor)) {\n        psiSubstitutor = psiSubstitutor.putAll(substitutor);\n      }\n      return LambdaUtil.inferFromReturnType(method.getTypeParameters(),\n                                            method.getReturnType(),\n                                            GenericsUtil.eliminateWildcards(interfaceMethodReturnType),\n                                            psiSubstitutor,\n                                            languageLevel, getProject());\n    }","id":103660,"modified_method":"@NotNull\n    private PsiSubstitutor inferTypeArgumentsFromInterfaceMethod(@Nullable MethodSignature signature,\n                                                                 @Nullable PsiType interfaceMethodReturnType,\n                                                                 PsiMethod method,\n                                                                 PsiSubstitutor substitutor,\n                                                                 LanguageLevel languageLevel,\n                                                                 PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult) {\n      if (signature == null) return PsiSubstitutor.EMPTY;\n      PsiType[] types = method.getSignature(PsiUtil.isRawSubstitutor(method, substitutor) ? PsiSubstitutor.EMPTY : substitutor).getParameterTypes();\n\n      final PsiClass qualifierClass = qualifierResolveResult.getContainingClass();\n      if (qualifierClass != null) {\n        substitutor = TypeConversionUtil.getSuperClassSubstitutor(method.getContainingClass(),\n                                                                  qualifierClass,\n                                                                  substitutor).putAll(substitutor);\n      }\n\n      PsiType[] rightTypes = signature.getParameterTypes();\n      if (!method.isVarArgs() || types.length == 0) {\n        PsiSubstitutor psiSubstitutor = null;\n        if (types.length < rightTypes.length) {\n          psiSubstitutor = getSubstitutor(rightTypes[0]);\n        } else if (types.length > rightTypes.length) {\n          psiSubstitutor = getSubstitutor(types[0]);\n        }\n        if (psiSubstitutor != null) {\n          return substitutor.putAll(psiSubstitutor);\n        }\n      } else {\n        if (rightTypes.length != types.length || rightTypes[rightTypes.length - 1].getArrayDimensions() != types[types.length-1].getArrayDimensions()) {\n          boolean expandTypeArray = types.length < rightTypes.length;\n          int min = Math.min(types.length, rightTypes.length);\n          types = Arrays.copyOf(types, min);\n          if (expandTypeArray) {\n            types[types.length - 1] = ((PsiArrayType)types[types.length - 1]).getComponentType();\n          }\n          rightTypes = Arrays.copyOf(rightTypes, min);\n        }\n      }\n\n      for (int i = 0; i < rightTypes.length; i++) {\n        rightTypes[i] = GenericsUtil.eliminateWildcards(rightTypes[i]);\n      }\n      final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(getProject()).getResolveHelper();\n      if (method.isConstructor()) {\n        return substitutor.putAll(resolveHelper.inferTypeArguments(method.getTypeParameters(), types, rightTypes, languageLevel));\n      }\n\n      return LambdaUtil.inferFromReturnType(method.getTypeParameters(),\n                                            method.getReturnType(),\n                                            GenericsUtil.eliminateWildcards(interfaceMethodReturnType),\n                                            substitutor.putAll(\n                                              resolveHelper.inferTypeArguments(method.getTypeParameters(), types, rightTypes, languageLevel)),\n                                            languageLevel, getProject());\n    }","commit_id":"18d0ee619be0e913919b55aacc11512a2a95af6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private MethodReferenceConflictResolver(PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult,\n                                              @Nullable MethodSignature signature, boolean varArgs) {\n        myQualifierResolveResult = qualifierResolveResult;\n        myFunctionalMethodVarArgs = varArgs;\n        mySubstitutor = qualifierResolveResult.getSubstitutor();\n        mySignature = signature;\n      }","id":103661,"modified_method":"private MethodReferenceConflictResolver(PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult,\n                                              @Nullable MethodSignature signature, boolean varArgs) {\n        myQualifierResolveResult = qualifierResolveResult;\n        myFunctionalMethodVarArgs = varArgs;\n        mySignature = signature;\n      }","commit_id":"18d0ee619be0e913919b55aacc11512a2a95af6b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Get an instance of the specified Dataset. This method is thread-safe and may be used concurrently.\n   * The returned dataset is also added to the transaction of the current {@link TransactionContext}.\n   *\n   * @param name The name of the Dataset\n   * @param <T> The type of the Dataset\n   * @return A new instance of the specified Dataset, never null.\n   * @throws DatasetInstantiationException If the Dataset cannot be instantiated: its class\n   *         cannot be loaded; the default constructor throws an exception; or the Dataset\n   *         cannot be opened (for example, one of the underlying tables in the DataFabric\n   *         cannot be accessed).\n   */\n  @Override\n  public <T extends Dataset> T getDataset(String name) throws DatasetInstantiationException {\n    return getDataset(name, getRuntimeArguments(name));\n  }","id":103662,"modified_method":"/**\n   * Get an instance of the specified Dataset. This method is thread-safe and may be used concurrently.\n   * The returned dataset is also added to the transaction of the current {@link TransactionContext}.\n   *\n   * @param name The name of the Dataset\n   * @param <T> The type of the Dataset\n   * @return A new instance of the specified Dataset, never null.\n   * @throws DatasetInstantiationException If the Dataset cannot be instantiated: its class\n   *         cannot be loaded; the default constructor throws an exception; or the Dataset\n   *         cannot be opened (for example, one of the underlying tables in the DataFabric\n   *         cannot be accessed).\n   */\n  @Override\n  public <T extends Dataset> T getDataset(String name) throws DatasetInstantiationException {\n    return getDataset(name, DatasetDefinition.NO_ARGUMENTS);\n  }","commit_id":"701964101e2f9924e712673168c58e62db1a3ed0","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Get an instance of the specified Dataset. This method is thread-safe and may be used concurrently.\n   * The returned dataset is also added to the transaction of the current {@link TransactionContext} call.\n   * Arguments given here will be applied on top of the runtime arguments for the dataset.\n   *\n   * @param name The name of the Dataset\n   * @param arguments the arguments for this dataset instance\n   * @param <T> The type of the Dataset\n   * @return A new instance of the specified Dataset, never null.\n   * @throws DatasetInstantiationException If the Dataset cannot be instantiated: its class\n   *         cannot be loaded; the default constructor throws an exception; or the Dataset\n   *         cannot be opened (for example, one of the underlying tables in the DataFabric\n   *         cannot be accessed).\n   */\n  @Override\n  public synchronized <T extends Dataset> T getDataset(String name, Map<String, String> arguments)\n    throws DatasetInstantiationException {\n\n    if (allowedDatasets != null && !allowedDatasets.contains(name)) {\n      throw new DatasetInstantiationException(\n        String.format(\"Trying to access dataset '%s' that was not declared with \" +\n                        \"useDataset() in the configure() method\", name));\n    }\n\n    Map<String, String> dsArguments = getRuntimeArguments(name);\n    dsArguments.putAll(arguments);\n\n    try {\n      Dataset dataset;\n      if (getDatasetsCache() != null) {\n        Map<String, Dataset> threadLocalMap = getDatasetsCache().get(Thread.currentThread().getId());\n        dataset = threadLocalMap.get(name);\n        if (dataset == null) {\n          dataset = datasetFramework.getDataset(name, dsArguments, classLoader);\n          if (dataset != null) {\n            threadLocalMap.put(name, dataset);\n          }\n        }\n      } else {\n        dataset = datasetFramework.getDataset(name, dsArguments, classLoader);\n      }\n\n      if (dataset == null) {\n        throw new DatasetInstantiationException(String.format(\"Dataset '%s' does not exist\", name));\n      }\n\n      if (dataset instanceof TransactionAware) {\n        context.addTransactionAware((TransactionAware) dataset);\n      }\n\n      return (T) dataset;\n    } catch (DatasetInstantiationException e) {\n      throw e;\n    } catch (Throwable t) {\n      throw new DatasetInstantiationException(String.format(\"Could not instantiate dataset '%s'\", name), t);\n    }\n  }","id":103663,"modified_method":"/**\n   * Get an instance of the specified Dataset. This method is thread-safe and may be used concurrently.\n   * The returned dataset is also added to the transaction of the current {@link TransactionContext} call.\n   * Arguments given here will be applied on top of the runtime arguments for the dataset.\n   *\n   * @param name The name of the Dataset\n   * @param arguments the arguments for this dataset instance\n   * @param <T> The type of the Dataset\n   * @return A new instance of the specified Dataset, never null.\n   * @throws DatasetInstantiationException If the Dataset cannot be instantiated: its class\n   *         cannot be loaded; the default constructor throws an exception; or the Dataset\n   *         cannot be opened (for example, one of the underlying tables in the DataFabric\n   *         cannot be accessed).\n   */\n  @Override\n  public synchronized <T extends Dataset> T getDataset(String name, Map<String, String> arguments)\n    throws DatasetInstantiationException {\n\n    if (allowedDatasets != null && !allowedDatasets.contains(name)) {\n      throw new DatasetInstantiationException(\n        String.format(\"Trying to access dataset '%s' that was not declared with \" +\n                        \"useDataset() in the configure() method\", name));\n    }\n\n    // apply arguments on top of runtime arguments for the dataset\n    Map<String, String> dsArguments = Maps.newHashMap();\n    Map<String, String> runtimeArgs = getRuntimeArguments(name);\n    if (runtimeArgs != null) {\n      dsArguments.putAll(runtimeArgs);\n    }\n    if (arguments != null) {\n      dsArguments.putAll(arguments);\n    }\n\n    try {\n      Dataset dataset;\n      if (getDatasetsCache() != null) {\n        Map<String, Dataset> threadLocalMap = getDatasetsCache().get(Thread.currentThread().getId());\n        dataset = threadLocalMap.get(name);\n        if (dataset == null) {\n          dataset = datasetFramework.getDataset(name, dsArguments, classLoader);\n          if (dataset != null) {\n            threadLocalMap.put(name, dataset);\n          }\n        }\n      } else {\n        dataset = datasetFramework.getDataset(name, dsArguments, classLoader);\n      }\n\n      if (dataset == null) {\n        throw new DatasetInstantiationException(String.format(\"Dataset '%s' does not exist\", name));\n      }\n\n      if (dataset instanceof TransactionAware) {\n        context.addTransactionAware((TransactionAware) dataset);\n      }\n\n      return (T) dataset;\n    } catch (DatasetInstantiationException e) {\n      throw e;\n    } catch (Throwable t) {\n      throw new DatasetInstantiationException(String.format(\"Could not instantiate dataset '%s'\", name), t);\n    }\n  }","commit_id":"701964101e2f9924e712673168c58e62db1a3ed0","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n\t * Returns a formatted validation error message for a given component. The\n\t * error message is retrieved from a message bundle associated with the page\n\t * in which this validator is contained using the given resource key. The\n\t * resourceModel is used for variable interpolation.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param resourceKey\n\t *            The resource key to use\n\t * @param resourceModel\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final String resourceKey,\n\t\t\tfinal IModel resourceModel)\n\t{\n\n\t\tfinal List keys = new ArrayList(2);\n\t\tkeys.add(resourceKey);\n\n\t\tfinal String defaultKey = Classes.simpleName(getClass());\n\t\tif (!keys.contains(defaultKey))\n\t\t{\n\t\t\tkeys.add(defaultKey);\n\t\t}\n\n\t\tMap map = (Map)resourceModel.getObject(formComponent);\n\n\t\tformComponent.error(keys, map);\n\t}","id":103664,"modified_method":"/**\n\t * Returns a formatted validation error message for a given component. The\n\t * error message is retrieved from a message bundle associated with the page\n\t * in which this validator is contained using the given resource key. The\n\t * resourceModel is used for variable interpolation.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param resourceKey\n\t *            The resource key to use\n\t * @param resourceModel\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final String resourceKey,\n\t\t\tfinal IModel resourceModel)\n\t{\n\n\t\tif (formComponent == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"formComponent cannot be null\");\n\t\t}\n\t\tif (resourceKey == null)\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"resourceKey cannot be null\");\n\t\t}\n\n\t\tfinal List keys = new ArrayList(2);\n\t\tkeys.add(resourceKey);\n\n\t\tfinal String defaultKey = Classes.simpleName(getClass());\n\t\tif (!keys.contains(defaultKey))\n\t\t{\n\t\t\tkeys.add(defaultKey);\n\t\t}\n\n\t\tMap args;\n\t\tif (resourceModel == null)\n\t\t{\n\t\t\targs = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\targs = (Map)resourceModel.getObject(formComponent);\n\t\t}\n\n\t\tformComponent.error(keys, args);\n\t}","commit_id":"e8f6fdf22491740ad205887901d402e82f8a58b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Sets an error on the component being validated using the given map for\n\t * variable interpolations.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param resourceKey\n\t *            The resource key to use\n\t * @param map\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final String resourceKey, final Map map)\n\t{\n\t\terror(formComponent, resourceKey, Model.valueOf(map));\n\t}","id":103665,"modified_method":"/**\n\t * Sets an error on the component being validated using the given map for\n\t * variable interpolations.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param resourceKey\n\t *            The resource key to use\n\t * @param map\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final String resourceKey, final Map map)\n\t{\n\t\terror(formComponent, resourceKey, (map == null) ? new Model() : Model.valueOf(map));\n\t}","commit_id":"e8f6fdf22491740ad205887901d402e82f8a58b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Sets an error on the component being validated using the given map for\n\t * variable interpolations.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param map\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final Map map)\n\t{\n\t\terror(formComponent, resourceKey(formComponent), Model.valueOf(map));\n\t}","id":103666,"modified_method":"/**\n\t * Sets an error on the component being validated using the given map for\n\t * variable interpolations.\n\t * \n\t * @param formComponent\n\t *            form component\n\t * @param map\n\t *            The model for variable interpolation\n\t */\n\tpublic void error(final FormComponent formComponent, final Map map)\n\t{\n\t\terror(formComponent, resourceKey(formComponent), (map == null) ? new Model() : Model\n\t\t\t\t.valueOf(map));\n\t}","commit_id":"e8f6fdf22491740ad205887901d402e82f8a58b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Builds and reports an error message. Typically called from a validator.\n\t * \n\t * TODO Form: Javadoc this more\n\t * \n\t * @param resourceKeys\n\t *            list of resource keys to try\n\t * @param args\n\t *            argument substituion map\n\t */\n\tpublic final void error(List/* <String> */resourceKeys, Map/* <String,String> */args)\n\t{\n\t\tString prefix = getValidatorKeyPrefix();\n\t\tif (Strings.isEmpty(prefix))\n\t\t{\n\t\t\tprefix = \"\";\n\t\t}\n\n\t\t// prepare the arguments map by adding default arguments such as input,\n\t\t// name, and label\n\t\tfinal Map fullArgs = new HashMap(args.size() + 4);\n\t\tfullArgs.putAll(args);\n\t\tif (!fullArgs.containsKey(\"input\"))\n\t\t{\n\t\t\tfullArgs.put(\"input\", getInput());\n\t\t}\n\t\tif (!fullArgs.containsKey(\"name\"))\n\t\t{\n\t\t\tfullArgs.put(\"name\", getId());\n\t\t}\n\t\tif (!fullArgs.containsKey(\"label\"))\n\t\t{\n\t\t\tObject label = null;\n\t\t\tif (getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getLabel().getObject(this);\n\t\t\t}\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\tfullArgs.put(\"label\", label);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// apply default value (component id) if key/value can not be\n\t\t\t\t// found\n\t\t\t\tfullArgs.put(\"label\", getLocalizer().getString(getId(), getParent(), getId()));\n\t\t\t}\n\t\t}\n\n\t\tfinal IModel argsModel = new Model((Serializable)fullArgs);\n\n\t\t// iterate through keys in order they were provided\n\n\t\tfinal Localizer localizer = getLocalizer();\n\t\tfinal Iterator keys = resourceKeys.iterator();\n\n\t\tString message = null;\n\n\t\twhile (keys.hasNext())\n\t\t{\n\t\t\tfinal String key = (String)keys.next();\n\n\t\t\tString resource = prefix + getId() + \".\" + key;\n\n\t\t\t// Note: It is important that the default value of \"\" is provided\n\t\t\t// to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\tmessage = localizer.getString(resource, getParent(), argsModel, \"\");\n\n\t\t\t// If not found, than ..\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Have a 2nd try with the class name as the key. This makes for\n\t\t\t\t// keys like \"RequiredValidator\" in any of the properties files\n\t\t\t\t// along the path.\n\n\t\t\t\tresource = prefix + key;\n\n\t\t\t\tif (keys.hasNext())\n\t\t\t\t{\n\t\t\t\t\tmessage = localizer.getString(resource, this, argsModel, \"\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\t * Note: This is the last key we are going to try. It is\n\t\t\t\t\t * important that the default value of \"\" is NOT provided to\n\t\t\t\t\t * getString() throw either MissingResourceException or to\n\t\t\t\t\t * to return a default string like \"[Warning: String ...\" in\n\t\t\t\t\t * case the property could not be found.\n\t\t\t\t\t */\n\t\t\t\t\tmessage = localizer.getString(resource, this, argsModel);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\terror(message);\n\t}","id":103667,"modified_method":"/**\n\t * Builds and reports an error message. Typically called from a validator.\n\t * \n\t * TODO Form: Javadoc this more\n\t * \n\t * @param resourceKeys\n\t *            list of resource keys to try\n\t * @param args\n\t *            argument substituion map\n\t */\n\tpublic final void error(List/* <String> */resourceKeys, Map/* <String,String> */args)\n\t{\n\t\tString prefix = getValidatorKeyPrefix();\n\t\tif (Strings.isEmpty(prefix))\n\t\t{\n\t\t\tprefix = \"\";\n\t\t}\n\n\t\t// prepare the arguments map by adding default arguments such as input,\n\t\t// name, and label\n\t\tfinal Map fullArgs;\n\t\tif (args == null)\n\t\t{\n\t\t\tfullArgs = new HashMap(4);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfullArgs = new HashMap(args.size() + 4);\n\t\t\tfullArgs.putAll(args);\n\t\t}\n\n\t\tif (!fullArgs.containsKey(\"input\"))\n\t\t{\n\t\t\tfullArgs.put(\"input\", getInput());\n\t\t}\n\t\tif (!fullArgs.containsKey(\"name\"))\n\t\t{\n\t\t\tfullArgs.put(\"name\", getId());\n\t\t}\n\t\tif (!fullArgs.containsKey(\"label\"))\n\t\t{\n\t\t\tObject label = null;\n\t\t\tif (getLabel() != null)\n\t\t\t{\n\t\t\t\tlabel = getLabel().getObject(this);\n\t\t\t}\n\t\t\tif (label != null)\n\t\t\t{\n\t\t\t\tfullArgs.put(\"label\", label);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// apply default value (component id) if key/value can not be\n\t\t\t\t// found\n\t\t\t\tfullArgs.put(\"label\", getLocalizer().getString(getId(), getParent(), getId()));\n\t\t\t}\n\t\t}\n\n\t\tfinal IModel argsModel = new Model((Serializable)fullArgs);\n\n\t\t// iterate through keys in order they were provided\n\n\t\tfinal Localizer localizer = getLocalizer();\n\t\tfinal Iterator keys = resourceKeys.iterator();\n\n\t\tString message = null;\n\n\t\twhile (keys.hasNext())\n\t\t{\n\t\t\tfinal String key = (String)keys.next();\n\n\t\t\tString resource = prefix + getId() + \".\" + key;\n\n\t\t\t// Note: It is important that the default value of \"\" is provided\n\t\t\t// to getString() not to throw a MissingResourceException or to\n\t\t\t// return a default string like \"[Warning: String ...\"\n\t\t\tmessage = localizer.getString(resource, getParent(), argsModel, \"\");\n\n\t\t\t// If not found, than ..\n\t\t\tif (Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\t// Have a 2nd try with the class name as the key. This makes for\n\t\t\t\t// keys like \"RequiredValidator\" in any of the properties files\n\t\t\t\t// along the path.\n\n\t\t\t\tresource = prefix + key;\n\n\t\t\t\tif (keys.hasNext())\n\t\t\t\t{\n\t\t\t\t\tmessage = localizer.getString(resource, this, argsModel, \"\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\t * Note: This is the last key we are going to try. It is\n\t\t\t\t\t * important that the default value of \"\" is NOT provided to\n\t\t\t\t\t * getString() throw either MissingResourceException or to\n\t\t\t\t\t * to return a default string like \"[Warning: String ...\" in\n\t\t\t\t\t * case the property could not be found.\n\t\t\t\t\t */\n\t\t\t\t\tmessage = localizer.getString(resource, this, argsModel);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!Strings.isEmpty(message))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\terror(message);\n\t}","commit_id":"e8f6fdf22491740ad205887901d402e82f8a58b4","url":"https://github.com/apache/wicket"},{"original_method":"private static Map<String, String> getTranslationsForAttributes(Map<String, String> attributes, String[] requiredAttributes, String type) {\n        if (requiredAttributes == null) {\n            // XXX Nothing to do; not sure if we need this check\n            return new HashMap<String, String>(0);\n        }\n        \n        Map<String, String> translations = new HashMap<String, String>(requiredAttributes.length);\n        \n        for (String requiredAttribute : requiredAttributes) {\n            String attributeValue = attributes.get(requiredAttribute);\n            if (attributeValue == null) {\n                throw new IllegalArgumentException(type + \" '\" + requiredAttribute + \"' is not available in the list of provided attributes.  Available \" + type + \"s: \" + StringUtils.collectionToDelimitedString(attributes.keySet(), \", \"));\n            }\n\n            // Replace any single backslashes in the value with escaped backslashes so other parsing won't barf\n            String replacedValue = attributeValue.replace(\"\\\\\", \"\\\\\\\\\");\n            translations.put(RE.simplePatternToFullRegularExpression(\"{\" + requiredAttribute + \"}\"), replacedValue);\n        }\n\n        return translations;\n    }","id":103668,"modified_method":"private static Map<String, String> getTranslationsForAttributes(Map<String, String> attributes, String[] requiredAttributes, String type) {\n        if (requiredAttributes == null) {\n            // XXX Nothing to do; not sure if we need this check\n            return new HashMap<String, String>(0);\n        }\n\n        Map<String, String> translations = new HashMap<String, String>(requiredAttributes.length);\n\n        for (String requiredAttribute : requiredAttributes) {\n            String attributeValue = attributes.get(requiredAttribute);\n            if (attributeValue == null) {\n                throw new IllegalArgumentException(type + \" '\" + requiredAttribute + \"' is not available in the list of provided attributes.  Available \" + type + \"s: \" + StringUtils.collectionToDelimitedString(attributes.keySet(), \", \"));\n            }\n\n            // Replace any single backslashes in the value with escaped backslashes so other parsing won't barf\n            String replacedValue = attributeValue.replace(\"\\\\\", \"\\\\\\\\\");\n            translations.put(\"{\" + requiredAttribute + \"}\", replacedValue);\n        }\n\n        return translations;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>createPrefabCommand<\/p>\n     *\n     * @param graph a {@link org.opennms.web.graph.Graph} object.\n     * @param commandPrefix a {@link java.lang.String} object.\n     * @param workDir a {@link java.io.File} object.\n     * @param reportName a {@link java.lang.String} object.\n     * @return a {@link java.lang.String} object.\n     */\n\n    protected String createPrefabCommand(Graph graph,\n            String commandPrefix,\n            File workDir, String reportName,\n            Integer width, Integer height) {\n        PrefabGraph prefabGraph = graph.getPrefabGraph();\n\n        String[] rrds = getRrdNames(graph.getResource(), graph.getPrefabGraph().getColumns());\n        \n        StringBuffer buf = new StringBuffer();\n        buf.append(commandPrefix);\n        buf.append(\" \");\n        buf.append(prefabGraph.getCommand());\n        String command = buf.toString();\n        \n        long startTime = graph.getStart().getTime();\n        long endTime = graph.getEnd().getTime();\n        long diffTime = endTime - startTime;\n        \n        /*\n         * remember rrdtool wants the time in seconds, not milliseconds;\n         * java.util.Date.getTime() returns milliseconds, so divide by 1000\n         */\n        String startTimeString = Long.toString(startTime / 1000);\n        String endTimeString = Long.toString(endTime / 1000);\n        String diffTimeString = Long.toString(diffTime / 1000);\n        \n        HashMap<String, String> translationMap = new HashMap<String, String>();\n        \n        for (int i = 0; i < rrds.length; i++) {\n            String key = \"{rrd\" + (i + 1) + \"}\";\n            translationMap.put(RE.simplePatternToFullRegularExpression(key), rrds[i]);\n        }\n        \n        translationMap.put(RE.simplePatternToFullRegularExpression(\"{startTime}\"), startTimeString);\n        translationMap.put(RE.simplePatternToFullRegularExpression(\"{endTime}\"), endTimeString);\n        translationMap.put(RE.simplePatternToFullRegularExpression(\"{diffTime}\"), diffTimeString);\n\n        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        translationMap.put(RE.simplePatternToFullRegularExpression(\"{startTimeDate}\"), fmt.format(new Date(startTime)).replace(\":\", \"\\\\:\"));\n        translationMap.put(RE.simplePatternToFullRegularExpression(\"{endTimeDate}\"), fmt.format(new Date(endTime)).replace(\":\", \"\\\\:\"));\n\n        // Handle a start time with a format.\n        RE stre = new RE(\"\\\\{startTime:(.+?)\\\\}\");\n        int pos = 0;\n        boolean matchFail = false;\n        while (stre.match(command, pos) && !matchFail) {\n            String sdfPattern = stre.getParen(1);\n            if (sdfPattern == null) {\n              matchFail = true;\n            } else {\n                try {\n                    fmt = new SimpleDateFormat(sdfPattern);\n                    translationMap.put(RE.simplePatternToFullRegularExpression(\"{startTime:\"+sdfPattern+\"}\"), fmt.format(new Date(startTime)).replace(\":\", \"\\\\:\"));\n                } catch (IllegalArgumentException e) {\n                    LOG.error(\"Cannot parse date format '{}' for graph {}.\", sdfPattern, reportName);\n                }\n                pos = pos + sdfPattern.length() + 1;\n            }\n        }\n\n        // Handle an end time with a format\n        RE etre = new RE(\"\\\\{endTime:(.+?)\\\\}\");\n        pos = 0;\n        matchFail = false;\n        while (etre.match(command, pos) && !matchFail) {\n            String sdfPattern = etre.getParen(1);\n            if (sdfPattern == null) {\n              matchFail = true;\n            } else {\n                try {\n                    fmt = new SimpleDateFormat(sdfPattern);\n                    translationMap.put(RE.simplePatternToFullRegularExpression(\"{endTime:\"+sdfPattern+\"}\"), fmt.format(new Date(endTime)).replace(\":\", \"\\\\:\"));\n                } catch (IllegalArgumentException e) {\n                    LOG.error(\"Cannot parse date format '{}' for graph {}.\", sdfPattern, reportName);\n                }\n                pos = pos + sdfPattern.length() + 1;\n            }\n        }\n\n        try {\n            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getExternalValueAttributes(), prefabGraph.getExternalValues(), \"external value attribute\"));\n            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getStringPropertyAttributes(), prefabGraph.getPropertiesValues(), \"string property attribute\"));\n        } catch (RuntimeException e) {\n            LOG.error(\"Invalid attributes were found on resource '{}'\", graph.getResource().getId());\n            throw e;\n        }\n        \n        \n        try {\n            for (Map.Entry<String, String> translation : translationMap.entrySet()) {\n                // replace s1 with s2\n                RE re = new RE(translation.getKey());\n                command = re.subst(command, translation.getValue());\n            }\n        } catch (RESyntaxException e) {\n            throw new IllegalArgumentException(\"Invalid regular expression \"\n                                               + \"syntax, check \"\n                                               + \"rrd-properties file\", e);\n        }\n        \n        \n        if (width != null) {\n            final Pattern re = Pattern.compile(\"(--width|-w)(\\\\w+|=)(\\\\d+)\");\n        \n            final Matcher matcher = re.matcher(command);\n            if (matcher.matches()) {\n                matcher.replaceFirst(\"--width \" + width);\n            } else {\n                command = command + \" --width \" + width;\n            }\n        }\n        \n        if (height != null) {\n            final Pattern re = Pattern.compile(\"(--height|-h)(\\\\w+|=)(\\\\d+)\");\n            \n            final Matcher matcher = re.matcher(command);\n            if (matcher.matches()) {\n                matcher.replaceFirst(\"--height \" + height);\n            } else {\n                command = command + \" --height \" + height;\n            }\n        }\n        \n        return command;\n    }","id":103669,"modified_method":"/**\n     * <p>createPrefabCommand<\/p>\n     *\n     * @param graph a {@link org.opennms.web.graph.Graph} object.\n     * @param commandPrefix a {@link java.lang.String} object.\n     * @param workDir a {@link java.io.File} object.\n     * @param reportName a {@link java.lang.String} object.\n     * @return a {@link java.lang.String} object.\n     */\n\n    protected String createPrefabCommand(Graph graph, String commandPrefix, File workDir, String reportName, Integer width, Integer height) {\n        PrefabGraph prefabGraph = graph.getPrefabGraph();\n\n        String[] rrds = getRrdNames(graph.getResource(), graph.getPrefabGraph().getColumns());\n\n        StringBuffer buf = new StringBuffer();\n        buf.append(commandPrefix);\n        buf.append(\" \");\n        buf.append(prefabGraph.getCommand());\n        String command = buf.toString();\n\n        long startTime = graph.getStart().getTime();\n        long endTime = graph.getEnd().getTime();\n        long diffTime = endTime - startTime;\n\n        /*\n         * remember rrdtool wants the time in seconds, not milliseconds;\n         * java.util.Date.getTime() returns milliseconds, so divide by 1000\n         */\n        String startTimeString = Long.toString(startTime / 1000);\n        String endTimeString = Long.toString(endTime / 1000);\n        String diffTimeString = Long.toString(diffTime / 1000);\n\n        HashMap<String, String> translationMap = new HashMap<String, String>();\n\n        for (int i = 0; i < rrds.length; i++) {\n            String key = \"{rrd\" + (i + 1) + \"}\";\n            translationMap.put(key, rrds[i]);\n        }\n\n        translationMap.put(\"{startTime}\", startTimeString);\n        translationMap.put(\"{endTime}\", endTimeString);\n        translationMap.put(\"{diffTime}\", diffTimeString);\n\n        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        translationMap.put(\"{startTimeDate}\", fmt.format(new Date(startTime)).replace(\":\", \"\\\\:\"));\n        translationMap.put(\"{endTimeDate}\", fmt.format(new Date(endTime)).replace(\":\", \"\\\\:\"));\n\n        // Handle a start time with a format.\n        Matcher stm = Pattern.compile(\"\\\\{startTime:(.+?)\\\\}\").matcher(command);\n        boolean matchFail = false;\n        while(stm.find() && !matchFail) {\n            String sdfPattern = stm.group(0);\n            if (sdfPattern == null) {\n                matchFail = true;\n            } else {\n                try {\n                    fmt = new SimpleDateFormat(sdfPattern);\n                    translationMap.put(\"{startTime:\"+sdfPattern+\"}\", fmt.format(new Date(startTime)).replace(\":\", \"\\\\:\"));\n                } catch (IllegalArgumentException e) {\n                    LOG.error(\"Cannot parse date format '{}' for graph {}.\", sdfPattern, reportName);\n                }\n            }\n        }\n\n        // Handle an end time with a format\n        Matcher etm = Pattern.compile(\"\\\\{endTime:(.+?)\\\\}\").matcher(command);\n        matchFail = false;\n        while (etm.find() && !matchFail) {\n            String sdfPattern = etm.group(0);\n            if (sdfPattern == null) {\n              matchFail = true;\n            } else {\n                try {\n                    fmt = new SimpleDateFormat(sdfPattern);\n                    translationMap.put(\"{endTime:\"+sdfPattern+\"}\", fmt.format(new Date(endTime)).replace(\":\", \"\\\\:\"));\n                } catch (IllegalArgumentException e) {\n                    LOG.error(\"Cannot parse date format '{}' for graph {}.\", sdfPattern, reportName);\n                }\n            }\n        }\n\n        try {\n            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getExternalValueAttributes(), prefabGraph.getExternalValues(), \"external value attribute\"));\n            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getStringPropertyAttributes(), prefabGraph.getPropertiesValues(), \"string property attribute\"));\n        } catch (RuntimeException e) {\n            LOG.error(\"Invalid attributes were found on resource '{}'\", graph.getResource().getId());\n            throw e;\n        }\n\n\n        try {\n            for (Map.Entry<String, String> translation : translationMap.entrySet()) {\n                // replace s1 with s2\n                final Matcher matcher = Pattern.compile(translation.getKey(), Pattern.LITERAL).matcher(command);\n                matcher.replaceAll(translation.getValue());\n            }\n        } catch (PatternSyntaxException e) {\n            throw new IllegalArgumentException(\"Invalid regular expression syntax, check rrd-properties file\", e);\n        }\n\n\n        if (width != null) {\n            final Pattern re = Pattern.compile(\"(--width|-w)(\\\\w+|=)(\\\\d+)\");\n\n            final Matcher matcher = re.matcher(command);\n            if (matcher.matches()) {\n                matcher.replaceFirst(\"--width \" + width);\n            } else {\n                command = command + \" --width \" + width;\n            }\n        }\n\n        if (height != null) {\n            final Pattern re = Pattern.compile(\"(--height|-h)(\\\\w+|=)(\\\\d+)\");\n\n            final Matcher matcher = re.matcher(command);\n            if (matcher.matches()) {\n                matcher.replaceFirst(\"--height \" + height);\n            } else {\n                command = command + \" --height \" + height;\n            }\n        }\n\n        return command;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retry = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        String banner = null;\n        String match = null;\n        String script = null;\n        String args = null;\n        String hoption = \"--hostname\";\n        String toption = \"--timeout\";\n        if (qualifiers != null) {\n            retry = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            script = ParameterMap.getKeyedString(qualifiers, \"script\", null);\n            args = ParameterMap.getKeyedString(qualifiers, \"args\", null);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n\t    hoption = ParameterMap.getKeyedString(qualifiers, \"hoption\", \"--hostname\");\n\t    toption = ParameterMap.getKeyedString(qualifiers, \"toption\", \"--timeout\");\n        }\n        if (script == null) {\n            throw new RuntimeException(\"GpPlugin: required parameter 'script' is not present in supplied properties.\");\n        }\n\n        //\n        // convert timeout to seconds for ExecRunner\n        //\n        if (0 < timeout && timeout < 1000)\n            timeout = 1;\n        else\n            timeout = timeout / 1000;\n\n        try {\n            StringBuffer bannerResult = null;\n            RE regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = new RE(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = new RE(banner);\n                bannerResult = new StringBuffer();\n            }\n\n            boolean result = isServer(address, retry, timeout, script, args, regex, bannerResult, hoption, toption);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0)\n                    qualifiers.put(\"banner\", bannerResult.toString());\n            }\n\n            return result;\n        } catch (RESyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","id":103670,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retry = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        String banner = null;\n        String match = null;\n        String script = null;\n        String args = null;\n        String hoption = \"--hostname\";\n        String toption = \"--timeout\";\n        if (qualifiers != null) {\n            retry = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            script = ParameterMap.getKeyedString(qualifiers, \"script\", null);\n            args = ParameterMap.getKeyedString(qualifiers, \"args\", null);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n\t    hoption = ParameterMap.getKeyedString(qualifiers, \"hoption\", \"--hostname\");\n\t    toption = ParameterMap.getKeyedString(qualifiers, \"toption\", \"--timeout\");\n        }\n        if (script == null) {\n            throw new RuntimeException(\"GpPlugin: required parameter 'script' is not present in supplied properties.\");\n        }\n\n        //\n        // convert timeout to seconds for ExecRunner\n        //\n        if (0 < timeout && timeout < 1000)\n            timeout = 1;\n        else\n            timeout = timeout / 1000;\n\n        try {\n            StringBuffer bannerResult = null;\n            Pattern regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = Pattern.compile(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = Pattern.compile(banner);\n                bannerResult = new StringBuffer();\n            }\n\n            boolean result = isServer(address, retry, timeout, script, args, regex, bannerResult, hoption, toption);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0)\n                    qualifiers.put(\"banner\", bannerResult.toString());\n            }\n\n            return result;\n        } catch (PatternSyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Test to see if the passed script-host-argument combination is the\n     * endpoint for a GP server. If there is a GP server at that destination\n     * then a value of true is returned from the method. Otherwise a false value\n     * is returned to the caller. In order to return true the script must\n     * generate a banner line which contains the text from the banner or match\n     * argument.\n     * <\/P>\n     * \n     * @param host\n     *            The host to pass to the script\n     * @param retry\n     *            The number of retry attempts to make\n     * @param timeout\n     *            The timeout value for each retry\n     * @param script\n     *            The external script or program to call\n     * @param args\n     *            The arguments to pass to the script\n     * @param regex\n     *            The regular expression used to determine banner match\n     * @param bannerResult\n     * @param hoption\n     *            The option string passed to the exec for the IP address (hostname)\n     * @param toption\n     *            The option string passed to the exec for the timeout\n     * \n     * @return True if a connection is established with the script and the\n     *         banner line returned by the script matches the regular expression\n     *         regex.\n     */\n    private boolean isServer(InetAddress host, int retry, int timeout, String script, String args, RE regex, StringBuffer bannerResult, String hoption, String toption) {\n\n        boolean isAServer = false;\n\n        LOG.debug(\"poll: address = {}, script = {}, arguments = {}, timeout(seconds) = {}, retry = {}\", retry, InetAddressUtils.str(host), script, args, timeout);\n\n        for (int attempts = 0; attempts <= retry && !isAServer; attempts++) {\n            try {\n                int exitStatus = 100;\n                ExecRunner er = new ExecRunner();\n                er.setMaxRunTimeSecs(timeout);\n                if (args == null)\n                    exitStatus = er.exec(script + \" \" + hoption + \" \" + InetAddressUtils.str(host) + \" \" + toption + \" \" + timeout);\n                else\n                    exitStatus = er.exec(script + \" \" + hoption + \" \" + InetAddressUtils.str(host) + \" \" + toption + \" \" + timeout + \" \" + args);\n                if (exitStatus != 0) {\n                    LOG.debug(\"{} failed with exit code {}\", script, exitStatus);\n                    isAServer = false;\n                }\n                if (er.isMaxRunTimeExceeded()) {\n                    LOG.debug(\"{} failed. Timeout exceeded\", script);\n                    isAServer = false;\n                } else {\n                    if (exitStatus == 0) {\n                        String response = \"\";\n                        String error = \"\";\n                        response = er.getOutString();\n                        error = er.getErrString();\n                        if (response.equals(\"\"))\n                            LOG.debug(\"{} returned no output\", script);\n                        if (!error.equals(\"\"))\n                            LOG.debug(\"{} error = {}\", script, error);\n                        if (regex == null || regex.match(response)) {\n\n                            LOG.debug(\"isServer: matching response = {}\", response);\n                            isAServer = true;\n                            if (bannerResult != null)\n                                bannerResult.append(response);\n                        } else {\n                            isAServer = false;\n\n                            LOG.debug(\"isServer: NON-matching response = {}\", response);\n                        }\n                    }\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"{} ArrayIndexOutOfBoundsException\", script);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                isAServer = false;\n            } catch (IOException e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"IOException occurred. Check for proper operation of {}\", script);\n            } catch (Throwable e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"{} Exception occurred\", script);\n            }\n        }\n\n        //\n        // return the status of the server\n        //\n        LOG.debug(\"poll: GP - isAServer = {} {}\", InetAddressUtils.str(host), isAServer);\n        return isAServer;\n    }","id":103671,"modified_method":"/**\n     * <P>\n     * Test to see if the passed script-host-argument combination is the\n     * endpoint for a GP server. If there is a GP server at that destination\n     * then a value of true is returned from the method. Otherwise a false value\n     * is returned to the caller. In order to return true the script must\n     * generate a banner line which contains the text from the banner or match\n     * argument.\n     * <\/P>\n     *\n     * @param host\n     *            The host to pass to the script\n     * @param retry\n     *            The number of retry attempts to make\n     * @param timeout\n     *            The timeout value for each retry\n     * @param script\n     *            The external script or program to call\n     * @param args\n     *            The arguments to pass to the script\n     * @param regex\n     *            The regular expression used to determine banner match\n     * @param bannerResult\n     * @param hoption\n     *            The option string passed to the exec for the IP address (hostname)\n     * @param toption\n     *            The option string passed to the exec for the timeout\n     *\n     * @return True if a connection is established with the script and the\n     *         banner line returned by the script matches the regular expression\n     *         regex.\n     */\n    private boolean isServer(InetAddress host, int retry, int timeout, String script, String args, Pattern regex, StringBuffer bannerResult, String hoption, String toption) {\n\n        boolean isAServer = false;\n\n        LOG.debug(\"poll: address = {}, script = {}, arguments = {}, timeout(seconds) = {}, retry = {}\", retry, InetAddressUtils.str(host), script, args, timeout);\n\n        for (int attempts = 0; attempts <= retry && !isAServer; attempts++) {\n            try {\n                int exitStatus = 100;\n                ExecRunner er = new ExecRunner();\n                er.setMaxRunTimeSecs(timeout);\n                if (args == null) {\n                    exitStatus = er.exec(script + \" \" + hoption + \" \" + InetAddressUtils.str(host) + \" \" + toption + \" \" + timeout);\n                } else {\n                    exitStatus = er.exec(script + \" \" + hoption + \" \" + InetAddressUtils.str(host) + \" \" + toption + \" \" + timeout + \" \" + args);\n                }\n                if (exitStatus != 0) {\n                    LOG.debug(\"{} failed with exit code {}\", script, exitStatus);\n                    isAServer = false;\n                }\n                if (er.isMaxRunTimeExceeded()) {\n                    LOG.debug(\"{} failed. Timeout exceeded\", script);\n                    isAServer = false;\n                } else {\n                    if (exitStatus == 0) {\n                        String response = \"\";\n                        String error = \"\";\n                        response = er.getOutString();\n                        error = er.getErrString();\n                        if (response.equals(\"\")) {\n                            LOG.debug(\"{} returned no output\", script);\n                        }\n                        if (!error.equals(\"\")) {\n                            LOG.debug(\"{} error = {}\", script, error);\n                        }\n                        if (regex == null || regex.matcher(response).find()) {\n\n                            LOG.debug(\"isServer: matching response = {}\", response);\n                            isAServer = true;\n                            if (bannerResult != null) {\n                                bannerResult.append(response);\n                            }\n                        } else {\n                            isAServer = false;\n\n                            LOG.debug(\"isServer: NON-matching response = {}\", response);\n                        }\n                    }\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"{} ArrayIndexOutOfBoundsException\", script);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                isAServer = false;\n            } catch (IOException e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"IOException occurred. Check for proper operation of {}\", script);\n            } catch (Throwable e) {\n                isAServer = false;\n                e.fillInStackTrace();\n                LOG.debug(\"{} Exception occurred\", script);\n            }\n        }\n\n        //\n        // return the status of the server\n        //\n        LOG.debug(\"poll: GP - isAServer = {} {}\", InetAddressUtils.str(host), isAServer);\n        return isAServer;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retries = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        int port = -1;\n\t\tint padding = -1;\n\n        String banner = null;\n        String match = null;\n\t\tString command = null;\n\n        if (qualifiers != null) {\n\t        command = ParameterMap.getKeyedString(qualifiers, \"command\", NrpePacket.HELLO_COMMAND);\n\t        port = ParameterMap.getKeyedInteger(qualifiers, \"port\", CheckNrpe.DEFAULT_PORT);\n\t        padding = ParameterMap.getKeyedInteger(qualifiers, \"padding\", NrpePacket.DEFAULT_PADDING);\n            retries = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n            m_useSsl = ParameterMap.getKeyedBoolean(qualifiers, \"usessl\", DEFAULT_USE_SSL);\n        }\n\n        try {\n            StringBuffer bannerResult = null;\n            RE regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = new RE(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = new RE(banner);\n                bannerResult = new StringBuffer();\n            }\n\n            boolean result = isServer(address, port, command, padding, retries, timeout, regex, bannerResult);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0)\n                    qualifiers.put(\"banner\", bannerResult.toString());\n            }\n\n            return result;\n        } catch (RESyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","id":103672,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retries = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        int port = -1;\n\t\tint padding = -1;\n\n        String banner = null;\n        String match = null;\n\t\tString command = null;\n\n        if (qualifiers != null) {\n            command = ParameterMap.getKeyedString(qualifiers, \"command\", NrpePacket.HELLO_COMMAND);\n            port = ParameterMap.getKeyedInteger(qualifiers, \"port\", CheckNrpe.DEFAULT_PORT);\n            padding = ParameterMap.getKeyedInteger(qualifiers, \"padding\", NrpePacket.DEFAULT_PADDING);\n            retries = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n            m_useSsl = ParameterMap.getKeyedBoolean(qualifiers, \"usessl\", DEFAULT_USE_SSL);\n        }\n\n        try {\n            StringBuffer bannerResult = null;\n            Pattern regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = Pattern.compile(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = Pattern.compile(banner);\n                bannerResult = new StringBuffer();\n            }\n\n            boolean result = isServer(address, port, command, padding, retries, timeout, regex, bannerResult);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0)\n                    qualifiers.put(\"banner\", bannerResult.toString());\n            }\n\n            return result;\n        } catch (PatternSyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for a TCP\n     * server. If there is a TCP server at that destination then a value of true\n     * is returned from the method. Otherwise a false value is returned to the\n     * caller. In order to return true the remote host must generate a banner\n     * line which contains the text from the bannerMatch argument.\n     * <\/P>\n     * \n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     * @param bannerResult\n     *            Banner line generated by the remote host must contain this\n     *            text.\n     * \n     * @return True if a connection is established with the host and the banner\n     *         line contains the bannerMatch text.\n     */\n    private boolean isServer(InetAddress host, int port, String command, int padding, int retries, int timeout, RE regex, StringBuffer bannerResult) {\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket = wrapSocket(socket, host.toString(), port);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"NrpePlugin: connected to host: {} on port: {}\", host, port);\n\t\t\t\t\n\t\t\t\tNrpePacket p = new NrpePacket(NrpePacket.QUERY_PACKET, (short) 0,\n\t\t\t\t\t\tcommand);\n\t\t\t\tbyte[] b = p.buildPacket(padding);\n\t\t\t\tOutputStream o = socket.getOutputStream();\n\t\t\t\to.write(b);\n\n\t\t\t\tNrpePacket response = NrpePacket.receivePacket(socket.getInputStream(), padding);\n\t\t\t\tif (response.getResultCode() == 0) {\n                    isAServer = true;\n\t\t\t\t} else if (response.getResultCode() <= 2) {\n\t\t\t\t\t\tString response_msg = response.getBuffer();\n\t\t\t\t\t\tRE r = new RE(\"OK|WARNING|CRITICAL\");\n\t\t\t\t\t\tif (r.match(response_msg)) {\n\t\t\t\t\t\t\tisAServer = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLOG.info(\"received 1-2 return code, {}, with message: {}\", response.getResultCode(), response.getBuffer());\n\t\t\t\t\t\t\tisAServer = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\tLOG.info(\"received 3+ return code, {}, with message: {}\", response.getResultCode(), response.getBuffer());\n                        isAServer = false;\n\t\t\t\t\t\tbreak;\n                }\n\n\t\t\t\t/*\n                // If banner matching string is null or wildcard (\"*\") then we\n                // only need to test connectivity and we've got that!\n                //\n                if (regex == null) {\n                    isAServer = true;\n                } else {\n                    // get a line reader\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                    // Read the server's banner line ouptput and validate it\n                    // against\n                    // the bannerMatch parameter to determine if this interface\n                    // supports the\n                    // service.\n                    //\n                    String response = lineRdr.readLine();\n                    if (regex.match(response)) {\n                        if (log.isDebugEnabled())\n                            log.debug(\"isServer: matching response=\" + response);\n                        isAServer = true;\n                        if (bannerResult != null)\n                            bannerResult.append(response);\n                    } else {\n                        // Got a response but it didn't match...no need to\n                        // attempt retries\n                        isAServer = false;\n                        if (log.isDebugEnabled())\n                            log.debug(\"isServer: NON-matching response=\" + response);\n                        break;\n                    }\n                }\n                */\n            } catch (ConnectException e) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"NrpePlugin: Connection refused to {}:{}\", InetAddressUtils.str(host), port);\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No Route to host!!!\n                //\n                e.fillInStackTrace();\n                LOG.info(\"NrpePlugin: Could not connect to host {}, no route to host\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                LOG.debug(\"NrpePlugin: did not connect to host within timeout: {} attempt: {}\", timeout, attempts);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"NrpePlugin: An expected I/O exception occured connecting to host {} on port {}\", InetAddressUtils.str(host), port, e);\n                isAServer = false;\n            } catch (Throwable t) {\n                isAServer = false;\n                LOG.warn(\"NrpePlugin: An undeclared throwable exception was caught connecting to host {} on port {}\", InetAddressUtils.str(host), port, t);\n            } finally {\n                try {\n                    if (socket != null)\n                        socket.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an ftp server.\n        //\n        return isAServer;\n    }","id":103673,"modified_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for a TCP\n     * server. If there is a TCP server at that destination then a value of true\n     * is returned from the method. Otherwise a false value is returned to the\n     * caller. In order to return true the remote host must generate a banner\n     * line which contains the text from the bannerMatch argument.\n     * <\/P>\n     *\n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     * @param bannerResult\n     *            Banner line generated by the remote host must contain this\n     *            text.\n     *\n     * @return True if a connection is established with the host and the banner\n     *         line contains the bannerMatch text.\n     */\n    private boolean isServer(InetAddress host, int port, String command, int padding, int retries, int timeout, Pattern regex, StringBuffer bannerResult) {\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket = wrapSocket(socket, host.toString(), port);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"NrpePlugin: connected to host: {} on port: {}\", host, port);\n\n                NrpePacket p = new NrpePacket(NrpePacket.QUERY_PACKET, (short) 0, command);\n                byte[] b = p.buildPacket(padding);\n                OutputStream o = socket.getOutputStream();\n                o.write(b);\n\n                NrpePacket response = NrpePacket.receivePacket(socket.getInputStream(), padding);\n                if (response.getResultCode() == 0) {\n                    isAServer = true;\n                } else if (response.getResultCode() <= 2) {\n                    String response_msg = response.getBuffer();\n                    Pattern r = Pattern.compile(\"OK|WARNING|CRITICAL\");\n                    if (r.matcher(response_msg).find()) {\n                        isAServer = true;\n                    } else {\n                        LOG.info(\"received 1-2 return code, {}, with message: {}\", response.getResultCode(), response.getBuffer());\n                        isAServer = false;\n                        break;\n\t\t\t\t\t\t}\n                } else {\n                    LOG.info(\"received 3+ return code, {}, with message: {}\", response.getResultCode(), response.getBuffer());\n                    isAServer = false;\n                    break;\n                }\n\n                /*\n                // If banner matching string is null or wildcard (\"*\") then we\n                // only need to test connectivity and we've got that!\n                //\n                if (regex == null) {\n                    isAServer = true;\n                } else {\n                    // get a line reader\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                    // Read the server's banner line ouptput and validate it\n                    // against\n                    // the bannerMatch parameter to determine if this interface\n                    // supports the\n                    // service.\n                    //\n                    String response = lineRdr.readLine();\n                    if (regex.match(response)) {\n                        if (log.isDebugEnabled())\n                            log.debug(\"isServer: matching response=\" + response);\n                        isAServer = true;\n                        if (bannerResult != null)\n                            bannerResult.append(response);\n                    } else {\n                        // Got a response but it didn't match...no need to\n                        // attempt retries\n                        isAServer = false;\n                        if (log.isDebugEnabled())\n                            log.debug(\"isServer: NON-matching response=\" + response);\n                        break;\n                    }\n                }\n                */\n            } catch (ConnectException e) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"NrpePlugin: Connection refused to {}:{}\", InetAddressUtils.str(host), port);\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No Route to host!!!\n                //\n                e.fillInStackTrace();\n                LOG.info(\"NrpePlugin: Could not connect to host {}, no route to host\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                LOG.debug(\"NrpePlugin: did not connect to host within timeout: {} attempt: {}\", timeout, attempts);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"NrpePlugin: An expected I/O exception occured connecting to host {} on port {}\", InetAddressUtils.str(host), port, e);\n                isAServer = false;\n            } catch (Throwable t) {\n                isAServer = false;\n                LOG.warn(\"NrpePlugin: An undeclared throwable exception was caught connecting to host {} on port {}\", InetAddressUtils.str(host), port, t);\n            } finally {\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an ftp server.\n        //\n        return isAServer;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * <P>\n     * Poll the specified address for SMTP service availability.\n     * <\/P>\n     *\n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by\n     * default TCP port 25). If the connection request is successful, the banner\n     * line generated by the interface is parsed and if the extracted return\n     * code indicates that we are talking to an SMTP server we continue. Next,\n     * an SMTP 'HELO' command is sent to the interface. Again the response is\n     * parsed and a return code extracted and verified. Finally, an SMTP 'QUIT'\n     * command is sent. Provided that the interface's response is valid we set\n     * the service status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     */\n    @Override\n    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {\n        NetworkInterface<InetAddress> iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_INET) {\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_INET currently supported\");\n        }\n        \n        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);\n\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipAddr = iface.getAddress();\n\n        final String hostAddress = InetAddressUtils.str(ipAddr);\n        LOG.debug(\"poll: address = {}, port = {}, {}\", hostAddress, port, tracker);\n\n        PollStatus serviceStatus = PollStatus.unavailable();\n\n        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                tracker.startAttempt();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipAddr, port), tracker.getConnectionTimeout());\n                socket.setSoTimeout(tracker.getSoTimeout());\n\n                LOG.debug(\"SmtpMonitor: connected to host: {} on port: {}\", ipAddr, port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = PollStatus.unresponsive();\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"ASCII\"));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n\n                if (banner == null) {\n                    continue;\n                }\n\n                if (MULTILINE.match(banner)) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                    // Create new regExp to look for last line\n                    // of this multi line response\n                    RE endMultiline = null;\n                    try {\n                        endMultiline = new RE(multiLineRC);\n                    } catch (RESyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = rdr.readLine();\n                    } while (banner != null && !endMultiline.match(banner));\n                    if (banner == null) {\n                        continue;\n                    }\n                }\n\n                LOG.debug(\"poll: banner = {}\", banner);\n\n                StringTokenizer t = new StringTokenizer(banner);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    double responseTime = tracker.elapsedTimeInMillis();\n\n                    if (response == null) {\n                        continue;\n                    }\n\n                    if (MULTILINE.match(response)) {\n                        // Ok we have a multi-line response...first three\n                        // chars of the response line are the return code.\n                        // The last line of the response will start with\n                        // return code followed by a space.\n                        String multiLineRC = new String(response.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                        // Create new regExp to look for last line\n                        // of this multi line response\n                        RE endMultiline = null;\n                        try {\n                            endMultiline = new RE(multiLineRC);\n                        } catch (RESyntaxException ex) {\n                            throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                        }\n\n                        // read until we hit the last line of the multi-line\n                        // response\n                        do {\n                            response = rdr.readLine();\n                        } while (response != null && !endMultiline.match(response));\n                        if (response == null) {\n                            continue;\n                        }\n                    }\n\n                    t = new StringTokenizer(response);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes(\"ASCII\"));\n\n                        //\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        response = rdr.readLine();\n                        if (response == null) {\n                            continue;\n                        }\n                        if (MULTILINE.match(response)) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                            // Create new regExp to look for last line\n                            // of this multi line response\n                            RE endMultiline = null;\n                            try {\n                                endMultiline = new RE(multiLineRC);\n                            } catch (RESyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = rdr.readLine();\n                            } while (response != null && !endMultiline.match(response));\n                            if (response == null) {\n                                continue;\n                            }\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221) {\n                            serviceStatus = PollStatus.available(responseTime);\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or HELO/QUIT comand process.\n                if (!serviceStatus.isAvailable()) {\n                    serviceStatus = PollStatus.unavailable();\n                }\n            } catch (NumberFormatException e) {\n            \tString reason = \"NumberFormatException while polling address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (NoRouteToHostException e) {\n            \tString reason = \"No route to host exception for address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n            \tString reason = \"Did not receive expected response within timeout \" + tracker;\n                LOG.debug(reason);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (ConnectException e) {\n            \tString reason = \"Unable to connect to address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (IOException e) {\n            \tString reason = \"IOException while polling address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    LOG.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","id":103674,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * <P>\n     * Poll the specified address for SMTP service availability.\n     * <\/P>\n     *\n     * <P>\n     * During the poll an attempt is made to connect on the specified port (by\n     * default TCP port 25). If the connection request is successful, the banner\n     * line generated by the interface is parsed and if the extracted return\n     * code indicates that we are talking to an SMTP server we continue. Next,\n     * an SMTP 'HELO' command is sent to the interface. Again the response is\n     * parsed and a return code extracted and verified. Finally, an SMTP 'QUIT'\n     * command is sent. Provided that the interface's response is valid we set\n     * the service status to SERVICE_AVAILABLE and return.\n     * <\/P>\n     */\n    @Override\n    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {\n        NetworkInterface<InetAddress> iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_INET) {\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_INET currently supported\");\n        }\n\n        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);\n\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n\n        // Get interface address from NetworkInterface\n        //\n        InetAddress ipAddr = iface.getAddress();\n\n        final String hostAddress = InetAddressUtils.str(ipAddr);\n        LOG.debug(\"poll: address = {}, port = {}, {}\", hostAddress, port, tracker);\n\n        PollStatus serviceStatus = PollStatus.unavailable();\n\n        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                tracker.startAttempt();\n\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(ipAddr, port), tracker.getConnectionTimeout());\n                socket.setSoTimeout(tracker.getSoTimeout());\n\n                LOG.debug(\"SmtpMonitor: connected to host: {} on port: {}\", ipAddr, port);\n\n                // We're connected, so upgrade status to unresponsive\n                serviceStatus = PollStatus.unresponsive();\n\n                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"ASCII\"));\n\n                //\n                // Tokenize the Banner Line, and check the first\n                // line for a valid return.\n                //\n                String banner = rdr.readLine();\n\n                if (banner == null) {\n                    continue;\n                }\n\n                if (MULTILINE.matcher(banner).matches()) {\n                    // Ok we have a multi-line response...first three\n                    // chars of the response line are the return code.\n                    // The last line of the response will start with\n                    // return code followed by a space.\n                    String multiLineRC = new String(banner.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                    // Create new regExp to look for last line\n                    // of this multi line response\n                    Pattern endMultiline = null;\n                    try {\n                        endMultiline = Pattern.compile(multiLineRC);\n                    } catch (PatternSyntaxException ex) {\n                        throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                    }\n\n                    // read until we hit the last line of the multi-line\n                    // response\n                    do {\n                        banner = rdr.readLine();\n                    } while (banner != null && !endMultiline.matcher(banner).matches());\n                    if (banner == null) {\n                        continue;\n                    }\n                }\n\n                LOG.debug(\"poll: banner = {}\", banner);\n\n                StringTokenizer t = new StringTokenizer(banner);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    //\n                    // get the returned string, tokenize, and\n                    // verify the correct output.\n                    //\n                    String response = rdr.readLine();\n                    double responseTime = tracker.elapsedTimeInMillis();\n\n                    if (response == null) {\n                        continue;\n                    }\n\n                    if (MULTILINE.matcher(response).matches()) {\n                        // Ok we have a multi-line response...first three\n                        // chars of the response line are the return code.\n                        // The last line of the response will start with\n                        // return code followed by a space.\n                        String multiLineRC = new String(response.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                        // Create new regExp to look for last line\n                        // of this multi line response\n                        Pattern endMultiline = null;\n                        try {\n                            endMultiline = Pattern.compile(multiLineRC);\n                        } catch (PatternSyntaxException ex) {\n                            throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                        }\n\n                        // read until we hit the last line of the multi-line\n                        // response\n                        do {\n                            response = rdr.readLine();\n                        } while (response != null && !endMultiline.matcher(response).matches());\n                        if (response == null) {\n                            continue;\n                        }\n                    }\n\n                    t = new StringTokenizer(response);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes(\"ASCII\"));\n\n                        //\n                        // get the returned string, tokenize, and\n                        // verify the correct output.\n                        //\n                        response = rdr.readLine();\n                        if (response == null) {\n                            continue;\n                        }\n                        if (MULTILINE.matcher(response).matches()) {\n                            // Ok we have a multi-line response...first three\n                            // chars of the response line are the return code.\n                            // The last line of the response will start with\n                            // return code followed by a space.\n                            String multiLineRC = new String(response.getBytes(\"ASCII\"), 0, 3, \"ASCII\");\n\n                            // Create new regExp to look for last line\n                            // of this multi line response\n                            Pattern endMultiline = null;\n                            try {\n                                endMultiline = Pattern.compile(multiLineRC);\n                            } catch (PatternSyntaxException ex) {\n                                throw new java.lang.reflect.UndeclaredThrowableException(ex);\n                            }\n\n                            // read until we hit the last line of the multi-line\n                            // response\n                            do {\n                                response = rdr.readLine();\n                            } while (response != null && !endMultiline.matcher(response).matches());\n                            if (response == null) {\n                                continue;\n                            }\n                        }\n\n                        t = new StringTokenizer(response);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221) {\n                            serviceStatus = PollStatus.available(responseTime);\n                        }\n                    }\n                }\n\n                // If we get this far and the status has not been set\n                // to available, then something didn't verify during\n                // the banner checking or HELO/QUIT comand process.\n                if (!serviceStatus.isAvailable()) {\n                    serviceStatus = PollStatus.unavailable();\n                }\n            } catch (NumberFormatException e) {\n            \tString reason = \"NumberFormatException while polling address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (NoRouteToHostException e) {\n            \tString reason = \"No route to host exception for address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n                break; // Break out of for(;;)\n            } catch (InterruptedIOException e) {\n            \tString reason = \"Did not receive expected response within timeout \" + tracker;\n                LOG.debug(reason);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (ConnectException e) {\n            \tString reason = \"Unable to connect to address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } catch (IOException e) {\n            \tString reason = \"IOException while polling address \" + hostAddress;\n                LOG.debug(reason, e);\n                serviceStatus = PollStatus.unavailable(reason);\n            } finally {\n                try {\n                    // Close the socket\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    e.fillInStackTrace();\n                    LOG.debug(\"poll: Error closing socket.\", e);\n                }\n            }\n        }\n\n        //\n        // return the status of the service\n        //\n        return serviceStatus;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for an SMTP\n     * server. If there is an SMTP server at that destination then a value of\n     * true is returned from the method. Otherwise a false value is returned to\n     * the caller.\n     * <\/P>\n     * \n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     * \n     * @return True if server supports SMTP on the specified port, false\n     *         otherwise\n     */\n    private boolean isServer(InetAddress host, int port, int retries, int timeout) {\n        // get a log to send errors\n        //\n\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"SmtpPlugin: connected to host: {} on port: {}\", port, host);\n\n                // Allocate a line reader\n                //\n                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                // Read responses from the server. The initial line should just\n                // be a banner, but go ahead and check for multiline response.\n                //\n                String result = null;\n                do {\n                    result = lineRdr.readLine();\n\n                } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));\n\n                if (result == null || result.length() == 0) {\n                    LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                    continue;\n                }\n\n                // Tokenize the last line result\n                //\n                StringTokenizer t = new StringTokenizer(result);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    // Response from HELO command may be a multi-line response\n                    // (but\n                    // most likely will be single-line)..\n                    // We are expecting to get a response with an integer return\n                    // code in the first token. We can't ge sure that the first\n                    // response will give us what we want. Consider the\n                    // following\n                    // reponse for example:\n                    //\n                    // 250-First line\n                    // 250-Second line\n                    // 250 Requested mail action okay, completed\n                    //\n                    // In this case the final line of the response contains the\n                    // return\n                    // code we are looking for.\n                    do {\n                        result = lineRdr.readLine();\n\n                    } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));\n\n                    if (result == null || result.length() == 0) {\n                        LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                        continue;\n                    }\n\n                    t = new StringTokenizer(result);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        //\n                        // Send the QUIT command\n                        //\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // Response from QUIT command may be a multi-line\n                        // response.\n                        // We are expecting to get a response with an integer\n                        // return\n                        // code in the first token. We can't ge sure that the\n                        // first\n                        // response will give us what we want. Consider the\n                        // following\n                        // reponse for example:\n                        //\n                        // 221-First line\n                        // 221-Second line\n                        // 221 <domain> Service closing transmission channel.\n                        //\n                        // In this case the final line of the response contains\n                        // the return\n                        // code we are looking for.\n                        do {\n                            result = lineRdr.readLine();\n\n                        } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));\n\n                        if (result == null || result.length() == 0) {\n                            LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                            continue;\n                        }\n\n                        t = new StringTokenizer(result);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221)\n                            isAServer = true;\n                    }\n                }\n            } catch (NumberFormatException e) {\n                LOG.info(\"SmtpPlugin: received invalid result code from server {}\", InetAddressUtils.str(host), e);\n                isAServer = false;\n            } catch (ConnectException cE) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"SmtpPlugin: connection refused to {}: {}\", port, InetAddressUtils.str(host));\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No route to host!! No need to perform retries.\n                e.fillInStackTrace();\n                LOG.info(\"SmtpPlugin: Unable to test host {}, no route available\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                LOG.debug(\"SmtpPlugin: did not connect to host within timeout: {} attempt: {}\", attempts, timeout);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"SmtpPlugin: Error communicating with host {}\", InetAddressUtils.str(host), e);\n                isAServer = false;\n            } catch (Throwable t) {\n                LOG.warn(\"SmtpPlugin: Undeclared throwable exception caught contacting host {}\", InetAddressUtils.str(host), t);\n                isAServer = false;\n            } finally {\n                try {\n                    if (socket != null)\n                        socket.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an SMTP server.\n        //\n        return isAServer;\n    }","id":103675,"modified_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for an SMTP\n     * server. If there is an SMTP server at that destination then a value of\n     * true is returned from the method. Otherwise a false value is returned to\n     * the caller.\n     * <\/P>\n     *\n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     *\n     * @return True if server supports SMTP on the specified port, false\n     *         otherwise\n     */\n    private boolean isServer(InetAddress host, int port, int retries, int timeout) {\n        // get a log to send errors\n        //\n\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"SmtpPlugin: connected to host: {} on port: {}\", port, host);\n\n                // Allocate a line reader\n                //\n                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                // Read responses from the server. The initial line should just\n                // be a banner, but go ahead and check for multiline response.\n                //\n                String result = null;\n                do {\n                    result = lineRdr.readLine();\n\n                } while (result != null && result.length() > 0 && MULTILINE_RESULT.matcher(result).find());\n\n                if (result == null || result.length() == 0) {\n                    LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                    continue;\n                }\n\n                // Tokenize the last line result\n                //\n                StringTokenizer t = new StringTokenizer(result);\n                int rc = Integer.parseInt(t.nextToken());\n                if (rc == 220) {\n                    //\n                    // Send the HELO command\n                    //\n                    String cmd = \"HELO \" + LOCALHOST_NAME + \"\\r\\n\";\n                    socket.getOutputStream().write(cmd.getBytes());\n\n                    // Response from HELO command may be a multi-line response\n                    // (but\n                    // most likely will be single-line)..\n                    // We are expecting to get a response with an integer return\n                    // code in the first token. We can't ge sure that the first\n                    // response will give us what we want. Consider the\n                    // following\n                    // reponse for example:\n                    //\n                    // 250-First line\n                    // 250-Second line\n                    // 250 Requested mail action okay, completed\n                    //\n                    // In this case the final line of the response contains the\n                    // return\n                    // code we are looking for.\n                    do {\n                        result = lineRdr.readLine();\n\n                    } while (result != null && result.length() > 0 && MULTILINE_RESULT.matcher(result).find());\n\n                    if (result == null || result.length() == 0) {\n                        LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                        continue;\n                    }\n\n                    t = new StringTokenizer(result);\n                    rc = Integer.parseInt(t.nextToken());\n                    if (rc == 250) {\n                        //\n                        // Send the QUIT command\n                        //\n                        cmd = \"QUIT\\r\\n\";\n                        socket.getOutputStream().write(cmd.getBytes());\n\n                        // Response from QUIT command may be a multi-line\n                        // response.\n                        // We are expecting to get a response with an integer\n                        // return\n                        // code in the first token. We can't ge sure that the\n                        // first\n                        // response will give us what we want. Consider the\n                        // following\n                        // reponse for example:\n                        //\n                        // 221-First line\n                        // 221-Second line\n                        // 221 <domain> Service closing transmission channel.\n                        //\n                        // In this case the final line of the response contains\n                        // the return\n                        // code we are looking for.\n                        do {\n                            result = lineRdr.readLine();\n\n                        } while (result != null && result.length() > 0 && MULTILINE_RESULT.matcher(result).find());\n\n                        if (result == null || result.length() == 0) {\n                            LOG.info(\"Received truncated response from SMTP server {}\", InetAddressUtils.str(host));\n                            continue;\n                        }\n\n                        t = new StringTokenizer(result);\n                        rc = Integer.parseInt(t.nextToken());\n\n                        if (rc == 221)\n                            isAServer = true;\n                    }\n                }\n            } catch (NumberFormatException e) {\n                LOG.info(\"SmtpPlugin: received invalid result code from server {}\", InetAddressUtils.str(host), e);\n                isAServer = false;\n            } catch (ConnectException cE) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"SmtpPlugin: connection refused to {}: {}\", port, InetAddressUtils.str(host));\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No route to host!! No need to perform retries.\n                e.fillInStackTrace();\n                LOG.info(\"SmtpPlugin: Unable to test host {}, no route available\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                LOG.debug(\"SmtpPlugin: did not connect to host within timeout: {} attempt: {}\", attempts, timeout);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"SmtpPlugin: Error communicating with host {}\", InetAddressUtils.str(host), e);\n                isAServer = false;\n            } catch (Throwable t) {\n                LOG.warn(\"SmtpPlugin: Undeclared throwable exception caught contacting host {}\", InetAddressUtils.str(host), t);\n                isAServer = false;\n            } finally {\n                try {\n                    if (socket != null)\n                        socket.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an SMTP server.\n        //\n        return isAServer;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public void connect(InetAddress address, int port, int timeout) throws IOException, Exception {\n        Map<String,?> emptyMap = Collections.emptyMap();\n        TimeoutTracker tracker = new TimeoutTracker(emptyMap, SshClient.DEFAULT_RETRY, timeout);\n        \n        String banner = m_banner;\n        String match = m_match;\n        String clientBanner = m_clientBanner;\n        PollStatus ps = PollStatus.unavailable();\n        \n        Ssh ssh = new Ssh(address, port, tracker.getConnectionTimeout());\n        ssh.setClientBanner(clientBanner);\n        \n        RE regex = null;\n        if (match == null && (banner == null || banner.equals(\"*\"))) {\n            regex = null;\n        } else if (match != null) {\n            regex = new RE(match);\n        } else if (banner != null) {\n            regex = new RE(banner);\n        }\n        \n        for (tracker.reset(); tracker.shouldRetry() && !ps.isAvailable(); tracker.nextAttempt()) {\n            try {\n                ps = ssh.poll(tracker);\n            } catch (InsufficientParametersException e) {\n                LOG.error(\"Caught InsufficientParametersException: {}\", e.getMessage(), e);\n                break;\n            }\n        \n        }\n        \n        // If banner matching string is null or wildcard (\"*\") then we\n        // only need to test connectivity and we've got that!\n        \n        if (regex != null && ps.isAvailable()) {\n            String response = ssh.getServerBanner();\n        \n            if (response == null) {\n                ps = PollStatus.unavailable(\"server closed connection before banner was recieved.\");\n            }\n        \n            if (!regex.match(response)) {\n                // Got a response but it didn't match... no need to attempt\n                // retries\n                LOG.debug(\"isServer: NON-matching response='{}'\", response);\n                ps = PollStatus.unavailable(\"server responded, but banner did not match '\" + banner + \"'\");\n            } else {\n                LOG.debug(\"isServer: matching response='{}'\", response);\n            }\n        }\n        PollStatus result = ps;\n        \n        m_isAvailable = result.isAvailable();\n    }","id":103676,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public void connect(final InetAddress address, final int port, final int timeout) throws Exception {\n        Map<String,?> emptyMap = Collections.emptyMap();\n        TimeoutTracker tracker = new TimeoutTracker(emptyMap, SshClient.DEFAULT_RETRY, timeout);\n\n        String banner = m_banner;\n        String match = m_match;\n        String clientBanner = m_clientBanner;\n        PollStatus ps = PollStatus.unavailable();\n\n        Ssh ssh = new Ssh(address, port, tracker.getConnectionTimeout());\n        ssh.setClientBanner(clientBanner);\n\n        Pattern regex = null;\n        if (match == null && (banner == null || banner.equals(\"*\"))) {\n            regex = null;\n        } else if (match != null) {\n            regex = Pattern.compile(match);\n        } else if (banner != null) {\n            regex = Pattern.compile(banner);\n        }\n\n        for (tracker.reset(); tracker.shouldRetry() && !ps.isAvailable(); tracker.nextAttempt()) {\n            try {\n                ps = ssh.poll(tracker);\n            } catch (InsufficientParametersException e) {\n                LOG.error(\"Caught InsufficientParametersException: {}\", e.getMessage(), e);\n                break;\n            }\n\n        }\n\n        // If banner matching string is null or wildcard (\"*\") then we\n        // only need to test connectivity and we've got that!\n\n        if (regex != null && ps.isAvailable()) {\n            String response = ssh.getServerBanner();\n\n            if (response == null) {\n                ps = PollStatus.unavailable(\"server closed connection before banner was recieved.\");\n            }\n\n            if (!regex.matcher(response).find()) {\n                // Got a response but it didn't match... no need to attempt\n                // retries\n                LOG.debug(\"isServer: NON-matching response='{}'\", response);\n                ps = PollStatus.unavailable(\"server responded, but banner did not match '\" + banner + \"'\");\n            } else {\n                LOG.debug(\"isServer: matching response='{}'\", response);\n            }\n        }\n        PollStatus result = ps;\n\n        m_isAvailable = result.isAvailable();\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * Poll an {@link InetAddress} for SSH availability.\n     *\n     * During the poll an attempt is made to connect on the specified port. If\n     * the connection request is successful, the banner line generated by the\n     * interface is parsed and if the banner text indicates that we are talking\n     * to Provided that the interface's response is valid we mark the poll status\n     * as available and return.\n     */\n    public PollStatus poll(InetAddress address, Map<String,Object> parameters) {\n\n        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);\n\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String banner = ParameterMap.getKeyedString(parameters, \"banner\", null);\n        String match = ParameterMap.getKeyedString(parameters, \"match\", null);\n        String clientBanner = ParameterMap.getKeyedString(parameters, \"client-banner\", Ssh.DEFAULT_CLIENT_BANNER);\n        PollStatus ps = PollStatus.unavailable();\n        \n        Ssh ssh = new Ssh(address, port, tracker.getConnectionTimeout());\n        ssh.setClientBanner(clientBanner);\n\n        RE regex = null;\n        try {\n\t        if (match == null && (banner == null || banner.equals(\"*\"))) {\n\t            regex = null;\n\t        } else if (match != null) {\n\t            regex = new RE(match);\n\t        } else if (banner != null) {\n\t            regex = new RE(banner);\n\t        }\n        } catch (final RESyntaxException e) {\n        \tfinal String matchString = match == null? banner : match;\n\t\tLOG.info(\"Invalid regular expression for SSH banner match /{}/: {}\", matchString, e.getMessage());\n\t\tLOG.debug(\"Invalid Regular expression for SSH banner match /{}/\", matchString, e);\n        }\n\n        for (tracker.reset(); tracker.shouldRetry() && !ps.isAvailable(); tracker.nextAttempt()) {\n            try {\n                ps = ssh.poll(tracker);\n            } catch (final InsufficientParametersException e) {\n                LOG.error(\"An error occurred polling host '{}'\", address, e);\n                break;\n            }\n\n            if (!ps.isAvailable()) {\n                // not able to connect, retry\n                continue;\n            }\n\n            // If banner matching string is null or wildcard (\"*\") then we\n            // only need to test connectivity and we've got that!\n\n            if (regex == null) {\n                return ps;\n            } else {\n                String response = ssh.getServerBanner();\n\n                if (response == null) {\n                    return PollStatus.unavailable(\"server closed connection before banner was received.\");\n                }\n\n                if (regex.match(response)) {\n                    LOG.debug(\"isServer: matching response={}\", response);\n                    return ps;\n                } else {\n                    // Got a response but it didn't match... no need to attempt\n                    // retries\n                    LOG.debug(\"isServer: NON-matching response={}\", response);\n                    return PollStatus.unavailable(\"server responded, but banner did not match '\" + banner + \"'\");\n                }\n            }\n        }\n        return ps;        \n    }","id":103677,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * Poll an {@link InetAddress} for SSH availability.\n     *\n     * During the poll an attempt is made to connect on the specified port. If\n     * the connection request is successful, the banner line generated by the\n     * interface is parsed and if the banner text indicates that we are talking\n     * to Provided that the interface's response is valid we mark the poll status\n     * as available and return.\n     */\n    public PollStatus poll(final InetAddress address, final Map<String,Object> parameters) {\n\n        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);\n\n        int port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n        String banner = ParameterMap.getKeyedString(parameters, \"banner\", null);\n        String match = ParameterMap.getKeyedString(parameters, \"match\", null);\n        String clientBanner = ParameterMap.getKeyedString(parameters, \"client-banner\", Ssh.DEFAULT_CLIENT_BANNER);\n        PollStatus ps = PollStatus.unavailable();\n\n        Ssh ssh = new Ssh(address, port, tracker.getConnectionTimeout());\n        ssh.setClientBanner(clientBanner);\n\n        Pattern regex = null;\n        try {\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = Pattern.compile(match);\n            } else if (banner != null) {\n                regex = Pattern.compile(banner);\n            }\n        } catch (final PatternSyntaxException e) {\n        \tfinal String matchString = match == null? banner : match;\n\t\tLOG.info(\"Invalid regular expression for SSH banner match /{}/: {}\", matchString, e.getMessage());\n\t\tLOG.debug(\"Invalid Regular expression for SSH banner match /{}/\", matchString, e);\n        }\n\n        for (tracker.reset(); tracker.shouldRetry() && !ps.isAvailable(); tracker.nextAttempt()) {\n            try {\n                ps = ssh.poll(tracker);\n            } catch (final InsufficientParametersException e) {\n                LOG.error(\"An error occurred polling host '{}'\", address, e);\n                break;\n            }\n\n            if (!ps.isAvailable()) {\n                // not able to connect, retry\n                continue;\n            }\n\n            // If banner matching string is null or wildcard (\"*\") then we\n            // only need to test connectivity and we've got that!\n\n            if (regex == null) {\n                return ps;\n            } else {\n                String response = ssh.getServerBanner();\n\n                if (response == null) {\n                    return PollStatus.unavailable(\"server closed connection before banner was received.\");\n                }\n\n                if (regex.matcher(response).matches()) {\n                    LOG.debug(\"isServer: matching response={}\", response);\n                    return ps;\n                } else {\n                    // Got a response but it didn't match... no need to attempt\n                    // retries\n                    LOG.debug(\"isServer: NON-matching response={}\", response);\n                    return PollStatus.unavailable(\"server responded, but banner did not match '\" + banner + \"'\");\n                }\n            }\n        }\n        return ps;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retries = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        int port = -1;\n\n        String banner = null;\n        String match = null;\n\n        if (qualifiers != null) {\n            retries = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(qualifiers, \"port\", -1);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n        }\n\n        // verify the port\n        //\n        if (port == -1)\n            throw new IllegalArgumentException(\"The port must be specified when doing TCP discovery\");\n\n        try {\n            StringBuffer bannerResult = null;\n            RE regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = new RE(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = new RE(banner);\n                bannerResult = new StringBuffer();\n            }\n            \n            boolean result = isServer(address, port, retries, timeout, regex, bannerResult);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0)\n                    qualifiers.put(\"banner\", bannerResult.toString());\n            }\n\n            return result;\n        } catch (RESyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","id":103678,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        int retries = DEFAULT_RETRY;\n        int timeout = DEFAULT_TIMEOUT;\n        int port = -1;\n\n        String banner = null;\n        String match = null;\n\n        if (qualifiers != null) {\n            retries = ParameterMap.getKeyedInteger(qualifiers, \"retry\", DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(qualifiers, \"port\", -1);\n            banner = ParameterMap.getKeyedString(qualifiers, \"banner\", null);\n            match = ParameterMap.getKeyedString(qualifiers, \"match\", null);\n        }\n\n        // verify the port\n        //\n        if (port == -1)\n            throw new IllegalArgumentException(\"The port must be specified when doing TCP discovery\");\n\n        try {\n            StringBuffer bannerResult = null;\n            Pattern regex = null;\n            if (match == null && (banner == null || banner.equals(\"*\"))) {\n                regex = null;\n            } else if (match != null) {\n                regex = Pattern.compile(match);\n                bannerResult = new StringBuffer();\n            } else if (banner != null) {\n                regex = Pattern.compile(banner);\n                bannerResult = new StringBuffer();\n            }\n\n            boolean result = isServer(address, port, retries, timeout, regex, bannerResult);\n            if (result && qualifiers != null) {\n                if (bannerResult != null && bannerResult.length() > 0) {\n                    qualifiers.put(\"banner\", bannerResult.toString());\n                }\n            }\n\n            return result;\n        } catch (PatternSyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for a TCP\n     * server. If there is a TCP server at that destination then a value of true\n     * is returned from the method. Otherwise a false value is returned to the\n     * caller. In order to return true the remote host must generate a banner\n     * line which contains the text from the bannerMatch argument.\n     * <\/P>\n     * \n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     * @param bannerResult\n     *            Banner line generated by the remote host must contain this\n     *            text.\n     * \n     * @return True if a connection is established with the host and the banner\n     *         line contains the bannerMatch text.\n     */\n    private boolean isServer(InetAddress host, int port, int retries, int timeout, RE regex, StringBuffer bannerResult) {\n\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"TcpPlugin: connected to host: {} on port: {}\", port, host);\n\n                // If banner matching string is null or wildcard (\"*\") then we\n                // only need to test connectivity and we've got that!\n                //\n                if (regex == null) {\n                    isAServer = true;\n                } else {\n                    // get a line reader\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                    // Read the server's banner line ouptput and validate it\n                    // against\n                    // the bannerMatch parameter to determine if this interface\n                    // supports the\n                    // service.\n                    //\n                    String response = lineRdr.readLine();\n                    if (regex.match(response)) {\n\n                        LOG.debug(\"isServer: matching response= {}\", response);\n                        isAServer = true;\n                        if (bannerResult != null)\n                            bannerResult.append(response);\n                    } else {\n                        // Got a response but it didn't match...no need to\n                        // attempt retries\n                        isAServer = false;\n\n                        LOG.debug(\"isServer: NON-matching response= {}\", response);\n                        break;\n                    }\n                }\n            } catch (ConnectException e) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"TcpPlugin: Connection refused to {}: {}\", port, InetAddressUtils.str(host));\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No Route to host!!!\n                //\n                e.fillInStackTrace();\n                LOG.info(\"TcpPlugin: Could not connect to host {}, no route to host\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                LOG.debug(\"TcpPlugin: did not connect to host within timeout: {} attempt: {}\", attempts, timeout);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"TcpPlugin: An expected I/O exception occured connecting to host {} on port {}\", InetAddressUtils.str(host), port, e);\n                isAServer = false;\n            } catch (Throwable t) {\n                isAServer = false;\n                LOG.warn(\"TcpPlugin: An undeclared throwable exception was caught connecting to host {} on port {}\", InetAddressUtils.str(host), port, t);\n            } finally {\n                try {\n                    if (socket != null)\n                        socket.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an ftp server.\n        //\n        return isAServer;\n    }","id":103679,"modified_method":"/**\n     * <P>\n     * Test to see if the passed host-port pair is the endpoint for a TCP\n     * server. If there is a TCP server at that destination then a value of true\n     * is returned from the method. Otherwise a false value is returned to the\n     * caller. In order to return true the remote host must generate a banner\n     * line which contains the text from the bannerMatch argument.\n     * <\/P>\n     *\n     * @param host\n     *            The remote host to connect to.\n     * @param port\n     *            The remote port on the host.\n     * @param bannerResult\n     *            Banner line generated by the remote host must contain this\n     *            text.\n     *\n     * @return True if a connection is established with the host and the banner\n     *         line contains the bannerMatch text.\n     */\n    private boolean isServer(InetAddress host, int port, int retries, int timeout, Pattern regex, StringBuffer bannerResult) {\n\n        boolean isAServer = false;\n        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {\n            Socket socket = null;\n            try {\n                // create a connected socket\n                //\n                socket = new Socket();\n                socket.connect(new InetSocketAddress(host, port), timeout);\n                socket.setSoTimeout(timeout);\n                LOG.debug(\"TcpPlugin: connected to host: {} on port: {}\", port, host);\n\n                // If banner matching string is null or wildcard (\"*\") then we\n                // only need to test connectivity and we've got that!\n                //\n                if (regex == null) {\n                    isAServer = true;\n                } else {\n                    // get a line reader\n                    //\n                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n                    // Read the server's banner line ouptput and validate it\n                    // against\n                    // the bannerMatch parameter to determine if this interface\n                    // supports the\n                    // service.\n                    //\n                    String response = lineRdr.readLine();\n                    if (regex.matcher(response).find()) {\n\n                        LOG.debug(\"isServer: matching response= {}\", response);\n                        isAServer = true;\n                        if (bannerResult != null)\n                            bannerResult.append(response);\n                    } else {\n                        // Got a response but it didn't match...no need to\n                        // attempt retries\n                        isAServer = false;\n\n                        LOG.debug(\"isServer: NON-matching response= {}\", response);\n                        break;\n                    }\n                }\n            } catch (ConnectException e) {\n                // Connection refused!! Continue to retry.\n                //\n                LOG.debug(\"TcpPlugin: Connection refused to {}: {}\", port, InetAddressUtils.str(host));\n                isAServer = false;\n            } catch (NoRouteToHostException e) {\n                // No Route to host!!!\n                //\n                e.fillInStackTrace();\n                LOG.info(\"TcpPlugin: Could not connect to host {}, no route to host\", InetAddressUtils.str(host), e);\n                isAServer = false;\n                throw new UndeclaredThrowableException(e);\n            } catch (InterruptedIOException e) {\n                // This is an expected exception\n                //\n                LOG.debug(\"TcpPlugin: did not connect to host within timeout: {} attempt: {}\", attempts, timeout);\n                isAServer = false;\n            } catch (IOException e) {\n                LOG.info(\"TcpPlugin: An expected I/O exception occured connecting to host {} on port {}\", InetAddressUtils.str(host), port, e);\n                isAServer = false;\n            } catch (Throwable t) {\n                isAServer = false;\n                LOG.warn(\"TcpPlugin: An undeclared throwable exception was caught connecting to host {} on port {}\", InetAddressUtils.str(host), port, t);\n            } finally {\n                try {\n                    if (socket != null)\n                        socket.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        //\n        // return the success/failure of this\n        // attempt to contact an ftp server.\n        //\n        return isAServer;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n    @Override\n    public PollStatus poll(MonitoredService svc, Map<String,Object> parameters) {\n        NetworkInterface<InetAddress> iface = svc.getNetInterface();\n        \n        PollStatus status = PollStatus.unavailable();\n        InetAddress ipaddr = (InetAddress) iface.getAddress();\n\n        \n        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();\n        XmpSession session;\n        SocketOpts sockopts = new SocketOpts();\n        // TODO how to apply timeout and retry to XMP operations?\n        int retry = protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY;\n        int timeout = protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT;\n        int port = DEFAULT_PORT; \n        String authenUser = DEFAULT_AUTHEN_USER;\n        String requestType = DEFAULT_REQUEST_TYPE;\n        String mib = DEFAULT_REQUEST_MIB;\n        String table = DEFAULT_REQUEST_TABLE;\n        String object = DEFAULT_REQUEST_OBJECT;\n        String instance = DEFAULT_REQUEST_INSTANCE;\n        String instanceMatch = null;\n        String valueOperator = XmpUtil.EQUALS;\n        String valueOperand = null;\n        int minMatches = DEFAULT_MIN_MATCHES;\n        int maxMatches = DEFAULT_MAX_MATCHES;\n        boolean maxMatchesUnbounded = DEFAULT_MAX_MATCHES_UNBOUNDED;\n        boolean valueCaseSensitive = DEFAULT_VALUE_CASE_SENSITIVE;\n\n        if (parameters != null) {\n            retry = ParameterMap.getKeyedInteger(parameters, \"retry\", protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n            authenUser = ParameterMap.getKeyedString(parameters, \"authenUser\", DEFAULT_AUTHEN_USER);\n            requestType = ParameterMap.getKeyedString(parameters, \"request-type\", DEFAULT_REQUEST_TYPE);\n            mib = ParameterMap.getKeyedString(parameters, \"mib\", DEFAULT_REQUEST_MIB);\n            table = ParameterMap.getKeyedString(parameters, \"table\", DEFAULT_REQUEST_TABLE);\n            object = ParameterMap.getKeyedString(parameters, \"object\", DEFAULT_REQUEST_OBJECT);\n            instance = ParameterMap.getKeyedString(parameters, \"instance\", DEFAULT_REQUEST_INSTANCE);\n            instanceMatch = ParameterMap.getKeyedString(parameters, \"instance-match\", DEFAULT_INSTANCE_MATCH);\n            valueOperator = ParameterMap.getKeyedString(parameters, \"value-operator\", \"==\");\n            valueOperand = ParameterMap.getKeyedString(parameters, \"value-match\", DEFAULT_VALUE_MATCH);\n            valueCaseSensitive = ParameterMap.getKeyedBoolean(parameters, \"value-case-sensitive\", DEFAULT_VALUE_CASE_SENSITIVE);\n            minMatches = ParameterMap.getKeyedInteger(parameters, \"min-matches\", DEFAULT_MIN_MATCHES);\n            maxMatches = ParameterMap.getKeyedInteger(parameters, \"max-matches\", DEFAULT_MAX_MATCHES);\n            String maxMatchesUnboundedStr = ParameterMap.getKeyedString(parameters, \"max-matches\", \"unbounded\");\n            maxMatchesUnbounded = (maxMatchesUnboundedStr.equalsIgnoreCase(\"unbounded\"));\n        }\n\n        // If this is a SelectTableRequest, then you can't use the defaults\n        // for Table and Object.\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            if (table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, table must be specified\");\n            }\n            if (object.equals(DEFAULT_REQUEST_OBJECT)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, object must be specified and must be tabular\");\n            }\n        }\n        \n        // If this is a GetRequest, then you can't specify a table or\n        // an instance\n        else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            if (! table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, table must not be specified\");\n            }\n            if (! instance.equals(DEFAULT_REQUEST_INSTANCE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, instance must not be specified\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown request type \" + requestType + \", only GetRequest and SelectTableRequest are supported\");\n        }\n        \n        RE instanceRegex = null;\n        try {\n            if (instanceMatch == null) {\n                instanceRegex = null;\n            } else if (instanceMatch != null) {\n                instanceRegex = new RE(instanceMatch);                \n            }\n        } catch (RESyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n        \n        long startTime = System.currentTimeMillis();\n        \n        // Set the SO_TIMEOUT.  What a concept!\n        sockopts.setConnectTimeout(timeout);\n        \n        session = new XmpSession(sockopts, ipaddr, port, authenUser);\n\n        boolean result = false;\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            try {\n                result = XmpUtil.handleTableQuery(session, mib, table, object, instance, instanceRegex, valueOperator, valueOperand, minMatches, maxMatches, maxMatchesUnbounded, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                status = PollStatus.unavailable(e.getMessage());\n            }\n        } else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            try {\n                result = XmpUtil.handleScalarQuery(session, mib, object, valueOperator, valueOperand, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                status = PollStatus.unavailable(e.getMessage());\n            }\n        }\n        if (result == true) {\n            Double responseTime = new Double(System.currentTimeMillis() - startTime);\n            status = PollStatus.available(responseTime);\n        }\n        return status;\n    }","id":103680,"modified_method":"/** {@inheritDoc} */\n    @Override\n    public PollStatus poll(MonitoredService svc, Map<String,Object> parameters) {\n        NetworkInterface<InetAddress> iface = svc.getNetInterface();\n\n        PollStatus status = PollStatus.unavailable();\n        InetAddress ipaddr = (InetAddress) iface.getAddress();\n\n\n        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();\n        XmpSession session;\n        SocketOpts sockopts = new SocketOpts();\n        // TODO how to apply timeout and retry to XMP operations?\n        int retry = protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY;\n        int timeout = protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT;\n        int port = DEFAULT_PORT;\n        String authenUser = DEFAULT_AUTHEN_USER;\n        String requestType = DEFAULT_REQUEST_TYPE;\n        String mib = DEFAULT_REQUEST_MIB;\n        String table = DEFAULT_REQUEST_TABLE;\n        String object = DEFAULT_REQUEST_OBJECT;\n        String instance = DEFAULT_REQUEST_INSTANCE;\n        String instanceMatch = null;\n        String valueOperator = XmpUtil.EQUALS;\n        String valueOperand = null;\n        int minMatches = DEFAULT_MIN_MATCHES;\n        int maxMatches = DEFAULT_MAX_MATCHES;\n        boolean maxMatchesUnbounded = DEFAULT_MAX_MATCHES_UNBOUNDED;\n        boolean valueCaseSensitive = DEFAULT_VALUE_CASE_SENSITIVE;\n\n        if (parameters != null) {\n            retry = ParameterMap.getKeyedInteger(parameters, \"retry\", protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(parameters, \"timeout\", protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(parameters, \"port\", DEFAULT_PORT);\n            authenUser = ParameterMap.getKeyedString(parameters, \"authenUser\", DEFAULT_AUTHEN_USER);\n            requestType = ParameterMap.getKeyedString(parameters, \"request-type\", DEFAULT_REQUEST_TYPE);\n            mib = ParameterMap.getKeyedString(parameters, \"mib\", DEFAULT_REQUEST_MIB);\n            table = ParameterMap.getKeyedString(parameters, \"table\", DEFAULT_REQUEST_TABLE);\n            object = ParameterMap.getKeyedString(parameters, \"object\", DEFAULT_REQUEST_OBJECT);\n            instance = ParameterMap.getKeyedString(parameters, \"instance\", DEFAULT_REQUEST_INSTANCE);\n            instanceMatch = ParameterMap.getKeyedString(parameters, \"instance-match\", DEFAULT_INSTANCE_MATCH);\n            valueOperator = ParameterMap.getKeyedString(parameters, \"value-operator\", \"==\");\n            valueOperand = ParameterMap.getKeyedString(parameters, \"value-match\", DEFAULT_VALUE_MATCH);\n            valueCaseSensitive = ParameterMap.getKeyedBoolean(parameters, \"value-case-sensitive\", DEFAULT_VALUE_CASE_SENSITIVE);\n            minMatches = ParameterMap.getKeyedInteger(parameters, \"min-matches\", DEFAULT_MIN_MATCHES);\n            maxMatches = ParameterMap.getKeyedInteger(parameters, \"max-matches\", DEFAULT_MAX_MATCHES);\n            String maxMatchesUnboundedStr = ParameterMap.getKeyedString(parameters, \"max-matches\", \"unbounded\");\n            maxMatchesUnbounded = (maxMatchesUnboundedStr.equalsIgnoreCase(\"unbounded\"));\n        }\n\n        // If this is a SelectTableRequest, then you can't use the defaults\n        // for Table and Object.\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            if (table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, table must be specified\");\n            }\n            if (object.equals(DEFAULT_REQUEST_OBJECT)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, object must be specified and must be tabular\");\n            }\n        }\n\n        // If this is a GetRequest, then you can't specify a table or\n        // an instance\n        else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            if (! table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, table must not be specified\");\n            }\n            if (! instance.equals(DEFAULT_REQUEST_INSTANCE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, instance must not be specified\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown request type \" + requestType + \", only GetRequest and SelectTableRequest are supported\");\n        }\n\n        Pattern instanceRegex = null;\n        try {\n            if (instanceMatch != null) {\n                instanceRegex = Pattern.compile(instanceMatch);\n            }\n        } catch (final PatternSyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        long startTime = System.currentTimeMillis();\n\n        // Set the SO_TIMEOUT.  What a concept!\n        sockopts.setConnectTimeout(timeout);\n\n        session = new XmpSession(sockopts, ipaddr, port, authenUser);\n\n        boolean result = false;\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            try {\n                result = XmpUtil.handleTableQuery(session, mib, table, object, instance, instanceRegex, valueOperator, valueOperand, minMatches, maxMatches, maxMatchesUnbounded, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                status = PollStatus.unavailable(e.getMessage());\n            }\n        } else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            try {\n                result = XmpUtil.handleScalarQuery(session, mib, object, valueOperator, valueOperand, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                status = PollStatus.unavailable(e.getMessage());\n            }\n        }\n        if (result == true) {\n            Double responseTime = new Double(System.currentTimeMillis() - startTime);\n            status = PollStatus.available(responseTime);\n        }\n        return status;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n        \n        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();\n        XmpSession session;\n        SocketOpts sockopts = new SocketOpts();\n        // TODO how to apply timeout and retry to XMP operations?\n        int retry = protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY;\n        int timeout = protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT;\n        int port = DEFAULT_PORT;\n        String authenUser = DEFAULT_AUTHEN_USER;\n        String requestType = DEFAULT_REQUEST_TYPE;\n        String mib = DEFAULT_REQUEST_MIB;\n        String table = DEFAULT_REQUEST_TABLE;\n        String object = DEFAULT_REQUEST_OBJECT;\n        String instance = DEFAULT_REQUEST_INSTANCE;\n        String instanceMatch = null;\n        String valueOperator = XmpUtil.EQUALS;\n        String valueOperand = DEFAULT_VALUE_OPERAND;\n        int minMatches = DEFAULT_MIN_MATCHES;\n        int maxMatches = DEFAULT_MAX_MATCHES;\n        boolean maxMatchesUnbounded = DEFAULT_MAX_MATCHES_UNBOUNDED;\n        boolean valueCaseSensitive = DEFAULT_VALUE_CASE_SENSITIVE;\n\n        if (qualifiers != null) {\n            retry = ParameterMap.getKeyedInteger(qualifiers, \"retry\", protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(qualifiers, \"port\", DEFAULT_PORT);\n            authenUser = ParameterMap.getKeyedString(qualifiers, \"authenUser\", DEFAULT_AUTHEN_USER);\n            requestType = ParameterMap.getKeyedString(qualifiers, \"request-type\", DEFAULT_REQUEST_TYPE);\n            mib = ParameterMap.getKeyedString(qualifiers, \"mib\", DEFAULT_REQUEST_MIB);\n            table = ParameterMap.getKeyedString(qualifiers, \"table\", DEFAULT_REQUEST_TABLE);\n            object = ParameterMap.getKeyedString(qualifiers, \"object\", DEFAULT_REQUEST_OBJECT);\n            instance = ParameterMap.getKeyedString(qualifiers, \"instance\", DEFAULT_REQUEST_INSTANCE);\n            instanceMatch = ParameterMap.getKeyedString(qualifiers, \"instance-match\", DEFAULT_INSTANCE_MATCH);\n            valueOperator = ParameterMap.getKeyedString(qualifiers, \"value-operator\", \"==\");\n            valueOperand = ParameterMap.getKeyedString(qualifiers, \"value-match\", DEFAULT_VALUE_MATCH);\n            valueCaseSensitive = ParameterMap.getKeyedBoolean(qualifiers, \"value-case-sensitive\", DEFAULT_VALUE_CASE_SENSITIVE);\n            minMatches = ParameterMap.getKeyedInteger(qualifiers, \"min-matches\", DEFAULT_MIN_MATCHES);\n            maxMatches = ParameterMap.getKeyedInteger(qualifiers, \"max-matches\", DEFAULT_MAX_MATCHES);\n            String maxMatchesUnboundedStr = ParameterMap.getKeyedString(qualifiers, \"max-matches\", \"unbounded\");\n            maxMatchesUnbounded = (maxMatchesUnboundedStr.equalsIgnoreCase(\"unbounded\"));\n        }\n        \n        // Set the SO_TIMEOUT so that this thing has a prayer of working over a WAN\n        sockopts.setConnectTimeout(timeout);\n        \n        // If this is a SelectTableRequest, then you can't use the defaults\n        // for Table and Object.\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            if (table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, table must be specified\");\n            }\n            if (object.equals(DEFAULT_REQUEST_OBJECT)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, object must be specified and must be tabular\");\n            }\n        }\n        \n        // If this is a GetRequest, then you can't specify a table or\n        // an instance\n        else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            if (! table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, table must not be specified\");\n            }\n            if (! instance.equals(DEFAULT_REQUEST_INSTANCE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, instance must not be specified\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown request type \" + requestType + \", only GetRequest and SelectTableRequest are supported\");\n        }\n        \n        RE instanceRegex = null;\n        try {\n            if (instanceMatch == null) {\n                instanceRegex = null;\n            } else if (instanceMatch != null) {\n                instanceRegex = new RE(instanceMatch);                \n            }\n        } catch (RESyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        boolean result = false;\n        session = new XmpSession(sockopts, address, port, authenUser);\n        /*\n        if (session == null) {\n            LOG.info(\"XMP connection failed to {}:{} with user {} and {}\", address, port, authenUser, sockopts);\n            return false;\n        }\n        */\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            try {\n                result = XmpUtil.handleTableQuery(session, mib, table, object, instance, instanceRegex, valueOperator, valueOperand, minMatches, maxMatches, maxMatchesUnbounded, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                result = false;\n            }\n        } else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            try {\n                result = XmpUtil.handleScalarQuery(session, mib, object, valueOperator, valueOperand, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                result = false;\n            }\n        }        \n        return result;\n    }","id":103681,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     * Returns true if the protocol defined by this plugin is supported. If the\n     * protocol is not supported then a false value is returned to the caller.\n     * The qualifier map passed to the method is used by the plugin to return\n     * additional information by key-name. These key-value pairs can be added to\n     * service events if needed.\n     */\n    @Override\n    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {\n\n        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();\n        XmpSession session;\n        SocketOpts sockopts = new SocketOpts();\n        // TODO how to apply timeout and retry to XMP operations?\n        int retry = protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY;\n        int timeout = protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT;\n        int port = DEFAULT_PORT;\n        String authenUser = DEFAULT_AUTHEN_USER;\n        String requestType = DEFAULT_REQUEST_TYPE;\n        String mib = DEFAULT_REQUEST_MIB;\n        String table = DEFAULT_REQUEST_TABLE;\n        String object = DEFAULT_REQUEST_OBJECT;\n        String instance = DEFAULT_REQUEST_INSTANCE;\n        String instanceMatch = null;\n        String valueOperator = XmpUtil.EQUALS;\n        String valueOperand = DEFAULT_VALUE_OPERAND;\n        int minMatches = DEFAULT_MIN_MATCHES;\n        int maxMatches = DEFAULT_MAX_MATCHES;\n        boolean maxMatchesUnbounded = DEFAULT_MAX_MATCHES_UNBOUNDED;\n        boolean valueCaseSensitive = DEFAULT_VALUE_CASE_SENSITIVE;\n\n        if (qualifiers != null) {\n            retry = ParameterMap.getKeyedInteger(qualifiers, \"retry\", protoConfig.hasRetry() ? protoConfig.getRetry() : DEFAULT_RETRY);\n            timeout = ParameterMap.getKeyedInteger(qualifiers, \"timeout\", protoConfig.hasTimeout() ? protoConfig.getTimeout() : DEFAULT_TIMEOUT);\n            port = ParameterMap.getKeyedInteger(qualifiers, \"port\", DEFAULT_PORT);\n            authenUser = ParameterMap.getKeyedString(qualifiers, \"authenUser\", DEFAULT_AUTHEN_USER);\n            requestType = ParameterMap.getKeyedString(qualifiers, \"request-type\", DEFAULT_REQUEST_TYPE);\n            mib = ParameterMap.getKeyedString(qualifiers, \"mib\", DEFAULT_REQUEST_MIB);\n            table = ParameterMap.getKeyedString(qualifiers, \"table\", DEFAULT_REQUEST_TABLE);\n            object = ParameterMap.getKeyedString(qualifiers, \"object\", DEFAULT_REQUEST_OBJECT);\n            instance = ParameterMap.getKeyedString(qualifiers, \"instance\", DEFAULT_REQUEST_INSTANCE);\n            instanceMatch = ParameterMap.getKeyedString(qualifiers, \"instance-match\", DEFAULT_INSTANCE_MATCH);\n            valueOperator = ParameterMap.getKeyedString(qualifiers, \"value-operator\", \"==\");\n            valueOperand = ParameterMap.getKeyedString(qualifiers, \"value-match\", DEFAULT_VALUE_MATCH);\n            valueCaseSensitive = ParameterMap.getKeyedBoolean(qualifiers, \"value-case-sensitive\", DEFAULT_VALUE_CASE_SENSITIVE);\n            minMatches = ParameterMap.getKeyedInteger(qualifiers, \"min-matches\", DEFAULT_MIN_MATCHES);\n            maxMatches = ParameterMap.getKeyedInteger(qualifiers, \"max-matches\", DEFAULT_MAX_MATCHES);\n            String maxMatchesUnboundedStr = ParameterMap.getKeyedString(qualifiers, \"max-matches\", \"unbounded\");\n            maxMatchesUnbounded = (maxMatchesUnboundedStr.equalsIgnoreCase(\"unbounded\"));\n        }\n\n        // Set the SO_TIMEOUT so that this thing has a prayer of working over a WAN\n        sockopts.setConnectTimeout(timeout);\n\n        // If this is a SelectTableRequest, then you can't use the defaults\n        // for Table and Object.\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            if (table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, table must be specified\");\n            }\n            if (object.equals(DEFAULT_REQUEST_OBJECT)) {\n                throw new IllegalArgumentException(\"When performing a SelectTableRequest, object must be specified and must be tabular\");\n            }\n        }\n\n        // If this is a GetRequest, then you can't specify a table or\n        // an instance\n        else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            if (! table.equals(DEFAULT_REQUEST_TABLE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, table must not be specified\");\n            }\n            if (! instance.equals(DEFAULT_REQUEST_INSTANCE)) {\n                throw new IllegalArgumentException(\"When performing a GetRequest, instance must not be specified\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown request type \" + requestType + \", only GetRequest and SelectTableRequest are supported\");\n        }\n\n        Pattern instanceRegex = null;\n        try {\n            if (instanceMatch != null) {\n                instanceRegex = Pattern.compile(instanceMatch);\n            }\n        } catch (PatternSyntaxException e) {\n            throw new java.lang.reflect.UndeclaredThrowableException(e);\n        }\n\n        boolean result = false;\n        session = new XmpSession(sockopts, address, port, authenUser);\n        /*\n        if (session == null) {\n            LOG.info(\"XMP connection failed to {}:{} with user {} and {}\", address, port, authenUser, sockopts);\n            return false;\n        }\n        */\n        if (requestType.equalsIgnoreCase(\"SelectTableRequest\")) {\n            try {\n                result = XmpUtil.handleTableQuery(session, mib, table, object, instance, instanceRegex, valueOperator, valueOperand, minMatches, maxMatches, maxMatchesUnbounded, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                result = false;\n            }\n        } else if (requestType.equalsIgnoreCase(\"GetRequest\")) {\n            try {\n                result = XmpUtil.handleScalarQuery(session, mib, object, valueOperator, valueOperand, valueCaseSensitive);\n            } catch (XmpUtilException e) {\n                result = false;\n            }\n        }\n        return result;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private static boolean valueMeetsCriteria(XmpVar replyVar, String valueOperator, String valueOperand, boolean caseSensitive)\n            throws XmpUtilException {\n        RE valueRegex = null;\n        if (MATCHES.equals(valueOperator)) {\n            try {\n\t\t\t\tvalueRegex = new RE(valueOperand);\n\t            if (!caseSensitive) {\n\t            \tvalueRegex.setMatchFlags(RE.MATCH_CASEINDEPENDENT);\n\t            }\n            } catch (final RESyntaxException e) {\n            \tLOG.debug(\"Unable to initialize regular expression.\", e);\n            }\n        }\n        \n        if ((valueRegex != null) && valueRegex.match(replyVar.getValue())) {\n            LOG.debug(\"handleScalarQuery: Response value |{}| matches, returning true\", replyVar.getValue());\n            return true;\n        } else if ((MATCHES.equals(valueOperator)) && ((valueRegex == null) || (\"\".equals(valueRegex)))) {\n                LOG.debug(\"handleScalarQuery: Doing regex match but regex is null or empty, considering value |{}| a match!\", replyVar.getValue());\n            return true;\n        } else if (! MATCHES.equals(valueOperator)) {\n            if (valueOperand == null) {\n                    LOG.debug(\"valueMeetsCriteria: operand is null, so any non-error reply will match\");\n                if (replyVar.getValue() != null) {\n                        LOG.debug(\"valueMeetsCriteria: non-null reply value |{}| considered a match\", replyVar.getValue());\n                    return true;\n                } else {\n                        LOG.debug(\"valueMeetsCriteria: null reply NOT considered a match\");\n                    return false;\n                }\n            } else if (valueOperand.matches(\"^-?[0-9]+$\")) {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks like an integer, treating with BigInteger\", valueOperand);\n                BigInteger intOperand, intValue;\n                try {\n                    intValue = new BigInteger(replyVar.getValue());\n                    intOperand = new BigInteger(valueOperand);\n                } catch (NumberFormatException nfe) {\n                    LOG.error(\"Failed to parse operand {} or observed value {} as a BigInteger, giving up\", valueOperand, replyVar.getValue());\n                    LOG.info(nfe.getMessage());\n                    throw new XmpUtilException(\"Operand '\" + valueOperand + \"' or observed value '\" + replyVar.getValue() + \"' is a malformed integer\");\n                }\n                if (LESS_THAN.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) < 0);\n                } else if (GREATER_THAN.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) > 0);\n                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) <= 0);\n                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) { \n                    return (intValue.compareTo(intOperand) >= 0);\n                } else if (EQUALS.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) == 0);\n                } else if (NOT_EQUAL.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) != 0);\n                } else {\n                    LOG.error(\"Unknown value operator '{}', giving up\", valueOperator);\n                    throw new XmpUtilException(\"Operator '\" + valueOperator + \"' unknown\");\n                }\n            } else if (valueOperand.matches(\"^-?[0-9]+([,.]?[0-9]+)$\")) {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks like a float, treating with float\", valueOperand);\n                float floatValue, floatOperand;\n                try {\n                    floatValue = Float.parseFloat(valueOperand);\n                    floatOperand = Float.parseFloat(valueOperand);\n                } catch (NumberFormatException nfe) {\n                    LOG.error(\"Failed to parse operand {} or observed value {} as a Float, giving up\", valueOperand, replyVar.getValue());\n                    LOG.info(nfe.getMessage());\n                    throw new XmpUtilException(\"Operand '\" + valueOperand + \"' or observed value '\" + replyVar.getValue() + \"' is a malformed floating-point number\");\n                }\n                if (LESS_THAN.equals(valueOperator)) {\n                    return (floatValue < floatOperand);\n                } else if (GREATER_THAN.equals(valueOperator)) {\n                    return (floatValue > floatOperand);\n                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {\n                    return (floatValue <= floatOperand);\n                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) {\n                    return (floatValue >= floatOperand);\n                } else if (EQUALS.equals(valueOperator)) {\n                    return (floatValue == floatOperand);\n                } else if (NOT_EQUAL.equals(valueOperator)) {\n                    return (floatValue != floatOperand);\n                } else {\n                    LOG.error(\"Unknown value operator '{}', giving up\", valueOperator);\n                    throw new XmpUtilException(\"Value operator '\" + valueOperator + \"' unknown\");\n                }\n            } else {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks non-numeric, treating with String\", valueOperand);\n                if (!EQUALS.equals(valueOperator)) {\n                    LOG.error(\"Value operator '{}' does not apply for non-numeric value operand '{}', giving up\", valueOperator, valueOperand);\n                    throw new XmpUtilException(\"Value operator '\" + valueOperator + \"' does not apply for non-numeric value operand '\" + valueOperand + \"'\");\n                }\n                if (caseSensitive) {\n\t\t\t\t    return valueOperand.equals(replyVar.getValue());                        \n\t\t\t\t} else {\n\t\t\t\t    return valueOperand.equalsIgnoreCase(replyVar.getValue());\n\t\t\t\t}\n            }\n        } else {\n        \tif(LOG.isDebugEnabled()){\n                LOG.debug(\"handleScalarQuery: Response value |{}| does not match for value operator |{}| and value operand |{}|, returning false\", replyVar.getValue(), valueOperator, valueOperand);\n                //FIXME do we really want to throw only when debugging is enabled?\n                throw new XmpUtilException(\"Response value '\" + replyVar.getValue() + \"' does not match for value operator '\" + valueOperator +\"' and value operand '\" + valueOperand +\"'\");\n        \t}\n        }\n        \t\n        return false;\n    }","id":103682,"modified_method":"private static boolean valueMeetsCriteria(XmpVar replyVar, String valueOperator, String valueOperand, boolean caseSensitive)\n            throws XmpUtilException {\n        Pattern valueRegex = null;\n        if (MATCHES.equals(valueOperator)) {\n            try {\n                int flags = 0;\n                if (!caseSensitive) {\n                    flags |= Pattern.CASE_INSENSITIVE;\n                }\n                valueRegex = Pattern.compile(valueOperand, flags);\n            } catch (final PatternSyntaxException e) {\n            \tLOG.debug(\"Unable to initialize regular expression.\", e);\n            }\n        }\n\n        if ((valueRegex != null) && valueRegex.matcher(replyVar.getValue()).matches()) {\n            LOG.debug(\"handleScalarQuery: Response value |{}| matches, returning true\", replyVar.getValue());\n            return true;\n        } else if ((MATCHES.equals(valueOperator)) && ((valueRegex == null) || (\"\".equals(valueRegex)))) {\n                LOG.debug(\"handleScalarQuery: Doing regex match but regex is null or empty, considering value |{}| a match!\", replyVar.getValue());\n            return true;\n        } else if (! MATCHES.equals(valueOperator)) {\n            if (valueOperand == null) {\n                    LOG.debug(\"valueMeetsCriteria: operand is null, so any non-error reply will match\");\n                if (replyVar.getValue() != null) {\n                        LOG.debug(\"valueMeetsCriteria: non-null reply value |{}| considered a match\", replyVar.getValue());\n                    return true;\n                } else {\n                        LOG.debug(\"valueMeetsCriteria: null reply NOT considered a match\");\n                    return false;\n                }\n            } else if (valueOperand.matches(\"^-?[0-9]+$\")) {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks like an integer, treating with BigInteger\", valueOperand);\n                BigInteger intOperand, intValue;\n                try {\n                    intValue = new BigInteger(replyVar.getValue());\n                    intOperand = new BigInteger(valueOperand);\n                } catch (NumberFormatException nfe) {\n                    LOG.error(\"Failed to parse operand {} or observed value {} as a BigInteger, giving up\", valueOperand, replyVar.getValue());\n                    LOG.info(nfe.getMessage());\n                    throw new XmpUtilException(\"Operand '\" + valueOperand + \"' or observed value '\" + replyVar.getValue() + \"' is a malformed integer\");\n                }\n                if (LESS_THAN.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) < 0);\n                } else if (GREATER_THAN.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) > 0);\n                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) <= 0);\n                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) >= 0);\n                } else if (EQUALS.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) == 0);\n                } else if (NOT_EQUAL.equals(valueOperator)) {\n                    return (intValue.compareTo(intOperand) != 0);\n                } else {\n                    LOG.error(\"Unknown value operator '{}', giving up\", valueOperator);\n                    throw new XmpUtilException(\"Operator '\" + valueOperator + \"' unknown\");\n                }\n            } else if (valueOperand.matches(\"^-?[0-9]+([,.]?[0-9]+)$\")) {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks like a float, treating with float\", valueOperand);\n                float floatValue, floatOperand;\n                try {\n                    floatValue = Float.parseFloat(valueOperand);\n                    floatOperand = Float.parseFloat(valueOperand);\n                } catch (NumberFormatException nfe) {\n                    LOG.error(\"Failed to parse operand {} or observed value {} as a Float, giving up\", valueOperand, replyVar.getValue());\n                    LOG.info(nfe.getMessage());\n                    throw new XmpUtilException(\"Operand '\" + valueOperand + \"' or observed value '\" + replyVar.getValue() + \"' is a malformed floating-point number\");\n                }\n                if (LESS_THAN.equals(valueOperator)) {\n                    return (floatValue < floatOperand);\n                } else if (GREATER_THAN.equals(valueOperator)) {\n                    return (floatValue > floatOperand);\n                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {\n                    return (floatValue <= floatOperand);\n                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) {\n                    return (floatValue >= floatOperand);\n                } else if (EQUALS.equals(valueOperator)) {\n                    return (floatValue == floatOperand);\n                } else if (NOT_EQUAL.equals(valueOperator)) {\n                    return (floatValue != floatOperand);\n                } else {\n                    LOG.error(\"Unknown value operator '{}', giving up\", valueOperator);\n                    throw new XmpUtilException(\"Value operator '\" + valueOperator + \"' unknown\");\n                }\n            } else {\n                    LOG.debug(\"valueMeetsCriteria: operand {} looks non-numeric, treating with String\", valueOperand);\n                if (!EQUALS.equals(valueOperator)) {\n                    LOG.error(\"Value operator '{}' does not apply for non-numeric value operand '{}', giving up\", valueOperator, valueOperand);\n                    throw new XmpUtilException(\"Value operator '\" + valueOperator + \"' does not apply for non-numeric value operand '\" + valueOperand + \"'\");\n                }\n                if (caseSensitive) {\n\t\t\t\t    return valueOperand.equals(replyVar.getValue());\n\t\t\t\t} else {\n\t\t\t\t    return valueOperand.equalsIgnoreCase(replyVar.getValue());\n\t\t\t\t}\n            }\n        } else {\n        \tif(LOG.isDebugEnabled()){\n                LOG.debug(\"handleScalarQuery: Response value |{}| does not match for value operator |{}| and value operand |{}|, returning false\", replyVar.getValue(), valueOperator, valueOperand);\n                //FIXME do we really want to throw only when debugging is enabled?\n                throw new XmpUtilException(\"Response value '\" + replyVar.getValue() + \"' does not match for value operator '\" + valueOperator +\"' and value operand '\" + valueOperand +\"'\");\n        \t}\n        }\n\n        return false;\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>handleTableQuery<\/p>\n     *\n     * @param session a {@link org.krupczak.xmp.XmpSession} object.\n     * @param mib a {@link java.lang.String} object.\n     * @param table a {@link java.lang.String} object.\n     * @param object a {@link java.lang.String} object.\n     * @param instance a {@link java.lang.String} object.\n     * @param instanceRegex a {@link org.apache.regexp.RE} object.\n     * @param valueOperator a {@link java.lang.String} object.\n     * @param valueOperand a {@link java.lang.String} object.\n     * @param minMatches a int.\n     * @param maxMatches a int.\n     * @param maxMatchesUnbounded a boolean.\n     * @param caseSensitive a boolean.\n     * @return a boolean.\n     * @throws org.opennms.netmgt.protocols.xmp.XmpUtilException if any.\n     */\n    public static boolean handleTableQuery(XmpSession session, String mib,\n            String table, String object, String instance, RE instanceRegex, \n            String valueOperator, String valueOperand, int minMatches,\n            int maxMatches, boolean maxMatchesUnbounded,\n            boolean caseSensitive) throws XmpUtilException {\n        XmpMessage reply;\n        String[] tableInfo = new String[3];\n        XmpVar[] queryVars = new XmpVar[1];\n        XmpVar[] replyVars;\n        int numMatches = 0;\n        \n        queryVars[0] = new XmpVar(mib, object, Xmp.SYNTAX_NULLSYNTAX);\n        \n        tableInfo[0] = mib;\n        tableInfo[1] = object;\n        tableInfo[2] = instance;\n        reply = session.queryTableVars(tableInfo, 0, queryVars);\n        \n        if (reply == null) {\n            LOG.warn(\"handleTableQuery: query for object {} from MIB {} failed, {}\", object, mib, Xmp.errorStatusToString(session.getErrorStatus()));\n            throw new XmpUtilException(\"XMP query failed (MIB \" + mib + \", object \" + object + \"): \" + Xmp.errorStatusToString(session.getErrorStatus()));\n        }\n        \n        replyVars = reply.getMIBVars();\n        LOG.debug(\"handleTableQuery: Got reply with {} variables\", replyVars.length);\n        \n        \n        /* Since we're constrained to a single object, we know that there's\n         * exactly one column in the result set and so can use a Java 5\n         * for() loop. If there were multiple columns, we'd have to break the\n         * flat array into a two-dimensional matrix using a pair of old-style\n         * for() loops.\n         */\n        for (XmpVar thisVar : replyVars) {\n            String rowInstance = thisVar.getKey();\n            if ((instanceRegex != null) && (!instanceRegex.match(rowInstance))) {\n                \n            \tLOG.debug(\"handleTableQuery: instance {} does not match, skipping this row.\", rowInstance);\n                \n                continue;  // to next var\n            } else if (instanceRegex == null) {\n            \tLOG.debug(\"handleTableQuery: instance match not specified, evaluating value of instance {}\", rowInstance);\n            } else {\n                    LOG.debug(\"handleTableQuery: instance {} matches, evaluating value\", rowInstance);\n            }\n            if (valueMeetsCriteria(thisVar, valueOperator, valueOperand, caseSensitive)) {\n                numMatches++;\n            }\n        }\n        \n        if (numMatches >= minMatches) {\n                LOG.debug(\"handleTableQuery: Found {} matches, meets specified minimum of {}\", numMatches, minMatches);\n            if (maxMatchesUnbounded) {\n                    LOG.debug(\"handleTableQuery: Maximum matches unbounded, returning true\");\n                return true;\n            } else if (numMatches <= maxMatches) {\n                    LOG.debug(\"handleTableQuery: Found {} matches, meets specified maximum of {}, returning true\", numMatches, maxMatches);\n                return true;\n            } else {\n                    LOG.debug(\"handleTableQuery: Found {} matches, exceeds specified maximum of {}, returning false\", numMatches, maxMatches);\n                throw new XmpUtilException(\"Found too many value matches (\" + numMatches + \" > \" + maxMatches + \") for condition \" + mib + \".\" + object + \" \" + valueOperator + \" \" + valueOperand);\n            }\n        } else {\n                LOG.debug(\"Found only {} matches, too few to meet specified minimum of {}\", numMatches, minMatches);\n            throw new XmpUtilException(\"Found too few value matches (\" + numMatches + \" < \" + minMatches + \") for condition \" + mib + \".\" + object + \" \" + valueOperator + \" \" + valueOperand);\n        }\n    }","id":103683,"modified_method":"/**\n     * <p>handleTableQuery<\/p>\n     *\n     * @param session a {@link org.krupczak.xmp.XmpSession} object.\n     * @param mib a {@link java.lang.String} object.\n     * @param table a {@link java.lang.String} object.\n     * @param object a {@link java.lang.String} object.\n     * @param instance a {@link java.lang.String} object.\n     * @param instanceRegex a {@link java.util.regex.Pattern} object.\n     * @param valueOperator a {@link java.lang.String} object.\n     * @param valueOperand a {@link java.lang.String} object.\n     * @param minMatches a int.\n     * @param maxMatches a int.\n     * @param maxMatchesUnbounded a boolean.\n     * @param caseSensitive a boolean.\n     * @return a boolean.\n     * @throws org.opennms.netmgt.protocols.xmp.XmpUtilException if any.\n     */\n    public static boolean handleTableQuery(XmpSession session, String mib,\n            String table, String object, String instance, Pattern instanceRegex,\n            String valueOperator, String valueOperand, int minMatches,\n            int maxMatches, boolean maxMatchesUnbounded,\n            boolean caseSensitive) throws XmpUtilException {\n        XmpMessage reply;\n        String[] tableInfo = new String[3];\n        XmpVar[] queryVars = new XmpVar[1];\n        XmpVar[] replyVars;\n        int numMatches = 0;\n\n        queryVars[0] = new XmpVar(mib, object, Xmp.SYNTAX_NULLSYNTAX);\n\n        tableInfo[0] = mib;\n        tableInfo[1] = object;\n        tableInfo[2] = instance;\n        reply = session.queryTableVars(tableInfo, 0, queryVars);\n\n        if (reply == null) {\n            LOG.warn(\"handleTableQuery: query for object {} from MIB {} failed, {}\", object, mib, Xmp.errorStatusToString(session.getErrorStatus()));\n            throw new XmpUtilException(\"XMP query failed (MIB \" + mib + \", object \" + object + \"): \" + Xmp.errorStatusToString(session.getErrorStatus()));\n        }\n\n        replyVars = reply.getMIBVars();\n        LOG.debug(\"handleTableQuery: Got reply with {} variables\", replyVars.length);\n\n\n        /* Since we're constrained to a single object, we know that there's\n         * exactly one column in the result set and so can use a Java 5\n         * for() loop. If there were multiple columns, we'd have to break the\n         * flat array into a two-dimensional matrix using a pair of old-style\n         * for() loops.\n         */\n        for (XmpVar thisVar : replyVars) {\n            String rowInstance = thisVar.getKey();\n            if ((instanceRegex != null) && (!instanceRegex.matcher(rowInstance).matches())) {\n            \tLOG.debug(\"handleTableQuery: instance {} does not match, skipping this row.\", rowInstance);\n\n                continue;  // to next var\n            } else if (instanceRegex == null) {\n            \tLOG.debug(\"handleTableQuery: instance match not specified, evaluating value of instance {}\", rowInstance);\n            } else {\n                    LOG.debug(\"handleTableQuery: instance {} matches, evaluating value\", rowInstance);\n            }\n            if (valueMeetsCriteria(thisVar, valueOperator, valueOperand, caseSensitive)) {\n                numMatches++;\n            }\n        }\n\n        if (numMatches >= minMatches) {\n                LOG.debug(\"handleTableQuery: Found {} matches, meets specified minimum of {}\", numMatches, minMatches);\n            if (maxMatchesUnbounded) {\n                    LOG.debug(\"handleTableQuery: Maximum matches unbounded, returning true\");\n                return true;\n            } else if (numMatches <= maxMatches) {\n                    LOG.debug(\"handleTableQuery: Found {} matches, meets specified maximum of {}, returning true\", numMatches, maxMatches);\n                return true;\n            } else {\n                    LOG.debug(\"handleTableQuery: Found {} matches, exceeds specified maximum of {}, returning false\", numMatches, maxMatches);\n                throw new XmpUtilException(\"Found too many value matches (\" + numMatches + \" > \" + maxMatches + \") for condition \" + mib + \".\" + object + \" \" + valueOperator + \" \" + valueOperand);\n            }\n        } else {\n                LOG.debug(\"Found only {} matches, too few to meet specified minimum of {}\", numMatches, minMatches);\n            throw new XmpUtilException(\"Found too few value matches (\" + numMatches + \" < \" + minMatches + \") for condition \" + mib + \".\" + object + \" \" + valueOperator + \" \" + valueOperand);\n        }\n    }","commit_id":"3d7a0311dce65e8a749f37512cf87cb7357a21e4","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n  public void registerReferenceProviders(final PsiReferenceRegistrar registrar) {\n    // common attributes -------------------------------------\n\n    // CSS*\n    registerTags(CSS_CLASS_PROVIDER, \"cssClass\", registrar, CSS__TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"cssErrorClass\", registrar, CSS__TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"tooltipCssClass\", registrar, CSS__TAGS);\n\n    // effect\n    registerTags(new StaticStringValuesReferenceProvider(\"bounce\", \"highlight\", \"pulsate\", \"shake\", \"size\", \"transfer\"),\n                 \"effect\", registrar, \"a\", \"div\", \"gridColumn\", \"submit\", \"tab\", \"textfield\", \"textarea\");\n\n    // draggable*\n    registerBoolean(\"draggableAddClasses\", registrar, DRAG_DROP_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"parent\"),\n                 \"draggableAppendTo\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"x\", \"y\"),\n                 \"draggableAxis\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableCancel\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"parent\", \"document\", \"window\", \"y1\", \"x2\", \"y2\"),\n                 \"draggableContainment\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"original\", \"clone\"),\n                 \"draggableHelper\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableIframeFix\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableRefreshPositions\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"true\", \"false\", \"valid\", \"invalid\"),\n                 \"draggableRevert\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableScroll\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableSnap\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"inner\", \"outer\", \"both\"),\n                 \"draggableSnapMode\", registrar, DRAG_DROP_TAGS);\n\n    // droppable*\n    registerTags(CSS_CLASS_PROVIDER, \"droppableHoverClass\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"fit\", \"intersect\", \"pointer\", \"touch\"),\n                 \"droppableTolerance\", registrar, DRAG_DROP_TAGS);\n\n    // \"events\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"click\", \"dblclick\", \"mouseover\", \"mouseenter\", \"mouseleave\"),\n                 \"events\", registrar, \"div\", \"select\");\n\n    // sortable**\n    registerBoolean(\"sortable\", registrar, SORTABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"parent\"),\n                 \"sortableAppendTo\", registrar, SORTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(\"x\", \"y\"),\n                 \"sortableAxis\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableDropOnEmpty\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableForceHelperSize\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableForcePlaceholderSize\", registrar, SORTABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"sortablePlaceholder\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableRevert\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableScroll\", registrar, SORTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"intersect\", \"pointer\"),\n                 \"sortableTolerance\", registrar, SORTABLE_TAGS);\n\n    // \"resizableXX\"\n    registerBoolean(\"resizable\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAnimate\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableGhost\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAspectRatio\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAutoHide\", registrar, RESIZABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"document\", \"parent\"),\n                 \"resizableContainment\", registrar, RESIZABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"resizableHelper\", registrar, RESIZABLE_TAGS);\n\n    // \"selectable\"\n    registerBoolean(\"selectable\", registrar, SELECTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"touch\", \"fit\"),\n                 \"selectableTolerance\", registrar, SELECTABLE_TAGS);\n\n    // \"indicator\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"indicator\", registrar,\n                 \"a\", \"dialog\", \"div\", \"grid\", \"gridColumn\", \"submit\", \"textfield\", \"textarea\", \"select\");\n\n    // \"errorElementId\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"errorElementId\", registrar,\n                 \"a\", \"dialog\", \"grid\", \"select\", \"submit\", \"tab\", \"textfield\");\n\n    // \"disabled\"\n    registerBoolean(\"disabled\", registrar, ArrayUtil.mergeArrays(CSS__TAGS, REQUIRED_TAGS, String.class));\n\n    // \"validate\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"true\", \"false\", \"only\"),\n                 \"validate\", registrar,\n                 \"a\", \"dialog\", \"grid\", \"gridColumn\", \"select\", \"submit\", \"tab\", \"textarea\", \"textfield\");\n\n    // \"required[position]\"\n    registerBoolean(\"required\", registrar, REQUIRED_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"right\"),\n                 \"requiredposition\", registrar, REQUIRED_TAGS);\n\n    // \"targets\" TODO allow multiple comma-separated\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"targets\", registrar,\n                 \"a\", \"dialog\", \"grid\", \"gridColumn\", \"select\", \"submit\", \"textarea\", \"textfield\", \"tab\");\n\n    // \"labelposition\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"top\", \"left\"),\n                 \"labelposition\", registrar, ArrayUtil.mergeArrays(CSS__TAGS, REQUIRED_TAGS, String.class));\n\n    // specific tags --------------------------------------------------------------\n\n    // <head>\n    registerBoolean(\"ajaxcache\", registrar, \"head\");\n    registerBoolean(\"ajaxhistory\", registrar, \"head\");\n    registerBoolean(\"compressed\", registrar, \"head\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"defaultIndicator\", registrar, \"head\");\n    registerTags(new StaticStringValuesReferenceProvider(\"cupertino\",\n                                                         \"darkness\",\n                                                         \"lightness\",\n                                                         \"redmond\",\n                                                         \"smothness\"),\n                 \"jquerytheme\", registrar, \"head\");\n    registerBoolean(\"jqueryui\", registrar, \"head\");\n    registerBoolean(\"loadFromGoogle\", registrar, \"head\");\n    registerBoolean(\"useJqGridPlugin\", registrar, \"head\");\n\n\n    // <submit>\n    registerBoolean(\"clearForm\", registrar, \"submit\");\n    registerTags(RELATIVE_PATH_PROVIDER, \"href\", registrar, \"submit\");\n    registerBoolean(\"iframe\", registrar, \"submit\");\n    registerBoolean(\"resetForm\", registrar, \"submit\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"button\", \"input\", \"image\"),\n                 \"type\", registrar, \"submit\");\n\n    // <dialog>\n    registerBoolean(\"autoOpen\", registrar, \"dialog\");\n    registerTags(CSS_CLASS_PROVIDER, \"dialogClass\", registrar, \"dialog\");\n    registerTags(ALL_EFFECTS_PROVIDER, \"hideEffect\", registrar, \"dialog\");\n    registerBoolean(\"modal\", registrar, \"dialog\");\n    registerTags(ALL_EFFECTS_PROVIDER, \"showEffect\", registrar, \"dialog\");\n\n    // <accordion>\n    registerTags(new StaticStringValuesReferenceProvider(\"false\", \"slide\", \"bounceslide\"),\n                 \"animated\", registrar, \"accordion\");\n    registerBoolean(\"autoHeight\", registrar, \"accordion\");\n    registerBoolean(\"clearStyle\", registrar, \"accordion\");\n    registerBoolean(\"collapsible\", registrar, \"accordion\");\n    registerBoolean(\"fillSpace\", registrar, \"accordion\");\n    registerBoolean(\"openOnMouseover\", registrar, \"accordion\");\n\n    // <tabbedpanel>\n    registerBoolean(\"animate\", registrar, \"tabbedpanel\");\n    registerBoolean(\"cache\", registrar, \"tabbedpanel\");\n    registerBoolean(\"collapsible\", registrar, \"tabbedpanel\");\n    registerBoolean(\"openOnMouseover\", registrar, \"tabbedpanel\");\n    registerBoolean(\"useSelectedTabCookie\", registrar, \"tabbedpanel\");\n\n    // <tab>\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"target\", registrar, \"tab\");\n\n    // <datepicker>\n    registerBoolean(\"buttonImageOnly\", registrar, \"datepicker\");\n    registerBoolean(\"changeMonth\", registrar, \"datepicker\");\n    registerBoolean(\"changeYear\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"slow\", \"normal\", \"fast\"),\n                 \"duration\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                 \"firstDay\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(\"show\", \"slideDown\", \"fadeIn\"),\n                 \"showAnim\", registrar, \"datepicker\");\n    registerBoolean(\"showButtonPanel\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"focus\", \"button\", \"both\"),\n                 \"showOn\", registrar, \"datepicker\");\n\n    // <slider>\n    registerBoolean(\"animate\", registrar, \"slider\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"displayValueElement\", registrar, \"slider\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"horizontal\", \"vertical\", \"auto\"),\n                 \"orientation\", registrar, \"slider\");\n\n    // <grid>\n    registerBoolean(\"autoencode\", registrar, \"grid\");\n    registerBoolean(\"cellEdit\", registrar, \"grid\");\n    registerBoolean(\"editinline\", registrar, \"grid\");\n    registerBoolean(\"footerrow\", registrar, \"grid\");\n    registerBoolean(\"hiddengrid\", registrar, \"grid\");\n    registerBoolean(\"hidegrid\", registrar, \"grid\");\n    registerBoolean(\"hoverrows\", registrar, \"grid\");\n    registerBoolean(\"loadonce\", registrar, \"grid\");\n    registerBoolean(\"multiselect\", registrar, \"grid\");\n    registerBoolean(\"navigator\", registrar, \"grid\");\n    registerBoolean(\"navigatorAdd\", registrar, \"grid\");\n    registerBoolean(\"navigatorDelete\", registrar, \"grid\");\n    registerBoolean(\"navigatorEdit\", registrar, \"grid\");\n    registerBoolean(\"navigatorRefresh\", registrar, \"grid\");\n    registerBoolean(\"navigatorSearch\", registrar, \"grid\");\n    registerBoolean(\"navigatorView\", registrar, \"grid\");\n    registerBoolean(\"pager\", registrar, \"grid\");\n    registerBoolean(\"rownumbers\", registrar, \"grid\");\n    registerBoolean(\"scroll\", registrar, \"grid\");\n    registerBoolean(\"scrollrows\", registrar, \"grid\");\n    registerBoolean(\"shrinkToFit\", registrar, \"grid\");\n    registerBoolean(\"sortable\", registrar, \"grid\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"asc\", \"desc\"),\n                 \"sortorder\", registrar, \"grid\");\n    registerBoolean(\"userDataOnFooter\", registrar, \"grid\");\n    registerBoolean(\"viewrecords\", registrar, \"grid\");\n\n    // <gridColumn>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"center\", \"right\"),\n                 \"align\", registrar, \"gridColumn\");\n    registerBoolean(\"editable\", registrar, \"gridColumn\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"text\", \"textarea\", \"select\", \"checkbox\",\n                                                         \"password\", \"button\", \"image\", \"file\"),\n                 \"edittype\", registrar, \"gridColumn\");\n    registerTags(new StaticStringValuesReferenceProvider(\"integer\", \"currency\", \"date\", \"checkbox\"),\n                 \"formatter\", registrar, \"gridColumn\");\n    registerBoolean(\"hidden\", registrar, \"gridColumn\");\n    registerBoolean(\"hidedlg\", registrar, \"gridColumn\");\n    registerBoolean(\"resizable\", registrar, \"gridColumn\");\n    registerBoolean(\"search\", registrar, \"gridColumn\");\n    registerBoolean(\"sortable\", registrar, \"gridColumn\");\n\n    // <select>\n    registerBoolean(\"emptyOption\", registrar, \"select\");\n\n  }","id":103684,"modified_method":"@Override\n  public void registerReferenceProviders(final PsiReferenceRegistrar registrar) {\n    // common attributes -------------------------------------\n\n    // CSS*\n    registerTags(CSS_CLASS_PROVIDER, \"cssClass\", registrar, CSS_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"cssErrorClass\", registrar, CSS_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"tooltipCssClass\", registrar, CSS_TAGS);\n\n    // button\n    registerBoolean(\"button\", registrar, BUTTON_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"buttonIcon\", registrar, BUTTON_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"buttonIconSecondary\", registrar, BUTTON_TAGS);\n\n    // effect\n    registerTags(new StaticStringValuesReferenceProvider(\"bounce\", \"highlight\", \"pulsate\", \"shake\", \"size\", \"transfer\"),\n                 \"effect\", registrar, \"a\", \"div\", \"gridColumn\", \"radio\", \"submit\", \"tab\", \"textfield\", \"textarea\");\n\n    // draggable*\n    registerBoolean(\"draggableAddClasses\", registrar, DRAG_DROP_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"parent\"),\n                 \"draggableAppendTo\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"x\", \"y\"),\n                 \"draggableAxis\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableCancel\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"parent\", \"document\", \"window\", \"y1\", \"x2\", \"y2\"),\n                 \"draggableContainment\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"original\", \"clone\"),\n                 \"draggableHelper\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableIframeFix\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableRefreshPositions\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"true\", \"false\", \"valid\", \"invalid\"),\n                 \"draggableRevert\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableScroll\", registrar, DRAG_DROP_TAGS);\n    registerBoolean(\"draggableSnap\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"inner\", \"outer\", \"both\"),\n                 \"draggableSnapMode\", registrar, DRAG_DROP_TAGS);\n\n    // droppable*\n    registerTags(CSS_CLASS_PROVIDER, \"droppableHoverClass\", registrar, DRAG_DROP_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"fit\", \"intersect\", \"pointer\", \"touch\"),\n                 \"droppableTolerance\", registrar, DRAG_DROP_TAGS);\n\n    // \"events\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"click\", \"dblclick\", \"mouseover\", \"mouseenter\", \"mouseleave\"),\n                 \"events\", registrar,\n                 \"autocompleter\", \"div\", \"select\");\n\n    // sortable**\n    registerBoolean(\"sortable\", registrar, SORTABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"parent\"),\n                 \"sortableAppendTo\", registrar, SORTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(\"x\", \"y\"),\n                 \"sortableAxis\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableDropOnEmpty\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableForceHelperSize\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableForcePlaceholderSize\", registrar, SORTABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"sortablePlaceholder\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableRevert\", registrar, SORTABLE_TAGS);\n    registerBoolean(\"sortableScroll\", registrar, SORTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"intersect\", \"pointer\"),\n                 \"sortableTolerance\", registrar, SORTABLE_TAGS);\n\n    // \"resizableXX\"\n    registerBoolean(\"resizable\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAnimate\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableGhost\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAspectRatio\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAutoHide\", registrar, RESIZABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"document\", \"parent\"),\n                 \"resizableContainment\", registrar, RESIZABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"resizableHelper\", registrar, RESIZABLE_TAGS);\n\n    // \"selectable\"\n    registerBoolean(\"selectable\", registrar, SELECTABLE_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"touch\", \"fit\"),\n                 \"selectableTolerance\", registrar, SELECTABLE_TAGS);\n\n    // \"indicator\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"indicator\", registrar,\n                 \"a\", \"autocompleter\", \"checkboxlist\", \"dialog\", \"div\", \"grid\", \"gridColumn\",\n                 \"submit\", \"textfield\", \"textarea\", \"radio\", \"select\");\n\n    // \"errorElementId\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"errorElementId\", registrar,\n                 \"a\", \"autocompleter\", \"checkboxlist\", \"dialog\", \"grid\", \"radio\", \"select\", \"submit\", \"tab\", \"textfield\");\n\n    // \"disabled\"\n    registerBoolean(\"disabled\", registrar, ArrayUtil.mergeArrays(CSS_TAGS, REQUIRED_TAGS, String.class));\n\n    // \"validate\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"true\", \"false\", \"only\"),\n                 \"validate\", registrar,\n                 \"a\", \"dialog\", \"grid\", \"gridColumn\", \"select\", \"submit\", \"tab\", \"textarea\", \"textfield\");\n\n    // \"required[position]\"\n    registerBoolean(\"required\", registrar, REQUIRED_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"right\"),\n                 \"requiredposition\", registrar, REQUIRED_TAGS);\n\n    // \"targets\" TODO allow multiple comma-separated\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"targets\", registrar,\n                 \"a\", \"autocompleter\", \"checkboxlist\", \"dialog\", \"grid\", \"gridColumn\", \"select\",\n                 \"submit\", \"textarea\", \"textfield\", \"tab\");\n\n    // \"labelposition\"\n    registerTags(new StaticStringValuesReferenceProvider(false, \"top\", \"left\"),\n                 \"labelposition\", registrar, ArrayUtil.mergeArrays(CSS_TAGS, REQUIRED_TAGS, String.class));\n\n    // specific tags --------------------------------------------------------------\n\n    // <head>\n    registerBoolean(\"ajaxcache\", registrar, \"head\");\n    registerBoolean(\"ajaxhistory\", registrar, \"head\");\n    registerBoolean(\"compressed\", registrar, \"head\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"defaultIndicator\", registrar, \"head\");\n    registerTags(new StaticStringValuesReferenceProvider(\"black-tie\", \"blitzer\", \"cupertino\", \"dot-luv\",\n                                                         \"eggplant\", \"excite-bike\", \"flick\", \"hot-sneaks\",\n                                                         \"humanity\", \"le-frog\", \"mint-choc\", \"overcast\",\n                                                         \"pepper-grinder\", \"redmond\", \"smoothness\", \"start\",\n                                                         \"sunny\", \"swanky-purse\", \"trontastic\", \"ui-darkness\",\n                                                         \"ui-lightness\", \"vader\"),\n                 \"jquerytheme\", registrar, \"head\");\n    registerBoolean(\"jqueryui\", registrar, \"head\");\n    registerBoolean(\"loadFromGoogle\", registrar, \"head\");\n    registerBoolean(\"useJqGridPlugin\", registrar, \"head\");\n\n\n    // <submit>\n    registerBoolean(\"clearForm\", registrar, \"submit\");\n    registerTags(RELATIVE_PATH_PROVIDER, \"href\", registrar, \"submit\");\n    registerBoolean(\"iframe\", registrar, \"submit\");\n    registerBoolean(\"resetForm\", registrar, \"submit\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"button\", \"input\", \"image\"),\n                 \"type\", registrar, \"submit\");\n\n    // <dialog>\n    registerBoolean(\"autoOpen\", registrar, \"dialog\");\n    registerTags(CSS_CLASS_PROVIDER, \"dialogClass\", registrar, \"dialog\");\n    registerTags(ALL_EFFECTS_PROVIDER, \"hideEffect\", registrar, \"dialog\");\n    registerBoolean(\"modal\", registrar, \"dialog\");\n    registerTags(ALL_EFFECTS_PROVIDER, \"showEffect\", registrar, \"dialog\");\n\n    // <accordion>\n    registerTags(new StaticStringValuesReferenceProvider(\"false\", \"slide\", \"bounceslide\"),\n                 \"animated\", registrar, \"accordion\");\n    registerBoolean(\"autoHeight\", registrar, \"accordion\");\n    registerBoolean(\"clearStyle\", registrar, \"accordion\");\n    registerBoolean(\"collapsible\", registrar, \"accordion\");\n    registerBoolean(\"fillSpace\", registrar, \"accordion\");\n    registerBoolean(\"openOnMouseover\", registrar, \"accordion\");\n\n    // <tabbedpanel>\n    registerBoolean(\"animate\", registrar, \"tabbedpanel\");\n    registerBoolean(\"cache\", registrar, \"tabbedpanel\");\n    registerBoolean(\"collapsible\", registrar, \"tabbedpanel\");\n    registerBoolean(\"openOnMouseover\", registrar, \"tabbedpanel\");\n    registerBoolean(\"useSelectedTabCookie\", registrar, \"tabbedpanel\");\n\n    // <tab>\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"target\", registrar, \"tab\");\n\n    // <datepicker>\n    registerBoolean(\"buttonImageOnly\", registrar, \"datepicker\");\n    registerBoolean(\"changeMonth\", registrar, \"datepicker\");\n    registerBoolean(\"changeYear\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"slow\", \"normal\", \"fast\"),\n                 \"duration\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                 \"firstDay\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(\"show\", \"slideDown\", \"fadeIn\"),\n                 \"showAnim\", registrar, \"datepicker\");\n    registerBoolean(\"showButtonPanel\", registrar, \"datepicker\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"focus\", \"button\", \"both\"),\n                 \"showOn\", registrar, \"datepicker\");\n\n    // <slider>\n    registerBoolean(\"animate\", registrar, \"slider\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"displayValueElement\", registrar, \"slider\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"horizontal\", \"vertical\", \"auto\"),\n                 \"orientation\", registrar, \"slider\");\n\n    // <grid>\n    registerBoolean(\"autoencode\", registrar, \"grid\");\n    registerBoolean(\"cellEdit\", registrar, \"grid\");\n    registerBoolean(\"editinline\", registrar, \"grid\");\n    registerBoolean(\"footerrow\", registrar, \"grid\");\n    registerBoolean(\"hiddengrid\", registrar, \"grid\");\n    registerBoolean(\"hidegrid\", registrar, \"grid\");\n    registerBoolean(\"hoverrows\", registrar, \"grid\");\n    registerBoolean(\"loadonce\", registrar, \"grid\");\n    registerBoolean(\"multiselect\", registrar, \"grid\");\n    registerBoolean(\"navigator\", registrar, \"grid\");\n    registerBoolean(\"navigatorAdd\", registrar, \"grid\");\n    registerBoolean(\"navigatorDelete\", registrar, \"grid\");\n    registerBoolean(\"navigatorEdit\", registrar, \"grid\");\n    registerBoolean(\"navigatorRefresh\", registrar, \"grid\");\n    registerBoolean(\"navigatorSearch\", registrar, \"grid\");\n    registerBoolean(\"navigatorView\", registrar, \"grid\");\n    registerBoolean(\"pager\", registrar, \"grid\");\n    registerBoolean(\"rownumbers\", registrar, \"grid\");\n    registerBoolean(\"scroll\", registrar, \"grid\");\n    registerBoolean(\"scrollrows\", registrar, \"grid\");\n    registerBoolean(\"shrinkToFit\", registrar, \"grid\");\n    registerBoolean(\"sortable\", registrar, \"grid\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"asc\", \"desc\"),\n                 \"sortorder\", registrar, \"grid\");\n    registerBoolean(\"userDataOnFooter\", registrar, \"grid\");\n    registerBoolean(\"viewrecords\", registrar, \"grid\");\n\n    // <gridColumn>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"center\", \"right\"),\n                 \"align\", registrar, \"gridColumn\");\n    registerBoolean(\"editable\", registrar, \"gridColumn\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"text\", \"textarea\", \"select\", \"checkbox\",\n                                                         \"password\", \"button\", \"image\", \"file\"),\n                 \"edittype\", registrar, \"gridColumn\");\n    registerTags(new StaticStringValuesReferenceProvider(\"integer\", \"currency\", \"date\", \"checkbox\"),\n                 \"formatter\", registrar, \"gridColumn\");\n    registerBoolean(\"hidden\", registrar, \"gridColumn\");\n    registerBoolean(\"hidedlg\", registrar, \"gridColumn\");\n    registerBoolean(\"resizable\", registrar, \"gridColumn\");\n    registerBoolean(\"search\", registrar, \"gridColumn\");\n    registerBoolean(\"sortable\", registrar, \"gridColumn\");\n\n    // <select>\n    registerBoolean(\"emptyOption\", registrar, \"select\");\n\n  }","commit_id":"123e610a54435f141ef547acad89974a68e77876","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void registerUITags(final PsiReferenceRegistrar registrar) {\n\n    // common attributes --------------------------------------\n\n    registerTags(new ThemeReferenceProvider(),\n                 \"theme\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"disabled\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n//    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER, // TODO ?!\n//                 \"jsTooltipEnabled\", TAGLIB_STRUTS_UI_NAMESPACE,\n//                 TAGLIB_UI_FORM_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"top\"),\n                 \"labelposition\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"required\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"right\"),\n                 \"requiredposition\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS); // TODO all tags included?\n\n    // elements with \"readonly\"\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"readonly\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"autocompleter\", \"combobox\", \"password\", \"textarea\", \"textfield\");\n\n    // elements with \"action\"\n    registerTags(ACTION_REFERENCE_PROVIDER,\n                 \"action\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"form\", \"submit\", \"url\");\n\n    registerTags(ACTION_REFERENCE_PROVIDER,\n                 \"name\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"action\");\n\n    // elements with \"value\" (relative path)\n    registerTags(RELATIVE_PATH_PROVIDER,\n                 \"value\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"include\", \"url\");\n\n    // elements with \"namespace\"\n    registerTags(new NamespaceReferenceProvider(),\n                 \"namespace\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"action\", \"form\", \"url\");\n\n    // elements with \"cssClass\"\n    registerTags(new CssInHtmlClassOrIdReferenceProvider(),\n                 \"cssClass\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    // specific tags ---------------------------------------------------------------------------------------------------\n\n    // <action>\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"flush\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"action\");\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"executeResult\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"action\");\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"ignoreContextParams\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"action\");\n\n    // <form>\n    registerTags(new StaticStringValuesReferenceProvider(false,\n                                                         \"application/x-www-form-urlencoded\",\n                                                         \"multipart/form-data\"),\n                 \"enctype\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"form\");\n    registerTags(new StaticStringValuesReferenceProvider(\"GET\", \"POST\"),\n                 \"method\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"form\");\n    // TODO portletMode\n    registerTags(new StaticStringValuesReferenceProvider(\"_blank\", \"_parent\", \"_self\", \"_top\"),\n                 \"target\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"form\");\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"validate\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"form\");\n    // TODO windowState\n\n    // <property>\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"escape\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"property\");\n\n    // <select>\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"emptyOption\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"select\");\n\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"multiple\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"select\");\n\n    // <set>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"application\", \"session\", \"request\", \"page\", \"action\"),\n                 \"scope\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"set\");\n\n    // <submit>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"input\", \"button\", \"image\", \"submit\"),\n                 \"type\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"submit\");\n\n    registerTags(RELATIVE_PATH_PROVIDER,\n                 \"src\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"submit\");\n\n    // <table>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"ASC\", \"DESC\", \"NONE\"),\n                 \"sortOrder\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"table\");\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"sortable\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"table\");\n\n    // <url>\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"encode\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"url\");\n    registerTags(BOOLEAN_VALUE_REFERENCE_PROVIDER,\n                 \"escapeAmp\", TAGLIB_STRUTS_UI_NAMESPACE, registrar,\n                 \"url\");\n  }","id":103685,"modified_method":"private static void registerUITags(final PsiReferenceRegistrar registrar) {\n\n    // common attributes --------------------------------------\n\n    registerTags(new ThemeReferenceProvider(),\n                 \"theme\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    registerBooleanUI(\"disabled\", registrar, TAGLIB_UI_FORM_TAGS);\n\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"top\"),\n                 \"labelposition\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    registerBooleanUI(\"required\", registrar, TAGLIB_UI_FORM_TAGS);\n\n    registerTags(new StaticStringValuesReferenceProvider(false, \"left\", \"right\"),\n                 \"requiredposition\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    // elements with \"readonly\"\n    registerBooleanUI(\"readonly\", registrar, \"combobox\", \"password\", \"textarea\", \"textfield\");\n\n    // elements with \"action\"\n    registerTags(ACTION_REFERENCE_PROVIDER,\n                 \"action\", TAGLIB_STRUTS_UI, registrar,\n                 \"form\", \"reset\", \"submit\", \"url\");\n\n    registerTags(ACTION_REFERENCE_PROVIDER,\n                 \"name\", TAGLIB_STRUTS_UI, registrar,\n                 \"action\");\n\n    // elements with \"value\" (relative path)\n    registerTags(RELATIVE_PATH_PROVIDER,\n                 \"value\", TAGLIB_STRUTS_UI, registrar,\n                 \"include\", \"url\");\n\n    // elements with \"namespace\"\n    registerTags(new NamespaceReferenceProvider(),\n                 \"namespace\", TAGLIB_STRUTS_UI, registrar,\n                 \"action\", \"form\", \"url\");\n\n    // CSS classes\n    // FIX TODO move to separate!! CSS plugin is optional ==========================\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"cssClass\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"cssErrorClass\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"tooltipCssClass\", TAGLIB_STRUTS_UI, registrar,\n                 TAGLIB_UI_FORM_TAGS);\n\n    // *transfer-tags with additional CSS\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"buttonCssClass\", TAGLIB_STRUTS_UI, registrar,\n                 \"inputtransferselect\", \"optiontransferselect\");\n\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"doubleCssClass\", TAGLIB_STRUTS_UI, registrar,\n                 \"inputtransferselect\", \"optiontransferselect\");\n\n    // specific tags ---------------------------------------------------------------------------------------------------\n\n    // <action>\n    registerBooleanUI(\"flush\", registrar, \"action\");\n    registerBooleanUI(\"executeResult\", registrar, \"action\");\n    registerBooleanUI(\"ignoreContextParams\", registrar, \"action\");\n\n    // date\n    registerBooleanUI(\"nice\", registrar, \"date\");\n\n    // <form>\n    registerTags(new StaticStringValuesReferenceProvider(false,\n                                                         \"application/x-www-form-urlencoded\",\n                                                         \"multipart/form-data\"),\n                 \"enctype\", TAGLIB_STRUTS_UI, registrar,\n                 \"form\");\n    registerTags(new StaticStringValuesReferenceProvider(\"GET\", \"POST\"),\n                 \"method\", TAGLIB_STRUTS_UI, registrar,\n                 \"form\");\n    registerTags(new StaticStringValuesReferenceProvider(\"_blank\", \"_parent\", \"_self\", \"_top\"),\n                 \"target\", TAGLIB_STRUTS_UI, registrar,\n                 \"form\");\n    registerBooleanUI(\"validate\", registrar, \"form\");\n\n\n    // <property>\n    registerBooleanUI(\"escape\", registrar, \"property\");\n    registerBooleanUI(\"escapeJavaScript\", registrar, \"property\");\n\n    // <select>\n    registerBooleanUI(\"emptyOption\", registrar, \"select\");\n    registerBooleanUI(\"multiple\", registrar, \"select\");\n\n    // <set>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"application\", \"session\", \"request\", \"page\", \"action\"),\n                 \"scope\", TAGLIB_STRUTS_UI, registrar,\n                 \"set\");\n\n    // <submit>\n    registerTags(new StaticStringValuesReferenceProvider(false, \"input\", \"button\", \"image\", \"submit\"),\n                 \"type\", TAGLIB_STRUTS_UI, registrar,\n                 \"submit\");\n    registerTags(RELATIVE_PATH_PROVIDER,\n                 \"src\", TAGLIB_STRUTS_UI, registrar,\n                 \"submit\");\n\n    // <text>\n    registerBooleanUI(\"searchValueStack\", registrar, \"text\");\n\n    // <url>\n    registerBooleanUI(\"encode\", registrar, \"url\");\n    registerBooleanUI(\"escapeAmp\", registrar, \"url\");\n    registerBooleanUI(\"forceAddSchemeHostAndPort\", registrar, \"url\");\n    registerBooleanUI(\"includeContext\", registrar, \"url\");\n    registerTags(new StaticStringValuesReferenceProvider(false, \"none\", \"get\", \"all\"),\n                 \"includeParams\", TAGLIB_STRUTS_UI, registrar,\n                 \"url\");\n  }","commit_id":"4194e45cb0c000fea3e827cdb0382c3537fd2a01","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void registerStrutsXmlTags(final PsiReferenceRegistrar registrar) {\n\n    // <result> \"name\" common values\n    registerTags(new StaticStringValuesReferenceProvider(\"error\", \"input\", \"login\", \"success\"),\n                 \"name\", STRUTS_XML_NAMESPACE, registrar,\n                 \"result\");\n  }","id":103686,"modified_method":"private static void registerStrutsXmlTags(final PsiReferenceRegistrar registrar) {\n\n    // <result> \"name\" common values\n    registerTags(new StaticStringValuesReferenceProvider(\"error\", \"input\", \"login\", \"success\"),\n                 \"name\", STRUTS_XML, registrar,\n                 \"result\");\n  }","commit_id":"4194e45cb0c000fea3e827cdb0382c3537fd2a01","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  public void registerReferenceProviders(final PsiReferenceRegistrar registrar) {\n    // common attributes -------------------------------------\n\n    // CSS*\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"cssClass\", registrar,\n                 CSS__TAGS);\n\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"cssErrorClass\", registrar,\n                 CSS__TAGS);\n\n    // \"resizableXX\"\n    final String[] RESIZABLE_TAGS = new String[]{\"div\", \"textarea\", \"textfield\", \"select\"};\n    registerBoolean(\"resizable\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAnimate\", registrar, RESIZABLE_TAGS);\n    // TODO resizableAnimateEasing\n    registerBoolean(\"resizableGhost\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAspectRatio\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAutoHide\", registrar, RESIZABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"document\", \"parent\"),\n                 \"resizableContainment\", registrar,\n                 RESIZABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER,\n                 \"resizableHelper\", registrar,\n                 RESIZABLE_TAGS);\n\n\n    // <head>\n    registerBoolean(\"ajaxcache\", registrar, \"head\");\n    registerBoolean(\"ajaxhistory\", registrar, \"head\");\n    registerBoolean(\"compressed\", registrar, \"head\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"defaultIndicator\", registrar, \"head\");\n    registerTags(new StaticStringValuesReferenceProvider(true,\n                                                         \"cupertino\",\n                                                         \"darkness\",\n                                                         \"lightness\",\n                                                         \"redmond\",\n                                                         \"smothness\"),\n                 \"jquerytheme\", registrar,\n                 \"head\");\n    registerBoolean(\"jqueryui\", registrar, \"head\");\n    registerBoolean(\"loadFromGoogle\", registrar, \"head\");\n    registerBoolean(\"useJqGridPlugin\", registrar, \"head\");\n  }","id":103687,"modified_method":"@Override\n  public void registerReferenceProviders(final PsiReferenceRegistrar registrar) {\n    // common attributes -------------------------------------\n\n    // CSS*\n    registerTags(CSS_CLASS_PROVIDER, \"cssClass\", registrar, CSS__TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"cssErrorClass\", registrar, CSS__TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"tooltipCssClass\", registrar, CSS__TAGS);\n\n    // \"resizableXX\"\n    final String[] RESIZABLE_TAGS = new String[]{\"dialog\", \"div\", \"textarea\", \"textfield\", \"select\"};\n    registerBoolean(\"resizable\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAnimate\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableGhost\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAspectRatio\", registrar, RESIZABLE_TAGS);\n    registerBoolean(\"resizableAutoHide\", registrar, RESIZABLE_TAGS);\n    registerTags(new HtmlIdWithAdditionalVariantsReferenceProvider(\"document\", \"parent\"),\n                 \"resizableContainment\", registrar, RESIZABLE_TAGS);\n    registerTags(CSS_CLASS_PROVIDER, \"resizableHelper\", registrar, RESIZABLE_TAGS);\n\n    // \"indicator\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"indicator\", registrar,\n                 \"a\", \"dialog\", \"div\", \"grid\", \"submit\", \"textfield\", \"textarea\", \"select\");\n\n    // \"errorElementId\"\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"errorElementId\", registrar,\n                 \"a\", \"dialog\", \"grid\", \"select\", \"submit\", \"tab\", \"textfield\");\n\n    // TODO \"disabled\"\n\n    // \"required[position]\"\n    registerBoolean(\"required\", registrar, REQUIRED_TAGS);\n    registerTags(new StaticStringValuesReferenceProvider(\"left\", \"right\"),\n                 \"requiredposition\", registrar, REQUIRED_TAGS);\n\n    // \"labelposition\"\n    registerTags(new StaticStringValuesReferenceProvider(\"top\", \"left\"),\n                 \"labelposition\", registrar, ArrayUtil.mergeArrays(CSS__TAGS, REQUIRED_TAGS, String.class));\n\n    // specific tags --------------------------------------------------------------\n\n    // <head>\n    registerBoolean(\"ajaxcache\", registrar, \"head\");\n    registerBoolean(\"ajaxhistory\", registrar, \"head\");\n    registerBoolean(\"compressed\", registrar, \"head\");\n    registerTags(HTML_ID_REFERENCE_PROVIDER, \"defaultIndicator\", registrar, \"head\");\n    registerTags(new StaticStringValuesReferenceProvider(\"cupertino\",\n                                                         \"darkness\",\n                                                         \"lightness\",\n                                                         \"redmond\",\n                                                         \"smothness\"),\n                 \"jquerytheme\", registrar, \"head\");\n    registerBoolean(\"jqueryui\", registrar, \"head\");\n    registerBoolean(\"loadFromGoogle\", registrar, \"head\");\n    registerBoolean(\"useJqGridPlugin\", registrar, \"head\");\n\n\n    // <submit>\n    registerBoolean(\"clearForm\", registrar, \"submit\");\n    registerTags(RELATIVE_PATH_PROVIDER, \"href\", registrar, \"submit\");\n    registerBoolean(\"iframe\", registrar, \"submit\");\n    registerBoolean(\"resetForm\", registrar, \"submit\");\n    registerTags(new StaticStringValuesReferenceProvider(\"button\", \"input\", \"image\"),\n                 \"type\", registrar, \"submit\");\n    registerTags(new StaticStringValuesReferenceProvider(\"true\", \"false\", \"only\"),\n                 \"validate\", registrar, \"submit\");\n  }","commit_id":"78362607b95af8782aa6511245e30c3910ba7428","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","id":103688,"modified_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void calculate(double[] theta) {\n    model.vectorToParams(theta);\n\n    double localValue = 0.0;\n    double[] localDerivative = new double[theta.length];\n\n    // We use TreeMap for each of these so that they stay in a\n    // canonical sorted order\n    // binaryTD stands for Transform Derivatives (see the SentimentModel)\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryTD = TwoDimensionalMap.treeMap();\n    // binaryCD stands for Classification Derivatives\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryCD = TwoDimensionalMap.treeMap();\n\n    // unaryCD stands for Classification Derivatives\n    Map<String, SimpleMatrix> unaryCD = Generics.newTreeMap();\n\n    // word vector derivatives\n    Map<String, SimpleMatrix> wordVectorD = Generics.newTreeMap();\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryTransform) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryClassification) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryCD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (Map.Entry<String, SimpleMatrix> entry : model.unaryClassification.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      unaryCD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    for (Map.Entry<String, SimpleMatrix> entry : model.wordVectors.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      wordVectorD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    \n    // TODO: This part can easily be parallelized\n    List<Tree> forwardPropTrees = Generics.newArrayList();\n    for (Tree tree : trainingBatch) {\n      Tree trainingTree = tree.deepCopy();\n      // this will attach the error vectors and the node vectors\n      // to each node in the tree\n      forwardPropagateTree(trainingTree);\n      forwardPropTrees.add(trainingTree);\n    }\n\n    // TODO: we may find a big speedup by separating the derivatives and then summing\n    double error = 0.0;\n    for (Tree tree : forwardPropTrees) {\n      backpropDerivativesAndError(tree, binaryTD, binaryCD, unaryCD, wordVectorD);\n      error += sumError(tree);\n    }\n\n    value = error;\n    derivative = RNNUtils.paramsToVector(theta.length, binaryTD.valueIterator(), binaryCD.valueIterator(), unaryCD.values().iterator(), wordVectorD.values().iterator());\n  }","id":103689,"modified_method":"public void calculate(double[] theta) {\n    model.vectorToParams(theta);\n\n    double localValue = 0.0;\n    double[] localDerivative = new double[theta.length];\n\n    // We use TreeMap for each of these so that they stay in a\n    // canonical sorted order\n    // binaryTD stands for Transform Derivatives (see the SentimentModel)\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryTD = TwoDimensionalMap.treeMap();\n    // the derivatives of the tensors for the binary nodes\n    TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD = TwoDimensionalMap.treeMap();\n    // binaryCD stands for Classification Derivatives\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryCD = TwoDimensionalMap.treeMap();\n\n    // unaryCD stands for Classification Derivatives\n    Map<String, SimpleMatrix> unaryCD = Generics.newTreeMap();\n\n    // word vector derivatives\n    Map<String, SimpleMatrix> wordVectorD = Generics.newTreeMap();\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryTransform) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryClassification) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryCD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    if (model.op.useTensors) {\n      for (TwoDimensionalMap.Entry<String, String, SimpleTensor> entry : model.binaryTensors) {\n        int numRows = entry.getValue().numRows();\n        int numCols = entry.getValue().numCols();\n        int numSlices = entry.getValue().numSlices();\n        \n        binaryTensorTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleTensor(numRows, numCols, numSlices));\n      }\n    }\n\n    for (Map.Entry<String, SimpleMatrix> entry : model.unaryClassification.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      unaryCD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    for (Map.Entry<String, SimpleMatrix> entry : model.wordVectors.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      wordVectorD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    \n    // TODO: This part can easily be parallelized\n    List<Tree> forwardPropTrees = Generics.newArrayList();\n    for (Tree tree : trainingBatch) {\n      Tree trainingTree = tree.deepCopy();\n      // this will attach the error vectors and the node vectors\n      // to each node in the tree\n      forwardPropagateTree(trainingTree);\n      forwardPropTrees.add(trainingTree);\n    }\n\n    // TODO: we may find a big speedup by separating the derivatives and then summing\n    double error = 0.0;\n    for (Tree tree : forwardPropTrees) {\n      backpropDerivativesAndError(tree, binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD);\n      error += sumError(tree);\n    }\n\n    value = error;\n    derivative = RNNUtils.paramsToVector(theta.length, binaryTD.valueIterator(), binaryCD.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensorTD.valueIterator()), unaryCD.values().iterator(), wordVectorD.values().iterator());\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD) {\n    SimpleMatrix delta = new SimpleMatrix(model.op.numHid, 1);\n    backpropDerivativesAndError(tree, binaryTD, binaryCD, unaryCD, wordVectorD, delta);\n  }","id":103690,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD) {\n    SimpleMatrix delta = new SimpleMatrix(model.op.numHid, 1);\n    backpropDerivativesAndError(tree, binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, delta);\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      \n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix WTDelta = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      SimpleMatrix leftWTDelta = WTDelta.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightWTDelta = WTDelta.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, unaryCD, wordVectorD, leftDerivative.elementMult(leftWTDelta));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, unaryCD, wordVectorD, rightDerivative.elementMult(rightWTDelta));\n    }\n  }","id":103691,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void forwardPropagateTree(Tree tree) {\n    SimpleMatrix nodeVector = null;\n    SimpleMatrix classification = null;\n\n    if (tree.isLeaf()) {\n      // We do nothing for the leaves.  The preterminals will\n      // calculate the classification for this word/tag.  In fact, the\n      // recursion should not have gotten here (unless there are\n      // degenerate trees of just one leaf)\n      throw new AssertionError(\"We should not have reached leaves in forwardPropagate\");\n    } else if (tree.isPreTerminal()) {\n      classification = model.getUnaryClassification(tree.label().value());\n      String word = tree.children()[0].label().value();\n      SimpleMatrix wordVector = model.getWordVector(word);\n      nodeVector = RNNUtils.elementwiseApplyTanh(wordVector);\n    } else if (tree.children().length == 1) {\n      throw new AssertionError(\"Non-preterminal nodes of size 1 should have already been collapsed\");\n    } else if (tree.children().length == 2) {\n      forwardPropagateTree(tree.children()[0]);\n      forwardPropagateTree(tree.children()[1]);\n\n      String leftCategory = tree.children()[0].label().value();\n      String rightCategory = tree.children()[1].label().value();\n      SimpleMatrix W = model.getBinaryTransform(leftCategory, rightCategory);\n      classification = model.getBinaryClassification(leftCategory, rightCategory);\n\n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector));\n    } else {\n      throw new AssertionError(\"Tree not correctly binarized\");\n    }\n\n    SimpleMatrix predictions = RNNUtils.softmax(classification.mult(RNNUtils.concatenateWithBias(nodeVector)));\n\n    int index = getPredictedClass(predictions);\n    if (!(tree.label() instanceof CoreLabel)) {\n      throw new AssertionError(\"Expected CoreLabels in the nodes\");\n    }\n    CoreLabel label = (CoreLabel) tree.label();\n    label.set(RNNCoreAnnotations.Predictions.class, predictions);\n    label.set(RNNCoreAnnotations.PredictedClass.class, index);\n    label.set(RNNCoreAnnotations.NodeVector.class, nodeVector);\n  }","id":103692,"modified_method":"private void forwardPropagateTree(Tree tree) {\n    SimpleMatrix nodeVector = null;\n    SimpleMatrix classification = null;\n\n    if (tree.isLeaf()) {\n      // We do nothing for the leaves.  The preterminals will\n      // calculate the classification for this word/tag.  In fact, the\n      // recursion should not have gotten here (unless there are\n      // degenerate trees of just one leaf)\n      throw new AssertionError(\"We should not have reached leaves in forwardPropagate\");\n    } else if (tree.isPreTerminal()) {\n      classification = model.getUnaryClassification(tree.label().value());\n      String word = tree.children()[0].label().value();\n      SimpleMatrix wordVector = model.getWordVector(word);\n      nodeVector = RNNUtils.elementwiseApplyTanh(wordVector);\n    } else if (tree.children().length == 1) {\n      throw new AssertionError(\"Non-preterminal nodes of size 1 should have already been collapsed\");\n    } else if (tree.children().length == 2) {\n      forwardPropagateTree(tree.children()[0]);\n      forwardPropagateTree(tree.children()[1]);\n\n      String leftCategory = tree.children()[0].label().value();\n      String rightCategory = tree.children()[1].label().value();\n      SimpleMatrix W = model.getBinaryTransform(leftCategory, rightCategory);\n      classification = model.getBinaryClassification(leftCategory, rightCategory);\n\n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      if (model.op.useTensors) {\n        SimpleTensor tensor = model.getBinaryTensor(leftCategory, rightCategory);\n        SimpleMatrix tensorIn = RNNUtils.concatenate(leftVector, rightVector);\n        SimpleMatrix tensorOut = tensor.bilinearProducts(tensorIn);        \n        nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector).plus(tensorOut));\n      } else {\n        nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector));\n      }\n    } else {\n      throw new AssertionError(\"Tree not correctly binarized\");\n    }\n\n    SimpleMatrix predictions = RNNUtils.softmax(classification.mult(RNNUtils.concatenateWithBias(nodeVector)));\n\n    int index = getPredictedClass(predictions);\n    if (!(tree.label() instanceof CoreLabel)) {\n      throw new AssertionError(\"Expected CoreLabels in the nodes\");\n    }\n    CoreLabel label = (CoreLabel) tree.label();\n    label.set(RNNCoreAnnotations.Predictions.class, predictions);\n    label.set(RNNCoreAnnotations.PredictedClass.class, index);\n    label.set(RNNCoreAnnotations.NodeVector.class, nodeVector);\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"SimpleMatrix randomTransformBlock() {\n    return SimpleMatrix.random(numHid,numHid,-1.0/Math.sqrt((double)numHid * 100.0),1.0/Math.sqrt((double)numHid * 100.0),rand).plus(identity);\n  }","id":103693,"modified_method":"SimpleMatrix randomTransformBlock() {\n    double range = 1.0 / (Math.sqrt((double) numHid) * 2.0);\n    return SimpleMatrix.random(numHid,numHid,-range,range,rand).plus(identity);\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void vectorToParams(double[] theta) {\n    RNNUtils.vectorToParams(theta, binaryTransform.valueIterator(), binaryClassification.valueIterator(), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","id":103694,"modified_method":"public void vectorToParams(double[] theta) {\n    RNNUtils.vectorToParams(theta, binaryTransform.valueIterator(), binaryClassification.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensors.valueIterator()), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public SentimentModel(RNNOptions op, List<Tree> trainingTrees) {\n    this.op = op;\n    // TODO: record for posterity the random seed if it was set to 0\n    rand = (op.randomSeed != 0) ? new Random(op.randomSeed) : new Random(); \n\n    if (op.randomWordVectors) {\n      initRandomWordVectors(trainingTrees);\n    } else {\n      readWordVectors();\n    }\n    if (op.numHid > 0) {\n      this.numHid = op.numHid;\n    } else {\n      int size = 0;\n      for (SimpleMatrix vector : wordVectors.values()) {\n        size = vector.getNumElements();\n        break;\n      }\n      this.numHid = size;\n    }\n\n    TwoDimensionalSet<String, String> binaryProductions = TwoDimensionalSet.hashSet();\n    if (op.simplifiedModel) {\n      binaryProductions.add(\"\", \"\");\n    } else {\n      // TODO\n      // figure out what binary productions we have in these trees\n      // Note: the current sentiment training data does not actually\n      // have any constituent labels\n    }\n\n    Set<String> unaryProductions = Generics.newHashSet();\n    if (op.simplifiedModel) {\n      unaryProductions.add(\"\");\n    } else {\n      // TODO\n      // figure out what unary productions we have in these trees (preterminals only, after the collapsing)\n    }\n\n    this.numClasses = op.numClasses;\n\n    identity = SimpleMatrix.identity(numHid);\n\n    binaryTransform = TwoDimensionalMap.treeMap();\n    binaryClassification = TwoDimensionalMap.treeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (Pair<String, String> binary : binaryProductions) {\n      String left = basicCategory(binary.first);\n      String right = basicCategory(binary.second);\n      if (binaryTransform.contains(left, right)) {\n        continue;\n      }\n      binaryTransform.put(left, right, randomTransformMatrix());\n      binaryClassification.put(left, right, randomClassificationMatrix());\n    }\n    numBinaryMatrices = binaryTransform.size();\n    binaryTransformSize = numHid * (2 * numHid + 1);\n    binaryClassificationSize = numClasses * (numHid + 1);\n\n    unaryClassification = Generics.newTreeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (String unary : unaryProductions) {\n      unary = basicCategory(unary);\n      if (unaryClassification.containsKey(unary)) {\n        continue;\n      }\n      unaryClassification.put(unary, randomClassificationMatrix());\n    }\n    numUnaryMatrices = unaryClassification.size();\n    unaryClassificationSize = numClasses * (numHid + 1);\n\n    // System.err.println(\"Binary transform matrices:\");\n    // System.err.println(binaryTransform);\n    // System.err.println(\"Binary classification matrices:\");\n    // System.err.println(binaryClassification);\n    // System.err.println(\"Unary classification matrices:\");\n    // System.err.println(unaryClassification);\n  }","id":103695,"modified_method":"public SentimentModel(RNNOptions op, List<Tree> trainingTrees) {\n    this.op = op;\n    // TODO: record for posterity the random seed if it was set to 0\n    rand = (op.randomSeed != 0) ? new Random(op.randomSeed) : new Random(); \n\n    if (op.randomWordVectors) {\n      initRandomWordVectors(trainingTrees);\n    } else {\n      readWordVectors();\n    }\n    if (op.numHid > 0) {\n      this.numHid = op.numHid;\n    } else {\n      int size = 0;\n      for (SimpleMatrix vector : wordVectors.values()) {\n        size = vector.getNumElements();\n        break;\n      }\n      this.numHid = size;\n    }\n\n    TwoDimensionalSet<String, String> binaryProductions = TwoDimensionalSet.hashSet();\n    if (op.simplifiedModel) {\n      binaryProductions.add(\"\", \"\");\n    } else {\n      // TODO\n      // figure out what binary productions we have in these trees\n      // Note: the current sentiment training data does not actually\n      // have any constituent labels\n    }\n\n    Set<String> unaryProductions = Generics.newHashSet();\n    if (op.simplifiedModel) {\n      unaryProductions.add(\"\");\n    } else {\n      // TODO\n      // figure out what unary productions we have in these trees (preterminals only, after the collapsing)\n    }\n\n    this.numClasses = op.numClasses;\n\n    identity = SimpleMatrix.identity(numHid);\n\n    binaryTransform = TwoDimensionalMap.treeMap();\n    binaryTensors = TwoDimensionalMap.treeMap();\n    binaryClassification = TwoDimensionalMap.treeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (Pair<String, String> binary : binaryProductions) {\n      String left = basicCategory(binary.first);\n      String right = basicCategory(binary.second);\n      if (binaryTransform.contains(left, right)) {\n        continue;\n      }\n      binaryTransform.put(left, right, randomTransformMatrix());\n      if (op.useTensors) {\n        binaryTensors.put(left, right, randomBinaryTensor());\n      }\n      binaryClassification.put(left, right, randomClassificationMatrix());\n    }\n    numBinaryMatrices = binaryTransform.size();\n    binaryTransformSize = numHid * (2 * numHid + 1);\n    if (op.useTensors) {\n      binaryTensorSize = numHid * numHid * numHid * 4;\n    } else {\n      binaryTensorSize = 0;\n    }\n    binaryClassificationSize = numClasses * (numHid + 1);\n\n    unaryClassification = Generics.newTreeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (String unary : unaryProductions) {\n      unary = basicCategory(unary);\n      if (unaryClassification.containsKey(unary)) {\n        continue;\n      }\n      unaryClassification.put(unary, randomClassificationMatrix());\n    }\n    numUnaryMatrices = unaryClassification.size();\n    unaryClassificationSize = numClasses * (numHid + 1);\n\n    // System.err.println(\"Binary transform matrices:\");\n    // System.err.println(binaryTransform);\n    // System.err.println(\"Binary classification matrices:\");\n    // System.err.println(binaryClassification);\n    // System.err.println(\"Unary classification matrices:\");\n    // System.err.println(unaryClassification);\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public int totalParamSize() {\n    int totalSize = 0;\n    totalSize = numBinaryMatrices * (binaryTransformSize + binaryClassificationSize);\n    totalSize += numUnaryMatrices * unaryClassificationSize;\n    totalSize += wordVectors.size() * numHid;\n    return totalSize;\n  }","id":103696,"modified_method":"public int totalParamSize() {\n    int totalSize = 0;\n    // binaryTensorSize was set to 0 if useTensors=false\n    totalSize = numBinaryMatrices * (binaryTransformSize + binaryClassificationSize + binaryTensorSize);\n    totalSize += numUnaryMatrices * unaryClassificationSize;\n    totalSize += wordVectors.size() * numHid;\n    return totalSize;\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public double[] paramsToVector() {\n    int totalSize = totalParamSize();\n    return RNNUtils.paramsToVector(totalSize, binaryTransform.valueIterator(), binaryClassification.valueIterator(), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","id":103697,"modified_method":"public double[] paramsToVector() {\n    int totalSize = totalParamSize();\n    return RNNUtils.paramsToVector(totalSize, binaryTransform.valueIterator(), binaryClassification.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensors.valueIterator()), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Returns matrices of the right size for either binary or unary (terminal) classification\n   */\n  SimpleMatrix randomClassificationMatrix() {\n    SimpleMatrix score = new SimpleMatrix(numClasses, numHid + 1);\n    // Leave the bias column with 0 values\n    score.insertIntoThis(0, 0, SimpleMatrix.random(numClasses, numHid, -1.0/Math.sqrt((double)numHid),1.0/Math.sqrt((double)numHid),rand));\n    return score.scale(op.trainOptions.scalingForInit);\n  }","id":103698,"modified_method":"/**\n   * Returns matrices of the right size for either binary or unary (terminal) classification\n   */\n  SimpleMatrix randomClassificationMatrix() {\n    SimpleMatrix score = new SimpleMatrix(numClasses, numHid + 1);\n    // Leave the bias column with 0 values\n    double range = 1.0 / (Math.sqrt((double) numHid));\n    score.insertIntoThis(0, 0, SimpleMatrix.random(numClasses, numHid, -range, range, rand));\n    return score.scale(op.trainOptions.scalingForInit);\n  }","commit_id":"d3385fce504ae74c295d0bd2b96f5499bdbdd9c4","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","id":103699,"modified_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD) {\n    SimpleMatrix delta = new SimpleMatrix(model.op.numHid, 1);\n    backpropDerivativesAndError(tree, binaryTD, binaryCD, unaryCD, wordVectorD, delta);\n  }","id":103700,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD) {\n    SimpleMatrix delta = new SimpleMatrix(model.op.numHid, 1);\n    backpropDerivativesAndError(tree, binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, delta);\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void calculate(double[] theta) {\n    model.vectorToParams(theta);\n\n    double localValue = 0.0;\n    double[] localDerivative = new double[theta.length];\n\n    // We use TreeMap for each of these so that they stay in a\n    // canonical sorted order\n    // binaryTD stands for Transform Derivatives (see the SentimentModel)\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryTD = TwoDimensionalMap.treeMap();\n    // binaryCD stands for Classification Derivatives\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryCD = TwoDimensionalMap.treeMap();\n\n    // unaryCD stands for Classification Derivatives\n    Map<String, SimpleMatrix> unaryCD = Generics.newTreeMap();\n\n    // word vector derivatives\n    Map<String, SimpleMatrix> wordVectorD = Generics.newTreeMap();\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryTransform) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryClassification) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryCD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (Map.Entry<String, SimpleMatrix> entry : model.unaryClassification.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      unaryCD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    for (Map.Entry<String, SimpleMatrix> entry : model.wordVectors.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      wordVectorD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    \n    // TODO: This part can easily be parallelized\n    List<Tree> forwardPropTrees = Generics.newArrayList();\n    for (Tree tree : trainingBatch) {\n      Tree trainingTree = tree.deepCopy();\n      // this will attach the error vectors and the node vectors\n      // to each node in the tree\n      forwardPropagateTree(trainingTree);\n      forwardPropTrees.add(trainingTree);\n    }\n\n    // TODO: we may find a big speedup by separating the derivatives and then summing\n    double error = 0.0;\n    for (Tree tree : forwardPropTrees) {\n      backpropDerivativesAndError(tree, binaryTD, binaryCD, unaryCD, wordVectorD);\n      error += sumError(tree);\n    }\n\n    value = error;\n    derivative = RNNUtils.paramsToVector(theta.length, binaryTD.valueIterator(), binaryCD.valueIterator(), unaryCD.values().iterator(), wordVectorD.values().iterator());\n  }","id":103701,"modified_method":"public void calculate(double[] theta) {\n    model.vectorToParams(theta);\n\n    double localValue = 0.0;\n    double[] localDerivative = new double[theta.length];\n\n    // We use TreeMap for each of these so that they stay in a\n    // canonical sorted order\n    // binaryTD stands for Transform Derivatives (see the SentimentModel)\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryTD = TwoDimensionalMap.treeMap();\n    // the derivatives of the tensors for the binary nodes\n    TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD = TwoDimensionalMap.treeMap();\n    // binaryCD stands for Classification Derivatives\n    TwoDimensionalMap<String, String, SimpleMatrix> binaryCD = TwoDimensionalMap.treeMap();\n\n    // unaryCD stands for Classification Derivatives\n    Map<String, SimpleMatrix> unaryCD = Generics.newTreeMap();\n\n    // word vector derivatives\n    Map<String, SimpleMatrix> wordVectorD = Generics.newTreeMap();\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryTransform) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    for (TwoDimensionalMap.Entry<String, String, SimpleMatrix> entry : model.binaryClassification) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n\n      binaryCD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleMatrix(numRows, numCols));\n    }\n\n    if (model.op.useTensors) {\n      for (TwoDimensionalMap.Entry<String, String, SimpleTensor> entry : model.binaryTensors) {\n        int numRows = entry.getValue().numRows();\n        int numCols = entry.getValue().numCols();\n        int numSlices = entry.getValue().numSlices();\n        \n        binaryTensorTD.put(entry.getFirstKey(), entry.getSecondKey(), new SimpleTensor(numRows, numCols, numSlices));\n      }\n    }\n\n    for (Map.Entry<String, SimpleMatrix> entry : model.unaryClassification.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      unaryCD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    for (Map.Entry<String, SimpleMatrix> entry : model.wordVectors.entrySet()) {\n      int numRows = entry.getValue().numRows();\n      int numCols = entry.getValue().numCols();\n      wordVectorD.put(entry.getKey(), new SimpleMatrix(numRows, numCols));\n    }\n    \n    // TODO: This part can easily be parallelized\n    List<Tree> forwardPropTrees = Generics.newArrayList();\n    for (Tree tree : trainingBatch) {\n      Tree trainingTree = tree.deepCopy();\n      // this will attach the error vectors and the node vectors\n      // to each node in the tree\n      forwardPropagateTree(trainingTree);\n      forwardPropTrees.add(trainingTree);\n    }\n\n    // TODO: we may find a big speedup by separating the derivatives and then summing\n    double error = 0.0;\n    for (Tree tree : forwardPropTrees) {\n      backpropDerivativesAndError(tree, binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD);\n      error += sumError(tree);\n    }\n\n    value = error;\n    derivative = RNNUtils.paramsToVector(theta.length, binaryTD.valueIterator(), binaryCD.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensorTD.valueIterator()), unaryCD.values().iterator(), wordVectorD.values().iterator());\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void forwardPropagateTree(Tree tree) {\n    SimpleMatrix nodeVector = null;\n    SimpleMatrix classification = null;\n\n    if (tree.isLeaf()) {\n      // We do nothing for the leaves.  The preterminals will\n      // calculate the classification for this word/tag.  In fact, the\n      // recursion should not have gotten here (unless there are\n      // degenerate trees of just one leaf)\n      throw new AssertionError(\"We should not have reached leaves in forwardPropagate\");\n    } else if (tree.isPreTerminal()) {\n      classification = model.getUnaryClassification(tree.label().value());\n      String word = tree.children()[0].label().value();\n      SimpleMatrix wordVector = model.getWordVector(word);\n      nodeVector = RNNUtils.elementwiseApplyTanh(wordVector);\n    } else if (tree.children().length == 1) {\n      throw new AssertionError(\"Non-preterminal nodes of size 1 should have already been collapsed\");\n    } else if (tree.children().length == 2) {\n      forwardPropagateTree(tree.children()[0]);\n      forwardPropagateTree(tree.children()[1]);\n\n      String leftCategory = tree.children()[0].label().value();\n      String rightCategory = tree.children()[1].label().value();\n      SimpleMatrix W = model.getBinaryTransform(leftCategory, rightCategory);\n      classification = model.getBinaryClassification(leftCategory, rightCategory);\n\n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector));\n    } else {\n      throw new AssertionError(\"Tree not correctly binarized\");\n    }\n\n    SimpleMatrix predictions = RNNUtils.softmax(classification.mult(RNNUtils.concatenateWithBias(nodeVector)));\n\n    int index = getPredictedClass(predictions);\n    if (!(tree.label() instanceof CoreLabel)) {\n      throw new AssertionError(\"Expected CoreLabels in the nodes\");\n    }\n    CoreLabel label = (CoreLabel) tree.label();\n    label.set(RNNCoreAnnotations.Predictions.class, predictions);\n    label.set(RNNCoreAnnotations.PredictedClass.class, index);\n    label.set(RNNCoreAnnotations.NodeVector.class, nodeVector);\n  }","id":103702,"modified_method":"private void forwardPropagateTree(Tree tree) {\n    SimpleMatrix nodeVector = null;\n    SimpleMatrix classification = null;\n\n    if (tree.isLeaf()) {\n      // We do nothing for the leaves.  The preterminals will\n      // calculate the classification for this word/tag.  In fact, the\n      // recursion should not have gotten here (unless there are\n      // degenerate trees of just one leaf)\n      throw new AssertionError(\"We should not have reached leaves in forwardPropagate\");\n    } else if (tree.isPreTerminal()) {\n      classification = model.getUnaryClassification(tree.label().value());\n      String word = tree.children()[0].label().value();\n      SimpleMatrix wordVector = model.getWordVector(word);\n      nodeVector = RNNUtils.elementwiseApplyTanh(wordVector);\n    } else if (tree.children().length == 1) {\n      throw new AssertionError(\"Non-preterminal nodes of size 1 should have already been collapsed\");\n    } else if (tree.children().length == 2) {\n      forwardPropagateTree(tree.children()[0]);\n      forwardPropagateTree(tree.children()[1]);\n\n      String leftCategory = tree.children()[0].label().value();\n      String rightCategory = tree.children()[1].label().value();\n      SimpleMatrix W = model.getBinaryTransform(leftCategory, rightCategory);\n      classification = model.getBinaryClassification(leftCategory, rightCategory);\n\n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      if (model.op.useTensors) {\n        SimpleTensor tensor = model.getBinaryTensor(leftCategory, rightCategory);\n        SimpleMatrix tensorIn = RNNUtils.concatenate(leftVector, rightVector);\n        SimpleMatrix tensorOut = tensor.bilinearProducts(tensorIn);        \n        nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector).plus(tensorOut));\n      } else {\n        nodeVector = RNNUtils.elementwiseApplyTanh(W.mult(childrenVector));\n      }\n    } else {\n      throw new AssertionError(\"Tree not correctly binarized\");\n    }\n\n    SimpleMatrix predictions = RNNUtils.softmax(classification.mult(RNNUtils.concatenateWithBias(nodeVector)));\n\n    int index = getPredictedClass(predictions);\n    if (!(tree.label() instanceof CoreLabel)) {\n      throw new AssertionError(\"Expected CoreLabels in the nodes\");\n    }\n    CoreLabel label = (CoreLabel) tree.label();\n    label.set(RNNCoreAnnotations.Predictions.class, predictions);\n    label.set(RNNCoreAnnotations.PredictedClass.class, index);\n    label.set(RNNCoreAnnotations.NodeVector.class, nodeVector);\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      \n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix WTDelta = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      SimpleMatrix leftWTDelta = WTDelta.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightWTDelta = WTDelta.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, unaryCD, wordVectorD, leftDerivative.elementMult(leftWTDelta));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, unaryCD, wordVectorD, rightDerivative.elementMult(rightWTDelta));\n    }\n  }","id":103703,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void vectorToParams(double[] theta) {\n    RNNUtils.vectorToParams(theta, binaryTransform.valueIterator(), binaryClassification.valueIterator(), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","id":103704,"modified_method":"public void vectorToParams(double[] theta) {\n    RNNUtils.vectorToParams(theta, binaryTransform.valueIterator(), binaryClassification.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensors.valueIterator()), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Returns matrices of the right size for either binary or unary (terminal) classification\n   */\n  SimpleMatrix randomClassificationMatrix() {\n    SimpleMatrix score = new SimpleMatrix(numClasses, numHid + 1);\n    // Leave the bias column with 0 values\n    score.insertIntoThis(0, 0, SimpleMatrix.random(numClasses, numHid, -1.0/Math.sqrt((double)numHid),1.0/Math.sqrt((double)numHid),rand));\n    return score.scale(op.trainOptions.scalingForInit);\n  }","id":103705,"modified_method":"/**\n   * Returns matrices of the right size for either binary or unary (terminal) classification\n   */\n  SimpleMatrix randomClassificationMatrix() {\n    SimpleMatrix score = new SimpleMatrix(numClasses, numHid + 1);\n    // Leave the bias column with 0 values\n    double range = 1.0 / (Math.sqrt((double) numHid));\n    score.insertIntoThis(0, 0, SimpleMatrix.random(numClasses, numHid, -range, range, rand));\n    return score.scale(op.trainOptions.scalingForInit);\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public double[] paramsToVector() {\n    int totalSize = totalParamSize();\n    return RNNUtils.paramsToVector(totalSize, binaryTransform.valueIterator(), binaryClassification.valueIterator(), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","id":103706,"modified_method":"public double[] paramsToVector() {\n    int totalSize = totalParamSize();\n    return RNNUtils.paramsToVector(totalSize, binaryTransform.valueIterator(), binaryClassification.valueIterator(), SimpleTensor.iteratorSimpleMatrix(binaryTensors.valueIterator()), unaryClassification.values().iterator(), wordVectors.values().iterator());\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public SentimentModel(RNNOptions op, List<Tree> trainingTrees) {\n    this.op = op;\n    // TODO: record for posterity the random seed if it was set to 0\n    rand = (op.randomSeed != 0) ? new Random(op.randomSeed) : new Random(); \n\n    if (op.randomWordVectors) {\n      initRandomWordVectors(trainingTrees);\n    } else {\n      readWordVectors();\n    }\n    if (op.numHid > 0) {\n      this.numHid = op.numHid;\n    } else {\n      int size = 0;\n      for (SimpleMatrix vector : wordVectors.values()) {\n        size = vector.getNumElements();\n        break;\n      }\n      this.numHid = size;\n    }\n\n    TwoDimensionalSet<String, String> binaryProductions = TwoDimensionalSet.hashSet();\n    if (op.simplifiedModel) {\n      binaryProductions.add(\"\", \"\");\n    } else {\n      // TODO\n      // figure out what binary productions we have in these trees\n      // Note: the current sentiment training data does not actually\n      // have any constituent labels\n    }\n\n    Set<String> unaryProductions = Generics.newHashSet();\n    if (op.simplifiedModel) {\n      unaryProductions.add(\"\");\n    } else {\n      // TODO\n      // figure out what unary productions we have in these trees (preterminals only, after the collapsing)\n    }\n\n    this.numClasses = op.numClasses;\n\n    identity = SimpleMatrix.identity(numHid);\n\n    binaryTransform = TwoDimensionalMap.treeMap();\n    binaryClassification = TwoDimensionalMap.treeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (Pair<String, String> binary : binaryProductions) {\n      String left = basicCategory(binary.first);\n      String right = basicCategory(binary.second);\n      if (binaryTransform.contains(left, right)) {\n        continue;\n      }\n      binaryTransform.put(left, right, randomTransformMatrix());\n      binaryClassification.put(left, right, randomClassificationMatrix());\n    }\n    numBinaryMatrices = binaryTransform.size();\n    binaryTransformSize = numHid * (2 * numHid + 1);\n    binaryClassificationSize = numClasses * (numHid + 1);\n\n    unaryClassification = Generics.newTreeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (String unary : unaryProductions) {\n      unary = basicCategory(unary);\n      if (unaryClassification.containsKey(unary)) {\n        continue;\n      }\n      unaryClassification.put(unary, randomClassificationMatrix());\n    }\n    numUnaryMatrices = unaryClassification.size();\n    unaryClassificationSize = numClasses * (numHid + 1);\n\n    // System.err.println(\"Binary transform matrices:\");\n    // System.err.println(binaryTransform);\n    // System.err.println(\"Binary classification matrices:\");\n    // System.err.println(binaryClassification);\n    // System.err.println(\"Unary classification matrices:\");\n    // System.err.println(unaryClassification);\n  }","id":103707,"modified_method":"public SentimentModel(RNNOptions op, List<Tree> trainingTrees) {\n    this.op = op;\n    // TODO: record for posterity the random seed if it was set to 0\n    rand = (op.randomSeed != 0) ? new Random(op.randomSeed) : new Random(); \n\n    if (op.randomWordVectors) {\n      initRandomWordVectors(trainingTrees);\n    } else {\n      readWordVectors();\n    }\n    if (op.numHid > 0) {\n      this.numHid = op.numHid;\n    } else {\n      int size = 0;\n      for (SimpleMatrix vector : wordVectors.values()) {\n        size = vector.getNumElements();\n        break;\n      }\n      this.numHid = size;\n    }\n\n    TwoDimensionalSet<String, String> binaryProductions = TwoDimensionalSet.hashSet();\n    if (op.simplifiedModel) {\n      binaryProductions.add(\"\", \"\");\n    } else {\n      // TODO\n      // figure out what binary productions we have in these trees\n      // Note: the current sentiment training data does not actually\n      // have any constituent labels\n    }\n\n    Set<String> unaryProductions = Generics.newHashSet();\n    if (op.simplifiedModel) {\n      unaryProductions.add(\"\");\n    } else {\n      // TODO\n      // figure out what unary productions we have in these trees (preterminals only, after the collapsing)\n    }\n\n    this.numClasses = op.numClasses;\n\n    identity = SimpleMatrix.identity(numHid);\n\n    binaryTransform = TwoDimensionalMap.treeMap();\n    binaryTensors = TwoDimensionalMap.treeMap();\n    binaryClassification = TwoDimensionalMap.treeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (Pair<String, String> binary : binaryProductions) {\n      String left = basicCategory(binary.first);\n      String right = basicCategory(binary.second);\n      if (binaryTransform.contains(left, right)) {\n        continue;\n      }\n      binaryTransform.put(left, right, randomTransformMatrix());\n      if (op.useTensors) {\n        binaryTensors.put(left, right, randomBinaryTensor());\n      }\n      binaryClassification.put(left, right, randomClassificationMatrix());\n    }\n    numBinaryMatrices = binaryTransform.size();\n    binaryTransformSize = numHid * (2 * numHid + 1);\n    if (op.useTensors) {\n      binaryTensorSize = numHid * numHid * numHid * 4;\n    } else {\n      binaryTensorSize = 0;\n    }\n    binaryClassificationSize = numClasses * (numHid + 1);\n\n    unaryClassification = Generics.newTreeMap();\n    \n    // When making a flat model (no symantic untying) the\n    // basicCategory function will return the same basic category for\n    // all labels, so all entries will map to the same matrix\n    for (String unary : unaryProductions) {\n      unary = basicCategory(unary);\n      if (unaryClassification.containsKey(unary)) {\n        continue;\n      }\n      unaryClassification.put(unary, randomClassificationMatrix());\n    }\n    numUnaryMatrices = unaryClassification.size();\n    unaryClassificationSize = numClasses * (numHid + 1);\n\n    // System.err.println(\"Binary transform matrices:\");\n    // System.err.println(binaryTransform);\n    // System.err.println(\"Binary classification matrices:\");\n    // System.err.println(binaryClassification);\n    // System.err.println(\"Unary classification matrices:\");\n    // System.err.println(unaryClassification);\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"SimpleMatrix randomTransformBlock() {\n    return SimpleMatrix.random(numHid,numHid,-1.0/Math.sqrt((double)numHid * 100.0),1.0/Math.sqrt((double)numHid * 100.0),rand).plus(identity);\n  }","id":103708,"modified_method":"SimpleMatrix randomTransformBlock() {\n    double range = 1.0 / (Math.sqrt((double) numHid) * 2.0);\n    return SimpleMatrix.random(numHid,numHid,-range,range,rand).plus(identity);\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public int totalParamSize() {\n    int totalSize = 0;\n    totalSize = numBinaryMatrices * (binaryTransformSize + binaryClassificationSize);\n    totalSize += numUnaryMatrices * unaryClassificationSize;\n    totalSize += wordVectors.size() * numHid;\n    return totalSize;\n  }","id":103709,"modified_method":"public int totalParamSize() {\n    int totalSize = 0;\n    // binaryTensorSize was set to 0 if useTensors=false\n    totalSize = numBinaryMatrices * (binaryTransformSize + binaryClassificationSize + binaryTensorSize);\n    totalSize += numUnaryMatrices * unaryClassificationSize;\n    totalSize += wordVectors.size() * numHid;\n    return totalSize;\n  }","commit_id":"bd888cd49f8f658d928e3c550a6268cffb74503f","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Elect one leader among the {@link DistributedStreamService}s running in different Twill runnables.\n   */\n  private void performLeaderElection() {\n    // Start the resource coordinator that will map Streams to Stream handlers\n    leaderElection = new LeaderElection(\n      zkClient, \"/election/\" + STREAMS_COORDINATOR, new ElectionHandler() {\n      @Override\n      public void leader() {\n        LOG.info(\"Became Stream handler leader. Starting resource coordinator.\");\n        resourceCoordinator = new ResourceCoordinator(zkClient, discoveryServiceClient,\n                                                      new BalancedAssignmentStrategy());\n        resourceCoordinator.startAndWait();\n\n        resourceCoordinatorClient.modifyRequirement(Constants.Service.STREAMS, new ResourceModifier() {\n          @Nullable\n          @Override\n          public ResourceRequirement apply(@Nullable ResourceRequirement existingRequirement) {\n            try {\n              // Create one requirement for the resource coordinator for all the streams.\n              // One stream is identified by one partition\n              ResourceRequirement.Builder builder = ResourceRequirement.builder(Constants.Service.STREAMS);\n              Collection<StreamSpecification> specifications = streamMetaStore.listStreams().get(\n                  new NamespaceMeta.Builder().setId(Constants.DEFAULT_NAMESPACE).build());\n              for (StreamSpecification spec : specifications) {\n                LOG.debug(\"Adding {} stream as a resource to the coordinator to manager streams leaders.\",\n                          spec.getName());\n                builder.addPartition(new ResourceRequirement.Partition(spec.getName(), 1));\n              }\n              return builder.build();\n            } catch (Throwable e) {\n              LOG.error(\"Could not create requirement for coordinator in Stream handler leader\", e);\n              Throwables.propagate(e);\n              return null;\n            }\n          }\n        });\n      }\n\n      @Override\n      public void follower() {\n        LOG.info(\"Became Stream handler follower.\");\n        if (resourceCoordinator != null) {\n          resourceCoordinator.stopAndWait();\n        }\n      }\n    });\n  }","id":103710,"modified_method":"/**\n   * Elect one leader among the {@link DistributedStreamService}s running in different Twill runnables.\n   */\n  private void performLeaderElection() {\n    // Start the resource coordinator that will map Streams to Stream handlers\n    leaderElection = new LeaderElection(\n      zkClient, \"/election/\" + STREAMS_COORDINATOR, new ElectionHandler() {\n      @Override\n      public void leader() {\n        LOG.info(\"Became Stream handler leader. Starting resource coordinator.\");\n        resourceCoordinator = new ResourceCoordinator(zkClient, discoveryServiceClient,\n                                                      new BalancedAssignmentStrategy());\n        resourceCoordinator.startAndWait();\n\n        resourceCoordinatorClient.modifyRequirement(Constants.Service.STREAMS, new ResourceModifier() {\n          @Nullable\n          @Override\n          public ResourceRequirement apply(@Nullable ResourceRequirement existingRequirement) {\n            try {\n              // Create one requirement for the resource coordinator for all the streams.\n              // One stream is identified by one partition\n              ResourceRequirement.Builder builder = ResourceRequirement.builder(Constants.Service.STREAMS);\n              for (StreamSpecification spec : streamMetaStore.listStreams(Constants.DEFAULT_NAMESPACE)) {\n                LOG.debug(\"Adding {} stream as a resource to the coordinator to manager streams leaders.\",\n                          spec.getName());\n                builder.addPartition(new ResourceRequirement.Partition(spec.getName(), 1));\n              }\n              return builder.build();\n            } catch (Throwable e) {\n              LOG.error(\"Could not create requirement for coordinator in Stream handler leader\", e);\n              Throwables.propagate(e);\n              return null;\n            }\n          }\n        });\n      }\n\n      @Override\n      public void follower() {\n        LOG.info(\"Became Stream handler follower.\");\n        if (resourceCoordinator != null) {\n          resourceCoordinator.stopAndWait();\n        }\n      }\n    });\n  }","commit_id":"a544a2c9ad0d4551e60bf1d319e75ffe36fee57b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void runOneIteration() throws Exception {\n    LOG.trace(\"Performing heartbeat publishing in Stream service instance {}\", instanceId);\n    ImmutableMap.Builder<String, Long> sizes = ImmutableMap.builder();\n    Collection<StreamSpecification> specifications =\n      streamMetaStore.listStreams().get(new NamespaceMeta.Builder().setId(Constants.DEFAULT_NAMESPACE).build());\n    for (StreamSpecification streamSpec : specifications) {\n      sizes.put(streamSpec.getName(), streamWriterSizeCollector.getTotalCollected(streamSpec.getName()));\n    }\n    heartbeatPublisher.sendHeartbeat(new StreamWriterHeartbeat(System.currentTimeMillis(), instanceId, sizes.build()));\n  }","id":103711,"modified_method":"@Override\n  protected void runOneIteration() throws Exception {\n    LOG.trace(\"Performing heartbeat publishing in Stream service instance {}\", instanceId);\n    ImmutableMap.Builder<String, Long> sizes = ImmutableMap.builder();\n    for (StreamSpecification streamSpec : streamMetaStore.listStreams(Constants.DEFAULT_NAMESPACE)) {\n      sizes.put(streamSpec.getName(), streamWriterSizeCollector.getTotalCollected(streamSpec.getName()));\n    }\n    heartbeatPublisher.sendHeartbeat(new StreamWriterHeartbeat(System.currentTimeMillis(), instanceId, sizes.build()));\n  }","commit_id":"a544a2c9ad0d4551e60bf1d319e75ffe36fee57b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public synchronized Multimap<NamespaceMeta, StreamSpecification> listStreams() throws Exception {\n    ImmutableMultimap.Builder<NamespaceMeta, StreamSpecification> builder = ImmutableMultimap.builder();\n    for (String accountId : streams.keySet()) {\n      Collection<String> streamNames = streams.get(accountId);\n      builder.putAll(new NamespaceMeta.Builder().setId(accountId).build(),\n                     Collections2.transform(streamNames, new Function<String, StreamSpecification>() {\n                       @Nullable\n                       @Override\n                       public StreamSpecification apply(String input) {\n                         return new StreamSpecification.Builder().setName(input).create();\n                       }\n                     }));\n    }\n    return builder.build();\n  }","id":103712,"modified_method":"@Override\n  public synchronized Multimap<NamespaceMeta, StreamSpecification> listStreams() throws Exception {\n    ImmutableMultimap.Builder<NamespaceMeta, StreamSpecification> builder = ImmutableMultimap.builder();\n    for (String namespaceId : streams.keySet()) {\n      synchronized (streams) {\n        Collection<String> streamNames = streams.get(namespaceId);\n        builder.putAll(new NamespaceMeta.Builder().setId(namespaceId).build(),\n                       Collections2.transform(streamNames, new Function<String, StreamSpecification>() {\n                         @Nullable\n                         @Override\n                         public StreamSpecification apply(String input) {\n                           return new StreamSpecification.Builder().setName(input).create();\n                         }\n                       }));\n      }\n    }\n    return builder.build();\n  }","commit_id":"a544a2c9ad0d4551e60bf1d319e75ffe36fee57b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void initialize() throws Exception {\n    Collection<StreamSpecification> specifications =\n      streamMetaStore.listStreams().get(new NamespaceMeta.Builder().setId(Constants.DEFAULT_NAMESPACE).build());\n    for (StreamSpecification streamSpec : specifications) {\n      StreamConfig config = streamAdmin.getConfig(streamSpec.getName());\n      long filesSize = StreamUtils.fetchStreamFilesSize(config);\n      createSizeAggregator(streamSpec.getName(), filesSize, config.getNotificationThresholdMB());\n    }\n  }","id":103713,"modified_method":"@Override\n  protected void initialize() throws Exception {\n    for (StreamSpecification streamSpec : streamMetaStore.listStreams(Constants.DEFAULT_NAMESPACE)) {\n      StreamConfig config = streamAdmin.getConfig(streamSpec.getName());\n      long filesSize = StreamUtils.fetchStreamFilesSize(config);\n      createSizeAggregator(streamSpec.getName(), filesSize, config.getNotificationThresholdMB());\n    }\n  }","commit_id":"a544a2c9ad0d4551e60bf1d319e75ffe36fee57b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void runOneIteration() throws Exception {\n    // Get stream size - which will be the entire size - and send a notification if the size is big enough\n    Collection<StreamSpecification> specifications =\n      streamMetaStore.listStreams().get(new NamespaceMeta.Builder().setId(Constants.DEFAULT_NAMESPACE).build());\n    for (StreamSpecification streamSpec : specifications) {\n      StreamSizeAggregator streamSizeAggregator = aggregators.get(streamSpec.getName());\n      if (streamSizeAggregator == null) {\n        // First time that we see this Stream here\n        StreamConfig config = streamAdmin.getConfig(streamSpec.getName());\n        streamSizeAggregator = createSizeAggregator(streamSpec.getName(), 0, config.getNotificationThresholdMB());\n      }\n      streamSizeAggregator.checkAggregatedSize();\n    }\n    isInit = false;\n  }","id":103714,"modified_method":"@Override\n  protected void runOneIteration() throws Exception {\n    // Get stream size - which will be the entire size - and send a notification if the size is big enough\n    for (StreamSpecification streamSpec : streamMetaStore.listStreams(Constants.DEFAULT_NAMESPACE)) {\n      StreamSizeAggregator streamSizeAggregator = aggregators.get(streamSpec.getName());\n      if (streamSizeAggregator == null) {\n        // First time that we see this Stream here\n        StreamConfig config = streamAdmin.getConfig(streamSpec.getName());\n        streamSizeAggregator = createSizeAggregator(streamSpec.getName(), 0, config.getNotificationThresholdMB());\n      }\n      streamSizeAggregator.checkAggregatedSize();\n    }\n    isInit = false;\n  }","commit_id":"a544a2c9ad0d4551e60bf1d319e75ffe36fee57b","url":"https://github.com/caskdata/cdap"},{"original_method":"protected void addSearchAllCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tPermissionThreadLocal.getPermissionChecker();\n\n\t\tlong[] allCategoryIds = _assetEntryQuery.getAllCategoryIds();\n\n\t\tif (allCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] filteredAllCategoryIds = AssetUtil.filterCategoryIds(\n\t\t\tpermissionChecker, allCategoryIds);\n\n\t\tif (allCategoryIds.length != filteredAllCategoryIds.length) {\n\t\t\taddImpossibleTerm(contextQuery, Field.ASSET_CATEGORY_IDS);\n\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long allCategoryId : filteredAllCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(allCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds = AssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\tallCategoryId);\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(allCategoryId);\n\t\t\t}\n\n\t\t\tBooleanQuery categoryIdQuery = BooleanQueryFactoryUtil.create(\n\t\t\t\tsearchContext);\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\n\t\t\tcategoryIdsQuery.add(categoryIdQuery, BooleanClauseOccur.MUST);\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST);\n\t}","id":103715,"modified_method":"protected void addSearchAllCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tPermissionThreadLocal.getPermissionChecker();\n\n\t\tlong[] allCategoryIds = _assetEntryQuery.getAllCategoryIds();\n\n\t\tif (allCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] filteredAllCategoryIds = AssetUtil.filterCategoryIds(\n\t\t\tpermissionChecker, allCategoryIds);\n\n\t\tif (allCategoryIds.length != filteredAllCategoryIds.length) {\n\t\t\taddImpossibleTerm(contextQuery, Field.ASSET_CATEGORY_IDS);\n\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long allCategoryId : filteredAllCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(allCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds.addAll(\n\t\t\t\t\tAssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\t\tallCategoryId));\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(allCategoryId);\n\t\t\t}\n\n\t\t\tBooleanQuery categoryIdQuery = BooleanQueryFactoryUtil.create(\n\t\t\t\tsearchContext);\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\n\t\t\tcategoryIdsQuery.add(categoryIdQuery, BooleanClauseOccur.MUST);\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST);\n\t}","commit_id":"1c700b8e4db23e9664fe4093bb54096e483fcc66","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addSearchNotAllCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tlong[] notAllCategoryIds = _assetEntryQuery.getNotAllCategoryIds();\n\n\t\tif (notAllCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long notAllCategoryId : notAllCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(\n\t\t\t\t\tnotAllCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds = AssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\tnotAllCategoryId);\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(notAllCategoryId);\n\t\t\t}\n\n\t\t\tBooleanQuery categoryIdQuery = BooleanQueryFactoryUtil.create(\n\t\t\t\tsearchContext);\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\n\t\t\tcategoryIdsQuery.add(categoryIdQuery, BooleanClauseOccur.MUST);\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST_NOT);\n\t}","id":103716,"modified_method":"protected void addSearchNotAllCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tlong[] notAllCategoryIds = _assetEntryQuery.getNotAllCategoryIds();\n\n\t\tif (notAllCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long notAllCategoryId : notAllCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(\n\t\t\t\t\tnotAllCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds.addAll(\n\t\t\t\t\tAssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\t\tnotAllCategoryId));\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(notAllCategoryId);\n\t\t\t}\n\n\t\t\tBooleanQuery categoryIdQuery = BooleanQueryFactoryUtil.create(\n\t\t\t\tsearchContext);\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\n\t\t\tcategoryIdsQuery.add(categoryIdQuery, BooleanClauseOccur.MUST);\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST_NOT);\n\t}","commit_id":"1c700b8e4db23e9664fe4093bb54096e483fcc66","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addSearchAnyCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tPermissionThreadLocal.getPermissionChecker();\n\n\t\tlong[] anyCategoryIds = _assetEntryQuery.getAnyCategoryIds();\n\n\t\tif (anyCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] filteredAnyCategoryIds = AssetUtil.filterCategoryIds(\n\t\t\tpermissionChecker, anyCategoryIds);\n\n\t\tif (filteredAnyCategoryIds.length == 0) {\n\t\t\taddImpossibleTerm(contextQuery, Field.ASSET_CATEGORY_IDS);\n\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long anyCategoryId : filteredAnyCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(anyCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds = AssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\tanyCategoryId);\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(anyCategoryId);\n\t\t\t}\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdsQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST);\n\t}","id":103717,"modified_method":"protected void addSearchAnyCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tPermissionThreadLocal.getPermissionChecker();\n\n\t\tlong[] anyCategoryIds = _assetEntryQuery.getAnyCategoryIds();\n\n\t\tif (anyCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] filteredAnyCategoryIds = AssetUtil.filterCategoryIds(\n\t\t\tpermissionChecker, anyCategoryIds);\n\n\t\tif (filteredAnyCategoryIds.length == 0) {\n\t\t\taddImpossibleTerm(contextQuery, Field.ASSET_CATEGORY_IDS);\n\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long anyCategoryId : filteredAnyCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(anyCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds.addAll(\n\t\t\t\t\tAssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\t\tanyCategoryId));\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(anyCategoryId);\n\t\t\t}\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdsQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST);\n\t}","commit_id":"1c700b8e4db23e9664fe4093bb54096e483fcc66","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addSearchNotAnyCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tlong[] notAnyCategoryIds = _assetEntryQuery.getNotAnyCategoryIds();\n\n\t\tif (notAnyCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long notAnyCategoryId : notAnyCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(\n\t\t\t\t\tnotAnyCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds = AssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\tnotAnyCategoryId);\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(notAnyCategoryId);\n\t\t\t}\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdsQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST_NOT);\n\t}","id":103718,"modified_method":"protected void addSearchNotAnyCategories(\n\t\t\tBooleanQuery contextQuery, SearchContext searchContext)\n\t\tthrows Exception {\n\n\t\tlong[] notAnyCategoryIds = _assetEntryQuery.getNotAnyCategoryIds();\n\n\t\tif (notAnyCategoryIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tBooleanQuery categoryIdsQuery = BooleanQueryFactoryUtil.create(\n\t\t\tsearchContext);\n\n\t\tfor (long notAnyCategoryId : notAnyCategoryIds) {\n\t\t\tAssetCategory assetCategory =\n\t\t\t\tAssetCategoryLocalServiceUtil.fetchAssetCategory(\n\t\t\t\t\tnotAnyCategoryId);\n\n\t\t\tif (assetCategory == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n\n\t\t\tif (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) {\n\t\t\t\tcategoryIds.addAll(\n\t\t\t\t\tAssetCategoryLocalServiceUtil.getSubcategoryIds(\n\t\t\t\t\t\tnotAnyCategoryId));\n\t\t\t}\n\n\t\t\tif (categoryIds.isEmpty()) {\n\t\t\t\tcategoryIds.add(notAnyCategoryId);\n\t\t\t}\n\n\t\t\tfor (long categoryId : categoryIds) {\n\t\t\t\tcategoryIdsQuery.addTerm(Field.ASSET_CATEGORY_IDS, categoryId);\n\t\t\t}\n\t\t}\n\n\t\tcontextQuery.add(categoryIdsQuery, BooleanClauseOccur.MUST_NOT);\n\t}","commit_id":"1c700b8e4db23e9664fe4093bb54096e483fcc66","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void writeTransactionStream( ChannelBuffer dest,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other() );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","id":103719,"modified_method":"protected static void writeTransactionStream( ChannelBuffer dest, ByteBuffer readBuffer,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other(), readBuffer );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n            server.mapSlave( channel, context );\n        }\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        ChannelBuffer targetBuffer = ChannelBuffers.dynamicBuffer();\n        type.serializer.write( response.response(), targetBuffer );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffer );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffer;\n    }","id":103720,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n        }\n        Pair<ChannelBuffer, ByteBuffer> targetBuffers = server.mapSlave( channel, context );\n        targetBuffers.first().clear();\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        type.serializer.write( response.response(), targetBuffers.first() );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffers.first(), targetBuffers.other() );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffers.first();\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            ByteBuffer buffer = ByteBuffer.allocateDirect( 1 * MEGA );\n            while ( ( chunk = channel.read( buffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                buffer.flip();\n                buffer.get( bytes );\n                buffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","id":103721,"modified_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel, ByteBuffer readBuffer ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            while ( ( chunk = channel.read( readBuffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                readBuffer.flip();\n                readBuffer.get( bytes );\n                readBuffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","id":103722,"modified_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, readBuffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"void write( ChannelBuffer buffer ) throws IOException;","id":103723,"modified_method":"void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException;","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void write( ChannelBuffer buffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","id":103724,"modified_method":"public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","id":103725,"modified_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Channel channel : unusedChannels )\n            {\n                channel.close();\n            }\n            \n            for ( Channel channel : channels.values() )\n            {\n                channel.close();\n            }\n            executor.shutdown();\n        }\n    }","id":103726,"modified_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Pair<Channel, ChannelBuffer> channel : unusedChannels )\n            {\n                channel.first().close();\n            }\n            \n            for ( Pair<Channel, ChannelBuffer> channel : channels.values() )\n            {\n                channel.first().close();\n            }\n            executor.shutdown();\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","id":103727,"modified_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            ChannelBuffer buffer = ChannelBuffers.dynamicBuffer();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer );\n            Channel channel = getChannel();\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message = reader.read( 20, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","id":103728,"modified_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channelContext = getChannel();\n            Channel channel = channelContext.first();\n            ChannelBuffer buffer = channelContext.other();\n            buffer.clear();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer, channelContext.third() );\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message =  reader.read( READ_RESPONSE_TIMEOUT_SECONDS, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","id":103729,"modified_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, readBuffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Channel channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.close();\n                }\n            }\n        }\n    }","id":103730,"modified_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.first().close();\n                    activeChannels--;\n                }\n                channels.notify();\n            }\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","id":103731,"modified_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","id":103732,"modified_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Channel getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Channel channel = channels.get( thread );\n            if ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Channel unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    for ( int i = 0; i < 5; i++ )\n                    {\n                        ChannelFuture channelFuture = bootstrap.connect(\n                                new InetSocketAddress( hostNameOrIp, port ) );\n                        channelFuture.awaitUninterruptibly();\n                        if ( channelFuture.isSuccess() )\n                        {\n                            channel = channelFuture.getChannel();\n                            msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                            break;\n                        }\n                        else\n                        {\n                            msgLog.logMessage( \"Retrying connect to \" + hostNameOrIp + \":\" + port );\n                            try\n                            {\n                                Thread.sleep( 500 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                Thread.interrupted();\n                            }\n                        }\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n            }\n            return channel;\n        }\n    }","id":103733,"modified_method":"private Triplet<Channel, ChannelBuffer, ByteBuffer> getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.get( thread );\n            while ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Triplet<Channel, ChannelBuffer, ByteBuffer> unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.first().isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                        activeChannels--;\n                        channels.notify();\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    if ( activeChannels >= MAX_NUMBER_OF_CONCURRENT_REQUESTS_PER_CLIENT )\n                    {\n                        channels.wait();\n                        continue;\n                    }\n                    \n                    ChannelFuture channelFuture = bootstrap.connect(\n                            new InetSocketAddress( hostNameOrIp, port ) );\n                    channelFuture.awaitUninterruptibly( 5, TimeUnit.SECONDS );\n                    if ( channelFuture.isSuccess() )\n                    {\n                        channel = Triplet.of( channelFuture.getChannel(), ChannelBuffers.dynamicBuffer(),\n                                ByteBuffer.allocateDirect( 1024*1024 ) );\n                        msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                        activeChannels++;\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n                activeChannels++;\n            }\n            return channel;\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        synchronized ( connectedSlaveChannels )\n        {\n            connectedSlaveChannels.put( channel, slave );\n        }\n    }","id":103734,"modified_method":"protected Pair<ChannelBuffer, ByteBuffer> mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        Pair<ChannelBuffer, ByteBuffer> buffer = null;\n        synchronized ( connectedSlaveChannels )\n        {\n            if ( slave != null )\n            {\n                connectedSlaveChannels.put( channel, slave );\n            }\n            buffer = channelBuffers.get( channel );\n            if ( buffer == null )\n            {\n                buffer = Pair.of( ChannelBuffers.dynamicBuffer(), ByteBuffer.allocateDirect( 1*1024*1024 ) );\n                channelBuffers.put( channel, buffer );\n            }\n        }\n        return buffer;\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                timeUnit = TimeUnit.MINUTES;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount );\n        }\n    }","id":103735,"modified_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            int multiplyFactor = 1;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                // This is only for having to rely on 1.6\n                timeUnit = TimeUnit.SECONDS;\n                multiplyFactor = 60;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount*multiplyFactor );\n        }\n    }","commit_id":"1505d86865807e2ec9ad863e171b18cc8123e8b5","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected static void writeTransactionStream( ChannelBuffer dest,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other() );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","id":103736,"modified_method":"protected static void writeTransactionStream( ChannelBuffer dest, ByteBuffer readBuffer,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other(), readBuffer );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void write( ChannelBuffer buffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","id":103737,"modified_method":"public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","id":103738,"modified_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, readBuffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            ByteBuffer buffer = ByteBuffer.allocateDirect( 1 * MEGA );\n            while ( ( chunk = channel.read( buffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                buffer.flip();\n                buffer.get( bytes );\n                buffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","id":103739,"modified_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel, ByteBuffer readBuffer ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            while ( ( chunk = channel.read( readBuffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                readBuffer.flip();\n                readBuffer.get( bytes );\n                readBuffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"void write( ChannelBuffer buffer ) throws IOException;","id":103740,"modified_method":"void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException;","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n            server.mapSlave( channel, context );\n        }\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        ChannelBuffer targetBuffer = ChannelBuffers.dynamicBuffer();\n        type.serializer.write( response.response(), targetBuffer );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffer );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffer;\n    }","id":103741,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n        }\n        Pair<ChannelBuffer, ByteBuffer> targetBuffers = server.mapSlave( channel, context );\n        targetBuffers.first().clear();\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        type.serializer.write( response.response(), targetBuffers.first() );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffers.first(), targetBuffers.other() );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffers.first();\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","id":103742,"modified_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, readBuffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","id":103743,"modified_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            ChannelBuffer buffer = ChannelBuffers.dynamicBuffer();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer );\n            Channel channel = getChannel();\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message = reader.read( 20, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","id":103744,"modified_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channelContext = getChannel();\n            Channel channel = channelContext.first();\n            ChannelBuffer buffer = channelContext.other();\n            buffer.clear();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer, channelContext.third() );\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message =  reader.read( READ_RESPONSE_TIMEOUT_SECONDS, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Channel getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Channel channel = channels.get( thread );\n            if ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Channel unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    for ( int i = 0; i < 5; i++ )\n                    {\n                        ChannelFuture channelFuture = bootstrap.connect(\n                                new InetSocketAddress( hostNameOrIp, port ) );\n                        channelFuture.awaitUninterruptibly();\n                        if ( channelFuture.isSuccess() )\n                        {\n                            channel = channelFuture.getChannel();\n                            msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                            break;\n                        }\n                        else\n                        {\n                            msgLog.logMessage( \"Retrying connect to \" + hostNameOrIp + \":\" + port );\n                            try\n                            {\n                                Thread.sleep( 500 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                Thread.interrupted();\n                            }\n                        }\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n            }\n            return channel;\n        }\n    }","id":103745,"modified_method":"private Triplet<Channel, ChannelBuffer, ByteBuffer> getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.get( thread );\n            while ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Triplet<Channel, ChannelBuffer, ByteBuffer> unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.first().isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                        activeChannels--;\n                        channels.notify();\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    if ( activeChannels >= MAX_NUMBER_OF_CONCURRENT_REQUESTS_PER_CLIENT )\n                    {\n                        channels.wait();\n                        continue;\n                    }\n                    \n                    ChannelFuture channelFuture = bootstrap.connect(\n                            new InetSocketAddress( hostNameOrIp, port ) );\n                    channelFuture.awaitUninterruptibly( 5, TimeUnit.SECONDS );\n                    if ( channelFuture.isSuccess() )\n                    {\n                        channel = Triplet.of( channelFuture.getChannel(), ChannelBuffers.dynamicBuffer(),\n                                ByteBuffer.allocateDirect( 1024*1024 ) );\n                        msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                        activeChannels++;\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n                activeChannels++;\n            }\n            return channel;\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","id":103746,"modified_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","id":103747,"modified_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","id":103748,"modified_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Channel channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.close();\n                }\n            }\n        }\n    }","id":103749,"modified_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.first().close();\n                    activeChannels--;\n                }\n                channels.notify();\n            }\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Channel channel : unusedChannels )\n            {\n                channel.close();\n            }\n            \n            for ( Channel channel : channels.values() )\n            {\n                channel.close();\n            }\n            executor.shutdown();\n        }\n    }","id":103750,"modified_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Pair<Channel, ChannelBuffer> channel : unusedChannels )\n            {\n                channel.first().close();\n            }\n            \n            for ( Pair<Channel, ChannelBuffer> channel : channels.values() )\n            {\n                channel.first().close();\n            }\n            executor.shutdown();\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        synchronized ( connectedSlaveChannels )\n        {\n            connectedSlaveChannels.put( channel, slave );\n        }\n    }","id":103751,"modified_method":"protected Pair<ChannelBuffer, ByteBuffer> mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        Pair<ChannelBuffer, ByteBuffer> buffer = null;\n        synchronized ( connectedSlaveChannels )\n        {\n            if ( slave != null )\n            {\n                connectedSlaveChannels.put( channel, slave );\n            }\n            buffer = channelBuffers.get( channel );\n            if ( buffer == null )\n            {\n                buffer = Pair.of( ChannelBuffers.dynamicBuffer(), ByteBuffer.allocateDirect( 1*1024*1024 ) );\n                channelBuffers.put( channel, buffer );\n            }\n        }\n        return buffer;\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                timeUnit = TimeUnit.MINUTES;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount );\n        }\n    }","id":103752,"modified_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            int multiplyFactor = 1;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                // This is only for having to rely on 1.6\n                timeUnit = TimeUnit.SECONDS;\n                multiplyFactor = 60;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount*multiplyFactor );\n        }\n    }","commit_id":"5940b3c72cb37ed88caa961aad57cff450936e35","url":"https://github.com/neo4j/neo4j"},{"original_method":"void write( ChannelBuffer buffer ) throws IOException;","id":103753,"modified_method":"void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException;","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected static void writeTransactionStream( ChannelBuffer dest,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other() );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","id":103754,"modified_method":"protected static void writeTransactionStream( ChannelBuffer dest, ByteBuffer readBuffer,\n            TransactionStream transactionStream ) throws IOException\n    {\n        Collection<Pair<Long, ReadableByteChannel>> channels = transactionStream.getChannels();\n        dest.writeInt( channels.size() );\n        for ( Pair<Long, ReadableByteChannel> channel : channels )\n        {\n            dest.writeLong( channel.first() );\n            ByteData data = new ByteData( channel.other(), readBuffer );\n            dest.writeInt( data.size() );\n            for ( byte[] bytes : data )\n            {\n                dest.writeBytes( bytes );\n            }\n            channel.other().close();\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            ByteBuffer buffer = ByteBuffer.allocateDirect( 1 * MEGA );\n            while ( ( chunk = channel.read( buffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                buffer.flip();\n                buffer.get( bytes );\n                buffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","id":103755,"modified_method":"@SuppressWarnings( \"hiding\" )\n        ByteData( ReadableByteChannel channel, ByteBuffer readBuffer ) throws IOException\n        {\n            int size = 0, chunk = 0;\n            List<byte[]> data = new LinkedList<byte[]>();\n            while ( ( chunk = channel.read( readBuffer ) ) >= 0 )\n            {\n                size += chunk;\n                byte[] bytes = new byte[chunk];\n                readBuffer.flip();\n                readBuffer.get( bytes );\n                readBuffer.clear();\n                data.add( bytes );\n            }\n            this.data = data;\n            this.size = size;\n        }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void write( ChannelBuffer buffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","id":103756,"modified_method":"public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n        {\n            buffer.writeInt( entities.length );\n            for ( long entity : entities )\n            {\n                buffer.writeLong( entity );\n            }\n        }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n            server.mapSlave( channel, context );\n        }\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        ChannelBuffer targetBuffer = ChannelBuffers.dynamicBuffer();\n        type.serializer.write( response.response(), targetBuffer );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffer );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffer;\n    }","id":103757,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    protected static ChannelBuffer handleRequest( Master realMaster,\n            ChannelBuffer buffer, Channel channel, MasterServer server ) throws IOException\n    {\n        // TODO Not very pretty solution (to pass in MasterServer here)\n        // but what the heck.\n        RequestType type = RequestType.values()[buffer.readByte()];\n        SlaveContext context = null;\n        if ( type.includesSlaveContext() )\n        {\n            context = readSlaveContext( buffer );\n        }\n        Pair<ChannelBuffer, ByteBuffer> targetBuffers = server.mapSlave( channel, context );\n        targetBuffers.first().clear();\n        Response<?> response = type.caller.callMaster( realMaster, context, buffer );\n        type.serializer.write( response.response(), targetBuffers.first() );\n        if ( type.includesSlaveContext() )\n        {\n            writeTransactionStreams( response.transactions(), targetBuffers.first(), targetBuffers.other() );\n        }\n        if ( type == RequestType.FINISH || type == RequestType.PULL_UPDATES )\n        {\n            server.unmapSlave( channel, context );\n        }\n        return targetBuffers.first();\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","id":103758,"modified_method":"private static <T> void writeTransactionStreams( TransactionStreams txStreams,\n            ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n    {\n        Collection<Pair<String, TransactionStream>> streams = txStreams.getStreams();\n        buffer.writeByte( streams.size() );\n        for ( Pair<String, TransactionStream> streamPair : streams )\n        {\n            writeString( buffer, streamPair.first() );\n            writeTransactionStream( buffer, readBuffer, streamPair.other() );\n        }\n        txStreams.close();\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","id":103759,"modified_method":"public Response<Long> commitSingleResourceTransaction( SlaveContext context,\n            final String resource, final TransactionStream transactionStream )\n    {\n        return sendRequest( RequestType.COMMIT, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, resource );\n                writeTransactionStream(buffer, readBuffer, transactionStream);\n            }\n        }, new Deserializer<Long>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Long read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readLong();\n            }\n        });\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Channel channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.close();\n                }\n            }\n        }\n    }","id":103760,"modified_method":"private void releaseChannel()\n    {\n        // Release channel for this thread\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.remove( Thread.currentThread() );\n            if ( channel != null )\n            {\n                if ( unusedChannels.size() < 5 )\n                {\n                    unusedChannels.push( channel );\n                }\n                else\n                {\n                    channel.first().close();\n                    activeChannels--;\n                }\n                channels.notify();\n            }\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Channel getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Channel channel = channels.get( thread );\n            if ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Channel unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    for ( int i = 0; i < 5; i++ )\n                    {\n                        ChannelFuture channelFuture = bootstrap.connect(\n                                new InetSocketAddress( hostNameOrIp, port ) );\n                        channelFuture.awaitUninterruptibly();\n                        if ( channelFuture.isSuccess() )\n                        {\n                            channel = channelFuture.getChannel();\n                            msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                            break;\n                        }\n                        else\n                        {\n                            msgLog.logMessage( \"Retrying connect to \" + hostNameOrIp + \":\" + port );\n                            try\n                            {\n                                Thread.sleep( 500 );\n                            }\n                            catch ( InterruptedException e )\n                            {\n                                Thread.interrupted();\n                            }\n                        }\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n            }\n            return channel;\n        }\n    }","id":103761,"modified_method":"private Triplet<Channel, ChannelBuffer, ByteBuffer> getChannel() throws Exception\n    {\n        Thread thread = Thread.currentThread();\n        synchronized ( channels )\n        {\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channel = channels.get( thread );\n            while ( channel == null )\n            {\n                // Get unused channel from the channel pool\n                while ( channel == null )\n                {\n                    Triplet<Channel, ChannelBuffer, ByteBuffer> unusedChannel = unusedChannels.poll();\n                    if ( unusedChannel == null )\n                    {\n                        break;\n                    }\n                    else if ( unusedChannel.first().isConnected() )\n                    {\n                        msgLog.logMessage( \"Found unused (and still connected) channel\" );\n                        channel = unusedChannel;\n                    }\n                    else\n                    {\n                        msgLog.logMessage( \"Found unused stale channel, discarding it\" );\n                        activeChannels--;\n                        channels.notify();\n                    }\n                }\n\n                // No unused channel found, create a new one\n                if ( channel == null )\n                {\n                    if ( activeChannels >= MAX_NUMBER_OF_CONCURRENT_REQUESTS_PER_CLIENT )\n                    {\n                        channels.wait();\n                        continue;\n                    }\n                    \n                    ChannelFuture channelFuture = bootstrap.connect(\n                            new InetSocketAddress( hostNameOrIp, port ) );\n                    channelFuture.awaitUninterruptibly( 5, TimeUnit.SECONDS );\n                    if ( channelFuture.isSuccess() )\n                    {\n                        channel = Triplet.of( channelFuture.getChannel(), ChannelBuffers.dynamicBuffer(),\n                                ByteBuffer.allocateDirect( 1024*1024 ) );\n                        msgLog.logMessage( \"Opened a new channel to \" + hostNameOrIp + \":\" + port );\n                        activeChannels++;\n                    }\n                }\n                \n                if ( channel == null )\n                {\n                    throw new IOException( \"Not able to connect to master\" );\n                }\n                        \n                channels.put( thread, channel );\n                activeChannels++;\n            }\n            return channel;\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","id":103762,"modified_method":"public IdAllocation allocateIds( final IdType idType )\n    {\n        return sendRequest( RequestType.ALLOCATE_IDS, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeByte( idType.ordinal() );\n            }\n        }, new Deserializer<IdAllocation>()\n        {\n            public IdAllocation read( ChannelBuffer buffer ) throws IOException\n            {\n                return readIdAllocation( buffer );\n            }\n        } ).response();\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","id":103763,"modified_method":"public Response<Void> finishTransaction( SlaveContext context )\n    {\n        try\n        {\n            return sendRequest( RequestType.FINISH, context, new Serializer()\n            {\n                public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n                {\n                }\n            }, VOID_DESERIALIZER );\n        }\n        finally\n        {\n            releaseChannel();\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Channel channel : unusedChannels )\n            {\n                channel.close();\n            }\n            \n            for ( Channel channel : channels.values() )\n            {\n                channel.close();\n            }\n            executor.shutdown();\n        }\n    }","id":103764,"modified_method":"public void shutdown()\n    {\n        msgLog.logMessage( \"MasterClient shutdown\" );\n        synchronized ( channels )\n        {\n            for ( Pair<Channel, ChannelBuffer> channel : unusedChannels )\n            {\n                channel.first().close();\n            }\n            \n            for ( Pair<Channel, ChannelBuffer> channel : channels.values() )\n            {\n                channel.first().close();\n            }\n            executor.shutdown();\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","id":103765,"modified_method":"public int getMasterIdForCommittedTx( final long txId )\n    {\n        return sendRequest( RequestType.GET_MASTER_ID_FOR_TX, null, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                buffer.writeLong( txId );\n            }\n        }, INTEGER_DESERIALIZER ).response();\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            ChannelBuffer buffer = ChannelBuffers.dynamicBuffer();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer );\n            Channel channel = getChannel();\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message = reader.read( 20, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","id":103766,"modified_method":"private <T> Response<T> sendRequest( RequestType type,\n            SlaveContext slaveContext, Serializer serializer, Deserializer<T> deserializer )\n    {\n        try\n        {\n            // Send 'em over the wire\n            Triplet<Channel, ChannelBuffer, ByteBuffer> channelContext = getChannel();\n            Channel channel = channelContext.first();\n            ChannelBuffer buffer = channelContext.other();\n            buffer.clear();\n            buffer.writeByte( type.ordinal() );\n            if ( type.includesSlaveContext() )\n            {\n                writeSlaveContext( buffer, slaveContext );\n            }\n            serializer.write( buffer, channelContext.third() );\n            channel.write( buffer );\n            BlockingReadHandler<ChannelBuffer> reader = (BlockingReadHandler<ChannelBuffer>)\n                    channel.getPipeline().get( \"blockingHandler\" );\n\n            ChannelBuffer message =  reader.read( READ_RESPONSE_TIMEOUT_SECONDS, TimeUnit.SECONDS );\n            if ( message == null )\n            {\n                throw new HaCommunicationException( \"Channel has been closed\" );\n            }\n            T response = deserializer.read( message );\n            TransactionStreams txStreams = type.includesSlaveContext() ?\n                    readTransactionStreams( message ) : TransactionStreams.EMPTY;\n            return new Response<T>( response, txStreams );\n        }\n        catch ( IOException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( InterruptedException e )\n        {\n            throw new HaCommunicationException( e );\n        }\n        catch ( Exception e )\n        {\n            throw new HaCommunicationException( e );\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","id":103767,"modified_method":"public Response<Integer> createRelationshipType( SlaveContext context, final String name )\n    {\n        return sendRequest( RequestType.CREATE_RELATIONSHIP_TYPE, context, new Serializer()\n        {\n            public void write( ChannelBuffer buffer, ByteBuffer readBuffer ) throws IOException\n            {\n                writeString( buffer, name );\n            }\n        }, new Deserializer<Integer>()\n        {\n            @SuppressWarnings( \"boxing\" )\n            public Integer read( ChannelBuffer buffer ) throws IOException\n            {\n                return buffer.readInt();\n            }\n        } );\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        synchronized ( connectedSlaveChannels )\n        {\n            connectedSlaveChannels.put( channel, slave );\n        }\n    }","id":103768,"modified_method":"protected Pair<ChannelBuffer, ByteBuffer> mapSlave( Channel channel, SlaveContext slave )\n    {\n        channelGroup.add( channel );\n        Pair<ChannelBuffer, ByteBuffer> buffer = null;\n        synchronized ( connectedSlaveChannels )\n        {\n            if ( slave != null )\n            {\n                connectedSlaveChannels.put( channel, slave );\n            }\n            buffer = channelBuffers.get( channel );\n            if ( buffer == null )\n            {\n                buffer = Pair.of( ChannelBuffers.dynamicBuffer(), ByteBuffer.allocateDirect( 1*1024*1024 ) );\n                channelBuffers.put( channel, buffer );\n            }\n        }\n        return buffer;\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                timeUnit = TimeUnit.MINUTES;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount );\n        }\n    }","id":103769,"modified_method":"public static long parseTimeMillis( String timeWithOrWithoutUnit )\n    {\n        int unitIndex = -1;\n        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n        {\n            char ch = timeWithOrWithoutUnit.charAt( i );\n            if ( !Character.isDigit( ch ) )\n            {\n                unitIndex = i;\n                break;\n            }\n        }\n        if ( unitIndex == -1 )\n        {\n            return Integer.parseInt( timeWithOrWithoutUnit );\n        }\n        else\n        {\n            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( 0, unitIndex ) );\n            String unit = timeWithOrWithoutUnit.substring( unitIndex ).toLowerCase();\n            TimeUnit timeUnit = null;\n            int multiplyFactor = 1;\n            if ( unit.equals( \"ms\" ) )\n            {\n                timeUnit = TimeUnit.MILLISECONDS;\n            }\n            else if ( unit.equals( \"s\" ) )\n            {\n                timeUnit = TimeUnit.SECONDS;\n            }\n            else if ( unit.equals( \"m\" ) )\n            {\n                // This is only for having to rely on 1.6\n                timeUnit = TimeUnit.SECONDS;\n                multiplyFactor = 60;\n            }\n            else\n            {\n                throw new RuntimeException( \"Unrecognized unit \" + unit );\n            }\n            return timeUnit.toMillis( amount*multiplyFactor );\n        }\n    }","commit_id":"989cbd446bf4b8810c9af9e5870dc849e398daa4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n\tprotected Set<String> handleKeySet() {\n\t\tSet<String> keySet = new HashSet<>();\n\n\t\tfor (int i = _resourceBundles.size() - 1; i >= 0; i--) {\n\t\t\tResourceBundle resourceBundle = _resourceBundles.get(i);\n\n\t\t\tkeySet.addAll(resourceBundle.keySet());\n\t\t}\n\n\t\treturn keySet;\n\t}","id":103770,"modified_method":"@Override\n\tprotected Set<String> handleKeySet() {\n\t\tif (_keys == null) {\n\t\t\t_keys = new HashSet<>();\n\n\t\t\tfor (ResourceBundle resourceBundle : _resourceBundles) {\n\t\t\t\t_keys.addAll(resourceBundle.keySet());\n\t\t\t}\n\t\t}\n\n\t\treturn _keys;\n\t}","commit_id":"4223b9537e4237a4cf030370a5b9d6cf2c0f53ad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected Object handleGetObject(String key) {\n\t\tfor (int i = _resourceBundles.size() - 1; i >= 0; i--) {\n\t\t\tResourceBundle resourceBundle = _resourceBundles.get(i);\n\n\t\t\tif (resourceBundle.containsKey(key)) {\n\t\t\t\treturn resourceBundle.getObject(key);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":103771,"modified_method":"@Override\n\tprotected Object handleGetObject(String key) {\n\t\tif (key == null) {\n\t\t\tthrow new NullPointerException();\n\t\t}\n\n\t\tfor (ResourceBundle resourceBundle : _resourceBundles) {\n\t\t\tif (!resourceBundle.containsKey(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\treturn resourceBundle.getObject(key);\n\t\t\t}\n\t\t\tcatch (MissingResourceException mre) {\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"4223b9537e4237a4cf030370a5b9d6cf2c0f53ad","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected boolean isEnabled(final AnActionEvent e) {\n    return checkEnabled(e);\n  }","id":103772,"modified_method":"protected boolean isEnabled(@NotNull AnActionEvent e) {\n    Project project = e.getData(CommonDataKeys.PROJECT);\n    if (project == null || !ProjectLevelVcsManager.getInstance(project).hasActiveVcss()) {\n      return false;\n    }\n\n    return !ContainerUtil.isEmpty(e.getData(ChangesListView.UNVERSIONED_FILES_DATA_KEY)) ||\n           SelectedFilesHelper.hasChangedOrUnversionedFiles(project, e) ||\n           !ArrayUtil.isEmpty(e.getData(VcsDataKeys.CHANGES)) ||\n           !ArrayUtil.isEmpty(e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY));\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addAllChangesUnderPath(List<VirtualFile> changedFiles,\n                                             ChangeListManager changeListManager,\n                                             List<Change> changesInFiles, FilePath file) {\n    final Collection<Change> in = changeListManager.getChangesIn(file);\n    changesInFiles.addAll(in);\n    if (changedFiles != null) {\n      for (Change innerChange : in) {\n        final FilePath path = ChangesUtil.getAfterPath(innerChange);\n        if (path != null && path.getVirtualFile() != null) {\n          changedFiles.add(path.getVirtualFile());\n        }\n      }\n    }\n  }","id":103773,"modified_method":"private static void addAllChangesUnderPath(@NotNull ChangeListManager changeListManager,\n                                             @NotNull FilePath file,\n                                             @NotNull List<Change> changes,\n                                             @NotNull List<VirtualFile> changedFiles) {\n    for (Change change : changeListManager.getChangesIn(file)) {\n      changes.add(change);\n\n      FilePath path = ChangesUtil.getAfterPath(change);\n      if (path != null && path.getVirtualFile() != null) {\n        changedFiles.add(path.getVirtualFile());\n      }\n    }\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static List<LocalChangeList> getPreferredLists(@NotNull final List<LocalChangeList> lists, @NotNull final Collection<Change> changes) {\n    List<LocalChangeList> preferredLists = new ArrayList<LocalChangeList>(lists);\n    Set<Change> changesAsSet = new THashSet<Change>(changes);\n    for (LocalChangeList list : lists) {\n      for (Change change : list.getChanges()) {\n        if (changesAsSet.contains(change)) {\n          preferredLists.remove(list);\n          break;\n        }\n      }\n    }\n    return preferredLists;\n  }","id":103774,"modified_method":"@NotNull\n  private static List<LocalChangeList> getPreferredLists(@NotNull List<LocalChangeList> lists, @NotNull Collection<Change> changes) {\n    final Set<Change> changesSet = ContainerUtil.newHashSet(changes);\n\n    return ContainerUtil.findAll(lists, new Condition<LocalChangeList>() {\n      @Override\n      public boolean value(@NotNull LocalChangeList list) {\n        return !ContainerUtil.intersects(changesSet, list.getChanges());\n      }\n    });\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean askAndMove(final Project project, @NotNull final Collection<Change> changes, final List<VirtualFile> unversionedFiles) {\n    if (changes.isEmpty() && unversionedFiles.isEmpty()) return false;\n    final ChangeListManagerImpl listManager = ChangeListManagerImpl.getInstanceImpl(project);\n    final List<LocalChangeList> lists = listManager.getChangeLists();\n    final List<LocalChangeList> preferredLists = getPreferredLists(lists, changes);\n    ChangeListChooser chooser = new ChangeListChooser(project, preferredLists.isEmpty() ? Collections\n      .singletonList(listManager.getDefaultChangeList()) : preferredLists, guessPreferredList(preferredLists),\n                                                      ActionsBundle.message(\"action.ChangesView.Move.text\"), null);\n    chooser.show();\n    LocalChangeList resultList = chooser.getSelectedList();\n    if (resultList != null) {\n      listManager.moveChangesTo(resultList, changes.toArray(new Change[changes.size()]));\n      if ((unversionedFiles != null) && (! unversionedFiles.isEmpty())) {\n        listManager.addUnversionedFiles(resultList, unversionedFiles);\n      }\n      return true;\n    }\n    return false;\n  }","id":103775,"modified_method":"public static boolean askAndMove(@NotNull Project project,\n                                   @NotNull Collection<Change> changes,\n                                   @NotNull List<VirtualFile> unversionedFiles) {\n    if (changes.isEmpty() && unversionedFiles.isEmpty()) return false;\n\n    LocalChangeList targetList = askTargetList(project, changes);\n\n    if (targetList != null) {\n      ChangeListManagerImpl listManager = ChangeListManagerImpl.getInstanceImpl(project);\n\n      listManager.moveChangesTo(targetList, ArrayUtil.toObjectArray(changes, Change.class));\n      if (!unversionedFiles.isEmpty()) {\n        listManager.addUnversionedFiles(targetList, unversionedFiles);\n      }\n      return true;\n    }\n    return false;\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = e.getData(CommonDataKeys.PROJECT);\n    if (project == null) return;\n    if (! ProjectLevelVcsManager.getInstance(project).hasActiveVcss()) return;\n    Change[] changes = e.getData(VcsDataKeys.CHANGES);\n    List<VirtualFile> unversionedFiles = e.getData(ChangesListView.UNVERSIONED_FILES_DATA_KEY);\n\n    final List<VirtualFile> changedFiles = new ArrayList<VirtualFile>();\n    boolean activateChangesView = false;\n    unversionedFiles = new ArrayList<VirtualFile>();\n    final List<Change> changesList = new ArrayList<Change>();\n    if (changes != null) {\n      changesList.addAll(Arrays.asList(changes));\n    } else {\n      changes = new Change[0];\n    }\n    changesList.addAll(getChangesForSelectedFiles(project, unversionedFiles, changedFiles, e));\n    activateChangesView = true;\n\n    if (changesList.isEmpty() && unversionedFiles.isEmpty()) {\n      VcsBalloonProblemNotifier.showOverChangesView(project, \"Nothing is selected that can be moved\", MessageType.INFO);\n      return;\n    }\n\n    if (!askAndMove(project, changesList, unversionedFiles)) return;\n    if (activateChangesView) {\n      ToolWindow window = ToolWindowManager.getInstance(project).getToolWindow(ChangesViewContentManager.TOOLWINDOW_ID);\n      if (!window.isVisible()) {\n        window.activate(new Runnable() {\n          public void run() {\n            if (changedFiles.size() > 0) {\n              ChangesViewManager.getInstance(project).selectFile(changedFiles.get(0));\n            }\n          }\n        });\n      }\n    }\n  }","id":103776,"modified_method":"public void actionPerformed(@NotNull AnActionEvent e) {\n    Project project = e.getRequiredData(CommonDataKeys.PROJECT);\n    List<Change> changesList = ContainerUtil.newArrayList();\n\n    Change[] changes = e.getData(VcsDataKeys.CHANGES);\n    if (changes != null) {\n      ContainerUtil.addAll(changesList, changes);\n    }\n\n    List<VirtualFile> unversionedFiles = ContainerUtil.newArrayList();\n    final List<VirtualFile> changedFiles = ContainerUtil.newArrayList();\n    VirtualFile[] files = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY);\n    if (files != null) {\n      changesList.addAll(getChangesForSelectedFiles(project, files, unversionedFiles, changedFiles));\n    }\n\n    if (changesList.isEmpty() && unversionedFiles.isEmpty()) {\n      VcsBalloonProblemNotifier.showOverChangesView(project, \"Nothing is selected that can be moved\", MessageType.INFO);\n      return;\n    }\n\n    if (!askAndMove(project, changesList, unversionedFiles)) return;\n    if (!changedFiles.isEmpty()) {\n      selectAndShowFile(project, changedFiles.get(0));\n    }\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent e) {\n    final boolean isEnabled = isEnabled(e);\n    if (ActionPlaces.isPopupPlace(e.getPlace())) {\n      e.getPresentation().setVisible(isEnabled);\n    }\n    else {\n      e.getPresentation().setEnabled(isEnabled);\n    }\n  }","id":103777,"modified_method":"public void update(@NotNull AnActionEvent e) {\n    boolean isEnabled = isEnabled(e);\n\n    if (ActionPlaces.isPopupPlace(e.getPlace())) {\n      e.getPresentation().setEnabledAndVisible(isEnabled);\n    }\n    else {\n      e.getPresentation().setEnabled(isEnabled);\n    }\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static ChangeList guessPreferredList(final List<LocalChangeList> preferredLists) {\n    for (ChangeList preferredList : preferredLists) {\n      if (preferredList.getChanges().isEmpty()) {\n        return preferredList;\n      }\n    }\n\n    if (preferredLists.size() > 0) {\n      return preferredLists.get(0);\n    }\n\n    return null;\n  }","id":103778,"modified_method":"@Nullable\n  private static ChangeList guessPreferredList(@NotNull List<LocalChangeList> lists) {\n    LocalChangeList emptyList = ContainerUtil.find(lists, new Condition<LocalChangeList>() {\n      @Override\n      public boolean value(@NotNull LocalChangeList list) {\n        return list.getChanges().isEmpty();\n      }\n    });\n\n    return ObjectUtils.chooseNotNull(emptyList, ContainerUtil.getFirstItem(lists));\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static List<Change> getChangesForSelectedFiles(final Project project, final List<VirtualFile> unversionedFiles,\n                                                         @Nullable final List<VirtualFile> changedFiles, final AnActionEvent e) {\n    if (ProjectLevelVcsManager.getInstance(project).getAllActiveVcss().length == 0) {\n      return null;\n    }\n\n    final ChangeListManager changeListManager = ChangeListManager.getInstance(project);\n    VirtualFile[] virtualFiles = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY);\n    if (virtualFiles != null) {\n      List<Change> changesInFiles = new ArrayList<Change>();\n      for(VirtualFile vFile: virtualFiles) {\n        Change change = changeListManager.getChange(vFile);\n        if (change == null) {\n          final FileStatus status = changeListManager.getStatus(vFile);\n          if (FileStatus.UNKNOWN.equals(status)) {\n            unversionedFiles.add(vFile);\n            if (changedFiles != null) changedFiles.add(vFile);\n          } else if (FileStatus.NOT_CHANGED.equals(status) && vFile.isDirectory()) {\n            addAllChangesUnderPath(changedFiles, changeListManager, changesInFiles, VcsUtil.getFilePath(vFile));\n          }\n          continue;\n        }\n        if (change.getAfterRevision() != null && change.getAfterRevision().getFile() != null && change.getAfterRevision().getFile().isDirectory()) {\n          final FilePath file = change.getAfterRevision().getFile();\n          addAllChangesUnderPath(changedFiles, changeListManager, changesInFiles, file);\n        } else {\n          changesInFiles.add(change);\n          if (changedFiles != null) {\n            changedFiles.add(vFile);\n          }\n        }\n      }\n      return changesInFiles;\n    }\n    return Collections.emptyList();\n  }","id":103779,"modified_method":"@NotNull\n  private static List<Change> getChangesForSelectedFiles(@NotNull Project project,\n                                                         @NotNull VirtualFile[] selectedFiles,\n                                                         @NotNull List<VirtualFile> unversionedFiles,\n                                                         @NotNull List<VirtualFile> changedFiles) {\n    List<Change> changes = new ArrayList<Change>();\n    ChangeListManager changeListManager = ChangeListManager.getInstance(project);\n\n    for (VirtualFile vFile : selectedFiles) {\n      Change change = changeListManager.getChange(vFile);\n      if (change == null) {\n        FileStatus status = changeListManager.getStatus(vFile);\n        if (FileStatus.UNKNOWN.equals(status)) {\n          unversionedFiles.add(vFile);\n          changedFiles.add(vFile);\n        }\n        else if (FileStatus.NOT_CHANGED.equals(status) && vFile.isDirectory()) {\n          addAllChangesUnderPath(changeListManager, VcsUtil.getFilePath(vFile), changes, changedFiles);\n        }\n      }\n      else {\n        FilePath afterPath = ChangesUtil.getAfterPath(change);\n        if (afterPath != null && afterPath.isDirectory()) {\n          addAllChangesUnderPath(changeListManager, afterPath, changes, changedFiles);\n        }\n        else {\n          changes.add(change);\n          changedFiles.add(vFile);\n        }\n      }\n    }\n    return changes;\n  }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n      Change change = e.getData(VcsDataKeys.CURRENT_CHANGE);\n      askAndMove(myProject, Collections.singletonList(change), null);\n    }","id":103780,"modified_method":"@Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n      Change change = e.getRequiredData(VcsDataKeys.CURRENT_CHANGE);\n      askAndMove(myProject, Collections.singletonList(change), Collections.<VirtualFile>emptyList());\n    }","commit_id":"2d9f3c465e4cb36afa043005328b1e4da4c003c7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  static TemplateContext createTemplateContext(SNode inputNode, @Nullable TemplateContext outerContext, @NotNull ReductionContext reductionContext, ITemplateCall templateCall, SNode newInputNode, ITemplateGenerator generator) {\n    final Expression[] arguments = getArguments(templateCall);\n    final TemplateParameterDeclaration[] parameters = getParameters(templateCall);\n\n    if (arguments == null && parameters == null) {\n      return new DefaultTemplateContext(newInputNode);\n    }\n    if (arguments == null || parameters == null || arguments.length != parameters.length) {\n      generator.showErrorMessage(inputNode, templateCall.getNode(), \"number of arguments doesn't match template\");\n      return new DefaultTemplateContext(newInputNode);\n    }\n\n    final Map<String, Object> vars = new HashMap<String, Object>(arguments.length);\n    for (int i = 0; i < arguments.length; i++) {\n      Expression expr = arguments[i];\n      String name = parameters[i].getName();\n      Object value = null;\n      if (expr instanceof BooleanConstant) {\n        value = ((BooleanConstant) expr).getValue();\n      } else if (expr instanceof IntegerConstant) {\n        value = ((IntegerConstant) expr).getValue();\n      } else if (expr instanceof StringLiteral) {\n        value = ((StringLiteral) expr).getValue();\n      } else if (expr instanceof NullLiteral) {\n        /* ok */\n      } else if (expr instanceof TemplateArgumentParameterExpression && outerContext != null) {\n        TemplateParameterDeclaration parameter = ((TemplateArgumentParameterExpression) expr).getParameter();\n        if (parameter == null) {\n          generator.showErrorMessage(inputNode, expr.getNode(), \"cannot evaluate template argument #\" + (i + 1) + \": invalid parameter reference\");\n        } else {\n          value = outerContext.getVariable(parameter.getName());\n        }\n      } else if (expr instanceof TemplateArgumentPatternRef && outerContext != null) {\n        BaseConcept patternVar = getPatternVariable((TemplateArgumentPatternRef) expr);\n        if (patternVar == null) {\n          generator.showErrorMessage(inputNode, expr.getNode(), \"cannot evaluate template argument #\" + (i + 1) + \": invalid pattern reference\");\n        } else {\n          // TODO FIXME using PatternVarsUtil directly, which is loaded by MPS\n          value = outerContext.getPatternVariable(PatternVarsUtil.getFieldName(patternVar.getNode()));\n        }\n      } else if (expr instanceof TemplateArgumentQueryExpression) {\n        TemplateArgumentQuery query = ((TemplateArgumentQueryExpression) expr).getQuery();\n        value = reductionContext.getQueryExecutor().evaluateArgumentQuery(inputNode, query, outerContext);\n      } else {\n        generator.showErrorMessage(inputNode, templateCall.getNode(), \"cannot evaluate template argument #\" + (i + 1));\n      }\n\n      vars.put(name, value);\n    }\n    return new DefaultTemplateContext(null, vars, newInputNode);\n  }","id":103781,"modified_method":"@NotNull\n  static TemplateContext createTemplateContext(SNode inputNode, @Nullable TemplateContext outerContext, @NotNull ReductionContext reductionContext, ITemplateCall templateCall, SNode newInputNode, ITemplateGenerator generator) {\n    final Expression[] arguments = getArguments(templateCall);\n    final TemplateParameterDeclaration[] parameters = getParameters(templateCall);\n\n    if (arguments == null && parameters == null) {\n      return outerContext != null ? outerContext.subContext(null, newInputNode) : new DefaultTemplateContext(newInputNode);\n    }\n    if (arguments == null || parameters == null || arguments.length != parameters.length) {\n      generator.showErrorMessage(inputNode, templateCall.getNode(), \"number of arguments doesn't match template\");\n      return outerContext != null ? outerContext.subContext(null, newInputNode) : new DefaultTemplateContext(newInputNode);\n    }\n\n    final Map<String, Object> vars = new HashMap<String, Object>(arguments.length);\n    for (int i = 0; i < arguments.length; i++) {\n      Expression expr = arguments[i];\n      String name = parameters[i].getName();\n      Object value = null;\n      if (expr instanceof BooleanConstant) {\n        value = ((BooleanConstant) expr).getValue();\n      } else if (expr instanceof IntegerConstant) {\n        value = ((IntegerConstant) expr).getValue();\n      } else if (expr instanceof StringLiteral) {\n        value = ((StringLiteral) expr).getValue();\n      } else if (expr instanceof NullLiteral) {\n        /* ok */\n      } else if (expr instanceof TemplateArgumentParameterExpression && outerContext != null) {\n        TemplateParameterDeclaration parameter = ((TemplateArgumentParameterExpression) expr).getParameter();\n        if (parameter == null) {\n          generator.showErrorMessage(inputNode, expr.getNode(), \"cannot evaluate template argument #\" + (i + 1) + \": invalid parameter reference\");\n        } else {\n          value = outerContext.getVariable(parameter.getName());\n        }\n      } else if (expr instanceof TemplateArgumentPatternRef && outerContext != null) {\n        BaseConcept patternVar = getPatternVariable((TemplateArgumentPatternRef) expr);\n        if (patternVar == null) {\n          generator.showErrorMessage(inputNode, expr.getNode(), \"cannot evaluate template argument #\" + (i + 1) + \": invalid pattern reference\");\n        } else {\n          // TODO FIXME using PatternVarsUtil directly, which is loaded by MPS\n          value = outerContext.getPatternVariable(PatternVarsUtil.getFieldName(patternVar.getNode()));\n        }\n      } else if (expr instanceof TemplateArgumentQueryExpression) {\n        TemplateArgumentQuery query = ((TemplateArgumentQueryExpression) expr).getQuery();\n        value = reductionContext.getQueryExecutor().evaluateArgumentQuery(inputNode, query, outerContext);\n      } else {\n        generator.showErrorMessage(inputNode, templateCall.getNode(), \"cannot evaluate template argument #\" + (i + 1));\n      }\n\n      vars.put(name, value);\n    }\n    return new DefaultTemplateContext(null, vars, newInputNode);\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"static Object combineRuleSets(Object set1, Object set2) {\n    if (set1 == null)\n      return set2;\n    if (set2 == null)\n      return set1;\n    if (set1 instanceof ReductionRule) {\n      if (set2 instanceof ReductionRule) {\n        Set<Object> set = new HashSet<Object>(2);\n        set.add(set1);\n        set.add(set2);\n        return set;\n      } else {\n        Set<Object> set = new HashSet<Object>(((Set) set2).size() + 1);\n        set.addAll((Set) set2);\n        set.add(set1);\n        return set;\n      }\n    } else {\n      if (set2 instanceof ReductionRule) {\n        Set<Object> set = new HashSet<Object>(((Set) set1).size() + 1);\n        set.addAll((Set) set1);\n        set.add(set2);\n        return set;\n      } else {\n        Set<Object> set = new HashSet<Object>(((Set) set2).size() + ((Set) set1).size());\n        set.addAll((Set) set1);\n        set.addAll((Set) set2);\n        return set;\n      }\n    }\n  }","id":103782,"modified_method":"static Object combineRuleSets(Object set1, Object set2) {\n    if (set1 == null)\n      return set2;\n    if (set2 == null)\n      return set1;\n    if (set1 instanceof TemplateReductionRule) {\n      if (set2 instanceof TemplateReductionRule) {\n        Set<Object> set = new HashSet<Object>(2);\n        set.add(set1);\n        set.add(set2);\n        return set;\n      } else {\n        Set<Object> set = new HashSet<Object>(((Set) set2).size() + 1);\n        set.addAll((Set) set2);\n        set.add(set1);\n        return set;\n      }\n    } else {\n      if (set2 instanceof TemplateReductionRule) {\n        Set<Object> set = new HashSet<Object>(((Set) set1).size() + 1);\n        set.addAll((Set) set1);\n        set.add(set2);\n        return set;\n      } else {\n        Set<Object> set = new HashSet<Object>(((Set) set2).size() + ((Set) set1).size());\n        set.addAll((Set) set1);\n        set.addAll((Set) set2);\n        return set;\n      }\n    }\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  Collection<SNode> tryToReduce(SNode inputNode, String mappingName, @NotNull ReductionContext reductionContext) throws GenerationFailureException, GenerationCanceledException {\n    TemplateReductionRule reductionRule = null;\n    checkGenerationCanceledFast();\n    try {\n      // find rule\n      TemplateReductionRule[] conceptRules = myRuleManager.getRuleFinder().findReductionRules(inputNode);\n      if (conceptRules == null) {\n        return null;\n      }\n      TemplateExecutionEnvironment environment = new TemplateExecutionEnvironmentImpl(this, reductionContext, getOperationContext(), getGenerationTracer());\n      for (TemplateReductionRule rule : conceptRules) {\n        reductionRule = rule;\n        if (!getBlockedReductionsData().isReductionBlocked(inputNode, rule, reductionContext)) {\n          Collection<SNode> outputNodes = reductionContext.getQueryExecutor().tryToApply(rule, environment, new DefaultTemplateContext(inputNode));\n          if (outputNodes != null) {\n            if (outputNodes.size() == 1) {\n              SNode reducedNode = outputNodes.iterator().next();\n              // register copied node\n              getMappings().addOutputNodeByInputNodeAndMappingName(inputNode, mappingName, reducedNode);\n              // output node should be accessible via 'findCopiedNode'\n              getMappings().addCopiedOutputNodeForInputNode(inputNode, reducedNode);\n              // preserve user objects\n              reducedNode.putUserObjects(inputNode);\n              // keep track of 'original input node'\n              if (inputNode.getModel() == getGeneratorSessionContext().getOriginalInputModel()) {\n                reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE, inputNode);\n                reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_DEBUG_NODE, inputNode);\n              }\n            }\n            return outputNodes;\n          }\n        }\n      }\n\n    } catch (DismissTopMappingRuleException ex) {\n      // it's ok, just continue\n      if (ex.isLoggingNeeded() && reductionRule != null) {\n        SNode ruleNode = reductionRule.getRuleNode().getNode();\n        String messageText = \"-- dismissed reduction rule: \" + (ruleNode != null ? ruleNode.getDebugText() : \"unknown\");\n        if (ex.isInfo()) {\n          myLogger.info(ruleNode, messageText);\n        } else if (ex.isWarning()) {\n          myLogger.warning(ruleNode, messageText);\n        } else {\n          myLogger.error(ruleNode, messageText);\n        }\n      }\n    } catch (GenerationException ex) {\n      if (ex instanceof GenerationFailureException) {\n        throw (GenerationFailureException) ex;\n      } else if (ex instanceof GenerationCanceledException) {\n        throw (GenerationCanceledException) ex;\n      }\n      // ignore\n    }\n    return null;\n  }","id":103783,"modified_method":"@Nullable\n  Collection<SNode> tryToReduce(TemplateContext context, TemplateSwitch templateSwitch, String mappingName, @NotNull ReductionContext reductionContext) throws GenerationFailureException, GenerationCanceledException {\n    SNode inputNode = context.getInput();\n    TemplateReductionRule reductionRule = null;\n    checkGenerationCanceledFast();\n    try {\n      // find rule\n      TemplateReductionRule[] conceptRules =\n        templateSwitch != null\n          ? myRuleManager.getRuleFinder(templateSwitch).findReductionRules(inputNode)\n          : myRuleManager.getRuleFinder().findReductionRules(inputNode);\n      if (conceptRules == null) {\n        return null;\n      }\n      TemplateExecutionEnvironment environment = new TemplateExecutionEnvironmentImpl(this, reductionContext, getOperationContext(), getGenerationTracer());\n      for (TemplateReductionRule rule : conceptRules) {\n        reductionRule = rule;\n        if (!getBlockedReductionsData().isReductionBlocked(inputNode, rule, reductionContext)) {\n          Collection<SNode> outputNodes = reductionContext.getQueryExecutor().tryToApply(rule, environment, context);\n          if (outputNodes != null) {\n            if (outputNodes.size() == 1) {\n              SNode reducedNode = outputNodes.iterator().next();\n              // register copied node\n              getMappings().addOutputNodeByInputNodeAndMappingName(inputNode, mappingName, reducedNode);\n              if (templateSwitch == null) {\n                // output node should be accessible via 'findCopiedNode'\n                getMappings().addCopiedOutputNodeForInputNode(inputNode, reducedNode);\n                // preserve user objects\n                reducedNode.putUserObjects(inputNode);\n                // keep track of 'original input node'\n                if (inputNode.getModel() == getGeneratorSessionContext().getOriginalInputModel()) {\n                  reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE, inputNode);\n                  reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_DEBUG_NODE, inputNode);\n                }\n              }\n            }\n            return outputNodes;\n          }\n        }\n      }\n\n    } catch (DismissTopMappingRuleException ex) {\n      // it's ok, just continue\n      if (ex.isLoggingNeeded() && reductionRule != null) {\n        SNode ruleNode = reductionRule.getRuleNode().getNode();\n        String messageText = \"-- dismissed reduction rule: \" + (ruleNode != null ? ruleNode.getDebugText() : \"unknown\");\n        if (ex.isInfo()) {\n          myLogger.info(ruleNode, messageText);\n        } else if (ex.isWarning()) {\n          myLogger.warning(ruleNode, messageText);\n        } else {\n          myLogger.error(ruleNode, messageText);\n        }\n      }\n    } catch (GenerationException ex) {\n      if (ex instanceof GenerationFailureException) {\n        throw (GenerationFailureException) ex;\n      } else if (ex instanceof GenerationCanceledException) {\n        throw (GenerationCanceledException) ex;\n      }\n      // ignore\n    }\n    return null;\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"private SNode copyNodeFromInputNode_internal(@Nullable SNodePointer templateNode, SNode inputNode, ReductionContext reductionContext, boolean[] changed) throws GenerationFailureException, GenerationCanceledException {\n    // no reduction found - do node copying\n    myGenerationTracer.pushCopyOperation();\n    SNode outputNode = new SNode(myOutputModel, inputNode.getConceptFqName(), false);\n    if (inputNode.hasId() && inputNode.isRegistered()) {\n      outputNode.setId(inputNode.getSNodeId());\n    }\n    blockReductionsForCopiedNode(inputNode, outputNode, reductionContext); // prevent infinite applying of the same reduction to the 'same' node.\n\n    if (templateNode != null) {\n      myMappings.addOutputNodeByInputAndTemplateNode(inputNode, templateNode.getNode(), outputNode);\n    }\n    // output node should be accessible via 'findCopiedNode'\n    myMappings.addCopiedOutputNodeForInputNode(inputNode, outputNode);\n\n    outputNode.putProperties(inputNode);\n    outputNode.putUserObjects(inputNode);\n    // keep track of 'original input node'\n    if (inputNode.getModel() == getGeneratorSessionContext().getOriginalInputModel()) {\n      outputNode.putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE, inputNode);\n      outputNode.putUserObject(TemplateQueryContext.ORIGINAL_DEBUG_NODE, inputNode);\n    }\n\n    for (SReference inputReference : inputNode.getReferencesIterable()) {\n      if (inputNode.isRegistered() && (inputReference instanceof DynamicReference || inputReference.isExternal())) {\n        // dynamic & external references don't need validation => replace input model with output\n        SModelReference targetModelReference = inputReference.isExternal() ? inputReference.getTargetSModelReference() : myOutputModel.getSModelReference();\n        if (targetModelReference == null) {\n          myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText() + \" (target model is null)\",\n            GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n            GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n          continue;\n        }\n\n        if (inputReference instanceof StaticReference) {\n          outputNode.addReference(new StaticReference(\n            inputReference.getRole(),\n            outputNode,\n            targetModelReference,\n            inputReference.getTargetNodeId(),\n            inputReference.getResolveInfo()));\n        } else if (inputReference instanceof DynamicReference) {\n          outputNode.addReference(new DynamicReference(\n            inputReference.getRole(),\n            outputNode,\n            targetModelReference,\n            inputReference.getResolveInfo()));\n        } else {\n          myLogger.error(inputNode, \"internal error: can't clone reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText(),\n            new ProblemDescription(inputNode, \" -- was reference class: \" + inputReference.getClass().getName()));\n        }\n        continue;\n      }\n\n      SNode inputTargetNode = inputReference.getTargetNode();\n      if (inputTargetNode == null) {\n        myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText(),\n          GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n          GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n        continue;\n      }\n      if (inputTargetNode.isRegistered() && inputTargetNode.getModel().equals(myInputModel) || myAdditionalInputNodes.containsKey(inputTargetNode)) {\n        ReferenceInfo_CopiedInputNode refInfo = new ReferenceInfo_CopiedInputNode(\n          inputReference.getRole(),\n          outputNode,\n          inputReference.getSourceNode(),\n          inputTargetNode);\n        PostponedReference reference = new PostponedReference(\n          refInfo,\n          this\n        );\n        outputNode.addReference(reference);\n      } else if (inputTargetNode.isRegistered()) {\n        outputNode.setReferent(inputReference.getRole(), inputTargetNode);\n      } else {\n        myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText() + \" (unregistered target node)\",\n          GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n          GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n      }\n    }\n\n    for (SNode inputChildNode : inputNode.getChildrenIterable()) {\n      String childRole = inputChildNode.getRole_();\n      assert childRole != null;\n      myGenerationTracer.pushInputNode(inputChildNode);\n      try {\n        Collection<SNode> outputChildNodes = tryToReduce(inputChildNode, null, reductionContext);\n        if (outputChildNodes != null) {\n          changed[0] = true;\n          for (SNode outputChildNode : outputChildNodes) {\n            // check child\n            RoleValidationStatus status = validateChild(outputNode, childRole, outputChildNode);\n            if (status != null) {\n              status.reportProblem(false, \"\",\n                GeneratorUtil.describe(inputNode, \"input\"),\n                templateNode != null ?\n                  GeneratorUtil.describe(templateNode.getNode(), \"template\") : null);\n            }\n            outputNode.addChild(childRole, outputChildNode);\n          }\n        } else {\n          outputNode.addChild(childRole, copyNodeFromInputNode_internal(null, inputChildNode, reductionContext, changed));\n        }\n      } finally {\n        myGenerationTracer.closeInputNode(inputChildNode);\n      }\n    }\n\n    myGenerationTracer.pushOutputNode(outputNode);\n    return outputNode;\n  }","id":103784,"modified_method":"private SNode copyNodeFromInputNode_internal(@Nullable SNodePointer templateNode, SNode inputNode, ReductionContext reductionContext, boolean[] changed) throws GenerationFailureException, GenerationCanceledException {\n    // no reduction found - do node copying\n    myGenerationTracer.pushCopyOperation();\n    SNode outputNode = new SNode(myOutputModel, inputNode.getConceptFqName(), false);\n    if (inputNode.hasId() && inputNode.isRegistered()) {\n      outputNode.setId(inputNode.getSNodeId());\n    }\n    blockReductionsForCopiedNode(inputNode, outputNode, reductionContext); // prevent infinite applying of the same reduction to the 'same' node.\n\n    if (templateNode != null) {\n      myMappings.addOutputNodeByInputAndTemplateNode(inputNode, templateNode.getNode(), outputNode);\n    }\n    // output node should be accessible via 'findCopiedNode'\n    myMappings.addCopiedOutputNodeForInputNode(inputNode, outputNode);\n\n    outputNode.putProperties(inputNode);\n    outputNode.putUserObjects(inputNode);\n    // keep track of 'original input node'\n    if (inputNode.getModel() == getGeneratorSessionContext().getOriginalInputModel()) {\n      outputNode.putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE, inputNode);\n      outputNode.putUserObject(TemplateQueryContext.ORIGINAL_DEBUG_NODE, inputNode);\n    }\n\n    for (SReference inputReference : inputNode.getReferencesIterable()) {\n      if (inputNode.isRegistered() && (inputReference instanceof DynamicReference || inputReference.isExternal())) {\n        // dynamic & external references don't need validation => replace input model with output\n        SModelReference targetModelReference = inputReference.isExternal() ? inputReference.getTargetSModelReference() : myOutputModel.getSModelReference();\n        if (targetModelReference == null) {\n          myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText() + \" (target model is null)\",\n            GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n            GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n          continue;\n        }\n\n        if (inputReference instanceof StaticReference) {\n          outputNode.addReference(new StaticReference(\n            inputReference.getRole(),\n            outputNode,\n            targetModelReference,\n            inputReference.getTargetNodeId(),\n            inputReference.getResolveInfo()));\n        } else if (inputReference instanceof DynamicReference) {\n          outputNode.addReference(new DynamicReference(\n            inputReference.getRole(),\n            outputNode,\n            targetModelReference,\n            inputReference.getResolveInfo()));\n        } else {\n          myLogger.error(inputNode, \"internal error: can't clone reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText(),\n            new ProblemDescription(inputNode, \" -- was reference class: \" + inputReference.getClass().getName()));\n        }\n        continue;\n      }\n\n      SNode inputTargetNode = inputReference.getTargetNode();\n      if (inputTargetNode == null) {\n        myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText(),\n          GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n          GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n        continue;\n      }\n      if (inputTargetNode.isRegistered() && inputTargetNode.getModel().equals(myInputModel) || myAdditionalInputNodes.containsKey(inputTargetNode)) {\n        ReferenceInfo_CopiedInputNode refInfo = new ReferenceInfo_CopiedInputNode(\n          inputReference.getRole(),\n          outputNode,\n          inputReference.getSourceNode(),\n          inputTargetNode);\n        PostponedReference reference = new PostponedReference(\n          refInfo,\n          this\n        );\n        outputNode.addReference(reference);\n      } else if (inputTargetNode.isRegistered()) {\n        outputNode.setReferent(inputReference.getRole(), inputTargetNode);\n      } else {\n        myLogger.error(templateNode != null ? templateNode.getNode() : inputNode, \"broken reference '\" + inputReference.getRole() + \"' in \" + inputNode.getDebugText() + \" (unregistered target node)\",\n          GeneratorUtil.describeIfExists(inputNode, \"input node\"),\n          GeneratorUtil.describeIfExists(templateNode != null ? templateNode.getNode() : null, \"template\"));\n      }\n    }\n\n    for (SNode inputChildNode : inputNode.getChildrenIterable()) {\n      String childRole = inputChildNode.getRole_();\n      assert childRole != null;\n      myGenerationTracer.pushInputNode(inputChildNode);\n      try {\n        Collection<SNode> outputChildNodes = tryToReduce(new DefaultTemplateContext(inputChildNode), null, null, reductionContext);\n        if (outputChildNodes != null) {\n          changed[0] = true;\n          for (SNode outputChildNode : outputChildNodes) {\n            // check child\n            RoleValidationStatus status = validateChild(outputNode, childRole, outputChildNode);\n            if (status != null) {\n              status.reportProblem(false, \"\",\n                GeneratorUtil.describe(inputNode, \"input\"),\n                templateNode != null ?\n                  GeneratorUtil.describe(templateNode.getNode(), \"template\") : null);\n            }\n            outputNode.addChild(childRole, outputChildNode);\n          }\n        } else {\n          outputNode.addChild(childRole, copyNodeFromInputNode_internal(null, inputChildNode, reductionContext, changed));\n        }\n      } finally {\n        myGenerationTracer.closeInputNode(inputChildNode);\n      }\n    }\n\n    myGenerationTracer.pushOutputNode(outputNode);\n    return outputNode;\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"Collection<SNode> copyNodeFromInputNode(String mappingName, SNodePointer templateNode, SNode inputNode, ReductionContext reductionContext, boolean[] changed) throws GenerationFailureException, GenerationCanceledException {\n    myGenerationTracer.pushInputNode(inputNode);\n    try {\n      Collection<SNode> outputNodes = tryToReduce(inputNode, mappingName, reductionContext);\n      if (outputNodes != null) {\n        changed[0] = true;\n        return outputNodes;\n      }\n\n      SNode copiedNode = copyNodeFromInputNode_internal(templateNode, inputNode, reductionContext, changed);\n      myMappings.addOutputNodeByInputNodeAndMappingName(inputNode, mappingName, copiedNode);\n      return Collections.singletonList(copiedNode);\n    } finally {\n      myGenerationTracer.closeInputNode(inputNode);\n    }\n  }","id":103785,"modified_method":"Collection<SNode> copyNodeFromInputNode(String mappingName, SNodePointer templateNode, SNode inputNode, ReductionContext reductionContext, boolean[] changed) throws GenerationFailureException, GenerationCanceledException {\n    myGenerationTracer.pushInputNode(inputNode);\n    try {\n      Collection<SNode> outputNodes = tryToReduce(new DefaultTemplateContext(inputNode), null, mappingName, reductionContext);\n      if (outputNodes != null) {\n        changed[0] = true;\n        return outputNodes;\n      }\n\n      SNode copiedNode = copyNodeFromInputNode_internal(templateNode, inputNode, reductionContext, changed);\n      myMappings.addOutputNodeByInputNodeAndMappingName(inputNode, mappingName, copiedNode);\n      return Collections.singletonList(copiedNode);\n    } finally {\n      myGenerationTracer.closeInputNode(inputNode);\n    }\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  private List<SNode> createOutputNodesForTemplateNodeWithMacro(NodeMacro nodeMacro, SNode templateNode, @NotNull TemplateContext templateContext, int nodeMacrosToSkip) throws DismissTopMappingRuleException, GenerationFailureException, GenerationCanceledException {\n    IGenerationTracer generationTracer = myGenerator.getGenerationTracer();\n    List<SNode> outputNodes = new ArrayList<SNode>();\n    String mappingName = GeneratorUtil.getMappingName(nodeMacro, null);\n\n    if (nodeMacro instanceof LoopMacro) {\n      // $LOOP$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof CopySrcNodeMacro || nodeMacro instanceof CopySrcListMacro) {\n      // $COPY-SRC$ / $COPY-SRCL$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      SNodePointer templateNodeRef = templateNode == null ? null : new SNodePointer(templateNode);\n      for (SNode newInputNode : newInputNodes) {\n        Collection<SNode> _outputNodes =\n          newInputNode.getModel() == myGenerator.getInputModel() && newInputNode.isRegistered()\n            ? myGenerator.copyNodeFromInputNode(mappingName, templateNodeRef, newInputNode, myReductionContext, new boolean[]{false})\n            : myGenerator.copyNodeFromExternalNode(mappingName, templateNodeRef, newInputNode, myReductionContext);\n        if (_outputNodes != null) {\n          // check node languages : prevent 'input node' query from returning node, which language was not counted when\n          // planning the generation steps.\n          for (SNode outputNode : _outputNodes) {\n            Language outputNodeLang = outputNode.getNodeLanguage();\n            if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(outputNodeLang)) {\n              if (!outputNodeLang.getGenerators().isEmpty()) {\n                myGenerator.getLogger().error(outputNode, \"language of output node is '\" + outputNodeLang.getModuleFqName() + \"' - this language did not show up when computing generation steps!\");\n                myGenerator.getLogger().error(templateContext.getInput(), \" -- was input: \" + templateContext.getInput().getDebugText());\n                myGenerator.getLogger().error(nodeMacro.getNode(), \" -- was template: \" + nodeMacro.getDebugText());\n                myGenerator.getLogger().error(null, \" -- workaround: add the language '\" + outputNodeLang.getModuleFqName() + \"' to list of 'Languages Engaged On Generation' in model '\" + myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName() + \"'\");\n              }\n            }\n          }\n          outputNodes.addAll(_outputNodes);\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof IfMacro) {\n      // $IF$\n      List<SNode> _outputNodes = null;\n      if (myReductionContext.getQueryExecutor().checkConditionForIfMacro(templateContext.getInput(), (IfMacro) nodeMacro, templateContext)) {\n        _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName), nodeMacrosToSkip + 1);\n      } else {\n        // alternative consequence\n        RuleConsequence altConsequence = ((IfMacro) nodeMacro).getAlternativeConsequence();\n        if (altConsequence != null) {\n          try {\n            List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence(altConsequence, templateContext.getInput(), nodeMacro.getNode(), myReductionContext, myGenerator);\n            if (nodeAndMappingNamePairs == null) {\n              myGenerator.showErrorMessage(templateContext.getInput(), null, nodeMacro.getNode(), \"error processing $IF$/alternative\");\n              return null;\n            }\n\n            for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n              SNode altTemplateNode = nodeAndMappingNamePair.o1;\n              String innerMappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : mappingName;\n              List<SNode> __outputNodes = createOutputNodesForExternalTemplateNode(innerMappingName, altTemplateNode, templateContext.subContext(innerMappingName));\n              if (__outputNodes != null) {\n                if (_outputNodes == null) _outputNodes = new ArrayList<SNode>();\n                _outputNodes.addAll(__outputNodes);\n              }\n            }\n          } catch (AbandonRuleInputException e) {\n            // it's ok. just ignore\n          }\n        }\n      }\n      if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n      return outputNodes;\n\n    } else if (nodeMacro instanceof MapSrcNodeMacro || nodeMacro instanceof MapSrcListMacro) {\n      // $MAP-SRC$ or $MAP-SRCL$\n      MapSrcMacro_MapperFunction macro_mapperFunction;\n      if (nodeMacro instanceof MapSrcNodeMacro) {\n        macro_mapperFunction = ((MapSrcNodeMacro) nodeMacro).getMapperFunction();\n      } else {\n        macro_mapperFunction = ((MapSrcListMacro) nodeMacro).getMapperFunction();\n      }\n\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          TemplateContext newcontext = templateContext.subContext(mappingName, newInputNode);\n          if (macro_mapperFunction != null) {\n            SNode childToReplaceLater = SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(), myOutputModel, myGenerator.getScope(), false);\n            generationTracer.pushOutputNodeToReplaceLater(childToReplaceLater);\n            outputNodes.add(childToReplaceLater);\n            // execute the 'mapper' function later\n            myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(\n              nodeMacro, childToReplaceLater, newcontext, myReductionContext);\n          } else {\n            List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, newcontext, nodeMacrosToSkip + 1);\n            if (_outputNodes != null) {\n              outputNodes.addAll(_outputNodes);\n              // do post-processing here (it's not really a post-processing because model is not completed yet - output nodes are not added to parent node).\n              for (SNode outputNode : _outputNodes) {\n                myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroPostProcChange(\n                  nodeMacro, outputNode, newcontext, myReductionContext);\n              }\n            }\n          }\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof SwitchMacro) {\n      // $SWITCH$\n      TemplateSwitch templateSwitch = ((SwitchMacro) nodeMacro).getTemplateSwitch();\n      if (templateSwitch == null) {\n        myGenerator.showErrorMessage(templateContext.getInput(), nodeMacro.getNode(), \"error processing $SWITCH$ - bad TemplateSwitch reference\");\n        return null;\n      }\n\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        GeneratorMessage generatorMessage = templateSwitch.getNullInputMessage();\n        if (generatorMessage != null) {\n          GeneratorUtil.processGeneratorMessage(generatorMessage, templateContext.getInput(), nodeMacro.getNode(), null, myGenerator);\n        }\n        return outputNodes; // skip template\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushSwitch(new SNodePointer(templateSwitch.getNode()));\n      try {\n        List<SNode> _outputNodes = null;\n        RuleConsequence consequenceForCase = myGenerator.getRuleManager().getConsequenceForSwitchCase(newInputNode, templateSwitch, myReductionContext, myGenerator);\n        if (consequenceForCase == null) {\n          // no switch-case found for the inputNode - continue with templateNode under the $switch$\n          _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n\n        } else {\n          List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence(consequenceForCase, newInputNode, nodeMacro.getNode(), myReductionContext, myGenerator);\n          if (nodeAndMappingNamePairs == null) {\n            myGenerator.showErrorMessage(newInputNode, nodeMacro.getNode(), consequenceForCase.getNode(), \"error processing $SWITCH$\");\n            return null;\n          }\n\n          for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n            SNode templateNodeForCase = nodeAndMappingNamePair.o1;\n            String innerMappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : mappingName;\n            List<SNode> __outputNodes = createOutputNodesForExternalTemplateNode(innerMappingName, templateNodeForCase, templateContext.subContext(innerMappingName, newInputNode));\n            if (__outputNodes != null) {\n              if (_outputNodes == null) _outputNodes = new ArrayList<SNode>();\n              _outputNodes.addAll(__outputNodes);\n            }\n          }\n        }\n\n        if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n\n      } catch (AbandonRuleInputException e) {\n        // it's ok. just ignore.\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof IncludeMacro) {\n      // $INCLUDE$\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        return outputNodes; // skip template\n      }\n\n      IncludeMacro includeMacro = (IncludeMacro) nodeMacro;\n      TemplateDeclaration includeTemplate = includeMacro.getIncludeTemplate();\n      if (includeTemplate == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$ : no 'include template'\");\n        return null;\n      }\n\n      final List<TemplateParameterDeclaration> parameterDeclarations = includeTemplate.getParameters();\n      if (parameterDeclarations != null && parameterDeclarations.size() > 0) {\n        for (TemplateParameterDeclaration decl : parameterDeclarations) {\n          String name = decl.getName();\n          if (name != null && !templateContext.hasVariable(name)) {\n            myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$: parameter `\" + name + \"' is missing\");\n          }\n        }\n      }\n/*\n      TemplateFragment fragment = GeneratorUtil.getFragmentFromTemplate(includeTemplate, newInputNode, nodeMacro.getNode(), myGenerator);\n      if (fragment == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$\");\n        return null;\n      }\n*/\n      List<TemplateFragment> fragments = GeneratorUtil.getTemplateFragments(includeTemplate);\n      if (!GeneratorUtil.checkIfOneOrMaryAdjacentFragments(fragments, BaseAdapter.fromAdapter(includeTemplate), newInputNode, nodeMacro.getNode(), myGenerator)) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$\");\n        return null;\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushTemplateNode(new SNodePointer(includeTemplate.getNode()));\n\n      try {\n        for (TemplateFragment fragment : fragments) {\n          SNode templateForInclude = fragment.getParent().getNode();\n          mappingName = GeneratorUtil.getMappingName(fragment, mappingName);\n          List<SNode> _outputNodes = createOutputNodesForExternalTemplateNode(mappingName, templateForInclude, templateContext.subContext(mappingName, newInputNode));\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        }\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n\n      return outputNodes;\n    } else if (nodeMacro instanceof TemplateCallMacro) {\n      // $CALL$\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        return outputNodes; // skip template\n      }\n\n      TemplateCallMacro callMacro = (TemplateCallMacro) nodeMacro;\n      TemplateDeclaration template = callMacro.getTemplate();\n      if (template == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$ : no 'include template'\");\n        return null;\n      }\n\n      TemplateContext newcontext = GeneratorUtil.createTemplateContext(templateContext.getInput(), templateContext, myReductionContext, callMacro, newInputNode, myGenerator);\n\n/*\n      TemplateFragment fragment = GeneratorUtil.getFragmentFromTemplate(template, newInputNode, nodeMacro.getNode(), myGenerator);\n      if (fragment == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$\");\n        return null;\n      }\n*/\n      List<TemplateFragment> fragments = GeneratorUtil.getTemplateFragments(template);\n      if (!GeneratorUtil.checkIfOneOrMaryAdjacentFragments(fragments, BaseAdapter.fromAdapter(template), newInputNode, nodeMacro.getNode(), myGenerator)) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$\");\n        return null;\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushTemplateNode(new SNodePointer(template.getNode()));\n\n      try {\n        for (TemplateFragment fragment : fragments) {\n          SNode templateForInclude = fragment.getParent().getNode();\n          mappingName = GeneratorUtil.getMappingName(fragment, mappingName);\n          List<SNode> _outputNodes = createOutputNodesForExternalTemplateNode(mappingName, templateForInclude, newcontext.subContext(mappingName));\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        }\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n\n      return outputNodes;\n    } else {\n\n      // $$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n    }\n  }","id":103786,"modified_method":"@Nullable\n  private List<SNode> createOutputNodesForTemplateNodeWithMacro(NodeMacro nodeMacro, SNode templateNode, @NotNull TemplateContext templateContext, int nodeMacrosToSkip) throws DismissTopMappingRuleException, GenerationFailureException, GenerationCanceledException {\n    IGenerationTracer generationTracer = myGenerator.getGenerationTracer();\n    List<SNode> outputNodes = new ArrayList<SNode>();\n    String mappingName = GeneratorUtil.getMappingName(nodeMacro, null);\n\n    if (nodeMacro instanceof LoopMacro) {\n      // $LOOP$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof CopySrcNodeMacro || nodeMacro instanceof CopySrcListMacro) {\n      // $COPY-SRC$ / $COPY-SRCL$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      SNodePointer templateNodeRef = templateNode == null ? null : new SNodePointer(templateNode);\n      for (SNode newInputNode : newInputNodes) {\n        Collection<SNode> _outputNodes =\n          newInputNode.getModel() == myGenerator.getInputModel() && newInputNode.isRegistered()\n            ? myGenerator.copyNodeFromInputNode(mappingName, templateNodeRef, newInputNode, myReductionContext, new boolean[]{false})\n            : myGenerator.copyNodeFromExternalNode(mappingName, templateNodeRef, newInputNode, myReductionContext);\n        if (_outputNodes != null) {\n          // check node languages : prevent 'input node' query from returning node, which language was not counted when\n          // planning the generation steps.\n          for (SNode outputNode : _outputNodes) {\n            Language outputNodeLang = outputNode.getNodeLanguage();\n            if (!myGenerator.getGeneratorSessionContext().getGenerationPlan().isCountedLanguage(outputNodeLang)) {\n              if (!outputNodeLang.getGenerators().isEmpty()) {\n                myGenerator.getLogger().error(outputNode, \"language of output node is '\" + outputNodeLang.getModuleFqName() + \"' - this language did not show up when computing generation steps!\");\n                myGenerator.getLogger().error(templateContext.getInput(), \" -- was input: \" + templateContext.getInput().getDebugText());\n                myGenerator.getLogger().error(nodeMacro.getNode(), \" -- was template: \" + nodeMacro.getDebugText());\n                myGenerator.getLogger().error(null, \" -- workaround: add the language '\" + outputNodeLang.getModuleFqName() + \"' to list of 'Languages Engaged On Generation' in model '\" + myGenerator.getGeneratorSessionContext().getOriginalInputModel().getSModelFqName() + \"'\");\n              }\n            }\n          }\n          outputNodes.addAll(_outputNodes);\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof IfMacro) {\n      // $IF$\n      List<SNode> _outputNodes = null;\n      if (myReductionContext.getQueryExecutor().checkConditionForIfMacro(templateContext.getInput(), (IfMacro) nodeMacro, templateContext)) {\n        _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName), nodeMacrosToSkip + 1);\n      } else {\n        // alternative consequence\n        RuleConsequence altConsequence = ((IfMacro) nodeMacro).getAlternativeConsequence();\n        if (altConsequence != null) {\n          try {\n            List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence(altConsequence, templateContext.getInput(), nodeMacro.getNode(), myReductionContext, myGenerator);\n            if (nodeAndMappingNamePairs == null) {\n              myGenerator.showErrorMessage(templateContext.getInput(), null, nodeMacro.getNode(), \"error processing $IF$/alternative\");\n              return null;\n            }\n\n            for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n              SNode altTemplateNode = nodeAndMappingNamePair.o1;\n              String innerMappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : mappingName;\n              List<SNode> __outputNodes = createOutputNodesForExternalTemplateNode(innerMappingName, altTemplateNode, templateContext.subContext(innerMappingName));\n              if (__outputNodes != null) {\n                if (_outputNodes == null) _outputNodes = new ArrayList<SNode>();\n                _outputNodes.addAll(__outputNodes);\n              }\n            }\n          } catch (AbandonRuleInputException e) {\n            // it's ok. just ignore\n          }\n        }\n      }\n      if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n      return outputNodes;\n\n    } else if (nodeMacro instanceof MapSrcNodeMacro || nodeMacro instanceof MapSrcListMacro) {\n      // $MAP-SRC$ or $MAP-SRCL$\n      MapSrcMacro_MapperFunction macro_mapperFunction;\n      if (nodeMacro instanceof MapSrcNodeMacro) {\n        macro_mapperFunction = ((MapSrcNodeMacro) nodeMacro).getMapperFunction();\n      } else {\n        macro_mapperFunction = ((MapSrcListMacro) nodeMacro).getMapperFunction();\n      }\n\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          TemplateContext newcontext = templateContext.subContext(mappingName, newInputNode);\n          if (macro_mapperFunction != null) {\n            SNode childToReplaceLater = SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(), myOutputModel, myGenerator.getScope(), false);\n            generationTracer.pushOutputNodeToReplaceLater(childToReplaceLater);\n            outputNodes.add(childToReplaceLater);\n            // execute the 'mapper' function later\n            myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(\n              nodeMacro, childToReplaceLater, newcontext, myReductionContext);\n          } else {\n            List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, newcontext, nodeMacrosToSkip + 1);\n            if (_outputNodes != null) {\n              outputNodes.addAll(_outputNodes);\n              // do post-processing here (it's not really a post-processing because model is not completed yet - output nodes are not added to parent node).\n              for (SNode outputNode : _outputNodes) {\n                myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroPostProcChange(\n                  nodeMacro, outputNode, newcontext, myReductionContext);\n              }\n            }\n          }\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof SwitchMacro) {\n      // $SWITCH$\n      TemplateSwitch templateSwitch = ((SwitchMacro) nodeMacro).getTemplateSwitch();\n      if (templateSwitch == null) {\n        myGenerator.showErrorMessage(templateContext.getInput(), nodeMacro.getNode(), \"error processing $SWITCH$ - bad TemplateSwitch reference\");\n        return null;\n      }\n\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        GeneratorMessage generatorMessage = templateSwitch.getNullInputMessage();\n        if (generatorMessage != null) {\n          GeneratorUtil.processGeneratorMessage(generatorMessage, templateContext.getInput(), nodeMacro.getNode(), null, myGenerator);\n        }\n        return outputNodes; // skip template\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushSwitch(new SNodePointer(templateSwitch.getNode()));\n      try {\n        Collection<SNode> collection = myGenerator.tryToReduce(templateContext.subContext(mappingName, newInputNode), templateSwitch, mappingName, myReductionContext);\n        if (collection == null) {\n          // try the default case\n          RuleConsequence defaultConsequence = templateSwitch.getDefaultConsequence();\n          if(defaultConsequence == null) {\n            TemplateSwitch current = templateSwitch.getModifiedSwitch();\n            while(current != null && defaultConsequence == null) {\n              defaultConsequence = current.getDefaultConsequence();\n              current = current.getModifiedSwitch();\n            }\n          }\n          if (defaultConsequence != null) {\n            collection = new ArrayList<SNode>();\n            try {\n              List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence(defaultConsequence, newInputNode, nodeMacro.getNode(), myReductionContext, myGenerator);\n              if (nodeAndMappingNamePairs == null) {\n                myGenerator.showErrorMessage(newInputNode, nodeMacro.getNode(), defaultConsequence.getNode(), \"error processing $SWITCH$/default\");\n                return null;\n              }\n\n              for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n                SNode altTemplateNode = nodeAndMappingNamePair.o1;\n                String innerMappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : mappingName;\n                List<SNode> __outputNodes = createOutputNodesForExternalTemplateNode(innerMappingName, altTemplateNode, templateContext.subContext(innerMappingName, newInputNode));\n                if (__outputNodes != null) {\n                  collection.addAll(__outputNodes);\n                }\n              }\n            } catch (AbandonRuleInputException e) {\n              // it's ok. just ignore\n            }\n          } else {\n            // no switch-case found for the inputNode - continue with templateNode under the $switch$\n            collection = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n          }\n        }\n\n        if (collection != null) {\n          outputNodes.addAll(collection);\n        }\n\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n      return outputNodes;\n\n    } else if (nodeMacro instanceof IncludeMacro) {\n      // $INCLUDE$\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        return outputNodes; // skip template\n      }\n\n      IncludeMacro includeMacro = (IncludeMacro) nodeMacro;\n      TemplateDeclaration includeTemplate = includeMacro.getIncludeTemplate();\n      if (includeTemplate == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$ : no 'include template'\");\n        return null;\n      }\n\n      final List<TemplateParameterDeclaration> parameterDeclarations = includeTemplate.getParameters();\n      if (parameterDeclarations != null && parameterDeclarations.size() > 0) {\n        for (TemplateParameterDeclaration decl : parameterDeclarations) {\n          String name = decl.getName();\n          if (name != null && !templateContext.hasVariable(name)) {\n            myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$: parameter `\" + name + \"' is missing\");\n          }\n        }\n      }\n/*\n      TemplateFragment fragment = GeneratorUtil.getFragmentFromTemplate(includeTemplate, newInputNode, nodeMacro.getNode(), myGenerator);\n      if (fragment == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$\");\n        return null;\n      }\n*/\n      List<TemplateFragment> fragments = GeneratorUtil.getTemplateFragments(includeTemplate);\n      if (!GeneratorUtil.checkIfOneOrMaryAdjacentFragments(fragments, BaseAdapter.fromAdapter(includeTemplate), newInputNode, nodeMacro.getNode(), myGenerator)) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $INCLUDE$\");\n        return null;\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushTemplateNode(new SNodePointer(includeTemplate.getNode()));\n\n      try {\n        for (TemplateFragment fragment : fragments) {\n          SNode templateForInclude = fragment.getParent().getNode();\n          mappingName = GeneratorUtil.getMappingName(fragment, mappingName);\n          List<SNode> _outputNodes = createOutputNodesForExternalTemplateNode(mappingName, templateForInclude, templateContext.subContext(mappingName, newInputNode));\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        }\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n\n      return outputNodes;\n    } else if (nodeMacro instanceof TemplateCallMacro) {\n      // $CALL$\n      SNode newInputNode = getNewInputNode(nodeMacro, templateContext);\n      if (newInputNode == null) {\n        return outputNodes; // skip template\n      }\n\n      TemplateCallMacro callMacro = (TemplateCallMacro) nodeMacro;\n      TemplateDeclaration template = callMacro.getTemplate();\n      if (template == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$ : no 'include template'\");\n        return null;\n      }\n\n      TemplateContext newcontext = GeneratorUtil.createTemplateContext(templateContext.getInput(), templateContext, myReductionContext, callMacro, newInputNode, myGenerator);\n\n/*\n      TemplateFragment fragment = GeneratorUtil.getFragmentFromTemplate(template, newInputNode, nodeMacro.getNode(), myGenerator);\n      if (fragment == null) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$\");\n        return null;\n      }\n*/\n      List<TemplateFragment> fragments = GeneratorUtil.getTemplateFragments(template);\n      if (!GeneratorUtil.checkIfOneOrMaryAdjacentFragments(fragments, BaseAdapter.fromAdapter(template), newInputNode, nodeMacro.getNode(), myGenerator)) {\n        myGenerator.showErrorMessage(newInputNode, null, nodeMacro.getNode(), \"error processing $CALL$\");\n        return null;\n      }\n\n      boolean inputChanged = (newInputNode != templateContext.getInput());\n      if (inputChanged) {\n        generationTracer.pushInputNode(newInputNode);\n      }\n      generationTracer.pushTemplateNode(new SNodePointer(template.getNode()));\n\n      try {\n        for (TemplateFragment fragment : fragments) {\n          SNode templateForInclude = fragment.getParent().getNode();\n          mappingName = GeneratorUtil.getMappingName(fragment, mappingName);\n          List<SNode> _outputNodes = createOutputNodesForExternalTemplateNode(mappingName, templateForInclude, newcontext.subContext(mappingName));\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        }\n      } finally {\n        if (inputChanged) {\n          generationTracer.closeInputNode(newInputNode);\n        }\n      }\n\n      return outputNodes;\n    } else {\n\n      // $$\n      List<SNode> newInputNodes = getNewInputNodes(nodeMacro, templateContext);\n      for (SNode newInputNode : newInputNodes) {\n        boolean inputChanged = (newInputNode != templateContext.getInput());\n        if (inputChanged) {\n          generationTracer.pushInputNode(newInputNode);\n        }\n        try {\n          List<SNode> _outputNodes = createOutputNodesForTemplateNode(mappingName, templateNode, templateContext.subContext(mappingName, newInputNode), nodeMacrosToSkip + 1);\n          if (_outputNodes != null) outputNodes.addAll(_outputNodes);\n        } finally {\n          if (inputChanged) {\n            generationTracer.closeInputNode(newInputNode);\n          }\n        }\n      }\n      return outputNodes;\n    }\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  private Collection<SNode> apply(SNode inputNode, @NotNull TemplateExecutionEnvironment environment)\n    throws DismissTopMappingRuleException, AbandonRuleInputException, GenerationFailureException, GenerationCanceledException {\n\n    SNode labelDeclaration = ruleNode.getReferent(BaseMappingRule.LABEL_DECLARATION);\n    String ruleMappingName = labelDeclaration != null ? labelDeclaration.getProperty(MappingLabelDeclaration.NAME) : null;\n    SNode ruleConsequence = ruleNode.getChild(Reduction_MappingRule.RULE_CONSEQUENCE);\n    if (ruleConsequence == null) {\n      environment.getGenerator().showErrorMessage(inputNode, null, ruleNode, \"error processing reduction rule: no rule consequence\");\n      return null;\n    }\n    TemplateContext conseqContext = GeneratorUtil.createTemplateContext(inputNode, null, environment.getReductionContext(), (RuleConsequence) ruleConsequence.getAdapter(), inputNode, environment.getGenerator());\n\n    List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence((RuleConsequence) ruleConsequence.getAdapter(), inputNode, ruleNode, environment.getReductionContext(), environment.getGenerator());\n    if (nodeAndMappingNamePairs == null) {\n      environment.getGenerator().showErrorMessage(inputNode, null, ruleConsequence, \"error processing reduction rule consequence\");\n      return null;\n    }\n\n    List<SNode> result = new ArrayList<SNode>(nodeAndMappingNamePairs.size());\n    TemplateProcessor templateProcessor = new TemplateProcessor(environment.getGenerator(), environment.getReductionContext());\n    for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n      SNode templateNode = nodeAndMappingNamePair.o1;\n      String mappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : ruleMappingName;\n      try {\n        result.addAll(templateProcessor.processTemplateNode(mappingName, templateNode, conseqContext));\n      } catch (DismissTopMappingRuleException e) {\n        throw e;\n      } catch (TemplateProcessingFailureException e) {\n        environment.getGenerator().showErrorMessage(inputNode, templateNode, ruleNode, \"error processing reduction rule\");\n      } catch (GenerationFailureException e) {\n        throw e;\n      } catch (GenerationCanceledException e) {\n        throw e;\n      } catch (Throwable t) {\n        environment.getGenerator().getLogger().handleException(t);\n        environment.getGenerator().showErrorMessage(inputNode, templateNode, ruleNode, \"error processing reduction rule\");\n      }\n    }\n    return result;\n  }","id":103787,"modified_method":"@Nullable\n  private Collection<SNode> apply(TemplateContext context, @NotNull TemplateExecutionEnvironment environment)\n    throws DismissTopMappingRuleException, AbandonRuleInputException, GenerationFailureException, GenerationCanceledException {\n\n    SNode labelDeclaration = ruleNode.getReferent(BaseMappingRule.LABEL_DECLARATION);\n    String ruleMappingName = labelDeclaration != null ? labelDeclaration.getProperty(MappingLabelDeclaration.NAME) : null;\n    SNode ruleConsequence = ruleNode.getChild(Reduction_MappingRule.RULE_CONSEQUENCE);\n    if (ruleConsequence == null) {\n      environment.getGenerator().showErrorMessage(context.getInput(), null, ruleNode, \"error processing reduction rule: no rule consequence\");\n      return null;\n    }\n    TemplateContext conseqContext = GeneratorUtil.createTemplateContext(context.getInput(), context, environment.getReductionContext(), (RuleConsequence) ruleConsequence.getAdapter(), context.getInput(), environment.getGenerator());\n\n    List<Pair<SNode, String>> nodeAndMappingNamePairs = GeneratorUtil.getTemplateNodesFromRuleConsequence((RuleConsequence) ruleConsequence.getAdapter(), context.getInput(), ruleNode, environment.getReductionContext(), environment.getGenerator());\n    if (nodeAndMappingNamePairs == null) {\n      environment.getGenerator().showErrorMessage(context.getInput(), null, ruleConsequence, \"error processing reduction rule consequence\");\n      return null;\n    }\n\n    List<SNode> result = new ArrayList<SNode>(nodeAndMappingNamePairs.size());\n    TemplateProcessor templateProcessor = new TemplateProcessor(environment.getGenerator(), environment.getReductionContext());\n    for (Pair<SNode, String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {\n      SNode templateNode = nodeAndMappingNamePair.o1;\n      String mappingName = nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : ruleMappingName;\n      try {\n        result.addAll(templateProcessor.processTemplateNode(mappingName, templateNode, conseqContext));\n      } catch (DismissTopMappingRuleException e) {\n        throw e;\n      } catch (TemplateProcessingFailureException e) {\n        environment.getGenerator().showErrorMessage(context.getInput(), templateNode, ruleNode, \"error processing reduction rule\");\n      } catch (GenerationFailureException e) {\n        throw e;\n      } catch (GenerationCanceledException e) {\n        throw e;\n      } catch (Throwable t) {\n        environment.getGenerator().getLogger().handleException(t);\n        environment.getGenerator().showErrorMessage(context.getInput(), templateNode, ruleNode, \"error processing reduction rule\");\n      }\n    }\n    return result;\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public Collection<SNode> tryToApply(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {\n    if (!checkCondition(ruleNode.getChild(BaseMappingRule.CONDITION_FUNCTION), false, context.getInput(), environment.getGenerator())) {\n      return null;\n    }\n\n    SNodePointer ruleNodeId = new SNodePointer(ruleNode);\n    environment.getTracer().pushRule(ruleNodeId);\n    try {\n      return apply(context.getInput(), environment.getEnvironment(context.getInput(), this));\n    } catch (AbandonRuleInputException e) {\n      return Collections.emptyList();\n    } finally {\n      environment.getTracer().closeRule(ruleNodeId);\n    }\n  }","id":103788,"modified_method":"@Override\n  public Collection<SNode> tryToApply(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {\n    if (!checkCondition(ruleNode.getChild(BaseMappingRule.CONDITION_FUNCTION), false, context.getInput(), environment.getGenerator())) {\n      return null;\n    }\n\n    SNodePointer ruleNodeId = new SNodePointer(ruleNode);\n    environment.getTracer().pushRule(ruleNodeId);\n    try {\n      return apply(context, environment.getEnvironment(context.getInput(), this));\n    } catch (AbandonRuleInputException e) {\n      return Collections.emptyList();\n    } finally {\n      environment.getTracer().closeRule(ruleNodeId);\n    }\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"public TemplateSwitchGraph(List<SModelDescriptor> templateModels) {\n    for (SModelDescriptor templateModel : templateModels) {\n      for (SNode root : templateModel.getSModel().roots()) {\n        if (!(root.getAdapter() instanceof TemplateSwitch)) continue;\n\n        TemplateSwitch adapter = (TemplateSwitch) root.getAdapter();\n        mySwitchToNode.put(adapter, new Node(adapter));\n      }\n    }\n    for (Node node : mySwitchToNode.values()) {\n      TemplateSwitch modifiedSwitch = node.mySwitch.getModifiedSwitch();\n      if(modifiedSwitch != null) {\n        node.myModified = mySwitchToNode.get(modifiedSwitch);\n      }\n      if(node.myModified == null) {\n        node.myRules = new LinkedList<TemplateSwitch>();\n      }\n    }\n    for (Node node : mySwitchToNode.values()) {\n      Node bottom = node;\n      int i = 256;\n      while(bottom.myModified != null && --i > 0) {\n        bottom = bottom.myModified;\n      }\n      if(node != bottom) {\n        node.myModified = bottom;\n        if(i == 0) {\n          throw new RuntimeException(\"Template switch loop in: \" + node);     // TODO handle correctly\n        }\n      }\n      bottom.myRules.add(node.mySwitch);\n    }\n  }","id":103789,"modified_method":"public TemplateSwitchGraph(List<SModelDescriptor> templateModels) {\n    for (SModelDescriptor templateModel : templateModels) {\n      for (SNode root : templateModel.getSModel().roots()) {\n        if (!(root.getAdapter() instanceof TemplateSwitch)) continue;\n\n        TemplateSwitch adapter = (TemplateSwitch) root.getAdapter();\n        mySwitchToNode.put(adapter, new Node(adapter));\n      }\n    }\n    for (Node node : mySwitchToNode.values()) {\n      TemplateSwitch modifiedSwitch = node.mySwitch.getModifiedSwitch();\n      if(modifiedSwitch != null) {\n        node.myModified = mySwitchToNode.get(modifiedSwitch);\n      }\n      if(node.myModified == null) {\n        node.myRules = new LinkedList<TemplateSwitch>();\n      }\n    }\n    for (Node node : mySwitchToNode.values()) {\n      Node bottom = node;\n      int i = 256;\n      while(bottom.myModified != null && --i > 0) {\n        bottom = bottom.myModified;\n      }\n      if(node != bottom) {\n        node.myModified = bottom;\n        if(i == 0) {\n          throw new RuntimeException(\"Template switch loop in: \" + node);     // TODO handle correctly\n        }\n      }\n      bottom.myRules.add(node.mySwitch);\n    }\n    for (Node node : mySwitchToNode.values()) {\n      if(node.myModified == null) {\n        node.createFinder();\n      }\n    }\n  }","commit_id":"d552b2763039dc12a84b14bcc60897cfae6b2aef","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n         * Update an existing cached security rule entry with parents groups if it does not have any already.\n         *\n         * @param groups the groups to be added to this entry, if null or empty nothing will be done.\n         * @throws ParentEntryEvictedException if one of the groups has been evicted from the cache.\n         */\n        void updateParentGroups(Collection<GroupSecurityReference> groups)\n            throws ParentEntryEvictedException\n        {\n            if (groups == null || groups.isEmpty() || !(entry instanceof SecurityRuleEntry)) {\n                // No group or not an appropriate entry, do nothing.\n                return;\n            }\n\n            if (this.parents == null) {\n                this.parents = new ArrayList<SecurityCacheEntry>(groups.size());\n                addParentGroups(groups, null);\n            } else if (this.parents.size() == 1) {\n                SecurityCacheEntry parent = this.parents.iterator().next();\n                this.parents = new ArrayList<SecurityCacheEntry>(groups.size() + 1);\n                this.parents.add(parent);\n                addParentGroups(groups, parent.entry.getReference());\n            }\n        }","id":103790,"modified_method":"/**\n         * Update an existing cached security rule entry with parents groups if it does not have any already.\n         *\n         * @param groups the groups to be added to this entry, if null or empty nothing will be done.\n         * @throws ParentEntryEvictedException if one of the groups has been evicted from the cache.\n         */\n        void updateParentGroups(Collection<GroupSecurityReference> groups)\n            throws ParentEntryEvictedException\n        {            \n            if (isUser || !(entry instanceof SecurityRuleEntry)) {\n                return;\n            }\n\n            // Since we have parent groups, the entry is a user and her ancestry is fully loaded.\n            isUser = true;\n            \n            if (groups == null || groups.isEmpty()) {\n                // No group or not an appropriate entry, do nothing.\n                return;\n            }\n\n            if (this.parents == null) {\n                this.parents = new ArrayList<SecurityCacheEntry>(groups.size());\n                addParentGroups(groups, null);\n            } else {\n                SecurityCacheEntry parent = this.parents.iterator().next();\n                this.parents = new ArrayList<SecurityCacheEntry>(groups.size() + 1);\n                this.parents.add(parent);\n                addParentGroups(groups, parent.entry.getReference());\n            }\n        }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n         * Create a new cache entry for a user rule entry, linking it to its parent and to all provided groups.\n         * @param entry the security rule entry to cache.\n         * @param groups the list of groups to link this entry to.\n         * @param parentReference the reference to the parent to link to.\n         * @throws ParentEntryEvictedException if the parents required are no more available in the cache.\n         */\n        private SecurityCacheEntry(SecurityEntry entry, Collection<GroupSecurityReference> groups,\n            SecurityReference parentReference)\n            throws ParentEntryEvictedException\n        {\n            this.entry = entry;\n            int parentSize = groups.size() + ((parentReference == null) ? 0 : 1);\n            if (parentSize > 0) {\n                this.parents = new ArrayList<SecurityCacheEntry>(parentSize);\n                if (parentReference != null) {\n                    SecurityCacheEntry parent = DefaultSecurityCache.this.getEntry(parentReference);\n                    if (parent == null) {\n                        throw new ParentEntryEvictedException();\n                    }\n                    this.parents.add(parent);\n                    parent.addChild(this);\n                }\n                addParentGroups(groups, parentReference);\n                logNewEntry();\n            } else {\n                this.parents = null;\n                logNewEntry();\n            }\n        }","id":103791,"modified_method":"/**\n         * Create a new cache entry for a user rule entry, linking it to its parent and to all provided groups.\n         * @param entry the security rule entry to cache.\n         * @param groups the list of groups to link this entry to.\n         * @param parentReference the reference to the parent to link to.\n         * @throws ParentEntryEvictedException if the parents required are no more available in the cache.\n         */\n        private SecurityCacheEntry(SecurityEntry entry, Collection<GroupSecurityReference> groups,\n            SecurityReference parentReference)\n            throws ParentEntryEvictedException\n        {\n            this.entry = entry;\n            this.isUser = true;\n            int parentSize = groups.size() + ((parentReference == null) ? 0 : 1);\n            if (parentSize > 0) {\n                this.parents = new ArrayList<SecurityCacheEntry>(parentSize);\n                if (parentReference != null) {\n                    SecurityCacheEntry parent = DefaultSecurityCache.this.getEntry(parentReference);\n                    if (parent == null) {\n                        throw new ParentEntryEvictedException();\n                    }\n                    this.parents.add(parent);\n                    parent.addChild(this);\n                }\n                addParentGroups(groups, parentReference);\n                logNewEntry();\n            } else {\n                this.parents = null;\n                logNewEntry();\n            }\n        }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Construct a security cache entry for the given arguments.\n     * @param entry the rule or shadow entry\n     * @param groups Local groups references that this user/group is a member.\n     * @return the created security cache entry\n     * @exception ParentEntryEvictedException when the parent entry of\n     * this entry was evicted before this insertion.  Since all\n     * entries, except wiki-entries, must have a parent cached, the\n     * {@link org.xwiki.security.authorization.cache.SecurityCacheLoader} must restart its load attempt.\n     * @throws ConflictingInsertionException when another thread have\n     * inserted this entry, but with a different content.\n     */\n    private SecurityCacheEntry newSecurityCacheEntry(SecurityEntry entry, Collection<GroupSecurityReference> groups)\n        throws ConflictingInsertionException, ParentEntryEvictedException\n    {\n        if (entry instanceof SecurityRuleEntry) {\n            return (groups == null || groups.isEmpty())\n                ? new SecurityCacheEntry((SecurityRuleEntry) entry)\n                : new SecurityCacheEntry((SecurityRuleEntry) entry, groups);\n        } else {\n            return (groups == null || groups.isEmpty())\n                ? new SecurityCacheEntry((SecurityShadowEntry) entry)\n                : new SecurityCacheEntry((SecurityShadowEntry) entry, groups);\n        }\n    }","id":103792,"modified_method":"/**\n     * Construct a security cache entry for the given arguments.\n     * @param entry the rule or shadow entry\n     * @param groups Local groups references that this user/group is a member.\n     * @return the created security cache entry\n     * @exception ParentEntryEvictedException when the parent entry of\n     * this entry was evicted before this insertion.  Since all\n     * entries, except wiki-entries, must have a parent cached, the\n     * {@link org.xwiki.security.authorization.cache.SecurityCacheLoader} must restart its load attempt.\n     * @throws ConflictingInsertionException when another thread have\n     * inserted this entry, but with a different content.\n     */\n    private SecurityCacheEntry newSecurityCacheEntry(SecurityEntry entry, Collection<GroupSecurityReference> groups)\n        throws ConflictingInsertionException, ParentEntryEvictedException\n    {\n        if (entry instanceof SecurityRuleEntry) {\n            return (groups == null)\n                ? new SecurityCacheEntry((SecurityRuleEntry) entry)\n                : new SecurityCacheEntry((SecurityRuleEntry) entry, groups);\n        } else {\n            return (groups == null)\n                ? new SecurityCacheEntry((SecurityShadowEntry) entry)\n                : new SecurityCacheEntry((SecurityShadowEntry) entry, groups);\n        }\n    }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Load user/group entry in the cache as needed, load related group entries and return the list of all groups\n     * associated with the given user/group in both the user wiki and the given entity wiki. Groups containing\n     * (recursively) groups containing the user/group are also listed.\n     *\n     * @param user The user/group to load.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user/group provided above.\n     * @param entityWiki Only for global user, the wiki of the entity currently evaluated if it differ from the user\n     * wiki, null otherwise. Local group information of the entity wiki will be evaluated for the user/group to load\n     * and a shadow user will be made available in that wiki to support access entries.\n     * @return A collection of groups associated to the requested user/group (both user wiki and entity wiki)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private Collection<GroupSecurityReference> loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        Collection<GroupSecurityReference> groups = new HashSet<GroupSecurityReference>();\n\n        // Load the user and related groups into the cache\n        Collection<GroupSecurityReference> globalGroups = new HashSet<GroupSecurityReference>();\n        loadUserEntry(user, userWiki, null, globalGroups);\n        groups.addAll(globalGroups);\n        if (entityWiki != null) {\n            // Entity is in a local wiki for a global user\n            Collection<GroupSecurityReference> localGroups;\n            // Load shadows of user's global group into the cache\n            for (GroupSecurityReference group : globalGroups) {\n                localGroups = new HashSet<GroupSecurityReference>();\n                loadUserEntry(group, userWiki, entityWiki, localGroups);\n                groups.addAll(localGroups);\n            }\n            // Load shadow of the user into the cache\n            localGroups = new HashSet<GroupSecurityReference>();\n            loadUserEntry(user, userWiki, entityWiki, localGroups);\n            groups.addAll(localGroups);\n        }\n\n        // Returns all collected groups for access evaluation\n        return groups;\n    }","id":103793,"modified_method":"/**\n     * Load user/group entry in the cache as needed, load related group entries and return the list of all groups\n     * associated with the given user/group in both the user wiki and the given entity wiki. Groups containing\n     * (recursively) groups containing the user/group are also listed.\n     *\n     * @param user The user/group to load.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user/group provided above.\n     * @param entityWiki Only for global user, the wiki of the entity currently evaluated if it differ from the user\n     * wiki, null otherwise. Local group information of the entity wiki will be evaluated for the user/group to load\n     * and a shadow user will be made available in that wiki to support access entries.\n     * @return A collection of groups associated to the requested user/group (both user wiki and entity wiki)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private Collection<GroupSecurityReference> loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // First, we try to get the groups of the user from the cache\n        Collection<GroupSecurityReference> groups = securityCache.getGroupsFor(user, entityWiki); \n        if (groups != null) {\n            // Since we have then in the cache, it means that the entry is already loaded\n            return groups;\n        }\n        \n        // Otherwise we have to load the entry\n        groups = new HashSet<>();\n        \n        // If the user is global and we are looking for rules inside a subwiki\n        if (entityWiki != null) {\n            // Optim: We know we will have to load at least the rules concerning the local groups of the user, but we \n            // can try to get the global groups of that user, meaning that we would not have to load the rules\n            // concerning them via the bridge.\n            Collection<GroupSecurityReference> globalGroups = securityCache.getGroupsFor(user, null);\n            if (globalGroups == null) {\n                // No luck, the cache has no information about the global groups, so we will load them too\n                globalGroups = new HashSet<>();\n                loadUserEntry(user, userWiki, null, globalGroups);\n            }\n            groups.addAll(globalGroups);\n\n            // Now we load the rules concerning the shadows of the global groups in the subwiki\n            for (GroupSecurityReference group : globalGroups) {\n                Collection<GroupSecurityReference> localGroups = new HashSet<>();\n                loadUserEntry(group, userWiki, entityWiki, localGroups);\n                groups.addAll(localGroups);\n            }\n            \n            // And finally we load the rules concerning the shadow of the user\n            Collection<GroupSecurityReference> localGroups = new HashSet<>();\n            loadUserEntry(user, userWiki, entityWiki, localGroups);\n            groups.addAll(localGroups);\n            \n        } else {\n            // We have to load the rules concerning the groups of the user inside the wiki of that user\n            Collection<GroupSecurityReference> localGroups = new HashSet<>();\n            loadUserEntry(user, userWiki, null, localGroups);\n            groups.addAll(localGroups);\n        }\n\n        // Returns all collected groups for access evaluation\n        return groups;\n    }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Load a user/group entry in the cache as need, load related group entries, in the context of a single wiki.\n     *\n     * @param user The user/group to be loaded.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user provided above.\n     * @param entityWiki Only for global user, the wiki to be evaluated, null otherwise to evaluate the user wiki.\n     * @param allGroups For the initial call, this collection should normally be empty, and will receive all the\n     *                  group associated with the given user (either directly or indirectly).\n     *                  (During recursive calls, it contains the result so far, and allow limiting the recursion.)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private void loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki, Collection<GroupSecurityReference> allGroups)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // Retrieve the list of immediate group for the user/group in either the entity wiki or the user/group wiki\n        Collection<GroupSecurityReference> groups = (entityWiki != null)\n            ? userBridge.getAllGroupsFor(user, entityWiki.getOriginalWikiReference())\n            : userBridge.getAllGroupsFor(user, userWiki.getOriginalWikiReference());\n\n        Collection<GroupSecurityReference> userGroups = new ArrayList<GroupSecurityReference>();\n\n        // Loads all immediate groups recursively, collecting indirect groups along the way\n        for (GroupSecurityReference group : groups) {\n            if (allGroups.add(group)) {\n                // Call in recursion only if the group has never been seen before, avoid infinite recursion\n                loadUserEntry(group, (entityWiki != null) ? entityWiki : userWiki, null, allGroups);\n                userGroups.add(group);\n            }\n        }\n\n        // Store the user/group in the cache\n        if (entityWiki != null) {\n            // Store a shadow entry for a global user/group involved in a local wiki\n            securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), userGroups);\n        } else {\n            SecurityRuleEntry entry = securityCache.get(user);\n            if (entry == null) {\n                // If not yet in the cache, retrieve associated rules store the user/group in the cache\n                loadUserEntry(user, userGroups);\n            } else {\n                // Else, ensure that the entry has all the groups appropriately linked to it in the cache\n                securityCache.add(entry, userGroups);\n            }\n        }\n    }","id":103794,"modified_method":"/**\n     * Load a user/group entry in the cache as need, load related group entries, in the context of a single wiki.\n     *\n     * @param user The user/group to be loaded.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user provided above.\n     * @param entityWiki Only for global user, the wiki to be evaluated, null otherwise to evaluate the user wiki.\n     * @param allGroups For the initial call, this collection should normally be empty, and will receive all the\n     *                  group associated with the given user (either directly or indirectly).\n     *                  (During recursive calls, it contains the result so far, and allow limiting the recursion.)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private void loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki, Collection<GroupSecurityReference> allGroups)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // Retrieve the list of immediate group for the user/group in either the entity wiki or the user/group wiki\n        Collection<GroupSecurityReference> groups = (entityWiki != null)\n            ? userBridge.getAllGroupsFor(user, entityWiki.getOriginalWikiReference())\n            : userBridge.getAllGroupsFor(user, userWiki.getOriginalWikiReference());\n\n        Collection<GroupSecurityReference> userGroups = new ArrayList<GroupSecurityReference>();\n\n        // Loads all immediate groups recursively, collecting indirect groups along the way\n        for (GroupSecurityReference group : groups) {\n            // Loads the group only if it has never been seen before, avoid infinite recursion\n            if (allGroups.add(group)) {\n                Collection<GroupSecurityReference> groupsOfGroup = securityCache.getGroupsFor(group, entityWiki);\n                // But we load the groups only if they are not in the cache\n                if (groupsOfGroup == null) {\n                    loadUserEntry(group, (entityWiki != null) ? entityWiki : userWiki, null, allGroups);\n                } else {\n                    allGroups.addAll(groupsOfGroup);\n                }\n                \n                // Do not forget to add this group into the list of user's groups\n                userGroups.add(group);\n            }\n        }\n\n        // Store the user/group in the cache\n        if (entityWiki != null) {\n            // Store a shadow entry for a global user/group involved in a local wiki\n            securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), userGroups);\n        } else {\n            SecurityRuleEntry entry = securityCache.get(user);\n            if (entry == null) {\n                // If not yet in the cache, retrieve associated rules store the user/group in the cache\n                loadUserEntry(user, userGroups);\n            } else {\n                // Else, ensure that the entry has all the groups appropriately linked to it in the cache\n                securityCache.add(entry, userGroups);\n            }\n        }\n    }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void loadWithConflictingInsertionException() throws Exception\n    {\n        DocumentReference userReference = new DocumentReference(\"wiki\", \"Users\", \"mflorea\");\n        UserSecurityReference user = securityReferenceFactory.newUserReference(userReference);\n\n        DocumentReference documentReference = new DocumentReference(\"wiki\", \"Space\", \"Document\");\n        SecurityReference entity = securityReferenceFactory.newEntityReference(documentReference);\n\n        SecurityRuleEntry documentEntry = mock(SecurityRuleEntry.class, \"document\");\n        when(documentEntry.getReference()).thenReturn(entity);\n        when(documentEntry.isEmpty()).thenReturn(true);\n\n        SecurityRuleEntry spaceEntry = mock(SecurityRuleEntry.class, \"space\");\n        when(spaceEntry.getReference()).thenReturn(entity.getParentSecurityReference());\n        when(spaceEntry.isEmpty()).thenReturn(true);\n\n        SecurityRuleEntry wikiEntry = mock(SecurityRuleEntry.class, \"wiki\");\n        when(wikiEntry.getReference()).thenReturn(entity.getParentSecurityReference().getParentSecurityReference());\n        when(wikiEntry.isEmpty()).thenReturn(true);\n\n        SecurityCache securityCache = mocker.getInstance(SecurityCache.class);\n        when(securityCache.get(entity)).thenReturn(documentEntry);\n        when(securityCache.get(entity.getParentSecurityReference())).thenReturn(spaceEntry);\n        when(securityCache.get(entity.getParentSecurityReference().getParentSecurityReference())).thenReturn(wikiEntry);\n\n        UserBridge userBridge = mocker.getInstance(UserBridge.class);\n        DocumentReference groupReference = new DocumentReference(\"wiki\", \"Groups\", \"AllGroup\");\n        Set<GroupSecurityReference> groups =\n            Collections.singleton(securityReferenceFactory.newGroupReference(groupReference));\n        when(userBridge.getAllGroupsFor(user, userReference.getWikiReference())).thenReturn(groups);\n\n        SecurityAccessEntry securityAccessEntry = mock(SecurityAccessEntry.class);\n\n        AuthorizationSettler authorizationSettler = mocker.getInstance(AuthorizationSettler.class);\n        Deque<SecurityRuleEntry> securityRuleEntries =\n            new LinkedList<SecurityRuleEntry>(Arrays.asList(documentEntry, spaceEntry, wikiEntry));\n        when(authorizationSettler.settle(user, groups, securityRuleEntries)).thenReturn(securityAccessEntry);\n\n        doThrow(ConflictingInsertionException.class).when(securityCache).add(securityAccessEntry);\n        doThrow(ConflictingInsertionException.class).when(securityCache).add(securityAccessEntry, null);\n\n        try {\n            securityCacheLoader.load(user, entity);\n            Assert.fail();\n        } catch (AuthorizationException e) {\n            Assert.assertEquals(\"Failed to load the cache in 5 attempts.  Giving up. when checking  \"\n                + \"access to [wiki:Space.Document] for user [wiki:Users.mflorea]\", e.getMessage());\n        }\n    }","id":103795,"modified_method":"@Test\n    public void loadWithConflictingInsertionException() throws Exception\n    {\n        DocumentReference userReference = new DocumentReference(\"wiki\", \"Users\", \"mflorea\");\n        UserSecurityReference user = securityReferenceFactory.newUserReference(userReference);\n\n        DocumentReference documentReference = new DocumentReference(\"wiki\", \"Space\", \"Document\");\n        SecurityReference entity = securityReferenceFactory.newEntityReference(documentReference);\n\n        SecurityRuleEntry documentEntry = mock(SecurityRuleEntry.class, \"document\");\n        when(documentEntry.getReference()).thenReturn(entity);\n        when(documentEntry.isEmpty()).thenReturn(true);\n\n        SecurityRuleEntry spaceEntry = mock(SecurityRuleEntry.class, \"space\");\n        when(spaceEntry.getReference()).thenReturn(entity.getParentSecurityReference());\n        when(spaceEntry.isEmpty()).thenReturn(true);\n\n        SecurityRuleEntry wikiEntry = mock(SecurityRuleEntry.class, \"wiki\");\n        when(wikiEntry.getReference()).thenReturn(entity.getParentSecurityReference().getParentSecurityReference());\n        when(wikiEntry.isEmpty()).thenReturn(true);\n\n        SecurityCache securityCache = mocker.getInstance(SecurityCache.class);\n        when(securityCache.get(entity)).thenReturn(documentEntry);\n        when(securityCache.get(entity.getParentSecurityReference())).thenReturn(spaceEntry);\n        when(securityCache.get(entity.getParentSecurityReference().getParentSecurityReference())).thenReturn(wikiEntry);\n\n        DocumentReference groupReference = new DocumentReference(\"wiki\", \"Groups\", \"AllGroup\");\n        Set<GroupSecurityReference> groups =\n            Collections.singleton(securityReferenceFactory.newGroupReference(groupReference));\n        when(securityCache.getGroupsFor(user, null)).thenReturn(groups);\n\n        SecurityAccessEntry securityAccessEntry = mock(SecurityAccessEntry.class);\n\n        AuthorizationSettler authorizationSettler = mocker.getInstance(AuthorizationSettler.class);\n        Deque<SecurityRuleEntry> securityRuleEntries =\n            new LinkedList<SecurityRuleEntry>(Arrays.asList(documentEntry, spaceEntry, wikiEntry));\n        when(authorizationSettler.settle(user, groups, securityRuleEntries)).thenReturn(securityAccessEntry);\n\n        doThrow(ConflictingInsertionException.class).when(securityCache).add(securityAccessEntry);\n        doThrow(ConflictingInsertionException.class).when(securityCache).add(securityAccessEntry, null);\n\n        try {\n            securityCacheLoader.load(user, entity);\n            Assert.fail();\n        } catch (AuthorizationException e) {\n            Assert.assertEquals(\"Failed to load the cache in 5 attempts.  Giving up. when checking  \"\n                + \"access to [wiki:Space.Document] for user [wiki:Users.mflorea]\", e.getMessage());\n        }\n    }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Get all groups in a given wiki where a given user or group is a member of.\n     * @param wiki the wiki to search groups containing the user/group\n     * @param userOrGroupDocumentReference the user/group document reference\n     * @return the list of group where the user/group is a member\n     * @throws AuthorizationException when an issue arise during retrieval.\n     */\n    private Collection<DocumentReference> getGroupsReferencesFor(WikiReference wiki,\n        DocumentReference userOrGroupDocumentReference) throws AuthorizationException\n    {\n        XWikiContext xwikiContext = getXWikiContext();\n        XWikiGroupService groupService;\n        try {\n            groupService = xwikiContext.getWiki().getGroupService(xwikiContext);\n        } catch (Exception e) {\n            throw new AuthorizationException(\"Failed to access the group service.\",  e);\n        }\n\n        String currentWiki = xwikiContext.getWikiId();\n        try {\n            xwikiContext.setWikiId(wiki.getName());\n            return groupService.getAllGroupsReferencesForMember(userOrGroupDocumentReference, 0, 0, xwikiContext);\n        } catch (Exception e) {\n            throw new AuthorizationException(String.format(\"Failed to get groups for user or group [%s] in wiki [%s]\",\n                userOrGroupDocumentReference, wiki), e);\n        } finally {\n            xwikiContext.setWikiId(currentWiki);\n        }\n    }","id":103796,"modified_method":"/**\n     * Get all groups in a given wiki where a given user or group is a member of.\n     *\n     * @param wiki the wiki to search groups containing the user/group\n     * @param userOrGroupDocumentReference the user/group document reference\n     * @return the list of group where the user/group is a member\n     * @throws AuthorizationException when an issue arise during retrieval.\n     */\n    private Collection<DocumentReference> getGroupsReferencesFor(WikiReference wiki,\n        DocumentReference userOrGroupDocumentReference) throws AuthorizationException\n    {\n        XWikiContext xwikiContext = getXWikiContext();\n        XWikiGroupService groupService;\n        try {\n            groupService = xwikiContext.getWiki().getGroupService(xwikiContext);\n        } catch (Exception e) {\n            throw new AuthorizationException(\"Failed to access the group service.\",  e);\n        }\n\n        String currentWiki = xwikiContext.getWikiId();\n        Collection<DocumentReference> groupReferences = new HashSet<>();\n        try {\n            xwikiContext.setWikiId(wiki.getName());            \n            // We get the groups of the member via the group service but we make sure to not use the group service's\n            // cache by calling the method with a limit and an offset.\n            //\n            // We do not use the group service's cache because it might not have been refreshed yet (for example, it can\n            // happen when the security module is used inside a listener that reacts to the \"SaveDocument\" event just \n            // before the XWikiGroupService listener is called). Because of this race condition, it is not a good idea\n            // to have a cache depending on an other cache.\n            //\n            // TODO: use a proper component to retrieve the groups of a member without any cache\n            final int nb = 100;\n            int i = 0;\n            while (groupReferences.addAll(groupService.getAllGroupsReferencesForMember(userOrGroupDocumentReference,\n                nb, i * nb, xwikiContext))) {\n                i++;\n            }            \n            return groupReferences;\n        } catch (Exception e) {\n            throw new AuthorizationException(String.format(\"Failed to get groups for user or group [%s] in wiki [%s]\",\n                userOrGroupDocumentReference, wiki), e);\n        } finally {\n            xwikiContext.setWikiId(currentWiki);\n        }\n    }","commit_id":"66f3c0f415d4473cc34a9787f611fe3d2bc28d9e","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private static void parseSystemConfig(Element root) throws Exception {\n\t\tfinal Element el = root.getElement(\"system-config\");\n\t\tif (el != null) {\n\t\t\tString s = el.getElementValue(\"au-writer-class\", true);\n\t\t\tif (s != null)\n\t\t\t\tAuWriters.setImplementationClass(\n\t\t\t\t\ts.length() == 0 ? null: Classes.forNameByThread(s));\n\t\t}\n\t}","id":103797,"modified_method":"private static void parseSubSystemConfig(Element root) throws Exception {\n\t\tfor (Iterator it = root.getElements(\"system-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tString s = el.getElementValue(\"au-writer-class\", true);\n\t\t\tif (s != null)\n\t\t\t\tAuWriters.setImplementationClass(\n\t\t\t\t\ts.length() == 0 ? null: Classes.forNameByThread(s));\n\t\t}\n\t}","commit_id":"cce0a0c4912c5f79db2ffc1c5847960345085968","url":"https://github.com/zkoss/zk"},{"original_method":"/** Parses metainfo/zk/config.xml placed in class-path.\n\t *\n\t * <p>Note: the application-independent configurations (aka.,\n\t * the system default configurations) are loaded only once,\n\t * no matter how many times this method is called.\n\t *\n\t * @param config the object to store configurations.\n\t * If null, only the application-independent configurations are parsed.\n\t * @since 3.5.0\n\t */\n\tpublic void parseConfigXml(Configuration config) {\n\t\tboolean syscfgLoaded;\n\t\tsynchronized (ConfigParser.class) {\n\t\t\tsyscfgLoaded = _syscfgLoaded;\n\t\t\t_syscfgLoaded = true;\n\t\t}\n\t\tif (!syscfgLoaded)\n\t\t\tlog.info(\"Loading system default\");\n\t\telse if (config == null)\n\t\t\treturn; //nothing to do\n\n\t\ttry {\n\t\t\tfinal ClassLocator locator = new ClassLocator();\n\t\t\tfinal List xmls = locator.getDependentXMLResources(\n\t\t\t\t\"metainfo/zk/config.xml\", \"config-name\", \"depends\");\n\t\t\tfor (Iterator it = xmls.iterator(); it.hasNext();) {\n\t\t\t\tfinal ClassLocator.Resource res = (ClassLocator.Resource)it.next();\n\t\t\t\tif (log.debugable()) log.debug(\"Loading \"+res.url);\n\t\t\t\ttry {\n\t\t\t\t\tif (checkVersion(res.url, res.document)) {\n\t\t\t\t\t\tfinal Element el = res.document.getRootElement();\n\t\t\t\t\t\tif (!syscfgLoaded) {\n\t\t\t\t\t\t\tparseZScriptConfig(el);\n\t\t\t\t\t\t\tparseDeviceConfig(el);\n\t\t\t\t\t\t\tparseSystemConfig(el);\n\t\t\t\t\t\t\tparseClientConfig(el);\n\t\t\t\t\t\t\t//parseDesktopConfig(el);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config != null) {\n\t\t\t\t\t\t\tparseListeners(config, el);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tthrow UiException.Aide.wrap(ex, \"Failed to load \"+res.url);\n\t\t\t\t\t\t//abort since it is hardly to work then\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tthrow UiException.Aide.wrap(ex); //abort\n\t\t}\n\t}","id":103798,"modified_method":"/** Parses metainfo/zk/config.xml placed in class-path.\n\t *\n\t * <p>Note: the application-independent configurations (aka.,\n\t * the system default configurations) are loaded only once,\n\t * no matter how many times this method is called.\n\t *\n\t * @param config the object to store configurations.\n\t * If null, only the application-independent configurations are parsed.\n\t * @since 3.5.0\n\t */\n\tpublic void parseConfigXml(Configuration config) {\n\t\tboolean syscfgLoaded;\n\t\tsynchronized (ConfigParser.class) {\n\t\t\tsyscfgLoaded = _syscfgLoaded;\n\t\t\t_syscfgLoaded = true;\n\t\t}\n\t\tif (!syscfgLoaded)\n\t\t\tlog.info(\"Loading system default\");\n\t\telse if (config == null)\n\t\t\treturn; //nothing to do\n\n\t\ttry {\n\t\t\tfinal ClassLocator locator = new ClassLocator();\n\t\t\tfinal List xmls = locator.getDependentXMLResources(\n\t\t\t\t\"metainfo/zk/config.xml\", \"config-name\", \"depends\");\n\t\t\tfor (Iterator it = xmls.iterator(); it.hasNext();) {\n\t\t\t\tfinal ClassLocator.Resource res = (ClassLocator.Resource)it.next();\n\t\t\t\tif (log.debugable()) log.debug(\"Loading \"+res.url);\n\t\t\t\ttry {\n\t\t\t\t\tif (checkVersion(res.url, res.document)) {\n\t\t\t\t\t\tfinal Element el = res.document.getRootElement();\n\t\t\t\t\t\tif (!syscfgLoaded) {\n\t\t\t\t\t\t\tparseSubZScriptConfig(el);\n\t\t\t\t\t\t\tparseSubDeviceConfig(el);\n\t\t\t\t\t\t\tparseSubSystemConfig(el);\n\t\t\t\t\t\t\tparseSubClientConfig(config, el);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config != null) {\n\t\t\t\t\t\t\tparseListeners(config, el);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tthrow UiException.Aide.wrap(ex, \"Failed to load \"+res.url);\n\t\t\t\t\t\t//abort since it is hardly to work then\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tthrow UiException.Aide.wrap(ex); //abort\n\t\t}\n\t}","commit_id":"cce0a0c4912c5f79db2ffc1c5847960345085968","url":"https://github.com/zkoss/zk"},{"original_method":"private static void parseClientConfig(Element root) throws Exception {\n\t\tfinal Element el = root.getElement(\"client-config\");\n\t\tif (el != null) {\n\t\t\tInteger v = parseInteger(el, \"resend-delay\", false);\n\t\t\tif (v != null)\n\t\t\t\tLibrary.setProperty(Attributes.RESEND_DELAY, v.toString());\n\t\t}\n\t}","id":103799,"modified_method":"/** Unlike other private parseXxx, config might be null. */\n\tprivate static void parseSubClientConfig(Configuration config, Element root) throws Exception {\n\t\tfor (Iterator it = root.getElements(\"client-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tif (config != null) parseClientConfig(config, el);\n\t\t\telse {\n\t\t\t\tInteger v = parseInteger(el, \"resend-delay\", false);\n\t\t\t\tif (v != null)\n\t\t\t\t\tLibrary.setProperty(Attributes.RESEND_DELAY, v.toString());\n\t\t\t}\n\t\t}\n\t}","commit_id":"cce0a0c4912c5f79db2ffc1c5847960345085968","url":"https://github.com/zkoss/zk"},{"original_method":"private static void parseDeviceConfig(Element root) {\n\t\tfor (Iterator it = root.getElements(\"device-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tDevices.add(el);\n\t\t}\n\t}","id":103800,"modified_method":"private static void parseSubDeviceConfig(Element root) {\n\t\tfor (Iterator it = root.getElements(\"device-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tDevices.add(el);\n\t\t}\n\t}","commit_id":"cce0a0c4912c5f79db2ffc1c5847960345085968","url":"https://github.com/zkoss/zk"},{"original_method":"private static void parseZScriptConfig(Element root) {\n\t\tfor (Iterator it = root.getElements(\"zscript-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tInterpreters.add(el);\n\t\t\t\t//Note: zscript-config is applied to the whole system, not just langdef\n\t\t}\n\t}","id":103801,"modified_method":"private static void parseSubZScriptConfig(Element root) {\n\t\tfor (Iterator it = root.getElements(\"zscript-config\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tInterpreters.add(el);\n\t\t\t\t//Note: zscript-config is applied to the whole system, not just langdef\n\t\t}\n\t}","commit_id":"cce0a0c4912c5f79db2ffc1c5847960345085968","url":"https://github.com/zkoss/zk"},{"original_method":"private NS(NameSpace parent, Namespace ns) {\n\t\t\tsuper(parent, \"ns\" + System.identityHashCode(ns));\n\t\t\t_ns = ns;\n\t\t\t_ns.addChangeListener(new NSCListener(this));\n\t\t}","id":103802,"modified_method":"private NS(NameSpace parent, BshClassManager classManager, Namespace ns) {\n\t\t\tsuper(parent, classManager, \"ns\" + System.identityHashCode(ns));\n\t\t\t_ns = ns;\n\t\t\t_ns.addChangeListener(new NSCListener(this));\n\t\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Prepares the namespace for non-top-level namespace.\n\t */\n\tprivate NameSpace prepareNS(Namespace ns) {\n\t\tif (ns == getOwner().getNamespace())\n\t\t\treturn _bshns;\n\n\t\tNSX nsx = (NSX)ns.getVariable(VAR_NS, true);\n\t\tif (nsx != null)\n\t\t\treturn nsx.ns;\n\n\t\t//bind bshns and ns\n\t\tNamespace p = ns.getParent();\n\t\tNameSpace bshns = new NS(p != null ? prepareNS(p): null, ns);\n\t\tns.setVariable(VAR_NS, new NSX(bshns), true);\n\t\treturn bshns;\n\t}","id":103803,"modified_method":"/** Prepares the namespace for non-top-level namespace.\n\t */\n\tprivate NameSpace prepareNS(Namespace ns) {\n\t\tif (ns == getOwner().getNamespace())\n\t\t\treturn _bshns;\n\n\t\tNSX nsx = (NSX)ns.getVariable(VAR_NS, true);\n\t\tif (nsx != null)\n\t\t\treturn nsx.ns;\n\n\t\t//bind bshns and ns\n\t\tNamespace p = ns.getParent();\n\t\tNameSpace bshns = //Bug 1831534: we have to pass class manager\n\t\t\tnew NS(p != null ? prepareNS(p): null, _ip.getClassManager(), ns);\n\t\tns.setVariable(VAR_NS, new NSX(bshns), true);\n\t\treturn bshns;\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Don't call this method. */\n\t    private GlobalNS(BshClassManager classManager, String name) {\n\t    \tsuper(classManager, name);\n\t    }","id":103804,"modified_method":"protected GlobalNS(NameSpace parent, BshClassManager classManager,\n\t    String name) {\n\t    \tsuper(parent, classManager, name);\n\t    }","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"public void init(Page owner, String zslang) {\n\t\tsuper.init(owner, zslang);\n\n\t\t_ip = new bsh.Interpreter();\n\t\t_ip.setClassLoader(Thread.currentThread().getContextClassLoader());\n\n\t\t_bshns = new GlobalNS(_ip.getClassManager(), \"global\");\n\t\t_ip.setNameSpace(_bshns);\n\t}","id":103805,"modified_method":"public void init(Page owner, String zslang) {\n\t\tsuper.init(owner, zslang);\n\n\t\t_ip = new bsh.Interpreter();\n\t\t_ip.setClassLoader(Thread.currentThread().getContextClassLoader());\n\n\t\t_bshns = new GlobalNS(null, _ip.getClassManager(), \"global\");\n\t\t_ip.setNameSpace(_bshns);\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Parses desktop-config. */\n\tprivate static void parseDesktopConfig(Configuration config, Element conf)\n\tthrows Exception {\n\t\t//theme-uri\n\t\tfor (Iterator it = conf.getElements(\"theme-uri\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tString uri = el.getText().trim();\n\t\t\tif (uri.length() != 0) config.addThemeURI(uri);\n\t\t}\n\n\t\t//disable-theme-uri\n\t\tElement subel = conf.getElement(\"disable-theme-uri\");\n\t\tif (subel != null) {\n\t\t\tString s = subel.getText(true);\n\t\t\tif (s.length() == 0)\n\t\t\t\tthrow new UiException(\"disable-theme-uri cannot be empty, \"+subel.getLocator());\n\t\t\tconfig.addDisabledThemeURI(s);\n\t\t}\n\n\t\t//theme-provider-class\n\t\tClass cls = parseClass(conf, \"theme-provider-class\",\n\t\t\tThemeProvider.class);\n\t\tif (cls != null)\n\t\t\tconfig.setThemeProvider((ThemeProvider)cls.newInstance());\n\n\t\t//desktop-timeout\n\t\tInteger v = parseInteger(conf, \"desktop-timeout\", false);\n\t\tif (v != null) config.setDesktopMaxInactiveInterval(v.intValue());\n\n\t\t//file-check-period\n\t\tv = parseInteger(conf, \"file-check-period\", true);\n\t\tif (v != null) System.setProperty(\"org.zkoss.util.resource.checkPeriod\", v.toString());\n\t\t\t//System-wide property\n\n\t}","id":103806,"modified_method":"/** Parses desktop-config. */\n\tprivate static void parseDesktopConfig(Configuration config, Element conf)\n\tthrows Exception {\n\t\t//theme-uri\n\t\tfor (Iterator it = conf.getElements(\"theme-uri\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String uri = el.getText(true);\n\t\t\tif (uri.length() != 0) config.addThemeURI(uri);\n\t\t}\n\n\t\t//disable-theme-uri\n\t\tfor (Iterator it = conf.getElements(\"disable-theme-uri\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String uri = el.getText(true);\n\t\t\tif (uri.length() != 0) config.addDisabledThemeURI(uri);\n\t\t}\n\n\t\t//theme-provider-class\n\t\tClass cls = parseClass(conf, \"theme-provider-class\",\n\t\t\tThemeProvider.class);\n\t\tif (cls != null)\n\t\t\tconfig.setThemeProvider((ThemeProvider)cls.newInstance());\n\n\t\t//desktop-timeout\n\t\tInteger v = parseInteger(conf, \"desktop-timeout\", false);\n\t\tif (v != null) config.setDesktopMaxInactiveInterval(v.intValue());\n\n\t\t//file-check-period\n\t\tv = parseInteger(conf, \"file-check-period\", true);\n\t\tif (v != null) System.setProperty(\"org.zkoss.util.resource.checkPeriod\", v.toString());\n\t\t\t//System-wide property\n\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Parse language-config/addon-uri. */\n\tprivate static void parseLangAddon(Locator locator, Element conf) {\n\t\tfor (Iterator it = conf.getElements(\"addon-uri\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String path = el.getText().trim();\n\n\t\t\tfinal URL url = locator.getResource(path);\n\t\t\tif (url == null)\n\t\t\t\tlog.error(\"File not found: \"+path+\", at \"+el.getLocator());\n\t\t\telse\n\t\t\t\tDefinitionLoaders.addAddon(locator, url);\n\t\t}\n\t}","id":103807,"modified_method":"/** Parse language-config/addon-uri. */\n\tprivate static void parseLangAddon(Locator locator, Element conf) {\n\t\tfor (Iterator it = conf.getElements(\"addon-uri\").iterator();\n\t\tit.hasNext();) {\n\t\t\tfinal Element el = (Element)it.next();\n\t\t\tfinal String path = el.getText(true);\n\n\t\t\tfinal URL url = locator.getResource(path);\n\t\t\tif (url == null)\n\t\t\t\tlog.error(\"File not found: \"+path+\", at \"+el.getLocator());\n\t\t\telse\n\t\t\t\tDefinitionLoaders.addAddon(locator, url);\n\t\t}\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Sets the raw value directly. The caller must make sure the value\n\t * is correct (or intend to be incorrect), because this method\n\t * doesn't do any validation.\n\t *\n\t * <p>If you feel confusing with setValue, such as {@link org.zkoss.zul.Textbox#setValue},\n\t * it is usually better to use setValue instead. This method\n\t * is reserved for developer that really want to set an 'illegal'\n\t * value (such as an empty string to a textbox with no-empty contraint).\n\t *\n\t * <p>Like setValue, the result is returned back to the server\n\t * by calling {@link #getText}.\n\t *\n\t * @see #getRawValue\n\t */\n\tpublic void setRawValue(Object value) {\n\t\tif (_errmsg != null || !Objects.equals(_value, value)) {\n\t\t\tclearErrorMessage();\n\t\t\t_value = value;\n\t\t\tsmartUpdate(\"value\", coerceToString(_value));\n\t\t}\n\t}","id":103808,"modified_method":"/** Sets the raw value directly. The caller must make sure the value\n\t * is correct (or intend to be incorrect), because this method\n\t * doesn't do any validation.\n\t *\n\t * <p>If you feel confusing with setValue, such as {@link org.zkoss.zul.Textbox#setValue},\n\t * it is usually better to use setValue instead. This method\n\t * is reserved for developer that really want to set an 'illegal'\n\t * value (such as an empty string to a textbox with no-empty contraint).\n\t *\n\t * <p>Note: since 3.0.1, the value will be re-validate again if\n\t * {@link #getText} or others (such as {@link org.zkoss.zul.Intbox#getValue})\n\t * is called. In other words, it is assumed that the specified value\n\t * is not validated yet -- the same state when this component is\n\t * created. If you want to avoid the re-valiation, you have to invoke\n\t * {@link #clearErrorMessage()}.\n\t *\n\t * <p>Like setValue, the result is returned back to the server\n\t * by calling {@link #getText}.\n\t *\n\t * @see #getRawValue\n\t */\n\tpublic void setRawValue(Object value) {\n\t\tif (_errmsg != null || !Objects.equals(_value, value)) {\n\t\t\tclearErrorMessage(true);\n\t\t\t_value = value;\n\t\t\tsmartUpdate(\"value\", coerceToString(_value));\n\t\t}\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"/** Clears the error message.\n\t *\n\t * <p>The error message is cleared automatically, so you rarely need\n\t * to call this method.\n\t * However, if a constraint depends on multiple input fields and\n\t * the error can be corrected by changing one of these fields,\n\t * then you may have to clear the error message manullay by invoking\n\t * this method.\n\t *\n\t * <p>For example, assume you have two {@link org.zkoss.zul.Intbox}\n\t * and want the value of the first one to be smaller than that of the\n\t * second one. Then, you have to call this method for the second intbox\n\t * once the validation of the first intbox succeeds, and vice versa.\n\t * Otherwise, the error message for the seoncd intbox remains if\n\t * the user fixed the error by lowering down the value of the first one\n\t * Why? The second intbox got no idea to clear the error message\n\t * (since its content doesn't change).\n\t */\n\tpublic void clearErrorMessage() {\n\t\tif (_errmsg != null) {\n\t\t\t_errmsg = null;\n\t\t\t_valided = true;\n\t\t\tClients.closeErrorBox(this);\n\t\t}\n\t}","id":103809,"modified_method":"/** Clears the error message.\n\t * It is the same as clearErrorMessage(false). That is, the current\n\t * value is assumed to be correct. {@link #getText} or others (such as {@link org.zkoss.zul.Intbox#getValue})\n\t * won't re-validate it again.\n\t *\n\t * <p>The error message is cleared automatically, so you rarely need\n\t * to call this method.\n\t *\n\t * @see #clearErrorMessage(boolean)\n\t */\n\tpublic void clearErrorMessage() {\n\t\tclearErrorMessage(false);\n\t}","commit_id":"81ab8a16c3f6f7c56b15e440bc23db19426d1fb0","url":"https://github.com/zkoss/zk"},{"original_method":"public void displayUserRecordPage( Panel parent, UserInfoWeb userToEdit)\n    {\n\t\tfinal String oldPassword;\n        final boolean admin;\n\t\tfinal boolean newUser;\n        final boolean showSkipConfirmed;\n        boolean isAdminChecked = false; // not admin by default\n        boolean skipConfirmationChecked = previousSkipConfirmation;\n\n        if (loggedInUser != null\n                && loggedInUser.isAdministrator()) {\n            admin = true;\n        } else {\n            admin = false;\n        }\n\t\tif (userToEdit==null) {\n\t\t\tnewUser = true;\n            showSkipConfirmed = true;\n\t\t\tuserToEdit = new UserInfoWeb();\n\t\t\toldPassword = \"\";\n\t\t\tif ( admin ) {\n\t            label_box.setText (\"Please, fill out the form to add a user\");\n\t        } else {\n\t            label_box.setText ( signup_greeting ); // Please, fill out the form:\n\t        }\n\t\t} else {\n\t\t\tnewUser = false;\n\t\t\toldPassword = userToEdit.getPassword();\n            isAdminChecked = userToEdit.isAdministrator();\n            showSkipConfirmed = !userToEdit.isConfirmed();\n            skipConfirmationChecked = userToEdit.isConfirmed();\n\n            String status;\n            if (!userToEdit.isApproved()) {\n                status = \"unapproved\";\n            } else if (!userToEdit.isEnabled()) {\n                status = \"disabled\";\n            } else if (!userToEdit.isConfirmed()) {\n                status = \"unconfirmed\";\n            } else {\n                status = \"active\";\n            }\n            if (userToEdit.isAdministrator()) {\n                status += \" & admin\";\n            }\n\t\t\tlabel_box.setText (\"Editing information for user '\" + userToEdit.getUserName() +\"' (\" + status + \")\" );\n\t\t}\n        label_box.setStyleName(\"euca-greeting-normal\");\n\n        Button submit_button; // define button and attach its keyboard listener to all text boxes\n\t\tEucalyptusKeyboardListener sl = new EucalyptusKeyboardListener(submit_button);\n\t\tsubmit_button.addKeyboardListener(sl);\n\t\tif (newUser) {\n\t        if (admin) {\n\t\t\t\tsubmit_button = new Button ( \"Add user\", SignupButtonListener);\n\t\t\t} else {\n\t\t\t\tsubmit_button = new Button ( \"Sign up\", SignupButtonListener);\n\t\t\t}\n\t\t} else {\n\t\t\tsubmit_button = new Button ( \"Update Record\", SignupButtonListener );\n\t\t}\n\t\t\n        int rowsMandatory = 5;\n        if (admin) {\n            rowsMandatory++; // for admin checkbox\n            if (showSkipConfirmed) {\n                rowsMandatory++; // for skip confirmation checkbox\n            }\n        }\n        final Grid g1 = new Grid ( rowsMandatory, 3 );\n        g1.getColumnFormatter().setWidth(0, \"180\");\n        g1.getColumnFormatter().setWidth(1, \"180\");\n        g1.getColumnFormatter().setWidth(2, \"180\");\n        int i = 0;\n\n        final Label label_mandatory = new Label( \"Mandatory fields:\" );\n        label_mandatory.setStyleName(\"euca-section-header\");\n\n        final int userName_row = i;\n        g1.setWidget( i, 0, new Label( \"Username:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox userName_box = new TextBox();\n\t\tuserName_box.setText (userToEdit.getUserName());\n        userName_box.setWidth(\"180\");\n        userName_box.addKeyboardListener(sl);\n\t\tif ( ! newUser ) {\n\t\t\tuserName_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, userName_box );\n\n        // optional row\n        final CheckBox userIsAdmin = new CheckBox(\"Administrator\");\n        userIsAdmin.setChecked(isAdminChecked);\n        userIsAdmin.setStyleName(\"euca-remember-text\");\n        if (admin) {\n            g1.setWidget ( i++, 1, userIsAdmin);\n        }\n\n        final int password1_row = i;\n        g1.setWidget( i, 0, new Label( \"Password:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final PasswordTextBox cleartextPassword1_box = new PasswordTextBox();\n\t\tcleartextPassword1_box.setText (userToEdit.getPassword());\n        cleartextPassword1_box.setWidth (\"180\");\n        cleartextPassword1_box.addKeyboardListener(sl);\n\t\tif ( (! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {\n\t\t\tcleartextPassword1_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, cleartextPassword1_box );\n\n        final int password2_row = i;\n        g1.setWidget( i, 0, new Label( \"Password, again:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final PasswordTextBox cleartextPassword2_box = new PasswordTextBox();\n\t\tcleartextPassword2_box.setText (userToEdit.getPassword());\n        cleartextPassword2_box.setWidth(\"180\");\n        cleartextPassword2_box.addKeyboardListener(sl);\n\t\tif ( ( ! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {\n\t\t\tcleartextPassword2_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, cleartextPassword2_box );\n\n        final int realName_row = i;\n        g1.setWidget( i, 0, new Label( \"Full Name:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox realName_box = new TextBox();\n\t\trealName_box.setText (userToEdit.getRealName());\n        realName_box.setWidth(\"180\");\n        realName_box.addKeyboardListener(sl);\n        g1.setWidget( i++, 1, realName_box );\n\n        final int emailAddress_row = i;\n        g1.setWidget( i, 0, new Label( \"Email address:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox emailAddress_box = new TextBox();\n\t\temailAddress_box.setText (userToEdit.getEmail());\n        emailAddress_box.setWidth(\"180\");\n        emailAddress_box.addKeyboardListener(sl);\n        g1.setWidget( i++, 1, emailAddress_box );\n\n        // optional row\n        final CheckBox skipConfirmation = new CheckBox(\"Skip email confirmation\");\n        skipConfirmation.setChecked(skipConfirmationChecked);\n        skipConfirmation.setStyleName(\"euca-remember-text\");\n        if (admin && showSkipConfirmed) {\n            g1.setWidget ( i++, 1, skipConfirmation);\n        }\n\n        /* these widgets are allocated, but not necessarily used */\n        final Grid g2 = new Grid();\n        final Label label_optional = new Label( \"Optional fields:\" );\n        label_optional.setStyleName(\"euca-section-header\");\n        final TextBox telephoneNumber_box = new TextBox();\n        final TextBox projectPIName_box = new TextBox();\n        final TextBox affiliation_box = new TextBox();\n        final TextArea projectDescription_box = new TextArea();\n\n        int extra_fields = 0;\n        if (request_telephone)           { extra_fields++; }\n        if (request_project_leader)      { extra_fields++; }\n        if (request_affiliation)         { extra_fields++; }\n        if (request_project_description) { extra_fields++; }\n\n        if (extra_fields > 0) {\n            g2.resize(extra_fields, 2);\n            g2.getColumnFormatter().setWidth(0, \"180\");\n            g2.getColumnFormatter().setWidth(1, \"360\");\n            i = 0;\n\n            if (request_telephone) {\n                g2.setWidget( i, 0, new Label( \"Telephone Number:\" ));\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n                telephoneNumber_box.setWidth(\"180\");\n                telephoneNumber_box.addKeyboardListener(sl);\n\t\t\t\ttelephoneNumber_box.setText (userToEdit.getTelephoneNumber());\n                g2.setWidget( i++, 1, telephoneNumber_box );\n            }\n\n            if (request_project_leader) {\n                g2.setWidget( i, 0, new Label( \"Project Leader:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\tprojectPIName_box.setText (userToEdit.getProjectPIName());\n                projectPIName_box.setWidth(\"180\");\n                projectPIName_box.addKeyboardListener(sl);\n                g2.setWidget( i++, 1, projectPIName_box );\n            }\n\n            if (request_affiliation) {\n                g2.setWidget( i, 0, new Label( \"Affiliation:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\taffiliation_box.setText (userToEdit.getAffiliation());\n                affiliation_box.setWidth(\"360\");\n                affiliation_box.addKeyboardListener(sl);\n                g2.setWidget( i++, 1, affiliation_box );\n            }\n\n            if (request_project_description) {\n                g2.setWidget( i, 0, new Label( \"Project Description:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\tprojectDescription_box.setText (userToEdit.getProjectDescription());\n                projectDescription_box.setWidth(\"360\");\n                projectDescription_box.setHeight(\"50\");\n                projectDescription_box.addKeyboardListener(sl);\n                g2.setWidget( i++, 1, projectDescription_box );\n            }\n        }\n\n        ClickListener SignupButtonListener = new ClickListener() {\n            public void onClick( Widget sender )\n            {\n                boolean formOk = true;\n\n                for ( int j = 0; j < 4; j++ )\n                {\n                    g1.clearCell( j, 2 ); /* clear previous right-hand-side annotations */\n                }\n\n                // perform checks\n                if ( userName_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Username is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( userName_row, 2, l);\n                    formOk = false;\n                } else {\n\t\t\t\t\t// do this in the else-clause so the empty username doesn't match here\n\t                if ( cleartextPassword1_box.getText().toLowerCase().matches(\".*\" +\n\t                        userName_box.getText().toLowerCase() + \".*\")) {\n\t                    Label l = new Label ( \"Password may not contain the username!\");\n\t                    l.setStyleName(\"euca-error-hint\");\n\t                    g1.setWidget( password1_row, 2, l );\n\t                    formOk = false;\n\t                }\n\t\t\t\t}\n\n\t\t\t\tif ( userName_box.getText().matches(\".*[^\\\\w\\\\-\\\\.@]+.*\") ) {\n\t\t\t\t\tLabel l = new Label (\"Invalid characters in the username!\");\n\t\t\t\t\tl.setStyleName (\"euca-error-hint\");\n\t\t\t\t\tg1.setWidget (userName_row, 2, l);\n\t\t\t\t\tformOk = false;\n\t\t\t\t}\n\n                if ( userName_box.getText().length() > 30)\n                {\n                    Label l = new Label( \"Username is too long, sorry!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( userName_row, 2, l);\n                    formOk = false;\n                }\n\n                if ( cleartextPassword1_box.getText().length() < minPasswordLength )\n                {\n                    Label l = new Label( \"Password must be at least \" + minPasswordLength + \" characters long!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password1_row, 2, l );\n                    formOk = false;\n                }\n                if ( !cleartextPassword1_box.getText().equals( cleartextPassword2_box.getText() ) )\n                {\n                    Label l = new Label( \"Passwords do not match!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password2_row, 2, l );\n                    formOk = false;\n                }\n                if ( realName_box.getText().equalsIgnoreCase(cleartextPassword1_box.getText())\n                \t\t|| userName_box.getText().equalsIgnoreCase(cleartextPassword1_box.getText())) {\n                    Label l = new Label ( \"Password may not be your name or username!\");\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password1_row, 2, l );\n                    formOk = false;\n                }\n\n                if ( realName_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Name is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( realName_row, 2, l );\n                    formOk = false;\n                }\n                if ( emailAddress_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Email address is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( emailAddress_row, 2, l );\n                    formOk = false;\n                } else if ( !emailAddress_box.getText().contains(\"@\") ) {\n                    Label l = new Label( \"Email address does not look like an email address!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( emailAddress_row, 2, l );\n                    formOk = false;\n\t\t}\n                if ( formOk )\n                {\n                    label_box.setText( \"Checking with the server...\" );\n                    label_box.setStyleName(\"euca-greeting-pending\");\n\t\t\t\t\tString enteredPassword = cleartextPassword1_box.getText();\n\t\t\t\t\tString encryptedPassword = GWTUtils.md5(enteredPassword);\n\t\t\t\t\tif ( enteredPassword.equals(oldPassword)) {\n\t\t\t\t\t\tencryptedPassword = enteredPassword; // it was not changed in the edit\n\t\t\t\t\t}\n                    final UserInfoWeb userToSave = new UserInfoWeb(\n                            userName_box.getText(),\n                            realName_box.getText(),\n                            emailAddress_box.getText(),\n                            encryptedPassword);\n                    if ( admin ) {\n                        userToSave.setAdministrator( userIsAdmin.isChecked());\n                        if ( showSkipConfirmed ) {\n                            previousSkipConfirmation = skipConfirmation.isChecked(); // remember value for the future\n                            userToSave.setConfirmed(previousSkipConfirmation);\n                        }\n                    }\n                    if ( telephoneNumber_box.getText().length() > 0 )\n                    {\n                        userToSave.setTelephoneNumber( telephoneNumber_box.getText() );\n                    }\n                    if ( affiliation_box.getText().length() > 0 )\n                    {\n                        userToSave.setAffiliation( affiliation_box.getText() );\n                    }\n                    if ( projectDescription_box.getText().length() > 0 )\n                    {\n                        userToSave.setProjectDescription( projectDescription_box.getText() );\n                    }\n                    if ( projectPIName_box.getText().length() > 0 )\n                    {\n                        userToSave.setProjectPIName( projectPIName_box.getText() );\n                    }\n\t\t\t\t\tif (newUser) {\n\t\t\t\t\t\tEucalyptusWebBackend.App.getInstance().addUserRecord(\n\t\t\t\t\t\t\tsessionId, /* will be null if anonymous user signs up */\n\t\t\t\t\t\t\tuserToSave,\n\t\t\t\t\t\tnew AsyncCallback() {\n\t\t\t\t\t\t\tpublic void onSuccess( Object result )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayDialog( \"Thank you!\", ( String ) result );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpublic void onFailure( Throwable caught )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString m = caught.getMessage();\n\t\t\t\t\t\t\t\tif ( m.equals( \"User already exists\" ) )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tg1.setWidget( userName_row, 2, new Label( \"Username is taken!\" ) );\n\t\t\t\t\t\t\t\t\tlabel_box.setText( \"Please, fix the error and resubmit:\" );\n\t\t\t\t\t\t\t\t\tlabel_box.setStyleName(\"euca-greeting-warning\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdisplayErrorPage(m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tEucalyptusWebBackend.App.getInstance().updateUserRecord(\n\t\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\t\tuserToSave,\n\t\t\t\t\t\tnew AsyncCallback() {\n                            public void onSuccess(Object result) {\n                                if (loggedInUser.getUserName().equals(userToSave.getUserName())) {\n                                    loggedInUser.setRealName(userToSave.getRealName());\n                                    loggedInUser.setEmail(userToSave.getEmail());\n                                    loggedInUser.setPassword(userToSave.getPassword());\n                                    loggedInUser.setTelephoneNumber(userToSave.getTelephoneNumber());\n                                    loggedInUser.setAffiliation(userToSave.getAffiliation());\n                                    loggedInUser.setProjectDescription(userToSave.getProjectDescription());\n                                    loggedInUser.setProjectPIName(userToSave.getProjectPIName());\n                                    displayDialog(\"\", (String) result);\n\n                                } else { // admin updating a user\n                                    displayBarAndTabs(\"\");\n                                    statusMessage.setText( ( String ) result );\n                                }\n                            }\n\n                            public void onFailure( Throwable caught )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString m = caught.getMessage();\n\t\t\t\t\t\t\t\tdisplayErrorPage(m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n                }\n                else\n                {\n                    label_box.setText( \"Please, fix the errors and resubmit:\" );\n                    label_box.setStyleName(\"euca-greeting-warning\");\n                }\n            }\n        };\n\n        Button cancel_button = new Button( \"Cancel\", DefaultPageButtonListener );\n        cancel_button.addKeyboardListener(sl);\n        VerticalPanel mpanel = new VerticalPanel();\n        mpanel.add( label_mandatory );\n        mpanel.add( g1 );\n\n        VerticalPanel opanel = new VerticalPanel();\n        if (extra_fields > 0) {\n            opanel.add( label_optional );\n            opanel.add( g2 );\n        }\n\n        HorizontalPanel bpanel = new HorizontalPanel();\n        bpanel.add( submit_button );\n        bpanel.add( new HTML( \"&nbsp;&nbsp;or&nbsp;&nbsp;\" ) );\n        bpanel.add( cancel_button );\n\n        VerticalPanel vpanel = new VerticalPanel();\n        vpanel.setSpacing(15);\n        vpanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);\n        vpanel.add(new HTML(\"<br/>\"));\n        if (logo!=null) { addLogoWithText(vpanel); vpanel.add(new HTML(\"<br/>\"));};\n        vpanel.add (label_box);\n        vpanel.add (mpanel);\n        vpanel.add (opanel);\n        vpanel.add (bpanel);\n\n        VerticalPanel wrapper = new VerticalPanel();\n        wrapper.add (vpanel);\n        wrapper.setSize(\"100%\", \"100%\");\n        wrapper.setCellHorizontalAlignment(vpanel, VerticalPanel.ALIGN_CENTER);\n//        wrapper.setCellVerticalAlignment(vpanel, VerticalPanel.ALIGN_MIDDLE);\n\n        parent.clear();\n        parent.add( wrapper );\n        if (newUser) {\n        \tuserName_box.setFocus(true);\n        } else {\n        \tcancel_button.setFocus(true);\n        }\n    }","id":103810,"modified_method":"public void displayUserRecordPage( Panel parent, UserInfoWeb userToEdit)\n    {\n\t\tfinal String oldPassword;\n        final boolean admin;\n\t\tfinal boolean newUser;\n        final boolean showSkipConfirmed;\n        boolean isAdminChecked = false; // not admin by default\n        boolean skipConfirmationChecked = previousSkipConfirmation;\n\n        if (loggedInUser != null\n                && loggedInUser.isAdministrator()) {\n            admin = true;\n        } else {\n            admin = false;\n        }\n\t\tif (userToEdit==null) {\n\t\t\tnewUser = true;\n            showSkipConfirmed = true;\n\t\t\tuserToEdit = new UserInfoWeb();\n\t\t\toldPassword = \"\";\n\t\t\tif ( admin ) {\n\t            label_box.setText (\"Please, fill out the form to add a user\");\n\t        } else {\n\t            label_box.setText ( signup_greeting ); // Please, fill out the form:\n\t        }\n\t\t} else {\n\t\t\tnewUser = false;\n\t\t\toldPassword = userToEdit.getPassword();\n            isAdminChecked = userToEdit.isAdministrator();\n            showSkipConfirmed = !userToEdit.isConfirmed();\n            skipConfirmationChecked = userToEdit.isConfirmed();\n\n            String status;\n            if (!userToEdit.isApproved()) {\n                status = \"unapproved\";\n            } else if (!userToEdit.isEnabled()) {\n                status = \"disabled\";\n            } else if (!userToEdit.isConfirmed()) {\n                status = \"unconfirmed\";\n            } else {\n                status = \"active\";\n            }\n            if (userToEdit.isAdministrator()) {\n                status += \" & admin\";\n            }\n\t\t\tlabel_box.setText (\"Editing information for user '\" + userToEdit.getUserName() +\"' (\" + status + \")\" );\n\t\t}\n        label_box.setStyleName(\"euca-greeting-normal\");\n\t\t\n        int rowsMandatory = 5;\n        if (admin) {\n            rowsMandatory++; // for admin checkbox\n            if (showSkipConfirmed) {\n                rowsMandatory++; // for skip confirmation checkbox\n            }\n        }\n        final Grid g1 = new Grid ( rowsMandatory, 3 );\n        g1.getColumnFormatter().setWidth(0, \"180\");\n        g1.getColumnFormatter().setWidth(1, \"180\");\n        g1.getColumnFormatter().setWidth(2, \"180\");\n        int i = 0;\n\n        final Label label_mandatory = new Label( \"Mandatory fields:\" );\n        label_mandatory.setStyleName(\"euca-section-header\");\n\n        final int userName_row = i;\n        g1.setWidget( i, 0, new Label( \"Username:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox userName_box = new TextBox();\n\t\tuserName_box.setText (userToEdit.getUserName());\n        userName_box.setWidth(\"180\");\n        userName_box.setTabIndex(i);\n\t\tif ( ! newUser ) {\n\t\t\tuserName_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, userName_box );\n\n        // optional row\n        final CheckBox userIsAdmin = new CheckBox(\"Administrator\");\n        userIsAdmin.setChecked(isAdminChecked);\n        userIsAdmin.setStyleName(\"euca-remember-text\");\n        userIsAdmin.setTabIndex(i);        \t\n        if (admin) {\n            g1.setWidget ( i++, 1, userIsAdmin);\n        }\n\n        final int password1_row = i;\n        g1.setWidget( i, 0, new Label( \"Password:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final PasswordTextBox cleartextPassword1_box = new PasswordTextBox();\n\t\tcleartextPassword1_box.setText (userToEdit.getPassword());\n        cleartextPassword1_box.setWidth (\"180\");\n\t\tcleartextPassword1_box.setTabIndex(i);\n\t\tif ( (! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {\n\t\t\tcleartextPassword1_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, cleartextPassword1_box );\n\n        final int password2_row = i;\n        g1.setWidget( i, 0, new Label( \"Password, again:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final PasswordTextBox cleartextPassword2_box = new PasswordTextBox();\n\t\tcleartextPassword2_box.setText (userToEdit.getPassword());\n        cleartextPassword2_box.setWidth(\"180\");\n\t\tcleartextPassword2_box.setTabIndex(i);\n\t\tif ( ( ! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {\n\t\t\tcleartextPassword2_box.setEnabled (false);\n\t\t}\n        g1.setWidget( i++, 1, cleartextPassword2_box );\n\n        final int realName_row = i;\n        g1.setWidget( i, 0, new Label( \"Full Name:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox realName_box = new TextBox();\n\t\trealName_box.setText (userToEdit.getRealName());\n        realName_box.setWidth(\"180\");\n        realname_box.setTabIndex(i);\n        g1.setWidget( i++, 1, realName_box );\n\n        final int emailAddress_row = i;\n        g1.setWidget( i, 0, new Label( \"Email address:\" ) );\n        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n        final TextBox emailAddress_box = new TextBox();\n\t\temailAddress_box.setText (userToEdit.getEmail());\n        emailAddress_box.setWidth(\"180\");\n        emailAddress_box.setTabIndex(i);\n        g1.setWidget( i++, 1, emailAddress_box );\n\n        // optional row\n        final CheckBox skipConfirmation = new CheckBox(\"Skip email confirmation\");\n        skipConfirmation.setChecked(skipConfirmationChecked);\n        skipConfirmation.setStyleName(\"euca-remember-text\");\n        if (admin && showSkipConfirmed) {\n        \tskipConfirmation.setTabIndex(i);\n            g1.setWidget ( i++, 1, skipConfirmation);\n        }\n\n        /* these widgets are allocated, but not necessarily used */\n        final Grid g2 = new Grid();\n        final Label label_optional = new Label( \"Optional fields:\" );\n        label_optional.setStyleName(\"euca-section-header\");\n        final TextBox telephoneNumber_box = new TextBox();\n        final TextBox projectPIName_box = new TextBox();\n        final TextBox affiliation_box = new TextBox();\n        final TextArea projectDescription_box = new TextArea();\n\n        int extra_fields = 0;\n        if (request_telephone)           { extra_fields++; }\n        if (request_project_leader)      { extra_fields++; }\n        if (request_affiliation)         { extra_fields++; }\n        if (request_project_description) { extra_fields++; }\n\n        if (extra_fields > 0) {\n            g2.resize(extra_fields, 2);\n            g2.getColumnFormatter().setWidth(0, \"180\");\n            g2.getColumnFormatter().setWidth(1, \"360\");\n            i = 0;\n\n            if (request_telephone) {\n                g2.setWidget( i, 0, new Label( \"Telephone Number:\" ));\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n                telephoneNumber_box.setWidth(\"180\");\n\t\t\t\ttelephoneNumber_box.setText (userToEdit.getTelephoneNumber());\n\t\t\t\ttelephoneNumber_box.setTabIndex(i);\n                g2.setWidget( i++, 1, telephoneNumber_box );\n            }\n\n            if (request_project_leader) {\n                g2.setWidget( i, 0, new Label( \"Project Leader:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\tprojectPIName_box.setText (userToEdit.getProjectPIName());\n                projectPIName_box.setWidth(\"180\");\n                projectPIName_box.setTabIndex(i);\n                g2.setWidget( i++, 1, projectPIName_box );\n            }\n\n            if (request_affiliation) {\n                g2.setWidget( i, 0, new Label( \"Affiliation:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\taffiliation_box.setText (userToEdit.getAffiliation());\n                affiliation_box.setWidth(\"360\");\n                affiliation_box.setTabIndex(i);\n                g2.setWidget( i++, 1, affiliation_box );\n            }\n\n            if (request_project_description) {\n                g2.setWidget( i, 0, new Label( \"Project Description:\" ) );\n                g2.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);\n\t\t\t\tprojectDescription_box.setText (userToEdit.getProjectDescription());\n                projectDescription_box.setWidth(\"360\");\n                projectDescription_box.setHeight(\"50\");\n                projectDescription_box.setTabIndex(i);\n                g2.setWidget( i++, 1, projectDescription_box );\n            }\n        }\n\n        ClickListener SignupButtonListener = new ClickListener() {\n            public void onClick( Widget sender )\n            {\n                boolean formOk = true;\n\n                for ( int j = 0; j < 4; j++ )\n                {\n                    g1.clearCell( j, 2 ); /* clear previous right-hand-side annotations */\n                }\n\n                // perform checks\n                if ( userName_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Username is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( userName_row, 2, l);\n                    formOk = false;\n                } else {\n\t\t\t\t\t// do this in the else-clause so the empty username doesn't match here\n\t                if ( cleartextPassword1_box.getText().toLowerCase().matches(\".*\" +\n\t                        userName_box.getText().toLowerCase() + \".*\")) {\n\t                    Label l = new Label ( \"Password may not contain the username!\");\n\t                    l.setStyleName(\"euca-error-hint\");\n\t                    g1.setWidget( password1_row, 2, l );\n\t                    formOk = false;\n\t                }\n\t\t\t\t}\n\n\t\t\t\tif ( userName_box.getText().matches(\".*[^\\\\w\\\\-\\\\.@]+.*\") ) {\n\t\t\t\t\tLabel l = new Label (\"Invalid characters in the username!\");\n\t\t\t\t\tl.setStyleName (\"euca-error-hint\");\n\t\t\t\t\tg1.setWidget (userName_row, 2, l);\n\t\t\t\t\tformOk = false;\n\t\t\t\t}\n\n                if ( userName_box.getText().length() > 30)\n                {\n                    Label l = new Label( \"Username is too long, sorry!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( userName_row, 2, l);\n                    formOk = false;\n                }\n\n                if ( cleartextPassword1_box.getText().length() < minPasswordLength )\n                {\n                    Label l = new Label( \"Password must be at least \" + minPasswordLength + \" characters long!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password1_row, 2, l );\n                    formOk = false;\n                }\n                if ( !cleartextPassword1_box.getText().equals( cleartextPassword2_box.getText() ) )\n                {\n                    Label l = new Label( \"Passwords do not match!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password2_row, 2, l );\n                    formOk = false;\n                }\n                if ( realName_box.getText().equalsIgnoreCase(cleartextPassword1_box.getText())\n                \t\t|| userName_box.getText().equalsIgnoreCase(cleartextPassword1_box.getText())) {\n                    Label l = new Label ( \"Password may not be your name or username!\");\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( password1_row, 2, l );\n                    formOk = false;\n                }\n\n                if ( realName_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Name is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( realName_row, 2, l );\n                    formOk = false;\n                }\n                if ( emailAddress_box.getText().length() < 1 )\n                {\n                    Label l = new Label( \"Email address is empty!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( emailAddress_row, 2, l );\n                    formOk = false;\n                } else if ( !emailAddress_box.getText().contains(\"@\") ) {\n                    Label l = new Label( \"Email address does not look like an email address!\" );\n                    l.setStyleName(\"euca-error-hint\");\n                    g1.setWidget( emailAddress_row, 2, l );\n                    formOk = false;\n\t\t}\n                if ( formOk )\n                {\n                    label_box.setText( \"Checking with the server...\" );\n                    label_box.setStyleName(\"euca-greeting-pending\");\n\t\t\t\t\tString enteredPassword = cleartextPassword1_box.getText();\n\t\t\t\t\tString encryptedPassword = GWTUtils.md5(enteredPassword);\n\t\t\t\t\tif ( enteredPassword.equals(oldPassword)) {\n\t\t\t\t\t\tencryptedPassword = enteredPassword; // it was not changed in the edit\n\t\t\t\t\t}\n                    final UserInfoWeb userToSave = new UserInfoWeb(\n                            userName_box.getText(),\n                            realName_box.getText(),\n                            emailAddress_box.getText(),\n                            encryptedPassword);\n                    if ( admin ) {\n                        userToSave.setAdministrator( userIsAdmin.isChecked());\n                        if ( showSkipConfirmed ) {\n                            previousSkipConfirmation = skipConfirmation.isChecked(); // remember value for the future\n                            userToSave.setConfirmed(previousSkipConfirmation);\n                        }\n                    }\n                    if ( telephoneNumber_box.getText().length() > 0 )\n                    {\n                        userToSave.setTelephoneNumber( telephoneNumber_box.getText() );\n                    }\n                    if ( affiliation_box.getText().length() > 0 )\n                    {\n                        userToSave.setAffiliation( affiliation_box.getText() );\n                    }\n                    if ( projectDescription_box.getText().length() > 0 )\n                    {\n                        userToSave.setProjectDescription( projectDescription_box.getText() );\n                    }\n                    if ( projectPIName_box.getText().length() > 0 )\n                    {\n                        userToSave.setProjectPIName( projectPIName_box.getText() );\n                    }\n\t\t\t\t\tif (newUser) {\n\t\t\t\t\t\tEucalyptusWebBackend.App.getInstance().addUserRecord(\n\t\t\t\t\t\t\tsessionId, /* will be null if anonymous user signs up */\n\t\t\t\t\t\t\tuserToSave,\n\t\t\t\t\t\tnew AsyncCallback() {\n\t\t\t\t\t\t\tpublic void onSuccess( Object result )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayDialog( \"Thank you!\", ( String ) result );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpublic void onFailure( Throwable caught )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString m = caught.getMessage();\n\t\t\t\t\t\t\t\tif ( m.equals( \"User already exists\" ) )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tg1.setWidget( userName_row, 2, new Label( \"Username is taken!\" ) );\n\t\t\t\t\t\t\t\t\tlabel_box.setText( \"Please, fix the error and resubmit:\" );\n\t\t\t\t\t\t\t\t\tlabel_box.setStyleName(\"euca-greeting-warning\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdisplayErrorPage(m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tEucalyptusWebBackend.App.getInstance().updateUserRecord(\n\t\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\t\tuserToSave,\n\t\t\t\t\t\tnew AsyncCallback() {\n                            public void onSuccess(Object result) {\n                                if (loggedInUser.getUserName().equals(userToSave.getUserName())) {\n                                    loggedInUser.setRealName(userToSave.getRealName());\n                                    loggedInUser.setEmail(userToSave.getEmail());\n                                    loggedInUser.setPassword(userToSave.getPassword());\n                                    loggedInUser.setTelephoneNumber(userToSave.getTelephoneNumber());\n                                    loggedInUser.setAffiliation(userToSave.getAffiliation());\n                                    loggedInUser.setProjectDescription(userToSave.getProjectDescription());\n                                    loggedInUser.setProjectPIName(userToSave.getProjectPIName());\n                                    displayDialog(\"\", (String) result);\n\n                                } else { // admin updating a user\n                                    displayBarAndTabs(\"\");\n                                    statusMessage.setText( ( String ) result );\n                                }\n                            }\n\n                            public void onFailure( Throwable caught )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString m = caught.getMessage();\n\t\t\t\t\t\t\t\tdisplayErrorPage(m);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n                }\n                else\n                {\n                    label_box.setText( \"Please, fix the errors and resubmit:\" );\n                    label_box.setStyleName(\"euca-greeting-warning\");\n                }\n            }\n        };\n\n        Button submit_button;\n\t\tif (newUser) {\n\t        if (admin) {\n\t\t\t\tsubmit_button = new Button ( \"Add user\", SignupButtonListener);\n\t\t\t} else {\n\t\t\t\tsubmit_button = new Button ( \"Sign up\", SignupButtonListener);\n\t\t\t}\n\t\t} else {\n\t\t\tsubmit_button = new Button ( \"Update Record\", SignupButtonListener );\n\t\t}\n\t\tsubmit_button.setTabIndex (i++);\n\t\tButton cancel_button = new Button( \"Cancel\", DefaultPageButtonListener );\n\t\tcancel_button.setTabIndex (i++);\n        VerticalPanel mpanel = new VerticalPanel();\n        mpanel.add( label_mandatory );\n        mpanel.add( g1 );\n\n        VerticalPanel opanel = new VerticalPanel();\n        if (extra_fields > 0) {\n            opanel.add( label_optional );\n            opanel.add( g2 );\n        }\n\n        HorizontalPanel bpanel = new HorizontalPanel();\n        bpanel.add( submit_button );\n        bpanel.add( new HTML( \"&nbsp;&nbsp;or&nbsp;&nbsp;\" ) );\n        bpanel.add( cancel_button );\n\n        VerticalPanel vpanel = new VerticalPanel();\n        vpanel.setSpacing(15);\n        vpanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);\n        vpanel.add(new HTML(\"<br/>\"));\n        if (logo!=null) { addLogoWithText(vpanel); vpanel.add(new HTML(\"<br/>\"));};\n        vpanel.add (label_box);\n        vpanel.add (mpanel);\n        vpanel.add (opanel);\n        vpanel.add (bpanel);\n\n        VerticalPanel wrapper = new VerticalPanel();\n        wrapper.add (vpanel);\n        wrapper.setSize(\"100%\", \"100%\");\n        wrapper.setCellHorizontalAlignment(vpanel, VerticalPanel.ALIGN_CENTER);\n//        wrapper.setCellVerticalAlignment(vpanel, VerticalPanel.ALIGN_MIDDLE);\n\n        parent.clear();\n        parent.add( wrapper );\n        \n        EucalyptusKeyboardListener sl = new EucalyptusKeyboardListener(submit_button, cancel_button);\n        userName_box.addKeyboardListener(sl);\n        cleartextPassword1_box.addKeyboardListener(sl);\n        cleartextPassword2_box.addKeyboardListener(sl);\n        realName_box.addKeyboardListener(sl);\n        emailAddress_box.addKeyboardListener(sl);\n        telephoneNumber_box.addKeyboardListener(sl);\n        projectPIName_box.addKeyboardListener(sl);\n        affiliation_box.addKeyboardListener(sl);\n        projectDescription_box.addKeyboardListener(sl);\n        submit_button.addKeyboardListener(sl);\n        cancel_button.addKeyboardListener(sl);\n        if (newUser) {\n        \tuserName_box.setFocus(true);\n        } else {\n        \tcancel_button.setFocus(true);\n        }\n    }","commit_id":"7d6818613e859da6d3134c0e5a5608f197b92014","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private Clusters() {\n        \n        /*\n         * Cluster definition \n         */\n        ClusterDefinition cluster123 = new ClusterDefinition();\n        \n        cluster123.setName(\"blue.dev.Cluster123\");\n        cluster123.setStackName(\"cluster123\");\n        cluster123.setStackRevision(\"0\");\n        cluster123.setDescription(\"cluster123 - development cluster\");\n        cluster123.setGoalState(ClusterState.CLUSTER_STATE_ATTIC);\n        List<String> activeServices = new ArrayList<String>();\n        activeServices.add(\"hdfs\");\n        activeServices.add(\"mapred\");\n        cluster123.setActiveServices(activeServices);\n        \n        String nodes = \"jt-nodex,nn-nodex,hostname-1x,hostname-2x,hostname-3x,\"+\n                       \"hostname-4x,node-2x,node-3x,node-4x\";  \n        cluster123.setNodes(nodes);\n        \n        List<RoleToNodes> rnm = new ArrayList<RoleToNodes>();\n        \n        RoleToNodes rnme = new RoleToNodes();\n        rnme.setRoleName(\"jobtracker-role\");\n        rnme.setNodes(\"jt-nodex\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"namenode-role\");\n        rnme.setNodes(\"nn-nodex\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"slaves-role\");\n        rnme.setNodes(\"hostname-1x,hostname-2x,hostname-3x,\"+\n                       \"hostname-4x,node-2x,node-3x,node-4x\");\n        rnm.add(rnme);\n        \n        cluster123.setRoleToNodesMap(rnm);\n        \n        /*\n         * Cluster definition \n         */\n        ClusterDefinition cluster124 = new ClusterDefinition();\n        cluster124.setName(\"blue.research.Cluster124\");\n        cluster124.setStackName(\"cluster124\");\n        cluster124.setStackRevision(\"0\");\n        cluster124.setDescription(\"cluster124 - research cluster\");\n        cluster124.setGoalState(ClusterState.CLUSTER_STATE_INACTIVE);\n        activeServices = new ArrayList<String>();\n        activeServices.add(\"hdfs\");\n        activeServices.add(\"mapred\");\n        cluster124.setActiveServices(activeServices);\n        \n        nodes = \"jt-node,nn-node,hostname-1,hostname-2,hostname-3,hostname-4,\"+\n                \"node-2,node-3,node-4\";  \n        cluster124.setNodes(nodes);\n        \n        rnm = new ArrayList<RoleToNodes>();\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"jobtracker-role\");\n        rnme.setNodes(\"jt-node\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"namenode-role\");\n        rnme.setNodes(\"nn-node\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"slaves-role\");\n        rnme.setNodes(\"hostname-1,hostname-2,hostname-3,hostname-4,\"+\n                      \"node-2,node-3,node-4\");\n        rnm.add(rnme);\n        \n        cluster124.setRoleToNodesMap(rnm);\n        try {\n            if (!clusterExists(cluster123.getName())) {\n                addCluster(cluster123.getName(), cluster123, false);\n            }\n            if (!clusterExists(cluster124.getName())) {\n                addCluster(cluster124.getName(), cluster124, false);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }","id":103811,"modified_method":"private Clusters() {\n        \n        /*\n         * Cluster definition \n         */\n        ClusterDefinition cluster123 = new ClusterDefinition();\n        \n        cluster123.setName(\"blue.dev.Cluster123\");\n        cluster123.setStackName(\"cluster123\");\n        cluster123.setStackRevision(\"0\");\n        cluster123.setDescription(\"cluster123 - development cluster\");\n        cluster123.setGoalState(ClusterState.CLUSTER_STATE_ATTIC);\n        List<String> activeServices = new ArrayList<String>();\n        activeServices.add(\"hdfs\");\n        //activeServices.add(\"mapred\");\n        cluster123.setActiveServices(activeServices);\n        \n        String nodes = \"jt-nodex,nn-nodex,hostname-1x,hostname-2x,hostname-3x,\"+\n                       \"hostname-4x,node-2x,node-3x,node-4x\";  \n        cluster123.setNodes(nodes);\n        \n        List<RoleToNodes> rnm = new ArrayList<RoleToNodes>();\n        \n        RoleToNodes rnme = new RoleToNodes();\n        rnme.setRoleName(\"jobtracker-role\");\n        rnme.setNodes(\"jt-nodex\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"namenode-role\");\n        rnme.setNodes(\"nn-nodex\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"slaves-role\");\n        rnme.setNodes(\"hostname-1x,hostname-2x,hostname-3x,\"+\n                       \"hostname-4x,node-2x,node-3x,node-4x\");\n        rnm.add(rnme);\n        \n        cluster123.setRoleToNodesMap(rnm);\n        \n        /*\n         * Cluster definition \n         */\n        ClusterDefinition cluster124 = new ClusterDefinition();\n        cluster124.setName(\"blue.research.Cluster124\");\n        cluster124.setStackName(\"cluster124\");\n        cluster124.setStackRevision(\"0\");\n        cluster124.setDescription(\"cluster124 - research cluster\");\n        cluster124.setGoalState(ClusterState.CLUSTER_STATE_INACTIVE);\n        activeServices = new ArrayList<String>();\n        activeServices.add(\"hdfs\");\n        //activeServices.add(\"mapred\");\n        cluster124.setActiveServices(activeServices);\n        \n        nodes = \"jt-node,nn-node,hostname-1,hostname-2,hostname-3,hostname-4,\"+\n                \"node-2,node-3,node-4\";  \n        cluster124.setNodes(nodes);\n        \n        rnm = new ArrayList<RoleToNodes>();\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"jobtracker-role\");\n        rnme.setNodes(\"jt-node\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"namenode-role\");\n        rnme.setNodes(\"nn-node\");\n        rnm.add(rnme);\n        \n        rnme = new RoleToNodes();\n        rnme.setRoleName(\"slaves-role\");\n        rnme.setNodes(\"hostname-1,hostname-2,hostname-3,hostname-4,\"+\n                      \"node-2,node-3,node-4\");\n        rnm.add(rnme);\n        \n        cluster124.setRoleToNodesMap(rnm);\n        try {\n            if (!clusterExists(cluster123.getName())) {\n                addCluster(cluster123.getName(), cluster123, false);\n            }\n            if (!clusterExists(cluster124.getName())) {\n                addCluster(cluster124.getName(), cluster124, false);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }","commit_id":"471a9d6e2a88d449a15cb6b6699626cc0a832eba","url":"https://github.com/apache/ambari"},{"original_method":"public void run() {\n    hbHandler = new HeartbeatHandler();      \n    server = new Server(CONTROLLER_PORT);\n\n    try {\n      Context root = new Context(server, \"/\", Context.SESSIONS);\n      String AMBARI_HOME = System.getenv(\"AMBARI_HOME\");\n      root.setBaseResource(new ResourceCollection(new Resource[]\n        {\n          Resource.newResource(AMBARI_HOME+\"/webapps/\")\n        }));\n      ServletHolder rootServlet = root.addServlet(DefaultServlet.class, \"/\");\n      rootServlet.setInitOrder(1);\n      \n      ServletHolder sh = new ServletHolder(ServletContainer.class);\n      sh.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\", \n        \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      sh.setInitParameter(\"com.sun.jersey.config.property.packages\", \n        \"org.apache.ambari.controller.rest.resources\");\n      sh.setInitParameter(\"com.sun.jersey.config.property.WadlGeneratorConfig\", \n        \"org.apache.ambari.controller.rest.config.ExtendedWadlGeneratorConfig\");\n      root.addServlet(sh, \"/rest/*\");\n      sh.setInitOrder(2);\n\n      ServletHolder agent = new ServletHolder(ServletContainer.class);\n      agent.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\", \n        \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      agent.setInitParameter(\"com.sun.jersey.config.property.packages\", \n        \"org.apache.ambari.controller.rest.agent\");\n      agent.setInitParameter(\"com.sun.jersey.config.property.WadlGeneratorConfig\", \n        \"org.apache.ambari.controller.rest.config.PrivateWadlGeneratorConfig\");\n      root.addServlet(agent, \"/agent/*\");\n      agent.setInitOrder(3);\n\n      Constraint constraint = new Constraint();\n      constraint.setName(Constraint.__BASIC_AUTH);;\n      constraint.setRoles(new String[]{\"user\",\"admin\",\"moderator\"});\n      constraint.setAuthenticate(true);\n       \n      ConstraintMapping cm = new ConstraintMapping();\n      cm.setConstraint(constraint);\n      cm.setPathSpec(\"/agent/*\");\n      \n      SecurityHandler security = new SecurityHandler();\n      security.setUserRealm(new HashUserRealm(\"Controller\",\n          System.getenv(\"AMBARI_CONF_DIR\")+\"/auth.conf\"));\n      security.setConstraintMappings(new ConstraintMapping[]{cm});\n\n      root.addHandler(security);\n      server.setStopAtShutdown(true);\n      \n      /*\n       * Initialize the resources \n       */\n      Clusters clustersCtx = Clusters.getInstance();\n      Stacks stacksCtx = Stacks.getInstance();\n      Nodes nodesCtx = Nodes.getInstance();\n      \n      /*\n       *  Recover controller state for Clusters, Stacks and Nodes before \n       *  opening up the server to clients\n       */\n      clustersCtx.recoverClustersStateAfterRestart();\n      stacksCtx.recoverStacksAfterRestart();\n      \n      /*\n       * Start the server after controller state is recovered.\n       */\n      server.start();\n    } catch (Exception e) {\n      LOG.error(ExceptionUtil.getStackTrace(e));\n    }\n  }","id":103812,"modified_method":"public void run() {\n    hbHandler = new HeartbeatHandler();      \n    server = new Server(CONTROLLER_PORT);\n\n    try {\n      Context root = new Context(server, \"/\", Context.SESSIONS);\n      String AMBARI_HOME = System.getenv(\"AMBARI_HOME\");\n      root.setBaseResource(new ResourceCollection(new Resource[]\n        {\n          Resource.newResource(AMBARI_HOME+\"/webapps/\")\n        }));\n      ServletHolder rootServlet = root.addServlet(DefaultServlet.class, \"/\");\n      rootServlet.setInitOrder(1);\n      \n      ServletHolder sh = new ServletHolder(ServletContainer.class);\n      sh.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\", \n        \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      sh.setInitParameter(\"com.sun.jersey.config.property.packages\", \n        \"org.apache.ambari.controller.rest.resources\");\n      sh.setInitParameter(\"com.sun.jersey.config.property.WadlGeneratorConfig\", \n        \"org.apache.ambari.controller.rest.config.ExtendedWadlGeneratorConfig\");\n      root.addServlet(sh, \"/rest/*\");\n      sh.setInitOrder(2);\n\n      ServletHolder agent = new ServletHolder(ServletContainer.class);\n      agent.setInitParameter(\"com.sun.jersey.config.property.resourceConfigClass\", \n        \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      agent.setInitParameter(\"com.sun.jersey.config.property.packages\", \n        \"org.apache.ambari.controller.rest.agent\");\n      agent.setInitParameter(\"com.sun.jersey.config.property.WadlGeneratorConfig\", \n        \"org.apache.ambari.controller.rest.config.PrivateWadlGeneratorConfig\");\n      root.addServlet(agent, \"/agent/*\");\n      agent.setInitOrder(3);\n\n      Constraint constraint = new Constraint();\n      constraint.setName(Constraint.__BASIC_AUTH);;\n      constraint.setRoles(new String[]{\"user\",\"admin\",\"moderator\"});\n      constraint.setAuthenticate(true);\n       \n      ConstraintMapping cm = new ConstraintMapping();\n      cm.setConstraint(constraint);\n      cm.setPathSpec(\"/agent/*\");\n      \n      SecurityHandler security = new SecurityHandler();\n      security.setUserRealm(new HashUserRealm(\"Controller\",\n          System.getenv(\"AMBARI_CONF_DIR\")+\"/auth.conf\"));\n      security.setConstraintMappings(new ConstraintMapping[]{cm});\n\n      root.addHandler(security);\n      server.setStopAtShutdown(true);\n      \n      /*\n       * Initialize the resources \n       */\n      Clusters clustersCtx = Clusters.getInstance();\n      Stacks stacksCtx = Stacks.getInstance();\n      Nodes nodesCtx = Nodes.getInstance();\n      \n      /*\n       *  Recover controller state before oopening up the server to clients\n       *  Restore stacks before clusters\n       */\n      stacksCtx.recoverStacksAfterRestart();\n      clustersCtx.recoverClustersStateAfterRestart();\n      \n      /*\n       * Start the server after controller state is recovered.\n       */\n      server.start();\n    } catch (Exception e) {\n      LOG.error(ExceptionUtil.getStackTrace(e));\n    }\n  }","commit_id":"471a9d6e2a88d449a15cb6b6699626cc0a832eba","url":"https://github.com/apache/ambari"},{"original_method":"public boolean stackExists(String stackName) {\n        if (!this.stacks.containsKey(stackName)) {  \n            return false;\n        } \n        return true;\n    }","id":103813,"modified_method":"public boolean stackExists(String stackName) throws IOException {\n        if (!this.stacks.containsKey(stackName) &&\n             !this.dataStore.stackExists(stackName)) {  \n            return false;\n        } \n        return true;\n    }","commit_id":"471a9d6e2a88d449a15cb6b6699626cc0a832eba","url":"https://github.com/apache/ambari"},{"original_method":"private Stacks() {\n      try {\n        JAXBContext jaxbContext = \n            JAXBContext.newInstance(\"org.apache.ambari.common.rest.entities\");\n        loadDummyStack(jaxbContext, \"hadoop-security\", 0);\n        loadDummyStack(jaxbContext, \"cluster123\", 0);\n        loadDummyStack(jaxbContext, \"cluster124\", 0);\n        //loadDummyStack(jaxbContext, \"puppet1\", 0);\n      } catch (JAXBException e) {\n        throw new RuntimeException(\"Can't create jaxb context\", e);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Can't create jaxb context\", e);\n      }\n    }","id":103814,"modified_method":"private Stacks() {\n      try {\n        JAXBContext jaxbContext = \n            JAXBContext.newInstance(\"org.apache.ambari.common.rest.entities\");\n        if (!this.dataStore.stackExists(\"hadoop-security\")) {\n            loadDummyStack(jaxbContext, \"hadoop-security\", 0);\n        }\n        if (!this.dataStore.stackExists(\"cluster123\")) {\n            loadDummyStack(jaxbContext, \"cluster123\", 0);\n        }\n        if (!this.dataStore.stackExists(\"cluster124\")) {\n            loadDummyStack(jaxbContext, \"cluster124\", 0);\n        }\n        //loadDummyStack(jaxbContext, \"puppet1\", 0);\n      } catch (JAXBException e) {\n        throw new RuntimeException(\"Can't create jaxb context\", e);\n      } catch (Exception e) {\n        throw new RuntimeException(\"Can't create jaxb context\", e);\n      }\n    }","commit_id":"471a9d6e2a88d449a15cb6b6699626cc0a832eba","url":"https://github.com/apache/ambari"},{"original_method":"private final Path findJettyBasePath()\n    {\n        // If a jetty property is defined, use it\n        Prop prop = this.props.getProp(BaseHome.JETTY_BASE,false);\n        if (prop != null && !isEmpty(prop.value))\n        {\n            return FS.toPath(prop.value);\n        }\n\n        // If a system property is defined, use it\n        String val = System.getProperty(BaseHome.JETTY_BASE);\n        if (!isEmpty(val))\n        {\n            return FS.toPath(val);\n        }\n\n        // Lastly, fall back to base == home\n        Path base = this.homePath.toAbsolutePath();\n        setProperty(BaseHome.JETTY_BASE,base.toString(),ORIGIN_INTERNAL_FALLBACK);\n        return base;\n    }","id":103815,"modified_method":"private final Path findJettyBasePath()\n    {\n        // If a jetty property is defined, use it\n        Prop prop = this.props.getProp(BaseHome.JETTY_BASE,false);\n        if (prop != null && !isEmpty(prop.value))\n        {\n            return FS.toPath(prop.value);\n        }\n\n        // If a system property is defined, use it\n        String val = System.getProperty(BaseHome.JETTY_BASE);\n        if (!isEmpty(val))\n        {\n            return FS.toPath(val);\n        }\n\n        // Lastly, fall back to base == ${user.dir}\n        Path base = FS.toPath(this.props.getString(\"user.dir\",\".\"));\n        setProperty(BaseHome.JETTY_BASE,base.toString(),ORIGIN_INTERNAL_FALLBACK);\n        return base;\n    }","commit_id":"41ab91988b7770aea374556e08e20bb2ec984135","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\r\n     * Given a provided StartArgs, assert that the configuration it has determined is valid based on values in a assert text file.\r\n     * \r\n     * @param baseHome\r\n     *            the BaseHome used. Access it via {@link Main#getBaseHome()}\r\n     * @param args\r\n     *            the StartArgs that has been processed via {@link Main#processCommandLine(String[])}\r\n     * @param filename\r\n     *            the filename of the assertion values\r\n     * @throws IOException\r\n     */\r\n    public static void assertConfiguration(BaseHome baseHome, StartArgs args, String filename) throws FileNotFoundException, IOException\r\n    {\r\n        File testResourcesDir = MavenTestingUtils.getTestResourcesDir();\r\n        File file = MavenTestingUtils.getTestResourceFile(filename);\r\n        TextFile textFile = new TextFile(file);\r\n\r\n        // Validate XMLs (order is important)\r\n        List<String> expectedXmls = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"XML|\"))\r\n            {\r\n                expectedXmls.add(FS.separators(getValue(line)));\r\n            }\r\n        }\r\n        List<String> actualXmls = new ArrayList<>();\r\n        for (Path xml : args.getXmlFiles())\r\n        {\r\n            actualXmls.add(shorten(baseHome,xml,testResourcesDir));\r\n        }\r\n        assertOrdered(\"XML Resolution Order\",expectedXmls,actualXmls);\r\n\r\n        // Validate LIBs (order is not important)\r\n        List<String> expectedLibs = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"LIB|\"))\r\n            {\r\n                expectedLibs.add(FS.separators(getValue(line)));\r\n            }\r\n        }\r\n        List<String> actualLibs = new ArrayList<>();\r\n        for (File path : args.getClasspath())\r\n        {\r\n            actualLibs.add(shorten(baseHome,path.toPath(),testResourcesDir));\r\n        }\r\n        assertContainsUnordered(\"Libs\",expectedLibs,actualLibs);\r\n\r\n        // Validate PROPERTIES (order is not important)\r\n        Set<String> expectedProperties = new HashSet<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"PROP|\"))\r\n            {\r\n                expectedProperties.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualProperties = new ArrayList<>();\r\n        for (Prop prop : args.getProperties())\r\n        {\r\n            String name = prop.key;\r\n            if (\"jetty.home\".equals(name) || \"jetty.base\".equals(name) || prop.origin.equals(Props.ORIGIN_SYSPROP))\r\n            {\r\n                // strip these out from assertion, to make assertions easier.\r\n                continue;\r\n            }\r\n            actualProperties.add(prop.key + \"=\" + args.getProperties().expand(prop.value));\r\n        }\r\n        assertContainsUnordered(\"Properties\",expectedProperties,actualProperties);\r\n\r\n        // Validate Downloads\r\n        List<String> expectedDownloads = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"DOWNLOAD|\"))\r\n            {\r\n                expectedDownloads.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualDownloads = new ArrayList<>();\r\n        for (FileArg darg : args.getFiles())\r\n        {\r\n            if (darg.uri != null)\r\n            {\r\n                actualDownloads.add(String.format(\"%s:%s\",darg.uri,darg.location));\r\n            }\r\n        }\r\n        assertContainsUnordered(\"Downloads\",expectedDownloads,actualDownloads);\r\n        \r\n        // Validate Files/Dirs creation\r\n        List<String> expectedFiles = new ArrayList<>();\r\n        for(String line: textFile)\r\n        {\r\n            if(line.startsWith(\"FILE|\"))\r\n            {\r\n                expectedFiles.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualFiles = new ArrayList<>();\r\n        for(FileArg farg: args.getFiles())\r\n        {\r\n            if(farg.uri == null)\r\n            {\r\n                actualFiles.add(farg.location);\r\n            }\r\n        }\r\n        assertContainsUnordered(\"Files/Dirs\",expectedFiles,actualFiles);\r\n    }","id":103816,"modified_method":"/**\r\n     * Given a provided StartArgs, assert that the configuration it has determined is valid based on values in a assert text file.\r\n     * \r\n     * @param baseHome\r\n     *            the BaseHome used. Access it via {@link Main#getBaseHome()}\r\n     * @param args\r\n     *            the StartArgs that has been processed via {@link Main#processCommandLine(String[])}\r\n     * @param filename\r\n     *            the filename of the assertion values\r\n     * @throws IOException\r\n     */\r\n    public static void assertConfiguration(BaseHome baseHome, StartArgs args, String filename) throws FileNotFoundException, IOException\r\n    {\r\n        File testResourcesDir = MavenTestingUtils.getTestResourcesDir();\r\n        File file = MavenTestingUtils.getTestResourceFile(filename);\r\n        TextFile textFile = new TextFile(file);\r\n\r\n        // Validate XMLs (order is important)\r\n        List<String> expectedXmls = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"XML|\"))\r\n            {\r\n                expectedXmls.add(FS.separators(getValue(line)));\r\n            }\r\n        }\r\n        List<String> actualXmls = new ArrayList<>();\r\n        for (Path xml : args.getXmlFiles())\r\n        {\r\n            actualXmls.add(shorten(baseHome,xml,testResourcesDir));\r\n        }\r\n        assertOrdered(\"XML Resolution Order\",expectedXmls,actualXmls);\r\n\r\n        // Validate LIBs (order is not important)\r\n        List<String> expectedLibs = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"LIB|\"))\r\n            {\r\n                expectedLibs.add(FS.separators(getValue(line)));\r\n            }\r\n        }\r\n        List<String> actualLibs = new ArrayList<>();\r\n        for (File path : args.getClasspath())\r\n        {\r\n            actualLibs.add(shorten(baseHome,path.toPath(),testResourcesDir));\r\n        }\r\n        assertContainsUnordered(\"Libs\",expectedLibs,actualLibs);\r\n\r\n        // Validate PROPERTIES (order is not important)\r\n        Set<String> expectedProperties = new HashSet<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"PROP|\"))\r\n            {\r\n                expectedProperties.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualProperties = new ArrayList<>();\r\n        for (Prop prop : args.getProperties())\r\n        {\r\n            String name = prop.key;\r\n            if (\"jetty.home\".equals(name) || \"jetty.base\".equals(name) ||\r\n                \"user.dir\".equals(name) || prop.origin.equals(Props.ORIGIN_SYSPROP))\r\n            {\r\n                // strip these out from assertion, to make assertions easier.\r\n                continue;\r\n            }\r\n            actualProperties.add(prop.key + \"=\" + args.getProperties().expand(prop.value));\r\n        }\r\n        assertContainsUnordered(\"Properties\",expectedProperties,actualProperties);\r\n\r\n        // Validate Downloads\r\n        List<String> expectedDownloads = new ArrayList<>();\r\n        for (String line : textFile)\r\n        {\r\n            if (line.startsWith(\"DOWNLOAD|\"))\r\n            {\r\n                expectedDownloads.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualDownloads = new ArrayList<>();\r\n        for (FileArg darg : args.getFiles())\r\n        {\r\n            if (darg.uri != null)\r\n            {\r\n                actualDownloads.add(String.format(\"%s:%s\",darg.uri,darg.location));\r\n            }\r\n        }\r\n        assertContainsUnordered(\"Downloads\",expectedDownloads,actualDownloads);\r\n        \r\n        // Validate Files/Dirs creation\r\n        List<String> expectedFiles = new ArrayList<>();\r\n        for(String line: textFile)\r\n        {\r\n            if(line.startsWith(\"FILE|\"))\r\n            {\r\n                expectedFiles.add(getValue(line));\r\n            }\r\n        }\r\n        List<String> actualFiles = new ArrayList<>();\r\n        for(FileArg farg: args.getFiles())\r\n        {\r\n            if(farg.uri == null)\r\n            {\r\n                actualFiles.add(farg.location);\r\n            }\r\n        }\r\n        assertContainsUnordered(\"Files/Dirs\",expectedFiles,actualFiles);\r\n    }","commit_id":"41ab91988b7770aea374556e08e20bb2ec984135","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testWithCommandLine() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n\n        File homePath = MavenTestingUtils.getTestResourceDir(\"usecases/home\");\n        cmdLineArgs.add(\"jetty.home=\" + homePath);\n        \n        // JVM args\n        cmdLineArgs.add(\"--exec\");\n        cmdLineArgs.add(\"-Xms1024m\");\n        cmdLineArgs.add(\"-Xmx1024m\");\n        \n        // Arbitrary Libs\n        File extraJar = MavenTestingUtils.getTestResourceFile(\"extra-libs/example.jar\");\n        File extraDir = MavenTestingUtils.getTestResourceDir(\"extra-resources\");\n        cmdLineArgs.add(String.format(\"--lib=%s%s%s\",extraJar.getAbsolutePath(),File.pathSeparatorChar,extraDir.getAbsolutePath()));\n\n        // Arbitrary XMLs\n        cmdLineArgs.add(\"jetty.xml\");\n        cmdLineArgs.add(\"jetty-jmx.xml\");\n        cmdLineArgs.add(\"jetty-logging.xml\");\n\n        Main main = new Main();\n\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        \n        Assert.assertThat(\"jetty.home\", baseHome.getHome(), is(homePath.getAbsolutePath()));\n        Assert.assertThat(\"jetty.base\", baseHome.getBase(), is(homePath.getAbsolutePath()));\n\n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home-with-jvm.txt\");\n    }","id":103817,"modified_method":"@Test\n    public void testWithCommandLine() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n\n        File homePath = MavenTestingUtils.getTestResourceDir(\"usecases/home\").getAbsoluteFile();\n        cmdLineArgs.add(\"jetty.home=\" + homePath);\n        cmdLineArgs.add(\"user.dir=\" + homePath);\n        \n        // JVM args\n        cmdLineArgs.add(\"--exec\");\n        cmdLineArgs.add(\"-Xms1024m\");\n        cmdLineArgs.add(\"-Xmx1024m\");\n        \n        // Arbitrary Libs\n        File extraJar = MavenTestingUtils.getTestResourceFile(\"extra-libs/example.jar\");\n        File extraDir = MavenTestingUtils.getTestResourceDir(\"extra-resources\");\n        cmdLineArgs.add(String.format(\"--lib=%s%s%s\",extraJar.getAbsolutePath(),File.pathSeparatorChar,extraDir.getAbsolutePath()));\n\n        // Arbitrary XMLs\n        cmdLineArgs.add(\"jetty.xml\");\n        cmdLineArgs.add(\"jetty-jmx.xml\");\n        cmdLineArgs.add(\"jetty-logging.xml\");\n\n        Main main = new Main();\n\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        \n        Assert.assertThat(\"jetty.home\", baseHome.getHome(), is(homePath.getAbsolutePath()));\n        Assert.assertThat(\"jetty.base\", baseHome.getBase(), is(homePath.getAbsolutePath()));\n\n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home-with-jvm.txt\");\n    }","commit_id":"41ab91988b7770aea374556e08e20bb2ec984135","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBasicProcessing() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n        File testJettyHome = MavenTestingUtils.getTestResourceDir(\"usecases/home\");\n        cmdLineArgs.add(\"jetty.home=\" + testJettyHome);\n        cmdLineArgs.add(\"jetty.port=9090\");\n\n        Main main = new Main();\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        System.err.println(args);\n\n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home.txt\");\n    }","id":103818,"modified_method":"@Test\n    public void testBasicProcessing() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n        File testJettyHome = MavenTestingUtils.getTestResourceDir(\"usecases/home\").getAbsoluteFile();\n        cmdLineArgs.add(\"user.dir=\" + testJettyHome);\n        cmdLineArgs.add(\"jetty.home=\" + testJettyHome);\n        cmdLineArgs.add(\"jetty.port=9090\");\n\n        Main main = new Main();\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        System.err.println(args);\n\n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home.txt\");\n    }","commit_id":"41ab91988b7770aea374556e08e20bb2ec984135","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testJettyHomeWithSpaces() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n\n        File homePath = MavenTestingUtils.getTestResourceDir(\"jetty home with spaces\");\n        cmdLineArgs.add(\"jetty.home=\" + homePath);\n\n        Main main = new Main();\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        \n        Assert.assertThat(\"jetty.home\", baseHome.getHome(), is(homePath.getAbsolutePath()));\n        Assert.assertThat(\"jetty.base\", baseHome.getBase(), is(homePath.getAbsolutePath()));\n        \n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home-with-spaces.txt\");\n    }","id":103819,"modified_method":"@Test\n    public void testJettyHomeWithSpaces() throws Exception\n    {\n        List<String> cmdLineArgs = new ArrayList<>();\n\n        File homePath = MavenTestingUtils.getTestResourceDir(\"jetty home with spaces\").getAbsoluteFile();\n        cmdLineArgs.add(\"user.dir=\" + homePath);\n        cmdLineArgs.add(\"jetty.home=\" + homePath);\n\n        Main main = new Main();\n        StartArgs args = main.processCommandLine(cmdLineArgs.toArray(new String[cmdLineArgs.size()]));\n        BaseHome baseHome = main.getBaseHome();\n        \n        Assert.assertThat(\"jetty.home\", baseHome.getHome(), is(homePath.getAbsolutePath()));\n        Assert.assertThat(\"jetty.base\", baseHome.getBase(), is(homePath.getAbsolutePath()));\n        \n        ConfigurationAssert.assertConfiguration(baseHome,args,\"assert-home-with-spaces.txt\");\n    }","commit_id":"41ab91988b7770aea374556e08e20bb2ec984135","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public static List<File> getJavacServerClasspath(String sdkHome) {\n    final Set<File> cp = new LinkedHashSet<File>();\n    cp.add(getResourcePath(JavacServer.class)); // self\n    // util\n    for (String path : PathManager.getUtilClassPath()) {\n      cp.add(new File(path));\n    }\n    cp.add(getResourcePath(Message.class)); // protobuf\n    cp.add(getResourcePath(Version.class)); // netty\n\n    final Class<StandardJavaFileManager> optimizedFileManagerClass = getOptimizedFileManagerClass();\n    if (optimizedFileManagerClass != null) {\n      cp.add(getResourcePath(optimizedFileManagerClass));  // optimizedFileManager, if applicable\n    }\n\n    try {\n      final Class<?> cmdLineWrapper = Class.forName(\"com.intellij.rt.execution.CommandLineWrapper\");\n      cp.add(getResourcePath(cmdLineWrapper));  // idea_rt.jar\n    }\n    catch (Throwable th) {\n      LOG.info(th);\n    }\n\n    final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler();\n    if (systemCompiler != null) {\n      try {\n        final String localJarPath = FileUtil.toSystemIndependentName(getResourcePath(systemCompiler.getClass()).getPath());\n        final String localJavaHome = SystemProperties.getJavaHome();\n        String relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(localJavaHome), localJarPath, '/');\n        if (relPath != null) {\n          if (relPath.contains(\"..\")) {\n            relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/');\n          }\n          if (relPath != null) {\n            final File targetFile = new File(sdkHome +\"/\" +relPath);\n            cp.add(targetFile);  // tools.jar\n          }\n        }\n      }\n      catch (Throwable th) {\n        LOG.info(th);\n      }\n    }\n\n    return new ArrayList<File>(cp);\n  }","id":103820,"modified_method":"public static List<File> getJavacServerClasspath(String sdkHome) {\n    final Set<File> cp = new LinkedHashSet<File>();\n    cp.add(getResourcePath(JavacServer.class)); // self\n    // util\n    for (String path : PathManager.getUtilClassPath()) {\n      cp.add(new File(path));\n    }\n    cp.add(getResourcePath(Message.class)); // protobuf\n    cp.add(getResourcePath(Version.class)); // netty\n\n    final Class<StandardJavaFileManager> optimizedFileManagerClass = getOptimizedFileManagerClass();\n    if (optimizedFileManagerClass != null) {\n      cp.add(getResourcePath(optimizedFileManagerClass));  // optimizedFileManager, if applicable\n    }\n\n    try {\n      final Class<?> cmdLineWrapper = Class.forName(\"com.intellij.rt.execution.CommandLineWrapper\");\n      cp.add(getResourcePath(cmdLineWrapper));  // idea_rt.jar\n    }\n    catch (Throwable th) {\n      LOG.info(th);\n    }\n\n    final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler();\n    if (systemCompiler != null) {\n      try {\n        final String localJarPath = FileUtil.toSystemIndependentName(getResourcePath(systemCompiler.getClass()).getPath());\n        final String localJavaHome = FileUtil.toSystemIndependentName(SystemProperties.getJavaHome());\n        if (FileUtil.pathsEqual(localJavaHome, FileUtil.toSystemIndependentName(sdkHome))) {\n          cp.add(new File(localJarPath));\n        }\n        else {\n          // sdkHome is not the same as the sdk used to run this process\n          final File candidate = new File(sdkHome, \"lib/tools.jar\");\n          if (candidate.exists()) {\n            cp.add(candidate);\n          }\n          else {\n            // last resort\n            String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/');\n            if (relPath != null) {\n              if (relPath.contains(\"..\")) {\n                relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/');\n              }\n              if (relPath != null) {\n                final File targetFile = new File(sdkHome, relPath);\n                cp.add(targetFile);  // tools.jar\n              }\n            }\n          }\n        }\n      }\n      catch (Throwable th) {\n        LOG.info(th);\n      }\n    }\n\n    return new ArrayList<File>(cp);\n  }","commit_id":"d06f2296c4401fd3cf1235e0ef7dd3ddc625c4b6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n         * Authorizes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void authorize(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Client ec2Client = service.getContext().unwrap(EC2ApiMetadata.CONTEXT_TOKEN).getApi();\n            String groupName = \"jclouds#\" + node.getGroup();\n            for (int port : ports) {\n                try {\n                    ec2Client.getSecurityGroupServices()\n                            .authorizeSecurityGroupIngressInRegion(region, groupName,\n                                    IpProtocol.TCP, port, port, source);\n                } catch (IllegalStateException e) {\n                    //noop\n                }\n            }\n        }","id":103821,"modified_method":"/**\n         * Authorizes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void authorize(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Api ec2Api = service.getContext().unwrapApi(EC2Api.class);\n            String groupName = \"jclouds#\" + node.getGroup();\n            for (int port : ports) {\n                try {\n                    ec2Api.getSecurityGroupApi().get()\n                        .authorizeSecurityGroupIngressInRegion(region, groupName,\n                        IpProtocol.TCP, port, port, source);\n                } catch (IllegalStateException e) {\n                    //noop\n                }\n            }\n        }","commit_id":"e2544697d389b52d0bfc770dc8a379013f87c76e","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n        public boolean supports(ComputeService computeService) {\n            return EC2ApiMetadata.CONTEXT_TOKEN.isAssignableFrom(computeService.getContext().getBackendType());\n        }","id":103822,"modified_method":"@Override\n        public boolean supports(ComputeService computeService) {\n            return EC2ComputeService.class.isInstance(computeService);\n        }","commit_id":"e2544697d389b52d0bfc770dc8a379013f87c76e","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n         * Revokes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void revoke(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Client ec2Client = service.getContext().unwrap(EC2ApiMetadata.CONTEXT_TOKEN).getApi();\n            String groupName = \"jclouds#\" + node.getGroup() + \"#\" + region;\n            for (int port : ports) {\n                try {\n                    ec2Client.getSecurityGroupServices()\n                            .revokeSecurityGroupIngressInRegion(region, groupName,\n                                    IpProtocol.TCP, port, port, source);\n                } catch (IllegalStateException e) {\n                    //noop\n                }\n            }\n        }","id":103823,"modified_method":"/**\n         * Revokes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void revoke(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Api ec2Api = service.getContext().unwrapApi(EC2Api.class);\n            String groupName = \"jclouds#\" + node.getGroup() + \"#\" + region;\n            for (int port : ports) {\n                try {\n                    ec2Api.getSecurityGroupApi().get()\n                            .revokeSecurityGroupIngressInRegion(region, groupName,\n                            IpProtocol.TCP, port, port, source);\n                } catch (IllegalStateException e) {\n                    //noop\n                }\n            }\n        }","commit_id":"e2544697d389b52d0bfc770dc8a379013f87c76e","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n         * Removes all rules.\n         */\n        @Override\n        public void flush(ComputeService service, NodeMetadata node) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Client ec2Client = service.getContext().unwrap(EC2ApiMetadata.CONTEXT_TOKEN).getApi();\n            String groupName = \"jclouds#\" + node.getGroup() + \"#\" + region;\n            Set<SecurityGroup> matchedSecurityGroups = ec2Client.getSecurityGroupServices().describeSecurityGroupsInRegion(region, groupName);\n            for (SecurityGroup securityGroup : matchedSecurityGroups) {\n                for (IpPermission ipPermission : securityGroup) {\n                    for (String cdr : ipPermission.getIpRanges()) {\n                        ec2Client.getSecurityGroupServices().revokeSecurityGroupIngressInRegion(region, groupName,\n                                IpProtocol.TCP, ipPermission.getFromPort(), ipPermission.getToPort(),\n                                cdr\n                        );\n                    }\n                }\n            }\n            //We want at least ssh access from everywhere.\n            authorize(service, node, \"0.0.0.0/0\", 22);\n        }","id":103824,"modified_method":"/**\n         * Removes all rules.\n         */\n        @Override\n        public void flush(ComputeService service, NodeMetadata node) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            EC2Api ec2Api = service.getContext().unwrapApi(EC2Api.class);\n            String groupName = \"jclouds#\" + node.getGroup() + \"#\" + region;\n            Set<SecurityGroup> matchedSecurityGroups = ec2Api.getSecurityGroupApi().get().describeSecurityGroupsInRegion(region, groupName);\n            for (SecurityGroup securityGroup : matchedSecurityGroups) {\n                for (IpPermission ipPermission : securityGroup) {\n                    for (String cdr : ipPermission.getCidrBlocks()) {\n                        ec2Api.getSecurityGroupApi().get().revokeSecurityGroupIngressInRegion(region, groupName,\n                                IpProtocol.TCP, ipPermission.getFromPort(), ipPermission.getToPort(),\n                                cdr\n                        );\n                    }\n                }\n            }\n            //We want at least ssh access from everywhere.\n            authorize(service, node, \"0.0.0.0/0\", 22);\n        }","commit_id":"e2544697d389b52d0bfc770dc8a379013f87c76e","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n         * Authorizes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void authorize(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            Optional<? extends SecurityGroupApi> securityGroupApi = getSecurityGroup(service, region);\n\n            if (securityGroupApi.isPresent()) {\n                String groupName = \"jclouds-\" + node.getGroup();\n                Optional<? extends SecurityGroup> securityGroup = getSecurityGroupForGroup(securityGroupApi.get(), groupName);\n                if (securityGroup.isPresent()) {\n                    for (int port : ports) {\n                        try {\n                            securityGroupApi.get().createRuleAllowingCidrBlock(securityGroup.get().getId(),\n                                    Ingress.builder()\n                                            .ipProtocol(org.jclouds.openstack.nova.v2_0.domain.IpProtocol.TCP)\n                                            .fromPort(port).toPort(port).build(),\n                                    source);\n                        } catch (IllegalStateException e) {\n                            //noop\n                        }\n                    }\n                }\n            }\n        }","id":103825,"modified_method":"/**\n         * Authorizes access to the specified ports of the node, from the specified source.\n         */\n        @Override\n        public void authorize(ComputeService service, NodeMetadata node, String source, int... ports) {\n            String region = AWSUtils.parseHandle(node.getId())[0];\n            Optional<? extends SecurityGroupApi> securityGroupApi = getSecurityGroup(service, region);\n\n            if (securityGroupApi.isPresent()) {\n                String groupName = \"jclouds-\" + node.getGroup();\n                Optional<? extends SecurityGroup> securityGroup = getSecurityGroupForGroup(securityGroupApi.get(), groupName);\n                if (securityGroup.isPresent()) {\n                    for (int port : ports) {\n                        try {\n                            securityGroupApi.get().createRuleAllowingCidrBlock(securityGroup.get().getId(),\n                                    Ingress.builder()\n                                            .ipProtocol(IpProtocol.TCP)\n                                            .fromPort(port).toPort(port).build(),\n                                    source);\n                        } catch (IllegalStateException e) {\n                            //noop\n                        }\n                    }\n                }\n            }\n        }","commit_id":"e2544697d389b52d0bfc770dc8a379013f87c76e","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public CloneableIterator<byte[]> keys(final boolean up, final byte[] firstKey) throws IOException {\n        synchronized (this.backend) {\n            return new MergeIterator<byte[]>(\n                    this.buffer.keys(up, firstKey),\n                    this.backend.keys(up, firstKey),\n                    this.buffer.rowdef.getOrdering(),\n                    MergeIterator.simpleMerge,\n                    true);\n        }\n    }","id":103826,"modified_method":"@Override\n    public CloneableIterator<byte[]> keys(final boolean up, final byte[] firstKey) throws IOException {\n        synchronized (this.backend) {\n            CloneableIterator<byte[]> a = this.buffer.keys(up, firstKey);\n            CloneableIterator<byte[]> b = this.backend.keys(up, firstKey);\n            if (b == null) return a;\n            if (a == null) return b;\n            return new MergeIterator<byte[]>(a, b, this.buffer.rowdef.getOrdering(), MergeIterator.simpleMerge, true);\n        }\n    }","commit_id":"e18a4f6b748535ba8d0ff91acfffa5bb394adc35","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Override\n    public Iterator<byte[]> iterator() {\n        try {\n            return this.urlIndexFile.keys(true, null);\n        } catch (final IOException e) {\n            Log.logException(e);\n            return null;\n        }\n    }","id":103827,"modified_method":"@Override\n    public Iterator<byte[]> iterator() {\n    \tCloneableIterator<byte[]> a = null;\n    \tif (this.urlIndexFile != null) try {a = this.urlIndexFile.keys(true, null);} catch (IOException e) {}\n    \tfinal Iterator<String> idi = this.solr.iterator();\n    \tCloneableIterator<byte[]> b = new CloneableIterator<byte[]>() {\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn idi.hasNext();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic byte[] next() {\n\t\t\t\tString s = idi.next();\n\t\t\t\treturn s == null ? null : ASCII.getBytes(s);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic CloneableIterator<byte[]> clone(Object modifier) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void close() {\n\t\t\t}\n    \t};\n    \tif (a == null) return b;\n        return new MergeIterator<byte[]>(a, b,\n                URIMetadataRow.rowdef.objectOrder,\n                MergeIterator.simpleMerge,\n                true);\n    }","commit_id":"780f8974e760c7177d3ec4395fd711f01a7fee33","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public CloneableIterator<URIMetadata> entries() throws IOException {\n        // enumerates entry elements\n        return new kiter();\n    }","id":103828,"modified_method":"public CloneableIterator<URIMetadata> entries() {\n        // enumerates entry elements\n    \tfinal Iterator<byte[]> ids = iterator();\n        return new CloneableIterator<URIMetadata>() {\n            @Override\n            public CloneableIterator<URIMetadata> clone(final Object secondHash) {\n                return this;\n            }\n            @Override\n            public final boolean hasNext() {\n                return ids.hasNext();\n            }\n            @Override\n            public final URIMetadata next() {\n                byte[] id = ids.next();\n                if (id == null) return null;\n                return getMetadata(id);\n            }\n            @Override\n            public final void remove() {\n                ids.remove();\n            }\n            @Override\n            public void close() {\n            }\n        };\n    }","commit_id":"780f8974e760c7177d3ec4395fd711f01a7fee33","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * using a fragment of the url hash (5 bytes: bytes 6 to 10) it is possible to address all urls from a specific domain\n     * here such a fragment can be used to delete all these domains at once\n     * @param hosthash\n     * @return number of deleted domains\n     * @throws IOException\n     */\n    public int deleteDomain(final String hosthash) throws IOException {\n        // first collect all url hashes that belong to the domain\n        assert hosthash.length() == 6;\n        final ArrayList<String> l = new ArrayList<String>();\n        synchronized (this) {\n            final CloneableIterator<byte[]> i = this.urlIndexFile.keys(true, null);\n            String hash;\n            while (i != null && i.hasNext()) {\n                hash = ASCII.String(i.next());\n                if (hosthash.equals(hash.substring(6))) l.add(hash);\n            }\n        }\n\n        // then delete the urls using this list\n        int cnt = 0;\n        for (final String h: l) {\n            if (this.urlIndexFile.delete(ASCII.getBytes(h))) cnt++;\n        }\n\n        // finally remove the line with statistics\n        if (this.statsDump != null) {\n            final Iterator<HostStat> hsi = this.statsDump.iterator();\n            HostStat hs;\n            while (hsi.hasNext()) {\n                hs = hsi.next();\n                if (hs.hosthash.equals(hosthash)) {\n                    hsi.remove();\n                    break;\n                }\n            }\n        }\n\n        return cnt;\n    }","id":103829,"modified_method":"/**\n     * using a fragment of the url hash (5 bytes: bytes 6 to 10) it is possible to address all urls from a specific domain\n     * here such a fragment can be used to delete all these domains at once\n     * @param hosthash\n     * @return number of deleted domains\n     * @throws IOException\n     */\n    public int deleteDomain(final String hosthash) throws IOException {\n        // first collect all url hashes that belong to the domain\n        assert hosthash.length() == 6;\n        // delete in solr\n        this.solr.deleteByQuery(YaCySchema.host_id_s.name() + \":\\\"\" + hosthash + \"\\\"\");\n        \n        // delete in old metadata structure\n        final ArrayList<String> l = new ArrayList<String>();\n        synchronized (this) {\n            final CloneableIterator<byte[]> i = this.urlIndexFile.keys(true, null);\n            String hash;\n            while (i != null && i.hasNext()) {\n                hash = ASCII.String(i.next());\n                if (hosthash.equals(hash.substring(6))) l.add(hash);\n            }\n        }\n\n        // then delete the urls using this list\n        int cnt = 0;\n        for (final String h: l) {\n            if (this.urlIndexFile.delete(ASCII.getBytes(h))) cnt++;\n        }\n\n        // finally remove the line with statistics\n        if (this.statsDump != null) {\n            final Iterator<HostStat> hsi = this.statsDump.iterator();\n            HostStat hs;\n            while (hsi.hasNext()) {\n                hs = hsi.next();\n                if (hs.hosthash.equals(hosthash)) {\n                    hsi.remove();\n                    break;\n                }\n            }\n        }\n\n        return cnt;\n    }","commit_id":"780f8974e760c7177d3ec4395fd711f01a7fee33","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * collect domain samples: all url hashes from the metadata database is listed and the domain part\n     * of the url hashes is used to count how many of these domain hashes appear\n     * @return a map from domain hashes to hash statistics\n     * @throws IOException\n     */\n    public Map<String, URLHashCounter> domainSampleCollector() throws IOException {\n        final Map<String, URLHashCounter> map = new HashMap<String, URLHashCounter>();\n        // first collect all domains and calculate statistics about it\n        synchronized (this) {\n            final CloneableIterator<byte[]> i = this.urlIndexFile.keys(true, null);\n            String hosthash;\n            byte[] urlhashb;\n            URLHashCounter ds;\n            if (i != null) while (i.hasNext()) {\n                urlhashb = i.next();\n                hosthash = ASCII.String(urlhashb, 6, 6);\n                ds = map.get(hosthash);\n                if (ds == null) {\n                    ds = new URLHashCounter(urlhashb);\n                    map.put(hosthash, ds);\n                } else {\n                    ds.count++;\n                }\n            }\n        }\n        return map;\n    }","id":103830,"modified_method":"/**\n     * collect domain samples: all url hashes from the metadata database is listed and the domain part\n     * of the url hashes is used to count how many of these domain hashes appear\n     * @return a map from domain hashes to hash statistics\n     * @throws IOException\n     */\n    public Map<String, URLHashCounter> domainSampleCollector() throws IOException {\n        final Map<String, URLHashCounter> map = new HashMap<String, URLHashCounter>();\n        // first collect all domains and calculate statistics about it\n        synchronized (this) {\n            final Iterator<byte[]> i = this.iterator();\n            String hosthash;\n            byte[] urlhashb;\n            URLHashCounter ds;\n            if (i != null) while (i.hasNext()) {\n                urlhashb = i.next();\n                hosthash = ASCII.String(urlhashb, 6, 6);\n                ds = map.get(hosthash);\n                if (ds == null) {\n                    ds = new URLHashCounter(urlhashb);\n                    map.put(hosthash, ds);\n                } else {\n                    ds.count++;\n                }\n            }\n        }\n        return map;\n    }","commit_id":"780f8974e760c7177d3ec4395fd711f01a7fee33","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    if (editorContext.getSelectedCell().getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.InlineSwitch_Case\", \"caseConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"caseConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"caseConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","id":103831,"modified_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    final EditorCell editorCell = editorContext.getSelectedCell();\n    if (editorCell == null) {\n      return false;\n    }\n    if (editorCell.getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.InlineSwitch_Case\", \"caseConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"caseConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"caseConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(node)), \"jetbrains.mps.lang.generator.structure.TemplateSwitch\")) {\n      return false;\n    }\n    if (editorContext.getSelectedCell().getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Reduction_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","id":103832,"modified_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(node)), \"jetbrains.mps.lang.generator.structure.TemplateSwitch\")) {\n      return false;\n    }\n    final EditorCell editorCell = editorContext.getSelectedCell();\n    if (editorCell == null) {\n      return false;\n    }\n    if (editorCell.getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Reduction_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    if (!(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(node)), \"jetbrains.mps.lang.generator.structure.TemplateSwitch\"))) {\n      return false;\n    }\n    if (editorContext.getSelectedCell().getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Reduction_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","id":103833,"modified_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    final EditorCell editorCell = editorContext.getSelectedCell();\n    if (editorCell == null) {\n      return false;\n    }\n    if (!(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(node)), \"jetbrains.mps.lang.generator.structure.TemplateSwitch\"))) {\n      return false;\n    }\n    if (editorCell.getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Reduction_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    if (editorContext.getSelectedCell().getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Weaving_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","id":103834,"modified_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    final EditorCell editorCell = editorContext.getSelectedCell();\n    if (editorCell == null) {\n      return false;\n    }\n    if (editorCell.getLinkDeclaration() != SLinkOperations.findLinkDeclaration(\"jetbrains.mps.lang.generator.structure.Weaving_MappingRule\", \"ruleConsequence\")) {\n      return false;\n    }\n    return SLinkOperations.getTarget(node, \"ruleConsequence\", true) == null || SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, \"ruleConsequence\", true)), \"jetbrains.mps.lang.generator.structure.RuleConsequence\");\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isReferenceMacroApplicable(SNode node, EditorCell cell) {\n    if (!(isAnyMacroApplicable(node))) {\n      return false;\n    }\n    String linkRole = QueriesUtil.getEditedLinkRole(cell);\n    if (linkRole == null) {\n      return false;\n    }\n    SNode referentNode = QueriesUtil.getEditedLinkReferentNode(cell);\n    return AttributeOperations.getAttribute(referentNode, new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.generator.structure.ReferenceMacro\"), linkRole)) == null;\n  }","id":103835,"modified_method":"public static boolean isReferenceMacroApplicable(SNode node, EditorCell cell) {\n    if (cell == null) {\n      return false;\n    }\n    if (!(isAnyMacroApplicable(node))) {\n      return false;\n    }\n    String linkRole = QueriesUtil.getEditedLinkRole(cell);\n    if (linkRole == null) {\n      return false;\n    }\n    SNode referentNode = QueriesUtil.getEditedLinkReferentNode(cell);\n    return AttributeOperations.getAttribute(referentNode, new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.generator.structure.ReferenceMacro\"), linkRole)) == null;\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isPropertyMacroApplicable(SNode node, EditorCell cell) {\n    if (!(isAnyMacroApplicable(node))) {\n      return false;\n    }\n    // ----- \n    // it can be 'ref.cell->{name}'. in this case both are 'applicable'. but link has priority \n    String linkRole = QueriesUtil.getEditedLinkRole(cell);\n    if (linkRole != null) {\n      return false;\n    }\n    String propertyName = QueriesUtil.getEditedPropertyName(cell);\n    if (propertyName == null) {\n      return false;\n    }\n    return AttributeOperations.getAttribute(node, new IAttributeDescriptor.PropertyAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.generator.structure.PropertyMacro\"), propertyName)) == null;\n  }","id":103836,"modified_method":"public static boolean isPropertyMacroApplicable(SNode node, EditorCell cell) {\n    if (cell == null) {\n      return false;\n    }\n    if (!(isAnyMacroApplicable(node))) {\n      return false;\n    }\n    // ----- \n    // it can be 'ref.cell->{name}'. in this case both are 'applicable'. but link has priority \n    String linkRole = QueriesUtil.getEditedLinkRole(cell);\n    if (linkRole != null) {\n      return false;\n    }\n    String propertyName = QueriesUtil.getEditedPropertyName(cell);\n    if (propertyName == null) {\n      return false;\n    }\n    return AttributeOperations.getAttribute(node, new IAttributeDescriptor.PropertyAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.generator.structure.PropertyMacro\"), propertyName)) == null;\n  }","commit_id":"9a15e92056456a19a09f1d816550ca72b086d89f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();\n    if (sm == null || !(sm.getModule() instanceof Generator)) {\n      return false;\n    }\n    return QueriesUtil.isReferenceMacroApplicable(node, editorContext.getSelectedCell());\n  }","id":103837,"modified_method":"public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {\n    SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();\n    if (sm == null || !(sm.getModule() instanceof Generator)) {\n      return false;\n    }\n    EditorCell editorCell = editorContext.getSelectedCell();\n    if (editorCell == null) {\n      return false;\n    }\n    return QueriesUtil.isReferenceMacroApplicable(node, editorCell);\n  }","commit_id":"c9a770402cd0ecfd3fcf6c49d20f54b5a3226e4f","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean anyEntityIsNotAvailable(ApplicationSpec applicationSpec) {\n    for (EntitySpec entitySpec : applicationSpec.getEntities()) {\n      if (!entities.containsEntity(entitySpec.getType())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":103838,"modified_method":"private boolean anyEntityIsNotAvailable(ApplicationSpec applicationSpec) {\n    for (EntitySpec entitySpec : applicationSpec.getEntities()) {\n      if (!catalog.containsEntity(entitySpec.getType())) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public ApplicationResource(\n      ApplicationManager manager, LocationStore locations, CatalogResource entities\n  ) {\n    this.manager = checkNotNull(manager, \"manager\");\n    this.locations = checkNotNull(locations, \"locations\");\n    this.entities = checkNotNull(entities, \"entities\");\n  }","id":103839,"modified_method":"public ApplicationResource(\n      ApplicationManager manager, LocationStore locations, CatalogResource catalog\n  ) {\n    this.manager = checkNotNull(manager, \"manager\");\n    this.locations = checkNotNull(locations, \"locations\");\n    this.catalog = checkNotNull(catalog, \"catalog\");\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(dependsOnMethods = \"testDeployRedisApplication\")\n  public void testListEffectors() {\n    Map<String, Set<URI>> effectors = client().resource(\"/v1/applications/redis-app/effectors\")\n        .get(new GenericType<Map<String, Set<URI>>>() {\n        });\n\n    assertTrue(effectors.containsKey(\"redis-ent\"));\n    assertTrue(effectors.get(\"redis-ent\").contains(\n        URI.create(\"/v1/applications/redis-app/effectors/redis-ent/stop\")));\n  }","id":103840,"modified_method":"@Test(dependsOnMethods = \"testDeployRedisApplication\")\n  public void testListEffectors() {\n    Set<URI> effectors = client().resource(\"/v1/applications/redis-app/entities/redis-ent/effectors\")\n        .get(new GenericType<Set<URI>>() {\n        });\n\n    assertTrue(effectors.contains(\n        URI.create(\"/v1/applications/redis-app/entities/redis-ent/effectors/stop\")));\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(dependsOnMethods = \"testListSensors\")\n  public void testReadAllSensors() {\n    Map<String, Set<URI>> sensors = client().resource(\"/v1/applications/redis-app/sensors\")\n        .get(new GenericType<Map<String, Set<URI>>>() {\n        });\n\n    Map<String, String> readings = Maps.newHashMap();\n    for (URI ref : sensors.get(\"redis-ent\")) {\n      readings.put(ref.toString(), client().resource(ref).get(String.class));\n    }\n\n    assertEquals(readings.get(\"/v1/applications/redis-app/sensors/redis-ent/service.state\"), \"running\");\n    assertEquals(readings.get(\"/v1/applications/redis-app/sensors/redis-ent/redis.port\"), \"6379\");\n  }","id":103841,"modified_method":"@Test(dependsOnMethods = \"testListSensors\")\n  public void testReadAllSensors() {\n    Set<URI> sensors = client().resource(\"/v1/applications/redis-app/entities/redis-ent/sensors\")\n        .get(new GenericType<Set<URI>>() {\n        });\n\n    Map<String, String> readings = Maps.newHashMap();\n    for (URI ref : sensors) {\n      readings.put(ref.toString(), client().resource(ref).get(String.class));\n    }\n\n    assertEquals(readings.get(\"/v1/applications/redis-app/entities/redis-ent/sensors/service.state\"), \"running\");\n    assertEquals(readings.get(\"/v1/applications/redis-app/entities/redis-ent/sensors/redis.port\"), \"6379\");\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(dependsOnMethods = \"testReadAllSensors\")\n  public void testTriggerStopEffector() throws InterruptedException {\n    ClientResponse response = client().resource(\"/v1/applications/redis-app/effectors/redis-ent/stop\")\n        .post(ClientResponse.class, ImmutableMap.of());\n\n    assertEquals(response.getStatus(), Response.Status.ACCEPTED.getStatusCode());\n\n    URI stateSensor = URI.create(\"/v1/applications/redis-app/sensors/redis-ent/service.state\");\n    while (!client().resource(stateSensor).get(String.class).equals(Lifecycle.STOPPED.toString())) {\n      Thread.sleep(5000);\n    }\n  }","id":103842,"modified_method":"@Test(dependsOnMethods = \"testReadAllSensors\")\n  public void testTriggerStopEffector() throws InterruptedException {\n    ClientResponse response = client().resource(\"/v1/applications/redis-app/entities/redis-ent/effectors/stop\")\n        .post(ClientResponse.class, ImmutableMap.of());\n\n    assertEquals(response.getStatus(), Response.Status.ACCEPTED.getStatusCode());\n\n    URI stateSensor = URI.create(\"/v1/applications/redis-app/entities/redis-ent/sensors/service.state\");\n    while (!client().resource(stateSensor).get(String.class).equals(Lifecycle.STOPPED.toString())) {\n      Thread.sleep(5000);\n    }\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n  protected void setUpResources() throws Exception {\n    executorService = Executors.newCachedThreadPool();\n    LocationStore locationStore = LocationStore.withLocalhost();\n\n    manager = new ApplicationManager(new BrooklynConfiguration(), locationStore, executorService);\n\n    addResource(new ApplicationResource(manager, locationStore, new CatalogResource()));\n    addResource(new SensorResource(manager));\n    addResource(new EffectorResource(manager, executorService));\n  }","id":103843,"modified_method":"@Override\n  protected void setUpResources() throws Exception {\n    executorService = Executors.newCachedThreadPool();\n    LocationStore locationStore = LocationStore.withLocalhost();\n\n    manager = new ApplicationManager(new BrooklynConfiguration(), locationStore, executorService);\n\n    addResource(new ApplicationResource(manager, locationStore, new CatalogResource()));\n    addResource(new EntityResource(manager));\n    addResource(new SensorResource(manager));\n    addResource(new EffectorResource(manager, executorService));\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(dependsOnMethods = \"testDeployRedisApplication\")\n  public void testListSensors() {\n    Map<String, Set<URI>> sensors = client().resource(\"/v1/applications/redis-app/sensors\")\n        .get(new GenericType<Map<String, Set<URI>>>() {\n        });\n    assertTrue(sensors.containsKey(\"redis-ent\"));\n    assertTrue(sensors.get(\"redis-ent\").contains(\n        URI.create(\"/v1/applications/redis-app/sensors/redis-ent/redis.uptime\")));\n  }","id":103844,"modified_method":"@Test(dependsOnMethods = \"testDeployRedisApplication\")\n  public void testListSensors() {\n    Set<URI> sensors = client().resource(\"/v1/applications/redis-app/entities/redis-ent/sensors\")\n        .get(new GenericType<Set<URI>>() {\n        });\n    assertTrue(sensors.contains(\n        URI.create(\"/v1/applications/redis-app/entities/redis-ent/sensors/redis.uptime\")));\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"protected EntityLocal getEntityLocalOr404(Application application, String entityName) {\n\n    // Only scan the first level of children entities\n\n    for (Entity entity : application.getInstance().getOwnedChildren()) {\n      if (entity.getDisplayName().equals(entityName)) {\n        return (EntityLocal) entity;\n      }\n    }\n\n    throw new WebApplicationException(Response.Status.NOT_FOUND);\n  }","id":103845,"modified_method":"protected EntityLocal getEntityOr404(Application application, String entityIdOrName) {\n\n    // TODO full tree scan\n\n    for (Entity entity : application.getInstance().getOwnedChildren()) {\n      if (entity.getId().equals(entityIdOrName) || entity.getDisplayName().equals(entityIdOrName)) {\n        return (EntityLocal) entity;\n      }\n    }\n\n    throw new WebApplicationException(Response.Status.NOT_FOUND);\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n  protected void initialize(BrooklynConfiguration configuration, Environment environment)\n      throws Exception {\n\n    // Create managed components and wire them together\n\n    LocationStore locationStore = new LocationStore(configuration);\n    environment.manage(locationStore);\n\n    ExecutorConfiguration executorConfig = configuration.getExecutor();\n    ExecutorService managedExecutor = environment.managedExecutorService(\"brooklyn\",\n        executorConfig.getCorePoolSize(), executorConfig.getMaximumPoolSize(),\n        executorConfig.getKeepAliveTimeInSeconds(), TimeUnit.SECONDS);\n\n    ApplicationManager applicationManager = new ApplicationManager(configuration, locationStore, managedExecutor);\n    environment.manage(applicationManager);\n\n    // Setup REST endpoints\n\n    environment.addResource(new LocationResource(locationStore));\n\n    CatalogResource catalogResource = new CatalogResource();\n    environment.addResource(catalogResource);\n\n    environment.addResource(new ApplicationResource(applicationManager, locationStore, catalogResource));\n\n    environment.addResource(new SensorResource(applicationManager));\n    environment.addResource(new EffectorResource(applicationManager, managedExecutor));\n\n    environment.addHealthCheck(new GeneralHealthCheck());\n  }","id":103846,"modified_method":"@Override\n  protected void initialize(BrooklynConfiguration configuration, Environment environment)\n      throws Exception {\n\n    // Create managed components and wire them together\n\n    LocationStore locationStore = new LocationStore(configuration);\n    environment.manage(locationStore);\n\n    ExecutorConfiguration executorConfig = configuration.getExecutor();\n    ExecutorService managedExecutor = environment.managedExecutorService(\"brooklyn\",\n        executorConfig.getCorePoolSize(), executorConfig.getMaximumPoolSize(),\n        executorConfig.getKeepAliveTimeInSeconds(), TimeUnit.SECONDS);\n\n    ApplicationManager applicationManager = new ApplicationManager(configuration, locationStore, managedExecutor);\n    environment.manage(applicationManager);\n\n    // Setup REST endpoints\n\n    environment.addResource(new LocationResource(locationStore));\n\n    CatalogResource catalogResource = new CatalogResource();\n    environment.addResource(catalogResource);\n\n    environment.addResource(new ApplicationResource(applicationManager, locationStore, catalogResource));\n\n    environment.addResource(new EntityResource(applicationManager));\n    environment.addResource(new SensorResource(applicationManager));\n    environment.addResource(new EffectorResource(applicationManager, managedExecutor));\n\n    environment.addHealthCheck(new GeneralHealthCheck());\n  }","commit_id":"678a9728b425de4e6117a1539429ddb2f027de19","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private AdapterSpecification(String name, String description, String template,\n                               ScheduleSpecification scheduleSpec, int instances,\n                               Map<String, StreamSpecification> streams,\n                               Map<String, DatasetCreationSpec> datasets,\n                               Map<String, String> datasetModules,\n                               Map<String, String> runtimeArgs, JsonElement config) {\n    this.name = name;\n    this.description = description;\n    this.template = template;\n    this.scheduleSpec = scheduleSpec;\n    this.instances = instances;\n    this.streams = streams == null ? ImmutableMap.<String, StreamSpecification>of() : ImmutableMap.copyOf(streams);\n    this.datasets = datasets == null ? ImmutableMap.<String, DatasetCreationSpec>of() : ImmutableMap.copyOf(datasets);\n    this.datasetModules = datasetModules == null ?\n      ImmutableMap.<String, String>of() : ImmutableMap.copyOf(datasetModules);\n    this.runtimeArgs = ImmutableMap.copyOf(runtimeArgs);\n    this.config = config;\n  }","id":103847,"modified_method":"private AdapterSpecification(String name, String description, String template,\n                               ScheduleSpecification scheduleSpec, int instances,\n                               Map<String, StreamSpecification> streams,\n                               Map<String, DatasetCreationSpec> datasets,\n                               Map<String, String> datasetModules,\n                               Map<String, String> runtimeArgs, JsonElement config) {\n    this.name = name;\n    this.description = description;\n    this.template = template;\n    this.scheduleSpec = scheduleSpec;\n    this.instances = instances;\n    this.streams = streams == null ? ImmutableMap.<String, StreamSpecification>of() : ImmutableMap.copyOf(streams);\n    this.datasets = datasets == null ? ImmutableMap.<String, DatasetCreationSpec>of() : ImmutableMap.copyOf(datasets);\n    this.datasetModules = datasetModules == null ?\n      ImmutableMap.<String, String>of() : ImmutableMap.copyOf(datasetModules);\n    this.runtimeArgs = runtimeArgs == null ? ImmutableMap.<String, String>of() : ImmutableMap.copyOf(runtimeArgs);\n    this.config = config;\n  }","commit_id":"1d658628c3250016708b290e0973653e16ba0ecd","url":"https://github.com/caskdata/cdap"},{"original_method":"private void update() {\n    updateDialog();\n    final DefaultMutableTreeNode node = (DefaultMutableTreeNode)myTree.getSelectionPath().getLastPathComponent();\n    ((DefaultTreeModel)myTree.getModel()).reload(node);\n  }","id":103848,"modified_method":"private void update() {\n    updateDialog();\n    final TreePath selectionPath = myTree.getSelectionPath();\n    if (selectionPath != null) {\n      final DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n      ((DefaultTreeModel)myTree.getModel()).reload(node);\n    }\n  }","commit_id":"e201c1255436dd84c347bc2332c6e3c8fc1ad665","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private AbstractTreeNode getSelectedNode() {\n    Object component = myTree.getSelectionPath().getLastPathComponent();\n    if (component instanceof DefaultMutableTreeNode) {\n      component = ((DefaultMutableTreeNode)component).getUserObject();\n      if (component instanceof FilteringTreeStructure.FilteringNode) {\n        component = ((FilteringTreeStructure.FilteringNode)component).getDelegate();\n        if (component instanceof AbstractTreeNode) {\n          return (AbstractTreeNode)component;\n        }\n      }\n    }\n    return null;\n  }","id":103849,"modified_method":"@Nullable\n  private AbstractTreeNode getSelectedNode() {\n    final TreePath path = myTree.getSelectionPath();\n    if (path != null) {\n      Object component = path.getLastPathComponent();\n      if (component instanceof DefaultMutableTreeNode) {\n        component = ((DefaultMutableTreeNode)component).getUserObject();\n        if (component instanceof FilteringTreeStructure.FilteringNode) {\n          component = ((FilteringTreeStructure.FilteringNode)component).getDelegate();\n          if (component instanceof AbstractTreeNode) {\n            return (AbstractTreeNode)component;\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"e497b81929851981de70596185be3f455afde0f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void actionPerformed(AnActionEvent e) {\n      final ConfigurationType type = getSelectedConfigurationType();\n      String folderName = editFolderName(null, type);\n      if (folderName != null) {\n        List<DefaultMutableTreeNode> folders = new ArrayList<DefaultMutableTreeNode>();\n        collectNodesRecursively(getConfigurationTypeNode(type), folders, FOLDER);\n        int index = folders.size();\n        DefaultMutableTreeNode node = getSelectedConfigurationTypeNode();\n        DefaultMutableTreeNode folderNode = new DefaultMutableTreeNode(folderName);\n        myTreeModel.insertNodeInto(folderNode, node, index);\n        TreeUtil.selectNode(myTree, folderNode);\n      }\n    }","id":103850,"modified_method":"@Override\n    public void actionPerformed(AnActionEvent e) {\n      final ConfigurationType type = getSelectedConfigurationType();\n      if (type == null) {\n        return;\n      }\n      String folderName = editFolderName(null, type);\n      if (folderName != null) {\n        List<DefaultMutableTreeNode> folders = new ArrayList<DefaultMutableTreeNode>();\n        collectNodesRecursively(getConfigurationTypeNode(type), folders, FOLDER);\n        int index = folders.size();\n        DefaultMutableTreeNode typeNode = getSelectedConfigurationTypeNode();\n        DefaultMutableTreeNode folderNode = new DefaultMutableTreeNode(folderName);\n        myTreeModel.insertNodeInto(folderNode, typeNode, index);\n        TreeUtil.selectNode(myTree, folderNode);\n      }\n    }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void showAddPopup() {\n      final JBPopupFactory popupFactory = JBPopupFactory.getInstance();\n      final ConfigurationType[] configurationTypes = getRunManager().getConfigurationFactories(false);\n      Arrays.sort(configurationTypes, new Comparator<ConfigurationType>() {\n        public int compare(final ConfigurationType type1, final ConfigurationType type2) {\n          return type1.getDisplayName().compareTo(type2.getDisplayName());\n        }\n      });\n      final ListPopup popup =\n          popupFactory.createListPopup(new BaseListPopupStep<ConfigurationType>(\n            ExecutionBundle.message(\"add.new.run.configuration.acrtion.name\"), configurationTypes) {\n\n            @NotNull\n            public String getTextFor(final ConfigurationType type) {\n              return type.getDisplayName();\n            }\n\n            @Override\n            public boolean isSpeedSearchEnabled() {\n              return true;\n            }\n\n            @Override\n            public boolean canBeHidden(ConfigurationType value) {\n              return true;\n            }\n\n            public Icon getIconFor(final ConfigurationType type) {\n              return type.getIcon();\n            }\n\n            public PopupStep onChosen(final ConfigurationType type, final boolean finalChoice) {\n              if (hasSubstep(type)) {\n                return getSupStep(type);\n              }\n              final ConfigurationFactory[] factories = type.getConfigurationFactories();\n              if (factories.length > 0) {\n                createNewConfiguration(factories[0]);\n              }\n              return FINAL_CHOICE;\n            }\n\n            public int getDefaultOptionIndex() {\n              final TreePath selectionPath = myTree.getSelectionPath();\n              if (selectionPath != null) {\n                DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n                final Object userObject = node.getUserObject();\n                ConfigurationType type = null;\n                if (userObject instanceof SingleConfigurationConfigurable) {\n                  final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable)userObject;\n                  type = configurable.getConfiguration().getType();\n                }\n                else if (userObject instanceof ConfigurationType) {\n                  type = (ConfigurationType)userObject;\n                }\n                return ArrayUtil.find(configurationTypes, type);\n              }\n              return super.getDefaultOptionIndex();\n            }\n\n            private ListPopupStep getSupStep(final ConfigurationType type) {\n              final ConfigurationFactory[] factories = type.getConfigurationFactories();\n              Arrays.sort(factories, new Comparator<ConfigurationFactory>() {\n                public int compare(final ConfigurationFactory factory1, final ConfigurationFactory factory2) {\n                  return factory1.getName().compareTo(factory2.getName());\n                }\n              });\n              return new BaseListPopupStep<ConfigurationFactory>(\n                ExecutionBundle.message(\"add.new.run.configuration.action.name\", type.getDisplayName()), factories) {\n\n                @NotNull\n                public String getTextFor(final ConfigurationFactory value) {\n                  return value.getName();\n                }\n\n                public Icon getIconFor(final ConfigurationFactory factory) {\n                  return factory.getIcon();\n                }\n\n                public PopupStep onChosen(final ConfigurationFactory factory, final boolean finalChoice) {\n                  createNewConfiguration(factory);\n                  return FINAL_CHOICE;\n                }\n\n              };\n            }\n\n            public boolean hasSubstep(final ConfigurationType type) {\n              return type.getConfigurationFactories().length > 1;\n            }\n\n          });\n      //new TreeSpeedSearch(myTree);\n      popup.showUnderneathOf(myToolbarDecorator.getActionsPanel());\n    }","id":103851,"modified_method":"private void showAddPopup() {\n      final JBPopupFactory popupFactory = JBPopupFactory.getInstance();\n      final ConfigurationType[] configurationTypes = getRunManager().getConfigurationFactories(false);\n      Arrays.sort(configurationTypes, new Comparator<ConfigurationType>() {\n        public int compare(final ConfigurationType type1, final ConfigurationType type2) {\n          return type1.getDisplayName().compareTo(type2.getDisplayName());\n        }\n      });\n      final ListPopup popup =\n          popupFactory.createListPopup(new BaseListPopupStep<ConfigurationType>(\n            ExecutionBundle.message(\"add.new.run.configuration.acrtion.name\"), configurationTypes) {\n\n            @NotNull\n            public String getTextFor(final ConfigurationType type) {\n              return type.getDisplayName();\n            }\n\n            @Override\n            public boolean isSpeedSearchEnabled() {\n              return true;\n            }\n\n            @Override\n            public boolean canBeHidden(ConfigurationType value) {\n              return true;\n            }\n\n            public Icon getIconFor(final ConfigurationType type) {\n              return type.getIcon();\n            }\n\n            public PopupStep onChosen(final ConfigurationType type, final boolean finalChoice) {\n              if (hasSubstep(type)) {\n                return getSupStep(type);\n              }\n              final ConfigurationFactory[] factories = type.getConfigurationFactories();\n              if (factories.length > 0) {\n                createNewConfiguration(factories[0]);\n              }\n              return FINAL_CHOICE;\n            }\n\n            public int getDefaultOptionIndex() {\n              ConfigurationType type = getSelectedConfigurationType();\n              return type != null ? ArrayUtilRt.find(configurationTypes, type) : super.getDefaultOptionIndex();\n            }\n\n            private ListPopupStep getSupStep(final ConfigurationType type) {\n              final ConfigurationFactory[] factories = type.getConfigurationFactories();\n              Arrays.sort(factories, new Comparator<ConfigurationFactory>() {\n                public int compare(final ConfigurationFactory factory1, final ConfigurationFactory factory2) {\n                  return factory1.getName().compareTo(factory2.getName());\n                }\n              });\n              return new BaseListPopupStep<ConfigurationFactory>(\n                ExecutionBundle.message(\"add.new.run.configuration.action.name\", type.getDisplayName()), factories) {\n\n                @NotNull\n                public String getTextFor(final ConfigurationFactory value) {\n                  return value.getName();\n                }\n\n                public Icon getIconFor(final ConfigurationFactory factory) {\n                  return factory.getIcon();\n                }\n\n                public PopupStep onChosen(final ConfigurationFactory factory, final boolean finalChoice) {\n                  createNewConfiguration(factory);\n                  return FINAL_CHOICE;\n                }\n\n              };\n            }\n\n            public boolean hasSubstep(final ConfigurationType type) {\n              return type.getConfigurationFactories().length > 1;\n            }\n\n          });\n      //new TreeSpeedSearch(myTree);\n      popup.showUnderneathOf(myToolbarDecorator.getActionsPanel());\n    }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private ConfigurationType getSelectedConfigurationType() {\n    final TreePath selectionPath = myTree.getSelectionPath();\n    if (selectionPath == null) return null;\n    final DefaultMutableTreeNode configurationTypeNode = getSelectedConfigurationTypeNode();\n    return configurationTypeNode != null ? (ConfigurationType)configurationTypeNode.getUserObject() : null;\n  }","id":103852,"modified_method":"@Nullable\n  private ConfigurationType getSelectedConfigurationType() {\n    final DefaultMutableTreeNode configurationTypeNode = getSelectedConfigurationTypeNode();\n    return configurationTypeNode != null ? (ConfigurationType)configurationTypeNode.getUserObject() : null;\n  }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(final AnActionEvent e) {\n      TreeNode defaults = TreeUtil.findNodeWithObject(DEFAULTS, myTree.getModel(), myRoot);\n      if (defaults != null) {\n        final ConfigurationType configurationType = getSelectedConfigurationType();\n        if (configurationType != null) {\n          defaults = TreeUtil.findNodeWithObject(configurationType, myTree.getModel(), defaults);\n        }\n        final DefaultMutableTreeNode defaultsNode = (DefaultMutableTreeNode)defaults;\n        final TreePath path = TreeUtil.getPath(myRoot, defaultsNode);\n        myTree.expandPath(path);\n        TreeUtil.selectInTree(defaultsNode, true, myTree);\n        myTree.scrollPathToVisible(path);\n      }\n    }","id":103853,"modified_method":"public void actionPerformed(final AnActionEvent e) {\n      TreeNode defaults = TreeUtil.findNodeWithObject(DEFAULTS, myTree.getModel(), myRoot);\n      if (defaults != null) {\n        final ConfigurationType configurationType = getSelectedConfigurationType();\n        if (configurationType != null) {\n          defaults = TreeUtil.findNodeWithObject(configurationType, myTree.getModel(), defaults);\n        }\n        final DefaultMutableTreeNode defaultsNode = (DefaultMutableTreeNode)defaults;\n        if (defaultsNode == null) {\n          return;\n        }\n        final TreePath path = TreeUtil.getPath(myRoot, defaultsNode);\n        myTree.expandPath(path);\n        TreeUtil.selectInTree(defaultsNode, true, myTree);\n        myTree.scrollPathToVisible(path);\n      }\n    }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private DefaultMutableTreeNode getSelectedConfigurationTypeNode() {\n    final DefaultMutableTreeNode node = (DefaultMutableTreeNode)myTree.getSelectionPath().getLastPathComponent();\n    final Object userObject = node.getUserObject();\n    if (userObject instanceof ConfigurationType) {\n      return node;\n    }\n    else {\n      final DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();\n      if (parent != null && parent.getUserObject() instanceof ConfigurationType) {\n        return parent;\n      }\n      return null;\n    }\n  }","id":103854,"modified_method":"@Nullable\n  private DefaultMutableTreeNode getSelectedConfigurationTypeNode() {\n    TreePath selectionPath = myTree.getSelectionPath();\n    DefaultMutableTreeNode node = selectionPath != null ? (DefaultMutableTreeNode)selectionPath.getLastPathComponent() : null;\n    while(node != null) {\n      Object userObject = node.getUserObject();\n      if (userObject instanceof ConfigurationType) {\n        return node;\n      }\n      node = (DefaultMutableTreeNode)node.getParent();\n    }\n    return null;\n  }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void apply() throws ConfigurationException {\n    updateActiveConfigurationFromSelected();\n\n    final RunManagerImpl manager = getRunManager();\n    final ConfigurationType[] types = manager.getConfigurationFactories();\n    List<ConfigurationType> configurationTypes = new ArrayList<ConfigurationType>();\n    for (int i = 0; i < myRoot.getChildCount(); i++) {\n      final DefaultMutableTreeNode node = (DefaultMutableTreeNode)myRoot.getChildAt(i);\n      if (node.getUserObject() instanceof ConfigurationType) {\n        configurationTypes.add((ConfigurationType)node.getUserObject());\n      }\n    }\n    for (ConfigurationType type : types) {\n      if (!configurationTypes.contains(type))\n        configurationTypes.add(type);\n    }\n\n    for (ConfigurationType configurationType : configurationTypes) {\n      applyByType(configurationType);\n    }\n\n    try {\n      int i = Math.max(1, Integer.parseInt(myRecentsLimit.getText()));\n      int oldLimit = manager.getConfig().getRecentsLimit();\n      if (oldLimit != i) {\n        manager.getConfig().setRecentsLimit(i);\n        manager.checkRecentsLimit();\n      }\n    }\n    catch (NumberFormatException e) {\n      // ignore\n    }\n    manager.getConfig().setRestartRequiresConfirmation(myConfirmation.isSelected());\n\n    for (Configurable configurable : myStoredComponents.values()) {\n      if (configurable.isModified()){\n        configurable.apply();\n      }\n    }\n\n    for (Pair<UnnamedConfigurable, JComponent> each : myAdditionalSettings) {\n      each.first.apply();\n    }\n\n    manager.saveOrder();\n    setModified(false);\n    myTree.repaint();\n  }","id":103855,"modified_method":"public void apply() throws ConfigurationException {\n    updateActiveConfigurationFromSelected();\n\n    final RunManagerImpl manager = getRunManager();\n    final ConfigurationType[] types = manager.getConfigurationFactories();\n    List<ConfigurationType> configurationTypes = new ArrayList<ConfigurationType>();\n    for (int i = 0; i < myRoot.getChildCount(); i++) {\n      final DefaultMutableTreeNode node = (DefaultMutableTreeNode)myRoot.getChildAt(i);\n      Object userObject = node.getUserObject();\n      if (userObject instanceof ConfigurationType) {\n        configurationTypes.add((ConfigurationType)userObject);\n      }\n    }\n    for (ConfigurationType type : types) {\n      if (!configurationTypes.contains(type))\n        configurationTypes.add(type);\n    }\n\n    for (ConfigurationType configurationType : configurationTypes) {\n      applyByType(configurationType);\n    }\n\n    try {\n      int i = Math.max(1, Integer.parseInt(myRecentsLimit.getText()));\n      int oldLimit = manager.getConfig().getRecentsLimit();\n      if (oldLimit != i) {\n        manager.getConfig().setRecentsLimit(i);\n        manager.checkRecentsLimit();\n      }\n    }\n    catch (NumberFormatException e) {\n      // ignore\n    }\n    manager.getConfig().setRestartRequiresConfirmation(myConfirmation.isSelected());\n\n    for (Configurable configurable : myStoredComponents.values()) {\n      if (configurable.isModified()){\n        configurable.apply();\n      }\n    }\n\n    for (Pair<UnnamedConfigurable, JComponent> each : myAdditionalSettings) {\n      each.first.apply();\n    }\n\n    manager.saveOrder();\n    setModified(false);\n    myTree.repaint();\n  }","commit_id":"7adedd7145bd78579e8bcf0f65372714b1588688","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\r\n\tpublic void setup(Application application) \r\n\t{\r\n\t\tByteBuffer buffer = ByteBuffer.allocateDirect( BYTES_PER_VERTEX * 3 );\r\n\t\tbuffer.order(ByteOrder.nativeOrder());\r\n\t\tvertices = buffer.asIntBuffer();\t\t\t\t\t\r\n\t\t\t\t\r\n\t\tint[] verts = { \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t  fp(1), fp(0), fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(-0.5f), fp(-0.5f), fp(0),\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  fp(0), fp(1), fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(1), fp(1),\r\n\t\t\t\t\t\t   fp(0.5f), fp(-0.5f), fp(0),\r\n\t\t\t\t\t\t   \r\n\t\t\t\t\t\t   fp(0), fp(0), fp(1), fp(1),\r\n\t\t\t\t\t\t   fp(0.5f), fp(0),\r\n\t\t\t\t\t\t   fp(0), fp(0.5f), fp(0),\r\n\t\t\t\t\t\t };\r\n\t\tvertices.put(verts);\r\n\t\tvertices.flip();\t\r\n\t\t\r\n\t\tPixmap pixmap = application.newPixmap(256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor(1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(0, 0, 0, 1 );\r\n\t\tpixmap.drawLine(0, 0, 256, 256);\r\n\t\tpixmap.drawLine(256, 0, 0, 256);\r\n\t\t\r\n\t\ttex = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\r\n\t}","id":103856,"modified_method":"@Override\r\n\tpublic void setup(Application application) \r\n\t{\r\n\t\tByteBuffer buffer = ByteBuffer.allocateDirect( BYTES_PER_VERTEX * 3 );\r\n\t\tbuffer.order(ByteOrder.nativeOrder());\r\n\t\tvertices = buffer.asIntBuffer();\t\t\t\t\t\r\n\t\t\t\t\r\n\t\tint[] verts = { \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t  fp(1), fp(0), fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(-0.5f), fp(-0.5f), fp(0),\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  fp(0), fp(1), fp(0), fp(1),\r\n\t\t\t\t\t\t  fp(1), fp(1),\r\n\t\t\t\t\t\t  fp(1), fp(1),\r\n\t\t\t\t\t\t   fp(0.5f), fp(-0.5f), fp(0),\r\n\t\t\t\t\t\t   \r\n\t\t\t\t\t\t   fp(0), fp(0), fp(1), fp(1),\r\n\t\t\t\t\t\t   fp(0.5f), fp(0),\r\n\t\t\t\t\t\t   fp(0.5f), fp(0),\r\n\t\t\t\t\t\t   fp(0), fp(0.5f), fp(0),\r\n\t\t\t\t\t\t };\r\n\t\tvertices.put(verts);\r\n\t\tvertices.flip();\t\r\n\t\t\r\n\t\tPixmap pixmap = application.newPixmap(256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor(1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(0, 0, 0, 1 );\r\n\t\tpixmap.drawLine(0, 0, 256, 256);\r\n\t\tpixmap.drawLine(256, 0, 0, 256);\t\t\r\n\t\ttex = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\r\n\t\t\r\n\t\tpixmap = application.newPixmap( 256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor( 1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor( 0, 0, 0, 1 );\r\n\t\tpixmap.drawLine( 128, 0, 128, 256 );\r\n\t\ttex2 = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\r\n\t}","commit_id":"483385602cb3f57e53949f48cc4629be1bc0eb01","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void render(Application app) \r\n\t{\t\r\n\t\tGL10 gl = app.getGL();\r\n\t\tgl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );\r\n\t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tgl.glMatrixMode( GL10.GL_MODELVIEW );\r\n\t\tgl.glLoadIdentity();\r\n\t\tgl.glRotatex( angle, 0, 0, fp(1) );\r\n\t\tangle+=angleIncrement;\r\n\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\r\n\t\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\r\n\t\tgl.glEnableClientState(GL10.GL_COLOR_ARRAY);\r\n\t\tgl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\r\n\t\tvertices.position(0);\r\n\t\tgl.glColorPointer(4, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\r\n\t\tvertices.position(4);\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\r\n\t\tvertices.position(6);\r\n\t\tgl.glVertexPointer( 3, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\t\t\r\n\t\tgl.glDrawArrays( GL10.GL_TRIANGLES, 0, 3);\t\t\t\t\t\r\n\t}","id":103857,"modified_method":"@Override\r\n\tpublic void render(Application app) \r\n\t{\t\r\n\t\tGL10 gl = app.getGL();\r\n\t\tgl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );\r\n\t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tgl.glMatrixMode( GL10.GL_MODELVIEW );\r\n\t\tgl.glLoadIdentity();\r\n\t\tgl.glRotatex( angle, 0, 0, fp(1) );\r\n\t\tangle+=angleIncrement;\r\n\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\t\t\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_COLOR_ARRAY);\t\t\r\n\t\tvertices.position(0);\r\n\t\tgl.glColorPointer(4, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\r\n\t\tgl.glClientActiveTexture( GL10.GL_TEXTURE0 );\r\n\t\tgl.glActiveTexture( GL10.GL_TEXTURE0 );\r\n\t\ttex.bind();\r\n\t\tvertices.position(4);\t\t\t\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glClientActiveTexture( GL10.GL_TEXTURE1 );\r\n\t\tgl.glActiveTexture( GL10.GL_TEXTURE1 );\r\n\t\ttex2.bind();\r\n\t\tvertices.position(6);\t\t\t\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\r\n\t\tvertices.position(8);\r\n\t\tgl.glVertexPointer( 3, GL10.GL_FIXED, BYTES_PER_VERTEX, vertices );\t\t\r\n\t\tgl.glDrawArrays( GL10.GL_TRIANGLES, 0, 3);\t\t\t\t\t\r\n\t}","commit_id":"483385602cb3f57e53949f48cc4629be1bc0eb01","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void render(Application app) \r\n\t{\t\t\t\r\n\t\tGL10 gl = app.getGL();\r\n\t\tgl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );\t\t\r\n\t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\r\n\t\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\r\n\t\tgl.glEnableClientState(GL10.GL_COLOR_ARRAY);\r\n\t\tgl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\r\n\t\tvertices.position(0);\r\n\t\tgl.glColorPointer(4, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\r\n\t\tvertices.position(4);\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\r\n\t\tvertices.position(6);\r\n\t\tgl.glVertexPointer( 3, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\t\t\r\n\t\tgl.glDrawArrays( GL10.GL_TRIANGLES, 0, 3);\t\t\t\r\n\t}","id":103858,"modified_method":"@Override\r\n\tpublic void render(Application app) \r\n\t{\t\t\t\r\n\t\tGL10 gl = app.getGL();\r\n\t\tgl.glClearColor( 0.7f, 0.7f, 0.7f, 1 );\r\n\t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tgl.glMatrixMode( GL10.GL_MODELVIEW );\r\n\t\tgl.glLoadIdentity();\r\n\t\tgl.glRotatef( angle, 0, 0, 1 );\r\n\t\tangle+=angleIncrement;\r\n\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\t\t\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_COLOR_ARRAY);\t\t\r\n\t\tvertices.position(0);\r\n\t\tgl.glColorPointer(4, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\r\n\t\tgl.glClientActiveTexture( GL10.GL_TEXTURE0 );\r\n\t\tgl.glActiveTexture( GL10.GL_TEXTURE0 );\r\n\t\ttex.bind();\r\n\t\tvertices.position(4);\t\t\t\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glClientActiveTexture( GL10.GL_TEXTURE1 );\r\n\t\tgl.glActiveTexture( GL10.GL_TEXTURE1 );\r\n\t\ttex2.bind();\r\n\t\tvertices.position(6);\t\t\t\r\n\t\tgl.glTexCoordPointer( 2, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\r\n\t\t\r\n\t\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\r\n\t\tvertices.position(8);\r\n\t\tgl.glVertexPointer( 3, GL10.GL_FLOAT, BYTES_PER_VERTEX, vertices );\t\t\r\n\t\tgl.glDrawArrays( GL10.GL_TRIANGLES, 0, 3);\t\t\t\t\r\n\t}","commit_id":"483385602cb3f57e53949f48cc4629be1bc0eb01","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void setup(Application application) \r\n\t{\r\n\t\tByteBuffer buffer = ByteBuffer.allocateDirect( BYTES_PER_VERTEX * 3 );\r\n\t\tbuffer.order(ByteOrder.nativeOrder());\r\n\t\tvertices = buffer.asFloatBuffer();\t\t\t\t\t\r\n\t\t\t\t\r\n\t\tfloat[] verts = { \t\t\t\t\t\t\t\r\n\t\t\t\t\t\t  1, 0, 0, 1,\r\n\t\t\t\t\t\t  0, 1, \r\n\t\t\t\t\t\t  -0.5f, -0.5f, 0,\r\n\t\t\t\t\t\t  0, 1, 0, 1,\r\n\t\t\t\t\t\t  1, 1, \r\n\t\t\t\t\t\t   0.5f, -0.5f, 0,\r\n\t\t\t\t\t\t   0, 0, 1, 1,\r\n\t\t\t\t\t\t   0.5f, 0, \r\n\t\t\t\t\t\t   0, 0.5f, 0,\r\n\t\t\t\t\t\t };\r\n\t\tvertices.put(verts);\r\n\t\tvertices.flip();\t\r\n\t\t\r\n\t\tPixmap pixmap = application.newPixmap(256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor(1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(0, 0, 0, 1 );\r\n\t\tpixmap.drawLine(0, 0, 256, 256);\r\n\t\tpixmap.drawLine(256, 0, 0, 256);\r\n\t\t\r\n\t\ttex = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\t\t\r\n\t}","id":103859,"modified_method":"@Override\r\n\tpublic void setup(Application application) \r\n\t{\r\n\t\tByteBuffer buffer = ByteBuffer.allocateDirect( BYTES_PER_VERTEX * 3 );\r\n\t\tbuffer.order(ByteOrder.nativeOrder());\r\n\t\tvertices = buffer.asFloatBuffer();\t\t\t\t\t\r\n\t\t\t\t\r\n\t\tfloat[] verts = { \t\t\t\t\t\t\t\r\n\t\t\t\t  1, 0, 0, 1,\r\n\t\t\t\t  0, 1,\r\n\t\t\t\t  0, 1,\r\n\t\t\t\t  -0.5f, -0.5f, 0,\r\n\t\t\t\t  \r\n\t\t\t\t  0, 1, 0, 1,\r\n\t\t\t\t  1, 1,\r\n\t\t\t\t  1, 1,\r\n\t\t\t\t  0.5f, -0.5f, 0,\r\n\t\t\t\t   \r\n\t\t\t\t  0, 0, 1, 1,\r\n\t\t\t\t  0.5f, 0,\r\n\t\t\t\t  0.5f, 0,\r\n\t\t\t\t  0, 0.5f, 0,\r\n\t\t\t\t };\r\n\t\tvertices.put(verts);\r\n\t\tvertices.flip();\t\r\n\t\t\r\n\t\tPixmap pixmap = application.newPixmap(256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor(1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor(0, 0, 0, 1 );\r\n\t\tpixmap.drawLine(0, 0, 256, 256);\r\n\t\tpixmap.drawLine(256, 0, 0, 256);\t\t\r\n\t\ttex = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\r\n\t\t\r\n\t\tpixmap = application.newPixmap( 256, 256, Format.RGBA8888 );\r\n\t\tpixmap.setColor( 1, 1, 1, 1 );\r\n\t\tpixmap.fill();\r\n\t\tpixmap.setColor( 0, 0, 0, 1 );\r\n\t\tpixmap.drawLine( 128, 0, 128, 256 );\r\n\t\ttex2 = application.newTexture( pixmap, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge );\r\n\t}","commit_id":"483385602cb3f57e53949f48cc4629be1bc0eb01","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\n\tpublic GL10 getGL() {\n\t\tif( gl == null )\n\t\t\tgl = new JoglGL10(GLContext.getCurrent().getGL());\t\t\t\n\t\treturn gl;\n\t}","id":103860,"modified_method":"@Override\n\tpublic GL10 getGL() {\n\t\tif( gl == null )\n\t\t\tgl = new JoglGL11(GLContext.getCurrent().getGL());\t\t\t\n\t\treturn gl;\n\t}","commit_id":"483385602cb3f57e53949f48cc4629be1bc0eb01","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Test\n  public void test_getDatabaseForDryRun_on_existing_project() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(eq(123L), any(File.class), anyString())).thenAnswer(new Answer<File>() {\n      public File answer(InvocationOnMock invocation) throws IOException {\n        Object[] args = invocation.getArguments();\n        File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n        FileUtils.write(dbFile, \"fake db content\");\n        return dbFile;\n      }\n    });\n    when(resourceDao.getRootProjectByComponentId(123L)).thenReturn(new ResourceDto().setId(123L));\n    byte[] dbContent = dryRunCache.getDatabaseForPreview(123L);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content\");\n\n    dbContent = dryRunCache.getDatabaseForPreview(123L);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content\");\n\n    verify(dryRunDatabaseFactory, times(1)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","id":103861,"modified_method":"@Test\n  public void test_getDatabaseForDryRun_on_existing_project() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(eq(123L), any(File.class), anyString())).thenAnswer(new Answer<File>() {\n      public File answer(InvocationOnMock invocation) throws IOException {\n        Object[] args = invocation.getArguments();\n        File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n        FileUtils.write(dbFile, \"fake db content\");\n        return dbFile;\n      }\n    });\n    when(resourceDao.getRootProjectByComponentId(123L)).thenReturn(new ResourceDto().setId(123L));\n    String path = dryRunCache.getPathToDatabaseFile(123L);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content\");\n\n    path = dryRunCache.getPathToDatabaseFile(123L);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content\");\n\n    verify(dryRunDatabaseFactory, times(1)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","commit_id":"ea467d04b90d716d2960cc155c71533e05da1bfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_getDatabaseForDryRun_project_invalidation() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(eq(123L), any(File.class), anyString()))\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 1\");\n          return dbFile;\n        }\n      })\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 2\");\n          return dbFile;\n        }\n      });\n    when(resourceDao.getRootProjectByComponentId(123L)).thenReturn(new ResourceDto().setId(123L));\n\n    byte[] dbContent = dryRunCache.getDatabaseForPreview(123L);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content 1\");\n\n    // Emulate invalidation of cache\n    Thread.sleep(100);\n    when(propertiesDao.selectProjectProperty(123L, PreviewCache.SONAR_PREVIEW_CACHE_LAST_UPDATE_KEY)).thenReturn(new PropertyDto().setValue(\"\" + System.currentTimeMillis()));\n\n    dbContent = dryRunCache.getDatabaseForPreview(123L);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content 2\");\n\n    verify(dryRunDatabaseFactory, times(2)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","id":103862,"modified_method":"@Test\n  public void test_getDatabaseForDryRun_project_invalidation() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(eq(123L), any(File.class), anyString()))\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 1\");\n          return dbFile;\n        }\n      })\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"123\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 2\");\n          return dbFile;\n        }\n      });\n    when(resourceDao.getRootProjectByComponentId(123L)).thenReturn(new ResourceDto().setId(123L));\n\n    String path = dryRunCache.getPathToDatabaseFile(123L);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content 1\");\n\n    // Emulate invalidation of cache\n    Thread.sleep(100);\n    when(propertiesDao.selectProjectProperty(123L, PreviewCache.SONAR_PREVIEW_CACHE_LAST_UPDATE_KEY)).thenReturn(new PropertyDto().setValue(\"\" + System.currentTimeMillis()));\n\n    path = dryRunCache.getPathToDatabaseFile(123L);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content 2\");\n\n    verify(dryRunDatabaseFactory, times(2)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","commit_id":"ea467d04b90d716d2960cc155c71533e05da1bfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_getDatabaseForDryRun_global_invalidation() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(isNull(Long.class), any(File.class), anyString()))\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"default\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 1\");\n          return dbFile;\n        }\n      })\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"default\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 2\");\n          return dbFile;\n        }\n      });\n    byte[] dbContent = dryRunCache.getDatabaseForPreview(null);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content 1\");\n\n    // Emulate invalidation of cache\n    Thread.sleep(100);\n    when(propertiesDao.selectGlobalProperty(PreviewCache.SONAR_PREVIEW_CACHE_LAST_UPDATE_KEY)).thenReturn(new PropertyDto().setValue(\"\" + System.currentTimeMillis()));\n\n    dbContent = dryRunCache.getDatabaseForPreview(null);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content 2\");\n\n    verify(dryRunDatabaseFactory, times(2)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","id":103863,"modified_method":"@Test\n  public void test_getDatabaseForDryRun_global_invalidation() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(isNull(Long.class), any(File.class), anyString()))\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"default\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 1\");\n          return dbFile;\n        }\n      })\n      .thenAnswer(new Answer<File>() {\n        public File answer(InvocationOnMock invocation) throws IOException {\n          Object[] args = invocation.getArguments();\n          File dbFile = new File(new File(dryRunCacheLocation, \"default\"), (String) args[2] + \".h2.db\");\n          FileUtils.write(dbFile, \"fake db content 2\");\n          return dbFile;\n        }\n      });\n    String path = dryRunCache.getPathToDatabaseFile(null);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content 1\");\n\n    // Emulate invalidation of cache\n    Thread.sleep(100);\n    when(propertiesDao.selectGlobalProperty(PreviewCache.SONAR_PREVIEW_CACHE_LAST_UPDATE_KEY)).thenReturn(new PropertyDto().setValue(\"\" + System.currentTimeMillis()));\n\n    path = dryRunCache.getPathToDatabaseFile(null);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content 2\");\n\n    verify(dryRunDatabaseFactory, times(2)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","commit_id":"ea467d04b90d716d2960cc155c71533e05da1bfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_getDatabaseForDryRun_on_new_project() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(isNull(Long.class), any(File.class), anyString())).thenAnswer(new Answer<File>() {\n      public File answer(InvocationOnMock invocation) throws IOException {\n        Object[] args = invocation.getArguments();\n        File dbFile = new File(new File(dryRunCacheLocation, \"default\"), (String) args[2] + \".h2.db\");\n        FileUtils.write(dbFile, \"fake db content\");\n        return dbFile;\n      }\n    });\n    byte[] dbContent = dryRunCache.getDatabaseForPreview(null);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content\");\n\n    dbContent = dryRunCache.getDatabaseForPreview(null);\n    assertThat(new String(dbContent)).isEqualTo(\"fake db content\");\n\n    verify(dryRunDatabaseFactory, times(1)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","id":103864,"modified_method":"@Test\n  public void test_getDatabaseForDryRun_on_new_project() throws Exception {\n    when(dryRunDatabaseFactory.createNewDatabaseForDryRun(isNull(Long.class), any(File.class), anyString())).thenAnswer(new Answer<File>() {\n      public File answer(InvocationOnMock invocation) throws IOException {\n        Object[] args = invocation.getArguments();\n        File dbFile = new File(new File(dryRunCacheLocation, \"default\"), args[2] + \".h2.db\");\n        FileUtils.write(dbFile, \"fake db content\");\n        return dbFile;\n      }\n    });\n    String path = dryRunCache.getPathToDatabaseFile(null);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content\");\n\n    path = dryRunCache.getPathToDatabaseFile(null);\n    assertThat(FileUtils.readFileToString(new File(path))).isEqualTo(\"fake db content\");\n\n    verify(dryRunDatabaseFactory, times(1)).createNewDatabaseForDryRun(anyLong(), any(File.class), anyString());\n  }","commit_id":"ea467d04b90d716d2960cc155c71533e05da1bfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n\t * Build the context for the main list mode.\n\t */\n\tprivate String buildListContext(SessionState state, Context context)\n\t{\n\t\t// put the service in the context (used for allow update calls on each site)\n\t\tcontext.put(\"service\", SiteService.getInstance());\n\n\t\t// prepare the paging of realms\n\t\tList sites = prepPage(state);\n\t\tcontext.put(\"sites\", sites);\n\n\t\t// we need the Realms, too!\n\t\tcontext.put(\"realms\", AuthzGroupService.getInstance());\n\n\t\t// build the menu\n\t\tMenu bar = new MenuImpl();\n\t\tif (SiteService.allowAddSite(null))\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb.getString(\"sitact.newsit\"), \"doNew\"));\n\t\t}\n\n\t\t// add the paging commands\n\t\t//addListPagingMenus(bar, state);\n\t\tint pageSize = Integer.valueOf(state.getAttribute(STATE_PAGESIZE).toString()).intValue();\n\t\tint currentPageNubmer = Integer.valueOf(state.getAttribute(STATE_CURRENT_PAGE).toString()).intValue();\n\t\tint startNumber = pageSize * (currentPageNubmer - 1) + 1;\n\t\tint endNumber = pageSize * currentPageNubmer;\n\n\t\tint totalNumber = 0;\n\t\ttry\n\t\t{\n\t\t\ttotalNumber = Integer.valueOf(state.getAttribute(STATE_NUM_MESSAGES).toString()).intValue();\n\t\t}\n\t\tcatch (java.lang.NullPointerException ignore) {}\n\t\tcatch (java.lang.NumberFormatException ignore) {}\n\n\t\tif (totalNumber < endNumber) endNumber = totalNumber;\n\n\t\tcontext.put(\"startNumber\", Integer.valueOf(startNumber));\n\t\tcontext.put(\"endNumber\", Integer.valueOf(endNumber));\n\t\tcontext.put(\"totalNumber\", Integer.valueOf(totalNumber));\n\t\tpagingInfoToContext(state, context);\n\n\t\t// add the search commands\n\t\taddSearchMenus(bar, state);\n\n\t\t// more search\n\t\tbar.add(new MenuDivider());\n\t\tbar\n\t\t\t\t.add(new MenuField(FORM_SEARCH_SITEID, \"toolbar2\", \"doSearch_site_id\", (String) state\n\t\t\t\t\t\t.getAttribute(STATE_SEARCH_SITE_ID)));\n\t\tbar.add(new MenuEntry(rb.getString(\"sitlis.sid\"), null, true, MenuItem.CHECKED_NA, \"doSearch_site_id\", \"toolbar2\"));\n\t\tif (state.getAttribute(STATE_SEARCH_SITE_ID) != null)\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb_praII.getString(\"sea.cleasea\"), \"doSearch_clear\"));\n\t\t}\n\t\tbar.add(new MenuDivider());\n\t\tbar\n\t\t\t\t.add(new MenuField(FORM_SEARCH_USERID, \"toolbar3\", \"doSearch_user_id\", (String) state\n\t\t\t\t\t\t.getAttribute(STATE_SEARCH_USER_ID)));\n\t\tbar.add(new MenuEntry(rb.getString(\"sitlis.uid\"), null, true, MenuItem.CHECKED_NA, \"doSearch_user_id\", \"toolbar3\"));\n\t\tif (state.getAttribute(STATE_SEARCH_USER_ID) != null)\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb_praII.getString(\"sea.cleasea\"), \"doSearch_clear\"));\n\t\t}\n\n\t\t// add the refresh commands\n\t\taddRefreshMenus(bar, state);\n\n\t\tif (bar.size() > 0)\n\t\t{\n\t\t\tcontext.put(Menu.CONTEXT_MENU, bar);\n\t\t}\n\n\t\t// inform the observing courier that we just updated the page...\n\t\t// if there are pending requests to do so they can be cleared\n\t\tjustDelivered(state);\n\n\t\treturn \"_list\";\n\n\t}","id":103865,"modified_method":"/**\n\t * Build the context for the main list mode.\n\t */\n\tprivate String buildListContext(SessionState state, Context context)\n\t{\n\t\t// put the service in the context (used for allow update calls on each site)\n\t\tcontext.put(\"service\", SiteService.getInstance());\n\n\t\t// prepare the paging of realms\n\t\tList sites = prepPage(state);\n\t\tcontext.put(\"sites\", sites);\n\n\t\t// we need the Realms, too!\n\t\tcontext.put(\"realms\", AuthzGroupService.getInstance());\n\n\t\t// build the menu\n\t\tMenu bar = new MenuImpl();\n\t\tif (SiteService.allowAddSite(null))\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb.getString(\"sitact.newsit\"), \"doNew\"));\n\t\t}\n\n\t\t// add the paging commands\n\t\t//addListPagingMenus(bar, state);\n\t\tint pageSize = Integer.valueOf(state.getAttribute(STATE_PAGESIZE).toString()).intValue();\n\t\tint currentPageNubmer = Integer.valueOf(state.getAttribute(STATE_CURRENT_PAGE).toString()).intValue();\n\t\tint startNumber = pageSize * (currentPageNubmer - 1) + 1;\n\t\tint endNumber = pageSize * currentPageNubmer;\n\n\t\tint totalNumber = 0;\n\t\ttry\n\t\t{\n\t\t\ttotalNumber = Integer.valueOf(state.getAttribute(STATE_NUM_MESSAGES).toString()).intValue();\n\t\t}\n\t\tcatch (java.lang.NullPointerException ignore) {}\n\t\tcatch (java.lang.NumberFormatException ignore) {}\n\n\t\tif (totalNumber < endNumber) endNumber = totalNumber;\n\n\t\tcontext.put(\"startEndTotalNumbers\", new Integer[]{Integer.valueOf(startNumber),Integer.valueOf(endNumber),Integer.valueOf(totalNumber)});\n\t\tcontext.put(\"totalNumber\", Integer.valueOf(totalNumber));\n\t\tpagingInfoToContext(state, context);\n\n\t\t// add the search commands\n\t\taddSearchMenus(bar, state);\n\n\t\t// more search\n\t\tbar.add(new MenuDivider());\n\t\tbar\n\t\t\t\t.add(new MenuField(FORM_SEARCH_SITEID, \"toolbar2\", \"doSearch_site_id\", (String) state\n\t\t\t\t\t\t.getAttribute(STATE_SEARCH_SITE_ID)));\n\t\tbar.add(new MenuEntry(rb.getString(\"sitlis.sid\"), null, true, MenuItem.CHECKED_NA, \"doSearch_site_id\", \"toolbar2\"));\n\t\tif (state.getAttribute(STATE_SEARCH_SITE_ID) != null)\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb_praII.getString(\"sea.cleasea\"), \"doSearch_clear\"));\n\t\t}\n\t\tbar.add(new MenuDivider());\n\t\tbar\n\t\t\t\t.add(new MenuField(FORM_SEARCH_USERID, \"toolbar3\", \"doSearch_user_id\", (String) state\n\t\t\t\t\t\t.getAttribute(STATE_SEARCH_USER_ID)));\n\t\tbar.add(new MenuEntry(rb.getString(\"sitlis.uid\"), null, true, MenuItem.CHECKED_NA, \"doSearch_user_id\", \"toolbar3\"));\n\t\tif (state.getAttribute(STATE_SEARCH_USER_ID) != null)\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb_praII.getString(\"sea.cleasea\"), \"doSearch_clear\"));\n\t\t}\n\n\t\t// add the refresh commands\n\t\taddRefreshMenus(bar, state);\n\n\t\tif (bar.size() > 0)\n\t\t{\n\t\t\tcontext.put(Menu.CONTEXT_MENU, bar);\n\t\t}\n\n\t\t// inform the observing courier that we just updated the page...\n\t\t// if there are pending requests to do so they can be cleared\n\t\tjustDelivered(state);\n\n\t\treturn \"_list\";\n\n\t}","commit_id":"0c0666967b55b97a4b734b6c6d74486e2e821c95","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void handleXmitRsp(Message msg) {\n        LinkedList list;\n        Message m;\n\n        if(msg == null) {\n            if(log.isWarnEnabled())\n                log.warn(\"message is null\");\n            return;\n        }\n\n        try {\n            list=Util.byteBufferToMessageList(msg.getRawBuffer(), msg.getOffset(), msg.getLength());\n            if(list != null) {\n                if(stats) {\n                    xmit_rsps_received+=list.size();\n                    updateStats(received, msg.getSrc(), 0, 1, 0);\n                }\n\n                int count=0;\n                for(Iterator it=list.iterator(); it.hasNext();) {\n                    m=(Message)it.next();\n                    if(rebroadcasting)\n                        count++;\n                    up(new Event(Event.MSG, m));\n                }\n                if(rebroadcasting && count > 0) {\n                    Digest tmp=getDigest();\n                    if(tmp.isGreaterThanOrEqual(rebroadcast_digest)) {\n                        cancelRebroadcasting();\n                    }\n                }\n                list.clear();\n            }\n        }\n        catch(Exception ex) {\n            if(log.isErrorEnabled()) {\n                log.error(\"failed reading list of retransmitted messages\", ex);\n            }\n        }\n    }","id":103866,"modified_method":"private void handleXmitRsp(Message msg) {\n        LinkedList list;\n        Message m;\n\n        if(msg == null) {\n            if(log.isWarnEnabled())\n                log.warn(\"message is null\");\n            return;\n        }\n\n        try {\n            list=Util.byteBufferToMessageList(msg.getRawBuffer(), msg.getOffset(), msg.getLength());\n            if(list != null) {\n                if(xmit_time_stats != null) {\n                    long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n                    XmitTimeStat stat=xmit_time_stats.get(key);\n                    if(stat == null) {\n                        stat=new XmitTimeStat();\n                        xmit_time_stats.putIfAbsent(key, stat);\n                    }\n                    stat.xmit_rsps_received.addAndGet(list.size());\n                }\n\n                if(stats) {\n                    xmit_rsps_received+=list.size();\n                    updateStats(received, msg.getSrc(), 0, 1, 0);\n                }\n\n                int count=0;\n                for(Iterator it=list.iterator(); it.hasNext();) {\n                    m=(Message)it.next();\n                    if(rebroadcasting)\n                        count++;\n                    up(new Event(Event.MSG, m));\n                }\n                if(rebroadcasting && count > 0) {\n                    Digest tmp=getDigest();\n                    if(tmp.isGreaterThanOrEqual(rebroadcast_digest)) {\n                        cancelRebroadcasting();\n                    }\n                }\n                list.clear();\n            }\n        }\n        catch(Exception ex) {\n            if(log.isErrorEnabled()) {\n                log.error(\"failed reading list of retransmitted messages\", ex);\n            }\n        }\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"public boolean setProperties(Properties props) {\n        String str;\n        long[] tmp;\n\n        super.setProperties(props);\n        str=props.getProperty(\"retransmit_timeout\");\n        if(str != null) {\n            tmp=Util.parseCommaDelimitedLongs(str);\n            props.remove(\"retransmit_timeout\");\n            if(tmp != null && tmp.length > 0) {\n                retransmit_timeouts=tmp;\n            }\n        }\n\n        str=props.getProperty(\"gc_lag\");\n        if(str != null) {\n            gc_lag=Integer.parseInt(str);\n            if(gc_lag < 0) {\n                log.error(\"NAKACK.setProperties(): gc_lag cannot be negative, setting it to 0\");\n            }\n            props.remove(\"gc_lag\");\n        }\n\n        str=props.getProperty(\"max_xmit_size\");\n        if(str != null) {\n            max_xmit_size=Long.parseLong(str);\n            props.remove(\"max_xmit_size\");\n        }\n\n        str=props.getProperty(\"use_mcast_xmit\");\n        if(str != null) {\n            use_mcast_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_mcast_xmit\");\n        }\n\n        str=props.getProperty(\"exponential_backoff\");\n        if(str != null) {\n            exponential_backoff=Long.parseLong(str);\n            props.remove(\"exponential_backoff\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"exponential_backoff\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"use_stats_for_retransmission\");\n        if(str != null) {\n            use_stats_for_retransmission=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_stats_for_retransmission\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"use_stats_for_retransmission\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"discard_delivered_msgs\");\n        if(str != null) {\n            discard_delivered_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_delivered_msgs\");\n        }\n\n        str=props.getProperty(\"xmit_from_random_member\");\n        if(str != null) {\n            xmit_from_random_member=Boolean.valueOf(str).booleanValue();\n            props.remove(\"xmit_from_random_member\");\n        }\n\n        str=props.getProperty(\"max_xmit_buf_size\");\n        if(str != null) {\n            max_xmit_buf_size=Integer.parseInt(str);\n            props.remove(\"max_xmit_buf_size\");\n        }\n\n        str=props.getProperty(\"stats_list_size\");\n        if(str != null) {\n            stats_list_size=Integer.parseInt(str);\n            props.remove(\"stats_list_size\");\n        }\n\n        str=props.getProperty(\"xmit_history_max_size\");\n        if(str != null) {\n            xmit_history_max_size=Integer.parseInt(str);\n            props.remove(\"xmit_history_max_size\");\n        }\n\n        str=props.getProperty(\"max_rebroadcast_timeout\");\n        if(str != null) {\n            max_rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"max_rebroadcast_timeout\");\n        }\n\n        if(xmit_from_random_member) {\n            if(discard_delivered_msgs) {\n                discard_delivered_msgs=false;\n                log.warn(\"xmit_from_random_member set to true: changed discard_delivered_msgs to false\");\n            }\n        }\n\n        str=props.getProperty(\"print_stability_history_on_failed_xmit\");\n        if(str != null) {\n            print_stability_history_on_failed_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_stability_history_on_failed_xmit\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"these properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","id":103867,"modified_method":"public boolean setProperties(Properties props) {\n        String str;\n        long[] tmp;\n\n        super.setProperties(props);\n        str=props.getProperty(\"retransmit_timeout\");\n        if(str != null) {\n            tmp=Util.parseCommaDelimitedLongs(str);\n            props.remove(\"retransmit_timeout\");\n            if(tmp != null && tmp.length > 0) {\n                retransmit_timeouts=tmp;\n            }\n        }\n\n        str=props.getProperty(\"gc_lag\");\n        if(str != null) {\n            gc_lag=Integer.parseInt(str);\n            if(gc_lag < 0) {\n                log.error(\"NAKACK.setProperties(): gc_lag cannot be negative, setting it to 0\");\n            }\n            props.remove(\"gc_lag\");\n        }\n\n        str=props.getProperty(\"max_xmit_size\");\n        if(str != null) {\n            max_xmit_size=Long.parseLong(str);\n            props.remove(\"max_xmit_size\");\n        }\n\n        str=props.getProperty(\"use_mcast_xmit\");\n        if(str != null) {\n            use_mcast_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_mcast_xmit\");\n        }\n\n        str=props.getProperty(\"exponential_backoff\");\n        if(str != null) {\n            exponential_backoff=Long.parseLong(str);\n            props.remove(\"exponential_backoff\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"exponential_backoff\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"use_stats_for_retransmission\");\n        if(str != null) {\n            use_stats_for_retransmission=Boolean.valueOf(str);\n            props.remove(\"use_stats_for_retransmission\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"use_stats_for_retransmission\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"discard_delivered_msgs\");\n        if(str != null) {\n            discard_delivered_msgs=Boolean.valueOf(str);\n            props.remove(\"discard_delivered_msgs\");\n        }\n\n        str=props.getProperty(\"xmit_from_random_member\");\n        if(str != null) {\n            xmit_from_random_member=Boolean.valueOf(str);\n            props.remove(\"xmit_from_random_member\");\n        }\n\n        str=props.getProperty(\"max_xmit_buf_size\");\n        if(str != null) {\n            max_xmit_buf_size=Integer.parseInt(str);\n            props.remove(\"max_xmit_buf_size\");\n        }\n\n        str=props.getProperty(\"stats_list_size\");\n        if(str != null) {\n            stats_list_size=Integer.parseInt(str);\n            props.remove(\"stats_list_size\");\n        }\n\n        str=props.getProperty(\"xmit_history_max_size\");\n        if(str != null) {\n            xmit_history_max_size=Integer.parseInt(str);\n            props.remove(\"xmit_history_max_size\");\n        }\n\n        str=props.getProperty(\"enable_xmit_time_stats\");\n        if(str != null) {\n            boolean enable_xmit_time_stats=Boolean.valueOf(str);\n            props.remove(\"enable_xmit_time_stats\");\n            if(enable_xmit_time_stats) {\n                if(log.isWarnEnabled())\n                    log.warn(\"enable_xmit_time_stats is experimental, and may be removed in any release\");\n                xmit_time_stats=new ConcurrentHashMap<Long,XmitTimeStat>();\n                xmit_time_stats_start=System.currentTimeMillis();\n            }\n        }\n\n        str=props.getProperty(\"max_rebroadcast_timeout\");\n        if(str != null) {\n            max_rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"max_rebroadcast_timeout\");\n        }\n\n        if(xmit_from_random_member) {\n            if(discard_delivered_msgs) {\n                discard_delivered_msgs=false;\n                log.warn(\"xmit_from_random_member set to true: changed discard_delivered_msgs to false\");\n            }\n        }\n\n        str=props.getProperty(\"print_stability_history_on_failed_xmit\");\n        if(str != null) {\n            print_stability_history_on_failed_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_stability_history_on_failed_xmit\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"these properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void missingMessageReceived(long seqno, Address original_sender) {\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(original_sender);\n        if(tmp != null) {\n            Long timestamp=tmp.remove(seqno);\n            if(timestamp != null) {\n                long diff=System.currentTimeMillis() - timestamp;\n                BoundedList<Long> list=xmit_times_history.get(original_sender);\n                if(list == null) {\n                    list=new BoundedList<Long>(xmit_history_max_size);\n                    xmit_times_history.putIfAbsent(original_sender, list);\n                }\n                list.add(diff);\n\n                // compute the smoothed average for retransmission times for original_sender\n                synchronized(smoothed_avg_xmit_times) {\n                    Double smoothed_avg=smoothed_avg_xmit_times.get(original_sender);\n                    if(smoothed_avg == null)\n                        smoothed_avg=INITIAL_SMOOTHED_AVG;\n                    // the smoothed avg takes 90% of the previous value, 100% of the new value and averages them\n                    // then, we add 10% to be on the safe side (an xmit value should rather err on the higher than lower side)\n                    smoothed_avg=((smoothed_avg * WEIGHT) + diff) / 2;\n                    smoothed_avg=smoothed_avg * (2 - WEIGHT);\n                    smoothed_avg_xmit_times.put(original_sender, smoothed_avg);\n                }\n            }\n        }\n\n        if(stats) {\n            missing_msgs_received++;\n            updateStats(received, original_sender, 0, 0, 1);\n            MissingMessage missing=new MissingMessage(original_sender, seqno);\n            receive_history.add(missing);\n        }\n    }","id":103868,"modified_method":"public void missingMessageReceived(long seqno, Address original_sender) {\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(original_sender);\n        if(tmp != null) {\n            Long timestamp=tmp.remove(seqno);\n            if(timestamp != null) {\n                long diff=System.currentTimeMillis() - timestamp;\n                BoundedList<Long> list=xmit_times_history.get(original_sender);\n                if(list == null) {\n                    list=new BoundedList<Long>(xmit_history_max_size);\n                    xmit_times_history.putIfAbsent(original_sender, list);\n                }\n                list.add(diff);\n\n                // compute the smoothed average for retransmission times for original_sender\n                synchronized(smoothed_avg_xmit_times) {\n                    Double smoothed_avg=smoothed_avg_xmit_times.get(original_sender);\n                    if(smoothed_avg == null)\n                        smoothed_avg=INITIAL_SMOOTHED_AVG;\n                    // the smoothed avg takes 90% of the previous value, 100% of the new value and averages them\n                    // then, we add 10% to be on the safe side (an xmit value should rather err on the higher than lower side)\n                    smoothed_avg=((smoothed_avg * WEIGHT) + diff) / 2;\n                    smoothed_avg=smoothed_avg * (2 - WEIGHT);\n                    smoothed_avg_xmit_times.put(original_sender, smoothed_avg);\n                }\n            }\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.missing_msgs_received.incrementAndGet();\n        }\n\n        if(stats) {\n            missing_msgs_received++;\n            updateStats(received, original_sender, 0, 0, 1);\n            MissingMessage missing=new MissingMessage(original_sender, seqno);\n            receive_history.add(missing);\n        }\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"public void start() throws Exception {\n        timer=stack != null ? stack.timer : null;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n        started=true;\n    }","id":103869,"modified_method":"public void start() throws Exception {\n        timer=stack != null ? stack.timer : null;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n        started=true;\n\n        if(xmit_time_stats != null) {\n            Runtime.getRuntime().addShutdownHook(new Thread() {\n                public void run() {\n                    String filename=\"xmit-stats-\" + local_addr + \".log\";\n                    System.out.println(\"-- dumping runtime xmit stats to \" + filename);\n                    try {\n                        dumpXmitStats(filename);\n                    }\n                    catch(IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Retransmit from sent-table, called when XMIT_REQ is received. Bundles all messages to be xmitted into one large\n     * message and sends them back with an XMIT_RSP header. Note that since we cannot count on a fragmentation layer\n     * below us, we have to make sure the message doesn't exceed max_xmit_size bytes. If this is the case, we split the\n     * message into multiple, smaller-chunked messages. But in most cases this still yields fewer messages than if each\n     * requested message was retransmitted separately.\n     *\n     * @param xmit_requester        The sender of the XMIT_REQ, we have to send the requested copy of the message to this address\n     * @param first_seqno The first sequence number to be retransmitted (<= last_seqno)\n     * @param last_seqno  The last sequence number to be retransmitted (>= first_seqno)\n     * @param original_sender The member who originally sent the messsage. Guaranteed to be non-null\n     */\n    private void handleXmitReq(Address xmit_requester, long first_seqno, long last_seqno, Address original_sender) {\n        Message msg, tmp;\n        long size=0, marker=first_seqno, len;\n\n//        if(last_seqno - first_seqno < 50) {\n//            handleXmitReqUnbatched(xmit_requester, first_seqno, last_seqno, original_sender);\n//            return;\n//        }\n\n        if(log.isTraceEnabled()) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(local_addr).append(\": received xmit request from \").append(xmit_requester).append(\" for \");\n            sb.append(original_sender).append(\" [\").append(first_seqno).append(\" - \").append(last_seqno).append(\"]\");\n            log.trace(sb.toString());\n        }\n\n        if(first_seqno > last_seqno) {\n            if(log.isErrorEnabled())\n                log.error(\"first_seqno (\" + first_seqno + \") > last_seqno (\" + last_seqno + \"): not able to retransmit\");\n            return;\n        }\n\n        if(stats) {\n            xmit_reqs_received+=last_seqno - first_seqno +1;\n            updateStats(received, xmit_requester, 1, 0, 0);\n        }\n\n\n        LinkedList<Message> list=new LinkedList<Message>();\n        NakReceiverWindow win=xmit_table.get(original_sender);\n        for(long i=first_seqno; i <= last_seqno; i++) {\n            msg=win != null? win.get(i) : null;\n            if(msg == null || msg == NakReceiverWindow.NULL_MSG) {\n                if(log.isErrorEnabled() && !local_addr.equals(xmit_requester)) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"(requester=\").append(xmit_requester).append(\", local_addr=\").append(this.local_addr);\n                    sb.append(\") message \").append(original_sender).append(\"::\").append(i);\n                    sb.append(\" not found in retransmission table of \");\n                    if(win != null) {\n                        sb.append(original_sender).append(\": \").append(win.toString());\n                    }\n                    else {\n                        sb.append(printMessages());\n                    }\n\n                    if(print_stability_history_on_failed_xmit) {\n                        sb.append(\" (stability history:\\n\").append(printStabilityHistory());\n                    }\n                    log.error(sb);\n                }\n                continue;\n            }\n            len=msg.size();\n            size+=len;\n            if(size > max_xmit_size && !list.isEmpty()) { // changed from >= to > (yaron-r, bug #943709)\n                // yaronr: added &&listSize()>0 since protocols between FRAG and NAKACK add headers, and message exceeds size.\n\n                // size has reached max_xmit_size. go ahead and send message (excluding the current message)\n                if(log.isTraceEnabled())\n                    log.trace(\"xmitting msgs [\" + marker + '-' + (i - 1) + \"] to \" + xmit_requester);\n                sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, i - 1);\n                marker=i;\n                list.clear();\n                // fixed Dec 15 2003 (bela, patch from Joel Dice (dicej)), see explanantion under\n                // bug report #854887\n                size=len;\n            }\n            tmp=msg;\n            // tmp.setDest(xmit_requester);\n            // tmp.setSrc(local_addr);\n            if(tmp.getSrc() == null)\n                tmp.setSrc(local_addr);\n            list.add(tmp);\n        }\n\n        if(!list.isEmpty()) {\n            if(log.isTraceEnabled())\n                log.trace(\"xmitting msgs [\" + marker + '-' + last_seqno + \"] to \" + xmit_requester);\n            sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, last_seqno);\n            list.clear();\n        }\n    }","id":103870,"modified_method":"/**\n     * Retransmit from sent-table, called when XMIT_REQ is received. Bundles all messages to be xmitted into one large\n     * message and sends them back with an XMIT_RSP header. Note that since we cannot count on a fragmentation layer\n     * below us, we have to make sure the message doesn't exceed max_xmit_size bytes. If this is the case, we split the\n     * message into multiple, smaller-chunked messages. But in most cases this still yields fewer messages than if each\n     * requested message was retransmitted separately.\n     *\n     * @param xmit_requester        The sender of the XMIT_REQ, we have to send the requested copy of the message to this address\n     * @param first_seqno The first sequence number to be retransmitted (<= last_seqno)\n     * @param last_seqno  The last sequence number to be retransmitted (>= first_seqno)\n     * @param original_sender The member who originally sent the messsage. Guaranteed to be non-null\n     */\n    private void handleXmitReq(Address xmit_requester, long first_seqno, long last_seqno, Address original_sender) {\n        Message msg, tmp;\n        long size=0, marker=first_seqno, len;\n\n//        if(last_seqno - first_seqno < 50) {\n//            handleXmitReqUnbatched(xmit_requester, first_seqno, last_seqno, original_sender);\n//            return;\n//        }\n\n        if(log.isTraceEnabled()) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(local_addr).append(\": received xmit request from \").append(xmit_requester).append(\" for \");\n            sb.append(original_sender).append(\" [\").append(first_seqno).append(\" - \").append(last_seqno).append(\"]\");\n            log.trace(sb.toString());\n        }\n\n        if(first_seqno > last_seqno) {\n            if(log.isErrorEnabled())\n                log.error(\"first_seqno (\" + first_seqno + \") > last_seqno (\" + last_seqno + \"): not able to retransmit\");\n            return;\n        }\n\n        if(stats) {\n            xmit_reqs_received+=last_seqno - first_seqno +1;\n            updateStats(received, xmit_requester, 1, 0, 0);\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.xmit_reqs_received.addAndGet((int)(last_seqno - first_seqno +1));\n            stat.xmit_rsps_sent.addAndGet((int)(last_seqno - first_seqno +1));\n        }\n\n        LinkedList<Message> list=new LinkedList<Message>();\n        NakReceiverWindow win=xmit_table.get(original_sender);\n        for(long i=first_seqno; i <= last_seqno; i++) {\n            msg=win != null? win.get(i) : null;\n            if(msg == null || msg == NakReceiverWindow.NULL_MSG) {\n                if(log.isErrorEnabled() && !local_addr.equals(xmit_requester)) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"(requester=\").append(xmit_requester).append(\", local_addr=\").append(this.local_addr);\n                    sb.append(\") message \").append(original_sender).append(\"::\").append(i);\n                    sb.append(\" not found in retransmission table of \");\n                    if(win != null) {\n                        sb.append(original_sender).append(\": \").append(win.toString());\n                    }\n                    else {\n                        sb.append(printMessages());\n                    }\n\n                    if(print_stability_history_on_failed_xmit) {\n                        sb.append(\" (stability history:\\n\").append(printStabilityHistory());\n                    }\n                    log.error(sb);\n                }\n                continue;\n            }\n            len=msg.size();\n            size+=len;\n            if(size > max_xmit_size && !list.isEmpty()) { // changed from >= to > (yaron-r, bug #943709)\n                // yaronr: added &&listSize()>0 since protocols between FRAG and NAKACK add headers, and message exceeds size.\n\n                // size has reached max_xmit_size. go ahead and send message (excluding the current message)\n                if(log.isTraceEnabled())\n                    log.trace(\"xmitting msgs [\" + marker + '-' + (i - 1) + \"] to \" + xmit_requester);\n                sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, i - 1);\n                marker=i;\n                list.clear();\n                // fixed Dec 15 2003 (bela, patch from Joel Dice (dicej)), see explanantion under\n                // bug report #854887\n                size=len;\n            }\n            tmp=msg;\n            // tmp.setDest(xmit_requester);\n            // tmp.setSrc(local_addr);\n            if(tmp.getSrc() == null)\n                tmp.setSrc(local_addr);\n            list.add(tmp);\n        }\n\n        if(!list.isEmpty()) {\n            if(log.isTraceEnabled())\n                log.trace(\"xmitting msgs [\" + marker + '-' + last_seqno + \"] to \" + xmit_requester);\n            sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, last_seqno);\n            list.clear();\n        }\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void retransmit(long first_seqno, long last_seqno, Address sender, boolean multicast_xmit_request) {\n        NakAckHeader hdr;\n        Message retransmit_msg;\n        Address dest=sender; // to whom do we send the XMIT request ?\n\n        if(multicast_xmit_request) {\n            dest=null;\n        }\n        else {\n            if(xmit_from_random_member && !local_addr.equals(sender)) {\n                Address random_member=(Address)Util.pickRandomElement(members);\n                if(random_member != null && !local_addr.equals(random_member)) {\n                    dest=random_member;\n                    if(log.isTraceEnabled())\n                        log.trace(\"picked random member \" + dest + \" to send XMIT request to\");\n                }\n            }\n        }\n\n        hdr=new NakAckHeader(NakAckHeader.XMIT_REQ, first_seqno, last_seqno, sender);\n        retransmit_msg=new Message(dest, null, null);\n        retransmit_msg.setFlag(Message.OOB);\n        if(log.isTraceEnabled())\n            log.trace(local_addr + \": sending XMIT_REQ ([\" + first_seqno + \", \" + last_seqno + \"]) to \" + dest);\n        retransmit_msg.putHeader(name, hdr);\n\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(sender);\n        if(tmp == null) {\n            tmp=new ConcurrentHashMap<Long,Long>();\n            xmit_stats.putIfAbsent(sender, tmp);\n        }\n        for(long seq=first_seqno; seq < last_seqno; seq++) {\n            tmp.putIfAbsent(seq, System.currentTimeMillis());\n        }\n\n        down_prot.down(new Event(Event.MSG, retransmit_msg));\n        if(stats) {\n            xmit_reqs_sent+=last_seqno - first_seqno +1;\n            updateStats(sent, dest, 1, 0, 0);\n            XmitRequest req=new XmitRequest(sender, first_seqno, last_seqno, dest);\n            send_history.add(req);\n        }\n    }","id":103871,"modified_method":"protected void retransmit(long first_seqno, long last_seqno, Address sender, boolean multicast_xmit_request) {\n        NakAckHeader hdr;\n        Message retransmit_msg;\n        Address dest=sender; // to whom do we send the XMIT request ?\n\n        if(multicast_xmit_request) {\n            dest=null;\n        }\n        else {\n            if(xmit_from_random_member && !local_addr.equals(sender)) {\n                Address random_member=(Address)Util.pickRandomElement(members);\n                if(random_member != null && !local_addr.equals(random_member)) {\n                    dest=random_member;\n                    if(log.isTraceEnabled())\n                        log.trace(\"picked random member \" + dest + \" to send XMIT request to\");\n                }\n            }\n        }\n\n        hdr=new NakAckHeader(NakAckHeader.XMIT_REQ, first_seqno, last_seqno, sender);\n        retransmit_msg=new Message(dest, null, null);\n        retransmit_msg.setFlag(Message.OOB);\n        if(log.isTraceEnabled())\n            log.trace(local_addr + \": sending XMIT_REQ ([\" + first_seqno + \", \" + last_seqno + \"]) to \" + dest);\n        retransmit_msg.putHeader(name, hdr);\n\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(sender);\n        if(tmp == null) {\n            tmp=new ConcurrentHashMap<Long,Long>();\n            xmit_stats.putIfAbsent(sender, tmp);\n        }\n        for(long seq=first_seqno; seq < last_seqno; seq++) {\n            tmp.putIfAbsent(seq, System.currentTimeMillis());\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.xmit_reqs_sent.addAndGet((int)(last_seqno - first_seqno +1));\n        }\n\n        down_prot.down(new Event(Event.MSG, retransmit_msg));\n        if(stats) {\n            xmit_reqs_sent+=last_seqno - first_seqno +1;\n            updateStats(sent, dest, 1, 0, 0);\n            XmitRequest req=new XmitRequest(sender, first_seqno, last_seqno, dest);\n            send_history.add(req);\n        }\n    }","commit_id":"b825996716b2c0a02fea51c6366231231d722d8c","url":"https://github.com/belaban/JGroups"},{"original_method":"public boolean setProperties(Properties props) {\n        String str;\n        long[] tmp;\n\n        super.setProperties(props);\n        str=props.getProperty(\"retransmit_timeout\");\n        if(str != null) {\n            tmp=Util.parseCommaDelimitedLongs(str);\n            props.remove(\"retransmit_timeout\");\n            if(tmp != null && tmp.length > 0) {\n                retransmit_timeouts=tmp;\n            }\n        }\n\n        str=props.getProperty(\"gc_lag\");\n        if(str != null) {\n            gc_lag=Integer.parseInt(str);\n            if(gc_lag < 0) {\n                log.error(\"NAKACK.setProperties(): gc_lag cannot be negative, setting it to 0\");\n            }\n            props.remove(\"gc_lag\");\n        }\n\n        str=props.getProperty(\"max_xmit_size\");\n        if(str != null) {\n            max_xmit_size=Long.parseLong(str);\n            props.remove(\"max_xmit_size\");\n        }\n\n        str=props.getProperty(\"use_mcast_xmit\");\n        if(str != null) {\n            use_mcast_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_mcast_xmit\");\n        }\n\n        str=props.getProperty(\"exponential_backoff\");\n        if(str != null) {\n            exponential_backoff=Long.parseLong(str);\n            props.remove(\"exponential_backoff\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"exponential_backoff\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"use_stats_for_retransmission\");\n        if(str != null) {\n            use_stats_for_retransmission=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_stats_for_retransmission\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"use_stats_for_retransmission\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"discard_delivered_msgs\");\n        if(str != null) {\n            discard_delivered_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"discard_delivered_msgs\");\n        }\n\n        str=props.getProperty(\"xmit_from_random_member\");\n        if(str != null) {\n            xmit_from_random_member=Boolean.valueOf(str).booleanValue();\n            props.remove(\"xmit_from_random_member\");\n        }\n\n        str=props.getProperty(\"max_xmit_buf_size\");\n        if(str != null) {\n            max_xmit_buf_size=Integer.parseInt(str);\n            props.remove(\"max_xmit_buf_size\");\n        }\n\n        str=props.getProperty(\"stats_list_size\");\n        if(str != null) {\n            stats_list_size=Integer.parseInt(str);\n            props.remove(\"stats_list_size\");\n        }\n\n        str=props.getProperty(\"xmit_history_max_size\");\n        if(str != null) {\n            xmit_history_max_size=Integer.parseInt(str);\n            props.remove(\"xmit_history_max_size\");\n        }\n\n        str=props.getProperty(\"max_rebroadcast_timeout\");\n        if(str != null) {\n            max_rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"max_rebroadcast_timeout\");\n        }\n\n        if(xmit_from_random_member) {\n            if(discard_delivered_msgs) {\n                discard_delivered_msgs=false;\n                log.warn(\"xmit_from_random_member set to true: changed discard_delivered_msgs to false\");\n            }\n        }\n\n        str=props.getProperty(\"print_stability_history_on_failed_xmit\");\n        if(str != null) {\n            print_stability_history_on_failed_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_stability_history_on_failed_xmit\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"these properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","id":103872,"modified_method":"public boolean setProperties(Properties props) {\n        String str;\n        long[] tmp;\n\n        super.setProperties(props);\n        str=props.getProperty(\"retransmit_timeout\");\n        if(str != null) {\n            tmp=Util.parseCommaDelimitedLongs(str);\n            props.remove(\"retransmit_timeout\");\n            if(tmp != null && tmp.length > 0) {\n                retransmit_timeouts=tmp;\n            }\n        }\n\n        str=props.getProperty(\"gc_lag\");\n        if(str != null) {\n            gc_lag=Integer.parseInt(str);\n            if(gc_lag < 0) {\n                log.error(\"NAKACK.setProperties(): gc_lag cannot be negative, setting it to 0\");\n            }\n            props.remove(\"gc_lag\");\n        }\n\n        str=props.getProperty(\"max_xmit_size\");\n        if(str != null) {\n            max_xmit_size=Long.parseLong(str);\n            props.remove(\"max_xmit_size\");\n        }\n\n        str=props.getProperty(\"use_mcast_xmit\");\n        if(str != null) {\n            use_mcast_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"use_mcast_xmit\");\n        }\n\n        str=props.getProperty(\"exponential_backoff\");\n        if(str != null) {\n            exponential_backoff=Long.parseLong(str);\n            props.remove(\"exponential_backoff\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"exponential_backoff\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"use_stats_for_retransmission\");\n        if(str != null) {\n            use_stats_for_retransmission=Boolean.valueOf(str);\n            props.remove(\"use_stats_for_retransmission\");\n            if(log.isWarnEnabled())\n                log.warn(\"note that \\\"use_stats_for_retransmission\\\" is an experimental feature and may be removed at any time\");\n        }\n\n        str=props.getProperty(\"discard_delivered_msgs\");\n        if(str != null) {\n            discard_delivered_msgs=Boolean.valueOf(str);\n            props.remove(\"discard_delivered_msgs\");\n        }\n\n        str=props.getProperty(\"xmit_from_random_member\");\n        if(str != null) {\n            xmit_from_random_member=Boolean.valueOf(str);\n            props.remove(\"xmit_from_random_member\");\n        }\n\n        str=props.getProperty(\"max_xmit_buf_size\");\n        if(str != null) {\n            max_xmit_buf_size=Integer.parseInt(str);\n            props.remove(\"max_xmit_buf_size\");\n        }\n\n        str=props.getProperty(\"stats_list_size\");\n        if(str != null) {\n            stats_list_size=Integer.parseInt(str);\n            props.remove(\"stats_list_size\");\n        }\n\n        str=props.getProperty(\"xmit_history_max_size\");\n        if(str != null) {\n            xmit_history_max_size=Integer.parseInt(str);\n            props.remove(\"xmit_history_max_size\");\n        }\n\n        str=props.getProperty(\"enable_xmit_time_stats\");\n        if(str != null) {\n            boolean enable_xmit_time_stats=Boolean.valueOf(str);\n            props.remove(\"enable_xmit_time_stats\");\n            if(enable_xmit_time_stats) {\n                if(log.isWarnEnabled())\n                    log.warn(\"enable_xmit_time_stats is experimental, and may be removed in any release\");\n                xmit_time_stats=new ConcurrentHashMap<Long,XmitTimeStat>();\n                xmit_time_stats_start=System.currentTimeMillis();\n            }\n        }\n\n        str=props.getProperty(\"max_rebroadcast_timeout\");\n        if(str != null) {\n            max_rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"max_rebroadcast_timeout\");\n        }\n\n        if(xmit_from_random_member) {\n            if(discard_delivered_msgs) {\n                discard_delivered_msgs=false;\n                log.warn(\"xmit_from_random_member set to true: changed discard_delivered_msgs to false\");\n            }\n        }\n\n        str=props.getProperty(\"print_stability_history_on_failed_xmit\");\n        if(str != null) {\n            print_stability_history_on_failed_xmit=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_stability_history_on_failed_xmit\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"these properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"protected void retransmit(long first_seqno, long last_seqno, Address sender, boolean multicast_xmit_request) {\n        NakAckHeader hdr;\n        Message retransmit_msg;\n        Address dest=sender; // to whom do we send the XMIT request ?\n\n        if(multicast_xmit_request) {\n            dest=null;\n        }\n        else {\n            if(xmit_from_random_member && !local_addr.equals(sender)) {\n                Address random_member=(Address)Util.pickRandomElement(members);\n                if(random_member != null && !local_addr.equals(random_member)) {\n                    dest=random_member;\n                    if(log.isTraceEnabled())\n                        log.trace(\"picked random member \" + dest + \" to send XMIT request to\");\n                }\n            }\n        }\n\n        hdr=new NakAckHeader(NakAckHeader.XMIT_REQ, first_seqno, last_seqno, sender);\n        retransmit_msg=new Message(dest, null, null);\n        retransmit_msg.setFlag(Message.OOB);\n        if(log.isTraceEnabled())\n            log.trace(local_addr + \": sending XMIT_REQ ([\" + first_seqno + \", \" + last_seqno + \"]) to \" + dest);\n        retransmit_msg.putHeader(name, hdr);\n\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(sender);\n        if(tmp == null) {\n            tmp=new ConcurrentHashMap<Long,Long>();\n            xmit_stats.putIfAbsent(sender, tmp);\n        }\n        for(long seq=first_seqno; seq < last_seqno; seq++) {\n            tmp.putIfAbsent(seq, System.currentTimeMillis());\n        }\n\n        down_prot.down(new Event(Event.MSG, retransmit_msg));\n        if(stats) {\n            xmit_reqs_sent+=last_seqno - first_seqno +1;\n            updateStats(sent, dest, 1, 0, 0);\n            XmitRequest req=new XmitRequest(sender, first_seqno, last_seqno, dest);\n            send_history.add(req);\n        }\n    }","id":103873,"modified_method":"protected void retransmit(long first_seqno, long last_seqno, Address sender, boolean multicast_xmit_request) {\n        NakAckHeader hdr;\n        Message retransmit_msg;\n        Address dest=sender; // to whom do we send the XMIT request ?\n\n        if(multicast_xmit_request) {\n            dest=null;\n        }\n        else {\n            if(xmit_from_random_member && !local_addr.equals(sender)) {\n                Address random_member=(Address)Util.pickRandomElement(members);\n                if(random_member != null && !local_addr.equals(random_member)) {\n                    dest=random_member;\n                    if(log.isTraceEnabled())\n                        log.trace(\"picked random member \" + dest + \" to send XMIT request to\");\n                }\n            }\n        }\n\n        hdr=new NakAckHeader(NakAckHeader.XMIT_REQ, first_seqno, last_seqno, sender);\n        retransmit_msg=new Message(dest, null, null);\n        retransmit_msg.setFlag(Message.OOB);\n        if(log.isTraceEnabled())\n            log.trace(local_addr + \": sending XMIT_REQ ([\" + first_seqno + \", \" + last_seqno + \"]) to \" + dest);\n        retransmit_msg.putHeader(name, hdr);\n\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(sender);\n        if(tmp == null) {\n            tmp=new ConcurrentHashMap<Long,Long>();\n            xmit_stats.putIfAbsent(sender, tmp);\n        }\n        for(long seq=first_seqno; seq < last_seqno; seq++) {\n            tmp.putIfAbsent(seq, System.currentTimeMillis());\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.xmit_reqs_sent.addAndGet((int)(last_seqno - first_seqno +1));\n        }\n\n        down_prot.down(new Event(Event.MSG, retransmit_msg));\n        if(stats) {\n            xmit_reqs_sent+=last_seqno - first_seqno +1;\n            updateStats(sent, dest, 1, 0, 0);\n            XmitRequest req=new XmitRequest(sender, first_seqno, last_seqno, dest);\n            send_history.add(req);\n        }\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"public void start() throws Exception {\n        timer=stack != null ? stack.timer : null;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n        started=true;\n    }","id":103874,"modified_method":"public void start() throws Exception {\n        timer=stack != null ? stack.timer : null;\n        if(timer == null)\n            throw new Exception(\"timer is null\");\n        started=true;\n\n        if(xmit_time_stats != null) {\n            Runtime.getRuntime().addShutdownHook(new Thread() {\n                public void run() {\n                    String filename=\"xmit-stats-\" + local_addr + \".log\";\n                    System.out.println(\"-- dumping runtime xmit stats to \" + filename);\n                    try {\n                        dumpXmitStats(filename);\n                    }\n                    catch(IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"public void missingMessageReceived(long seqno, Address original_sender) {\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(original_sender);\n        if(tmp != null) {\n            Long timestamp=tmp.remove(seqno);\n            if(timestamp != null) {\n                long diff=System.currentTimeMillis() - timestamp;\n                BoundedList<Long> list=xmit_times_history.get(original_sender);\n                if(list == null) {\n                    list=new BoundedList<Long>(xmit_history_max_size);\n                    xmit_times_history.putIfAbsent(original_sender, list);\n                }\n                list.add(diff);\n\n                // compute the smoothed average for retransmission times for original_sender\n                synchronized(smoothed_avg_xmit_times) {\n                    Double smoothed_avg=smoothed_avg_xmit_times.get(original_sender);\n                    if(smoothed_avg == null)\n                        smoothed_avg=INITIAL_SMOOTHED_AVG;\n                    // the smoothed avg takes 90% of the previous value, 100% of the new value and averages them\n                    // then, we add 10% to be on the safe side (an xmit value should rather err on the higher than lower side)\n                    smoothed_avg=((smoothed_avg * WEIGHT) + diff) / 2;\n                    smoothed_avg=smoothed_avg * (2 - WEIGHT);\n                    smoothed_avg_xmit_times.put(original_sender, smoothed_avg);\n                }\n            }\n        }\n\n        if(stats) {\n            missing_msgs_received++;\n            updateStats(received, original_sender, 0, 0, 1);\n            MissingMessage missing=new MissingMessage(original_sender, seqno);\n            receive_history.add(missing);\n        }\n    }","id":103875,"modified_method":"public void missingMessageReceived(long seqno, Address original_sender) {\n        ConcurrentMap<Long,Long> tmp=xmit_stats.get(original_sender);\n        if(tmp != null) {\n            Long timestamp=tmp.remove(seqno);\n            if(timestamp != null) {\n                long diff=System.currentTimeMillis() - timestamp;\n                BoundedList<Long> list=xmit_times_history.get(original_sender);\n                if(list == null) {\n                    list=new BoundedList<Long>(xmit_history_max_size);\n                    xmit_times_history.putIfAbsent(original_sender, list);\n                }\n                list.add(diff);\n\n                // compute the smoothed average for retransmission times for original_sender\n                synchronized(smoothed_avg_xmit_times) {\n                    Double smoothed_avg=smoothed_avg_xmit_times.get(original_sender);\n                    if(smoothed_avg == null)\n                        smoothed_avg=INITIAL_SMOOTHED_AVG;\n                    // the smoothed avg takes 90% of the previous value, 100% of the new value and averages them\n                    // then, we add 10% to be on the safe side (an xmit value should rather err on the higher than lower side)\n                    smoothed_avg=((smoothed_avg * WEIGHT) + diff) / 2;\n                    smoothed_avg=smoothed_avg * (2 - WEIGHT);\n                    smoothed_avg_xmit_times.put(original_sender, smoothed_avg);\n                }\n            }\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.missing_msgs_received.incrementAndGet();\n        }\n\n        if(stats) {\n            missing_msgs_received++;\n            updateStats(received, original_sender, 0, 0, 1);\n            MissingMessage missing=new MissingMessage(original_sender, seqno);\n            receive_history.add(missing);\n        }\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Retransmit from sent-table, called when XMIT_REQ is received. Bundles all messages to be xmitted into one large\n     * message and sends them back with an XMIT_RSP header. Note that since we cannot count on a fragmentation layer\n     * below us, we have to make sure the message doesn't exceed max_xmit_size bytes. If this is the case, we split the\n     * message into multiple, smaller-chunked messages. But in most cases this still yields fewer messages than if each\n     * requested message was retransmitted separately.\n     *\n     * @param xmit_requester        The sender of the XMIT_REQ, we have to send the requested copy of the message to this address\n     * @param first_seqno The first sequence number to be retransmitted (<= last_seqno)\n     * @param last_seqno  The last sequence number to be retransmitted (>= first_seqno)\n     * @param original_sender The member who originally sent the messsage. Guaranteed to be non-null\n     */\n    private void handleXmitReq(Address xmit_requester, long first_seqno, long last_seqno, Address original_sender) {\n        Message msg, tmp;\n        long size=0, marker=first_seqno, len;\n\n//        if(last_seqno - first_seqno < 50) {\n//            handleXmitReqUnbatched(xmit_requester, first_seqno, last_seqno, original_sender);\n//            return;\n//        }\n\n        if(log.isTraceEnabled()) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(local_addr).append(\": received xmit request from \").append(xmit_requester).append(\" for \");\n            sb.append(original_sender).append(\" [\").append(first_seqno).append(\" - \").append(last_seqno).append(\"]\");\n            log.trace(sb.toString());\n        }\n\n        if(first_seqno > last_seqno) {\n            if(log.isErrorEnabled())\n                log.error(\"first_seqno (\" + first_seqno + \") > last_seqno (\" + last_seqno + \"): not able to retransmit\");\n            return;\n        }\n\n        if(stats) {\n            xmit_reqs_received+=last_seqno - first_seqno +1;\n            updateStats(received, xmit_requester, 1, 0, 0);\n        }\n\n\n        LinkedList<Message> list=new LinkedList<Message>();\n        NakReceiverWindow win=xmit_table.get(original_sender);\n        for(long i=first_seqno; i <= last_seqno; i++) {\n            msg=win != null? win.get(i) : null;\n            if(msg == null || msg == NakReceiverWindow.NULL_MSG) {\n                if(log.isErrorEnabled() && !local_addr.equals(xmit_requester)) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"(requester=\").append(xmit_requester).append(\", local_addr=\").append(this.local_addr);\n                    sb.append(\") message \").append(original_sender).append(\"::\").append(i);\n                    sb.append(\" not found in retransmission table of \");\n                    if(win != null) {\n                        sb.append(original_sender).append(\": \").append(win.toString());\n                    }\n                    else {\n                        sb.append(printMessages());\n                    }\n\n                    if(print_stability_history_on_failed_xmit) {\n                        sb.append(\" (stability history:\\n\").append(printStabilityHistory());\n                    }\n                    log.error(sb);\n                }\n                continue;\n            }\n            len=msg.size();\n            size+=len;\n            if(size > max_xmit_size && !list.isEmpty()) { // changed from >= to > (yaron-r, bug #943709)\n                // yaronr: added &&listSize()>0 since protocols between FRAG and NAKACK add headers, and message exceeds size.\n\n                // size has reached max_xmit_size. go ahead and send message (excluding the current message)\n                if(log.isTraceEnabled())\n                    log.trace(\"xmitting msgs [\" + marker + '-' + (i - 1) + \"] to \" + xmit_requester);\n                sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, i - 1);\n                marker=i;\n                list.clear();\n                // fixed Dec 15 2003 (bela, patch from Joel Dice (dicej)), see explanantion under\n                // bug report #854887\n                size=len;\n            }\n            tmp=msg;\n            // tmp.setDest(xmit_requester);\n            // tmp.setSrc(local_addr);\n            if(tmp.getSrc() == null)\n                tmp.setSrc(local_addr);\n            list.add(tmp);\n        }\n\n        if(!list.isEmpty()) {\n            if(log.isTraceEnabled())\n                log.trace(\"xmitting msgs [\" + marker + '-' + last_seqno + \"] to \" + xmit_requester);\n            sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, last_seqno);\n            list.clear();\n        }\n    }","id":103876,"modified_method":"/**\n     * Retransmit from sent-table, called when XMIT_REQ is received. Bundles all messages to be xmitted into one large\n     * message and sends them back with an XMIT_RSP header. Note that since we cannot count on a fragmentation layer\n     * below us, we have to make sure the message doesn't exceed max_xmit_size bytes. If this is the case, we split the\n     * message into multiple, smaller-chunked messages. But in most cases this still yields fewer messages than if each\n     * requested message was retransmitted separately.\n     *\n     * @param xmit_requester        The sender of the XMIT_REQ, we have to send the requested copy of the message to this address\n     * @param first_seqno The first sequence number to be retransmitted (<= last_seqno)\n     * @param last_seqno  The last sequence number to be retransmitted (>= first_seqno)\n     * @param original_sender The member who originally sent the messsage. Guaranteed to be non-null\n     */\n    private void handleXmitReq(Address xmit_requester, long first_seqno, long last_seqno, Address original_sender) {\n        Message msg, tmp;\n        long size=0, marker=first_seqno, len;\n\n//        if(last_seqno - first_seqno < 50) {\n//            handleXmitReqUnbatched(xmit_requester, first_seqno, last_seqno, original_sender);\n//            return;\n//        }\n\n        if(log.isTraceEnabled()) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(local_addr).append(\": received xmit request from \").append(xmit_requester).append(\" for \");\n            sb.append(original_sender).append(\" [\").append(first_seqno).append(\" - \").append(last_seqno).append(\"]\");\n            log.trace(sb.toString());\n        }\n\n        if(first_seqno > last_seqno) {\n            if(log.isErrorEnabled())\n                log.error(\"first_seqno (\" + first_seqno + \") > last_seqno (\" + last_seqno + \"): not able to retransmit\");\n            return;\n        }\n\n        if(stats) {\n            xmit_reqs_received+=last_seqno - first_seqno +1;\n            updateStats(received, xmit_requester, 1, 0, 0);\n        }\n\n        if(xmit_time_stats != null) {\n            long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n            XmitTimeStat stat=xmit_time_stats.get(key);\n            if(stat == null) {\n                stat=new XmitTimeStat();\n                xmit_time_stats.putIfAbsent(key, stat);\n            }\n            stat.xmit_reqs_received.addAndGet((int)(last_seqno - first_seqno +1));\n            stat.xmit_rsps_sent.addAndGet((int)(last_seqno - first_seqno +1));\n        }\n\n        LinkedList<Message> list=new LinkedList<Message>();\n        NakReceiverWindow win=xmit_table.get(original_sender);\n        for(long i=first_seqno; i <= last_seqno; i++) {\n            msg=win != null? win.get(i) : null;\n            if(msg == null || msg == NakReceiverWindow.NULL_MSG) {\n                if(log.isErrorEnabled() && !local_addr.equals(xmit_requester)) {\n                    StringBuffer sb=new StringBuffer();\n                    sb.append(\"(requester=\").append(xmit_requester).append(\", local_addr=\").append(this.local_addr);\n                    sb.append(\") message \").append(original_sender).append(\"::\").append(i);\n                    sb.append(\" not found in retransmission table of \");\n                    if(win != null) {\n                        sb.append(original_sender).append(\": \").append(win.toString());\n                    }\n                    else {\n                        sb.append(printMessages());\n                    }\n\n                    if(print_stability_history_on_failed_xmit) {\n                        sb.append(\" (stability history:\\n\").append(printStabilityHistory());\n                    }\n                    log.error(sb);\n                }\n                continue;\n            }\n            len=msg.size();\n            size+=len;\n            if(size > max_xmit_size && !list.isEmpty()) { // changed from >= to > (yaron-r, bug #943709)\n                // yaronr: added &&listSize()>0 since protocols between FRAG and NAKACK add headers, and message exceeds size.\n\n                // size has reached max_xmit_size. go ahead and send message (excluding the current message)\n                if(log.isTraceEnabled())\n                    log.trace(\"xmitting msgs [\" + marker + '-' + (i - 1) + \"] to \" + xmit_requester);\n                sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, i - 1);\n                marker=i;\n                list.clear();\n                // fixed Dec 15 2003 (bela, patch from Joel Dice (dicej)), see explanantion under\n                // bug report #854887\n                size=len;\n            }\n            tmp=msg;\n            // tmp.setDest(xmit_requester);\n            // tmp.setSrc(local_addr);\n            if(tmp.getSrc() == null)\n                tmp.setSrc(local_addr);\n            list.add(tmp);\n        }\n\n        if(!list.isEmpty()) {\n            if(log.isTraceEnabled())\n                log.trace(\"xmitting msgs [\" + marker + '-' + last_seqno + \"] to \" + xmit_requester);\n            sendXmitRsp(xmit_requester, (LinkedList)list.clone(), marker, last_seqno);\n            list.clear();\n        }\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"private void handleXmitRsp(Message msg) {\n        LinkedList list;\n        Message m;\n\n        if(msg == null) {\n            if(log.isWarnEnabled())\n                log.warn(\"message is null\");\n            return;\n        }\n\n        try {\n            list=Util.byteBufferToMessageList(msg.getRawBuffer(), msg.getOffset(), msg.getLength());\n            if(list != null) {\n                if(stats) {\n                    xmit_rsps_received+=list.size();\n                    updateStats(received, msg.getSrc(), 0, 1, 0);\n                }\n\n                int count=0;\n                for(Iterator it=list.iterator(); it.hasNext();) {\n                    m=(Message)it.next();\n                    if(rebroadcasting)\n                        count++;\n                    up(new Event(Event.MSG, m));\n                }\n                if(rebroadcasting && count > 0) {\n                    Digest tmp=getDigest();\n                    if(tmp.isGreaterThanOrEqual(rebroadcast_digest)) {\n                        cancelRebroadcasting();\n                    }\n                }\n                list.clear();\n            }\n        }\n        catch(Exception ex) {\n            if(log.isErrorEnabled()) {\n                log.error(\"failed reading list of retransmitted messages\", ex);\n            }\n        }\n    }","id":103877,"modified_method":"private void handleXmitRsp(Message msg) {\n        LinkedList list;\n        Message m;\n\n        if(msg == null) {\n            if(log.isWarnEnabled())\n                log.warn(\"message is null\");\n            return;\n        }\n\n        try {\n            list=Util.byteBufferToMessageList(msg.getRawBuffer(), msg.getOffset(), msg.getLength());\n            if(list != null) {\n                if(xmit_time_stats != null) {\n                    long key=(System.currentTimeMillis() - xmit_time_stats_start) / 1000;\n                    XmitTimeStat stat=xmit_time_stats.get(key);\n                    if(stat == null) {\n                        stat=new XmitTimeStat();\n                        xmit_time_stats.putIfAbsent(key, stat);\n                    }\n                    stat.xmit_rsps_received.addAndGet(list.size());\n                }\n\n                if(stats) {\n                    xmit_rsps_received+=list.size();\n                    updateStats(received, msg.getSrc(), 0, 1, 0);\n                }\n\n                int count=0;\n                for(Iterator it=list.iterator(); it.hasNext();) {\n                    m=(Message)it.next();\n                    if(rebroadcasting)\n                        count++;\n                    up(new Event(Event.MSG, m));\n                }\n                if(rebroadcasting && count > 0) {\n                    Digest tmp=getDigest();\n                    if(tmp.isGreaterThanOrEqual(rebroadcast_digest)) {\n                        cancelRebroadcasting();\n                    }\n                }\n                list.clear();\n            }\n        }\n        catch(Exception ex) {\n            if(log.isErrorEnabled()) {\n                log.error(\"failed reading list of retransmitted messages\", ex);\n            }\n        }\n    }","commit_id":"5ce00095866cc546407ffeeffb584bf4918e32b8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n\t * Build the context for the main list mode.\n\t */\n\tprivate String buildListContext(SessionState state, Context context)\n\t{\n\t\t// put the service in the context\n\t\tcontext.put(\"service\", AliasService.getInstance());\n\n\t\t// put all aliases into the context\n\t\tcontext.put(\"aliases\", prepPage(state));\n\n\t\t// build the menu\n\t\tMenu bar = new MenuImpl();\n\t\tif (AliasService.allowAdd())\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb.getString(\"alias.new\"), null, true, MenuItem.CHECKED_NA, \"doNew\"));\n\t\t}\n\n\t\t// add the paging commands\n\t\t//addListPagingMenus(bar, state);\n\t\tint pageSize = Integer.valueOf(state.getAttribute(STATE_PAGESIZE).toString()).intValue();\n\t\tint currentPageNubmer = Integer.valueOf(state.getAttribute(STATE_CURRENT_PAGE).toString()).intValue();\n\t\tint startNumber = pageSize * (currentPageNubmer - 1) + 1;\n\t\tint endNumber = pageSize * currentPageNubmer;\n\n\t\tint totalNumber = 0;\n\t\ttry\n\t\t{\n\t\t\ttotalNumber = Integer.valueOf(state.getAttribute(STATE_NUM_MESSAGES).toString()).intValue();\n\t\t}\n\t\tcatch (java.lang.NullPointerException ignore) {}\n\t\tcatch (java.lang.NumberFormatException ignore) {}\n\n\t\tif (totalNumber < endNumber) endNumber = totalNumber;\n\n\t\tcontext.put(\"startNumber\", Integer.valueOf(startNumber));\n\t\tcontext.put(\"endNumber\", Integer.valueOf(endNumber));\n\t\tcontext.put(\"totalNumber\", Integer.valueOf(totalNumber));\n\t\tpagingInfoToContext(state, context);\n\t\t\n\t\t// add the search commands\n\t\taddSearchMenus(bar, state);\n\n\t\t// add the refresh commands\n\t\taddRefreshMenus(bar, state);\n\n\t\tif (bar.size() > 0)\n\t\t{\n\t\t\tcontext.put(Menu.CONTEXT_MENU, bar);\n\t\t}\n\n\t\treturn \"_list\";\n\n\t}","id":103878,"modified_method":"/**\n\t * Build the context for the main list mode.\n\t */\n\tprivate String buildListContext(SessionState state, Context context)\n\t{\n\t\t// put the service in the context\n\t\tcontext.put(\"service\", AliasService.getInstance());\n\n\t\t// put all aliases into the context\n\t\tcontext.put(\"aliases\", prepPage(state));\n\n\t\t// build the menu\n\t\tMenu bar = new MenuImpl();\n\t\tif (AliasService.allowAdd())\n\t\t{\n\t\t\tbar.add(new MenuEntry(rb.getString(\"alias.new\"), null, true, MenuItem.CHECKED_NA, \"doNew\"));\n\t\t}\n\n\t\t// add the paging commands\n\t\t//addListPagingMenus(bar, state);\n\t\tint pageSize = Integer.valueOf(state.getAttribute(STATE_PAGESIZE).toString()).intValue();\n\t\tint currentPageNubmer = Integer.valueOf(state.getAttribute(STATE_CURRENT_PAGE).toString()).intValue();\n\t\tint startNumber = pageSize * (currentPageNubmer - 1) + 1;\n\t\tint endNumber = pageSize * currentPageNubmer;\n\n\t\tint totalNumber = 0;\n\t\ttry\n\t\t{\n\t\t\ttotalNumber = Integer.valueOf(state.getAttribute(STATE_NUM_MESSAGES).toString()).intValue();\n\t\t}\n\t\tcatch (java.lang.NullPointerException ignore) {}\n\t\tcatch (java.lang.NumberFormatException ignore) {}\n\n\t\tif (totalNumber < endNumber) endNumber = totalNumber;\n\t\tcontext.put(\"totalNumber\", Integer.valueOf(totalNumber));\n\t\tcontext.put(\"numbers\", new Integer[]{Integer.valueOf(startNumber), Integer.valueOf(endNumber), Integer.valueOf(totalNumber)});\n\t\tpagingInfoToContext(state, context);\n\t\t\n\t\t// add the search commands\n\t\taddSearchMenus(bar, state);\n\n\t\t// add the refresh commands\n\t\taddRefreshMenus(bar, state);\n\n\t\tif (bar.size() > 0)\n\t\t{\n\t\t\tcontext.put(Menu.CONTEXT_MENU, bar);\n\t\t}\n\n\t\t// for page size drop-down list\n\t\tArrayList<Integer[]> list = new ArrayList<Integer[]>();\n\t\tString[] sizeArray = {\"5\", \"10\", \"20\", \"50\", \"100\", \"200\"};\n\t\tfor (Iterator<String> iSize = (new ArrayList<String>(Arrays.asList(sizeArray))).iterator(); iSize.hasNext();)\n\t\t{\n\t\t\tlist.add(new Integer[]{Integer.valueOf(iSize.next())});\n\t\t}\n\t\tcontext.put(\"sizeList\", list);\n\t\t\n\t\treturn \"_list\";\n\n\t}","commit_id":"7e8bc1d1c63c16fa1f002c579a95189076760e02","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * doRemove_confirmed called when \"eventSubmit_doRemove_confirmed\" is in the request parameters to remove the alias\n\t */\n\tpublic void doRemove_confirmed(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\n\t\t// remove\n\t\ttry\n\t\t{\n\t\t\tAliasService.remove(alias);\n\t\t}\n\t\tcatch (PermissionException e)\n\t\t{\n\t\t\taddAlert(state, rb.getString(\"alias.notpermis1\") + \" \" + alias.getId());\n\t\t}\n\n\t\t// cleanup\n\t\tstate.removeAttribute(\"alias\");\n\t\tstate.removeAttribute(\"new\");\n\n\t\t// go to main mode\n\t\tstate.removeAttribute(\"mode\");\n\n\t\t// make sure auto-updates are enabled\n\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\tif (courier != null) courier.enable();\n\n\t}","id":103879,"modified_method":"/**\n\t * doRemove_confirmed called when \"eventSubmit_doRemove_confirmed\" is in the request parameters to remove the alias\n\t */\n\tpublic void doRemove_confirmed(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\n\t\t// remove\n\t\ttry\n\t\t{\n\t\t\tAliasService.remove(alias);\n\t\t}\n\t\tcatch (PermissionException e)\n\t\t{\n\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.notpermis1\", new Object[]{alias.getId()}));\n\t\t}\n\n\t\t// cleanup\n\t\tstate.removeAttribute(\"alias\");\n\t\tstate.removeAttribute(\"new\");\n\n\t\t// go to main mode\n\t\tstate.removeAttribute(\"mode\");\n\n\t\t// make sure auto-updates are enabled\n\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\tif (courier != null) courier.enable();\n\n\t}","commit_id":"7e8bc1d1c63c16fa1f002c579a95189076760e02","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * doEdit called when \"eventSubmit_doEdit\" is in the request parameters to edit a alias\n\t */\n\tpublic void doEdit(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\t\tString id = data.getParameters().getString(\"id\");\n\n\t\t// get the alias\n\t\ttry\n\t\t{\n\t\t\tAliasEdit alias = AliasService.edit(id);\n\t\t\tstate.setAttribute(\"alias\", alias);\n\t\t\tstate.setAttribute(\"mode\", \"edit\");\n\n\t\t\t// disable auto-updates while not in list mode\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.disable();\n\t\t}\n\t\tcatch (IdUnusedException e)\n\t\t{\n\t\t\tLog.warn(\"chef\", \"AliasesAction.doEdit: alias not found: \" + id);\n\n\t\t\taddAlert(state, rb.getString(\"alias.alias\") + \" \" + id + \" \" + rb.getString(\"alias.notfound\"));\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\t\tcatch (PermissionException e)\n\t\t{\n\t\t\taddAlert(state, rb.getString(\"alias.notpermis\") + \" \" + id);\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\t\tcatch (InUseException e)\n\t\t{\n\t\t\taddAlert(state, rb.getString(\"alias.someone\") + \" \" + id);\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\n\t}","id":103880,"modified_method":"/**\n\t * doEdit called when \"eventSubmit_doEdit\" is in the request parameters to edit a alias\n\t */\n\tpublic void doEdit(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\t\tString id = data.getParameters().getString(\"id\");\n\n\t\t// get the alias\n\t\ttry\n\t\t{\n\t\t\tAliasEdit alias = AliasService.edit(id);\n\t\t\tstate.setAttribute(\"alias\", alias);\n\t\t\tstate.setAttribute(\"mode\", \"edit\");\n\n\t\t\t// disable auto-updates while not in list mode\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.disable();\n\t\t}\n\t\tcatch (IdUnusedException e)\n\t\t{\n\t\t\tLog.warn(\"chef\", \"AliasesAction.doEdit: alias not found: \" + id);\n\n\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.notfound\", new Object[]{id}));\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\t\tcatch (PermissionException e)\n\t\t{\n\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.notpermis\", new Object[]{id}));\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\t\tcatch (InUseException e)\n\t\t{\n\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.someone\", new Object[]{id}));\n\t\t\tstate.removeAttribute(\"mode\");\n\n\t\t\t// make sure auto-updates are enabled\n\t\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\t\tif (courier != null) courier.enable();\n\t\t}\n\n\t}","commit_id":"7e8bc1d1c63c16fa1f002c579a95189076760e02","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * Read the alias form and update the alias in state.\n\t * \n\t * @return true if the form is accepted, false if there's a validation error (an alertMessage will be set)\n\t */\n\tprivate boolean readAliasForm(RunData data, SessionState state)\n\t{\n\t\t// read the form\n\t\tString id = StringUtil.trimToNull(data.getParameters().getString(\"id\"));\n\t\tString target = StringUtil.trimToNull(data.getParameters().getString(\"target\"));\n\t\t\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\n\t\t// add if needed\n\t\tif (alias == null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// add the alias, getting an edit clone to it\n\t\t\t\talias = AliasService.add(id);\n\n\t\t\t\t// put the alias in the state\n\t\t\t\tstate.setAttribute(\"alias\", alias);\n\t\t\t}\n\t\t\tcatch (IdUsedException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getString(\"alias.use\"));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (IdInvalidException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getString(\"alias.invalid\"));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (PermissionException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getString(\"alias.notpermis2\"));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// update\n\t\tif (alias != null)\n\t\t{\n\t\t\talias.setTarget(target);\n\t\t}\n\n\t\treturn true;\n\n\t}","id":103881,"modified_method":"/**\n\t * Read the alias form and update the alias in state.\n\t * \n\t * @return true if the form is accepted, false if there's a validation error (an alertMessage will be set)\n\t */\n\tprivate boolean readAliasForm(RunData data, SessionState state)\n\t{\n\t\t// read the form\n\t\tString id = StringUtil.trimToNull(data.getParameters().getString(\"id\"));\n\t\tString target = StringUtil.trimToNull(data.getParameters().getString(\"target\"));\n\t\t\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\n\t\t// add if needed\n\t\tif (alias == null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// add the alias, getting an edit clone to it\n\t\t\t\talias = AliasService.add(id);\n\n\t\t\t\t// put the alias in the state\n\t\t\t\tstate.setAttribute(\"alias\", alias);\n\t\t\t}\n\t\t\tcatch (IdUsedException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.use\", new Object[]{id}));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (IdInvalidException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.invalid\", new Object[]{id}));;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (PermissionException e)\n\t\t\t{\n\t\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.notpermis2\", new Object[]{id}));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// update\n\t\tif (alias != null)\n\t\t{\n\t\t\talias.setTarget(target);\n\t\t}\n\n\t\treturn true;\n\n\t}","commit_id":"7e8bc1d1c63c16fa1f002c579a95189076760e02","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * doCancel called when \"eventSubmit_doCancel\" is in the request parameters to cancel alias edits\n\t */\n\tpublic void doCancel(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\t\tif (alias != null)\n\t\t{\n\t\t\t// if this was a new, delete the alias\n\t\t\tif (\"true\".equals(state.getAttribute(\"new\")))\n\t\t\t{\n\t\t\t\t// remove\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tAliasService.remove(alias);\n\t\t\t\t}\n\t\t\t\tcatch (PermissionException e)\n\t\t\t\t{\n\t\t\t\t\taddAlert(state, rb.getString(\"alias.notpermis1\") + \" \" + alias.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAliasService.cancel(alias);\n\t\t\t}\n\t\t}\n\n\t\t// cleanup\n\t\tstate.removeAttribute(\"alias\");\n\t\tstate.removeAttribute(\"new\");\n\n\t\t// return to main mode\n\t\tstate.removeAttribute(\"mode\");\n\n\t\t// make sure auto-updates are enabled\n\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\tif (courier != null) courier.enable();\n\n\t}","id":103882,"modified_method":"/**\n\t * doCancel called when \"eventSubmit_doCancel\" is in the request parameters to cancel alias edits\n\t */\n\tpublic void doCancel(RunData data, Context context)\n\t{\n\t\tSessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\n\t\t// get the alias\n\t\tAliasEdit alias = (AliasEdit) state.getAttribute(\"alias\");\n\t\tif (alias != null)\n\t\t{\n\t\t\t// if this was a new, delete the alias\n\t\t\tif (\"true\".equals(state.getAttribute(\"new\")))\n\t\t\t{\n\t\t\t\t// remove\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tAliasService.remove(alias);\n\t\t\t\t}\n\t\t\t\tcatch (PermissionException e)\n\t\t\t\t{\n\t\t\t\t\taddAlert(state, rb.getFormattedMessage(\"alias.notpermis1\", new Object[]{alias.getId()}));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tAliasService.cancel(alias);\n\t\t\t}\n\t\t}\n\n\t\t// cleanup\n\t\tstate.removeAttribute(\"alias\");\n\t\tstate.removeAttribute(\"new\");\n\n\t\t// return to main mode\n\t\tstate.removeAttribute(\"mode\");\n\n\t\t// make sure auto-updates are enabled\n\t\tObservingCourier courier = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\n\t\tif (courier != null) courier.enable();\n\n\t}","commit_id":"7e8bc1d1c63c16fa1f002c579a95189076760e02","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ResultRow(Object obj, String primaryKey, int pos, boolean bold) {\n\t\t_obj = obj;\n\t\t_primaryKey = primaryKey;\n\t\t_pos = pos;\n\t\t_bold = bold;\n\t\t_searchEntries = new ArrayList<SearchEntry>();\n\t}","id":103883,"modified_method":"public ResultRow(Object obj, String primaryKey, int pos, boolean bold) {\n\t\tthis(obj, primaryKey, String.valueOf(pos + 1), pos, bold);\n\t}","commit_id":"8c258f4275445885b83badd4447748115cdc2b17","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void processRow() {\n\t\tObject model = _results.get(_rowIndex);\n\n\t\tif (isEscapedModel()) {\n\t\t\tif (model instanceof BaseModel) {\n\t\t\t\tBaseModel<?> baseModel = (BaseModel<?>)model;\n\n\t\t\t\tmodel = baseModel.toEscapedModel();\n\t\t\t}\n\t\t\telse if (model instanceof RepositoryModel) {\n\t\t\t\tRepositoryModel<?> repositoryModel = (RepositoryModel<?>)model;\n\n\t\t\t\tmodel = repositoryModel.toEscapedModel();\n\t\t\t}\n\t\t}\n\n\t\tif (Validator.isNull(_keyProperty)) {\n\t\t\tString primaryKey = String.valueOf(model);\n\n\t\t\t_resultRow = new ResultRow(model, primaryKey, _rowIndex, _bold);\n\t\t}\n\t\telse if (isStringKey()) {\n\t\t\tString primaryKey = BeanPropertiesUtil.getString(\n\t\t\t\tmodel, _keyProperty);\n\n\t\t\t_resultRow = new ResultRow(model, primaryKey, _rowIndex, _bold);\n\t\t}\n\t\telse {\n\t\t\tObject primaryKey = BeanPropertiesUtil.getObject(\n\t\t\t\tmodel, _keyProperty);\n\n\t\t\t_resultRow = new ResultRow(\n\t\t\t\tmodel, String.valueOf(primaryKey), _rowIndex, _bold);\n\t\t}\n\n\t\tpageContext.setAttribute(_indexVar, _rowIndex);\n\t\tpageContext.setAttribute(_modelVar, model);\n\t\tpageContext.setAttribute(_rowVar, _resultRow);\n\t}","id":103884,"modified_method":"protected void processRow() {\n\t\tObject model = _results.get(_rowIndex);\n\n\t\tif (isEscapedModel()) {\n\t\t\tif (model instanceof BaseModel) {\n\t\t\t\tBaseModel<?> baseModel = (BaseModel<?>)model;\n\n\t\t\t\tmodel = baseModel.toEscapedModel();\n\t\t\t}\n\t\t\telse if (model instanceof RepositoryModel) {\n\t\t\t\tRepositoryModel<?> repositoryModel = (RepositoryModel<?>)model;\n\n\t\t\t\tmodel = repositoryModel.toEscapedModel();\n\t\t\t}\n\t\t}\n\n\t\tString primaryKey = null;\n\n\t\tif (Validator.isNull(_keyProperty)) {\n\t\t\tprimaryKey = String.valueOf(model);\n\t\t}\n\t\telse if (isStringKey()) {\n\t\t\tprimaryKey = BeanPropertiesUtil.getString(model, _keyProperty);\n\t\t}\n\t\telse {\n\t\t\tObject primaryKeyObj = BeanPropertiesUtil.getObject(\n\t\t\t\tmodel, _keyProperty);\n\n\t\t\tprimaryKey = String.valueOf(primaryKeyObj);\n\t\t}\n\n\t\tString idKey = null;\n\n\t\tif (Validator.isNull(_idProperty)) {\n\t\t\tidKey = String.valueOf(_rowIndex + 1);\n\t\t}\n\t\telse {\n\t\t\tObject idObj = BeanPropertiesUtil.getObject(model, _idProperty);\n\n\t\t\tidKey = FriendlyURLNormalizerUtil.normalize(String.valueOf(idObj));\n\t\t}\n\n\t\t_resultRow = new ResultRow(model, primaryKey, idKey, _rowIndex, _bold);\n\n\t\tpageContext.setAttribute(_indexVar, _rowIndex);\n\t\tpageContext.setAttribute(_modelVar, model);\n\t\tpageContext.setAttribute(_rowVar, _resultRow);\n\t}","commit_id":"8c258f4275445885b83badd4447748115cdc2b17","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic int doEndTag() {\n\t\t_headerNames = null;\n\t\t_headerNamesAssigned = false;\n\t\t_resultRows = null;\n\t\t_rowIndex = 0;\n\t\t_resultRow = null;\n\n\t\tif (!ServerDetector.isResin()) {\n\t\t\t_bold = false;\n\t\t\t_className = null;\n\t\t\t_escapedModel = false;\n\t\t\t_indexVar = DEFAULT_INDEX_VAR;\n\t\t\t_keyProperty = null;\n\t\t\t_modelVar = DEFAULT_MODEL_VAR;\n\t\t\t_orderableHeaders = null;\n\t\t\t_rowVar = DEFAULT_ROW_VAR;\n\t\t\t_stringKey = false;\n\t\t}\n\n\t\treturn EVAL_PAGE;\n\t}","id":103885,"modified_method":"@Override\n\tpublic int doEndTag() {\n\t\t_headerNames = null;\n\t\t_headerNamesAssigned = false;\n\t\t_resultRows = null;\n\t\t_rowIndex = 0;\n\t\t_resultRow = null;\n\n\t\tif (!ServerDetector.isResin()) {\n\t\t\t_bold = false;\n\t\t\t_className = null;\n\t\t\t_escapedModel = false;\n\t\t\t_idProperty = null;\n\t\t\t_indexVar = DEFAULT_INDEX_VAR;\n\t\t\t_keyProperty = null;\n\t\t\t_modelVar = DEFAULT_MODEL_VAR;\n\t\t\t_orderableHeaders = null;\n\t\t\t_rowVar = DEFAULT_ROW_VAR;\n\t\t\t_stringKey = false;\n\t\t}\n\n\t\treturn EVAL_PAGE;\n\t}","commit_id":"8c258f4275445885b83badd4447748115cdc2b17","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reconfigureCaches(ClassLoader classLoader) throws Exception {\n\t\tConfiguration portletPropertiesConfiguration = null;\n\n\t\ttry {\n\t\t\tportletPropertiesConfiguration =\n\t\t\t\tConfigurationFactoryUtil.getConfiguration(\n\t\t\t\t\tclassLoader, \"portlet\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Unable to read portlet.properties\");\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tString cacheConfigurationLocation = portletPropertiesConfiguration.get(\n\t\t\tPropsKeys.EHCACHE_SINGLE_VM_CONFIG_LOCATION);\n\n\t\treconfigureCaches(\n\t\t\tclassLoader, cacheConfigurationLocation,\n\t\t\t_SINGLE_VM_PORTAL_CACHE_MANAGER_BEAN_NAME);\n\n\t\tString clusterCacheConfigurationLocation =\n\t\t\tportletPropertiesConfiguration.get(\n\t\t\t\tPropsKeys.EHCACHE_MULTI_VM_CONFIG_LOCATION);\n\n\t\treconfigureCaches(\n\t\t\tclassLoader, clusterCacheConfigurationLocation,\n\t\t\t_MULTI_VM_PORTAL_CACHE_MANAGER_BEAN_NAME);\n\n\t\tString hibernateCacheConfigurationPath =\n\t\t\tportletPropertiesConfiguration.get(\n\t\t\t\tPropsKeys.NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME);\n\n\t\treconfigureHibernateCache(classLoader, hibernateCacheConfigurationPath);\n\t}","id":103886,"modified_method":"protected void reconfigureCaches(ClassLoader classLoader) throws Exception {\n\t\tConfiguration portletPropertiesConfiguration = null;\n\n\t\ttry {\n\t\t\tportletPropertiesConfiguration =\n\t\t\t\tConfigurationFactoryUtil.getConfiguration(\n\t\t\t\t\tclassLoader, \"portlet\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\"Unable to read portlet.properties\");\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tPortalCacheConfiguratorUtil.reconfigureCaches(\n\t\t\tclassLoader,\n\t\t\t_getCacheConfiguration(\n\t\t\t\tportletPropertiesConfiguration, classLoader,\n\t\t\t\tPropsKeys.EHCACHE_SINGLE_VM_CONFIG_LOCATION));\n\n\t\tPortalCacheConfiguratorUtil.reconfigureCaches(\n\t\t\tclassLoader,\n\t\t\t_getCacheConfiguration(\n\t\t\t\tportletPropertiesConfiguration, classLoader,\n\t\t\t\tPropsKeys.EHCACHE_MULTI_VM_CONFIG_LOCATION));\n\n\t\tPortalCacheConfiguratorUtil.reconfigureHibernateCache(\n\t\t\t_getCacheConfiguration(\n\t\t\t\tportletPropertiesConfiguration, classLoader,\n\t\t\t\tPropsKeys.NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME));\n\t}","commit_id":"0ceb039a4d881e1a8a86003d5fe5e633113dba83","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reconfigureCaches(\n\t\t\tClassLoader classLoader, String cacheConfigurationPath,\n\t\t\tString portalCacheManagerBeanId)\n\t\tthrows Exception {\n\n\t\tif (Validator.isNull(cacheConfigurationPath)) {\n\t\t\treturn;\n\t\t}\n\n\t\tURL cacheConfigurationURL = classLoader.getResource(\n\t\t\tcacheConfigurationPath);\n\n\t\tif (cacheConfigurationURL == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tClassLoader aggregateClassLoader =\n\t\t\tAggregateClassLoader.getAggregateClassLoader(\n\t\t\t\tnew ClassLoader[] {\n\t\t\t\t\tClassLoaderUtil.getPortalClassLoader(), classLoader\n\t\t\t\t});\n\n\t\tClassLoader contextClassLoader =\n\t\t\tClassLoaderUtil.getContextClassLoader();\n\n\t\ttry {\n\t\t\tClassLoaderUtil.setContextClassLoader(aggregateClassLoader);\n\n\t\t\tPortalCacheManager<?, ?> portalCacheManager =\n\t\t\t\t(PortalCacheManager<?, ?>)PortalBeanLocatorUtil.locate(\n\t\t\t\t\tportalCacheManagerBeanId);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\n\t\t\t\t\t\"Reconfiguring caches in cache manager \" +\n\t\t\t\t\t\tportalCacheManagerBeanId + \" using \" +\n\t\t\t\t\t\t\tcacheConfigurationURL);\n\t\t\t}\n\n\t\t\tportalCacheManager.reconfigureCaches(cacheConfigurationURL);\n\t\t}\n\t\tfinally {\n\t\t\tClassLoaderUtil.setContextClassLoader(contextClassLoader);\n\t\t}\n\t}","id":103887,"modified_method":"private URL _getCacheConfiguration(\n\t\tConfiguration configuration, ClassLoader classLoader,\n\t\tString configLocation) {\n\n\t\tString cacheConfigurationLocation = configuration.get(configLocation);\n\n\t\tif (Validator.isNull(cacheConfigurationLocation)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn classLoader.getResource(cacheConfigurationLocation);\n\t}","commit_id":"0ceb039a4d881e1a8a86003d5fe5e633113dba83","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {\n        AsyncContext ctx = (AsyncContext)request.getAttribute(AsyncContext.class.getName());\n        if (ctx == null)\n        {\n            ctx = request.startAsync();\n            ctx.setTimeout(0);\n            scheduler.schedule(new DispatchBack(ctx),500,TimeUnit.MILLISECONDS);\n        }\n        else\n        {\n            String fileName = request.getServletPath();\n            byte[] dataBytes = loadContentFileBytes(fileName);\n\n            response.setContentLength(dataBytes.length);\n\n            ServletOutputStream out = response.getOutputStream();\n\n            if (fileName.endsWith(\"txt\"))\n                response.setContentType(\"text/plain\");\n            else if (fileName.endsWith(\"mp3\"))\n                response.setContentType(\"audio/mpeg\");\n            response.setHeader(\"ETag\",\"W/etag-\" + fileName);\n\n            out.write(dataBytes);\n\n            ctx.complete();\n        }\n    }","id":103888,"modified_method":"@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {        \n        Boolean suspended = (Boolean)request.getAttribute(\"SUSPENDED\");\n        if (suspended==null || !suspended)\n        {\n            request.setAttribute(\"SUSPENDED\",Boolean.TRUE);\n            AsyncContext ctx = request.startAsync();\n            ctx.setTimeout(0);\n            scheduler.schedule(new DispatchBack(ctx),500,TimeUnit.MILLISECONDS);\n        }\n        else\n        {\n            String fileName = request.getServletPath();\n            byte[] dataBytes = loadContentFileBytes(fileName);\n\n            response.setContentLength(dataBytes.length);\n\n            ServletOutputStream out = response.getOutputStream();\n\n            if (fileName.endsWith(\"txt\"))\n                response.setContentType(\"text/plain\");\n            else if (fileName.endsWith(\"mp3\"))\n                response.setContentType(\"audio/mpeg\");\n            response.setHeader(\"ETag\",\"W/etag-\" + fileName);\n\n            out.write(dataBytes);\n        }\n    }","commit_id":"0b68144a273cb4620682eec671bc8126cc6e106b","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {\n        AsyncContext ctx = (AsyncContext)request.getAttribute(AsyncContext.class.getName());\n        if (ctx == null)\n        {\n            ctx = request.startAsync();\n            ctx.addListener(this);\n            ctx.setTimeout(200);\n        }\n        else\n        {\n            String fileName = request.getServletPath();\n            byte[] dataBytes = loadContentFileBytes(fileName);\n\n            response.setContentLength(dataBytes.length);\n\n            ServletOutputStream out = response.getOutputStream();\n\n            if (fileName.endsWith(\"txt\"))\n                response.setContentType(\"text/plain\");\n            else if (fileName.endsWith(\"mp3\"))\n                response.setContentType(\"audio/mpeg\");\n            response.setHeader(\"ETag\",\"W/etag-\" + fileName);\n\n            out.write(dataBytes);\n\n            ctx.complete();\n        }\n    }","id":103889,"modified_method":"@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n    {\n        if (request.getAttribute(\"filename\")!=null)\n            throw new IllegalStateException();\n\n        ServletOutputStream out = response.getOutputStream();\n        \n        AsyncContext ctx = (AsyncContext)request.getAttribute(AsyncContext.class.getName());\n        ctx = request.startAsync();\n        String fileName = request.getServletPath();\n        request.setAttribute(\"filename\",fileName);\n        ctx.addListener(this);\n        ctx.setTimeout(200);\n    }","commit_id":"0b68144a273cb4620682eec671bc8126cc6e106b","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n    public void onTimeout(AsyncEvent event) throws IOException\n    {\n        event.getAsyncContext().dispatch();\n    }","id":103890,"modified_method":"@Override\n    public void onTimeout(AsyncEvent event) throws IOException\n    {\n        HttpServletRequest request = (HttpServletRequest)event.getSuppliedRequest();\n        HttpServletResponse response = (HttpServletResponse)event.getSuppliedResponse();\n\n        String fileName = (String)request.getAttribute(\"filename\");\n        byte[] dataBytes = loadContentFileBytes(fileName);\n\n        response.setContentLength(dataBytes.length);\n\n        ServletOutputStream out = response.getOutputStream();\n\n        if (fileName.endsWith(\"txt\"))\n            response.setContentType(\"text/plain\");\n        else if (fileName.endsWith(\"mp3\"))\n            response.setContentType(\"audio/mpeg\");\n        response.setHeader(\"ETag\",\"W/etag-\" + fileName);\n\n        out.write(dataBytes);\n\n        event.getAsyncContext().complete();\n      \n    }","commit_id":"0b68144a273cb4620682eec671bc8126cc6e106b","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * These are the junit parameters for running this test.\n     * <p>\n     * In addition to Jetty's DefaultServlet we have multiple test\n     * servlets that arrange content-length/content-type/get stream\n     * in different order so as to simulate the real world scenario\n     * that caused the bug in Eclipse <a href=\"Bug 354014\">http://bugs.eclipse.org/354014<\/a>\n     * <p>\n     * This test case will be run with each of the entries in\n     * the array below as setup parameters for the test case.\n     *\n     * @return the junit parameters\n     */\n    @Parameters(name=\"{2}/{1} {0}\")\n    public static List<Object[]> data()\n    {\n        return Arrays.asList(new Object[][]\n        {\n        { AsyncGzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, AsyncScheduledWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletBufferTypeLengthWrite.class, GzipFilter.GZIP },\n\n        { GzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, AsyncScheduledWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.GZIP },\n        \n        { GzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, AsyncScheduledWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.DEFLATE },\n        \n        });\n    }","id":103891,"modified_method":"/**\n     * These are the junit parameters for running this test.\n     * <p>\n     * In addition to Jetty's DefaultServlet we have multiple test\n     * servlets that arrange content-length/content-type/get stream\n     * in different order so as to simulate the real world scenario\n     * that caused the bug in Eclipse <a href=\"Bug 354014\">http://bugs.eclipse.org/354014<\/a>\n     * <p>\n     * This test case will be run with each of the entries in\n     * the array below as setup parameters for the test case.\n     *\n     * @return the junit parameters\n     */\n    @Parameters(name=\"{2}/{1} {0}\")\n    public static List<Object[]> data()\n    {\n        return Arrays.asList(new Object[][]\n        {\n        { AsyncGzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, AsyncScheduledWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.GZIP },\n        { AsyncGzipFilter.class, TestServletBufferTypeLengthWrite.class, GzipFilter.GZIP },\n\n        //{ GzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.GZIP },\n        //{ GzipFilter.class, AsyncScheduledWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.GZIP },\n        { GzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.GZIP },\n        \n        //{ GzipFilter.class, AsyncTimeoutWrite.class, GzipFilter.DEFLATE },\n        //{ GzipFilter.class, AsyncScheduledWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletLengthStreamTypeWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletLengthTypeStreamWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamLengthTypeWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamLengthTypeWriteWithFlush.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletStreamTypeLengthWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletTypeLengthStreamWrite.class, GzipFilter.DEFLATE },\n        { GzipFilter.class, TestServletTypeStreamLengthWrite.class, GzipFilter.DEFLATE },\n        \n        });\n    }","commit_id":"0b68144a273cb4620682eec671bc8126cc6e106b","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Set the servlet that provides content for the GzipFilter in being tested.\n     *\n     * @param servletClass\n     *            the servlet that will provide content.\n     * @return the FilterHolder for configuring the GzipFilter's initParameters with\n     */\n    public FilterHolder setContentServlet(Class<? extends Servlet> servletClass) throws IOException\n    {\n        tester.setContextPath(\"/context\");\n        tester.setResourceBase(testdir.getDir().getCanonicalPath());\n        ServletHolder servletHolder = tester.addServlet(servletClass,\"/\");\n        servletHolder.setInitParameter(\"baseDir\",testdir.getDir().getAbsolutePath());\n        servletHolder.setInitParameter(\"etags\",\"true\");\n        FilterHolder holder = tester.addFilter(gzipFilterClass,\"/*\",EnumSet.allOf(DispatcherType.class));\n        holder.setInitParameter(\"vary\",\"Accept-Encoding\");\n        return holder;\n    }","id":103892,"modified_method":"/**\n     * Set the servlet that provides content for the GzipFilter in being tested.\n     *\n     * @param servletClass\n     *            the servlet that will provide content.\n     * @return the FilterHolder for configuring the GzipFilter's initParameters with\n     */\n    public FilterHolder setContentServlet(Class<? extends Servlet> servletClass) throws IOException\n    {\n        tester.setContextPath(\"/context\");\n        tester.setResourceBase(testdir.getDir().getCanonicalPath());\n        ServletHolder servletHolder = tester.addServlet(servletClass,\"/\");\n        servletHolder.setInitParameter(\"baseDir\",testdir.getDir().getAbsolutePath());\n        servletHolder.setInitParameter(\"etags\",\"true\");\n        FilterHolder holder = tester.addFilter(gzipFilterClass,\"/*\",EnumSet.of(DispatcherType.REQUEST));\n        holder.setInitParameter(\"vary\",\"Accept-Encoding\");\n        return holder;\n    }","commit_id":"0b68144a273cb4620682eec671bc8126cc6e106b","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testMaxStopTime() throws Exception\n    {\n        _sleep=100;\n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMaxStopTimeMs(500);\n        tp.start();\n        tp.dispatch(new Runnable(){\n            public void run () {\n                while (true) {\n                    try {\n                        Thread.sleep(10000);\n                    } catch (InterruptedException ie) {}\n                }\n            }\n        });\n\n        long beforeStop = System.currentTimeMillis();\n        tp.stop();\n        long afterStop = System.currentTimeMillis();\n        assertTrue(tp.isStopped());\n        assertTrue(afterStop - beforeStop < 1000);\n    }","id":103893,"modified_method":"@Test\n    public void testMaxStopTime() throws Exception\n    {\n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMaxStopTimeMs(500);\n        tp.start();\n        tp.dispatch(new Runnable(){\n            public void run () {\n                while (true) {\n                    try {\n                        Thread.sleep(10000);\n                    } catch (InterruptedException ie) {}\n                }\n            }\n        });\n\n        long beforeStop = System.currentTimeMillis();\n        tp.stop();\n        long afterStop = System.currentTimeMillis();\n        assertTrue(tp.isStopped());\n        assertTrue(afterStop - beforeStop < 1000);\n    }","commit_id":"4892e81ed482503284aca8e4632fff8288339fa9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void run()\n        {\n            try \n            {\n                while(_running)\n                    Thread.sleep(_sleep);\n            }\n            catch(Exception e)\n            {\n                e.printStackTrace();\n            }\n      \n            _jobs.incrementAndGet();\n        }","id":103894,"modified_method":"public void run()\n        {\n            try \n            {\n                _latch.countDown();\n                while(_latch.getCount()>=2)\n                    Thread.sleep(10);\n            }\n            catch(Exception e)\n            {\n                e.printStackTrace();\n            }\n            finally\n            {\n                _jobs.incrementAndGet();\n                _latch.countDown();\n            }\n        }","commit_id":"4892e81ed482503284aca8e4632fff8288339fa9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testThreadPool() throws Exception\n    {        \n        _sleep=100;\n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMinThreads(5);\n        tp.setMaxThreads(10);\n        tp.setMaxIdleTimeMs(500);\n        tp.setThreadsPriority(Thread.NORM_PRIORITY-1);\n\n        tp.start();\n        Thread.sleep(100);\n        assertEquals(5,tp.getThreads());\n        assertEquals(5,tp.getIdleThreads());\n        Thread.sleep(1000);\n        assertEquals(5,tp.getThreads());\n        assertEquals(5,tp.getIdleThreads());\n        \n        RunningJob job=new RunningJob();\n        tp.dispatch(job);\n        Thread.sleep(200);\n        assertEquals(5,tp.getThreads());\n        assertEquals(4,tp.getIdleThreads());\n        job._running=false;\n        Thread.sleep(200);\n        assertEquals(5,tp.getThreads());\n        assertEquals(5,tp.getIdleThreads());\n\n        RunningJob[] jobs = new RunningJob[5];\n        for (int i=0;i<jobs.length;i++)\n        {\n            jobs[i]=new RunningJob();\n            tp.dispatch(jobs[i]);\n        }\n        Thread.sleep(200);\n        assertEquals(5,tp.getThreads());\n        Thread.sleep(1000);\n        assertEquals(5,tp.getThreads());\n        \n        job=new RunningJob();\n        tp.dispatch(job);\n        assertEquals(6,tp.getThreads());\n        \n        job._running=false;\n        Thread.sleep(1000);\n        assertEquals(5,tp.getThreads());\n        \n        jobs[0]._running=false;\n        Thread.sleep(1000);\n\n        assertEquals(5,tp.getThreads());\n        assertEquals(1,tp.getIdleThreads());\n        \n        for (int i=1;i<jobs.length;i++)\n            jobs[i]._running=false;\n\n        Thread.sleep(1000);\n\n        assertEquals(5,tp.getThreads());\n        \n        \n        jobs = new RunningJob[15];\n        for (int i=0;i<jobs.length;i++)\n        {\n            jobs[i]=new RunningJob();\n            tp.dispatch(jobs[i]);\n        }\n        assertEquals(10,tp.getThreads());\n        Thread.sleep(100);\n        assertEquals(0,tp.getIdleThreads());\n\n        for (int i=0;i<9;i++)\n            jobs[i]._running=false;\n        Thread.sleep(1100);\n        int threads=tp.getThreads();\n        assertTrue(threads<10);\n        Thread.sleep(2000);\n        assertTrue(tp.getThreads()<threads);\n        \n        for (int i=9;i<jobs.length;i++)\n            jobs[i]._running=false;\n        Thread.sleep(500);\n\n        tp.stop();\n    }","id":103895,"modified_method":"@Test\n    public void testThreadPool() throws Exception\n    {        \n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMinThreads(5);\n        tp.setMaxThreads(10);\n        tp.setMaxIdleTimeMs(1000);\n        tp.setThreadsPriority(Thread.NORM_PRIORITY-1);\n\n        tp.start();\n        \n        waitForThreads(tp,5);\n        waitForIdle(tp,5);\n        \n        Thread.sleep(1000);\n        waitForThreads(tp,5);\n        waitForIdle(tp,5);\n        \n        RunningJob job=new RunningJob();\n        tp.dispatch(job);\n        waitForIdle(tp,4);\n        waitForThreads(tp,5);\n\n        job.stop();\n        waitForIdle(tp,5);\n        waitForThreads(tp,5);\n        \n        Thread.sleep(200);\n        waitForIdle(tp,5);\n        waitForThreads(tp,5);\n\n        RunningJob[] jobs = new RunningJob[5];\n        for (int i=0;i<jobs.length;i++)\n        {\n            jobs[i]=new RunningJob();\n            tp.dispatch(jobs[i]);\n        }\n        waitForIdle(tp,0);\n        waitForThreads(tp,5);\n        \n        job=new RunningJob();\n        tp.dispatch(job);\n        waitForThreads(tp,6);\n        \n        job.stop();\n        waitForThreads(tp,5);\n        \n        jobs[0].stop();\n        waitForIdle(tp,1);\n        waitForThreads(tp,5);\n        \n        for (int i=1;i<jobs.length;i++)\n            jobs[i].stop();\n\n        waitForIdle(tp,5);\n        waitForThreads(tp,5);\n        \n        jobs = new RunningJob[15];\n        for (int i=0;i<jobs.length;i++)\n        {\n            jobs[i]=new RunningJob();\n            tp.dispatch(jobs[i]);\n        }\n        waitForIdle(tp,0);\n        waitForThreads(tp,10);\n        for (int i=0;i<9;i++)\n            jobs[i].stop();\n        waitForThreads(tp,9);\n        \n        for (int i=9;i<jobs.length;i++)\n            jobs[i].stop();\n        waitForIdle(tp,5);\n        tp.stop();\n    }","commit_id":"4892e81ed482503284aca8e4632fff8288339fa9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testShrink() throws Exception\n    {\n        Runnable job = new Runnable()\n        {\n            public void run()\n            {\n                try \n                {\n                    Thread.sleep(_sleep);\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            \n        };\n        \n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMinThreads(2);\n        tp.setMaxThreads(10);\n        tp.setMaxIdleTimeMs(400);\n        tp.setThreadsPriority(Thread.NORM_PRIORITY-1);\n        \n        tp.start();\n        Thread.sleep(100);\n        assertEquals(2,tp.getThreads());\n        assertEquals(2,tp.getIdleThreads());\n        _sleep=200;\n        tp.dispatch(job);\n        tp.dispatch(job);\n        for (int i=0;i<20;i++)\n            tp.dispatch(job);\n        Thread.sleep(100);\n        assertEquals(10,tp.getThreads());\n        assertEquals(0,tp.getIdleThreads());\n        \n        _sleep=5;\n        for (int i=0;i<500;i++)\n        {\n            tp.dispatch(job);\n            Thread.sleep(10);\n            if (i%100==0)\n            {\n                System.err.println(i+\" threads=\"+tp.getThreads()+\" idle=\"+tp.getIdleThreads());\n            }\n        }\n        System.err.println(\"500 threads=\"+tp.getThreads()+\" idle=\"+tp.getIdleThreads());\n        Thread.sleep(100);\n        System.err.println(\"600 threads=\"+tp.getThreads()+\" idle=\"+tp.getIdleThreads());\n        assertEquals(2,tp.getThreads());\n        assertEquals(2,tp.getIdleThreads());\n        \n    }","id":103896,"modified_method":"@Test\n    public void testShrink() throws Exception\n    {\n        final AtomicInteger sleep = new AtomicInteger(100);\n        Runnable job = new Runnable()\n        {\n            public void run()\n            {\n                try \n                {\n                    Thread.sleep(sleep.get());\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            \n        };\n        \n        QueuedThreadPool tp= new QueuedThreadPool();\n        tp.setMinThreads(2);\n        tp.setMaxThreads(10);\n        tp.setMaxIdleTimeMs(400);\n        tp.setThreadsPriority(Thread.NORM_PRIORITY-1);\n        \n        tp.start();\n        waitForIdle(tp,2);\n        waitForThreads(tp,2);\n        \n        sleep.set(200);\n        tp.dispatch(job);\n        tp.dispatch(job);\n        for (int i=0;i<20;i++)\n            tp.dispatch(job);\n\n        waitForThreads(tp,10);\n        waitForIdle(tp,0);\n        \n        sleep.set(5);\n        for (int i=0;i<500;i++)\n        {\n            tp.dispatch(job);\n            Thread.sleep(10);\n        }\n        waitForThreads(tp,2);\n        waitForIdle(tp,2);\n    }","commit_id":"4892e81ed482503284aca8e4632fff8288339fa9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"protected abstract void setFilePath(final @NotNull String path);","id":103897,"modified_method":"public abstract void setFilePath(final @NotNull String path);","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private String getNewPath(@NotNull PsiElement newElement) {\n      return myOldPath.replaceFirst(myAffectedPathSegment, getPath(newElement));\n    }","id":103898,"modified_method":"private String getNewPathAndUpdateAffectedPath(final @NotNull PsiElement newElement) {\n      final String oldPath = getFilePath();\n\n      final VirtualFile newFile = newElement instanceof PsiFileSystemItem ? ((PsiFileSystemItem)newElement).getVirtualFile() : null;\n      if (newFile != null && oldPath != null && oldPath.startsWith(myAffectedPath)) {\n        final String newPath = newFile.getPath() + oldPath.substring(myAffectedPath.length());\n        myAffectedPath = newFile.getPath(); // needed if refactoring will be undone\n        return newPath;\n      }\n\n      return oldPath;\n    }","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public RefactoringElementListener getRefactoringElementListener(final PsiElement element) {\n\n    if (element instanceof PsiFileSystemItem) {\n      final String filePath = getFilePath();\n      if (filePath != null) {\n        final VirtualFile changedElement = ((PsiFileSystemItem)element).getVirtualFile();\n        if (changedElement != null) {\n          final String affectedPath = changedElement.getPath();\n          if (element instanceof PsiFile) {\n            if (filePath.equals(affectedPath)) {\n              return new RenameRefactoringListener(filePath, affectedPath);\n            }\n          }\n          if (element instanceof PsiDirectory) {\n            if (filePath.startsWith(affectedPath)) {\n              return new RenameRefactoringListener(filePath, affectedPath);\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  }","id":103899,"modified_method":"@Nullable\n  @Override\n  public RefactoringElementListener getRefactoringElementListener(final PsiElement element) {\n    if (!(element instanceof PsiFileSystemItem)) return null;\n\n    final String filePath = getFilePath();\n    final VirtualFile file = filePath == null ? null : ((PsiFileSystemItem)element).getVirtualFile();\n    if (file == null) return null;\n\n    final String affectedPath = file.getPath();\n    if (element instanceof PsiFile) {\n      if (filePath.equals(affectedPath)) {\n        return new RenameRefactoringListener(affectedPath);\n      }\n    }\n    if (element instanceof PsiDirectory) {\n      if (filePath.startsWith(affectedPath + \"/\")) {\n        return new RenameRefactoringListener(affectedPath);\n      }\n    }\n\n    return null;\n  }","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private RenameRefactoringListener(@NotNull String oldPath, @NotNull String affectedPathSegment) {\n      myOldPath = oldPath;\n      myAffectedPathSegment = affectedPathSegment;\n    }","id":103900,"modified_method":"private RenameRefactoringListener(final @NotNull String affectedPath) {\n      myAffectedPath = affectedPath;\n    }","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n    protected void refactored(@NotNull final PsiElement element, @Nullable final String oldQualifiedName) {\n      final boolean generatedName = getName().equals(suggestedName());\n\n      setFilePath(getNewPath(element));\n\n      if (generatedName) {\n        setGeneratedName();\n      }\n    }","id":103901,"modified_method":"@Override\n    protected void refactored(@NotNull final PsiElement element, @Nullable final String oldQualifiedName) {\n      final boolean generatedName = getName().equals(suggestedName());\n      final boolean updateWorkingDir = getFilePath() != null && PathUtil.getParentPath(getFilePath()).equals(getWorkingDirectory());\n\n      final String newPath = getNewPathAndUpdateAffectedPath(element);\n      setFilePath(newPath);\n\n      if (updateWorkingDir) {\n        setWorkingDirectory(PathUtil.getParentPath(newPath));\n      }\n\n      if (generatedName) {\n        setGeneratedName();\n      }\n    }","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  protected void setFilePath(final @Nullable String filePath) {\n    myRunnerParameters.setFilePath(filePath);\n  }","id":103902,"modified_method":"@Override\n  public void setFilePath(final @Nullable String filePath) {\n    myRunnerParameters.setFilePath(filePath);\n  }","commit_id":"cbe780cd49edbc50f41d804967a67ceaf46479d4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private PackageDependenciesNode getModuleDirNode(PsiDirectory psiDirectory, Module module, ScopeType scopeType, DirectoryNode childNode) {\n    if (psiDirectory == null){\n      return getModuleNode(module, scopeType);\n    }\n\n    PackageDependenciesNode directoryNode = getMap(myModuleDirNodes, scopeType).get(psiDirectory);\n    if (directoryNode != null){\n      if (myCompactEmptyMiddlePackages) {\n        DirectoryNode nestedNode = ((DirectoryNode)directoryNode).getCompactedDirNode();\n        if (nestedNode != null){ //decompact\n          DirectoryNode parentWrapper = nestedNode.getWrapper();\n          while (parentWrapper.getWrapper() != null){\n            parentWrapper = parentWrapper.getWrapper();\n          }\n          for (int i = parentWrapper.getChildCount() - 1; i >=0; i--){\n            nestedNode.add((MutableTreeNode)parentWrapper.getChildAt(i));\n          }\n          ((DirectoryNode)directoryNode).setCompactedDirNode(null);\n          if (parentWrapper.getCompactedDirNode() != null){\n            parentWrapper.add(nestedNode);\n            return parentWrapper;\n          } else {\n            directoryNode.add(nestedNode);\n          }\n        } else if (directoryNode.getParent() == null){    //find first node in tree\n          DirectoryNode parentWrapper = ((DirectoryNode)directoryNode).getWrapper();\n          if (parentWrapper != null) {\n            while (parentWrapper.getWrapper() != null){\n              parentWrapper = parentWrapper.getWrapper();\n            }\n            return parentWrapper;\n          }\n        }\n      }\n      return directoryNode;\n    }\n\n    directoryNode = new DirectoryNode(psiDirectory, myCompactEmptyMiddlePackages, myFlattenPackages);\n    ((DirectoryNode)directoryNode).setCompactedDirNode(childNode); //compact\n    getMap(myModuleDirNodes, scopeType).put(psiDirectory, (DirectoryNode)directoryNode);\n\n    if (!myFlattenPackages) {\n      final PsiDirectory directory = psiDirectory.getParentDirectory();\n      LOG.assertTrue(directory != null);\n      final PsiDirectory parentDirectory = directory.getParentDirectory();\n      if (parentDirectory != null && ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(parentDirectory.getVirtualFile()) == module) {\n        DirectoryNode parentDirectoryNode = getMap(myModuleDirNodes, scopeType).get(directory);\n        if (parentDirectoryNode != null || !myCompactEmptyMiddlePackages){\n          getModuleDirNode(directory, module, scopeType, (DirectoryNode)directoryNode).add(directoryNode);\n        } else {\n          directoryNode = getModuleDirNode(directory, module, scopeType, (DirectoryNode)directoryNode);\n        }\n      } else {\n        getModuleNode(module, scopeType).add(directoryNode);\n      }\n    } else {\n      getModuleNode(module, scopeType).add(directoryNode);\n    }\n\n    return directoryNode;\n  }","id":103903,"modified_method":"private PackageDependenciesNode getModuleDirNode(PsiDirectory psiDirectory, Module module, ScopeType scopeType, DirectoryNode childNode) {\n    if (psiDirectory == null){\n      return getModuleNode(module, scopeType);\n    }\n\n    PackageDependenciesNode directoryNode = getMap(myModuleDirNodes, scopeType).get(psiDirectory);\n    if (directoryNode != null){\n      if (myCompactEmptyMiddlePackages) {\n        DirectoryNode nestedNode = ((DirectoryNode)directoryNode).getCompactedDirNode();\n        if (nestedNode != null){ //decompact\n          DirectoryNode parentWrapper = nestedNode.getWrapper();\n          while (parentWrapper.getWrapper() != null){\n            parentWrapper = parentWrapper.getWrapper();\n          }\n          for (int i = parentWrapper.getChildCount() - 1; i >=0; i--){\n            nestedNode.add((MutableTreeNode)parentWrapper.getChildAt(i));\n          }\n          ((DirectoryNode)directoryNode).setCompactedDirNode(null);\n          if (parentWrapper.getCompactedDirNode() != null){\n            parentWrapper.add(nestedNode);\n            return parentWrapper;\n          } else {\n            directoryNode.add(nestedNode);\n          }\n        } else if (directoryNode.getParent() == null){    //find first node in tree\n          DirectoryNode parentWrapper = ((DirectoryNode)directoryNode).getWrapper();\n          if (parentWrapper != null) {\n            while (parentWrapper.getWrapper() != null){\n              parentWrapper = parentWrapper.getWrapper();\n            }\n            return parentWrapper;\n          }\n        }\n      }\n      return directoryNode;\n    }\n\n    directoryNode = new DirectoryNode(psiDirectory, myCompactEmptyMiddlePackages, myFlattenPackages);\n    ((DirectoryNode)directoryNode).setCompactedDirNode(childNode); //compact\n    getMap(myModuleDirNodes, scopeType).put(psiDirectory, (DirectoryNode)directoryNode);\n\n    final PsiDirectory directory = psiDirectory.getParentDirectory();\n    if (!myFlattenPackages && directory != null) {\n      final PsiDirectory parentDirectory = directory.getParentDirectory();\n      if (parentDirectory != null && ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(parentDirectory.getVirtualFile()) == module) {\n        DirectoryNode parentDirectoryNode = getMap(myModuleDirNodes, scopeType).get(directory);\n        if (parentDirectoryNode != null || !myCompactEmptyMiddlePackages){\n          getModuleDirNode(directory, module, scopeType, (DirectoryNode)directoryNode).add(directoryNode);\n        } else {\n          directoryNode = getModuleDirNode(directory, module, scopeType, (DirectoryNode)directoryNode);\n        }\n      } else {\n        getModuleNode(module, scopeType).add(directoryNode);\n      }\n    } else {\n      getModuleNode(module, scopeType).add(directoryNode);\n    }\n\n    return directoryNode;\n  }","commit_id":"ebe36b3dc566f85f1d5877e8a4a8e125c0148256","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private OrderEntry getLibraryForFile(PsiFile file) {\n    List<OrderEntry> orders = myFileIndex.getOrderEntriesForFile(file.getVirtualFile());\n    for (OrderEntry order : orders) {\n      if (order instanceof LibraryOrderEntry || order instanceof JdkOrderEntry) return order;\n    }\n    return null;\n  }","id":103904,"modified_method":"private OrderEntry getLibraryForFile(PsiFile file) {\n    final VirtualFile virtualFile = file.getVirtualFile();\n    if (virtualFile == null) return null;\n    List<OrderEntry> orders = myFileIndex.getOrderEntriesForFile(virtualFile);\n    for (OrderEntry order : orders) {\n      if (order instanceof LibraryOrderEntry || order instanceof JdkOrderEntry) return order;\n    }\n    return null;\n  }","commit_id":"ebe36b3dc566f85f1d5877e8a4a8e125c0148256","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private PsiPackage getFilePackage(PsiJavaFile file) {\n    VirtualFile vFile = file.getVirtualFile();\n    if (myFileIndex.isInLibrarySource(vFile)) {\n      return myPsiManager.findPackage(myFileIndex.getPackageNameByDirectory(vFile.getParent()));\n    }\n    return myPsiManager.findPackage(file.getPackageName());\n  }","id":103905,"modified_method":"private PsiPackage getFilePackage(PsiJavaFile file) {\n    VirtualFile vFile = file.getVirtualFile();\n    if (vFile != null && myFileIndex.isInLibrarySource(vFile)) {\n      final VirtualFile directory = vFile.getParent();\n      if (directory != null) {\n        final String packageName = myFileIndex.getPackageNameByDirectory(directory);\n        if (packageName != null) {\n          return myPsiManager.findPackage(packageName);\n        }\n      }\n    }\n    return myPsiManager.findPackage(file.getPackageName());\n  }","commit_id":"ebe36b3dc566f85f1d5877e8a4a8e125c0148256","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected RunnerAndConfigurationSettingsImpl createConfigurationByElement(final Location location, final ConfigurationContext context) {\n    PsiFile script = location.getPsiElement().getContainingFile();\n    if (script == null || script.getFileType() != PythonFileType.INSTANCE) {\n      return null;\n    }\n    Module module = ModuleUtil.findModuleForPsiElement(script);\n    if (module != null) {\n      for (RunnableScriptFilter f : Extensions.getExtensions(RunnableScriptFilter.EP_NAME)) {\n        if (f.isRunnableScript(script, module)) {\n          return null;\n        }\n      }\n    }\n    mySourceFile = script;\n\n    final Project project = mySourceFile.getProject();\n    RunnerAndConfigurationSettingsImpl settings = cloneTemplateConfiguration(project, context);\n    PythonRunConfiguration configuration = (PythonRunConfiguration) settings.getConfiguration();\n    configuration.setScriptName(mySourceFile.getVirtualFile().getPath());\n    configuration.setName(configuration.suggestedName());\n    if (module != null) {\n      configuration.setUseModuleSdk(true);\n      configuration.setModule(module);\n    }\n    copyStepsBeforeRun(project, configuration);\n    return settings;\n  }","id":103906,"modified_method":"protected RunnerAndConfigurationSettingsImpl createConfigurationByElement(final Location location, final ConfigurationContext context) {\n    PsiFile script = location.getPsiElement().getContainingFile();\n    if (script == null || script.getFileType() != PythonFileType.INSTANCE) {\n      return null;\n    }\n    Module module = ModuleUtil.findModuleForPsiElement(script);\n    if (module != null) {\n      for (RunnableScriptFilter f : Extensions.getExtensions(RunnableScriptFilter.EP_NAME)) {\n        if (f.isRunnableScript(script, module)) {\n          return null;\n        }\n      }\n    }\n    mySourceFile = script;\n\n    final Project project = mySourceFile.getProject();\n    RunnerAndConfigurationSettingsImpl settings = cloneTemplateConfiguration(project, context);\n    PythonRunConfiguration configuration = (PythonRunConfiguration) settings.getConfiguration();\n    final VirtualFile vFile = mySourceFile.getVirtualFile();\n    if (vFile == null) return null;\n    configuration.setScriptName(vFile.getPath());\n    final VirtualFile parent = vFile.getParent();\n    if (parent != null) {\n      configuration.setWorkingDirectory(parent.getPath());\n    }\n    configuration.setName(configuration.suggestedName());\n    if (module != null) {\n      configuration.setUseModuleSdk(true);\n      configuration.setModule(module);\n    }\n    copyStepsBeforeRun(project, configuration);\n    return settings;\n  }","commit_id":"cbd97871baa39b93deef79ff8362b879392e9511","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Set<PsiClass> checkModule(Module module, PsiClass psiClass, Set<PsiClass> types, boolean includeActions) {\n    final XmlFile pluginXml = PluginModuleType.getPluginXml(module);\n    if (!isPluginXml(pluginXml)) return types;\n    assert pluginXml != null;\n\n    final XmlTag rootTag = pluginXml.getDocument().getRootTag();\n    assert rootTag != null;\n\n    final String qualifiedName = psiClass.getQualifiedName();\n    if (qualifiedName != null) {\n      final RegistrationTypeFinder finder = new RegistrationTypeFinder(psiClass, types);\n\n      DescriptorUtil.processComponents(rootTag, finder);\n\n      if (includeActions) {\n        DescriptorUtil.processActions(rootTag, finder);\n      }\n\n      types = finder.getTypes();\n    }\n\n    return types;\n  }","id":103907,"modified_method":"private static Set<PsiClass> checkModule(Module module, PsiClass psiClass, Set<PsiClass> types, boolean includeActions) {\n    final XmlFile pluginXml = PluginModuleType.getPluginXml(module);\n    if (!isPluginXml(pluginXml)) return types;\n    assert pluginXml != null;\n\n    final XmlDocument document = pluginXml.getDocument();\n    assert document != null;\n\n    final XmlTag rootTag = document.getRootTag();\n    assert rootTag != null;\n\n    final String qualifiedName = psiClass.getQualifiedName();\n    if (qualifiedName != null) {\n      final RegistrationTypeFinder finder = new RegistrationTypeFinder(psiClass, types);\n\n      DescriptorUtil.processComponents(rootTag, finder);\n\n      if (includeActions) {\n        DescriptorUtil.processActions(rootTag, finder);\n      }\n\n      types = finder.getTypes();\n    }\n\n    return types;\n  }","commit_id":"d28c14616874b598e95b15d725a18ba6aa83abfe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected boolean isPluginXml(PsiFile file) {\n    if (!(file instanceof XmlFile)) return false;\n    final XmlFile pluginXml = (XmlFile)file;\n\n    final XmlTag rootTag = pluginXml.getDocument().getRootTag();\n    if (rootTag == null) return false;\n\n    return \"idea-plugin\".equals(rootTag.getLocalName());\n  }","id":103908,"modified_method":"protected static boolean isPluginXml(PsiFile file) {\n    if (!(file instanceof XmlFile)) return false;\n    final XmlFile pluginXml = (XmlFile)file;\n\n    final XmlDocument document = pluginXml.getDocument();\n    if (document == null) return false;\n    final XmlTag rootTag = document.getRootTag();\n    return rootTag != null && \"idea-plugin\".equals(rootTag.getLocalName());\n\n  }","commit_id":"d28c14616874b598e95b15d725a18ba6aa83abfe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  protected Set<PsiClass> getRegistrationTypes(PsiClass psiClass, boolean includeActions) {\n    final Project project = psiClass.getProject();\n    final PsiFile psiFile = psiClass.getContainingFile();\n\n    assert psiFile != null;\n\n    final Module module = VfsUtil.getModuleForFile(project, psiFile.getVirtualFile());\n\n    if (module == null) return null;\n\n    if (PluginModuleType.isOfType(module)) {\n      return checkModule(module, psiClass, null, includeActions);\n    } else {\n      Set<PsiClass> types = null;\n      final List<Module> modules = PluginModuleType.getCandidateModules(module);\n      for (Module m : modules) {\n        types = checkModule(m, psiClass, types, includeActions);\n      }\n      return types;\n    }\n  }","id":103909,"modified_method":"@Nullable\n  protected static Set<PsiClass> getRegistrationTypes(PsiClass psiClass, boolean includeActions) {\n    final Project project = psiClass.getProject();\n    final PsiFile psiFile = psiClass.getContainingFile();\n\n    assert psiFile != null;\n\n    final VirtualFile virtualFile = psiFile.getVirtualFile();\n    if (virtualFile == null) return null;\n    final Module module = VfsUtil.getModuleForFile(project, virtualFile);\n\n    if (module == null) return null;\n\n    if (PluginModuleType.isOfType(module)) {\n      return checkModule(module, psiClass, null, includeActions);\n    } else {\n      Set<PsiClass> types = null;\n      final List<Module> modules = PluginModuleType.getCandidateModules(module);\n      for (Module m : modules) {\n        types = checkModule(m, psiClass, types, includeActions);\n      }\n      return types;\n    }\n  }","commit_id":"d28c14616874b598e95b15d725a18ba6aa83abfe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public LineMarkerInfo getLineMarkerInfo(PsiElement element) {\n    if (!(element instanceof PsiMethod)) {\n      return null;\n    }\n    final PsiMethod method = (PsiMethod)element;\n    if (isTestMethod(method)) {\n      return new LineMarkerInfo<PsiMethod>(method, method.getTextOffset(), PlatformIcons.TEST_SOURCE_FOLDER, Pass.UPDATE_ALL, null,\n                                           new TestDataNavigationHandler());\n    }\n    return null;\n  }","id":103910,"modified_method":"public LineMarkerInfo getLineMarkerInfo(PsiElement element) {\n    return null;\n  }","commit_id":"e2539319872d0f33dd3f8f25b119432e07f6ba54","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static String getTestDataBasePath(PsiClass psiClass) {\n    final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(\"com.intellij.testFramework.TestDataPath\"));\n    if (annotation != null) {\n      final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);\n      if (value instanceof PsiExpression) {\n        final Project project = value.getProject();\n        final PsiConstantEvaluationHelper evaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper();\n        final Object constantValue = evaluationHelper.computeConstantExpression(value, false);\n        if (constantValue instanceof String) {\n          String path = (String) constantValue;\n          if (path.indexOf(\"$CONTENT_ROOT\") >= 0) {\n            final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex();\n            final VirtualFile contentRoot = fileIndex.getContentRootForFile(psiClass.getContainingFile().getVirtualFile());\n            if (contentRoot == null) return null;\n            path = path.replace(\"$CONTENT_ROOT\", contentRoot.getPath());\n          }\n          if (path.indexOf(\"$PROJECT_ROOT\") >= 0) {\n            final VirtualFile baseDir = project.getBaseDir();\n            if (baseDir == null) {\n              return null;\n            }\n            path = path.replace(\"$PROJECT_ROOT\", baseDir.getPath());\n          }\n          return path;\n        }\n      }\n    }\n    return null;\n  }","id":103911,"modified_method":"@Nullable\n  public static String getTestDataBasePath(PsiClass psiClass) {\n    final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(\"com.intellij.testFramework.TestDataPath\"));\n    if (annotation != null) {\n      final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);\n      if (value instanceof PsiExpression) {\n        final Project project = value.getProject();\n        final PsiConstantEvaluationHelper evaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper();\n        final Object constantValue = evaluationHelper.computeConstantExpression(value, false);\n        if (constantValue instanceof String) {\n          String path = (String) constantValue;\n          if (path.contains(\"$CONTENT_ROOT\")) {\n            final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex();\n            final VirtualFile file = psiClass.getContainingFile().getVirtualFile();\n            if (file == null) {\n              return null;\n            }\n            final VirtualFile contentRoot = fileIndex.getContentRootForFile(file);\n            if (contentRoot == null) return null;\n            path = path.replace(\"$CONTENT_ROOT\", contentRoot.getPath());\n          }\n          if (path.contains(\"$PROJECT_ROOT\")) {\n            final VirtualFile baseDir = project.getBaseDir();\n            if (baseDir == null) {\n              return null;\n            }\n            path = path.replace(\"$PROJECT_ROOT\", baseDir.getPath());\n          }\n          return path;\n        }\n      }\n    }\n    return null;\n  }","commit_id":"e2539319872d0f33dd3f8f25b119432e07f6ba54","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void collectSlowLineMarkers(List<PsiElement> elements, Collection<LineMarkerInfo> result) {\n  }","id":103912,"modified_method":"public void collectSlowLineMarkers(List<PsiElement> elements, Collection<LineMarkerInfo> result) {\n    if (ApplicationManager.getApplication().isUnitTestMode()) {\n      return;\n    }\n    for (PsiElement element : elements) {\n      if (!(element instanceof PsiMethod)) {\n        continue;\n      }\n      final PsiMethod method = (PsiMethod)element;\n      if (isTestMethod(method)) {\n        result.add(new LineMarkerInfo<PsiMethod>(\n          method, method.getTextOffset(), PlatformIcons.TEST_SOURCE_FOLDER, Pass.UPDATE_ALL, null, new TestDataNavigationHandler()\n        ));\n      }\n    }\n  }","commit_id":"e2539319872d0f33dd3f8f25b119432e07f6ba54","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static Editor openInEditor(PsiElement element) {\n    PsiFile file;\n    int offset;\n    if (element instanceof PsiFile){\n      file = (PsiFile)element;\n      offset = -1;\n    }\n    else{\n      file = element.getContainingFile();\n      offset = element.getTextOffset();\n    }\n    if (file == null) return null;//SCR44414\n    OpenFileDescriptor descriptor = new OpenFileDescriptor(element.getProject(), file.getVirtualFile(), offset);\n    Project project = element.getProject();\n    return FileEditorManager.getInstance(project).openTextEditor(descriptor, false);\n  }","id":103913,"modified_method":"public static Editor openInEditor(PsiElement element) {\n    PsiFile file;\n    int offset;\n    if (element instanceof PsiFile){\n      file = (PsiFile)element;\n      offset = -1;\n    }\n    else{\n      file = element.getContainingFile();\n      offset = element.getTextOffset();\n    }\n    if (file == null) return null;//SCR44414\n    VirtualFile virtualFile = file.getVirtualFile();\n    if (virtualFile == null) return null;\n    OpenFileDescriptor descriptor = new OpenFileDescriptor(element.getProject(), virtualFile, offset);\n    Project project = element.getProject();\n    return FileEditorManager.getInstance(project).openTextEditor(descriptor, false);\n  }","commit_id":"6400f17d06c6c150a5e26a7375b67a1c80783c59","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IntentionAction createClassFixAction(final GrReferenceElement refElement) {\n    return new IntentionAction() {\n\n      @NotNull\n      public String getText() {\n        return \"Create Class \\'\" + refElement.getReferenceName() + \"\\'\";\n      }\n\n      @NotNull\n      public String getFamilyName() {\n        return GroovyBundle.message(\"create.class\");\n      }\n\n      public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {\n        return true;\n      }\n\n      public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException {\n        if (!(file instanceof GroovyFile)) return;\n        final PsiManager manager = refElement.getManager();\n        final String name = refElement.getReferenceName();\n        final Module module = ModuleUtil.findModuleForPsiElement(file);\n        final String qualifier = ((GroovyFile) file).getPackageName();\n        String title = GroovyBundle.message(\"create.class\", StringUtil.capitalize(CreateClassKind.CLASS.getDescription()));\n\n        CreateClassDialog dialog = new CreateClassDialog(project, title, name, qualifier, CreateClassKind.CLASS, false, module);\n        dialog.show();\n\n        if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) return;\n\n        PsiDirectory targetDirectory = dialog.getTargetDirectory();\n        if (targetDirectory == null) return;\n\n        PsiClass targetClass = createClassByType(targetDirectory, name, manager, refElement);\n        putCursor(project, targetClass.getContainingFile(), targetClass);\n        return;\n\n      }\n\n      public boolean startInWriteAction() {\n        return true;\n      }\n    };\n  }","id":103914,"modified_method":"public static IntentionAction createClassFixAction(final GrReferenceElement refElement) {\n    return new IntentionAction() {\n\n      @NotNull\n      public String getText() { \n        return \"Create Class \\'\" + refElement.getReferenceName() + \"\\'\";\n      }\n\n      @NotNull\n      public String getFamilyName() {\n        return GroovyBundle.message(\"create.class\");\n      }\n\n      public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {\n        return true;\n      }\n\n      public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException {\n        if (!(file instanceof GroovyFile)) return;\n        final PsiManager manager = refElement.getManager();\n        final String name = refElement.getReferenceName();\n        final Module module = ModuleUtil.findModuleForPsiElement(file);\n        GroovyFile groovyFile = (GroovyFile) file;\n        final String qualifier = groovyFile.getPackageName();\n        String title = GroovyBundle.message(\"create.class\", StringUtil.capitalize(CreateClassKind.CLASS.getDescription()));\n        GroovyCreateClassDialog dialog = new GroovyCreateClassDialog(project, title, name, qualifier, module);\n        dialog.show();\n\n        if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) return;\n\n        PsiDirectory targetDirectory = dialog.getTargetDirectory();\n        if (targetDirectory == null) return;\n\n        PsiClass targetClass = createClassByType(targetDirectory, name, manager, refElement);\n        if (targetClass != null) {\n          String qualifiedName = targetClass.getQualifiedName();\n          if (qualifiedName != null && qualifiedName.contains(\".\")) {\n            String packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf(\".\"));\n            if (!packageName.equals(groovyFile.getPackageName())){\n              groovyFile.addImportForClass(targetClass);\n            }\n          }\n          putCursor(project, targetClass.getContainingFile(), targetClass);\n        }\n      }\n\n      public boolean startInWriteAction() {\n        return true;\n      }\n    };\n  }","commit_id":"c0732a77d16a76e9babe6b00554edb42dbfa1561","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static PsiClass createClassByType(final PsiDirectory directory,\n                                      final String name,\n                                      final PsiManager manager,\n                                      final PsiElement contextElement) {\n    return ApplicationManager.getApplication().runWriteAction(\n        new Computable<PsiClass>() {\n          public PsiClass compute() {\n            try {\n              PsiClass targetClass;\n              try {\n                targetClass = directory.createClass(name);\n              }\n              catch (final IncorrectOperationException e) {\n                CreateFromUsageUtils.scheduleFileOrPackageCreationFailedMessageBox(e, name, directory, false);\n                return null;\n              }\n              if (!manager.getResolveHelper().isAccessible(targetClass, contextElement, null)) {\n                targetClass.getModifierList().setModifierProperty(PsiKeyword.PUBLIC, true);\n              }\n              return targetClass;\n            }\n            catch (IncorrectOperationException e) {\n              LOG.error(e);\n              return null;\n            }\n          }\n        });\n  }","id":103915,"modified_method":"private static PsiClass createClassByType(final PsiDirectory directory,\n                                            final String name,\n                                            final PsiManager manager,\n                                            final PsiElement contextElement) {\n    return ApplicationManager.getApplication().runWriteAction(\n        new Computable<PsiClass>() {\n          public PsiClass compute() {\n            try {\n              PsiClass targetClass = null;\n              try {\n                PsiFile file = GroovyTemplatesFactory.createFromTemplate(directory, name, name + \".groovy\", \"GroovyClass.groovy\");\n                for (PsiElement element : file.getChildren()) {\n                  if (element instanceof PsiClass) {\n                    targetClass = ((PsiClass) element);\n                    break;\n                  }\n                }\n                if (targetClass == null) {\n                  throw new IncorrectOperationException();\n                }\n              }\n              catch (final IncorrectOperationException e) {\n                CreateFromUsageUtils.scheduleFileOrPackageCreationFailedMessageBox(e, name, directory, false);\n                return null;\n              }\n              PsiModifierList modifiers = targetClass.getModifierList();\n              if (!manager.getResolveHelper().isAccessible(targetClass, contextElement, null) &&\n                  modifiers != null) {\n                modifiers.setModifierProperty(PsiKeyword.PUBLIC, true);\n              }\n              return targetClass;\n            }\n            catch (IncorrectOperationException e) {\n              LOG.error(e);\n              return null;\n            }\n          }\n        });\n  }","commit_id":"c0732a77d16a76e9babe6b00554edb42dbfa1561","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static Editor putCursor(Project project, PsiFile targetFile, PsiElement element) {\n    TextRange range = element.getTextRange();\n    int textOffset = range.getStartOffset();\n\n    OpenFileDescriptor descriptor = new OpenFileDescriptor(project, targetFile.getVirtualFile(), textOffset);\n    return FileEditorManager.getInstance(project).openTextEditor(descriptor, true);\n  }","id":103916,"modified_method":"protected static Editor putCursor(Project project, @NotNull PsiFile targetFile, PsiElement element) {\n    TextRange range = element.getTextRange();\n    int textOffset = range.getStartOffset();\n\n    VirtualFile virtualFile = targetFile.getVirtualFile();\n    if (virtualFile != null) {\n      OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, textOffset);\n      return FileEditorManager.getInstance(project).openTextEditor(descriptor, true);\n    } else {\n      return null;\n    }\n  }","commit_id":"c0732a77d16a76e9babe6b00554edb42dbfa1561","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkSingleResolvedElement(AnnotationHolder holder, GrCodeReferenceElement refElement, GroovyResolveResult resolveResult) {\n    final PsiElement resolved = resolveResult.getElement();\n    if (resolved == null) {\n      String message = GroovyBundle.message(\"cannot.resolve\", refElement.getReferenceName());\n\n      // Register quickfix\n      final Annotation annotation = holder.createErrorAnnotation(refElement, message);\n      registerAddImportFixes(refElement, annotation);\n      //registerCreteClassByTypeFix(refElement, annotation);\n      annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);\n    } else if (!resolveResult.isAccessible()) {\n      String message = GroovyBundle.message(\"cannot.access\", refElement.getReferenceName());\n      holder.createErrorAnnotation(refElement, message);\n    }\n  }","id":103917,"modified_method":"private void checkSingleResolvedElement(AnnotationHolder holder, GrCodeReferenceElement refElement, GroovyResolveResult resolveResult) {\n    final PsiElement resolved = resolveResult.getElement();\n    if (resolved == null) {\n      String message = GroovyBundle.message(\"cannot.resolve\", refElement.getReferenceName());\n\n      // Register quickfix\n      final Annotation annotation = holder.createErrorAnnotation(refElement, message);\n      if (!refElement.getText().contains(\".\")) {\n        registerAddImportFixes(refElement, annotation);\n        registerCreateClassByTypeFix(refElement, annotation);\n      }\n      annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);\n    } else if (!resolveResult.isAccessible()) {\n      String message = GroovyBundle.message(\"cannot.access\", refElement.getReferenceName());\n      holder.createErrorAnnotation(refElement, message);\n    }\n  }","commit_id":"c0732a77d16a76e9babe6b00554edb42dbfa1561","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String toString(@Nullable PsiFile f, ConvertContext context) {\n    if (f == null) return null;\n    PsiFile currentPsiFile = context.getFile().getOriginalFile();\n    if (currentPsiFile == null) currentPsiFile = context.getFile();\n    VirtualFile currentFile = currentPsiFile.getVirtualFile();\n    return MavenDomUtil.calcRelativePath(currentFile.getParent(), f.getVirtualFile());\n  }","id":103918,"modified_method":"@Override\n  public String toString(@Nullable PsiFile f, ConvertContext context) {\n    if (f == null) return null;\n    VirtualFile currentFile = context.getFile().getOriginalFile().getVirtualFile();\n    if (currentFile == null) return null;\n\n    return MavenDomUtil.calcRelativePath(currentFile.getParent(), f.getVirtualFile());\n  }","commit_id":"5a8ed8b556812dd13ab02ffbe5876c6676313cf3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public PsiFile fromString(@Nullable @NonNls String s, ConvertContext context) {\n    if (s == null) return null;\n\n    VirtualFile f = context.getFile().getVirtualFile().getParent().findFileByRelativePath(s);\n    if (f == null) return null;\n\n    if (f.isDirectory()) f = f.findFileByRelativePath(MavenConstants.POM_XML);\n    if (f == null) return null;\n\n    return PsiManager.getInstance(context.getXmlElement().getProject()).findFile(f);\n  }","id":103919,"modified_method":"@Override\n  public PsiFile fromString(@Nullable @NonNls String s, ConvertContext context) {\n    if (s == null) return null;\n\n    VirtualFile contextFile = context.getFile().getVirtualFile();\n    if (contextFile == null) return null;\n\n    VirtualFile f = contextFile.getParent().findFileByRelativePath(s);\n    if (f == null) return null;\n\n    if (f.isDirectory()) f = f.findFileByRelativePath(MavenConstants.POM_XML);\n    if (f == null) return null;\n\n    return PsiManager.getInstance(context.getXmlElement().getProject()).findFile(f);\n  }","commit_id":"5a8ed8b556812dd13ab02ffbe5876c6676313cf3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public FileAnnotation restore(VcsAnnotation vcsAnnotation,\n                                VcsAbstractHistorySession session,\n                                String annotatedContent,\n                                boolean forCurrentRevision, VcsRevisionNumber revisionNumber) {\n    final GitFileAnnotation gitFileAnnotation =\n      new GitFileAnnotation(myProject, vcsAnnotation.getFilePath().getVirtualFile(), revisionNumber);\n    gitFileAnnotation.addLogEntries(session.getRevisionList());\n    final VcsLineAnnotationData basicAnnotation = vcsAnnotation.getBasicAnnotation();\n    final int size = basicAnnotation.getNumLines();\n    final Map<VcsRevisionNumber,VcsFileRevision> historyAsMap = session.getHistoryAsMap();\n    final List<String> lines = StringUtil.split(StringUtil.convertLineSeparators(annotatedContent), \"\\n\", false, false);\n    for (int i = 0; i < size; i++) {\n      final VcsRevisionNumber revision = basicAnnotation.getRevision(i);\n      final VcsFileRevision vcsFileRevision = historyAsMap.get(revision);\n      if (vcsFileRevision == null) {\n        return null;\n      }\n      try {\n        gitFileAnnotation.appendLineInfo(vcsFileRevision.getRevisionDate(), (GitRevisionNumber) revision, vcsFileRevision.getAuthor(),\n                                         lines.get(i), i + 1);\n      }\n      catch (VcsException e) {\n        return null;\n      }\n    }\n    return gitFileAnnotation;\n  }","id":103920,"modified_method":"@Nullable\n  @Override\n  public FileAnnotation restore(@NotNull VcsAnnotation vcsAnnotation,\n                                @NotNull VcsAbstractHistorySession session,\n                                @NotNull String annotatedContent,\n                                boolean forCurrentRevision, VcsRevisionNumber revisionNumber) {\n    VirtualFile virtualFile = vcsAnnotation.getFilePath().getVirtualFile();\n    if (virtualFile == null) return null;\n    final GitFileAnnotation gitFileAnnotation = new GitFileAnnotation(myProject, virtualFile, revisionNumber);\n    gitFileAnnotation.addLogEntries(session.getRevisionList());\n    final VcsLineAnnotationData basicAnnotation = vcsAnnotation.getBasicAnnotation();\n    final int size = basicAnnotation.getNumLines();\n    final Map<VcsRevisionNumber,VcsFileRevision> historyAsMap = session.getHistoryAsMap();\n    final List<String> lines = StringUtil.split(StringUtil.convertLineSeparators(annotatedContent), \"\\n\", false, false);\n    for (int i = 0; i < size; i++) {\n      final VcsRevisionNumber revision = basicAnnotation.getRevision(i);\n      final VcsFileRevision vcsFileRevision = historyAsMap.get(revision);\n      if (vcsFileRevision == null) {\n        return null;\n      }\n      try {\n        gitFileAnnotation.appendLineInfo(vcsFileRevision.getRevisionDate(), (GitRevisionNumber) revision, vcsFileRevision.getAuthor(),\n                                         lines.get(i), i + 1);\n      }\n      catch (VcsException e) {\n        return null;\n      }\n    }\n    return gitFileAnnotation;\n  }","commit_id":"f2fbb3f888301cbc15e591f156351a3c78563356","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Project getProject(){\n    if (getPsiElement() == null || getPsiElement().getContainingFile() == null){\n      return null;\n    }\n    return getPsiElement().getContainingFile().getProject();\n  }","id":103921,"modified_method":"@Nullable\n  private Project getProject(){\n    final PsiElement psiElement = getPsiElement();\n    if (psiElement == null || psiElement.getContainingFile() == null){\n      return null;\n    }\n    return psiElement.getContainingFile().getProject();\n  }","commit_id":"f7a1c0d5b9c69d4a549ba55ba965cc37918005ef","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private OpenFileDescriptor getDescriptor() {\n    if (getProject() == null){\n      return null;\n    }\n    return new OpenFileDescriptor(getProject(), getPsiElement().getContainingFile().getVirtualFile());\n  }","id":103922,"modified_method":"@Nullable\n  private OpenFileDescriptor getDescriptor() {\n    if (getProject() == null){\n      return null;\n    }\n    final VirtualFile virtualFile = getPsiElement().getContainingFile().getVirtualFile();\n    if (virtualFile == null || !virtualFile.isValid()) return null;\n    return new OpenFileDescriptor(getProject(), virtualFile);\n  }","commit_id":"f7a1c0d5b9c69d4a549ba55ba965cc37918005ef","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Editor openTextEditor(boolean focus) {\n    return FileEditorManager.getInstance(getProject()).openTextEditor(getDescriptor(), focus);\n  }","id":103923,"modified_method":"@Nullable\n  private Editor openTextEditor(boolean focus) {\n    final OpenFileDescriptor descriptor = getDescriptor();\n    if (descriptor != null) {\n      return FileEditorManager.getInstance(getProject()).openTextEditor(descriptor, focus);\n    }\n    return null;\n  }","commit_id":"f7a1c0d5b9c69d4a549ba55ba965cc37918005ef","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"JavaStreamHandler(SModel model, IFile outputDir, IFile cachesOutputDir, FileProcessor processor) {\n        myModelDescriptor = model;\n        myOutputDir = outputDir;\n        myCachesOutputDir = cachesOutputDir;\n        myProcessor = processor;\n    }","id":103924,"modified_method":"JavaStreamHandler(SModel model, IFile outputDir, FileProcessor processor) {\n        myModelDescriptor = model;\n        myOutputDir = outputDir;\n        myProcessor = processor;\n    }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void saveStream(String name, byte[] content, boolean isCache) {\n        IFile outputRootDir = isCache ? myCachesOutputDir : myOutputDir;\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, outputRootDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","id":103925,"modified_method":"@Override\n    public void saveStream(String name, byte[] content) {\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, myOutputDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void saveStream(String name, Element content, boolean isCache) {\n        IFile outputRootDir = isCache ? myCachesOutputDir : myOutputDir;\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, outputRootDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","id":103926,"modified_method":"@Override\n    public void saveStream(String name, Element content) {\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, myOutputDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public boolean touch(String name, boolean isCache) {\n        IFile outputRootDir = isCache ? myCachesOutputDir : myOutputDir;\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, outputRootDir).getDescendant(name);\n        return file.exists();\n    }","id":103927,"modified_method":"@Override\n    public boolean touch(String name) {\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, myOutputDir).getDescendant(name);\n        return file.exists();\n    }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void saveStream(String name, String content, boolean isCache) {\n        IFile outputRootDir = isCache ? myCachesOutputDir : myOutputDir;\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, outputRootDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","id":103928,"modified_method":"@Override\n    public void saveStream(String name, String content) {\n        IFile file = FileGenerationUtil.getDefaultOutputDir(myModelDescriptor, myOutputDir).getDescendant(name);\n        myProcessor.saveContent(file, myModelDescriptor, content);\n    }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n        public boolean handleOutput(SModule module, SModel inputModel, GenerationStatus status, IOperationContext invocationContext, ProgressMonitor monitor) {\n            monitor.start(\"generating files\", 1);\n            try {\n                info(\"handling output...\");\n                JpsSolutionIdea solution = (JpsSolutionIdea) module;\n                JpsModule jpsModule = solution.getModule();\n\n                // TODO targetDir\n                IFile targetDir = FileSystem.getInstance().getFileByPath(SModuleOperations.getOutputPathFor(inputModel));\n                // TODO caches in temp folder\n                IFile cachesDir = FileGenerationUtil.getCachesDir(targetDir);\n\n                long startJobTime = System.currentTimeMillis();\n\n                boolean result = false;\n                if (status.isOk()) {\n                    JavaStreamHandler javaStreamHandler = new JavaStreamHandler(inputModel, targetDir, cachesDir, myProcessor);\n                    try {\n                        result = new TextGenerator(javaStreamHandler,\n                                BLDependenciesCache.getInstance().getGenerator(),\n                                TraceInfoCache.getInstance().getGenerator(),\n                                GenerationDependenciesCache.getInstance().getGenerator()\n                        ).handleOutput(invocationContext, status);\n                    } finally {\n                        javaStreamHandler.dispose();\n                    }\n                    myContext.getCompileContext().processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID, BuildMessage.Kind.INFO, \"saving \" + inputModel.getModelName() + \" into \" + targetDir.getPath()));\n                }\n\n                if (!result) {\n                    info(\"there were errors.\");\n                    return false;\n                }\n                if (myLogger.needsInfo()) {\n                    myLogger.info(\"output generated in \" + (System.currentTimeMillis() - startJobTime) + \" ms\");\n                }\n                return true;\n            } finally {\n                monitor.done();\n            }\n        }","id":103929,"modified_method":"@Override\n        public boolean handleOutput(SModule module, SModel inputModel, GenerationStatus status, IOperationContext invocationContext, ProgressMonitor monitor) {\n            monitor.start(\"generating files\", 1);\n            try {\n                info(\"handling output...\");\n                JpsSolutionIdea solution = (JpsSolutionIdea) module;\n                JpsModule jpsModule = solution.getModule();\n\n                // TODO targetDir\n                IFile targetDir = FileSystem.getInstance().getFileByPath(SModuleOperations.getOutputPathFor(inputModel));\n                // TODO caches in temp folder\n                IFile cachesDir = FileGenerationUtil.getCachesDir(targetDir);\n\n                long startJobTime = System.currentTimeMillis();\n\n                if (status.isOk()) {\n                  JavaStreamHandler javaSourcesLocation = new JavaStreamHandler(inputModel, targetDir, myProcessor);\n                  JavaStreamHandler cachesLocation = new JavaStreamHandler(inputModel, cachesDir, myProcessor);\n                  TextFacility tf = new TextFacility(status);\n                  tf.failNoTextGen(false).generateDebug(true).generateBaseLangDeps(true);\n                  tf.produceTextModel();\n                  tf.serializeOutcome(javaSourcesLocation);\n                  CacheGenLayout cgl = new CacheGenLayout();\n                  cgl.register(cachesLocation, BLDependenciesCache.getInstance().getGenerator());\n                  cgl.register(cachesLocation, GenerationDependenciesCache.getInstance().getGenerator());\n                  cgl.register(javaSourcesLocation, TraceInfoCache.getInstance().getGenerator());\n                  tf.serializeCaches(cgl);\n                  myContext.getCompileContext().processMessage(new CompilerMessage(MPSMakeConstants.BUILDER_ID, BuildMessage.Kind.INFO, \"saving \" + inputModel.getModelName() + \" into \" + targetDir.getPath()));\n                  if (!tf.getErrors().isEmpty()) {\n                    info(\"there were errors.\");\n                    return false;\n                  }\n                }\n\n                if (myLogger.needsInfo()) {\n                    myLogger.info(\"output generated in \" + (System.currentTimeMillis() - startJobTime) + \" ms\");\n                }\n                return true;\n            } finally {\n                monitor.done();\n            }\n        }","commit_id":"cf2c4fd7763bebdf32c11a48a7ffb467d6966792","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static PsiReferenceExpression qualifyReference(PsiReferenceExpression referenceExpression,\n                                                        final PsiMember member,\n                                                        @Nullable final PsiClass qualifyingClass) throws IncorrectOperationException {\n    PsiManager manager = referenceExpression.getManager();\n    PsiReferenceExpression expressionFromText;\n    final PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();\n    if (qualifyingClass == null) {\n      final PsiClass parentClass = PsiTreeUtil.getParentOfType(referenceExpression, PsiClass.class);\n      final PsiClass containingClass = member.getContainingClass();\n      if (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass, containingClass, true)) {\n        expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"A.this.\" + member.getName(), null);\n        final PsiJavaCodeReferenceElement classQualifier = ((PsiThisExpression)expressionFromText.getQualifierExpression()).getQualifier();\n        classQualifier.replace(factory.createClassReferenceElement(containingClass));\n      }\n      else {\n        expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"this.\" + member.getName(), null);\n      }\n    }\n    else {\n      expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"A.\" + member.getName(), null);\n      final PsiReferenceExpression qualifier = factory.createReferenceExpression(qualifyingClass);\n      expressionFromText.getQualifierExpression().replace(qualifier);\n    }\n    CodeStyleManager codeStyleManager = manager.getCodeStyleManager();\n    expressionFromText = (PsiReferenceExpression)codeStyleManager.reformat(expressionFromText);\n    return (PsiReferenceExpression)referenceExpression.replace(expressionFromText);\n  }","id":103930,"modified_method":"public static PsiReferenceExpression qualifyReference(PsiReferenceExpression referenceExpression,\n                                                        final PsiMember member,\n                                                        @Nullable final PsiClass qualifyingClass) throws IncorrectOperationException {\n    PsiManager manager = referenceExpression.getManager();\n    PsiReferenceExpression expressionFromText;\n    final PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();\n    if (qualifyingClass == null) {\n      PsiClass parentClass = PsiTreeUtil.getParentOfType(referenceExpression, PsiClass.class);\n      final PsiClass containingClass = member.getContainingClass();\n      if (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass, containingClass, true)) {\n        while (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass, containingClass, true)) {\n          parentClass = PsiTreeUtil.getParentOfType(parentClass, PsiClass.class, true);\n        }\n        LOG.assertTrue(parentClass != null);\n        expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"A.this.\" + member.getName(), null);\n        ((PsiThisExpression)expressionFromText.getQualifierExpression()).getQualifier().replace(factory.createClassReferenceElement(parentClass));\n      }\n      else {\n        expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"this.\" + member.getName(), null);\n      }\n    }\n    else {\n      expressionFromText = (PsiReferenceExpression)factory.createExpressionFromText(\"A.\" + member.getName(), null);\n      expressionFromText.setQualifierExpression(factory.createReferenceExpression(qualifyingClass));\n    }\n    CodeStyleManager codeStyleManager = manager.getCodeStyleManager();\n    expressionFromText = (PsiReferenceExpression)codeStyleManager.reformat(expressionFromText);\n    return (PsiReferenceExpression)referenceExpression.replace(expressionFromText);\n  }","commit_id":"7dda4e06f0774387422a1ec6eecb23582c9a1e5a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static PsiElement replaceOccurenceWithFieldRef(PsiExpression occurrence, PsiField newField, PsiClass destinationClass)\n    throws IncorrectOperationException {\n    final PsiManager manager = occurrence.getManager();\n    final String fieldName = newField.getName();\n    final PsiVariable psiVariable = manager.getResolveHelper().resolveReferencedVariable(fieldName, occurrence);\n    final PsiElementFactory factory = manager.getElementFactory();\n    if (psiVariable != null && psiVariable.equals(newField)) {\n      return occurrence.replace(factory.createExpressionFromText(fieldName, null));\n    }\n    else {\n      final PsiReferenceExpression ref = (PsiReferenceExpression)factory.createExpressionFromText(\"this.\" + fieldName, null);\n      if (newField.hasModifierProperty(PsiModifier.STATIC)) {\n          final PsiReferenceExpression referenceExpression =\n          factory.createReferenceExpression(destinationClass);\n        ref.getQualifierExpression().replace(referenceExpression);\n      }\n      return occurrence.replace(ref);\n    }\n  }","id":103931,"modified_method":"public static PsiElement replaceOccurenceWithFieldRef(PsiExpression occurrence, PsiField newField, PsiClass destinationClass)\n    throws IncorrectOperationException {\n    final PsiManager manager = occurrence.getManager();\n    final String fieldName = newField.getName();\n    final PsiVariable psiVariable = manager.getResolveHelper().resolveReferencedVariable(fieldName, occurrence);\n    final PsiElementFactory factory = manager.getElementFactory();\n    if (psiVariable != null && psiVariable.equals(newField)) {\n      return occurrence.replace(factory.createExpressionFromText(fieldName, null));\n    }\n    else {\n      final PsiReferenceExpression ref = (PsiReferenceExpression)factory.createExpressionFromText(\"this.\" + fieldName, null);\n      if (newField.hasModifierProperty(PsiModifier.STATIC)) {\n        ref.setQualifierExpression(factory.createReferenceExpression(destinationClass));\n      }\n      return occurrence.replace(ref);\n    }\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @see com.intellij.psi.codeStyle.CodeStyleManager#suggestUniqueVariableName(String, com.intellij.psi.PsiElement, boolean)\n   * Cannot use method from code style manager: a collision with fieldToReplace is not a collision\n   */\n  public static String suggestUniqueVariableName(String baseName, PsiElement place, PsiField fieldToReplace) {\n    int index = 0;\n    while (true) {\n      final String name = index > 0 ? baseName + index : baseName;\n      index++;\n      final PsiManager manager = place.getManager();\n      PsiResolveHelper helper = manager.getResolveHelper();\n      PsiVariable refVar = helper.resolveReferencedVariable(name, place);\n      if (refVar != null && !manager.areElementsEquivalent(refVar, fieldToReplace)) continue;\n      class Cancel extends RuntimeException {\n      }\n      try {\n        place.accept(new PsiRecursiveElementVisitor() {\n          public void visitClass(PsiClass aClass) {\n\n          }\n\n          public void visitVariable(PsiVariable variable) {\n            if (name.equals(variable.getName())) {\n              throw new Cancel();\n            }\n          }\n        });\n      }\n      catch (Cancel e) {\n        continue;\n      }\n\n      return name;\n    }\n  }","id":103932,"modified_method":"/**\n   * @see com.intellij.psi.codeStyle.CodeStyleManager#suggestUniqueVariableName(String, com.intellij.psi.PsiElement, boolean)\n   * Cannot use method from code style manager: a collision with fieldToReplace is not a collision\n   */\n  public static String suggestUniqueVariableName(String baseName, PsiElement place, PsiField fieldToReplace) {\n    int index = 0;\n    while (true) {\n      final String name = index > 0 ? baseName + index : baseName;\n      index++;\n      final PsiManager manager = place.getManager();\n      PsiResolveHelper helper = manager.getResolveHelper();\n      PsiVariable refVar = helper.resolveReferencedVariable(name, place);\n      if (refVar != null && !manager.areElementsEquivalent(refVar, fieldToReplace)) continue;\n      class CancelException extends RuntimeException {}\n\n      try {\n        place.accept(new PsiRecursiveElementVisitor() {\n          public void visitClass(PsiClass aClass) {\n\n          }\n\n          public void visitVariable(PsiVariable variable) {\n            if (name.equals(variable.getName())) {\n              throw new CancelException();\n            }\n          }\n        });\n      }\n      catch (CancelException e) {\n        continue;\n      }\n\n      return name;\n    }\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static PsiExpression inlineVariable(PsiLocalVariable variable, PsiExpression initializer,\n                                             PsiJavaCodeReferenceElement ref) throws IncorrectOperationException {\n    PsiManager manager = initializer.getManager();\n\n    PsiClass variableParent = RefactoringUtil.getThisClass(initializer);\n    PsiClass refParent = RefactoringUtil.getThisClass(ref);\n    initializer = convertInitializerToNormalExpression(initializer, variable.getType());\n\n    ChangeContextUtil.encodeContextInfo(initializer, false);\n    PsiExpression expr = (PsiExpression)ref.replace(initializer);\n    PsiType exprType = expr.getType();\n    if (exprType != null && !variable.getType().equals(exprType)) {\n      PsiTypeCastExpression cast = (PsiTypeCastExpression)manager.getElementFactory().createExpressionFromText(\"(t)a\", null);\n      PsiTypeElement castTypeElement = cast.getCastType();\n      LOG.assertTrue(castTypeElement != null);\n      castTypeElement.replace(variable.getTypeElement());\n      cast.getOperand().replace(expr);\n      PsiExpression exprCopy = (PsiExpression)expr.copy();\n      cast = (PsiTypeCastExpression)expr.replace(cast);\n      if (!RedundantCastUtil.isCastRedundant(cast)) {\n        expr = cast;\n      } else {\n        PsiElement toReplace = cast;\n        while (toReplace.getParent() instanceof PsiParenthesizedExpression) {\n          toReplace = toReplace.getParent();\n        }\n        expr = (PsiExpression)toReplace.replace(exprCopy);\n      }\n    }\n\n    ChangeContextUtil.clearContextInfo(initializer);\n\n    PsiClass thisClass = variableParent;\n    PsiThisExpression thisAccessExpr = null;\n    if (Comparing.equal(variableParent, refParent)) {\n      thisAccessExpr = createThisExpression(manager, null);\n    }\n    else {\n      if (!(thisClass instanceof PsiAnonymousClass)) {\n        thisAccessExpr = createThisExpression(manager, thisClass);\n      }\n    }\n    return (PsiExpression)ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr);\n  }","id":103933,"modified_method":"public static PsiExpression inlineVariable(PsiLocalVariable variable, PsiExpression initializer,\n                                             PsiJavaCodeReferenceElement ref) throws IncorrectOperationException {\n    PsiManager manager = initializer.getManager();\n\n    PsiClass thisClass = RefactoringUtil.getThisClass(initializer);\n    PsiClass refParent = RefactoringUtil.getThisClass(ref);\n    initializer = convertInitializerToNormalExpression(initializer, variable.getType());\n\n    ChangeContextUtil.encodeContextInfo(initializer, false);\n    PsiExpression expr = (PsiExpression)ref.replace(initializer);\n    PsiType exprType = expr.getType();\n    if (exprType != null && !variable.getType().equals(exprType)) {\n      PsiTypeCastExpression cast = (PsiTypeCastExpression)manager.getElementFactory().createExpressionFromText(\"(t)a\", null);\n      PsiTypeElement castTypeElement = cast.getCastType();\n      LOG.assertTrue(castTypeElement != null);\n      castTypeElement.replace(variable.getTypeElement());\n      cast.getOperand().replace(expr);\n      PsiExpression exprCopy = (PsiExpression)expr.copy();\n      cast = (PsiTypeCastExpression)expr.replace(cast);\n      if (!RedundantCastUtil.isCastRedundant(cast)) {\n        expr = cast;\n      } else {\n        PsiElement toReplace = cast;\n        while (toReplace.getParent() instanceof PsiParenthesizedExpression) {\n          toReplace = toReplace.getParent();\n        }\n        expr = (PsiExpression)toReplace.replace(exprCopy);\n      }\n    }\n\n    ChangeContextUtil.clearContextInfo(initializer);\n\n    PsiThisExpression thisAccessExpr = null;\n    if (Comparing.equal(thisClass, refParent)) {\n      thisAccessExpr = createThisExpression(manager, null);\n    }\n    else {\n      if (!(thisClass instanceof PsiAnonymousClass)) {\n        thisAccessExpr = createThisExpression(manager, thisClass);\n      }\n    }\n    return (PsiExpression)ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr);\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isModifiedInScope(PsiVariable variable, PsiElement scope) {\n    final PsiReference[] references = variable.getManager().getSearchHelper().findReferences(variable, new LocalSearchScope(scope), false);\n    for (PsiReference reference : references) {\n      if (isAssignmentLHS(reference.getElement())) return true;\n    }\n    return false;\n  }","id":103934,"modified_method":"public static boolean isModifiedInScope(PsiVariable variable, PsiElement scope) {\n    for (PsiReference reference : ReferencesSearch.search(variable, new LocalSearchScope(scope), false).findAll()) {\n      if (isAssignmentLHS(reference.getElement())) return true;\n    }\n    return false;\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isSourceRoot(final PsiDirectory directory) {\n    if (directory.getManager() == null) return false;\n    final Project project = directory.getProject();\n    if (project == null) return false;\n    final VirtualFile virtualFile = directory.getVirtualFile();\n    final VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(virtualFile);\n    return Comparing.equal(virtualFile, sourceRootForFile);\n  }","id":103935,"modified_method":"public static boolean isSourceRoot(final PsiDirectory directory) {\n    if (directory.getManager() == null) return false;\n    final Project project = directory.getProject();\n    final VirtualFile virtualFile = directory.getVirtualFile();\n    final VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(virtualFile);\n    return Comparing.equal(virtualFile, sourceRootForFile);\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isAssignmentLHS(PsiElement element) {\n    PsiElement parent = element.getParent();\n\n    if (parent instanceof PsiAssignmentExpression\n        && element.equals(((PsiAssignmentExpression)parent).getLExpression())) {\n      return true;\n    }\n    else {\n      return isPlusPlusOrMinusMinus(parent);\n    }\n  }","id":103936,"modified_method":"public static boolean isAssignmentLHS(PsiElement element) {\n    PsiElement parent = element.getParent();\n\n    return parent instanceof PsiAssignmentExpression && element.equals(((PsiAssignmentExpression)parent).getLExpression()) ||\n           isPlusPlusOrMinusMinus(parent);\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean equivalentTypes(PsiType t1, PsiType t2, PsiManager manager) {\n    while (t1 instanceof PsiArrayType) {\n      if (!(t2 instanceof PsiArrayType)) return false;\n      t1 = ((PsiArrayType)t1).getComponentType();\n      t2 = ((PsiArrayType)t2).getComponentType();\n    }\n\n    if (t1 instanceof PsiPrimitiveType) {\n      if (t2 instanceof PsiPrimitiveType) {\n        return t1.equals(t2);\n      }\n      else {\n        return false;\n      }\n    }\n\n    return manager.areElementsEquivalent(PsiUtil.resolveClassInType(t1), PsiUtil.resolveClassInType(t2));\n  }","id":103937,"modified_method":"public static boolean equivalentTypes(PsiType t1, PsiType t2, PsiManager manager) {\n    while (t1 instanceof PsiArrayType) {\n      if (!(t2 instanceof PsiArrayType)) return false;\n      t1 = ((PsiArrayType)t1).getComponentType();\n      t2 = ((PsiArrayType)t2).getComponentType();\n    }\n\n    if (t1 instanceof PsiPrimitiveType) {\n      return t2 instanceof PsiPrimitiveType && t1.equals(t2);\n    }\n\n    return manager.areElementsEquivalent(PsiUtil.resolveClassInType(t1), PsiUtil.resolveClassInType(t2));\n  }","commit_id":"13d3a53e5aeb853660b20a680ec2e9b7dd24d610","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void removeQualifier(PsiReferenceExpression refExpr) throws IncorrectOperationException{\n    PsiIdentifier identifier = (PsiIdentifier)refExpr.getReferenceNameElement();\n    PsiElementFactory factory = PsiManager.getInstance(myProject).getElementFactory();\n    PsiExpression expr = factory.createExpressionFromText(identifier.getText(), null);\n    refExpr.replace(expr);\n  }","id":103938,"modified_method":"private static void removeQualifier(PsiReferenceExpression refExpr) throws IncorrectOperationException{\n    refExpr.setQualifierExpression(null);\n  }","commit_id":"0271de9d40666ab63a3ffd2a23e591284544cf38","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void performRefactoring(final UsageInfo[] usages) {\n    try {\n      // correct references to moved members from the outside\n      ArrayList<MyUsageInfo> otherUsages = new ArrayList<MyUsageInfo>();\n      for (UsageInfo usageInfo : usages) {\n        MyUsageInfo usage = (MyUsageInfo)usageInfo;\n        if (!usage.reference.isValid()) continue;\n        if (usage.reference instanceof PsiReferenceExpression) {\n          PsiReferenceExpression refExpr = (PsiReferenceExpression)usage.reference;\n          PsiExpression qualifier = refExpr.getQualifierExpression();\n          if (qualifier != null) {\n            if (usage.qualifierClass != null) {\n              changeQualifier(refExpr, usage.qualifierClass);\n            }\n            else {\n              removeQualifier(refExpr);\n            }\n          }\n          else { // no qualifier\n            if (usage.qualifierClass != null) {\n              addQualifier(refExpr, usage.qualifierClass);\n            }\n          }\n        }\n        else {\n          otherUsages.add(usage);\n        }\n      }\n\n      // correct references inside moved members and outer references to Inner Classes\n      for (PsiMember member : myMembersToMove) {\n        if (member instanceof PsiVariable) {\n          ((PsiVariable)member).normalizeDeclaration();\n        }\n        final RefactoringElementListener elementListener = getTransaction().getElementListener(member);\n        ChangeContextUtil.encodeContextInfo(member, true);\n        final PsiElement memberCopy = member.copy();\n        ArrayList<PsiReference> refsToBeRebind = new ArrayList<PsiReference>();\n        for (Iterator<MyUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext();) {\n          MyUsageInfo info = iterator.next();\n          if (member.equals(info.member)) {\n            PsiReference ref = info.reference.getReference();\n            if (ref != null) {\n              refsToBeRebind.add(ref);\n            }\n            iterator.remove();\n          }\n        }\n        member.delete();\n\n        PsiMember newMember = (PsiMember)myTargetClass.add(memberCopy);\n\n        fixVisibility(newMember, usages);\n        for (PsiReference reference : refsToBeRebind) {\n          reference.bindToElement(newMember);\n        }\n\n        elementListener.elementMoved(newMember);\n      }\n\n      // qualifier info must be decoded after members are moved\n      ChangeContextUtil.decodeContextInfo(myTargetClass, null, null);\n      myMembersToMove.clear();\n      if (myMoveCallback != null) {\n        myMoveCallback.refactoringCompleted();\n      }\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","id":103939,"modified_method":"protected void performRefactoring(final UsageInfo[] usages) {\n    try {\n      // correct references to moved members from the outside\n      ArrayList<MyUsageInfo> otherUsages = new ArrayList<MyUsageInfo>();\n      for (UsageInfo usageInfo : usages) {\n        MyUsageInfo usage = (MyUsageInfo)usageInfo;\n        if (!usage.reference.isValid()) continue;\n        if (usage.reference instanceof PsiReferenceExpression) {\n          PsiReferenceExpression refExpr = (PsiReferenceExpression)usage.reference;\n          PsiExpression qualifier = refExpr.getQualifierExpression();\n          if (qualifier != null) {\n            if (usage.qualifierClass != null) {\n              changeQualifier(refExpr, usage.qualifierClass);\n            }\n            else {\n              removeQualifier(refExpr);\n            }\n          }\n          else { // no qualifier\n            if (usage.qualifierClass != null) {\n              changeQualifier(refExpr, usage.qualifierClass);\n            }\n          }\n        }\n        else {\n          otherUsages.add(usage);\n        }\n      }\n\n      // correct references inside moved members and outer references to Inner Classes\n      for (PsiMember member : myMembersToMove) {\n        if (member instanceof PsiVariable) {\n          ((PsiVariable)member).normalizeDeclaration();\n        }\n        final RefactoringElementListener elementListener = getTransaction().getElementListener(member);\n        ChangeContextUtil.encodeContextInfo(member, true);\n        final PsiElement memberCopy = member.copy();\n        ArrayList<PsiReference> refsToBeRebind = new ArrayList<PsiReference>();\n        for (Iterator<MyUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext();) {\n          MyUsageInfo info = iterator.next();\n          if (member.equals(info.member)) {\n            PsiReference ref = info.reference.getReference();\n            if (ref != null) {\n              refsToBeRebind.add(ref);\n            }\n            iterator.remove();\n          }\n        }\n        member.delete();\n\n        PsiMember newMember = (PsiMember)myTargetClass.add(memberCopy);\n\n        fixVisibility(newMember, usages);\n        for (PsiReference reference : refsToBeRebind) {\n          reference.bindToElement(newMember);\n        }\n\n        elementListener.elementMoved(newMember);\n      }\n\n      // qualifier info must be decoded after members are moved\n      ChangeContextUtil.decodeContextInfo(myTargetClass, null, null);\n      myMembersToMove.clear();\n      if (myMoveCallback != null) {\n        myMoveCallback.refactoringCompleted();\n      }\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"0271de9d40666ab63a3ffd2a23e591284544cf38","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void changeQualifier(PsiReferenceExpression refExpr, PsiClass aClass) throws IncorrectOperationException{\n    PsiElementFactory factory = PsiManager.getInstance(myProject).getElementFactory();\n    PsiReferenceExpression qualifier = factory.createReferenceExpression(aClass);\n    refExpr.getQualifierExpression().replace(qualifier);\n  }","id":103940,"modified_method":"private void changeQualifier(PsiReferenceExpression refExpr, PsiClass aClass) throws IncorrectOperationException{\n    PsiElementFactory factory = PsiManager.getInstance(myProject).getElementFactory();\n    refExpr.setQualifierExpression(factory.createReferenceExpression(aClass));\n  }","commit_id":"0271de9d40666ab63a3ffd2a23e591284544cf38","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Constructs new shared file system repository\n     *\n     * @param name                 repository name\n     * @param repositorySettings   repository settings\n     * @param indexShardRepository index shard repository\n     */\n    @Inject\n    public FsRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, Environment environment) throws IOException {\n        super(name.getName(), repositorySettings, indexShardRepository);\n        Path locationFile;\n        String location = repositorySettings.settings().get(\"location\", settings.get(\"repositories.fs.location\"));\n        if (location == null) {\n            logger.warn(\"the repository location is missing, it should point to a shared file system location that is available on all master and data nodes\");\n            throw new RepositoryException(name.name(), \"missing location\");\n        }\n        locationFile = environment.resolveRepoFile(location);\n        if (locationFile == null) {\n            if (environment.repoFiles().length > 0) {\n                logger.warn(\"The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] \", location, environment.repoFiles());\n                throw new RepositoryException(name.name(), \"location [\" + location + \"] doesn't match any of the locations specified by path.repo\");\n            } else {\n                logger.warn(\"The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node\", location);\n                throw new RepositoryException(name.name(), \"location [\" + location + \"] doesn't match any of the locations specified by path.repo because this setting is empty\");\n            }\n        }\n\n        blobStore = new FsBlobStore(settings, locationFile);\n        this.chunkSize = repositorySettings.settings().getAsBytesSize(\"chunk_size\", settings.getAsBytesSize(\"repositories.fs.chunk_size\", null));\n        this.compress = repositorySettings.settings().getAsBoolean(\"compress\", settings.getAsBoolean(\"repositories.fs.compress\", false));\n        this.basePath = BlobPath.cleanPath();\n    }","id":103941,"modified_method":"/**\n     * Constructs new shared file system repository\n     *\n     * @param name                 repository name\n     * @param repositorySettings   repository settings\n     * @param indexShardRepository index shard repository\n     */\n    @Inject\n    public FsRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, Environment environment) throws IOException {\n        super(name.getName(), repositorySettings, indexShardRepository);\n        Path locationFile;\n        String location = LOCATION_SETTING.exists(repositorySettings.settings()) ? LOCATION_SETTING.get(repositorySettings.settings()) : REPOSITORIES_LOCATION_SETTING.get(settings);\n        if (location == null) {\n            logger.warn(\"the repository location is missing, it should point to a shared file system location that is available on all master and data nodes\");\n            throw new RepositoryException(name.name(), \"missing location\");\n        }\n        locationFile = environment.resolveRepoFile(location);\n        if (locationFile == null) {\n            if (environment.repoFiles().length > 0) {\n                logger.warn(\"The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] \", location, environment.repoFiles());\n                throw new RepositoryException(name.name(), \"location [\" + location + \"] doesn't match any of the locations specified by path.repo\");\n            } else {\n                logger.warn(\"The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node\", location);\n                throw new RepositoryException(name.name(), \"location [\" + location + \"] doesn't match any of the locations specified by path.repo because this setting is empty\");\n            }\n        }\n\n        blobStore = new FsBlobStore(settings, locationFile);\n        if (CHUNK_SIZE_SETTING.exists(repositorySettings.settings())) {\n            this.chunkSize = CHUNK_SIZE_SETTING.get(repositorySettings.settings());\n        } else if (REPOSITORIES_CHUNK_SIZE_SETTING.exists(settings)) {\n            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(settings);\n        } else {\n            this.chunkSize = null;\n        }\n        this.compress = COMPRESS_SETTING.exists(repositorySettings.settings()) ? COMPRESS_SETTING.get(repositorySettings.settings()) : REPOSITORIES_COMPRESS_SETTING.get(settings);\n        this.basePath = BlobPath.cleanPath();\n    }","commit_id":"ae5da3432c0170690c79af0db382df97509bd2b6","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected Settings nodeSettings(int nodeOrdinal) {\n        if (randomBoolean()) {\n            // Configure using path.repo\n            return settingsBuilder()\n                    .put(super.nodeSettings(nodeOrdinal))\n                    .put(Environment.PATH_REPO_SETTING.getKey(), getBwcIndicesPath())\n                    .build();\n        } else {\n            // Configure using url white list\n            try {\n                URI repoJarPatternUri = new URI(\"jar:\" + getBwcIndicesPath().toUri().toString() + \"*.zip!/repo/\");\n                return settingsBuilder()\n                        .put(super.nodeSettings(nodeOrdinal))\n                        .putArray(\"repositories.url.allowed_urls\", repoJarPatternUri.toString())\n                        .build();\n            } catch (URISyntaxException ex) {\n                throw new IllegalArgumentException(ex);\n            }\n\n        }\n    }","id":103942,"modified_method":"@Override\n    protected Settings nodeSettings(int nodeOrdinal) {\n        if (randomBoolean()) {\n            // Configure using path.repo\n            return settingsBuilder()\n                    .put(super.nodeSettings(nodeOrdinal))\n                    .put(Environment.PATH_REPO_SETTING.getKey(), getBwcIndicesPath())\n                    .build();\n        } else {\n            // Configure using url white list\n            try {\n                URI repoJarPatternUri = new URI(\"jar:\" + getBwcIndicesPath().toUri().toString() + \"*.zip!/repo/\");\n                return settingsBuilder()\n                        .put(super.nodeSettings(nodeOrdinal))\n                        .putArray(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoJarPatternUri.toString())\n                        .build();\n            } catch (URISyntaxException ex) {\n                throw new IllegalArgumentException(ex);\n            }\n\n        }\n    }","commit_id":"ae5da3432c0170690c79af0db382df97509bd2b6","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Constructs new read-only URL-based repository\n     *\n     * @param name                 repository name\n     * @param repositorySettings   repository settings\n     * @param indexShardRepository shard repository\n     */\n    @Inject\n    public URLRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, Environment environment) throws IOException {\n        super(name.getName(), repositorySettings, indexShardRepository);\n        URL url;\n        String path = repositorySettings.settings().get(\"url\", settings.get(\"repositories.url.url\", settings.get(\"repositories.uri.url\")));\n        if (path == null) {\n            throw new RepositoryException(name.name(), \"missing url\");\n        } else {\n            url = new URL(path);\n        }\n        supportedProtocols = settings.getAsArray(SUPPORTED_PROTOCOLS_SETTING, DEFAULT_SUPPORTED_PROTOCOLS);\n        String[] urlWhiteList = settings.getAsArray(ALLOWED_URLS_SETTING, Strings.EMPTY_ARRAY);\n        this.urlWhiteList = new URIPattern[urlWhiteList.length];\n        for (int i = 0; i < urlWhiteList.length; i++) {\n            this.urlWhiteList[i] = new URIPattern(urlWhiteList[i]);\n        }\n        this.environment = environment;\n        listDirectories = repositorySettings.settings().getAsBoolean(\"list_directories\", settings.getAsBoolean(\"repositories.uri.list_directories\", true));\n        URL normalizedURL = checkURL(url);\n        blobStore = new URLBlobStore(settings, normalizedURL);\n        basePath = BlobPath.cleanPath();\n    }","id":103943,"modified_method":"/**\n     * Constructs new read-only URL-based repository\n     *\n     * @param name                 repository name\n     * @param repositorySettings   repository settings\n     * @param indexShardRepository shard repository\n     */\n    @Inject\n    public URLRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, Environment environment) throws IOException {\n        super(name.getName(), repositorySettings, indexShardRepository);\n\n        if (URL_SETTING.exists(repositorySettings.settings()) == false && REPOSITORIES_URL_SETTING.exists(settings) ==  false) {\n            throw new RepositoryException(name.name(), \"missing url\");\n        }\n        supportedProtocols = SUPPORTED_PROTOCOLS_SETTING.get(settings);\n        urlWhiteList = ALLOWED_URLS_SETTING.get(settings).toArray(new URIPattern[]{});\n        this.environment = environment;\n        listDirectories = LIST_DIRECTORIES_SETTING.exists(repositorySettings.settings()) ? LIST_DIRECTORIES_SETTING.get(repositorySettings.settings()) : REPOSITORIES_LIST_DIRECTORIES_SETTING.get(settings);\n\n        URL url = URL_SETTING.exists(repositorySettings.settings()) ? URL_SETTING.get(repositorySettings.settings()) : REPOSITORIES_URL_SETTING.get(settings);\n        URL normalizedURL = checkURL(url);\n        blobStore = new URLBlobStore(settings, normalizedURL);\n        basePath = BlobPath.cleanPath();\n    }","commit_id":"ae5da3432c0170690c79af0db382df97509bd2b6","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo\n     */\n    private URL checkURL(URL url) {\n        String protocol = url.getProtocol();\n        if (protocol == null) {\n            throw new RepositoryException(repositoryName, \"unknown url protocol from URL [\" + url + \"]\");\n        }\n        for (String supportedProtocol : supportedProtocols) {\n            if (supportedProtocol.equals(protocol)) {\n                try {\n                    if (URIPattern.match(urlWhiteList, url.toURI())) {\n                        // URL matches white list - no additional processing is needed\n                        return url;\n                    }\n                } catch (URISyntaxException ex) {\n                    logger.warn(\"cannot parse the specified url [{}]\", url);\n                    throw new RepositoryException(repositoryName, \"cannot parse the specified url [\" + url + \"]\");\n                }\n                // We didn't match white list - try to resolve against path.repo\n                URL normalizedUrl = environment.resolveRepoURL(url);\n                if (normalizedUrl == null) {\n                    logger.warn(\"The specified url [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] or by repositories.url.allowed_urls setting: [{}] \", url, environment.repoFiles());\n                    throw new RepositoryException(repositoryName, \"file url [\" + url + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\");\n                }\n                return normalizedUrl;\n            }\n        }\n        throw new RepositoryException(repositoryName, \"unsupported url protocol [\" + protocol + \"] from URL [\" + url + \"]\");\n    }","id":103944,"modified_method":"/**\n     * Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo\n     */\n    private URL checkURL(URL url) {\n        String protocol = url.getProtocol();\n        if (protocol == null) {\n            throw new RepositoryException(repositoryName, \"unknown url protocol from URL [\" + url + \"]\");\n        }\n        for (String supportedProtocol : supportedProtocols) {\n            if (supportedProtocol.equals(protocol)) {\n                try {\n                    if (URIPattern.match(urlWhiteList, url.toURI())) {\n                        // URL matches white list - no additional processing is needed\n                        return url;\n                    }\n                } catch (URISyntaxException ex) {\n                    logger.warn(\"cannot parse the specified url [{}]\", url);\n                    throw new RepositoryException(repositoryName, \"cannot parse the specified url [\" + url + \"]\");\n                }\n                // We didn't match white list - try to resolve against path.repo\n                URL normalizedUrl = environment.resolveRepoURL(url);\n                if (normalizedUrl == null) {\n                    logger.warn(\"The specified url [{}] doesn't start with any repository paths specified by the path.repo setting or by {} setting: [{}] \", url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles());\n                    throw new RepositoryException(repositoryName, \"file url [\" + url + \"] doesn't match any of the locations specified by path.repo or \" + ALLOWED_URLS_SETTING.getKey());\n                }\n                return normalizedUrl;\n            }\n        }\n        throw new RepositoryException(repositoryName, \"unsupported url protocol [\" + protocol + \"] from URL [\" + url + \"]\");\n    }","commit_id":"ae5da3432c0170690c79af0db382df97509bd2b6","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public boolean getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException {\n\n        // Control frames are never compressed\n        if (Util.isControl(opCode) || (rsv & RSV_BITMASK) == 0) {\n            return next.getMoreData(opCode, rsv, dest);\n        }\n\n        boolean endOfInputFrame = false;\n\n        if (inflator.needsInput()) {\n            readBuffer.clear();\n            endOfInputFrame = next.getMoreData(opCode, (rsv ^ RSV_BITMASK), readBuffer);\n            inflator.setInput(readBuffer.array(), readBuffer.arrayOffset(), readBuffer.position());\n        }\n\n        int written = 0;\n        try {\n            written = inflator.inflate(dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n            if (endOfInputFrame && !inflator.finished()) {\n                inflator.setInput(EOM_BYTES);\n                inflator.inflate(dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n            }\n        } catch (DataFormatException e) {\n            throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n        }\n        dest.position(dest.position() + written);\n\n\n        if (endOfInputFrame && !clientContextTakeover) {\n            inflator.reset();\n        }\n\n        return endOfInputFrame;\n    }","id":103945,"modified_method":"@Override\n    public TransformationResult getMoreData(byte opCode, int rsv, ByteBuffer dest) throws IOException {\n\n        // Control frames are never compressed. Pass control frames and\n        // uncompressed frames straight through.\n        if (Util.isControl(opCode) || (rsv & RSV_BITMASK) == 0) {\n            return next.getMoreData(opCode, rsv, dest);\n        }\n\n        int written;\n        boolean usedEomBytes = false;\n\n        while (dest.remaining() > 0) {\n            // Space available in destination. Try and fill it.\n            try {\n                written = inflator.inflate(\n                        dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n            } catch (DataFormatException e) {\n                throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n            }\n            dest.position(dest.position() + written);\n\n            if (inflator.needsInput() && !usedEomBytes ) {\n                if (dest.hasRemaining()) {\n                    readBuffer.clear();\n                    TransformationResult nextResult =\n                            next.getMoreData(opCode, (rsv ^ RSV_BITMASK), readBuffer);\n                    inflator.setInput(\n                            readBuffer.array(), readBuffer.arrayOffset(), readBuffer.position());\n                    if (TransformationResult.UNDERFLOW.equals(nextResult)) {\n                        return nextResult;\n                    } else if (TransformationResult.END_OF_FRAME.equals(nextResult) &&\n                            readBuffer.position() == 0) {\n                        inflator.setInput(EOM_BYTES);\n                        usedEomBytes = true;\n                    }\n                }\n            } else if (written == 0) {\n                return TransformationResult.END_OF_FRAME;\n            }\n        }\n\n        return TransformationResult.OVERFLOW;\n    }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n        public boolean getMoreData(byte opCode, int rsv, ByteBuffer dest) {\n            // opCode is ignored as the transformation is the same for all\n            // opCodes\n            // rsv is ignored as it known to be zero at this point\n            long toWrite = Math.min(\n                    payloadLength - payloadWritten, writePos - readPos);\n            toWrite = Math.min(toWrite, dest.remaining());\n\n            dest.put(inputBuffer, readPos, (int) toWrite);\n            readPos += toWrite;\n            payloadWritten += toWrite;\n            return (payloadWritten == payloadLength);\n        }","id":103946,"modified_method":"@Override\n        public TransformationResult getMoreData(byte opCode, int rsv, ByteBuffer dest) {\n            // opCode is ignored as the transformation is the same for all\n            // opCodes\n            // rsv is ignored as it known to be zero at this point\n            long toWrite = Math.min(\n                    payloadLength - payloadWritten, writePos - readPos);\n            toWrite = Math.min(toWrite, dest.remaining());\n\n            dest.put(inputBuffer, readPos, (int) toWrite);\n            readPos += toWrite;\n            payloadWritten += toWrite;\n\n            if (payloadWritten == payloadLength) {\n                return TransformationResult.END_OF_FRAME;\n            } else if (readPos == writePos) {\n                return TransformationResult.UNDERFLOW;\n            } else {\n                // !dest.hasRemaining()\n                return TransformationResult.OVERFLOW;\n            }\n        }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"private boolean processDataControl() throws IOException {\n        if (!transformation.getMoreData(opCode, rsv, controlBufferBinary)) {\n            return false;\n        }\n        controlBufferBinary.flip();\n        if (opCode == Constants.OPCODE_CLOSE) {\n            open = false;\n            String reason = null;\n            int code = CloseCodes.NORMAL_CLOSURE.getCode();\n            if (controlBufferBinary.remaining() == 1) {\n                controlBufferBinary.clear();\n                // Payload must be zero or 2+ bytes long\n                throw new WsIOException(new CloseReason(\n                        CloseCodes.PROTOCOL_ERROR,\n                        sm.getString(\"wsFrame.oneByteCloseCode\")));\n            }\n            if (controlBufferBinary.remaining() > 1) {\n                code = controlBufferBinary.getShort();\n                if (controlBufferBinary.remaining() > 0) {\n                    CoderResult cr = utf8DecoderControl.decode(\n                            controlBufferBinary, controlBufferText, true);\n                    if (cr.isError()) {\n                        controlBufferBinary.clear();\n                        controlBufferText.clear();\n                        throw new WsIOException(new CloseReason(\n                                CloseCodes.PROTOCOL_ERROR,\n                                sm.getString(\"wsFrame.invalidUtf8Close\")));\n                    }\n                    // There will be no overflow as the output buffer is big\n                    // enough. There will be no underflow as all the data is\n                    // passed to the decoder in a single call.\n                    controlBufferText.flip();\n                    reason = controlBufferText.toString();\n                }\n            }\n            wsSession.onClose(new CloseReason(Util.getCloseCode(code), reason));\n        } else if (opCode == Constants.OPCODE_PING) {\n            if (wsSession.isOpen()) {\n                wsSession.getBasicRemote().sendPong(controlBufferBinary);\n            }\n        } else if (opCode == Constants.OPCODE_PONG) {\n            MessageHandler.Whole<PongMessage> mhPong =\n                    wsSession.getPongMessageHandler();\n            if (mhPong != null) {\n                try {\n                    mhPong.onMessage(new WsPongMessage(controlBufferBinary));\n                } catch (Throwable t) {\n                    handleThrowableOnSend(t);\n                } finally {\n                    controlBufferBinary.clear();\n                }\n            }\n        } else {\n            // Should have caught this earlier but just in case...\n            controlBufferBinary.clear();\n            throw new WsIOException(new CloseReason(\n                    CloseCodes.PROTOCOL_ERROR,\n                    sm.getString(\"wsFrame.invalidOpCode\",\n                            Integer.valueOf(opCode))));\n        }\n        controlBufferBinary.clear();\n        newFrame();\n        return true;\n    }","id":103947,"modified_method":"private boolean processDataControl() throws IOException {\n        TransformationResult tr = transformation.getMoreData(opCode, rsv, messageBufferBinary);\n        if (TransformationResult.UNDERFLOW.equals(tr)) {\n            return false;\n        }\n        // Control messages have fixed message size so\n        // TransformationResult.OVERFLOW is not possible here\n\n        controlBufferBinary.flip();\n        if (opCode == Constants.OPCODE_CLOSE) {\n            open = false;\n            String reason = null;\n            int code = CloseCodes.NORMAL_CLOSURE.getCode();\n            if (controlBufferBinary.remaining() == 1) {\n                controlBufferBinary.clear();\n                // Payload must be zero or 2+ bytes long\n                throw new WsIOException(new CloseReason(\n                        CloseCodes.PROTOCOL_ERROR,\n                        sm.getString(\"wsFrame.oneByteCloseCode\")));\n            }\n            if (controlBufferBinary.remaining() > 1) {\n                code = controlBufferBinary.getShort();\n                if (controlBufferBinary.remaining() > 0) {\n                    CoderResult cr = utf8DecoderControl.decode(\n                            controlBufferBinary, controlBufferText, true);\n                    if (cr.isError()) {\n                        controlBufferBinary.clear();\n                        controlBufferText.clear();\n                        throw new WsIOException(new CloseReason(\n                                CloseCodes.PROTOCOL_ERROR,\n                                sm.getString(\"wsFrame.invalidUtf8Close\")));\n                    }\n                    // There will be no overflow as the output buffer is big\n                    // enough. There will be no underflow as all the data is\n                    // passed to the decoder in a single call.\n                    controlBufferText.flip();\n                    reason = controlBufferText.toString();\n                }\n            }\n            wsSession.onClose(new CloseReason(Util.getCloseCode(code), reason));\n        } else if (opCode == Constants.OPCODE_PING) {\n            if (wsSession.isOpen()) {\n                wsSession.getBasicRemote().sendPong(controlBufferBinary);\n            }\n        } else if (opCode == Constants.OPCODE_PONG) {\n            MessageHandler.Whole<PongMessage> mhPong =\n                    wsSession.getPongMessageHandler();\n            if (mhPong != null) {\n                try {\n                    mhPong.onMessage(new WsPongMessage(controlBufferBinary));\n                } catch (Throwable t) {\n                    handleThrowableOnSend(t);\n                } finally {\n                    controlBufferBinary.clear();\n                }\n            }\n        } else {\n            // Should have caught this earlier but just in case...\n            controlBufferBinary.clear();\n            throw new WsIOException(new CloseReason(\n                    CloseCodes.PROTOCOL_ERROR,\n                    sm.getString(\"wsFrame.invalidOpCode\",\n                            Integer.valueOf(opCode))));\n        }\n        controlBufferBinary.clear();\n        newFrame();\n        return true;\n    }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"private boolean processDataText() throws IOException {\n        // Copy the available data to the buffer\n        while (!transformation.getMoreData(opCode, rsv, messageBufferBinary)) {\n            // Frame not complete - we ran out of something\n            // Convert bytes to UTF-8\n            messageBufferBinary.flip();\n            while (true) {\n                CoderResult cr = utf8DecoderMessage.decode(\n                        messageBufferBinary, messageBufferText, false);\n                if (cr.isError()) {\n                    throw new WsIOException(new CloseReason(\n                            CloseCodes.NOT_CONSISTENT,\n                            sm.getString(\"wsFrame.invalidUtf8\")));\n                } else if (cr.isOverflow()) {\n                    // Ran out of space in text buffer - flush it\n                    if (usePartial()) {\n                        messageBufferText.flip();\n                        sendMessageText(false);\n                        messageBufferText.clear();\n                    } else {\n                        throw new WsIOException(new CloseReason(\n                                CloseCodes.TOO_BIG,\n                                sm.getString(\"wsFrame.textMessageTooBig\")));\n                    }\n                } else if (cr.isUnderflow()) {\n                    // Need more input\n                    // Compact what we have to create as much space as possible\n                    messageBufferBinary.compact();\n\n                    // What did we run out of?\n                    if (readPos == writePos) {\n                        // Ran out of input data - get some more\n                        return false;\n                    } else {\n                        // Ran out of message buffer - exit inner loop and\n                        // refill\n                        break;\n                    }\n                }\n            }\n        }\n\n        messageBufferBinary.flip();\n        boolean last = false;\n        // Frame is fully received\n        // Convert bytes to UTF-8\n        while (true) {\n            CoderResult cr = utf8DecoderMessage.decode(messageBufferBinary,\n                    messageBufferText, last);\n            if (cr.isError()) {\n                throw new WsIOException(new CloseReason(\n                        CloseCodes.NOT_CONSISTENT,\n                        sm.getString(\"wsFrame.invalidUtf8\")));\n            } else if (cr.isOverflow()) {\n                // Ran out of space in text buffer - flush it\n                if (usePartial()) {\n                    messageBufferText.flip();\n                    sendMessageText(false);\n                    messageBufferText.clear();\n                } else {\n                    throw new WsIOException(new CloseReason(\n                            CloseCodes.TOO_BIG,\n                            sm.getString(\"wsFrame.textMessageTooBig\")));\n                }\n            } else if (cr.isUnderflow() & !last) {\n                // End of frame and possible message as well.\n\n                if (continuationExpected) {\n                    // If partial messages are supported, send what we have\n                    // managed to decode\n                    if (usePartial()) {\n                        messageBufferText.flip();\n                        sendMessageText(false);\n                        messageBufferText.clear();\n                    }\n                    messageBufferBinary.compact();\n                    newFrame();\n                    // Process next frame\n                    return true;\n                } else {\n                    // Make sure coder has flushed all output\n                    last = true;\n                }\n            } else {\n                // End of message\n                messageBufferText.flip();\n                sendMessageText(true);\n\n                newMessage();\n                return true;\n            }\n        }\n    }","id":103948,"modified_method":"private boolean processDataText() throws IOException {\n        // Copy the available data to the buffer\n        TransformationResult tr = transformation.getMoreData(opCode, rsv, messageBufferBinary);\n        while (!TransformationResult.END_OF_FRAME.equals(tr)) {\n            // Frame not complete - we ran out of something\n            // Convert bytes to UTF-8\n            messageBufferBinary.flip();\n            while (true) {\n                CoderResult cr = utf8DecoderMessage.decode(\n                        messageBufferBinary, messageBufferText, false);\n                if (cr.isError()) {\n                    throw new WsIOException(new CloseReason(\n                            CloseCodes.NOT_CONSISTENT,\n                            sm.getString(\"wsFrame.invalidUtf8\")));\n                } else if (cr.isOverflow()) {\n                    // Ran out of space in text buffer - flush it\n                    if (usePartial()) {\n                        messageBufferText.flip();\n                        sendMessageText(false);\n                        messageBufferText.clear();\n                    } else {\n                        throw new WsIOException(new CloseReason(\n                                CloseCodes.TOO_BIG,\n                                sm.getString(\"wsFrame.textMessageTooBig\")));\n                    }\n                } else if (cr.isUnderflow()) {\n                    // Compact what we have to create as much space as possible\n                    messageBufferBinary.compact();\n\n                    // Need more input\n                    // What did we run out of?\n                    if (TransformationResult.OVERFLOW.equals(tr)) {\n                        // Ran out of message buffer - exit inner loop and\n                        // refill\n                        break;\n                    } else {\n                        // TransformationResult.UNDERFLOW\n                        // Ran out of input data - get some more\n                        return false;\n                    }\n                }\n            }\n            // Read more input data\n            tr = transformation.getMoreData(opCode, rsv, messageBufferBinary);\n        }\n\n        messageBufferBinary.flip();\n        boolean last = false;\n        // Frame is fully received\n        // Convert bytes to UTF-8\n        while (true) {\n            CoderResult cr = utf8DecoderMessage.decode(messageBufferBinary,\n                    messageBufferText, last);\n            if (cr.isError()) {\n                throw new WsIOException(new CloseReason(\n                        CloseCodes.NOT_CONSISTENT,\n                        sm.getString(\"wsFrame.invalidUtf8\")));\n            } else if (cr.isOverflow()) {\n                // Ran out of space in text buffer - flush it\n                if (usePartial()) {\n                    messageBufferText.flip();\n                    sendMessageText(false);\n                    messageBufferText.clear();\n                } else {\n                    throw new WsIOException(new CloseReason(\n                            CloseCodes.TOO_BIG,\n                            sm.getString(\"wsFrame.textMessageTooBig\")));\n                }\n            } else if (cr.isUnderflow() & !last) {\n                // End of frame and possible message as well.\n\n                if (continuationExpected) {\n                    // If partial messages are supported, send what we have\n                    // managed to decode\n                    if (usePartial()) {\n                        messageBufferText.flip();\n                        sendMessageText(false);\n                        messageBufferText.clear();\n                    }\n                    messageBufferBinary.compact();\n                    newFrame();\n                    // Process next frame\n                    return true;\n                } else {\n                    // Make sure coder has flushed all output\n                    last = true;\n                }\n            } else {\n                // End of message\n                messageBufferText.flip();\n                sendMessageText(true);\n\n                newMessage();\n                return true;\n            }\n        }\n    }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n        public boolean getMoreData(byte opCode, int rsv, ByteBuffer dest) {\n            // opCode is ignored as the transformation is the same for all\n            // opCodes\n            // rsv is ignored as it known to be zero at this point\n            while (payloadWritten < payloadLength && readPos < writePos &&\n                    dest.hasRemaining()) {\n                byte b = (byte) ((inputBuffer[readPos] ^ mask[maskIndex]) & 0xFF);\n                maskIndex++;\n                if (maskIndex == 4) {\n                    maskIndex = 0;\n                }\n                readPos++;\n                payloadWritten++;\n                dest.put(b);\n            }\n            return (payloadWritten == payloadLength);\n        }","id":103949,"modified_method":"@Override\n        public TransformationResult getMoreData(byte opCode, int rsv, ByteBuffer dest) {\n            // opCode is ignored as the transformation is the same for all\n            // opCodes\n            // rsv is ignored as it known to be zero at this point\n            while (payloadWritten < payloadLength && readPos < writePos &&\n                    dest.hasRemaining()) {\n                byte b = (byte) ((inputBuffer[readPos] ^ mask[maskIndex]) & 0xFF);\n                maskIndex++;\n                if (maskIndex == 4) {\n                    maskIndex = 0;\n                }\n                readPos++;\n                payloadWritten++;\n                dest.put(b);\n            }\n            if (payloadWritten == payloadLength) {\n                return TransformationResult.END_OF_FRAME;\n            } else if (readPos == writePos) {\n                return TransformationResult.UNDERFLOW;\n            } else {\n                // !dest.hasRemaining()\n                return TransformationResult.OVERFLOW;\n            }\n        }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"private boolean processDataBinary() throws IOException {\n        // Copy the available data to the buffer\n        while (!transformation.getMoreData(opCode, rsv, messageBufferBinary)) {\n            // Frame not complete - what did we run out of?\n            if (readPos == writePos) {\n                // Ran out of input data - get some more\n                return false;\n            } else {\n                // Ran out of message buffer - flush it\n                if (!usePartial()) {\n                    CloseReason cr = new CloseReason(CloseCodes.TOO_BIG,\n                            sm.getString(\"wsFrame.bufferTooSmall\",\n                                    Integer.valueOf(\n                                            messageBufferBinary.capacity()),\n                                    Long.valueOf(payloadLength)));\n                    throw new WsIOException(cr);\n                }\n                messageBufferBinary.flip();\n                ByteBuffer copy =\n                        ByteBuffer.allocate(messageBufferBinary.limit());\n                copy.put(messageBufferBinary);\n                copy.flip();\n                sendMessageBinary(copy, false);\n                messageBufferBinary.clear();\n            }\n        }\n\n        // Frame is fully received\n        // Send the message if either:\n        // - partial messages are supported\n        // - the message is complete\n        if (usePartial() || !continuationExpected) {\n            messageBufferBinary.flip();\n            ByteBuffer copy =\n                    ByteBuffer.allocate(messageBufferBinary.limit());\n            copy.put(messageBufferBinary);\n            copy.flip();\n            sendMessageBinary(copy, !continuationExpected);\n            messageBufferBinary.clear();\n        }\n\n        if (continuationExpected) {\n            // More data for this message expected, start a new frame\n            newFrame();\n        } else {\n            // Message is complete, start a new message\n            newMessage();\n        }\n\n        return true;\n    }","id":103950,"modified_method":"private boolean processDataBinary() throws IOException {\n        // Copy the available data to the buffer\n        TransformationResult tr = transformation.getMoreData(opCode, rsv, messageBufferBinary);\n        while (!TransformationResult.END_OF_FRAME.equals(tr)) {\n            // Frame not complete - what did we run out of?\n            if (TransformationResult.UNDERFLOW.equals(tr)) {\n                // Ran out of input data - get some more\n                return false;\n            }\n\n            // Ran out of message buffer - flush it\n            if (!usePartial()) {\n                CloseReason cr = new CloseReason(CloseCodes.TOO_BIG,\n                        sm.getString(\"wsFrame.bufferTooSmall\",\n                                Integer.valueOf(\n                                        messageBufferBinary.capacity()),\n                                Long.valueOf(payloadLength)));\n                throw new WsIOException(cr);\n            }\n            messageBufferBinary.flip();\n            ByteBuffer copy =\n                    ByteBuffer.allocate(messageBufferBinary.limit());\n            copy.put(messageBufferBinary);\n            copy.flip();\n            sendMessageBinary(copy, false);\n            messageBufferBinary.clear();\n            // Read more data\n            tr = transformation.getMoreData(opCode, rsv, messageBufferBinary);\n        }\n\n        // Frame is fully received\n        // Send the message if either:\n        // - partial messages are supported\n        // - the message is complete\n        if (usePartial() || !continuationExpected) {\n            messageBufferBinary.flip();\n            ByteBuffer copy =\n                    ByteBuffer.allocate(messageBufferBinary.limit());\n            copy.put(messageBufferBinary);\n            copy.flip();\n            sendMessageBinary(copy, !continuationExpected);\n            messageBufferBinary.clear();\n        }\n\n        if (continuationExpected) {\n            // More data for this message expected, start a new frame\n            newFrame();\n        } else {\n            // Message is complete, start a new message\n            newMessage();\n        }\n\n        return true;\n    }","commit_id":"692011dd901485d8d897ca52f2ae6ad38baedd9a","url":"https://github.com/apache/tomcat"},{"original_method":"private static boolean filterMethods(final PsiMethod method) {\n    if(method.hasModifierProperty(PsiModifier.STATIC) || !method.hasModifierProperty(PsiModifier.PUBLIC)) return true;\n\n    final String className = method.getContainingClass().getQualifiedName();\n    return className != null && className.equals(CommonClassNames.JAVA_LANG_OBJECT);\n  }","id":103951,"modified_method":"private static boolean filterMethods(final PsiMethod method) {\n    if(method.hasModifierProperty(PsiModifier.STATIC) || !method.hasModifierProperty(PsiModifier.PUBLIC)) return true;\n\n    PsiClass psiClass = method.getContainingClass();\n    if (psiClass == null) return false;\n    final String className = psiClass.getQualifiedName();\n    return className != null && className.equals(CommonClassNames.JAVA_LANG_OBJECT);\n  }","commit_id":"0b034bdf7b806e0cc1473af574f0b22ef1e7ada1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean isEntryPoint(@NotNull PsiElement psiElement) {\n    if (psiElement instanceof PsiMethod) {\n      final PsiMethod method = (PsiMethod)psiElement;\n      if (method.getParameterList().getParameters().length == 1 &&\n          PsiType.VOID.equals(method.getReturnType()) &&\n          \"start\".equals(method.getName())) {\n        return InheritanceUtil.isInheritor(method.getContainingClass(), true, JavaFxCommonNames.JAVAFX_APPLICATION_APPLICATION);\n      }\n    }\n    else if (psiElement instanceof PsiClass) {\n      return InheritanceUtil.isInheritor((PsiClass)psiElement, true, JavaFxCommonNames.JAVAFX_APPLICATION_APPLICATION);\n    }\n    return false;\n  }","id":103952,"modified_method":"@Override\n  public boolean isEntryPoint(@NotNull PsiElement psiElement) {\n    if (psiElement instanceof PsiMethod) {\n      final PsiMethod method = (PsiMethod)psiElement;\n      final int paramsCount = method.getParameterList().getParameters().length;\n      final String methodName = method.getName();\n      final PsiClass containingClass = method.getContainingClass();\n      if (paramsCount == 1 &&\n          PsiType.VOID.equals(method.getReturnType()) &&\n          \"start\".equals(methodName)) {\n        return InheritanceUtil.isInheritor(containingClass, true, JavaFxCommonNames.JAVAFX_APPLICATION_APPLICATION);\n      }\n      if (paramsCount == 0 && INITIALIZE_METHOD_NAME.equals(methodName) &&\n          method.hasModifierProperty(PsiModifier.PUBLIC) &&\n          containingClass != null &&\n          JavaFxPsiUtil.isControllerClass(containingClass)) {\n        return true;\n      }\n\n    }\n    else if (psiElement instanceof PsiClass) {\n      return InheritanceUtil.isInheritor((PsiClass)psiElement, true, JavaFxCommonNames.JAVAFX_APPLICATION_APPLICATION);\n    }\n    return false;\n  }","commit_id":"475c9f1c459b510eb29d4bc4932333f8b414c5d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  @Override\n  public SearchScope getAdditionalUseScope(@NotNull PsiElement element) {\n    PsiClass containingClass = null;\n    if (element instanceof PsiField) {\n      containingClass = ((PsiField)element).getContainingClass();\n    }\n    else if (element instanceof PsiMethod) {\n      containingClass = ((PsiMethod)element).getContainingClass();\n    }\n    else if (element instanceof PsiParameter) {\n      final PsiElement declarationScope = ((PsiParameter)element).getDeclarationScope();\n      if (declarationScope instanceof PsiMethod && PropertyUtil.isSimplePropertySetter((PsiMethod)declarationScope)) {\n        containingClass = ((PsiMethod)declarationScope).getContainingClass();\n      }\n    }\n\n    if (containingClass != null) {\n      if (element instanceof PsiField && needToEnlargeFieldScope((PsiField)element) ||\n          element instanceof PsiMethod && needToEnlargeMethodScope((PsiMethod)element) ||\n          element instanceof PsiParameter) {\n        if (InheritanceUtil.isInheritor(containingClass, JavaFxCommonNames.JAVAFX_SCENE_NODE) ||\n            isControllerClass(containingClass)) {\n          final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(element.getProject());\n          return new GlobalFxmlSearchScope(projectScope);\n        }\n      }\n    }\n\n    return null;\n  }","id":103953,"modified_method":"@Nullable\n  @Override\n  public SearchScope getAdditionalUseScope(@NotNull PsiElement element) {\n    PsiClass containingClass = null;\n    if (element instanceof PsiField) {\n      containingClass = ((PsiField)element).getContainingClass();\n    }\n    else if (element instanceof PsiMethod) {\n      containingClass = ((PsiMethod)element).getContainingClass();\n    }\n    else if (element instanceof PsiParameter) {\n      final PsiElement declarationScope = ((PsiParameter)element).getDeclarationScope();\n      if (declarationScope instanceof PsiMethod && PropertyUtil.isSimplePropertySetter((PsiMethod)declarationScope)) {\n        containingClass = ((PsiMethod)declarationScope).getContainingClass();\n      }\n    }\n\n    if (containingClass != null) {\n      if (element instanceof PsiField && needToEnlargeFieldScope((PsiField)element) ||\n          element instanceof PsiMethod && needToEnlargeMethodScope((PsiMethod)element) ||\n          element instanceof PsiParameter) {\n        if (InheritanceUtil.isInheritor(containingClass, JavaFxCommonNames.JAVAFX_SCENE_NODE) ||\n            JavaFxPsiUtil.isControllerClass(containingClass)) {\n          final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(element.getProject());\n          return new GlobalFxmlSearchScope(projectScope);\n        }\n      }\n    }\n\n    return null;\n  }","commit_id":"475c9f1c459b510eb29d4bc4932333f8b414c5d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean isObjectMember(PsiElement element) {\n    if (!(element instanceof PsiMethod))\n      return false;\n    return ((PsiMethod) element).getContainingClass().getQualifiedName().equals(Object.class.getName());\n  }","id":103954,"modified_method":"private boolean isObjectMember(PsiElement element) {\n    if (!(element instanceof PsiMethod))\n      return false;\n    final PsiClass containingClass = ((PsiMethod)element).getContainingClass();\n    if (containingClass == null) {\n      return false;\n    } else {\n      final String qualifiedName = containingClass.getQualifiedName();\n      if (qualifiedName == null) {\n        return false;\n      } else {\n        return qualifiedName.equals(Object.class.getName());\n      }\n    }\n  }","commit_id":"9cd993e8bc98a1620791afe24125e10c23223b0f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Collection<StructureViewTreeElement> getClassChildren() {\n    ArrayList<StructureViewTreeElement> array = new ArrayList<StructureViewTreeElement>();\n\n    List<PsiElement> ownChildren = Arrays.asList(getElement().getChildren());\n    List<PsiElement> inherited = new ArrayList<PsiElement>(ownChildren);\n    PsiScopesUtil.processScope(getElement(), new AddAllMembersProcessor(inherited, getElement()), PsiSubstitutor.UNKNOWN, null, getElement());\n\n    for (int i = 0; i < inherited.size(); i++) {\n      PsiElement child = inherited.get(i);\n      if (!child.isValid()) continue;\n      if (child instanceof PsiClass) {\n        array.add(new JavaClassTreeElement((PsiClass)child, !ownChildren.contains(child)));\n      }\n      else if (child instanceof PsiMethod || child instanceof PsiField){\n        addMember(child, array, !ownChildren.contains(child));\n      }\n    }\n    return array;\n  }","id":103955,"modified_method":"private Collection<StructureViewTreeElement> getClassChildren() {\n    ArrayList<StructureViewTreeElement> array = new ArrayList<StructureViewTreeElement>();\n\n    if (getElement() == null || !getElement().isValid()) return array;\n    \n    List<PsiElement> ownChildren = Arrays.asList(getElement().getChildren());\n    List<PsiElement> inherited = new ArrayList<PsiElement>(ownChildren);\n    \n    PsiScopesUtil.processScope(getElement(), new AddAllMembersProcessor(inherited, getElement()), PsiSubstitutor.UNKNOWN, null, getElement());\n\n    for (int i = 0; i < inherited.size(); i++) {\n      PsiElement child = inherited.get(i);\n      if (!child.isValid()) continue;\n      if (child instanceof PsiClass) {\n        array.add(new JavaClassTreeElement((PsiClass)child, !ownChildren.contains(child)));\n      }\n      else if (child instanceof PsiMethod || child instanceof PsiField){\n        addMember(child, array, !ownChildren.contains(child));\n      }\n    }\n    return array;\n  }","commit_id":"9cd993e8bc98a1620791afe24125e10c23223b0f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private double calculateTDT( final VariantContext vc, final Set<Sample> triosToTest ) {\n\n        final double nABGivenABandBB = calculateNChildren(vc, triosToTest, HET, HET, HOM);\n        final double nBBGivenABandBB = calculateNChildren(vc, triosToTest, HOM, HET, HOM);\n        final double nAAGivenABandAB = calculateNChildren(vc, triosToTest, REF, HET, HET);\n        final double nBBGivenABandAB = calculateNChildren(vc, triosToTest, HOM, HET, HET);\n        final double nAAGivenAAandAB = calculateNChildren(vc, triosToTest, REF, REF, HET);\n        final double nABGivenAAandAB = calculateNChildren(vc, triosToTest, HET, REF, HET);\n\n        final double numer = (nABGivenABandBB - nBBGivenABandBB) + 2.0 * (nAAGivenABandAB - nBBGivenABandAB) + (nAAGivenAAandAB - nABGivenAAandAB);\n        final double denom = (nABGivenABandBB + nBBGivenABandBB) + 4.0 * (nAAGivenABandAB + nBBGivenABandAB) + (nAAGivenAAandAB + nABGivenAAandAB);\n        return (numer * numer) / denom;\n    }","id":103956,"modified_method":"private double calculateTDT( final VariantContext vc, final Set<Sample> triosToTest ) {\n\n        final double nABGivenABandBB = calculateNChildren(vc, triosToTest, HET, HET, HOM) + calculateNChildren(vc, triosToTest, HET, HOM, HET);\n        final double nBBGivenABandBB = calculateNChildren(vc, triosToTest, HOM, HET, HOM) + calculateNChildren(vc, triosToTest, HOM, HOM, HET);\n        final double nAAGivenABandAB = calculateNChildren(vc, triosToTest, REF, HET, HET);\n        final double nBBGivenABandAB = calculateNChildren(vc, triosToTest, HOM, HET, HET);\n        final double nAAGivenAAandAB = calculateNChildren(vc, triosToTest, REF, REF, HET) + calculateNChildren(vc, triosToTest, REF, HET, REF);\n        final double nABGivenAAandAB = calculateNChildren(vc, triosToTest, HET, REF, HET) + calculateNChildren(vc, triosToTest, HET, HET, REF);\n\n        final double numer = (nABGivenABandBB - nBBGivenABandBB) + 2.0 * (nAAGivenABandAB - nBBGivenABandAB) + (nAAGivenAAandAB - nABGivenAAandAB);\n        final double denom = (nABGivenABandBB + nBBGivenABandBB) + 4.0 * (nAAGivenABandAB + nBBGivenABandAB) + (nAAGivenAAandAB + nABGivenAAandAB);\n        return (numer * numer) / denom;\n    }","commit_id":"16cc2b864e3098e96eaff5727a5583775e392442","url":"https://github.com/broadgsa/gatk"},{"original_method":"private double calculateNChildren( final VariantContext vc, final Set<Sample> triosToTest, final int childIdx, final int momIdx, final int dadIdx ) {\n        final double likelihoodVector[] = new double[triosToTest.size() * 2];\n        int iii = 0;\n        for( final Sample child : triosToTest ) {\n            final double[] momGL = vc.getGenotype(child.getMaternalID()).getLikelihoods().getAsVector();\n            final double[] dadGL = vc.getGenotype(child.getPaternalID()).getLikelihoods().getAsVector();\n            final double[] childGL = vc.getGenotype(child.getID()).getLikelihoods().getAsVector();\n            likelihoodVector[iii++] = momGL[momIdx] + dadGL[dadIdx] + childGL[childIdx];\n            likelihoodVector[iii++] = momGL[dadIdx] + dadGL[momIdx] + childGL[childIdx];\n        }\n\n        return MathUtils.sumLog10(likelihoodVector);\n    }","id":103957,"modified_method":"private double calculateNChildren( final VariantContext vc, final Set<Sample> triosToTest, final int childIdx, final int parent1Idx, final int parent2Idx ) {\n        final double likelihoodVector[] = new double[triosToTest.size()];\n        int iii = 0;\n        for( final Sample child : triosToTest ) {\n            final double[] momGL = vc.getGenotype(child.getMaternalID()).getLikelihoods().getAsVector();\n            final double[] dadGL = vc.getGenotype(child.getPaternalID()).getLikelihoods().getAsVector();\n            final double[] childGL = vc.getGenotype(child.getID()).getLikelihoods().getAsVector();\n            likelihoodVector[iii++] = momGL[parent1Idx] + dadGL[parent2Idx] + childGL[childIdx];\n        }\n\n        return MathUtils.sumLog10(likelihoodVector);\n    }","commit_id":"16cc2b864e3098e96eaff5727a5583775e392442","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test\n    public void testTDTAnnotation() {\n        final String MD5 = \"9fe37b61aab695ad47ce3c587148e91f\";\n        WalkerTestSpec spec = new WalkerTestSpec(\n                \"-T VariantAnnotator -R \" + b37KGReference + \" -A TransmissionDisequilibriumTest --variant:vcf \" + validationDataLocation + \"ug.random50000.subset300bp.chr1.family.vcf\" +\n                        \" -L \" + validationDataLocation + \"ug.random50000.subset300bp.chr1.family.vcf -NO_HEADER -ped \" + validationDataLocation + \"ug.random50000.family.ped -o %s\", 1,\n                Arrays.asList(MD5));\n        executeTest(\"Testing TDT annotation\", spec);\n    }","id":103958,"modified_method":"@Test\n    public void testTDTAnnotation() {\n        final String MD5 = \"204e67536a17af7eaa6bf0a910818997\";\n        WalkerTestSpec spec = new WalkerTestSpec(\n                \"-T VariantAnnotator -R \" + b37KGReference + \" -A TransmissionDisequilibriumTest --variant:vcf \" + validationDataLocation + \"ug.random50000.subset300bp.chr1.family.vcf\" +\n                        \" -L \" + validationDataLocation + \"ug.random50000.subset300bp.chr1.family.vcf -NO_HEADER -ped \" + validationDataLocation + \"ug.random50000.family.ped -o %s\", 1,\n                Arrays.asList(MD5));\n        executeTest(\"Testing TDT annotation\", spec);\n    }","commit_id":"16cc2b864e3098e96eaff5727a5583775e392442","url":"https://github.com/broadgsa/gatk"},{"original_method":"public ClassRepr(final BufferedReader r) {\n        fileName = StringCache.get(RW.readString(r));\n        name = StringCache.get(RW.readString(r));\n\n        final String s = RW.readString(r);\n\n        signature = s.length() == 0 ? null : s;\n\n        superClass = TypeRepr.reader.read(r);\n        interfaces = RW.readMany(r, TypeRepr.reader, new ArrayList<TypeRepr.AbstractType>()).toArray(dummyTypes);\n        nestedClasses = RW.readMany(r, TypeRepr.reader, new ArrayList<TypeRepr.AbstractType>()).toArray(dummyTypes);\n        fields = RW.readMany(r, FieldRepr.reader, new ArrayList<FieldRepr>()).toArray(dummyFields);\n        methods = RW.readMany(r, MethodRepr.reader, new ArrayList<MethodRepr>()).toArray(dummyMethods);\n    }","id":103959,"modified_method":"public ClassRepr(final BufferedReader r) {\n        fileName = StringCache.get(RW.readString(r));\n        name = StringCache.get(RW.readString(r));\n\n        final String s = RW.readString(r);\n\n        signature = s.length() == 0 ? null : s;\n\n        superClass = TypeRepr.reader.read(r);\n        interfaces = (Set<TypeRepr.AbstractType>) RW.readMany(r, TypeRepr.reader, new HashSet<TypeRepr.AbstractType>());\n        nestedClasses = (Set<TypeRepr.AbstractType>) RW.readMany(r, TypeRepr.reader, new HashSet<TypeRepr.AbstractType>());\n\n        fields = new HashMap<StringCache.S, FieldRepr>();\n        for (FieldRepr fr : RW.readMany(r, FieldRepr.reader, new ArrayList<FieldRepr>())) {\n            fields.put(fr.name, fr);\n        }\n\n        methods = new HashMap<StringCache.S, List<MethodRepr>>();\n        for (MethodRepr mr : RW.readMany(r, MethodRepr.reader, new ArrayList<MethodRepr>())) {\n            List<MethodRepr> ms = methods.get(mr.name);\n\n            if (ms == null) {\n                ms = new LinkedList<MethodRepr>();\n                methods.put(mr.name, ms);\n            }\n\n            ms.add(mr);\n        }\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void write(final BufferedWriter w) {\n        RW.writeln(w, fileName.value);\n        RW.writeln(w, name.value);\n        RW.writeln(w, signature);\n        superClass.write(w);\n        RW.writeln(w, interfaces, TypeRepr.fromAbstractType);\n        RW.writeln(w, nestedClasses, TypeRepr.fromAbstractType);\n        RW.writeln(w, fields, RW.fromWritable);\n        RW.writeln(w, methods, RW.fromWritable);\n    }","id":103960,"modified_method":"public void write(final BufferedWriter w) {\n        RW.writeln(w, fileName.value);\n        RW.writeln(w, name.value);\n        RW.writeln(w, signature);\n        superClass.write(w);\n        RW.writeln(w, interfaces);\n        RW.writeln(w, nestedClasses);\n        RW.writeln(w, fields.values());\n\n        final List<MethodRepr> ms = new ArrayList<MethodRepr>();\n\n        for (List<MethodRepr> mr : methods.values()) {\n            ms.addAll(mr);\n        }\n\n        RW.writeln(w, ms);\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ClassRepr(final StringCache.S fn, final StringCache.S n, final String sig, final String sup, final String[] i, final String[] ns, final FieldRepr[] f, final MethodRepr[] m) {\n        fileName = fn;\n        name = n;\n        superClass = TypeRepr.createClassType(sup);\n        interfaces = TypeRepr.createClassType(i);\n        nestedClasses = TypeRepr.createClassType(ns);\n        fields = f;\n        methods = m;\n        signature = sig;\n    }","id":103961,"modified_method":"public ClassRepr(final StringCache.S fn, final StringCache.S n, final String sig, final String sup, final String[] i, final Collection<String> ns, final Collection<FieldRepr> f, final Collection<MethodRepr> m) {\n        fileName = fn;\n        name = n;\n        superClass = TypeRepr.createClassType(sup);\n        interfaces = (Set<TypeRepr.AbstractType>) TypeRepr.createClassType(i, new HashSet<TypeRepr.AbstractType>());\n        nestedClasses = (Set<TypeRepr.AbstractType>) TypeRepr.createClassType(ns, new HashSet<TypeRepr.AbstractType>());\n        fields = new HashMap<StringCache.S, FieldRepr>();\n        methods = new HashMap<StringCache.S, List<MethodRepr>>();\n\n        for (FieldRepr fr : f) {\n            fields.put(fr.name, fr);\n        }\n\n        for (MethodRepr mr : m) {\n            List<MethodRepr> ms = methods.get(mr.name);\n\n            if (ms == null) {\n                ms = new LinkedList<MethodRepr>();\n                methods.put(mr.name, ms);\n            }\n\n            ms.add(mr);\n        }\n\n        signature = sig;\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean differentiate(final ClassRepr past) {\n        boolean incremental = true;\n\n        for (FieldRepr pastField : past.fields) {\n            if ((pastField.access & (Opcodes.ACC_FINAL | Opcodes.ACC_STATIC)) > 0) {\n                for (FieldRepr presentField : fields) {\n                    if (presentField.name.equals(pastField.name)) {\n                        if (presentField.access != pastField.access ||\n                                (presentField.value != null && pastField.value != null &&\n                                        !presentField.value.equals(pastField.value)\n                                ) ||\n                                (presentField.value != pastField.value && (presentField.value == null || pastField.value == null))\n                                ) {\n                            incremental = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        return incremental;\n    }","id":103962,"modified_method":"public boolean differentiate(final ClassRepr past) {\n        boolean incremental = true;\n\n        for (FieldRepr pastField : past.fields.values()) {\n            if ((pastField.access & (Opcodes.ACC_FINAL | Opcodes.ACC_STATIC)) > 0) {\n                for (FieldRepr presentField : fields.values()) {\n                    if (presentField.name.equals(pastField.name)) {\n                        if (presentField.access != pastField.access ||\n                                (presentField.value != null && pastField.value != null &&\n                                        !presentField.value.equals(pastField.value)\n                                ) ||\n                                (presentField.value != pastField.value && (presentField.value == null || pastField.value == null))\n                                ) {\n                            incremental = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        return incremental;\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void updateClassUsages(final Set<UsageRepr.Usage> s) {\n        superClass.updateClassUsages(s);\n\n        for (TypeRepr.AbstractType t : interfaces) {\n            t.updateClassUsages(s);\n        }\n\n        for (MethodRepr m : methods) {\n            m.updateClassUsages(s);\n        }\n\n        for (FieldRepr f : fields) {\n            f.updateClassUsages(s);\n        }\n    }","id":103963,"modified_method":"public void updateClassUsages(final Set<UsageRepr.Usage> s) {\n        superClass.updateClassUsages(s);\n\n        for (TypeRepr.AbstractType t : interfaces) {\n            t.updateClassUsages(s);\n        }\n\n        for (List<MethodRepr> ms : methods.values()) {\n            for (MethodRepr m : ms)\n                m.updateClassUsages(s);\n        }\n\n        for (FieldRepr f : fields.values()) {\n            f.updateClassUsages(s);\n        }\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Pair<ClassRepr, Set<UsageRepr.Usage>> getResult() {\n            final ClassRepr repr = takeIntoAccount ?\n                    new ClassRepr(fileName, name, signature, superClass, interfaces, nestedClasses.toArray(dummyStrings), fields.toArray(dummyFields), methods.toArray(dummyMethods)) : null;\n\n            if (repr != null) {\n                repr.updateClassUsages(usages);\n            }\n\n            return new Pair<ClassRepr, Set<UsageRepr.Usage>>(repr, usages);\n        }","id":103964,"modified_method":"public Pair<ClassRepr, Set<UsageRepr.Usage>> getResult() {\n            final ClassRepr repr = takeIntoAccount ?\n                    new ClassRepr(fileName, name, signature, superClass, interfaces, nestedClasses, fields, methods) : null;\n\n            if (repr != null) {\n                repr.updateClassUsages(usages);\n            }\n\n            return new Pair<ClassRepr, Set<UsageRepr.Usage>>(repr, usages);\n        }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void main(String[] args) {\n        System.out.println(\"JetBrains.com build server. (C) JetBrains.com, 2010-2011.\\n\");\n\n        final List<String> notes = myOptions.parse(args);\n\n        for (String note : notes) {\n            System.err.println(\"WARNING: \" + note);\n        }\n\n        checkConsistency();\n\n        if (doHelp()) {\n            System.out.println(\"Usage: ??? <options> <project-specifier>\\n\");\n            System.out.println(\"Options are:\");\n            System.out.println(myOptions.memo());\n        }\n\n        final List<String> projects = myOptions.getFree();\n\n        if (projects.isEmpty() && !doHelp()) {\n            System.out.println(\"Nothing to do; use --help or -h option to see the help.\\n\");\n        }\n\n        if (doDebug()) {\n            DotPrinter.setPrintStream(System.out);\n        }\n\n        for (String prj : projects) {\n            boolean saved = false;\n            ProjectWrapper project = null;\n\n            switch (getAction()) {\n                case CLEAN:\n                    System.out.println(\"Cleaning project \\\"\" + prj + \"\\\"\");\n                    project = ProjectWrapper.load(prj, getScript());\n\n                    project.clean();\n                    project.save();\n                    saved = true;\n                    break;\n\n                case REBUILD:\n                    System.out.println(\"Rebuilding project \\\"\" + prj + \"\\\"\");\n                    project = ProjectWrapper.load(prj, getScript());\n                    project.rebuild();\n                    project.save();\n                    saved = true;\n                    break;\n\n                case MAKE:\n                    final Options.Argument make = doMake();\n\n                    if (make instanceof Options.Value) {\n                        final String module = ((Options.Value) make).get();\n\n                        System.out.println(\"Making module \\\"\" + module + \"\\\" in project \\\"\" + prj + \"\\\"\");\n                        project = ProjectWrapper.load(prj, getScript());\n                        project.makeModule(module, doForce(), doTests());\n                        project.save();\n                        saved = true;\n                    } else if (make instanceof Options.Switch) {\n                        System.out.println(\"Making project \\\"\" + prj + \"\\\"\");\n                        project = ProjectWrapper.load(prj, getScript());\n                        project.make(doForce(), doTests());\n                        project.save();\n                        saved = true;\n                    };\n                    break;\n            }\n\n            final Options.Argument inspect = doInspect();\n\n            if (inspect instanceof Options.Switch) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.report();\n                if (doSave()) {\n                    project.save();\n                    saved = true;\n                }\n            } else if (inspect instanceof Options.Value) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.report(((Options.Value) inspect).get());\n                if (doSave()) {\n                    project.save();\n                    saved = true;\n                }\n            }\n\n            if (doSave() && !saved) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.save();\n            }\n        }\n    }","id":103965,"modified_method":"public static void main(String[] args) {\n        System.out.println(\"JetBrains.com build server. (C) JetBrains.com, 2010-2011.\\n\");\n\n        final List<String> notes = myOptions.parse(args);\n\n        for (String note : notes) {\n            System.err.println(\"WARNING: \" + note);\n        }\n\n        checkConsistency();\n\n        if (doHelp()) {\n            System.out.println(\"Usage: ??? <options> <project-specifier>\\n\");\n            System.out.println(\"Options are:\");\n            System.out.println(myOptions.memo());\n        }\n\n        final List<String> projects = myOptions.getFree();\n\n        if (projects.isEmpty() && !doHelp()) {\n            System.out.println(\"Nothing to do; use --help or -h option to see the help.\\n\");\n        }\n\n        if (doDebug()) {\n            DotPrinter.setPrintStream(System.out);\n        }\n\n        for (String prj : projects) {\n            boolean saved = false;\n            ProjectWrapper project = null;\n\n            switch (getAction()) {\n                case CLEAN:\n                    System.out.println(\"Cleaning project \\\"\" + prj + \"\\\"\");\n                    project = ProjectWrapper.load(prj, getScript());\n\n                    project.clean();\n                    project.save();\n                    saved = true;\n                    break;\n\n                case REBUILD:\n                    System.out.println(\"Rebuilding project \\\"\" + prj + \"\\\"\");\n                    project = ProjectWrapper.load(prj, getScript());\n                    project.rebuild();\n                    project.save();\n                    saved = true;\n                    break;\n\n                case MAKE:\n                    final Options.Argument make = doMake();\n\n                    if (make instanceof Options.Value) {\n                        final String module = ((Options.Value) make).get();\n\n                        if (module.equals(\"*\")) {\n                            System.out.println(\"Making all modules in project \\\"\" + prj + \"\\\"\");\n                        } else {\n                            System.out.println(\"Making module \\\"\" + module + \"\\\" in project \\\"\" + prj + \"\\\"\");\n                        }\n\n                        project = ProjectWrapper.load(prj, getScript());\n                        project.makeModule(module, doForce(), doTests());\n                        project.save();\n                        saved = true;\n                    } else if (make instanceof Options.Switch) {\n                        System.out.println(\"Making outdated modules in project \\\"\" + prj + \"\\\"\");\n                        project = ProjectWrapper.load(prj, getScript());\n                        project.make(doForce(), doTests());\n                        project.save();\n                        saved = true;\n                    }\n                    ;\n                    break;\n            }\n\n            final Options.Argument inspect = doInspect();\n\n            if (inspect instanceof Options.Switch) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.report();\n                if (doSave()) {\n                    project.save();\n                    saved = true;\n                }\n            } else if (inspect instanceof Options.Value) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.report(((Options.Value) inspect).get());\n                if (doSave()) {\n                    project.save();\n                    saved = true;\n                }\n            }\n\n            if (doSave() && !saved) {\n                project = ProjectWrapper.load(prj, getScript());\n                project.save();\n            }\n        }\n    }","commit_id":"e1c63801e705056755e36f43ca6adaff09402bec","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n\tpublic void testMySQLMaxValueIncrementer() throws SQLException {\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tgiven(connection.createStatement()).willReturn(statement);\n\t\tgiven(statement.executeUpdate(\"update myseq set seq = last_insert_id(seq + 2)\")).willReturn(1);\n\t\tgiven(statement.executeQuery(\"select last_insert_id()\")).willReturn(resultSet);\n\t\tgiven(resultSet.next()).willReturn(true);\n\t\tgiven(resultSet.getLong(1)).willReturn(2L, 4L);\n\n\t\tMySQLMaxValueIncrementer incrementer = new MySQLMaxValueIncrementer();\n\t\tincrementer.setDataSource(dataSource);\n\t\tincrementer.setIncrementerName(\"myseq\");\n\t\tincrementer.setColumnName(\"seq\");\n\t\tincrementer.setCacheSize(2);\n\t\tincrementer.setPaddingLength(1);\n\t\tincrementer.afterPropertiesSet();\n\n\t\tassertEquals(1, incrementer.nextIntValue());\n\t\tassertEquals(2, incrementer.nextLongValue());\n\t\tassertEquals(\"3\", incrementer.nextStringValue());\n\t\tassertEquals(4, incrementer.nextLongValue());\n\n\t\tverify(resultSet, times(2)).close();\n\t\tverify(statement, times(2)).close();\n\t\tverify(connection, times(2)).close();\n\t}","id":103966,"modified_method":"@Test\n\tpublic void testMySQLMaxValueIncrementer() throws SQLException {\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tgiven(connection.createStatement()).willReturn(statement);\n\t\tgiven(statement.executeQuery(\"select last_insert_id()\")).willReturn(resultSet);\n\t\tgiven(resultSet.next()).willReturn(true);\n\t\tgiven(resultSet.getLong(1)).willReturn(2L, 4L);\n\n\t\tMySQLMaxValueIncrementer incrementer = new MySQLMaxValueIncrementer();\n\t\tincrementer.setDataSource(dataSource);\n\t\tincrementer.setIncrementerName(\"myseq\");\n\t\tincrementer.setColumnName(\"seq\");\n\t\tincrementer.setCacheSize(2);\n\t\tincrementer.setPaddingLength(1);\n\t\tincrementer.afterPropertiesSet();\n\n\t\tassertEquals(1, incrementer.nextIntValue());\n\t\tassertEquals(2, incrementer.nextLongValue());\n\t\tassertEquals(\"3\", incrementer.nextStringValue());\n\t\tassertEquals(4, incrementer.nextLongValue());\n\n\t\tverify(statement, times(2)).executeUpdate(\"update myseq set seq = last_insert_id(seq + 2)\");\n\t\tverify(resultSet, times(2)).close();\n\t\tverify(statement, times(2)).close();\n\t\tverify(connection, times(2)).close();\n\t}","commit_id":"fb92934a7b16024ad2b802f27bde155f388e7821","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void testHsqlMaxValueIncrementer() throws SQLException {\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tgiven(connection.createStatement()).willReturn(statement);\n\t\tgiven(statement.executeUpdate(\"insert into myseq values(null)\")).willReturn(1);\n\t\tgiven(statement.executeQuery(\"select max(identity()) from myseq\")).willReturn(resultSet);\n\t\tgiven(resultSet.next()).willReturn(true);\n\t\tgiven(resultSet.getLong(1)).willReturn(0L, 1L, 2L, 3L, 4L, 5L);\n\t\tgiven(statement.executeUpdate(\"delete from myseq where seq < 2\")).willReturn(1);\n\t\tgiven(statement.executeUpdate(\"delete from myseq where seq < 5\")).willReturn(1);\n\n\t\tHsqlMaxValueIncrementer incrementer = new HsqlMaxValueIncrementer();\n\t\tincrementer.setDataSource(dataSource);\n\t\tincrementer.setIncrementerName(\"myseq\");\n\t\tincrementer.setColumnName(\"seq\");\n\t\tincrementer.setCacheSize(3);\n\t\tincrementer.setPaddingLength(3);\n\t\tincrementer.afterPropertiesSet();\n\n\t\tassertEquals(0, incrementer.nextIntValue());\n\t\tassertEquals(1, incrementer.nextLongValue());\n\t\tassertEquals(\"002\", incrementer.nextStringValue());\n\t\tassertEquals(3, incrementer.nextIntValue());\n\t\tassertEquals(4, incrementer.nextLongValue());\n\t\tverify(resultSet, times(6)).close();\n\t\tverify(statement, times(2)).close();\n\t\tverify(connection, times(2)).close();\n\t}","id":103967,"modified_method":"@Test\n\tpublic void testHsqlMaxValueIncrementer() throws SQLException {\n\t\tgiven(dataSource.getConnection()).willReturn(connection);\n\t\tgiven(connection.createStatement()).willReturn(statement);\n\t\tgiven(statement.executeQuery(\"select max(identity()) from myseq\")).willReturn(resultSet);\n\t\tgiven(resultSet.next()).willReturn(true);\n\t\tgiven(resultSet.getLong(1)).willReturn(0L, 1L, 2L, 3L, 4L, 5L);\n\n\t\tHsqlMaxValueIncrementer incrementer = new HsqlMaxValueIncrementer();\n\t\tincrementer.setDataSource(dataSource);\n\t\tincrementer.setIncrementerName(\"myseq\");\n\t\tincrementer.setColumnName(\"seq\");\n\t\tincrementer.setCacheSize(3);\n\t\tincrementer.setPaddingLength(3);\n\t\tincrementer.afterPropertiesSet();\n\n\t\tassertEquals(0, incrementer.nextIntValue());\n\t\tassertEquals(1, incrementer.nextLongValue());\n\t\tassertEquals(\"002\", incrementer.nextStringValue());\n\t\tassertEquals(3, incrementer.nextIntValue());\n\t\tassertEquals(4, incrementer.nextLongValue());\n\n\t\tverify(statement, times(6)).executeUpdate(\"insert into myseq values(null)\");\n\t\tverify(statement).executeUpdate(\"delete from myseq where seq < 2\");\n\t\tverify(statement).executeUpdate(\"delete from myseq where seq < 5\");\n\t\tverify(resultSet, times(6)).close();\n\t\tverify(statement, times(2)).close();\n\t\tverify(connection, times(2)).close();\n\t}","commit_id":"fb92934a7b16024ad2b802f27bde155f388e7821","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Statement to use to increment the \"sequence\" value. Can be overridden by subclasses.\n\t * @return the SQL statement to use\n\t */\n\tprotected String getIncrementStatement() {\n\t\treturn \"insert into \" + getIncrementerName() + \" values()\";\n\t}","id":103968,"modified_method":"@Override\n\tprotected String getIncrementStatement() {\n\t\treturn \"insert into \" + getIncrementerName() + \" values()\";\n\t}","commit_id":"fb92934a7b16024ad2b802f27bde155f388e7821","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n    Collections.sort(mentions, new MentionComparator());\n  }","id":103969,"modified_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    // Collect mentions\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n    }\n    Collections.sort(mentions, new MentionComparator());\n    // Find representative mention\n    for (CorefMention men : mentions) {\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n  }","commit_id":"dfa8af8861b3494d930659eb2bcf6e2dc79a2d12","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n    Collections.sort(mentions, new MentionComparator());\n  }","id":103970,"modified_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    // Collect mentions\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n    }\n    Collections.sort(mentions, new MentionComparator());\n    // Find representative mention\n    for (CorefMention men : mentions) {\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n  }","commit_id":"bb29d36ed1e1474d954dcd8b447f5a538161cb47","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n    Collections.sort(mentions, new MentionComparator());\n  }","id":103971,"modified_method":"public CorefChain(CorefCluster c, Map<Mention, IntTuple> positions){\n    chainID = c.clusterID;\n    // Collect mentions\n    mentions = new ArrayList<CorefMention>();\n    mentionMap = Generics.newHashMap();\n    CorefMention represents = null;\n    for (Mention m : c.getCorefMentions()) {\n      CorefMention men = new CorefMention(m, positions.get(m));\n      mentions.add(men);\n    }\n    Collections.sort(mentions, new MentionComparator());\n    // Find representative mention\n    for (CorefMention men : mentions) {\n      IntPair position = new IntPair(men.sentNum, men.headIndex);\n      if (!mentionMap.containsKey(position)) mentionMap.put(position, Generics.<CorefMention>newHashSet());\n      mentionMap.get(position).add(men);\n      if (men.moreRepresentativeThan(represents)) {\n        represents = men;\n      }\n    }\n    representative = represents;\n  }","commit_id":"c3c9bfec9592d96a07189ff5aec367ec2b2b98e7","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void addTestsFromResource(String testResourceName, boolean runTransformations) throws Exception\n    {\n        String resourceName = \"/\" + testResourceName + \".test\";\n        Data data = readTestData(getClass().getResourceAsStream(resourceName), resourceName);\n\n        // Create a test case for each input and for each expectation so that each test is executed separately\n        // and reported separately by the JUnit test runner.\n        for (String parserId : data.inputs.keySet()) {\n            for (Syntax targetSyntax : data.expectations.keySet()) {\n                PrintRenderer renderer = this.rendererFactory.createRenderer(targetSyntax, new DefaultWikiPrinter());\n                RenderingTestCase testCase =\n                    new RenderingTestCase(computeTestName(testResourceName, parserId, renderer), data.inputs\n                        .get(parserId), data.expectations.get(targetSyntax), parserId, renderer, runTransformations);\n                addTest(testCase);\n            }\n        }\n    }","id":103972,"modified_method":"public void addTestsFromResource(String testResourceName, boolean runTransformations) throws Exception\n    {\n        String resourceName = \"/\" + testResourceName + \".test\";\n        Data data = readTestData(getClass().getResourceAsStream(resourceName), resourceName);\n\n        // Create a test case for each input and for each expectation so that each test is executed separately\n        // and reported separately by the JUnit test runner.\n        for (Map.Entry<String, String> entry : data.inputs.entrySet()) {\n            for (Syntax targetSyntax : data.expectations.keySet()) {\n                String parserId = entry.getKey();\n                String input = entry.getValue();\n\n                PrintRenderer renderer = this.rendererFactory.createRenderer(targetSyntax, new DefaultWikiPrinter());\n\n                if (parserId.equals(\"xhtml/1.0\") && !input.startsWith(\"<?xml\") && !input.startsWith(\"<!DOCTYPE\")) {\n                    input =\n                        \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n                            + \"<html>\" + input + \"<\/html>\";\n                }\n\n                RenderingTestCase testCase =\n                    new RenderingTestCase(computeTestName(testResourceName, parserId, renderer), input,\n                        data.expectations.get(targetSyntax), parserId, renderer, runTransformations);\n                addTest(testCase);\n            }\n        }\n    }","commit_id":"63814afc0b0afe89e7ba4c01eb941f6fc70eb954","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see PrintRenderer#endList(org.xwiki.rendering.listener.ListType, java.util.Map)\n     */\n    @Override\n    public void endList(ListType listType, Map<String, String> parameters)\n    {\n        this.listStyle.setLength(this.listStyle.length() - 1);\n    }","id":103973,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see PrintRenderer#endList(org.xwiki.rendering.listener.ListType, java.util.Map)\n     */\n    @Override\n    public void endList(ListType listType, Map<String, String> parameters)\n    {\n        this.listStyle.setLength(this.listStyle.length() - 1);\n\n        // Ensure that any not printed characters are flushed.\n        // TODO: Fix this better by introducing a state listener to handle escapes\n        getXWikiPrinter().flush();\n    }","commit_id":"63814afc0b0afe89e7ba4c01eb941f6fc70eb954","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void escape(StringBuffer accumulatedBuffer, XWikiSyntaxListenerChain listenerChain, boolean escapeLastChar,\n        Pattern escapeFirstIfMatching)\n    {\n        BlockStateChainingListener blockStateListener = listenerChain.getBlockStateChainingListener();\n        TextOnNewLineStateChainingListener textStateListener = listenerChain.getTextOnNewLineStateChainingListener();\n        LookaheadChainingListener lookaheadListener = listenerChain.getLookaheadChainingListener();\n        DocumentStateChainingListener documentStateListener = listenerChain.getDocumentStateChainingListener();\n\n        // Escape tilde symbol (i.e. the escape character).\n        // Note: This needs to be the first replacement since other replacements below also use the tilde symbol\n        replaceAll(accumulatedBuffer, ESCAPE_CHAR, ESCAPE_CHAR + ESCAPE_CHAR);\n\n        // When in a paragraph we need to escape symbols that are at beginning of lines and that could be confused\n        // with list items, headers or tables.\n        if (blockStateListener.isInParagraph() && textStateListener.isTextOnNewLine()) {\n\n            // Look for list pattern at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(LIST_PATTERN, accumulatedBuffer);\n\n            // Look for header pattern at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(HEADER_PATTERN, accumulatedBuffer);\n\n            // Look for table character patterns at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(TABLE_PATTERN, accumulatedBuffer);\n        }\n\n        // Escape table characters\n        if (blockStateListener.isInTable()) {\n            replaceAll(accumulatedBuffer, \"|\", ESCAPE_CHAR + \"|\");\n            replaceAll(accumulatedBuffer, \"!!\", ESCAPE_CHAR + \"!!\");\n        }\n\n        if (escapeFirstIfMatching != null) {\n            escapeFirstMatchedCharacter(escapeFirstIfMatching, accumulatedBuffer);\n        }\n\n        // When in a header we need to escape \"=\" symbols since otherwise they would be confused for end of section\n        // characters.\n        if (blockStateListener.isInHeader()) {\n            replaceAll(accumulatedBuffer, \"=\", ESCAPE_CHAR + \"=\");\n        }\n\n        // Escape verbatim \"{{{\"\n        replaceAll(accumulatedBuffer, \"{{{\", ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\");\n\n        // Escape \"{{\"\n        replaceAll(accumulatedBuffer, \"{{\", ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\");\n\n        // Escape embedded document\n        replaceAll(accumulatedBuffer, \"(((\", ESCAPE_CHAR + \"(\" + ESCAPE_CHAR + \"(\" + ESCAPE_CHAR + \"(\");\n        replaceAll(accumulatedBuffer, \")))\", ESCAPE_CHAR + \")\" + ESCAPE_CHAR + \")\" + ESCAPE_CHAR + \")\");\n\n        // Escape reserved keywords\n        Matcher matcher = DOUBLE_CHARS_PATTERN.matcher(accumulatedBuffer.toString());\n        for (int i = 0; matcher.find(); i = i + 2) {\n            accumulatedBuffer.replace(matcher.start() + i, matcher.end() + i, ESCAPE_CHAR + matcher.group().charAt(0)\n                + ESCAPE_CHAR + matcher.group().charAt(1));\n        }\n\n        // Escape \":\" in \"image:something\", \"attach:something\" and \"mailto:something\"\n        // Note: even though there are some restriction in the URI specification as to what character is valid after\n        // the \":\" character following the scheme we only check for characters greater than the space symbol for\n        // simplicity.\n        escapeURI(accumulatedBuffer, \"image:\");\n        escapeURI(accumulatedBuffer, \"attach:\");\n        escapeURI(accumulatedBuffer, \"mailto:\");\n\n        // Escape ( when it's the last character of a embedded document\n        // Escape ) when it's just before an embedded document\n        if (documentStateListener.getDocumentDepth() > 1\n            && lookaheadListener.getNextEvent() != null\n            && ((lookaheadListener.getNextEvent().eventType == EventType.END_DOCUMENT && accumulatedBuffer\n                .charAt(accumulatedBuffer.length() - 1) == ')') || (lookaheadListener.getNextEvent().eventType == EventType.BEGIN_DOCUMENT && accumulatedBuffer\n                .charAt(accumulatedBuffer.length() - 1) == '('))) {\n            escapeLastChar = true;\n        }\n\n        // Escape last character if we're told to do so. This is to handle cases such as:\n        // - onWord(\"hello:\") followed by onFormat(ITALIC) which would lead to \"hello://\" if the \":\" wasn't escaped\n        // - onWord(\"{\") followed by onMacro() which would lead to \"{{{\" if the \"{\" wasn't escaped\n        if (escapeLastChar) {\n            accumulatedBuffer.replace(accumulatedBuffer.length() - 1, accumulatedBuffer.length(), ESCAPE_CHAR\n                + accumulatedBuffer.charAt(accumulatedBuffer.length() - 1));\n        }\n\n        // Escape \"[[\" if not in a link.\n        if (!blockStateListener.isInLink()) {\n            replaceAll(accumulatedBuffer, \"[[\", ESCAPE_CHAR + \"[\" + ESCAPE_CHAR + \"[\");\n        } else {\n            // This need to be done after anything else because link label add another level of escaping (escaped as\n            // link label and then escaped as wiki content).\n            replaceAll(accumulatedBuffer, ESCAPE_CHAR, ESCAPE_CHAR + ESCAPE_CHAR);\n            replaceAll(accumulatedBuffer, \"]]\", ESCAPE_CHAR + \"]\" + ESCAPE_CHAR + \"]\");\n            replaceAll(accumulatedBuffer, \">>\", ESCAPE_CHAR + \">\" + ESCAPE_CHAR + \">\");\n            replaceAll(accumulatedBuffer, \"||\", ESCAPE_CHAR + \"|\" + ESCAPE_CHAR + \"|\");\n        }\n    }","id":103974,"modified_method":"public void escape(StringBuffer accumulatedBuffer, XWikiSyntaxListenerChain listenerChain, boolean escapeLastChar,\n        Pattern escapeFirstIfMatching)\n    {\n        BlockStateChainingListener blockStateListener = listenerChain.getBlockStateChainingListener();\n        TextOnNewLineStateChainingListener textStateListener = listenerChain.getTextOnNewLineStateChainingListener();\n        LookaheadChainingListener lookaheadListener = listenerChain.getLookaheadChainingListener();\n        DocumentStateChainingListener documentStateListener = listenerChain.getDocumentStateChainingListener();\n\n        // Escape tilde symbol (i.e. the escape character).\n        // Note: This needs to be the first replacement since other replacements below also use the tilde symbol\n        replaceAll(accumulatedBuffer, ESCAPE_CHAR, ESCAPE_CHAR + ESCAPE_CHAR);\n\n        // When in a paragraph we need to escape symbols that are at beginning of lines and that could be confused\n        // with list items, headers or tables.\n        if (blockStateListener.isInParagraph() && textStateListener.isTextOnNewLine()) {\n\n            // Look for list pattern at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(LIST_PATTERN, accumulatedBuffer);\n\n            // Look for header pattern at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(HEADER_PATTERN, accumulatedBuffer);\n\n            // Look for table character patterns at beginning of line and escape the first character only (it's enough)\n            escapeFirstMatchedCharacter(TABLE_PATTERN, accumulatedBuffer);\n        }\n\n        // Escape table characters\n        if (blockStateListener.isInTable()) {\n            replaceAll(accumulatedBuffer, \"|\", ESCAPE_CHAR + \"|\");\n            replaceAll(accumulatedBuffer, \"!!\", ESCAPE_CHAR + \"!!\");\n        }\n\n        if (escapeFirstIfMatching != null) {\n            escapeFirstMatchedCharacter(escapeFirstIfMatching, accumulatedBuffer);\n        }\n\n        // When in a header we need to escape \"=\" symbols since otherwise they would be confused for end of section\n        // characters.\n        if (blockStateListener.isInHeader()) {\n            replaceAll(accumulatedBuffer, \"=\", ESCAPE_CHAR + \"=\");\n        }\n\n        // Escape verbatim \"{{{\"\n        replaceAll(accumulatedBuffer, \"{{{\", ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\");\n\n        // Escape \"{{\"\n        replaceAll(accumulatedBuffer, \"{{\", ESCAPE_CHAR + \"{\" + ESCAPE_CHAR + \"{\");\n\n        // Escape embedded document\n        replaceAll(accumulatedBuffer, \"(((\", ESCAPE_CHAR + \"(\" + ESCAPE_CHAR + \"(\" + ESCAPE_CHAR + \"(\");\n        replaceAll(accumulatedBuffer, \")))\", ESCAPE_CHAR + \")\" + ESCAPE_CHAR + \")\" + ESCAPE_CHAR + \")\");\n\n        // Escape reserved keywords\n        Matcher matcher = DOUBLE_CHARS_PATTERN.matcher(accumulatedBuffer.toString());\n        for (int i = 0; matcher.find(); i = i + 2) {\n            accumulatedBuffer.replace(matcher.start() + i, matcher.end() + i, ESCAPE_CHAR + matcher.group().charAt(0)\n                + ESCAPE_CHAR + matcher.group().charAt(1));\n        }\n\n        // Escape \":\" in \"image:something\", \"attach:something\" and \"mailto:something\"\n        // Note: even though there are some restriction in the URI specification as to what character is valid after\n        // the \":\" character following the scheme we only check for characters greater than the space symbol for\n        // simplicity.\n        escapeURI(accumulatedBuffer, \"image:\");\n        escapeURI(accumulatedBuffer, \"attach:\");\n        escapeURI(accumulatedBuffer, \"mailto:\");\n\n        if (documentStateListener.getDocumentDepth() > 1\n            && accumulatedBuffer.charAt(accumulatedBuffer.length() - 1) == ')'\n            && lookaheadListener.getNextEvent() != null\n            && lookaheadListener.getNextEvent().eventType == EventType.END_DOCUMENT) {\n            escapeLastChar = true;\n        }\n\n        // Escape last character if we're told to do so. This is to handle cases such as:\n        // - onWord(\"hello:\") followed by onFormat(ITALIC) which would lead to \"hello://\" if the \":\" wasn't escaped\n        // - onWord(\"{\") followed by onMacro() which would lead to \"{{{\" if the \"{\" wasn't escaped\n        if (escapeLastChar) {\n            accumulatedBuffer.replace(accumulatedBuffer.length() - 1, accumulatedBuffer.length(), ESCAPE_CHAR\n                + accumulatedBuffer.charAt(accumulatedBuffer.length() - 1));\n        }\n\n        // Escape \"[[\" if not in a link.\n        if (!blockStateListener.isInLink()) {\n            replaceAll(accumulatedBuffer, \"[[\", ESCAPE_CHAR + \"[\" + ESCAPE_CHAR + \"[\");\n        } else {\n            // This need to be done after anything else because link label add another level of escaping (escaped as\n            // link label and then escaped as wiki content).\n            replaceAll(accumulatedBuffer, ESCAPE_CHAR, ESCAPE_CHAR + ESCAPE_CHAR);\n            replaceAll(accumulatedBuffer, \"]]\", ESCAPE_CHAR + \"]\" + ESCAPE_CHAR + \"]\");\n            replaceAll(accumulatedBuffer, \">>\", ESCAPE_CHAR + \">\" + ESCAPE_CHAR + \">\");\n            replaceAll(accumulatedBuffer, \"||\", ESCAPE_CHAR + \"|\" + ESCAPE_CHAR + \"|\");\n        }\n    }","commit_id":"63814afc0b0afe89e7ba4c01eb941f6fc70eb954","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public GameState(final GameState state) {\n\t\tthis.players = state.players.copy();\n\t\tthis.playerList = state.playerList.copy();\n\t\tthis.activePlayerId = state.activePlayerId;\n\t\tthis.priorityPlayerId = state.priorityPlayerId;\n\t\tthis.turn = state.turn.copy();\n\t\tthis.stack = state.stack.copy();\n\t\tthis.command = state.command.copy();\n\t\tthis.exile = state.exile.copy();\n\t\tthis.revealed = state.revealed.copy();\n\t\tfor (UUID key: state.lookedAt.keySet()) {\n\t\t\tlookedAt.put(key, state.lookedAt.get(key));\n\t\t}\n\t\tthis.battlefield = state.battlefield.copy();\n\t\tthis.turnNum = state.turnNum;\n\t\tthis.gameOver = state.gameOver;\n\t\tthis.effects = state.effects.copy();\n\t\tthis.triggers = state.triggers.copy();\n\t\tthis.delayed = state.delayed.copy();\n\t\tthis.specialActions = state.specialActions.copy();\n\t\tthis.combat = state.combat.copy();\n\t\tthis.turnMods = state.turnMods.copy();\n\t\tthis.watchers = state.watchers.copy();\n\t\tfor (String key: state.values.keySet()) {\n\t\t\tvalues.put(key, state.values.get(key));\n\t\t\t//TODO: might have to change value to Copyable\n\t\t}\n\t\tfor (UUID key: state.zones.keySet()) {\n\t\t\tzones.put(key, state.zones.get(key));\n\t\t}\n\t}","id":103975,"modified_method":"public GameState(final GameState state) {\n\t\tthis.players = state.players.copy();\n\t\tthis.playerList = state.playerList.copy();\n\t\tthis.activePlayerId = state.activePlayerId;\n\t\tthis.priorityPlayerId = state.priorityPlayerId;\n\t\tthis.turn = state.turn.copy();\n\t\tthis.stack = state.stack.copy();\n\t\tthis.command = state.command.copy();\n\t\tthis.exile = state.exile.copy();\n\t\tthis.revealed = state.revealed.copy();\n\t\tfor (Map.Entry<UUID, LookedAt> entry: state.lookedAt.entrySet()) {\n\t\t\tlookedAt.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\tfor (UUID key: state.lookedAt.keySet()) {\n\t\t\tlookedAt.put(key, state.lookedAt.get(key));\n\t\t}\n\t\tthis.battlefield = state.battlefield.copy();\n\t\tthis.turnNum = state.turnNum;\n\t\tthis.gameOver = state.gameOver;\n\t\tthis.effects = state.effects.copy();\n\t\tthis.triggers = state.triggers.copy();\n\t\tthis.delayed = state.delayed.copy();\n\t\tthis.specialActions = state.specialActions.copy();\n\t\tthis.combat = state.combat.copy();\n\t\tthis.turnMods = state.turnMods.copy();\n\t\tthis.watchers = state.watchers.copy();\n\t\tfor (Map.Entry<String, Object> entry : state.values.entrySet()) {\n\t\t\tvalues.put(entry.getKey(), entry.getValue());\n\t\t\t//TODO: might have to change value to Copyable\n\t\t}\n\t\tfor (Map.Entry<UUID, Zone> entry: state.zones.entrySet()) {\n\t\t\tzones.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}","commit_id":"4a125393460238b7ae678f771c8489c2c7cedc70","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n  public void loadState(final State state) {\n    myState = state;\n  }","id":103976,"modified_method":"@Override\n  public void loadState(State state) {\n    myState = state != null ? state : new State();\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public DependenciesAnalyzeManager(final Project project) {\n    myProject = project;\n    StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable() {\n      @Override\n      public void run() {\n        ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(myProject);\n        ToolWindow toolWindow = toolWindowManager.registerToolWindow(ToolWindowId.MODULES_DEPENDENCIES,\n                                                                     true,\n                                                                     ToolWindowAnchor.RIGHT,\n                                                                     project);\n        myContentManager = toolWindow.getContentManager();\n        toolWindow.setIcon(AllIcons.Toolwindows.ToolWindowModuleDependencies);\n        new ContentManagerWatcher(toolWindow, myContentManager);\n      }\n    });\n  }","id":103977,"modified_method":"public DependenciesAnalyzeManager(final Project project) {\n    myProject = project;\n    StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable() {\n      @Override\n      public void run() {\n        ToolWindowManager manager = ToolWindowManager.getInstance(myProject);\n        ToolWindow toolWindow = manager.registerToolWindow(ToolWindowId.MODULES_DEPENDENCIES, true, ToolWindowAnchor.RIGHT, project);\n        myContentManager = toolWindow.getContentManager();\n        toolWindow.setIcon(AllIcons.Toolwindows.ToolWindowModuleDependencies);\n        new ContentManagerWatcher(toolWindow, myContentManager);\n      }\n    });\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public boolean canNavigate() {\n      return myModule != null && !myModule.isDisposed();\n    }","id":103978,"modified_method":"@Override\n    public boolean canNavigate() {\n      return !myModule.isDisposed();\n    }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private JComponent createNorthPanel(){\n    DefaultActionGroup group = new DefaultActionGroup();\n\n    group.add(new AnAction(CommonBundle.message(\"action.close\"), AnalysisScopeBundle.message(\"action.close.modules.dependencies.description\"),\n                           AllIcons.Actions.Cancel){\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        DependenciesAnalyzeManager.getInstance(myProject).closeContent(myContent);\n      }\n    });\n\n    appendDependenciesAction(group);\n\n    group.add(new ToggleAction(AnalysisScopeBundle.message(\"action.module.dependencies.direction\"), \"\", isForwardDirection() ? AllIcons.Actions.SortAsc\n                                                                                                                             : AllIcons.Actions.SortDesc){\n      @Override\n      public boolean isSelected(AnActionEvent e) {\n        return isForwardDirection();\n      }\n\n      @Override\n      public void setSelected(AnActionEvent e, boolean state) {\n        PropertiesComponent.getInstance(myProject).setValue(DIRECTION, String.valueOf(state));\n        initLeftTreeModel();\n      }\n\n      @Override\n      public void update(final AnActionEvent e) {\n        e.getPresentation().setIcon(isForwardDirection() ? AllIcons.Actions.SortAsc : AllIcons.Actions.SortDesc);\n      }\n    });\n\n    group.add(new ContextHelpAction(ourHelpID));\n\n    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true);\n    final JPanel panel = new JPanel(new BorderLayout());\n    panel.add(toolbar.getComponent(), BorderLayout.NORTH);\n    panel.add(myPathField, BorderLayout.SOUTH);\n    myPathField.setEditable(false);\n    return panel;\n  }","id":103979,"modified_method":"private JComponent createNorthPanel() {\n    DefaultActionGroup group = new DefaultActionGroup();\n\n    group.add(new AnAction(CommonBundle.message(\"action.close\"), null, AllIcons.Actions.Cancel) {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        DependenciesAnalyzeManager.getInstance(myProject).closeContent(myContent);\n      }\n    });\n\n    final AnAction analyzeDepsAction = ActionManager.getInstance().getAction(IdeActions.ACTION_ANALYZE_DEPENDENCIES);\n    group.add(new AnAction(analyzeDepsAction.getTemplatePresentation().getText(), null, AllIcons.Toolwindows.ToolWindowInspection) {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        analyzeDepsAction.actionPerformed(e);\n      }\n\n      @Override\n      public void update(AnActionEvent e) {\n        analyzeDepsAction.update(e);\n      }\n    });\n\n    group.add(new ToggleAction(AnalysisScopeBundle.message(\"action.module.dependencies.direction\")) {\n      @Override\n      public boolean isSelected(AnActionEvent e) {\n        return !myState.forwardDirection;\n      }\n\n      @Override\n      public void setSelected(AnActionEvent e, boolean state) {\n        myState.forwardDirection = !state;\n        updateLeftTree();\n      }\n\n      @Override\n      public void update(@NotNull AnActionEvent e) {\n        e.getPresentation().setIcon(myState.forwardDirection ? AllIcons.Hierarchy.Subtypes : AllIcons.Hierarchy.Supertypes);\n        super.update(e);\n      }\n    });\n\n    group.add(new ToggleAction(AnalysisScopeBundle.message(\"action.module.dependencies.tests\"), null, AllIcons.Modules.TestSourceFolder) {\n      @Override\n      public boolean isSelected(AnActionEvent e) {\n        return myState.includeTests;\n      }\n\n      @Override\n      public void setSelected(AnActionEvent e, boolean state) {\n        myState.includeTests = state;\n        updateModuleGraph();\n        updateLeftTree();\n      }\n    });\n\n    group.add(new ContextHelpAction(HELP_ID));\n\n    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true);\n    JPanel panel = new JPanel(new BorderLayout());\n    panel.add(toolbar.getComponent(), BorderLayout.WEST);\n    panel.add(myPathField, BorderLayout.CENTER);\n    return panel;\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void buildRightTree(Module module){\n    final DefaultMutableTreeNode root = (DefaultMutableTreeNode)myRightTreeModel.getRoot();\n    root.removeAllChildren();\n    final Set<List<Module>> cycles = GraphAlgorithms.getInstance().findCycles(myModulesGraph, module);\n    int index = 1;\n    for (List<Module> modules : cycles) {\n      final DefaultMutableTreeNode cycle = new DefaultMutableTreeNode(\n        AnalysisScopeBundle.message(\"module.dependencies.cycle.node.text\", Integer.toString(index++).toUpperCase()));\n      root.add(cycle);\n      cycle.add(new DefaultMutableTreeNode(new MyUserObject(false, module)));\n      for (Module moduleInCycle : modules) {\n        cycle.add(new DefaultMutableTreeNode(new MyUserObject(false, moduleInCycle)));\n      }\n    }\n    ((DefaultTreeModel)myRightTree.getModel()).reload();\n    TreeUtil.expandAll(myRightTree);\n  }","id":103980,"modified_method":"private void updateRightTree(Module module) {\n    DefaultMutableTreeNode root = (DefaultMutableTreeNode)myRightTree.getModel().getRoot();\n    root.removeAllChildren();\n\n    Set<List<Module>> cycles = GraphAlgorithms.getInstance().findCycles(myModuleGraph, module);\n    int index = 1;\n    for (List<Module> modules : cycles) {\n      DefaultMutableTreeNode cycle = new DefaultMutableTreeNode(AnalysisScopeBundle.message(\"module.dependencies.cycle.node.text\", index++));\n      root.add(cycle);\n      cycle.add(new DefaultMutableTreeNode(new MyUserObject(false, module)));\n      for (Module moduleInCycle : modules) {\n        cycle.add(new DefaultMutableTreeNode(new MyUserObject(false, moduleInCycle)));\n      }\n    }\n\n    ((DefaultTreeModel)myRightTree.getModel()).reload();\n    TreeUtil.expandAll(myRightTree);\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void initTree(Tree tree, boolean isRightTree) {\n    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    tree.setCellRenderer(new MyTreeCellRenderer());\n    tree.setRootVisible(false);\n    tree.setShowsRootHandles(true);\n    UIUtil.setLineStyleAngled(tree);\n\n    TreeUtil.installActions(tree);\n    new TreeSpeedSearch(tree, new Convertor<TreePath, String>() {\n      @Override\n      public String convert(TreePath o) {\n        return o.getLastPathComponent().toString();\n      }\n    }, true);\n    PopupHandler.installUnknownPopupHandler(tree, createTreePopupActions(isRightTree, tree), ActionManager.getInstance());\n  }","id":103981,"modified_method":"private static void installTreeActions(Tree tree, boolean enableExpandAll) {\n    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    tree.setCellRenderer(NODE_RENDERER);\n    tree.setRootVisible(false);\n    tree.setShowsRootHandles(true);\n    UIUtil.setLineStyleAngled(tree);\n\n    TreeUtil.installActions(tree);\n\n    new TreeSpeedSearch(tree, new Convertor<TreePath, String>() {\n      @Override\n      public String convert(TreePath o) {\n        return o.getLastPathComponent().toString();\n      }\n    }, true);\n\n    DefaultActionGroup group = new DefaultActionGroup();\n    CommonActionsManager commonActionManager = CommonActionsManager.getInstance();\n    ActionManager globalActionManager = ActionManager.getInstance();\n\n    TreeExpander treeExpander = new MyTreeExpander(tree, enableExpandAll);\n    group.add(commonActionManager.createExpandAllAction(treeExpander, tree));\n    group.add(commonActionManager.createCollapseAllAction(treeExpander, tree));\n    group.add(globalActionManager.getAction(IdeActions.ACTION_EDIT_SOURCE));\n    group.add(Separator.getInstance());\n    group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_DEPENDENCIES));\n    group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_BACK_DEPENDENCIES));\n    group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_CYCLIC_DEPENDENCIES));\n    group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_MODULE_DEPENDENCIES));\n\n    PopupHandler.installUnknownPopupHandler(tree, group, ActionManager.getInstance());\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public String getNavigateActionText(boolean focusEditor) {\n      return \"Open Module Settings\";\n    }","id":103982,"modified_method":"@Override\n    public String getNavigateActionText(boolean focusEditor) {\n      return ActionsBundle.message(\"action.ModuleSettings.navigate\");\n    }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ModulesDependenciesPanel(final Project project, final Module[] modules) {\n    super(new BorderLayout());\n    myProject = project;\n    myModules = modules;\n\n    //noinspection HardCodedStringLiteral\n    myRightTreeModel = new DefaultTreeModel(new DefaultMutableTreeNode(\"Root\"));\n    myRightTree = new Tree(myRightTreeModel);\n    initTree(myRightTree, true);\n\n    initLeftTree();\n\n    mySplitter = new Splitter();\n    mySplitter.setFirstComponent(new MyTreePanel(myLeftTree, myProject));\n    mySplitter.setSecondComponent(new MyTreePanel(myRightTree, myProject));\n\n    setSplitterProportion();\n    add(mySplitter, BorderLayout.CENTER);\n    add(createNorthPanel(), BorderLayout.NORTH);\n\n    project.getMessageBus().connect(this).subscribe(ProjectTopics.PROJECT_ROOTS, this);\n  }","id":103983,"modified_method":"public ModulesDependenciesPanel(@NotNull Project project, @Nullable Module[] modules) {\n    super(new BorderLayout());\n\n    myProject = project;\n    myModules = modules != null ? modules : ModuleManager.getInstance(project).getModules();\n    myState = DependenciesAnalyzeManager.getInstance(project).getState();\n    updateModuleGraph();\n\n    myLeftTree = new Tree(new DefaultTreeModel(new DefaultMutableTreeNode(\"Root\")));\n    installLeftTreeListeners();\n    installTreeActions(myLeftTree, false);\n\n    myRightTree = new Tree(new DefaultTreeModel(new DefaultMutableTreeNode(\"Root\")));\n    installTreeActions(myRightTree, true);\n\n    mySplitter = new Splitter();\n    mySplitter.setFirstComponent(new MyTreePanel(myLeftTree, myProject));\n    mySplitter.setSecondComponent(new MyTreePanel(myRightTree, myProject));\n    add(mySplitter, BorderLayout.CENTER);\n\n    myPathField = new JTextField();\n    myPathField.setEditable(false);\n    add(createNorthPanel(), BorderLayout.NORTH);\n\n    project.getMessageBus().connect(this).subscribe(ProjectTopics.PROJECT_ROOTS, new ModuleRootAdapter() {\n      @Override\n      public void rootsChanged(ModuleRootEvent event) {\n        updateModuleGraph();\n        updateSplitterProportion();\n        updateLeftTree();\n      }\n    });\n\n    updateSplitterProportion();\n    updateLeftTree();\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean equals(Object object) {\n      return object instanceof MyUserObject && myModule.equals(((MyUserObject)object).getModule());\n    }","id":103984,"modified_method":"@Override\n    public boolean equals(Object o) {\n      return o == this || o instanceof MyUserObject && myModule.equals(((MyUserObject)o).myModule);\n    }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void initLeftTree(){\n    //noinspection HardCodedStringLiteral\n    final DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"Root\");\n    myLeftTreeModel = new DefaultTreeModel(root);\n    initLeftTreeModel();\n    myLeftTree = new Tree(myLeftTreeModel);\n    initTree(myLeftTree, false);\n\n    myLeftTree.addTreeExpansionListener(new TreeExpansionListener() {\n      @Override\n      public void treeCollapsed(TreeExpansionEvent event) {\n      }\n\n      @Override\n      public void treeExpanded(TreeExpansionEvent event) {\n        final DefaultMutableTreeNode expandedNode = (DefaultMutableTreeNode)event.getPath().getLastPathComponent();\n        for(int i = 0; i < expandedNode.getChildCount(); i++){\n          DefaultMutableTreeNode child = (DefaultMutableTreeNode)expandedNode.getChildAt(i);\n          if (child.getChildCount() == 0){\n            Module module = ((MyUserObject)child.getUserObject()).getModule();\n            final Iterator<Module> out = myModulesGraph.getOut(module);\n            while (out.hasNext()) {\n              final Module nextModule = out.next();\n              child.add(new DefaultMutableTreeNode(new MyUserObject(false, nextModule)));\n            }\n            sortSubTree(child);\n          }\n        }\n      }\n    });\n\n    myLeftTree.addTreeSelectionListener(new TreeSelectionListener() {\n      @Override\n      public void valueChanged(TreeSelectionEvent e) {\n        final TreePath selectionPath = myLeftTree.getSelectionPath();\n        if (selectionPath != null) {\n\n          myPathField.setText(StringUtil.join(selectionPath.getPath(), new Function<Object, String>() {\n            @Override\n            public String fun(Object o) {\n              final Object userObject = ((DefaultMutableTreeNode)o).getUserObject();\n              if (userObject instanceof MyUserObject) {\n                return ((MyUserObject)userObject).getModule().getName();\n              }\n              return \"\";\n            }\n          }, \":\"));\n\n          final DefaultMutableTreeNode selection = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n          if (selection != null){\n            TreeUtil.traverseDepth(selection, new TreeUtil.Traverse() {\n              @Override\n              public boolean accept(Object node) {\n                DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)node;\n                if (treeNode.getUserObject() instanceof MyUserObject){\n                  ((MyUserObject)treeNode.getUserObject()).setInCycle(false);\n                }\n                return true;\n              }\n            });\n            selectCycleUpward(selection);\n            buildRightTree(((MyUserObject)selection.getUserObject()).getModule());\n          }\n        }\n      }\n    });\n    TreeUtil.selectFirstNode(myLeftTree);\n  }","id":103985,"modified_method":"private void updateLeftTree() {\n    final DefaultMutableTreeNode root = (DefaultMutableTreeNode)myLeftTree.getModel().getRoot();\n    root.removeAllChildren();\n\n    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() {\n      @Override\n      public void run() {\n        for (Module module : myModules) {\n          if (module.isDisposed()) continue;\n          ProgressManager.progress(AnalysisScopeBundle.message(\"update.module.tree.progress.text\", module.getName()));\n\n          DefaultMutableTreeNode moduleNode = new DefaultMutableTreeNode(new MyUserObject(isInCycle(module), module));\n          root.add(moduleNode);\n          for (Module dependency : getModuleDependencies(module)) {\n            moduleNode.add(new DefaultMutableTreeNode(new MyUserObject(isInCycle(dependency), dependency)));\n          }\n        }\n      }\n    }, AnalysisScopeBundle.message(\"update.module.tree.progress.title\"), true, myProject);\n\n    TreeUtil.sort(root, NODE_COMPARATOR);\n    ((DefaultTreeModel)myLeftTree.getModel()).reload();\n    TreeUtil.selectFirstNode(myLeftTree);\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void setSplitterProportion() {\n    if (mySplitter == null){\n      return;\n    }\n    myModulesGraph = buildGraph();\n    DFSTBuilder<Module> builder = new DFSTBuilder<Module>(myModulesGraph);\n    if (builder.isAcyclic()){\n      mySplitter.setProportion(1.f);\n    } else {\n      mySplitter.setProportion(0.5f);\n    }\n  }","id":103986,"modified_method":"private void updateSplitterProportion() {\n    DFSTBuilder<Module> builder = new DFSTBuilder<Module>(myModuleGraph);\n    mySplitter.setProportion(builder.isAcyclic() ? 1.0f : 0.6f);\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public Object getData(String dataId) {\n      if (CommonDataKeys.PROJECT.is(dataId)){\n        return myProject;\n      }\n      if (LangDataKeys.MODULE_CONTEXT.is(dataId)){\n        final TreePath selectionPath = myTree.getLeadSelectionPath();\n        if (selectionPath != null && selectionPath.getLastPathComponent() instanceof DefaultMutableTreeNode){\n          DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n          if (node.getUserObject() instanceof MyUserObject){\n            return ((MyUserObject)node.getUserObject()).getModule();\n          }\n        }\n      }\n      if (PlatformDataKeys.HELP_ID.is(dataId)) {\n        return ourHelpID;\n      }\n      if (CommonDataKeys.NAVIGATABLE.is(dataId)) {\n        final TreePath selectionPath = myTree.getLeadSelectionPath();\n        if (selectionPath != null && selectionPath.getLastPathComponent() instanceof DefaultMutableTreeNode){\n          DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n          if (node.getUserObject() instanceof MyUserObject){\n            return node.getUserObject();\n          }\n        }\n      }\n      return null;\n    }","id":103987,"modified_method":"@Override\n    public Object getData(String dataId) {\n      if (CommonDataKeys.PROJECT.is(dataId)) {\n        return myProject;\n      }\n      if (LangDataKeys.MODULE_CONTEXT.is(dataId)) {\n        TreePath selectionPath = myTree.getLeadSelectionPath();\n        if (selectionPath != null && selectionPath.getLastPathComponent() instanceof DefaultMutableTreeNode) {\n          DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n          if (node.getUserObject() instanceof MyUserObject) {\n            return ((MyUserObject)node.getUserObject()).myModule;\n          }\n        }\n      }\n      if (PlatformDataKeys.HELP_ID.is(dataId)) {\n        return HELP_ID;\n      }\n      if (CommonDataKeys.NAVIGATABLE.is(dataId)) {\n        TreePath selectionPath = myTree.getLeadSelectionPath();\n        if (selectionPath != null && selectionPath.getLastPathComponent() instanceof DefaultMutableTreeNode) {\n          DefaultMutableTreeNode node = (DefaultMutableTreeNode)selectionPath.getLastPathComponent();\n          if (node.getUserObject() instanceof MyUserObject) {\n            return node.getUserObject();\n          }\n        }\n      }\n      return null;\n    }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(AnActionEvent e) {\n    final DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    e.getPresentation().setEnabled(project != null);\n  }","id":103988,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent e) {\n    e.getPresentation().setEnabled(e.getProject() != null);\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    final DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    if (project == null){\n      return;\n    }\n    ModulesDependenciesPanel panel;\n    AnalysisScope scope = new AnalysisScope(project);\n    final Module[] modules = LangDataKeys.MODULE_CONTEXT_ARRAY.getData(dataContext);\n    if (modules != null){\n      panel = new ModulesDependenciesPanel(project, modules);\n      scope = new AnalysisScope(modules);\n    } else {\n      final PsiElement element = CommonDataKeys.PSI_FILE.getData(dataContext);\n      final Module module = element != null ? ModuleUtil.findModuleForPsiElement(element) : null;\n      if (module != null && ModuleManager.getInstance(project).getModules().length > 1) {\n        MyModuleOrProjectScope dlg = new MyModuleOrProjectScope(module.getName());\n        if (dlg.showAndGet()) {\n          if (!dlg.useProjectScope()) {\n            panel = new ModulesDependenciesPanel(project, new Module[]{module});\n            scope = new AnalysisScope(module);\n          }\n          else {\n            panel = new ModulesDependenciesPanel(project);\n          }\n        }\n        else {\n          return;\n        }\n      } else {\n        panel = new ModulesDependenciesPanel(project);\n      }\n    }\n\n    Content content = ContentFactory.SERVICE.getInstance().createContent(panel,\n                                                                                  AnalysisScopeBundle.message(\n                                                                                    \"module.dependencies.toolwindow.title\",\n                                                                                    StringUtil.capitalize(scope.getDisplayName())),\n                                                                                  false);\n    content.setDisposer(panel);\n    panel.setContent(content);\n    DependenciesAnalyzeManager.getInstance(project).addContent(content);\n  }","id":103989,"modified_method":"@Override\n  public void actionPerformed(@NotNull AnActionEvent e) {\n    Project project = e.getProject();\n    if (project == null) return;\n\n    Module[] modules = LangDataKeys.MODULE_CONTEXT_ARRAY.getData(e.getDataContext());\n    if (modules == null) {\n      PsiElement element = CommonDataKeys.PSI_FILE.getData(e.getDataContext());\n      Module module = element != null ? ModuleUtilCore.findModuleForPsiElement(element) : null;\n      if (module != null && ModuleManager.getInstance(project).getModules().length > 1) {\n        MyModuleOrProjectScope dlg = new MyModuleOrProjectScope(module.getName());\n        if (!dlg.showAndGet()) {\n          return;\n        }\n        if (!dlg.useProjectScope()) {\n          modules = new Module[]{module};\n        }\n      }\n    }\n\n    ModulesDependenciesPanel panel = new ModulesDependenciesPanel(project, modules);\n    AnalysisScope scope = modules != null ? new AnalysisScope(modules) : new AnalysisScope(project);\n    Content content = ContentFactory.SERVICE.getInstance().createContent(panel, scope.getDisplayName(), false);\n    content.setDisposer(panel);\n    panel.setContent(content);\n    DependenciesAnalyzeManager.getInstance(project).addContent(content);\n  }","commit_id":"bfd13f90d3f02009d8b22296eb3fc9f149c73b63","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public Object[] getSelectedItemsInTree() {\n    return new Object[0];  //To change body of implemented methods use File | Settings | File Templates.\n  }","id":103990,"modified_method":"@Override\n  public Object[] getSelectedItemsInTree() {\n    return ArrayUtil.EMPTY_OBJECT_ARRAY;\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static DefaultListModel buildModel(Project project) {\n    final DefaultListModel model = new DefaultListModel();\n\n    for (Bookmark bookmark : BookmarkManager.getInstance(project).getValidBookmarks()) {\n      model.addElement(new BookmarkItem(bookmark));\n    }\n\n    return model;\n  }","id":103991,"modified_method":"private static DefaultListModel buildModel(Project project) {\n    DefaultListModel model = new DefaultListModel();\n    for (Bookmark bookmark : BookmarkManager.getInstance(project).getValidBookmarks()) {\n      //noinspection unchecked\n      model.addElement(new BookmarkItem(bookmark));\n    }\n    return model;\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    if (project == null) return;\n\n    if (myPopup != null && myPopup.isVisible()) return;\n\n    final DefaultListModel model = buildModel(project);\n\n    final JBList list = new JBList(model);\n    list.getEmptyText().setText(\"No Bookmarks\");\n\n    EditBookmarkDescriptionAction editDescriptionAction = new EditBookmarkDescriptionAction(project, list);\n    DefaultActionGroup actions = new DefaultActionGroup();\n    actions.add(editDescriptionAction);\n    actions.add(new DeleteBookmarkAction(project, list));\n    actions.add(new MoveBookmarkUpAction(project, list));\n    actions.add(new MoveBookmarkDownAction(project, list));\n\n    myPopup = new MasterDetailPopupBuilder(project)\n      .setActionsGroup(actions)\n      .setList(list)\n      .setDetailView(new DetailViewImpl(project))\n      .setCloseOnEnter(false)\n      .setDoneRunnable(new Runnable() {\n        @Override\n        public void run() {\n          myPopup.cancel();\n        }\n      })\n      .setDelegate(this).createMasterDetailPopup();\n    new AnAction() {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        Object selectedValue = list.getSelectedValue();\n        if (selectedValue instanceof BookmarkItem) {\n          itemChosen((BookmarkItem)selectedValue, project, myPopup, true);\n        }\n      }\n    }.registerCustomShortcutSet(CommonShortcuts.getEditSource(), list);\n    editDescriptionAction.setPopup(myPopup);\n    myPopup.showCenteredInCurrentWindow(project);\n    //todo[zaec] selection mode shouldn't be set in builder.setList() method\n    list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n  }","id":103992,"modified_method":"@Override\n  public void actionPerformed(@NotNull AnActionEvent e) {\n    final Project project = e.getProject();\n    if (project == null) return;\n\n    if (myPopup != null && myPopup.isVisible()) return;\n\n    final DefaultListModel model = buildModel(project);\n\n    final JBList list = new JBList(model);\n    list.getEmptyText().setText(\"No Bookmarks\");\n\n    EditBookmarkDescriptionAction editDescriptionAction = new EditBookmarkDescriptionAction(project, list);\n    DefaultActionGroup actions = new DefaultActionGroup();\n    actions.add(editDescriptionAction);\n    actions.add(new DeleteBookmarkAction(project, list));\n    actions.add(new MoveBookmarkUpAction(project, list));\n    actions.add(new MoveBookmarkDownAction(project, list));\n\n    myPopup = new MasterDetailPopupBuilder(project).\n      setList(list).\n      setDelegate(this).\n      setDetailView(new DetailViewImpl(project)).\n      setDimensionServiceKey(\"bookmarks\").\n      setAddDetailViewToEast(true).\n      setActionsGroup(actions).\n      setPopupTuner(new Consumer<PopupChooserBuilder>() {\n        @Override\n        public void consume(PopupChooserBuilder builder) {\n          builder.\n            setCloseOnEnter(false).\n            setCancelOnClickOutside(false).\n            setCancelOnWindowDeactivation(true);\n        }\n      }).\n      setDoneRunnable(new Runnable() {\n        @Override\n        public void run() {\n          myPopup.cancel();\n        }\n      }).\n      createMasterDetailPopup();\n\n    new AnAction() {\n      @Override\n      public void actionPerformed(AnActionEvent e) {\n        Object selectedValue = list.getSelectedValue();\n        if (selectedValue instanceof BookmarkItem) {\n          itemChosen((BookmarkItem)selectedValue, project, myPopup, true);\n        }\n      }\n    }.registerCustomShortcutSet(CommonShortcuts.getEditSource(), list);\n\n    editDescriptionAction.setPopup(myPopup);\n    myPopup.showCenteredInCurrentWindow(project);\n\n    list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(AnActionEvent e) {\n    DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    e.getPresentation().setEnabled(project != null);\n  }","id":103993,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent e) {\n    e.getPresentation().setEnabled(e.getProject() != null);\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static boolean notFiltered(JList list) {\n    if (!(list.getModel() instanceof FilteringListModel)) return true;\n    final FilteringListModel model = (FilteringListModel)list.getModel();\n    return model.getOriginalModel().getSize() == model.getSize();\n  }","id":103994,"modified_method":"static boolean notFiltered(JList list) {\n    ListModel model1 = list.getModel();\n    if (!(model1 instanceof FilteringListModel)) return true;\n    final FilteringListModel model = (FilteringListModel)model1;\n    return model.getOriginalModel().getSize() == model.getSize();\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n\n    final Bookmark bookmark = BookmarkManager.getInstance(project).findBookmarkForMnemonic((char)('0' + myNumber));\n    if (bookmark != null) {\n      bookmark.navigate(true);\n    }\n  }","id":103995,"modified_method":"@Override\n  public void actionPerformed(@NotNull AnActionEvent e) {\n    Project project = e.getProject();\n    if (project != null) {\n      Bookmark bookmark = BookmarkManager.getInstance(project).findBookmarkForMnemonic((char)('0' + myNumber));\n      if (bookmark != null) {\n        bookmark.navigate(true);\n      }\n    }\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(AnActionEvent e) {\n    DataContext dataContext = e.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    e.getPresentation().setEnabled(project != null);\n  }","id":103996,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent e) {\n    e.getPresentation().setEnabled(e.getProject() != null);\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(AnActionEvent event) {\n    DataContext dataContext = event.getDataContext();\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    event.getPresentation().setEnabled(project != null &&\n                                       (ToolWindowManager.getInstance(project).isEditorComponentActive() &&\n                                        CommonDataKeys.EDITOR.getData(dataContext) != null ||\n                                        CommonDataKeys.VIRTUAL_FILE.getData(dataContext) != null));\n\n    event.getPresentation().setText(IdeBundle.message(\"action.bookmark.toggle\"));\n  }","id":103997,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent event) {\n    Project project = event.getProject();\n    DataContext dataContext = event.getDataContext();\n    event.getPresentation().setEnabled(project != null &&\n                                       (ToolWindowManager.getInstance(project).isEditorComponentActive() &&\n                                        CommonDataKeys.EDITOR.getData(dataContext) != null ||\n                                        CommonDataKeys.VIRTUAL_FILE.getData(dataContext) != null));\n\n    event.getPresentation().setText(IdeBundle.message(\"action.bookmark.toggle\"));\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    DataContext dataContext = e.getDataContext();\n    Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    if (project == null) return;\n    BookmarkInContextInfo info = new BookmarkInContextInfo(dataContext, project).invoke();\n    if (info.getFile() == null) return;\n\n    if (info.getBookmarkAtPlace() != null) {\n      BookmarkManager.getInstance(project).removeBookmark(info.getBookmarkAtPlace());\n    }\n    else {\n      BookmarkManager.getInstance(project).addTextBookmark(info.getFile(), info.getLine(), \"\");\n    }\n  }","id":103998,"modified_method":"@Override\n  public void actionPerformed(@NotNull AnActionEvent e) {\n    Project project = e.getProject();\n    if (project == null) return;\n\n    BookmarkInContextInfo info = new BookmarkInContextInfo(e.getDataContext(), project).invoke();\n    if (info.getFile() == null) return;\n\n    if (info.getBookmarkAtPlace() != null) {\n      BookmarkManager.getInstance(project).removeBookmark(info.getBookmarkAtPlace());\n    }\n    else {\n      BookmarkManager.getInstance(project).addTextBookmark(info.getFile(), info.getLine(), \"\");\n    }\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(AnActionEvent event) {\n    super.update(event);\n\n    event.getPresentation().setText(IdeBundle.message(\"action.bookmark.toggle.mnemonic\"));\n  }","id":103999,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent e) {\n    super.update(e);\n    e.getPresentation().setText(IdeBundle.message(\"action.bookmark.toggle.mnemonic\"));\n  }","commit_id":"818a1aef4698658c128b0757a63e01743b39bc1d","url":"https://github.com/JetBrains/intellij-community"}]