[{"original_method":"/**\n   * Parse a folder with csv files when a single na_string is specified.\n   *\n   * @param fname\n   * @param na_string\n   * @return\n   */\n  protected Frame parse_test_folder( String fname, String na_string, int check_header, byte[] column_types ) {\n    File folder = find_test_file(fname);\n    assert folder != null && folder.isDirectory():\"Folder \"+fname+\" is not a directory.\";\n    File[] files = folder.listFiles();\n    Arrays.sort(files);\n    ArrayList<Key> keys = new ArrayList<>();\n    for( File f : files )\n      if( f.isFile() )\n        keys.add(NFSFileVec.make(f)._key);\n\n    Key[] res = new Key[keys.size()];\n    keys.toArray(res);  // generated the necessary key here\n\n    // create new parseSetup in order to store our na_string\n    ParseSetup p = ParseSetup.guessSetup(res, new ParseSetup(DefaultParserProviders.GUESS_INFO,(byte) ',',true,\n            check_header,0,null,null,null,null,null));\n\n    // add the na_strings into p.\n    if (na_string != null) {\n      int column_number = p.getColumnTypes().length;\n      int na_length = na_string.length() - 1;\n\n      String[][] na_strings = new String[column_number][na_length + 1];\n\n      for (int index = 0; index < column_number; index++) {\n        na_strings[index][na_length] = na_string;\n      }\n\n      p.setNAStrings(na_strings);\n    }\n\n    if (column_types != null)\n      p.setColumnTypes(column_types);\n\n    return ParseDataset.parse(Key.make(), res, true, p);\n\n  }","id":59000,"modified_method":"/**\n   * Parse a folder with csv files when a single na_string is specified.\n   *\n   * @param fname\n   * @param na_string\n   * @return\n   */\n  protected static Frame parse_test_folder( String fname, String na_string, int check_header, byte[] column_types ) {\n    File folder = find_test_file_static(fname);\n    assert folder != null && folder.isDirectory():\"Folder \"+fname+\" is not a directory.\";\n    File[] files = folder.listFiles();\n    Arrays.sort(files);\n    ArrayList<Key> keys = new ArrayList<>();\n    for( File f : files )\n      if( f.isFile() )\n        keys.add(NFSFileVec.make(f)._key);\n\n    Key[] res = new Key[keys.size()];\n    keys.toArray(res);  // generated the necessary key here\n\n    // create new parseSetup in order to store our na_string\n    ParseSetup p = ParseSetup.guessSetup(res, new ParseSetup(DefaultParserProviders.GUESS_INFO,(byte) ',',true,\n            check_header,0,null,null,null,null,null));\n\n    // add the na_strings into p.\n    if (na_string != null) {\n      int column_number = p.getColumnTypes().length;\n      int na_length = na_string.length() - 1;\n\n      String[][] na_strings = new String[column_number][na_length + 1];\n\n      for (int index = 0; index < column_number; index++) {\n        na_strings[index][na_length] = na_string;\n      }\n\n      p.setNAStrings(na_strings);\n    }\n\n    if (column_types != null)\n      p.setColumnTypes(column_types);\n\n    return ParseDataset.parse(Key.make(), res, true, p);\n\n  }","commit_id":"86fc556db6c8260f1d32cda2bf249cd8f031c45d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override\n\tpublic List<Bundle> deploy(BundleContext bundleContext, File lpkgFile)\n\t\tthrows IOException {\n\n\t\tString canonicalPath = lpkgFile.getCanonicalPath();\n\n\t\tfor (Bundle bundle : _lpkgVerifier.verify(lpkgFile)) {\n\t\t\ttry {\n\t\t\t\tbundle.uninstall();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Uninstalled older version LPKG bundle \" + bundle +\n\t\t\t\t\t\t\t\" in order to install \" + lpkgFile);\n\t\t\t\t}\n\n\t\t\t\tString location = bundle.getLocation();\n\n\t\t\t\tif (!location.equals(canonicalPath) &&\n\t\t\t\t\tFiles.deleteIfExists(Paths.get(bundle.getLocation())) &&\n\t\t\t\t\t_log.isInfoEnabled()) {\n\n\t\t\t\t\t_log.info(\"Removed old lpkg file \" + bundle.getLocation());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (BundleException be) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Unable to uninstall \" + bundle + \" for \" + lpkgFile, be);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tList<Bundle> bundles = new ArrayList<>();\n\n\t\t\tBundle lpkgBundle = bundleContext.installBundle(\n\t\t\t\tcanonicalPath, _lpkgToOSGiBundle(lpkgFile));\n\n\t\t\tBundleStartLevel bundleStartLevel = lpkgBundle.adapt(\n\t\t\t\tBundleStartLevel.class);\n\n\t\t\tbundleStartLevel.setStartLevel(\n\t\t\t\tPropsValues.MODULE_FRAMEWORK_DYNAMIC_INSTALL_START_LEVEL);\n\n\t\t\tbundles.add(lpkgBundle);\n\n\t\t\tList<Bundle> newBundles = _lpkgBundleTracker.getObject(lpkgBundle);\n\n\t\t\tif (newBundles != null) {\n\t\t\t\tbundles.addAll(newBundles);\n\t\t\t}\n\n\t\t\treturn bundles;\n\t\t}\n\t\tcatch (BundleException be) {\n\t\t\tthrow new IOException(be);\n\t\t}\n\t}","id":59001,"modified_method":"@Override\n\tpublic List<Bundle> deploy(BundleContext bundleContext, File lpkgFile)\n\t\tthrows IOException {\n\n\t\tfor (Bundle bundle : _lpkgVerifier.verify(lpkgFile)) {\n\t\t\ttry {\n\t\t\t\tbundle.uninstall();\n\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\"Uninstalled older version LPKG bundle \" + bundle +\n\t\t\t\t\t\t\t\" in order to install \" + lpkgFile);\n\t\t\t\t}\n\n\t\t\t\tString location = bundle.getLocation();\n\n\t\t\t\tif (!location.equals(lpkgFile.getCanonicalPath()) &&\n\t\t\t\t\tFiles.deleteIfExists(Paths.get(bundle.getLocation())) &&\n\t\t\t\t\t_log.isInfoEnabled()) {\n\n\t\t\t\t\t_log.info(\"Removed old lpkg file \" + bundle.getLocation());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (BundleException be) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Unable to uninstall \" + bundle + \" for \" + lpkgFile, be);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tList<Bundle> bundles = new ArrayList<>();\n\n\t\t\tBundle lpkgBundle = bundleContext.installBundle(\n\t\t\t\tlpkgFile.getCanonicalPath(), _lpkgToOSGiBundle(lpkgFile));\n\n\t\t\tBundleStartLevel bundleStartLevel = lpkgBundle.adapt(\n\t\t\t\tBundleStartLevel.class);\n\n\t\t\tbundleStartLevel.setStartLevel(\n\t\t\t\tPropsValues.MODULE_FRAMEWORK_DYNAMIC_INSTALL_START_LEVEL);\n\n\t\t\tbundles.add(lpkgBundle);\n\n\t\t\tList<Bundle> newBundles = _lpkgBundleTracker.getObject(lpkgBundle);\n\n\t\t\tif (newBundles != null) {\n\t\t\t\tbundles.addAll(newBundles);\n\t\t\t}\n\n\t\t\treturn bundles;\n\t\t}\n\t\tcatch (BundleException be) {\n\t\t\tthrow new IOException(be);\n\t\t}\n\t}","commit_id":"e2bc626ba3df52035fb08386f204ab06560ba084","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Execute the eclipse:eclipse goal on a test project and verify generated files.\n     * \n     * @param projectName project directory\n     * @param properties additional properties\n     * @param cleanGoal TODO\n     * @param genGoal TODO\n     * @throws Exception any exception generated during test\n     */\n    protected void testProject( String projectName, Properties properties, String cleanGoal, String genGoal )\n        throws Exception\n    {\n        File basedir = getTestFile( \"target/test-classes/projects/\" + projectName );\n\n        File pom = new File( basedir, \"pom.xml\" );\n\n        String pluginSpec = getPluginCLISpecification();\n\n        List goals = new ArrayList();\n\n        goals.add( pluginSpec + cleanGoal );\n        goals.add( pluginSpec + genGoal );\n\n        executeMaven( pom, properties, goals );\n\n        MavenProject project = readProject( pom );\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir, \"\" );\n        compareDirectoryContent( basedir, projectOutputDir, \".settings/\" );\n        compareDirectoryContent( basedir, projectOutputDir, \".externalToolBuilders/\" );\n        compareDirectoryContent( basedir, projectOutputDir, \"META-INF/\" );\n\n    }","id":59002,"modified_method":"/**\n     * Execute the eclipse:eclipse goal on a test project and verify generated files.\n     * \n     * @param projectName project directory\n     * @param properties additional properties\n     * @param cleanGoal TODO\n     * @param genGoal TODO\n     * @throws Exception any exception generated during test\n     */\n    protected void testProject( String projectName, Properties properties, String cleanGoal, String genGoal )\n        throws Exception\n    {\n        File basedir = getTestFile( \"target/test-classes/projects/\" + projectName );\n\n        File pom = new File( basedir, \"pom.xml\" );\n\n        String pluginSpec = getPluginCLISpecification();\n\n        List goals = new ArrayList();\n\n        goals.add( pluginSpec + cleanGoal );\n        goals.add( pluginSpec + genGoal );\n\n        executeMaven( pom, properties, goals );\n\n        MavenProject project = readProject( pom );\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir );\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * @param basedir\n     * @param projectOutputDir\n     * @throws IOException\n     */\n    protected void compareDirectoryContent( File basedir, File projectOutputDir, String additionalDir )\n        throws IOException\n    {\n        File expectedConfigDir = new File( basedir, \"expected/\" + additionalDir );\n\n        if ( expectedConfigDir.isDirectory() )\n        {\n            File[] files = expectedConfigDir.listFiles( new FileFilter()\n            {\n                public boolean accept( File file )\n                {\n                    return !file.isDirectory();\n                }\n            } );\n\n            for ( int j = 0; j < files.length; j++ )\n            {\n                File expectedFile = files[j];\n                File actualFile =\n                    new File( projectOutputDir, additionalDir + expectedFile.getName() ).getCanonicalFile();\n\n                if ( !actualFile.exists() )\n                {\n                    throw new AssertionFailedError( \"Expected file not found: \" + actualFile.getAbsolutePath() );\n                }\n\n                assertFileEquals( expectedFile, actualFile );\n\n            }\n        }\n    }","id":59003,"modified_method":"/**\n     * @param basedir the base directory of the project\n     * @param projectOutputDir the directory where the eclipse plugin will write the output files.\n     * @throws MojoExecutionException\n     */\n    protected void compareDirectoryContent( File basedir, File projectOutputDir )\n        throws MojoExecutionException\n    {\n        File[] expectedDirectories = getExpectedDirectories( basedir );\n\n        for ( int i = 0; i < expectedDirectories.length; i++ )\n        {\n            File expectedDirectory = expectedDirectories[i];\n            File[] expectedFilesToCompare = getExpectedFilesToCompare( expectedDirectory );\n\n            for ( int j = 0; j < expectedFilesToCompare.length; j++ )\n            {\n                File expectedFile = expectedFilesToCompare[j];\n                File actualFile = getActualFile( projectOutputDir, basedir, expectedFile );\n\n                if ( !actualFile.exists() )\n                {\n                    throw new AssertionFailedError( \"Expected file not found: \" + actualFile.getAbsolutePath() );\n                }\n\n                assertFileEquals( expectedFile, actualFile );\n\n            }\n        }\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void assertFileEquals( File expectedFile, File actualFile )\n        throws IOException\n    {\n        List expectedLines = getLines( expectedFile );\n\n        if ( !actualFile.exists() )\n        {\n            throw new AssertionFailedError( \"Expected file not found: \" + actualFile.getAbsolutePath() );\n        }\n\n        List actualLines = getLines( actualFile );\n        String filename = actualFile.getName();\n\n        String basedir = new File( getBasedir() ).getCanonicalPath().replace( '\\\\', '/' );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            // replace some vars in the expected line, to account\n            // for absolute paths that are different on each installation.\n            expected = StringUtils.replace( expected, \"${basedir}\", basedir );\n            expected =\n                StringUtils.replace( expected, \"${M2_REPO}\", localRepositoryDirectory.getCanonicalPath().replace( '\\\\',\n                                                                                                                  '/' ) );\n\n            if ( actualLines.size() <= i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \"\n                    + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            if ( expected.startsWith( \"#\" ) && actual.startsWith( \"#\" ) )\n            {\n                // ignore comments, for settings file\n                continue;\n            }\n\n            /*\n             * NOTE: This is to account for the unfortunate fact that \"file:\" URIs differ between Windows and Unix. On a\n             * Windows box, the path \"C:\\dir\" is mapped to \"file:/C:/dir\". On a Unix box, the path \"/home/dir\" is mapped\n             * to \"file:/home/dir\". So, in the first case the slash after \"file:\" is not part of the corresponding\n             * filesystem path while in the later case it is. This discrepancy makes verifying the javadoc attachments\n             * in \".classpath\" a little tricky.\n             */\n            if ( !expected.equals( actual ) )\n            {\n                // convert \"file:C:/dir\" to \"file:/C:/dir\"\n                expected = expected.replaceAll( \"file:([a-zA-Z])\", \"file:/$1\" );\n            }\n\n            /*\n             * NOTE: This is another hack to compensate for some metadata files that contain a complete XML file as the\n             * value for a key like \"org.eclipse.jdt.ui.formatterprofiles\" from \"org.eclipse.jdt.ui.prefs\". Line\n             * terminators in this value are platform-dependent.\n             */\n            if ( !expected.equals( actual ) && expectedFile.getName().endsWith( \".prefs\" ) )\n            {\n                // normalize line terminators\n                expected = expected.replaceAll( \"(\\\\\\\\r\\\\\\\\n)|(\\\\\\\\n)|(\\\\\\\\r)\", \"\\\\n\" );\n                actual = actual.replaceAll( \"(\\\\\\\\r\\\\\\\\n)|(\\\\\\\\n)|(\\\\\\\\r)\", \"\\\\n\" );\n            }\n\n            assertEquals( \"Checking \" + filename + \", line #\" + ( i + 1 ), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","id":59004,"modified_method":"protected void assertFileEquals( File expectedFile, File actualFile )\n        throws MojoExecutionException\n    {\n        List expectedLines = getLines( expectedFile );\n\n        if ( !actualFile.exists() )\n        {\n            throw new AssertionFailedError( \"Expected file not found: \" + actualFile.getAbsolutePath() );\n        }\n\n        List actualLines = getLines( actualFile );\n\n        String basedir = ( IdeUtils.getCanonicalPath( new File( getBasedir() ) ) ).replace( '\\\\', '/' );\n        String localRepositoryAsPath = IdeUtils.fixSeparator( IdeUtils.getCanonicalPath( localRepositoryDirectory ) );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            // replace some vars in the expected line, to account\n            // for absolute paths that are different on each installation.\n            expected = StringUtils.replace( expected, \"${basedir}\", basedir );\n            expected = StringUtils.replace( expected, \"${M2_REPO}\", localRepositoryAsPath );\n\n            if ( actualLines.size() <= i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \"\n                    + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            if ( expected.startsWith( \"#\" ) && actual.startsWith( \"#\" ) )\n            {\n                // ignore comments, for settings file\n                continue;\n            }\n\n            /*\n             * NOTE: This is to account for the unfortunate fact that \"file:\" URIs differ between Windows and Unix. On a\n             * Windows box, the path \"C:\\dir\" is mapped to \"file:/C:/dir\". On a Unix box, the path \"/home/dir\" is mapped\n             * to \"file:/home/dir\". So, in the first case the slash after \"file:\" is not part of the corresponding\n             * filesystem path while in the later case it is. This discrepancy makes verifying the javadoc attachments\n             * in \".classpath\" a little tricky.\n             */\n            if ( !expected.equals( actual ) )\n            {\n                // convert \"file:C:/dir\" to \"file:/C:/dir\"\n                expected = expected.replaceAll( \"file:([a-zA-Z])\", \"file:/$1\" );\n            }\n\n            /*\n             * NOTE: This is another hack to compensate for some metadata files that contain a complete XML file as the\n             * value for a key like \"org.eclipse.jdt.ui.formatterprofiles\" from \"org.eclipse.jdt.ui.prefs\". Line\n             * terminators in this value are platform-dependent.\n             */\n            if ( !expected.equals( actual ) && expectedFile.getName().endsWith( \".prefs\" ) )\n            {\n                // normalize line terminators\n                expected = expected.replaceAll( \"(\\\\\\\\r\\\\\\\\n)|(\\\\\\\\n)|(\\\\\\\\r)\", \"\\\\n\" );\n                actual = actual.replaceAll( \"(\\\\\\\\r\\\\\\\\n)|(\\\\\\\\n)|(\\\\\\\\r)\", \"\\\\n\" );\n            }\n\n            assertEquals( \"Comparing '\" + IdeUtils.getCanonicalPath( actualFile ) + \"' against '\"\n                + IdeUtils.getCanonicalPath( expectedFile ) + \"' at line #\" + ( i + 1 ), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Execute the eclipse:configure-workspace goal on a test project and verify generated files.\n     * \n     * @param projectName project directory\n     * @param properties additional properties\n     * @param cleanGoal TODO\n     * @param genGoal TODO\n     * @throws Exception any exception generated during test\n     */\n    protected void testWorkspace( String projectName, Properties properties, String genGoal )\n        throws Exception\n    {\n        File basedir = getOutputDirectory( projectName );\n\n        File pom = new File( basedir, \"pom.xml\" );\n\n        String pluginSpec = getPluginCLISpecification();\n\n        List goals = new ArrayList();\n\n        goals.add( pluginSpec + genGoal );\n\n        executeMaven( pom, properties, goals );\n\n        MavenProject project = readProject( pom );\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir, EclipseWorkspaceWriter.ECLIPSE_CORE_RUNTIME_SETTINGS_DIR\n            + \"/\" );\n\n    }","id":59005,"modified_method":"/**\n     * Execute the eclipse:configure-workspace goal on a test project and verify generated files.\n     * \n     * @param projectName project directory\n     * @param properties additional properties\n     * @param cleanGoal TODO\n     * @param genGoal TODO\n     * @throws Exception any exception generated during test\n     */\n    protected void testWorkspace( String projectName, Properties properties, String genGoal )\n        throws Exception\n    {\n        File basedir = getOutputDirectory( projectName );\n\n        File pom = new File( basedir, \"pom.xml\" );\n\n        String pluginSpec = getPluginCLISpecification();\n\n        List goals = new ArrayList();\n\n        goals.add( pluginSpec + genGoal );\n\n        executeMaven( pom, properties, goals );\n\n        MavenProject project = readProject( pom );\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir );\n\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"private List getLines( File file )\n        throws IOException\n    {\n        List lines = new ArrayList();\n\n        BufferedReader reader = new BufferedReader( new InputStreamReader( new FileInputStream( file ), \"UTF-8\" ) );\n\n        String line;\n\n        while ( ( line = reader.readLine() ) != null )\n        {\n            lines.add( line );\n        }\n\n        IOUtil.close( reader );\n\n        return lines;\n    }","id":59006,"modified_method":"private List getLines( File file )\n        throws MojoExecutionException\n    {\n        try\n        {\n            List lines = new ArrayList();\n\n            BufferedReader reader = new BufferedReader( new InputStreamReader( new FileInputStream( file ), \"UTF-8\" ) );\n\n            String line;\n\n            while ( ( line = reader.readLine() ) != null )\n            {\n                lines.add( line );\n            }\n\n            IOUtil.close( reader );\n\n            return lines;\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"failed to getLines from file: \" + file.getAbsolutePath(), e );\n        }\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"public static String toRelativeAndFixSeparator( File basedir, File fileToAdd, boolean replaceSlashesWithDashes )\n        throws MojoExecutionException\n    {\n        if ( !fileToAdd.isAbsolute() )\n        {\n            fileToAdd = new File( basedir, fileToAdd.getPath() );\n        }\n\n        String basedirpath;\n        String absolutePath;\n\n        basedirpath = getCanonicalPath( basedir );\n        absolutePath = getCanonicalPath( fileToAdd );\n\n        String relative;\n\n        if ( absolutePath.equals( basedirpath ) )\n        {\n            relative = \".\"; //$NON-NLS-1$\n        }\n        else if ( absolutePath.startsWith( basedirpath ) )\n        {\n            relative = absolutePath.substring( basedirpath.length() + 1 );\n        }\n        else\n        {\n            relative = absolutePath;\n        }\n\n        relative = StringUtils.replace( relative, '\\\\', '/' );\n\n        if ( replaceSlashesWithDashes )\n        {\n            relative = StringUtils.replace( relative, '/', '-' );\n            relative = StringUtils.replace( relative, ':', '-' ); // remove \":\" for absolute paths in windows\n        }\n\n        return relative;\n    }","id":59007,"modified_method":"public static String toRelativeAndFixSeparator( File basedir, File fileToAdd, boolean replaceSlashesWithDashes )\n        throws MojoExecutionException\n    {\n        if ( !fileToAdd.isAbsolute() )\n        {\n            fileToAdd = new File( basedir, fileToAdd.getPath() );\n        }\n\n        String basedirpath;\n        String absolutePath;\n\n        basedirpath = getCanonicalPath( basedir );\n        absolutePath = getCanonicalPath( fileToAdd );\n\n        String relative;\n\n        if ( absolutePath.equals( basedirpath ) )\n        {\n            relative = \".\"; //$NON-NLS-1$\n        }\n        else if ( absolutePath.startsWith( basedirpath ) )\n        {\n            relative = absolutePath.substring( basedirpath.length() + 1 );\n        }\n        else\n        {\n            relative = absolutePath;\n        }\n\n        relative = fixSeparator( relative );\n\n        if ( replaceSlashesWithDashes )\n        {\n            relative = StringUtils.replace( relative, '/', '-' );\n            relative = StringUtils.replace( relative, ':', '-' ); // remove \":\" for absolute paths in windows\n        }\n\n        return relative;\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Tests warSourceDirectory setting to be reflected in generated .websettings, location of jars in WEB-INF/lib and\n     * generation of MANIFEST.MF at the right place\n     * \n     * @throws Exception\n     */\n    public void testProject7()\n        throws Exception\n    {\n        testProject( \"project-rad-7\", new Properties(), \"rad-clean\", \"rad\" );\n\n        /*\n         * testing libs in web content directory\n         */\n        File basedir = getTestFile( \"target/test-classes/projects/project-rad-7\" );\n        File pom = new File( basedir, \"pom.xml\" );\n        MavenProject project = readProject( pom );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir, \"WebContent/WEB-INF/lib/\" );\n        compareDirectoryContent( basedir, projectOutputDir, \"WebContent/META-INF/\" );\n        assertFalse( \"Default path should not exist because it is overridden!\",\n                     new File( basedir + \"/src/main/webapp\" ).exists() );\n\n    }","id":59008,"modified_method":"/**\n     * Tests warSourceDirectory setting to be reflected in generated .websettings, location of jars in WEB-INF/lib and\n     * generation of MANIFEST.MF at the right place\n     * \n     * @throws Exception\n     */\n    public void testProject7()\n        throws Exception\n    {\n        testProject( \"project-rad-7\", new Properties(), \"rad-clean\", \"rad\" );\n\n        /*\n         * testing libs in web content directory\n         */\n        File basedir = getTestFile( \"target/test-classes/projects/project-rad-7\" );\n        File pom = new File( basedir, \"pom.xml\" );\n        MavenProject project = readProject( pom );\n        File outputDir;\n        File projectOutputDir = basedir;\n\n        String outputDirPath =\n            IdeUtils.getPluginSetting( project, \"org.apache.maven.plugins:maven-eclipse-plugin\", \"outputDir\", null );\n        if ( outputDirPath == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir = new File( basedir, outputDirPath );\n            outputDir.mkdirs();\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        compareDirectoryContent( basedir, projectOutputDir );\n        assertFalse( \"Default path should not exist because it is overridden!\",\n                     new File( basedir + \"/src/main/webapp\" ).exists() );\n\n    }","commit_id":"7b5b89e0986a99b6d52e9867aabf6f1b7755c317","url":"https://github.com/apache/maven-plugins"},{"original_method":"private RangeMarker findSupport(RangeMarker leader, PsiFile file, Document document) {\n      final int offset = leader.getStartOffset();\n      PsiElement element = InjectedLanguageUtil.findElementAtNoCommit(file, offset);\n      PsiElement support = findSupportElement(element);\n      if (support == null && file.getViewProvider() instanceof MultiplePsiFilesPerDocumentFileViewProvider) {\n        element = file.getViewProvider().findElementAt(offset, myLanguage);\n        support = findSupportElement(element);\n      }\n\n      if (support == null) return null;\n\n      int diff = offset - element.getTextRange().getStartOffset();\n      final TextRange range = support.getTextRange();\n      return range != null ? document.createRangeMarker(range.getStartOffset() + diff, range.getEndOffset() + diff, true) : null;\n    }","id":59009,"modified_method":"private RangeMarker findSupport(RangeMarker leader, PsiFile file, Document document) {\n      final int offset = leader.getStartOffset();\n      PsiElement element = InjectedLanguageUtil.findElementAtNoCommit(file, offset);\n      PsiElement support = findSupportElement(element);\n      if (support == null && file.getViewProvider() instanceof MultiplePsiFilesPerDocumentFileViewProvider) {\n        element = file.getViewProvider().findElementAt(offset, myLanguage);\n        support = findSupportElement(element);\n      }\n\n      if (support == null) return null;\n\n      final TextRange range = support.getTextRange();\n      TextRange realRange = InjectedLanguageManager.getInstance(file.getProject()).injectedToHost(element.getContainingFile(), range);\n      return document.createRangeMarker(realRange.getStartOffset(), realRange.getEndOffset(), true);\n    }","commit_id":"fc6607efe88ff671053f9a3b92ae13e1c5a471fa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTryst2() throws Throwable { doTest(true); }","id":59010,"modified_method":"public void testTryst2() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMoveSecondFieldUp() throws Throwable { doTest(false); }","id":59011,"modified_method":"public void testMoveSecondFieldUp() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMoveMethodWithGroovydoc() throws Throwable { doTest(true); }","id":59012,"modified_method":"public void testMoveMethodWithGroovydoc() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMeth2() throws Throwable { doTest(true); }","id":59013,"modified_method":"public void testMeth2() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testClazz1() throws Throwable { doTest(true); }","id":59014,"modified_method":"public void testClazz1() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSimple2() throws Throwable { doTest(false); }","id":59015,"modified_method":"public void testSimple2() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testStatementInsideClosure() throws Throwable { doTest(false); }","id":59016,"modified_method":"public void testStatementInsideClosure() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSimple1() throws Throwable { doTest(true); }","id":59017,"modified_method":"public void testSimple1() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMeth1() throws Throwable { doTest(true); }","id":59018,"modified_method":"public void testMeth1() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testClos2() throws Throwable { doTest(false); }","id":59019,"modified_method":"public void testClos2() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMoveFirstFieldDown() throws Throwable { doTest(true); }","id":59020,"modified_method":"public void testMoveFirstFieldDown() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testIfst() throws Throwable { doTest(true); }","id":59021,"modified_method":"public void testIfst() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testIfst2() throws Throwable { doTest(false); }","id":59022,"modified_method":"public void testIfst2() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMeth4() throws Throwable { doTest(false); }","id":59023,"modified_method":"public void testMeth4() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testClazz2() throws Throwable { doTest(false); }","id":59024,"modified_method":"public void testClazz2() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMeth3() throws Throwable { doTest(false); }","id":59025,"modified_method":"public void testMeth3() throws Throwable { upTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTryst1() throws Throwable { doTest(true); }","id":59026,"modified_method":"public void testTryst1() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testMoveGroovydocWithMethod() throws Throwable { doTest(true); }","id":59027,"modified_method":"public void testMoveGroovydocWithMethod() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testStatementOutsideClosure() throws Throwable { doTest(true); }","id":59028,"modified_method":"public void testStatementOutsideClosure() throws Throwable { downTest(); }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public final void move(Editor editor, final PsiFile file) {\n    if (toMove == null || toMove2 == null) return;\n    final Document document = editor.getDocument();\n    final int start = getLineStartSafeOffset(document, toMove.startLine);\n    final int end = getLineStartSafeOffset(document, toMove.endLine);\n    range1 = document.createRangeMarker(start, end);\n\n    String textToInsert = document.getCharsSequence().subSequence(start, end).toString();\n    if (!StringUtil.endsWithChar(textToInsert, '\\n')) textToInsert += '\\n';\n\n    final int start2 = document.getLineStartOffset(toMove2.startLine);\n    final int end2 = getLineStartSafeOffset(document, toMove2.endLine);\n    String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString();\n    if (!StringUtil.endsWithChar(textToInsert2, '\\n')) textToInsert2 += '\\n';\n    range2 = document.createRangeMarker(start2, end2);\n    if (range1.getStartOffset() < range2.getStartOffset()) {\n      range1.setGreedyToLeft(true);\n      range1.setGreedyToRight(false);\n      range2.setGreedyToLeft(true);\n      range2.setGreedyToRight(true);\n    } else {\n      range1.setGreedyToLeft(true);\n      range1.setGreedyToRight(true);\n      range2.setGreedyToLeft(true);\n      range2.setGreedyToRight(false);\n    }\n\n    final CaretModel caretModel = editor.getCaretModel();\n    final int caretRelativePos = caretModel.getOffset() - start;\n    final SelectionModel selectionModel = editor.getSelectionModel();\n    final int selectionStart = selectionModel.getSelectionStart();\n    final int selectionEnd = selectionModel.getSelectionEnd();\n    final boolean hasSelection = selectionModel.hasSelection();\n\n    // to prevent flicker\n    caretModel.moveToOffset(0);\n\n    document.insertString(range1.getStartOffset(), textToInsert2);\n    document.deleteString(range1.getStartOffset() + textToInsert2.length(), range1.getEndOffset());\n\n    document.insertString(range2.getStartOffset(), textToInsert);\n    document.deleteString(range2.getStartOffset() + textToInsert.length(), range2.getEndOffset());\n\n    final Project project = file.getProject();\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    if (hasSelection) {\n      restoreSelection(editor, selectionStart, selectionEnd, start, range2.getStartOffset());\n    }\n\n    PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();\n    caretModel.moveToOffset(range2.getStartOffset() + caretRelativePos);\n\n    final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project);\n    if (range1.isValid()) {\n      codeStyleManager.adjustLineIndent(file, new TextRange(range1.getStartOffset(), range1.getEndOffset()));\n    }\n    if (range2.isValid()) {\n      codeStyleManager.adjustLineIndent(file, new TextRange(range2.getStartOffset(), range2.getEndOffset()));\n    }\n    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n  }","id":59029,"modified_method":"public final void move(Editor editor, final PsiFile file) {\n    if (toMove2 == null) return;\n    final Document document = editor.getDocument();\n    final int start = getLineStartSafeOffset(document, toMove.startLine);\n    final int end = getLineStartSafeOffset(document, toMove.endLine);\n    RangeMarker range1 = document.createRangeMarker(start, end);\n\n    final int start2 = document.getLineStartOffset(toMove2.startLine);\n    final int end2 = getLineStartSafeOffset(document, toMove2.endLine);\n    RangeMarker range2 = document.createRangeMarker(start2, end2);\n\n    String textToInsert = extractTextToInsert(document, start, end, end2 != document.getTextLength());\n\n    String textToInsert2 = extractTextToInsert(document, start2, end2, end != document.getTextLength());\n\n\n    if (range1.getStartOffset() < range2.getStartOffset()) {\n      range1.setGreedyToLeft(true);\n      range1.setGreedyToRight(false);\n      range2.setGreedyToLeft(true);\n      range2.setGreedyToRight(true);\n    } else {\n      range1.setGreedyToLeft(true);\n      range1.setGreedyToRight(true);\n      range2.setGreedyToLeft(true);\n      range2.setGreedyToRight(false);\n    }\n\n    final CaretModel caretModel = editor.getCaretModel();\n    final int caretRelativePos = caretModel.getOffset() - start;\n    final SelectionModel selectionModel = editor.getSelectionModel();\n    final int selectionStart = selectionModel.getSelectionStart();\n    final int selectionEnd = selectionModel.getSelectionEnd();\n    final boolean hasSelection = selectionModel.hasSelection();\n\n    // to prevent flicker\n    caretModel.moveToOffset(0);\n\n    document.insertString(range1.getStartOffset(), textToInsert2);\n    document.deleteString(range1.getStartOffset() + textToInsert2.length(), range1.getEndOffset());\n\n    document.insertString(range2.getStartOffset(), textToInsert);\n    document.deleteString(range2.getStartOffset() + textToInsert.length(), range2.getEndOffset());\n\n    final Project project = file.getProject();\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    if (hasSelection) {\n      restoreSelection(editor, selectionStart, selectionEnd, start, range2.getStartOffset());\n    }\n\n    caretModel.moveToOffset(range2.getStartOffset() + caretRelativePos);\n\n    reindentLines(document, project, range1, range2);\n\n    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n  }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean checkMovingInsideOutside(PsiFile file, final Editor editor, final LineRange result) {\n    final int offset = editor.getCaretModel().getOffset();\n\n    PsiElement guard = file.getViewProvider().findElementAt(offset);\n    if (guard == null) return false;\n\n    // cannot move in/outside method/class/closure/comment\n    Class<? extends PsiElement>[] classes = new Class[]{GrMethod.class, GrTypeDefinition.class, PsiComment.class, GroovyFile.class};\n    guard = PsiTreeUtil.getParentOfType(guard, classes);\n    if (!calcInsertOffset(file, editor, result)) return false;\n    int insertOffset = isDown ? getLineStartSafeOffset(editor.getDocument(), toMove2.endLine) - 1 : editor.getDocument().getLineStartOffset(toMove2.startLine);\n\n    PsiElement newGuard = file.getViewProvider().findElementAt(insertOffset);\n    newGuard = PsiTreeUtil.getParentOfType(newGuard, classes);\n    if (newGuard == guard && isInside(insertOffset, newGuard) == isInside(offset, guard)) return true;\n\n    return false;\n  }","id":59030,"modified_method":"private boolean checkMovingInsideOutside(PsiFile file, final Editor editor, final LineRange result) {\n    final int offset = editor.getCaretModel().getOffset();\n\n    PsiElement guard = file.getViewProvider().findElementAt(offset);\n    if (guard == null) return false;\n\n\n\n    return true;\n  }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected boolean checkAvailable(Editor editor, PsiFile file) {\n    final boolean available = super.checkAvailable(editor, file);\n    if (!available) return false;\n    LineRange range = toMove;\n\n    if (editor == null) return false;\n    range = expandLineRangeToCoverPsiElements(range, editor, file);\n    if (range == null) return false;\n    final int startOffset = editor.logicalPositionToOffset(new LogicalPosition(range.startLine, 0));\n    final int endOffset = editor.logicalPositionToOffset(new LogicalPosition(range.endLine, 0));\n    final PsiElement[] statements = GroovyRefactoringUtil.findStatementsInRange(file, startOffset, endOffset, false);\n    if (statements.length == 0) return false;\n    for (final PsiElement statement : statements) {\n      if (statement instanceof GrMembersDeclaration) {\n        final GrMembersDeclaration declaration = (GrMembersDeclaration)statement;\n        if (declaration.getMembers().length > 0) {\n          return false;\n        }\n      }\n    }\n\n    range.firstElement = statements[0];\n    range.lastElement = statements[statements.length - 1];\n\n    if (!checkMovingInsideOutside(file, editor, range)) {\n      toMove2 = null;\n      return true;\n    }\n    return true;\n  }","id":59031,"modified_method":"protected boolean checkAvailable(Editor editor, PsiFile file) {\n    final boolean available = super.checkAvailable(editor, file);\n    if (!available) return false;\n    LineRange range = toMove;\n\n    if (editor == null) return false;\n    range = expandLineRangeToCoverPsiElements(range, editor, file);\n    if (range == null) return false;\n    final int startOffset = editor.logicalPositionToOffset(new LogicalPosition(range.startLine, 0));\n    final int endOffset = editor.logicalPositionToOffset(new LogicalPosition(range.endLine, 0));\n    final PsiElement[] statements = GroovyRefactoringUtil.findStatementsInRange(file, startOffset, endOffset, false);\n    if (statements.length == 0) return false;\n    for (final PsiElement statement : statements) {\n      if (statement instanceof GrMembersDeclaration) {\n        final GrMembersDeclaration declaration = (GrMembersDeclaration)statement;\n        if (declaration.getMembers().length > 0) {\n          return false;\n        }\n      }\n    }\n\n    range.firstElement = statements[0];\n    range.lastElement = statements[statements.length - 1];\n\n    final PsiElement commonParent = PsiTreeUtil.findCommonParent(range.firstElement, range.lastElement);\n\n    // cannot move in/outside method/class/comment\n    Class<? extends PsiElement>[] classes = new Class[]{GrMethod.class, GrTypeDefinition.class, PsiComment.class, GroovyFile.class};\n    PsiElement guard = PsiTreeUtil.getParentOfType(commonParent, classes);\n    if (!calcInsertOffset(file, editor, range)) return false;\n    final Document document = editor.getDocument();\n    int insertOffset = isDown ? getLineStartSafeOffset(document, toMove2.endLine) - 1 : document.getLineStartOffset(toMove2.startLine);\n\n    PsiElement newGuard = file.getViewProvider().findElementAt(insertOffset);\n    newGuard = PsiTreeUtil.getParentOfType(newGuard, classes);\n    if (newGuard != null && newGuard != guard && isInside(insertOffset, newGuard) != PsiTreeUtil.isAncestor(newGuard, range.lastElement, false)) {\n      if (!PsiTreeUtil.isAncestor(guard, newGuard, false)) {\n        return false;\n      }\n      toMove2 = new LineRange(newGuard, newGuard, document);\n    }\n\n    return true;\n  }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean calcInsertOffset(PsiFile file, final Editor editor, LineRange range) {\n    int line = isDown ? range.endLine + 1 : range.startLine - 1;\n    int startLine = isDown ? range.endLine : range.startLine - 1;\n    if (line < 0 || startLine < 0) return false;\n\n    while (true) {\n      final int offset = editor.logicalPositionToOffset(new LogicalPosition(line, 0));\n      PsiElement element = firstNonWhiteElement(offset, file, true, true);\n\n      while (element != null && !(element instanceof PsiFile)) {\n        if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {\n          boolean found = false;\n          if ((element instanceof GrTopStatement || element instanceof PsiComment)\n              && statementCanBePlacedAlong(element)) {\n            found = true;\n          } else if (element.getNode() != null &&\n              element.getNode().getElementType() == GroovyTokenTypes.mRCURLY) {\n            // before code block closing brace\n            found = true;\n          }\n          if (found) {\n            toMove = range;\n            int endLine = line;\n            if (startLine > endLine) {\n              int tmp = endLine;\n              endLine = startLine;\n              startLine = tmp;\n            }\n//            startLine--;\n//            endLine--;\n            toMove2 = isDown ? new LineRange(startLine, endLine) : new LineRange(startLine, endLine + 1);\n            return true;\n          }\n        }\n        element = element.getParent();\n      }\n      line += isDown ? 1 : -1;\n      if (line == 0 || line >= editor.getDocument().getLineCount()) {\n        return false;\n      }\n    }\n  }","id":59032,"modified_method":"private boolean calcInsertOffset(PsiFile file, final Editor editor, LineRange range) {\n    int line = isDown ? range.endLine + 1 : range.startLine - 1;\n    int startLine = isDown ? range.endLine : range.startLine - 1;\n    if (line < 0 || startLine < 0) return false;\n\n    while (true) {\n      final int offset = editor.logicalPositionToOffset(new LogicalPosition(line, 0));\n      if (offset == file.getTextLength()) {\n        return true;\n      }\n\n      PsiElement element = firstNonWhiteElement(offset, file, true, true);\n\n      while (element != null && !(element instanceof PsiFile)) {\n        if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {\n          boolean found = false;\n          if ((element instanceof GrTopStatement || element instanceof PsiComment)\n              && statementCanBePlacedAlong(element)) {\n            found = true;\n          } else if (element.getNode() != null &&\n              element.getNode().getElementType() == GroovyTokenTypes.mRCURLY) {\n            // before code block closing brace\n            found = true;\n          }\n          if (found) {\n            toMove = range;\n            int endLine = line;\n            if (startLine > endLine) {\n              int tmp = endLine;\n              endLine = startLine;\n              startLine = tmp;\n            }\n//            startLine--;\n//            endLine--;\n            toMove2 = isDown ? new LineRange(startLine, endLine) : new LineRange(startLine, endLine + 1);\n            return true;\n          }\n        }\n        element = element.getParent();\n      }\n      line += isDown ? 1 : -1;\n      if (line == 0 || line >= editor.getDocument().getLineCount()) {\n        return false;\n      }\n    }\n  }","commit_id":"5546d03c0a3cdf06a3453d32924c6be16b3e868d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void notifySubscribers(\n\t\t\tFileVersion fileVersion, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!fileVersion.isApproved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = fileVersion.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.DOCUMENT_LIBRARY;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tfileVersion.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (serviceContext.isCommandAdd() &&\n\t\t\tDLUtil.getEmailFileEntryAddedEnabled(preferences)) {\n\t\t}\n\t\telse if (serviceContext.isCommandUpdate() &&\n\t\t\tDLUtil.getEmailFileEntryUpdatedEnabled(preferences)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tString fromName = DLUtil.getEmailFromName(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\t\tString fromAddress = DLUtil.getEmailFromAddress(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tFolder folder = null;\n\n\t\ttry {\n\t\t\tFileEntry fileEntry = fileVersion.getFileEntry();\n\n\t\t\tlong folderId = fileEntry.getFolderId();\n\n\t\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tfolder = dlAppLocalService.getFolder(folderId);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn;\n\t\t}\n\n\t\tString folderName = LanguageUtil.get(\n\t\t\tserviceContext.getLocale(), \"home\");\n\n\t\tif (folder != null) {\n\t\t\tfolderName = folder.getName();\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tsubscriptionSender.setCompanyId(fileVersion.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$DOCUMENT_STATUS_BY_USER_NAME$]\",\n\t\t\tfileVersion.getStatusByUserName(), \"[$DOCUMENT_TITLE$]\",\n\t\t\tfileVersion.getTitle(), \"[$FOLDER_NAME$]\", folderName);\n\t\tsubscriptionSender.setContextUserPrefix(\"DOCUMENT\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\n\t\t\t\"file_entry\", fileVersion.getFileEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.DOCUMENT_LIBRARY);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(fileVersion.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(fileVersion.getUserId());\n\n\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\tFolder.class.getName(), fileVersion.getGroupId());\n\n\t\tList<Long> folderIds = new ArrayList<Long>();\n\n\t\tif (folder != null) {\n\t\t\tfolderIds.add(folder.getFolderId());\n\n\t\t\tfolderIds.addAll(folder.getAncestorFolderIds());\n\t\t}\n\n\t\tfor (long folderId : folderIds) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tFolder.class.getName(), folderId);\n\t\t}\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","id":59033,"modified_method":"protected void notifySubscribers(\n\t\t\tFileVersion fileVersion, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!fileVersion.isApproved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = fileVersion.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.DOCUMENT_LIBRARY;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tfileVersion.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (serviceContext.isCommandAdd() &&\n\t\t\tDLUtil.getEmailFileEntryAddedEnabled(preferences)) {\n\t\t}\n\t\telse if (serviceContext.isCommandUpdate() &&\n\t\t\tDLUtil.getEmailFileEntryUpdatedEnabled(preferences)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tString fromName = DLUtil.getEmailFromName(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\t\tString fromAddress = DLUtil.getEmailFromAddress(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tFolder folder = null;\n\n\t\ttry {\n\t\t\tFileEntry fileEntry = fileVersion.getFileEntry();\n\n\t\t\tlong folderId = fileEntry.getFolderId();\n\n\t\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tfolder = dlAppLocalService.getFolder(folderId);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn;\n\t\t}\n\n\t\tString folderName = LanguageUtil.get(\n\t\t\tserviceContext.getLocale(), \"home\");\n\n\t\tif (folder != null) {\n\t\t\tfolderName = folder.getName();\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tDLFileEntry dlFileEntry =\n\t\t\tDLFileEntryLocalServiceUtil.getDLFileEntry(\n\t\t\tfileVersion.getFileEntryId());\n\n\t\tDLFileEntryType fileEntryType =\n\t\t\tDLFileEntryTypeLocalServiceUtil.getDLFileEntryType(\n\t\t\tdlFileEntry.getFileEntryTypeId());\n\n\t\tsubscriptionSender.setCompanyId(fileVersion.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$DOCUMENT_STATUS_BY_USER_NAME$]\",\n\t\t\tfileVersion.getStatusByUserName(), \"[$DOCUMENT_TITLE$]\",\n\t\t\tfileVersion.getTitle(), \"[$DOCUMENT_TYPE$]\",\n\t\t\tfileEntryType.getName(), \"[$FOLDER_NAME$]\", folderName);\n\t\tsubscriptionSender.setContextUserPrefix(\"DOCUMENT\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\n\t\t\t\"file_entry\", fileVersion.getFileEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.DOCUMENT_LIBRARY);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(fileVersion.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(fileVersion.getUserId());\n\n\t\tString[] classNames =\n\t\t\t{Folder.class.getName(), DLFileEntryType.class.getName()};\n\n\t\tfor (int i = 0; i < classNames.length; i++) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tclassNames[i], fileVersion.getGroupId());\n\t\t}\n\n\t\tList<Long> folderIds = new ArrayList<Long>();\n\n\t\tif (folder != null) {\n\t\t\tfolderIds.add(folder.getFolderId());\n\n\t\t\tfolderIds.addAll(folder.getAncestorFolderIds());\n\t\t}\n\n\t\tfor (long folderId : folderIds) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tFolder.class.getName(), folderId);\n\t\t}\n\n\t\tif (fileEntryType.getFileEntryTypeId() != 0) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tDLFileEntryType.class.getName(),\n\t\t\t\tfileEntryType.getFileEntryTypeId());\n\t\t}\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","commit_id":"30793a0bbf2650c6df998d9f3541ae94dd604072","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void notifySubscribers(\n\t\t\tFileVersion fileVersion, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!fileVersion.isApproved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = fileVersion.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.DOCUMENT_LIBRARY;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tfileVersion.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (serviceContext.isCommandAdd() &&\n\t\t\tDLUtil.getEmailFileEntryAddedEnabled(preferences)) {\n\t\t}\n\t\telse if (serviceContext.isCommandUpdate() &&\n\t\t\tDLUtil.getEmailFileEntryUpdatedEnabled(preferences)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tString fromName = DLUtil.getEmailFromName(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\t\tString fromAddress = DLUtil.getEmailFromAddress(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tFolder folder = null;\n\n\t\ttry {\n\t\t\tFileEntry fileEntry = fileVersion.getFileEntry();\n\n\t\t\tlong folderId = fileEntry.getFolderId();\n\n\t\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tfolder = dlAppLocalService.getFolder(folderId);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn;\n\t\t}\n\n\t\tString folderName = LanguageUtil.get(\n\t\t\tserviceContext.getLocale(), \"home\");\n\n\t\tif (folder != null) {\n\t\t\tfolderName = folder.getName();\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tDLFileEntry dlFileEntry =\n\t\t\tDLFileEntryLocalServiceUtil.getDLFileEntry(\n\t\t\tfileVersion.getFileEntryId());\n\n\t\tDLFileEntryType fileEntryType =\n\t\t\tDLFileEntryTypeLocalServiceUtil.getDLFileEntryType(\n\t\t\tdlFileEntry.getFileEntryTypeId());\n\n\t\tsubscriptionSender.setCompanyId(fileVersion.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$DOCUMENT_STATUS_BY_USER_NAME$]\",\n\t\t\tfileVersion.getStatusByUserName(), \"[$DOCUMENT_TITLE$]\",\n\t\t\tfileVersion.getTitle(), \"[$DOCUMENT_TYPE$]\",\n\t\t\tfileEntryType.getName(), \"[$FOLDER_NAME$]\", folderName);\n\t\tsubscriptionSender.setContextUserPrefix(\"DOCUMENT\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\n\t\t\t\"file_entry\", fileVersion.getFileEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.DOCUMENT_LIBRARY);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(fileVersion.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(fileVersion.getUserId());\n\n\t\tString[] classNames =\n\t\t\t{Folder.class.getName(), DLFileEntryType.class.getName()};\n\n\t\tfor (int i = 0; i < classNames.length; i++) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tclassNames[i], fileVersion.getGroupId());\n\t\t}\n\n\t\tList<Long> folderIds = new ArrayList<Long>();\n\n\t\tif (folder != null) {\n\t\t\tfolderIds.add(folder.getFolderId());\n\n\t\t\tfolderIds.addAll(folder.getAncestorFolderIds());\n\t\t}\n\n\t\tfor (long folderId : folderIds) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tFolder.class.getName(), folderId);\n\t\t}\n\n\t\tif (fileEntryType.getFileEntryTypeId() != 0) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tDLFileEntryType.class.getName(),\n\t\t\t\tfileEntryType.getFileEntryTypeId());\n\t\t}\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","id":59034,"modified_method":"protected void notifySubscribers(\n\t\t\tFileVersion fileVersion, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!fileVersion.isApproved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = fileVersion.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.DOCUMENT_LIBRARY;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tfileVersion.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (serviceContext.isCommandAdd() &&\n\t\t\tDLUtil.getEmailFileEntryAddedEnabled(preferences)) {\n\t\t}\n\t\telse if (serviceContext.isCommandUpdate() &&\n\t\t\tDLUtil.getEmailFileEntryUpdatedEnabled(preferences)) {\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\tString fromName = DLUtil.getEmailFromName(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\t\tString fromAddress = DLUtil.getEmailFromAddress(\n\t\t\tpreferences, fileVersion.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = DLUtil.getEmailFileEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = DLUtil.getEmailFileEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tFileEntry fileEntry = fileVersion.getFileEntry();\n\n\t\tlong folderId = fileEntry.getFolderId();\n\n\t\tFolder folder = null;\n\n\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tfolder = dlAppLocalService.getFolder(folderId);\n\t\t}\n\n\t\tString folderName = LanguageUtil.get(\n\t\t\tserviceContext.getLocale(), \"home\");\n\n\t\tif (folder != null) {\n\t\t\tfolderName = folder.getName();\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tDLFileEntry dlFileEntry = (DLFileEntry)fileEntry.getModel();\n\n\t\tDLFileEntryType fileEntryType =\n\t\t\tDLFileEntryTypeLocalServiceUtil.getDLFileEntryType(\n\t\t\tdlFileEntry.getFileEntryTypeId());\n\n\t\tsubscriptionSender.setCompanyId(fileVersion.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$DOCUMENT_STATUS_BY_USER_NAME$]\",\n\t\t\tfileVersion.getStatusByUserName(), \"[$DOCUMENT_TITLE$]\",\n\t\t\tfileVersion.getTitle(), \"[$DOCUMENT_TYPE$]\",\n\t\t\tfileEntryType.getName(), \"[$FOLDER_NAME$]\", folderName);\n\t\tsubscriptionSender.setContextUserPrefix(\"DOCUMENT\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\n\t\t\t\"file_entry\", fileVersion.getFileEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.DOCUMENT_LIBRARY);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(fileVersion.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(fileVersion.getUserId());\n\n\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\tFolder.class.getName(), fileVersion.getGroupId());\n\n\t\tList<Long> folderIds = new ArrayList<Long>();\n\n\t\tif (folder != null) {\n\t\t\tfolderIds.add(folder.getFolderId());\n\n\t\t\tfolderIds.addAll(folder.getAncestorFolderIds());\n\t\t}\n\n\t\tfor (long curFolderId : folderIds) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tFolder.class.getName(), curFolderId);\n\t\t}\n\n\t\tif (fileEntryType.getFileEntryTypeId() !=\n\t\t\t\tDLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_BASIC_DOCUMENT) {\n\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tDLFileEntryType.class.getName(),\n\t\t\t\tfileEntryType.getFileEntryTypeId());\n\t\t}\n\t\telse {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tDLFileEntryType.class.getName(), fileVersion.getGroupId());\n\t\t}\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","commit_id":"0a78f63fd4914b51d8b9cd915687ec8b301168a5","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void notifySubscribers(\n\t\t\tBookmarksEntry entry, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tString layoutFullURL = serviceContext.getLayoutFullURL();\n\n\t\tif (Validator.isNull(layoutFullURL)) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = entry.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.BOOKMARKS;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tentry.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif (serviceContext.isCommandAdd() &&\n\t\t\t !BookmarksUtil.getEmailEntryAddedEnabled(preferences) ||\n\t\t\t(serviceContext.isCommandUpdate() &&\n\t\t\t !BookmarksUtil.getEmailEntryUpdatedEnabled(preferences))) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString statusByUserName = StringPool.BLANK;\n\n\t\ttry {\n\t\t\tUser user = userLocalService.getUserById(\n\t\t\t\tserviceContext.getGuestOrUserId());\n\n\t\t\tstatusByUserName = user.getFullName();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\tString entryURL =\n\t\t\tlayoutFullURL + Portal.FRIENDLY_URL_SEPARATOR + \"bookmarks\" +\n\t\t\t\tStringPool.SLASH + entry.getEntryId();\n\n\t\tString fromName = BookmarksUtil.getEmailFromName(\n\t\t\tpreferences, entry.getCompanyId());\n\t\tString fromAddress = BookmarksUtil.getEmailFromAddress(\n\t\t\tpreferences, entry.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = BookmarksUtil.getEmailEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = BookmarksUtil.getEmailEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = BookmarksUtil.getEmailEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = BookmarksUtil.getEmailEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tsubscriptionSender.setCompanyId(entry.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]\", statusByUserName,\n\t\t\t\"[$BOOKMARKS_ENTRY_URL$]\", entryURL);\n\t\tsubscriptionSender.setContextUserPrefix(\"BOOKMARKS_ENTRY\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\"bookmarks_entry\", entry.getEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.BOOKMARKS);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(entry.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(entry.getUserId());\n\n\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\tBookmarksEntry.class.getName(), entry.getEntryId());\n\n\t\tBookmarksFolder folder = entry.getFolder();\n\n\t\tList<Long> folderIds = new ArrayList<Long>();\n\n\t\tif (folder.getFolderId() !=\n\t\t\t\tBookmarksFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tfolderIds.add(folder.getFolderId());\n\n\t\t\tfolderIds.addAll(folder.getAncestorFolderIds());\n\t\t}\n\n\t\tfolderIds.add(folder.getGroupId());\n\n\t\tfor (long folderId : folderIds) {\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tBookmarksFolder.class.getName(), folderId);\n\t\t}\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","id":59035,"modified_method":"protected void notifySubscribers(\n\t\t\tBookmarksEntry entry, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\tString layoutFullURL = serviceContext.getLayoutFullURL();\n\n\t\tif (Validator.isNull(layoutFullURL)) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\tif (preferences == null) {\n\t\t\tlong ownerId = entry.getGroupId();\n\t\t\tint ownerType = PortletKeys.PREFS_OWNER_TYPE_GROUP;\n\t\t\tlong plid = PortletKeys.PREFS_PLID_SHARED;\n\t\t\tString portletId = PortletKeys.BOOKMARKS;\n\t\t\tString defaultPreferences = null;\n\n\t\t\tpreferences = portletPreferencesLocalService.getPreferences(\n\t\t\t\tentry.getCompanyId(), ownerId, ownerType, plid, portletId,\n\t\t\t\tdefaultPreferences);\n\t\t}\n\n\t\tif ((serviceContext.isCommandAdd() &&\n\t\t\t !BookmarksUtil.getEmailEntryAddedEnabled(preferences)) ||\n\t\t\t(serviceContext.isCommandUpdate() &&\n\t\t\t !BookmarksUtil.getEmailEntryUpdatedEnabled(preferences))) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString statusByUserName = StringPool.BLANK;\n\n\t\ttry {\n\t\t\tUser user = userLocalService.getUserById(\n\t\t\t\tserviceContext.getGuestOrUserId());\n\n\t\t\tstatusByUserName = user.getFullName();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\n\t\tString entryURL =\n\t\t\tlayoutFullURL + Portal.FRIENDLY_URL_SEPARATOR + \"bookmarks\" +\n\t\t\t\tStringPool.SLASH + entry.getEntryId();\n\n\t\tString fromAddress = BookmarksUtil.getEmailFromAddress(\n\t\t\tpreferences, entry.getCompanyId());\n\t\tString fromName = BookmarksUtil.getEmailFromName(\n\t\t\tpreferences, entry.getCompanyId());\n\n\t\tMap<Locale, String> localizedSubjectMap = null;\n\t\tMap<Locale, String> localizedBodyMap = null;\n\n\t\tif (serviceContext.isCommandUpdate()) {\n\t\t\tlocalizedSubjectMap = BookmarksUtil.getEmailEntryUpdatedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = BookmarksUtil.getEmailEntryUpdatedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\t\telse {\n\t\t\tlocalizedSubjectMap = BookmarksUtil.getEmailEntryAddedSubjectMap(\n\t\t\t\tpreferences);\n\t\t\tlocalizedBodyMap = BookmarksUtil.getEmailEntryAddedBodyMap(\n\t\t\t\tpreferences);\n\t\t}\n\n\t\tSubscriptionSender subscriptionSender = new SubscriptionSender();\n\n\t\tsubscriptionSender.setCompanyId(entry.getCompanyId());\n\t\tsubscriptionSender.setContextAttributes(\n\t\t\t\"[$BOOKMARKS_ENTRY_STATUS_BY_USER_NAME$]\", statusByUserName,\n\t\t\t\"[$BOOKMARKS_ENTRY_URL$]\", entryURL);\n\t\tsubscriptionSender.setContextUserPrefix(\"BOOKMARKS_ENTRY\");\n\t\tsubscriptionSender.setFrom(fromAddress, fromName);\n\t\tsubscriptionSender.setHtmlFormat(true);\n\t\tsubscriptionSender.setLocalizedBodyMap(localizedBodyMap);\n\t\tsubscriptionSender.setLocalizedSubjectMap(localizedSubjectMap);\n\t\tsubscriptionSender.setMailId(\"bookmarks_entry\", entry.getEntryId());\n\t\tsubscriptionSender.setPortletId(PortletKeys.BOOKMARKS);\n\t\tsubscriptionSender.setReplyToAddress(fromAddress);\n\t\tsubscriptionSender.setScopeGroupId(entry.getGroupId());\n\t\tsubscriptionSender.setServiceContext(serviceContext);\n\t\tsubscriptionSender.setUserId(entry.getUserId());\n\n\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\tBookmarksEntry.class.getName(), entry.getEntryId());\n\n\t\tBookmarksFolder folder = entry.getFolder();\n\n\t\tif (folder.getFolderId() !=\n\t\t\t\tBookmarksFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\tBookmarksFolder.class.getName(), folder.getFolderId());\n\n\t\t\tfor (BookmarksFolder ancestor : folder.getAncestors()) {\n\t\t\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\t\t\tBookmarksFolder.class.getName(), ancestor.getFolderId());\n\t\t\t}\n\t\t}\n\n\t\tsubscriptionSender.addPersistedSubscribers(\n\t\t\tBookmarksFolder.class.getName(), folder.getGroupId());\n\n\t\tsubscriptionSender.flushNotificationsAsync();\n\t}","commit_id":"5b2defcba46ae0e93682f4699855a7d9ad56c05b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JPanel getComponent() {\n    JPanel panel = new JPanel(new BorderLayout());\n    panel.add(new JLabel(SSRBundle.message(\"SSRInspection.selected.templates\")));\n    panel.add(\n      ToolbarDecorator.createDecorator(myTemplatesList)\n        .setAddAction(new AnActionButtonRunnable() {\n          @Override\n          public void run(AnActionButton button) {\n            final AnAction[] children = new AnAction[]{\n              new AnAction(SSRBundle.message(\"SSRInspection.add.search.template.button\")) {\n                @Override\n                public void actionPerformed(AnActionEvent e) {\n                  addTemplate(new SearchDialogFactory() {\n                    public SearchDialog createDialog(SearchContext searchContext) {\n                      return new SearchDialog(searchContext, false, false);\n                    }\n                  });\n                }\n              },\n              new AnAction(SSRBundle.message(\"SSRInspection.add.replace.template.button\")) {\n                @Override\n                public void actionPerformed(AnActionEvent e) {\n                  addTemplate(new SearchDialogFactory() {\n                    public SearchDialog createDialog(SearchContext searchContext) {\n                      return new ReplaceDialog(searchContext, false, false);\n                    }\n                  });\n                }\n              }\n            };\n            JBPopupFactory.getInstance().createActionGroupPopup(null, new DefaultActionGroup(children),\n                                                                DataManager.getInstance()\n                                                                  .getDataContext(button.getContextComponent()),\n                                                                JBPopupFactory.ActionSelectionAid.SPEEDSEARCH, true)\n              .show(button.getPreferredPopupPoint());\n          }\n        }).setEditAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performEditAction();\n        }\n      }).setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          Object[] selected = myTemplatesList.getSelectedValues();\n          for (Object o : selected) {\n            Configuration configuration = (Configuration)o;\n            Iterator<Configuration> iterator = myConfigurations.iterator();\n            while (iterator.hasNext()) {\n              Configuration configuration1 = iterator.next();\n              if (configuration1.getName().equals(configuration.getName())) {\n                iterator.remove();\n              }\n            }\n          }\n          configurationsChanged(createSearchContext());\n        }\n      }).setMoveUpAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performMoveUpDown(false);\n        }\n      }).setMoveDownAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performMoveUpDown(true);\n        }\n      })\n        .setPreferredSize(new Dimension(-1, 100))\n        .createPanel()\n    );\n    new DoubleClickListener() {\n      @Override\n      protected boolean onDoubleClick(MouseEvent e) {\n        performEditAction();\n        return true;\n      }\n    }.installOn(myTemplatesList);\n    return panel;\n  }","id":59036,"modified_method":"public JPanel getComponent() {\n    final JPanel panel = new JPanel(new BorderLayout());\n    panel.add(new JLabel(SSRBundle.message(\"SSRInspection.selected.templates\")));\n    panel.add(\n      ToolbarDecorator.createDecorator(myTemplatesList)\n        .setAddAction(new AnActionButtonRunnable() {\n          @Override\n          public void run(AnActionButton button) {\n            final AnAction[] children = new AnAction[]{\n              new AnAction(SSRBundle.message(\"SSRInspection.add.search.template.button\")) {\n                @Override\n                public void actionPerformed(AnActionEvent e) {\n                  addTemplate(new SearchDialogFactory() {\n                    public SearchDialog createDialog(SearchContext searchContext) {\n                      return new SearchDialog(searchContext, false, false);\n                    }\n                  });\n                }\n              },\n              new AnAction(SSRBundle.message(\"SSRInspection.add.replace.template.button\")) {\n                @Override\n                public void actionPerformed(AnActionEvent e) {\n                  addTemplate(new SearchDialogFactory() {\n                    public SearchDialog createDialog(SearchContext searchContext) {\n                      return new ReplaceDialog(searchContext, false, false);\n                    }\n                  });\n                }\n              }\n            };\n            JBPopupFactory.getInstance().createActionGroupPopup(null, new DefaultActionGroup(children),\n                                                                DataManager.getInstance()\n                                                                  .getDataContext(button.getContextComponent()),\n                                                                JBPopupFactory.ActionSelectionAid.SPEEDSEARCH, true)\n              .show(button.getPreferredPopupPoint());\n          }\n        }).setEditAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performEditAction();\n        }\n      }).setEditActionUpdater(new AnActionButtonUpdater() {\n        @Override\n        public boolean isEnabled(AnActionEvent e) {\n          final Project project = e.getProject();\n          return project != null && !DumbService.isDumb(project);\n        }\n      }).setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          Object[] selected = myTemplatesList.getSelectedValues();\n          for (Object o : selected) {\n            Configuration configuration = (Configuration)o;\n            Iterator<Configuration> iterator = myConfigurations.iterator();\n            while (iterator.hasNext()) {\n              Configuration configuration1 = iterator.next();\n              if (configuration1.getName().equals(configuration.getName())) {\n                iterator.remove();\n              }\n            }\n          }\n          configurationsChanged(createSearchContext());\n        }\n      }).setRemoveActionUpdater(new AnActionButtonUpdater() {\n        @Override\n        public boolean isEnabled(AnActionEvent e) {\n          final Project project = e.getProject();\n          return project != null && !DumbService.isDumb(project);\n        }\n      })\n        .setMoveUpAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performMoveUpDown(false);\n        }\n      }).setMoveDownAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          performMoveUpDown(true);\n        }\n      })\n        .setPreferredSize(new Dimension(-1, 100))\n        .createPanel()\n    );\n    new DoubleClickListener() {\n      @Override\n      protected boolean onDoubleClick(MouseEvent e) {\n        final Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(panel));\n        if (project != null && !DumbService.isDumb(project)) {\n          performEditAction();\n        }\n        return true;\n      }\n    }.installOn(myTemplatesList);\n    return panel;\n  }","commit_id":"c36b3c1815fa262ff90a726f3a0e927e78e65bfb","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ExistingTemplatesComponent(Project project) {\n\n    this.project = project;\n    final DefaultMutableTreeNode root;\n    patternTreeModel = new DefaultTreeModel(\n      root = new DefaultMutableTreeNode(null)\n    );\n\n    DefaultMutableTreeNode parent = null;\n    String lastCategory = null;\n    LinkedList<Object> nodesToExpand = new LinkedList<Object>();\n\n    final List<Configuration> predefined = StructuralSearchUtil.getPredefinedTemplates();\n    for (final Configuration info : predefined) {\n      final DefaultMutableTreeNode node = new DefaultMutableTreeNode(info);\n\n      if (lastCategory == null || !lastCategory.equals(info.getCategory())) {\n        if (info.getCategory().length() > 0) {\n          root.add(parent = new DefaultMutableTreeNode(info.getCategory()));\n          nodesToExpand.add(parent);\n          lastCategory = info.getCategory();\n        }\n        else {\n          root.add(node);\n          continue;\n        }\n      }\n\n      parent.add(node);\n    }\n\n    parent = new DefaultMutableTreeNode(SSRBundle.message(\"user.defined.category\"));\n    userTemplatesNode = parent;\n    root.add(parent);\n    nodesToExpand.add(parent);\n\n    final ConfigurationManager configurationManager = StructuralSearchPlugin.getInstance(this.project).getConfigurationManager();\n    if (configurationManager.getConfigurations() != null) {\n      for (final Configuration config : configurationManager.getConfigurations()) {\n        parent.add(new DefaultMutableTreeNode(config));\n      }\n    }\n\n    patternTree = createTree(patternTreeModel);\n\n    for (final Object aNodesToExpand : nodesToExpand) {\n      patternTree.expandPath(\n        new TreePath(new Object[]{root, aNodesToExpand})\n      );\n    }\n\n    panel = ToolbarDecorator.createDecorator(patternTree)\n      .setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          Object selection = patternTree.getLastSelectedPathComponent();\n\n          if (selection instanceof DefaultMutableTreeNode) {\n            DefaultMutableTreeNode node = (DefaultMutableTreeNode)selection;\n\n            if (node.getUserObject() instanceof Configuration) {\n              Configuration configuration = (Configuration)node.getUserObject();\n              patternTreeModel.removeNodeFromParent(node);\n              configurationManager.removeConfiguration(configuration);\n            }\n          }\n        }\n      }).createPanel();\n\n      new JPanel(new BorderLayout());\n\n    configureSelectTemplateAction(patternTree);\n\n    historyModel = new DefaultListModel();\n    historyPanel = new JPanel(new BorderLayout());\n    historyPanel.add(\n      BorderLayout.NORTH,\n      new JLabel(SSRBundle.message(\"used.templates\"))\n    );\n    Component view = historyList = new JBList(historyModel);\n    historyPanel.add(\n      BorderLayout.CENTER,\n      ScrollPaneFactory.createScrollPane(view)\n    );\n\n    historyList.setCellRenderer(\n      new ListCellRenderer()\n    );\n\n    historyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n    new ListSpeedSearch(historyList);\n\n    if (configurationManager.getHistoryConfigurations() != null) {\n      for (final Configuration configuration : configurationManager.getHistoryConfigurations()) {\n        historyModel.addElement(configuration);\n      }\n\n      historyList.setSelectedIndex(0);\n    }\n\n    configureSelectTemplateAction(historyList);\n  }","id":59037,"modified_method":"private ExistingTemplatesComponent(Project project) {\n\n    this.project = project;\n    final DefaultMutableTreeNode root;\n    patternTreeModel = new DefaultTreeModel(\n      root = new DefaultMutableTreeNode(null)\n    );\n\n    DefaultMutableTreeNode parent = null;\n    String lastCategory = null;\n    LinkedList<Object> nodesToExpand = new LinkedList<Object>();\n\n    final List<Configuration> predefined = StructuralSearchUtil.getPredefinedTemplates();\n    for (final Configuration info : predefined) {\n      final DefaultMutableTreeNode node = new DefaultMutableTreeNode(info);\n\n      if (lastCategory == null || !lastCategory.equals(info.getCategory())) {\n        if (info.getCategory().length() > 0) {\n          root.add(parent = new DefaultMutableTreeNode(info.getCategory()));\n          nodesToExpand.add(parent);\n          lastCategory = info.getCategory();\n        }\n        else {\n          root.add(node);\n          continue;\n        }\n      }\n\n      parent.add(node);\n    }\n\n    parent = new DefaultMutableTreeNode(SSRBundle.message(\"user.defined.category\"));\n    userTemplatesNode = parent;\n    root.add(parent);\n    nodesToExpand.add(parent);\n\n    final ConfigurationManager configurationManager = StructuralSearchPlugin.getInstance(this.project).getConfigurationManager();\n    if (configurationManager.getConfigurations() != null) {\n      for (final Configuration config : configurationManager.getConfigurations()) {\n        parent.add(new DefaultMutableTreeNode(config));\n      }\n    }\n\n    patternTree = createTree(patternTreeModel);\n\n    for (final Object aNodesToExpand : nodesToExpand) {\n      patternTree.expandPath(\n        new TreePath(new Object[]{root, aNodesToExpand})\n      );\n    }\n\n    panel = ToolbarDecorator.createDecorator(patternTree)\n      .setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          final Object selection = patternTree.getLastSelectedPathComponent();\n          if (!(selection instanceof DefaultMutableTreeNode)) {\n            return;\n          }\n          final DefaultMutableTreeNode node = (DefaultMutableTreeNode)selection;\n          if (!(node.getUserObject() instanceof Configuration)) {\n            return;\n          }\n          final Configuration configuration = (Configuration)node.getUserObject();\n          if (configuration.isPredefined()) {\n            return;\n          }\n          patternTreeModel.removeNodeFromParent(node);\n          configurationManager.removeConfiguration(configuration);\n        }\n      }).setRemoveActionUpdater(new AnActionButtonUpdater() {\n        @Override\n        public boolean isEnabled(AnActionEvent e) {\n          final Object selection = patternTree.getLastSelectedPathComponent();\n          if (selection instanceof DefaultMutableTreeNode) {\n            final DefaultMutableTreeNode node = (DefaultMutableTreeNode)selection;\n            final Object userObject = node.getUserObject();\n            if (userObject instanceof Configuration) {\n              final Configuration configuration = (Configuration)userObject;\n              return !configuration.isPredefined();\n            }\n          }\n          return false;\n        }\n      }).createPanel();\n\n      new JPanel(new BorderLayout());\n\n    configureSelectTemplateAction(patternTree);\n\n    historyModel = new DefaultListModel();\n    historyPanel = new JPanel(new BorderLayout());\n    historyPanel.add(\n      BorderLayout.NORTH,\n      new JLabel(SSRBundle.message(\"used.templates\"))\n    );\n    Component view = historyList = new JBList(historyModel);\n    historyPanel.add(\n      BorderLayout.CENTER,\n      ScrollPaneFactory.createScrollPane(view)\n    );\n\n    historyList.setCellRenderer(\n      new ListCellRenderer()\n    );\n\n    historyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n    new ListSpeedSearch(historyList);\n\n    if (configurationManager.getHistoryConfigurations() != null) {\n      for (final Configuration configuration : configurationManager.getHistoryConfigurations()) {\n        historyModel.addElement(configuration);\n      }\n\n      historyList.setSelectedIndex(0);\n    }\n\n    configureSelectTemplateAction(historyList);\n  }","commit_id":"b75e10b2e278bb0dc28032c768deb13b6758cc89","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private JComponent createTableWithButtons() {\n    final boolean isAnalyzeShown = false;\n\n    final ClasspathPanelAction removeAction = new ClasspathPanelAction(this) {\n      @Override\n      public void run() {\n        removeSelectedItems(TableUtil.removeSelectedItems(myEntryTable));\n      }\n    };\n\n    final AnActionButton analyzeButton = new AnActionButton(ProjectBundle.message(\"classpath.panel.analyze\"), null, IconUtil.getAnalyzeIcon()) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        AnalyzeDependenciesDialog.show(getRootModel().getModule());\n      }\n    };\n\n    //addButton.setShortcut(CustomShortcutSet.fromString(\"alt A\", \"INSERT\"));\n    //removeButton.setShortcut(CustomShortcutSet.fromString(\"alt DELETE\"));\n    //upButton.setShortcut(CustomShortcutSet.fromString(\"alt UP\"));\n    //downButton.setShortcut(CustomShortcutSet.fromString(\"alt DOWN\"));\n\n    // we need to register our listener before ToolbarDecorator registers its own. Otherwise\n    myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        if (e.getValueIsAdjusting()) {\n          return;\n        }\n        updateButtons();\n      }\n    });\n\n    final ToolbarDecorator decorator = ToolbarDecorator.createDecorator(myEntryTable);\n    AnActionButtonUpdater moveUpDownUpdater = new AnActionButtonUpdater() {\n      @Override\n      public boolean isEnabled(AnActionEvent e) {\n        for (RowSorter.SortKey key : myEntryTable.getRowSorter().getSortKeys()) {\n          if (key.getSortOrder() != SortOrder.UNSORTED) {\n            return false;\n          }\n        }\n        return true;\n      }\n    };\n    decorator.setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        initPopupActions();\n        final JBPopup popup = JBPopupFactory.getInstance().createListPopup(\n          new BaseListPopupStep<AddItemPopupAction<?>>(null, myPopupActions) {\n            @Override\n            public Icon getIconFor(AddItemPopupAction<?> aValue) {\n              return aValue.getIcon();\n            }\n\n            @Override\n            public boolean hasSubstep(AddItemPopupAction<?> selectedValue) {\n              return selectedValue.hasSubStep();\n            }\n\n            @Override\n            public boolean isMnemonicsNavigationEnabled() {\n              return true;\n            }\n\n            @Override\n            public PopupStep onChosen(final AddItemPopupAction<?> selectedValue, final boolean finalChoice) {\n              if (selectedValue.hasSubStep()) {\n                return selectedValue.createSubStep();\n              }\n              return doFinalStep(new Runnable() {\n                @Override\n                public void run() {\n                  selectedValue.execute();\n                }\n              });\n            }\n\n            @Override\n            @NotNull\n            public String getTextFor(AddItemPopupAction<?> value) {\n              return \"&\" + value.getIndex() + \"  \" + value.getTitle();\n            }\n          });\n        popup.show(button.getPreferredPopupPoint());\n      }\n    })\n      .setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          removeAction.actionPerformed(null);\n        }\n      })\n      .setMoveUpAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          moveSelectedRows(-1);\n        }\n      })\n      .setMoveUpActionUpdater(moveUpDownUpdater)\n      .setMoveUpActionName(\"Move Up (disabled if items are shown in sorted order)\")\n      .setMoveDownAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          moveSelectedRows(+1);\n        }\n      })\n      .setMoveDownActionUpdater(moveUpDownUpdater)\n      .setMoveDownActionName(\"Move Down (disabled if items are shown in sorted order)\")\n      .addExtraAction(myEditButton);\n    if (isAnalyzeShown) {\n      decorator.addExtraAction(analyzeButton);\n    }\n\n    final JPanel panel = decorator.createPanel();\n    myRemoveButton = ToolbarDecorator.findRemoveButton(panel);\n    return panel;\n  }","id":59038,"modified_method":"private JComponent createTableWithButtons() {\n    final boolean isAnalyzeShown = false;\n\n    final ClasspathPanelAction removeAction = new ClasspathPanelAction(this) {\n      @Override\n      public void run() {\n        removeSelectedItems(TableUtil.removeSelectedItems(myEntryTable));\n      }\n    };\n\n    final AnActionButton analyzeButton = new AnActionButton(ProjectBundle.message(\"classpath.panel.analyze\"), null, IconUtil.getAnalyzeIcon()) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        AnalyzeDependenciesDialog.show(getRootModel().getModule());\n      }\n    };\n\n    //addButton.setShortcut(CustomShortcutSet.fromString(\"alt A\", \"INSERT\"));\n    //removeButton.setShortcut(CustomShortcutSet.fromString(\"alt DELETE\"));\n    //upButton.setShortcut(CustomShortcutSet.fromString(\"alt UP\"));\n    //downButton.setShortcut(CustomShortcutSet.fromString(\"alt DOWN\"));\n\n    final ToolbarDecorator decorator = ToolbarDecorator.createDecorator(myEntryTable);\n    AnActionButtonUpdater moveUpDownUpdater = new AnActionButtonUpdater() {\n      @Override\n      public boolean isEnabled(AnActionEvent e) {\n        for (RowSorter.SortKey key : myEntryTable.getRowSorter().getSortKeys()) {\n          if (key.getSortOrder() != SortOrder.UNSORTED) {\n            return false;\n          }\n        }\n        return true;\n      }\n    };\n    decorator.setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        initPopupActions();\n        final JBPopup popup = JBPopupFactory.getInstance().createListPopup(\n          new BaseListPopupStep<AddItemPopupAction<?>>(null, myPopupActions) {\n            @Override\n            public Icon getIconFor(AddItemPopupAction<?> aValue) {\n              return aValue.getIcon();\n            }\n\n            @Override\n            public boolean hasSubstep(AddItemPopupAction<?> selectedValue) {\n              return selectedValue.hasSubStep();\n            }\n\n            @Override\n            public boolean isMnemonicsNavigationEnabled() {\n              return true;\n            }\n\n            @Override\n            public PopupStep onChosen(final AddItemPopupAction<?> selectedValue, final boolean finalChoice) {\n              if (selectedValue.hasSubStep()) {\n                return selectedValue.createSubStep();\n              }\n              return doFinalStep(new Runnable() {\n                @Override\n                public void run() {\n                  selectedValue.execute();\n                }\n              });\n            }\n\n            @Override\n            @NotNull\n            public String getTextFor(AddItemPopupAction<?> value) {\n              return \"&\" + value.getIndex() + \"  \" + value.getTitle();\n            }\n          });\n        popup.show(button.getPreferredPopupPoint());\n      }\n    })\n      .setRemoveAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          removeAction.actionPerformed(null);\n        }\n      })\n      .setRemoveActionUpdater(new AnActionButtonUpdater() {\n        @Override\n        public boolean isEnabled(AnActionEvent e) {\n          final int[] selectedRows = myEntryTable.getSelectedRows();\n          for (final int selectedRow : selectedRows) {\n            if (!getItemAt(selectedRow).isRemovable()) {\n              return false;\n            }\n          }\n          return selectedRows.length > 0;\n        }\n      })\n      .setMoveUpAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          moveSelectedRows(-1);\n        }\n      })\n      .setMoveUpActionUpdater(moveUpDownUpdater)\n      .setMoveUpActionName(\"Move Up (disabled if items are shown in sorted order)\")\n      .setMoveDownAction(new AnActionButtonRunnable() {\n        @Override\n        public void run(AnActionButton button) {\n          moveSelectedRows(+1);\n        }\n      })\n      .setMoveDownActionUpdater(moveUpDownUpdater)\n      .setMoveDownActionName(\"Move Down (disabled if items are shown in sorted order)\")\n      .addExtraAction(myEditButton);\n    if (isAnalyzeShown) {\n      decorator.addExtraAction(analyzeButton);\n    }\n\n    final JPanel panel = decorator.createPanel();\n    myRemoveButton = ToolbarDecorator.findRemoveButton(panel);\n    return panel;\n  }","commit_id":"e2e8d032d91e5a23bb4977eada44a73f463dcdd8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ClasspathPanelImpl(ModuleConfigurationState state) {\n    super(new BorderLayout());\n\n    myState = state;\n    myModel = new ClasspathTableModel(state, getStructureConfigurableContext());\n    myEntryTable = new JBTable(myModel) {\n      @Override\n      protected TableRowSorter<TableModel> createRowSorter(TableModel model) {\n        return new DefaultColumnInfoBasedRowSorter(model) {\n          @Override\n          public void toggleSortOrder(int column) {\n            if (isSortable(column)) {\n              SortKey oldKey = ContainerUtil.getFirstItem(getSortKeys());\n              SortOrder oldOrder;\n              if (oldKey == null || oldKey.getColumn() != column) {\n                oldOrder = SortOrder.UNSORTED;\n              }\n              else {\n                oldOrder = oldKey.getSortOrder();\n              }\n              setSortKeys(Collections.singletonList(new SortKey(column, getNextSortOrder(oldOrder))));\n            }\n          }\n        };\n      }\n    };\n    myEntryTable.setShowGrid(false);\n    myEntryTable.setDragEnabled(false);\n    myEntryTable.setIntercellSpacing(new Dimension(0, 0));\n\n    myEntryTable.setDefaultRenderer(ClasspathTableItem.class, new TableItemRenderer(getStructureConfigurableContext()));\n    myEntryTable.setDefaultRenderer(Boolean.class, new ExportFlagRenderer(myEntryTable.getDefaultRenderer(Boolean.class)));\n\n    JComboBox scopeEditor = new ComboBox(new EnumComboBoxModel<DependencyScope>(DependencyScope.class));\n    myEntryTable.setDefaultEditor(DependencyScope.class, new DefaultCellEditor(scopeEditor));\n    myEntryTable.setDefaultRenderer(DependencyScope.class, new ComboBoxTableRenderer<DependencyScope>(DependencyScope.values()) {\n        @Override\n        protected String getTextFor(@NotNull final DependencyScope value) {\n          return value.getDisplayName();\n        }\n      });\n\n    myEntryTable.setTransferHandler(new TransferHandler() {\n      @Nullable\n      @Override\n      protected Transferable createTransferable(JComponent c) {\n        OrderEntry entry = getSelectedEntry();\n        if (entry == null) return null;\n        String text = entry.getPresentableName();\n        return new TextTransferable(text);\n      }\n\n      @Override\n      public int getSourceActions(JComponent c) {\n        return COPY;\n      }\n    });\n\n    myEntryTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\n    new SpeedSearchBase<JBTable>(myEntryTable) {\n      @Override\n      public int getSelectedIndex() {\n        return myEntryTable.getSelectedRow();\n      }\n\n      @Override\n      protected int convertIndexToModel(int viewIndex) {\n        return myEntryTable.convertRowIndexToModel(viewIndex);\n      }\n\n      @Override\n      public Object[] getAllElements() {\n        final int count = myModel.getRowCount();\n        Object[] elements = new Object[count];\n        for (int idx = 0; idx < count; idx++) {\n          elements[idx] = myModel.getItem(idx);\n        }\n        return elements;\n      }\n\n      @Override\n      public String getElementText(Object element) {\n        return getCellAppearance((ClasspathTableItem<?>)element, getStructureConfigurableContext(), false).getText();\n      }\n\n      @Override\n      public void selectElement(Object element, String selectedText) {\n        final int count = myModel.getRowCount();\n        for (int row = 0; row < count; row++) {\n          if (element.equals(myModel.getItem(row))) {\n            final int viewRow = myEntryTable.convertRowIndexToView(row);\n            myEntryTable.getSelectionModel().setSelectionInterval(viewRow, viewRow);\n            TableUtil.scrollSelectionToVisible(myEntryTable);\n            break;\n          }\n        }\n      }\n    };\n    setFixedColumnWidth(ClasspathTableModel.EXPORT_COLUMN);\n    setFixedColumnWidth(ClasspathTableModel.SCOPE_COLUMN);  // leave space for combobox border\n\n    myEntryTable.registerKeyboardAction(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          final int[] selectedRows = myEntryTable.getSelectedRows();\n          boolean currentlyMarked = true;\n          for (final int selectedRow : selectedRows) {\n            final ClasspathTableItem<?> item = getItemAt(selectedRow);\n            if (selectedRow < 0 || !item.isExportable()) {\n              return;\n            }\n            currentlyMarked &= item.isExported();\n          }\n          for (final int selectedRow : selectedRows) {\n            getItemAt(selectedRow).setExported(!currentlyMarked);\n          }\n          myModel.fireTableDataChanged();\n          TableUtil.selectRows(myEntryTable, selectedRows);\n        }\n      },\n      KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0),\n      WHEN_FOCUSED\n    );\n\n    myEditButton = new AnActionButton(ProjectBundle.message(\"module.classpath.button.edit\"), null, IconUtil.getEditIcon()) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        doEdit();\n      }\n\n      @Override\n      public boolean isDumbAware() {\n        return true;\n      }\n    };\n    add(createTableWithButtons(), BorderLayout.CENTER);\n\n    if (myEntryTable.getRowCount() > 0) {\n      myEntryTable.getSelectionModel().setSelectionInterval(0,0);\n    }\n\n    new DoubleClickListener() {\n      @Override\n      protected boolean onDoubleClick(MouseEvent e) {\n        navigate(true);\n        return true;\n      }\n    }.installOn(myEntryTable);\n\n    DefaultActionGroup actionGroup = new DefaultActionGroup();\n    final AnAction navigateAction = new AnAction(ProjectBundle.message(\"classpath.panel.navigate.action.text\")) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        navigate(false);\n      }\n\n      @Override\n      public void update(@NotNull AnActionEvent e) {\n        final Presentation presentation = e.getPresentation();\n        presentation.setEnabled(false);\n        final OrderEntry entry = getSelectedEntry();\n        if (entry != null && entry.isValid()){\n          if (!(entry instanceof ModuleSourceOrderEntry)){\n            presentation.setEnabled(true);\n          }\n        }\n      }\n    };\n    navigateAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),\n                                             myEntryTable);\n    actionGroup.add(myEditButton);\n    actionGroup.add(myRemoveButton);\n    actionGroup.add(navigateAction);\n    actionGroup.add(new InlineModuleDependencyAction(this));\n    actionGroup.add(new MyFindUsagesAction());\n    actionGroup.add(new AnalyzeDependencyAction());\n    addChangeLibraryLevelAction(actionGroup, LibraryTablesRegistrar.PROJECT_LEVEL);\n    addChangeLibraryLevelAction(actionGroup, LibraryTablesRegistrar.APPLICATION_LEVEL);\n    addChangeLibraryLevelAction(actionGroup, LibraryTableImplUtil.MODULE_LEVEL);\n    PopupHandler.installPopupHandler(myEntryTable, actionGroup, ActionPlaces.UNKNOWN, ActionManager.getInstance());\n  }","id":59039,"modified_method":"public ClasspathPanelImpl(ModuleConfigurationState state) {\n    super(new BorderLayout());\n\n    myState = state;\n    myModel = new ClasspathTableModel(state, getStructureConfigurableContext());\n    myEntryTable = new JBTable(myModel) {\n      @Override\n      protected TableRowSorter<TableModel> createRowSorter(TableModel model) {\n        return new DefaultColumnInfoBasedRowSorter(model) {\n          @Override\n          public void toggleSortOrder(int column) {\n            if (isSortable(column)) {\n              SortKey oldKey = ContainerUtil.getFirstItem(getSortKeys());\n              SortOrder oldOrder;\n              if (oldKey == null || oldKey.getColumn() != column) {\n                oldOrder = SortOrder.UNSORTED;\n              }\n              else {\n                oldOrder = oldKey.getSortOrder();\n              }\n              setSortKeys(Collections.singletonList(new SortKey(column, getNextSortOrder(oldOrder))));\n            }\n          }\n        };\n      }\n    };\n    myEntryTable.setShowGrid(false);\n    myEntryTable.setDragEnabled(false);\n    myEntryTable.setIntercellSpacing(new Dimension(0, 0));\n\n    myEntryTable.setDefaultRenderer(ClasspathTableItem.class, new TableItemRenderer(getStructureConfigurableContext()));\n    myEntryTable.setDefaultRenderer(Boolean.class, new ExportFlagRenderer(myEntryTable.getDefaultRenderer(Boolean.class)));\n\n    JComboBox scopeEditor = new ComboBox(new EnumComboBoxModel<DependencyScope>(DependencyScope.class));\n    myEntryTable.setDefaultEditor(DependencyScope.class, new DefaultCellEditor(scopeEditor));\n    myEntryTable.setDefaultRenderer(DependencyScope.class, new ComboBoxTableRenderer<DependencyScope>(DependencyScope.values()) {\n        @Override\n        protected String getTextFor(@NotNull final DependencyScope value) {\n          return value.getDisplayName();\n        }\n      });\n\n    myEntryTable.setTransferHandler(new TransferHandler() {\n      @Nullable\n      @Override\n      protected Transferable createTransferable(JComponent c) {\n        OrderEntry entry = getSelectedEntry();\n        if (entry == null) return null;\n        String text = entry.getPresentableName();\n        return new TextTransferable(text);\n      }\n\n      @Override\n      public int getSourceActions(JComponent c) {\n        return COPY;\n      }\n    });\n\n    myEntryTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\n    new SpeedSearchBase<JBTable>(myEntryTable) {\n      @Override\n      public int getSelectedIndex() {\n        return myEntryTable.getSelectedRow();\n      }\n\n      @Override\n      protected int convertIndexToModel(int viewIndex) {\n        return myEntryTable.convertRowIndexToModel(viewIndex);\n      }\n\n      @Override\n      public Object[] getAllElements() {\n        final int count = myModel.getRowCount();\n        Object[] elements = new Object[count];\n        for (int idx = 0; idx < count; idx++) {\n          elements[idx] = myModel.getItem(idx);\n        }\n        return elements;\n      }\n\n      @Override\n      public String getElementText(Object element) {\n        return getCellAppearance((ClasspathTableItem<?>)element, getStructureConfigurableContext(), false).getText();\n      }\n\n      @Override\n      public void selectElement(Object element, String selectedText) {\n        final int count = myModel.getRowCount();\n        for (int row = 0; row < count; row++) {\n          if (element.equals(myModel.getItem(row))) {\n            final int viewRow = myEntryTable.convertRowIndexToView(row);\n            myEntryTable.getSelectionModel().setSelectionInterval(viewRow, viewRow);\n            TableUtil.scrollSelectionToVisible(myEntryTable);\n            break;\n          }\n        }\n      }\n    };\n    setFixedColumnWidth(ClasspathTableModel.EXPORT_COLUMN);\n    setFixedColumnWidth(ClasspathTableModel.SCOPE_COLUMN);  // leave space for combobox border\n\n    myEntryTable.registerKeyboardAction(\n      new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          final int[] selectedRows = myEntryTable.getSelectedRows();\n          boolean currentlyMarked = true;\n          for (final int selectedRow : selectedRows) {\n            final ClasspathTableItem<?> item = getItemAt(selectedRow);\n            if (selectedRow < 0 || !item.isExportable()) {\n              return;\n            }\n            currentlyMarked &= item.isExported();\n          }\n          for (final int selectedRow : selectedRows) {\n            getItemAt(selectedRow).setExported(!currentlyMarked);\n          }\n          myModel.fireTableDataChanged();\n          TableUtil.selectRows(myEntryTable, selectedRows);\n        }\n      },\n      KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0),\n      WHEN_FOCUSED\n    );\n\n    myEditButton = new AnActionButton(ProjectBundle.message(\"module.classpath.button.edit\"), null, IconUtil.getEditIcon()) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        doEdit();\n      }\n\n      @Override\n      public boolean isEnabled() {\n        ClasspathTableItem<?> selectedItem = getSelectedItem();\n        return selectedItem != null && selectedItem.isEditable();\n      }\n\n      @Override\n      public boolean isDumbAware() {\n        return true;\n      }\n    };\n    add(createTableWithButtons(), BorderLayout.CENTER);\n\n    if (myEntryTable.getRowCount() > 0) {\n      myEntryTable.getSelectionModel().setSelectionInterval(0,0);\n    }\n\n    new DoubleClickListener() {\n      @Override\n      protected boolean onDoubleClick(MouseEvent e) {\n        navigate(true);\n        return true;\n      }\n    }.installOn(myEntryTable);\n\n    DefaultActionGroup actionGroup = new DefaultActionGroup();\n    final AnAction navigateAction = new AnAction(ProjectBundle.message(\"classpath.panel.navigate.action.text\")) {\n      @Override\n      public void actionPerformed(@NotNull AnActionEvent e) {\n        navigate(false);\n      }\n\n      @Override\n      public void update(@NotNull AnActionEvent e) {\n        final Presentation presentation = e.getPresentation();\n        presentation.setEnabled(false);\n        final OrderEntry entry = getSelectedEntry();\n        if (entry != null && entry.isValid()){\n          if (!(entry instanceof ModuleSourceOrderEntry)){\n            presentation.setEnabled(true);\n          }\n        }\n      }\n    };\n    navigateAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),\n                                             myEntryTable);\n    actionGroup.add(myEditButton);\n    actionGroup.add(myRemoveButton);\n    actionGroup.add(navigateAction);\n    actionGroup.add(new InlineModuleDependencyAction(this));\n    actionGroup.add(new MyFindUsagesAction());\n    actionGroup.add(new AnalyzeDependencyAction());\n    addChangeLibraryLevelAction(actionGroup, LibraryTablesRegistrar.PROJECT_LEVEL);\n    addChangeLibraryLevelAction(actionGroup, LibraryTablesRegistrar.APPLICATION_LEVEL);\n    addChangeLibraryLevelAction(actionGroup, LibraryTableImplUtil.MODULE_LEVEL);\n    PopupHandler.installPopupHandler(myEntryTable, actionGroup, ActionPlaces.UNKNOWN, ActionManager.getInstance());\n  }","commit_id":"e2e8d032d91e5a23bb4977eada44a73f463dcdd8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public OrderEntry getSelectedEntry() {\n    if (myEntryTable.getSelectedRowCount() != 1) return null;\n    return getItemAt(myEntryTable.getSelectedRow()).getEntry();\n  }","id":59040,"modified_method":"@Override\n  @Nullable\n  public OrderEntry getSelectedEntry() {\n    ClasspathTableItem<?> item = getSelectedItem();\n    return item != null ? item.getEntry() : null;\n  }","commit_id":"e2e8d032d91e5a23bb4977eada44a73f463dcdd8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ByteBuffer toBuffer(File file) throws IOException\n    {\n        RandomAccessFile raf = new RandomAccessFile(file,\"r\");\n        MappedByteBuffer buffer=raf.getChannel().map(MapMode.READ_ONLY,0,raf.length());\n        return buffer;\n    }","id":59041,"modified_method":"public static ByteBuffer toBuffer(File file) throws IOException\n    {\n        try(RandomAccessFile raf = new RandomAccessFile(file,\"r\");)\n        {\n            return raf.getChannel().map(MapMode.READ_ONLY,0,raf.length());\n        }\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void sendContent(HttpContent content) throws IOException\n    {\n        try\n        {\n            final BlockingCallback callback =_channel.getWriteBlockingCallback();\n            sendContent(content,callback);\n            callback.block();\n        }\n        catch (InterruptedException | TimeoutException e)\n        {\n            throw new IOException(e);\n        }\n    }","id":59042,"modified_method":"/** Blocking send of content.\n     * @param content The content to send\n     * @throws IOException\n     */\n    public void sendContent(HttpContent content) throws IOException\n    {\n        try\n        {\n            final BlockingCallback callback =_channel.getWriteBlockingCallback();\n            sendContent(content,callback);\n            callback.block();\n        }\n        catch (InterruptedException | TimeoutException e)\n        {\n            throw new IOException(e);\n        }\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void sendContent(ByteBuffer content, Callback callback)\n    {\n        _channel.write(content,true,callback);\n    }","id":59043,"modified_method":"/** Asynchronous send of content.\n     * @param content The content to send\n     * @param callback The callback to use to notify success or failure\n     */\n    public void sendContent(ByteBuffer content, Callback callback)\n    {\n        _channel.write(content,true,callback);\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void sendContent(ReadableByteChannel in, Callback callback)\n    {\n        new ReadableByteChannelWritingCB(in,callback).iterate();\n    }","id":59044,"modified_method":"/** Asynchronous send of content.\n     * @param content The content to send\n     * @param callback The callback to use to notify success or failure\n     */\n    public void sendContent(ReadableByteChannel in, Callback callback)\n    {\n        new ReadableByteChannelWritingCB(in,callback).iterate();\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Deprecated\n    public void sendContent(Object content) throws IOException\n    {\n        final BlockingCallback callback =_channel.getWriteBlockingCallback();\n\n        if (content instanceof HttpContent)\n        {\n            _channel.getResponse().setHeaders((HttpContent)content);\n            sendContent((HttpContent)content,callback);\n        }\n        else if (content instanceof Resource)\n        {\n            Resource resource = (Resource)content;\n            _channel.getResponse().getHttpFields().putDateField(HttpHeader.LAST_MODIFIED, resource.lastModified());\n            \n            ReadableByteChannel in=((Resource)content).getReadableByteChannel();\n            if (in!=null)\n                sendContent(in,callback);\n            else\n                sendContent(resource.getInputStream(),callback);\n        }\n        else if (content instanceof ByteBuffer)\n        {\n            sendContent((ByteBuffer)content,callback);\n        }\n        else if (content instanceof ReadableByteChannel)\n        {\n            sendContent((ReadableByteChannel)content,callback);\n        }\n        else if (content instanceof InputStream)\n        {\n            sendContent((InputStream)content,callback);\n        }\n        else\n            callback.failed(new IllegalArgumentException(\"unknown content type \"+content.getClass()));\n\n        try\n        {\n            callback.block();\n        }\n        catch (InterruptedException | TimeoutException e)\n        {\n            throw new IOException(e);\n        }\n    }","id":59045,"modified_method":"/** Set headers and send content.\n     * @deprecated Use {@link Response#setHeaders(HttpContent)} and {@link #sendContent(HttpContent)} instead.\n     * @param content\n     * @throws IOException\n     */\n    @Deprecated\n    public void sendContent(Object content) throws IOException\n    {\n        final BlockingCallback callback =_channel.getWriteBlockingCallback();\n\n        if (content instanceof HttpContent)\n        {\n            _channel.getResponse().setHeaders((HttpContent)content);\n            sendContent((HttpContent)content,callback);\n        }\n        else if (content instanceof Resource)\n        {\n            Resource resource = (Resource)content;\n            _channel.getResponse().getHttpFields().putDateField(HttpHeader.LAST_MODIFIED, resource.lastModified());\n            \n            ReadableByteChannel in=((Resource)content).getReadableByteChannel();\n            if (in!=null)\n                sendContent(in,callback);\n            else\n                sendContent(resource.getInputStream(),callback);\n        }\n        else if (content instanceof ByteBuffer)\n        {\n            sendContent((ByteBuffer)content,callback);\n        }\n        else if (content instanceof ReadableByteChannel)\n        {\n            sendContent((ReadableByteChannel)content,callback);\n        }\n        else if (content instanceof InputStream)\n        {\n            sendContent((InputStream)content,callback);\n        }\n        else\n            callback.failed(new IllegalArgumentException(\"unknown content type \"+content.getClass()));\n\n        try\n        {\n            callback.block();\n        }\n        catch (InterruptedException | TimeoutException e)\n        {\n            throw new IOException(e);\n        }\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void sendContent(InputStream in, Callback callback)\n    {\n        new InputStreamWritingCB(in,callback).iterate();\n    }","id":59046,"modified_method":"/** Asynchronous send of content.\n     * @param content The content to send\n     * @param callback The callback to use to notify success or failure\n     */\n    public void sendContent(InputStream in, Callback callback)\n    {\n        new InputStreamWritingCB(in,callback).iterate();\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void sendContent(HttpContent httpContent, Callback callback) throws IOException\n    {\n        if (isClosed())\n            throw new IOException(\"Closed\");\n        if (BufferUtil.hasContent(_aggregate))\n            throw new IOException(\"written\");\n        if (_channel.isCommitted())\n            throw new IOException(\"committed\");\n            \n        _closed=true;\n\n        ByteBuffer buffer= _channel.useDirectBuffers()?httpContent.getDirectBuffer():null;\n        if (buffer == null)\n            buffer = httpContent.getIndirectBuffer();\n        \n        if (buffer!=null)\n        {\n            sendContent(buffer,callback);\n            return;\n        }\n        \n        ReadableByteChannel rbc=httpContent.getReadableByteChannel();\n        if (rbc!=null)\n        {\n            sendContent(rbc,callback);\n            return;\n        }\n           \n        InputStream in = httpContent.getInputStream();\n        if ( in!=null )\n        {\n            sendContent(in,callback);\n            return;\n        }\n\n        callback.failed(new IllegalArgumentException(\"unknown content for \"+httpContent));\n    }","id":59047,"modified_method":"/** Asynchronous send of content.\n     * @param content The content to send\n     * @param callback The callback to use to notify success or failure\n     */\n    public void sendContent(HttpContent httpContent, Callback callback) throws IOException\n    {\n        if (isClosed())\n            throw new IOException(\"Closed\");\n        if (BufferUtil.hasContent(_aggregate))\n            throw new IOException(\"written\");\n        if (_channel.isCommitted())\n            throw new IOException(\"committed\");\n            \n        _closed=true;\n\n        ByteBuffer buffer= _channel.useDirectBuffers()?httpContent.getDirectBuffer():null;\n        if (buffer == null)\n            buffer = httpContent.getIndirectBuffer();\n        \n        if (buffer!=null)\n        {\n            sendContent(buffer,callback);\n            return;\n        }\n        \n        ReadableByteChannel rbc=httpContent.getReadableByteChannel();\n        if (rbc!=null)\n        {\n            sendContent(rbc,callback);\n            return;\n        }\n           \n        InputStream in = httpContent.getInputStream();\n        if ( in!=null )\n        {\n            sendContent(in,callback);\n            return;\n        }\n\n        callback.failed(new IllegalArgumentException(\"unknown content for \"+httpContent));\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n    {\n        if (baseRequest.isHandled())\n            return;\n\n        boolean skipContentBody = false;\n\n        if(!HttpMethod.GET.is(request.getMethod()))\n        {\n            if(!HttpMethod.HEAD.is(request.getMethod()))\n            {\n                //try another handler\n                super.handle(target, baseRequest, request, response);\n                return;\n            }\n            skipContentBody = true;\n        }\n\n        Resource resource = getResource(request);\n\n        if (resource==null || !resource.exists())\n        {\n            if (target.endsWith(\"/jetty-dir.css\"))\n            {\n                resource = getStylesheet();\n                if (resource==null)\n                    return;\n                response.setContentType(\"text/css\");\n            }\n            else\n            {\n                //no resource - try other handlers\n                super.handle(target, baseRequest, request, response);\n                return;\n            }\n        }\n\n        // We are going to serve something\n        baseRequest.setHandled(true);\n\n        if (resource.isDirectory())\n        {\n            if (!request.getPathInfo().endsWith(URIUtil.SLASH))\n            {\n                response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getRequestURI(),URIUtil.SLASH)));\n                return;\n            }\n\n            Resource welcome=getWelcome(resource);\n            if (welcome!=null && welcome.exists())\n                resource=welcome;\n            else\n            {\n                doDirectory(request,response,resource);\n                baseRequest.setHandled(true);\n                return;\n            }\n        }\n\n        // set some headers\n        long last_modified=resource.lastModified();\n        String etag=null;\n        if (_etags)\n        {\n            // simple handling of only a single etag\n            String ifnm = request.getHeader(HttpHeader.IF_NONE_MATCH.asString());\n            etag=resource.getWeakETag();\n            if (ifnm!=null && resource!=null && ifnm.equals(etag))\n            {\n                response.setStatus(HttpStatus.NOT_MODIFIED_304);\n                baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);\n                return;\n            }\n        }\n        \n        \n        if (last_modified>0)\n        {\n            long if_modified=request.getDateHeader(HttpHeader.IF_MODIFIED_SINCE.asString());\n            if (if_modified>0 && last_modified/1000<=if_modified/1000)\n            {\n                response.setStatus(HttpStatus.NOT_MODIFIED_304);\n                return;\n            }\n        }\n\n        String mime=_mimeTypes.getMimeByExtension(resource.toString());\n        if (mime==null)\n            mime=_mimeTypes.getMimeByExtension(request.getPathInfo());\n\n        // set the headers\n        doResponseHeaders(response,resource,mime!=null?mime.toString():null);\n        if (_etags)\n            baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);\n        \n        if(skipContentBody)\n            return;\n        \n        \n        // Send the content\n        OutputStream out =null;\n        try {out = response.getOutputStream();}\n        catch(IllegalStateException e) {out = new WriterOutputStream(response.getWriter());}\n\n       \n        if (out instanceof HttpOutput)\n        {\n            ((HttpOutput)out).sendContent(resource);\n        }\n        else\n        {\n            if (last_modified>0)\n                response.setDateHeader(HttpHeader.LAST_MODIFIED.asString(),last_modified);\n            \n            // Write content normally\n            resource.writeTo(out,0,resource.length());\n        }\n    }","id":59048,"modified_method":"@Override\n    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n    {\n        if (baseRequest.isHandled())\n            return;\n\n        boolean skipContentBody = false;\n\n        if(!HttpMethod.GET.is(request.getMethod()))\n        {\n            if(!HttpMethod.HEAD.is(request.getMethod()))\n            {\n                //try another handler\n                super.handle(target, baseRequest, request, response);\n                return;\n            }\n            skipContentBody = true;\n        }\n\n        Resource resource = getResource(request);\n\n        if (resource==null || !resource.exists())\n        {\n            if (target.endsWith(\"/jetty-dir.css\"))\n            {\n                resource = getStylesheet();\n                if (resource==null)\n                    return;\n                response.setContentType(\"text/css\");\n            }\n            else\n            {\n                //no resource - try other handlers\n                super.handle(target, baseRequest, request, response);\n                return;\n            }\n        }\n\n        // We are going to serve something\n        baseRequest.setHandled(true);\n\n        if (resource.isDirectory())\n        {\n            if (!request.getPathInfo().endsWith(URIUtil.SLASH))\n            {\n                response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getRequestURI(),URIUtil.SLASH)));\n                return;\n            }\n\n            Resource welcome=getWelcome(resource);\n            if (welcome!=null && welcome.exists())\n                resource=welcome;\n            else\n            {\n                doDirectory(request,response,resource);\n                baseRequest.setHandled(true);\n                return;\n            }\n        }\n\n        // set some headers\n        long last_modified=resource.lastModified();\n        String etag=null;\n        if (_etags)\n        {\n            // simple handling of only a single etag\n            String ifnm = request.getHeader(HttpHeader.IF_NONE_MATCH.asString());\n            etag=resource.getWeakETag();\n            if (ifnm!=null && resource!=null && ifnm.equals(etag))\n            {\n                response.setStatus(HttpStatus.NOT_MODIFIED_304);\n                baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);\n                return;\n            }\n        }\n        \n        \n        if (last_modified>0)\n        {\n            long if_modified=request.getDateHeader(HttpHeader.IF_MODIFIED_SINCE.asString());\n            if (if_modified>0 && last_modified/1000<=if_modified/1000)\n            {\n                response.setStatus(HttpStatus.NOT_MODIFIED_304);\n                return;\n            }\n        }\n\n        String mime=_mimeTypes.getMimeByExtension(resource.toString());\n        if (mime==null)\n            mime=_mimeTypes.getMimeByExtension(request.getPathInfo());\n\n        // set the headers\n        doResponseHeaders(response,resource,mime!=null?mime.toString():null);\n        if (_etags)\n            baseRequest.getResponse().getHttpFields().put(HttpHeader.ETAG,etag);\n        \n        if(skipContentBody)\n            return;\n        \n        // Send the content\n        OutputStream out =null;\n        try {out = response.getOutputStream();}\n        catch(IllegalStateException e) {out = new WriterOutputStream(response.getWriter());}\n\n        if (last_modified>0)\n            response.setDateHeader(HttpHeader.LAST_MODIFIED.asString(),last_modified);\n       \n        if (out instanceof HttpOutput && request.isAsyncSupported())\n        {\n            final AsyncContext async = request.startAsync();\n            ((HttpOutput)out).sendContent(resource.getReadableByteChannel(),new Callback()\n            {\n                @Override\n                public void succeeded()\n                {\n                    async.complete();\n                }\n\n                @Override\n                public void failed(Throwable x)\n                {\n                    async.complete();\n                }   \n            });\n        }\n        else\n        {\n            // Write content normally\n            resource.writeTo(out,0,resource.length());\n        }\n    }","commit_id":"76d4859eda56dde318448741559671e54c78d7c9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"protected void doOKAction() {\n    if (!isOKActionEnabled()) {\n      return;\n    }\n\n    if (isTextFieldActive()) {\n      final String text = myPathTextField.getTextFieldText();\n      final LookupFile file = myPathTextField.getFile();\n      if (text == null || file == null || !file.exists()) {\n        setErrorText(\"Specified path cannot be found\");\n        return;\n      }\n    }\n\n\n    final VirtualFile[] selectedFiles = getSelectedFiles();\n    try {\n      myChooserDescriptor.validateSelectedFiles(selectedFiles);\n    }\n    catch (Exception e) {\n      Messages.showErrorDialog(getContentPane(), e.getMessage(), getTitle());\n      return;\n    }\n\n    myChosenFiles = selectedFiles;\n    if (selectedFiles.length == 0) {\n      close(CANCEL_EXIT_CODE);\n      return;\n    }\n    //noinspection AssignmentToStaticFieldFromInstanceMethod\n    ourLastFile = selectedFiles[selectedFiles.length - 1];\n\n    super.doOKAction();\n  }","id":59049,"modified_method":"protected void doOKAction() {\n    if (!isOKActionEnabled()) {\n      return;\n    }\n\n    if (isTextFieldActive()) {\n      final String text = myPathTextField.getTextFieldText();\n      final LookupFile file = myPathTextField.getFile();\n      if (text == null || file == null || !file.exists()) {\n        setErrorText(\"Specified path cannot be found\");\n        return;\n      }\n    }\n\n    final VirtualFile[] selectedFiles = getSelectedFiles();\n    if (selectedFiles.length == 0) {\n      close(CANCEL_EXIT_CODE);\n      return;\n    }\n\n    try {\n      myChooserDescriptor.validateSelectedFiles(selectedFiles);\n    }\n    catch (Exception e) {\n      Messages.showErrorDialog(getContentPane(), e.getMessage(), getTitle());\n      return;\n    }\n\n    myChosenFiles = selectedFiles;\n    setLastSelectedFile(selectedFiles[selectedFiles.length - 1]);\n\n    super.doOKAction();\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String getFilePath(final VirtualFile file) {\n    final String path = file.getUserData(FileSystemTree.PATH_KEY);\n    if (path != null) {\n      return path;\n    }\n\n    return file.isInLocalFileSystem() ? file.getPresentableUrl() : file.getUrl();\n  }","id":59050,"modified_method":"private static String getFilePath(final VirtualFile file) {\n    return file.isInLocalFileSystem() ? FileChooserUtil.getSelectionPath(file) : file.getUrl();\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public VirtualFile[] getChosenFiles() {\n    return collectSelectedFiles(new Convertor<VirtualFile, VirtualFile>() {\n      @Nullable\n      public VirtualFile convert(VirtualFile file) {\n        if (file == null || !file.isValid()) return null;\n        return myTreeStructure.getChooserDescriptor().getFileToSelect(file);\n      }\n    });\n  }","id":59051,"modified_method":"@NotNull\n  public VirtualFile[] getChosenFiles() {\n    final List<VirtualFile> files = collectSelectedElements(new NullableFunction<FileElement, VirtualFile>() {\n      @Override\n      public VirtualFile fun(final FileElement element) {\n        VirtualFile file = element.getFile();\n        if (file == null || !file.isValid()) return null;\n        file = myTreeStructure.getChooserDescriptor().getFileToSelect(file);\n        FileChooserUtil.setSelectionPath(file, element.getPath());\n        return file;\n      }\n    });\n    return VfsUtil.toVirtualFileArray(files);\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void processSelectionChange() {\n    if (myListeners.size() == 0) return;\n    List<VirtualFile> selection = new ArrayList<VirtualFile>();\n\n    final TreePath[] paths = myTree.getSelectionPaths();\n    if (paths != null) {\n      for (TreePath each : paths) {\n        final Object last = each.getLastPathComponent();\n        if (last instanceof DefaultMutableTreeNode) {\n          final Object object = ((DefaultMutableTreeNode)last).getUserObject();\n          if (object instanceof FileNodeDescriptor) {\n            final FileElement element = ((FileNodeDescriptor)object).getElement();\n            final VirtualFile file = element.getFile();\n            if (file != null) {\n              file.putUserData(PATH_KEY, element.getPath());\n              selection.add(file);\n            }\n          }\n        }\n      }\n    }\n\n    fireSelection(selection);\n  }","id":59052,"modified_method":"private void processSelectionChange() {\n    if (myListeners.size() == 0) return;\n    List<VirtualFile> selection = new ArrayList<VirtualFile>();\n\n    final TreePath[] paths = myTree.getSelectionPaths();\n    if (paths != null) {\n      for (TreePath each : paths) {\n        final Object last = each.getLastPathComponent();\n        if (last instanceof DefaultMutableTreeNode) {\n          final Object object = ((DefaultMutableTreeNode)last).getUserObject();\n          if (object instanceof FileNodeDescriptor) {\n            final FileElement element = ((FileNodeDescriptor)object).getElement();\n            final VirtualFile file = element.getFile();\n            if (file != null) {\n              FileChooserUtil.setSelectionPath(file, element.getPath());\n              selection.add(file);\n            }\n          }\n        }\n      }\n    }\n\n    fireSelection(selection);\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public VirtualFile[] getSelectedFiles() {\n    return collectSelectedFiles(new ConvertingIterator.IdConvertor<VirtualFile>());\n  }","id":59053,"modified_method":"@NotNull\n  public VirtualFile[] getSelectedFiles() {\n    final List<VirtualFile> files = collectSelectedElements(new NullableFunction<FileElement, VirtualFile>() {\n      @Override\n      public VirtualFile fun(final FileElement element) {\n        final VirtualFile file = element.getFile();\n        if (file == null || !file.isValid()) return null;\n        FileChooserUtil.setSelectionPath(file, element.getPath());\n        return file;\n      }\n    });\n    return VfsUtil.toVirtualFileArray(files);\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void treeExpanded(final TreeExpansionEvent event) {\n      if (myTreeBuilder == null || !myTreeBuilder.isNodeBeingBuilt(event.getPath())) return;\n\n      TreePath path = event.getPath();\n      DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();\n      if (node.getUserObject() instanceof FileNodeDescriptor) {\n        FileNodeDescriptor nodeDescriptor = (FileNodeDescriptor)node.getUserObject();\n        final FileElement fileDescriptor = nodeDescriptor.getElement();\n        final VirtualFile virtualFile = fileDescriptor.getFile();\n        if (virtualFile != null) {\n          if (!myEverExpanded.containsKey(virtualFile)) {\n            if (virtualFile instanceof NewVirtualFile) {\n              ((NewVirtualFile)virtualFile).markDirty();\n            }\n            myEverExpanded.put(virtualFile, virtualFile);\n          }\n\n\n          boolean async = myTreeBuilder.getTreeStructure().isToBuildChildrenInBackground(virtualFile);\n          if (virtualFile instanceof NewVirtualFile) {\n            RefreshQueue.getInstance().refresh(async, false, null, ModalityState.stateForComponent(myTree), virtualFile);\n          }\n          else {\n            virtualFile.refresh(async, false);\n          }\n        }\n      }\n    }","id":59054,"modified_method":"public void treeExpanded(final TreeExpansionEvent event) {\n      if (myTreeBuilder == null || !myTreeBuilder.isNodeBeingBuilt(event.getPath())) return;\n\n      TreePath path = event.getPath();\n      DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();\n      if (node.getUserObject() instanceof FileNodeDescriptor) {\n        FileNodeDescriptor nodeDescriptor = (FileNodeDescriptor)node.getUserObject();\n        final FileElement fileDescriptor = nodeDescriptor.getElement();\n        final VirtualFile virtualFile = fileDescriptor.getFile();\n        if (virtualFile != null) {\n          if (!myEverExpanded.containsKey(virtualFile)) {\n            if (virtualFile instanceof NewVirtualFile) {\n              ((NewVirtualFile)virtualFile).markDirty();\n            }\n            myEverExpanded.put(virtualFile, virtualFile);\n          }\n\n\n          AbstractTreeStructure treeStructure = myTreeBuilder.getTreeStructure();\n          boolean async = treeStructure != null && treeStructure.isToBuildChildrenInBackground(virtualFile);\n          if (virtualFile instanceof NewVirtualFile) {\n            RefreshQueue.getInstance().refresh(async, false, null, ModalityState.stateForComponent(myTree), virtualFile);\n          }\n          else {\n            virtualFile.refresh(async, false);\n          }\n        }\n      }\n    }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public VirtualFile getSelectedFile() {\n    final TreePath path = myTree.getSelectionPath();\n    if (path == null) return null;\n    DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();\n    if (!(node.getUserObject() instanceof FileNodeDescriptor)) return null;\n    FileNodeDescriptor descriptor = (FileNodeDescriptor)node.getUserObject();\n    return descriptor.getElement().getFile();\n  }","id":59055,"modified_method":"@Nullable\n  public VirtualFile getSelectedFile() {\n    final TreePath path = myTree.getSelectionPath();\n    if (path == null) return null;\n    final DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();\n    if (!(node.getUserObject() instanceof FileNodeDescriptor)) return null;\n    final FileElement element = ((FileNodeDescriptor)node.getUserObject()).getElement();\n    final VirtualFile file = element.getFile();\n    FileChooserUtil.setSelectionPath(file, element.getPath());\n    return file;\n  }","commit_id":"9a26bf5df27cf6129bf2307d10d42c7a91f1ecb3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected boolean isAutoExpandNode(final NodeDescriptor nodeDescriptor) {\n    //TODO[romeo] move to base class\n    return nodeDescriptor.getElement() == getTreeStructure().getRootElement();\n  }","id":59056,"modified_method":"protected boolean isAutoExpandNode(final NodeDescriptor nodeDescriptor) {\n    final AbstractTreeStructure treeStructure = getTreeStructure();\n    final Object rootElement = treeStructure.getRootElement();\n    final Object nodeElement = nodeDescriptor.getElement();\n\n    if (nodeElement == rootElement) {\n      return true;\n    }\n\n    if (((SMTestProxy)nodeElement).getParent() == nodeElement \n        && ((SMTestProxy)nodeElement).getChildren().size() == 1){\n\n    }\n    return false;\n  }","commit_id":"bc5d57e0346b32f8a582b185019caf722b1e1f6a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ArrayList<AbstractTreeNode> getPathToElement(Object element) {\n    ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>();\n    addToPath((AbstractTreeNode)myAbstractTreeBuilder.getTreeStructure().getRootElement(), element, result, new THashSet<Object>());\n    return result;\n  }","id":59057,"modified_method":"private ArrayList<AbstractTreeNode> getPathToElement(Object element) {\n    ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>();\n    final AbstractTreeStructure treeStructure = myAbstractTreeBuilder.getTreeStructure();\n    if (treeStructure != null) {\n      addToPath((AbstractTreeNode)treeStructure.getRootElement(), element, result, new THashSet<Object>());\n    }\n    return result;\n  }","commit_id":"c0cb27580c95848054a87e16763491d4879b163e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void appendToResponse(WOResponse woresponse, WOContext wocontext) {\n        WOComponent component = wocontext.component();\n        WOElement template = template(component);\n        wocontext._setCurrentComponent(component.parent());\n        template.appendToResponse(woresponse, wocontext);\n        wocontext._setCurrentComponent(component);\n    }","id":59058,"modified_method":"public void appendToResponse(WOResponse woresponse, WOContext wocontext) {\n        WOComponent component = wocontext.component();\n        WOElement template = template(component);\n        if(template != null) {\n        \twocontext._setCurrentComponent(component.parent());\n        \ttemplate.appendToResponse(woresponse, wocontext);\n        \twocontext._setCurrentComponent(component);\n        } else {\n        \t_defaultTemplate.appendToResponse(woresponse, wocontext);\n        }\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void takeValuesFromRequest(WORequest worequest, WOContext wocontext) {\n        WOComponent component = wocontext.component();\n        WOElement template = template(component);\n        wocontext._setCurrentComponent(component.parent());\n        template.takeValuesFromRequest(worequest, wocontext);\n        wocontext._setCurrentComponent(component);\n    }","id":59059,"modified_method":"public void takeValuesFromRequest(WORequest worequest, WOContext wocontext) {\n    \tWOComponent component = wocontext.component();\n    \tWOElement template = template(component);\n    \tif(template != null) {\n    \t\twocontext._setCurrentComponent(component.parent());\n    \t\ttemplate.takeValuesFromRequest(worequest, wocontext);\n    \t\twocontext._setCurrentComponent(component);\n    \t} else {\n    \t\t_defaultTemplate.takeValuesFromRequest(worequest, wocontext);\n    \t}\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public WOActionResults invokeAction(WORequest worequest, WOContext wocontext) {\n        WOComponent component = wocontext.component();\n        WOElement template = template(component);\n        wocontext._setCurrentComponent(component.parent());\n        WOActionResults result = template.invokeAction(worequest, wocontext);\n        wocontext._setCurrentComponent(component);\n        return result;\n    }","id":59060,"modified_method":"public WOActionResults invokeAction(WORequest worequest, WOContext wocontext) {\n    \tWOComponent component = wocontext.component();\n    \tWOElement template = template(component);\n    \tWOActionResults result;\n    \tif(template != null) {\n    \t\twocontext._setCurrentComponent(component.parent());\n    \t\tresult = template.invokeAction(worequest, wocontext);\n    \t\twocontext._setCurrentComponent(component);\n    \t} else {\n    \t\tresult = _defaultTemplate.invokeAction(worequest, wocontext);\n    \t}\n    \treturn result;\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public ERXWOComponentContent(String name, NSDictionary associations, WOElement woelement) {\n        super(name, associations, woelement);\n        WOAssociation assoc = (WOAssociation) associations.objectForKey(\"templateName\");\n        if(!assoc.isValueConstant()) {\n            throw new IllegalStateException(\"You must bind 'templateName' to a constant string\");\n        }\n        _templateName = (String) assoc.valueInComponent(null);\n        _defaultTemplate = woelement == null ? new WOHTMLBareString(\"\") : woelement;\n    }","id":59061,"modified_method":"public ERXWOComponentContent(String name, NSDictionary associations, WOElement woelement) {\n        super(name, associations, woelement);\n        _templateName = (WOAssociation) associations.objectForKey(\"templateName\");\n        if(!_templateName.isValueConstant()) {\n            //throw new IllegalStateException(\"You must bind 'templateName' to a constant string\");\n        }\n        _defaultTemplate = woelement == null ? new WOHTMLBareString(\"\") : woelement;\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"private WOElement template(WOComponent component) {\n        WODynamicGroup content = (WODynamicGroup) component._childTemplate();\n        WOElement result;\n        for(Enumeration e = content.childrenElements().objectEnumerator(); e.hasMoreElements(); ) {\n            result = (WOElement) e.nextElement();\n            if(result instanceof ERXWOTemplate) {\n                if(((ERXWOTemplate)result).templateName().equals(_templateName)) {\n                    return result;\n                }\n            }\n        }\n        return _defaultTemplate;\n    }","id":59062,"modified_method":"private WOElement template(WOComponent component) {\n    \tWOElement content =  component._childTemplate();\n    \tWOElement result = null;\n    \tif (content instanceof WODynamicGroup) {\n\t\t\tWODynamicGroup group = (WODynamicGroup) content;\n\t\t\tresult = template(group, component);\n\t\t}\n    \treturn result;\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public String templateName() {\n    \treturn _templateName;\n    }","id":59063,"modified_method":"public String templateName(WOComponent component) {\n       return (String) _templateName.valueInComponent(component);\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public ERXWOTemplate(String s, NSDictionary associations, WOElement woelement) {\n        super(s, associations, woelement);\n        WOAssociation assoc = (WOAssociation) associations.objectForKey(\"templateName\");\n        if(assoc == null || !assoc.isValueConstant()) {\n            throw new IllegalStateException(\"You must bind 'templateName' to a constant string: \" + associations);\n        }\n        _templateName = (String) assoc.valueInComponent(null);\n        _template = woelement;\n        if(_template == null) {\n        \t_template = new WONoContentElement();\n        }\n    }","id":59064,"modified_method":"public ERXWOTemplate(String s, NSDictionary associations, WOElement woelement) {\n        super(s, associations, woelement);\n        _templateName = (WOAssociation) associations.objectForKey(\"templateName\");\n        if(_templateName == null || !_templateName.isValueConstant()) {\n            //throw new IllegalStateException(\"You must bind 'templateName' to a constant string: \" + associations);\n        }\n        _template = woelement;\n        if(_template == null) {\n        \t_template = new WONoContentElement();\n        }\n    }","commit_id":"2dd994fd5563d33f8087d8d8e4080503a221586e","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tWOComponent component = context.component();\n\t\tboolean renderContainer = !booleanValueForBinding(\"optional\", false, component) || AjaxUpdateContainer.currentUpdateContainerID() == null;\n\t\tif (!renderContainer) {\n\t\t\tif (hasChildrenElements()) {\n\t\t\t\tappendChildrenToResponse(response, context);\n\t\t\t}\n\t\t\tsuper.appendToResponse(response, context);\n\t\t}\n\t\telse {\n\t\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\t\ttry {\n\t\t\t\tString elementName = (String) valueForBinding(\"elementName\", \"div\", component);\n\t\t\t\tString id = _containerID(context);\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\t\tresponse.appendContentString(\"<\" + elementName + \" \");\n\t\t\t\tappendTagAttributeToResponse(response, \"id\", id);\n\t\t\t\tappendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t\t\t\tappendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t\t\t\tappendTagAttributeToResponse(response, \"updateUrl\", AjaxUtils.ajaxComponentActionUrl(context));\n\t\t\t\t// appendTagAttributeToResponse(response, \"woElementID\", context.elementID());\n\t\t\t\tresponse.appendContentString(\">\");\n\t\t\t\tif (hasChildrenElements()) {\n\t\t\t\t\tappendChildrenToResponse(response, context);\n\t\t\t\t}\n\t\t\t\tresponse.appendContentString(\"<\/\" + elementName + \">\");\n\n\t\t\t\tsuper.appendToResponse(response, context);\n\n\t\t\t\tNSDictionary options = createAjaxOptions(component);\n\n\t\t\t\tObject frequency = valueForBinding(\"frequency\", component);\n\t\t\t\tString observeFieldID = (String) valueForBinding(\"observeFieldID\", component);\n\n\t\t\t\tboolean skipFunction = frequency == null && observeFieldID == null && booleanValueForBinding(\"skipFunction\", false, component);\n\t\t\t\tif (!skipFunction) {\n\t\t\t\t\tAjaxUtils.appendScriptHeader(response);\n\n\t\t\t\t\tif (frequency != null) {\n\t\t\t\t\t\t// try to convert to a number to check whether it is 0\n\t\t\t\t\t\tboolean isNotZero = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfloat numberFrequency = ERXValueUtilities.floatValue(frequency);\n\t\t\t\t\t\t\tif (numberFrequency == 0.0) {\n\t\t\t\t\t\t\t\t// set this only to false if it can be converted to 0\n\t\t\t\t\t\t\t\tisNotZero = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\t\tthrow new IllegalStateException(\"Error parsing float from value : <\" + frequency + \">\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isNotZero) {\n\t\t\t\t\t\t\tboolean canStop = false;\n\t\t\t\t\t\t\tboolean stopped = false;\n\t\t\t\t\t\t\tif (associations().objectForKey(\"stopped\") != null) {\n\t\t\t\t\t\t\t\tcanStop = true;\n\t\t\t\t\t\t\t\tstopped = booleanValueForBinding(\"stopped\", false, component);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponse.appendContentString(\"AUC.registerPeriodic('\" + id + \"',\" + canStop + \",\" + stopped + \",\");\n\t\t\t\t\t\t\tAjaxOptions.appendToResponse(options, response, context);\n\t\t\t\t\t\t\tresponse.appendContentString(\");\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (observeFieldID != null) {\n\t\t\t\t\t\tboolean fullSubmit = booleanValueForBinding(\"fullSubmit\", false, component);\n\t\t\t\t\t\tAjaxObserveField.appendToResponse(response, context, this, observeFieldID, false, id, fullSubmit, createObserveFieldOptions(component));\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse.appendContentString(\"AUC.register('\" + id + \"'\");\n\t\t\t\t\tNSDictionary nonDefaultOptions = AjaxUpdateContainer.removeDefaultOptions(options);\n\t\t\t\t\tif (nonDefaultOptions.count() > 0) {\n\t\t\t\t\t\tresponse.appendContentString(\", \");\n\t\t\t\t\t\tAjaxOptions.appendToResponse(nonDefaultOptions, response, context);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.appendContentString(\");\");\n\n\t\t\t\t\tAjaxUtils.appendScriptFooter(response);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t\t}\n\t\t}\n\t}","id":59065,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n\t\tWOComponent component = context.component();\n\t\tif (!shouldRenderContainer(component)) {\n\t\t\tif (hasChildrenElements()) {\n\t\t\t\tappendChildrenToResponse(response, context);\n\t\t\t}\n\t\t\tsuper.appendToResponse(response, context);\n\t\t}\n\t\telse {\n\t\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\t\ttry {\n\t\t\t\tString elementName = (String) valueForBinding(\"elementName\", \"div\", component);\n\t\t\t\tString id = _containerID(context);\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\t\tresponse.appendContentString(\"<\" + elementName + \" \");\n\t\t\t\tappendTagAttributeToResponse(response, \"id\", id);\n\t\t\t\tappendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t\t\t\tappendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t\t\t\tappendTagAttributeToResponse(response, \"updateUrl\", AjaxUtils.ajaxComponentActionUrl(context));\n\t\t\t\t// appendTagAttributeToResponse(response, \"woElementID\", context.elementID());\n\t\t\t\tresponse.appendContentString(\">\");\n\t\t\t\tif (hasChildrenElements()) {\n\t\t\t\t\tappendChildrenToResponse(response, context);\n\t\t\t\t}\n\t\t\t\tresponse.appendContentString(\"<\/\" + elementName + \">\");\n\n\t\t\t\tsuper.appendToResponse(response, context);\n\n\t\t\t\tNSDictionary options = createAjaxOptions(component);\n\n\t\t\t\tObject frequency = valueForBinding(\"frequency\", component);\n\t\t\t\tString observeFieldID = (String) valueForBinding(\"observeFieldID\", component);\n\n\t\t\t\tboolean skipFunction = frequency == null && observeFieldID == null && booleanValueForBinding(\"skipFunction\", false, component);\n\t\t\t\tif (!skipFunction) {\n\t\t\t\t\tAjaxUtils.appendScriptHeader(response);\n\n\t\t\t\t\tif (frequency != null) {\n\t\t\t\t\t\t// try to convert to a number to check whether it is 0\n\t\t\t\t\t\tboolean isNotZero = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfloat numberFrequency = ERXValueUtilities.floatValue(frequency);\n\t\t\t\t\t\t\tif (numberFrequency == 0.0) {\n\t\t\t\t\t\t\t\t// set this only to false if it can be converted to 0\n\t\t\t\t\t\t\t\tisNotZero = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\t\tthrow new IllegalStateException(\"Error parsing float from value : <\" + frequency + \">\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isNotZero) {\n\t\t\t\t\t\t\tboolean canStop = false;\n\t\t\t\t\t\t\tboolean stopped = false;\n\t\t\t\t\t\t\tif (associations().objectForKey(\"stopped\") != null) {\n\t\t\t\t\t\t\t\tcanStop = true;\n\t\t\t\t\t\t\t\tstopped = booleanValueForBinding(\"stopped\", false, component);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponse.appendContentString(\"AUC.registerPeriodic('\" + id + \"',\" + canStop + \",\" + stopped + \",\");\n\t\t\t\t\t\t\tAjaxOptions.appendToResponse(options, response, context);\n\t\t\t\t\t\t\tresponse.appendContentString(\");\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (observeFieldID != null) {\n\t\t\t\t\t\tboolean fullSubmit = booleanValueForBinding(\"fullSubmit\", false, component);\n\t\t\t\t\t\tAjaxObserveField.appendToResponse(response, context, this, observeFieldID, false, id, fullSubmit, createObserveFieldOptions(component));\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse.appendContentString(\"AUC.register('\" + id + \"'\");\n\t\t\t\t\tNSDictionary nonDefaultOptions = AjaxUpdateContainer.removeDefaultOptions(options);\n\t\t\t\t\tif (nonDefaultOptions.count() > 0) {\n\t\t\t\t\t\tresponse.appendContentString(\", \");\n\t\t\t\t\t\tAjaxOptions.appendToResponse(nonDefaultOptions, response, context);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.appendContentString(\");\");\n\n\t\t\t\t\tAjaxUtils.appendScriptFooter(response);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t\t}\n\t\t}\n\t}","commit_id":"0da491b72a3fd650e981db1d0cb83426c9fa1ff0","url":"https://github.com/wocommunity/wonder"},{"original_method":"public WOActionResults invokeAction(WORequest request, WOContext context) {\n\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\ttry {\n\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\treturn super.invokeAction(request, context);\n\t\t}\n\t\tfinally {\n\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t}\n\t}","id":59066,"modified_method":"public WOActionResults invokeAction(WORequest request, WOContext context) {\n\t\tWOActionResults results;\n\t\tif (shouldRenderContainer(context.component())) {\n\t\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\t\ttry {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\t\tresults = super.invokeAction(request, context);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresults = super.invokeAction(request, context);\n\t\t}\n\t\treturn results;\n\t}","commit_id":"0da491b72a3fd650e981db1d0cb83426c9fa1ff0","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void takeValuesFromRequest(WORequest request, WOContext context) {\n\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\ttry {\n\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\tsuper.takeValuesFromRequest(request, context);\n\t\t}\n\t\tfinally {\n\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t}\n\t}","id":59067,"modified_method":"public void takeValuesFromRequest(WORequest request, WOContext context) {\n\t\tif (shouldRenderContainer(context.component())) {\n\t\t\tString previousUpdateContainerID = AjaxUpdateContainer.currentUpdateContainerID();\n\t\t\ttry {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(_containerID(context));\n\t\t\t\tsuper.takeValuesFromRequest(request, context);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tAjaxUpdateContainer.setCurrentUpdateContainerID(previousUpdateContainerID);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsuper.takeValuesFromRequest(request, context);\n\t\t}\n\t}","commit_id":"0da491b72a3fd650e981db1d0cb83426c9fa1ff0","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n\tpublic void takeValuesFromRequest(WORequest request, WOContext context) {\n\t\tboolean wasFormSubmitted = context._wasFormSubmitted();\n\t\tboolean wasInForm = _enterFormInContext(context);\n\n\t\t// log.info(this._formName + \"->\" +\n\t\t// this.toString().replaceAll(\".*(keyPath=\\\\w+).*\", \"$1\"));\n\t\t_setFormName(context, wasInForm);\n\t\tsuper.takeValuesFromRequest(request, context);\n\t\t// log.info(context.elementID() + \"->\" + context.senderID() + \"->\" +\n\t\t// context._wasFormSubmitted());\n\t\t_exitFormInContext(context, wasInForm, wasFormSubmitted);\n\t\t_clearFormName(context, wasInForm);\n\t}","id":59068,"modified_method":"@Override\n\tpublic void takeValuesFromRequest(WORequest request, WOContext context) {\n\t\tboolean wasInForm = context.isInForm();\n\t\tif (_shouldAppendFormTags(context, wasInForm)) {\n\t\t\tboolean wasFormSubmitted = context._wasFormSubmitted();\n\t\t\t_enterFormInContext(context);\n\t\n\t\t\t// log.info(this._formName + \"->\" +\n\t\t\t// this.toString().replaceAll(\".*(keyPath=\\\\w+).*\", \"$1\"));\n\t\t\t_setFormName(context, wasInForm);\n\t\t\tsuper.takeValuesFromRequest(request, context);\n\t\t\t// log.info(context.elementID() + \"->\" + context.senderID() + \"->\" +\n\t\t\t// context._wasFormSubmitted());\n\t\t\t_exitFormInContext(context, wasInForm, wasFormSubmitted);\n\t\t\t_clearFormName(context, wasInForm);\n\t\t}\n\t\telse {\n\t\t\tsuper.takeValuesFromRequest(request, context);\n\t\t}\n\t}","commit_id":"a8694025145ca5fb85b2d99c275c8cce867550bc","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n\tpublic void appendToResponse(WOResponse response, WOContext context) {\n\t\tboolean wasInForm = context.isInForm();\n\t\tcontext.setInForm(true);\n\n\t\tif (_shouldAppendFormTags(context, wasInForm)) {\n\t\t\t_setFormName(context, wasInForm);\n\t\t\t_appendOpenTagToResponse(response, context);\n\t\t\tif (_multipleSubmit != null && _multipleSubmit.booleanValueInComponent(context.component())) {\n\t\t\t\tif (_addDefaultSubmitButton != null && _addDefaultSubmitButton.booleanValueInComponent(context.component()) || (_addDefaultSubmitButton == null && addDefaultSubmitButtonDefault)) {\n\t\t\t\t\tresponse._appendContentAsciiString(\"<input type=\\\"submit\\\" style=\\\"position: absolute; left: -10000px; display: none;\\\" name=\\\"WOFormDummySubmit\\\" value=\\\"WOFormDummySubmit\\\" />\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tappendChildrenToResponse(response, context);\n\t\t\t_appendCloseTagToResponse(response, context);\n\t\t\t_clearFormName(context, wasInForm);\n\t\t\t_clearEnctype();\n\t\t}\n\t\telse {\n\t\t\tif (!_disabled(context)) {\n\t\t\t\tlog.warn(\"This FORM is embedded inside another FORM. Omitting Tags: \" + this.toString());\n\t\t\t}\n\t\t\tappendChildrenToResponse(response, context);\n\t\t}\n\n\t\tcontext.setInForm(wasInForm);\n\t}","id":59069,"modified_method":"@Override\n\tpublic void appendToResponse(WOResponse response, WOContext context) {\n\t\tboolean wasInForm = context.isInForm();\n\t\tif (_shouldAppendFormTags(context, wasInForm)) {\n\t\t\tcontext.setInForm(true);\n\t\t\t_setFormName(context, wasInForm);\n\t\t\t_appendOpenTagToResponse(response, context);\n\t\t\tif (_multipleSubmit != null && _multipleSubmit.booleanValueInComponent(context.component())) {\n\t\t\t\tif (_addDefaultSubmitButton != null && _addDefaultSubmitButton.booleanValueInComponent(context.component()) || (_addDefaultSubmitButton == null && addDefaultSubmitButtonDefault)) {\n\t\t\t\t\tresponse._appendContentAsciiString(\"<input type=\\\"submit\\\" style=\\\"position: absolute; left: -10000px; display: none;\\\" name=\\\"WOFormDummySubmit\\\" value=\\\"WOFormDummySubmit\\\" />\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tappendChildrenToResponse(response, context);\n\t\t\t_appendCloseTagToResponse(response, context);\n\t\t\t_clearFormName(context, wasInForm);\n\t\t\t_clearEnctype();\n\t\t\tcontext.setInForm(wasInForm);\n\t\t}\n\t\telse {\n\t\t\tif (!_disabled(context)) {\n\t\t\t\tlog.warn(\"This form is embedded inside another form, so the inner form is being omitted: \" + this.toString());\n\t\t\t}\n\t\t\tappendChildrenToResponse(response, context);\n\t\t}\n\t}","commit_id":"a8694025145ca5fb85b2d99c275c8cce867550bc","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n\tpublic WOActionResults invokeAction(WORequest worequest, WOContext context) {\n\t\tboolean wasFormSubmitted = context._wasFormSubmitted();\n\t\tboolean wasInForm = _enterFormInContext(context);\n\t\tboolean wasMultipleSubmitForm = context._isMultipleSubmitForm();\n\n\t\tString enctype = _enctype(context);\n\t\tif (enctype != null) {\n\t\t\t_setEnctype(enctype);\n\t\t}\n\n\t\tcontext._setActionInvoked(false);\n\t\tcontext._setIsMultipleSubmitForm(_multipleSubmit == null ? false : _multipleSubmit.booleanValueInComponent(context.component()));\n\t\t_setFormName(context, wasInForm);\n\t\tWOActionResults result = super.invokeAction(worequest, context);\n\t\tif (!wasInForm && !context._wasActionInvoked() && context._wasFormSubmitted()) {\n\t\t\tif (_action != null) {\n\t\t\t\tresult = (WOActionResults) _action.valueInComponent(context.component());\n\t\t\t}\n\t\t\tif (result == null && !ERXAjaxApplication.isAjaxSubmit(worequest)) {\n\t\t\t\tresult = context.page();\n\t\t\t}\n\t\t}\n\t\tcontext._setIsMultipleSubmitForm(wasMultipleSubmitForm);\n\t\t_exitFormInContext(context, wasInForm, wasFormSubmitted);\n\t\t_clearFormName(context, wasInForm);\n\t\t_clearEnctype();\n\t\treturn result;\n\t}","id":59070,"modified_method":"@Override\n\tpublic WOActionResults invokeAction(WORequest worequest, WOContext context) {\n\t\tboolean wasInForm = context.isInForm();\n\t\tWOActionResults result;\n\t\tif (_shouldAppendFormTags(context, wasInForm)) {\n\t\t\tboolean wasFormSubmitted = context._wasFormSubmitted();\n\t\t\t_enterFormInContext(context);\n\t\t\tboolean wasMultipleSubmitForm = context._isMultipleSubmitForm();\n\t\n\t\t\tString enctype = _enctype(context);\n\t\t\tif (enctype != null) {\n\t\t\t\t_setEnctype(enctype);\n\t\t\t}\n\t\n\t\t\tcontext._setActionInvoked(false);\n\t\t\tcontext._setIsMultipleSubmitForm(_multipleSubmit == null ? false : _multipleSubmit.booleanValueInComponent(context.component()));\n\t\t\t_setFormName(context, wasInForm);\n\t\t\tresult = super.invokeAction(worequest, context);\n\t\t\tif (!wasInForm && !context._wasActionInvoked() && context._wasFormSubmitted()) {\n\t\t\t\tif (_action != null) {\n\t\t\t\t\tresult = (WOActionResults) _action.valueInComponent(context.component());\n\t\t\t\t}\n\t\t\t\tif (result == null && !ERXAjaxApplication.isAjaxSubmit(worequest)) {\n\t\t\t\t\tresult = context.page();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext._setIsMultipleSubmitForm(wasMultipleSubmitForm);\n\t\t\t_exitFormInContext(context, wasInForm, wasFormSubmitted);\n\t\t\t_clearFormName(context, wasInForm);\n\t\t\t_clearEnctype();\n\t\t}\n\t\telse {\n\t\t\tresult = super.invokeAction(worequest, context);\n\t\t}\n\t\treturn result;\n\t}","commit_id":"a8694025145ca5fb85b2d99c275c8cce867550bc","url":"https://github.com/wocommunity/wonder"},{"original_method":"public boolean isOld() {\n    if (StringUtil.isEmpty(version) || !Character.isDigit(version.charAt(0))) return false;\n\n    try {\n      String[] split = version.split(\"\\\\.\");\n      int first = Integer.parseInt(split[0]);\n      if (first > 3) return false;\n      if (first == 3) {\n        return (split.length < 2 || Integer.parseInt(split[1]) < 5);\n      }\n      return first < 3;\n    }\n    catch (RuntimeException e) {\n      LOGGER.debug(e.getMessage(), e);\n    }\n    return false;\n  }","id":59071,"modified_method":"public boolean isOld() {\n    if (isIonic()) return false;\n\n    if (StringUtil.isEmpty(version) || !Character.isDigit(version.charAt(0))) return false;\n\n    try {\n      String[] split = version.split(\"\\\\.\");\n      int first = Integer.parseInt(split[0]);\n      if (first > 3) return false;\n      if (first == 3) {\n        return (split.length < 2 || Integer.parseInt(split[1]) < 5);\n      }\n      return first < 3;\n    }\n    catch (RuntimeException e) {\n      LOGGER.debug(e.getMessage(), e);\n    }\n    return false;\n  }","commit_id":"5c4366f1c9f08ff648f36269f58390bfd834c519","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  public void projectOpened() {\n    StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable() {\n      public void run() {\n        if (PhoneGapUtil.isPhoneGapProject(myProject) && PhoneGapSettings.getInstance().isExcludePlatformFolder()) {\n          excludePlatformFolders();\n        }\n      }\n    });\n\n    VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter() {\n      @Override\n      public void fileCreated(@NotNull VirtualFileEvent event) {\n        if (!isProcess(event)) {\n          return;\n        }\n\n        updateModuleExcludeByFSEvent(event, ContainerUtil.<String>newHashSet(), ContainerUtil.newHashSet(getExcludedFolderNames(event)));\n      }\n\n      @Override\n      public void beforeFileDeletion(@NotNull VirtualFileEvent event) {\n        if (!isProcess(event)) {\n          return;\n        }\n\n        updateModuleExcludeByFSEvent(event, getExcludedFolderNames(event), ContainerUtil.<String>newHashSet());\n      }\n\n      private boolean isProcess(@NotNull VirtualFileEvent event) {\n        return event.getFileName().equals(FOLDER_PLATFORMS) && PhoneGapUtil.isPhoneGapProject(myProject)\n               && PhoneGapSettings.getInstance().isExcludePlatformFolder();\n      }\n    }, myProject);\n  }","id":59072,"modified_method":"@Override\n  public void projectOpened() {\n    StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable() {\n      public void run() {\n        if (PhoneGapUtil.isPhoneGapProject(myProject) && PhoneGapSettings.getInstance().isExcludePlatformFolder()) {\n          excludePlatformFolders();\n        }\n      }\n    });\n\n    VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter() {\n      @Override\n      public void fileCreated(@NotNull VirtualFileEvent event) {\n        if (!isProcess(event)) {\n          return;\n        }\n\n        updateModuleExcludeByFSEvent(event, ContainerUtil.<String>newHashSet(), ContainerUtil.newHashSet(getExcludedFolderNames(event)));\n      }\n\n      @Override\n      public void beforeFileDeletion(@NotNull VirtualFileEvent event) {\n        if (!isProcess(event)) {\n          return;\n        }\n\n        updateModuleExcludeByFSEvent(event, getExcludedFolderNames(event), ContainerUtil.<String>newHashSet());\n      }\n\n      private boolean isProcess(@NotNull VirtualFileEvent event) {\n        return event.getFileName().equals(FOLDER_PLATFORMS) &&\n               event.getFile().isDirectory() &&\n               PhoneGapUtil.isPhoneGapProject(myProject) &&\n               PhoneGapSettings.getInstance().isExcludePlatformFolder();\n      }\n    }, myProject);\n  }","commit_id":"5c4366f1c9f08ff648f36269f58390bfd834c519","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static Collection<VirtualFile> getFolders(@NotNull Project project) {\n    for (String folder : POSSIBLE_FOLDERS_IN_PHONEGAP_ROOT) {\n      Collection<VirtualFile> files =\n        FilenameIndex.getVirtualFilesByName(project, folder, GlobalSearchScope.projectScope(project));\n      if (!files.isEmpty()) {\n        return files;\n      }\n    }\n\n    return ContainerUtil.emptyList();\n  }","id":59073,"modified_method":"private static Collection<VirtualFile> getFolders(@NotNull Project project) {\n    for (String folder : POSSIBLE_FOLDERS_IN_PHONEGAP_ROOT) {\n      Collection<VirtualFile> files =\n        ContainerUtil.filter(FilenameIndex.getVirtualFilesByName(project, folder, GlobalSearchScope.projectScope(project)),\n                             new Condition<VirtualFile>() {\n                               @Override\n                               public boolean value(VirtualFile file) {\n                                 return file.isDirectory();\n                               }\n                             });\n      if (!files.isEmpty()) {\n        return files;\n      }\n    }\n\n    return ContainerUtil.emptyList();\n  }","commit_id":"5c4366f1c9f08ff648f36269f58390bfd834c519","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  public static List<String> getDefaultWorkingDirectory(@Nullable Project project) {\n    List<String> paths = ContainerUtil.newArrayList();\n    if (project == null) return paths;\n    VirtualFile baseDir = project.getBaseDir();\n    if (baseDir == null) return paths;\n\n    if (baseDir.findChild(FOLDER_PLATFORMS) != null ||\n        baseDir.findChild(FOLDER_WWW) != null ||\n        baseDir.findChild(FOLDER_CORDOVA) != null) {\n\n      ContainerUtil.addIfNotNull(paths, project.getBasePath());\n    }\n    else {\n      addPaths(paths, getFolders(project));\n    }\n\n    return paths;\n  }","id":59074,"modified_method":"@NotNull\n  public static List<String> getDefaultWorkingDirectory(@Nullable Project project) {\n    List<String> paths = ContainerUtil.newArrayList();\n    if (project == null) return paths;\n    VirtualFile baseDir = project.getBaseDir();\n    if (baseDir == null) return paths;\n\n    if (folderExist(baseDir, FOLDER_PLATFORMS) ||\n        folderExist(baseDir, FOLDER_WWW) ||\n        folderExist(baseDir, FOLDER_CORDOVA)) {\n\n      ContainerUtil.addIfNotNull(paths, project.getBasePath());\n    }\n    else {\n      addPaths(paths, getFolders(project));\n    }\n\n    return paths;\n  }","commit_id":"5c4366f1c9f08ff648f36269f58390bfd834c519","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean isPhoneGapProject(@NotNull final Project project) {\n\n    return CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Boolean>() {\n      @Nullable\n      @Override\n      public Result<Boolean> compute() {\n        PsiFile[] files = FilenameIndex.getFilesByName(project, \"config.xml\", GlobalSearchScope.allScope(project));\n\n        PsiFile file = ContainerUtil.find(files, new Condition<PsiFile>() {\n          @Override\n          public boolean value(PsiFile file) {\n            if (!(file instanceof XmlFile)) return false;\n\n            XmlTag root = ((XmlFile)file).getRootTag();\n            if (root == null) return false;\n\n            return root.getName().equals(\"widget\");\n          }\n        });\n\n        return Result.create(file != null, PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);\n      }\n    });\n  }","id":59075,"modified_method":"public static boolean isPhoneGapProject(@NotNull final Project project) {\n\n    return CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Boolean>() {\n      @Nullable\n      @Override\n      public Result<Boolean> compute() {\n        PsiFile[] files = FilenameIndex.getFilesByName(project, \"config.xml\", GlobalSearchScope.projectScope(project));\n\n        PsiFile file = ContainerUtil.find(files, new Condition<PsiFile>() {\n          @Override\n          public boolean value(PsiFile file) {\n            if (!(file instanceof XmlFile)) return false;\n\n            XmlTag root = ((XmlFile)file).getRootTag();\n            if (root == null) return false;\n\n            return root.getName().equals(\"widget\");\n          }\n        });\n\n        return Result.create(file != null, PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);\n      }\n    });\n  }","commit_id":"5c4366f1c9f08ff648f36269f58390bfd834c519","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      List<SNode> resNodes = FindUsagesManager.getInstance().findInstances(searchQuery.getNodePointer().getNode(), searchQuery.getScope());\n      for (SNode node : resNodes) {\n        results.getSearchResults().add(new SearchResult(new SNodePointer(node), \"Concept Instances\"));\n      }\n      results.getSearchedNodePointers().add(searchQuery.getNodePointer());\n    }\n    return results;\n  }","id":59076,"modified_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      List<SNode> resNodes = FindUsagesManager.getInstance().findInstances(searchQuery.getNodePointer().getNode(), searchQuery.getScope());\n      for (SNode node : resNodes) {\n        results.getSearchResults().add(new SearchResult(new SNodePointer(node), \"Concept Instances\"));\n      }\n      results.getSearchedNodePointers().add(new SNodePointer(searchQuery.getNodePointer().getNode()));\n    }\n    return results;\n  }","commit_id":"090da5d30745e25cba0edd5d69090211e55a4c4a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      Set<SNode> nodes = new HashSet<SNode>();\n      results.getSearchedNodePointers().add(searchQuery.getNodePointer());\n      nodes.add(searchQuery.getNodePointer().getNode());\n      for (SNode node : searchQuery.getNodePointer().getNode().allChildren()) {\n        results.getSearchedNodePointers().add(new SNodePointer(node));\n        nodes.add(node);\n      }\n      // null\n      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(nodes, searchQuery.getScope(), null);\n      for (SReference reference : resRefs) {\n        if (!(nodes.contains(reference.getSourceNode()))) {\n          results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), \"Node Usages\"));\n        }\n      }\n    }\n    return results;\n  }","id":59077,"modified_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      Set<SNode> nodes = new HashSet<SNode>();\n      results.getSearchedNodePointers().add(new SNodePointer(searchQuery.getNodePointer().getNode()));\n      nodes.add(searchQuery.getNodePointer().getNode());\n      for (SNode node : searchQuery.getNodePointer().getNode().allChildren()) {\n        results.getSearchedNodePointers().add(new SNodePointer(node));\n        nodes.add(node);\n      }\n      // null\n      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(nodes, searchQuery.getScope(), null);\n      for (SReference reference : resRefs) {\n        if (!(nodes.contains(reference.getSourceNode()))) {\n          results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), \"Node Usages\"));\n        }\n      }\n    }\n    return results;\n  }","commit_id":"090da5d30745e25cba0edd5d69090211e55a4c4a","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(searchQuery.getNodePointer().getNode(), searchQuery.getScope());\n      for (SReference reference : resRefs) {\n        results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), \"Node Usages\"));\n      }\n      results.getSearchedNodePointers().add(searchQuery.getNodePointer());\n    }\n    return results;\n  }","id":59078,"modified_method":"public SearchResults find(SearchQuery searchQuery) {\n    SearchResults results = new SearchResults();\n    {\n      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(searchQuery.getNodePointer().getNode(), searchQuery.getScope());\n      for (SReference reference : resRefs) {\n        results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), \"Node Usages\"));\n      }\n      results.getSearchedNodePointers().add(new SNodePointer(searchQuery.getNodePointer().getNode()));\n    }\n    return results;\n  }","commit_id":"090da5d30745e25cba0edd5d69090211e55a4c4a","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n   public HashSet<AppCommand> getSupportedCommands(Commands commands)\n   {\n      HashSet<AppCommand> result = super.getSupportedCommands(commands);\n      result.add(commands.jumpToFunction());\n      result.add(commands.goToFunctionDefinition());\n      result.add(commands.backToPreviousLocation());\n      return result;\n   }","id":59079,"modified_method":"@Override\n   public HashSet<AppCommand> getSupportedCommands(Commands commands)\n   {\n      HashSet<AppCommand> result = super.getSupportedCommands(commands);\n      result.add(commands.jumpToFunction());\n      result.add(commands.goToFunctionDefinition());\n      return result;\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   public void onSourceNavigation(SourceNavigationEvent event)\n   {      \n      // de-dup if necessary\n      if (!sourceNavigations_.empty() &&\n          event.getNavigation().isEqualTo(sourceNavigations_.peek()))\n      {\n         return;\n      }\n      \n      sourceNavigations_.push(event.getNavigation());\n      \n      commands_.backToPreviousLocation().setEnabled(true);\n   }","id":59080,"modified_method":"@Override\n   public void onSourceNavigation(SourceNavigationEvent event)\n   {      \n      // de-dup if necessary\n      if (!sourceNavigations_.empty() &&\n          event.getNavigation().isEqualTo(sourceNavigations_.peek()))\n      {\n         return;\n      }\n      \n      sourceNavigations_.push(event.getNavigation());\n      \n      manageBackAndForwardCommands();\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Handler\n   public void onBackToPreviousLocation()\n   {\n      if (!sourceNavigations_.empty())\n      {\n         // get the navigation & manage resulting command state\n         final SourceNavigation navigation = sourceNavigations_.pop();\n         manageBackToPreviousLocationCommand();\n         \n         // see if we can navigate by id\n         String docId = navigation.getDocumentId();\n         EditingTarget target = getEditingTargetForId(docId);\n         if (target != null)\n         {\n            // check for navigation to the current position -- in this\n            // case call the function back to go to the previous location\n            if ( (target == activeEditor_) && \n                  target.isAtPosition(navigation.getPosition()))\n            {\n               onBackToPreviousLocation();\n               return;\n            }\n            else\n            {\n               view_.selectTab(target.asWidget());\n               target.restorePosition(navigation.getPosition());\n            }\n         }\n         \n         // otherwise we need to re-open the file\n         else if (navigation.getPath() != null)\n         {\n            openFile(FileSystemItem.createFile(navigation.getPath()), \n                     new CommandWithArg<EditingTarget>() {\n               @Override\n               public void execute(EditingTarget target)\n               {\n                  target.restorePosition(navigation.getPosition());\n               }\n            });\n         } \n      }\n   }","id":59081,"modified_method":"@Handler\n   public void onBackToPreviousLocation()\n   {\n      if (!sourceNavigations_.empty())\n      {\n         // get the navigation & manage resulting command state\n         final SourceNavigation navigation = sourceNavigations_.pop();\n         manageBackAndForwardCommands();\n         \n         // see if we can navigate by id\n         String docId = navigation.getDocumentId();\n         EditingTarget target = getEditingTargetForId(docId);\n         if (target != null)\n         {\n            // check for navigation to the current position -- in this\n            // case call the function back to go to the previous location\n            if ( (target == activeEditor_) && \n                  target.isAtPosition(navigation.getPosition()))\n            {\n               onBackToPreviousLocation();\n               return;\n            }\n            else\n            {\n               view_.selectTab(target.asWidget());\n               target.restorePosition(navigation.getPosition());\n            }\n         }\n         \n         // otherwise we need to re-open the file\n         else if (navigation.getPath() != null)\n         {\n            openFile(FileSystemItem.createFile(navigation.getPath()), \n                     new CommandWithArg<EditingTarget>() {\n               @Override\n               public void execute(EditingTarget target)\n               {\n                  target.restorePosition(navigation.getPosition());\n               }\n            });\n         } \n      }\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public Source(Commands commands,\n                 Display view,\n                 SourceServerOperations server,\n                 EditingTargetSource editingTargetSource,\n                 FileTypeRegistry fileTypeRegistry,\n                 GlobalDisplay globalDisplay,\n                 FileDialogs fileDialogs,\n                 RemoteFileSystemContext fileContext,\n                 EventBus events,\n                 Session session,\n                 WorkbenchContext workbenchContext,\n                 Provider<FileMRUList> pMruList,\n                 UIPrefs uiPrefs)\n   {\n      commands_ = commands;\n      view_ = view;\n      server_ = server;\n      editingTargetSource_ = editingTargetSource;\n      fileTypeRegistry_ = fileTypeRegistry;\n      globalDisplay_ = globalDisplay;\n      fileDialogs_ = fileDialogs;\n      fileContext_ = fileContext;\n      events_ = events;\n      workbenchContext_ = workbenchContext;\n      pMruList_ = pMruList;\n      uiPrefs_ = uiPrefs;\n      codeIndexingEnabled_ = session.getSessionInfo().isIndexingEnabled();\n\n      view_.addTabClosingHandler(this);\n      view_.addTabClosedHandler(this);\n      view_.addSelectionHandler(this);\n      view_.addBeforeShowHandler(this);\n\n      dynamicCommands_ = new HashSet<AppCommand>();\n      dynamicCommands_.add(commands.saveSourceDoc());\n      dynamicCommands_.add(commands.reopenSourceDocWithEncoding());\n      dynamicCommands_.add(commands.saveSourceDocAs());\n      dynamicCommands_.add(commands.saveSourceDocWithEncoding());\n      dynamicCommands_.add(commands.printSourceDoc());\n      dynamicCommands_.add(commands.executeCode());\n      dynamicCommands_.add(commands.executeAllCode());\n      dynamicCommands_.add(commands.executeToCurrentLine());\n      dynamicCommands_.add(commands.executeFromCurrentLine());\n      dynamicCommands_.add(commands.executeCurrentFunction());\n      dynamicCommands_.add(commands.executeLastCode());\n      dynamicCommands_.add(commands.sourceActiveDocument());\n      dynamicCommands_.add(commands.sourceActiveDocumentWithEcho());\n      dynamicCommands_.add(commands.compilePDF());\n      dynamicCommands_.add(commands.publishPDF());\n      dynamicCommands_.add(commands.popoutDoc());\n      dynamicCommands_.add(commands.findReplace());\n      dynamicCommands_.add(commands.extractFunction());\n      dynamicCommands_.add(commands.commentUncomment());\n      dynamicCommands_.add(commands.reindent());\n      dynamicCommands_.add(commands.jumpToFunction());\n      dynamicCommands_.add(commands.goToFunctionDefinition());\n      dynamicCommands_.add(commands.backToPreviousLocation());\n      dynamicCommands_.add(commands.setWorkingDirToActiveDoc());\n      for (AppCommand command : dynamicCommands_)\n      {\n         command.setVisible(false);\n         command.setEnabled(false);\n      }\n      \n      // fake shortcuts for commands which we handle at a lower level\n      int mod = BrowseCap.hasMetaKey() ? KeyboardShortcut.META : \n                                         KeyboardShortcut.CTRL;\n      commands.findReplace().setShortcut(new KeyboardShortcut(mod, 'F'));\n      commands.goToFunctionDefinition().setShortcut(new KeyboardShortcut(113));\n      \n             \n      // allow Ctrl+W to propagate to the browser if close doc is disabled\n      if (!Desktop.isDesktop())\n      {\n         AppCommand closeSourceDoc = commands_.closeSourceDoc();\n         closeSourceDoc.setPreventShortcutWhenDisabled(false);\n      }   \n      \n      events.addHandler(ShowContentEvent.TYPE, this);\n      events.addHandler(ShowDataEvent.TYPE, this);\n\n      events.addHandler(ViewDataEvent.TYPE, new ViewDataHandler()\n      {\n         public void onViewData(ViewDataEvent event)\n         {\n            server_.newDocument(\n                  FileTypeRegistry.DATAFRAME.getTypeId(),\n                  JsObject.createJsObject(),\n                  new SimpleRequestCallback<SourceDocument>(\"Edit Data Frame\") {\n                     public void onResponseReceived(SourceDocument response)\n                     {\n                        addTab(response);\n                     }\n                  });\n         }\n      });\n\n      events.addHandler(FileTypeChangedEvent.TYPE, new FileTypeChangedHandler()\n      {\n         public void onFileTypeChanged(FileTypeChangedEvent event)\n         {\n            manageCommands();\n         }\n      });\n\n      events.addHandler(SwitchToDocEvent.TYPE, new SwitchToDocHandler()\n      {\n         public void onSwitchToDoc(SwitchToDocEvent event)\n         {\n            ensureVisible(false);\n            view_.selectTab(event.getSelectedIndex());\n         }\n      });\n\n      events.addHandler(SourceFileSavedEvent.TYPE, new SourceFileSavedHandler()\n      {\n         public void onSourceFileSaved(SourceFileSavedEvent event)\n         {\n            pMruList_.get().add(event.getPath());\n         }\n      });\n      \n      \n      events.addHandler(CodeIndexingStatusChangedEvent.TYPE,\n                           new CodeIndexingStatusChangedHandler() {\n         @Override\n         public void onCodeIndexingStatusChanged(\n                      CodeIndexingStatusChangedEvent event)\n         {\n            codeIndexingEnabled_ = event.getEnabled();\n            manageCommands();\n         }\n      });\n      \n      events.addHandler(SourceNavigationEvent.TYPE, this);\n\n      restoreDocuments(session);\n\n      new IntStateValue(MODULE_SOURCE, KEY_ACTIVETAB, ClientState.PROJECT_PERSISTENT,\n                        session.getSessionInfo().getClientState())\n      {\n         @Override\n         protected void onInit(Integer value)\n         {\n            if (value == null)\n               return;\n            if (value >= 0 && view_.getTabCount() > value)\n               view_.selectTab(value);\n\n            if (view_.getTabCount() > 0 && view_.getActiveTabIndex() >= 0)\n            {\n               editors_.get(view_.getActiveTabIndex()).onInitiallyLoaded();\n            }\n         }\n\n         @Override\n         protected Integer getValue()\n         {\n            return view_.getActiveTabIndex();\n         }\n      };\n      \n      initialized_ = true;\n      // As tabs were added before, manageCommands() was suppressed due to\n      // initialized_ being false, so we need to run it explicitly\n      manageCommands();\n      // Same with this event\n      fireDocTabsChanged();\n   }","id":59082,"modified_method":"@Inject\n   public Source(Commands commands,\n                 Display view,\n                 SourceServerOperations server,\n                 EditingTargetSource editingTargetSource,\n                 FileTypeRegistry fileTypeRegistry,\n                 GlobalDisplay globalDisplay,\n                 FileDialogs fileDialogs,\n                 RemoteFileSystemContext fileContext,\n                 EventBus events,\n                 Session session,\n                 WorkbenchContext workbenchContext,\n                 Provider<FileMRUList> pMruList,\n                 UIPrefs uiPrefs)\n   {\n      commands_ = commands;\n      view_ = view;\n      server_ = server;\n      editingTargetSource_ = editingTargetSource;\n      fileTypeRegistry_ = fileTypeRegistry;\n      globalDisplay_ = globalDisplay;\n      fileDialogs_ = fileDialogs;\n      fileContext_ = fileContext;\n      events_ = events;\n      workbenchContext_ = workbenchContext;\n      pMruList_ = pMruList;\n      uiPrefs_ = uiPrefs;\n      codeIndexingEnabled_ = session.getSessionInfo().isIndexingEnabled();\n\n      view_.addTabClosingHandler(this);\n      view_.addTabClosedHandler(this);\n      view_.addSelectionHandler(this);\n      view_.addBeforeShowHandler(this);\n\n      dynamicCommands_ = new HashSet<AppCommand>();\n      dynamicCommands_.add(commands.saveSourceDoc());\n      dynamicCommands_.add(commands.reopenSourceDocWithEncoding());\n      dynamicCommands_.add(commands.saveSourceDocAs());\n      dynamicCommands_.add(commands.saveSourceDocWithEncoding());\n      dynamicCommands_.add(commands.printSourceDoc());\n      dynamicCommands_.add(commands.executeCode());\n      dynamicCommands_.add(commands.executeAllCode());\n      dynamicCommands_.add(commands.executeToCurrentLine());\n      dynamicCommands_.add(commands.executeFromCurrentLine());\n      dynamicCommands_.add(commands.executeCurrentFunction());\n      dynamicCommands_.add(commands.executeLastCode());\n      dynamicCommands_.add(commands.sourceActiveDocument());\n      dynamicCommands_.add(commands.sourceActiveDocumentWithEcho());\n      dynamicCommands_.add(commands.compilePDF());\n      dynamicCommands_.add(commands.publishPDF());\n      dynamicCommands_.add(commands.popoutDoc());\n      dynamicCommands_.add(commands.findReplace());\n      dynamicCommands_.add(commands.extractFunction());\n      dynamicCommands_.add(commands.commentUncomment());\n      dynamicCommands_.add(commands.reindent());\n      dynamicCommands_.add(commands.jumpToFunction());\n      dynamicCommands_.add(commands.goToFunctionDefinition());\n      dynamicCommands_.add(commands.setWorkingDirToActiveDoc());\n      for (AppCommand command : dynamicCommands_)\n      {\n         command.setVisible(false);\n         command.setEnabled(false);\n      }\n      \n      // fake shortcuts for commands which we handle at a lower level\n      int mod = BrowseCap.hasMetaKey() ? KeyboardShortcut.META : \n                                         KeyboardShortcut.CTRL;\n      commands.findReplace().setShortcut(new KeyboardShortcut(mod, 'F'));\n      commands.goToFunctionDefinition().setShortcut(new KeyboardShortcut(113));\n      \n             \n      // allow Ctrl+W to propagate to the browser if close doc is disabled\n      if (!Desktop.isDesktop())\n      {\n         AppCommand closeSourceDoc = commands_.closeSourceDoc();\n         closeSourceDoc.setPreventShortcutWhenDisabled(false);\n      }   \n      \n      events.addHandler(ShowContentEvent.TYPE, this);\n      events.addHandler(ShowDataEvent.TYPE, this);\n\n      events.addHandler(ViewDataEvent.TYPE, new ViewDataHandler()\n      {\n         public void onViewData(ViewDataEvent event)\n         {\n            server_.newDocument(\n                  FileTypeRegistry.DATAFRAME.getTypeId(),\n                  JsObject.createJsObject(),\n                  new SimpleRequestCallback<SourceDocument>(\"Edit Data Frame\") {\n                     public void onResponseReceived(SourceDocument response)\n                     {\n                        addTab(response);\n                     }\n                  });\n         }\n      });\n\n      events.addHandler(FileTypeChangedEvent.TYPE, new FileTypeChangedHandler()\n      {\n         public void onFileTypeChanged(FileTypeChangedEvent event)\n         {\n            manageCommands();\n         }\n      });\n\n      events.addHandler(SwitchToDocEvent.TYPE, new SwitchToDocHandler()\n      {\n         public void onSwitchToDoc(SwitchToDocEvent event)\n         {\n            ensureVisible(false);\n            view_.selectTab(event.getSelectedIndex());\n         }\n      });\n\n      events.addHandler(SourceFileSavedEvent.TYPE, new SourceFileSavedHandler()\n      {\n         public void onSourceFileSaved(SourceFileSavedEvent event)\n         {\n            pMruList_.get().add(event.getPath());\n         }\n      });\n      \n      \n      events.addHandler(CodeIndexingStatusChangedEvent.TYPE,\n                           new CodeIndexingStatusChangedHandler() {\n         @Override\n         public void onCodeIndexingStatusChanged(\n                      CodeIndexingStatusChangedEvent event)\n         {\n            codeIndexingEnabled_ = event.getEnabled();\n            manageCommands();\n         }\n      });\n      \n      events.addHandler(SourceNavigationEvent.TYPE, this);\n\n      restoreDocuments(session);\n\n      new IntStateValue(MODULE_SOURCE, KEY_ACTIVETAB, ClientState.PROJECT_PERSISTENT,\n                        session.getSessionInfo().getClientState())\n      {\n         @Override\n         protected void onInit(Integer value)\n         {\n            if (value == null)\n               return;\n            if (value >= 0 && view_.getTabCount() > value)\n               view_.selectTab(value);\n\n            if (view_.getTabCount() > 0 && view_.getActiveTabIndex() >= 0)\n            {\n               editors_.get(view_.getActiveTabIndex()).onInitiallyLoaded();\n            }\n         }\n\n         @Override\n         protected Integer getValue()\n         {\n            return view_.getActiveTabIndex();\n         }\n      };\n      \n      initialized_ = true;\n      // As tabs were added before, manageCommands() was suppressed due to\n      // initialized_ being false, so we need to run it explicitly\n      manageCommands();\n      // Same with this event\n      fireDocTabsChanged();\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void manageCommands()\n   {\n      boolean hasDocs = editors_.size() > 0;\n\n      commands_.closeSourceDoc().setEnabled(hasDocs);\n      commands_.closeAllSourceDocs().setEnabled(hasDocs);\n      commands_.nextTab().setEnabled(hasDocs);\n      commands_.previousTab().setEnabled(hasDocs);\n      commands_.firstTab().setEnabled(hasDocs);\n      commands_.lastTab().setEnabled(hasDocs);\n      commands_.switchToTab().setEnabled(hasDocs);\n      commands_.activateSource().setEnabled(hasDocs);\n      commands_.setWorkingDirToActiveDoc().setEnabled(hasDocs);\n\n      HashSet<AppCommand> newCommands =\n            activeEditor_ != null ? activeEditor_.getSupportedCommands()\n                                  : new HashSet<AppCommand>();\n            \n      // if necessary, remove commands which require a project\n      if (!isCodeSearchEnabled())\n      {\n         newCommands.remove(commands_.goToFunctionDefinition());\n      }\n\n      HashSet<AppCommand> commandsToEnable = new HashSet<AppCommand>(newCommands);\n      commandsToEnable.removeAll(activeCommands_);\n\n      HashSet<AppCommand> commandsToDisable = new HashSet<AppCommand>(activeCommands_);\n      commandsToDisable.removeAll(newCommands);\n\n      for (AppCommand command : commandsToEnable)\n      {\n         command.setEnabled(true);\n         command.setVisible(true);\n      }\n\n      for (AppCommand command : commandsToDisable)\n      {\n         command.setEnabled(false);\n         command.setVisible(false);\n      }\n      \n      \n      // commands which should always be visible even when disabled\n      commands_.saveSourceDoc().setVisible(true);\n      commands_.saveSourceDocAs().setVisible(true);\n      commands_.printSourceDoc().setVisible(true);\n      commands_.setWorkingDirToActiveDoc().setVisible(true);\n      \n      // manage save and save all\n      boolean saveEnabled = activeEditor_ != null &&\n                            activeEditor_.dirtyState().getValue() == true;\n      commands_.saveSourceDoc().setEnabled(saveEnabled);\n      manageSaveAllCommand();\n      \n      manageBackToPreviousLocationCommand();\n\n      activeCommands_ = newCommands;\n\n      assert verifyNoUnsupportedCommands(newCommands)\n            : \"Unsupported commands detected (please add to Source.dynamicCommands_)\";\n   }","id":59083,"modified_method":"private void manageCommands()\n   {\n      boolean hasDocs = editors_.size() > 0;\n\n      commands_.closeSourceDoc().setEnabled(hasDocs);\n      commands_.closeAllSourceDocs().setEnabled(hasDocs);\n      commands_.nextTab().setEnabled(hasDocs);\n      commands_.previousTab().setEnabled(hasDocs);\n      commands_.firstTab().setEnabled(hasDocs);\n      commands_.lastTab().setEnabled(hasDocs);\n      commands_.switchToTab().setEnabled(hasDocs);\n      commands_.activateSource().setEnabled(hasDocs);\n      commands_.setWorkingDirToActiveDoc().setEnabled(hasDocs);\n\n      HashSet<AppCommand> newCommands =\n            activeEditor_ != null ? activeEditor_.getSupportedCommands()\n                                  : new HashSet<AppCommand>();\n            \n      // if necessary, remove commands which require a project\n      if (!isCodeSearchEnabled())\n      {\n         newCommands.remove(commands_.goToFunctionDefinition());\n      }\n\n      HashSet<AppCommand> commandsToEnable = new HashSet<AppCommand>(newCommands);\n      commandsToEnable.removeAll(activeCommands_);\n\n      HashSet<AppCommand> commandsToDisable = new HashSet<AppCommand>(activeCommands_);\n      commandsToDisable.removeAll(newCommands);\n\n      for (AppCommand command : commandsToEnable)\n      {\n         command.setEnabled(true);\n         command.setVisible(true);\n      }\n\n      for (AppCommand command : commandsToDisable)\n      {\n         command.setEnabled(false);\n         command.setVisible(false);\n      }\n      \n      \n      // commands which should always be visible even when disabled\n      commands_.saveSourceDoc().setVisible(true);\n      commands_.saveSourceDocAs().setVisible(true);\n      commands_.printSourceDoc().setVisible(true);\n      commands_.setWorkingDirToActiveDoc().setVisible(true);\n      \n      // manage save and save all\n      boolean saveEnabled = activeEditor_ != null &&\n                            activeEditor_.dirtyState().getValue() == true;\n      commands_.saveSourceDoc().setEnabled(saveEnabled);\n      manageSaveAllCommand();\n      \n      manageBackAndForwardCommands();\n\n      activeCommands_ = newCommands;\n\n      assert verifyNoUnsupportedCommands(newCommands)\n            : \"Unsupported commands detected (please add to Source.dynamicCommands_)\";\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"private Widget createCodeTransformMenuButton()\n   {\n      if (codeTransform_ == null)\n      {\n         ImageResource icon = ThemeResources.INSTANCE.codeTransform();\n\n         ToolbarPopupMenu menu = new ToolbarPopupMenu();\n         menu.addItem(commands_.extractFunction().createMenuItem(false));\n         menu.addItem(commands_.commentUncomment().createMenuItem(false));\n         menu.addItem(commands_.reindent().createMenuItem(false));\n         menu.addSeparator();\n         menu.addItem(commands_.jumpToFunction().createMenuItem(false));\n         menu.addItem(commands_.goToFunctionDefinition().createMenuItem(false));\n         menu.addItem(commands_.backToPreviousLocation().createMenuItem(false));\n         codeTransform_ = new ToolbarButton(\"\", icon, menu);\n         codeTransform_.setTitle(\"Code Tools\");\n      }\n      return codeTransform_;\n   }","id":59084,"modified_method":"private Widget createCodeTransformMenuButton()\n   {\n      if (codeTransform_ == null)\n      {\n         ImageResource icon = ThemeResources.INSTANCE.codeTransform();\n\n         ToolbarPopupMenu menu = new ToolbarPopupMenu();\n         menu.addItem(commands_.backToPreviousLocation().createMenuItem(false));\n         menu.addItem(commands_.forwardToNextLocation().createMenuItem(false));\n         menu.addSeparator();\n         menu.addItem(commands_.jumpToFunction().createMenuItem(false));\n         menu.addItem(commands_.goToFunctionDefinition().createMenuItem(false));\n         menu.addSeparator();\n         menu.addItem(commands_.extractFunction().createMenuItem(false));\n         menu.addItem(commands_.commentUncomment().createMenuItem(false));\n         menu.addItem(commands_.reindent().createMenuItem(false));\n         codeTransform_ = new ToolbarButton(\"\", icon, menu);\n         codeTransform_.setTitle(\"Code Tools\");\n      }\n      return codeTransform_;\n   }","commit_id":"de372f3f70243f5126c44aa5a97927ff4a17bc68","url":"https://github.com/rstudio/rstudio"},{"original_method":"/**\n     * Loads all user interface configurations.\n     */\n    public static void loadGuiConfigurations()\n    {\n        configService.addPropertyChangeListener(\n            new ConfigurationChangeListener());\n\n        // Load the \"auPopupNewMessage\" property.\n        String autoPopupProperty = \n            \"service.gui.AUTO_POPUP_NEW_MESSAGE\";\n\n        String autoPopup = configService.getString(autoPopupProperty);\n\n        if(autoPopup == null)\n            autoPopup = GuiActivator.getResources().\n                getSettingsString(autoPopupProperty);\n\n        if(autoPopup != null && autoPopup.equalsIgnoreCase(\"yes\"))\n            autoPopupNewMessage = true;\n\n        // Load the \"sendMessageCommand\" property.\n        String messageCommandProperty\n            = \"service.gui.SEND_MESSAGE_COMMAND\";\n        String messageCommand = configService.getString(messageCommandProperty);\n\n        if(messageCommand == null)\n            messageCommand\n                = GuiActivator.getResources()\n                    .getSettingsString(messageCommandProperty);\n\n        if(messageCommand == null || messageCommand.length() == 0)\n            sendMessageCommand = messageCommand;\n\n        // Load the showCallPanel property.\n        String callPanelShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showCallPanel\");\n\n        if(callPanelShown != null && callPanelShown.length() > 0)\n        {\n            isCallPanelShown = Boolean.parseBoolean(callPanelShown);\n        }\n\n        // Load the \"showOffline\" property.\n        String showOffline = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showOffline\");\n        \n        if(showOffline != null && showOffline.length() > 0)\n        {\n            isShowOffline = Boolean.parseBoolean(showOffline);\n        }\n\n        // Load the \"showApplication\" property.\n        String isVisible = configService.getString(\n            \"net.java.sip.communicator.impl.systray.showApplication\");\n\n        if(isVisible != null && isVisible.length() > 0)\n        {\n            isApplicationVisible = new Boolean(isVisible).booleanValue();\n        }\n\n        // Load the \"showAppQuitWarning\" property.\n        String quitWarningShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.quitWarningShown\");\n\n        if(quitWarningShown != null && quitWarningShown.length() > 0)\n        {\n            isQuitWarningShown\n                = Boolean.parseBoolean(quitWarningShown);\n        }\n\n        // Load the \"sendTypingNotifications\" property.\n        String isSendTypingNotifProperty = \n            \"service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED\";\n        String isSendTypingNotif = \n            configService.getString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif == null)\n            isSendTypingNotif = \n                GuiActivator.getResources().\n                    getSettingsString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif != null && isSendTypingNotif.length() > 0)\n        {\n            isSendTypingNotifications\n                = Boolean.parseBoolean(isSendTypingNotif);\n        }\n\n        // Load the \"isMoveContactConfirmationRequested\" property.\n        String isMoveContactConfirmationRequestedString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested\");\n\n        if(isMoveContactConfirmationRequestedString != null\n            && isMoveContactConfirmationRequestedString.length() > 0)\n        {\n            isMoveContactConfirmationRequested\n                = Boolean.parseBoolean(isMoveContactConfirmationRequestedString);\n        }\n\n        // Load the \"isMultiChatWindowEnabled\" property.\n        String isMultiChatWindowEnabledStringProperty\n            = \"service.gui.IS_MULTI_CHAT_WINDOW_ENABLED\";\n\n        String isMultiChatWindowEnabledString\n            = configService.getString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString == null)\n            isMultiChatWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString != null\n            && isMultiChatWindowEnabledString.length() > 0)\n        {\n            isMultiChatWindowEnabled\n                = Boolean.parseBoolean(isMultiChatWindowEnabledString);\n        }\n\n        // Load the \"isLeaveChatroomOnWindowCloseEnabled\" property.\n        String isLeaveChatRoomOnWindowCloseEnabledStringProperty\n            = \"service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE\";\n\n        String isLeaveChatRoomOnWindowCloseEnabledString\n            = configService.getString(\n                isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString == null)\n            isLeaveChatRoomOnWindowCloseEnabledString =\n                GuiActivator.getResources().getSettingsString(\n                    isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString != null\n            && isLeaveChatRoomOnWindowCloseEnabledString.length() > 0)\n        {\n            isLeaveChatRoomOnWindowCloseEnabled\n                = new Boolean(isLeaveChatRoomOnWindowCloseEnabledString)\n                    .booleanValue();\n        }\n\n        // Load the \"isHistoryLoggingEnabled\" property.\n        String isHistoryLoggingEnabledString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled\");\n\n        if(isHistoryLoggingEnabledString != null\n            && isHistoryLoggingEnabledString.length() > 0)\n        {\n            isHistoryLoggingEnabled\n                = Boolean.parseBoolean(isHistoryLoggingEnabledString);\n        }\n\n        // Load the \"isHistoryShown\" property.\n        String isHistoryShownStringProperty = \n            \"service.gui.IS_MESSAGE_HISTORY_SHOWN\";\n\n        String isHistoryShownString\n            = configService.getString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString == null)\n            isHistoryShownString = \n                GuiActivator.getResources().\n                    getSettingsString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString != null\n            && isHistoryShownString.length() > 0)\n        {\n            isHistoryShown\n                = Boolean.parseBoolean(isHistoryShownString);\n        }\n\n        // Load the \"chatHistorySize\" property.\n        String chatHistorySizeStringProperty =\n            \"service.gui.MESSAGE_HISTORY_SIZE\";\n        String chatHistorySizeString\n            = configService.getString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString == null)\n            chatHistorySizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString != null\n            && chatHistorySizeString.length() > 0)\n        {\n            chatHistorySize = Integer.parseInt(chatHistorySizeString);\n        }\n\n        // Load the \"CHAT_WRITE_AREA_SIZE\" property.\n        String chatWriteAreaSizeStringProperty =\n            \"net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE\";\n        String chatWriteAreaSizeString\n            = configService.getString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString == null)\n            chatWriteAreaSizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString != null\n            && chatWriteAreaSizeString.length() > 0)\n        {\n            chatWriteAreaSize\n                = Integer.parseInt(chatWriteAreaSizeString);\n        }\n\n        // Load the \"isTransparentWindowEnabled\" property.\n        String isTransparentWindowEnabledProperty =\n            \"impl.gui.IS_TRANSPARENT_WINDOW_ENABLED\";\n\n        String isTransparentWindowEnabledString\n            = configService.getString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString == null)\n            isTransparentWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString != null\n            && isTransparentWindowEnabledString.length() > 0)\n        {\n            isTransparentWindowEnabled\n                = Boolean.parseBoolean(isTransparentWindowEnabledString);\n        }\n\n        // Load the \"windowTransparency\" property.\n        String windowTransparencyProperty =\n            \"impl.gui.WINDOW_TRANSPARENCY\";\n\n        String windowTransparencyString\n            = configService.getString(windowTransparencyProperty);\n\n        if(windowTransparencyString == null)\n            windowTransparencyString = \n                GuiActivator.getResources().\n                    getSettingsString(windowTransparencyProperty);\n\n        if(windowTransparencyString != null\n            && windowTransparencyString.length() > 0)\n        {\n            windowTransparency\n                = Integer.parseInt(windowTransparencyString);\n        }\n\n        // Load the \"isWindowDecorated\" property.\n        String isWindowDecoratedProperty\n            = \"impl.gui.IS_WINDOW_DECORATED\";\n\n        String isWindowDecoratedString\n            = configService.getString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString == null)\n            isWindowDecoratedString = \n                GuiActivator.getResources().\n                    getSettingsString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString != null\n            && isWindowDecoratedString.length() > 0)\n        {\n            isWindowDecorated\n                = Boolean.parseBoolean(isWindowDecoratedString);\n        }\n\n        // Load the \"isChatToolbarVisible\" property\n        isChatToolbarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar\",\n                true);\n        // Load the \"isChatToolbarVisible\" property\n        isChatStylebarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar\",\n                true);\n\n        // Load the \"isShowSmileys\" property\n        isShowSmileys\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showSmileys\",\n                true);\n\n        // Load the \"lastContactParent\" property.\n        lastContactParent = configService.getString(\n            \"net.java.sip.communicator.impl.gui.addcontact.lastContactParent\");\n\n        // Load the \"sendFileLastDir\" property.\n        sendFileLastDir = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.filetransfer.\" +\n            \"SEND_FILE_LAST_DIR\");\n\n        // Load the \"ADD_CONTACT_DISABLED\" property.\n        isAddContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_ADD_DISABLED\",\n                false);\n\n        // Load the \"REMOVE_CONTACT_DISABLED\" property.\n        isRemoveContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_REMOVE_DISABLED\",\n                false);\n\n        // Load the \"net.java.sip.communicator.impl.gui.main.account\n        // .ADVANCED_CONFIG_DISABLED\" property.\n        String advancedConfigDisabledDefaultProp\n            = GuiActivator.getResources().getSettingsString(\n                \"impl.gui.main.account.ADVANCED_CONFIG_DISABLED\");\n\n        boolean isAdvancedConfigDisabled = false;\n\n        if (advancedConfigDisabledDefaultProp != null)\n            isAdvancedConfigDisabled\n                = Boolean.parseBoolean(advancedConfigDisabledDefaultProp);\n\n        // Load the advanced account configuration disabled.\n        isAdvancedAccountConfigDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.account.\" +\n                \"ADVANCED_CONFIG_DISABLED\",\n                isAdvancedConfigDisabled);\n\n        // Load default font family string.\n        defaultFontFamily = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_FAMILY\");\n\n        // Load default font size.\n        defaultFontSize = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_SIZE\");\n\n        // Load isBold chat property.\n        isDefaultFontBold\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_BOLD\",\n                isDefaultFontBold);\n\n        // Load isItalic chat property.\n        isDefaultFontItalic\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_ITALIC\",\n                isDefaultFontItalic);\n\n        // Load isUnderline chat property.\n        isDefaultFontUnderline\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_UNDERLINE\",\n                isDefaultFontUnderline);\n\n        // Load default font color property.\n        int colorSetting = configService.getInt(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_COLOR\", -1);\n\n        if(colorSetting != -1)\n            defaultFontColor = colorSetting;\n    }","id":59085,"modified_method":"/**\n     * Loads all user interface configurations.\n     */\n    public static void loadGuiConfigurations()\n    {\n        configService.addPropertyChangeListener(\n            new ConfigurationChangeListener());\n\n        // Load the \"auPopupNewMessage\" property.\n        String autoPopupProperty = \n            \"service.gui.AUTO_POPUP_NEW_MESSAGE\";\n\n        String autoPopup = configService.getString(autoPopupProperty);\n\n        if(autoPopup == null)\n            autoPopup = GuiActivator.getResources().\n                getSettingsString(autoPopupProperty);\n\n        if(autoPopup != null && autoPopup.equalsIgnoreCase(\"yes\"))\n            autoPopupNewMessage = true;\n\n        // Load the \"sendMessageCommand\" property.\n        String messageCommandProperty\n            = \"service.gui.SEND_MESSAGE_COMMAND\";\n        String messageCommand = configService.getString(messageCommandProperty);\n\n        if(messageCommand == null)\n            messageCommand\n                = GuiActivator.getResources()\n                    .getSettingsString(messageCommandProperty);\n\n        if(messageCommand == null || messageCommand.length() == 0)\n            sendMessageCommand = messageCommand;\n\n        // Load the showCallPanel property.\n        String callPanelShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showCallPanel\");\n\n        if(callPanelShown != null && callPanelShown.length() > 0)\n        {\n            isCallPanelShown = Boolean.parseBoolean(callPanelShown);\n        }\n\n        // Load the \"showOffline\" property.\n        String showOffline = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showOffline\");\n        \n        if(showOffline != null && showOffline.length() > 0)\n        {\n            isShowOffline = Boolean.parseBoolean(showOffline);\n        }\n\n        // Load the \"showApplication\" property.\n        String isVisible = configService.getString(\n            \"net.java.sip.communicator.impl.systray.showApplication\");\n\n        if(isVisible != null && isVisible.length() > 0)\n        {\n            isApplicationVisible = new Boolean(isVisible).booleanValue();\n        }\n\n        // Load the \"showAppQuitWarning\" property.\n        String quitWarningShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.quitWarningShown\");\n\n        if(quitWarningShown != null && quitWarningShown.length() > 0)\n        {\n            isQuitWarningShown\n                = Boolean.parseBoolean(quitWarningShown);\n        }\n\n        // Load the \"sendTypingNotifications\" property.\n        String isSendTypingNotifProperty = \n            \"service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED\";\n        String isSendTypingNotif = \n            configService.getString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif == null)\n            isSendTypingNotif = \n                GuiActivator.getResources().\n                    getSettingsString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif != null && isSendTypingNotif.length() > 0)\n        {\n            isSendTypingNotifications\n                = Boolean.parseBoolean(isSendTypingNotif);\n        }\n\n        // Load the \"isMoveContactConfirmationRequested\" property.\n        String isMoveContactConfirmationRequestedString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested\");\n\n        if(isMoveContactConfirmationRequestedString != null\n            && isMoveContactConfirmationRequestedString.length() > 0)\n        {\n            isMoveContactConfirmationRequested\n                = Boolean.parseBoolean(isMoveContactConfirmationRequestedString);\n        }\n\n        // Load the \"isMultiChatWindowEnabled\" property.\n        String isMultiChatWindowEnabledStringProperty\n            = \"service.gui.IS_MULTI_CHAT_WINDOW_ENABLED\";\n\n        String isMultiChatWindowEnabledString\n            = configService.getString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString == null)\n            isMultiChatWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString != null\n            && isMultiChatWindowEnabledString.length() > 0)\n        {\n            isMultiChatWindowEnabled\n                = Boolean.parseBoolean(isMultiChatWindowEnabledString);\n        }\n\n        // Load the \"isLeaveChatroomOnWindowCloseEnabled\" property.\n        String isLeaveChatRoomOnWindowCloseEnabledStringProperty\n            = \"service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE\";\n\n        String isLeaveChatRoomOnWindowCloseEnabledString\n            = configService.getString(\n                isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString == null)\n            isLeaveChatRoomOnWindowCloseEnabledString =\n                GuiActivator.getResources().getSettingsString(\n                    isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString != null\n            && isLeaveChatRoomOnWindowCloseEnabledString.length() > 0)\n        {\n            isLeaveChatRoomOnWindowCloseEnabled\n                = new Boolean(isLeaveChatRoomOnWindowCloseEnabledString)\n                    .booleanValue();\n        }\n\n        // Load the \"isHistoryLoggingEnabled\" property.\n        String isHistoryLoggingEnabledString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled\");\n\n        if(isHistoryLoggingEnabledString != null\n            && isHistoryLoggingEnabledString.length() > 0)\n        {\n            isHistoryLoggingEnabled\n                = Boolean.parseBoolean(isHistoryLoggingEnabledString);\n        }\n\n        // Load the \"isHistoryShown\" property.\n        String isHistoryShownStringProperty = \n            \"service.gui.IS_MESSAGE_HISTORY_SHOWN\";\n\n        String isHistoryShownString\n            = configService.getString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString == null)\n            isHistoryShownString = \n                GuiActivator.getResources().\n                    getSettingsString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString != null\n            && isHistoryShownString.length() > 0)\n        {\n            isHistoryShown\n                = Boolean.parseBoolean(isHistoryShownString);\n        }\n\n        // Load the \"chatHistorySize\" property.\n        String chatHistorySizeStringProperty =\n            \"service.gui.MESSAGE_HISTORY_SIZE\";\n        String chatHistorySizeString\n            = configService.getString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString == null)\n            chatHistorySizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString != null\n            && chatHistorySizeString.length() > 0)\n        {\n            chatHistorySize = Integer.parseInt(chatHistorySizeString);\n        }\n\n        // Load the \"CHAT_WRITE_AREA_SIZE\" property.\n        String chatWriteAreaSizeStringProperty =\n            \"net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE\";\n        String chatWriteAreaSizeString\n            = configService.getString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString == null)\n            chatWriteAreaSizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString != null\n            && chatWriteAreaSizeString.length() > 0)\n        {\n            chatWriteAreaSize\n                = Integer.parseInt(chatWriteAreaSizeString);\n        }\n\n        // Load the \"isTransparentWindowEnabled\" property.\n        String isTransparentWindowEnabledProperty =\n            \"impl.gui.IS_TRANSPARENT_WINDOW_ENABLED\";\n\n        String isTransparentWindowEnabledString\n            = configService.getString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString == null)\n            isTransparentWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString != null\n            && isTransparentWindowEnabledString.length() > 0)\n        {\n            isTransparentWindowEnabled\n                = Boolean.parseBoolean(isTransparentWindowEnabledString);\n        }\n\n        // Load the \"windowTransparency\" property.\n        String windowTransparencyProperty =\n            \"impl.gui.WINDOW_TRANSPARENCY\";\n\n        String windowTransparencyString\n            = configService.getString(windowTransparencyProperty);\n\n        if(windowTransparencyString == null)\n            windowTransparencyString = \n                GuiActivator.getResources().\n                    getSettingsString(windowTransparencyProperty);\n\n        if(windowTransparencyString != null\n            && windowTransparencyString.length() > 0)\n        {\n            windowTransparency\n                = Integer.parseInt(windowTransparencyString);\n        }\n\n        // Load the \"isWindowDecorated\" property.\n        String isWindowDecoratedProperty\n            = \"impl.gui.IS_WINDOW_DECORATED\";\n\n        String isWindowDecoratedString\n            = configService.getString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString == null)\n            isWindowDecoratedString = \n                GuiActivator.getResources().\n                    getSettingsString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString != null\n            && isWindowDecoratedString.length() > 0)\n        {\n            isWindowDecorated\n                = Boolean.parseBoolean(isWindowDecoratedString);\n        }\n\n        // Load the \"isChatToolbarVisible\" property\n        isChatToolbarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar\",\n                true);\n        // Load the \"isChatToolbarVisible\" property\n        isChatStylebarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar\",\n                true);\n\n        // Load the \"isShowSmileys\" property\n        isShowSmileys\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showSmileys\",\n                true);\n\n        // Load the \"lastContactParent\" property.\n        lastContactParent = configService.getString(\n            \"net.java.sip.communicator.impl.gui.addcontact.lastContactParent\");\n\n        // Load the \"sendFileLastDir\" property.\n        sendFileLastDir = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.filetransfer.\" +\n            \"SEND_FILE_LAST_DIR\");\n\n        // Load the \"ADD_CONTACT_DISABLED\" property.\n        isAddContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_ADD_DISABLED\",\n                false);\n\n        // Load the \"CREATE_GROUP_DISABLED\" property.\n        isCreateGroupDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CREATE_GROUP_DISABLED\",\n                false);\n\n        // Load the \"GO_TO_CHATROOM_DISABLED\" property.\n        isGoToChatroomDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.chatroomslist.\" +\n                \"GO_TO_CHATROOM_DISABLED\",\n                false);\n\n        // Load the \"REMOVE_CONTACT_DISABLED\" property.\n        isRemoveContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_REMOVE_DISABLED\",\n                false);\n\n        // Load the \"net.java.sip.communicator.impl.gui.main.account\n        // .ADVANCED_CONFIG_DISABLED\" property.\n        String advancedConfigDisabledDefaultProp\n            = GuiActivator.getResources().getSettingsString(\n                \"impl.gui.main.account.ADVANCED_CONFIG_DISABLED\");\n\n        boolean isAdvancedConfigDisabled = false;\n\n        if (advancedConfigDisabledDefaultProp != null)\n            isAdvancedConfigDisabled\n                = Boolean.parseBoolean(advancedConfigDisabledDefaultProp);\n\n        // Load the advanced account configuration disabled.\n        isAdvancedAccountConfigDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.account.\" +\n                \"ADVANCED_CONFIG_DISABLED\",\n                isAdvancedConfigDisabled);\n\n        // Load default font family string.\n        defaultFontFamily = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_FAMILY\");\n\n        // Load default font size.\n        defaultFontSize = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_SIZE\");\n\n        // Load isBold chat property.\n        isDefaultFontBold\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_BOLD\",\n                isDefaultFontBold);\n\n        // Load isItalic chat property.\n        isDefaultFontItalic\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_ITALIC\",\n                isDefaultFontItalic);\n\n        // Load isUnderline chat property.\n        isDefaultFontUnderline\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_UNDERLINE\",\n                isDefaultFontUnderline);\n\n        // Load default font color property.\n        int colorSetting = configService.getInt(\n            \"net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_COLOR\", -1);\n\n        if(colorSetting != -1)\n            defaultFontColor = colorSetting;\n    }","commit_id":"f9bcadb0f11e9139bcf3bcf8caf31b08a7b54c46","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Registers the close menu item for all NON-MacOSX platforms.\n     */\n    private void registerCloseMenuItemNonMacOSX()\n    {\n        closeMenuItem = new JMenuItem(\n            GuiActivator.getResources().getI18NString(\"service.gui.QUIT\"));\n\n        this.addSeparator();\n        this.add(closeMenuItem);\n        closeMenuItem.setName(\"close\");\n        closeMenuItem.addActionListener(this);\n        closeMenuItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.QUIT\"));\n    }","id":59086,"modified_method":"/**\n     * Registers the close menu item for all NON-MacOSX platforms.\n     * @param addSeparator whether we should add separator before the menu item.\n     */\n    private void registerCloseMenuItemNonMacOSX(boolean addSeparator)\n    {\n        closeMenuItem = new JMenuItem(\n            GuiActivator.getResources().getI18NString(\"service.gui.QUIT\"));\n\n        if(addSeparator)\n            this.addSeparator();\n        \n        this.add(closeMenuItem);\n        closeMenuItem.setName(\"close\");\n        closeMenuItem.addActionListener(this);\n        closeMenuItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.QUIT\"));\n    }","commit_id":"f9bcadb0f11e9139bcf3bcf8caf31b08a7b54c46","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Registers the close menu item.\n     */\n    private void registerCloseMenuItem()\n    {\n        UIService uiService = GuiActivator.getUIService();\n        if ((uiService == null) || !uiService.useMacOSXScreenMenuBar()\n            || !registerCloseMenuItemMacOSX())\n        {\n            registerCloseMenuItemNonMacOSX();\n        }\n    }","id":59087,"modified_method":"/**\n     * Registers the close menu item.\n     * @param addSeparator whether we should add separator before the menu item.\n     */\n    private void registerCloseMenuItem(boolean addSeparator)\n    {\n        UIService uiService = GuiActivator.getUIService();\n        if ((uiService == null) || !uiService.useMacOSXScreenMenuBar()\n            || !registerCloseMenuItemMacOSX())\n        {\n            registerCloseMenuItemNonMacOSX(addSeparator);\n        }\n    }","commit_id":"f9bcadb0f11e9139bcf3bcf8caf31b08a7b54c46","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(MainFrame parentWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.FILE\"));\n\n        ResourceManagementService resources = GuiActivator.getResources();\n        createGroupItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.parentWindow = parentWindow;\n\n        Boolean showAccountConfig = GuiActivator.getConfigurationService()\n            .getBoolean(ConfigurationFrame.SHOW_ACCOUNT_CONFIG_PROPERTY, true);\n\n        if (showAccountConfig.booleanValue())\n        {\n            newAccountMenuItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.NEW_ACCOUNT\"));\n\n            this.add(newAccountMenuItem);\n\n            newAccountMenuItem.setName(\"newAccount\");\n\n            newAccountMenuItem.addActionListener(this);\n\n            newAccountMenuItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.NEW_ACCOUNT\"));\n        }\n\n        this.addSeparator();\n\n        if (!ConfigurationManager.isAddContactDisabled())\n        {\n            addContactItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.ADD_CONTACT\") + \"...\");\n\n            this.add(addContactItem);\n\n            addContactItem.setName(\"addContact\");\n\n            addContactItem.addActionListener(this);\n\n            addContactItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        }\n\n        this.add(createGroupItem);\n\n        this.addSeparator();\n\n        this.add(myChatRoomsItem);\n\n        registerCloseMenuItem();\n\n        // All items are now instantiated and could safely load the skin.\n        loadSkin();\n\n        //this.addContactItem.setIcon(new ImageIcon(ImageLoader\n        //        .getImage(ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        createGroupItem.setName(\"createGroup\");\n        myChatRoomsItem.setName(\"myChatRooms\");\n\n        createGroupItem.addActionListener(this);\n        myChatRoomsItem.addActionListener(this);\n\n        this.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.FILE\"));\n\n        createGroupItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.MY_CHAT_ROOMS\"));\n    }","id":59088,"modified_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(MainFrame parentWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.FILE\"));\n\n        ResourceManagementService resources = GuiActivator.getResources();\n        createGroupItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.parentWindow = parentWindow;\n\n        // whether the last item added was a separator\n        boolean endsWithSeparator = false;\n\n        Boolean showAccountConfig = GuiActivator.getConfigurationService()\n            .getBoolean(ConfigurationFrame.SHOW_ACCOUNT_CONFIG_PROPERTY, true);\n\n        if (showAccountConfig.booleanValue())\n        {\n            newAccountMenuItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.NEW_ACCOUNT\"));\n\n            this.add(newAccountMenuItem);\n\n            newAccountMenuItem.setName(\"newAccount\");\n\n            newAccountMenuItem.addActionListener(this);\n\n            newAccountMenuItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.NEW_ACCOUNT\"));\n\n            // add separator only if there are other items enabled\n            if(!ConfigurationManager.isAddContactDisabled()\n               || !ConfigurationManager.isCreateGroupDisabled()\n               || !ConfigurationManager.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n        }\n\n        if (!ConfigurationManager.isAddContactDisabled())\n        {\n            addContactItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.ADD_CONTACT\") + \"...\");\n\n            this.add(addContactItem);\n\n            addContactItem.setName(\"addContact\");\n\n            addContactItem.addActionListener(this);\n\n            addContactItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n\n            // if next item is disabled add separator here\n            // only if there is something next\n            if(ConfigurationManager.isCreateGroupDisabled()\n               && !ConfigurationManager.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n            else\n                endsWithSeparator = false;\n        }\n\n        if (!ConfigurationManager.isCreateGroupDisabled())\n        {\n            this.add(createGroupItem);\n\n            // add separator if there is something next\n            if(!ConfigurationManager.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n        }\n\n        if (!ConfigurationManager.isGoToChatroomDisabled())\n        {\n            this.add(myChatRoomsItem);\n            endsWithSeparator = false;\n        }\n\n        registerCloseMenuItem(!endsWithSeparator);\n\n        // All items are now instantiated and could safely load the skin.\n        loadSkin();\n\n        //this.addContactItem.setIcon(new ImageIcon(ImageLoader\n        //        .getImage(ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        createGroupItem.setName(\"createGroup\");\n        myChatRoomsItem.setName(\"myChatRooms\");\n\n        createGroupItem.addActionListener(this);\n        myChatRoomsItem.addActionListener(this);\n\n        this.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.FILE\"));\n\n        createGroupItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.MY_CHAT_ROOMS\"));\n    }","commit_id":"f9bcadb0f11e9139bcf3bcf8caf31b08a7b54c46","url":"https://github.com/jitsi/jitsi"},{"original_method":"public GeneratorActions_ActionGroup() {\n    super(\"GeneratorActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      GeneratorActions_ActionGroup.this.addAnchor(GeneratorActions_ActionGroup.LABEL_ID_generatorNew);\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTemplateQueries_Action\", \"jetbrains.mps.ide\", true);\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTemplateQueries_Action\", \"jetbrains.mps.ide\", false);\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteGenerator_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Generator\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAnchor(GeneratorActions_ActionGroup.LABEL_ID_favorites);\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GeneratorProperties_Action\", \"jetbrains.mps.ide\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":59089,"modified_method":"public GeneratorActions_ActionGroup() {\n    super(\"GeneratorActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      GeneratorActions_ActionGroup.this.addAnchor(GeneratorActions_ActionGroup.LABEL_ID_generatorNew);\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTemplateQueries_Action\", \"jetbrains.mps.ide\", true);\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTemplateQueries_Action\", \"jetbrains.mps.ide\", false);\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteGenerator_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Generator\");\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAnchor(GeneratorActions_ActionGroup.LABEL_ID_favorites);\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAnchor(GeneratorActions_ActionGroup.LABEL_ID_scripts);\n      GeneratorActions_ActionGroup.this.addSeparator();\n      GeneratorActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GeneratorProperties_Action\", \"jetbrains.mps.ide\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LanguageActions_ActionGroup() {\n    super(\"LanguageActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_newGroup);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_generateModule);\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Language\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.FixVirtualPackges_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.LanguageProperties_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.LanguageHierarchy_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.MakeModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RebuildModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CleanModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_find_usages);\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_find_instances);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_refactoring);\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_favorites);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_vcs);\n      LanguageActions_ActionGroup.this.addSeparator();\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":59090,"modified_method":"public LanguageActions_ActionGroup() {\n    super(\"LanguageActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_newGroup);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_generateModule);\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Language\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.FixVirtualPackges_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.MakeModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RebuildModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CleanModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_find_usages);\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_find_instances);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_refactoring);\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModule_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_favorites);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_vcs);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_scripts);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAnchor(LanguageActions_ActionGroup.LABEL_ID_find_javastub_usages);\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.LanguageHierarchy_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.LanguageProperties_Action\", \"jetbrains.mps.ide\");\n      LanguageActions_ActionGroup.this.addSeparator();\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjust() {\n    this.insertGroupIntoAnother(LanguageActions_ActionGroup.ID, null);\n  }","id":59091,"modified_method":"public void adjust() {\n    this.insertGroupIntoAnother(LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_find_javastub_usages);\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ModelActions_ActionGroup() {\n    super(\"ModelActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_newActions);\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.PasteNode_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModels_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CloneModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModelName_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GetModelContentsFromSource_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModelImports_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddMissingImports_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowReferencesToMissingStuff_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_showHelp);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateModel_Action\", \"jetbrains.mps.ide\", new JavaGenerationHandler());\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateModel_Action\", \"jetbrains.mps.ide\", new OutputViewGenerationHandler());\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowMappingsPartitioning_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowDifferencesWithModelOnDisk_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ReRunMergeFromBackup_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RevertMemoryChanges_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SaveModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_refactoring);\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_favorites);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_vcs);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModelProperties_Action\", \"jetbrains.mps.ide\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":59092,"modified_method":"public ModelActions_ActionGroup() {\n    super(\"ModelActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_newActions);\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.PasteNode_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModels_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CloneModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModelName_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GetModelContentsFromSource_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModelImports_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddMissingImports_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowReferencesToMissingStuff_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_showHelp);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateModel_Action\", \"jetbrains.mps.ide\", new JavaGenerationHandler());\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateModel_Action\", \"jetbrains.mps.ide\", new OutputViewGenerationHandler());\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowMappingsPartitioning_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowDifferencesWithModelOnDisk_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ReRunMergeFromBackup_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RevertMemoryChanges_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SaveModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_refactoring);\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModel_Action\", \"jetbrains.mps.ide\");\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_favorites);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_vcs);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAnchor(ModelActions_ActionGroup.LABEL_ID_scripts);\n      ModelActions_ActionGroup.this.addSeparator();\n      ModelActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModelProperties_Action\", \"jetbrains.mps.ide\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjust() {\n    this.insertGroupIntoAnother(ModelActions_ActionGroup.ID, null);\n    this.insertGroupIntoAnother(LanguageActions_ActionGroup.ID, null);\n    this.insertGroupIntoAnother(GeneratorActions_ActionGroup.ID, null);\n    this.insertGroupIntoAnother(SolutionActions_ActionGroup.ID, null);\n  }","id":59093,"modified_method":"public void adjust() {\n    this.insertGroupIntoAnother(ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_scripts);\n    this.insertGroupIntoAnother(LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_scripts);\n    this.insertGroupIntoAnother(GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_scripts);\n    this.insertGroupIntoAnother(SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_scripts);\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SolutionActions_ActionGroup() {\n    super(\"SolutionActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GetModuleContentsFromSource_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_generateModule);\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTextFromSolution_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Solution\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.MakeModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RebuildModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CleanModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SolutionProperties_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_refactoring);\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_favorites);\n      SolutionActions_ActionGroup.this.addSeparator();\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":59094,"modified_method":"public SolutionActions_ActionGroup() {\n    super(\"SolutionActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_generateModule);\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTextFromSolution_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CheckModule_Action\", \"jetbrains.mps.ide\", \"Solution\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GetModuleContentsFromSource_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.MakeModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RebuildModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CleanModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_refactoring);\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.UpgradeModelPersistenceInModule_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_favorites);\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAnchor(SolutionActions_ActionGroup.LABEL_ID_scripts);\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SolutionProperties_Action\", \"jetbrains.mps.ide\");\n      SolutionActions_ActionGroup.this.addSeparator();\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"aec59587d717f14f074265adf2295f3e6b939d24","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      Toolbar toolbar = new Toolbar();\n      \n      // always include build all\n      toolbar.addLeftWidget(commands_.buildAll().createToolbarButton());\n      toolbar.addLeftSeparator();\n      \n      // packages get check package\n      String type = session_.getSessionInfo().getBuildToolsType();\n      if (type.equals(SessionInfo.BUILD_TOOLS_PACKAGE))\n      {\n         toolbar.addLeftWidget(commands_.checkPackage().createToolbarButton());\n         toolbar.addLeftSeparator();\n      }\n      \n      // create more menu\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n      if (type.equals(SessionInfo.BUILD_TOOLS_MAKEFILE))\n      {\n         moreMenu.addItem(commands_.rebuildAll().createMenuItem(false));\n         moreMenu.addItem(commands_.cleanAll().createMenuItem(false));\n         moreMenu.addSeparator();\n      }\n      \n      // packages get additional commands \n      else if (type.equals(SessionInfo.BUILD_TOOLS_PACKAGE))\n      {\n         moreMenu.addItem(commands_.devtoolsLoadAll().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.rebuildAll().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.buildSourcePackage().createMenuItem(false));\n         moreMenu.addItem(commands_.buildBinaryPackage().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.roxygenizePackage().createMenuItem(false));   \n         moreMenu.addSeparator();\n      }\n      moreMenu.addItem(commands_.buildToolsProjectSetup().createMenuItem(false));\n      \n      // add more menu\n      ToolbarButton moreButton = new ToolbarButton(\n                                   \"More\",\n                                   StandardIcons.INSTANCE.more_actions(),\n                                   moreMenu);\n      toolbar.addLeftWidget(moreButton);\n      \n      // connect compile panel\n      compilePanel_.connectToolbar(toolbar);\n     \n      \n      return toolbar;\n   }","id":59095,"modified_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      Toolbar toolbar = new Toolbar();\n      \n      // always include build all\n      toolbar.addLeftWidget(commands_.buildAll().createToolbarButton());\n      toolbar.addLeftSeparator();\n      \n      // packages get check package\n      String type = session_.getSessionInfo().getBuildToolsType();\n      if (type.equals(SessionInfo.BUILD_TOOLS_PACKAGE))\n      {\n         toolbar.addLeftWidget(commands_.checkPackage().createToolbarButton());\n         toolbar.addLeftSeparator();\n      }\n      \n      // create more menu\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n      if (type.equals(SessionInfo.BUILD_TOOLS_MAKEFILE))\n      {\n         moreMenu.addItem(commands_.rebuildAll().createMenuItem(false));\n         moreMenu.addItem(commands_.cleanAll().createMenuItem(false));\n         moreMenu.addSeparator();\n      }\n      \n      // packages get additional commands \n      else if (type.equals(SessionInfo.BUILD_TOOLS_PACKAGE))\n      {\n         moreMenu.addItem(commands_.devtoolsLoadAll().createMenuItem(false));\n         moreMenu.addItem(commands_.rebuildAll().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.testPackage().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.checkPackage().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.buildSourcePackage().createMenuItem(false));\n         moreMenu.addItem(commands_.buildBinaryPackage().createMenuItem(false));\n         moreMenu.addSeparator();\n         moreMenu.addItem(commands_.roxygenizePackage().createMenuItem(false));   \n         moreMenu.addSeparator();\n      }\n      moreMenu.addItem(commands_.buildToolsProjectSetup().createMenuItem(false));\n      \n      // add more menu\n      ToolbarButton moreButton = new ToolbarButton(\n                                   \"More\",\n                                   StandardIcons.INSTANCE.more_actions(),\n                                   moreMenu);\n      toolbar.addLeftWidget(moreButton);\n      \n      // connect compile panel\n      compilePanel_.connectToolbar(toolbar);\n     \n      \n      return toolbar;\n   }","commit_id":"109be41f0b524e42d542a95add7488d8e5372f43","url":"https://github.com/rstudio/rstudio"},{"original_method":"protected void dashboard(Desktop desktop) {\n        utilityPanel.setStatus(\"Opening dashboard in browser ...\");\n        try {\n            final URI url = new URI(\"http://localhost:\" + jetty.getPrimaryPort() + \"/exist/apps/dashboard/\");\n            desktop.browse(url);\n        } catch (final URISyntaxException e) {\n            if (isSystemTraySupported())\n                {trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);}\n            utilityPanel.setStatus(\"Unable to launch browser\");\n        } catch (final IOException e) {\n            if (isSystemTraySupported())\n                {trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);}\n            utilityPanel.setStatus(\"Unable to launch browser\");\n        }\n    }","id":59096,"modified_method":"protected void shutdown(final boolean restart) {\n        utilityPanel.setStatus(\"Shutting down ...\");\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                if (jetty != null) {\n                    jetty.shutdown();\n                }\n                if (tray != null) {\n                    tray.remove(trayIcon);\n                }\n                if (restart) {\n                    final LauncherWrapper wrapper = new LauncherWrapper(org.exist.launcher.Launcher.class.getName());\n                    wrapper.launch();\n                }\n                System.exit(0);\n            }\n        });\n    }","commit_id":"9b940d0ee7b868ebb4cf1c0b7b7a71c537ab7f7c","url":"https://github.com/eXist-db/exist"},{"original_method":"private PopupMenu createMenu(final String home) {\n        final PopupMenu popup = new PopupMenu();\n        startItem = new MenuItem(\"Start server\");\n        startItem.setEnabled(false);\n        popup.add(startItem);\n        startItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n            if (jetty.isStarted()) {\n                trayIcon.displayMessage(null, \"Server already started\", TrayIcon.MessageType.WARNING);\n            } else {\n                jetty.run(new String[]{home}, null);\n                if (jetty.isStarted()) {\n                    stopItem.setEnabled(true);\n                    startItem.setEnabled(false);\n                    trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n                }\n            }\n            }\n        });\n\n        stopItem = new MenuItem(\"Stop server\");\n        popup.add(stopItem);\n        stopItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                jetty.shutdown();\n                stopItem.setEnabled(false);\n                startItem.setEnabled(true);\n                trayIcon.setToolTip(\"eXist-db stopped\");\n            }\n        });\n\n        popup.addSeparator();\n\n        final MenuItem toolbar = new MenuItem(\"Show Tool Window\");\n        popup.add(toolbar);\n        toolbar.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                java.awt.EventQueue.invokeLater(new Runnable() {\n                    @Override\n                    public void run() {\n                        utilityPanel.toFront();\n                        utilityPanel.setVisible(true);\n                    }\n                });\n            }\n        });\n\n        MenuItem item;\n\n        if (Desktop.isDesktopSupported()) {\n            popup.addSeparator();\n            final Desktop desktop = Desktop.getDesktop();\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                dashboardItem = new MenuItem(\"Open dashboard\");\n                dashboardItem.setEnabled(false);\n                popup.add(dashboardItem);\n                dashboardItem.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        dashboard(desktop);\n                    }\n                });\n                eXideItem = new MenuItem(\"Open eXide\");\n                eXideItem.setEnabled(false);\n                popup.add(eXideItem);\n                eXideItem.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        eXide(desktop);\n                    }\n                });\n                item = new MenuItem(\"Open Java Admin Client\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        client();\n                    }\n                });\n            }\n            if (desktop.isSupported(Desktop.Action.OPEN)) {\n                popup.addSeparator();\n                item = new MenuItem(\"Open exist.log\");\n                popup.add(item);\n                item.addActionListener(new LogActionListener());\n            }\n\n            popup.addSeparator();\n            item = new MenuItem(\"Quit (and stop server)\");\n            popup.add(item);\n            item.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent actionEvent) {\n                    shutdown();\n                }\n            });\n        }\n        return popup;\n    }","id":59097,"modified_method":"private PopupMenu createMenu(final String home) {\n        final PopupMenu popup = new PopupMenu();\n        startItem = new MenuItem(\"Start server\");\n        startItem.setEnabled(false);\n        popup.add(startItem);\n        startItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n            if (jetty.isStarted()) {\n                trayIcon.displayMessage(null, \"Server already started\", TrayIcon.MessageType.WARNING);\n            } else {\n                jetty.run(new String[]{home}, null);\n                if (jetty.isStarted()) {\n                    stopItem.setEnabled(true);\n                    startItem.setEnabled(false);\n                    trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n                }\n            }\n            }\n        });\n\n        stopItem = new MenuItem(\"Stop server\");\n        popup.add(stopItem);\n        stopItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                jetty.shutdown();\n                stopItem.setEnabled(false);\n                startItem.setEnabled(true);\n                trayIcon.setToolTip(\"eXist-db stopped\");\n            }\n        });\n\n        popup.addSeparator();\n        MenuItem configItem = new MenuItem(\"Server Configuration\");\n        popup.add(configItem);\n        configItem.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                java.awt.EventQueue.invokeLater(new Runnable() {\n                    @Override\n                    public void run() {\n                        configDialog.open(false);\n                        configDialog.toFront();\n                        configDialog.repaint();\n                        configDialog.requestFocus();\n                    }\n                });\n            }\n        });\n\n        popup.addSeparator();\n\n        final MenuItem toolbar = new MenuItem(\"Show Tool Window\");\n        popup.add(toolbar);\n        toolbar.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                java.awt.EventQueue.invokeLater(new Runnable() {\n                    @Override\n                    public void run() {\n                        utilityPanel.toFront();\n                        utilityPanel.setVisible(true);\n                    }\n                });\n            }\n        });\n\n        MenuItem item;\n\n        if (Desktop.isDesktopSupported()) {\n            popup.addSeparator();\n            final Desktop desktop = Desktop.getDesktop();\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                dashboardItem = new MenuItem(\"Open dashboard\");\n                dashboardItem.setEnabled(false);\n                popup.add(dashboardItem);\n                dashboardItem.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        dashboard(desktop);\n                    }\n                });\n                eXideItem = new MenuItem(\"Open eXide\");\n                eXideItem.setEnabled(false);\n                popup.add(eXideItem);\n                eXideItem.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        eXide(desktop);\n                    }\n                });\n                item = new MenuItem(\"Open Java Admin Client\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        client();\n                    }\n                });\n            }\n            if (desktop.isSupported(Desktop.Action.OPEN)) {\n                popup.addSeparator();\n                item = new MenuItem(\"Open exist.log\");\n                popup.add(item);\n                item.addActionListener(new LogActionListener());\n            }\n\n            popup.addSeparator();\n            item = new MenuItem(\"Quit (and stop server)\");\n            popup.add(item);\n            item.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent actionEvent) {\n                    shutdown(false);\n                }\n            });\n        }\n        return popup;\n    }","commit_id":"9b940d0ee7b868ebb4cf1c0b7b7a71c537ab7f7c","url":"https://github.com/eXist-db/exist"},{"original_method":"public Launcher(final String[] args) {\n        if (SystemTray.isSupported()) {\n            tray = SystemTray.getSystemTray();\n        }\n\n        captureConsole();\n\n        final String home = getJettyHome();\n\n        if (isSystemTraySupported())\n            {initSystemTray = initSystemTray(home);}\n\n\n        splash = new SplashScreen(this);\n        splash.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowOpened(WindowEvent windowEvent) {\n                new Thread() {\n                    @Override\n                    public void run() {\n                        try {\n                            jetty = new JettyStart();\n                            jetty.addObserver(splash);\n                            jetty.run(new String[]{home}, splash);\n                        } catch (final Exception e) {\n                            showMessageAndExit(\"Error Occurred\", \"An error occurred during eXist-db startup. Please check the logs.\", true);\n                            System.exit(1);\n                        }\n                    }\n                }.start();\n            }\n        });\n\n        final boolean systemTrayReady = tray != null && initSystemTray && tray.getTrayIcons().length > 0;\n\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                utilityPanel = new UtilityPanel(Launcher.this, systemTrayReady);\n            }\n        });\n    }","id":59098,"modified_method":"public Launcher(final String[] args) {\n        if (SystemTray.isSupported()) {\n            tray = SystemTray.getSystemTray();\n        }\n\n        captureConsole();\n\n        home = getJettyHome();\n\n        if (isSystemTraySupported())\n            {initSystemTray = initSystemTray(home);}\n\n        configDialog = new ConfigurationDialog(Launcher.this);\n\n        splash = new SplashScreen(this);\n        splash.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowOpened(WindowEvent windowEvent) {\n                if (ConfigurationUtility.isFirstStart()) {\n                    splash.setVisible(false);\n                    configDialog.open(true);\n                    configDialog.requestFocus();\n                } else {\n                    startJetty();\n                }\n            }\n        });\n\n        final boolean systemTrayReady = tray != null && initSystemTray && tray.getTrayIcons().length > 0;\n\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                utilityPanel = new UtilityPanel(Launcher.this, systemTrayReady);\n            }\n        });\n    }","commit_id":"9b940d0ee7b868ebb4cf1c0b7b7a71c537ab7f7c","url":"https://github.com/eXist-db/exist"},{"original_method":"protected String getVMOpts() {\n        final StringBuilder opts = new StringBuilder();\n        InputStream is = null;\n        final Properties vmProperties = new Properties();\n        final File propFile = ConfigurationHelper.lookup(\"vm.properties\");\n        try {\n            if (propFile.canRead()) {\n                is = new FileInputStream(propFile);\n            }\n            if (is == null) {\n                is = LauncherWrapper.class.getResourceAsStream(\"vm.properties\");\n            }\n            if (is != null) {\n                vmProperties.load(is);\n                is.close();\n            }\n        } catch (final IOException e) {\n            System.err.println(\"vm.properties not found\");\n        }\n        for (final Map.Entry<Object, Object> entry : vmProperties.entrySet())  {\n            final String key = entry.getKey().toString();\n            if (\"vmoptions\".equals(key)) {\n                opts.append(' ').append(entry.getValue());\n            } else if (key.startsWith(\"vmoptions.\")) {\n                final String os = key.substring(\"vmoptions.\".length()).toLowerCase();\n                if (OS.contains(os)) {\n                    opts.append(' ').append(entry.getValue());\n                }\n            }\n        }\n        return opts.toString();\n    }","id":59099,"modified_method":"protected String getVMOpts() {\n        final StringBuilder opts = new StringBuilder();\n        Properties vmProperties = getVMProperties();\n        for (final Map.Entry<Object, Object> entry : vmProperties.entrySet())  {\n            final String key = entry.getKey().toString();\n            if (key.startsWith(\"memory.\")) {\n                if (\"memory.max\".equals(key)) {\n                    opts.append(\" -Xmx\").append(entry.getValue()).append('m');\n                } else if (\"memory.min\".equals(key)) {\n                    opts.append(\" -Xms\").append(entry.getValue()).append('m');\n                }\n            } else if (\"vmoptions\".equals(key)) {\n                opts.append(' ').append(entry.getValue());\n            } else if (key.startsWith(\"vmoptions.\")) {\n                final String os = key.substring(\"vmoptions.\".length()).toLowerCase();\n                if (OS.contains(os)) {\n                    opts.append(' ').append(entry.getValue());\n                }\n            }\n        }\n        return opts.toString();\n    }","commit_id":"9b940d0ee7b868ebb4cf1c0b7b7a71c537ab7f7c","url":"https://github.com/eXist-db/exist"},{"original_method":"public UtilityPanel(final Launcher launcher, boolean hideOnStart) {\n        this.setAlwaysOnTop(false);\n\n        BufferedImage image = null;\n        try {\n            image = ImageIO.read(getClass().getResource(\"icon32.png\"));\n        } catch (final IOException e) {\n        }\n        this.setIconImage(image);\n\n        if (!launcher.isSystemTraySupported())\n            {setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);}\n\n        getContentPane().setLayout(new GridBagLayout());\n        GridBagConstraints c = new GridBagConstraints();\n\n        setBackground(new Color(255, 255, 255, 255));\n\n        final JToolBar toolbar = new JToolBar();\n        toolbar.setOpaque(false);\n        toolbar.setBorderPainted(false);\n        //toolbar.setBackground(new Color(255, 255, 255, 255));\n\n        JButton button;\n\n        if (Desktop.isDesktopSupported()) {\n            final Desktop desktop = Desktop.getDesktop();\n\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                dashboardButton = createButton(toolbar, \"dashboard.png\", \"Dashboard\");\n                dashboardButton.setEnabled(false);\n                dashboardButton.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        launcher.dashboard(desktop);\n                    }\n                });\n                toolbar.add(dashboardButton);\n\n                eXideButton = createButton(toolbar, \"exide.png\", \"eXide\");\n                eXideButton.setEnabled(false);\n                eXideButton.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        launcher.eXide(desktop);\n                    }\n                });\n                toolbar.add(eXideButton);\n            }\n        }\n\n        button = createButton(toolbar, \"browsing.png\", \"Java Client\");\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                launcher.client();\n            }\n        });\n        toolbar.add(button);\n\n        button = createButton(toolbar, \"shutdown.png\", \"Shut Down\");\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                launcher.shutdown();\n            }\n        });\n        toolbar.add(button);\n\n        c.gridx = 0;\n        c.gridy = 0;\n        c.weightx = 1.0;\n        c.fill = GridBagConstraints.HORIZONTAL;\n        getContentPane().add(toolbar, c);\n\n        statusLabel = new JLabel(\"\", SwingConstants.CENTER);\n        statusLabel.setFont(new Font(\"Dialog\", Font.PLAIN, 10));\n        statusLabel.setPreferredSize(new Dimension(200, 16));\n        //statusLabel.setMinimumSize(new Dimension(200, 16));\n        if (!launcher.isSystemTraySupported()) {\n            statusLabel.setText(\"System tray icon not supported.\");\n        }\n\n        c.gridy = 1;\n        getContentPane().add(statusLabel, c);\n\n        final JCheckBox showMessages = new JCheckBox(\"Show console messages\");\n        showMessages.setHorizontalAlignment(SwingConstants.LEFT);\n        showMessages.setOpaque(false);\n        showMessages.addItemListener(new ItemListener() {\n            @Override\n            public void itemStateChanged(ItemEvent itemEvent) {\n                final boolean showMessages = itemEvent.getStateChange() == ItemEvent.SELECTED;\n                if (showMessages) {\n                    messages.setVisible(true);\n                } else {\n                    messages.setVisible(false);\n                }\n                UtilityPanel.this.pack();\n            }\n        });\n        c.gridy = 2;\n        getContentPane().add(showMessages, c);\n\n        Font messagesFont = new Font(\"Monospaced\", Font.PLAIN, 12);\n        messages = new TextArea();\n        messages.setBackground(new Color(20,20, 20, 255));\n        messages.setPreferredSize(new Dimension(800, 200));\n        messages.setForeground(new Color(255, 255, 255));\n        messages.setFont(messagesFont);\n\n        c.gridy = 3;\n        c.weighty = 1.0;\n        c.fill = GridBagConstraints.BOTH;\n\n        getContentPane().add(messages, c);\n        messages.setVisible(false);\n\n        setMinimumSize(new Dimension(350, 90));\n        pack();\n\n        final Dimension d = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(d.width - this.getWidth() - 40, 60);\n\n        launcher.addObserver(this);\n\n        if (!hideOnStart) {\n            setVisible(true);\n            toFront();\n        }\n    }","id":59100,"modified_method":"public UtilityPanel(final Launcher launcher, boolean hideOnStart) {\n        this.setAlwaysOnTop(false);\n\n        BufferedImage image = null;\n        try {\n            image = ImageIO.read(getClass().getResource(\"icon32.png\"));\n        } catch (final IOException e) {\n        }\n        this.setIconImage(image);\n\n        if (!launcher.isSystemTraySupported())\n            {setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);}\n\n        getContentPane().setLayout(new GridBagLayout());\n        GridBagConstraints c = new GridBagConstraints();\n\n        setBackground(new Color(255, 255, 255, 255));\n\n        final JToolBar toolbar = new JToolBar();\n        toolbar.setOpaque(false);\n        toolbar.setBorderPainted(false);\n        //toolbar.setBackground(new Color(255, 255, 255, 255));\n\n        JButton button;\n\n        if (Desktop.isDesktopSupported()) {\n            final Desktop desktop = Desktop.getDesktop();\n\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                dashboardButton = createButton(toolbar, \"dashboard.png\", \"Dashboard\");\n                dashboardButton.setEnabled(false);\n                dashboardButton.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        launcher.dashboard(desktop);\n                    }\n                });\n                toolbar.add(dashboardButton);\n\n                eXideButton = createButton(toolbar, \"exide.png\", \"eXide\");\n                eXideButton.setEnabled(false);\n                eXideButton.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        launcher.eXide(desktop);\n                    }\n                });\n                toolbar.add(eXideButton);\n            }\n        }\n\n        button = createButton(toolbar, \"browsing.png\", \"Java Client\");\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                launcher.client();\n            }\n        });\n        toolbar.add(button);\n\n        button = createButton(toolbar, \"shutdown.png\", \"Shut Down\");\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                launcher.shutdown(false);\n            }\n        });\n        toolbar.add(button);\n\n        c.gridx = 0;\n        c.gridy = 0;\n        c.weightx = 1.0;\n        c.fill = GridBagConstraints.HORIZONTAL;\n        getContentPane().add(toolbar, c);\n\n        statusLabel = new JLabel(\"\", SwingConstants.CENTER);\n        statusLabel.setFont(new Font(\"Dialog\", Font.PLAIN, 10));\n        statusLabel.setPreferredSize(new Dimension(200, 16));\n        //statusLabel.setMinimumSize(new Dimension(200, 16));\n        if (!launcher.isSystemTraySupported()) {\n            statusLabel.setText(\"System tray icon not supported.\");\n        }\n\n        c.gridy = 1;\n        getContentPane().add(statusLabel, c);\n\n        final JCheckBox showMessages = new JCheckBox(\"Show console messages\");\n        showMessages.setHorizontalAlignment(SwingConstants.LEFT);\n        showMessages.setOpaque(false);\n        showMessages.addItemListener(new ItemListener() {\n            @Override\n            public void itemStateChanged(ItemEvent itemEvent) {\n                final boolean showMessages = itemEvent.getStateChange() == ItemEvent.SELECTED;\n                if (showMessages) {\n                    messages.setVisible(true);\n                } else {\n                    messages.setVisible(false);\n                }\n                UtilityPanel.this.pack();\n            }\n        });\n        c.gridy = 2;\n        getContentPane().add(showMessages, c);\n\n        Font messagesFont = new Font(\"Monospaced\", Font.PLAIN, 12);\n        messages = new TextArea();\n        messages.setBackground(new Color(20,20, 20, 255));\n        messages.setPreferredSize(new Dimension(800, 200));\n        messages.setForeground(new Color(255, 255, 255));\n        messages.setFont(messagesFont);\n\n        c.gridy = 3;\n        c.weighty = 1.0;\n        c.fill = GridBagConstraints.BOTH;\n\n        getContentPane().add(messages, c);\n        messages.setVisible(false);\n\n        setMinimumSize(new Dimension(350, 90));\n        pack();\n\n        final Dimension d = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(d.width - this.getWidth() - 40, 60);\n\n        launcher.addObserver(this);\n\n        if (!hideOnStart) {\n            setVisible(true);\n            toFront();\n        }\n    }","commit_id":"9b940d0ee7b868ebb4cf1c0b7b7a71c537ab7f7c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Toolbar createToolbar(TextFileType fileType)\n   {\n      Toolbar toolbar = new EditingTargetToolbar(commands_, true);\n\n      toolbar.addLeftWidget(commands_.saveSourceDoc().createToolbarButton());\n      sourceOnSave_.getElement().getStyle().setMarginRight(0, Unit.PX);\n      toolbar.addLeftWidget(sourceOnSave_);\n      srcOnSaveLabel_.getElement().getStyle().setMarginRight(9, Unit.PX);\n      toolbar.addLeftWidget(srcOnSaveLabel_);\n\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.checkSpelling().createToolbarButton());\n      \n      toolbar.addLeftWidget(findReplace_.createFindReplaceButton());\n      toolbar.addLeftWidget(createCodeTransformMenuButton());\n      \n      notebookSeparatorWidget_ = toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(notebookToolbarButton_ = \n            commands_.compileNotebook().createToolbarButton());\n      \n      int mod = BrowseCap.hasMetaKey() ? KeyboardShortcut.META : \n         KeyboardShortcut.CTRL;\n      String cmdText = \n        new KeyboardShortcut(mod + KeyboardShortcut.SHIFT, 'K').toString(true);\n      cmdText = DomUtils.htmlToText(cmdText);\n      notebookToolbarButton_.setTitle(\"Compile Notebook (\" + cmdText + \")\");\n      \n      texSeparatorWidget_ = toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(texToolbarButton_ = createLatexFormatButton());\n      \n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(previewHTMLButton_ = commands_.previewHTML().createToolbarButton());\n      knitDocumentButton_ = commands_.knitDocument().createToolbarButton(false);\n      knitDocumentButton_.getElement().getStyle().setMarginRight(0, Unit.PX);\n      toolbar.addLeftWidget(knitDocumentButton_);\n      toolbar.addLeftWidget(compilePdfButton_ = commands_.compilePDF().createToolbarButton());\n      rmdFormatButton_ = new ToolbarPopupMenuButton(false, true);\n      toolbar.addLeftWidget(rmdFormatButton_);\n      \n      ToolbarPopupMenu rmdOptionsMenu = new ToolbarPopupMenu();\n      rmdOptionsMenu.addItem(commands_.editRmdFormatOptions().createMenuItem(false));\n      \n      rmdOptionsButton_ = new ToolbarButton(\n            null,  \n            StandardIcons.INSTANCE.options(),\n            rmdOptionsMenu, \n            false);\n      \n      toolbar.addLeftWidget(rmdOptionsButton_);\n\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.synctexSearch().createToolbarButton());\n\n      toolbar.addRightWidget(insertChunkButton_ = commands_.insertChunk().createToolbarButton());\n      toolbar.addRightWidget(runButton_ = commands_.executeCode().createToolbarButton(false));\n      toolbar.addRightSeparator();\n      toolbar.addRightWidget(runLastButton_ = commands_.executeLastCode().createToolbarButton(false));\n      toolbar.addRightWidget(goToPrevButton_ = commands_.goToPrevSection().createToolbarButton(false));\n      toolbar.addRightWidget(goToNextButton_ = commands_.goToNextSection().createToolbarButton(false));\n      toolbar.addRightSeparator();\n      final String SOURCE_BUTTON_TITLE = \"Source the active document\"; \n      \n      sourceButton_ = new ToolbarButton(\n            \"Source\", \n            commands_.sourceActiveDocument().getImageResource(), \n            new ClickHandler() \n            {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  if (uiPrefs_.sourceWithEcho().getValue())\n                     commands_.sourceActiveDocumentWithEcho().execute();\n                  else\n                     commands_.sourceActiveDocument().execute();\n               }\n            });\n      \n      sourceButton_.setTitle(SOURCE_BUTTON_TITLE);\n      toolbar.addRightWidget(sourceButton_);\n      \n      uiPrefs_.sourceWithEcho().addValueChangeHandler(\n                                       new ValueChangeHandler<Boolean>() {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            if (event.getValue())\n               sourceButton_.setTitle(SOURCE_BUTTON_TITLE + \" (with echo)\");\n            else\n               sourceButton_.setTitle(SOURCE_BUTTON_TITLE);\n         }\n      });\n            \n      ToolbarPopupMenu sourceMenu = new ToolbarPopupMenu();\n      sourceMenu.addItem(commands_.sourceActiveDocument().createMenuItem(false));\n      sourceMenu.addItem(commands_.sourceActiveDocumentWithEcho().createMenuItem(false));\n         \n      sourceMenuButton_ = new ToolbarButton(sourceMenu, true);\n      toolbar.addRightWidget(sourceMenuButton_);  \n\n      //toolbar.addRightSeparator();\n     \n      toolbar.addRightWidget(chunksRunButton_ = commands_.executeCode().createToolbarButton(false));\n      ToolbarPopupMenu chunksMenu = new ToolbarPopupMenu();\n      chunksMenu.addItem(commands_.executeCode().createMenuItem(false));\n      if (uiPrefs_.showRmdChunkOutputInline().getValue())\n      {\n         chunksMenu.addSeparator();\n         chunksMenu.addItem(new UIPrefMenuItem<Boolean>(\n               uiPrefs_.autoRunSetupChunk(), true, \"Run Setup Chunk Automatically\", \n               uiPrefs_));\n      }\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executeSetupChunk().createMenuItem(false));\n      chunksMenu.addItem(commands_.executePreviousChunks().createMenuItem(false));\n      chunksMenu.addItem(commands_.executeSubsequentChunks().createMenuItem(false));\n      chunksMenu.addItem(commands_.executeCurrentChunk().createMenuItem(false));\n      chunksMenu.addItem(commands_.executeNextChunk().createMenuItem(false));\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executeAllCode().createMenuItem(false));\n      chunksButton_ = new ToolbarButton(\n                       chunksMenu, \n                       true);\n      toolbar.addRightWidget(chunksButton_);\n      \n      ToolbarPopupMenu shinyLaunchMenu = shinyViewerMenu_;\n      shinyLaunchButton_ = new ToolbarButton(\n                       shinyLaunchMenu, \n                       true);\n      shinyLaunchButton_.setVisible(false);\n      toolbar.addRightWidget(shinyLaunchButton_);\n      if (SessionUtils.showPublishUi(session_, uiPrefs_))\n      {\n         toolbar.addRightSeparator();\n         publishButton_ = new RSConnectPublishButton(\n               RSConnect.CONTENT_TYPE_APP, false, null);\n         toolbar.addRightWidget(publishButton_);\n      }\n      \n      toggleDocOutlineButton_ = new LatchingToolbarButton(\n         \"\",\n            StandardIcons.INSTANCE.outline(),\n            new ClickHandler()\n            {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  final double initialSize = editorPanel_.getWidgetSize(docOutlineWidget_);\n                  \n                  // Clicking the icon toggles the outline widget's visibility. The\n                  // 'destination' below is the width we would like to set -- we\n                  // animate to that position for a slightly nicer visual treatment.\n                  final double destination = docOutlineWidget_.getOffsetWidth() > 5\n                        ? 0\n                        : target_.getPreferredOutlineWidgetSize();\n                  \n                  // Update tooltip ('Show'/'Hide' depending on current visibility)\n                  String title = toggleDocOutlineButton_.getTitle();\n                  if (destination != 0)\n                     title = title.replace(\"Show \", \"Hide \");\n                  else\n                     title = title.replace(\"Hide \", \"Show \");\n                  toggleDocOutlineButton_.setTitle(title);\n                  \n                  toggleDocOutlineButton_.setLatched(destination != 0);\n                  \n                  new Animation()\n                  {\n                     @Override\n                     protected void onUpdate(double progress)\n                     {\n                        double size =\n                              destination * progress +\n                              initialSize * (1 - progress);\n                        editorPanel_.setWidgetSize(docOutlineWidget_, size);\n                        editor_.onResize();\n                     }\n                     \n                     @Override\n                     protected void onComplete()\n                     {\n                        target_.setPreferredOutlineWidgetVisibility(destination != 0);\n                     }\n                  }.run(500);\n               }\n            });\n      \n      // Time-out setting the latch just to ensure the document outline\n      // has actually been appropriately rendered.\n      new Timer()\n      {\n         @Override\n         public void run()\n         {\n            String title = commands_.toggleDocumentOutline().getTooltip();\n            title = editorPanel_.getWidgetSize(docOutlineWidget_) > 0\n                  ? title.replace(\"Show \", \"Hide \")\n                  : title.replace(\"Hide \", \"Show \");\n            toggleDocOutlineButton_.setTitle(title);\n            toggleDocOutlineButton_.setLatched(docOutlineWidget_.getOffsetWidth() > 0);\n         }\n      }.schedule(100);\n      \n      toolbar.addRightSeparator();\n      toolbar.addRightWidget(toggleDocOutlineButton_);\n      \n      return toolbar;\n   }","id":59101,"modified_method":"private Toolbar createToolbar(TextFileType fileType)\n   {\n      Toolbar toolbar = new EditingTargetToolbar(commands_, true);\n\n      toolbar.addLeftWidget(commands_.saveSourceDoc().createToolbarButton());\n      sourceOnSave_.getElement().getStyle().setMarginRight(0, Unit.PX);\n      toolbar.addLeftWidget(sourceOnSave_);\n      srcOnSaveLabel_.getElement().getStyle().setMarginRight(9, Unit.PX);\n      toolbar.addLeftWidget(srcOnSaveLabel_);\n\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.checkSpelling().createToolbarButton());\n      \n      toolbar.addLeftWidget(findReplace_.createFindReplaceButton());\n      toolbar.addLeftWidget(createCodeTransformMenuButton());\n      \n      notebookSeparatorWidget_ = toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(notebookToolbarButton_ = \n            commands_.compileNotebook().createToolbarButton());\n      \n      int mod = BrowseCap.hasMetaKey() ? KeyboardShortcut.META : \n         KeyboardShortcut.CTRL;\n      String cmdText = \n        new KeyboardShortcut(mod + KeyboardShortcut.SHIFT, 'K').toString(true);\n      cmdText = DomUtils.htmlToText(cmdText);\n      notebookToolbarButton_.setTitle(\"Compile Notebook (\" + cmdText + \")\");\n      \n      texSeparatorWidget_ = toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(texToolbarButton_ = createLatexFormatButton());\n      \n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(previewHTMLButton_ = commands_.previewHTML().createToolbarButton());\n      knitDocumentButton_ = commands_.knitDocument().createToolbarButton(false);\n      knitDocumentButton_.getElement().getStyle().setMarginRight(0, Unit.PX);\n      toolbar.addLeftWidget(knitDocumentButton_);\n      toolbar.addLeftWidget(compilePdfButton_ = commands_.compilePDF().createToolbarButton());\n      rmdFormatButton_ = new ToolbarPopupMenuButton(false, true);\n      toolbar.addLeftWidget(rmdFormatButton_);\n      \n      ToolbarPopupMenu rmdOptionsMenu = new ToolbarPopupMenu();\n      rmdOptionsMenu.addItem(commands_.editRmdFormatOptions().createMenuItem(false));\n      \n      rmdOptionsButton_ = new ToolbarButton(\n            null,  \n            StandardIcons.INSTANCE.options(),\n            rmdOptionsMenu, \n            false);\n      \n      toolbar.addLeftWidget(rmdOptionsButton_);\n\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.synctexSearch().createToolbarButton());\n\n      toolbar.addRightWidget(insertChunkButton_ = commands_.insertChunk().createToolbarButton());\n      toolbar.addRightWidget(runButton_ = commands_.executeCode().createToolbarButton(false));\n      toolbar.addRightSeparator();\n      toolbar.addRightWidget(runLastButton_ = commands_.executeLastCode().createToolbarButton(false));\n      toolbar.addRightWidget(goToPrevButton_ = commands_.goToPrevSection().createToolbarButton(false));\n      toolbar.addRightWidget(goToNextButton_ = commands_.goToNextSection().createToolbarButton(false));\n      toolbar.addRightSeparator();\n      final String SOURCE_BUTTON_TITLE = \"Source the active document\"; \n      \n      sourceButton_ = new ToolbarButton(\n            \"Source\", \n            commands_.sourceActiveDocument().getImageResource(), \n            new ClickHandler() \n            {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  if (uiPrefs_.sourceWithEcho().getValue())\n                     commands_.sourceActiveDocumentWithEcho().execute();\n                  else\n                     commands_.sourceActiveDocument().execute();\n               }\n            });\n      \n      sourceButton_.setTitle(SOURCE_BUTTON_TITLE);\n      toolbar.addRightWidget(sourceButton_);\n      \n      uiPrefs_.sourceWithEcho().addValueChangeHandler(\n                                       new ValueChangeHandler<Boolean>() {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            if (event.getValue())\n               sourceButton_.setTitle(SOURCE_BUTTON_TITLE + \" (with echo)\");\n            else\n               sourceButton_.setTitle(SOURCE_BUTTON_TITLE);\n         }\n      });\n            \n      ToolbarPopupMenu sourceMenu = new ToolbarPopupMenu();\n      sourceMenu.addItem(commands_.sourceActiveDocument().createMenuItem(false));\n      sourceMenu.addItem(commands_.sourceActiveDocumentWithEcho().createMenuItem(false));\n         \n      sourceMenuButton_ = new ToolbarButton(sourceMenu, true);\n      toolbar.addRightWidget(sourceMenuButton_);  \n\n      //toolbar.addRightSeparator();\n     \n      toolbar.addRightWidget(chunksRunButton_ = commands_.executeCode().createToolbarButton(false));\n      ToolbarPopupMenu chunksMenu = new ToolbarPopupMenu();\n      chunksMenu.addItem(commands_.executeCode().createMenuItem(false));\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executeCurrentChunk().createMenuItem(false));\n      chunksMenu.addItem(commands_.executeNextChunk().createMenuItem(false));\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executeSetupChunk().createMenuItem(false));\n      if (uiPrefs_.showRmdChunkOutputInline().getValue())\n      {\n         chunksMenu.addItem(new UIPrefMenuItem<Boolean>(\n               uiPrefs_.autoRunSetupChunk(), true, \"Run Setup Chunk Automatically\", \n               uiPrefs_));\n      }\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executePreviousChunks().createMenuItem(false));\n      chunksMenu.addItem(commands_.executeSubsequentChunks().createMenuItem(false));\n      chunksMenu.addSeparator();\n      chunksMenu.addItem(commands_.executeAllCode().createMenuItem(false));\n      chunksButton_ = new ToolbarButton(\n                       chunksMenu, \n                       true);\n      toolbar.addRightWidget(chunksButton_);\n      \n      ToolbarPopupMenu shinyLaunchMenu = shinyViewerMenu_;\n      shinyLaunchButton_ = new ToolbarButton(\n                       shinyLaunchMenu, \n                       true);\n      shinyLaunchButton_.setVisible(false);\n      toolbar.addRightWidget(shinyLaunchButton_);\n      if (SessionUtils.showPublishUi(session_, uiPrefs_))\n      {\n         toolbar.addRightSeparator();\n         publishButton_ = new RSConnectPublishButton(\n               RSConnect.CONTENT_TYPE_APP, false, null);\n         toolbar.addRightWidget(publishButton_);\n      }\n      \n      toggleDocOutlineButton_ = new LatchingToolbarButton(\n         \"\",\n            StandardIcons.INSTANCE.outline(),\n            new ClickHandler()\n            {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  final double initialSize = editorPanel_.getWidgetSize(docOutlineWidget_);\n                  \n                  // Clicking the icon toggles the outline widget's visibility. The\n                  // 'destination' below is the width we would like to set -- we\n                  // animate to that position for a slightly nicer visual treatment.\n                  final double destination = docOutlineWidget_.getOffsetWidth() > 5\n                        ? 0\n                        : target_.getPreferredOutlineWidgetSize();\n                  \n                  // Update tooltip ('Show'/'Hide' depending on current visibility)\n                  String title = toggleDocOutlineButton_.getTitle();\n                  if (destination != 0)\n                     title = title.replace(\"Show \", \"Hide \");\n                  else\n                     title = title.replace(\"Hide \", \"Show \");\n                  toggleDocOutlineButton_.setTitle(title);\n                  \n                  toggleDocOutlineButton_.setLatched(destination != 0);\n                  \n                  new Animation()\n                  {\n                     @Override\n                     protected void onUpdate(double progress)\n                     {\n                        double size =\n                              destination * progress +\n                              initialSize * (1 - progress);\n                        editorPanel_.setWidgetSize(docOutlineWidget_, size);\n                        editor_.onResize();\n                     }\n                     \n                     @Override\n                     protected void onComplete()\n                     {\n                        target_.setPreferredOutlineWidgetVisibility(destination != 0);\n                     }\n                  }.run(500);\n               }\n            });\n      \n      // Time-out setting the latch just to ensure the document outline\n      // has actually been appropriately rendered.\n      new Timer()\n      {\n         @Override\n         public void run()\n         {\n            String title = commands_.toggleDocumentOutline().getTooltip();\n            title = editorPanel_.getWidgetSize(docOutlineWidget_) > 0\n                  ? title.replace(\"Show \", \"Hide \")\n                  : title.replace(\"Hide \", \"Show \");\n            toggleDocOutlineButton_.setTitle(title);\n            toggleDocOutlineButton_.setLatched(docOutlineWidget_.getOffsetWidth() > 0);\n         }\n      }.schedule(100);\n      \n      toolbar.addRightSeparator();\n      toolbar.addRightWidget(toggleDocOutlineButton_);\n      \n      return toolbar;\n   }","commit_id":"d384347fca84936340116160a3ac3714d37a12e2","url":"https://github.com/rstudio/rstudio"},{"original_method":"public static PrintStream createLoggingProxy(final PrintStream realStream) {\n        return new PrintStream(realStream) {\n            @Override\n            public void print(String s) {\n                realStream.print(s);\n                LOG.info(s);\n            }\n        };\n    }","id":59102,"modified_method":"public PrintStream createLoggingProxy(final PrintStream realStream) {\n        OutputStream out = new OutputStream() {\n            @Override\n            public void write(int i) throws IOException {\n                realStream.write(i);\n                String s = String.valueOf((char) i);\n                Launcher.this.setChanged();\n                Launcher.this.notifyObservers(s);\n            }\n\n            @Override\n            public void write(byte[] bytes) throws IOException {\n                realStream.write(bytes);\n                String s = new String(bytes);\n                Launcher.this.setChanged();\n                Launcher.this.notifyObservers(s);\n            }\n\n            @Override\n            public void write(byte[] bytes, int offset, int len) throws IOException {\n                realStream.write(bytes, offset, len);\n                String s = new String(bytes, offset, len);\n                Launcher.this.setChanged();\n                Launcher.this.notifyObservers(s);\n            }\n        };\n        return new PrintStream(out);\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"public static void main(final String[] args) {\n        String os = System.getProperty(\"os.name\", \"\");\n        // Switch to native look and feel except for Linux (ugly)\n        if (!os.equals(\"Linux\")) {\n            String nativeLF = UIManager.getSystemLookAndFeelClassName();\n            try {\n                UIManager.setLookAndFeel(nativeLF);\n            } catch (Exception e) {\n                // can be safely ignored\n            }\n        }\n        /* Turn off metal's use of bold fonts */\n        UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n\n        //Schedule a job for the event-dispatching thread:\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                new Launcher(args);\n            }\n        });\n    }","id":59103,"modified_method":"public static void main(final String[] args) {\n        String os = System.getProperty(\"os.name\", \"\");\n        // Switch to native look and feel except for Linux (ugly)\n        if (!os.equals(\"Linux\")) {\n            String nativeLF = UIManager.getSystemLookAndFeelClassName();\n            try {\n                UIManager.setLookAndFeel(nativeLF);\n            } catch (Exception e) {\n                // can be safely ignored\n            }\n        }\n        /* Turn off metal's use of bold fonts */\n        //UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n\n        //Schedule a job for the event-dispatching thread:\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                new Launcher(args);\n            }\n        });\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"private PopupMenu createMenu(final String home, final SystemTray tray) {\n        PopupMenu popup = new PopupMenu();\n        startItem = new MenuItem(\"Start server\");\n        startItem.setEnabled(false);\n        popup.add(startItem);\n        startItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n            if (jetty.isStarted()) {\n                trayIcon.displayMessage(null, \"Server already started\", TrayIcon.MessageType.WARNING);\n            } else {\n                jetty.run(new String[]{home}, null);\n                if (jetty.isStarted()) {\n                    stopItem.setEnabled(true);\n                    startItem.setEnabled(false);\n                    trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n                }\n            }\n            }\n        });\n\n        stopItem = new MenuItem(\"Stop server\");\n        popup.add(stopItem);\n        stopItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                jetty.shutdown();\n                stopItem.setEnabled(false);\n                startItem.setEnabled(true);\n                trayIcon.setToolTip(\"eXist-db stopped\");\n            }\n        });\n\n        MenuItem item;\n\n        if (Desktop.isDesktopSupported()) {\n            popup.addSeparator();\n            final Desktop desktop = Desktop.getDesktop();\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                item = new MenuItem(\"Open dashboard\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        try {\n                            URI url = new URI(\"http://localhost:\" + jetty.getPrimaryPort() + \"/exist/apps/dashboard/\");\n                            desktop.browse(url);\n                        } catch (URISyntaxException e) {\n                            trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);\n                        } catch (IOException e) {\n                            trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);\n                        }\n                    }\n                });\n                item = new MenuItem(\"Open eXide\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        try {\n                            URI url = new URI(\"http://localhost:\" + jetty.getPrimaryPort() + \"/exist/apps/eXide/\");\n                            desktop.browse(url);\n                        } catch (URISyntaxException e) {\n                            trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);\n                        } catch (IOException e) {\n                            trayIcon.displayMessage(null, \"Failed to open URL\", TrayIcon.MessageType.ERROR);\n                        }\n                    }\n                });\n                item = new MenuItem(\"Open Java Admin Client\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        LauncherWrapper wrapper = new LauncherWrapper(\"client\");\n                        wrapper.launch();\n                    }\n                });\n            }\n            if (desktop.isSupported(Desktop.Action.OPEN)) {\n                popup.addSeparator();\n                item = new MenuItem(\"Open exist.log\");\n                popup.add(item);\n                item.addActionListener(new LogActionListener());\n            }\n\n            popup.addSeparator();\n            item = new MenuItem(\"Quit (and stop server)\");\n            popup.add(item);\n            item.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent actionEvent) {\n                jetty.shutdown();\n                tray.remove(trayIcon);\n                System.exit(0);\n                }\n            });\n        }\n        return popup;\n    }","id":59104,"modified_method":"private PopupMenu createMenu(final String home) {\n        PopupMenu popup = new PopupMenu();\n        startItem = new MenuItem(\"Start server\");\n        startItem.setEnabled(false);\n        popup.add(startItem);\n        startItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n            if (jetty.isStarted()) {\n                trayIcon.displayMessage(null, \"Server already started\", TrayIcon.MessageType.WARNING);\n            } else {\n                jetty.run(new String[]{home}, null);\n                if (jetty.isStarted()) {\n                    stopItem.setEnabled(true);\n                    startItem.setEnabled(false);\n                    trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n                }\n            }\n            }\n        });\n\n        stopItem = new MenuItem(\"Stop server\");\n        popup.add(stopItem);\n        stopItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                jetty.shutdown();\n                stopItem.setEnabled(false);\n                startItem.setEnabled(true);\n                trayIcon.setToolTip(\"eXist-db stopped\");\n            }\n        });\n\n        popup.addSeparator();\n\n        MenuItem toolbar = new MenuItem(\"Show Tool Window\");\n        popup.add(toolbar);\n        toolbar.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                utilityPanel.setVisible(true);\n            }\n        });\n\n        MenuItem item;\n\n        if (Desktop.isDesktopSupported()) {\n            popup.addSeparator();\n            final Desktop desktop = Desktop.getDesktop();\n            if (desktop.isSupported(Desktop.Action.BROWSE)) {\n                item = new MenuItem(\"Open dashboard\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        dashboard(desktop);\n                    }\n                });\n                item = new MenuItem(\"Open eXide\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        eXide(desktop);\n                    }\n                });\n                item = new MenuItem(\"Open Java Admin Client\");\n                popup.add(item);\n                item.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent actionEvent) {\n                        client();\n                    }\n                });\n            }\n            if (desktop.isSupported(Desktop.Action.OPEN)) {\n                popup.addSeparator();\n                item = new MenuItem(\"Open exist.log\");\n                popup.add(item);\n                item.addActionListener(new LogActionListener());\n            }\n\n            popup.addSeparator();\n            item = new MenuItem(\"Quit (and stop server)\");\n            popup.add(item);\n            item.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent actionEvent) {\n                    shutdown();\n                }\n            });\n        }\n        return popup;\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"protected void signalShutdown() {\n        trayIcon.setToolTip(\"eXist-db server stopped\");\n        startItem.setEnabled(true);\n        stopItem.setEnabled(false);\n    }","id":59105,"modified_method":"protected void signalShutdown() {\n        if (isSystemTraySupported()) {\n            trayIcon.setToolTip(\"eXist-db server stopped\");\n            startItem.setEnabled(true);\n            stopItem.setEnabled(false);\n        }\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"protected void showMessageAndExit(String title, String message, boolean logs) {\n        JPanel panel = new JPanel();\n        panel.setLayout(new BorderLayout());\n\n        JLabel label = new JLabel(message);\n        label.setHorizontalAlignment(SwingConstants.CENTER);\n        panel.add(label, BorderLayout.CENTER);\n        if (logs) {\n            JButton displayLogs = new JButton(\"View Log\");\n            displayLogs.addActionListener(new LogActionListener());\n            label.setHorizontalAlignment(SwingConstants.CENTER);\n            panel.add(displayLogs, BorderLayout.SOUTH);\n        }\n        JOptionPane.showMessageDialog(splash, panel, title, JOptionPane.WARNING_MESSAGE);\n        System.exit(1);\n    }","id":59106,"modified_method":"protected void showMessageAndExit(String title, String message, boolean logs) {\n        JPanel panel = new JPanel();\n        panel.setLayout(new BorderLayout());\n\n        JLabel label = new JLabel(message);\n        label.setHorizontalAlignment(SwingConstants.CENTER);\n        panel.add(label, BorderLayout.CENTER);\n        if (logs) {\n            JButton displayLogs = new JButton(\"View Log\");\n            displayLogs.addActionListener(new LogActionListener());\n            label.setHorizontalAlignment(SwingConstants.CENTER);\n            panel.add(displayLogs, BorderLayout.SOUTH);\n        }\n        JOptionPane.showMessageDialog(splash, panel, title, JOptionPane.WARNING_MESSAGE);\n        //System.exit(1);\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"public Launcher(final String[] args) {\n        if (!SystemTray.isSupported()) {\n            showMessageAndExit(\"Not supported\", \"Running eXist-db via the launcher does not appear to be supported on your platform. \" +\n                    \"Please run it using startup.sh/startup.bat.\", false);\n            return;\n        }\n\n        SystemTray tray = SystemTray.getSystemTray();\n\n        final String home = getJettyHome();\n        captureConsole();\n\n        Dimension iconDim = tray.getTrayIconSize();\n        BufferedImage image = null;\n        try {\n            image = ImageIO.read(getClass().getResource(\"icon32.png\"));\n        } catch (IOException e) {\n            showMessageAndExit(\"Launcher failed\", \"Failed to read system tray icon.\", false);\n        }\n        trayIcon = new TrayIcon(image.getScaledInstance(iconDim.width, iconDim.height, Image.SCALE_SMOOTH), \"eXist-db Launcher\");\n\n        final JDialog hiddenFrame = new JDialog();\n        hiddenFrame.setUndecorated(true);\n\n        final PopupMenu popup = createMenu(home, tray);\n        trayIcon.setPopupMenu(popup);\n        trayIcon.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent mouseEvent) {\n                if (mouseEvent.getButton() == MouseEvent.BUTTON1) {\n                    hiddenFrame.add(popup);\n                    popup.show(hiddenFrame, mouseEvent.getXOnScreen(), mouseEvent.getYOnScreen());\n                }\n            }\n        });\n        try {\n            hiddenFrame.setResizable(false);\n            hiddenFrame.setVisible(true);\n            tray.add(trayIcon);\n        } catch (AWTException e) {\n            e.printStackTrace();\n            showMessageAndExit(\"Not supported\", \"Running eXist-db via the launcher is not supported on your platform. \" +\n                    \"Please run it using bin/startup.sh or bin\\\\startup.bat.\", false);\n            return;\n        }\n        trayIcon.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n                trayIcon.displayMessage(null, \"Right click for menu\", TrayIcon.MessageType.INFO);\n            }\n        });\n\n        splash = new SplashScreen(this);\n        splash.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowOpened(WindowEvent windowEvent) {\n                new Thread() {\n                    @Override\n                    public void run() {\n                        try {\n                            jetty = new JettyStart();\n                            jetty.addObserver(splash);\n                            jetty.run(new String[]{home}, splash);\n                        } catch (Exception e) {\n                            showMessageAndExit(\"Error Occurred\", \"An error occurred during startup. Please check the logs.\", true);\n                        }\n                    }\n                }.start();\n            }\n        });\n    }","id":59107,"modified_method":"public Launcher(final String[] args) {\n        if (SystemTray.isSupported()) {\n            tray = SystemTray.getSystemTray();\n        }\n\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                utilityPanel = new UtilityPanel(Launcher.this);\n                if (!isSystemTraySupported())\n                    utilityPanel.setVisible(true);\n            }\n        });\n\n        captureConsole();\n\n        final String home = getJettyHome();\n\n        if (isSystemTraySupported())\n            initSystemTray(home);\n\n        splash = new SplashScreen(this);\n        splash.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowOpened(WindowEvent windowEvent) {\n                new Thread() {\n                    @Override\n                    public void run() {\n                        try {\n                            jetty = new JettyStart();\n                            jetty.addObserver(splash);\n                            jetty.run(new String[]{home}, splash);\n                        } catch (Exception e) {\n                            showMessageAndExit(\"Error Occurred\", \"An error occurred during eXist-db startup. Please check the logs.\", true);\n                            System.exit(1);\n                        }\n                    }\n                }.start();\n            }\n        });\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"protected void signalStarted() {\n        trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n        startItem.setEnabled(false);\n        stopItem.setEnabled(true);\n    }","id":59108,"modified_method":"protected void signalStarted() {\n        if (isSystemTraySupported()) {\n            trayIcon.setToolTip(\"eXist-db server running on port \" + jetty.getPrimaryPort());\n            startItem.setEnabled(false);\n            stopItem.setEnabled(true);\n        }\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"public final static void main(String[] args) {\n        LauncherWrapper wrapper = new LauncherWrapper(LAUNCHER);\n        wrapper.launch();\n    }","id":59109,"modified_method":"public final static void main(String[] args) {\n        boolean spawn = SystemTray.isSupported();\n\n        LauncherWrapper wrapper = new LauncherWrapper(LAUNCHER);\n        wrapper.launch();\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"public void launch() {\n        String home = System.getProperty(\"exist.home\", \".\");\n        Project project = new Project();\n        project.setBasedir(home);\n\n        DefaultLogger logger = new DefaultLogger();\n        logger.setOutputPrintStream(System.out);\n        logger.setErrorPrintStream(System.err);\n        logger.setMessageOutputLevel(Project.MSG_DEBUG);\n        project.addBuildListener(logger);\n\n        Java java = new Java();\n        java.setFork(true);\n        java.setSpawn(true);\n        //java.setClassname(org.exist.start.Main.class.getName());\n        java.setProject(project);\n        java.setJar(new File(home, \"start.jar\"));\n        //Path path = java.createClasspath();\n        //path.setPath(\"start.jar\");\n\n        Commandline.Argument jvmArgs = java.createJvmarg();\n        String javaOpts = getJavaOpts(home);\n        jvmArgs.setLine(javaOpts);\n        System.out.println(\"Java opts: \" + javaOpts);\n\n        Commandline.Argument args = java.createArg();\n        args.setLine(command);\n\n        java.init();\n        java.execute();\n    }","id":59110,"modified_method":"public void launch() {\n        launch(true);\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"public SplashScreen(Launcher launcher) {\n        this.launcher = launcher;\n        setUndecorated(true);\n        setBackground(new Color(255, 255, 255, 255));\n        setAlwaysOnTop(true);\n        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\n\n        URL imageURL = SplashScreen.class.getResource(\"logo.jpg\");\n        ImageIcon icon = new ImageIcon(imageURL, \"eXist-db Logo\");\n        getContentPane().setLayout(new BorderLayout());\n\n        // add the image label\n        JLabel imageLabel = new JLabel();\n        imageLabel.setIcon(icon);\n        getContentPane().add(imageLabel, BorderLayout.CENTER);\n\n        // message label\n        statusLabel = new JLabel(\"Launching eXist-db ...\", SwingConstants.CENTER);\n        statusLabel.setFont(new Font(statusLabel.getFont().getName(), Font.PLAIN, 14));\n        statusLabel.setForeground(Color.black);\n        statusLabel.setBorder(new EmptyBorder(10, 10, 10, 10));\n        statusLabel.setSize(new Dimension(icon.getIconWidth(), 60));\n\n        getContentPane().add(statusLabel, BorderLayout.SOUTH);\n        // show it\n        setSize(new Dimension(icon.getIconWidth(), icon.getIconHeight() + 20));\n        //pack();\n        this.setLocationRelativeTo(null);\n        setVisible(true);\n    }","id":59111,"modified_method":"public SplashScreen(Launcher launcher) {\n        this.launcher = launcher;\n        setUndecorated(true);\n        setBackground(new Color(255, 255, 255, 255));\n        setAlwaysOnTop(true);\n        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\n\n        URL imageURL = SplashScreen.class.getResource(\"logo.png\");\n        ImageIcon icon = new ImageIcon(imageURL, \"eXist-db Logo\");\n        getContentPane().setLayout(new BorderLayout());\n\n        // add the image label\n        JLabel imageLabel = new JLabel();\n        imageLabel.setIcon(icon);\n        getContentPane().add(imageLabel, BorderLayout.CENTER);\n\n        // message label\n        statusLabel = new JLabel(\"Launching eXist-db ...\", SwingConstants.CENTER);\n        statusLabel.setFont(new Font(statusLabel.getFont().getName(), Font.PLAIN, 14));\n        statusLabel.setForeground(Color.black);\n        statusLabel.setBorder(new EmptyBorder(10, 10, 10, 10));\n        statusLabel.setSize(new Dimension(icon.getIconWidth(), 60));\n\n        getContentPane().add(statusLabel, BorderLayout.SOUTH);\n        // show it\n        setSize(new Dimension(icon.getIconWidth(), icon.getIconHeight() + 20));\n        //pack();\n        this.setLocationRelativeTo(null);\n        setVisible(true);\n    }","commit_id":"a8ef11b6ebc671daa445d3ac8f1a25a302c4fc0c","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n  public void messageReceived( final ChannelHandlerContext ctx, final MessageEvent e ) throws Exception {\n    synchronized ( this ) {\n      if ( this.first ) {\n        try {\n          final HttpRequest request = ( HttpRequest ) e.getMessage( );\n          final ChannelPipeline pipeline = ctx.getPipeline( );\n          FilteredPipeline filteredPipeline = PipelineRegistry.getInstance( ).find( request );\n          filteredPipeline.unroll( pipeline );\n          this.first = false;\n        } catch ( DuplicatePipelineException e1 ) {\n          LOG.error( \"This is a BUG: \" + e1, e1 );\n          throw e1;\n        } catch ( NoAcceptingPipelineException e2 ) {\n          throw e2;\n        }\n      }\n    }\n    ctx.sendUpstream( e );\n  }","id":59112,"modified_method":"@Override\n  public void messageReceived( final ChannelHandlerContext ctx, final MessageEvent e ) throws Exception {\n    if ( this.first ) {\n      lookupPipeline( ctx, e );\n      ctx.sendUpstream( e );\n    } else {\n      LOG.warn( \"Hard close the socket on an attempt to do a second request.\" );//TODO: Keep-Alive support\n      ctx.getChannel( ).close( );\n    }\n  }","commit_id":"d7d84fa3cf500b98a2015a51f754a526d2a1250f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void handle( ExceptionMessage exMsg ) {\n\t\tThrowable exception = exMsg.getException( );\n\t\tObject payload = null;\n\t\tEucalyptusMessage msg = null;\n\t\tif ( exception instanceof MessagingException ) {\n\t\t\tMessagingException ex = ( MessagingException ) exception;\n\t\t\tMuleMessage muleMsg = ex.getUmoMessage( );\n\n\t\t\tif ( payload instanceof RequestTransactionScript ) {\n\t\t\t\tmsg = ( ( RequestTransactionScript ) payload ).getRequestMessage( );\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tmsg = parsePayload( muleMsg.getPayload( ) );\n\t\t\t\t} catch ( Exception e ) {\n\t\t\t\t\tLOG.error( \"Bailing out of error handling: don't have the correlationId for the caller!\" );\n\t\t\t\t\tLOG.error( e, e );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tEucalyptusErrorMessageType errMsg = getErrorMessageType( exMsg, msg );\n\t\t\terrMsg.setException(exception.getCause());\n\t\t\treplies.putMessage( errMsg );\n\t\t}\n\t}","id":59113,"modified_method":"public void handle( ExceptionMessage exMsg ) {\n    Throwable exception = exMsg.getException( );\n    Object payload = null;\n    EucalyptusMessage msg = null;\n    if ( exception instanceof MessagingException ) {\n      MessagingException ex = ( MessagingException ) exception;\n      MuleMessage muleMsg = ex.getUmoMessage( );\n\n      if ( payload instanceof RequestTransactionScript ) {\n        msg = ( ( RequestTransactionScript ) payload ).getRequestMessage( );\n      } else {\n        try {\n          msg = parsePayload( muleMsg.getPayload( ) );\n        } catch ( Exception e ) {\n          LOG.error( \"Bailing out of error handling: don't have the correlationId for the caller!\" );\n          LOG.error( e, e );\n          return;\n        }\n      }\n      EucalyptusErrorMessageType errMsg = getErrorMessageType( exMsg, msg );\n      errMsg.setException( exception.getCause( ) );\n      this.handle( errMsg );\n//      replies.putMessage( errMsg );\n    }\n  }","commit_id":"d7d84fa3cf500b98a2015a51f754a526d2a1250f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void handle( EucalyptusMessage msg ) {\n\t\tif ( msg.getCorrelationId( ) != null && msg.getCorrelationId( ).length( ) != 0 ) replies.putMessage( msg );\n\t}","id":59114,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  public void handle( EucalyptusMessage responseMessage ) {\n    String corrId = responseMessage.getCorrelationId( );\n    ChannelHandlerContext ctx = pending.remove( corrId );\n    if ( ctx == null ) {\n      LOG.warn( \"Received a reply for absent client:  No channel to write response message.\" );\n      LOG.debug( responseMessage );\n    } else {\n      Channels.write( ctx.getChannel( ), responseMessage );\n    }\n  }","commit_id":"d7d84fa3cf500b98a2015a51f754a526d2a1250f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic void handleUpstream( ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n\t\tLOG.debug( this.getClass( ).getSimpleName( ) + \"[incoming]: \" + e );\n\t\tif ( e instanceof MessageEvent ) {\n\t\t\tfinal MessageEvent event = ( MessageEvent ) e;\n\t\t\tif(event.getMessage() instanceof MappingHttpMessage) {\n\t\t\t\tMappingHttpMessage message = ( MappingHttpMessage ) event.getMessage( );\n\t\t\t\tEucalyptusMessage msg = (EucalyptusMessage) message.getMessage( );\n\t\t\t\tLOG.info( EventRecord.create( this.getClass().getSimpleName(), msg.getUserId(), msg.getCorrelationId(), EventType.MSG_RECEIVED, msg.getClass().getSimpleName() ) );\n\t\t\t\tlong startTime = System.currentTimeMillis();\n\t\t\t\tif(msg instanceof PutObjectType) {\n\t\t\t\t\tDispatcher dispatch = new Dispatcher(ctx, msg, message, startTime);\n\t\t\t\t\tdispatch.start();\n\t\t\t\t} else {\n\t\t\t\t\tMessaging.dispatch( \"vm://RequestQueue\", msg );\n\t\t\t\t\tEucalyptusMessage reply = null;\n\n\t\t\t\t\treply = ReplyQueue.getReply( msg.getCorrelationId() );\n\t\t\t\t\tLOG.info( EventRecord.create( this.getClass().getSimpleName(), msg.getUserId(), msg.getCorrelationId(), EventType.MSG_SERVICED, ( System.currentTimeMillis() - startTime ) ) );\n\t\t\t\t\tif ( reply == null ) {\n\t\t\t\t\t\treply = new EucalyptusErrorMessageType( this.getClass().getSimpleName(), msg, \"Received a NULL reply\" );\n\t\t\t\t\t}\n\t\t\t\t\tMappingHttpResponse response = new MappingHttpResponse( message.getProtocolVersion( ) ); \n\t\t\t\t\tresponse.setMessage( reply );\n\t\t\t\t\tif(!(reply instanceof WalrusDataGetResponseType)) {\n\t\t\t\t\t\tChannels.write(ctx.getChannel(), response);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":59115,"modified_method":"@Override\n  public void handleUpstream( ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.debug( this.getClass( ).getSimpleName( ) + \"[incoming]: \" + e );\n    if ( e instanceof MessageEvent ) {\n      this.startTime = System.currentTimeMillis( );\n      final MessageEvent event = ( MessageEvent ) e;\n      if ( event.getMessage( ) instanceof MappingHttpMessage ) {\n        MappingHttpMessage request = ( MappingHttpMessage ) event.getMessage( );\n        requestLocal.set( ctx.getChannel( ), request );\n        EucalyptusMessage msg = ( EucalyptusMessage ) request.getMessage( );\n        LOG.info( EventRecord.create( this.getClass( ).getSimpleName( ), msg.getUserId( ), msg.getCorrelationId( ), EventType.MSG_RECEIVED, msg.getClass( ).getSimpleName( ) ) );\n        ReplyQueue.addReplyListener( msg.getCorrelationId( ), ctx );\n        Messaging.dispatch( \"vm://RequestQueue\", msg );\n      }\n    }\n  }","commit_id":"d7d84fa3cf500b98a2015a51f754a526d2a1250f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic void handleDownstream( final ChannelHandlerContext ctx, final ChannelEvent e ) throws Exception {\n\t\tctx.sendDownstream( e );\n\t}","id":59116,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  @Override\n  public void handleDownstream( final ChannelHandlerContext ctx, final ChannelEvent e ) throws Exception {\n    if ( e instanceof MessageEvent && ( ( MessageEvent ) e ).getMessage( ) instanceof EucalyptusMessage ) {\n      MappingHttpMessage request = requestLocal.get( ctx.getChannel( ) );\n      EucalyptusMessage reply = ( EucalyptusMessage ) ( ( MessageEvent ) e ).getMessage( );\n      if ( reply == null ) {\n        // TODO: fix this error reporting\n        LOG.warn( \"Received a null response: \" + request.getMessageString( ) );\n        reply = new EucalyptusErrorMessageType( this.getClass( ).getSimpleName( ), ( EucalyptusMessage ) request.getMessage( ), \"Received a NULL reply\" );\n      }\n      LOG.info( EventRecord.create( this.getClass( ).getSimpleName( ), reply.getUserId( ), reply.getCorrelationId( ), EventType.MSG_SERVICED, ( System.currentTimeMillis( ) - startTime ) ) );      \n      MappingHttpResponse response = new MappingHttpResponse( request.getProtocolVersion( ) );\n      DownstreamMessageEvent newEvent = new DownstreamMessageEvent( ctx.getChannel( ), e.getFuture( ), response, null );\n      response.setMessage( reply );\n      if ( !( reply instanceof WalrusDataGetResponseType ) ) {\n        ctx.sendDownstream( newEvent );\n        newEvent.getFuture( ).addListener( ChannelFutureListener.CLOSE );\n      }\n    }\n  }","commit_id":"d7d84fa3cf500b98a2015a51f754a526d2a1250f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n  @Override\n  public void handleDownstream( final ChannelHandlerContext ctx, final ChannelEvent e ) throws Exception {\n    LOG.trace( this.getClass( ).getSimpleName( ) + \"[outgoing]: \" + e );\n    if ( e instanceof MessageEvent ) {\n      final MessageEvent msge = ( MessageEvent ) e;\n      if ( msge.getMessage( ) instanceof NullPayload ) {\n        return;\n      }\n      if ( msge.getMessage( ) instanceof IsData ) {// Pass through for chunked messaging\n        ctx.sendDownstream( msge );\n      } else if ( msge.getMessage( ) instanceof EucalyptusMessage ) {// Handle single request-response MEP\n        final MappingHttpMessage request = this.requestLocal.get( ctx.getChannel( ) );\n        EucalyptusMessage reply = ( EucalyptusMessage ) ( ( MessageEvent ) e ).getMessage( );\n        if ( reply == null ) {// TODO: fix this error reporting\n          LOG.warn( \"Received a null response for request: \" + request.getMessageString( ) );\n          reply = new EucalyptusErrorMessageType( this.getClass( ).getSimpleName( ), ( EucalyptusMessage ) request.getMessage( ), \"Received a NULL reply\" );\n        }\n        LOG.info( EventRecord.create( Component.eucalyptus, reply.getUserId( ), reply.getCorrelationId( ), EventType.MSG_SERVICED, reply.getClass( ).getSimpleName( ) ) );\n        if ( reply instanceof WalrusDataGetResponseType ) {\n          if ( reply instanceof GetObjectResponseType ) {\n            final GetObjectResponseType getObjectResponse = ( GetObjectResponseType ) reply;\n            LOG.debug( getObjectResponse );\n            if ( getObjectResponse.getBase64Data( ) == null ) {\n              return;\n            }\n          } else {\n            return;\n          }\n        }\n        final MappingHttpResponse response = new MappingHttpResponse( request.getProtocolVersion( ) );\n        final DownstreamMessageEvent newEvent = new DownstreamMessageEvent( ctx.getChannel( ), e.getFuture( ), response, null );\n        response.setMessage( reply );\n        ctx.sendDownstream( newEvent );\n      } else if ( msge.getMessage( ) instanceof HttpResponse ) {\n        ctx.sendDownstream( e );\n      } else {\n        LOG.debug( \"Non-specific type being written to the channel. Not dropping this message causes breakage.\" );\n      }\n    } else {\n      ctx.sendDownstream( e );\n    }\n  }","id":59117,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  @Override\n  public void handleDownstream( final ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.trace( this.getClass( ).getSimpleName( ) + \"[outgoing]: \" + e );\n    if ( e instanceof MessageEvent ) {\n      final MessageEvent msge = ( MessageEvent ) e;\n      if ( msge.getMessage( ) instanceof NullPayload ) {\n        msge.getFuture( ).cancel( );\n      } else if ( msge.getMessage( ) instanceof HttpResponse ) {\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof IsData ) {// Pass through for chunked messaging\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof EucalyptusMessage ) {// Handle single request-response MEP\n        final MappingHttpMessage request = this.requestLocal.get( ctx.getChannel( ) );\n        EucalyptusMessage reply = ( EucalyptusMessage ) ( ( MessageEvent ) e ).getMessage( );\n        if ( reply == null ) {// TODO: fix this error reporting\n          LOG.warn( \"Received a null response for request: \" + request.getMessageString( ) );\n          reply = new EucalyptusErrorMessageType( this.getClass( ).getSimpleName( ), ( EucalyptusMessage ) request.getMessage( ), \"Received a NULL reply\" );\n        }\n        LOG.info( EventRecord.create( Component.eucalyptus, reply.getUserId( ), reply.getCorrelationId( ), EventType.MSG_SERVICED, reply.getClass( ).getSimpleName( ) ) );\n        if ( reply instanceof WalrusDataGetResponseType ) {\n          if ( reply instanceof GetObjectResponseType ) {\n            final GetObjectResponseType getObjectResponse = ( GetObjectResponseType ) reply;\n            LOG.debug( getObjectResponse );\n            if ( getObjectResponse.getBase64Data( ) == null ) {\n              return;\n            }\n          } else {\n            return;\n          }\n        }\n        final MappingHttpResponse response = new MappingHttpResponse( request.getProtocolVersion( ) );\n        final DownstreamMessageEvent newEvent = new DownstreamMessageEvent( ctx.getChannel( ), e.getFuture( ), response, null );\n        response.setMessage( reply );\n        e = newEvent;\n      } else {\n        e.getFuture( ).cancel( );\n        LOG.debug( \"Non-specific type being written to the channel. Not dropping this message causes breakage.\" );\n      }\n    }\n    ctx.sendDownstream( e );\n  }","commit_id":"cceff4169c95d822a1cdde71449f625b395de5e6","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void handleUpstream( ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.trace( this.hashCode() + \" -> Received upstream: \" + e.getClass( ) );\n    if ( e instanceof MessageEvent ) {\n      this.clearPending( e.getFuture( ) );\n      if( ( (MessageEvent)e).getMessage( ) instanceof MappingHttpResponse ) {\n        MappingHttpResponse response = (MappingHttpResponse) ( (MessageEvent)e).getMessage( );\n        if( HttpResponseStatus.OK.equals( response.getStatus( ) ) ) {\n          this.upstreamMessage( ctx, ( MessageEvent ) e );          \n        } else {\n          throw new EucalyptusClusterException( response.getMessageString( ) );\n        }\n      }\n      ctx.sendUpstream( e );\n    } else if ( e instanceof ExceptionEvent ) {\n      this.exceptionCaught( ctx, ( ExceptionEvent ) e );\n      this.clearPending( e.getFuture( ) );\n      ctx.sendUpstream( e );\n    } else if ( e instanceof ChannelStateEvent ) {\n      ChannelStateEvent cse = (ChannelStateEvent) e;\n      switch(cse.getState( )) {\n        case CONNECTED: {\n          if( cse.getValue( ) == null ) {\n            this.clearPending( e.getFuture( ) );\n          }\n        } break;\n        case OPEN: {\n          if( !Boolean.TRUE.equals( cse.getValue( ) ) ) {\n          }\n        } break;\n        case BOUND: { ctx.sendUpstream( e ); } break;\n        case INTEREST_OPS: { ctx.sendUpstream( e ); } break;\n        default:\n          ctx.sendDownstream(e);\n      }\n    } else {\n      ctx.sendUpstream( e );      \n    }\n  }","id":59118,"modified_method":"@Override\n  public void handleUpstream( ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.trace( this.hashCode() + \" -> Received upstream: \" + e.getClass( ) );\n    if ( e instanceof MessageEvent ) {\n      this.clearPending( e.getFuture( ) );\n      if( ( (MessageEvent)e).getMessage( ) instanceof MappingHttpResponse ) {\n        MappingHttpResponse response = (MappingHttpResponse) ( (MessageEvent)e).getMessage( );\n        if( HttpResponseStatus.OK.equals( response.getStatus( ) ) ) {\n          this.upstreamMessage( ctx, ( MessageEvent ) e );          \n        } else {\n          throw new EucalyptusClusterException( response.getMessageString( ) );\n        }\n      }\n      ctx.sendUpstream( e );\n    } else if ( e instanceof ExceptionEvent ) {\n      this.exceptionCaught( ctx, ( ExceptionEvent ) e );\n      this.clearPending( e.getFuture( ) );\n      ctx.sendUpstream( e );\n    } else if ( e instanceof ChannelStateEvent ) {\n      ChannelStateEvent cse = (ChannelStateEvent) e;\n      switch(cse.getState( )) {\n        case CONNECTED: {\n          if( cse.getValue( ) == null ) {\n            this.clearPending( e.getFuture( ) );\n          }\n        } break;\n        case OPEN: {\n          if( !Boolean.TRUE.equals( cse.getValue( ) ) ) {\n          }\n        } break;\n        case BOUND: { ctx.sendUpstream( e ); } break;\n        case INTEREST_OPS: { ctx.sendUpstream( e ); } break;\n        default:\n          ctx.sendUpstream(e);\n      }\n    } else {\n      ctx.sendUpstream( e );      \n    }\n  }","commit_id":"be554040b79d1d39f57ae165a7f342da72e1e68e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void sendError( final ChannelHandlerContext ctx, final HttpResponseStatus status ) {\n    final HttpResponse response = new DefaultHttpResponse( HttpVersion.HTTP_1_1, status );\n    response.setHeader( HttpHeaders.Names.CONTENT_TYPE, \"text/plain; charset=UTF-8\" );\n    response.setContent( ChannelBuffers.copiedBuffer( \"Failure: \" + status.toString( ) + \"\\r\\n\", \"UTF-8\" ) );\n    ctx.getChannel( ).write( response ).addListener( ChannelFutureListener.CLOSE );\n  }","id":59119,"modified_method":"private void sendError( final ChannelHandlerContext ctx, final HttpResponseStatus status ) {\n    final HttpResponse response = new DefaultHttpResponse( HttpVersion.HTTP_1_1, status );\n    response.setHeader( HttpHeaders.Names.CONTENT_TYPE, \"text/plain; charset=UTF-8\" );\n    response.setContent( ChannelBuffers.copiedBuffer( \"Failure: \" + status.toString( ) + \"\\r\\n\", \"UTF-8\" ) );\n    ChannelFuture writeFuture = Channels.future( ctx.getChannel( ) );\n    writeFuture.addListener( ChannelFutureListener.CLOSE );\n    Channels.write( ctx, writeFuture, response );\n//    ctx.getChannel( ).write( response ).addListener( ChannelFutureListener.CLOSE );\n  }","commit_id":"be554040b79d1d39f57ae165a7f342da72e1e68e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n  @Override\n  public void handleDownstream( final ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.trace( this.getClass( ).getSimpleName( ) + \"[outgoing]: \" + e );\n    if ( e instanceof MessageEvent ) {\n      final MessageEvent msge = ( MessageEvent ) e;\n      if ( msge.getMessage( ) instanceof NullPayload ) {\n        msge.getFuture( ).cancel( );\n      } else if ( msge.getMessage( ) instanceof HttpResponse ) {\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof IsData ) {// Pass through for chunked messaging\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof EucalyptusMessage ) {// Handle single request-response MEP\n        final MappingHttpMessage request = this.requestLocal.get( ctx.getChannel( ) );\n        EucalyptusMessage reply = ( EucalyptusMessage ) ( ( MessageEvent ) e ).getMessage( );\n        if ( reply == null ) {// TODO: fix this error reporting\n          LOG.warn( \"Received a null response for request: \" + request.getMessageString( ) );\n          reply = new EucalyptusErrorMessageType( this.getClass( ).getSimpleName( ), ( EucalyptusMessage ) request.getMessage( ), \"Received a NULL reply\" );\n        }\n        LOG.info( EventRecord.create( Component.eucalyptus, reply.getUserId( ), reply.getCorrelationId( ), EventType.MSG_SERVICED, reply.getClass( ).getSimpleName( ) ) );\n        if ( reply instanceof WalrusDataGetResponseType ) {\n          if ( reply instanceof GetObjectResponseType ) {\n            final GetObjectResponseType getObjectResponse = ( GetObjectResponseType ) reply;\n            LOG.debug( getObjectResponse );\n            if ( getObjectResponse.getBase64Data( ) == null ) {\n              return;\n            }\n          } else {\n            return;\n          }\n        }\n        final MappingHttpResponse response = new MappingHttpResponse( request.getProtocolVersion( ) );\n        final DownstreamMessageEvent newEvent = new DownstreamMessageEvent( ctx.getChannel( ), e.getFuture( ), response, null );\n        response.setMessage( reply );\n        e = newEvent;\n      } else {\n        e.getFuture( ).cancel( );\n        LOG.debug( \"Non-specific type being written to the channel. Not dropping this message causes breakage.\" );\n      }\n    }\n    ctx.sendDownstream( e );\n  }","id":59120,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  @Override\n  public void handleDownstream( final ChannelHandlerContext ctx, ChannelEvent e ) throws Exception {\n    LOG.trace( this.getClass( ).getSimpleName( ) + \"[outgoing]: \" + e );\n    if ( e instanceof MessageEvent ) {\n      final MessageEvent msge = ( MessageEvent ) e;\n      if ( msge.getMessage( ) instanceof NullPayload ) {\n        msge.getFuture( ).cancel( );\n      } else if ( msge.getMessage( ) instanceof HttpResponse ) {\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof IsData ) {// Pass through for chunked messaging\n        ctx.sendDownstream( e );\n      } else if ( msge.getMessage( ) instanceof EucalyptusMessage ) {// Handle single request-response MEP\n        final MappingHttpMessage request = this.requestLocal.get( ctx.getChannel( ) );\n        EucalyptusMessage reply = ( EucalyptusMessage ) ( ( MessageEvent ) e ).getMessage( );\n        if ( reply == null ) {// TODO: fix this error reporting\n          LOG.warn( \"Received a null response for request: \" + request.getMessageString( ) );\n          reply = new EucalyptusErrorMessageType( this.getClass( ).getSimpleName( ), ( EucalyptusMessage ) request.getMessage( ), \"Received a NULL reply\" );\n        }\n        LOG.info( EventRecord.create( Component.eucalyptus, reply.getUserId( ), reply.getCorrelationId( ), EventType.MSG_SERVICED, reply.getClass( ).getSimpleName( ) ) );\n        if ( reply instanceof WalrusDataGetResponseType ) {\n          if ( reply instanceof GetObjectResponseType ) {\n            final GetObjectResponseType getObjectResponse = ( GetObjectResponseType ) reply;\n            LOG.debug( getObjectResponse );\n            if ( getObjectResponse.getBase64Data( ) == null ) {\n              e.getFuture( ).cancel( );\n              return;\n            }\n          } else {\n            e.getFuture( ).cancel( );\n            //            return;\n          }\n        }\n        final MappingHttpResponse response = new MappingHttpResponse( request.getProtocolVersion( ) );\n        final DownstreamMessageEvent newEvent = new DownstreamMessageEvent( ctx.getChannel( ), e.getFuture( ), response, null );\n        response.setMessage( reply );\n        e = newEvent;\n      } else {\n        e.getFuture( ).cancel( );\n        LOG.debug( \"Non-specific type being written to the channel. Not dropping this message causes breakage.\" );\n      }\n    }\n    if( e.getFuture( ).isCancelled( ) ) {\n      LOG.debug( \"Cancelling send on : \" + LogUtil.dumpObject( e ) );\n    } else {\n      ctx.sendDownstream( e );\n    }\n  }","commit_id":"be554040b79d1d39f57ae165a7f342da72e1e68e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Test\n  public void update_date_when_updated_date_is_zero() {\n    dbTester.prepareDbUnit(getClass(), \"update_date_when_updated_date_is_zero.xml\");\n\n    underTest.updateDateWhenUpdatedDateIsZero(dbTester.getSession(), \"ABCD\", 1500000000002L);\n    dbTester.getSession().commit();\n\n    dbTester.assertDbUnitTable(getClass(), \"update_date_when_updated_date_is_zero-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\");\n  }","id":59121,"modified_method":"@Test\n  public void update_date_when_updated_date_is_zero() {\n    dbTester.prepareDbUnit(getClass(), \"update_date_when_updated_date_is_zero.xml\");\n\n    underTest.updateDateWhenUpdatedDateIsZero(dbTester.getSession(), \"ABCD\", 1500000000002L);\n    dbTester.getSession().commit();\n\n    dbTester.assertDbUnitTable(getClass(), \"update_date_when_updated_date_is_zero-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\", \"revision\");\n  }","commit_id":"5c288031321de250b5d2e90c4281bd25cd80f9e4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    underTest.update(new FileSourceDto()\n      .setId(101L)\n      .setProjectUuid(\"PRJ_UUID\")\n      .setFileUuid(\"FILE1_UUID\")\n      .setBinaryData(\"updated data\".getBytes())\n      .setDataHash(\"NEW_DATA_HASH\")\n      .setSrcHash(\"NEW_FILE_HASH\")\n      .setLineHashes(\"NEW_LINE_HASHES\")\n      .setDataType(Type.SOURCE)\n      .setUpdatedAt(1500000000002L));\n\n    dbTester.assertDbUnitTable(getClass(), \"update-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\");\n  }","id":59122,"modified_method":"@Test\n  public void update() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    underTest.update(new FileSourceDto()\n      .setId(101L)\n      .setProjectUuid(\"PRJ_UUID\")\n      .setFileUuid(\"FILE1_UUID\")\n      .setBinaryData(\"updated data\".getBytes())\n      .setDataHash(\"NEW_DATA_HASH\")\n      .setSrcHash(\"NEW_FILE_HASH\")\n      .setLineHashes(\"NEW_LINE_HASHES\")\n      .setDataType(Type.SOURCE)\n      .setUpdatedAt(1500000000002L)\n      .setRevision(\"987654321\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"update-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\", \"revision\");\n  }","commit_id":"5c288031321de250b5d2e90c4281bd25cd80f9e4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void select() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    FileSourceDto fileSourceDto = underTest.selectSource(\"FILE1_UUID\");\n\n    assertThat(fileSourceDto.getBinaryData()).isNotEmpty();\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"hash\");\n    assertThat(fileSourceDto.getProjectUuid()).isEqualTo(\"PRJ_UUID\");\n    assertThat(fileSourceDto.getFileUuid()).isEqualTo(\"FILE1_UUID\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(1500000000000L);\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(1500000000000L);\n    assertThat(fileSourceDto.getDataType()).isEqualTo(Type.SOURCE);\n  }","id":59123,"modified_method":"@Test\n  public void select() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    FileSourceDto fileSourceDto = underTest.selectSource(\"FILE1_UUID\");\n\n    assertThat(fileSourceDto.getBinaryData()).isNotEmpty();\n    assertThat(fileSourceDto.getDataHash()).isEqualTo(\"hash\");\n    assertThat(fileSourceDto.getProjectUuid()).isEqualTo(\"PRJ_UUID\");\n    assertThat(fileSourceDto.getFileUuid()).isEqualTo(\"FILE1_UUID\");\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(1500000000000L);\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(1500000000000L);\n    assertThat(fileSourceDto.getDataType()).isEqualTo(Type.SOURCE);\n    assertThat(fileSourceDto.getRevision()).isEqualTo(\"123456789\");\n  }","commit_id":"5c288031321de250b5d2e90c4281bd25cd80f9e4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void insert() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    underTest.insert(new FileSourceDto()\n      .setProjectUuid(\"PRJ_UUID\")\n      .setFileUuid(\"FILE2_UUID\")\n      .setBinaryData(\"FILE2_BINARY_DATA\".getBytes())\n      .setDataHash(\"FILE2_DATA_HASH\")\n      .setLineHashes(\"LINE1_HASH\\\\nLINE2_HASH\")\n      .setSrcHash(\"FILE2_HASH\")\n      .setDataType(Type.SOURCE)\n      .setCreatedAt(1500000000000L)\n      .setUpdatedAt(1500000000001L));\n\n    dbTester.assertDbUnitTable(getClass(), \"insert-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\");\n  }","id":59124,"modified_method":"@Test\n  public void insert() {\n    dbTester.prepareDbUnit(getClass(), \"shared.xml\");\n\n    underTest.insert(new FileSourceDto()\n      .setProjectUuid(\"PRJ_UUID\")\n      .setFileUuid(\"FILE2_UUID\")\n      .setBinaryData(\"FILE2_BINARY_DATA\".getBytes())\n      .setDataHash(\"FILE2_DATA_HASH\")\n      .setLineHashes(\"LINE1_HASH\\\\nLINE2_HASH\")\n      .setSrcHash(\"FILE2_HASH\")\n      .setDataType(Type.SOURCE)\n      .setCreatedAt(1500000000000L)\n      .setUpdatedAt(1500000000001L)\n      .setRevision(\"123456789\"));\n\n    dbTester.assertDbUnitTable(getClass(), \"insert-result.xml\", \"file_sources\",\n      \"project_uuid\", \"file_uuid\", \"data_hash\", \"line_hashes\", \"src_hash\", \"created_at\", \"updated_at\", \"data_type\", \"revision\");\n  }","commit_id":"5c288031321de250b5d2e90c4281bd25cd80f9e4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n    public void visitFile(Component file) {\n      int fileRef = file.getReportAttributes().getRef();\n      BatchReport.Component component = reportReader.readComponent(fileRef);\n      CloseableIterator<String> linesIterator = sourceLinesRepository.readLines(file);\n      LineReaders lineReaders = new LineReaders(reportReader, fileRef);\n      try {\n        ComputeFileSourceData computeFileSourceData = new ComputeFileSourceData(linesIterator, lineReaders.readers(), component.getLines());\n        ComputeFileSourceData.Data fileSourceData = computeFileSourceData.compute();\n        persistSource(fileSourceData, file.getUuid());\n      } catch (Exception e) {\n        throw new IllegalStateException(String.format(\"Cannot persist sources of %s\", file.getKey()), e);\n      } finally {\n        linesIterator.close();\n        lineReaders.close();\n      }\n    }","id":59125,"modified_method":"@Override\n    public void visitFile(Component file) {\n      int fileRef = file.getReportAttributes().getRef();\n      BatchReport.Component component = reportReader.readComponent(fileRef);\n      CloseableIterator<String> linesIterator = sourceLinesRepository.readLines(file);\n      LineReaders lineReaders = new LineReaders(reportReader, fileRef);\n      try {\n        ComputeFileSourceData computeFileSourceData = new ComputeFileSourceData(linesIterator, lineReaders.readers(), component.getLines());\n        ComputeFileSourceData.Data fileSourceData = computeFileSourceData.compute();\n        persistSource(fileSourceData, file.getUuid(), lineReaders.getLatestChange());\n      } catch (Exception e) {\n        throw new IllegalStateException(String.format(\"Cannot persist sources of %s\", file.getKey()), e);\n      } finally {\n        linesIterator.close();\n        lineReaders.close();\n      }\n    }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void persistSource(ComputeFileSourceData.Data fileSourceData, String componentUuid) {\n      DbFileSources.Data fileData = fileSourceData.getFileSourceData();\n\n      byte[] data = FileSourceDto.encodeSourceData(fileData);\n      String dataHash = DigestUtils.md5Hex(data);\n      String srcHash = fileSourceData.getSrcHash();\n      String lineHashes = fileSourceData.getLineHashes();\n      FileSourceDto previousDto = previousFileSourcesByUuid.get(componentUuid);\n\n      if (previousDto == null) {\n        FileSourceDto dto = new FileSourceDto()\n          .setProjectUuid(projectUuid)\n          .setFileUuid(componentUuid)\n          .setDataType(Type.SOURCE)\n          .setBinaryData(data)\n          .setSrcHash(srcHash)\n          .setDataHash(dataHash)\n          .setLineHashes(lineHashes)\n          .setCreatedAt(system2.now())\n          .setUpdatedAt(system2.now());\n        dbClient.fileSourceDao().insert(session, dto);\n        session.commit();\n      } else {\n        // Update only if data_hash has changed or if src_hash is missing (progressive migration)\n        boolean binaryDataUpdated = !dataHash.equals(previousDto.getDataHash());\n        boolean srcHashUpdated = !srcHash.equals(previousDto.getSrcHash());\n        if (binaryDataUpdated || srcHashUpdated) {\n          previousDto\n            .setBinaryData(data)\n            .setDataHash(dataHash)\n            .setSrcHash(srcHash)\n            .setLineHashes(lineHashes)\n            .setUpdatedAt(system2.now());\n          dbClient.fileSourceDao().update(previousDto);\n          session.commit();\n        }\n      }\n    }","id":59126,"modified_method":"private void persistSource(ComputeFileSourceData.Data fileSourceData, String componentUuid,\n      @Nullable BatchReport.Changesets.Changeset latestChange) {\n      DbFileSources.Data fileData = fileSourceData.getFileSourceData();\n\n      byte[] data = FileSourceDto.encodeSourceData(fileData);\n      String dataHash = DigestUtils.md5Hex(data);\n      String srcHash = fileSourceData.getSrcHash();\n      String lineHashes = fileSourceData.getLineHashes();\n      FileSourceDto previousDto = previousFileSourcesByUuid.get(componentUuid);\n\n      if (previousDto == null) {\n        FileSourceDto dto = new FileSourceDto()\n          .setProjectUuid(projectUuid)\n          .setFileUuid(componentUuid)\n          .setDataType(Type.SOURCE)\n          .setBinaryData(data)\n          .setSrcHash(srcHash)\n          .setDataHash(dataHash)\n          .setLineHashes(lineHashes)\n          .setCreatedAt(system2.now())\n          .setUpdatedAt(system2.now())\n          .setRevision(computeRevision(latestChange));\n        dbClient.fileSourceDao().insert(session, dto);\n        session.commit();\n      } else {\n        // Update only if data_hash has changed or if src_hash is missing (progressive migration)\n        boolean binaryDataUpdated = !dataHash.equals(previousDto.getDataHash());\n        boolean srcHashUpdated = !srcHash.equals(previousDto.getSrcHash());\n        if (binaryDataUpdated || srcHashUpdated) {\n          previousDto\n            .setBinaryData(data)\n            .setDataHash(dataHash)\n            .setSrcHash(srcHash)\n            .setLineHashes(lineHashes)\n            .setRevision(computeRevision(previousDto, latestChange))\n            .setUpdatedAt(system2.now());\n          dbClient.fileSourceDao().update(previousDto);\n          session.commit();\n        }\n      }\n    }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"LineReaders(BatchReportReader reportReader, int componentRef) {\n      CloseableIterator<BatchReport.Coverage> coverageIt = reportReader.readComponentCoverage(componentRef);\n      closeables.add(coverageIt);\n      readers.add(new CoverageLineReader(coverageIt));\n\n      BatchReport.Changesets scmReport = reportReader.readChangesets(componentRef);\n      if (scmReport != null) {\n        readers.add(new ScmLineReader(scmReport));\n      }\n\n      CloseableIterator<BatchReport.SyntaxHighlighting> highlightingIt = reportReader.readComponentSyntaxHighlighting(componentRef);\n      closeables.add(highlightingIt);\n      readers.add(new HighlightingLineReader(highlightingIt));\n\n      CloseableIterator<BatchReport.Symbol> symbolsIt = reportReader.readComponentSymbols(componentRef);\n      closeables.add(symbolsIt);\n      readers.add(new SymbolsLineReader(symbolsIt));\n\n      CloseableIterator<BatchReport.Duplication> duplicationsIt = reportReader.readComponentDuplications(componentRef);\n      closeables.add(duplicationsIt);\n      readers.add(new DuplicationLineReader(duplicationsIt));\n    }","id":59127,"modified_method":"LineReaders(BatchReportReader reportReader, int componentRef) {\n      CloseableIterator<BatchReport.Coverage> coverageIt = reportReader.readComponentCoverage(componentRef);\n      closeables.add(coverageIt);\n      readers.add(new CoverageLineReader(coverageIt));\n\n      BatchReport.Changesets scmReport = reportReader.readChangesets(componentRef);\n      if (scmReport != null) {\n        this.scmLineReader = new ScmLineReader(scmReport);\n        readers.add(scmLineReader);\n      } else {\n        this.scmLineReader = null;\n      }\n\n      CloseableIterator<BatchReport.SyntaxHighlighting> highlightingIt = reportReader.readComponentSyntaxHighlighting(componentRef);\n      closeables.add(highlightingIt);\n      readers.add(new HighlightingLineReader(highlightingIt));\n\n      CloseableIterator<BatchReport.Symbol> symbolsIt = reportReader.readComponentSymbols(componentRef);\n      closeables.add(symbolsIt);\n      readers.add(new SymbolsLineReader(symbolsIt));\n\n      CloseableIterator<BatchReport.Duplication> duplicationsIt = reportReader.readComponentDuplications(componentRef);\n      closeables.add(duplicationsIt);\n      readers.add(new DuplicationLineReader(duplicationsIt));\n    }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void persist_scm() {\n    initBasicReport(1);\n\n    reportReader.putChangesets(BatchReport.Changesets.newBuilder()\n      .setComponentRef(FILE_REF)\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setAuthor(\"john\")\n        .setDate(123456789L)\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build());\n\n    underTest.execute();\n\n    assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(1);\n    FileSourceDto fileSourceDto = dbClient.fileSourceDao().selectSourceByFileUuid(session, FILE_UUID);\n    DbFileSources.Data data = FileSourceDto.decodeSourceData(fileSourceDto.getBinaryData());\n\n    assertThat(data.getLinesList()).hasSize(1);\n\n    assertThat(data.getLines(0).getScmAuthor()).isEqualTo(\"john\");\n    assertThat(data.getLines(0).getScmDate()).isEqualTo(123456789L);\n    assertThat(data.getLines(0).getScmRevision()).isEqualTo(\"rev-1\");\n  }","id":59128,"modified_method":"@Test\n  public void persist_scm() {\n    initBasicReport(1);\n\n    reportReader.putChangesets(BatchReport.Changesets.newBuilder()\n      .setComponentRef(FILE_REF)\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setAuthor(\"john\")\n        .setDate(123456789L)\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build());\n\n    underTest.execute();\n\n    assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(1);\n    FileSourceDto fileSourceDto = dbClient.fileSourceDao().selectSourceByFileUuid(session, FILE_UUID);\n\n    assertThat(fileSourceDto.getRevision()).isEqualTo(\"rev-1\");\n\n    DbFileSources.Data data = FileSourceDto.decodeSourceData(fileSourceDto.getBinaryData());\n\n    assertThat(data.getLinesList()).hasSize(1);\n\n    assertThat(data.getLines(0).getScmAuthor()).isEqualTo(\"john\");\n    assertThat(data.getLines(0).getScmDate()).isEqualTo(123456789L);\n    assertThat(data.getLines(0).getScmRevision()).isEqualTo(\"rev-1\");\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_sources_when_source_updated() {\n    // Existing sources\n    long past = 150000L;\n    dbClient.fileSourceDao().insert(dbTester.getSession(), new FileSourceDto()\n      .setProjectUuid(PROJECT_UUID)\n      .setFileUuid(FILE_UUID)\n      .setDataType(Type.SOURCE)\n      .setSrcHash(\"5b4bd9815cdb17b8ceae19eb1810c34c\")\n      .setLineHashes(\"6438c669e0d0de98e6929c2cc0fac474\\n\")\n      .setDataHash(\"6cad150e3d065976c230cddc5a09efaa\")\n      .setSourceData(DbFileSources.Data.newBuilder()\n        .addLines(DbFileSources.Line.newBuilder()\n          .setLine(1)\n          .setSource(\"old line\")\n          .build())\n        .build())\n      .setCreatedAt(past)\n      .setUpdatedAt(past));\n    dbTester.getSession().commit();\n\n    initBasicReport(1);\n\n    underTest.execute();\n\n    assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(1);\n    FileSourceDto fileSourceDto = dbClient.fileSourceDao().selectSourceByFileUuid(session, FILE_UUID);\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(past);\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now);\n  }","id":59129,"modified_method":"@Test\n  public void update_sources_when_source_updated() {\n    // Existing sources\n    long past = 150000L;\n    dbClient.fileSourceDao().insert(dbTester.getSession(), new FileSourceDto()\n      .setProjectUuid(PROJECT_UUID)\n      .setFileUuid(FILE_UUID)\n      .setDataType(Type.SOURCE)\n      .setSrcHash(\"5b4bd9815cdb17b8ceae19eb1810c34c\")\n      .setLineHashes(\"6438c669e0d0de98e6929c2cc0fac474\\n\")\n      .setDataHash(\"6cad150e3d065976c230cddc5a09efaa\")\n      .setSourceData(DbFileSources.Data.newBuilder()\n        .addLines(DbFileSources.Line.newBuilder()\n          .setLine(1)\n          .setSource(\"old line\")\n          .build())\n        .build())\n      .setCreatedAt(past)\n      .setUpdatedAt(past)\n      .setRevision(\"rev-0\"));\n    dbTester.getSession().commit();\n\n    initBasicReport(1);\n\n    reportReader.putChangesets(BatchReport.Changesets.newBuilder()\n        .setComponentRef(FILE_REF)\n        .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n            .setAuthor(\"john\")\n            .setDate(123456789L)\n            .setRevision(\"rev-1\")\n            .build())\n        .addChangesetIndexByLine(0)\n        .build());\n\n    underTest.execute();\n\n    assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(1);\n    FileSourceDto fileSourceDto = dbClient.fileSourceDao().selectSourceByFileUuid(session, FILE_UUID);\n    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(past);\n    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(now);\n    assertThat(fileSourceDto.getRevision()).isEqualTo(\"rev-1\");\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    int changeSetIndex = scmReport.getChangesetIndexByLine(lineBuilder.getLine() - 1);\n    BatchReport.Changesets.Changeset changeset = scmReport.getChangeset(changeSetIndex);\n    boolean hasAuthor = changeset.hasAuthor();\n    if (hasAuthor) {\n      lineBuilder.setScmAuthor(changeset.getAuthor());\n    }\n    boolean hasRevision = changeset.hasRevision();\n    if (hasRevision) {\n      lineBuilder.setScmRevision(changeset.getRevision());\n    }\n    boolean hasDate = changeset.hasDate();\n    if (hasDate) {\n      lineBuilder.setScmDate(changeset.getDate());\n    }\n\n    if (!hasAuthor && !hasRevision && !hasDate) {\n      throw new IllegalArgumentException(\"A changeset must contains at least one of : author, revision or date\");\n    }\n  }","id":59130,"modified_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    int changeSetIndex = scmReport.getChangesetIndexByLine(lineBuilder.getLine() - 1);\n    BatchReport.Changesets.Changeset changeset = scmReport.getChangeset(changeSetIndex);\n    boolean hasAuthor = changeset.hasAuthor();\n    if (hasAuthor) {\n      lineBuilder.setScmAuthor(changeset.getAuthor());\n    }\n    boolean hasRevision = changeset.hasRevision();\n    if (hasRevision) {\n      lineBuilder.setScmRevision(changeset.getRevision());\n    }\n    boolean hasDate = changeset.hasDate();\n    if (hasDate) {\n      lineBuilder.setScmDate(changeset.getDate());\n    }\n\n    checkArgument(\n      hasAuthor || hasRevision || hasDate,\n      \"A changeset must contain at least one of : author, revision or date\");\n    updateLatestChange(changeset);\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_scm() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setAuthor(\"john\")\n        .setDate(123456789L)\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.getScmAuthor()).isEqualTo(\"john\");\n    assertThat(lineBuilder.getScmDate()).isEqualTo(123456789L);\n    assertThat(lineBuilder.getScmRevision()).isEqualTo(\"rev-1\");\n  }","id":59131,"modified_method":"@Test\n  public void set_scm() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(newChangeSetBuilder()\n        .setAuthor(\"john\")\n        .setDate(123456789L)\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.getScmAuthor()).isEqualTo(\"john\");\n    assertThat(lineBuilder.getScmDate()).isEqualTo(123456789L);\n    assertThat(lineBuilder.getScmRevision()).isEqualTo(\"rev-1\");\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_changeset_is_empty() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    try {\n      lineScm.read(lineBuilder);\n      failBecauseExceptionWasNotThrown(IllegalArgumentException.class);\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A changeset must contains at least one of : author, revision or date\");\n    }\n  }","id":59132,"modified_method":"@Test\n  public void fail_when_changeset_is_empty() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(newChangeSetBuilder()\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    try {\n      lineScm.read(lineBuilder);\n      failBecauseExceptionWasNotThrown(IllegalArgumentException.class);\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"A changeset must contain at least one of : author, revision or date\");\n    }\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_only_date() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setDate(123456789L)\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.hasScmAuthor()).isFalse();\n    assertThat(lineBuilder.getScmDate()).isEqualTo(123456789L);\n    assertThat(lineBuilder.hasScmRevision()).isFalse();\n  }","id":59133,"modified_method":"@Test\n  public void set_only_date() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(newChangeSetBuilder()\n        .setDate(123456789L)\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.hasScmAuthor()).isFalse();\n    assertThat(lineBuilder.getScmDate()).isEqualTo(123456789L);\n    assertThat(lineBuilder.hasScmRevision()).isFalse();\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_only_author() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setAuthor(\"john\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.getScmAuthor()).isEqualTo(\"john\");\n    assertThat(lineBuilder.hasScmDate()).isFalse();\n    assertThat(lineBuilder.hasScmRevision()).isFalse();\n  }","id":59134,"modified_method":"@Test\n  public void set_only_author() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(newChangeSetBuilder()\n        .setAuthor(\"john\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.getScmAuthor()).isEqualTo(\"john\");\n    assertThat(lineBuilder.hasScmDate()).isFalse();\n    assertThat(lineBuilder.hasScmRevision()).isFalse();\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void set_only_revision() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(BatchReport.Changesets.Changeset.newBuilder()\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.hasScmAuthor()).isFalse();\n    assertThat(lineBuilder.hasScmDate()).isFalse();\n    assertThat(lineBuilder.getScmRevision()).isEqualTo(\"rev-1\");\n  }","id":59135,"modified_method":"@Test\n  public void set_only_revision() {\n    BatchReport.Changesets scmReport = BatchReport.Changesets.newBuilder()\n      .addChangeset(newChangeSetBuilder()\n        .setRevision(\"rev-1\")\n        .build())\n      .addChangesetIndexByLine(0)\n      .build();\n\n    ScmLineReader lineScm = new ScmLineReader(scmReport);\n\n    DbFileSources.Line.Builder lineBuilder = DbFileSources.Data.newBuilder().addLinesBuilder().setLine(1);\n    lineScm.read(lineBuilder);\n\n    assertThat(lineBuilder.hasScmAuthor()).isFalse();\n    assertThat(lineBuilder.hasScmDate()).isFalse();\n    assertThat(lineBuilder.getScmRevision()).isEqualTo(\"rev-1\");\n  }","commit_id":"4b7f9388c6bf2474e3c4137331f8d71056d68682","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n\tpublic LayoutRevision addLayoutRevision(\n\t\t\tlong userId, long layoutSetBranchId, long layoutBranchId,\n\t\t\tlong parentLayoutRevisionId, boolean head, long plid,\n\t\t\tlong portletPreferencesPlid, boolean privateLayout, String name,\n\t\t\tString title, String description, String keywords, String robots,\n\t\t\tString typeSettings, boolean iconImage, long iconImageId,\n\t\t\tString themeId, String colorSchemeId, String wapThemeId,\n\t\t\tString wapColorSchemeId, String css, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Layout revision\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tlayoutSetBranchPersistence.findByPrimaryKey(layoutSetBranchId);\n\t\tparentLayoutRevisionId = getParentLayoutRevisionId(\n\t\t\tlayoutSetBranchId, parentLayoutRevisionId, plid);\n\t\tDate now = new Date();\n\n\t\tlong layoutRevisionId = counterLocalService.increment();\n\n\t\tLayoutRevision layoutRevision = layoutRevisionPersistence.create(\n\t\t\tlayoutRevisionId);\n\n\t\tlayoutRevision.setGroupId(layoutSetBranch.getGroupId());\n\t\tlayoutRevision.setCompanyId(user.getCompanyId());\n\t\tlayoutRevision.setUserId(user.getUserId());\n\t\tlayoutRevision.setUserName(user.getFullName());\n\t\tlayoutRevision.setCreateDate(serviceContext.getCreateDate(now));\n\t\tlayoutRevision.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tlayoutRevision.setLayoutSetBranchId(layoutSetBranchId);\n\t\tlayoutRevision.setLayoutBranchId(layoutBranchId);\n\t\tlayoutRevision.setParentLayoutRevisionId(parentLayoutRevisionId);\n\t\tlayoutRevision.setHead(head);\n\t\tlayoutRevision.setPlid(plid);\n\t\tlayoutRevision.setPrivateLayout(privateLayout);\n\t\tlayoutRevision.setName(name);\n\t\tlayoutRevision.setTitle(title);\n\t\tlayoutRevision.setDescription(description);\n\t\tlayoutRevision.setKeywords(keywords);\n\t\tlayoutRevision.setRobots(robots);\n\t\tlayoutRevision.setTypeSettings(typeSettings);\n\n\t\tif (iconImage) {\n\t\t\tlayoutRevision.setIconImage(iconImage);\n\t\t\tlayoutRevision.setIconImageId(iconImageId);\n\t\t}\n\n\t\tlayoutRevision.setThemeId(themeId);\n\t\tlayoutRevision.setColorSchemeId(colorSchemeId);\n\t\tlayoutRevision.setWapThemeId(wapThemeId);\n\t\tlayoutRevision.setWapColorSchemeId(wapColorSchemeId);\n\t\tlayoutRevision.setCss(css);\n\t\tlayoutRevision.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\tlayoutRevision.setStatusDate(serviceContext.getModifiedDate(now));\n\n\t\tlayoutRevisionPersistence.update(layoutRevision);\n\n\t\t_layoutRevisionId.set(layoutRevision.getLayoutRevisionId());\n\n\t\t// Portlet preferences\n\n\t\tif (portletPreferencesPlid == LayoutConstants.DEFAULT_PLID) {\n\t\t\tportletPreferencesPlid = plid;\n\t\t}\n\n\t\tcopyPortletPreferences(\n\t\t\tlayoutRevision, portletPreferencesPlid, serviceContext);\n\n\t\t// Workflow\n\n\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\tuser.getCompanyId(), layoutRevision.getGroupId(), user.getUserId(),\n\t\t\tLayoutRevision.class.getName(),\n\t\t\tlayoutRevision.getLayoutRevisionId(), layoutRevision,\n\t\t\tserviceContext);\n\n\t\tboolean explicitCreation = ParamUtil.getBoolean(\n\t\t\tserviceContext, \"explicitCreation\");\n\n\t\tif (!explicitCreation) {\n\t\t\tlayoutRevisionLocalService.updateStatus(\n\t\t\t\tserviceContext.getUserId(),\n\t\t\t\tlayoutRevision.getLayoutRevisionId(),\n\t\t\t\tWorkflowConstants.STATUS_INCOMPLETE, serviceContext);\n\t\t}\n\n\t\tStagingUtil.setRecentLayoutRevisionId(\n\t\t\tuser, layoutSetBranchId, plid,\n\t\t\tlayoutRevision.getLayoutRevisionId());\n\n\t\treturn layoutRevision;\n\t}","id":59136,"modified_method":"@Override\n\tpublic LayoutRevision addLayoutRevision(\n\t\t\tlong userId, long layoutSetBranchId, long layoutBranchId,\n\t\t\tlong parentLayoutRevisionId, boolean head, long plid,\n\t\t\tlong portletPreferencesPlid, boolean privateLayout, String name,\n\t\t\tString title, String description, String keywords, String robots,\n\t\t\tString typeSettings, boolean iconImage, long iconImageId,\n\t\t\tString themeId, String colorSchemeId, String wapThemeId,\n\t\t\tString wapColorSchemeId, String css, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Layout revision\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tlayoutSetBranchPersistence.findByPrimaryKey(layoutSetBranchId);\n\t\tparentLayoutRevisionId = getParentLayoutRevisionId(\n\t\t\tlayoutSetBranchId, parentLayoutRevisionId, plid);\n\t\tDate now = new Date();\n\n\t\tlong layoutRevisionId = counterLocalService.increment();\n\n\t\tLayoutRevision layoutRevision = layoutRevisionPersistence.create(\n\t\t\tlayoutRevisionId);\n\n\t\tlayoutRevision.setGroupId(layoutSetBranch.getGroupId());\n\t\tlayoutRevision.setCompanyId(user.getCompanyId());\n\t\tlayoutRevision.setUserId(user.getUserId());\n\t\tlayoutRevision.setUserName(user.getFullName());\n\t\tlayoutRevision.setCreateDate(serviceContext.getCreateDate(now));\n\t\tlayoutRevision.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tlayoutRevision.setLayoutSetBranchId(layoutSetBranchId);\n\t\tlayoutRevision.setLayoutBranchId(layoutBranchId);\n\t\tlayoutRevision.setParentLayoutRevisionId(parentLayoutRevisionId);\n\t\tlayoutRevision.setHead(head);\n\t\tlayoutRevision.setPlid(plid);\n\t\tlayoutRevision.setPrivateLayout(privateLayout);\n\t\tlayoutRevision.setName(name);\n\t\tlayoutRevision.setTitle(title);\n\t\tlayoutRevision.setDescription(description);\n\t\tlayoutRevision.setKeywords(keywords);\n\t\tlayoutRevision.setRobots(robots);\n\t\tlayoutRevision.setTypeSettings(typeSettings);\n\n\t\tif (iconImage) {\n\t\t\tlayoutRevision.setIconImage(iconImage);\n\t\t\tlayoutRevision.setIconImageId(iconImageId);\n\t\t}\n\n\t\tlayoutRevision.setThemeId(themeId);\n\t\tlayoutRevision.setColorSchemeId(colorSchemeId);\n\t\tlayoutRevision.setWapThemeId(wapThemeId);\n\t\tlayoutRevision.setWapColorSchemeId(wapColorSchemeId);\n\t\tlayoutRevision.setCss(css);\n\t\tlayoutRevision.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\tlayoutRevision.setStatusDate(serviceContext.getModifiedDate(now));\n\n\t\tlayoutRevisionPersistence.update(layoutRevision);\n\n\t\t_layoutRevisionId.set(layoutRevision.getLayoutRevisionId());\n\n\t\t// Portlet preferences\n\n\t\tif (portletPreferencesPlid == LayoutConstants.DEFAULT_PLID) {\n\t\t\tportletPreferencesPlid = plid;\n\t\t}\n\n\t\tcopyPortletPreferences(\n\t\t\tlayoutRevision, portletPreferencesPlid, serviceContext);\n\n\t\t// Workflow\n\n\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\tuser.getCompanyId(), layoutRevision.getGroupId(), user.getUserId(),\n\t\t\tLayoutRevision.class.getName(),\n\t\t\tlayoutRevision.getLayoutRevisionId(), layoutRevision,\n\t\t\tserviceContext);\n\n\t\tStagingUtil.setRecentLayoutRevisionId(\n\t\t\tuser, layoutSetBranchId, plid,\n\t\t\tlayoutRevision.getLayoutRevisionId());\n\n\t\treturn layoutRevision;\n\t}","commit_id":"54796b8ad8abd9d3b6411602e0189593a5ca1a7b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (!serviceContext.isSignedIn()) {\n\t\t\tLayoutRevision lastLayoutRevision = null;\n\n\t\t\tlastLayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLastLayoutRevision(\n\t\t\t\t\tlayout.getPlid(), true);\n\n\t\t\tif (lastLayoutRevision == null) {\n\t\t\t\tlastLayoutRevision =\n\t\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLastLayoutRevision(\n\t\t\t\t\t\tlayout.getPlid(), false);\n\t\t\t}\n\n\t\t\treturn lastLayoutRevision;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(serviceContext.getUserId());\n\n\t\tlong layoutSetBranchId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutSetBranchId\");\n\n\t\tLayoutSet layoutSet = layout.getLayoutSet();\n\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tLayoutSetBranchLocalServiceUtil.getUserLayoutSetBranch(\n\t\t\t\tserviceContext.getUserId(), layout.getGroupId(),\n\t\t\t\tlayout.isPrivateLayout(), layoutSet.getLayoutSetId(),\n\t\t\t\tlayoutSetBranchId);\n\n\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\n\t\tlong layoutRevisionId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutRevisionId\");\n\n\t\tif (layoutRevisionId <= 0) {\n\t\t\tlayoutRevisionId = StagingUtil.getRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid());\n\t\t}\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\tlayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLayoutRevision(\n\t\t\t\t\tlayoutRevisionId);\n\n\t\t\tif (layoutRevision.getStatus() !=\n\t\t\t\t\tWorkflowConstants.STATUS_INACTIVE) {\n\n\t\t\t\treturn layoutRevision;\n\t\t\t}\n\n\t\t\tlayoutRevision = null;\n\t\t}\n\n\t\tList<LayoutRevision> layoutRevisions =\n\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevisions(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS,\n\t\t\t\tnew LayoutRevisionCreateDateComparator(true));\n\n\t\tif (!layoutRevisions.isEmpty()) {\n\t\t\tlayoutRevision = layoutRevisions.get(0);\n\n\t\t\tfor (LayoutRevision curLayoutRevision : layoutRevisions) {\n\t\t\t\tif (curLayoutRevision.isHead()) {\n\t\t\t\t\tlayoutRevision = curLayoutRevision;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (layoutRevision != null) {\n\t\t\tStagingUtil.setRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid(),\n\t\t\t\tlayoutRevision.getLayoutRevisionId());\n\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tLayoutBranch layoutBranch =\n\t\t\tLayoutBranchLocalServiceUtil.getMasterLayoutBranch(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), serviceContext);\n\n\t\tif (!MergeLayoutPrototypesThreadLocal.isInProgress()) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\treturn LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\tlayoutBranch.getLayoutBranchId(),\n\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID, false,\n\t\t\tlayout.getPlid(), LayoutConstants.DEFAULT_PLID,\n\t\t\tlayout.isPrivateLayout(), layout.getName(), layout.getTitle(),\n\t\t\tlayout.getDescription(), layout.getKeywords(), layout.getRobots(),\n\t\t\tlayout.getTypeSettings(), layout.getIconImage(),\n\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\t}","id":59137,"modified_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (!serviceContext.isSignedIn()) {\n\t\t\tLayoutRevision lastLayoutRevision = null;\n\n\t\t\tlastLayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLastLayoutRevision(\n\t\t\t\t\tlayout.getPlid(), true);\n\n\t\t\tif (lastLayoutRevision == null) {\n\t\t\t\tlastLayoutRevision =\n\t\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLastLayoutRevision(\n\t\t\t\t\t\tlayout.getPlid(), false);\n\t\t\t}\n\n\t\t\treturn lastLayoutRevision;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(serviceContext.getUserId());\n\n\t\tlong layoutSetBranchId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutSetBranchId\");\n\n\t\tLayoutSet layoutSet = layout.getLayoutSet();\n\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tLayoutSetBranchLocalServiceUtil.getUserLayoutSetBranch(\n\t\t\t\tserviceContext.getUserId(), layout.getGroupId(),\n\t\t\t\tlayout.isPrivateLayout(), layoutSet.getLayoutSetId(),\n\t\t\t\tlayoutSetBranchId);\n\n\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\n\t\tlong layoutRevisionId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutRevisionId\");\n\n\t\tif (layoutRevisionId <= 0) {\n\t\t\tlayoutRevisionId = StagingUtil.getRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid());\n\t\t}\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\tlayoutRevision =\n\t\t\t\tLayoutRevisionLocalServiceUtil.fetchLayoutRevision(\n\t\t\t\t\tlayoutRevisionId);\n\n\t\t\tif (layoutRevision.getStatus() !=\n\t\t\t\t\tWorkflowConstants.STATUS_INACTIVE) {\n\n\t\t\t\treturn layoutRevision;\n\t\t\t}\n\n\t\t\tlayoutRevision = null;\n\t\t}\n\n\t\tList<LayoutRevision> layoutRevisions =\n\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevisions(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS,\n\t\t\t\tnew LayoutRevisionCreateDateComparator(true));\n\n\t\tif (!layoutRevisions.isEmpty()) {\n\t\t\tlayoutRevision = layoutRevisions.get(0);\n\n\t\t\tfor (LayoutRevision curLayoutRevision : layoutRevisions) {\n\t\t\t\tif (curLayoutRevision.isHead()) {\n\t\t\t\t\tlayoutRevision = curLayoutRevision;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (layoutRevision != null) {\n\t\t\tStagingUtil.setRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid(),\n\t\t\t\tlayoutRevision.getLayoutRevisionId());\n\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tLayoutBranch layoutBranch =\n\t\t\tLayoutBranchLocalServiceUtil.getMasterLayoutBranch(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), serviceContext);\n\n\t\tif (!MergeLayoutPrototypesThreadLocal.isInProgress()) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\tlayoutRevision = LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\tlayoutBranch.getLayoutBranchId(),\n\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID, false,\n\t\t\tlayout.getPlid(), LayoutConstants.DEFAULT_PLID,\n\t\t\tlayout.isPrivateLayout(), layout.getName(), layout.getTitle(),\n\t\t\tlayout.getDescription(), layout.getKeywords(), layout.getRobots(),\n\t\t\tlayout.getTypeSettings(), layout.getIconImage(),\n\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\n\t\tboolean explicitCreation = ParamUtil.getBoolean(\n\t\t\tserviceContext, \"explicitCreation\");\n\n\t\tif (!explicitCreation) {\n\t\t\tLayoutRevisionLocalServiceUtil.updateStatus(\n\t\t\t\tserviceContext.getUserId(),\n\t\t\t\tlayoutRevision.getLayoutRevisionId(),\n\t\t\t\tWorkflowConstants.STATUS_INCOMPLETE, serviceContext);\n\t\t}\n\n\t\treturn layoutRevision;\n\t}","commit_id":"54796b8ad8abd9d3b6411602e0189593a5ca1a7b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\t\ttry {\n\t\t\tObject returnValue = methodInvocation.proceed();\n\n\t\t\treturnValue = wrapReturnValue(returnValue);\n\n\t\t\treturn returnValue;\n\t\t}\n\t\tcatch (Throwable throwable) {\n\t\t\tthrow throwable;\n\t\t}\n\t}","id":59138,"modified_method":"public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\t\ttry {\n\t\t\tString methodName = methodInvocation.getMethod().getName();\n\t\t\tObject args[] = methodInvocation.getArguments();\n\n\t\t\tObject returnValue = null;\n\n\t\t\tif (_layoutLocalServiceStagingAdviceMethodNames.contains(\n\t\t\t\t\tmethodName)) {\n\n\t\t\t\tClass<?>[] parameterTypes = ReflectionUtil.getParameterTypes(\n\t\t\t\t\targs);\n\n\t\t\t\tif (methodName.equals(\"updateLayout\") && (args.length == 15)) {\n\t\t\t\t\treturnValue = updateLayout(\n\t\t\t\t\t\t(Long)args[0], (Boolean)args[1], (Long)args[2],\n\t\t\t\t\t\t(Long)args[3], (Map)args[4], (Map)args[5], (Map)args[6],\n\t\t\t\t\t\t(Map)args[7], (Map)args[8], (String)args[9],\n\t\t\t\t\t\t(Boolean)args[10], (String)args[11], (Boolean)args[12],\n\t\t\t\t\t\t(byte[])args[13], (ServiceContext)args[14]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tClass<?> adviceClass = this.getClass();\n\n\t\t\t\t\t\tMethod method = adviceClass.getMethod(\n\t\t\t\t\t\t\tmethodName, ReflectionUtil.getParameterTypes(args));\n\n\t\t\t\t\t\treturnValue = method.invoke(this, args);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\t\t\tthrow new SystemException(nsme);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturnValue = methodInvocation.proceed();\n\t\t\t}\n\n\t\t\treturnValue = wrapReturnValue(returnValue);\n\n\t\t\treturn returnValue;\n\t\t}\n\t\tcatch (Throwable throwable) {\n\t\t\tthrow throwable;\n\t\t}\n\t}","commit_id":"d09f20e87d131651f9a51359f2cd0f3a2ffefead","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Object invoke(Object proxy, Method method, Object[] args)\n\t\tthrows Throwable {\n\n\t\ttry {\n\t\t\tif (_layoutRevision == null) {\n\t\t\t\treturn method.invoke(_layout, args);\n\t\t\t}\n\n\t\t\tString methodName = method.getName();\n\n\t\t\tif (methodName.equals(\"toEscapedModel\")) {\n\t\t\t\tif (_layout.isEscapedModel()) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\treturn _toEscapedModel();\n\t\t\t}\n\n\t\t\tif (methodName.equals(\"clone\")) {\n\t\t\t\treturn _clone();\n\t\t\t}\n\n\t\t\tObject bean = _layout;\n\n\t\t\tif (_layoutRevisionMethodNames.contains(methodName)) {\n\t\t\t\ttry {\n\t\t\t\t\tClass<?> layoutRevisionClass = _layoutRevision.getClass();\n\n\t\t\t\t\tmethod = layoutRevisionClass.getMethod(\n\t\t\t\t\t\tmethodName, ReflectionUtil.getParameterTypes(args));\n\n\t\t\t\t\tbean = _layoutRevision;\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn method.invoke(bean, args);\n\t\t}\n\t\tcatch (InvocationTargetException ite) {\n\t\t\tthrow ite.getTargetException();\n\t\t}\n\t}","id":59139,"modified_method":"public Object invoke(Object proxy, Method method, Object[] args)\n\t\tthrows Throwable {\n\n\t\ttry {\n\t\t\tif (_layoutRevision == null) {\n\t\t\t\treturn method.invoke(_layout, args);\n\t\t\t}\n\n\t\t\tString methodName = method.getName();\n\n\t\t\tif (methodName.equals(\"getLayoutType\")) {\n\t\t\t\treturn _getLayoutType();\n\t\t\t}\n\n\t\t\tif (methodName.equals(\"toEscapedModel\")) {\n\t\t\t\tif (_layout.isEscapedModel()) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\treturn _toEscapedModel();\n\t\t\t}\n\n\t\t\tif (methodName.equals(\"clone\")) {\n\t\t\t\treturn _clone();\n\t\t\t}\n\n\t\t\tObject bean = _layout;\n\n\t\t\tif (_layoutRevisionMethodNames.contains(methodName)) {\n\t\t\t\ttry {\n\t\t\t\t\tClass<?> layoutRevisionClass = _layoutRevision.getClass();\n\n\t\t\t\t\tmethod = layoutRevisionClass.getMethod(\n\t\t\t\t\t\tmethodName, ReflectionUtil.getParameterTypes(args));\n\n\t\t\t\t\tbean = _layoutRevision;\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\t\t_log.error(nsme);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn method.invoke(bean, args);\n\t\t}\n\t\tcatch (InvocationTargetException ite) {\n\t\t\tthrow ite.getTargetException();\n\t\t}\n\t}","commit_id":"d09f20e87d131651f9a51359f2cd0f3a2ffefead","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tlong layoutRevisionId = 0;\n\t\tlong layoutSetBranchId = 0;\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (serviceContext != null) {\n\t\t\tlayoutRevisionId = ParamUtil.getLong(\n\t\t\t\tserviceContext, \"layoutRevisionId\");\n\t\t\tlayoutSetBranchId = ParamUtil.getLong(\n\t\t\t\tserviceContext, \"layoutSetBranchId\");\n\t\t}\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutRevisionId);\n\t\t}\n\n\t\tLayoutSetBranch layoutSetBranch = null;\n\n\t\tif (layoutSetBranchId > 0) {\n\t\t\tlayoutSetBranch =\n\t\t\t\tLayoutSetBranchLocalServiceUtil.getLayoutSetBranch(\n\t\t\t\t\tlayoutSetBranchId);\n\n\t\t\ttry {\n\t\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutSetBranch.getLayoutSetBranchId(), layout.getPlid(),\n\t\t\t\t\ttrue);\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\n\t\t\t\t// This branch does not have this layout in it\n\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlayoutSetBranch =\n\t\t\t\tLayoutSetBranchLocalServiceUtil.getMasterLayoutSetBranch(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout());\n\t\t}\n\n\t\ttry {\n\t\t\tlayoutRevision = LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutSetBranch.getLayoutSetBranchId(), layout.getPlid(), true);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\tif (layoutSetBranchId <= 0) {\n\t\t\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\t\t\t}\n\n\t\t\tlayoutRevision = LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID, true,\n\t\t\t\tlayout.getPlid(), layout.getPrivateLayout(), layout.getName(),\n\t\t\t\tlayout.getTitle(), layout.getDescription(),\n\t\t\t\tlayout.getTypeSettings(), layout.getIconImage(),\n\t\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\t\t}\n\n\t\treturn layoutRevision;\n\t}","id":59140,"modified_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (!serviceContext.isSignedIn()) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tlong layoutRevisionId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutRevisionId\");\n\t\tlong layoutSetBranchId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutSetBranchId\");\n\n\t\tPortalPreferences portalPreferences =\n\t\t\tPortletPreferencesFactoryUtil.getPortalPreferences(\n\t\t\t\tlayout.getCompanyId(), serviceContext.getUserId(),\n\t\t\t\tserviceContext.isSignedIn());\n\n\t\tif (layoutSetBranchId <= 0) {\n\t\t\tlayoutSetBranchId = GetterUtil.getLong(\n\t\t\t\tportalPreferences.getValue(\n\t\t\t\t\tStaging.class.getName(), \"LAYOUT_SET_BRANCH_ID\"));\n\t\t}\n\n\t\tLayoutSetBranch layoutSetBranch = null;\n\n\t\tif (layoutSetBranchId > 0) {\n\t\t\tlayoutSetBranch =\n\t\t\t\tLayoutSetBranchLocalServiceUtil.getLayoutSetBranch(\n\t\t\t\t\tlayoutSetBranchId);\n\t\t}\n\t\telse {\n\t\t\tlayoutSetBranch =\n\t\t\t\tLayoutSetBranchLocalServiceUtil.getMasterLayoutSetBranch(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout());\n\n\t\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\t\t}\n\n\t\tif (layoutRevisionId <= 0) {\n\t\t\tlayoutRevisionId = GetterUtil.getLong(\n\t\t\t\tportalPreferences.getValue(\n\t\t\t\t\tStaging.class.getName(),\n\t\t\t\t\tLayoutRevisionConstants.encodeKey(\n\t\t\t\t\t\tlayoutSetBranchId, layout.getPlid())));\n\t\t}\n\n\t\ttry {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutRevisionId);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t}\n\n\t\ttry {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutSetBranch.getLayoutSetBranchId(),\n\t\t\t\tlayout.getPlid(), true);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\tList<LayoutRevision> revisions =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevisions(\n\t\t\t\t\tlayoutSetBranch.getLayoutSetBranchId(),\n\t\t\t\t\tlayout.getPlid(),\n\t\t\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID);\n\n\t\t\tif (!revisions.isEmpty()) {\n\t\t\t\treturn revisions.get(0);\n\t\t\t}\n\t\t}\n\n\t\treturn LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID,\n\t\t\ttrue, layout.getPlid(), layout.getPrivateLayout(), layout.getName(),\n\t\t\tlayout.getTitle(), layout.getDescription(),\n\t\t\tlayout.getTypeSettings(), layout.getIconImage(),\n\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\t}","commit_id":"d09f20e87d131651f9a51359f2cd0f3a2ffefead","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (!serviceContext.isSignedIn()) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tlong layoutSetBranchId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutSetBranchId\");\n\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tLayoutSetBranchLocalServiceUtil.getUserLayoutSetBranch(\n\t\t\t\tserviceContext.getUserId(), layout.getGroupId(),\n\t\t\t\tlayout.isPrivateLayout(), layoutSetBranchId);\n\n\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\n\t\tlong layoutRevisionId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutRevisionId\");\n\n\t\tif (layoutRevisionId <= 0) {\n\t\t\tUser user = UserLocalServiceUtil.getUser(\n\t\t\t\tserviceContext.getUserId());\n\n\t\t\tlayoutRevisionId = StagingUtil.getRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid());\n\t\t}\n\n\t\ttry {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutRevisionId);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t}\n\n\t\ttry {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), true);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\tList<LayoutRevision> layoutRevisions =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevisions(\n\t\t\t\t\tlayoutSetBranchId,\n\t\t\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID,\n\t\t\t\t\tlayout.getPlid());\n\n\t\t\tif (!layoutRevisions.isEmpty()) {\n\t\t\t\treturn layoutRevisions.get(0);\n\t\t\t}\n\t\t}\n\n\t\treturn LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID,\n\t\t\tfalse, LayoutRevisionConstants.DEFAULT_LAYOUT_VARIATION_NAME,\n\t\t\tlayout.getPlid(), layout.isPrivateLayout(), layout.getName(),\n\t\t\tlayout.getTitle(), layout.getDescription(), layout.getKeywords(),\n\t\t\tlayout.getRobots(), layout.getTypeSettings(), layout.getIconImage(),\n\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\t}","id":59141,"modified_method":"private LayoutRevision _getLayoutRevision(\n\t\t\tLayout layout, LayoutRevision layoutRevision)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (layoutRevision != null) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (!serviceContext.isSignedIn()) {\n\t\t\treturn layoutRevision;\n\t\t}\n\n\t\tlong layoutSetBranchId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutSetBranchId\");\n\n\t\tLayoutSetBranch layoutSetBranch =\n\t\t\tLayoutSetBranchLocalServiceUtil.getUserLayoutSetBranch(\n\t\t\t\tserviceContext.getUserId(), layout.getGroupId(),\n\t\t\t\tlayout.isPrivateLayout(), layoutSetBranchId);\n\n\t\tlayoutSetBranchId = layoutSetBranch.getLayoutSetBranchId();\n\n\t\tlong layoutRevisionId = ParamUtil.getLong(\n\t\t\tserviceContext, \"layoutRevisionId\");\n\n\t\tif (layoutRevisionId <= 0) {\n\t\t\tUser user = UserLocalServiceUtil.getUser(\n\t\t\t\tserviceContext.getUserId());\n\n\t\t\tlayoutRevisionId = StagingUtil.getRecentLayoutRevisionId(\n\t\t\t\tuser, layoutSetBranchId, layout.getPlid());\n\t\t}\n\n\t\tif (layoutRevisionId > 0) {\n\t\t\ttry {\n\t\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\t\tlayoutRevisionId);\n\t\t\t}\n\t\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\treturn LayoutRevisionLocalServiceUtil.getLayoutRevision(\n\t\t\t\tlayoutSetBranchId, layout.getPlid(), true);\n\t\t}\n\t\tcatch (NoSuchLayoutRevisionException nslre) {\n\t\t\tList<LayoutRevision> layoutRevisions =\n\t\t\t\tLayoutRevisionLocalServiceUtil.getLayoutRevisions(\n\t\t\t\t\tlayoutSetBranchId,\n\t\t\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID,\n\t\t\t\t\tlayout.getPlid());\n\n\t\t\tif (!layoutRevisions.isEmpty()) {\n\t\t\t\treturn layoutRevisions.get(0);\n\t\t\t}\n\t\t}\n\n\t\tlayoutRevision = LayoutRevisionLocalServiceUtil.addLayoutRevision(\n\t\t\tserviceContext.getUserId(), layoutSetBranchId,\n\t\t\tLayoutRevisionConstants.DEFAULT_PARENT_LAYOUT_REVISION_ID,\n\t\t\tfalse, LayoutRevisionConstants.DEFAULT_LAYOUT_VARIATION_NAME,\n\t\t\tlayout.getPlid(), layout.isPrivateLayout(), layout.getName(),\n\t\t\tlayout.getTitle(), layout.getDescription(), layout.getKeywords(),\n\t\t\tlayout.getRobots(), layout.getTypeSettings(), layout.getIconImage(),\n\t\t\tlayout.getIconImageId(), layout.getThemeId(),\n\t\t\tlayout.getColorSchemeId(), layout.getWapThemeId(),\n\t\t\tlayout.getWapColorSchemeId(), layout.getCss(), serviceContext);\n\n\t\tboolean explicitCreation = ParamUtil.getBoolean(\n\t\t\tserviceContext, \"explicitCreation\");\n\n\t\tif (!explicitCreation) {\n\t\t\tLayoutRevisionLocalServiceUtil.updateStatus(\n\t\t\t\tserviceContext.getUserId(),\n\t\t\t\tlayoutRevision.getLayoutRevisionId(),\n\t\t\t\tWorkflowConstants.STATUS_INCOMPLETE, serviceContext);\n\t\t}\n\n\t\treturn layoutRevision;\n\t}","commit_id":"7b3bedcf949efccece54805c527f1bf84990ffa4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String[] addPage(\n\t\t\tThemeDisplay themeDisplay, HttpServletRequest request,\n\t\t\tHttpServletResponse response)\n\t\tthrows Exception {\n\n\t\tString doAsUserId = ParamUtil.getString(request, \"doAsUserId\");\n\t\tString doAsUserLanguageId = ParamUtil.getString(\n\t\t\trequest, \"doAsUserLanguageId\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(request, \"privateLayout\");\n\t\tlong parentLayoutId = ParamUtil.getLong(request, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(request, \"name\", \"New Page\");\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\t\tString type = LayoutConstants.TYPE_PORTLET;\n\t\tboolean hidden = false;\n\t\tString friendlyURL = StringPool.BLANK;\n\t\tlong layoutPrototypeId = ParamUtil.getLong(\n\t\t\trequest, \"layoutPrototypeId\");\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tLayout layout = null;\n\n\t\tif (layoutPrototypeId > 0) {\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeServiceUtil.getLayoutPrototype(\n\t\t\t\t\tlayoutPrototypeId);\n\n\t\t\tLayout layoutPrototypeLayout = layoutPrototype.getLayout();\n\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, layoutPrototypeLayout.getType(),\n\t\t\t\tfalse, friendlyURL, serviceContext);\n\n\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\tlayout.getLayoutId(), layoutPrototypeLayout.getTypeSettings());\n\n\t\t\tActionUtil.copyPortletPermissions(\n\t\t\t\trequest, layout, layoutPrototypeLayout);\n\n\t\t\tActionUtil.copyPreferences(request, layout, layoutPrototypeLayout);\n\t\t}\n\t\telse {\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, type, hidden, friendlyURL, serviceContext);\n\t\t}\n\n\t\tLayoutSettings layoutSettings = LayoutSettings.getInstance(layout);\n\n\t\tEventsProcessorUtil.process(\n\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\tlayoutSettings.getConfigurationActionUpdate(), request, response);\n\n\t\tString layoutURL = PortalUtil.getLayoutURL(layout, themeDisplay);\n\n\t\tif (Validator.isNotNull(doAsUserId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserId\", themeDisplay.getDoAsUserId());\n\t\t}\n\n\t\tif (Validator.isNotNull(doAsUserLanguageId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserLanguageId\",\n\t\t\t\tthemeDisplay.getDoAsUserLanguageId());\n\t\t}\n\n\t\treturn new String[] {String.valueOf(layout.getLayoutId()), layoutURL};\n\t}","id":59142,"modified_method":"protected String[] addPage(\n\t\t\tThemeDisplay themeDisplay, HttpServletRequest request,\n\t\t\tHttpServletResponse response)\n\t\tthrows Exception {\n\n\t\tString doAsUserId = ParamUtil.getString(request, \"doAsUserId\");\n\t\tString doAsUserLanguageId = ParamUtil.getString(\n\t\t\trequest, \"doAsUserLanguageId\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(request, \"privateLayout\");\n\t\tlong parentLayoutId = ParamUtil.getLong(request, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(request, \"name\", \"New Page\");\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\t\tString type = LayoutConstants.TYPE_PORTLET;\n\t\tboolean hidden = false;\n\t\tString friendlyURL = StringPool.BLANK;\n\t\tlong layoutPrototypeId = ParamUtil.getLong(\n\t\t\trequest, \"layoutPrototypeId\");\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\trequest);\n\n\t\tLayout layout = null;\n\n\t\tif (layoutPrototypeId > 0) {\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeServiceUtil.getLayoutPrototype(\n\t\t\t\t\tlayoutPrototypeId);\n\n\t\t\tLayout layoutPrototypeLayout = layoutPrototype.getLayout();\n\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, layoutPrototypeLayout.getType(),\n\t\t\t\tfalse, friendlyURL, serviceContext);\n\n\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\tlayout.getLayoutId(), layoutPrototypeLayout.getTypeSettings());\n\n\t\t\tActionUtil.copyPortletPermissions(\n\t\t\t\trequest, layout, layoutPrototypeLayout);\n\n\t\t\tActionUtil.copyPreferences(request, layout, layoutPrototypeLayout);\n\t\t}\n\t\telse {\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, type, hidden, friendlyURL, serviceContext);\n\t\t}\n\n\t\tLayoutSettings layoutSettings = LayoutSettings.getInstance(layout);\n\n\t\tEventsProcessorUtil.process(\n\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\tlayoutSettings.getConfigurationActionUpdate(), request, response);\n\n\t\tString layoutURL = PortalUtil.getLayoutURL(layout, themeDisplay);\n\n\t\tif (Validator.isNotNull(doAsUserId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserId\", themeDisplay.getDoAsUserId());\n\t\t}\n\n\t\tif (Validator.isNotNull(doAsUserLanguageId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserLanguageId\",\n\t\t\t\tthemeDisplay.getDoAsUserLanguageId());\n\t\t}\n\n\t\treturn new String[] {String.valueOf(layout.getLayoutId()), layoutURL};\n\t}","commit_id":"7b3bedcf949efccece54805c527f1bf84990ffa4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public IssueIndex(IssueNormalizer normalizer, SearchClient client) {\n    super(IndexDefinition.ISSUES, normalizer, client);\n\n    sortColumns.put(IssueQuery.SORT_BY_ASSIGNEE, IssueNormalizer.IssueField.ASSIGNEE);\n    sortColumns.put(IssueQuery.SORT_BY_STATUS, IssueNormalizer.IssueField.STATUS);\n    sortColumns.put(IssueQuery.SORT_BY_SEVERITY, IssueNormalizer.IssueField.SEVERITY_VALUE);\n    sortColumns.put(IssueQuery.SORT_BY_CREATION_DATE, IssueNormalizer.IssueField.ISSUE_CREATED_AT);\n    sortColumns.put(IssueQuery.SORT_BY_UPDATE_DATE, IssueNormalizer.IssueField.ISSUE_UPDATED_AT);\n    sortColumns.put(IssueQuery.SORT_BY_CLOSE_DATE, IssueNormalizer.IssueField.ISSUE_CLOSE_DATE);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.PROJECT);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.FILE_PATH);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.LINE);\n  }","id":59143,"modified_method":"public IssueIndex(IssueNormalizer normalizer, SearchClient client) {\n    super(IndexDefinition.ISSUES, normalizer, client);\n\n    sortColumns.put(IssueQuery.SORT_BY_ASSIGNEE, IssueNormalizer.IssueField.ASSIGNEE);\n    sortColumns.put(IssueQuery.SORT_BY_STATUS, IssueNormalizer.IssueField.STATUS);\n    sortColumns.put(IssueQuery.SORT_BY_SEVERITY, IssueNormalizer.IssueField.SEVERITY_VALUE);\n    sortColumns.put(IssueQuery.SORT_BY_CREATION_DATE, IssueNormalizer.IssueField.ISSUE_CREATED_AT);\n    sortColumns.put(IssueQuery.SORT_BY_UPDATE_DATE, IssueNormalizer.IssueField.ISSUE_UPDATED_AT);\n    sortColumns.put(IssueQuery.SORT_BY_CLOSE_DATE, IssueNormalizer.IssueField.ISSUE_CLOSE_DATE);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.PROJECT);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.FILE_PATH);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.LINE);\n    sortColumns.put(IssueQuery.SORT_BY_FILE_LINE, IssueNormalizer.IssueField.KEY);\n  }","commit_id":"ac5b044e84b65a1b0fae568070049c3ba1e675fd","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void sort_by_file_and_line() throws Exception {\n    db.issueDao().insert(session,\n      // file Foo.java\n      IssueTesting.newDto(rule, file, project).setLine(20).setFilePath(\"src/Foo.java\"),\n      IssueTesting.newDto(rule, file, project).setLine(null).setFilePath(\"src/Foo.java\"),\n      IssueTesting.newDto(rule, file, project).setLine(25).setFilePath(\"src/Foo.java\"),\n\n      // file Bar.java\n      IssueTesting.newDto(rule, file, project).setLine(9).setFilePath(\"src/Bar.java\"),\n      IssueTesting.newDto(rule, file, project).setLine(109).setFilePath(\"src/Bar.java\")\n      );\n    session.commit();\n\n    // ascending sort -> Bar then Foo\n    IssueQuery.Builder query = IssueQuery.builder().sort(IssueQuery.SORT_BY_FILE_LINE).asc(true);\n    Result<Issue> result = index.search(query.build(), new QueryContext());\n    assertThat(result.getHits()).hasSize(5);\n    assertThat(result.getHits().get(0).line()).isEqualTo(9);\n    assertThat(result.getHits().get(1).line()).isEqualTo(109);\n    assertThat(result.getHits().get(2).line()).isEqualTo(20);\n    assertThat(result.getHits().get(3).line()).isEqualTo(25);\n    assertThat(result.getHits().get(4).line()).isEqualTo(null);\n\n    // descending sort -> Foo then Bar\n    query = IssueQuery.builder().sort(IssueQuery.SORT_BY_FILE_LINE).asc(false);\n    result = index.search(query.build(), new QueryContext());\n    assertThat(result.getHits()).hasSize(5);\n    assertThat(result.getHits().get(0).line()).isEqualTo(25);\n    assertThat(result.getHits().get(1).line()).isEqualTo(20);\n    assertThat(result.getHits().get(2).line()).isEqualTo(null);\n    assertThat(result.getHits().get(3).line()).isEqualTo(109);\n    assertThat(result.getHits().get(4).line()).isEqualTo(9);\n  }","id":59144,"modified_method":"@Test\n  public void sort_by_file_and_line() throws Exception {\n    db.issueDao().insert(session,\n      // file Foo.java\n      IssueTesting.newDto(rule, file, project).setLine(20).setFilePath(\"src/Foo.java\").setKee(\"FOO1\"),\n      IssueTesting.newDto(rule, file, project).setLine(null).setFilePath(\"src/Foo.java\").setKee(\"FOO3\"),\n      IssueTesting.newDto(rule, file, project).setLine(25).setFilePath(\"src/Foo.java\").setKee(\"FOO2\"),\n\n      // file Bar.java\n      IssueTesting.newDto(rule, file, project).setLine(9).setFilePath(\"src/Bar.java\").setKee(\"BAR1\"),\n      IssueTesting.newDto(rule, file, project).setLine(109).setFilePath(\"src/Bar.java\").setKee(\"BAR2\"),\n      // two issues on the same line -> sort by key\n      IssueTesting.newDto(rule, file, project).setLine(109).setFilePath(\"src/Bar.java\").setKee(\"BAR3\")\n      );\n    session.commit();\n\n    // ascending sort -> Bar then Foo\n    IssueQuery.Builder query = IssueQuery.builder().sort(IssueQuery.SORT_BY_FILE_LINE).asc(true);\n    Result<Issue> result = index.search(query.build(), new QueryContext());\n    assertThat(result.getHits()).hasSize(6);\n    assertThat(result.getHits().get(0).key()).isEqualTo(\"BAR1\");\n    assertThat(result.getHits().get(1).key()).isEqualTo(\"BAR2\");\n    assertThat(result.getHits().get(2).key()).isEqualTo(\"BAR3\");\n    assertThat(result.getHits().get(3).key()).isEqualTo(\"FOO1\");\n    assertThat(result.getHits().get(4).key()).isEqualTo(\"FOO2\");\n    assertThat(result.getHits().get(5).key()).isEqualTo(\"FOO3\");\n\n    // descending sort -> Foo then Bar\n    query = IssueQuery.builder().sort(IssueQuery.SORT_BY_FILE_LINE).asc(false);\n    result = index.search(query.build(), new QueryContext());\n    assertThat(result.getHits()).hasSize(6);\n    assertThat(result.getHits().get(0).key()).isEqualTo(\"FOO2\");\n    assertThat(result.getHits().get(1).key()).isEqualTo(\"FOO1\");\n    // nul line is on last. Could be improved.\n    assertThat(result.getHits().get(2).key()).isEqualTo(\"FOO3\");\n    assertThat(result.getHits().get(3).key()).isEqualTo(\"BAR3\");\n    assertThat(result.getHits().get(4).key()).isEqualTo(\"BAR2\");\n    assertThat(result.getHits().get(5).key()).isEqualTo(\"BAR1\");\n  }","commit_id":"ac5b044e84b65a1b0fae568070049c3ba1e675fd","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n    }","id":59145,"modified_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        RrdDb rrdDbAndSampler = factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n\n        rrdDbAndSampler.close();\n    }","commit_id":"e1a4018cbb117515ede425b7aa64c798267b17fc","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() throws Exception\n    {\n        db.shutdown();\n    }","id":59146,"modified_method":"@After\n    public void tearDown() throws Exception\n    {\n        try\n        {\n            db.shutdown();\n        } catch ( Exception e )\n        {\n            ;\n        }\n    }","commit_id":"e1a4018cbb117515ede425b7aa64c798267b17fc","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() throws Exception\n    {\n        db.shutdown();\n    }","id":59147,"modified_method":"@After\n    public void tearDown() throws Exception\n    {\n        try\n        {\n            db.shutdown();\n        } catch ( Exception e )\n        {\n            ;\n        }\n    }","commit_id":"a7b8b0437cba4326067c6be910c88f965688bf48","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n    }","id":59148,"modified_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        RrdDb rrdDbAndSampler = factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n\n        rrdDbAndSampler.close();\n    }","commit_id":"a7b8b0437cba4326067c6be910c88f965688bf48","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n    }","id":59149,"modified_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        RrdDb rrdDbAndSampler = factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n\n        rrdDbAndSampler.close();\n    }","commit_id":"2c48c10fe1398f375e2459dbda0974082b627a3c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() throws Exception\n    {\n        db.shutdown();\n    }","id":59150,"modified_method":"@After\n    public void tearDown() throws Exception\n    {\n        try\n        {\n            db.shutdown();\n        } catch ( Exception e )\n        {\n            ;\n        }\n    }","commit_id":"2c48c10fe1398f375e2459dbda0974082b627a3c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n    }","id":59151,"modified_method":"@Test\n    public void shouldCreateRrdInAGoodDefaultPlace() throws Exception\n    {\n        TestableRrdFactory factory = createRrdFactory();\n\n        RrdDb rrdDbAndSampler = factory.createRrdDbAndSampler( db, new NullJobScheduler() );\n\n        assertThat( factory.directoryUsed, startsWith( db.getStoreDir() ) );\n        assertThat( factory.directoryUsed, endsWith( \"rrd\" ) );\n\n        rrdDbAndSampler.close();\n    }","commit_id":"a651708ac113ef52edc4ba6f793045ca91e9e8f7","url":"https://github.com/neo4j/neo4j"},{"original_method":"@After\n    public void tearDown() throws Exception\n    {\n        db.shutdown();\n    }","id":59152,"modified_method":"@After\n    public void tearDown() throws Exception\n    {\n        try\n        {\n            db.shutdown();\n        } catch ( Exception e )\n        {\n            ;\n        }\n    }","commit_id":"a651708ac113ef52edc4ba6f793045ca91e9e8f7","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static URI getResourceURI(URL url) throws URISyntaxException {\n\t\treturn _getResourceURI(url.getProtocol(), url.getPath());\n\t}","id":59153,"modified_method":"public static URI getResourceURI(URL url) throws URISyntaxException {\n\t\treturn new URI(url.getProtocol(), url.getPath(), null);\n\t}","commit_id":"bf80f1bbf9062953bce51e92d5bf37838e459daf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static URI getRootURI(ServletContext servletContext)\n\t\tthrows MalformedURLException {\n\n\t\tURI rootURI = (URI)servletContext.getAttribute(URI_ATTRIBUTE);\n\n\t\tif (rootURI != null) {\n\t\t\treturn rootURI;\n\t\t}\n\n\t\ttry {\n\t\t\tURL rootURL = servletContext.getResource(PATH_WEB_INF);\n\n\t\t\tString path = rootURL.getPath();\n\n\t\t\tint index = path.indexOf(PATH_WEB_INF);\n\n\t\t\tif (index < 0) {\n\t\t\t\tthrow new MalformedURLException(\"Invalid URL \" + rootURL);\n\t\t\t}\n\n\t\t\tif (index == 0) {\n\t\t\t\tpath = StringPool.SLASH;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = path.substring(0, index);\n\t\t\t}\n\n\t\t\trootURI = _getResourceURI(rootURL.getProtocol(), path);\n\n\t\t\tservletContext.setAttribute(URI_ATTRIBUTE, rootURI);\n\t\t}\n\t\tcatch (URISyntaxException urise) {\n\t\t\tthrow new MalformedURLException(urise.getMessage());\n\t\t}\n\n\t\treturn rootURI;\n\t}","id":59154,"modified_method":"public static URI getRootURI(ServletContext servletContext)\n\t\tthrows MalformedURLException {\n\n\t\tURI rootURI = (URI)servletContext.getAttribute(URI_ATTRIBUTE);\n\n\t\tif (rootURI != null) {\n\t\t\treturn rootURI;\n\t\t}\n\n\t\ttry {\n\t\t\tURL rootURL = servletContext.getResource(PATH_WEB_INF);\n\n\t\t\tString path = rootURL.getPath();\n\n\t\t\tint index = path.indexOf(PATH_WEB_INF);\n\n\t\t\tif (index < 0) {\n\t\t\t\tthrow new MalformedURLException(\"Invalid URL \" + rootURL);\n\t\t\t}\n\n\t\t\tif (index == 0) {\n\t\t\t\tpath = StringPool.SLASH;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = path.substring(0, index);\n\t\t\t}\n\n\t\t\trootURI = new URI(rootURL.getProtocol(), path, null);\n\n\t\t\tservletContext.setAttribute(URI_ATTRIBUTE, rootURI);\n\t\t}\n\t\tcatch (URISyntaxException urise) {\n\t\t\tthrow new MalformedURLException(urise.getMessage());\n\t\t}\n\n\t\treturn rootURI;\n\t}","commit_id":"bf80f1bbf9062953bce51e92d5bf37838e459daf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private Wagon getWagon( final Repository repository, final WagonManager manager, final Log log )\n        throws MojoExecutionException\n    {\n        final Wagon wagon;\n\n        try\n        {\n            wagon = manager.getWagon( repository );\n        }\n        catch ( UnsupportedProtocolException e )\n        {\n            log.error( \"Unsupported protocol for site deployment: '\" + repository.getProtocol() + \"'.\" );\n            log.error( \"Supported protocols at this moment: \" + getSupportedProtocols() + \".\" );\n            log.error( \"For adding new protocols to the site plugin, see \"\n                + \"http://maven.apache.org/plugins/maven-site-plugin/examples/adding-deploy-protocol.html\" );\n\n            throw new MojoExecutionException( \"Unsupported protocol for site deployment: '\" + repository.getProtocol()\n                + \"'.\", e );\n        }\n        catch ( TransferFailedException e )\n        {\n            throw new MojoExecutionException( \"Unable to configure Wagon: '\" + repository.getProtocol() + \"'\", e );\n        }\n\n        if ( !wagon.supportsDirectoryCopy() )\n        {\n            throw new MojoExecutionException(\n                \"Wagon protocol '\" + repository.getProtocol() + \"' doesn't support directory copying\" );\n        }\n\n        return wagon;\n    }","id":59155,"modified_method":"private Wagon getWagon( final Repository repository, final WagonManager manager, final Log log )\n        throws MojoExecutionException\n    {\n        final Wagon wagon;\n\n        try\n        {\n            wagon = manager.getWagon( repository );\n        }\n        catch ( UnsupportedProtocolException e )\n        {\n            String shortMessage =\n                \"Unsupported protocol: '\" + repository.getProtocol() + \"' for site deployment to \"\n                    + \"distributionManagement.site.url=\" + repository.getUrl() + \".\";\n            String longMessage =\n                \"Supported protocols at this moment: \" + getSupportedProtocols() + \".\\n\"\n                    + \"    You can add protocols through wagon providers either as maven-site-plugin dependency or \"\n                    + \"extension.\\n\"\n                    + \"    For more information, see \"\n                    + \"http://maven.apache.org/plugins/maven-site-plugin/examples/adding-deploy-protocol.html\";\n\n            log.error( shortMessage );\n            log.error( longMessage );\n\n            throw new MojoExecutionException( null, shortMessage, \"\\n\" + shortMessage + \"\\n\" + longMessage );\n        }\n        catch ( TransferFailedException e )\n        {\n            throw new MojoExecutionException( \"Unable to configure Wagon: '\" + repository.getProtocol() + \"'\", e );\n        }\n\n        if ( !wagon.supportsDirectoryCopy() )\n        {\n            throw new MojoExecutionException(\n                \"Wagon protocol '\" + repository.getProtocol() + \"' doesn't support directory copying\" );\n        }\n\n        return wagon;\n    }","commit_id":"1bf2948df4cdaf4f0cebc900fb754f05956f93be","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n   * Returns a string representation of the specified table range. Can be called\n   * for debugging.\n   * @param start start pre value\n   * @param end end pre value\n   * @return table\n   */\n  private String toString(final int start, final int end) {\n    return string(InfoStorage.table(this, start, end));\n  }","id":59156,"modified_method":"/**\n   * Returns a string representation of the specified table range. Can be called\n   * for debugging.\n   * @param start start pre value\n   * @param end end pre value\n   * @return table\n   */\n  public String toString(final int start, final int end) {\n    return string(InfoStorage.table(this, start, end));\n  }","commit_id":"11fbb20ec6903c4c4490bed963f0c105b2bc2926","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Incremental test.\n   * @throws Exception exception\n   */\n  @Test\n  public void insertInto() throws Exception {\n    final Random rnd = new Random(0);\n\n    // create random words\n    int cap = 1000;\n    final StringList words = new StringList(cap);\n    for(int w = 0; w < cap; w++) {\n      final int r = 1 + rnd.nextInt(10);\n      final TokenBuilder tmp = new TokenBuilder(r);\n      for(int i = 0; i < r; i++) tmp.add('A' + rnd.nextInt(26));\n      words.add(tmp.toString());\n    }\n\n    for(int r = 0; r < RUNS; r++) {\n      final String path = \"doc\" + rnd.nextInt(DOCS);\n      // create random document\n      final TokenBuilder doc = new TokenBuilder(\"<xml>\");\n\n      final int offset = rnd.nextInt(cap - DOCS);\n      for(int i = 0; i < DOCS; i++) doc.add(\"<a>\").add(words.get(offset + i)).add(\"<\/a>\");\n      doc.add(\"<\/xml>\");\n      new Replace(path, doc.toString()).execute(context);\n\n      for(int d = 0; d < DOCS; d++) {\n        final String word = words.get(offset + d);\n        final String query = _DB_OPEN.args(NAME, path) + \"//a[text() = '\" + word + \"']\";\n        final String expected = \"<a>\" + word + \"<\/a>\";\n        final String result = new XQuery(query).execute(context);\n        if(!result.startsWith(expected)) {\n          final TokenBuilder tmp = new TokenBuilder(\"\\nExpected: \" + expected +\n              \"\\nResult: \" + result + \"\\nRun: \" + r + \"\\nDoc: \" + d +\n              \"\\nQuery: \" + query + \"\\nDocument: \" + doc);\n          fail(tmp.toString());\n        }\n      }\n    }\n  }","id":59157,"modified_method":"/**\n   * Incremental test.\n   * @throws Exception exception\n   */\n  @Test\n  public void insertInto() throws Exception {\n    final Random rnd = new Random(0);\n\n    // create random words\n    int cap = 1000;\n    final StringList words = new StringList(cap);\n    for(int w = 0; w < cap; w++) {\n      final int r = 1 + rnd.nextInt(10);\n      final TokenBuilder tmp = new TokenBuilder(r);\n      for(int i = 0; i < r; i++) tmp.add('A' + rnd.nextInt(26));\n      words.add(tmp.toString());\n    }\n\n    for(int r = 0; r < RUNS; r++) {\n      final String path = \"doc\" + rnd.nextInt(DOCS);\n      // create random document\n      final TokenBuilder doc = new TokenBuilder(\"<xml>\");\n\n      final int offset = rnd.nextInt(cap - DOCS);\n      for(int i = 0; i < DOCS; i++) doc.add(\"<a>\").add(words.get(offset + i)).add(\"<\/a>\");\n      doc.add(\"<\/xml>\");\n      new Replace(path, doc.toString()).execute(context);\n\n      for(int d = 0; d < DOCS; d++) {\n        final String word = words.get(offset + d);\n        final String query = _DB_OPEN.args(NAME, path) + \"//a[text() = '\" + word + \"']\";\n        final String expected = \"<a>\" + word + \"<\/a>\";\n        final String result = new XQuery(query).execute(context);\n        if(!result.startsWith(expected)) {\n          fail(new TokenBuilder(\"\\nExpected: \" + expected +\n              \"\\nResult: \" + result + \"\\nRun: \" + r + \"\\nDoc: \" + d +\n              \"\\nQuery: \" + query + \"\\nDocument: \" + doc).toString());\n        }\n      }\n    }\n  }","commit_id":"11fbb20ec6903c4c4490bed963f0c105b2bc2926","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public synchronized void replace(final byte[] old, final byte[] key, final int id) {\n    // delete the id from the old key\n    final int p = get(old);\n    if(p >= 0) {\n      final int[] tmp = { id };\n      if(deleteIds(p, old, tmp)) {\n        tmp[0] = p;\n        deleteKeys(tmp);\n      }\n    }\n\n    final IntList newIds;\n    int index = get(key);\n    if(index < 0) {\n      newIds = new IntList(1).add(id);\n\n      // new id list\n      index = -(index + 1);\n      // create space for new entry\n      final int sz = size() + 1;\n      final byte[] tmp = idxr.readBytes(0, sz * 5);\n      for(int i = sz - 1; i > index; --i) copy(tmp, i - 1, i);\n      idxr.cursor(0);\n      idxr.writeBytes(tmp, 0, sz * 5);\n      size(sz);\n\n    } else {\n      // add id to the existing id list\n      final long off = idxr.read5(index * 5L);\n      final int num = idxl.readNum(off);\n      final int newSize = num + 1;\n      newIds = new IntList(newSize);\n\n      boolean notadded = true;\n      int prevId = 0;\n      for(int i = 0; i < num; ++i) {\n        int v = idxl.readNum();\n        if(notadded && id < prevId + v) {\n          // add the new id\n          newIds.add(id);\n          notadded = false;\n          // decrement the difference to the next id\n          v -= id - prevId;\n          prevId = id;\n        }\n        newIds.add(id);\n        prevId += v;\n      }\n      if(notadded) newIds.add(id);\n    }\n    // write new ids\n    writeIds(key, newIds, index);\n  }","id":59158,"modified_method":"@Override\n  public synchronized void replace(final byte[] old, final byte[] key, final int id) {\n    // delete the id from the old key\n    final int p = get(old);\n    if(p >= 0) {\n      final int[] tmp = { id };\n      if(deleteIds(p, old, tmp)) {\n        tmp[0] = p;\n        deleteKeys(tmp);\n      }\n    }\n\n    final IntList newIds;\n    int index = get(key);\n    if(index < 0) {\n      newIds = new IntList(1).add(id);\n\n      // new id list\n      index = -(index + 1);\n      // create space for new entry\n      final int sz = size() + 1;\n      final byte[] tmp = idxr.readBytes(0, sz * 5);\n      for(int i = sz - 1; i > index; --i) copy(tmp, i - 1, i);\n      idxr.cursor(0);\n      idxr.writeBytes(tmp, 0, sz * 5);\n      size(sz);\n\n    } else {\n      // add id to the existing id list\n      final long off = idxr.read5(index * 5L);\n      final int count = idxl.readNum(off);\n      newIds = new IntList(count + 1);\n\n      boolean notadded = true;\n      for(int c = 0, currId = 0; c < count; ++c) {\n        currId += idxl.readNum();\n        if(notadded && id < currId) {\n          // add the new id\n          newIds.add(id);\n          notadded = false;\n        }\n        newIds.add(currId);\n      }\n      if(notadded) newIds.add(id);\n    }\n    // write new ids\n    writeIds(key, newIds, index);\n  }","commit_id":"11fbb20ec6903c4c4490bed963f0c105b2bc2926","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs a fuzzy search for the specified token with a maximum number of errors.\r\n   * @param tok token to look for\r\n   * @param k number of errors allowed\r\n   * @return iterator\r\n   */\r\n  private IndexIterator fuzzy(final byte[] tok, final int k) {\r\n    FTIndexIterator it = FTIndexIterator.FTEMPTY;\r\n    final int tl = tok.length;\r\n    final int e = Math.min(tp.length - 1, tl + k);\r\n    int s = Math.max(1, tl - k) - 1;\r\n\r\n    while(++s <= e) {\r\n      int p = tp[s];\r\n      if(p == -1) continue;\r\n      int i = s + 1;\r\n      int r = -1;\r\n      while(i < tp.length && r == -1) r = tp[i++];\r\n      while(p < r) {\r\n        if(ls.similar(inY.readBytes(p, s), tok, k)) {\r\n          it = FTIndexIterator.union(iter(pointer(p, s), size(p, s), inZ), it);\r\n        }\r\n        p += s + ENTRY;\r\n      }\r\n    }\r\n    return it;\r\n  }","id":59159,"modified_method":"/**\r\n   * Performs a fuzzy search for the specified token with a maximum number of errors.\r\n   * @param token token to look for\r\n   * @param k number of errors allowed\r\n   * @return iterator\r\n   */\r\n  private synchronized IndexIterator fuzzy(final byte[] token, final int k) {\r\n    FTIndexIterator it = FTIndexIterator.FTEMPTY;\r\n    final int tl = token.length;\r\n    final int e = Math.min(tp.length - 1, tl + k);\r\n    int s = Math.max(1, tl - k) - 1;\r\n\r\n    while(++s <= e) {\r\n      int p = tp[s];\r\n      if(p == -1) continue;\r\n      int i = s + 1;\r\n      int r = -1;\r\n      while(i < tp.length && r == -1) r = tp[i++];\r\n      while(p < r) {\r\n        if(ls.similar(inY.readBytes(p, s), token, k)) {\r\n          it = FTIndexIterator.union(iter(pointer(p, s), size(p, s), inZ), it);\r\n        }\r\n        p += s + ENTRY;\r\n      }\r\n    }\r\n    return it;\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns a cache entry.\r\n   * @param tok token to be found or cached\r\n   * @return cache entry\r\n   */\r\n  private IndexEntry entry(final byte[] tok) {\r\n    final IndexEntry e = cache.get(tok);\r\n    if(e != null) return e;\r\n\r\n    final long p = token(tok);\r\n    return p == -1 ? new IndexEntry(tok, 0, 0) :\r\n      cache.add(tok, size(p, tok.length), pointer(p, tok.length));\r\n  }","id":59160,"modified_method":"/**\r\n   * Returns a cache entry.\r\n   * @param token token to be found or cached\r\n   * @return cache entry\r\n   */\r\n  private IndexEntry entry(final byte[] token) {\r\n    final IndexEntry e = cache.get(token);\r\n    if(e != null) return e;\r\n\r\n    final long p = token(token);\r\n    return p == -1 ? new IndexEntry(token, 0, 0) :\r\n      cache.add(token, size(p, token.length), pointer(p, token.length));\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns an iterator for an index entry.\r\n   * @param off offset on entries\r\n   * @param size number of pre/pos entries\r\n   * @param da data source\r\n   * @return iterator\r\n   */\r\n  private synchronized FTIndexIterator iter(final long off, final int size,\r\n      final DataAccess da) {\r\n\r\n    // cache results\r\n    da.cursor(off);\r\n    final IntList vals = new IntList();\r\n    for(int c = 0, lp = 0; c < size;) {\r\n      if(lp == 0) {\r\n        if(scm > 0) vals.add(da.readNum());\r\n        lp = da.readNum();\r\n        vals.add(lp);\r\n      }\r\n      final int pr = lp;\r\n      vals.add(da.readNum());\r\n      while(++c < size) {\r\n        lp = da.readNum();\r\n        vals.add(lp);\r\n        if(lp != pr) break;\r\n        vals.add(da.readNum());\r\n      }\r\n    }\r\n\r\n    return new FTIndexIterator() {\r\n      final FTMatches all = new FTMatches(toknum);\r\n      int c, pre, lpre;\r\n      double sc = -1;\r\n\r\n      @Override\r\n      public synchronized boolean more() {\r\n        if(c == vals.size()) return false;\r\n        if(lpre == 0) {\r\n          if(scm > 0) sc = (Math.log(vals.get(c++)) - min) / (max - min);\r\n          lpre = vals.get(c++);\r\n        }\r\n        pre = lpre;\r\n\r\n        all.reset(toknum);\r\n        all.or(vals.get(c++));\r\n\r\n        while(c < vals.size() && (lpre = vals.get(c++)) == pre) {\r\n          all.or(vals.get(c++));\r\n        }\r\n        return true;\r\n      }\r\n\r\n      @Override\r\n      public synchronized FTMatches matches() {\r\n        return all;\r\n      }\r\n\r\n      @Override\r\n      public synchronized int next() {\r\n        return pre;\r\n      }\r\n\r\n      @Override\r\n      public synchronized int size() {\r\n        return size;\r\n      }\r\n\r\n      @Override\r\n      public synchronized double score() {\r\n        return sc;\r\n      }\r\n\r\n      @Override\r\n      public String toString() {\r\n        return Integer.toString(size);\r\n      }\r\n    };\r\n  }","id":59161,"modified_method":"/**\r\n   * Returns an iterator for an index entry.\r\n   * @param off offset on entries\r\n   * @param size number of id/pos entries\r\n   * @param da data source\r\n   * @return iterator\r\n   */\r\n  private FTIndexIterator iter(final long off, final int size, final DataAccess da) {\r\n    da.cursor(off);\r\n    final int sc = scm > 0 ? da.readNum() : 0;\r\n    final IntList pr = new IntList(size);\r\n    final IntList ps = new IntList(size);\r\n    for(int c = 0; c < size; c++) {\r\n      pr.add(da.readNum());\r\n      ps.add(da.readNum());\r\n    }\r\n    return iter(new FTCache(pr, ps, sc));\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Determines the pointer on a token.\r\n   * @param tok token looking for\r\n   * @return int pointer or {@code -1} if token was not found\r\n   */\r\n  private int token(final byte[] tok) {\r\n    final int tl = tok.length;\r\n    // left limit\r\n    int l = tp[tl];\r\n    if(l == -1) return -1;\r\n\r\n    int i = 1;\r\n    int r;\r\n    // find right limit\r\n    do r = tp[tl + i++]; while(r == -1);\r\n    final int x = r;\r\n\r\n    // binary search\r\n    final int o = tl + ENTRY;\r\n    while(l < r) {\r\n      final int m = l + (r - l >> 1) / o * o;\r\n      final int c = diff(inY.readBytes(m, tl), tok);\r\n      if(c == 0) return m;\r\n      if(c < 0) l = m + o;\r\n      else r = m - o;\r\n    }\r\n    // accept entry if pointer is inside relevant tokens\r\n    return r != x && l == r && eq(inY.readBytes(l, tl), tok) ? l : -1;\r\n  }","id":59162,"modified_method":"/**\r\n   * Determines the pointer on a token.\r\n   * @param token token looking for\r\n   * @return int pointer or {@code -1} if token was not found\r\n   */\r\n  private int token(final byte[] token) {\r\n    final int tl = token.length;\r\n    // left limit\r\n    int l = tp[tl];\r\n    if(l == -1) return -1;\r\n\r\n    int i = 1;\r\n    int r;\r\n    // find right limit\r\n    do r = tp[tl + i++]; while(r == -1);\r\n    final int x = r;\r\n\r\n    // binary search\r\n    final int o = tl + ENTRY;\r\n    while(l < r) {\r\n      final int m = l + (r - l >> 1) / o * o;\r\n      final int c = diff(inY.readBytes(m, tl), token);\r\n      if(c == 0) return m;\r\n      if(c < 0) l = m + o;\r\n      else r = m - o;\r\n    }\r\n    // accept entry if pointer is inside relevant tokens\r\n    return r != x && l == r && eq(inY.readBytes(l, tl), token) ? l : -1;\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public EntryIterator entries(final byte[] prefix) {\r\n    return new EntryIterator() {\r\n      int ti = prefix.length - 1, i, e, nr;\r\n      boolean inner;\r\n\r\n      @Override\r\n      public synchronized byte[] next() {\r\n        if(inner) {\r\n          // loop through all entries with the same character length\r\n          if(i < e) {\r\n            final byte[] entry = inY.readBytes(i, ti);\r\n            if(startsWith(entry, prefix)) {\r\n              final long poi = inY.read5();\r\n              nr = inY.read4();\r\n              if(prefix.length != 0) cache.add(entry, nr, poi);\r\n              i += ti + ENTRY;\r\n              return entry;\r\n            }\r\n          }\r\n        }\r\n        // find next available entry group\r\n        while(++ti < tp.length - 1) {\r\n          i = tp[ti];\r\n          if(i != -1) {\r\n            int c = ti + 1;\r\n            do e = tp[c++]; while(e == -1);\r\n            nr = 0;\r\n            inner = true;\r\n            i = find(prefix, i, e, ti);\r\n            // jump to inner loop\r\n            final byte[] n = next();\r\n            if(n != null) return n;\r\n          }\r\n        }\r\n        // all entries processed: return null\r\n        return null;\r\n      }\r\n      @Override\r\n      public int count() {\r\n        return nr;\r\n      }\r\n    };\r\n  }","id":59163,"modified_method":"@Override\r\n  public EntryIterator entries(final byte[] prefix) {\r\n    return new EntryIterator() {\r\n      int ti = prefix.length - 1, i, e, nr;\r\n      boolean inner;\r\n\r\n      @Override\r\n      public synchronized byte[] next() {\r\n        if(inner) {\r\n          // loop through all entries with the same character length\r\n          if(i < e) {\r\n            final byte[] entry = inY.readBytes(i, ti);\r\n            if(startsWith(entry, prefix)) {\r\n              final long poi = inY.read5();\r\n              nr = inY.read4();\r\n              if(prefix.length != 0) cache.add(entry, nr, poi);\r\n              i += ti + ENTRY;\r\n              return entry;\r\n            }\r\n          }\r\n        }\r\n        // find next available entry group\r\n        while(++ti < tp.length - 1) {\r\n          i = tp[ti];\r\n          if(i == -1) continue;\r\n          int c = ti + 1;\r\n          do e = tp[c++]; while(e == -1);\r\n          nr = 0;\r\n          inner = true;\r\n          i = find(prefix, i, e, ti);\r\n          // jump to inner loop\r\n          final byte[] n = next();\r\n          if(n != null) return n;\r\n        }\r\n        // all entries processed: return null\r\n        return null;\r\n      }\r\n      @Override\r\n      public int count() {\r\n        return nr;\r\n      }\r\n    };\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Binary search.\r\n   * @param key key to be found\r\n   * @param i start position\r\n   * @param e end position\r\n   * @param ti entry length\r\n   * @return position where the key was found, or would have been found\r\n   */\r\n  int find(final byte[] key, final int i, final int e, final int ti) {\r\n    final int tl = ti + ENTRY;\r\n    int l = 0, h = (e - i) / tl;\r\n    while(l <= h) {\r\n      final int m = l + h >>> 1;\r\n      final int p = i + m * tl;\r\n      byte[] txt = ctext.get(p);\r\n      if(txt == null) {\r\n        txt = inY.readBytes(p, ti);\r\n        ctext.add(p, txt);\r\n      }\r\n      final int d = diff(txt, key);\r\n      if(d == 0) return i + m + tl;\r\n      if(d < 0) l = m + 1;\r\n      else h = m - 1;\r\n    }\r\n    return i + l * tl;\r\n  }","id":59164,"modified_method":"/**\r\n   * Binary search.\r\n   * @param token token to look for\r\n   * @param i start position\r\n   * @param e end position\r\n   * @param ti entry length\r\n   * @return position where the key was found, or would have been found\r\n   */\r\n  int find(final byte[] token, final int i, final int e, final int ti) {\r\n    final int tl = ti + ENTRY;\r\n    int l = 0, h = (e - i) / tl;\r\n    while(l <= h) {\r\n      final int m = l + h >>> 1;\r\n      final int p = i + m * tl;\r\n      byte[] txt = ctext.get(p);\r\n      if(txt == null) {\r\n        txt = inY.readBytes(p, ti);\r\n        ctext.add(p, txt);\r\n      }\r\n      final int d = diff(txt, token);\r\n      if(d == 0) return i + m * tl;\r\n      if(d < 0) l = m + 1;\r\n      else h = m - 1;\r\n    }\r\n    return i + l * tl;\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Performs a wildcard search for the specified token.\r\n   * @param tok token to look for\r\n   * @return iterator\r\n   */\r\n  private IndexIterator wc(final byte[] tok) {\r\n    FTIndexIterator it = FTIndexIterator.FTEMPTY;\r\n    final FTWildcard wc = new FTWildcard();\r\n    if(!wc.parse(tok)) return it;\r\n    final int e = Math.min(tp.length - 1, wc.max());\r\n    for(int s = wc.min(); s <= e; s++) {\r\n      int p = tp[s];\r\n      if(p == -1) continue;\r\n      int i = s + 1;\r\n      int r = -1;\r\n      while(i < tp.length && r == -1) r = tp[i++];\r\n      while(p < r) {\r\n        if(wc.match(inY.readBytes(p, s))) {\r\n          it = FTIndexIterator.union(iter(pointer(p, s), size(p, s), inZ), it);\r\n        }\r\n        p += s + ENTRY;\r\n      }\r\n    }\r\n    return it;\r\n  }","id":59165,"modified_method":"/**\r\n   * Performs a wildcard search for the specified token.\r\n   * @param token token to look for\r\n   * @return iterator\r\n   */\r\n  private synchronized IndexIterator wc(final byte[] token) {\r\n    final FTIndexIterator it = FTIndexIterator.FTEMPTY;\r\n    final FTWildcard wc = new FTWildcard(token);\r\n    if(!wc.parse()) return it;\r\n\r\n    final IntList pr = new IntList();\r\n    final IntList ps = new IntList();\r\n    int sc = 0, sz = 0;\r\n\r\n    final byte[] pref = wc.prefix();\r\n    final int l = Math.min(tp.length - 1, wc.max());\r\n    for(int ti = pref.length; ti <= l; ti++) {\r\n      int i = tp[ti];\r\n      if(i == -1) continue;\r\n      int c = ti + 1;\r\n      int e = -1;\r\n      while(c < tp.length && e == -1) e = tp[c++];\r\n      i = find(pref, i, e, ti);\r\n\r\n      while(i < e) {\r\n        final byte[] t = inY.readBytes(i, ti);\r\n        if(!startsWith(t, pref)) break;\r\n        if(wc.match(t)) {\r\n          inZ.cursor(pointer(i, ti));\r\n          final int s = size(i, ti);\r\n          if(scm > 0) sc += inZ.readNum();\r\n          for(int d = 0; d < s; d++) {\r\n            pr.add(inZ.readNum());\r\n            ps.add(inZ.readNum());\r\n          }\r\n          sz++;\r\n        }\r\n        i += ti + ENTRY;\r\n      }\r\n    }\r\n    return iter(new FTCache(pr, ps, sz == 0 ? 0 : sc / sz));\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public synchronized int count(final IndexToken it) {\r\n    final byte[] key = it.get();\r\n    if(key.length > data.meta.maxlen) return Integer.MAX_VALUE;\r\n\r\n    // estimate costs for queries which stretch over multiple index entries\r\n    final FTOpt opt = ((FTLexer) it).ftOpt();\r\n    if(opt.is(FZ) || opt.is(WC)) return Math.max(1, data.meta.size / 10);\r\n\r\n    return entry(key).size;\r\n  }","id":59166,"modified_method":"@Override\r\n  public synchronized int count(final IndexToken it) {\r\n    final byte[] tok = it.get();\r\n    if(tok.length > data.meta.maxlen) return Integer.MAX_VALUE;\r\n\r\n    // estimate costs for queries which stretch over multiple index entries\r\n    final FTOpt opt = ((FTLexer) it).ftOpt();\r\n    if(opt.is(FZ) || opt.is(WC)) return Math.max(1, data.meta.size / 10);\r\n\r\n    return entry(tok).size;\r\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor.\n   * @param w full-text words\n   * @param o full-text options\n   * @param pr database properties\n   */\n  public FTTokenizer(final FTWords w, final FTOpt o, final Prop pr) {\n    words = w;\n    opt = o;\n    lserr = pr.num(Prop.LSERROR);\n\n    cmp = new TokenComparator() {\n      @Override\n      public boolean equal(final byte[] in, final byte[] qu) throws QueryException {\n        FTWildcard ftw = null;\n        if(opt.is(WC)) {\n          ftw = wcCache.get(qu);\n          if(ftw == null) {\n            ftw = new FTWildcard();\n            if(!ftw.parse(qu)) FTREG.thrw(words.info, qu);\n            wcCache.add(qu, ftw);\n          }\n        }\n\n        return\n          // skip stop words, i. e. if the current query token is a stop word,\n          // it is always equal to the corresponding input token:\n          opt.sw != null && opt.sw.id(qu) != 0 ||\n          // fuzzy search:\n          (opt.is(FZ) ? ls.similar(in, qu, lserr) :\n          // wild-card search:\n          ftw != null ? ftw.match(in) :\n          // simple search:\n          eq(in, qu));\n      }\n    };\n  }","id":59167,"modified_method":"/**\n   * Constructor.\n   * @param w full-text words\n   * @param o full-text options\n   * @param pr database properties\n   */\n  public FTTokenizer(final FTWords w, final FTOpt o, final Prop pr) {\n    words = w;\n    opt = o;\n    lserr = pr.num(Prop.LSERROR);\n\n    cmp = new TokenComparator() {\n      @Override\n      public boolean equal(final byte[] in, final byte[] qu) throws QueryException {\n        FTWildcard ftw = null;\n        if(opt.is(WC)) {\n          ftw = wcCache.get(qu);\n          if(ftw == null) {\n            ftw = new FTWildcard(qu);\n            if(!ftw.parse()) FTREG.thrw(words.info, qu);\n            wcCache.add(qu, ftw);\n          }\n        }\n\n        return\n          // skip stop words, i. e. if the current query token is a stop word,\n          // it is always equal to the corresponding input token:\n          opt.sw != null && opt.sw.id(qu) != 0 ||\n          // fuzzy search:\n          (opt.is(FZ) ? ls.similar(in, qu, lserr) :\n          // wild-card search:\n          ftw != null ? ftw.match(in) :\n          // simple search:\n          eq(in, qu));\n      }\n    };\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Parses and constructs a new wildcard expression.\n   * @param query input wildcard expression\n   * @return success flag\n   */\n  public boolean parse(final byte[] query) {\n    final int[] q = cps(query);\n    wc = new int[q.length];\n    min = new int[q.length];\n    max = new int[q.length];\n    size = 0;\n\n    final int ql = q.length;\n    for(int qi = 0; qi < ql;) {\n      int n = 1;\n      int m = 1;\n      // parse wildcards\n      if(q[qi] == '.') {\n        int c = ++qi < ql ? q[qi] : 0;\n        // minimum/maximum number of occurrence\n        if(c == '?') { // .?\n          ++qi;\n          n = 0;\n          m = 1;\n        } else if(c == '*') { // .*\n          ++qi;\n          n = 0;\n          m = Integer.MAX_VALUE;\n        } else if(c == '+') { // .+\n          ++qi;\n          n = 1;\n          m = Integer.MAX_VALUE;\n        } else if(c == '{') { // .{m,n}\n          n = 0;\n          m = 0;\n          boolean f = false;\n          while(true) {\n            c = ++qi < ql ? q[qi] : 0;\n            if(digit(c)) n = (n << 3) + (n << 1) + c - '0';\n            else if(f && c == ',') break;\n            else return false;\n            f = true;\n          }\n          f = false;\n          while(true) {\n            c = ++qi < ql ? q[qi] : 0;\n            if(digit(c)) m = (m << 3) + (m << 1) + c - '0';\n            else if(f && c == '}') break;\n            else return false;\n            f = true;\n          }\n          ++qi;\n          if(n > m) return false;\n        }\n        wc[size] = DOT;\n      } else {\n        if(q[qi] == '\\\\' && ++qi == ql) return false;\n        wc[size] = q[qi++];\n      }\n      min[size] = n;\n      max[size] = m;\n      size++;\n    }\n    return true;\n  }","id":59168,"modified_method":"/**\n   * Constructor.\n   * @param qu query\n   */\n  public FTWildcard(final byte[] qu) {\n    query = qu;\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/** Test if wild-card expressions are correctly parsed. */\n  @Test\n  public void testParse() {\n    for(final String wc : VALIDWC)\n      assertTrue(new FTWildcard().parse(token(wc)));\n\n    for(final String wc : INVALIDWC)\n      assertFalse(new FTWildcard().parse(token(wc)));\n  }","id":59169,"modified_method":"/** Test if wild-card expressions are correctly parsed. */\n  @Test\n  public void testParse() {\n    for(final String wc : VALIDWC) assertTrue(new FTWildcard(token(wc)).parse());\n    for(final String wc : INVALIDWC) assertFalse(new FTWildcard(token(wc)).parse());\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Test wild-card matching.\n   */\n  @Test\n  public void testMatch() {\n    for(int i = 0; i < VALIDWC.length; i++) {\n      final String q = VALIDWC[i];\n      final FTWildcard wc = new FTWildcard();\n      assertTrue(wc.parse(token(q)));\n\n      final String[] good = TEXTS_GOOD[i];\n      for(final String element : good) {\n        assertTrue('\"' + q + \"\\\" did NOT match \\\"\" + element + '\"',\n            wc.match(token(element)));\n      }\n\n      final String[] bad = TEXTS_BAD[i];\n      for(final String element : bad) {\n        assertFalse('\"' + q + \"\\\" matched \\\"\" + element + '\"',\n            wc.match(token(element)));\n      }\n    }\n  }","id":59170,"modified_method":"/**\n   * Test wild-card matching.\n   */\n  @Test\n  public void testMatch() {\n    for(int i = 0; i < VALIDWC.length; i++) {\n      final String q = VALIDWC[i];\n      final FTWildcard wc = new FTWildcard(token(q));\n      assertTrue(wc.parse());\n\n      final String[] good = TEXTS_GOOD[i];\n      for(final String element : good) {\n        assertTrue('\"' + q + \"\\\" did NOT match \\\"\" + element + '\"',\n            wc.match(token(element)));\n      }\n\n      final String[] bad = TEXTS_BAD[i];\n      for(final String element : bad) {\n        assertFalse('\"' + q + \"\\\" matched \\\"\" + element + '\"',\n            wc.match(token(element)));\n      }\n    }\n  }","commit_id":"454412e965b436683e7769a90c605acfa47a28d1","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n    public FileCollection getHeaderDirs() {\n        return fileCollectionFactory.fixed(\"Headers for \" + getDisplayName(), library.getHeaders().getSrcDirs());\n    }","id":59171,"modified_method":"@Override\n    public FileCollection getHeaderDirs() {\n        return library.getHeaders().getSourceDirectories();\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"private void configureCompileTaskCommon(AbstractNativeCompileTask task, final NativeBinarySpecInternal binary, final LanguageSourceSetInternal sourceSet) {\n        task.setToolChain(binary.getToolChain());\n        task.setTargetPlatform(binary.getTargetPlatform());\n        task.setPositionIndependentCode(binary instanceof SharedLibraryBinarySpec);\n\n        task.includes(new Callable<Set<File>>() {\n            public Set<File> call() throws Exception {\n                return ((HeaderExportingSourceSet) sourceSet).getExportedHeaders().getSrcDirs();\n            }\n        });\n        task.includes(new Callable<List<FileCollection>>() {\n            public List<FileCollection> call() {\n                Collection<NativeDependencySet> libs = binary.getLibs((DependentSourceSet) sourceSet);\n                return CollectionUtils.collect(libs, new Transformer<FileCollection, NativeDependencySet>() {\n                    public FileCollection transform(NativeDependencySet original) {\n                        return original.getIncludeRoots();\n                    }\n                });\n            }\n        });\n\n        for (String toolName : languageTransform.getBinaryTools().keySet()) {\n            Tool tool = binary.getToolByName(toolName);\n            if (tool instanceof PreprocessingTool) {\n                task.setMacros(((PreprocessingTool) tool).getMacros());\n            }\n\n            task.setCompilerArgs(tool.getArgs());\n        }\n    }","id":59172,"modified_method":"private void configureCompileTaskCommon(AbstractNativeCompileTask task, final NativeBinarySpecInternal binary, final LanguageSourceSetInternal sourceSet) {\n        task.setToolChain(binary.getToolChain());\n        task.setTargetPlatform(binary.getTargetPlatform());\n        task.setPositionIndependentCode(binary instanceof SharedLibraryBinarySpec);\n\n        task.includes(((HeaderExportingSourceSet) sourceSet).getExportedHeaders().getSourceDirectories());\n        task.includes(new Callable<List<FileCollection>>() {\n            public List<FileCollection> call() {\n                Collection<NativeDependencySet> libs = binary.getLibs((DependentSourceSet) sourceSet);\n                return CollectionUtils.collect(libs, new Transformer<FileCollection, NativeDependencySet>() {\n                    public FileCollection transform(NativeDependencySet original) {\n                        return original.getIncludeRoots();\n                    }\n                });\n            }\n        });\n\n        for (String toolName : languageTransform.getBinaryTools().keySet()) {\n            Tool tool = binary.getToolByName(toolName);\n            if (tool instanceof PreprocessingTool) {\n                task.setMacros(((PreprocessingTool) tool).getMacros());\n            }\n\n            task.setCompilerArgs(tool.getArgs());\n        }\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultPrebuiltLibrary(String name, SourceDirectorySetFactory sourceDirectorySetFactory) {\n        this.name = name;\n        headers = sourceDirectorySetFactory.create(\"headers\");\n        binaries = new DefaultDomainObjectSet<NativeLibraryBinary>(NativeLibraryBinary.class);\n    }","id":59173,"modified_method":"public DefaultPrebuiltLibrary(String name, SourceDirectorySetFactory sourceDirectorySetFactory) {\n        this.name = name;\n        headers = sourceDirectorySetFactory.create(\"headers\", \"headers for prebuilt library '\" + name + \"'\");\n        binaries = new DefaultDomainObjectSet<NativeLibraryBinary>(NativeLibraryBinary.class);\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public FileCollection getLinkFiles() {\n        return createFileCollection(getSharedLibraryLinkFile(), \"Link files\", \"Shared library link file\");\n    }","id":59174,"modified_method":"@Override\n    public FileCollection getLinkFiles() {\n        return createFileCollection(getSharedLibraryLinkFile(), \"link files\", \"Shared library link files\");\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public FileCollection getRuntimeFiles() {\n        return createFileCollection(getSharedLibraryFile(), \"Runtime files\", \"Shared library runtime file\");\n    }","id":59175,"modified_method":"@Override\n    public FileCollection getRuntimeFiles() {\n        return createFileCollection(getSharedLibraryFile(), \"runtime files\", \"Shared library runtime files\");\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public FileCollection getRuntimeFiles() {\n        return fileCollectionFactory.empty(\"Runtime files for \" + getDisplayName());\n    }","id":59176,"modified_method":"@Override\n    public FileCollection getRuntimeFiles() {\n        return fileCollectionFactory.empty(\"runtime files for \" + getDisplayName());\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public FileCollection getLinkFiles() {\n        return createFileCollection(getStaticLibraryFile(), \"Link files\", \"Static library file\");\n    }","id":59177,"modified_method":"@Override\n    public FileCollection getLinkFiles() {\n        return createFileCollection(getStaticLibraryFile(), \"link files\", \"Static library file\");\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Finalize\n        void applyHeaderSourceSetConventions(@Each HeaderExportingSourceSet headerSourceSet) {\n            // Only apply default locations when none explicitly configured\n            if (headerSourceSet.getExportedHeaders().getSrcDirs().isEmpty()) {\n                headerSourceSet.getExportedHeaders().srcDir(\"src/\" + headerSourceSet.getParentName() + \"/headers\");\n            }\n\n            headerSourceSet.getImplicitHeaders().setSrcDirs(headerSourceSet.getSource().getSrcDirs());\n            headerSourceSet.getImplicitHeaders().include(\"**/*.h\");\n        }","id":59178,"modified_method":"@Finalize\n        void applyHeaderSourceSetConventions(@Each HeaderExportingSourceSet headerSourceSet) {\n            // Only apply default locations when none explicitly configured\n            if (headerSourceSet.getExportedHeaders().getSourceDirectories().isEmpty()) {\n                headerSourceSet.getExportedHeaders().srcDir(\"src/\" + headerSourceSet.getParentName() + \"/headers\");\n            }\n\n            headerSourceSet.getImplicitHeaders().setSrcDirs(headerSourceSet.getSource().getSourceDirectories());\n            headerSourceSet.getImplicitHeaders().include(\"**/*.h\");\n        }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    protected void configureCompileTask(AbstractNativeCompileTask task, final NativeBinarySpecInternal binary, final LanguageSourceSetInternal languageSourceSet) {\n        // Note that the sourceSet is the sourceSet this pre-compiled header will be used with - it's not an\n        // input sourceSet to the compile task.\n        final DependentSourceSetInternal sourceSet = (DependentSourceSetInternal) languageSourceSet;\n\n        task.setDescription(\"Compiles a pre-compiled header for the \" + sourceSet + \" of \" + binary);\n\n        // Add the source of the source set to the include paths to resolve any headers that may be in source directories\n        task.includes(new Callable<Set<File>>() {\n            public Set<File> call() throws Exception {\n                return sourceSet.getSource().getSrcDirs();\n            }\n        });\n\n        final Project project = task.getProject();\n        task.source(sourceSet.getPrefixHeaderFile());\n\n        task.setObjectFileDir(new File(binary.getNamingScheme().getOutputDirectory(project.getBuildDir(), \"objs\"), languageSourceSet.getProjectScopedName() + \"PCH\"));\n\n        task.dependsOn(project.getTasks().withType(PrefixHeaderFileGenerateTask.class).matching(new Spec<PrefixHeaderFileGenerateTask>() {\n            @Override\n            public boolean isSatisfiedBy(PrefixHeaderFileGenerateTask prefixHeaderFileGenerateTask) {\n                return prefixHeaderFileGenerateTask.getPrefixHeaderFile().equals(sourceSet.getPrefixHeaderFile());\n            }\n        }));\n\n        // This is so that VisualCpp has the object file of the generated source file available at link time\n        binary.binaryInputs(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.obj\", \"**/*.o\")));\n\n        PreCompiledHeader pch = binary.getPrefixFileToPCH().get(sourceSet.getPrefixHeaderFile());\n        pch.setPchObjects(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.pch\", \"**/*.gch\")));\n        pch.builtBy(task);\n    }","id":59179,"modified_method":"@Override\n    protected void configureCompileTask(AbstractNativeCompileTask task, final NativeBinarySpecInternal binary, final LanguageSourceSetInternal languageSourceSet) {\n        // Note that the sourceSet is the sourceSet this pre-compiled header will be used with - it's not an\n        // input sourceSet to the compile task.\n        final DependentSourceSetInternal sourceSet = (DependentSourceSetInternal) languageSourceSet;\n\n        task.setDescription(\"Compiles a pre-compiled header for the \" + sourceSet + \" of \" + binary);\n\n        // Add the source of the source set to the include paths to resolve any headers that may be in source directories\n        task.includes(sourceSet.getSource().getSourceDirectories());\n\n        final Project project = task.getProject();\n        task.source(sourceSet.getPrefixHeaderFile());\n\n        task.setObjectFileDir(new File(binary.getNamingScheme().getOutputDirectory(project.getBuildDir(), \"objs\"), languageSourceSet.getProjectScopedName() + \"PCH\"));\n\n        task.dependsOn(project.getTasks().withType(PrefixHeaderFileGenerateTask.class).matching(new Spec<PrefixHeaderFileGenerateTask>() {\n            @Override\n            public boolean isSatisfiedBy(PrefixHeaderFileGenerateTask prefixHeaderFileGenerateTask) {\n                return prefixHeaderFileGenerateTask.getPrefixHeaderFile().equals(sourceSet.getPrefixHeaderFile());\n            }\n        }));\n\n        // This is so that VisualCpp has the object file of the generated source file available at link time\n        binary.binaryInputs(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.obj\", \"**/*.o\")));\n\n        PreCompiledHeader pch = binary.getPrefixFileToPCH().get(sourceSet.getPrefixHeaderFile());\n        pch.setPchObjects(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.pch\", \"**/*.gch\")));\n        pch.builtBy(task);\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"private void configureResourceCompileTask(WindowsResourceCompile task, final NativeBinarySpecInternal binary, final WindowsResourceSet sourceSet) {\n        task.setDescription(\"Compiles resources of the \" + sourceSet + \" of \" + binary);\n\n        task.setToolChain(binary.getToolChain());\n        task.setTargetPlatform(binary.getTargetPlatform());\n\n        task.includes(new Callable<Set<File>>() {\n            public Set<File> call() {\n                return sourceSet.getExportedHeaders().getSrcDirs();\n            }\n        });\n        task.source(sourceSet.getSource());\n\n        final Project project = task.getProject();\n        task.setOutputDir(new File(binary.getNamingScheme().getOutputDirectory(project.getBuildDir(), \"objs\"), ((LanguageSourceSetInternal) sourceSet).getProjectScopedName()));\n\n        PreprocessingTool rcCompiler = (PreprocessingTool) binary.getToolByName(\"rcCompiler\");\n        task.setMacros(rcCompiler.getMacros());\n        task.setCompilerArgs(rcCompiler.getArgs());\n\n        FileTree resourceOutputs = task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.res\"));\n        binary.binaryInputs(resourceOutputs);\n        if (binary instanceof StaticLibraryBinarySpecInternal) {\n            ((StaticLibraryBinarySpecInternal) binary).additionalLinkFiles(resourceOutputs);\n        }\n    }","id":59180,"modified_method":"private void configureResourceCompileTask(WindowsResourceCompile task, final NativeBinarySpecInternal binary, final WindowsResourceSet sourceSet) {\n        task.setDescription(\"Compiles resources of the \" + sourceSet + \" of \" + binary);\n\n        task.setToolChain(binary.getToolChain());\n        task.setTargetPlatform(binary.getTargetPlatform());\n\n        task.includes(sourceSet.getExportedHeaders().getSourceDirectories());\n        task.source(sourceSet.getSource());\n\n        final Project project = task.getProject();\n        task.setOutputDir(new File(binary.getNamingScheme().getOutputDirectory(project.getBuildDir(), \"objs\"), ((LanguageSourceSetInternal) sourceSet).getProjectScopedName()));\n\n        PreprocessingTool rcCompiler = (PreprocessingTool) binary.getToolByName(\"rcCompiler\");\n        task.setMacros(rcCompiler.getMacros());\n        task.setCompilerArgs(rcCompiler.getArgs());\n\n        FileTree resourceOutputs = task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(\"**/*.res\"));\n        binary.binaryInputs(resourceOutputs);\n        if (binary instanceof StaticLibraryBinarySpecInternal) {\n            ((StaticLibraryBinarySpecInternal) binary).additionalLinkFiles(resourceOutputs);\n        }\n    }","commit_id":"4a6b25b6c2baa3f9ae7042186cd1ee8f8274f165","url":"https://github.com/gradle/gradle"},{"original_method":"public ConsoleProgressDialog(ConsoleProcess consoleProcess)\n   {\n      consoleProcess_ = consoleProcess;\n\n      registrations_ = new HandlerRegistrations();\n      registrations_.add(consoleProcess.addConsoleOutputHandler(this));\n      registrations_.add(consoleProcess.addProcessExitHandler(this));\n\n      output_ = new PreWidget();\n      output_.setSize(\"700px\", \"300px\");\n      Style style = output_.getElement().getStyle();\n      style.setBackgroundColor(\"white\");\n      style.setBorderStyle(BorderStyle.SOLID);\n      style.setBorderColor(\"#BBB\");\n      style.setBorderWidth(1, Style.Unit.PX);\n      style.setOverflowY(Overflow.AUTO);\n      style.setOverflowX(Overflow.AUTO);\n\n      button_ = new ThemedButton(\"Stop\", this);\n      addOkButton(button_);\n\n      consoleProcess.start(new SimpleRequestCallback<Void>()\n      {\n         @Override\n         public void onError(ServerError error)\n         {\n            // Show error and stop\n            super.onError(error);\n            closeDialog();\n         }\n      });\n   }","id":59181,"modified_method":"public ConsoleProgressDialog(String title, ConsoleProcess consoleProcess)\n   {\n      consoleProcess_ = consoleProcess;\n\n      setText(title);\n\n      registrations_ = new HandlerRegistrations();\n      registrations_.add(consoleProcess.addConsoleOutputHandler(this));\n      registrations_.add(consoleProcess.addProcessExitHandler(this));\n\n      output_ = new PreWidget();\n      output_.setSize(\"700px\", \"300px\");\n      Style style = output_.getElement().getStyle();\n      style.setBackgroundColor(\"white\");\n      style.setBorderStyle(BorderStyle.SOLID);\n      style.setBorderColor(\"#BBB\");\n      style.setBorderWidth(1, Style.Unit.PX);\n      style.setOverflowY(Overflow.AUTO);\n      style.setOverflowX(Overflow.AUTO);\n\n      button_ = new ThemedButton(\"Stop\", this);\n      addOkButton(button_);\n\n      consoleProcess.start(new SimpleRequestCallback<Void>()\n      {\n         @Override\n         public void onError(ServerError error)\n         {\n            // Show error and stop\n            super.onError(error);\n            closeDialog();\n         }\n      });\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public HistoryPanel(BranchToolbarButton branchToolbarButton)\n   {\n      splitPanel_ = new SplitLayoutPanel(4);\n      initWidget(GWT.<Binder>create(Binder.class).createAndBindUi(this));\n      Styles styles = GWT.<Resources>create(Resources.class).styles();\n\n      commitDetail_.setScrollPanel(detailScrollPanel_);\n\n      topToolbar_.addStyleName(styles.toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", false);\n      topToolbar_.addLeftWidget(switchViewButton_);\n      topToolbar_.addLeftWidget(branchToolbarButton);\n   }","id":59182,"modified_method":"@Inject\n   public HistoryPanel(BranchToolbarButton branchToolbarButton,\n                       Commands commands)\n   {\n      splitPanel_ = new SplitLayoutPanel(4);\n      initWidget(GWT.<Binder>create(Binder.class).createAndBindUi(this));\n      Styles styles = GWT.<Resources>create(Resources.class).styles();\n\n      commitDetail_.setScrollPanel(detailScrollPanel_);\n\n      topToolbar_.addStyleName(styles.toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", false);\n      topToolbar_.addLeftWidget(switchViewButton_);\n      topToolbar_.addLeftWidget(branchToolbarButton);\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Refresh\", commands.vcsRefresh().getImageResource(),\n            commands.vcsRefresh()));\n\n      topToolbar_.addRightSeparator();\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Pull\", commands.vcsPull().getImageResource(),\n            commands.vcsPull()));\n\n      topToolbar_.addRightSeparator();\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Push\", commands.vcsPush().getImageResource(),\n            commands.vcsPush()));\n\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public ReviewPanel(ChangelistTablePresenter changelist,\n                      LineTableView diffPane,\n                      ConsoleBarFramePanel consoleBarFramePanel,\n                      Commands commands,\n                      FileTypeRegistry fileTypeRegistry,\n                      BranchToolbarButton branchToolbarButton)\n   {\n      fileTypeRegistry_ = fileTypeRegistry;\n      splitPanel_ = new SplitLayoutPanel(4);\n      splitPanelCommit_ = new SplitLayoutPanel(4);\n\n      commitButton_ = new ThemedButton(\"Commit\");\n      commitButton_.addStyleName(RES.styles().commitButton());\n\n      changelist_ = changelist.getView();\n      lines_ = diffPane;\n\n      Widget widget = GWT.<Binder>create(Binder.class).createAndBindUi(this);\n      consoleBarFramePanel.setWidget(widget);\n\n      initWidget(consoleBarFramePanel);\n\n      fileIcon_.setResource(RES.blankFileIcon());\n      fileIcon_.addStyleName(RES.styles().fileIcon());\n\n      topToolbar_.addStyleName(RES.styles().toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", true);\n      topToolbar_.addLeftWidget(switchViewButton_);\n\n      topToolbar_.addLeftWidget(branchToolbarButton);\n\n      stageAllFilesButton_ = topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Stage All Files\", RES.stageAllFiles(), (ClickHandler) null));\n\n      topToolbar_.addLeftSeparator();\n\n      ToolbarPopupMenu discardMenu = new ToolbarPopupMenu();\n      discardSelectedFiles_ = new ClickCommand();\n      discardAllFiles_ = new ClickCommand();\n      discardMenu.addItem(new MenuItem(\"Discard Selected\",\n                                       discardSelectedFiles_));\n      discardMenu.addItem(new MenuItem(\"Discard All Files\", discardAllFiles_));\n      topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard\", RES.discard(), discardMenu));\n\n      topToolbar_.addLeftSeparator();\n\n      ignoreButton_ = topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Ignore\", RES.ignore(), (ClickHandler) null));\n\n      refreshButton_ = topToolbar_.addRightWidget(new ToolbarButton(\n            \"Refresh\", commands.vcsRefresh().getImageResource(),\n            (ClickHandler) null));\n\n      topToolbar_.addRightSeparator();\n\n      pullButton_ = topToolbar_.addRightWidget(new ToolbarButton(\n            \"Pull\", RES.pull(), (ClickHandler) null));\n\n      topToolbar_.addRightSeparator();\n\n      pushButton_ = topToolbar_.addRightWidget(new ToolbarButton(\n            \"Push\", RES.push(), (ClickHandler) null));\n\n      diffToolbar_.addStyleName(RES.styles().toolbar());\n      diffToolbar_.addStyleName(RES.styles().diffToolbar());\n\n      stageAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Stage All\", RES.stage(), (ClickHandler) null));\n      diffToolbar_.addLeftSeparator();\n      discardAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard All\", RES.discard(), (ClickHandler) null));\n\n      unstageAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Unstage All\", RES.discard(), (ClickHandler) null));\n      unstageAllButton_.setVisible(false);\n\n      unstagedCheckBox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> e)\n         {\n            ValueChangeEvent.fire(stagedCheckBox_, stagedCheckBox_.getValue());\n         }\n      });\n\n      stagedCheckBox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> e)\n         {\n            stageAllButton_.setVisible(!e.getValue());\n            discardAllButton_.setVisible(!e.getValue());\n            unstageAllButton_.setVisible(e.getValue());\n            diffToolbar_.invalidateSeparators();\n         }\n      });\n\n      listBoxAdapter_ = new ListBoxAdapter(contextLines_);\n   }","id":59183,"modified_method":"@Inject\n   public ReviewPanel(ChangelistTablePresenter changelist,\n                      LineTableView diffPane,\n                      ConsoleBarFramePanel consoleBarFramePanel,\n                      Commands commands,\n                      FileTypeRegistry fileTypeRegistry,\n                      BranchToolbarButton branchToolbarButton)\n   {\n      fileTypeRegistry_ = fileTypeRegistry;\n      splitPanel_ = new SplitLayoutPanel(4);\n      splitPanelCommit_ = new SplitLayoutPanel(4);\n\n      commitButton_ = new ThemedButton(\"Commit\");\n      commitButton_.addStyleName(RES.styles().commitButton());\n\n      changelist_ = changelist.getView();\n      lines_ = diffPane;\n\n      Widget widget = GWT.<Binder>create(Binder.class).createAndBindUi(this);\n      consoleBarFramePanel.setWidget(widget);\n\n      initWidget(consoleBarFramePanel);\n\n      fileIcon_.setResource(RES.blankFileIcon());\n      fileIcon_.addStyleName(RES.styles().fileIcon());\n\n      topToolbar_.addStyleName(RES.styles().toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", true);\n      topToolbar_.addLeftWidget(switchViewButton_);\n\n      topToolbar_.addLeftWidget(branchToolbarButton);\n\n      stageAllFilesButton_ = topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Stage All Files\", RES.stageAllFiles(), (ClickHandler) null));\n\n      topToolbar_.addLeftSeparator();\n\n      ToolbarPopupMenu discardMenu = new ToolbarPopupMenu();\n      discardSelectedFiles_ = new ClickCommand();\n      discardAllFiles_ = new ClickCommand();\n      discardMenu.addItem(new MenuItem(\"Discard Selected\",\n                                       discardSelectedFiles_));\n      discardMenu.addItem(new MenuItem(\"Discard All Files\", discardAllFiles_));\n      topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard\", RES.discard(), discardMenu));\n\n      topToolbar_.addLeftSeparator();\n\n      ignoreButton_ = topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Ignore\", RES.ignore(), (ClickHandler) null));\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Refresh\", commands.vcsRefresh().getImageResource(),\n            commands.vcsRefresh()));\n\n      topToolbar_.addRightSeparator();\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Pull\", commands.vcsPull().getImageResource(),\n            commands.vcsPull()));\n\n      topToolbar_.addRightSeparator();\n\n      topToolbar_.addRightWidget(new ToolbarButton(\n            \"Push\", commands.vcsPush().getImageResource(),\n            commands.vcsPush()));\n\n      diffToolbar_.addStyleName(RES.styles().toolbar());\n      diffToolbar_.addStyleName(RES.styles().diffToolbar());\n\n      stageAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Stage All\", RES.stage(), (ClickHandler) null));\n      diffToolbar_.addLeftSeparator();\n      discardAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard All\", RES.discard(), (ClickHandler) null));\n\n      unstageAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Unstage All\", RES.discard(), (ClickHandler) null));\n      unstageAllButton_.setVisible(false);\n\n      unstagedCheckBox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> e)\n         {\n            ValueChangeEvent.fire(stagedCheckBox_, stagedCheckBox_.getValue());\n         }\n      });\n\n      stagedCheckBox_.addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> e)\n         {\n            stageAllButton_.setVisible(!e.getValue());\n            discardAllButton_.setVisible(!e.getValue());\n            unstageAllButton_.setVisible(e.getValue());\n            diffToolbar_.invalidateSeparators();\n         }\n      });\n\n      listBoxAdapter_ = new ListBoxAdapter(contextLines_);\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public ReviewPresenter(VCSServerOperations server,\n                          Display view,\n                          final EventBus events,\n                          final VcsState vcsState,\n                          final Commands commands)\n   {\n      server_ = server;\n      view_ = view;\n\n      vcsState.addVcsRefreshHandler(new VcsRefreshHandler()\n      {\n         @Override\n         public void onVcsRefresh(VcsRefreshEvent event)\n         {\n            updateDiff(false);\n         }\n      });\n\n      // Ensure that we're fresh\n      vcsState.refresh();\n\n      view_.getChangelistTable().addSelectionChangeHandler(new Handler()\n      {\n         @Override\n         public void onSelectionChange(SelectionChangeEvent event)\n         {\n            updateDiff(true);\n         }\n      });\n\n      view_.getStageAllFilesButton().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsFullStatus(new SimpleRequestCallback<JsArray<StatusAndPath>>()\n            {\n               @Override\n               public void onResponseReceived(JsArray<StatusAndPath> response)\n               {\n                  super.onResponseReceived(response);\n\n                  ArrayList<String> paths = new ArrayList<String>();\n                  for (int i = 0; i < response.length(); i++)\n                     paths.add(response.get(i).getPath());\n\n                  server_.vcsStage(paths, new SimpleRequestCallback<Void>());\n               }\n            });\n         }\n      });\n\n      view_.getDiscardSelectedFiles().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            ArrayList<String> selectedPaths = view_.getSelectedDiscardablePaths();\n\n            if (selectedPaths.size() > 0)\n            {\n               server_.vcsDiscard(selectedPaths,\n                                  new SimpleRequestCallback<Void>());\n            }\n         }\n      });\n\n      view_.getDiscardAllFiles().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsFullStatus(new SimpleRequestCallback<JsArray<StatusAndPath>>() {\n               @Override\n               public void onResponseReceived(JsArray<StatusAndPath> response)\n               {\n                  super.onResponseReceived(response);\n\n                  ArrayList<String> paths = new ArrayList<String>();\n                  for (int i = 0; i < response.length(); i++)\n                     if (response.get(i).isDiscardable())\n                        paths.add(response.get(i).getPath());\n\n                  if (paths.size() > 0)\n                     server_.vcsDiscard(paths, new SimpleRequestCallback<Void>());\n               }\n            });\n         }\n      });\n\n      view_.getRefreshButton().addClickHandler(commands.vcsRefresh());\n      view_.getPullButton().addClickHandler(commands.vcsPull());\n      view_.getPushButton().addClickHandler(commands.vcsPush());\n\n      view_.getCommitIsAmend().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> booleanValueChangeEvent)\n         {\n            server_.vcsHistory(\"\", 1, new ServerRequestCallback<RpcObjectList<CommitInfo>>() {\n               @Override\n               public void onResponseReceived(RpcObjectList<CommitInfo> response)\n               {\n                  if (response.length() == 1)\n                  {\n                     String description = response.get(0).getDescription();\n\n                     if (view_.getCommitIsAmend().getValue())\n                     {\n                        if (view_.getCommitMessage().getText().length() == 0)\n                           view_.getCommitMessage().setText(description);\n                     }\n                     else\n                     {\n                        if (view_.getCommitMessage().getText().equals(description))\n                           view_.getCommitMessage().setText(\"\");\n                     }\n                  }\n               }\n\n               @Override\n               public void onError(ServerError error)\n               {\n                  Debug.logError(error);\n               }\n            });\n         }\n      });\n\n      view_.getStageAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Stage, false));\n      view_.getDiscardAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Working, true));\n      view_.getUnstageAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Stage, true));\n      view_.getStagedCheckBox().addValueChangeHandler(\n            new ValueChangeHandler<Boolean>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<Boolean> event)\n               {\n                  updateDiff(false);\n               }\n            });\n      view_.getLineTableDisplay().addDiffChunkActionHandler(new ApplyPatchHandler());\n      view_.getLineTableDisplay().addDiffLineActionHandler(new ApplyPatchHandler());\n\n      view_.getLineTableDisplay().addSelectionChangeHandler(new SelectionChangeEvent.Handler()\n      {\n         @Override\n         public void onSelectionChange(SelectionChangeEvent event)\n         {\n            if (view_.getLineTableDisplay().getSelectedLines().size() > 0)\n            {\n               view_.setUnstageButtonLabel(\"Unstage Selection\");\n               view_.setStageButtonLabel(\"Stage Selection\");\n               view_.setDiscardButtonLabel(\"Discard Selection\");\n            }\n            else\n            {\n               view_.setUnstageButtonLabel(\"Unstage All\");\n               view_.setStageButtonLabel(\"Stage All\");\n               view_.setDiscardButtonLabel(\"Discard All\");\n            }\n         }\n      });\n\n      view_.getContextLines().addValueChangeHandler(new ValueChangeHandler<Integer>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Integer> event)\n         {\n            updateDiff(false);\n         }\n      });\n\n      view_.getCommitButton().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsCommitGit(view_.getCommitMessage().getText(),\n                                 view_.getCommitIsAmend().getValue(),\n                                 false,\n                                 new SimpleRequestCallback<Void>()\n                                 {\n                                    @Override\n                                    public void onResponseReceived(Void resp)\n                                    {\n                                       super.onResponseReceived(resp);\n                                       view_.getCommitMessage().setText(\"\");\n                                    }\n                                 });\n         }\n      });\n   }","id":59184,"modified_method":"@Inject\n   public ReviewPresenter(VCSServerOperations server,\n                          Display view,\n                          final EventBus events,\n                          final VcsState vcsState,\n                          final Commands commands)\n   {\n      server_ = server;\n      view_ = view;\n\n      vcsState.addVcsRefreshHandler(new VcsRefreshHandler()\n      {\n         @Override\n         public void onVcsRefresh(VcsRefreshEvent event)\n         {\n            updateDiff(false);\n         }\n      });\n\n      // Ensure that we're fresh\n      vcsState.refresh();\n\n      view_.getChangelistTable().addSelectionChangeHandler(new Handler()\n      {\n         @Override\n         public void onSelectionChange(SelectionChangeEvent event)\n         {\n            updateDiff(true);\n         }\n      });\n\n      view_.getStageAllFilesButton().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsFullStatus(new SimpleRequestCallback<JsArray<StatusAndPath>>()\n            {\n               @Override\n               public void onResponseReceived(JsArray<StatusAndPath> response)\n               {\n                  super.onResponseReceived(response);\n\n                  ArrayList<String> paths = new ArrayList<String>();\n                  for (int i = 0; i < response.length(); i++)\n                     paths.add(response.get(i).getPath());\n\n                  server_.vcsStage(paths, new SimpleRequestCallback<Void>());\n               }\n            });\n         }\n      });\n\n      view_.getDiscardSelectedFiles().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            ArrayList<String> selectedPaths = view_.getSelectedDiscardablePaths();\n\n            if (selectedPaths.size() > 0)\n            {\n               server_.vcsDiscard(selectedPaths,\n                                  new SimpleRequestCallback<Void>());\n            }\n         }\n      });\n\n      view_.getDiscardAllFiles().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsFullStatus(new SimpleRequestCallback<JsArray<StatusAndPath>>() {\n               @Override\n               public void onResponseReceived(JsArray<StatusAndPath> response)\n               {\n                  super.onResponseReceived(response);\n\n                  ArrayList<String> paths = new ArrayList<String>();\n                  for (int i = 0; i < response.length(); i++)\n                     if (response.get(i).isDiscardable())\n                        paths.add(response.get(i).getPath());\n\n                  if (paths.size() > 0)\n                     server_.vcsDiscard(paths, new SimpleRequestCallback<Void>());\n               }\n            });\n         }\n      });\n\n      view_.getCommitIsAmend().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> booleanValueChangeEvent)\n         {\n            server_.vcsHistory(\"\", 1, new ServerRequestCallback<RpcObjectList<CommitInfo>>() {\n               @Override\n               public void onResponseReceived(RpcObjectList<CommitInfo> response)\n               {\n                  if (response.length() == 1)\n                  {\n                     String description = response.get(0).getDescription();\n\n                     if (view_.getCommitIsAmend().getValue())\n                     {\n                        if (view_.getCommitMessage().getText().length() == 0)\n                           view_.getCommitMessage().setText(description);\n                     }\n                     else\n                     {\n                        if (view_.getCommitMessage().getText().equals(description))\n                           view_.getCommitMessage().setText(\"\");\n                     }\n                  }\n               }\n\n               @Override\n               public void onError(ServerError error)\n               {\n                  Debug.logError(error);\n               }\n            });\n         }\n      });\n\n      view_.getStageAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Stage, false));\n      view_.getDiscardAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Working, true));\n      view_.getUnstageAllButton().addClickHandler(\n            new ApplyPatchClickHandler(PatchMode.Stage, true));\n      view_.getStagedCheckBox().addValueChangeHandler(\n            new ValueChangeHandler<Boolean>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<Boolean> event)\n               {\n                  updateDiff(false);\n               }\n            });\n      view_.getLineTableDisplay().addDiffChunkActionHandler(new ApplyPatchHandler());\n      view_.getLineTableDisplay().addDiffLineActionHandler(new ApplyPatchHandler());\n\n      view_.getLineTableDisplay().addSelectionChangeHandler(new SelectionChangeEvent.Handler()\n      {\n         @Override\n         public void onSelectionChange(SelectionChangeEvent event)\n         {\n            if (view_.getLineTableDisplay().getSelectedLines().size() > 0)\n            {\n               view_.setUnstageButtonLabel(\"Unstage Selection\");\n               view_.setStageButtonLabel(\"Stage Selection\");\n               view_.setDiscardButtonLabel(\"Discard Selection\");\n            }\n            else\n            {\n               view_.setUnstageButtonLabel(\"Unstage All\");\n               view_.setStageButtonLabel(\"Stage All\");\n               view_.setDiscardButtonLabel(\"Discard All\");\n            }\n         }\n      });\n\n      view_.getContextLines().addValueChangeHandler(new ValueChangeHandler<Integer>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Integer> event)\n         {\n            updateDiff(false);\n         }\n      });\n\n      view_.getCommitButton().addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            server_.vcsCommitGit(view_.getCommitMessage().getText(),\n                                 view_.getCommitIsAmend().getValue(),\n                                 false,\n                                 new SimpleRequestCallback<Void>()\n                                 {\n                                    @Override\n                                    public void onResponseReceived(Void resp)\n                                    {\n                                       super.onResponseReceived(resp);\n                                       view_.getCommitMessage().setText(\"\");\n                                    }\n                                 });\n         }\n      });\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Handler\n   void onVcsPull()\n   {\n      server_.vcsPull(new SimpleRequestCallback<ConsoleProcess>() {\n         @Override\n         public void onResponseReceived(ConsoleProcess proc)\n         {\n            new ConsoleProgressDialog(proc).showModal();\n         }\n      });\n   }","id":59185,"modified_method":"@Handler\n   void onVcsPull()\n   {\n      server_.vcsPull(new SimpleRequestCallback<ConsoleProcess>() {\n         @Override\n         public void onResponseReceived(ConsoleProcess proc)\n         {\n            new ConsoleProgressDialog(\"Pull\", proc).showModal();\n         }\n      });\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Handler\n   void onVcsPush()\n   {\n      server_.vcsPush(new SimpleRequestCallback<ConsoleProcess>() {\n         @Override\n         public void onResponseReceived(ConsoleProcess proc)\n         {\n            new ConsoleProgressDialog(proc).showModal();\n         }\n      });\n   }","id":59186,"modified_method":"@Handler\n   void onVcsPush()\n   {\n      server_.vcsPush(new SimpleRequestCallback<ConsoleProcess>() {\n         @Override\n         public void onResponseReceived(ConsoleProcess proc)\n         {\n            new ConsoleProgressDialog(\"Push\", proc).showModal();\n         }\n      });\n   }","commit_id":"12782ce251abe97090390fbe39f999bb94f5a8d5","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void scrapeTag1(String tagname, Properties tagopts, char[] text) {\r\n        // System.out.println(\"ScrapeTag1: tagname=\" + tagname + \", opts=\" + tagopts.toString() + \", text=\" + new String(text));\r\n        if ((tagname.equalsIgnoreCase(\"a\")) && (text.length < 2048)) {\r\n            String href = tagopts.getProperty(\"href\", \"\");\r\n            if (href.length() > 0) {\r\n                yacyURL url = absolutePath(href);\r\n                String f = url.getFile();\r\n                int p = f.lastIndexOf('.');\r\n                String type = (p < 0) ? \"\" : f.substring(p + 1);\r\n                if (type.equals(\"png\") || type.equals(\"gif\") || type.equals(\"jpg\") || type.equals(\"jpeg\")) {\r\n                    // special handling of such urls: put them to the image urls\r\n                    htmlFilterImageEntry ie = new htmlFilterImageEntry(url, super.stripAll(new serverCharBuffer(text)).trim().toString(), -1, -1);\r\n                    addImage(images, ie);\r\n                } else {\r\n                    anchors.put(url, super.stripAll(new serverCharBuffer(text)).trim().toString());\r\n                }\r\n            }\r\n        }\r\n        String h;\r\n        if ((tagname.equalsIgnoreCase(\"h1\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[0].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h2\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[1].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h3\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[2].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h4\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[3].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"title\")) && (text.length < 1024)) {\r\n            title = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag1(tagname, tagopts, text);\r\n    }","id":59187,"modified_method":"public void scrapeTag1(String tagname, Properties tagopts, char[] text) {\r\n        // System.out.println(\"ScrapeTag1: tagname=\" + tagname + \", opts=\" + tagopts.toString() + \", text=\" + new String(text));\r\n        if ((tagname.equalsIgnoreCase(\"a\")) && (text.length < 2048)) {\r\n            String href = tagopts.getProperty(\"href\", \"\");\r\n            yacyURL url;\r\n            if ((href.length() > 0) && ((url = absolutePath(href)) != null)) {\r\n                String f = url.getFile();\r\n                int p = f.lastIndexOf('.');\r\n                String type = (p < 0) ? \"\" : f.substring(p + 1);\r\n                if (type.equals(\"png\") || type.equals(\"gif\") || type.equals(\"jpg\") || type.equals(\"jpeg\")) {\r\n                    // special handling of such urls: put them to the image urls\r\n                    htmlFilterImageEntry ie = new htmlFilterImageEntry(url, super.stripAll(new serverCharBuffer(text)).trim().toString(), -1, -1);\r\n                    addImage(images, ie);\r\n                } else {\r\n                    anchors.put(url, super.stripAll(new serverCharBuffer(text)).trim().toString());\r\n                }\r\n            }\r\n        }\r\n        String h;\r\n        if ((tagname.equalsIgnoreCase(\"h1\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[0].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h2\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[1].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h3\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[2].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"h4\")) && (text.length < 1024)) {\r\n            h = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n            if (h.length() > 0) headlines[3].add(h);\r\n        }\r\n        if ((tagname.equalsIgnoreCase(\"title\")) && (text.length < 1024)) {\r\n            title = cleanLine(super.stripAll(new serverCharBuffer(text)).toString());\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag1(tagname, tagopts, text);\r\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private static void parseSSI(serverByteBuffer in, int off, int len, OutputStream out, String authorization) {\n        if (in.startsWith(\"<!--#include virtual=\\\"\".getBytes(), off)) {\n            int q = in.indexOf(\"\\\"\".getBytes(), off + 22);\n            if (q > 0) {\n                String path = in.toString(off + 22, q);\n                writeContent(path, out, authorization);\n            }\n        }\n    }","id":59188,"modified_method":"private static void parseSSI(serverByteBuffer in, int off, int len, OutputStream out, String authorization, String requesthost) {\n        if (in.startsWith(\"<!--#include virtual=\\\"\".getBytes(), off)) {\n            int q = in.indexOf(\"\\\"\".getBytes(), off + 22);\n            if (q > 0) {\n                String path = in.toString(off + 22, q);\n                writeContent(path, out, authorization, requesthost);\n            }\n        }\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static void writeSSI(serverByteBuffer in, int off, OutputStream out, String authorization) throws IOException {\n        int p = in.indexOf(\"<!--#\".getBytes(), off);\n        if (p >= 0) {\n            int q = in.indexOf(\"-->\".getBytes(), p + 10);\n            if (out instanceof httpChunkedOutputStream) {\n                ((httpChunkedOutputStream) out).write(in, off, p - off);\n            } else {\n                out.write(in.getBytes(off, p - off));\n            }\n            parseSSI(in, p, q + 3 - p, out, authorization);\n            writeSSI(in, q + 3, out, authorization);\n        } else /* p < 0 */ {\n            if (out instanceof httpChunkedOutputStream) {\n                ((httpChunkedOutputStream) out).write(in, off, in.length() - off);\n            } else {\n                out.write(in.getBytes(off, in.length() - off));\n            }\n        }\n    }","id":59189,"modified_method":"public static void writeSSI(serverByteBuffer in, int off, OutputStream out, String authorization, String requesthost) throws IOException {\n        int p = in.indexOf(\"<!--#\".getBytes(), off);\n        if (p >= 0) {\n            int q = in.indexOf(\"-->\".getBytes(), p + 10);\n            if (out instanceof httpChunkedOutputStream) {\n                ((httpChunkedOutputStream) out).write(in, off, p - off);\n            } else {\n                out.write(in.getBytes(off, p - off));\n            }\n            parseSSI(in, p, q + 3 - p, out, authorization, requesthost);\n            writeSSI(in, q + 3, out, authorization, requesthost);\n        } else /* p < 0 */ {\n            if (out instanceof httpChunkedOutputStream) {\n                ((httpChunkedOutputStream) out).write(in, off, in.length() - off);\n            } else {\n                out.write(in.getBytes(off, in.length() - off));\n            }\n        }\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static void writeSSI(serverByteBuffer in, OutputStream out, String authorization) throws IOException {\n        writeSSI(in, 0, out, authorization);\n    }","id":59190,"modified_method":"public static void writeSSI(serverByteBuffer in, OutputStream out, String authorization, String requesthost) throws IOException {\n        writeSSI(in, 0, out, authorization, requesthost);\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private static void writeContent(String path, OutputStream out, String authorization) {\n        // check if there are arguments in path string\n        String args = \"\";\n        int argpos = path.indexOf('?');\n        if (argpos > 0) {\n            args = path.substring(argpos + 1);\n            path = path.substring(0, argpos);\n        }\n        \n        // set up virtual connection properties to call httpdFileHander.doGet()\n        Properties conProp = new Properties();\n        httpHeader header = new httpHeader(httpd.reverseMappingCache);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_METHOD, httpHeader.METHOD_GET);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_PATH, path);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_ARGS, args);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_HTTP_VER, httpHeader.HTTP_VERSION_0_9);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_CLIENTIP, \"127.0.0.1\");\n        header.put(httpHeader.AUTHORIZATION, authorization);\n        httpdFileHandler.doGet(conProp, header, out);\n    }","id":59191,"modified_method":"private static void writeContent(String path, OutputStream out, String authorization, String requesthost) {\n        // check if there are arguments in path string\n        String args = \"\";\n        int argpos = path.indexOf('?');\n        if (argpos > 0) {\n            args = path.substring(argpos + 1);\n            path = path.substring(0, argpos);\n        }\n        \n        // set up virtual connection properties to call httpdFileHander.doGet()\n        Properties conProp = new Properties();\n        httpHeader header = new httpHeader(httpd.reverseMappingCache);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_METHOD, httpHeader.METHOD_GET);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_PATH, path);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_ARGS, args);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_HTTP_VER, httpHeader.HTTP_VERSION_0_9);\n        conProp.setProperty(httpHeader.CONNECTION_PROP_CLIENTIP, requesthost);\n        header.put(httpHeader.AUTHORIZATION, authorization);\n        httpdFileHandler.doGet(conProp, header, out);\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static void doResponse(Properties conProp, httpHeader requestHeader, OutputStream out, InputStream body) {\r\n        \r\n        String path = null;\r\n        try {\r\n            // getting some connection properties            \r\n            String method = conProp.getProperty(httpHeader.CONNECTION_PROP_METHOD);\r\n            path = conProp.getProperty(httpHeader.CONNECTION_PROP_PATH);\r\n            String argsString = conProp.getProperty(httpHeader.CONNECTION_PROP_ARGS); // is null if no args were given\r\n            String httpVersion = conProp.getProperty(httpHeader.CONNECTION_PROP_HTTP_VER);\r\n            \r\n            // check hack attacks in path\r\n            if (path.indexOf(\"..\") >= 0) {\r\n                httpd.sendRespondError(conProp,out,4,403,null,\"Access not allowed\",null);\r\n                return;\r\n            }\r\n            \r\n            // url decoding of path\r\n            try {\r\n                path = URLDecoder.decode(path, \"UTF-8\");\r\n            } catch (UnsupportedEncodingException e) {\r\n                // This should never occur\r\n                assert(false) : \"UnsupportedEncodingException: \" + e.getMessage();\r\n            }\r\n            \r\n            // check permission/granted access\r\n            String authorization = (String) requestHeader.get(httpHeader.AUTHORIZATION);\r\n            String adminAccountBase64MD5 = switchboard.getConfig(httpd.ADMIN_ACCOUNT_B64MD5, \"\");\r\n            \r\n            int pos = path.lastIndexOf(\".\");\r\n            \r\n            if ((path.substring(0,(pos==-1)?path.length():pos)).endsWith(\"_p\") && (adminAccountBase64MD5.length() != 0)) {\r\n                //authentication required\r\n                //userDB\r\n                if(sb.userDB.hasAdminRight(authorization, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP), requestHeader.getHeaderCookies())){\r\n                    //Authentication successful. remove brute-force flag\r\n                    serverCore.bfHost.remove(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                //static\r\n                }else if(authorization != null && httpd.staticAdminAuthenticated(authorization.trim().substring(6), switchboard)==4){\r\n                    //Authentication successful. remove brute-force flag\r\n                    serverCore.bfHost.remove(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                //no auth\r\n                }else if (authorization == null) {\r\n                    // no authorization given in response. Ask for that\r\n                    httpHeader headers = getDefaultHeaders(path);\r\n                    headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"admin log-in\\\"\");\r\n                    //httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                    servletProperties tp=new servletProperties();\r\n                    tp.put(\"returnto\", path);\r\n                    //TODO: separate errorpage Wrong Login / No Login\r\n                    httpd.sendRespondError(conProp, out, 5, 401, \"Wrong Authentication\", \"\", new File(\"proxymsg/authfail.inc\"), tp, null, headers);\r\n                    return;\r\n                } else {\r\n                    // a wrong authentication was given or the userDB user does not have admin access. Ask again\r\n                    String clientIP = conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP, \"unknown-host\");\r\n                    serverLog.logInfo(\"HTTPD\", \"Wrong log-in for account 'admin' in http file handler for path '\" + path + \"' from host '\" + clientIP + \"'\");\r\n                    Integer attempts = (Integer) serverCore.bfHost.get(clientIP);\r\n                    if (attempts == null)\r\n                        serverCore.bfHost.put(clientIP, new Integer(1));\r\n                    else\r\n                        serverCore.bfHost.put(clientIP, new Integer(attempts.intValue() + 1));\r\n    \r\n                    httpHeader headers = getDefaultHeaders(path);\r\n                    headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"admin log-in\\\"\");\r\n                    httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                    return;\r\n                }\r\n            }\r\n        \r\n        \r\n            // parse arguments\r\n            serverObjects args = new serverObjects();\r\n            int argc;\r\n            if (argsString == null) {\r\n                // no args here, maybe a POST with multipart extension\r\n                int length = 0;\r\n                //System.out.println(\"HEADER: \" + requestHeader.toString()); // DEBUG\r\n                if (method.equals(httpHeader.METHOD_POST)) {\r\n    \r\n                    GZIPInputStream gzipBody = null;\r\n                    if (requestHeader.containsKey(httpHeader.CONTENT_LENGTH)) {\r\n                        length = Integer.parseInt((String) requestHeader.get(httpHeader.CONTENT_LENGTH));\r\n                    } else if (requestHeader.gzip()) {\r\n                        length = -1;\r\n                        gzipBody = new GZIPInputStream(body);\r\n                    }\r\n    //                } else {\r\n    //                    httpd.sendRespondError(conProp,out,4,403,null,\"bad post values\",null); \r\n    //                    return;\r\n    //                }\r\n                    \r\n                    // if its a POST, it can be either multipart or as args in the body\r\n                    if ((requestHeader.containsKey(httpHeader.CONTENT_TYPE)) &&\r\n                            (((String) requestHeader.get(httpHeader.CONTENT_TYPE)).toLowerCase().startsWith(\"multipart\"))) {\r\n                        // parse multipart\r\n                        HashMap<String, byte[]> files = httpd.parseMultipart(requestHeader, args, (gzipBody!=null)?gzipBody:body, length);\r\n                        // integrate these files into the args\r\n                        if (files != null) {\r\n                            Iterator<Map.Entry<String, byte[]>> fit = files.entrySet().iterator();\r\n                            Map.Entry<String, byte[]> entry;\r\n                            while (fit.hasNext()) {\r\n                                entry = fit.next();\r\n                                args.put(entry.getKey() + \"$file\", entry.getValue());\r\n                            }\r\n                        }\r\n                        argc = Integer.parseInt((String) requestHeader.get(\"ARGC\"));\r\n                    } else {\r\n                        // parse args in body\r\n                        argc = httpd.parseArgs(args, (gzipBody!=null)?gzipBody:body, length);\r\n                    }\r\n                } else {\r\n                    // no args\r\n                    argsString = null;\r\n                    args = null;\r\n                    argc = 0;\r\n                }\r\n            } else {\r\n                // simple args in URL (stuff after the \"?\")\r\n                argc = httpd.parseArgs(args, argsString);\r\n            }\r\n        \r\n            // check for cross site scripting - attacks in request arguments\r\n            if (argc > 0) {\r\n                // check all values for occurrences of script values\r\n                Iterator<String> e = args.values().iterator(); // enumeration of values\r\n                String val;\r\n                while (e.hasNext()) {\r\n                    val = e.next();\r\n                    if ((val != null) && (val.indexOf(\"<script\") >= 0)) {\r\n                        // deny request\r\n                        httpd.sendRespondError(conProp,out,4,403,null,\"bad post values\",null);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        \r\n            // we are finished with parsing\r\n            // the result of value hand-over is in args and argc\r\n            if (path.length() == 0) {\r\n                httpd.sendRespondError(conProp,out,4,400,null,\"Bad Request\",null);\r\n                out.flush();\r\n                return;\r\n            }\r\n            File targetClass=null;\r\n\r\n            // locate the file\r\n            if (!(path.startsWith(\"/\"))) path = \"/\" + path; // attach leading slash\r\n            \r\n            // a different language can be desired (by i.e. ConfigBasic.html) than the one stored in the locale.language\r\n            String localeSelection = switchboard.getConfig(\"locale.language\",\"default\");\r\n            if (args != null && (args.containsKey(\"language\"))) \r\n            {\r\n                // TODO 9.11.06 Bost: a class with information about available languages is needed. \r\n                // the indexOf(\".\") is just a workaround because there from ConfigLanguage.html commes \"de.lng\" and\r\n                // from ConfigBasic.html comes just \"de\" in the \"language\" parameter\r\n                localeSelection = args.get(\"language\", localeSelection);\r\n                if (localeSelection.indexOf(\".\") != -1)\r\n                    localeSelection = localeSelection.substring(0, localeSelection.indexOf(\".\"));\r\n            }\r\n            \r\n            File   targetFile  = getLocalizedFile(path, localeSelection);\r\n            String targetExt   = conProp.getProperty(\"EXT\",\"\");\r\n            targetClass = rewriteClassFile(new File(htDefaultPath, path));\r\n            if (path.endsWith(\"/\")) {\r\n                String testpath;\r\n                // attach default file name\r\n                for (int i = 0; i < defaultFiles.length; i++) {\r\n                    testpath = path + defaultFiles[i];\r\n                    targetFile = getOverlayedFile(testpath);\r\n                    targetClass = getOverlayedClass(testpath);\r\n                    if (targetFile.exists()) {\r\n                        path = testpath;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                //no defaultfile, send a dirlisting\r\n                if (targetFile == null || !targetFile.exists()) {\r\n                    StringBuffer sb = new StringBuffer();\r\n                    sb.append(\"<html>\\n<head>\\n<\/head>\\n<body>\\n<h1>Index of \" + path + \"<\/h1>\\n  <ul>\\n\");\r\n                    File dir = new File(htDocsPath, path);\r\n                    String[] list = dir.list();\r\n                    if (list == null) list = new String[0]; // should not occur!\r\n                    File f;\r\n                    String size;\r\n                    long sz;\r\n                    String headline, author, description;\r\n                    int images, links;\r\n                    htmlFilterContentScraper scraper;\r\n                    for (int i = 0; i < list.length; i++) {\r\n                        f = new File(dir, list[i]);\r\n                        if (f.isDirectory()) {\r\n                            sb.append(\"    <li><a href=\\\"\" + path + list[i] + \"\\\">\" + list[i] + \"/<\/a><br><\/li>\\n\");\r\n                        } else {\r\n                            if (list[i].endsWith(\"html\") || (list[i].endsWith(\"htm\"))) {\r\n                                scraper = htmlFilterContentScraper.parseResource(f);\r\n                                headline = scraper.getTitle();\r\n                                author = scraper.getAuthor();\r\n                                description = scraper.getDescription();\r\n                                images = scraper.getImages().size();\r\n                                links = scraper.getAnchors().size();\r\n                            } else {\r\n                                headline = null;\r\n                                author = null;\r\n                                description = null;\r\n                                images = 0;\r\n                                links = 0;\r\n                            }\r\n                            sz = f.length();\r\n                            if (sz < 1024) {\r\n                                size = sz + \" bytes\";\r\n                            } else if (sz < 1024 * 1024) {\r\n                                size = (sz / 1024) + \" KB\";\r\n                            } else {\r\n                                size = (sz / 1024 / 1024) + \" MB\";\r\n                            }\r\n                            sb.append(\"    <li>\");\r\n                            if ((headline != null) && (headline.length() > 0)) sb.append(\"<a href=\\\"\" + list[i] + \"\\\"><b>\" + headline + \"<\/b><\/a><br>\");\r\n                            sb.append(\"<a href=\\\"\" + path + list[i] + \"\\\">\" + list[i] + \"<\/a><br>\");\r\n                            if ((author != null) && (author.length() > 0)) sb.append(\"Author: \" + author + \"<br>\");\r\n                            if ((description != null) && (description.length() > 0)) sb.append(\"Description: \" + description + \"<br>\");\r\n                            sb.append(serverDate.formatShortDay(new Date(f.lastModified())) + \", \" + size + ((images > 0) ? \", \" + images + \" images\" : \"\") + ((links > 0) ? \", \" + links + \" links\" : \"\") + \"<br><\/li>\\n\");\r\n                        }\r\n                    }\r\n                    sb.append(\"  <\/ul>\\n<\/body>\\n<\/html>\\n\");\r\n\r\n                    // write the list to the client\r\n                    httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, \"text/html\", sb.length(), new Date(dir.lastModified()), null, new httpHeader(), null, null, true);\r\n                    if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        out.write(sb.toString().getBytes());\r\n                    }\r\n                    return;\r\n                }\r\n            } else {\r\n                    //XXX: you cannot share a .png/.gif file with a name like a class in htroot.\r\n                    if ( !(targetFile.exists()) && !((path.endsWith(\"png\")||path.endsWith(\"gif\")||path.endsWith(\".stream\"))&&targetClass!=null ) ){\r\n                        targetFile = new File(htDocsPath, path);\r\n                        targetClass = rewriteClassFile(new File(htDocsPath, path));\r\n                    }\r\n            }\r\n            \r\n            //File targetClass = rewriteClassFile(targetFile);\r\n            //We need tp here\r\n            servletProperties tp = new servletProperties();\r\n            Date targetDate;\r\n            boolean nocache = false;\r\n            \r\n            if ((targetClass != null) && (path.endsWith(\"png\"))) {\r\n                // call an image-servlet to produce an on-the-fly - generated image\r\n                Object img = null;\r\n                try {\r\n                    requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                    requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                    // in case that there are no args given, args = null or empty hashmap\r\n                    img = invokeServlet(targetClass, requestHeader, args);\r\n                } catch (InvocationTargetException e) {\r\n                    theLogger.logSevere(\"INTERNAL ERROR: \" + e.toString() + \":\" +\r\n                    e.getMessage() +\r\n                    \" target exception at \" + targetClass + \": \" +\r\n                    e.getTargetException().toString() + \":\" +\r\n                    e.getTargetException().getMessage() +\r\n                    \"; java.awt.graphicsenv='\" + System.getProperty(\"java.awt.graphicsenv\",\"\") + \"'\",e);\r\n                    targetClass = null;\r\n                }\r\n                if (img == null) {\r\n                    // error with image generation; send file-not-found\r\n                    httpd.sendRespondError(conProp, out, 3, 404, \"File not Found\", null, null);\r\n                } else {\r\n                    if (img instanceof ymageMatrix) {\r\n                        ymageMatrix yp = (ymageMatrix) img;\r\n                        // send an image to client\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                        String mimeType = mimeTable.getProperty(targetExt, \"text/html\");\r\n                        serverByteBuffer result = ymageMatrix.exportImage(yp.getImage(), targetExt);\r\n\r\n                        // write the array to the client\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, result.length(), targetDate, null, null, null, null, nocache);\r\n                        if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        \tresult.writeTo(out);\r\n                        }\r\n                    }\r\n                    if (img instanceof Image) {\r\n                        Image i = (Image) img;\r\n                        // send an image to client\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                        String mimeType = mimeTable.getProperty(targetExt, \"text/html\");\r\n\r\n                        // generate an byte array from the generated image\r\n                        int width = i.getWidth(null); if (width < 0) width = 96; // bad hack\r\n                        int height = i.getHeight(null); if (height < 0) height = 96; // bad hack\r\n                        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n                        bi.createGraphics().drawImage(i, 0, 0, width, height, null); \r\n                        serverByteBuffer result = ymageMatrix.exportImage(bi, targetExt);\r\n\r\n                        // write the array to the client\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, result.length(), targetDate, null, null, null, null, nocache);\r\n                        if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        \tresult.writeTo(out);\r\n                        }\r\n                    }\r\n                }\r\n            } else if ((targetClass != null) && (path.endsWith(\".stream\"))) {\r\n                // call rewrite-class\r\n                requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                //requestHeader.put(httpHeader.CONNECTION_PROP_INPUTSTREAM, body);\r\n                //requestHeader.put(httpHeader.CONNECTION_PROP_OUTPUTSTREAM, out);\r\n             \r\n                httpd.sendRespondHeader(conProp, out, httpVersion, 200, null);                \r\n                \r\n                // in case that there are no args given, args = null or empty hashmap\r\n                /* servletProperties tp = (servlerObjects) */ invokeServlet(targetClass, requestHeader, args);\r\n                forceConnectionClose(conProp);\r\n                return;                \r\n            } else if ((targetFile.exists()) && (targetFile.canRead())) {\r\n                // we have found a file that can be written to the client\r\n                // if this file uses templates, then we use the template\r\n                // re-write - method to create an result\r\n                String mimeType = mimeTable.getProperty(targetExt,\"text/html\");\r\n                boolean zipContent = requestHeader.acceptGzip() && httpd.shallTransportZipped(\".\" + conProp.getProperty(\"EXT\",\"\"));\r\n                if (path.endsWith(\"html\") || \r\n                        path.endsWith(\"xml\") || \r\n                        path.endsWith(\"rdf\") || \r\n                        path.endsWith(\"rss\") || \r\n                        path.endsWith(\"csv\") ||\r\n                        path.endsWith(\"pac\") ||\r\n                        path.endsWith(\"src\") ||\r\n                        path.endsWith(\"vcf\") ||\r\n                        path.endsWith(\"/\") ||\r\n                        path.equals(\"/robots.txt\")) {\r\n                            \r\n                    /*targetFile = getLocalizedFile(path);\r\n\t\t\t\t\tif (!(targetFile.exists())) {\r\n\t\t                // try to find that file in the htDocsPath\r\n\t\t\t\t        File trialFile = new File(htDocsPath, path);\r\n\t\t\t\t\t\tif (trialFile.exists()) targetFile = trialFile;\r\n\t\t            }*/\r\n            \r\n                    \r\n                    // call rewrite-class\r\n                   \r\n                    if (targetClass == null) {\r\n                        targetDate = new Date(targetFile.lastModified());\r\n                    } else {\r\n                        // CGI-class: call the class to create a property for rewriting\r\n                        try {\r\n                            requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                            requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                            // in case that there are no args given, args = null or empty hashmap\r\n                            Object tmp = invokeServlet(targetClass, requestHeader, args);\r\n                            if (tmp == null) {\r\n                                // if no args given, then tp will be an empty Hashtable object (not null)\r\n                                tp = new servletProperties();\r\n                            } else if (tmp instanceof servletProperties) {\r\n                                tp = (servletProperties) tmp;\r\n                            } else {\r\n                                tp = new servletProperties((serverObjects) tmp);\r\n                            }\r\n                            // check if the servlets requests authentification\r\n                            if (tp.containsKey(servletProperties.ACTION_AUTHENTICATE)) {\r\n                                // handle brute-force protection\r\n                                if (authorization != null) {\r\n                                    String clientIP = conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP, \"unknown-host\");\r\n                                    serverLog.logInfo(\"HTTPD\", \"dynamic log-in for account 'admin' in http file handler for path '\" + path + \"' from host '\" + clientIP + \"'\");\r\n                                    Integer attempts = (Integer) serverCore.bfHost.get(clientIP);\r\n                                    if (attempts == null)\r\n                                        serverCore.bfHost.put(clientIP, new Integer(1));\r\n                                    else\r\n                                        serverCore.bfHost.put(clientIP, new Integer(attempts.intValue() + 1));\r\n                                }\r\n                                // send authentication request to browser\r\n                                httpHeader headers = getDefaultHeaders(path);\r\n                                headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"\" + tp.get(servletProperties.ACTION_AUTHENTICATE, \"\") + \"\\\"\");\r\n                                httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                                return;\r\n                            } else if (tp.containsKey(servletProperties.ACTION_LOCATION)) {\r\n                                String location = tp.get(servletProperties.ACTION_LOCATION, \"\");\r\n                                if (location.length() == 0) location = path;\r\n                                \r\n                                httpHeader headers = getDefaultHeaders(path);\r\n                                headers.setCookieVector(tp.getOutgoingHeader().getCookieVector()); //put the cookies into the new header TODO: can we put all headerlines, without trouble?\r\n                                headers.put(httpHeader.LOCATION,location);\r\n                                httpd.sendRespondHeader(conProp,out,httpVersion,302,headers);\r\n                                return;\r\n                            }\r\n                            // add the application version, the uptime and the client name to every rewrite table\r\n                            tp.put(servletProperties.PEER_STAT_VERSION, switchboard.getConfig(\"version\", \"\"));\r\n                            tp.put(servletProperties.PEER_STAT_UPTIME, ((System.currentTimeMillis() -  serverCore.startupTime) / 1000) / 60); // uptime in minutes\r\n                            tp.put(servletProperties.PEER_STAT_CLIENTNAME, switchboard.getConfig(\"peerName\", \"anomic\"));\r\n                            tp.put(servletProperties.PEER_STAT_MYTIME, serverDate.formatShortSecond());\r\n                            //System.out.println(\"respond props: \" + ((tp == null) ? \"null\" : tp.toString())); // debug\r\n                        } catch (InvocationTargetException e) {\r\n                            if (e.getCause() instanceof InterruptedException) {\r\n                                throw new InterruptedException(e.getCause().getMessage());\r\n                            }                            \r\n                            \r\n                            theLogger.logSevere(\"INTERNAL ERROR: \" + e.toString() + \":\" +\r\n                                    e.getMessage() +\r\n                                    \" target exception at \" + targetClass + \": \" +\r\n                                    e.getTargetException().toString() + \":\" +\r\n                                    e.getTargetException().getMessage(),e);\r\n                            targetClass = null;\r\n                            throw e;\r\n                        }\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                    }\r\n                    \r\n                    // rewrite the file\r\n                    InputStream fis = null;\r\n                    \r\n                    // read the file/template\r\n                    byte[] templateContent = null;\r\n                    if (useTemplateCache) {\r\n                        long fileSize = targetFile.length();\r\n                        if (fileSize <= 512 * 1024) {\r\n                            // read from cache\r\n                            SoftReference<byte[]> ref = templateCache.get(targetFile);\r\n                            if (ref != null) {\r\n                                templateContent = (byte[]) ref.get();\r\n                                if (templateContent == null) templateCache.remove(targetFile);\r\n                            }\r\n\r\n                            if (templateContent == null) {\r\n                                // loading the content of the template file into\r\n                                // a byte array\r\n                                templateContent = serverFileUtils.read(targetFile);\r\n\r\n                                // storing the content into the cache\r\n                                ref = new SoftReference<byte[]>(templateContent);\r\n                                templateCache.put(targetFile, ref);\r\n                                if (theLogger.isLoggable(Level.FINEST))\r\n                                    theLogger.logFinest(\"Cache MISS for file \" + targetFile);\r\n                            } else {\r\n                                if (theLogger.isLoggable(Level.FINEST))\r\n                                    theLogger.logFinest(\"Cache HIT for file \" + targetFile);\r\n                            }\r\n\r\n                            // creating an inputstream needed by the template\r\n                            // rewrite function\r\n                            fis = new ByteArrayInputStream(templateContent);\r\n                            templateContent = null;\r\n                        } else {\r\n                            // read from file directly\r\n                            fis = new BufferedInputStream(new FileInputStream(targetFile));\r\n                        }\r\n                    } else {\r\n                        fis = new BufferedInputStream(new FileInputStream(targetFile));\r\n                    }\r\n\r\n                    // write the array to the client\r\n                    // we can do that either in standard mode (whole thing completely) or in chunked mode\r\n                    // since yacy clients do not understand chunked mode (yet), we use this only for communication with the administrator\r\n                    boolean yacyClient = requestHeader.userAgent().startsWith(\"yacy\");\r\n                    boolean chunked = !method.equals(httpHeader.METHOD_HEAD) && !yacyClient && httpVersion.equals(httpHeader.HTTP_VERSION_1_1);\r\n                    if (chunked) {\r\n                        // send page in chunks and parse SSIs\r\n                        serverByteBuffer o = new serverByteBuffer();\r\n                        // apply templates\r\n                        httpTemplate.writeTemplate(fis, o, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, -1, targetDate, null, tp.getOutgoingHeader(), null, \"chunked\", nocache);\r\n                        // send the content in chunked parts, see RFC 2616 section 3.6.1\r\n                        httpChunkedOutputStream chos = new httpChunkedOutputStream(out);\r\n                        httpSSI.writeSSI(o, chos, authorization);\r\n                        //chos.write(result);\r\n                        chos.finish();\r\n                    } else {\r\n                        // send page as whole thing, SSIs are not possible\r\n                        String contentEncoding = (zipContent) ? \"gzip\" : null;\r\n                        // apply templates\r\n                        serverByteBuffer o1 = new serverByteBuffer();\r\n                        httpTemplate.writeTemplate(fis, o1, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        \r\n                        serverByteBuffer o = new serverByteBuffer();\r\n                        \r\n                        if (zipContent) {\r\n                            GZIPOutputStream zippedOut = new GZIPOutputStream(o);\r\n                            httpSSI.writeSSI(o1, zippedOut, authorization);\r\n                            //httpTemplate.writeTemplate(fis, zippedOut, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                            zippedOut.finish();\r\n                            zippedOut.flush();\r\n                            zippedOut.close();\r\n                            zippedOut = null;\r\n                        } else {\r\n                            httpSSI.writeSSI(o1, o, authorization);\r\n                            //httpTemplate.writeTemplate(fis, o, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        }\r\n                        if (method.equals(httpHeader.METHOD_HEAD)) {\r\n                            httpd.sendRespondHeader(conProp, out,\r\n                                    httpVersion, 200, null, mimeType, o.length(),\r\n                                    targetDate, null, tp.getOutgoingHeader(),\r\n                                    contentEncoding, null, nocache);\r\n                        } else {\r\n                            byte[] result = o.getBytes(); // this interrupts streaming (bad idea!)\r\n                            httpd.sendRespondHeader(conProp, out,\r\n                                    httpVersion, 200, null, mimeType, result.length,\r\n                                    targetDate, null, tp.getOutgoingHeader(),\r\n                                    contentEncoding, null, nocache);\r\n                            serverFileUtils.write(result, out);\r\n                        }  \r\n                    }\r\n                } else { // no html\r\n                    \r\n                    int statusCode = 200;\r\n                    int rangeStartOffset = 0;\r\n                    httpHeader header = new httpHeader();\r\n                    \r\n                    // adding the accept ranges header\r\n                    header.put(httpHeader.ACCEPT_RANGES, \"bytes\");\r\n                    \r\n                    // reading the files md5 hash if availabe and use it as ETAG of the resource\r\n                    String targetMD5 = null;\r\n                    File targetMd5File = new File(targetFile + \".md5\");\r\n                    try {\r\n                        if (targetMd5File.exists()) {\r\n                            //String description = null;\r\n                            targetMD5 = new String(serverFileUtils.read(targetMd5File));\r\n                            pos = targetMD5.indexOf('\\n');\r\n                           if (pos >= 0) {\r\n                               //description = targetMD5.substring(pos + 1);\r\n                               targetMD5 = targetMD5.substring(0, pos);\r\n                           }         \r\n                           \r\n                           // using the checksum as ETAG header\r\n                           header.put(httpHeader.ETAG, targetMD5);\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }                        \r\n                    \r\n                    if (requestHeader.containsKey(httpHeader.RANGE)) {\r\n                        Object ifRange = requestHeader.ifRange();\r\n                        if ((ifRange == null)||\r\n                            (ifRange instanceof Date && targetFile.lastModified() == ((Date)ifRange).getTime()) ||\r\n                            (ifRange instanceof String && ifRange.equals(targetMD5))) {\r\n                            String rangeHeaderVal = ((String) requestHeader.get(httpHeader.RANGE)).trim();\r\n                            if (rangeHeaderVal.startsWith(\"bytes=\")) {\r\n                                String rangesVal = rangeHeaderVal.substring(\"bytes=\".length());\r\n                                String[] ranges = rangesVal.split(\",\");\r\n                                if ((ranges.length == 1)&&(ranges[0].endsWith(\"-\"))) {\r\n                                    rangeStartOffset = Integer.valueOf(ranges[0].substring(0,ranges[0].length()-1)).intValue();\r\n                                    statusCode = 206;\r\n                                    if (header == null) header = new httpHeader();\r\n                                    header.put(httpHeader.CONTENT_RANGE, \"bytes \" + rangeStartOffset + \"-\" + (targetFile.length()-1) + \"/\" + targetFile.length());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    // write the file to the client\r\n                    targetDate = new Date(targetFile.lastModified());\r\n                    long   contentLength    = (zipContent)?-1:targetFile.length()-rangeStartOffset;\r\n                    String contentEncoding  = (zipContent)?\"gzip\":null;\r\n                    String transferEncoding = (!httpVersion.equals(httpHeader.HTTP_VERSION_1_1))?null:(zipContent)?\"chunked\":null;\r\n                    if (!httpVersion.equals(httpHeader.HTTP_VERSION_1_1) && zipContent) forceConnectionClose(conProp);\r\n                    \r\n                    httpd.sendRespondHeader(conProp, out, httpVersion, statusCode, null, mimeType, contentLength, targetDate, null, header, contentEncoding, transferEncoding, nocache);\r\n                \r\n                    if (!method.equals(httpHeader.METHOD_HEAD)) {                        \r\n                        httpChunkedOutputStream chunkedOut = null;\r\n                        GZIPOutputStream zipped = null;\r\n                        OutputStream newOut = out;\r\n                        \r\n                        if (transferEncoding != null) {\r\n                            chunkedOut = new httpChunkedOutputStream(newOut);\r\n                            newOut = chunkedOut;\r\n                        }\r\n                        if (contentEncoding != null) {\r\n                            zipped = new GZIPOutputStream(newOut);\r\n                            newOut = zipped;\r\n                        }\r\n                        \r\n                        serverFileUtils.copyRange(targetFile, newOut, rangeStartOffset);\r\n                        \r\n                        if (zipped != null) {\r\n                            zipped.flush();\r\n                            zipped.finish();\r\n                        }\r\n                        if (chunkedOut != null) {\r\n                            chunkedOut.finish();\r\n                        }\r\n                    }   \r\n                    \r\n                    // check mime type again using the result array: these are 'magics'\r\n//                    if (serverByteBuffer.equals(result, 1, \"PNG\".getBytes())) mimeType = mimeTable.getProperty(\"png\",\"text/html\");\r\n//                    else if (serverByteBuffer.equals(result, 0, \"GIF89\".getBytes())) mimeType = mimeTable.getProperty(\"gif\",\"text/html\");\r\n//                    else if (serverByteBuffer.equals(result, 6, \"JFIF\".getBytes())) mimeType = mimeTable.getProperty(\"jpg\",\"text/html\");\r\n                    //System.out.print(\"MAGIC:\"); for (int i = 0; i < 10; i++) System.out.print(Integer.toHexString((int) result[i]) + \",\"); System.out.println();\r\n                }\r\n            } else {\r\n                httpd.sendRespondError(conProp,out,3,404,\"File not Found\",null,null);\r\n                return;\r\n            }\r\n        } catch (Exception e) {     \r\n            try {\r\n                // doing some errorhandling ...\r\n                int httpStatusCode = 400; \r\n                String httpStatusText = null; \r\n                StringBuffer errorMessage = new StringBuffer(); \r\n                Exception errorExc = null;            \r\n                \r\n                String errorMsg = e.getMessage();\r\n                if (\r\n                        (e instanceof InterruptedException) ||\r\n                        ((errorMsg != null) && (errorMsg.startsWith(\"Socket closed\")) && (Thread.currentThread().isInterrupted()))\r\n                   ) {\r\n                    errorMessage.append(\"Interruption detected while processing query.\");\r\n                    httpStatusCode = 503;\r\n                } else {\r\n                    if ((errorMsg != null) && \r\n                        (\r\n                           errorMsg.startsWith(\"Broken pipe\") || \r\n                           errorMsg.startsWith(\"Connection reset\") ||\r\n                           errorMsg.startsWith(\"Software caused connection abort\")                           \r\n                       )) {\r\n                        // client closed the connection, so we just end silently\r\n                        errorMessage.append(\"Client unexpectedly closed connection while processing query.\");\r\n                    } else if ((errorMsg != null) && (errorMsg.startsWith(\"Connection timed out\"))) {\r\n                        errorMessage.append(\"Connection timed out.\");\r\n                    } else {\r\n                        errorMessage.append(\"Unexpected error while processing query.\");\r\n                        httpStatusCode = 500;\r\n                        errorExc = e;\r\n                    }\r\n                }\r\n                \r\n                errorMessage.append(\"\\nSession: \").append(Thread.currentThread().getName())\r\n                            .append(\"\\nQuery:   \").append(path)\r\n                            .append(\"\\nClient:  \").append(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP,\"unknown\")) \r\n                            .append(\"\\nReason:  \").append(e.toString());    \r\n                \r\n                if (!conProp.containsKey(httpHeader.CONNECTION_PROP_PROXY_RESPOND_HEADER)) {\r\n                    // sending back an error message to the client \r\n                    // if we have not already send an http header\r\n                    httpd.sendRespondError(conProp,out, 4, httpStatusCode, httpStatusText, new String(errorMessage),errorExc);\r\n                } else {\r\n                    // otherwise we close the connection\r\n                    forceConnectionClose(conProp);\r\n                }    \r\n                \r\n                // if it is an unexpected error we log it \r\n                if (httpStatusCode == 500) {\r\n                    theLogger.logWarning(new String(errorMessage),e);\r\n                }\r\n                \r\n            } catch (Exception ee) {\r\n                forceConnectionClose(conProp);\r\n            }            \r\n            \r\n        } finally {\r\n            try {out.flush();}catch (Exception e) {}\r\n            if (((String)requestHeader.get(httpHeader.CONNECTION, \"close\")).indexOf(\"keep-alive\") == -1) {\r\n                // wait a little time until everything closes so that clients can read from the streams/sockets\r\n                try {Thread.sleep(50);} catch (InterruptedException e) {} // FIXME: is this necessary?\r\n            }\r\n        }\r\n    }","id":59192,"modified_method":"public static void doResponse(Properties conProp, httpHeader requestHeader, OutputStream out, InputStream body) {\r\n        \r\n        String path = null;\r\n        try {\r\n            // getting some connection properties            \r\n            String method = conProp.getProperty(httpHeader.CONNECTION_PROP_METHOD);\r\n            path = conProp.getProperty(httpHeader.CONNECTION_PROP_PATH);\r\n            String argsString = conProp.getProperty(httpHeader.CONNECTION_PROP_ARGS); // is null if no args were given\r\n            String httpVersion = conProp.getProperty(httpHeader.CONNECTION_PROP_HTTP_VER);\r\n            String clientIP = conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP, \"unknown-host\");\r\n            \r\n            // check hack attacks in path\r\n            if (path.indexOf(\"..\") >= 0) {\r\n                httpd.sendRespondError(conProp,out,4,403,null,\"Access not allowed\",null);\r\n                return;\r\n            }\r\n            \r\n            // url decoding of path\r\n            try {\r\n                path = URLDecoder.decode(path, \"UTF-8\");\r\n            } catch (UnsupportedEncodingException e) {\r\n                // This should never occur\r\n                assert(false) : \"UnsupportedEncodingException: \" + e.getMessage();\r\n            }\r\n            \r\n            // check permission/granted access\r\n            String authorization = (String) requestHeader.get(httpHeader.AUTHORIZATION);\r\n            String adminAccountBase64MD5 = switchboard.getConfig(httpd.ADMIN_ACCOUNT_B64MD5, \"\");\r\n            \r\n            int pos = path.lastIndexOf(\".\");\r\n            \r\n            if ((path.substring(0,(pos==-1)?path.length():pos)).endsWith(\"_p\") && (adminAccountBase64MD5.length() != 0)) {\r\n                //authentication required\r\n                //userDB\r\n                if(sb.userDB.hasAdminRight(authorization, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP), requestHeader.getHeaderCookies())){\r\n                    //Authentication successful. remove brute-force flag\r\n                    serverCore.bfHost.remove(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                //static\r\n                }else if(authorization != null && httpd.staticAdminAuthenticated(authorization.trim().substring(6), switchboard)==4){\r\n                    //Authentication successful. remove brute-force flag\r\n                    serverCore.bfHost.remove(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                //no auth\r\n                }else if (authorization == null) {\r\n                    // no authorization given in response. Ask for that\r\n                    httpHeader headers = getDefaultHeaders(path);\r\n                    headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"admin log-in\\\"\");\r\n                    //httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                    servletProperties tp=new servletProperties();\r\n                    tp.put(\"returnto\", path);\r\n                    //TODO: separate errorpage Wrong Login / No Login\r\n                    httpd.sendRespondError(conProp, out, 5, 401, \"Wrong Authentication\", \"\", new File(\"proxymsg/authfail.inc\"), tp, null, headers);\r\n                    return;\r\n                } else {\r\n                    // a wrong authentication was given or the userDB user does not have admin access. Ask again\r\n                    serverLog.logInfo(\"HTTPD\", \"Wrong log-in for account 'admin' in http file handler for path '\" + path + \"' from host '\" + clientIP + \"'\");\r\n                    Integer attempts = (Integer) serverCore.bfHost.get(clientIP);\r\n                    if (attempts == null)\r\n                        serverCore.bfHost.put(clientIP, new Integer(1));\r\n                    else\r\n                        serverCore.bfHost.put(clientIP, new Integer(attempts.intValue() + 1));\r\n    \r\n                    httpHeader headers = getDefaultHeaders(path);\r\n                    headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"admin log-in\\\"\");\r\n                    httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                    return;\r\n                }\r\n            }\r\n        \r\n        \r\n            // parse arguments\r\n            serverObjects args = new serverObjects();\r\n            int argc;\r\n            if (argsString == null) {\r\n                // no args here, maybe a POST with multipart extension\r\n                int length = 0;\r\n                //System.out.println(\"HEADER: \" + requestHeader.toString()); // DEBUG\r\n                if (method.equals(httpHeader.METHOD_POST)) {\r\n    \r\n                    GZIPInputStream gzipBody = null;\r\n                    if (requestHeader.containsKey(httpHeader.CONTENT_LENGTH)) {\r\n                        length = Integer.parseInt((String) requestHeader.get(httpHeader.CONTENT_LENGTH));\r\n                    } else if (requestHeader.gzip()) {\r\n                        length = -1;\r\n                        gzipBody = new GZIPInputStream(body);\r\n                    }\r\n    //                } else {\r\n    //                    httpd.sendRespondError(conProp,out,4,403,null,\"bad post values\",null); \r\n    //                    return;\r\n    //                }\r\n                    \r\n                    // if its a POST, it can be either multipart or as args in the body\r\n                    if ((requestHeader.containsKey(httpHeader.CONTENT_TYPE)) &&\r\n                            (((String) requestHeader.get(httpHeader.CONTENT_TYPE)).toLowerCase().startsWith(\"multipart\"))) {\r\n                        // parse multipart\r\n                        HashMap<String, byte[]> files = httpd.parseMultipart(requestHeader, args, (gzipBody!=null)?gzipBody:body, length);\r\n                        // integrate these files into the args\r\n                        if (files != null) {\r\n                            Iterator<Map.Entry<String, byte[]>> fit = files.entrySet().iterator();\r\n                            Map.Entry<String, byte[]> entry;\r\n                            while (fit.hasNext()) {\r\n                                entry = fit.next();\r\n                                args.put(entry.getKey() + \"$file\", entry.getValue());\r\n                            }\r\n                        }\r\n                        argc = Integer.parseInt((String) requestHeader.get(\"ARGC\"));\r\n                    } else {\r\n                        // parse args in body\r\n                        argc = httpd.parseArgs(args, (gzipBody!=null)?gzipBody:body, length);\r\n                    }\r\n                } else {\r\n                    // no args\r\n                    argsString = null;\r\n                    args = null;\r\n                    argc = 0;\r\n                }\r\n            } else {\r\n                // simple args in URL (stuff after the \"?\")\r\n                argc = httpd.parseArgs(args, argsString);\r\n            }\r\n        \r\n            // check for cross site scripting - attacks in request arguments\r\n            if (argc > 0) {\r\n                // check all values for occurrences of script values\r\n                Iterator<String> e = args.values().iterator(); // enumeration of values\r\n                String val;\r\n                while (e.hasNext()) {\r\n                    val = e.next();\r\n                    if ((val != null) && (val.indexOf(\"<script\") >= 0)) {\r\n                        // deny request\r\n                        httpd.sendRespondError(conProp,out,4,403,null,\"bad post values\",null);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        \r\n            // we are finished with parsing\r\n            // the result of value hand-over is in args and argc\r\n            if (path.length() == 0) {\r\n                httpd.sendRespondError(conProp,out,4,400,null,\"Bad Request\",null);\r\n                out.flush();\r\n                return;\r\n            }\r\n            File targetClass=null;\r\n\r\n            // locate the file\r\n            if (!(path.startsWith(\"/\"))) path = \"/\" + path; // attach leading slash\r\n            \r\n            // a different language can be desired (by i.e. ConfigBasic.html) than the one stored in the locale.language\r\n            String localeSelection = switchboard.getConfig(\"locale.language\",\"default\");\r\n            if (args != null && (args.containsKey(\"language\"))) {\r\n                // TODO 9.11.06 Bost: a class with information about available languages is needed. \r\n                // the indexOf(\".\") is just a workaround because there from ConfigLanguage.html commes \"de.lng\" and\r\n                // from ConfigBasic.html comes just \"de\" in the \"language\" parameter\r\n                localeSelection = args.get(\"language\", localeSelection);\r\n                if (localeSelection.indexOf(\".\") != -1)\r\n                    localeSelection = localeSelection.substring(0, localeSelection.indexOf(\".\"));\r\n            }\r\n            \r\n            File   targetFile  = getLocalizedFile(path, localeSelection);\r\n            String targetExt   = conProp.getProperty(\"EXT\",\"\");\r\n            targetClass = rewriteClassFile(new File(htDefaultPath, path));\r\n            if (path.endsWith(\"/\")) {\r\n                String testpath;\r\n                // attach default file name\r\n                for (int i = 0; i < defaultFiles.length; i++) {\r\n                    testpath = path + defaultFiles[i];\r\n                    targetFile = getOverlayedFile(testpath);\r\n                    targetClass = getOverlayedClass(testpath);\r\n                    if (targetFile.exists()) {\r\n                        path = testpath;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                //no defaultfile, send a dirlisting\r\n                if (targetFile == null || !targetFile.exists()) {\r\n                    StringBuffer sb = new StringBuffer();\r\n                    sb.append(\"<html>\\n<head>\\n<\/head>\\n<body>\\n<h1>Index of \" + path + \"<\/h1>\\n  <ul>\\n\");\r\n                    File dir = new File(htDocsPath, path);\r\n                    String[] list = dir.list();\r\n                    if (list == null) list = new String[0]; // should not occur!\r\n                    File f;\r\n                    String size;\r\n                    long sz;\r\n                    String headline, author, description;\r\n                    int images, links;\r\n                    htmlFilterContentScraper scraper;\r\n                    for (int i = 0; i < list.length; i++) {\r\n                        f = new File(dir, list[i]);\r\n                        if (f.isDirectory()) {\r\n                            sb.append(\"    <li><a href=\\\"\" + path + list[i] + \"\\\">\" + list[i] + \"/<\/a><br><\/li>\\n\");\r\n                        } else {\r\n                            if (list[i].endsWith(\"html\") || (list[i].endsWith(\"htm\"))) {\r\n                                scraper = htmlFilterContentScraper.parseResource(f);\r\n                                headline = scraper.getTitle();\r\n                                author = scraper.getAuthor();\r\n                                description = scraper.getDescription();\r\n                                images = scraper.getImages().size();\r\n                                links = scraper.getAnchors().size();\r\n                            } else {\r\n                                headline = null;\r\n                                author = null;\r\n                                description = null;\r\n                                images = 0;\r\n                                links = 0;\r\n                            }\r\n                            sz = f.length();\r\n                            if (sz < 1024) {\r\n                                size = sz + \" bytes\";\r\n                            } else if (sz < 1024 * 1024) {\r\n                                size = (sz / 1024) + \" KB\";\r\n                            } else {\r\n                                size = (sz / 1024 / 1024) + \" MB\";\r\n                            }\r\n                            sb.append(\"    <li>\");\r\n                            if ((headline != null) && (headline.length() > 0)) sb.append(\"<a href=\\\"\" + list[i] + \"\\\"><b>\" + headline + \"<\/b><\/a><br>\");\r\n                            sb.append(\"<a href=\\\"\" + path + list[i] + \"\\\">\" + list[i] + \"<\/a><br>\");\r\n                            if ((author != null) && (author.length() > 0)) sb.append(\"Author: \" + author + \"<br>\");\r\n                            if ((description != null) && (description.length() > 0)) sb.append(\"Description: \" + description + \"<br>\");\r\n                            sb.append(serverDate.formatShortDay(new Date(f.lastModified())) + \", \" + size + ((images > 0) ? \", \" + images + \" images\" : \"\") + ((links > 0) ? \", \" + links + \" links\" : \"\") + \"<br><\/li>\\n\");\r\n                        }\r\n                    }\r\n                    sb.append(\"  <\/ul>\\n<\/body>\\n<\/html>\\n\");\r\n\r\n                    // write the list to the client\r\n                    httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, \"text/html\", sb.length(), new Date(dir.lastModified()), null, new httpHeader(), null, null, true);\r\n                    if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        out.write(sb.toString().getBytes());\r\n                    }\r\n                    return;\r\n                }\r\n            } else {\r\n                    //XXX: you cannot share a .png/.gif file with a name like a class in htroot.\r\n                    if ( !(targetFile.exists()) && !((path.endsWith(\"png\")||path.endsWith(\"gif\")||path.endsWith(\".stream\"))&&targetClass!=null ) ){\r\n                        targetFile = new File(htDocsPath, path);\r\n                        targetClass = rewriteClassFile(new File(htDocsPath, path));\r\n                    }\r\n            }\r\n            \r\n            //File targetClass = rewriteClassFile(targetFile);\r\n            //We need tp here\r\n            servletProperties tp = new servletProperties();\r\n            Date targetDate;\r\n            boolean nocache = false;\r\n            \r\n            if ((targetClass != null) && (path.endsWith(\"png\"))) {\r\n                // call an image-servlet to produce an on-the-fly - generated image\r\n                Object img = null;\r\n                try {\r\n                    requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                    requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                    // in case that there are no args given, args = null or empty hashmap\r\n                    img = invokeServlet(targetClass, requestHeader, args);\r\n                } catch (InvocationTargetException e) {\r\n                    theLogger.logSevere(\"INTERNAL ERROR: \" + e.toString() + \":\" +\r\n                    e.getMessage() +\r\n                    \" target exception at \" + targetClass + \": \" +\r\n                    e.getTargetException().toString() + \":\" +\r\n                    e.getTargetException().getMessage() +\r\n                    \"; java.awt.graphicsenv='\" + System.getProperty(\"java.awt.graphicsenv\",\"\") + \"'\",e);\r\n                    targetClass = null;\r\n                }\r\n                if (img == null) {\r\n                    // error with image generation; send file-not-found\r\n                    httpd.sendRespondError(conProp, out, 3, 404, \"File not Found\", null, null);\r\n                } else {\r\n                    if (img instanceof ymageMatrix) {\r\n                        ymageMatrix yp = (ymageMatrix) img;\r\n                        // send an image to client\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                        String mimeType = mimeTable.getProperty(targetExt, \"text/html\");\r\n                        serverByteBuffer result = ymageMatrix.exportImage(yp.getImage(), targetExt);\r\n\r\n                        // write the array to the client\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, result.length(), targetDate, null, null, null, null, nocache);\r\n                        if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        \tresult.writeTo(out);\r\n                        }\r\n                    }\r\n                    if (img instanceof Image) {\r\n                        Image i = (Image) img;\r\n                        // send an image to client\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                        String mimeType = mimeTable.getProperty(targetExt, \"text/html\");\r\n\r\n                        // generate an byte array from the generated image\r\n                        int width = i.getWidth(null); if (width < 0) width = 96; // bad hack\r\n                        int height = i.getHeight(null); if (height < 0) height = 96; // bad hack\r\n                        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n                        bi.createGraphics().drawImage(i, 0, 0, width, height, null); \r\n                        serverByteBuffer result = ymageMatrix.exportImage(bi, targetExt);\r\n\r\n                        // write the array to the client\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, result.length(), targetDate, null, null, null, null, nocache);\r\n                        if (!method.equals(httpHeader.METHOD_HEAD)) {\r\n                        \tresult.writeTo(out);\r\n                        }\r\n                    }\r\n                }\r\n            } else if ((targetClass != null) && (path.endsWith(\".stream\"))) {\r\n                // call rewrite-class\r\n                requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                //requestHeader.put(httpHeader.CONNECTION_PROP_INPUTSTREAM, body);\r\n                //requestHeader.put(httpHeader.CONNECTION_PROP_OUTPUTSTREAM, out);\r\n             \r\n                httpd.sendRespondHeader(conProp, out, httpVersion, 200, null);                \r\n                \r\n                // in case that there are no args given, args = null or empty hashmap\r\n                /* servletProperties tp = (servlerObjects) */ invokeServlet(targetClass, requestHeader, args);\r\n                forceConnectionClose(conProp);\r\n                return;                \r\n            } else if ((targetFile.exists()) && (targetFile.canRead())) {\r\n                // we have found a file that can be written to the client\r\n                // if this file uses templates, then we use the template\r\n                // re-write - method to create an result\r\n                String mimeType = mimeTable.getProperty(targetExt,\"text/html\");\r\n                boolean zipContent = requestHeader.acceptGzip() && httpd.shallTransportZipped(\".\" + conProp.getProperty(\"EXT\",\"\"));\r\n                if (path.endsWith(\"html\") || \r\n                        path.endsWith(\"xml\") || \r\n                        path.endsWith(\"rdf\") || \r\n                        path.endsWith(\"rss\") || \r\n                        path.endsWith(\"csv\") ||\r\n                        path.endsWith(\"pac\") ||\r\n                        path.endsWith(\"src\") ||\r\n                        path.endsWith(\"vcf\") ||\r\n                        path.endsWith(\"/\") ||\r\n                        path.equals(\"/robots.txt\")) {\r\n                            \r\n                    /*targetFile = getLocalizedFile(path);\r\n\t\t\t\t\tif (!(targetFile.exists())) {\r\n\t\t                // try to find that file in the htDocsPath\r\n\t\t\t\t        File trialFile = new File(htDocsPath, path);\r\n\t\t\t\t\t\tif (trialFile.exists()) targetFile = trialFile;\r\n\t\t            }*/\r\n            \r\n                    \r\n                    // call rewrite-class\r\n                   \r\n                    if (targetClass == null) {\r\n                        targetDate = new Date(targetFile.lastModified());\r\n                    } else {\r\n                        // CGI-class: call the class to create a property for rewriting\r\n                        try {\r\n                            requestHeader.put(httpHeader.CONNECTION_PROP_CLIENTIP, conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP));\r\n                            requestHeader.put(httpHeader.CONNECTION_PROP_PATH, path);\r\n                            // in case that there are no args given, args = null or empty hashmap\r\n                            Object tmp = invokeServlet(targetClass, requestHeader, args);\r\n                            if (tmp == null) {\r\n                                // if no args given, then tp will be an empty Hashtable object (not null)\r\n                                tp = new servletProperties();\r\n                            } else if (tmp instanceof servletProperties) {\r\n                                tp = (servletProperties) tmp;\r\n                            } else {\r\n                                tp = new servletProperties((serverObjects) tmp);\r\n                            }\r\n                            // check if the servlets requests authentification\r\n                            if (tp.containsKey(servletProperties.ACTION_AUTHENTICATE)) {\r\n                                // handle brute-force protection\r\n                                if (authorization != null) {\r\n                                    serverLog.logInfo(\"HTTPD\", \"dynamic log-in for account 'admin' in http file handler for path '\" + path + \"' from host '\" + clientIP + \"'\");\r\n                                    Integer attempts = (Integer) serverCore.bfHost.get(clientIP);\r\n                                    if (attempts == null)\r\n                                        serverCore.bfHost.put(clientIP, new Integer(1));\r\n                                    else\r\n                                        serverCore.bfHost.put(clientIP, new Integer(attempts.intValue() + 1));\r\n                                }\r\n                                // send authentication request to browser\r\n                                httpHeader headers = getDefaultHeaders(path);\r\n                                headers.put(httpHeader.WWW_AUTHENTICATE,\"Basic realm=\\\"\" + tp.get(servletProperties.ACTION_AUTHENTICATE, \"\") + \"\\\"\");\r\n                                httpd.sendRespondHeader(conProp,out,httpVersion,401,headers);\r\n                                return;\r\n                            } else if (tp.containsKey(servletProperties.ACTION_LOCATION)) {\r\n                                String location = tp.get(servletProperties.ACTION_LOCATION, \"\");\r\n                                if (location.length() == 0) location = path;\r\n                                \r\n                                httpHeader headers = getDefaultHeaders(path);\r\n                                headers.setCookieVector(tp.getOutgoingHeader().getCookieVector()); //put the cookies into the new header TODO: can we put all headerlines, without trouble?\r\n                                headers.put(httpHeader.LOCATION,location);\r\n                                httpd.sendRespondHeader(conProp,out,httpVersion,302,headers);\r\n                                return;\r\n                            }\r\n                            // add the application version, the uptime and the client name to every rewrite table\r\n                            tp.put(servletProperties.PEER_STAT_VERSION, switchboard.getConfig(\"version\", \"\"));\r\n                            tp.put(servletProperties.PEER_STAT_UPTIME, ((System.currentTimeMillis() -  serverCore.startupTime) / 1000) / 60); // uptime in minutes\r\n                            tp.put(servletProperties.PEER_STAT_CLIENTNAME, switchboard.getConfig(\"peerName\", \"anomic\"));\r\n                            tp.put(servletProperties.PEER_STAT_MYTIME, serverDate.formatShortSecond());\r\n                            //System.out.println(\"respond props: \" + ((tp == null) ? \"null\" : tp.toString())); // debug\r\n                        } catch (InvocationTargetException e) {\r\n                            if (e.getCause() instanceof InterruptedException) {\r\n                                throw new InterruptedException(e.getCause().getMessage());\r\n                            }                            \r\n                            \r\n                            theLogger.logSevere(\"INTERNAL ERROR: \" + e.toString() + \":\" +\r\n                                    e.getMessage() +\r\n                                    \" target exception at \" + targetClass + \": \" +\r\n                                    e.getTargetException().toString() + \":\" +\r\n                                    e.getTargetException().getMessage(),e);\r\n                            targetClass = null;\r\n                            throw e;\r\n                        }\r\n                        targetDate = new Date(System.currentTimeMillis());\r\n                        nocache = true;\r\n                    }\r\n                    \r\n                    // rewrite the file\r\n                    InputStream fis = null;\r\n                    \r\n                    // read the file/template\r\n                    byte[] templateContent = null;\r\n                    if (useTemplateCache) {\r\n                        long fileSize = targetFile.length();\r\n                        if (fileSize <= 512 * 1024) {\r\n                            // read from cache\r\n                            SoftReference<byte[]> ref = templateCache.get(targetFile);\r\n                            if (ref != null) {\r\n                                templateContent = (byte[]) ref.get();\r\n                                if (templateContent == null) templateCache.remove(targetFile);\r\n                            }\r\n\r\n                            if (templateContent == null) {\r\n                                // loading the content of the template file into\r\n                                // a byte array\r\n                                templateContent = serverFileUtils.read(targetFile);\r\n\r\n                                // storing the content into the cache\r\n                                ref = new SoftReference<byte[]>(templateContent);\r\n                                templateCache.put(targetFile, ref);\r\n                                if (theLogger.isLoggable(Level.FINEST))\r\n                                    theLogger.logFinest(\"Cache MISS for file \" + targetFile);\r\n                            } else {\r\n                                if (theLogger.isLoggable(Level.FINEST))\r\n                                    theLogger.logFinest(\"Cache HIT for file \" + targetFile);\r\n                            }\r\n\r\n                            // creating an inputstream needed by the template\r\n                            // rewrite function\r\n                            fis = new ByteArrayInputStream(templateContent);\r\n                            templateContent = null;\r\n                        } else {\r\n                            // read from file directly\r\n                            fis = new BufferedInputStream(new FileInputStream(targetFile));\r\n                        }\r\n                    } else {\r\n                        fis = new BufferedInputStream(new FileInputStream(targetFile));\r\n                    }\r\n\r\n                    // write the array to the client\r\n                    // we can do that either in standard mode (whole thing completely) or in chunked mode\r\n                    // since yacy clients do not understand chunked mode (yet), we use this only for communication with the administrator\r\n                    boolean yacyClient = requestHeader.userAgent().startsWith(\"yacy\");\r\n                    boolean chunked = !method.equals(httpHeader.METHOD_HEAD) && !yacyClient && httpVersion.equals(httpHeader.HTTP_VERSION_1_1);\r\n                    if (chunked) {\r\n                        // send page in chunks and parse SSIs\r\n                        serverByteBuffer o = new serverByteBuffer();\r\n                        // apply templates\r\n                        httpTemplate.writeTemplate(fis, o, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        httpd.sendRespondHeader(conProp, out, httpVersion, 200, null, mimeType, -1, targetDate, null, tp.getOutgoingHeader(), null, \"chunked\", nocache);\r\n                        // send the content in chunked parts, see RFC 2616 section 3.6.1\r\n                        httpChunkedOutputStream chos = new httpChunkedOutputStream(out);\r\n                        httpSSI.writeSSI(o, chos, authorization, clientIP);\r\n                        //chos.write(result);\r\n                        chos.finish();\r\n                    } else {\r\n                        // send page as whole thing, SSIs are not possible\r\n                        String contentEncoding = (zipContent) ? \"gzip\" : null;\r\n                        // apply templates\r\n                        serverByteBuffer o1 = new serverByteBuffer();\r\n                        httpTemplate.writeTemplate(fis, o1, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        \r\n                        serverByteBuffer o = new serverByteBuffer();\r\n                        \r\n                        if (zipContent) {\r\n                            GZIPOutputStream zippedOut = new GZIPOutputStream(o);\r\n                            httpSSI.writeSSI(o1, zippedOut, authorization, clientIP);\r\n                            //httpTemplate.writeTemplate(fis, zippedOut, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                            zippedOut.finish();\r\n                            zippedOut.flush();\r\n                            zippedOut.close();\r\n                            zippedOut = null;\r\n                        } else {\r\n                            httpSSI.writeSSI(o1, o, authorization, clientIP);\r\n                            //httpTemplate.writeTemplate(fis, o, tp, \"-UNRESOLVED_PATTERN-\".getBytes(\"UTF-8\"));\r\n                        }\r\n                        if (method.equals(httpHeader.METHOD_HEAD)) {\r\n                            httpd.sendRespondHeader(conProp, out,\r\n                                    httpVersion, 200, null, mimeType, o.length(),\r\n                                    targetDate, null, tp.getOutgoingHeader(),\r\n                                    contentEncoding, null, nocache);\r\n                        } else {\r\n                            byte[] result = o.getBytes(); // this interrupts streaming (bad idea!)\r\n                            httpd.sendRespondHeader(conProp, out,\r\n                                    httpVersion, 200, null, mimeType, result.length,\r\n                                    targetDate, null, tp.getOutgoingHeader(),\r\n                                    contentEncoding, null, nocache);\r\n                            serverFileUtils.write(result, out);\r\n                        }  \r\n                    }\r\n                } else { // no html\r\n                    \r\n                    int statusCode = 200;\r\n                    int rangeStartOffset = 0;\r\n                    httpHeader header = new httpHeader();\r\n                    \r\n                    // adding the accept ranges header\r\n                    header.put(httpHeader.ACCEPT_RANGES, \"bytes\");\r\n                    \r\n                    // reading the files md5 hash if availabe and use it as ETAG of the resource\r\n                    String targetMD5 = null;\r\n                    File targetMd5File = new File(targetFile + \".md5\");\r\n                    try {\r\n                        if (targetMd5File.exists()) {\r\n                            //String description = null;\r\n                            targetMD5 = new String(serverFileUtils.read(targetMd5File));\r\n                            pos = targetMD5.indexOf('\\n');\r\n                           if (pos >= 0) {\r\n                               //description = targetMD5.substring(pos + 1);\r\n                               targetMD5 = targetMD5.substring(0, pos);\r\n                           }         \r\n                           \r\n                           // using the checksum as ETAG header\r\n                           header.put(httpHeader.ETAG, targetMD5);\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }                        \r\n                    \r\n                    if (requestHeader.containsKey(httpHeader.RANGE)) {\r\n                        Object ifRange = requestHeader.ifRange();\r\n                        if ((ifRange == null)||\r\n                            (ifRange instanceof Date && targetFile.lastModified() == ((Date)ifRange).getTime()) ||\r\n                            (ifRange instanceof String && ifRange.equals(targetMD5))) {\r\n                            String rangeHeaderVal = ((String) requestHeader.get(httpHeader.RANGE)).trim();\r\n                            if (rangeHeaderVal.startsWith(\"bytes=\")) {\r\n                                String rangesVal = rangeHeaderVal.substring(\"bytes=\".length());\r\n                                String[] ranges = rangesVal.split(\",\");\r\n                                if ((ranges.length == 1)&&(ranges[0].endsWith(\"-\"))) {\r\n                                    rangeStartOffset = Integer.valueOf(ranges[0].substring(0,ranges[0].length()-1)).intValue();\r\n                                    statusCode = 206;\r\n                                    if (header == null) header = new httpHeader();\r\n                                    header.put(httpHeader.CONTENT_RANGE, \"bytes \" + rangeStartOffset + \"-\" + (targetFile.length()-1) + \"/\" + targetFile.length());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    // write the file to the client\r\n                    targetDate = new Date(targetFile.lastModified());\r\n                    long   contentLength    = (zipContent)?-1:targetFile.length()-rangeStartOffset;\r\n                    String contentEncoding  = (zipContent)?\"gzip\":null;\r\n                    String transferEncoding = (!httpVersion.equals(httpHeader.HTTP_VERSION_1_1))?null:(zipContent)?\"chunked\":null;\r\n                    if (!httpVersion.equals(httpHeader.HTTP_VERSION_1_1) && zipContent) forceConnectionClose(conProp);\r\n                    \r\n                    httpd.sendRespondHeader(conProp, out, httpVersion, statusCode, null, mimeType, contentLength, targetDate, null, header, contentEncoding, transferEncoding, nocache);\r\n                \r\n                    if (!method.equals(httpHeader.METHOD_HEAD)) {                        \r\n                        httpChunkedOutputStream chunkedOut = null;\r\n                        GZIPOutputStream zipped = null;\r\n                        OutputStream newOut = out;\r\n                        \r\n                        if (transferEncoding != null) {\r\n                            chunkedOut = new httpChunkedOutputStream(newOut);\r\n                            newOut = chunkedOut;\r\n                        }\r\n                        if (contentEncoding != null) {\r\n                            zipped = new GZIPOutputStream(newOut);\r\n                            newOut = zipped;\r\n                        }\r\n                        \r\n                        serverFileUtils.copyRange(targetFile, newOut, rangeStartOffset);\r\n                        \r\n                        if (zipped != null) {\r\n                            zipped.flush();\r\n                            zipped.finish();\r\n                        }\r\n                        if (chunkedOut != null) {\r\n                            chunkedOut.finish();\r\n                        }\r\n                    }   \r\n                    \r\n                    // check mime type again using the result array: these are 'magics'\r\n//                    if (serverByteBuffer.equals(result, 1, \"PNG\".getBytes())) mimeType = mimeTable.getProperty(\"png\",\"text/html\");\r\n//                    else if (serverByteBuffer.equals(result, 0, \"GIF89\".getBytes())) mimeType = mimeTable.getProperty(\"gif\",\"text/html\");\r\n//                    else if (serverByteBuffer.equals(result, 6, \"JFIF\".getBytes())) mimeType = mimeTable.getProperty(\"jpg\",\"text/html\");\r\n                    //System.out.print(\"MAGIC:\"); for (int i = 0; i < 10; i++) System.out.print(Integer.toHexString((int) result[i]) + \",\"); System.out.println();\r\n                }\r\n            } else {\r\n                httpd.sendRespondError(conProp,out,3,404,\"File not Found\",null,null);\r\n                return;\r\n            }\r\n        } catch (Exception e) {     \r\n            try {\r\n                // doing some errorhandling ...\r\n                int httpStatusCode = 400; \r\n                String httpStatusText = null; \r\n                StringBuffer errorMessage = new StringBuffer(); \r\n                Exception errorExc = null;            \r\n                \r\n                String errorMsg = e.getMessage();\r\n                if (\r\n                        (e instanceof InterruptedException) ||\r\n                        ((errorMsg != null) && (errorMsg.startsWith(\"Socket closed\")) && (Thread.currentThread().isInterrupted()))\r\n                   ) {\r\n                    errorMessage.append(\"Interruption detected while processing query.\");\r\n                    httpStatusCode = 503;\r\n                } else {\r\n                    if ((errorMsg != null) && \r\n                        (\r\n                           errorMsg.startsWith(\"Broken pipe\") || \r\n                           errorMsg.startsWith(\"Connection reset\") ||\r\n                           errorMsg.startsWith(\"Software caused connection abort\")                           \r\n                       )) {\r\n                        // client closed the connection, so we just end silently\r\n                        errorMessage.append(\"Client unexpectedly closed connection while processing query.\");\r\n                    } else if ((errorMsg != null) && (errorMsg.startsWith(\"Connection timed out\"))) {\r\n                        errorMessage.append(\"Connection timed out.\");\r\n                    } else {\r\n                        errorMessage.append(\"Unexpected error while processing query.\");\r\n                        httpStatusCode = 500;\r\n                        errorExc = e;\r\n                    }\r\n                }\r\n                \r\n                errorMessage.append(\"\\nSession: \").append(Thread.currentThread().getName())\r\n                            .append(\"\\nQuery:   \").append(path)\r\n                            .append(\"\\nClient:  \").append(conProp.getProperty(httpHeader.CONNECTION_PROP_CLIENTIP,\"unknown\")) \r\n                            .append(\"\\nReason:  \").append(e.toString());    \r\n                \r\n                if (!conProp.containsKey(httpHeader.CONNECTION_PROP_PROXY_RESPOND_HEADER)) {\r\n                    // sending back an error message to the client \r\n                    // if we have not already send an http header\r\n                    httpd.sendRespondError(conProp,out, 4, httpStatusCode, httpStatusText, new String(errorMessage),errorExc);\r\n                } else {\r\n                    // otherwise we close the connection\r\n                    forceConnectionClose(conProp);\r\n                }    \r\n                \r\n                // if it is an unexpected error we log it \r\n                if (httpStatusCode == 500) {\r\n                    theLogger.logWarning(new String(errorMessage),e);\r\n                }\r\n                \r\n            } catch (Exception ee) {\r\n                forceConnectionClose(conProp);\r\n            }            \r\n            \r\n        } finally {\r\n            try {out.flush();}catch (Exception e) {}\r\n            if (((String)requestHeader.get(httpHeader.CONNECTION, \"close\")).indexOf(\"keep-alive\") == -1) {\r\n                // wait a little time until everything closes so that clients can read from the streams/sockets\r\n                try {Thread.sleep(50);} catch (InterruptedException e) {} // FIXME: is this necessary?\r\n            }\r\n        }\r\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\n        final plasmaSwitchboard sb = (plasmaSwitchboard) env;\n        final serverObjects prop = new serverObjects();\n        \n        String eventID = post.get(\"eventID\", \"\");\n        boolean bottomline = post.get(\"bottomline\", \"false\").equals(\"true\");\n        boolean rss = post.get(\"rss\", \"false\").equals(\"true\");\n        int item = post.getInt(\"item\", -1);\n        boolean auth = ((String) header.get(httpHeader.CONNECTION_PROP_CLIENTIP, \"\")).equals(\"localhost\") || sb.verifyAuthentication(header, true);\n        \n        // default settings for blank item\n        prop.put(\"content\", \"0\");\n        prop.put(\"rss\", \"0\");\n        prop.put(\"references\", \"0\");\n        prop.put(\"rssreferences\", \"0\");\n        prop.put(\"navigation\", \"0\");\n        prop.put(\"dynamic\", \"0\");\n        \n        // find search event\n        plasmaSearchEvent theSearch = plasmaSearchEvent.getEvent(eventID);\n        if (theSearch == null) {\n            // the event does not exist, show empty page\n            return prop;\n        }\n        plasmaSearchQuery theQuery = theSearch.getQuery();\n        int offset = theQuery.neededResults() - theQuery.displayResults();\n        int totalcount = theSearch.getRankingResult().getLocalResourceSize() + theSearch.getRankingResult().getRemoteResourceSize();\n        \n        // dynamically update count values\n        if (!rss) {\n            prop.put(\"dynamic_offset\", offset + 1);\n            prop.put(\"dynamic_itemscount\", (item < 0) ? theQuery.neededResults() : item + 1);\n            prop.put(\"dynamic_totalcount\", yFormatter.number(theSearch.getRankingResult().getLocalResourceSize() + theSearch.getRankingResult().getRemoteResourceSize(), !rss));\n            prop.put(\"dynamic_localResourceSize\", yFormatter.number(theSearch.getRankingResult().getLocalResourceSize(), !rss));\n            prop.put(\"dynamic_remoteResourceSize\", yFormatter.number(theSearch.getRankingResult().getRemoteResourceSize(), !rss));\n            prop.put(\"dynamic_remoteIndexCount\", yFormatter.number(theSearch.getRankingResult().getRemoteIndexCount(), !rss));\n            prop.put(\"dynamic_remotePeerCount\", yFormatter.number(theSearch.getRankingResult().getRemotePeerCount(), !rss));\n            prop.put(\"dynamic_resnav\", \"\");\n            prop.put(\"dynamic\", \"1\");\n        }\n        \n        if (bottomline) {\n            // attach the bottom line with search references (topwords)\n            final Set<String> references = theSearch.references(20);\n            if (references.size() > 0) {\n                // get the topwords\n                final TreeSet<String> topwords = new TreeSet<String>(kelondroNaturalOrder.naturalComparator);\n                String tmp = \"\";\n                Iterator<String> i = references.iterator();\n                while (i.hasNext()) {\n                    tmp = i.next();\n                    if (tmp.matches(\"[a-z]+\")) {\n                        topwords.add(tmp);\n                    }\n                }\n\n                // filter out the badwords\n                final TreeSet<String> filteredtopwords = kelondroMSetTools.joinConstructive(topwords, plasmaSwitchboard.badwords);\n                if (filteredtopwords.size() > 0) {\n                    kelondroMSetTools.excludeDestructive(topwords, plasmaSwitchboard.badwords);\n                }\n\n                // avoid stopwords being topwords\n                if (env.getConfig(\"filterOutStopwordsFromTopwords\", \"true\").equals(\"true\")) {\n                    if ((plasmaSwitchboard.stopwords != null) && (plasmaSwitchboard.stopwords.size() > 0)) {\n                        kelondroMSetTools.excludeDestructive(topwords, plasmaSwitchboard.stopwords);\n                    }\n                }\n                \n                if (rss) {\n                    String word;\n                    int hintcount = 0;\n                    final Iterator<String> iter = topwords.iterator();\n                    while (iter.hasNext()) {\n                        word = (String) iter.next();\n                        if (word != null) {\n                            prop.putHTML(\"rssreferences_words_\" + hintcount + \"_word\", word);\n                        }\n                        prop.put(\"rssreferences_words\", hintcount);\n                        if (hintcount++ > MAX_TOPWORDS) {\n                            break;\n                        }\n                    }\n                    prop.put(\"rssreferences\", \"1\");\n                } else {\n                    String word;\n                    int hintcount = 0;\n                    final Iterator<String> iter = topwords.iterator();\n                    while (iter.hasNext()) {\n                        word = (String) iter.next();\n                        if ((theQuery == null) || (theQuery.queryString == null)) break;\n                        if (word != null) {\n                            prop.putHTML(\"navigation_topwords_words_\" + hintcount + \"_word\", word);\n                            prop.putHTML(\"navigation_topwords_words_\" + hintcount + \"_newsearch\", theQuery.queryString.replace(' ', '+') + \"+\" + word);\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_count\", theQuery.displayResults());\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_offset\", \"0\");\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_contentdom\", theQuery.contentdom());\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_resource\", theQuery.searchdom());\n                        }\n                        prop.put(\"navigation_topwords_words\", hintcount);\n                        if (hintcount++ > MAX_TOPWORDS) {\n                            break;\n                        }\n                    }\n                    prop.put(\"navigation_topwords\", \"1\");\n                }\n                \n            }\n            \n            // compose page navigation\n            StringBuffer resnav = new StringBuffer();\n            int thispage = offset / theQuery.displayResults();\n            if (thispage == 0) resnav.append(\"&lt;&nbsp;\"); else {\n                resnav.append(navurla(thispage - 1, theQuery));\n                resnav.append(\"<strong>&lt;<\/strong><\/a>&nbsp;\");\n            }\n            int numberofpages = Math.min(10, Math.max(thispage + 2, totalcount / theQuery.displayResults()));\n            for (int j = 0; j < numberofpages; j++) {\n                if (j == thispage) {\n                    resnav.append(\"<strong>\");\n                    resnav.append(j + 1);\n                    resnav.append(\"<\/strong>&nbsp;\");\n                } else {\n                    resnav.append(navurla(j, theQuery));\n                    resnav.append(j + 1);\n                    resnav.append(\"<\/a>&nbsp;\");\n                }\n            }\n            if (thispage >= numberofpages) resnav.append(\"&gt;\"); else {\n                resnav.append(navurla(thispage + 1, theQuery));\n                resnav.append(\"<strong>&gt;<\/strong><\/a>\");\n            }\n            prop.put(\"navigation_resnav\", resnav.toString());\n            prop.put(\"navigation\", \"1\");\n            \n            return prop;\n        }\n\n        prop.put(\"rss\", \"0\");\n        \n        if (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_TEXT) {\n            // text search\n\n            // generate result object\n            plasmaSearchEvent.ResultEntry result = theSearch.oneResult(item);\n            if (result == null) return prop; // no content\n                \n            if (rss) {\n                // text search for rss output\n                prop.put(\"rss\", \"1\"); // switch on specific content\n                prop.putHTML(\"rss_title\", result.title(), true);\n                prop.putHTML(\"rss_description\", result.textSnippet().getLineRaw(), true);\n                prop.putHTML(\"rss_link\", result.urlstring(), true);\n                prop.put(\"rss_urlhash\", result.hash());\n                prop.put(\"rss_date\", plasmaSwitchboard.dateString822(result.modified()));\n                return prop;\n            }\n            \n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            prop.putHTML(\"content_description\", result.title());\n            prop.put(\"content_url\", result.urlstring());\n        \n            int port=result.url().getPort();\n            yacyURL faviconURL;\n            try {\n                faviconURL = new yacyURL(result.url().getProtocol() + \"://\" + result.url().getHost() + ((port != -1) ? (\":\" + String.valueOf(port)) : \"\") + \"/favicon.ico\", null);\n            } catch (MalformedURLException e1) {\n                faviconURL = null;\n            }\n        \n            prop.putHTML(\"content_faviconCode\", sb.licensedURLs.aquireLicense(faviconURL)); // aquire license for favicon url loading\n            prop.put(\"content_urlhash\", result.hash());\n            prop.put(\"content_urlhexhash\", yacySeed.b64Hash2hexHash(result.hash()));\n            prop.putHTML(\"content_urlname\", nxTools.shortenURLString(result.urlname(), urllength));\n            prop.put(\"content_date\", plasmaSwitchboard.dateString(result.modified()));\n            prop.put(\"content_ybr\", plasmaSearchRankingProcess.ybr(result.hash()));\n            prop.putNum(\"content_size\", result.filesize());\n        \n            TreeSet<String>[] query = theQuery.queryWords();\n            yacyURL wordURL = null;\n            try {\n                prop.putHTML(\"content_words\", URLEncoder.encode(query[0].toString(),\"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {}\n            prop.putHTML(\"content_former\", theQuery.queryString);\n            prop.put(\"content_rankingprops\", result.word().toPropertyForm() + \", domLengthEstimated=\" + yacyURL.domLengthEstimation(result.hash()) +\n                    ((yacyURL.probablyRootURL(result.hash())) ? \", probablyRootURL\" : \"\") + \n                    (((wordURL = yacyURL.probablyWordURL(result.hash(), query[0])) != null) ? \", probablyWordURL=\" + wordURL.toNormalform(false, true) : \"\"));\n            plasmaSnippetCache.TextSnippet snippet = result.textSnippet();\n            prop.put(\"content_snippet\", (snippet == null) ? \"(snippet not found)\" : snippet.getLineMarked(theQuery.queryHashes));\n            return prop;\n        }\n        \n        if (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_IMAGE) {\n            // image search; shows thumbnails\n\n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            plasmaSnippetCache.MediaSnippet ms = theSearch.oneImage(item);\n            if (ms == null) {\n                prop.put(\"content_items\", \"0\");\n            } else {\n                prop.putHTML(\"content_items_0_hrefCache\", (auth) ? \"/ViewImage.png?url=\" + ms.href.toNormalform(true, false) : ms.href.toNormalform(true, false));\n                prop.putHTML(\"content_items_0_href\", ms.href.toNormalform(true, false));\n                prop.put(\"content_items_0_code\", sb.licensedURLs.aquireLicense(ms.href));\n                prop.putHTML(\"content_items_0_name\", shorten(ms.name, namelength));\n                prop.put(\"content_items_0_attr\", (ms.attr.equals(\"-1 x -1\")) ? \"\" : \"(\" + ms.attr + \")\"); // attributes, here: original size of image\n                prop.put(\"content_items_0_source\", ms.source.toNormalform(true, false));\n                prop.put(\"content_items_0_sourcedom\", ms.source.getHost());\n                prop.put(\"content_items\", 1);\n            }\n            return prop;\n        }\n        \n        if ((theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_AUDIO) ||\n            (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_VIDEO) ||\n            (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_APP)) {\n            // any other media content\n\n            // generate result object\n            plasmaSearchEvent.ResultEntry result = theSearch.oneResult(item);\n            if (result == null) return prop; // no content\n            \n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            ArrayList<plasmaSnippetCache.MediaSnippet> media = result.mediaSnippets();\n            if (item == 0) col = true;\n            if (media != null) {\n                plasmaSnippetCache.MediaSnippet ms;\n                int c = 0;\n                for (int i = 0; i < media.size(); i++) {\n                    ms = (plasmaSnippetCache.MediaSnippet) media.get(i);\n                    prop.putHTML(\"content_items_\" + i + \"_href\", ms.href.toNormalform(true, false));\n                    prop.putHTML(\"content_items_\" + i + \"_hrefshort\", nxTools.shortenURLString(ms.href.toNormalform(true, false), urllength));\n                    prop.putHTML(\"content_items_\" + i + \"_name\", shorten(ms.name, namelength));\n                    prop.put(\"content_items_\" + i + \"_col\", (col) ? \"0\" : \"1\");\n                    c++;\n                    col = !col;\n                }\n                prop.put(\"content_items\", c);\n            } else {\n                prop.put(\"content_items\", \"0\");\n            }\n            return prop;\n        }\n\n        return prop;\n    }","id":59193,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\n        final plasmaSwitchboard sb = (plasmaSwitchboard) env;\n        final serverObjects prop = new serverObjects();\n        \n        String eventID = post.get(\"eventID\", \"\");\n        boolean bottomline = post.get(\"bottomline\", \"false\").equals(\"true\");\n        boolean rss = post.get(\"rss\", \"false\").equals(\"true\");\n        int item = post.getInt(\"item\", -1);\n        boolean auth = ((String) header.get(httpHeader.CONNECTION_PROP_CLIENTIP, \"\")).equals(\"localhost\") || sb.verifyAuthentication(header, true);\n        \n        // default settings for blank item\n        prop.put(\"content\", \"0\");\n        prop.put(\"rss\", \"0\");\n        prop.put(\"references\", \"0\");\n        prop.put(\"rssreferences\", \"0\");\n        prop.put(\"navigation\", \"0\");\n        prop.put(\"dynamic\", \"0\");\n        \n        // find search event\n        plasmaSearchEvent theSearch = plasmaSearchEvent.getEvent(eventID);\n        if (theSearch == null) {\n            // the event does not exist, show empty page\n            return prop;\n        }\n        plasmaSearchQuery theQuery = theSearch.getQuery();\n        int offset = theQuery.neededResults() - theQuery.displayResults();\n        int totalcount = theSearch.getRankingResult().getLocalResourceSize() + theSearch.getRankingResult().getRemoteResourceSize();\n        \n        // dynamically update count values\n        if (!rss) {\n            prop.put(\"dynamic_offset\", offset + 1);\n            prop.put(\"dynamic_itemscount\", (item < 0) ? theQuery.neededResults() : item + 1);\n            prop.put(\"dynamic_totalcount\", yFormatter.number(theSearch.getRankingResult().getLocalResourceSize() + theSearch.getRankingResult().getRemoteResourceSize(), !rss));\n            prop.put(\"dynamic_localResourceSize\", yFormatter.number(theSearch.getRankingResult().getLocalResourceSize(), !rss));\n            prop.put(\"dynamic_remoteResourceSize\", yFormatter.number(theSearch.getRankingResult().getRemoteResourceSize(), !rss));\n            prop.put(\"dynamic_remoteIndexCount\", yFormatter.number(theSearch.getRankingResult().getRemoteIndexCount(), !rss));\n            prop.put(\"dynamic_remotePeerCount\", yFormatter.number(theSearch.getRankingResult().getRemotePeerCount(), !rss));\n            prop.put(\"dynamic_resnav\", \"\");\n            prop.put(\"dynamic\", \"1\");\n        }\n        \n        if (bottomline) {\n            // attach the bottom line with search references (topwords)\n            final Set<String> references = theSearch.references(20);\n            if (references.size() > 0) {\n                // get the topwords\n                final TreeSet<String> topwords = new TreeSet<String>(kelondroNaturalOrder.naturalComparator);\n                String tmp = \"\";\n                Iterator<String> i = references.iterator();\n                while (i.hasNext()) {\n                    tmp = i.next();\n                    if (tmp.matches(\"[a-z]+\")) {\n                        topwords.add(tmp);\n                    }\n                }\n\n                // filter out the badwords\n                final TreeSet<String> filteredtopwords = kelondroMSetTools.joinConstructive(topwords, plasmaSwitchboard.badwords);\n                if (filteredtopwords.size() > 0) {\n                    kelondroMSetTools.excludeDestructive(topwords, plasmaSwitchboard.badwords);\n                }\n\n                // avoid stopwords being topwords\n                if (env.getConfig(\"filterOutStopwordsFromTopwords\", \"true\").equals(\"true\")) {\n                    if ((plasmaSwitchboard.stopwords != null) && (plasmaSwitchboard.stopwords.size() > 0)) {\n                        kelondroMSetTools.excludeDestructive(topwords, plasmaSwitchboard.stopwords);\n                    }\n                }\n                \n                if (rss) {\n                    String word;\n                    int hintcount = 0;\n                    final Iterator<String> iter = topwords.iterator();\n                    while (iter.hasNext()) {\n                        word = (String) iter.next();\n                        if (word != null) {\n                            prop.putHTML(\"rssreferences_words_\" + hintcount + \"_word\", word);\n                        }\n                        prop.put(\"rssreferences_words\", hintcount);\n                        if (hintcount++ > MAX_TOPWORDS) {\n                            break;\n                        }\n                    }\n                    prop.put(\"rssreferences\", \"1\");\n                } else {\n                    String word;\n                    int hintcount = 0;\n                    final Iterator<String> iter = topwords.iterator();\n                    while (iter.hasNext()) {\n                        word = (String) iter.next();\n                        if ((theQuery == null) || (theQuery.queryString == null)) break;\n                        if (word != null) {\n                            prop.putHTML(\"navigation_topwords_words_\" + hintcount + \"_word\", word);\n                            prop.putHTML(\"navigation_topwords_words_\" + hintcount + \"_newsearch\", theQuery.queryString.replace(' ', '+') + \"+\" + word);\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_count\", theQuery.displayResults());\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_offset\", \"0\");\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_contentdom\", theQuery.contentdom());\n                            prop.put(\"navigation_topwords_words_\" + hintcount + \"_resource\", theQuery.searchdom());\n                        }\n                        prop.put(\"navigation_topwords_words\", hintcount);\n                        if (hintcount++ > MAX_TOPWORDS) {\n                            break;\n                        }\n                    }\n                    prop.put(\"navigation_topwords\", \"1\");\n                }\n                \n            }\n            \n            // compose page navigation\n            StringBuffer resnav = new StringBuffer();\n            int thispage = offset / theQuery.displayResults();\n            if (thispage == 0) resnav.append(\"&lt;&nbsp;\"); else {\n                resnav.append(navurla(thispage - 1, theQuery));\n                resnav.append(\"<strong>&lt;<\/strong><\/a>&nbsp;\");\n            }\n            int numberofpages = Math.min(10, Math.max(thispage + 2, totalcount / theQuery.displayResults()));\n            for (int j = 0; j < numberofpages; j++) {\n                if (j == thispage) {\n                    resnav.append(\"<strong>\");\n                    resnav.append(j + 1);\n                    resnav.append(\"<\/strong>&nbsp;\");\n                } else {\n                    resnav.append(navurla(j, theQuery));\n                    resnav.append(j + 1);\n                    resnav.append(\"<\/a>&nbsp;\");\n                }\n            }\n            if (thispage >= numberofpages) resnav.append(\"&gt;\"); else {\n                resnav.append(navurla(thispage + 1, theQuery));\n                resnav.append(\"<strong>&gt;<\/strong><\/a>\");\n            }\n            prop.put(\"navigation_resnav\", resnav.toString());\n            prop.put(\"navigation\", \"1\");\n            \n            // list search history\n            Iterator<plasmaSearchQuery> i = sb.localSearches.iterator();\n            String client = (String) header.get(httpHeader.CONNECTION_PROP_CLIENTIP);\n            plasmaSearchQuery query;\n            int c = 0;\n            HashSet<String> visibleQueries = new HashSet<String>();\n            while (i.hasNext()) {\n                query = i.next();\n                if (query.resultcount == 0) continue;\n                if (query.offset != 0) continue;\n                if (!query.host.equals(client)) continue; // the search history should only be visible from the user who initiated the search\n                if (visibleQueries.contains(query.queryString)) continue; // avoid doubles\n                visibleQueries.add(query.queryString);\n                prop.put(\"history_list_\" + c + \"_querystring\", query.queryString);\n                prop.put(\"history_list_\" + c + \"_searchdom\", query.searchdom());\n                prop.put(\"history_list_\" + c + \"_contentdom\", query.contentdom());\n                c++;\n                if (c >= 10) break;\n            }\n            prop.put(\"history_list\", c);\n            prop.put(\"history_host\", client);\n            if (c == 0) prop.put(\"history\", 0); else prop.put(\"history\", 1); // switch on if there is anything to see\n            \n            return prop;\n        }\n\n        prop.put(\"rss\", \"0\");\n        \n        if (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_TEXT) {\n            // text search\n\n            // generate result object\n            plasmaSearchEvent.ResultEntry result = theSearch.oneResult(item);\n            if (result == null) return prop; // no content\n                \n            if (rss) {\n                // text search for rss output\n                prop.put(\"rss\", \"1\"); // switch on specific content\n                prop.putHTML(\"rss_title\", result.title(), true);\n                prop.putHTML(\"rss_description\", result.textSnippet().getLineRaw(), true);\n                prop.putHTML(\"rss_link\", result.urlstring(), true);\n                prop.put(\"rss_urlhash\", result.hash());\n                prop.put(\"rss_date\", plasmaSwitchboard.dateString822(result.modified()));\n                return prop;\n            }\n            \n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            prop.putHTML(\"content_description\", result.title());\n            prop.put(\"content_url\", result.urlstring());\n        \n            int port=result.url().getPort();\n            yacyURL faviconURL;\n            try {\n                faviconURL = new yacyURL(result.url().getProtocol() + \"://\" + result.url().getHost() + ((port != -1) ? (\":\" + String.valueOf(port)) : \"\") + \"/favicon.ico\", null);\n            } catch (MalformedURLException e1) {\n                faviconURL = null;\n            }\n        \n            prop.putHTML(\"content_faviconCode\", sb.licensedURLs.aquireLicense(faviconURL)); // aquire license for favicon url loading\n            prop.put(\"content_urlhash\", result.hash());\n            prop.put(\"content_urlhexhash\", yacySeed.b64Hash2hexHash(result.hash()));\n            prop.putHTML(\"content_urlname\", nxTools.shortenURLString(result.urlname(), urllength));\n            prop.put(\"content_date\", plasmaSwitchboard.dateString(result.modified()));\n            prop.put(\"content_ybr\", plasmaSearchRankingProcess.ybr(result.hash()));\n            prop.putNum(\"content_size\", result.filesize());\n        \n            TreeSet<String>[] query = theQuery.queryWords();\n            yacyURL wordURL = null;\n            try {\n                prop.putHTML(\"content_words\", URLEncoder.encode(query[0].toString(),\"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {}\n            prop.putHTML(\"content_former\", theQuery.queryString);\n            prop.put(\"content_rankingprops\", result.word().toPropertyForm() + \", domLengthEstimated=\" + yacyURL.domLengthEstimation(result.hash()) +\n                    ((yacyURL.probablyRootURL(result.hash())) ? \", probablyRootURL\" : \"\") + \n                    (((wordURL = yacyURL.probablyWordURL(result.hash(), query[0])) != null) ? \", probablyWordURL=\" + wordURL.toNormalform(false, true) : \"\"));\n            plasmaSnippetCache.TextSnippet snippet = result.textSnippet();\n            prop.put(\"content_snippet\", (snippet == null) ? \"(snippet not found)\" : snippet.getLineMarked(theQuery.queryHashes));\n            return prop;\n        }\n        \n        if (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_IMAGE) {\n            // image search; shows thumbnails\n\n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            plasmaSnippetCache.MediaSnippet ms = theSearch.oneImage(item);\n            if (ms == null) {\n                prop.put(\"content_items\", \"0\");\n            } else {\n                prop.putHTML(\"content_items_0_hrefCache\", (auth) ? \"/ViewImage.png?url=\" + ms.href.toNormalform(true, false) : ms.href.toNormalform(true, false));\n                prop.putHTML(\"content_items_0_href\", ms.href.toNormalform(true, false));\n                prop.put(\"content_items_0_code\", sb.licensedURLs.aquireLicense(ms.href));\n                prop.putHTML(\"content_items_0_name\", shorten(ms.name, namelength));\n                prop.put(\"content_items_0_attr\", (ms.attr.equals(\"-1 x -1\")) ? \"\" : \"(\" + ms.attr + \")\"); // attributes, here: original size of image\n                prop.put(\"content_items_0_source\", ms.source.toNormalform(true, false));\n                prop.put(\"content_items_0_sourcedom\", ms.source.getHost());\n                prop.put(\"content_items\", 1);\n            }\n            return prop;\n        }\n        \n        if ((theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_AUDIO) ||\n            (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_VIDEO) ||\n            (theQuery.contentdom == plasmaSearchQuery.CONTENTDOM_APP)) {\n            // any other media content\n\n            // generate result object\n            plasmaSearchEvent.ResultEntry result = theSearch.oneResult(item);\n            if (result == null) return prop; // no content\n            \n            prop.put(\"content\", theQuery.contentdom + 1); // switch on specific content\n            ArrayList<plasmaSnippetCache.MediaSnippet> media = result.mediaSnippets();\n            if (item == 0) col = true;\n            if (media != null) {\n                plasmaSnippetCache.MediaSnippet ms;\n                int c = 0;\n                for (int i = 0; i < media.size(); i++) {\n                    ms = (plasmaSnippetCache.MediaSnippet) media.get(i);\n                    prop.putHTML(\"content_items_\" + i + \"_href\", ms.href.toNormalform(true, false));\n                    prop.putHTML(\"content_items_\" + i + \"_hrefshort\", nxTools.shortenURLString(ms.href.toNormalform(true, false), urllength));\n                    prop.putHTML(\"content_items_\" + i + \"_name\", shorten(ms.name, namelength));\n                    prop.put(\"content_items_\" + i + \"_col\", (col) ? \"0\" : \"1\");\n                    c++;\n                    col = !col;\n                }\n                prop.put(\"content_items\", c);\n            } else {\n                prop.put(\"content_items\", \"0\");\n            }\n            return prop;\n        }\n\n        return prop;\n    }","commit_id":"3f321ece7deb94c6bc3e04255fbef24fec5790a5","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n\t * Hidden constructor.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading\n\t *            the package resource, and to determine what package it is in\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource\n\t * @throws PackageResourceBlockedException\n\t *             when the target resource is not accepted by\n\t *             {@link IPackageResourceGuard the package resource guard}.\n\t */\n\tprotected PackageResource(final Class scope, final String path, final Locale locale,\n\t\t\tfinal String style)\n\t{\n\t\t// Convert resource path to absolute path relative to base package\n\t\tthis.absolutePath = Packages.absolutePath(scope, path);\n\n\t\tIPackageResourceGuard guard = Application.get().getResourceSettings()\n\t\t\t\t.getPackageResourceGuard();\n\t\tif (!guard.accept(scope, path))\n\t\t{\n\t\t\tthrow new PackageResourceBlockedException(\"package resource \" + absolutePath\n\t\t\t\t\t+ \" may not be accessed\");\n\t\t}\n\n\t\tthis.scope = scope;\n\t\tthis.path = path;\n\t\tthis.locale = locale;\n\t\tthis.style = style;\n\n\t\tif (locale != null)\n\t\t{\n\t\t\t// Get the resource stream so that the real locale that could be\n\t\t\t// resolved is set.\n\t\t\tgetResourceStream();\n\n\t\t\t// Invalidate it again so that it won't hold up resources\n\t\t\tinvalidate();\n\t\t}\n\t}","id":59194,"modified_method":"/**\n\t * Hidden constructor.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading\n\t *            the package resource, and to determine what package it is in\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource\n\t * @throws PackageResourceBlockedException\n\t *             when the target resource is not accepted by\n\t *             {@link IPackageResourceGuard the package resource guard}.\n\t */\n\tprotected PackageResource(final Class scope, final String path, final Locale locale,\n\t\t\tfinal String style)\n\t{\n\t\t// Convert resource path to absolute path relative to base package\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\n\t\tIPackageResourceGuard guard = Application.get().getResourceSettings()\n\t\t\t\t.getPackageResourceGuard();\n\t\tif (!guard.accept(scope, path))\n\t\t{\n\t\t\tthrow new PackageResourceBlockedException(\"package resource \" + absolutePath\n\t\t\t\t\t+ \" may not be accessed\");\n\t\t}\n\n\t\tint index = absolutePath.lastIndexOf(\".\");\n\t\tif (index != -1)\n\t\t{\n\t\t\textension = absolutePath.substring(index+1);\n\t\t\tabsolutePath = absolutePath.substring(0,index);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.extension = null;\n\t\t}\n\t\tthis.absolutePath = absolutePath;\n\t\tthis.scope = scope;\n\t\tthis.path = path;\n\t\tthis.locale = locale;\n\t\tthis.style = style;\n\n\t\tif (locale != null)\n\t\t{\n\t\t\t// Get the resource stream so that the real locale that could be\n\t\t\t// resolved is set.\n\t\t\tgetResourceStream();\n\n\t\t\t// Invalidate it again so that it won't hold up resources\n\t\t\tinvalidate();\n\t\t}\n\t}","commit_id":"b27d47141097190b01efdb99a81405b3f022fcde","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @return Gets the resource for the component.\n\t */\n\t@Override\n\tpublic IResourceStream getResourceStream()\n\t{\n\t\t// Locate resource\n\t\tIResourceStream resourceStream = Application.get().getResourceSettings()\n\t\t\t\t.getResourceStreamFactory().locate(scope, absolutePath, style, locale, null);\n\n\t\t// Check that resource was found\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tString msg = \"Unable to find package resource [path = \" + absolutePath + \", style = \"\n\t\t\t\t\t+ style + \", locale = \" + locale + \"]\";\n\t\t\tlog.warn(msg);\n\t\t\tRequestCycle requestCycle = RequestCycle.get();\n\t\t\tif (requestCycle instanceof WebRequestCycle)\n\t\t\t{\n\t\t\t\tthrow new AbortWithWebErrorCodeException(HttpServletResponse.SC_NOT_FOUND, msg);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AbortException();\n\t\t\t}\n\t\t}\n\t\tthis.locale = resourceStream.getLocale();\n\t\treturn resourceStream;\n\t}","id":59195,"modified_method":"/**\n\t * @return Gets the resource for the component.\n\t */\n\t@Override\n\tpublic IResourceStream getResourceStream()\n\t{\n\t\t// Locate resource\n\t\tIResourceStream resourceStream = Application.get().getResourceSettings()\n\t\t\t\t.getResourceStreamFactory().locate(scope, absolutePath, style, locale, extension);\n\n\t\t// Check that resource was found\n\t\tif (resourceStream == null)\n\t\t{\n\t\t\tString msg = \"Unable to find package resource [path = \" + absolutePath + \", style = \"\n\t\t\t\t\t+ style + \", locale = \" + locale + \"]\";\n\t\t\tlog.warn(msg);\n\t\t\tRequestCycle requestCycle = RequestCycle.get();\n\t\t\tif (requestCycle instanceof WebRequestCycle)\n\t\t\t{\n\t\t\t\tthrow new AbortWithWebErrorCodeException(HttpServletResponse.SC_NOT_FOUND, msg);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AbortException();\n\t\t\t}\n\t\t}\n\t\tthis.locale = resourceStream.getLocale();\n\t\treturn resourceStream;\n\t}","commit_id":"b27d47141097190b01efdb99a81405b3f022fcde","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Gets whether a resource for a given set of criteria exists.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading\n\t *            the package resource, and to determine what package it is in.\n\t *            Typically this is the class in which you call this method\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource (see {@link wicket.Session})\n\t * @return true if a resource could be loaded, false otherwise\n\t */\n\tpublic static boolean exists(final Class scope, final String path, final Locale locale,\n\t\t\tfinal String style)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\treturn Application.get().getResourceSettings().getResourceStreamFactory().locate(scope,\n\t\t\t\tabsolutePath, style, locale, null) != null;\n\t}","id":59196,"modified_method":"/**\n\t * Gets whether a resource for a given set of criteria exists.\n\t * \n\t * @param scope\n\t *            This argument will be used to get the class loader for loading\n\t *            the package resource, and to determine what package it is in.\n\t *            Typically this is the class in which you call this method\n\t * @param path\n\t *            The path to the resource\n\t * @param locale\n\t *            The locale of the resource\n\t * @param style\n\t *            The style of the resource (see {@link wicket.Session})\n\t * @return true if a resource could be loaded, false otherwise\n\t */\n\tpublic static boolean exists(final Class scope, final String path, final Locale locale,\n\t\t\tfinal String style)\n\t{\n\t\tString absolutePath = Packages.absolutePath(scope, path);\n\t\tString extension = null;\n\t\tint index = absolutePath.lastIndexOf(\".\");\n\t\tif (index != -1)\n\t\t{\n\t\t\textension = absolutePath.substring(index+1);\n\t\t\tabsolutePath = absolutePath.substring(0,index);\n\t\t}\n\t\treturn Application.get().getResourceSettings().getResourceStreamFactory().locate(scope,\n\t\t\t\tabsolutePath, style, locale, extension) != null;\n\t}","commit_id":"b27d47141097190b01efdb99a81405b3f022fcde","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Locate a resource. See class comments for more details.\n\t * \n\t * @param clazz\n\t *            The class requesting the resource\n\t * @param path\n\t *            The path of the resource without extension\n\t * @param style\n\t *            A theme or style (see {@link wicket.Session})\n\t * @param locale\n\t *            The Locale to apply\n\t * @param extension\n\t *            the filname's extensions\n\t * \n\t * @return The Resource, or null if not found.\n\t */\n\tpublic IResourceStream locate(final Class clazz, String path, final String style,\n\t\t\tfinal Locale locale, final String extension)\n\t{\n\t\t// Try the various combinations of style, locale and extension to find\n\t\t// the resource.\n\t\t\n\t\t// Most outer loop are the styles and variations\n\t\tIterator<String> styleIter = new StyleAndVariationResourceNameIterator(path, style, null);\n\t\twhile (styleIter.hasNext())\n\t\t{\n\t\t\tString newPath = styleIter.next();\n\n\t\t\t// next is the Locale\n\t\t\tIterator<String> localeIter = new LocaleResourceNameIterator(newPath, locale);\n\t\t\twhile (localeIter.hasNext())\n\t\t\t{\n\t\t\t\tnewPath = localeIter.next();\n\n\t\t\t\t// and than the possible resource extensions\n\t\t\t\tIterator<String> extIter = new ExtensionResourceNameIterator(newPath, extension);\n\t\t\t\twhile (extIter.hasNext())\n\t\t\t\t{\n\t\t\t\t\tnewPath = extIter.next();\n\t\t\t\t\tIResourceStream stream = locate(clazz, newPath);\n\t\t\t\t\tif (stream != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn stream;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":59197,"modified_method":"/**\n\t * Locate a resource. See class comments for more details.\n\t * \n\t * @param clazz\n\t *            The class requesting the resource\n\t * @param path\n\t *            The path of the resource without extension\n\t * @param style\n\t *            A theme or style (see {@link wicket.Session})\n\t * @param locale\n\t *            The Locale to apply\n\t * @param extension\n\t *            the filname's extensions\n\t * \n\t * @return The Resource, or null if not found.\n\t */\n\tpublic IResourceStream locate(final Class clazz, String path, final String style,\n\t\t\tfinal Locale locale, final String extension)\n\t{\n\t\t// Try the various combinations of style, locale and extension to find\n\t\t// the resource.\n\t\t\n\t\t// Most outer loop are the styles and variations\n\t\tIterator<String> styleIter = new StyleAndVariationResourceNameIterator(path, style, null);\n\t\twhile (styleIter.hasNext())\n\t\t{\n\t\t\tString newPath = styleIter.next();\n\n\t\t\t// next is the Locale\n\t\t\tLocaleResourceNameIterator localeIter = new LocaleResourceNameIterator(newPath, locale);\n\t\t\twhile (localeIter.hasNext())\n\t\t\t{\n\t\t\t\tnewPath = localeIter.next();\n\n\t\t\t\t// and than the possible resource extensions\n\t\t\t\tIterator<String> extIter = new ExtensionResourceNameIterator(newPath, extension);\n\t\t\t\twhile (extIter.hasNext())\n\t\t\t\t{\n\t\t\t\t\tnewPath = extIter.next();\n\t\t\t\t\tIResourceStream stream = locate(clazz, newPath);\n\t\t\t\t\tif (stream != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tstream.setLocale(localeIter.getLocale());\n\t\t\t\t\t\treturn stream;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"b27d47141097190b01efdb99a81405b3f022fcde","url":"https://github.com/apache/wicket"},{"original_method":"@Override\r\n    public void scrapeTag0(Tag tag) {\r\n        checkOpts(tag);\r\n        if (tag.name.equalsIgnoreCase(\"img\")) {\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            try {\r\n                if (src.length() > 0) {\r\n                    final DigestURL url = absolutePath(src);\r\n                    if (url != null) {\r\n                        // use to allow parse of \"550px\", with better performance as Numberformat.parse\r\n                        final int width = NumberTools.parseIntDecSubstring(tag.opts.getProperty(\"width\", \"-1\")); // Integer.parseInt fails on \"200px\"\r\n                        final int height = NumberTools.parseIntDecSubstring(tag.opts.getProperty(\"height\", \"-1\"));\r\n                        final ImageEntry ie = new ImageEntry(url, tag.opts.getProperty(\"alt\", EMPTY_STRING), width, height, -1);\r\n                        this.images.add(ie);\r\n                    }\r\n                }\r\n            } catch (final NumberFormatException e) {}\r\n            this.evaluationScores.match(Element.imgpath, src);\r\n        } else if(tag.name.equalsIgnoreCase(\"base\")) {\r\n            try {\r\n                this.root = new DigestURL(tag.opts.getProperty(\"href\", EMPTY_STRING));\r\n            } catch (final MalformedURLException e) {}\r\n        } else if (tag.name.equalsIgnoreCase(\"frame\")) {\r\n            final AnchorURL src = absolutePath(tag.opts.getProperty(\"src\", EMPTY_STRING));\r\n            tag.opts.put(\"src\", src.toNormalform(true));\r\n            src.setAll(tag.opts);\r\n            //this.anchors.add(src); // don't add the frame to the anchors because the webgraph should not contain such links (by definition)\r\n            this.frames.add(src);\r\n            this.evaluationScores.match(Element.framepath, src.toNormalform(true));\r\n        } else if (tag.name.equalsIgnoreCase(\"body\")) {\r\n            final String classprop = tag.opts.getProperty(\"class\", EMPTY_STRING);\r\n            this.evaluationScores.match(Element.bodyclass, classprop);\r\n        } else if (tag.name.equalsIgnoreCase(\"meta\")) {\r\n            final String content = tag.opts.getProperty(\"content\", EMPTY_STRING);\r\n            String name = tag.opts.getProperty(\"name\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n                if (name.toLowerCase().equals(\"generator\")) {\r\n                    this.evaluationScores.match(Element.metagenerator, content);\r\n                }\r\n            }\r\n            name = tag.opts.getProperty(\"http-equiv\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n            }\r\n            name = tag.opts.getProperty(\"property\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"area\")) {\r\n            final String areatitle = cleanLine(tag.opts.getProperty(\"title\", EMPTY_STRING));\r\n            //String alt   = tag.opts.getProperty(\"alt\",EMPTY_STRING);\r\n            final String href  = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            if (href.length() > 0) {\r\n                tag.opts.put(\"name\", areatitle);\r\n                AnchorURL url = absolutePath(href);\r\n                tag.opts.put(\"href\", url.toNormalform(true));\r\n                url.setAll(tag.opts);\r\n                this.anchors.add(url);\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"link\")) {\r\n            final String href = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            final AnchorURL newLink = absolutePath(href);\r\n\r\n            if (newLink != null) {\r\n                tag.opts.put(\"href\", newLink.toNormalform(true));\r\n                String rel = tag.opts.getProperty(\"rel\", EMPTY_STRING);\r\n                final String linktitle = tag.opts.getProperty(\"title\", EMPTY_STRING);\r\n                final String type = tag.opts.getProperty(\"type\", EMPTY_STRING);\r\n                final String hreflang = tag.opts.getProperty(\"hreflang\", EMPTY_STRING);\r\n\r\n                if (rel.equalsIgnoreCase(\"shortcut icon\") || rel.equalsIgnoreCase(\"icon\")) { // html5 -> rel=\"icon\")\r\n                    final ImageEntry ie = new ImageEntry(newLink, linktitle, -1, -1, -1);\r\n                    this.images.add(ie);\r\n                    this.favicon = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"canonical\")) {\r\n                    tag.opts.put(\"name\", this.titles.size() == 0 ? \"\" : this.titles.iterator().next());\r\n                    newLink.setAll(tag.opts);\r\n                    this.anchors.add(newLink);\r\n                    this.canonical = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"publisher\")) {\r\n                    this.publisher = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"top\") || rel.equalsIgnoreCase(\"up\") || rel.equalsIgnoreCase(\"next\") || rel.equalsIgnoreCase(\"prev\") || rel.equalsIgnoreCase(\"first\") || rel.equalsIgnoreCase(\"last\")) {\r\n                    this.navigation.put(rel, newLink);\r\n                } else if (rel.equalsIgnoreCase(\"alternate\") && type.equalsIgnoreCase(\"application/rss+xml\")) {\r\n                    this.rss.put(newLink, linktitle);\r\n                } else if (rel.equalsIgnoreCase(\"alternate\") && hreflang.length() > 0) {\r\n                    this.hreflang.put(hreflang, newLink);\r\n                } else if (rel.equalsIgnoreCase(\"stylesheet\") && type.equalsIgnoreCase(\"text/css\")) {\r\n                    this.css.put(newLink, rel);\r\n                    this.evaluationScores.match(Element.csspath, href);\r\n                } else if (!rel.equalsIgnoreCase(\"stylesheet\") && !rel.equalsIgnoreCase(\"alternate stylesheet\")) {\r\n                    tag.opts.put(\"name\", linktitle);\r\n                    newLink.setAll(tag.opts);\r\n                    this.anchors.add(newLink);\r\n                }\r\n            }\r\n        } else if(tag.name.equalsIgnoreCase(\"embed\") || tag.name.equalsIgnoreCase(\"source\")) { //html5 tag\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            try {\r\n                if (src.length() > 0) {\r\n                    final AnchorURL url = absolutePath(src);\r\n                    if (url != null) {\r\n                        final int width = Integer.parseInt(tag.opts.getProperty(\"width\", \"-1\"));\r\n                        final int height = Integer.parseInt(tag.opts.getProperty(\"height\", \"-1\"));\r\n                        tag.opts.put(\"src\", url.toNormalform(true));\r\n                        final EmbedEntry ie = new EmbedEntry(url, width, height, tag.opts.getProperty(\"type\", EMPTY_STRING), tag.opts.getProperty(\"pluginspage\", EMPTY_STRING));\r\n                        this.embeds.put(url, ie);\r\n                        url.setAll(tag.opts);\r\n                        // this.anchors.add(url); // don't add the embed to the anchors because the webgraph should not contain such links (by definition)\r\n                    }\r\n                }\r\n            } catch (final NumberFormatException e) {}\r\n        } else if(tag.name.equalsIgnoreCase(\"param\")) {\r\n            final String name = tag.opts.getProperty(\"name\", EMPTY_STRING);\r\n            if (name.equalsIgnoreCase(\"movie\")) {\r\n                AnchorURL url = absolutePath(tag.opts.getProperty(\"value\", EMPTY_STRING));\r\n                tag.opts.put(\"value\", url.toNormalform(true));\r\n                url.setAll(tag.opts);\r\n                this.anchors.add(url);\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"iframe\")) {\r\n            final AnchorURL src = absolutePath(tag.opts.getProperty(\"src\", EMPTY_STRING));\r\n            tag.opts.put(\"src\", src.toNormalform(true));\r\n            src.setAll(tag.opts);\r\n            //this.anchors.add(src); // don't add the iframe to the anchors because the webgraph should not contain such links (by definition)\r\n            this.iframes.add(src);\r\n            this.evaluationScores.match(Element.iframepath, src.toNormalform(true));\r\n        } else if (tag.name.equalsIgnoreCase(\"html\")) {\r\n            final String lang = tag.opts.getProperty(\"lang\", EMPTY_STRING);\r\n            if (!lang.isEmpty()) // fake a language meta to preserv detection from <html lang=\"xx\" />\r\n                this.metas.put(\"dc.language\",lang.substring(0,2)); // fix found entries like \"hu-hu\"\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag0(tag.name, tag.opts);\r\n    }","id":59198,"modified_method":"@Override\r\n    public void scrapeTag0(Tag tag) {\r\n        checkOpts(tag);\r\n        if (tag.name.equalsIgnoreCase(\"img\")) {\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            try {\r\n                if (src.length() > 0) {\r\n                    final DigestURL url = absolutePath(src);\r\n                    if (url != null) {\r\n                        // use to allow parse of \"550px\", with better performance as Numberformat.parse\r\n                        final int width = NumberTools.parseIntDecSubstring(tag.opts.getProperty(\"width\", \"-1\")); // Integer.parseInt fails on \"200px\"\r\n                        final int height = NumberTools.parseIntDecSubstring(tag.opts.getProperty(\"height\", \"-1\"));\r\n                        final ImageEntry ie = new ImageEntry(url, tag.opts.getProperty(\"alt\", EMPTY_STRING), width, height, -1);\r\n                        this.images.add(ie);\r\n                    }\r\n                }\r\n            } catch (final NumberFormatException e) {}\r\n            this.evaluationScores.match(Element.imgpath, src);\r\n        } else if(tag.name.equalsIgnoreCase(\"base\")) {\r\n            try {\r\n                this.root = new DigestURL(tag.opts.getProperty(\"href\", EMPTY_STRING));\r\n            } catch (final MalformedURLException e) {}\r\n        } else if (tag.name.equalsIgnoreCase(\"frame\")) {\r\n            final AnchorURL src = absolutePath(tag.opts.getProperty(\"src\", EMPTY_STRING));\r\n            if(src != null) {\r\n            \ttag.opts.put(\"src\", src.toNormalform(true));\r\n            \tsrc.setAll(tag.opts);\r\n            \t//this.anchors.add(src); // don't add the frame to the anchors because the webgraph should not contain such links (by definition)\r\n            \tthis.frames.add(src);\r\n            \tthis.evaluationScores.match(Element.framepath, src.toNormalform(true));\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"body\")) {\r\n            final String classprop = tag.opts.getProperty(\"class\", EMPTY_STRING);\r\n            this.evaluationScores.match(Element.bodyclass, classprop);\r\n        } else if (tag.name.equalsIgnoreCase(\"meta\")) {\r\n            final String content = tag.opts.getProperty(\"content\", EMPTY_STRING);\r\n            String name = tag.opts.getProperty(\"name\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n                if (name.toLowerCase().equals(\"generator\")) {\r\n                    this.evaluationScores.match(Element.metagenerator, content);\r\n                }\r\n            }\r\n            name = tag.opts.getProperty(\"http-equiv\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n            }\r\n            name = tag.opts.getProperty(\"property\", EMPTY_STRING);\r\n            if (name.length() > 0) {\r\n                this.metas.put(name.toLowerCase(), CharacterCoding.html2unicode(content));\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"area\")) {\r\n            final String areatitle = cleanLine(tag.opts.getProperty(\"title\", EMPTY_STRING));\r\n            //String alt   = tag.opts.getProperty(\"alt\",EMPTY_STRING);\r\n            final String href  = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            if (href.length() > 0) {\r\n                tag.opts.put(\"name\", areatitle);\r\n                AnchorURL url = absolutePath(href);\r\n                if(url != null) {\r\n                \ttag.opts.put(\"href\", url.toNormalform(true));\r\n                \turl.setAll(tag.opts);\r\n                \tthis.anchors.add(url);\r\n                }\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"link\")) {\r\n            final String href = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            final AnchorURL newLink = absolutePath(href);\r\n\r\n            if (newLink != null) {\r\n                tag.opts.put(\"href\", newLink.toNormalform(true));\r\n                String rel = tag.opts.getProperty(\"rel\", EMPTY_STRING);\r\n                final String linktitle = tag.opts.getProperty(\"title\", EMPTY_STRING);\r\n                final String type = tag.opts.getProperty(\"type\", EMPTY_STRING);\r\n                final String hreflang = tag.opts.getProperty(\"hreflang\", EMPTY_STRING);\r\n\r\n                if (rel.equalsIgnoreCase(\"shortcut icon\") || rel.equalsIgnoreCase(\"icon\")) { // html5 -> rel=\"icon\")\r\n                    final ImageEntry ie = new ImageEntry(newLink, linktitle, -1, -1, -1);\r\n                    this.images.add(ie);\r\n                    this.favicon = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"canonical\")) {\r\n                    tag.opts.put(\"name\", this.titles.size() == 0 ? \"\" : this.titles.iterator().next());\r\n                    newLink.setAll(tag.opts);\r\n                    this.anchors.add(newLink);\r\n                    this.canonical = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"publisher\")) {\r\n                    this.publisher = newLink;\r\n                } else if (rel.equalsIgnoreCase(\"top\") || rel.equalsIgnoreCase(\"up\") || rel.equalsIgnoreCase(\"next\") || rel.equalsIgnoreCase(\"prev\") || rel.equalsIgnoreCase(\"first\") || rel.equalsIgnoreCase(\"last\")) {\r\n                    this.navigation.put(rel, newLink);\r\n                } else if (rel.equalsIgnoreCase(\"alternate\") && type.equalsIgnoreCase(\"application/rss+xml\")) {\r\n                    this.rss.put(newLink, linktitle);\r\n                } else if (rel.equalsIgnoreCase(\"alternate\") && hreflang.length() > 0) {\r\n                    this.hreflang.put(hreflang, newLink);\r\n                } else if (rel.equalsIgnoreCase(\"stylesheet\") && type.equalsIgnoreCase(\"text/css\")) {\r\n                    this.css.put(newLink, rel);\r\n                    this.evaluationScores.match(Element.csspath, href);\r\n                } else if (!rel.equalsIgnoreCase(\"stylesheet\") && !rel.equalsIgnoreCase(\"alternate stylesheet\")) {\r\n                    tag.opts.put(\"name\", linktitle);\r\n                    newLink.setAll(tag.opts);\r\n                    this.anchors.add(newLink);\r\n                }\r\n            }\r\n        } else if(tag.name.equalsIgnoreCase(\"embed\") || tag.name.equalsIgnoreCase(\"source\")) { //html5 tag\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            try {\r\n                if (src.length() > 0) {\r\n                    final AnchorURL url = absolutePath(src);\r\n                    if (url != null) {\r\n                        final int width = Integer.parseInt(tag.opts.getProperty(\"width\", \"-1\"));\r\n                        final int height = Integer.parseInt(tag.opts.getProperty(\"height\", \"-1\"));\r\n                        tag.opts.put(\"src\", url.toNormalform(true));\r\n                        final EmbedEntry ie = new EmbedEntry(url, width, height, tag.opts.getProperty(\"type\", EMPTY_STRING), tag.opts.getProperty(\"pluginspage\", EMPTY_STRING));\r\n                        this.embeds.put(url, ie);\r\n                        url.setAll(tag.opts);\r\n                        // this.anchors.add(url); // don't add the embed to the anchors because the webgraph should not contain such links (by definition)\r\n                    }\r\n                }\r\n            } catch (final NumberFormatException e) {}\r\n        } else if(tag.name.equalsIgnoreCase(\"param\")) {\r\n            final String name = tag.opts.getProperty(\"name\", EMPTY_STRING);\r\n            if (name.equalsIgnoreCase(\"movie\")) {\r\n                AnchorURL url = absolutePath(tag.opts.getProperty(\"value\", EMPTY_STRING));\r\n                tag.opts.put(\"value\", url.toNormalform(true));\r\n                url.setAll(tag.opts);\r\n                this.anchors.add(url);\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"iframe\")) {\r\n            final AnchorURL src = absolutePath(tag.opts.getProperty(\"src\", EMPTY_STRING));\r\n            tag.opts.put(\"src\", src.toNormalform(true));\r\n            src.setAll(tag.opts);\r\n            //this.anchors.add(src); // don't add the iframe to the anchors because the webgraph should not contain such links (by definition)\r\n            this.iframes.add(src);\r\n            this.evaluationScores.match(Element.iframepath, src.toNormalform(true));\r\n        } else if (tag.name.equalsIgnoreCase(\"html\")) {\r\n            final String lang = tag.opts.getProperty(\"lang\", EMPTY_STRING);\r\n            if (!lang.isEmpty()) // fake a language meta to preserv detection from <html lang=\"xx\" />\r\n                this.metas.put(\"dc.language\",lang.substring(0,2)); // fix found entries like \"hu-hu\"\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag0(tag.name, tag.opts);\r\n    }","commit_id":"b1b8e69da8cc0e53f42ad1f78a4a64a641b9b0a7","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private AnchorURL absolutePath(final String relativePath) {\r\n        try {\r\n            return AnchorURL.newAnchor(this.root, relativePath);\r\n        } catch (final Exception e) {\r\n            return null;\r\n        }\r\n    }","id":59199,"modified_method":"/**\r\n     * @param relativePath relative path to this document base URL\r\n     * @return the absolute URL (concatenation of this document root with the relative path) or null when malformed\r\n     */\r\n    private AnchorURL absolutePath(final String relativePath) {\r\n        try {\r\n            return AnchorURL.newAnchor(this.root, relativePath);\r\n        } catch (final Exception e) {\r\n            return null;\r\n        }\r\n    }","commit_id":"b1b8e69da8cc0e53f42ad1f78a4a64a641b9b0a7","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Override\r\n    public void scrapeTag1(Tag tag) {\r\n        checkOpts(tag);\r\n        // System.out.println(\"ScrapeTag1: tag.tagname=\" + tag.tagname + \", opts=\" + tag.opts.toString() + \", text=\" + UTF8.String(text));\r\n        if (tag.name.equalsIgnoreCase(\"a\") && tag.content.length() < 2048) {\r\n            String href = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            href = CharacterCoding.html2unicode(href);\r\n            AnchorURL url;\r\n            if ((href.length() > 0) && ((url = absolutePath(href)) != null)) {\r\n                if (followDenied()) {\r\n                    String rel = tag.opts.getProperty(\"rel\", EMPTY_STRING);\r\n                    if (rel.length() == 0) rel = \"nofollow\"; else if (rel.indexOf(\"nofollow\") < 0) rel += \",nofollow\"; \r\n                    tag.opts.put(\"rel\", rel);\r\n                }\r\n                tag.opts.put(\"text\", stripAllTags(tag.content.getChars())); // strip any inline html in tag text like  \"<a ...> <span>test<\/span> <\/a>\"\r\n                tag.opts.put(\"href\", url.toNormalform(true)); // we must assign this because the url may have resolved backpaths and may not be absolute\r\n                url.setAll(tag.opts);\r\n                recursiveParse(url, tag.content.getChars());\r\n                this.anchors.add(url);\r\n            }\r\n            this.evaluationScores.match(Element.apath, href);\r\n        }\r\n        final String h;\r\n        if (tag.name.equalsIgnoreCase(\"div\")) {\r\n            final String id = tag.opts.getProperty(\"id\", EMPTY_STRING);\r\n            this.evaluationScores.match(Element.divid, id);\r\n            final String itemtype = tag.opts.getProperty(\"itemtype\", EMPTY_STRING);\r\n            if (itemtype.equals(\"http://data-vocabulary.org/Breadcrumb\")) {\r\n                breadcrumbs++;\r\n            }\r\n        } else if ((tag.name.equalsIgnoreCase(\"h1\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[0].add(h);\r\n        } else if((tag.name.equalsIgnoreCase(\"h2\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[1].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h3\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[2].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h4\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[3].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h5\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[4].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h6\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[5].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"title\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            this.titles.add(h);\r\n            this.evaluationScores.match(Element.title, h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"b\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"strong\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"em\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"i\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.italic.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"u\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.underline.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"li\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.li.add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"dt\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.dt.add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"dd\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.dd.add(h);\r\n        } else if (tag.name.equalsIgnoreCase(\"script\")) {\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            if (src.length() > 0) {\r\n                this.script.add(absolutePath(src));\r\n                this.evaluationScores.match(Element.scriptpath, src);\r\n            } else {\r\n                this.evaluationScores.match(Element.scriptcode, LB.matcher(new String(tag.content.getChars())).replaceAll(\" \"));\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"article\")) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.articles.add(h);\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag1(tag.name, tag.opts, tag.content.getChars());\r\n    }","id":59200,"modified_method":"@Override\r\n    public void scrapeTag1(Tag tag) {\r\n        checkOpts(tag);\r\n        // System.out.println(\"ScrapeTag1: tag.tagname=\" + tag.tagname + \", opts=\" + tag.opts.toString() + \", text=\" + UTF8.String(text));\r\n        if (tag.name.equalsIgnoreCase(\"a\") && tag.content.length() < 2048) {\r\n            String href = tag.opts.getProperty(\"href\", EMPTY_STRING);\r\n            href = CharacterCoding.html2unicode(href);\r\n            AnchorURL url;\r\n            if ((href.length() > 0) && ((url = absolutePath(href)) != null)) {\r\n                if (followDenied()) {\r\n                    String rel = tag.opts.getProperty(\"rel\", EMPTY_STRING);\r\n                    if (rel.length() == 0) rel = \"nofollow\"; else if (rel.indexOf(\"nofollow\") < 0) rel += \",nofollow\"; \r\n                    tag.opts.put(\"rel\", rel);\r\n                }\r\n                tag.opts.put(\"text\", stripAllTags(tag.content.getChars())); // strip any inline html in tag text like  \"<a ...> <span>test<\/span> <\/a>\"\r\n                tag.opts.put(\"href\", url.toNormalform(true)); // we must assign this because the url may have resolved backpaths and may not be absolute\r\n                url.setAll(tag.opts);\r\n                recursiveParse(url, tag.content.getChars());\r\n                this.anchors.add(url);\r\n            }\r\n            this.evaluationScores.match(Element.apath, href);\r\n        }\r\n        final String h;\r\n        if (tag.name.equalsIgnoreCase(\"div\")) {\r\n            final String id = tag.opts.getProperty(\"id\", EMPTY_STRING);\r\n            this.evaluationScores.match(Element.divid, id);\r\n            final String itemtype = tag.opts.getProperty(\"itemtype\", EMPTY_STRING);\r\n            if (itemtype.equals(\"http://data-vocabulary.org/Breadcrumb\")) {\r\n                breadcrumbs++;\r\n            }\r\n        } else if ((tag.name.equalsIgnoreCase(\"h1\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[0].add(h);\r\n        } else if((tag.name.equalsIgnoreCase(\"h2\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[1].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h3\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[2].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h4\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[3].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h5\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[4].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"h6\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.headlines[5].add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"title\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            this.titles.add(h);\r\n            this.evaluationScores.match(Element.title, h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"b\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"strong\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"em\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.bold.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"i\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.italic.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"u\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.underline.inc(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"li\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.li.add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"dt\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.dt.add(h);\r\n        } else if ((tag.name.equalsIgnoreCase(\"dd\")) && (tag.content.length() < 1024)) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.dd.add(h);\r\n        } else if (tag.name.equalsIgnoreCase(\"script\")) {\r\n            final String src = tag.opts.getProperty(\"src\", EMPTY_STRING);\r\n            if (src.length() > 0) {\r\n            \tAnchorURL absoluteSrc = absolutePath(src);\r\n            \tif(absoluteSrc != null) {\r\n            \t\tthis.script.add(absoluteSrc);\r\n            \t}\r\n                this.evaluationScores.match(Element.scriptpath, src);\r\n            } else {\r\n                this.evaluationScores.match(Element.scriptcode, LB.matcher(new String(tag.content.getChars())).replaceAll(\" \"));\r\n            }\r\n        } else if (tag.name.equalsIgnoreCase(\"article\")) {\r\n            h = cleanLine(CharacterCoding.html2unicode(stripAllTags(tag.content.getChars())));\r\n            if (h.length() > 0) this.articles.add(h);\r\n        }\r\n\r\n        // fire event\r\n        fireScrapeTag1(tag.name, tag.opts, tag.content.getChars());\r\n    }","commit_id":"b1b8e69da8cc0e53f42ad1f78a4a64a641b9b0a7","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public ImmutableMuleEndpoint(UMOImmutableEndpoint source)\n    {\n        this();\n        initFromDescriptor(source);\n    }","id":59201,"modified_method":"public ImmutableMuleEndpoint(UMOImmutableEndpoint source)\n    {\n        this();\n        this.initFromDescriptor(source);\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Default constructor\n     */\n    public ImmutableMuleEndpoint(String name,\n                                 UMOEndpointURI endpointUri,\n                                 UMOConnector connector,\n                                 UMOTransformer transformer,\n                                 String type,\n                                 int createConnector,\n                                 String endpointEncoding,\n                                 Map properties)\n    {\n        this.name = name;\n        this.endpointUri = endpointUri;\n        this.connector = connector;\n        this.transformer = transformer;\n        this.createConnector = createConnector;\n        this.endpointEncoding = endpointEncoding;\n        if (transformer != null) {\n            getTransformer().setEndpoint(this);\n        }\n\n        this.type = type;\n        if (properties != null) {\n            this.properties = properties;\n        } else {\n            properties = new HashMap();\n        }\n\n        // Create a default transaction config\n        transactionConfig = new MuleTransactionConfig();\n        if (properties != null && endpointUri != null) {\n            properties.putAll(endpointUri.getParams());\n        }\n    }","id":59202,"modified_method":"/**\n     * Default constructor\n     */\n    public ImmutableMuleEndpoint(String name,\n                                 UMOEndpointURI endpointUri,\n                                 UMOConnector connector,\n                                 UMOTransformer transformer,\n                                 String type,\n                                 int createConnector,\n                                 String endpointEncoding,\n                                 Map props)\n    {\n        this.name = name;\n        this.connector = connector;\n        this.createConnector = createConnector;\n        this.endpointEncoding = endpointEncoding;\n        this.type = type;\n\n        if (endpointUri != null) {\n            this.endpointUri = new MuleEndpointURI(endpointUri);\n        }\n\n        if (transformer != null) {\n            transformer.setEndpoint(this);\n            this.transformer = transformer;\n        }\n\n        this.properties = new ConcurrentHashMap();\n\n        if (props != null) {\n            this.properties.putAll(props);\n        }\n\n        if (endpointUri != null) {\n            properties.putAll(endpointUri.getParams());\n        }\n\n        // seal the properties if we are immutable to avoid\n        // write-through aliasing problems with the exposed Map\n        if (!(this instanceof MuleEndpoint)) {\n            this.properties = Collections.unmodifiableMap(this.properties);\n        }\n\n        // Create a default transaction config\n        transactionConfig = new MuleTransactionConfig();\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void initFromDescriptor(UMOImmutableEndpoint source)\n    {\n        if (this.name == null) {\n            this.name = source.getName();\n        }\n        if (this.endpointUri == null) {\n            this.endpointUri = source.getEndpointURI();\n        }\n        if (this.endpointEncoding == null) {\n            this.endpointEncoding = source.getEncoding();\n        }\n        if (this.connector == null) {\n            this.connector = source.getConnector();\n        }\n        if (this.transformer == null) {\n            this.transformer = source.getTransformer();\n        }\n        if (transformer != null) {\n            getTransformer().setEndpoint(this);\n        }\n\n        if (this.responseTransformer == null) {\n            this.responseTransformer = source.getResponseTransformer();\n        }\n        if (responseTransformer != null) {\n            getResponseTransformer().setEndpoint(this);\n        }\n        this.type = source.getType();\n        if (source.getProperties() != null) {\n            this.properties = source.getProperties();\n        }\n        \n        this.transactionConfig = source.getTransactionConfig();\n        if (properties != null && endpointUri != null && endpointUri.getParams()!=null) {\n            properties.putAll(endpointUri.getParams());\n        }\n\n        remoteSyncTimeout = new Integer(source.getRemoteSyncTimeout());\n        remoteSync = new Boolean(source.isRemoteSync());\n\n        filter = source.getFilter();\n        securityFilter = source.getSecurityFilter();\n    }","id":59203,"modified_method":"protected void initFromDescriptor(UMOImmutableEndpoint source)\n    {\n        if (this.name == null) {\n            this.name = source.getName();\n        }\n\n        if (this.endpointUri == null && source.getEndpointURI() != null) {\n            this.endpointUri = new MuleEndpointURI(source.getEndpointURI());\n        }\n\n        if (this.endpointEncoding == null) {\n            this.endpointEncoding = source.getEncoding();\n        }\n\n        if (this.connector == null) {\n            this.connector = source.getConnector();\n        }\n\n        if (this.transformer == null) {\n            this.transformer = source.getTransformer();\n        }\n\n        if (this.transformer != null) {\n            this.transformer.setEndpoint(this);\n        }\n\n        if (this.responseTransformer == null) {\n            this.responseTransformer = source.getResponseTransformer();\n        }\n\n        if (responseTransformer != null) {\n            this.responseTransformer.setEndpoint(this);\n        }\n\n        this.properties = new ConcurrentHashMap();\n\n        if (source.getProperties() != null) {\n            this.properties.putAll(source.getProperties());\n        }\n\n        if (endpointUri != null && endpointUri.getParams() != null) {\n            this.properties.putAll(endpointUri.getParams());\n        }\n\n        // seal the properties if we are immutable to avoid\n        // write-through aliasing problems with the exposed Map\n        if (!(this instanceof MuleEndpoint)) {\n            this.properties = Collections.unmodifiableMap(this.properties);\n        }\n\n        this.type = source.getType();\n        this.transactionConfig = source.getTransactionConfig();\n        this.deleteUnacceptedMessages = source.isDeleteUnacceptedMessages();\n        this.initialState = source.getInitialState();\n\n        remoteSyncTimeout = new Integer(source.getRemoteSyncTimeout());\n        remoteSync = Boolean.valueOf(source.isRemoteSync());\n\n        filter = source.getFilter();\n        securityFilter = source.getSecurityFilter();\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object clone()// throws CloneNotSupportedException\n    {\n        UMOEndpoint clone = new MuleEndpoint(name,\n                                             endpointUri,\n                                             connector,\n                                             transformer,\n                                             type,\n                                             createConnector,\n                                             endpointEncoding,\n                                             (properties == null ? null : new HashMap(properties)));\n        clone.setTransactionConfig(transactionConfig);\n        clone.setFilter(filter);\n        clone.setSecurityFilter(securityFilter);\n\n        if(remoteSync!=null) {\n            clone.setRemoteSync(isRemoteSync());\n        }\n        if(remoteSyncTimeout!=null) {\n            clone.setRemoteSyncTimeout(getRemoteSyncTimeout());\n        }\n\n        if (synchronous != null) {\n            clone.setSynchronous(synchronous.booleanValue());\n        }\n        clone.setDeleteUnacceptedMessages(deleteUnacceptedMessages);\n\n        clone.setInitialState(initialState);\n        if(initialised.get()) {\n            try {\n                clone.initialise();\n            } catch (InitialisationException e) {\n                //this really should never happen as the endpoint is already initialised\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return clone;\n\n    }","id":59204,"modified_method":"public Object clone()\n    {\n        UMOEndpoint clone = new MuleEndpoint(name, endpointUri, connector, transformer, type,\n                createConnector, endpointEncoding, properties);\n\n        clone.setTransactionConfig(transactionConfig);\n        clone.setFilter(filter);\n        clone.setSecurityFilter(securityFilter);\n\n        if (remoteSync != null) {\n            clone.setRemoteSync(isRemoteSync());\n        }\n        if (remoteSyncTimeout != null) {\n            clone.setRemoteSyncTimeout(getRemoteSyncTimeout());\n        }\n\n        if (synchronous != null) {\n            clone.setSynchronous(synchronous.booleanValue());\n        }\n\n        clone.setDeleteUnacceptedMessages(deleteUnacceptedMessages);\n\n        clone.setInitialState(initialState);\n        if (initialised.get()) {\n            try {\n                clone.initialise();\n            }\n            catch (InitialisationException e) {\n                // this really should never happen as the endpoint is already\n                // initialised\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        return clone;\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleEndpoint(String name,\n                        UMOEndpointURI endpointUri,\n                        UMOConnector connector,\n                        UMOTransformer transformer,\n                        String type,\n                        int createConnector,\n                        String endpointEncoding,\n                        Map properties)\n    {\n        super(name, endpointUri, connector, transformer, type, createConnector, endpointEncoding, properties);\n    }","id":59205,"modified_method":"public MuleEndpoint(String name,\n                        UMOEndpointURI endpointUri,\n                        UMOConnector connector,\n                        UMOTransformer transformer,\n                        String type,\n                        int createConnector,\n                        String endpointEncoding,\n                        Map props)\n    {\n        super(name, endpointUri, connector, transformer, type, createConnector, endpointEncoding, props);\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setProperties(Map props)\n    {\n        properties = props;\n    }","id":59206,"modified_method":"public void setProperties(Map props)\n    {\n        properties.clear();\n        properties.putAll(props);\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Default constructor This is required right now for the Mule digester to\n     * set the properties through the classes mutators\n     */\n    public MuleEndpoint()\n    {\n        super(null, null, null, null, ENDPOINT_TYPE_SENDER_AND_RECEIVER, 0,null, new HashMap());\n    }","id":59207,"modified_method":"/**\n     * Default constructor This is required right now for the Mule digester to\n     * set the properties through the classes mutators\n     */\n    public MuleEndpoint()\n    {\n        super(null, null, null, null, ENDPOINT_TYPE_SENDER_AND_RECEIVER, 0, null, null);\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleEndpoint(String endpoint, boolean receiver) throws UMOException\n    {\n        super(endpoint, (receiver ? UMOEndpoint.ENDPOINT_TYPE_RECEIVER : UMOEndpoint.ENDPOINT_TYPE_SENDER));\n    }","id":59208,"modified_method":"public MuleEndpoint(String endpointName, boolean receiver) throws UMOException\n    {\n        this();\n        String type = (receiver ? UMOEndpoint.ENDPOINT_TYPE_RECEIVER : UMOEndpoint.ENDPOINT_TYPE_SENDER);\n        UMOEndpoint p = getOrCreateEndpointForUri(new MuleEndpointURI(endpointName), type);\n        this.initFromDescriptor(p);\n    }","commit_id":"fc9a3211b2e515690ae1759049f2ed1c8765cba1","url":"https://github.com/mulesoft/mule"},{"original_method":"public ImmutableMuleEndpoint(UMOImmutableEndpoint source)\n    {\n        this();\n        initFromDescriptor(source);\n    }","id":59209,"modified_method":"public ImmutableMuleEndpoint(UMOImmutableEndpoint source)\n    {\n        this();\n        this.initFromDescriptor(source);\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Default constructor\n     */\n    public ImmutableMuleEndpoint(String name,\n                                 UMOEndpointURI endpointUri,\n                                 UMOConnector connector,\n                                 UMOTransformer transformer,\n                                 String type,\n                                 int createConnector,\n                                 String endpointEncoding,\n                                 Map properties)\n    {\n        this.name = name;\n        this.endpointUri = endpointUri;\n        this.connector = connector;\n        this.transformer = transformer;\n        this.createConnector = createConnector;\n        this.endpointEncoding = endpointEncoding;\n        if (transformer != null) {\n            getTransformer().setEndpoint(this);\n        }\n\n        this.type = type;\n        if (properties != null) {\n            this.properties = properties;\n        } else {\n            properties = new HashMap();\n        }\n\n        // Create a default transaction config\n        transactionConfig = new MuleTransactionConfig();\n        if (properties != null && endpointUri != null) {\n            properties.putAll(endpointUri.getParams());\n        }\n    }","id":59210,"modified_method":"/**\n     * Default constructor\n     */\n    public ImmutableMuleEndpoint(String name,\n                                 UMOEndpointURI endpointUri,\n                                 UMOConnector connector,\n                                 UMOTransformer transformer,\n                                 String type,\n                                 int createConnector,\n                                 String endpointEncoding,\n                                 Map props)\n    {\n        this.name = name;\n        this.connector = connector;\n        this.createConnector = createConnector;\n        this.endpointEncoding = endpointEncoding;\n        this.type = type;\n\n        if (endpointUri != null) {\n            this.endpointUri = new MuleEndpointURI(endpointUri);\n        }\n\n        if (transformer != null) {\n            transformer.setEndpoint(this);\n            this.transformer = transformer;\n        }\n\n        this.properties = new ConcurrentHashMap();\n\n        if (props != null) {\n            this.properties.putAll(props);\n        }\n\n        if (endpointUri != null) {\n            properties.putAll(endpointUri.getParams());\n        }\n\n        // seal the properties if we are immutable to avoid\n        // write-through aliasing problems with the exposed Map\n        if (!(this instanceof MuleEndpoint)) {\n            this.properties = Collections.unmodifiableMap(this.properties);\n        }\n\n        // Create a default transaction config\n        transactionConfig = new MuleTransactionConfig();\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"public Object clone()// throws CloneNotSupportedException\n    {\n        UMOEndpoint clone = new MuleEndpoint(name,\n                                             endpointUri,\n                                             connector,\n                                             transformer,\n                                             type,\n                                             createConnector,\n                                             endpointEncoding,\n                                             (properties == null ? null : new HashMap(properties)));\n        clone.setTransactionConfig(transactionConfig);\n        clone.setFilter(filter);\n        clone.setSecurityFilter(securityFilter);\n\n        if(remoteSync!=null) {\n            clone.setRemoteSync(isRemoteSync());\n        }\n        if(remoteSyncTimeout!=null) {\n            clone.setRemoteSyncTimeout(getRemoteSyncTimeout());\n        }\n\n        if (synchronous != null) {\n            clone.setSynchronous(synchronous.booleanValue());\n        }\n        clone.setDeleteUnacceptedMessages(deleteUnacceptedMessages);\n\n        clone.setInitialState(initialState);\n        if(initialised.get()) {\n            try {\n                clone.initialise();\n            } catch (InitialisationException e) {\n                //this really should never happen as the endpoint is already initialised\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return clone;\n\n    }","id":59211,"modified_method":"public Object clone()\n    {\n        UMOEndpoint clone = new MuleEndpoint(name, endpointUri, connector, transformer, type,\n                createConnector, endpointEncoding, properties);\n\n        clone.setTransactionConfig(transactionConfig);\n        clone.setFilter(filter);\n        clone.setSecurityFilter(securityFilter);\n\n        if (remoteSync != null) {\n            clone.setRemoteSync(isRemoteSync());\n        }\n        if (remoteSyncTimeout != null) {\n            clone.setRemoteSyncTimeout(getRemoteSyncTimeout());\n        }\n\n        if (synchronous != null) {\n            clone.setSynchronous(synchronous.booleanValue());\n        }\n\n        clone.setDeleteUnacceptedMessages(deleteUnacceptedMessages);\n\n        clone.setInitialState(initialState);\n        if (initialised.get()) {\n            try {\n                clone.initialise();\n            }\n            catch (InitialisationException e) {\n                // this really should never happen as the endpoint is already\n                // initialised\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        return clone;\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void initFromDescriptor(UMOImmutableEndpoint source)\n    {\n        if (this.name == null) {\n            this.name = source.getName();\n        }\n        if (this.endpointUri == null) {\n            this.endpointUri = source.getEndpointURI();\n        }\n        if (this.endpointEncoding == null) {\n            this.endpointEncoding = source.getEncoding();\n        }\n        if (this.connector == null) {\n            this.connector = source.getConnector();\n        }\n        if (this.transformer == null) {\n            this.transformer = source.getTransformer();\n        }\n        if (transformer != null) {\n            getTransformer().setEndpoint(this);\n        }\n\n        if (this.responseTransformer == null) {\n            this.responseTransformer = source.getResponseTransformer();\n        }\n        if (responseTransformer != null) {\n            getResponseTransformer().setEndpoint(this);\n        }\n        this.type = source.getType();\n        if (source.getProperties() != null) {\n            this.properties = source.getProperties();\n        }\n        \n        this.transactionConfig = source.getTransactionConfig();\n        if (properties != null && endpointUri != null && endpointUri.getParams()!=null) {\n            properties.putAll(endpointUri.getParams());\n        }\n\n        remoteSyncTimeout = new Integer(source.getRemoteSyncTimeout());\n        remoteSync = new Boolean(source.isRemoteSync());\n\n        filter = source.getFilter();\n        securityFilter = source.getSecurityFilter();\n    }","id":59212,"modified_method":"protected void initFromDescriptor(UMOImmutableEndpoint source)\n    {\n        if (this.name == null) {\n            this.name = source.getName();\n        }\n\n        if (this.endpointUri == null && source.getEndpointURI() != null) {\n            this.endpointUri = new MuleEndpointURI(source.getEndpointURI());\n        }\n\n        if (this.endpointEncoding == null) {\n            this.endpointEncoding = source.getEncoding();\n        }\n\n        if (this.connector == null) {\n            this.connector = source.getConnector();\n        }\n\n        if (this.transformer == null) {\n            this.transformer = source.getTransformer();\n        }\n\n        if (this.transformer != null) {\n            this.transformer.setEndpoint(this);\n        }\n\n        if (this.responseTransformer == null) {\n            this.responseTransformer = source.getResponseTransformer();\n        }\n\n        if (responseTransformer != null) {\n            this.responseTransformer.setEndpoint(this);\n        }\n\n        this.properties = new ConcurrentHashMap();\n\n        if (source.getProperties() != null) {\n            this.properties.putAll(source.getProperties());\n        }\n\n        if (endpointUri != null && endpointUri.getParams() != null) {\n            this.properties.putAll(endpointUri.getParams());\n        }\n\n        // seal the properties if we are immutable to avoid\n        // write-through aliasing problems with the exposed Map\n        if (!(this instanceof MuleEndpoint)) {\n            this.properties = Collections.unmodifiableMap(this.properties);\n        }\n\n        this.type = source.getType();\n        this.transactionConfig = source.getTransactionConfig();\n        this.deleteUnacceptedMessages = source.isDeleteUnacceptedMessages();\n        this.initialState = source.getInitialState();\n\n        remoteSyncTimeout = new Integer(source.getRemoteSyncTimeout());\n        remoteSync = Boolean.valueOf(source.isRemoteSync());\n\n        filter = source.getFilter();\n        securityFilter = source.getSecurityFilter();\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Default constructor This is required right now for the Mule digester to\n     * set the properties through the classes mutators\n     */\n    public MuleEndpoint()\n    {\n        super(null, null, null, null, ENDPOINT_TYPE_SENDER_AND_RECEIVER, 0,null, new HashMap());\n    }","id":59213,"modified_method":"/**\n     * Default constructor This is required right now for the Mule digester to\n     * set the properties through the classes mutators\n     */\n    public MuleEndpoint()\n    {\n        super(null, null, null, null, ENDPOINT_TYPE_SENDER_AND_RECEIVER, 0, null, null);\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"public void setProperties(Map props)\n    {\n        properties = props;\n    }","id":59214,"modified_method":"public void setProperties(Map props)\n    {\n        properties.clear();\n        properties.putAll(props);\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleEndpoint(String endpoint, boolean receiver) throws UMOException\n    {\n        super(endpoint, (receiver ? UMOEndpoint.ENDPOINT_TYPE_RECEIVER : UMOEndpoint.ENDPOINT_TYPE_SENDER));\n    }","id":59215,"modified_method":"public MuleEndpoint(String endpointName, boolean receiver) throws UMOException\n    {\n        this();\n        String type = (receiver ? UMOEndpoint.ENDPOINT_TYPE_RECEIVER : UMOEndpoint.ENDPOINT_TYPE_SENDER);\n        UMOEndpoint p = getOrCreateEndpointForUri(new MuleEndpointURI(endpointName), type);\n        this.initFromDescriptor(p);\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"public MuleEndpoint(String name,\n                        UMOEndpointURI endpointUri,\n                        UMOConnector connector,\n                        UMOTransformer transformer,\n                        String type,\n                        int createConnector,\n                        String endpointEncoding,\n                        Map properties)\n    {\n        super(name, endpointUri, connector, transformer, type, createConnector, endpointEncoding, properties);\n    }","id":59216,"modified_method":"public MuleEndpoint(String name,\n                        UMOEndpointURI endpointUri,\n                        UMOConnector connector,\n                        UMOTransformer transformer,\n                        String type,\n                        int createConnector,\n                        String endpointEncoding,\n                        Map props)\n    {\n        super(name, endpointUri, connector, transformer, type, createConnector, endpointEncoding, props);\n    }","commit_id":"f3db80de52533a7bcc1728c297f8d6cc6d1f68da","url":"https://github.com/mulesoft/mule"},{"original_method":"public void doGet(UMOEventContext context, WriterMessageAdapter response) throws UMOException, IOException\n    {\n        try {\n            UMOEndpointURI endpointUri = context.getEndpointURI();\n//            UMOEndpointURI endpointUri = new MuleEndpointURI(\"soap:\" + context.getEndpointURI().getAddress()\n//                    + context.getMessageAsString());\n            AxisEngine engine = getAxisServer();\n            String pathInfo = endpointUri.getPath();\n            // String realpath =\n            // servletContext.getRealPath(request.getServletPath());\n            boolean wsdlRequested = false;\n            boolean listRequested = false;\n\n            if (endpointUri.getAddress().endsWith(\".jws\")) {\n                throw new AxisFault(\"Jws not supported by the Mule Axis service\");\n            }\n\n            String queryString = endpointUri.getQuery();\n            if (queryString != null) {\n                if (queryString.equalsIgnoreCase(\"wsdl\")) {\n                    wsdlRequested = true;\n                } else {\n                    if (queryString.equalsIgnoreCase(\"list\")) {\n                        listRequested = true;\n                    }\n                }\n            }\n            boolean hasNoPath = pathInfo == null || pathInfo.equals(\"\") || pathInfo.equals(\"/\");\n            if (!wsdlRequested && !listRequested && hasNoPath) {\n                reportAvailableServices(context, response);\n            } else {\n                // if(realpath != null)\n                MessageContext msgContext = new MessageContext(engine);\n                populateMessageContext(msgContext, context, endpointUri);\n\n                msgContext.setProperty(\"transport.url\", endpointUri.toString());\n                if (wsdlRequested)\n                    processWsdlRequest(msgContext, response);\n                else if (listRequested)\n                    processListRequest(response);\n                else if (true /* hasParameters */) {\n                    processMethodRequest(msgContext, context, response, endpointUri);\n                } else {\n                    String serviceName = (String) msgContext.getProperty(\"serviceName\");\n                    if (pathInfo.startsWith(\"/\"))\n                        serviceName = pathInfo.substring(1);\n                    else\n                        serviceName = pathInfo;\n                    SOAPService s = engine.getService(serviceName);\n                    if (s == null) {\n                        reportCantGetAxisService(context, response);\n                    } else {\n                        reportServiceInfo(response, s, serviceName);\n                    }\n                }\n            }\n        } catch (AxisFault fault) {\n            reportTroubleInGet(fault, response);\n        } catch (Exception e) {\n            reportTroubleInGet(e, response);\n        }\n    }","id":59217,"modified_method":"public void doGet(UMOEventContext context, WriterMessageAdapter response) throws UMOException, IOException\n    {\n        try {\n//            UMOEndpointURI endpointUri = context.getEndpointURI();\n            UMOEndpointURI endpointUri = new MuleEndpointURI(\"soap:\" + context.getEndpointURI().getAddress()\n                    + context.getMessageAsString());\n            AxisEngine engine = getAxisServer();\n            String pathInfo = endpointUri.getPath();\n            // String realpath =\n            // servletContext.getRealPath(request.getServletPath());\n            boolean wsdlRequested = false;\n            boolean listRequested = false;\n\n            if (endpointUri.getAddress().endsWith(\".jws\")) {\n                throw new AxisFault(\"Jws not supported by the Mule Axis service\");\n            }\n\n            String queryString = endpointUri.getQuery();\n            if (queryString != null) {\n                if (queryString.equalsIgnoreCase(\"wsdl\")) {\n                    wsdlRequested = true;\n                } else {\n                    if (queryString.equalsIgnoreCase(\"list\")) {\n                        listRequested = true;\n                    }\n                }\n            }\n            boolean hasNoPath = pathInfo == null || pathInfo.equals(\"\") || pathInfo.equals(\"/\");\n            if (!wsdlRequested && !listRequested && hasNoPath) {\n                reportAvailableServices(context, response);\n            } else {\n                // if(realpath != null)\n                MessageContext msgContext = new MessageContext(engine);\n                populateMessageContext(msgContext, context, endpointUri);\n\n                msgContext.setProperty(\"transport.url\", endpointUri.toString());\n                if (wsdlRequested)\n                    processWsdlRequest(msgContext, response);\n                else if (listRequested)\n                    processListRequest(response);\n                else if (true /* hasParameters */) {\n                    processMethodRequest(msgContext, context, response, endpointUri);\n                } else {\n                    String serviceName = (String) msgContext.getProperty(\"serviceName\");\n                    if (pathInfo.startsWith(\"/\"))\n                        serviceName = pathInfo.substring(1);\n                    else\n                        serviceName = pathInfo;\n                    SOAPService s = engine.getService(serviceName);\n                    if (s == null) {\n                        reportCantGetAxisService(context, response);\n                    } else {\n                        reportServiceInfo(response, s, serviceName);\n                    }\n                }\n            }\n        } catch (AxisFault fault) {\n            reportTroubleInGet(fault, response);\n        } catch (Exception e) {\n            reportTroubleInGet(e, response);\n        }\n    }","commit_id":"6bddc1f63ca15403fa380f200a8647a6f4c95f2b","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n  protected void addCompletions(@NotNull final CompletionParameters parameters,\n                                final ProcessingContext context,\n                                @NotNull final CompletionResultSet result) {\n    PsiTryStatement tryStatement = PsiTreeUtil.getParentOfType(parameters.getPosition(), PsiTryStatement.class);\n    final PsiCodeBlock tryBlock = tryStatement == null ? null : tryStatement.getTryBlock();\n    if (tryBlock == null) return;\n\n    final InheritorsHolder holder = new InheritorsHolder(result);\n\n    for (final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {\n      PsiClass typeClass = type.resolve();\n      if (typeClass != null) {\n        result.addElement(createCatchTypeVariant(tryBlock, type));\n        holder.registerClass(typeClass);\n      }\n    }\n\n    final Collection<PsiClassType> expectedClassTypes = Collections.singletonList(JavaPsiFacade.getElementFactory(\n      tryBlock.getProject()).createTypeByFQClassName(CommonClassNames.JAVA_LANG_THROWABLE));\n    JavaInheritorsGetter.processInheritors(parameters, expectedClassTypes, result.getPrefixMatcher(), new Consumer<PsiType>() {\n      @Override\n      public void consume(PsiType type) {\n        final PsiClass psiClass = type instanceof PsiClassType ? ((PsiClassType)type).resolve() : null;\n        if (psiClass == null || psiClass instanceof PsiTypeParameter) return;\n\n        if (!holder.alreadyProcessed(psiClass)) {\n          result.addElement(createCatchTypeVariant(tryBlock, (PsiClassType)type));\n        }\n      }\n    });\n  }","id":59218,"modified_method":"@Override\n  protected void addCompletions(@NotNull final CompletionParameters parameters,\n                                final ProcessingContext context,\n                                @NotNull final CompletionResultSet result) {\n    PsiTryStatement tryStatement = PsiTreeUtil.getParentOfType(parameters.getPosition(), PsiTryStatement.class);\n    final PsiCodeBlock tryBlock = tryStatement == null ? null : tryStatement.getTryBlock();\n    if (tryBlock == null) return;\n\n    final JavaCompletionSession session = new JavaCompletionSession(result);\n\n    for (final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {\n      PsiClass typeClass = type.resolve();\n      if (typeClass != null) {\n        result.addElement(createCatchTypeVariant(tryBlock, type));\n        session.registerClass(typeClass);\n      }\n    }\n\n    final Collection<PsiClassType> expectedClassTypes = Collections.singletonList(JavaPsiFacade.getElementFactory(\n      tryBlock.getProject()).createTypeByFQClassName(CommonClassNames.JAVA_LANG_THROWABLE));\n    JavaInheritorsGetter.processInheritors(parameters, expectedClassTypes, result.getPrefixMatcher(), type -> {\n      final PsiClass psiClass = type instanceof PsiClassType ? ((PsiClassType)type).resolve() : null;\n      if (psiClass == null || psiClass instanceof PsiTypeParameter) return;\n\n      if (!session.alreadyProcessed(psiClass)) {\n        result.addElement(createCatchTypeVariant(tryBlock, (PsiClassType)type));\n      }\n    });\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void addAllClasses(CompletionParameters parameters,\n                                   final Consumer<LookupElement> consumer,\n                                   final InheritorsHolder inheritors, final PrefixMatcher matcher) {\n    final PsiElement position = parameters.getPosition();\n    final boolean afterNew = JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);\n    AllClassesGetter.processJavaClasses(parameters, matcher, parameters.getInvocationCount() <= 1, new Consumer<PsiClass>() {\n      @Override\n      public void consume(PsiClass psiClass) {\n        for (JavaPsiClassReferenceElement element : JavaClassNameCompletionContributor\n          .createClassLookupItems(psiClass, afterNew, new GroovyClassNameInsertHandler(), new Condition<PsiClass>() {\n            @Override\n            public boolean value(PsiClass psiClass) {\n              return !inheritors.alreadyProcessed(psiClass);\n            }\n          })) {\n          consumer.consume(element);\n        }\n      }\n    });\n  }","id":59219,"modified_method":"public static void addAllClasses(CompletionParameters parameters,\n                                   final Consumer<LookupElement> consumer,\n                                   final JavaCompletionSession inheritors, final PrefixMatcher matcher) {\n    final PsiElement position = parameters.getPosition();\n    final boolean afterNew = JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);\n    AllClassesGetter.processJavaClasses(parameters, matcher, parameters.getInvocationCount() <= 1, new Consumer<PsiClass>() {\n      @Override\n      public void consume(PsiClass psiClass) {\n        for (JavaPsiClassReferenceElement element : JavaClassNameCompletionContributor\n          .createClassLookupItems(psiClass, afterNew, new GroovyClassNameInsertHandler(), new Condition<PsiClass>() {\n            @Override\n            public boolean value(PsiClass psiClass) {\n              return !inheritors.alreadyProcessed(psiClass);\n            }\n          })) {\n          consumer.consume(element);\n        }\n      }\n    });\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addAllClasses(CompletionParameters parameters, final CompletionResultSet result, final InheritorsHolder inheritors) {\n    addAllClasses(parameters, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement element) {\n        result.addElement(element);\n      }\n    }, inheritors, result.getPrefixMatcher());\n  }","id":59220,"modified_method":"private static void addAllClasses(CompletionParameters parameters, final CompletionResultSet result, final JavaCompletionSession session) {\n    addAllClasses(parameters, result::addElement, session, result.getPrefixMatcher());\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  static Runnable completeReference(final CompletionParameters parameters,\n                                    final GrReferenceElement reference,\n                                    final InheritorsHolder inheritorsHolder,\n                                    final PrefixMatcher matcher,\n                                    final Consumer<LookupElement> _consumer) {\n    final Consumer<LookupElement> consumer = new Consumer<LookupElement>() {\n      final Set<LookupElement> added = ContainerUtil.newHashSet();\n      @Override\n      public void consume(LookupElement element) {\n        if (added.add(element)) {\n          _consumer.consume(element);\n        }\n      }\n    };\n\n    final Map<PsiModifierListOwner, LookupElement> staticMembers = ContainerUtil.newHashMap();\n    final PsiElement qualifier = reference.getQualifier();\n    final PsiType qualifierType = GroovyCompletionUtil.getQualifierType(qualifier);\n\n    if (reference instanceof GrReferenceExpression && (qualifier instanceof GrExpression || qualifier == null)) {\n      for (String string : CompleteReferencesWithSameQualifier.getVariantsWithSameQualifier((GrReferenceExpression)reference, matcher, (GrExpression)qualifier)) {\n        consumer.consume(LookupElementBuilder.create(string).withItemTextUnderlined(true));\n      }\n      if (parameters.getInvocationCount() < 2 && qualifier != null && qualifierType == null &&\n          !(qualifier instanceof GrReferenceExpression && ((GrReferenceExpression)qualifier).resolve() instanceof PsiPackage)) {\n        if (parameters.getInvocationCount() == 1) {\n          showInfo();\n        }\n        return EmptyRunnable.INSTANCE;\n      }\n    }\n\n    final List<LookupElement> zeroPriority = ContainerUtil.newArrayList();\n\n    PsiClass qualifierClass = com.intellij.psi.util.PsiUtil.resolveClassInClassTypeOnly(qualifierType);\n    final boolean honorExcludes = qualifierClass == null || !JavaCompletionUtil.isInExcludedPackage(qualifierClass, false);\n\n    GroovyCompletionUtil.processVariants(reference, matcher, parameters, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement lookupElement) {\n        Object object = lookupElement.getObject();\n        if (object instanceof GroovyResolveResult) {\n          object = ((GroovyResolveResult)object).getElement();\n        }\n\n        if (isLightElementDeclaredDuringCompletion(object)) {\n          return;\n        }\n\n        if (!(lookupElement instanceof LookupElementBuilder) && inheritorsHolder.alreadyProcessed(lookupElement)) {\n          return;\n        }\n\n        if (honorExcludes && object instanceof PsiMember && JavaCompletionUtil.isInExcludedPackage((PsiMember)object, true)) {\n          return;\n        }\n\n        if (!(object instanceof PsiClass)) {\n          int priority = assignPriority(lookupElement, qualifierType);\n          lookupElement = JavaCompletionUtil.highlightIfNeeded(qualifierType,\n                                                               PrioritizedLookupElement.withPriority(lookupElement, priority), object, reference);\n        }\n\n        if ((object instanceof PsiMethod || object instanceof PsiField) &&\n            ((PsiModifierListOwner)object).hasModifierProperty(PsiModifier.STATIC)) {\n          if (lookupElement.getLookupString().equals(((PsiMember)object).getName())) {\n            staticMembers.put(CompletionUtil.getOriginalOrSelf((PsiModifierListOwner)object), lookupElement);\n          }\n        }\n\n        PrioritizedLookupElement prio = lookupElement.as(PrioritizedLookupElement.CLASS_CONDITION_KEY);\n        if (prio == null || prio.getPriority() == 0) {\n          zeroPriority.add(lookupElement);\n        } else {\n          consumer.consume(lookupElement);\n        }\n      }\n    });\n\n    for (LookupElement element : zeroPriority) {\n      consumer.consume(element);\n    }\n\n    if (qualifier == null) {\n      return addStaticMembers(parameters, matcher, staticMembers, consumer);\n    }\n    return EmptyRunnable.INSTANCE;\n  }","id":59221,"modified_method":"@NotNull\n  static Runnable completeReference(final CompletionParameters parameters,\n                                    final GrReferenceElement reference,\n                                    final JavaCompletionSession inheritorsHolder,\n                                    final PrefixMatcher matcher,\n                                    final Consumer<LookupElement> _consumer) {\n    final Consumer<LookupElement> consumer = new Consumer<LookupElement>() {\n      final Set<LookupElement> added = ContainerUtil.newHashSet();\n      @Override\n      public void consume(LookupElement element) {\n        if (added.add(element)) {\n          _consumer.consume(element);\n        }\n      }\n    };\n\n    final Map<PsiModifierListOwner, LookupElement> staticMembers = ContainerUtil.newHashMap();\n    final PsiElement qualifier = reference.getQualifier();\n    final PsiType qualifierType = GroovyCompletionUtil.getQualifierType(qualifier);\n\n    if (reference instanceof GrReferenceExpression && (qualifier instanceof GrExpression || qualifier == null)) {\n      for (String string : CompleteReferencesWithSameQualifier.getVariantsWithSameQualifier((GrReferenceExpression)reference, matcher, (GrExpression)qualifier)) {\n        consumer.consume(LookupElementBuilder.create(string).withItemTextUnderlined(true));\n      }\n      if (parameters.getInvocationCount() < 2 && qualifier != null && qualifierType == null &&\n          !(qualifier instanceof GrReferenceExpression && ((GrReferenceExpression)qualifier).resolve() instanceof PsiPackage)) {\n        if (parameters.getInvocationCount() == 1) {\n          showInfo();\n        }\n        return EmptyRunnable.INSTANCE;\n      }\n    }\n\n    final List<LookupElement> zeroPriority = ContainerUtil.newArrayList();\n\n    PsiClass qualifierClass = com.intellij.psi.util.PsiUtil.resolveClassInClassTypeOnly(qualifierType);\n    final boolean honorExcludes = qualifierClass == null || !JavaCompletionUtil.isInExcludedPackage(qualifierClass, false);\n\n    GroovyCompletionUtil.processVariants(reference, matcher, parameters, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement lookupElement) {\n        Object object = lookupElement.getObject();\n        if (object instanceof GroovyResolveResult) {\n          object = ((GroovyResolveResult)object).getElement();\n        }\n\n        if (isLightElementDeclaredDuringCompletion(object)) {\n          return;\n        }\n\n        if (!(lookupElement instanceof LookupElementBuilder) && inheritorsHolder.alreadyProcessed(lookupElement)) {\n          return;\n        }\n\n        if (honorExcludes && object instanceof PsiMember && JavaCompletionUtil.isInExcludedPackage((PsiMember)object, true)) {\n          return;\n        }\n\n        if (!(object instanceof PsiClass)) {\n          int priority = assignPriority(lookupElement, qualifierType);\n          lookupElement = JavaCompletionUtil.highlightIfNeeded(qualifierType,\n                                                               PrioritizedLookupElement.withPriority(lookupElement, priority), object, reference);\n        }\n\n        if ((object instanceof PsiMethod || object instanceof PsiField) &&\n            ((PsiModifierListOwner)object).hasModifierProperty(PsiModifier.STATIC)) {\n          if (lookupElement.getLookupString().equals(((PsiMember)object).getName())) {\n            staticMembers.put(CompletionUtil.getOriginalOrSelf((PsiModifierListOwner)object), lookupElement);\n          }\n        }\n\n        PrioritizedLookupElement prio = lookupElement.as(PrioritizedLookupElement.CLASS_CONDITION_KEY);\n        if (prio == null || prio.getPriority() == 0) {\n          zeroPriority.add(lookupElement);\n        } else {\n          consumer.consume(lookupElement);\n        }\n      }\n    });\n\n    for (LookupElement element : zeroPriority) {\n      consumer.consume(element);\n    }\n\n    if (qualifier == null) {\n      return addStaticMembers(parameters, matcher, staticMembers, consumer);\n    }\n    return EmptyRunnable.INSTANCE;\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void addCompletions(@NotNull CompletionParameters parameters,\n                                ProcessingContext context,\n                                @NotNull final CompletionResultSet result) {\n    GroovyCompletionData.addGroovyDocKeywords(parameters, result);\n\n    PsiElement position = parameters.getPosition();\n    if (PlatformPatterns.psiElement().inside(false, PlatformPatterns.psiElement(PsiComment.class)).accepts(position)) {\n      return;\n    }\n\n    GroovyCompletionData.addGroovyKeywords(parameters, result);\n\n    addUnfinishedMethodTypeParameters(position, result);\n\n    suggestVariableNames(position, result);\n\n    GrReferenceElement reference = findGroovyReference(position);\n    if (reference == null) {\n      if (parameters.getInvocationCount() >= 2) {\n        result.stopHere();\n        addAllClasses(parameters, result.withPrefixMatcher(CompletionUtil.findJavaIdentifierPrefix(parameters)), new InheritorsHolder(result));\n      }\n      return;\n    }\n\n    if (reference.getParent() instanceof GrImportStatement && reference.getQualifier() != null) {\n      result.addElement(LookupElementBuilder.create(\"*\"));\n    }\n\n    InheritorsHolder inheritors = new InheritorsHolder(result);\n    if (GroovySmartCompletionContributor.AFTER_NEW.accepts(position)) {\n      GroovySmartCompletionContributor.generateInheritorVariants(parameters, result.getPrefixMatcher(), inheritors);\n    }\n\n    Runnable addSlowVariants =\n      completeReference(parameters, reference, inheritors, result.getPrefixMatcher(), new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement lookupElement) {\n          result.addElement(lookupElement);\n        }\n      });\n\n    if (reference.getQualifier() == null) {\n      if (!GroovySmartCompletionContributor.AFTER_NEW.accepts(position)) {\n        GroovySmartCompletionContributor.addExpectedClassMembers(parameters, result);\n      }\n\n      if (isClassNamePossible(position) && JavaCompletionContributor.mayStartClassName(result)) {\n        result.stopHere();\n        if (parameters.getInvocationCount() >= 2) {\n          addAllClasses(parameters, result, inheritors);\n        } else {\n          JavaCompletionContributor.advertiseSecondCompletion(position.getProject(), result);\n        }\n      }\n    }\n\n    addSlowVariants.run();\n  }","id":59222,"modified_method":"@Override\n  protected void addCompletions(@NotNull CompletionParameters parameters,\n                                ProcessingContext context,\n                                @NotNull final CompletionResultSet result) {\n    GroovyCompletionData.addGroovyDocKeywords(parameters, result);\n\n    PsiElement position = parameters.getPosition();\n    if (PlatformPatterns.psiElement().inside(false, PlatformPatterns.psiElement(PsiComment.class)).accepts(position)) {\n      return;\n    }\n\n    GroovyCompletionData.addGroovyKeywords(parameters, result);\n\n    addUnfinishedMethodTypeParameters(position, result);\n\n    suggestVariableNames(position, result);\n\n    GrReferenceElement reference = findGroovyReference(position);\n    if (reference == null) {\n      if (parameters.getInvocationCount() >= 2) {\n        result.stopHere();\n        addAllClasses(parameters, result.withPrefixMatcher(CompletionUtil.findJavaIdentifierPrefix(parameters)), new JavaCompletionSession(result));\n      }\n      return;\n    }\n\n    if (reference.getParent() instanceof GrImportStatement && reference.getQualifier() != null) {\n      result.addElement(LookupElementBuilder.create(\"*\"));\n    }\n\n    JavaCompletionSession inheritors = new JavaCompletionSession(result);\n    if (GroovySmartCompletionContributor.AFTER_NEW.accepts(position)) {\n      GroovySmartCompletionContributor.generateInheritorVariants(parameters, result.getPrefixMatcher(), inheritors);\n    }\n\n    Runnable addSlowVariants =\n      completeReference(parameters, reference, inheritors, result.getPrefixMatcher(), new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement lookupElement) {\n          result.addElement(lookupElement);\n        }\n      });\n\n    if (reference.getQualifier() == null) {\n      if (!GroovySmartCompletionContributor.AFTER_NEW.accepts(position)) {\n        GroovySmartCompletionContributor.addExpectedClassMembers(parameters, result);\n      }\n\n      if (isClassNamePossible(position) && JavaCompletionContributor.mayStartClassName(result)) {\n        result.stopHere();\n        if (parameters.getInvocationCount() >= 2) {\n          addAllClasses(parameters, result, inheritors);\n        } else {\n          JavaCompletionContributor.advertiseSecondCompletion(position.getProject(), result);\n        }\n      }\n    }\n\n    addSlowVariants.run();\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Set<LookupElement> suggestQualifierItems(CompletionParameters _parameters,\n                                                          GrReferenceElement qualifier,\n                                                          InheritorsHolder inheritors) {\n    CompletionParameters parameters =\n      _parameters.withPosition(qualifier.getReferenceNameElement(), qualifier.getTextRange().getEndOffset());\n    String referenceName = qualifier.getReferenceName();\n    if (referenceName == null) {\n      return Collections.emptySet();\n    }\n\n    final PrefixMatcher qMatcher = new CamelHumpMatcher(referenceName);\n    final Set<LookupElement> variants = new LinkedHashSet<LookupElement>();\n    GrMainCompletionProvider.completeReference(parameters, qualifier, inheritors, qMatcher, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement element) {\n        if (qMatcher.prefixMatches(element)) {\n          variants.add(element);\n        }\n      }\n    });\n\n    for (PsiClass aClass : PsiShortNamesCache.getInstance(qualifier.getProject()).getClassesByName(referenceName, qualifier.getResolveScope())) {\n      variants.add(GroovyCompletionUtil.createClassLookupItem(aClass));\n    }\n\n\n    if (variants.isEmpty()) {\n      GrMainCompletionProvider.addAllClasses(parameters, new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement element) {\n          if (qMatcher.prefixMatches(element)) {\n            variants.add(element);\n          }\n        }\n      }, inheritors, qMatcher);\n    }\n    return variants;\n  }","id":59223,"modified_method":"private static Set<LookupElement> suggestQualifierItems(CompletionParameters _parameters,\n                                                          GrReferenceElement qualifier,\n                                                          JavaCompletionSession session) {\n    CompletionParameters parameters =\n      _parameters.withPosition(qualifier.getReferenceNameElement(), qualifier.getTextRange().getEndOffset());\n    String referenceName = qualifier.getReferenceName();\n    if (referenceName == null) {\n      return Collections.emptySet();\n    }\n\n    final PrefixMatcher qMatcher = new CamelHumpMatcher(referenceName);\n    final Set<LookupElement> variants = new LinkedHashSet<LookupElement>();\n    GrMainCompletionProvider.completeReference(parameters, qualifier, session, qMatcher, element -> {\n      if (qMatcher.prefixMatches(element)) {\n        variants.add(element);\n      }\n    });\n\n    for (PsiClass aClass : PsiShortNamesCache.getInstance(qualifier.getProject()).getClassesByName(referenceName, qualifier.getResolveScope())) {\n      variants.add(GroovyCompletionUtil.createClassLookupItem(aClass));\n    }\n\n\n    if (variants.isEmpty()) {\n      GrMainCompletionProvider.addAllClasses(parameters, element -> {\n        if (qMatcher.prefixMatches(element)) {\n          variants.add(element);\n        }\n      }, session, qMatcher);\n    }\n    return variants;\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void suggestNonImportedClasses(CompletionParameters parameters, final CompletionResultSet result) {\n    GrMainCompletionProvider.addAllClasses(parameters, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement element) {\n        JavaPsiClassReferenceElement classElement =\n          element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);\n        if (classElement != null) {\n          classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n        }\n        result.addElement(element);\n      }\n    }, new InheritorsHolder(result), result.getPrefixMatcher());\n  }","id":59224,"modified_method":"private static void suggestNonImportedClasses(CompletionParameters parameters, final CompletionResultSet result) {\n    GrMainCompletionProvider.addAllClasses(parameters, new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement element) {\n        JavaPsiClassReferenceElement classElement =\n          element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);\n        if (classElement != null) {\n          classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n        }\n        result.addElement(element);\n      }\n    }, new JavaCompletionSession(result), result.getPrefixMatcher());\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void suggestChainedCalls(CompletionParameters parameters, CompletionResultSet result) {\n    PsiElement position = parameters.getPosition();\n    PsiElement parent = position.getParent();\n    if (!(parent instanceof GrReferenceElement)) {\n      return;\n    }\n    PsiElement qualifier = ((GrReferenceElement)parent).getQualifier();\n    if (!(qualifier instanceof GrReferenceElement) ||\n        ((GrReferenceElement)qualifier).getQualifier() != null) {\n      return;\n    }\n    PsiElement target = ((GrReferenceElement)qualifier).resolve();\n    if (target != null && !(target instanceof PsiPackage)) {\n      return;\n    }\n\n    String fullPrefix = position.getContainingFile().getText().substring(parent.getTextRange().getStartOffset(), parameters.getOffset());\n    final CompletionResultSet qualifiedCollector = result.withPrefixMatcher(fullPrefix);\n    InheritorsHolder inheritors = new InheritorsHolder(result);\n    for (final LookupElement base : suggestQualifierItems(parameters, (GrReferenceElement)qualifier, inheritors)) {\n      final PsiType type = getPsiType(base.getObject());\n      if (type != null && !PsiType.VOID.equals(type)) {\n        GrReferenceElement ref = createMockReference(position, type, base);\n        PsiElement refName = ref.getReferenceNameElement();\n        assert refName != null;\n        CompletionParameters newParams = parameters.withPosition(refName, refName.getTextRange().getStartOffset());\n        GrMainCompletionProvider.completeReference(newParams, ref, inheritors, result.getPrefixMatcher(), new Consumer<LookupElement>() {\n          @Override\n          public void consume(LookupElement element) {\n            qualifiedCollector.addElement(new JavaChainLookupElement(base, element) {\n              @Override\n              protected boolean shouldParenthesizeQualifier(PsiFile file, int startOffset, int endOffset) {\n                return false;\n              }\n            });\n          }\n        });\n      }\n    }\n  }","id":59225,"modified_method":"private static void suggestChainedCalls(CompletionParameters parameters, CompletionResultSet result) {\n    PsiElement position = parameters.getPosition();\n    PsiElement parent = position.getParent();\n    if (!(parent instanceof GrReferenceElement)) {\n      return;\n    }\n    PsiElement qualifier = ((GrReferenceElement)parent).getQualifier();\n    if (!(qualifier instanceof GrReferenceElement) ||\n        ((GrReferenceElement)qualifier).getQualifier() != null) {\n      return;\n    }\n    PsiElement target = ((GrReferenceElement)qualifier).resolve();\n    if (target != null && !(target instanceof PsiPackage)) {\n      return;\n    }\n\n    String fullPrefix = position.getContainingFile().getText().substring(parent.getTextRange().getStartOffset(), parameters.getOffset());\n    final CompletionResultSet qualifiedCollector = result.withPrefixMatcher(fullPrefix);\n    JavaCompletionSession session = new JavaCompletionSession(result);\n    for (final LookupElement base : suggestQualifierItems(parameters, (GrReferenceElement)qualifier, session)) {\n      final PsiType type = getPsiType(base.getObject());\n      if (type != null && !PsiType.VOID.equals(type)) {\n        GrReferenceElement ref = createMockReference(position, type, base);\n        PsiElement refName = ref.getReferenceNameElement();\n        assert refName != null;\n        CompletionParameters newParams = parameters.withPosition(refName, refName.getTextRange().getStartOffset());\n        GrMainCompletionProvider.completeReference(newParams, ref, session, result.getPrefixMatcher(), element ->\n          qualifiedCollector.addElement(new JavaChainLookupElement(base, element) {\n            @Override\n            protected boolean shouldParenthesizeQualifier(PsiFile file, int startOffset, int endOffset) {\n              return false;\n            }\n          }));\n      }\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void fillCompletionVariants(@NotNull final CompletionParameters parameters, @NotNull final CompletionResultSet _result) {\n    if (parameters.getCompletionType() != CompletionType.BASIC) {\n      return;\n    }\n\n    final PsiElement position = parameters.getPosition();\n    if (!isInJavaContext(position)) {\n      return;\n    }\n\n    if (AFTER_NUMBER_LITERAL.accepts(position) || UNEXPECTED_REFERENCE_AFTER_DOT.accepts(position)) {\n      _result.stopHere();\n      return;\n    }\n\n    final CompletionResultSet result = JavaCompletionSorting.addJavaSorting(parameters, _result);\n\n    if (ANNOTATION_ATTRIBUTE_NAME.accepts(position) && !JavaKeywordCompletion.isAfterPrimitiveOrArrayType(position)) {\n      JavaKeywordCompletion.addExpectedTypeMembers(parameters, result);\n      JavaKeywordCompletion.addPrimitiveTypes(result, position);\n      completeAnnotationAttributeName(result, position, parameters);\n      result.stopHere();\n      return;\n    }\n\n    PrefixMatcher matcher = result.getPrefixMatcher();\n    PsiElement parent = position.getParent();\n\n    final InheritorsHolder inheritors = new InheritorsHolder(result);\n    if (position instanceof PsiIdentifier) {\n      addIdentifierVariants(parameters, position, result, matcher, parent, inheritors);\n    }\n\n    Set<String> usedWords = addReferenceVariants(parameters, result, inheritors);\n\n    if (psiElement().inside(PsiLiteralExpression.class).accepts(position)) {\n      PsiReference reference = position.getContainingFile().findReferenceAt(parameters.getOffset());\n      if (reference == null || reference.isSoft()) {\n        WordCompletionContributor.addWordCompletionVariants(result, parameters, usedWords);\n      }\n    }\n\n    if (position instanceof PsiIdentifier) {\n      JavaGenerateMemberCompletionContributor.fillCompletionVariants(parameters, result);\n    }\n\n    addAllClasses(parameters, result, inheritors);\n\n    if (position instanceof PsiIdentifier &&\n        parent instanceof PsiReferenceExpression &&\n        !((PsiReferenceExpression)parent).isQualified() &&\n        parameters.isExtendedCompletion() &&\n        StringUtil.isNotEmpty(matcher.getPrefix())) {\n      new JavaStaticMemberProcessor(parameters).processStaticMethodsGlobally(matcher, result);\n    }\n    result.stopHere();\n  }","id":59226,"modified_method":"@Override\n  public void fillCompletionVariants(@NotNull final CompletionParameters parameters, @NotNull final CompletionResultSet _result) {\n    if (parameters.getCompletionType() != CompletionType.BASIC) {\n      return;\n    }\n\n    final PsiElement position = parameters.getPosition();\n    if (!isInJavaContext(position)) {\n      return;\n    }\n\n    if (AFTER_NUMBER_LITERAL.accepts(position) || UNEXPECTED_REFERENCE_AFTER_DOT.accepts(position)) {\n      _result.stopHere();\n      return;\n    }\n\n    final CompletionResultSet result = JavaCompletionSorting.addJavaSorting(parameters, _result);\n\n    if (ANNOTATION_ATTRIBUTE_NAME.accepts(position) && !JavaKeywordCompletion.isAfterPrimitiveOrArrayType(position)) {\n      JavaKeywordCompletion.addExpectedTypeMembers(parameters, result);\n      JavaKeywordCompletion.addPrimitiveTypes(result, position);\n      completeAnnotationAttributeName(result, position, parameters);\n      result.stopHere();\n      return;\n    }\n\n    PrefixMatcher matcher = result.getPrefixMatcher();\n    PsiElement parent = position.getParent();\n\n    JavaCompletionSession inheritors = new JavaCompletionSession(result);\n    if (position instanceof PsiIdentifier) {\n      addIdentifierVariants(parameters, position, result, matcher, parent, inheritors);\n    }\n\n    Set<String> usedWords = addReferenceVariants(parameters, result, inheritors);\n\n    if (psiElement().inside(PsiLiteralExpression.class).accepts(position)) {\n      PsiReference reference = position.getContainingFile().findReferenceAt(parameters.getOffset());\n      if (reference == null || reference.isSoft()) {\n        WordCompletionContributor.addWordCompletionVariants(result, parameters, usedWords);\n      }\n    }\n\n    if (position instanceof PsiIdentifier) {\n      JavaGenerateMemberCompletionContributor.fillCompletionVariants(parameters, result);\n    }\n\n    addAllClasses(parameters, result, inheritors);\n\n    if (position instanceof PsiIdentifier &&\n        parent instanceof PsiReferenceExpression &&\n        !((PsiReferenceExpression)parent).isQualified() &&\n        parameters.isExtendedCompletion() &&\n        StringUtil.isNotEmpty(matcher.getPrefix())) {\n      new JavaStaticMemberProcessor(parameters).processStaticMethodsGlobally(matcher, result);\n    }\n    result.stopHere();\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void completeAnnotationAttributeName(CompletionResultSet result, PsiElement insertedElement,\n                                                      CompletionParameters parameters) {\n    PsiNameValuePair pair = PsiTreeUtil.getParentOfType(insertedElement, PsiNameValuePair.class);\n    PsiAnnotationParameterList parameterList = (PsiAnnotationParameterList)assertNotNull(pair).getParent();\n    PsiAnnotation anno = (PsiAnnotation)parameterList.getParent();\n    boolean showClasses = psiElement().afterLeaf(\"(\").accepts(insertedElement);\n    PsiClass annoClass = null;\n    final PsiJavaCodeReferenceElement referenceElement = anno.getNameReferenceElement();\n    if (referenceElement != null) {\n      final PsiElement element = referenceElement.resolve();\n      if (element instanceof PsiClass) {\n        annoClass = (PsiClass)element;\n        if (annoClass.findMethodsByName(\"value\", false).length == 0) {\n          showClasses = false;\n        }\n      }\n    }\n\n    if (showClasses && insertedElement.getParent() instanceof PsiReferenceExpression) {\n      final Set<LookupElement> set = JavaCompletionUtil.processJavaReference(\n        insertedElement, (PsiJavaReference)insertedElement.getParent(), new ElementExtractorFilter(createAnnotationFilter(insertedElement)), JavaCompletionProcessor.Options.DEFAULT_OPTIONS, result.getPrefixMatcher(), parameters);\n      for (final LookupElement element : set) {\n        result.addElement(element);\n      }\n      addAllClasses(parameters, result, new InheritorsHolder(result));\n    }\n\n    if (annoClass != null) {\n      final PsiNameValuePair[] existingPairs = parameterList.getAttributes();\n\n      methods: for (PsiMethod method : annoClass.getMethods()) {\n        if (!(method instanceof PsiAnnotationMethod)) continue;\n\n        final String attrName = method.getName();\n        for (PsiNameValuePair existingAttr : existingPairs) {\n          if (PsiTreeUtil.isAncestor(existingAttr, insertedElement, false)) break;\n          if (Comparing.equal(existingAttr.getName(), attrName) ||\n              PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.equals(attrName) && existingAttr.getName() == null) continue methods;\n        }\n        LookupElementBuilder element = LookupElementBuilder.createWithIcon(method).withInsertHandler(new InsertHandler<LookupElement>() {\n          @Override\n          public void handleInsert(InsertionContext context, LookupElement item) {\n            final Editor editor = context.getEditor();\n            TailType.EQ.processTail(editor, editor.getCaretModel().getOffset());\n            context.setAddCompletionChar(false);\n\n            context.commitDocument();\n            PsiAnnotationParameterList paramList =\n              PsiTreeUtil.findElementOfClassAtOffset(context.getFile(), context.getStartOffset(), PsiAnnotationParameterList.class, false);\n            if (paramList != null && paramList.getAttributes().length > 0 && paramList.getAttributes()[0].getName() == null) {\n              int valueOffset = paramList.getAttributes()[0].getTextRange().getStartOffset();\n              context.getDocument().insertString(valueOffset, PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);\n              TailType.EQ.processTail(editor, valueOffset + PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.length());\n            }\n          }\n        });\n\n        PsiAnnotationMemberValue defaultValue = ((PsiAnnotationMethod)method).getDefaultValue();\n        if (defaultValue != null) {\n          element = element.withTailText(\" default \" + defaultValue.getText(), true);\n        }\n\n        result.addElement(element);\n      }\n    }\n  }","id":59227,"modified_method":"private static void completeAnnotationAttributeName(CompletionResultSet result, PsiElement insertedElement,\n                                                      CompletionParameters parameters) {\n    PsiNameValuePair pair = PsiTreeUtil.getParentOfType(insertedElement, PsiNameValuePair.class);\n    PsiAnnotationParameterList parameterList = (PsiAnnotationParameterList)assertNotNull(pair).getParent();\n    PsiAnnotation anno = (PsiAnnotation)parameterList.getParent();\n    boolean showClasses = psiElement().afterLeaf(\"(\").accepts(insertedElement);\n    PsiClass annoClass = null;\n    final PsiJavaCodeReferenceElement referenceElement = anno.getNameReferenceElement();\n    if (referenceElement != null) {\n      final PsiElement element = referenceElement.resolve();\n      if (element instanceof PsiClass) {\n        annoClass = (PsiClass)element;\n        if (annoClass.findMethodsByName(\"value\", false).length == 0) {\n          showClasses = false;\n        }\n      }\n    }\n\n    if (showClasses && insertedElement.getParent() instanceof PsiReferenceExpression) {\n      final Set<LookupElement> set = JavaCompletionUtil.processJavaReference(\n        insertedElement, (PsiJavaReference)insertedElement.getParent(), new ElementExtractorFilter(createAnnotationFilter(insertedElement)), JavaCompletionProcessor.Options.DEFAULT_OPTIONS, result.getPrefixMatcher(), parameters);\n      for (final LookupElement element : set) {\n        result.addElement(element);\n      }\n      addAllClasses(parameters, result, new JavaCompletionSession(result));\n    }\n\n    if (annoClass != null) {\n      final PsiNameValuePair[] existingPairs = parameterList.getAttributes();\n\n      methods: for (PsiMethod method : annoClass.getMethods()) {\n        if (!(method instanceof PsiAnnotationMethod)) continue;\n\n        final String attrName = method.getName();\n        for (PsiNameValuePair existingAttr : existingPairs) {\n          if (PsiTreeUtil.isAncestor(existingAttr, insertedElement, false)) break;\n          if (Comparing.equal(existingAttr.getName(), attrName) ||\n              PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.equals(attrName) && existingAttr.getName() == null) continue methods;\n        }\n        LookupElementBuilder element = LookupElementBuilder.createWithIcon(method).withInsertHandler(new InsertHandler<LookupElement>() {\n          @Override\n          public void handleInsert(InsertionContext context, LookupElement item) {\n            final Editor editor = context.getEditor();\n            TailType.EQ.processTail(editor, editor.getCaretModel().getOffset());\n            context.setAddCompletionChar(false);\n\n            context.commitDocument();\n            PsiAnnotationParameterList paramList =\n              PsiTreeUtil.findElementOfClassAtOffset(context.getFile(), context.getStartOffset(), PsiAnnotationParameterList.class, false);\n            if (paramList != null && paramList.getAttributes().length > 0 && paramList.getAttributes()[0].getName() == null) {\n              int valueOffset = paramList.getAttributes()[0].getTextRange().getStartOffset();\n              context.getDocument().insertString(valueOffset, PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);\n              TailType.EQ.processTail(editor, valueOffset + PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.length());\n            }\n          }\n        });\n\n        PsiAnnotationMemberValue defaultValue = ((PsiAnnotationMethod)method).getDefaultValue();\n        if (defaultValue != null) {\n          element = element.withTailText(\" default \" + defaultValue.getText(), true);\n        }\n\n        result.addElement(element);\n      }\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Set<String> addReferenceVariants(final CompletionParameters parameters, CompletionResultSet result, final InheritorsHolder inheritors) {\n    final Set<String> usedWords = new HashSet<String>();\n    final PsiElement position = parameters.getPosition();\n    final boolean first = parameters.getInvocationCount() <= 1;\n    final boolean isSwitchLabel = SWITCH_LABEL.accepts(position);\n    final boolean isAfterNew = JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);\n    final boolean pkgContext = JavaCompletionUtil.inSomePackage(position);\n    final PsiType[] expectedTypes = ExpectedTypesGetter.getExpectedTypes(parameters.getPosition(), true);\n    LegacyCompletionContributor.processReferences(parameters, result, new PairConsumer<PsiReference, CompletionResultSet>() {\n      @Override\n      public void consume(final PsiReference reference, final CompletionResultSet result) {\n        if (reference instanceof PsiJavaReference) {\n          ElementFilter filter = getReferenceFilter(position);\n          if (filter != null) {\n            if (INSIDE_CONSTRUCTOR.accepts(position) &&\n                (parameters.getInvocationCount() <= 1 || CheckInitialized.isInsideConstructorCall(position))) {\n              filter = new AndFilter(filter, new CheckInitialized(position));\n            }\n            final PsiFile originalFile = parameters.getOriginalFile();\n            JavaCompletionProcessor.Options options =\n              JavaCompletionProcessor.Options.DEFAULT_OPTIONS\n                .withCheckAccess(first)\n                .withFilterStaticAfterInstance(first)\n                .withShowInstanceInStaticContext(!first);\n            for (LookupElement element : JavaCompletionUtil.processJavaReference(position,\n                                                                                  (PsiJavaReference)reference,\n                                                                                  new ElementExtractorFilter(filter),\n                                                                                  options,\n                                                                                  result.getPrefixMatcher(), parameters)) {\n              if (inheritors.alreadyProcessed(element)) {\n                continue;\n              }\n\n              if (isSwitchLabel) {\n                result.addElement(new IndentingDecorator(TailTypeDecorator.withTail(element, TailType.createSimpleTailType(':'))));\n              }\n              else {\n                final LookupItem item = element.as(LookupItem.CLASS_CONDITION_KEY);\n                if (originalFile instanceof PsiJavaCodeReferenceCodeFragment &&\n                    !((PsiJavaCodeReferenceCodeFragment)originalFile).isClassesAccepted() && item != null) {\n                  item.setTailType(TailType.NONE);\n                }\n                if (item instanceof JavaMethodCallElement) {\n                  JavaMethodCallElement call = (JavaMethodCallElement)item;\n                  final PsiMethod method = call.getObject();\n                  if (method.getTypeParameters().length > 0) {\n                    final PsiType returned = TypeConversionUtil.erasure(method.getReturnType());\n                    PsiType matchingExpectation = returned == null ? null : ContainerUtil.find(expectedTypes, new Condition<PsiType>() {\n                      @Override\n                      public boolean value(PsiType type) {\n                        return type.isAssignableFrom(returned);\n                      }\n                    });\n                    if (matchingExpectation != null) {\n                      call.setInferenceSubstitutor(SmartCompletionDecorator.calculateMethodReturnTypeSubstitutor(method, matchingExpectation), position);\n                    }\n                  }\n                }\n\n                result.addElement(element);\n              }\n            }\n          }\n          return;\n        }\n        if (reference instanceof PsiLabelReference) {\n          LabelReferenceCompletion.processLabelReference(result, (PsiLabelReference)reference);\n          return;\n        }\n\n        final Object[] variants = reference.getVariants();\n        //noinspection ConstantConditions\n        if (variants == null) {\n          LOG.error(\"Reference=\" + reference);\n        }\n        for (Object completion : variants) {\n          if (completion == null) {\n            LOG.error(\"Position=\" + position + \"\\n;Reference=\" + reference + \"\\n;variants=\" + Arrays.toString(variants));\n          }\n          if (completion instanceof LookupElement && !inheritors.alreadyProcessed((LookupElement)completion)) {\n            usedWords.add(((LookupElement)completion).getLookupString());\n            result.addElement((LookupElement)completion);\n          }\n          else if (completion instanceof PsiClass) {\n            for (JavaPsiClassReferenceElement item : JavaClassNameCompletionContributor.createClassLookupItems((PsiClass)completion, isAfterNew,\n                                                                                                               JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER, new Condition<PsiClass>() {\n              @Override\n              public boolean value(PsiClass psiClass) {\n                return !inheritors.alreadyProcessed(psiClass) && JavaCompletionUtil.isSourceLevelAccessible(position, psiClass, pkgContext);\n              }\n            })) {\n              usedWords.add(item.getLookupString());\n              result.addElement(item);\n            }\n\n          }\n          else {\n            //noinspection deprecation\n            LookupElement element = LookupItemUtil.objectToLookupItem(completion);\n            usedWords.add(element.getLookupString());\n            result.addElement(element);\n          }\n        }\n      }\n    });\n    return usedWords;\n  }","id":59228,"modified_method":"private static Set<String> addReferenceVariants(final CompletionParameters parameters, CompletionResultSet result, JavaCompletionSession session) {\n    final Set<String> usedWords = new HashSet<String>();\n    final PsiElement position = parameters.getPosition();\n    final boolean first = parameters.getInvocationCount() <= 1;\n    final boolean isSwitchLabel = SWITCH_LABEL.accepts(position);\n    final boolean isAfterNew = JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);\n    final boolean pkgContext = JavaCompletionUtil.inSomePackage(position);\n    final PsiType[] expectedTypes = ExpectedTypesGetter.getExpectedTypes(parameters.getPosition(), true);\n    LegacyCompletionContributor.processReferences(parameters, result, new PairConsumer<PsiReference, CompletionResultSet>() {\n      @Override\n      public void consume(final PsiReference reference, final CompletionResultSet result) {\n        if (reference instanceof PsiJavaReference) {\n          ElementFilter filter = getReferenceFilter(position);\n          if (filter != null) {\n            if (INSIDE_CONSTRUCTOR.accepts(position) &&\n                (parameters.getInvocationCount() <= 1 || CheckInitialized.isInsideConstructorCall(position))) {\n              filter = new AndFilter(filter, new CheckInitialized(position));\n            }\n            final PsiFile originalFile = parameters.getOriginalFile();\n            JavaCompletionProcessor.Options options =\n              JavaCompletionProcessor.Options.DEFAULT_OPTIONS\n                .withCheckAccess(first)\n                .withFilterStaticAfterInstance(first)\n                .withShowInstanceInStaticContext(!first);\n            for (LookupElement element : JavaCompletionUtil.processJavaReference(position,\n                                                                                  (PsiJavaReference)reference,\n                                                                                  new ElementExtractorFilter(filter),\n                                                                                  options,\n                                                                                  result.getPrefixMatcher(), parameters)) {\n              if (session.alreadyProcessed(element)) {\n                continue;\n              }\n\n              if (isSwitchLabel) {\n                result.addElement(new IndentingDecorator(TailTypeDecorator.withTail(element, TailType.createSimpleTailType(':'))));\n              }\n              else {\n                final LookupItem item = element.as(LookupItem.CLASS_CONDITION_KEY);\n                if (originalFile instanceof PsiJavaCodeReferenceCodeFragment &&\n                    !((PsiJavaCodeReferenceCodeFragment)originalFile).isClassesAccepted() && item != null) {\n                  item.setTailType(TailType.NONE);\n                }\n                if (item instanceof JavaMethodCallElement) {\n                  JavaMethodCallElement call = (JavaMethodCallElement)item;\n                  final PsiMethod method = call.getObject();\n                  if (method.getTypeParameters().length > 0) {\n                    final PsiType returned = TypeConversionUtil.erasure(method.getReturnType());\n                    PsiType matchingExpectation = returned == null\n                                                  ? null\n                                                  : ContainerUtil.find(expectedTypes, type -> type.isAssignableFrom(returned));\n                    if (matchingExpectation != null) {\n                      call.setInferenceSubstitutor(SmartCompletionDecorator.calculateMethodReturnTypeSubstitutor(method, matchingExpectation), position);\n                    }\n                  }\n                }\n\n                result.addElement(element);\n              }\n            }\n          }\n          return;\n        }\n        if (reference instanceof PsiLabelReference) {\n          LabelReferenceCompletion.processLabelReference(result, (PsiLabelReference)reference);\n          return;\n        }\n\n        final Object[] variants = reference.getVariants();\n        //noinspection ConstantConditions\n        if (variants == null) {\n          LOG.error(\"Reference=\" + reference);\n        }\n        for (Object completion : variants) {\n          if (completion == null) {\n            LOG.error(\"Position=\" + position + \"\\n;Reference=\" + reference + \"\\n;variants=\" + Arrays.toString(variants));\n          }\n          if (completion instanceof LookupElement && !session.alreadyProcessed((LookupElement)completion)) {\n            usedWords.add(((LookupElement)completion).getLookupString());\n            result.addElement((LookupElement)completion);\n          }\n          else if (completion instanceof PsiClass) {\n            Condition<PsiClass> condition = psiClass -> !session.alreadyProcessed(psiClass) &&\n                                                        JavaCompletionUtil.isSourceLevelAccessible(position, psiClass, pkgContext);\n            for (JavaPsiClassReferenceElement item : JavaClassNameCompletionContributor.createClassLookupItems((PsiClass)completion,\n                                                                                                               isAfterNew,\n                                                                                                               JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER,\n                                                                                                               condition)) {\n              usedWords.add(item.getLookupString());\n              result.addElement(item);\n            }\n\n          }\n          else {\n            //noinspection deprecation\n            LookupElement element = LookupItemUtil.objectToLookupItem(completion);\n            usedWords.add(element.getLookupString());\n            result.addElement(element);\n          }\n        }\n      }\n    });\n    return usedWords;\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void registerClassFromTypeElement(LookupElement element, InheritorsHolder inheritors) {\n    PsiType type = assertNotNull(element.as(PsiTypeLookupItem.CLASS_CONDITION_KEY)).getType();\n    PsiClass aClass =\n      type instanceof PsiClassType && ((PsiClassType)type).getParameterCount() == 0 ? ((PsiClassType)type).resolve() : null;\n    if (aClass != null) {\n      inheritors.registerClass(aClass);\n    }\n  }","id":59229,"modified_method":"private static void registerClassFromTypeElement(LookupElement element, JavaCompletionSession inheritors) {\n    PsiType type = assertNotNull(element.as(PsiTypeLookupItem.CLASS_CONDITION_KEY)).getType();\n    PsiClass aClass =\n      type instanceof PsiClassType && ((PsiClassType)type).getParameterCount() == 0 ? ((PsiClassType)type).resolve() : null;\n    if (aClass != null) {\n      inheritors.registerClass(aClass);\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addIdentifierVariants(@NotNull CompletionParameters parameters,\n                                            PsiElement position,\n                                            final CompletionResultSet result,\n                                            PrefixMatcher matcher, PsiElement parent, final InheritorsHolder inheritors) {\n    if (TypeArgumentCompletionProvider.IN_TYPE_ARGS.accepts(position)) {\n      new TypeArgumentCompletionProvider(false, inheritors).addCompletions(parameters, new ProcessingContext(), result);\n    }\n\n    result.addAllElements(FunctionalExpressionCompletionProvider.getLambdaVariants(parameters, true));\n\n    if (JavaSmartCompletionContributor.AFTER_NEW.accepts(position)) {\n      new JavaInheritorsGetter(ConstructorInsertHandler.BASIC_INSTANCE).generateVariants(parameters, matcher, inheritors);\n    }\n\n    if (MethodReturnTypeProvider.IN_METHOD_RETURN_TYPE.accepts(position)) {\n      MethodReturnTypeProvider.addProbableReturnTypes(parameters, new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement element) {\n          registerClassFromTypeElement(element, inheritors);\n          result.addElement(element);\n        }\n      });\n    }\n\n    if (SmartCastProvider.shouldSuggestCast(parameters)) {\n      SmartCastProvider.addCastVariants(parameters, new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement element) {\n          registerClassFromTypeElement(element, inheritors);\n          result.addElement(PrioritizedLookupElement.withPriority(element, 1));\n        }\n      });\n    }\n\n    if (parent instanceof PsiReferenceExpression) {\n      final List<ExpectedTypeInfo> expected = Arrays.asList(ExpectedTypesProvider.getExpectedTypes((PsiExpression)parent, true));\n      CollectConversion.addCollectConversion((PsiReferenceExpression)parent, expected,\n                                             JavaSmartCompletionContributor.decorateWithoutTypeCheck(result, expected));\n    }\n\n    if (IMPORT_REFERENCE.accepts(position)) {\n      result.addElement(LookupElementBuilder.create(\"*\"));\n    }\n\n    addKeywords(parameters, result);\n\n    addExpressionVariants(parameters, position, result);\n  }","id":59230,"modified_method":"private static void addIdentifierVariants(@NotNull CompletionParameters parameters,\n                                            PsiElement position,\n                                            final CompletionResultSet result,\n                                            PrefixMatcher matcher, PsiElement parent, JavaCompletionSession session) {\n    if (TypeArgumentCompletionProvider.IN_TYPE_ARGS.accepts(position)) {\n      new TypeArgumentCompletionProvider(false, session).addCompletions(parameters, new ProcessingContext(), result);\n    }\n\n    result.addAllElements(FunctionalExpressionCompletionProvider.getLambdaVariants(parameters, true));\n\n    if (JavaSmartCompletionContributor.AFTER_NEW.accepts(position)) {\n      new JavaInheritorsGetter(ConstructorInsertHandler.BASIC_INSTANCE).generateVariants(parameters, matcher, session);\n    }\n\n    if (MethodReturnTypeProvider.IN_METHOD_RETURN_TYPE.accepts(position)) {\n      MethodReturnTypeProvider.addProbableReturnTypes(parameters, element -> {\n        registerClassFromTypeElement(element, session);\n        result.addElement(element);\n      });\n    }\n\n    if (SmartCastProvider.shouldSuggestCast(parameters)) {\n      SmartCastProvider.addCastVariants(parameters, element -> {\n        registerClassFromTypeElement(element, session);\n        result.addElement(PrioritizedLookupElement.withPriority(element, 1));\n      });\n    }\n\n    if (parent instanceof PsiReferenceExpression) {\n      final List<ExpectedTypeInfo> expected = Arrays.asList(ExpectedTypesProvider.getExpectedTypes((PsiExpression)parent, true));\n      CollectConversion.addCollectConversion((PsiReferenceExpression)parent, expected,\n                                             JavaSmartCompletionContributor.decorateWithoutTypeCheck(result, expected));\n    }\n\n    if (IMPORT_REFERENCE.accepts(position)) {\n      result.addElement(LookupElementBuilder.create(\"*\"));\n    }\n\n    addKeywords(parameters, result);\n\n    addExpressionVariants(parameters, position, result);\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void addAllClasses(final CompletionParameters parameters,\n                                   final CompletionResultSet result,\n                                   final InheritorsHolder inheritors) {\n    if (!isClassNamePossible(parameters) || !mayStartClassName(result)) {\n      return;\n    }\n\n    if (parameters.getInvocationCount() >= 2) {\n      JavaClassNameCompletionContributor.addAllClasses(parameters, parameters.getInvocationCount() <= 2, result.getPrefixMatcher(), new Consumer<LookupElement>() {\n        @Override\n        public void consume(LookupElement element) {\n          if (!inheritors.alreadyProcessed(element)) {\n            result.addElement(JavaClassNameCompletionContributor.highlightIfNeeded((JavaPsiClassReferenceElement)element, parameters));\n          }\n        }\n      });\n    } else {\n      advertiseSecondCompletion(parameters.getPosition().getProject(), result);\n    }\n  }","id":59231,"modified_method":"public static void addAllClasses(final CompletionParameters parameters,\n                                   final CompletionResultSet result,\n                                   final JavaCompletionSession session) {\n    if (!isClassNamePossible(parameters) || !mayStartClassName(result)) {\n      return;\n    }\n\n    if (parameters.getInvocationCount() >= 2) {\n      JavaClassNameCompletionContributor.addAllClasses(parameters, parameters.getInvocationCount() <= 2, result.getPrefixMatcher(), element -> {\n        if (!session.alreadyProcessed(element)) {\n          result.addElement(JavaClassNameCompletionContributor.highlightIfNeeded((JavaPsiClassReferenceElement)element, parameters));\n        }\n      });\n    } else {\n      advertiseSecondCompletion(parameters.getPosition().getProject(), result);\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public JavaDocCompletionContributor() {\n    extend(CompletionType.BASIC, PsiJavaPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME), new TagChooser());\n\n    extend(CompletionType.BASIC, PsiJavaPatterns.psiElement().inside(PsiDocComment.class), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        boolean isArg = PsiJavaPatterns.psiElement().afterLeaf(\"(\").accepts(position);\n        PsiDocTag tag = PsiTreeUtil.getParentOfType(position, PsiDocTag.class);\n        boolean onlyConstants = !isArg && tag != null && tag.getName().equals(VALUE_TAG);\n\n        final PsiReference ref = position.getContainingFile().findReferenceAt(parameters.getOffset());\n        if (ref instanceof PsiJavaReference) {\n          result.stopHere();\n\n          for (LookupElement item : completeJavadocReference(position, (PsiJavaReference)ref)) {\n            if (onlyConstants) {\n              Object o = item.getObject();\n              if (!(o instanceof PsiField)) continue;\n              PsiField field = (PsiField) o;\n              if (!(field.hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null &&\n                  JavaConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(), false) != null)) continue;\n            }\n\n            if (isArg) {\n              item = AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(item);\n            }\n            result.addElement(item);\n          }\n\n          JavaCompletionContributor.addAllClasses(parameters, result, new InheritorsHolder(result));\n        }\n\n        if (tag != null && \"author\".equals(tag.getName())) {\n          result.addElement(LookupElementBuilder.create(SystemProperties.getUserName()));\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(\n      psiElement(PsiDocTag.class).withName(\n        string().oneOf(PsiKeyword.THROWS, \"exception\"))), new CompletionProvider<CompletionParameters>() {\n      @Override\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final Set<PsiClass> throwsSet = new HashSet<>();\n        final PsiMethod method = PsiTreeUtil.getContextOfType(element, PsiMethod.class, true);\n        if(method != null){\n          for (PsiClassType ref : method.getThrowsList().getReferencedTypes()) {\n            final PsiClass exception = ref.resolve();\n            if (exception != null && throwsSet.add(exception)) {\n              result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception), TailType.HUMBLE_SPACE_BEFORE_WORD));\n            }\n          }\n        }\n      }\n    });\n  }","id":59232,"modified_method":"public JavaDocCompletionContributor() {\n    extend(CompletionType.BASIC, PsiJavaPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME), new TagChooser());\n\n    extend(CompletionType.BASIC, PsiJavaPatterns.psiElement().inside(PsiDocComment.class), new CompletionProvider<CompletionParameters>() {\n      @Override\n      protected void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement position = parameters.getPosition();\n        boolean isArg = PsiJavaPatterns.psiElement().afterLeaf(\"(\").accepts(position);\n        PsiDocTag tag = PsiTreeUtil.getParentOfType(position, PsiDocTag.class);\n        boolean onlyConstants = !isArg && tag != null && tag.getName().equals(VALUE_TAG);\n\n        final PsiReference ref = position.getContainingFile().findReferenceAt(parameters.getOffset());\n        if (ref instanceof PsiJavaReference) {\n          result.stopHere();\n\n          for (LookupElement item : completeJavadocReference(position, (PsiJavaReference)ref)) {\n            if (onlyConstants) {\n              Object o = item.getObject();\n              if (!(o instanceof PsiField)) continue;\n              PsiField field = (PsiField) o;\n              if (!(field.hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null &&\n                  JavaConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(), false) != null)) continue;\n            }\n\n            if (isArg) {\n              item = AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(item);\n            }\n            result.addElement(item);\n          }\n\n          JavaCompletionContributor.addAllClasses(parameters, result, new JavaCompletionSession(result));\n        }\n\n        if (tag != null && \"author\".equals(tag.getName())) {\n          result.addElement(LookupElementBuilder.create(SystemProperties.getUserName()));\n        }\n      }\n    });\n\n    extend(CompletionType.SMART, psiElement().inside(\n      psiElement(PsiDocTag.class).withName(\n        string().oneOf(PsiKeyword.THROWS, \"exception\"))), new CompletionProvider<CompletionParameters>() {\n      @Override\n      public void addCompletions(@NotNull final CompletionParameters parameters, final ProcessingContext context, @NotNull final CompletionResultSet result) {\n        final PsiElement element = parameters.getPosition();\n        final Set<PsiClass> throwsSet = new HashSet<>();\n        final PsiMethod method = PsiTreeUtil.getContextOfType(element, PsiMethod.class, true);\n        if(method != null){\n          for (PsiClassType ref : method.getThrowsList().getReferencedTypes()) {\n            final PsiClass exception = ref.resolve();\n            if (exception != null && throwsSet.add(exception)) {\n              result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception), TailType.HUMBLE_SPACE_BEFORE_WORD));\n            }\n          }\n        }\n      }\n    });\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void fillCompletionVariants(@NotNull final CompletionParameters parameters, @NotNull final CompletionResultSet result) {\n    final InheritorsHolder holder = new InheritorsHolder(result);\n    ResultTracker tracker = new ResultTracker(result) {\n      @Override\n      public void consume(CompletionResult plainResult) {\n        super.consume(plainResult);\n\n        LookupElement element = plainResult.getLookupElement();\n        Object o = element.getObject();\n        if (o instanceof PsiClass) {\n          holder.registerClass((PsiClass)o);\n        }\n        if (element instanceof TypeArgumentCompletionProvider.TypeArgsLookupElement) {\n          ((TypeArgumentCompletionProvider.TypeArgsLookupElement)element).registerSingleClass(holder);\n        }\n      }\n    };\n    result.runRemainingContributors(parameters, tracker);\n    final boolean empty = tracker.containsOnlyPackages || suggestAllAnnotations(parameters);\n\n    if (!empty && parameters.getInvocationCount() == 0) {\n      result.restartCompletionWhenNothingMatches();\n    }\n\n    if (empty) {\n      delegate(parameters, JavaCompletionSorting.addJavaSorting(parameters, result), holder);\n    } else if (Registry.is(\"ide.completion.show.better.matching.classes\")) {\n      if (parameters.getCompletionType() == CompletionType.BASIC &&\n          parameters.getInvocationCount() <= 1 &&\n          JavaCompletionContributor.mayStartClassName(result) &&\n          JavaCompletionContributor.isClassNamePossible(parameters) &&\n          !JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getPosition())) {\n        suggestNonImportedClasses(parameters, JavaCompletionSorting.addJavaSorting(parameters, result.withPrefixMatcher(tracker.betterMatcher)), holder);\n      }\n    }\n  }","id":59233,"modified_method":"@Override\n  public void fillCompletionVariants(@NotNull final CompletionParameters parameters, @NotNull final CompletionResultSet result) {\n    final JavaCompletionSession session = new JavaCompletionSession(result);\n    ResultTracker tracker = new ResultTracker(result) {\n      @Override\n      public void consume(CompletionResult plainResult) {\n        super.consume(plainResult);\n\n        LookupElement element = plainResult.getLookupElement();\n        Object o = element.getObject();\n        if (o instanceof PsiClass) {\n          session.registerClass((PsiClass)o);\n        }\n        if (element instanceof TypeArgumentCompletionProvider.TypeArgsLookupElement) {\n          ((TypeArgumentCompletionProvider.TypeArgsLookupElement)element).registerSingleClass(session);\n        }\n      }\n    };\n    result.runRemainingContributors(parameters, tracker);\n    final boolean empty = tracker.containsOnlyPackages || suggestAllAnnotations(parameters);\n\n    if (!empty && parameters.getInvocationCount() == 0) {\n      result.restartCompletionWhenNothingMatches();\n    }\n\n    if (empty) {\n      delegate(parameters, JavaCompletionSorting.addJavaSorting(parameters, result), session);\n    } else if (Registry.is(\"ide.completion.show.better.matching.classes\")) {\n      if (parameters.getCompletionType() == CompletionType.BASIC &&\n          parameters.getInvocationCount() <= 1 &&\n          JavaCompletionContributor.mayStartClassName(result) &&\n          JavaCompletionContributor.isClassNamePossible(parameters) &&\n          !JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getPosition())) {\n        suggestNonImportedClasses(parameters, JavaCompletionSorting.addJavaSorting(parameters, result.withPrefixMatcher(tracker.betterMatcher)), session);\n      }\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void suggestNonImportedClasses(final CompletionParameters parameters, final CompletionResultSet result, @Nullable final InheritorsHolder inheritorsHolder) {\n    JavaClassNameCompletionContributor.addAllClasses(parameters,\n                                                     true, result.getPrefixMatcher(), new Consumer<LookupElement>() {\n      @Override\n      public void consume(LookupElement element) {\n        if (inheritorsHolder != null && inheritorsHolder.alreadyProcessed(element)) {\n          return;\n        }\n        JavaPsiClassReferenceElement classElement = element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);\n        if (classElement != null) {\n          classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n          element = JavaClassNameCompletionContributor.highlightIfNeeded(classElement, parameters);\n        }\n\n        result.addElement(element);\n      }\n    });\n  }","id":59234,"modified_method":"private static void suggestNonImportedClasses(CompletionParameters parameters, CompletionResultSet result, @Nullable JavaCompletionSession session) {\n    JavaClassNameCompletionContributor.addAllClasses(parameters, true, result.getPrefixMatcher(), element -> {\n      if (session != null && session.alreadyProcessed(element)) {\n        return;\n      }\n      JavaPsiClassReferenceElement classElement = element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);\n      if (classElement != null) {\n        classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);\n        element = JavaClassNameCompletionContributor.highlightIfNeeded(classElement, parameters);\n      }\n\n      result.addElement(element);\n    });\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void delegate(CompletionParameters parameters, final CompletionResultSet result, final InheritorsHolder inheritorsHolder) {\n    if (parameters.getCompletionType() == CompletionType.BASIC) {\n      PsiElement position = parameters.getPosition();\n      suggestCollectionUtilities(parameters, result, position);\n\n      if (parameters.getInvocationCount() <= 1 &&\n          (JavaCompletionContributor.mayStartClassName(result) || suggestAllAnnotations(parameters)) &&\n          JavaCompletionContributor.isClassNamePossible(parameters)) {\n        suggestNonImportedClasses(parameters, result, inheritorsHolder);\n        return;\n      }\n\n      suggestChainedCalls(parameters, result, position);\n    }\n\n    if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {\n      result.runRemainingContributors(parameters.withInvocationCount(3), true);\n    }\n  }","id":59235,"modified_method":"private static void delegate(CompletionParameters parameters, CompletionResultSet result, JavaCompletionSession session) {\n    if (parameters.getCompletionType() == CompletionType.BASIC) {\n      PsiElement position = parameters.getPosition();\n      suggestCollectionUtilities(parameters, result, position);\n\n      if (parameters.getInvocationCount() <= 1 &&\n          (JavaCompletionContributor.mayStartClassName(result) || suggestAllAnnotations(parameters)) &&\n          JavaCompletionContributor.isClassNamePossible(parameters)) {\n        suggestNonImportedClasses(parameters, result, session);\n        return;\n      }\n\n      suggestChainedCalls(parameters, result, position);\n    }\n\n    if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {\n      result.runRemainingContributors(parameters.withInvocationCount(3), true);\n    }\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"TypeArgumentCompletionProvider(boolean smart, @Nullable InheritorsHolder inheritors) {\n    mySmart = smart;\n    myInheritors = inheritors;\n  }","id":59236,"modified_method":"TypeArgumentCompletionProvider(boolean smart, @Nullable JavaCompletionSession session) {\n    mySmart = smart;\n    mySession = session;\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void fillExpectedTypeArgs(CompletionResultSet resultSet,\n                                           PsiElement context,\n                                           final PsiClass actualClass,\n                                           final int index,\n                                           PsiClassType.ClassResolveResult expectedType,\n                                           TailType globalTail) {\n    final PsiClass expectedClass = expectedType.getElement();\n\n    if (!InheritanceUtil.isInheritorOrSelf(actualClass, expectedClass, true)) return;\n\n    final PsiSubstitutor currentSubstitutor = TypeConversionUtil.getClassSubstitutor(expectedClass, actualClass, PsiSubstitutor.EMPTY);\n    assert currentSubstitutor != null;\n\n    PsiTypeParameter[] params = actualClass.getTypeParameters();\n    final List<PsiTypeLookupItem> typeItems = new ArrayList<PsiTypeLookupItem>();\n    for (int i = index; i < params.length; i++) {\n      PsiType arg = getExpectedTypeArg(context, i, expectedType, currentSubstitutor, params);\n      if (arg == null) {\n        arg = getExpectedTypeArg(context, index, expectedType, currentSubstitutor, params);\n        if (arg != null) {\n          resultSet.addElement(TailTypeDecorator.withTail(PsiTypeLookupItem.createLookupItem(arg, context), getTail(index == params.length - 1)));\n        }\n        return;\n      }\n      typeItems.add(PsiTypeLookupItem.createLookupItem(arg, context));\n    }\n\n    boolean hasParameters = ConstructorInsertHandler.hasConstructorParameters(actualClass, context);\n    TypeArgsLookupElement element = new TypeArgsLookupElement(typeItems, globalTail, hasParameters);\n    element.registerSingleClass(myInheritors);\n    resultSet.addElement(element);\n  }","id":59237,"modified_method":"private void fillExpectedTypeArgs(CompletionResultSet resultSet,\n                                           PsiElement context,\n                                           final PsiClass actualClass,\n                                           final int index,\n                                           PsiClassType.ClassResolveResult expectedType,\n                                           TailType globalTail) {\n    final PsiClass expectedClass = expectedType.getElement();\n\n    if (!InheritanceUtil.isInheritorOrSelf(actualClass, expectedClass, true)) return;\n\n    final PsiSubstitutor currentSubstitutor = TypeConversionUtil.getClassSubstitutor(expectedClass, actualClass, PsiSubstitutor.EMPTY);\n    assert currentSubstitutor != null;\n\n    PsiTypeParameter[] params = actualClass.getTypeParameters();\n    final List<PsiTypeLookupItem> typeItems = new ArrayList<PsiTypeLookupItem>();\n    for (int i = index; i < params.length; i++) {\n      PsiType arg = getExpectedTypeArg(context, i, expectedType, currentSubstitutor, params);\n      if (arg == null) {\n        arg = getExpectedTypeArg(context, index, expectedType, currentSubstitutor, params);\n        if (arg != null) {\n          resultSet.addElement(TailTypeDecorator.withTail(PsiTypeLookupItem.createLookupItem(arg, context), getTail(index == params.length - 1)));\n        }\n        return;\n      }\n      typeItems.add(PsiTypeLookupItem.createLookupItem(arg, context));\n    }\n\n    boolean hasParameters = ConstructorInsertHandler.hasConstructorParameters(actualClass, context);\n    TypeArgsLookupElement element = new TypeArgsLookupElement(typeItems, globalTail, hasParameters);\n    element.registerSingleClass(mySession);\n    resultSet.addElement(element);\n  }","commit_id":"2545fe69d9a8a2606f21f9be948770e9aef3b35e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n    public void testAddNodePage() throws Exception {\n        // Visit the provisioning page\n        provisioningPage();\n\n        // Add a foreign source named REQUISITION_NAME\n        m_driver.findElement(By.cssSelector(\"form[name=takeAction] input[name=groupName]\")).sendKeys(REQUISITION_NAME);\n        m_driver.findElement(By.cssSelector(\"form[name=takeAction] input[type=submit]\")).click();\n\n        // Synchronize the empty requisition\n        findElementByXpath(\"//input[@value='Synchronize']\").click();\n\n        frontPage();\n        clickMenuItem(\"name=nav-admin-top\", \"Quick-Add Node\", BASE_URL + \"opennms/admin/node/add.htm\");\n\n        // Make sure there is a Provision button on the page\n        final WebElement submitButton = m_driver.findElement(By.cssSelector(\"input[type=submit][value=Provision]\"));\n        assertEquals(\"Provision\", submitButton.getAttribute(\"value\"));\n\n        // Select our test foreign source\n        final WebElement selectElement = m_driver.findElement(By.cssSelector(\"select[name=foreignSource]\"));\n        final Select sel = new Select(selectElement);\n        sel.selectByVisibleText(REQUISITION_NAME);\n\n        // Add an unreachable IP address to the requisition\n        findElementByName(\"ipAddress\").sendKeys(m_unreachableIp);\n        findElementByName(\"nodeLabel\").sendKeys(\"AddNodePageTest\");\n\n        // Submit\n        submitButton.click();\n\n        // Click on the Provisioning Requisitions breadcrumb\n        findElementByLink(\"Provisioning Requisitions\").click();\n        findElementById(\"edit_req_anchor_\" + REQUISITION_NAME).click();\n\n        new ExpectationBuilder(\"css=input[value=AddNodePageTest]\").check(m_driver);\n\n        provisioningPage();\n        wait.until(new WaitForNodesInDatabase(1));\n    }","id":59238,"modified_method":"@Test\n    public void testAddNodePage() throws Exception {\n        // Visit the provisioning page\n        provisioningPage();\n\n        // Add a requisition called REQUISITION_NAME\n        findElementByXpath(\"//div/button[contains(@ng-click,'add')]\").click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\".modal-dialog\")));\n        enterText(By.xpath(\"//form/input[contains(@class,'bootbox-input')]\"), REQUISITION_NAME);\n        findElementByXpath(\"//div/button[text()='OK']\").click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//td[text()='\" + REQUISITION_NAME + \"']\")));\n\n        // Edit the requisition\n        findElementByXpath(\"//td[text()='\" + REQUISITION_NAME + \"']/../td/button[contains(@ng-click,'edit(')]\").click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//h1[text()='There are no nodes on the \" + REQUISITION_NAME + \"']\")));\n\n        // Synchronize the empty requisition\n        final String syncXpath = \"//div/button[contains(@ng-click,'synchronize')]\";\n        wait.until(ExpectedConditions.elementToBeClickable(By.xpath(syncXpath)));\n        findElementByXpath(syncXpath).click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\".modal-dialog\")));\n        findElementByXpath(\"//div/button[text()='No']\").click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//h1[text()='There are no nodes on the \" + REQUISITION_NAME + \"']\")));\n\n        // Wait for the requisition to be synchronized\n        Thread.sleep(5000);\n\n        frontPage();\n        clickMenuItem(\"name=nav-admin-top\", \"Quick-Add Node\", BASE_URL + \"opennms/admin/node/add.htm\");\n\n        // Make sure there is a Provision button on the page\n        final WebElement submitButton = m_driver.findElement(By.cssSelector(\"input[type=submit][value=Provision]\"));\n        assertEquals(\"Provision\", submitButton.getAttribute(\"value\"));\n\n        // Select our test foreign source\n        final WebElement selectElement = m_driver.findElement(By.cssSelector(\"select[name=foreignSource]\"));\n        final Select sel = new Select(selectElement);\n        sel.selectByVisibleText(REQUISITION_NAME);\n\n        // Add an unreachable IP address to the requisition\n        findElementByName(\"ipAddress\").sendKeys(m_unreachableIp);\n        findElementByName(\"nodeLabel\").sendKeys(\"AddNodePageTest\");\n\n        // Submit\n        submitButton.click();\n\n        // Click on the Provisioning Requisitions breadcrumb\n        findElementByLink(\"Provisioning Requisitions\").click();\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//td[text()='\" + REQUISITION_NAME + \"']\")));\n        wait.until(m_requisitionUtils.new WaitForNodesInDatabase(1));\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws Exception {\n        deleteTestRequisition();\n    }","id":59239,"modified_method":"@Before\n    public void setUp() throws Exception {\n        m_requisitionUtils.deleteTestRequisition();\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@After\n    public void tearDown() throws Exception {\n        deleteTestRequisition();\n    }","id":59240,"modified_method":"@After\n    public void tearDown() throws Exception {\n        m_requisitionUtils.deleteTestRequisition();\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllLinks() throws Exception {\n        for (final String[] entry : new String[][] {\n                // OpenNMS System\n                new String[] { \"Configure Users, Groups and On-Call Roles\", \"//h3[text()='Users and Groups']\" },\n                new String[] { \"System Configuration\", \"//h3[text()='OpenNMS Configuration']\" },\n                new String[] { \"Instrumentation Log Reader\", \"//h3[text()='Filtering']\" },\n\n                // Operations\n                new String[] { \"Configure Discovery\", \"//h3[text()='General Settings']\" },\n                new String[] { \"Configure SNMP Community Names by IP Address\", \"//h3[text()='SNMP Config Lookup']\" },\n                new String[] { \"Configure SNMP Data Collection per Interface\", \"//h3[text()='Manage SNMP Data Collection per Interface']\" },\n                new String[] { \"Manage and Unmanage Interfaces and Services\", \"//h3[text()='Manage and Unmanage Interfaces and Services']\" },\n                new String[] { \"Configure Thresholds\", \"//h3[text()='Threshold Configuration']\" },\n                new String[] { \"Manually Send an Event\", \"//h3[text()='Send Event to OpenNMS']\" },\n                new String[] { \"Configure Notifications\", \"//h3[text()='Configure Notifications']\" },\n                new String[] { \"Configure Scheduled Outages\", \"//form//input[@value='New Name']\" },\n                new String[] { \"Customize Event Configurations\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Configure SNMP Collections and Data Collection Groups\", \"//div[@id='content']//iframe\" },\n                new String[] { \"SNMP MIB Compiler\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Ops Board Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Surveillance Views Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"JMX Configuration Generator\", \"//div[@id='content']//iframe\" },\n\n                // Node Provisioning\n                new String[] { \"Manually Add an Interface\", \"//h3[text()='Enter IP Address']\" },\n                new String[] { \"Manage Provisioning Requisitions\", \"//h3[text()='Default Foreign Source Definition']\" },\n                new String[] { \"Import and Export Asset Information\", \"//h3[text()='Import and Export Assets']\" },\n                new String[] { \"Manage Surveillance Categories\", \"//h3[text()='Surveillance Categories']\" },\n                new String[] { \"Delete Nodes\", \"//h3[text()='Delete Nodes']\" },\n\n                // Distributed Monitoring\n                new String[] { \"Manage Applications\", \"//h3[text()='Applications']\" },\n                new String[] { \"Manage Remote Pollers\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n                // TODO: Enable this check\n                //new String[] { \"Manage Minions\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n        }) {\n            LOG.debug(\"clicking: '{}', expecting: '{}'\", entry[0], entry[1]);\n            adminPage();\n            findElementByLink(entry[0]).click();\n            findElementByXpath(entry[1]);\n        }\n    }","id":59241,"modified_method":"@Test\n    public void testAllLinks() throws Exception {\n        for (final String[] entry : new String[][] {\n                // OpenNMS System\n                new String[] { \"Configure Users, Groups and On-Call Roles\", \"//h3[text()='Users and Groups']\" },\n                new String[] { \"System Configuration\", \"//h3[text()='OpenNMS Configuration']\" },\n                new String[] { \"Instrumentation Log Reader\", \"//h3[text()='Filtering']\" },\n\n                // Operations\n                new String[] { \"Configure Discovery\", \"//h3[text()='General Settings']\" },\n                new String[] { \"Configure SNMP Community Names by IP Address\", \"//h3[text()='SNMP Config Lookup']\" },\n                new String[] { \"Configure SNMP Data Collection per Interface\", \"//h3[text()='Manage SNMP Data Collection per Interface']\" },\n                new String[] { \"Manage and Unmanage Interfaces and Services\", \"//h3[text()='Manage and Unmanage Interfaces and Services']\" },\n                new String[] { \"Configure Thresholds\", \"//h3[text()='Threshold Configuration']\" },\n                new String[] { \"Manually Send an Event\", \"//h3[text()='Send Event to OpenNMS']\" },\n                new String[] { \"Configure Notifications\", \"//h3[text()='Configure Notifications']\" },\n                new String[] { \"Configure Scheduled Outages\", \"//form//input[@value='New Name']\" },\n                new String[] { \"Customize Event Configurations\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Configure SNMP Collections and Data Collection Groups\", \"//div[@id='content']//iframe\" },\n                new String[] { \"SNMP MIB Compiler\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Ops Board Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Surveillance Views Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"JMX Configuration Generator\", \"//div[@id='content']//iframe\" },\n\n                // Node Provisioning\n                new String[] { \"Manually Add an Interface\", \"//h3[text()='Enter IP Address']\" },\n                new String[] { \"Manage Provisioning Requisitions\", \"//h4[contains(text(), 'Requisitions (')]\" },\n                new String[] { \"Import and Export Asset Information\", \"//h3[text()='Import and Export Assets']\" },\n                new String[] { \"Manage Surveillance Categories\", \"//h3[text()='Surveillance Categories']\" },\n                new String[] { \"Delete Nodes\", \"//h3[text()='Delete Nodes']\" },\n\n                // Distributed Monitoring\n                new String[] { \"Manage Applications\", \"//h3[text()='Applications']\" },\n                new String[] { \"Manage Remote Pollers\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n                // TODO: Enable this check\n                //new String[] { \"Manage Minions\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n        }) {\n            LOG.debug(\"clicking: '{}', expecting: '{}'\", entry[0], entry[1]);\n            adminPage();\n            findElementByLink(entry[0]).click();\n            findElementByXpath(entry[1]);\n        }\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Tears down the test.\n     * <p>Be 100% sure that there are no left-overs on the testing OpenNMS installation.<\/p>\n     *\n     * @throws Exception the exception\n     */\n    @After\n    public void tearDown() throws Exception {\n        deleteTestRequisition();\n    }","id":59242,"modified_method":"/**\n     * Tears down the test.\n     * <p>Be 100% sure that there are no left-overs on the testing OpenNMS installation.<\/p>\n     *\n     * @throws Exception the exception\n     */\n    @After\n    public void tearDown() throws Exception {\n        m_requisitionUtils.deleteTestRequisition();\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Sets up the test.\n     *\n     * @throws Exception the exception\n     */\n    @Before\n    public void setUp() throws Exception {\n        deleteTestRequisition();\n        provisioningPage();\n    }","id":59243,"modified_method":"/**\n     * Sets up the test.\n     *\n     * @throws Exception the exception\n     */\n    @Before\n    public void setUp() throws Exception {\n        m_requisitionUtils.deleteTestRequisition();\n        provisioningPage();\n    }","commit_id":"3b92d9bd07d81926469c0271d6ca53af939be10a","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllLinks() throws Exception {\n        for (final String[] entry : new String[][] {\n                // OpenNMS System\n                new String[] { \"Configure Users, Groups and On-Call Roles\", \"//h3[text()='Users and Groups']\" },\n                new String[] { \"System Configuration\", \"//h3[text()='OpenNMS Configuration']\" },\n                new String[] { \"Instrumentation Log Reader\", \"//h3[text()='Filtering']\" },\n\n                // Operations\n                new String[] { \"Configure Discovery\", \"//h3[text()='General Settings']\" },\n                new String[] { \"Configure SNMP Community Names by IP Address\", \"//h3[text()='SNMP Config Lookup']\" },\n                new String[] { \"Configure SNMP Data Collection per Interface\", \"//h3[text()='Manage SNMP Data Collection per Interface']\" },\n                new String[] { \"Manage and Unmanage Interfaces and Services\", \"//h3[text()='Manage and Unmanage Interfaces and Services']\" },\n                new String[] { \"Configure Thresholds\", \"//h3[text()='Threshold Configuration']\" },\n                new String[] { \"Manually Send an Event\", \"//h3[text()='Send Event to OpenNMS']\" },\n                new String[] { \"Configure Notifications\", \"//h3[text()='Configure Notifications']\" },\n                new String[] { \"Configure Scheduled Outages\", \"//form//input[@value='New Name']\" },\n                new String[] { \"Customize Event Configurations\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Configure SNMP Collections and Data Collection Groups\", \"//div[@id='content']//iframe\" },\n                new String[] { \"SNMP MIB Compiler\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Ops Board Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"Surveillance Views Configuration\", \"//div[@id='content']//iframe\" },\n                new String[] { \"JMX Configuration Generator\", \"//div[@id='content']//iframe\" },\n\n                // Node Provisioning\n                new String[] { \"Manually Add an Interface\", \"//h3[text()='Enter IP Address']\" },\n                new String[] { \"Manage Provisioning Requisitions\", \"//h4[contains(text(), 'Requisitions (')]\" },\n                new String[] { \"Import and Export Asset Information\", \"//h3[text()='Import and Export Assets']\" },\n                new String[] { \"Manage Surveillance Categories\", \"//h3[text()='Surveillance Categories']\" },\n                new String[] { \"Delete Nodes\", \"//h3[text()='Delete Nodes']\" },\n\n                // Distributed Monitoring\n                new String[] { \"Manage Applications\", \"//h3[text()='Applications']\" },\n                new String[] { \"Manage Remote Pollers\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n                // TODO: Enable this check\n                //new String[] { \"Manage Minions\", \"//h3[contains(text(),'Remote Poller Status')]\" }\n        }) {\n            LOG.debug(\"clicking: '{}', expecting: '{}'\", entry[0], entry[1]);\n            adminPage();\n            findElementByLink(entry[0]).click();\n            findElementByXpath(entry[1]);\n        }\n    }","id":59244,"modified_method":"@Test\n    public void testAllLinks() throws Exception {\n        adminPage();\n        findElementById(\"content\");\n        findElementByXpath(\"//div[contains(@class,'panel-body')]\");\n        final int count = countElementsMatchingCss(\"div.panel-body > ul > li > a\");\n        assertEquals(\"We expect \" + m_adminPageEntries.length + \" link entries on the admin page.\", m_adminPageEntries.length, count);\n\n        for (final String[] entry : m_adminPageEntries) {\n            LOG.debug(\"clicking: '{}', expecting: '{}'\", entry[0], entry[1]);\n            adminPage();\n            findElementByLink(entry[0]).click();\n            findElementByXpath(entry[1]);\n        }\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        findElementByXpath(\"//h3[text()='OpenNMS System']\");\n        findElementByXpath(\"//h3[text()='Provisioning']\");\n        findElementByXpath(\"//h3[text()='Event Management']\");\n        findElementByXpath(\"//h3[text()='Service Monitoring']\");\n        findElementByXpath(\"//h3[text()='Performance Measurement']\");\n        findElementByXpath(\"//h3[text()='Distributed Monitoring']\");\n        findElementByXpath(\"//h3[text()='Additional Tools']\");\n    }","id":59245,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(8, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='OpenNMS System']\");\n        findElementByXpath(\"//h3[text()='Provisioning']\");\n        findElementByXpath(\"//h3[text()='Event Management']\");\n        findElementByXpath(\"//h3[text()='Service Monitoring']\");\n        findElementByXpath(\"//h3[text()='Performance Measurement']\");\n        findElementByXpath(\"//h3[text()='Distributed Monitoring']\");\n        findElementByXpath(\"//h3[text()='Additional Tools']\");\n        findElementByXpath(\"//h3[text()='Descriptions']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws InterruptedException {\n        findElementByXpath(\"//h3[text()='Alarm Queries']\");\n        findElementByXpath(\"//h3[text()='Alarm Filter Favorites']\");\n        findElementByXpath(\"//h3[text()='Outstanding and acknowledged alarms']\");\n\n        findElementByXpath(\"//form//input[@name='id']\");\n        findElementByXpath(\"//form//button[@type='submit']\");\n    }","id":59246,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(3, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='Alarm Queries']\");\n        findElementByXpath(\"//h3[text()='Alarm Filter Favorites']\");\n        findElementByXpath(\"//h3[text()='Outstanding and acknowledged alarms']\");\n\n        findElementByXpath(\"//form//input[@name='id']\");\n        findElementByXpath(\"//form//button[@type='submit']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllLinks() throws InterruptedException{\n        findElementByLink(\"All alarms (summary)\").click();\n        findElementByXpath(\"//a[@title='Show acknowledged alarm(s)']\");\n\n        alarmsPage();\n        findElementByLink(\"All alarms (detail)\").click();\n        findElementByXpath(\"//a[@title='Show acknowledged alarm(s)']\");\n        findElementByLink(\"First Event Time\");\n\n        alarmsPage();\n        findElementByLink(\"Advanced Search\").click();\n        findElementByName(\"msgsub\");\n        findElementByName(\"iplike\");\n    }","id":59247,"modified_method":"@Test\n    public void testAllLinks() throws InterruptedException{\n        findElementByLink(\"All alarms (summary)\").click();\n        findElementByXpath(\"//a[@title='Show acknowledged alarm(s)']\");\n        assertElementDoesNotExist(By.cssSelector(\"//table//th//a[text()='First Event Time']\"));\n\n        alarmsPage();\n        findElementByLink(\"All alarms (detail)\").click();\n        findElementByXpath(\"//a[@title='Show acknowledged alarm(s)']\");\n        findElementByLink(\"First Event Time\");\n\n        alarmsPage();\n        findElementByLink(\"Advanced Search\").click();\n        findElementByName(\"msgsub\");\n        findElementByName(\"iplike\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws InterruptedException { \n        findElementByXpath(\"//h3[text()='Search Asset Information']\");\n        findElementByXpath(\"//h3[text()='Assets with Asset Numbers']\");\n        findElementByXpath(\"//h3[text()='Assets Inventory']\");\n    }","id":59248,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(3, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='Search Asset Information']\");\n        findElementByXpath(\"//h3[text()='Assets with Asset Numbers']\");\n        findElementByXpath(\"//h3[text()='Assets Inventory']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllLinks() throws InterruptedException {\n        findElementByLink(\"Your outstanding notices\").click();\n        findElementByXpath(\"//span[@class='label label-default' and contains(text(), 'admin was notified')]\");\n        findElementByLink(\"[Remove all]\");\n        findElementByLink(\"Sent Time\");\n        findElementByXpath(\"//button[@type='button' and text()='Acknowledge Notices']\");\n\n        notificationsPage();\n        findElementByLink(\"All outstanding notices\").click();\n        findElementByXpath(\"//p//strong[text()='outstanding']\");\n        findElementByLink(\"[Show acknowledged]\");\n        findElementByLink(\"Respond Time\");\n\n        notificationsPage();\n        findElementByLink(\"All acknowledged notices\").click();\n        findElementByXpath(\"//p//strong[text()='acknowledged']\");\n        findElementByLink(\"[Show outstanding]\");\n        findElementByLink(\"Respond Time\");\n    }","id":59249,"modified_method":"@Test\n    public void testAllLinks() throws InterruptedException {\n        findElementByLink(\"Your outstanding notices\").click();\n        findElementByXpath(\"//span[@class='label label-default' and contains(text(), 'admin was notified')]\");\n        findElementByLink(\"[Remove all]\");\n        findElementByLink(\"Sent Time\");\n        findElementByXpath(\"//button[@type='button' and text()='Acknowledge Notices']\");\n\n        notificationsPage();\n        findElementByLink(\"All outstanding notices\").click();\n        findElementByXpath(\"//p//strong[text()='outstanding']\");\n        findElementByLink(\"[Show acknowledged]\");\n        findElementByLink(\"Respond Time\");\n        assertElementDoesNotHaveText(By.xpath(\"//span[@class='label label-default']\"), \"admin was notified [-]\");\n\n        notificationsPage();\n        findElementByLink(\"All acknowledged notices\").click();\n        findElementByXpath(\"//p//strong[text()='acknowledged']\");\n        findElementByLink(\"[Show outstanding]\");\n        findElementByLink(\"Respond Time\");\n        assertElementDoesNotHaveText(By.xpath(\"//span[@class='label label-default']\"), \"admin was notified [-]\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        findElementByXpath(\"//h3[text()='Notification queries']\");\n        findElementByXpath(\"//h3[text()='Outstanding and Acknowledged Notices']\");\n    }","id":59250,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(3, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='Notification queries']\");\n        findElementByXpath(\"//h3[text()='Outstanding and Acknowledged Notices']\");\n        findElementByXpath(\"//h3[text()='Notification Escalation']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testOsgiUrlPatternResponse() throws IOException {\n        final String[] paths = new String[]{\n                \"jmx-config-tool\", \"vaadin-surveillance-views?dashboard=true\",\n                \"vaadin-surveillance-views?dashboard=false\",\n                \"vaadin-surveillance-views-config\", \"wallboard-config\"  };\n\n        for (String eachPath : paths) {\n            final String urlString = String.format(\"http://%s:%s/opennms/osgi/%s\", OPENNMS_WEB_HOST, OPENNMS_WEB_PORT, eachPath);\n            LOG.info(\"Verifying url '{}' ...\", urlString);\n\n            final URL url = new URL(urlString);\n            final HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty (\"Authorization\", createBasicAuthHeader());\n            connection.setConnectTimeout(250);\n            connection.setUseCaches(false);\n            connection.setDoOutput(false);\n            connection.setInstanceFollowRedirects(false); // we do not want to follow redirects, otherwise 200 OK might be returned\n            connection.connect();\n            LOG.info(\"Status: {} {}\", connection.getResponseCode(), connection.getResponseMessage());\n\n            // All unauthorized requests are forwarded to login.jsp which will result in 200 OK, we\n            // therefore fail, because we should have been logged in correctly.\n            if (302 == connection.getResponseCode()) {\n                LOG.info(\"Try redirecting to: {}\", connection.getHeaderField(\"Location\"));\n                Assert.fail(\"Request was forwarded. This is not allowed.\");\n            }\n\n            // Valid request, now check for OK\n            Assert.assertEquals(\n                    String.format(\"URL: %s: status %s (%s) expected but %s (%s) received.\",\n                            urlString,\n                            200,\n                            \"OK\",\n                            connection.getResponseCode(),\n                            connection.getResponseMessage()),\n                    200, connection.getResponseCode());\n            LOG.info(\"OK\");\n        }\n    }","id":59251,"modified_method":"@Test\n    public void testOsgiUrlPatternResponse() throws IOException {\n        final String[] paths = new String[]{\n                \"jmx-config-tool\",\n                \"vaadin-surveillance-views?dashboard=true\",\n                \"vaadin-surveillance-views?dashboard=false\",\n                \"vaadin-surveillance-views-config\",\n                \"wallboard-config\"\n        };\n\n        for (final String eachPath : paths) {\n            final String urlString = String.format(\"http://%s:%s/opennms/osgi/%s\", OPENNMS_WEB_HOST, OPENNMS_WEB_PORT, eachPath);\n            LOG.info(\"Verifying url '{}' ...\", urlString);\n\n            final URL url = new URL(urlString);\n            final HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty (\"Authorization\", createBasicAuthHeader());\n            connection.setConnectTimeout(250);\n            connection.setUseCaches(false);\n            connection.setDoOutput(false);\n            connection.setInstanceFollowRedirects(false); // we do not want to follow redirects, otherwise 200 OK might be returned\n            connection.connect();\n            LOG.info(\"Status: {} {}\", connection.getResponseCode(), connection.getResponseMessage());\n\n            // All unauthorized requests are forwarded to login.jsp which will result in 200 OK, we\n            // therefore fail, because we should have been logged in correctly.\n            if (302 == connection.getResponseCode()) {\n                LOG.info(\"Try redirecting to: {}\", connection.getHeaderField(\"Location\"));\n                Assert.fail(\"Request was forwarded. This is not allowed.\");\n            }\n\n            // Valid request, now check for OK\n            final String errorMessage = String.format(\"URL: %s: status %s (%s) expected but %s (%s) received.\",\n                urlString, 200, \"OK\", connection.getResponseCode(),  connection.getResponseMessage());\n            Assert.assertEquals(errorMessage, 200, connection.getResponseCode());\n            LOG.info(\"OK\");\n        }\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        findElementByXpath(\"//h3[text()='Outage Menu']\");\n        findElementByXpath(\"//h3[text()='Outages and Service Level Availability']\");\n        findElementByName(\"outageIdForm\").findElement(By.name(\"id\"));\n    }","id":59252,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(2, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='Outage Menu']\");\n        findElementByXpath(\"//h3[text()='Outages and Service Level Availability']\");\n        findElementByName(\"outageIdForm\").findElement(By.name(\"id\"));\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test \n    public void testAllFormsArePresent() throws InterruptedException {\n        for (final String matchingElement : new String[] {\n                \"input[@name='nodename']\",\n                \"input[@name='iplike']\",\n                \"input[@name='snmpParmValue']\",\n                \"select[@name='service']\",\n                \"input[@name='maclike']\",\n                \"input[@name='foreignSource']\"\n\n        }) {\n            findElementByXpath(\"//form[@action='element/nodeList.htm']//\" + matchingElement);\n        }\n        \n        findElementByXpath(\"//form[@action='asset/nodelist.jsp']//select[@name='searchvalue']\");\n        findElementByXpath(\"//form[@action='asset/nodelist.jsp']//select[@name='column']\");\n    }","id":59253,"modified_method":"@Test \n    public void testAllFormsArePresent() throws Exception {\n        assertEquals(9, countElementsMatchingCss(\"form\"));\n        for (final String matchingElement : new String[] {\n                \"input[@id='byname_nodename']\",\n                \"input[@id='byip_iplike']\",\n                \"select[@name='mib2Parm']\",\n                \"select[@name='snmpParm']\",\n                \"select[@id='byservice_service']\",\n                \"input[@name='maclike']\",\n                \"input[@name='foreignSource']\"\n        }) {\n            findElementByXpath(\"//form[@action='element/nodeList.htm']//\" + matchingElement);\n        }\n        \n        findElementByXpath(\"//form[@action='asset/nodelist.jsp']//select[@name='searchvalue']\");\n        findElementByXpath(\"//form[@action='asset/nodelist.jsp']//select[@name='column']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        findElementByXpath(\"//h3[text()='Search for Nodes']\");\n        findElementByXpath(\"//h3[text()='Search Asset Information']\");\n        findElementByXpath(\"//h3[text()='Search Options']\");\n    }","id":59254,"modified_method":"@Test\n    public void testAllTextIsPresent() throws Exception {\n        assertEquals(3, countElementsMatchingCss(\"h3.panel-title\"));\n        findElementByXpath(\"//h3[text()='Search for Nodes']\");\n        findElementByXpath(\"//h3[text()='Search Asset Information']\");\n        findElementByXpath(\"//h3[text()='Search Options']\");\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAllLinksArePresent() throws InterruptedException {\n        for (final String text : new String[] {\n                \"About the OpenNMS Web Console\",\n                \"Release Notes\",\n                \"Online Documentation\",\n                \"Generate a System Report\",\n                \"Open a Bug or Enhancement Request\",\n                \"Chat with Developers on IRC\"\n        }) {\n            assertNotNull(\"Link with text '\" + text + \"' must exist.\", m_driver.findElement(By.linkText(text)));\n        }\n    }","id":59255,"modified_method":"@Test\n    public void testAllLinksArePresent() throws Exception {\n        assertEquals(3, countElementsMatchingCss(\"h3.panel-title\"));\n        final String[] links = new String[] {\n                \"the OpenNMS.com support page\",\n                \"About the OpenNMS Web Console\",\n                \"Release Notes\",\n                \"Online Documentation\",\n                \"Generate a System Report\",\n                \"Open a Bug or Enhancement Request\",\n                \"Chat with Developers on IRC\"\n        };\n        assertEquals(links.length, countElementsMatchingCss(\"div.panel-body a\"));\n        for (final String text : links) {\n            assertNotNull(\"Link with text '\" + text + \"' must exist.\", m_driver.findElement(By.linkText(text)));\n        }\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testUsersAndGroups() throws Exception {\n        adminPage();\n        findElementByLink(\"Configure Users, Groups and On-Call Roles\").click();\n        findElementByLink(\"Configure Users\").click();\n        findElementByLink(\"Add new user\").click();\n\n        enterText(By.id(\"userID\"), USER_NAME);\n        enterText(By.id(\"pass1\"), \"SmokeTestPassword\");\n        enterText(By.id(\"pass2\"), \"SmokeTestPassword\");\n        findElementByXpath(\"//button[@type='submit' and text()='OK']\").click();\n\n        findElementById(\"saveUserButton\").click();\n        findElementById(\"users(\" + USER_NAME + \").doDetails\");\n\n        adminPage();\n        findElementByLink(\"Configure Users, Groups and On-Call Roles\").click();\n        findElementByLink(\"Configure Groups\").click();\n        findElementByLink(\"Add new group\").click();\n\n        enterText(By.id(\"groupName\"), GROUP_NAME);\n        enterText(By.id(\"groupComment\"), \"Test\");\n        findElementByXpath(\"//button[@type='submit' and text()='OK']\").click();\n\n        final Select select = new Select(findElementByName(\"availableUsers\"));\n        select.selectByVisibleText(USER_NAME);\n        findElementById(\"users.doAdd\").click();\n\n        findElementByName(\"finish\").click();\n\n        findElementByLink(GROUP_NAME).click();\n        m_driver.findElement(By.xpath(\"//h2[text()='Details for Group: \" + GROUP_NAME + \"']\"));\n    }","id":59256,"modified_method":"@Test\n    public void testUsersAndGroups() throws Exception {\n        adminPage();\n        findElementByLink(\"Configure Users, Groups and On-Call Roles\").click();\n        findElementByLink(\"Configure Users\").click();\n        findElementByLink(\"Add new user\").click();\n\n        enterText(By.id(\"userID\"), USER_NAME);\n        enterText(By.id(\"pass1\"), \"SmokeTestPassword\");\n        enterText(By.id(\"pass2\"), \"SmokeTestPassword\");\n        findElementByXpath(\"//button[@type='submit' and text()='OK']\").click();\n\n        findElementById(\"saveUserButton\").click();\n        findElementById(\"users(\" + USER_NAME + \").doDetails\");\n\n        adminPage();\n        findElementByLink(\"Configure Users, Groups and On-Call Roles\").click();\n        findElementByLink(\"Configure Groups\").click();\n        findElementByLink(\"Add new group\").click();\n\n        enterText(By.id(\"groupName\"), GROUP_NAME);\n        enterText(By.id(\"groupComment\"), \"Test\");\n        findElementByXpath(\"//button[@type='submit' and text()='OK']\").click();\n\n        final Select select = new Select(findElementByName(\"availableUsers\"));\n        select.selectByVisibleText(USER_NAME);\n        findElementById(\"users.doAdd\").click();\n\n        findElementByName(\"finish\").click();\n\n        findElementByLink(GROUP_NAME).click();\n        m_driver.findElement(By.xpath(\"//h2[text()='Details for Group: \" + GROUP_NAME + \"']\"));\n\n        findElementByLink(\"Group List\").click();\n        findElementById(GROUP_NAME + \".doDelete\").click();\n        handleAlert(\"Are you sure you want to delete the group \" + GROUP_NAME + \"?\");\n        assertElementDoesNotExist(By.id(GROUP_NAME));\n\n        findElementByLink(\"Users and Groups\").click();\n        findElementByLink(\"Configure Users\").click();\n        findElementById(\"user-\" + USER_NAME);\n        findElementById(\"users(\" + USER_NAME + \").doDelete\").click();\n        handleAlert(\"Are you sure you want to delete the user \" + USER_NAME + \"?\");\n        assertElementDoesNotExist(By.id(USER_NAME));\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testExpectedTextAndLinksArePresent() throws Exception {\n        final List<WebElement> h3s = m_driver.findElements(By.tagName(\"h3\"));\n        assertEquals(2, h3s.size());\n        assertEquals(\"User Account Self-Service\", h3s.get(0).getText());\n        assertEquals(\"Account Self-Service Options\", h3s.get(1).getText());\n    }","id":59257,"modified_method":"@Test\n    public void testExpectedTextAndLinksArePresent() throws Exception {\n        final List<WebElement> h3s = m_driver.findElements(By.tagName(\"h3\"));\n        assertEquals(\"Account page should have 2 panels\", 2, h3s.size());\n        assertEquals(\"Account page should have \\\"User Account Self-Service\\\" panel\", \"User Account Self-Service\", h3s.get(0).getText());\n        assertEquals(\"Account page should have \\\"User Account Self-Service Options\\\" panel\", \"Account Self-Service Options\", h3s.get(1).getText());\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testSubmitWithWrongPassword() throws InterruptedException {\n        m_driver.findElement(By.linkText(\"Change Password\")).click();\n        m_driver.findElement(By.cssSelector(\"input[type=password][name=oldpass]\")).sendKeys(\"12345\");\n        m_driver.findElement(By.cssSelector(\"input[type=password][name=pass1]\")).sendKeys(\"23456\");\n        m_driver.findElement(By.cssSelector(\"input[type=password][name=pass2]\")).sendKeys(\"34567\");\n        m_driver.findElement(By.cssSelector(\"button[type=submit]\")).click();\n\n        try {\n            final Alert alert = wait.until(ExpectedConditions.alertIsPresent());\n            alert.dismiss();\n        } catch (final Exception e) {\n            LOG.debug(\"Got an exception waiting for a 'wrong password' alert.\", e);\n        }\n    }","id":59258,"modified_method":"@Test\n    public void testSubmitWithWrongPassword() throws InterruptedException {\n        m_driver.findElement(By.linkText(\"Change Password\")).click();\n        enterText(By.cssSelector(\"input[type=password][name=oldpass]\"), \"12345\");\n        enterText(By.cssSelector(\"input[type=password][name=pass1]\"), \"23456\");\n        enterText(By.cssSelector(\"input[type=password][name=pass2]\"), \"34567\");\n        m_driver.findElement(By.cssSelector(\"button[type=submit]\")).click();\n\n        try {\n            final Alert alert = wait.until(ExpectedConditions.alertIsPresent());\n            alert.dismiss();\n        } catch (final Exception e) {\n            LOG.debug(\"Got an exception waiting for a 'wrong password' alert.\", e);\n            throw e;\n        }\n    }","commit_id":"3596343e1e59386ff5311554b051c7803288b039","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n  @NotNull\n  public PsiReference[] createReferences(final GenericDomValue<T> genericDomValue,\n                                         final PsiElement element,\n                                         final ConvertContext context) {\n    final String originalValue = genericDomValue.getStringValue();\n    if (originalValue == null) return PsiReference.EMPTY_ARRAY;\n    final String unquotedValue = unquote(originalValue, getQuoteSigns());\n    int startOffset = originalValue == unquotedValue? 0 : XmlTagUtilBase.escapeString(originalValue.substring(0, 1), false).length();\n    int endOffset = originalValue == unquotedValue || quotationIsNotClosed(originalValue)? 0 : startOffset;\n    final ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(element);\n    assert manipulator != null : \"manipulator not found\";\n    final TextRange range = manipulator.getRangeInElement(element);\n    return new PsiReference[]{createPsiReference(element, range.getStartOffset()+startOffset, range.getEndOffset() - endOffset, true, context, genericDomValue, startOffset != endOffset)};\n  }","id":59259,"modified_method":"@Override\n  @NotNull\n  public PsiReference[] createReferences(final GenericDomValue<T> genericDomValue,\n                                         final PsiElement element,\n                                         final ConvertContext context) {\n    final String originalValue = genericDomValue.getStringValue();\n    if (originalValue == null) return PsiReference.EMPTY_ARRAY;\n    TextRange range = ElementManipulators.getValueTextRange(element);\n    String unquotedValue = unquote(originalValue, getQuoteSigns());\n    int valueOffset = range.substring(element.getText()).indexOf(unquotedValue);\n    if (valueOffset < 0) return PsiReference.EMPTY_ARRAY;\n    int start = range.getStartOffset() + valueOffset;\n    int end = start + unquotedValue.length();\n    boolean unclosedQuotation = valueOffset > 0 && end == range.getEndOffset();\n    return new PsiReference[]{createPsiReference(element, start, end, true, context, genericDomValue, unclosedQuotation)};\n  }","commit_id":"a0fa1a7af7f5bea283d593678945aad24d1417d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean createReferences(@NotNull final PsiElement psiElement, final @NotNull List<PsiReference> references, final boolean soft) {\n\n    final ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(psiElement);\n    assert manipulator != null;\n    final TextRange range = manipulator.getRangeInElement(psiElement);\n    int offset = range.getStartOffset();\n    int endOffset = range.getEndOffset();\n    final String elementText = psiElement.getText();\n    for (DynamicContextProvider provider: Extensions.getExtensions(DynamicContextProvider.EP_NAME)) {\n      final int dynamicOffset = provider.getOffset(psiElement, offset, elementText);\n      if (dynamicOffset == -1) {\n        return false;\n      } else if (dynamicOffset != offset) {\n        offset = dynamicOffset;\n      }\n    }\n\n    final int pos = getLastPosOfURL(offset, elementText);\n    if (pos != -1 && pos < endOffset) {\n      endOffset = pos;\n    }\n    try {\n      final String text = elementText.substring(offset, endOffset);\n      return createReferences(psiElement, offset, text, references, soft);\n    } catch (StringIndexOutOfBoundsException e) {\n      LOG.error(\"Cannot process string: '\" + psiElement.getParent().getParent().getText() + \"'\", e);\n      return false;\n    }\n  }","id":59260,"modified_method":"public boolean createReferences(@NotNull final PsiElement psiElement, final @NotNull List<PsiReference> references, final boolean soft) {\n\n    final TextRange range = ElementManipulators.getValueTextRange(psiElement);\n    int offset = range.getStartOffset();\n    int endOffset = range.getEndOffset();\n    final String elementText = psiElement.getText();\n    for (DynamicContextProvider provider: Extensions.getExtensions(DynamicContextProvider.EP_NAME)) {\n      final int dynamicOffset = provider.getOffset(psiElement, offset, elementText);\n      if (dynamicOffset == -1) {\n        return false;\n      } else if (dynamicOffset != offset) {\n        offset = dynamicOffset;\n      }\n    }\n\n    final int pos = getLastPosOfURL(offset, elementText);\n    if (pos != -1 && pos < endOffset) {\n      endOffset = pos;\n    }\n    try {\n      final String text = elementText.substring(offset, endOffset);\n      return createReferences(psiElement, offset, text, references, soft);\n    } catch (StringIndexOutOfBoundsException e) {\n      LOG.error(\"Cannot process string: '\" + psiElement.getParent().getParent().getText() + \"'\", e);\n      return false;\n    }\n  }","commit_id":"ea75282959b4bc0e6ab97f8708a6ab13337aca29","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public FileReferenceSet(final @NotNull PsiElement element) {\n\n    myElement = element;\n    final ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(element);\n    final TextRange range = manipulator.getRangeInElement(element);\n    myStartInElement = range.getStartOffset();\n    final String s = range.substring(element.getText());\n    myPathString = s.trim();\n    myEndingSlashNotAllowed = true;\n    myCaseSensitive = false;\n\n    reparse(s);\n  }","id":59261,"modified_method":"public FileReferenceSet(final @NotNull PsiElement element) {\n\n    myElement = element;\n    TextRange range = ElementManipulators.getValueTextRange(element);\n    myStartInElement = range.getStartOffset();\n    final String s = range.substring(element.getText());\n    myPathString = s.trim();\n    myEndingSlashNotAllowed = true;\n    myCaseSensitive = false;\n\n    reparse(s);\n  }","commit_id":"16b871e607c76bfdb4f441c0e43428fe0f5b4292","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitErrorElement(final PsiErrorElement element) {\n    for(Condition<PsiErrorElement> errorFilter: myErrorFilters) {\n      if (errorFilter.value(element)) return;\n    }\n\n    HighlightInfo info = createErrorElementInfo(element);\n    myHolder.add(info);\n  }","id":59262,"modified_method":"public void visitErrorElement(final PsiErrorElement element) {\n    for(HighlightErrorFilter errorFilter: myErrorFilters) {\n      if (!errorFilter.shouldHighlightErrorElement(element)) return;\n    }\n\n    HighlightInfo info = createErrorElementInfo(element);\n    myHolder.add(info);\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void highlightInjectedIn(final PsiFile injectedPsi, final AnnotationHolderImpl annotationHolder, final Condition<PsiErrorElement>[] errorFilters) {\n    final DocumentWindow documentRange = ((VirtualFileWindow)injectedPsi.getContainingFile().getViewProvider().getVirtualFile()).getDocumentWindow();\n    assert documentRange != null;\n    assert documentRange.getText().equals(injectedPsi.getText());\n    Language injectedLanguage = injectedPsi.getLanguage();\n    final List<Annotator> annotators = LanguageAnnotators.INSTANCE.allForLanguage(injectedLanguage);\n    final InjectedLanguageManager ilManager = InjectedLanguageManager.getInstance(injectedPsi.getProject());\n    final AnnotationHolderImpl fixingOffsetsHolder = new AnnotationHolderImpl() {\n      public boolean add(final Annotation annotation) {\n        return true; // we are going to hand off the annotation to the annotationHolder anyway\n      }\n\n      protected Annotation createAnnotation(TextRange range, HighlightSeverity severity, String message) {\n        List<TextRange> editables = ilManager.intersectWithAllEditableFragments(injectedPsi, range);\n        Annotation firstAnnotation = null;\n        for (TextRange editable : editables) {\n          final TextRange patched = documentRange.injectedToHost(editable);\n          Annotation annotation = super.createAnnotation(patched, severity, message);\n          if (firstAnnotation == null) {\n            firstAnnotation = annotation;\n          }\n          annotationHolder.add(annotation);\n        }\n        return firstAnnotation != null ? firstAnnotation :\n        // fake\n        super.createAnnotation(documentRange.injectedToHost(TextRange.from(0, 0)), severity, message);\n      }\n    };\n    PsiRecursiveElementVisitor visitor = new PsiRecursiveElementVisitor() {\n      @Override public void visitElement(PsiElement element) {\n        super.visitElement(element);\n        //noinspection ForLoopReplaceableByForEach\n        for (int i = 0; i < annotators.size(); i++) {\n          Annotator annotator = annotators.get(i);\n          annotator.annotate(element, fixingOffsetsHolder);\n        }\n      }\n\n      @Override public void visitErrorElement(PsiErrorElement element) {\n        for (final Condition<PsiErrorElement> errorFilter : errorFilters) {\n          if (errorFilter.value(element)) return;\n        }\n\n        HighlightInfo info = DefaultHighlightVisitor.createErrorElementInfo(element);\n        Annotation error = fixingOffsetsHolder.createErrorAnnotation(new ProperTextRange(info.startOffset, info.endOffset), info.description);\n        error.setTooltip(info.toolTip);\n        if (info.quickFixActionRanges != null) {\n          for (Pair<HighlightInfo.IntentionActionDescriptor, TextRange> o : info.quickFixActionRanges) {\n            List<TextRange> editables = ilManager.intersectWithAllEditableFragments(injectedPsi, o.second);\n            for (TextRange fixEditable : editables) {\n              error.registerFix(o.first.getAction(), documentRange.injectedToHost(fixEditable));\n            }\n          }\n        }\n      }\n    };\n\n    injectedPsi.accept(visitor);\n    highlightInjectedSyntax(injectedLanguage, injectedPsi, annotationHolder);\n  }","id":59263,"modified_method":"private static void highlightInjectedIn(final PsiFile injectedPsi, final AnnotationHolderImpl annotationHolder, final HighlightErrorFilter[] errorFilters) {\n    final DocumentWindow documentRange = ((VirtualFileWindow)injectedPsi.getContainingFile().getViewProvider().getVirtualFile()).getDocumentWindow();\n    assert documentRange != null;\n    assert documentRange.getText().equals(injectedPsi.getText());\n    Language injectedLanguage = injectedPsi.getLanguage();\n    final List<Annotator> annotators = LanguageAnnotators.INSTANCE.allForLanguage(injectedLanguage);\n    final InjectedLanguageManager ilManager = InjectedLanguageManager.getInstance(injectedPsi.getProject());\n    final AnnotationHolderImpl fixingOffsetsHolder = new AnnotationHolderImpl() {\n      public boolean add(final Annotation annotation) {\n        return true; // we are going to hand off the annotation to the annotationHolder anyway\n      }\n\n      protected Annotation createAnnotation(TextRange range, HighlightSeverity severity, String message) {\n        List<TextRange> editables = ilManager.intersectWithAllEditableFragments(injectedPsi, range);\n        Annotation firstAnnotation = null;\n        for (TextRange editable : editables) {\n          final TextRange patched = documentRange.injectedToHost(editable);\n          Annotation annotation = super.createAnnotation(patched, severity, message);\n          if (firstAnnotation == null) {\n            firstAnnotation = annotation;\n          }\n          annotationHolder.add(annotation);\n        }\n        return firstAnnotation != null ? firstAnnotation :\n        // fake\n        super.createAnnotation(documentRange.injectedToHost(TextRange.from(0, 0)), severity, message);\n      }\n    };\n    PsiRecursiveElementVisitor visitor = new PsiRecursiveElementVisitor() {\n      @Override public void visitElement(PsiElement element) {\n        super.visitElement(element);\n        //noinspection ForLoopReplaceableByForEach\n        for (int i = 0; i < annotators.size(); i++) {\n          Annotator annotator = annotators.get(i);\n          annotator.annotate(element, fixingOffsetsHolder);\n        }\n      }\n\n      @Override public void visitErrorElement(PsiErrorElement element) {\n        for (final HighlightErrorFilter errorFilter : errorFilters) {\n          if (!errorFilter.shouldHighlightErrorElement(element)) return;\n        }\n\n        HighlightInfo info = DefaultHighlightVisitor.createErrorElementInfo(element);\n        Annotation error = fixingOffsetsHolder.createErrorAnnotation(new ProperTextRange(info.startOffset, info.endOffset), info.description);\n        error.setTooltip(info.toolTip);\n        if (info.quickFixActionRanges != null) {\n          for (Pair<HighlightInfo.IntentionActionDescriptor, TextRange> o : info.quickFixActionRanges) {\n            List<TextRange> editables = ilManager.intersectWithAllEditableFragments(injectedPsi, o.second);\n            for (TextRange fixEditable : editables) {\n              error.registerFix(o.first.getAction(), documentRange.injectedToHost(fixEditable));\n            }\n          }\n        }\n      }\n    };\n\n    injectedPsi.accept(visitor);\n    highlightInjectedSyntax(injectedLanguage, injectedPsi, annotationHolder);\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void addInjectedPsiHighlights(final List<PsiElement> elements, final Condition<PsiErrorElement>[] errorFilters) {\n    List<DocumentWindow> injected = InjectedLanguageUtil.getCachedInjectedDocuments(myFile);\n    Collection<PsiElement> hosts = new THashSet<PsiElement>(elements.size() + injected.size());\n\n    // rehighlight all injected PSI regardless the range,\n    // since change in one place can lead to invalidation of injected PSI in (completely) other place.\n    for (DocumentWindow documentRange : injected) {\n      PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);\n      if (file == null) continue;\n      PsiElement context = file.getContext();\n      if (context != null\n          && context.isValid()\n          && !file.getProject().isDisposed()\n          && (myUpdateAll || new ProperTextRange(myStartOffset, myEndOffset).intersects(context.getTextRange()))) {\n        hosts.add(context);\n      }\n    }\n    hosts.addAll(elements);\n\n    final Collection<PsiFile> injectedFiles = new THashSet<PsiFile>();\n    EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme();\n    final TextAttributes injectedAttributes = scheme.getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT);\n    for (PsiElement element : hosts) {\n      InjectedLanguageUtil.enumerate(element, myFile, new PsiLanguageInjectionHost.InjectedPsiVisitor() {\n        public void visit(@NotNull PsiFile injectedPsi, @NotNull List<PsiLanguageInjectionHost.Shred> places) {\n          for (PsiLanguageInjectionHost.Shred place : places) {\n            TextRange textRange = place.getRangeInsideHost().shiftRight(place.host.getTextRange().getStartOffset());\n            String desc = injectedPsi.getText();\n            HighlightInfo highlightInfo = HighlightInfo.createHighlightInfo(HighlightInfoType.INJECTED_LANGUAGE_FRAGMENT, textRange, null, desc, injectedAttributes);\n            addHighlightInfo(textRange, highlightInfo);\n          }\n          injectedFiles.add(injectedPsi);\n        }\n      }, false);\n    }\n    if (injectedFiles.isEmpty()) return;\n\n    JobUtil.invokeConcurrentlyForAll(injectedFiles, new Processor<PsiFile>() {\n      public boolean process(final PsiFile injectedPsi) {\n\n        AnnotationHolderImpl annotationHolder = createAnnotationHolder();\n        InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(myProject);\n        highlightInjectedIn(injectedPsi, annotationHolder, errorFilters);\n        DocumentWindow documentWindow = (DocumentWindow)PsiDocumentManager.getInstance(myProject).getCachedDocument(injectedPsi);\n        for (Annotation annotation : annotationHolder) {\n          final TextRange fixedTextRange;\n          final int startOffset = annotation.getStartOffset();\n          TextRange textRange = documentWindow.getHostRange(startOffset);\n          if (textRange == null) {\n            // todo[cdr] check this fix. prefix/suffix code annotation case\n            textRange = findNearestTextRange(documentWindow, startOffset);\n            final boolean isBefore = startOffset < textRange.getStartOffset();\n            fixedTextRange = new ProperTextRange(isBefore ? textRange.getStartOffset() - 1 : textRange.getEndOffset(),\n                                           isBefore ? textRange.getStartOffset() : textRange.getEndOffset() + 1);\n          }\n          else {\n            fixedTextRange = null;\n          }\n          final HighlightInfo highlightInfo = HighlightInfo.fromAnnotation(annotation, fixedTextRange);\n          addHighlightInfo(textRange, highlightInfo);\n        }\n\n        for (HighlightInfo info : highlightTodos(injectedPsi, injectedPsi.getText(), 0, injectedPsi.getTextLength())) {\n          List<TextRange> editables = injectedLanguageManager.intersectWithAllEditableFragments(injectedPsi, new ProperTextRange(info.startOffset, info.endOffset));\n          for (TextRange editable : editables) {\n            TextRange hostRange = documentWindow.injectedToHost(editable);\n\n            HighlightInfo patched = HighlightInfo.createHighlightInfo(info.type, hostRange, info.description, info.description, info.forcedTextAttributes);\n            patched.toolTip = info.toolTip;\n            addHighlightInfo(hostRange, patched);\n          }\n        }\n        return true;\n      }\n    }, \"Highlight injected language fragments\");\n  }","id":59264,"modified_method":"private void addInjectedPsiHighlights(final List<PsiElement> elements, final HighlightErrorFilter[] errorFilters) {\n    List<DocumentWindow> injected = InjectedLanguageUtil.getCachedInjectedDocuments(myFile);\n    Collection<PsiElement> hosts = new THashSet<PsiElement>(elements.size() + injected.size());\n\n    // rehighlight all injected PSI regardless the range,\n    // since change in one place can lead to invalidation of injected PSI in (completely) other place.\n    for (DocumentWindow documentRange : injected) {\n      PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);\n      if (file == null) continue;\n      PsiElement context = file.getContext();\n      if (context != null\n          && context.isValid()\n          && !file.getProject().isDisposed()\n          && (myUpdateAll || new ProperTextRange(myStartOffset, myEndOffset).intersects(context.getTextRange()))) {\n        hosts.add(context);\n      }\n    }\n    hosts.addAll(elements);\n\n    final Collection<PsiFile> injectedFiles = new THashSet<PsiFile>();\n    EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme();\n    final TextAttributes injectedAttributes = scheme.getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT);\n    for (PsiElement element : hosts) {\n      InjectedLanguageUtil.enumerate(element, myFile, new PsiLanguageInjectionHost.InjectedPsiVisitor() {\n        public void visit(@NotNull PsiFile injectedPsi, @NotNull List<PsiLanguageInjectionHost.Shred> places) {\n          for (PsiLanguageInjectionHost.Shred place : places) {\n            TextRange textRange = place.getRangeInsideHost().shiftRight(place.host.getTextRange().getStartOffset());\n            String desc = injectedPsi.getText();\n            HighlightInfo highlightInfo = HighlightInfo.createHighlightInfo(HighlightInfoType.INJECTED_LANGUAGE_FRAGMENT, textRange, null, desc, injectedAttributes);\n            addHighlightInfo(textRange, highlightInfo);\n          }\n          injectedFiles.add(injectedPsi);\n        }\n      }, false);\n    }\n    if (injectedFiles.isEmpty()) return;\n\n    JobUtil.invokeConcurrentlyForAll(injectedFiles, new Processor<PsiFile>() {\n      public boolean process(final PsiFile injectedPsi) {\n\n        AnnotationHolderImpl annotationHolder = createAnnotationHolder();\n        InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(myProject);\n        highlightInjectedIn(injectedPsi, annotationHolder, errorFilters);\n        DocumentWindow documentWindow = (DocumentWindow)PsiDocumentManager.getInstance(myProject).getCachedDocument(injectedPsi);\n        for (Annotation annotation : annotationHolder) {\n          final TextRange fixedTextRange;\n          final int startOffset = annotation.getStartOffset();\n          TextRange textRange = documentWindow.getHostRange(startOffset);\n          if (textRange == null) {\n            // todo[cdr] check this fix. prefix/suffix code annotation case\n            textRange = findNearestTextRange(documentWindow, startOffset);\n            final boolean isBefore = startOffset < textRange.getStartOffset();\n            fixedTextRange = new ProperTextRange(isBefore ? textRange.getStartOffset() - 1 : textRange.getEndOffset(),\n                                           isBefore ? textRange.getStartOffset() : textRange.getEndOffset() + 1);\n          }\n          else {\n            fixedTextRange = null;\n          }\n          final HighlightInfo highlightInfo = HighlightInfo.fromAnnotation(annotation, fixedTextRange);\n          addHighlightInfo(textRange, highlightInfo);\n        }\n\n        for (HighlightInfo info : highlightTodos(injectedPsi, injectedPsi.getText(), 0, injectedPsi.getTextLength())) {\n          List<TextRange> editables = injectedLanguageManager.intersectWithAllEditableFragments(injectedPsi, new ProperTextRange(info.startOffset, info.endOffset));\n          for (TextRange editable : editables) {\n            TextRange hostRange = documentWindow.injectedToHost(editable);\n\n            HighlightInfo patched = HighlightInfo.createHighlightInfo(info.type, hostRange, info.description, info.description, info.forcedTextAttributes);\n            patched.toolTip = info.toolTip;\n            addHighlightInfo(hostRange, patched);\n          }\n        }\n        return true;\n      }\n    }, \"Highlight injected language fragments\");\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException {\n    final int offset = editor.getCaretModel().getOffset();\n    final PsiElement psiElement = file.findElementAt(offset);\n    if (psiElement == null || !psiElement.isValid() || !(psiElement instanceof XmlToken)) {\n      return;\n    }\n\n    if (!CodeInsightUtilBase.prepareFileForWrite(file)) return;\n    doFix(project, psiElement);\n  }","id":59265,"modified_method":"public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException {\n    final int offset = editor.getCaretModel().getOffset();\n    final PsiElement psiElement = file.findElementAt(offset);\n    if (psiElement == null || !psiElement.isValid() || !(psiElement instanceof XmlToken)) {\n      return;\n    }\n\n    if (!CodeInsightUtilBase.prepareFileForWrite(file)) return;\n    doFix(psiElement);\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void doFix(@NotNull final Project project, @NotNull final PsiElement element) throws IncorrectOperationException {\n    final XmlToken endNameToken = (XmlToken) element;\n    final PsiElement tagElement = endNameToken.getParent();\n    if (!(tagElement instanceof XmlTag)) return;\n\n    final ASTNode astNode = tagElement.getNode();\n    final ASTNode endTagStart = XmlChildRole.CLOSING_TAG_START_FINDER.findChild(astNode);\n    tagElement.deleteChildRange(endTagStart.getPsi(), tagElement.getLastChild());\n  }","id":59266,"modified_method":"private static void doFix(@NotNull final PsiElement element) throws IncorrectOperationException {\n    final XmlToken endNameToken = (XmlToken)element;\n    final PsiElement tagElement = endNameToken.getParent();\n    if (!(tagElement instanceof XmlTag) && !(tagElement instanceof PsiErrorElement)) return;\n\n    if (tagElement instanceof PsiErrorElement) {\n      tagElement.delete();\n    }\n    else {\n      final ASTNode astNode = tagElement.getNode();\n      if (astNode != null) {\n        final ASTNode endTagStart = XmlChildRole.CLOSING_TAG_START_FINDER.findChild(astNode);\n        if (endTagStart != null) {\n          final Document document = PsiDocumentManager.getInstance(element.getProject()).getDocument(tagElement.getContainingFile());\n          if (document != null) {\n            document.deleteString(endTagStart.getStartOffset(), tagElement.getLastChild().getTextRange().getEndOffset());\n          }\n        }\n      }\n    }\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) {\n    final PsiElement element = descriptor.getPsiElement();\n    if (!element.isValid() || !(element instanceof XmlToken)) return;\n    if (!CodeInsightUtilBase.prepareFileForWrite(element.getContainingFile())) return;\n\n    new WriteCommandAction(project) {\n      protected void run(final Result result) throws Throwable {\n        doFix(project, element);\n      }\n    }.execute();\n  }","id":59267,"modified_method":"public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) {\n    final PsiElement element = descriptor.getPsiElement();\n    if (!element.isValid() || !(element instanceof XmlToken)) return;\n    if (!CodeInsightUtilBase.prepareFileForWrite(element.getContainingFile())) return;\n\n    new WriteCommandAction(project) {\n      protected void run(final Result result) throws Throwable {\n        doFix(element);\n      }\n    }.execute();\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException {\n    final int offset = editor.getCaretModel().getOffset();\n    PsiElement psiElement = file.findElementAt(offset);\n\n    if (psiElement == null || !psiElement.isValid()) return;\n    if (!CodeInsightUtilBase.prepareFileForWrite(psiElement.getContainingFile())) return;\n\n    if (psiElement instanceof XmlToken) {\n      final IElementType tokenType = ((XmlToken)psiElement).getTokenType();\n      if (tokenType != XmlTokenType.XML_NAME) {\n        if (tokenType == XmlTokenType.XML_TAG_END) {\n          psiElement = psiElement.getPrevSibling();\n          if (psiElement == null) return;\n        }\n      }\n\n      PsiElement target = null;\n      final String text = psiElement.getText();\n      if (!myTargetName.equals(text)) {\n        target = psiElement;\n      }\n      else {\n        // we're in the other\n        PsiElement parent = psiElement.getParent();\n        if (parent instanceof PsiErrorElement) {\n          parent = parent.getParent();\n        }\n\n        if (parent instanceof XmlTag) {\n          if (myStart) {\n            target = XmlTagUtil.getStartTagNameElement((XmlTag)parent);\n          }\n          else {\n            target = XmlTagUtil.getEndTagNameElement((XmlTag) parent);\n            if (target == null) {\n              final PsiErrorElement errorElement = PsiTreeUtil.getChildOfType(parent, PsiErrorElement.class);\n              target = XmlWrongClosingTagNameInspection.findEndTagName(errorElement);\n            }\n          }\n        }\n      }\n\n      if (target != null) {\n        try {\n          final XmlTag newTag = XmlElementFactory.getInstance(project).createTagFromText(\"<\" + myTargetName + \"/>\");\n          target.replace(newTag.getChildren()[1]);\n        }\n        catch (IncorrectOperationException e) {\n          LOG.error(e);\n        }\n      }\n\n    }\n  }","id":59268,"modified_method":"public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException {\n    final int offset = editor.getCaretModel().getOffset();\n    PsiElement psiElement = file.findElementAt(offset);\n\n    if (psiElement == null || !psiElement.isValid()) return;\n    if (!CodeInsightUtilBase.prepareFileForWrite(psiElement.getContainingFile())) return;\n\n    if (psiElement instanceof XmlToken) {\n      final IElementType tokenType = ((XmlToken)psiElement).getTokenType();\n      if (tokenType != XmlTokenType.XML_NAME) {\n        if (tokenType == XmlTokenType.XML_TAG_END) {\n          psiElement = psiElement.getPrevSibling();\n          if (psiElement == null) return;\n        }\n      }\n\n      PsiElement target = null;\n      final String text = psiElement.getText();\n      if (!myTargetName.equals(text)) {\n        target = psiElement;\n      }\n      else {\n        // we're in the other\n        PsiElement parent = psiElement.getParent();\n        if (parent instanceof PsiErrorElement) {\n          parent = parent.getParent();\n        }\n\n        if (parent instanceof XmlTag) {\n          if (myStart) {\n            target = XmlTagUtil.getStartTagNameElement((XmlTag)parent);\n          }\n          else {\n            target = XmlTagUtil.getEndTagNameElement((XmlTag)parent);\n            if (target == null) {\n              final PsiErrorElement errorElement = PsiTreeUtil.getChildOfType(parent, PsiErrorElement.class);\n              target = XmlWrongClosingTagNameInspection.findEndTagName(errorElement);\n            }\n          }\n        }\n      }\n\n      if (target != null) {\n        final Document document = PsiDocumentManager.getInstance(project).getDocument(file);\n        if (document != null) {\n          final TextRange textRange = target.getTextRange();\n          document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), myTargetName);\n        }\n      }\n\n    }\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void annotate(final PsiElement psiElement, final AnnotationHolder holder) {\n    if (psiElement instanceof XmlToken) {\n      final PsiElement parent = psiElement.getParent();\n      if (parent instanceof XmlTag) {\n        final XmlTag tag = (XmlTag)parent;\n        final XmlToken start = XmlTagUtil.getStartTagNameElement(tag);\n        XmlToken endTagName = XmlTagUtil.getEndTagNameElement(tag);\n        if (endTagName != null && !(tag instanceof HtmlTag) && !tag.getName().equals(endTagName.getText())) {\n          registerProblem(holder, tag, start, endTagName);\n        }\n        else if (endTagName == null && !(tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(tag.getName()))) {\n          final PsiErrorElement errorElement = PsiTreeUtil.getChildOfType(tag, PsiErrorElement.class);\n          endTagName = findEndTagName(errorElement);\n          if (endTagName != null) {\n            registerProblem(holder, tag, start, endTagName);\n          }\n        }\n      }\n    }\n  }","id":59269,"modified_method":"public void annotate(final PsiElement psiElement, final AnnotationHolder holder) {\n    if (psiElement instanceof XmlToken) {\n      final PsiElement parent = psiElement.getParent();\n      if (parent instanceof XmlTag) {\n        final XmlTag tag = (XmlTag)parent;\n        final XmlToken start = XmlTagUtil.getStartTagNameElement(tag);\n        XmlToken endTagName = XmlTagUtil.getEndTagNameElement(tag);\n        if (endTagName != null && !(tag instanceof HtmlTag) && !tag.getName().equals(endTagName.getText())) {\n          registerProblem(holder, tag, start, endTagName);\n        }\n        else if (endTagName == null && !(tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(tag.getName()))) {\n          final PsiErrorElement errorElement = PsiTreeUtil.getChildOfType(tag, PsiErrorElement.class);\n          endTagName = findEndTagName(errorElement);\n          if (endTagName != null) {\n            registerProblem(holder, tag, start, endTagName);\n          }\n        }\n      }\n      else if (parent instanceof PsiErrorElement) {\n        if (XmlTokenType.XML_NAME == ((XmlToken)psiElement).getTokenType()) {\n          final PsiFile psiFile = psiElement.getContainingFile();\n          if (psiFile != null && (HTMLLanguage.INSTANCE == psiFile.getViewProvider().getBaseLanguage() || HTMLLanguage.INSTANCE == parent.getLanguage())) {\n            final String message = XmlErrorMessages.message(\"xml.parsing.closing.tag.mathes.nothing\");\n            if (message.equals(((PsiErrorElement)parent).getErrorDescription())) {\n              final Annotation annotation = holder.createWarningAnnotation(parent, message);\n              annotation.registerFix(new RemoveExtraClosingTagIntentionAction());\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"58e119a1166fecaf1b3df793126de165047c7d3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n    public PsiElement resolve() {\n      XmlEntityDecl xmlEntityDecl = XmlEntityRefImpl.resolveEntity(\n        (XmlElement)myElement,\n        myElement.getLastChild().getText(),\n        myElement.getContainingFile()\n      );\n\n      if (xmlEntityDecl != null && !xmlEntityDecl.isPhysical()) {\n        PsiNamedElement element = XmlUtil.findRealNamedElement(xmlEntityDecl);\n        if (element != null) xmlEntityDecl = (XmlEntityDecl)element;\n      }\n      return xmlEntityDecl;\n    }","id":59270,"modified_method":"@Nullable\n    public PsiElement resolve() {\n      XmlEntityDecl xmlEntityDecl = XmlEntityRefImpl.resolveEntity(\n        (XmlElement)myElement,\n        (myElement instanceof  XmlEntityRef ? myElement.getLastChild():myElement).getText(),\n        myElement.getContainingFile()\n      );\n\n      if (xmlEntityDecl != null && !xmlEntityDecl.isPhysical()) {\n        PsiNamedElement element = XmlUtil.findRealNamedElement(xmlEntityDecl);\n        if (element != null) xmlEntityDecl = (XmlEntityDecl)element;\n      }\n      return xmlEntityDecl;\n    }","commit_id":"96c6b698969ee711e02cef95eae3070378405c3a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void test1() {\n    String s = \"doc.print(\\\"1\\\");\\n\" +\n               \"doc.print(\\\"2\\\");\";\n\n    String what2 = \"doc.print(\\\"1\\\")\";\n    String by2 = \"doc.write(\\\"1\\\")\";\n    String expected2 = \"doc.write(\\\"1\\\");\\n\" +\n                       \"doc.print(\\\"2\\\");\";\n\n    actualResult = replacer.testReplace(s, what2, by2, options, false, true);\n    assertEquals(expected2, actualResult);\n\n    String what1 = \"doc.print($var$)\";\n    String by1 = \"doc.write($var$)\";\n    String expected1 = \"doc.write(\\\"1\\\");\\n\" +\n                       \"doc.write(\\\"2\\\");\";\n\n    actualResult = replacer.testReplace(s, what1, by1, options, false, true);\n    assertEquals(expected1, actualResult);\n  }","id":59271,"modified_method":"public void test1() {\n    String s = \"doc.print(\\\"1\\\");\\n\" +\n               \"doc.print(\\\"2\\\");\";\n\n    String what2 = \"doc.print(\\\"1\\\");\";\n    String by2 = \"doc.write(\\\"1\\\");\";\n    String expected2 = \"doc.write(\\\"1\\\");\\n\" +\n                       \"doc.print(\\\"2\\\");\";\n\n    actualResult = replacer.testReplace(s, what2, by2, options, false, true);\n    assertEquals(expected2, actualResult);\n\n    String what1 = \"doc.print($var$);\";\n    String by1 = \"doc.write($var$);\";\n    String expected1 = \"doc.write(\\\"1\\\");\\n\" +\n                       \"doc.write(\\\"2\\\");\";\n\n    actualResult = replacer.testReplace(s, what1, by1, options, false, true);\n    assertEquals(expected1, actualResult);\n  }","commit_id":"665e9f94efaff04bc58827659a8002446311808f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void checkReplacementPattern(Project project, ReplaceOptions options) {\n    MatchOptions matchOptions = options.getMatchOptions();\n    FileType fileType = matchOptions.getFileType();\n    PsiElement[] elements = createPatternTree(matchOptions.getSearchPattern(), PatternTreeContext.File, fileType, project, false);\n\n    for (PsiElement element : elements) {\n      if (element.getLastChild() instanceof PsiErrorElement) {\n        throw new UnsupportedPatternException(SSRBundle.message(\"replacement.template.expression.not.supported\", fileType.getName()));\n      }\n    }\n  }","id":59272,"modified_method":"@Override\n  public void checkReplacementPattern(Project project, ReplaceOptions options) {\n    MatchOptions matchOptions = options.getMatchOptions();\n    FileType fileType = matchOptions.getFileType();\n    PsiElement[] elements = createPatternTree(matchOptions.getSearchPattern(), PatternTreeContext.File, fileType, project, false);\n\n    for (PsiElement element : elements) {\n      if (element instanceof JSExpressionStatement){\n        PsiElement lastChild = element.getLastChild();\n        if (!(lastChild instanceof LeafPsiElement && ((LeafPsiElement)lastChild).getElementType() == JSTokenTypes.SEMICOLON)) {\n          throw new UnsupportedPatternException(SSRBundle.message(\"replacement.template.expression.not.supported\", fileType.getName()));\n        }\n      }\n    }\n  }","commit_id":"665e9f94efaff04bc58827659a8002446311808f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCondition2() {\n    String s = \"function f() {\\n\" +\n               \"  if (a == 0) {\\n\" +\n               \"    doc.print(\\\"one\\\");\\n\" +\n               \"    doc.print(\\\"two\\\");\\n\" +\n               \"  }\\n\" +\n               \"  else {\\n\" +\n               \"    doc.print(\\\"not zero\\\");\\n\" +\n               \"  }\\n\" +\n               \"}\";\n    doTest(s, \"if ($condition$) $exp$\", 0, 1);\n    doTest(s, \"if ($condition$)\", 1, 1);\n    doTest(s, \"if ($condition$) {\\n\" +\n              \"  $exp$;\" +\n              \"}\", 0, 1);\n  }","id":59273,"modified_method":"public void testCondition2() {\n    String s = \"function f() {\\n\" +\n               \"  if (a == 0) {\\n\" +\n               \"    doc.print(\\\"one\\\");\\n\" +\n               \"    doc.print(\\\"two\\\");\\n\" +\n               \"  }\\n\" +\n               \"  else {\\n\" +\n               \"    doc.print(\\\"not zero\\\");\\n\" +\n               \"  }\\n\" +\n               \"}\";\n    doTest(s, \"if ($condition$) $exp$\", 0, 0);\n    doTest(s, \"if ($condition$)\", 1, 1);\n    doTest(s, \"if ($condition$) {\\n\" +\n              \"  $exp$;\" +\n              \"}\", 0, 0);\n    doTest(s, \"if ($condition$) {\\n\" +\n              \"  $exp1$;\\n\" +\n              \"  $exp2$;\\n\" +\n              \"}\", 1, 1);\n    /*doTest(s, \"if ('condition) {\\n\" +\n              \"  'exp*;\\n\" +\n              \"}\", 1, 1);*/\n  }","commit_id":"665e9f94efaff04bc58827659a8002446311808f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testLoop() {\n    String s = \"for (var i = 0; i < n ; i++) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"}\\n\" +\n               \"for each (var i in list) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"}\\n\" +\n               \"var i = 0;\\n\" +\n               \"while (i < n) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"  i++;\\n\" +\n               \"}\";\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++)\\n\" +\n              \"  $exp$;\", 1, 1);           doTest(s, \"for each(var $var$ in $list$){\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n\n    doTest(s, \"for(var $var$ = $start$; $endexp$; $incexp$) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n    doTest(s, \"while( $var$ < $end$) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 0, 1);\n    doTest(s, \"while($condition$)\", 1, 1);\n    doTest(s, \"while( $var$ < $end$) $exp$;\", 0, 1);\n    doTest(s, \"for each(var $var$ in $list$)\\n\" +\n              \"  $exp$;\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++)\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++) {\\n\" +\n              \"}\", 0, 1);\n  }","id":59274,"modified_method":"public void testLoop() {\n    String s = \"for (var i = 0; i < n ; i++) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"}\\n\" +\n               \"for each (var i in list) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"}\\n\" +\n               \"var i = 0;\\n\" +\n               \"while (i < n) {\\n\" +\n               \"  doc.print(i);\\n\" +\n               \"  i++;\\n\" +\n               \"}\";\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++)\\n\" +\n              \"  $exp$;\", 1, 1);\n    doTest(s, \"for each(var $var$ in $list$){\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n    doTest(s, \"for(var $var$ = $start$; $endexp$; $incexp$) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 1, 1);\n    doTest(s, \"while( $var$ < $end$) {\\n\" +\n              \"  $exp$;\\n\" +\n              \"}\", 0, 0);\n    doTest(s, \"while($condition$)\", 1, 1);\n    doTest(s, \"while( $var$ < $end$) $exp$;\", 0, 0);\n    doTest(s, \"for each(var $var$ in $list$)\\n\" +\n              \"  $exp$;\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++)\", 1, 1);\n    doTest(s, \"for (var $var$ = $start$; $var$ < $end$; $var$++) {\\n\" +\n              \"}\", 0, 0);\n  }","commit_id":"665e9f94efaff04bc58827659a8002446311808f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\r\n  public void run() {\r\n    // Start keep-alive timeout\r\n    if(context.mprop.num(MainProp.KEEPALIVE) > 0) {\r\n      timer.schedule(\r\n          new java.util.TimerTask() {\r\n            @Override\r\n            public void run() {\r\n              if(!authenticated) {\r\n                if(log != null) log.write(this, \"AUTHENTIFICATION TIMED OUT\");\r\n                quit();\r\n              }\r\n            }\r\n          }, context.mprop.num(MainProp.KEEPALIVE) * 1000L);\r\n    }\r\n    // initialize the session via cram-md5 authentication\r\n    try {\r\n      final String ts = Long.toString(System.nanoTime());\r\n      final byte[] address = socket.getInetAddress().getAddress();\r\n\r\n      // send {TIMESTAMP}0\r\n      out = PrintOutput.get(socket.getOutputStream());\r\n      out.print(ts);\r\n      send(true);\r\n\r\n      // evaluate login data\r\n      in = new BufferInput(socket.getInputStream());\r\n      // receive {USER}0{PASSWORD}0\r\n      final String us = in.readString();\r\n      final String pw = in.readString();\r\n      context.user = context.users.get(us);\r\n      running = context.user != null && md5(context.user.password + ts).equals(pw);\r\n\r\n      // write log information\r\n      if(running) {\r\n        log.write(this, \"LOGIN \" + context.user.name, OK);\r\n        // send {OK}\r\n        send(true);\r\n        server.unblock(address);\r\n        context.add(this);\r\n      } else {\r\n        if(!us.isEmpty()) log.write(this, ACCESS_DENIED + COLS + us);\r\n        new ClientDelayer(server.block(address), this, server).start();\r\n      }\r\n    } catch(final IOException ex) {\r\n      if(running) {\r\n        Util.stack(ex);\r\n        log.write(ex.getMessage());\r\n      }\r\n      return;\r\n    }\r\n    if(!running) return;\r\n    authenticated = true;\r\n\r\n    // authentication done, start command loop\r\n    ServerCmd sc = null;\r\n    String cmd = null;\r\n\r\n    try {\r\n      while(running) {\r\n        command = null;\r\n        try {\r\n          final int b = in.read();\r\n          if(b == -1) {\r\n            // end of stream: exit session\r\n            quit();\r\n            break;\r\n          }\r\n\r\n          last = System.currentTimeMillis();\r\n          perf.time();\r\n          sc = ServerCmd.get(b);\r\n          cmd = null;\r\n          if(sc == ServerCmd.CREATE) {\r\n            create();\r\n          } else if(sc == ServerCmd.ADD) {\r\n            add();\r\n          } else if(sc == ServerCmd.WATCH) {\r\n            watch();\r\n          } else if(sc == ServerCmd.UNWATCH) {\r\n            unwatch();\r\n          } else if(sc == ServerCmd.REPLACE) {\r\n            replace();\r\n          } else if(sc == ServerCmd.STORE) {\r\n            store();\r\n          } else if(sc != ServerCmd.COMMAND) {\r\n            query(sc);\r\n          } else {\r\n            // database command\r\n            cmd = new ByteList().add(b).add(in.readBytes()).toString();\r\n          }\r\n        } catch(final IOException ex) {\r\n          // this exception may be thrown if a session is stopped\r\n          quit();\r\n          break;\r\n        }\r\n        if(sc != ServerCmd.COMMAND) continue;\r\n\r\n        // parse input and create command instance\r\n        try {\r\n          command = new CommandParser(cmd, context).parseSingle();\r\n        } catch(final QueryException ex) {\r\n          // log invalid command\r\n          final String msg = ex.getMessage();\r\n          log.write(this, cmd, ERROR_C + msg);\r\n          // send 0 to mark end of potential result\r\n          out.write(0);\r\n          // send {INFO}0\r\n          out.writeString(msg);\r\n          // send 1 to mark error\r\n          send(false);\r\n          continue;\r\n        }\r\n\r\n        log.write(this, command.toString().replace('\\r', ' ').replace('\\n', ' '));\r\n\r\n        // execute command and send {RESULT}\r\n        boolean ok = true;\r\n        String info;\r\n        try {\r\n          // run command\r\n          command.execute(context, new EncodingOutput(out));\r\n          info = command.info();\r\n        } catch(final BaseXException ex) {\r\n          ok = false;\r\n          info = ex.getMessage();\r\n          if(info.startsWith(INTERRUPTED)) info = TIMEOUT_EXCEEDED;\r\n        }\r\n\r\n        // send 0 to mark end of result\r\n        out.write(0);\r\n        // send info\r\n        info(info, ok);\r\n\r\n        // stop console\r\n        if(command instanceof Exit) {\r\n          command = null;\r\n          quit();\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      log.write(this, sc == ServerCmd.COMMAND ? cmd : sc, ERROR_C + ex.getMessage());\r\n      Util.debug(ex);\r\n      command = null;\r\n      quit();\r\n    }\r\n    command = null;\r\n  }","id":59275,"modified_method":"@Override\r\n  public void run() {\r\n    // start authentication timeout\r\n    final int to = context.mprop.num(MainProp.AUTHTIMEOUT);\r\n    if(to > 0) {\r\n      auth.schedule(new TimerTask() {\r\n        @Override\r\n        public void run() {\r\n          quitAuth();\r\n        }\r\n      }, to * 1000L);\r\n    }\r\n\r\n    // initialize the session via cram-md5 authentication\r\n    try {\r\n      final String ts = Long.toString(System.nanoTime());\r\n      final byte[] address = socket.getInetAddress().getAddress();\r\n\r\n      // send {TIMESTAMP}0\r\n      out = PrintOutput.get(socket.getOutputStream());\r\n      out.print(ts);\r\n      send(true);\r\n\r\n      // evaluate login data\r\n      in = new BufferInput(socket.getInputStream());\r\n      // receive {USER}0{PASSWORD}0\r\n      final String us = in.readString();\r\n      final String pw = in.readString();\r\n      context.user = context.users.get(us);\r\n      running = context.user != null && md5(context.user.password + ts).equals(pw);\r\n\r\n      // write log information\r\n      if(running) {\r\n        log.write(this, \"LOGIN \" + context.user.name, OK);\r\n        // send {OK}\r\n        send(true);\r\n        server.unblock(address);\r\n        context.add(this);\r\n      } else {\r\n        if(!us.isEmpty()) log.write(this, ACCESS_DENIED + COLS + us);\r\n        new ClientDelayer(server.block(address), this, server).start();\r\n      }\r\n    } catch(final IOException ex) {\r\n      if(running) {\r\n        Util.stack(ex);\r\n        log.write(ex.getMessage());\r\n        running = false;\r\n      }\r\n    }\r\n    auth.cancel();\r\n    if(!running) return;\r\n\r\n    // authentication done, start command loop\r\n    ServerCmd sc = null;\r\n    String cmd = null;\r\n\r\n    try {\r\n      while(running) {\r\n        command = null;\r\n        try {\r\n          final int b = in.read();\r\n          if(b == -1) {\r\n            // end of stream: exit session\r\n            quit();\r\n            break;\r\n          }\r\n\r\n          last = System.currentTimeMillis();\r\n          perf.time();\r\n          sc = ServerCmd.get(b);\r\n          cmd = null;\r\n          if(sc == ServerCmd.CREATE) {\r\n            create();\r\n          } else if(sc == ServerCmd.ADD) {\r\n            add();\r\n          } else if(sc == ServerCmd.WATCH) {\r\n            watch();\r\n          } else if(sc == ServerCmd.UNWATCH) {\r\n            unwatch();\r\n          } else if(sc == ServerCmd.REPLACE) {\r\n            replace();\r\n          } else if(sc == ServerCmd.STORE) {\r\n            store();\r\n          } else if(sc != ServerCmd.COMMAND) {\r\n            query(sc);\r\n          } else {\r\n            // database command\r\n            cmd = new ByteList().add(b).add(in.readBytes()).toString();\r\n          }\r\n        } catch(final IOException ex) {\r\n          // this exception may be thrown if a session is stopped\r\n          quit();\r\n          break;\r\n        }\r\n        if(sc != ServerCmd.COMMAND) continue;\r\n\r\n        // parse input and create command instance\r\n        try {\r\n          command = new CommandParser(cmd, context).parseSingle();\r\n        } catch(final QueryException ex) {\r\n          // log invalid command\r\n          final String msg = ex.getMessage();\r\n          log.write(this, cmd, ERROR_C + msg);\r\n          // send 0 to mark end of potential result\r\n          out.write(0);\r\n          // send {INFO}0\r\n          out.writeString(msg);\r\n          // send 1 to mark error\r\n          send(false);\r\n          continue;\r\n        }\r\n\r\n        log.write(this, command.toString().replace('\\r', ' ').replace('\\n', ' '));\r\n\r\n        // execute command and send {RESULT}\r\n        boolean ok = true;\r\n        String info;\r\n        try {\r\n          // run command\r\n          command.execute(context, new EncodingOutput(out));\r\n          info = command.info();\r\n        } catch(final BaseXException ex) {\r\n          ok = false;\r\n          info = ex.getMessage();\r\n          if(info.startsWith(INTERRUPTED)) info = TIMEOUT_EXCEEDED;\r\n        }\r\n\r\n        // send 0 to mark end of result\r\n        out.write(0);\r\n        // send info\r\n        info(info, ok);\r\n\r\n        // stop console\r\n        if(command instanceof Exit) {\r\n          command = null;\r\n          quit();\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      log.write(this, sc == ServerCmd.COMMAND ? cmd : sc, ERROR_C + ex.getMessage());\r\n      Util.debug(ex);\r\n      command = null;\r\n      quit();\r\n    }\r\n    command = null;\r\n  }","commit_id":"dd2bb7444c482e92084a6ae2eb1008fd83e3c498","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Processes the query iterator.\r\n   * @param sc server command\r\n   * @throws IOException I/O exception\r\n   */\r\n  private void query(final ServerCmd sc) throws IOException {\r\n    // iterator argument (query or identifier)\r\n    String arg = in.readString();\r\n\r\n    String err = null;\r\n    try {\r\n      final QueryListener qp;\r\n      if(sc == ServerCmd.QUERY) {\r\n        final String query = arg;\r\n        qp = new QueryListener(query, context);\r\n        arg = Integer.toString(id++);\r\n        queries.put(arg, qp);\r\n        // send {ID}0\r\n        out.writeString(arg);\r\n        // write log file\r\n        log.write(this, sc + \"(\" + arg + ')', query, OK, perf);\r\n      } else {\r\n        // find query process\r\n        qp = queries.get(arg);\r\n\r\n        // ID has already been removed\r\n        if(qp == null) {\r\n          if(sc != ServerCmd.CLOSE) throw new IOException(\"Unknown Query ID: \" + arg);\r\n        } else if(sc == ServerCmd.BIND) {\r\n          final String key = in.readString();\r\n          final String val = in.readString();\r\n          final String typ = in.readString();\r\n          qp.bind(key, val, typ);\r\n          log.write(this, sc + \"(\" + arg + ')', key, val, typ, OK, perf);\r\n        } else if(sc == ServerCmd.CONTEXT) {\r\n          final String val = in.readString();\r\n          final String typ = in.readString();\r\n          qp.context(val, typ);\r\n          log.write(this, sc + \"(\" + arg + ')', val, typ, OK, perf);\r\n        } else if(sc == ServerCmd.ITER) {\r\n          qp.execute(true, out, true, false);\r\n        } else if(sc == ServerCmd.EXEC) {\r\n          qp.execute(false, out, true, false);\r\n        } else if(sc == ServerCmd.FULL) {\r\n          qp.execute(true, out, true, true);\r\n        } else if(sc == ServerCmd.INFO) {\r\n          out.print(qp.info());\r\n        } else if(sc == ServerCmd.OPTIONS) {\r\n          out.print(qp.options());\r\n        } else if(sc == ServerCmd.UPDATING) {\r\n          out.print(Boolean.toString(qp.updating()));\r\n        } else if(sc == ServerCmd.CLOSE) {\r\n          queries.remove(arg);\r\n        } else if(sc == ServerCmd.NEXT) {\r\n          throw new Exception(\"Protocol for query iteration is out-of-dated.\");\r\n        }\r\n        // send 0 as end marker\r\n        out.write(0);\r\n      }\r\n      // send 0 as success flag\r\n      out.write(0);\r\n      // write log file (bind and execute have been logged before)\r\n      if(sc != ServerCmd.BIND && sc != ServerCmd.CONTEXT) {\r\n        log.write(this, sc + \"(\" + arg + ')', OK, perf);\r\n      }\r\n    } catch(final Exception ex) {\r\n      // log exception (static or runtime)\r\n      err = ex.getMessage();\r\n      log.write(this, sc + \"(\" + arg + ')', ERROR_C + err);\r\n      queries.remove(arg);\r\n    }\r\n    if(err != null) {\r\n      // send 0 as end marker, 1 as error flag, and {MSG}0\r\n      out.write(0);\r\n      out.write(1);\r\n      out.writeString(err);\r\n    }\r\n    out.flush();\r\n  }","id":59276,"modified_method":"/**\r\n   * Processes the query iterator.\r\n   * @param sc server command\r\n   * @throws IOException I/O exception\r\n   */\r\n  private void query(final ServerCmd sc) throws IOException {\r\n    // iterator argument (query or identifier)\r\n    String arg = in.readString();\r\n\r\n    String err = null;\r\n    try {\r\n      final QueryListener qp;\r\n      if(sc == ServerCmd.QUERY) {\r\n        final String query = arg;\r\n        qp = new QueryListener(query, context);\r\n        arg = Integer.toString(id++);\r\n        queries.put(arg, qp);\r\n        // send {ID}0\r\n        out.writeString(arg);\r\n        // write log file\r\n        log.write(this, sc + \"(\" + arg + ')', query, OK, perf);\r\n      } else {\r\n        // find query process\r\n        qp = queries.get(arg);\r\n\r\n        // ID has already been removed\r\n        if(qp == null) {\r\n          if(sc != ServerCmd.CLOSE) throw new IOException(\"Unknown Query ID: \" + arg);\r\n        } else if(sc == ServerCmd.BIND) {\r\n          final String key = in.readString();\r\n          final String val = in.readString();\r\n          final String typ = in.readString();\r\n          qp.bind(key, val, typ);\r\n          log.write(this, sc + \"(\" + arg + ')', key, val, typ, OK, perf);\r\n        } else if(sc == ServerCmd.CONTEXT) {\r\n          final String val = in.readString();\r\n          final String typ = in.readString();\r\n          qp.context(val, typ);\r\n          log.write(this, sc + \"(\" + arg + ')', val, typ, OK, perf);\r\n        } else if(sc == ServerCmd.ITER) {\r\n          qp.execute(true, out, true, false);\r\n        } else if(sc == ServerCmd.EXEC) {\r\n          qp.execute(false, out, true, false);\r\n        } else if(sc == ServerCmd.FULL) {\r\n          qp.execute(true, out, true, true);\r\n        } else if(sc == ServerCmd.INFO) {\r\n          out.print(qp.info());\r\n        } else if(sc == ServerCmd.OPTIONS) {\r\n          out.print(qp.options());\r\n        } else if(sc == ServerCmd.UPDATING) {\r\n          out.print(Boolean.toString(qp.updating()));\r\n        } else if(sc == ServerCmd.CLOSE) {\r\n          queries.remove(arg);\r\n        } else if(sc == ServerCmd.NEXT) {\r\n          throw new Exception(\"Protocol for query iteration is out-of-dated.\");\r\n        }\r\n        // send 0 as end marker\r\n        out.write(0);\r\n      }\r\n      // send 0 as success flag\r\n      out.write(0);\r\n      // write log file (bind and execute have been logged before)\r\n      if(sc != ServerCmd.BIND && sc != ServerCmd.CONTEXT) {\r\n        log.write(this, sc + \"(\" + arg + ')', OK, perf);\r\n      }\r\n    } catch(final Throwable ex) {\r\n      // log exception (static or runtime)\r\n      err = ex.getMessage();\r\n      log.write(this, sc + \"(\" + arg + ')', ERROR_C + err);\r\n      queries.remove(arg);\r\n    }\r\n    if(err != null) {\r\n      // send 0 as end marker, 1 as error flag, and {MSG}0\r\n      out.write(0);\r\n      out.write(1);\r\n      out.writeString(err);\r\n    }\r\n    out.flush();\r\n  }","commit_id":"dd2bb7444c482e92084a6ae2eb1008fd83e3c498","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Exits the session.\r\n   */\r\n  public synchronized void quit() {\r\n    if (!running && authenticated) return;\r\n\r\n    timer.cancel();\r\n    running = false;\r\n    if(log != null) log.write(this, \"LOGOUT \"\r\n        + (null != context.user ? context.user.name : \"\"), OK);\r\n\r\n    // wait until running command was stopped\r\n    if(command != null) {\r\n      command.stop();\r\n      while(command != null) Performance.sleep(50);\r\n    }\r\n    context.delete(this);\r\n\r\n    try {\r\n      if(null != context.data()) new Close().execute(context);\r\n      socket.close();\r\n      if(events) {\r\n        esocket.close();\r\n        // remove this session from all events in pool\r\n        for(final Sessions s : context.events.values()) s.remove(this);\r\n      }\r\n    } catch(final Exception ex) {\r\n      if(log != null) log.write(ex.getMessage());\r\n      Util.stack(ex);\r\n    }\r\n  }","id":59277,"modified_method":"/**\r\n   * Exits the session.\r\n   */\r\n  public synchronized void quit() {\r\n    if(!running) return;\r\n\r\n    running = false;\r\n    if(log != null) log.write(this, \"LOGOUT \" +\r\n        (null != context.user ? context.user.name : \"\"), OK);\r\n\r\n    // wait until running command was stopped\r\n    if(command != null) {\r\n      command.stop();\r\n      while(command != null) Performance.sleep(50);\r\n    }\r\n    context.delete(this);\r\n\r\n    try {\r\n      new Close().execute(context);\r\n      socket.close();\r\n      if(events) {\r\n        esocket.close();\r\n        // remove this session from all events in pool\r\n        for(final Sessions s : context.events.values()) s.remove(this);\r\n      }\r\n    } catch(final Throwable ex) {\r\n      if(log != null) log.write(this, ex.getMessage());\r\n      Util.stack(ex);\r\n    }\r\n  }","commit_id":"dd2bb7444c482e92084a6ae2eb1008fd83e3c498","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  protected void finish() {\n    // set some static properties\n    Prop.language = get(LANG);\n    Prop.langkeys = is(LANGKEYS);\n    Prop.debug = is(DEBUG);\n    final String ph = get(PROXYHOST);\n    final String pp = Integer.toString(num(PROXYPORT));\n    System.setProperty(\"http.proxyHost\", ph);\n    System.setProperty(\"http.proxyPort\", pp);\n    System.setProperty(\"https.proxyHost\", ph);\n    System.setProperty(\"https.proxyPort\", pp);\n    System.setProperty(\"http.nonProxyHosts\", get(NONPROXYHOSTS));\n  }","id":59278,"modified_method":"@Override\n  protected void finish() {\n    // set some static properties\n    Prop.language = get(LANG);\n    Prop.langkeys = is(LANGKEYS);\n    Prop.debug = is(DEBUG);\n    System.setProperty(\"http.proxyHost\", get(PROXYHOST));\n    System.setProperty(\"http.proxyPort\", Integer.toString(num(PROXYPORT)));\n    System.setProperty(\"http.nonProxyHosts\", get(NONPROXYHOSTS));\n  }","commit_id":"dd2bb7444c482e92084a6ae2eb1008fd83e3c498","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns the next number.\r\n   * @return number as int value\r\n   * @throws BaseXException database exception\r\n   */\r\n  public int num() throws BaseXException {\r\n    final int i = Token.toInt(string());\r\n    if(i == Integer.MIN_VALUE) usage();\r\n    return i;\r\n  }","id":59279,"modified_method":"/**\r\n   * Returns the next positive number.\r\n   * @return number as int value\r\n   * @throws BaseXException database exception\r\n   */\r\n  public int num() throws BaseXException {\r\n    final int i = Token.toInt(string());\r\n    if(i < 0) usage();\r\n    return i;\r\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor.\n   * @param ctx database context\n   * @param args command-line arguments\n   * @throws IOException I/O exception\n   */\n  public BaseXServer(final Context ctx, final String... args)\n      throws IOException {\n\n    super(args, ctx);\n    final int port = context.mprop.num(MainProp.SERVERPORT);\n    final String host = context.mprop.get(MainProp.SERVERHOST);\n    final InetAddress hostAddress = host.isEmpty() ? null :\n      InetAddress.getByName(host);\n    final int eport = context.mprop.num(MainProp.EVENTPORT);\n\n    if(service) {\n      start(port, args);\n      Util.outln(SERVERSTART);\n      Performance.sleep(1000);\n      return;\n    }\n\n    if(stopped) {\n      stop(port, eport);\n      Performance.sleep(1000);\n      return;\n    }\n\n    try {\n      // execute command-line arguments\n      if(commands != null) execute(commands);\n\n      log = new Log(context, quiet);\n      log.write(SERVERSTART);\n\n      socket = new ServerSocket();\n      socket.setReuseAddress(true);\n      socket.bind(new InetSocketAddress(hostAddress, port));\n      esocket = new ServerSocket();\n      esocket.setReuseAddress(true);\n      esocket.bind(new InetSocketAddress(hostAddress, eport));\n      stop = stopFile(port);\n\n      // guarantee correct shutdown...\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          log.write(SERVERSTOPPED);\n          log.close();\n          Util.outln(SERVERSTOPPED);\n        }\n      });\n\n      new Thread(this).start();\n      while(!running) Performance.sleep(100);\n\n      Util.outln(CONSOLE + (console ? CONSOLE2 : SERVERSTART), SERVERMODE);\n\n      if(console) {\n        console();\n        quit();\n      }\n    } catch(final IOException ex) {\n      if(log != null) log.write(ex.getMessage());\n      throw ex;\n    }\n  }","id":59280,"modified_method":"/**\n   * Constructor.\n   * @param ctx database context\n   * @param args command-line arguments\n   * @throws IOException I/O exception\n   */\n  public BaseXServer(final Context ctx, final String... args)\n      throws IOException {\n\n    super(args, ctx);\n    final MainProp mprop = context.mprop;\n    final int port = mprop.num(MainProp.SERVERPORT);\n    final int eport = mprop.num(MainProp.EVENTPORT);\n    // check if ports are distinct\n    if(port == eport) throw new BaseXException(SERVERPORTS, port);\n\n    final String host = mprop.get(MainProp.SERVERHOST);\n    final InetAddress addr = host.isEmpty() ? null :\n      InetAddress.getByName(host);\n\n    if(service) {\n      start(port, args);\n      Util.outln(SERVERSTART);\n      Performance.sleep(1000);\n      return;\n    }\n\n    if(stopped) {\n      stop(port, eport);\n      Util.outln(SERVERSTOPPED);\n      Performance.sleep(1000);\n      return;\n    }\n\n    try {\n      // execute command-line arguments\n      if(commands != null) execute(commands);\n\n      log = new Log(context, quiet);\n      log.write(SERVERSTART);\n\n      socket = new ServerSocket();\n      socket.setReuseAddress(true);\n      socket.bind(new InetSocketAddress(addr, port));\n      esocket = new ServerSocket();\n      esocket.setReuseAddress(true);\n      esocket.bind(new InetSocketAddress(addr, eport));\n      stop = stopFile(port);\n\n      // guarantee correct shutdown...\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          log.write(SERVERSTOPPED);\n          log.close();\n          Util.outln(SERVERSTOPPED);\n        }\n      });\n\n      new Thread(this).start();\n      while(!running) Performance.sleep(100);\n\n      Util.outln(CONSOLE + (console ? CONSOLE2 : SERVERSTART), SERVERMODE);\n\n      if(console) {\n        console();\n        quit();\n      }\n    } catch(final IOException ex) {\n      if(log != null) log.write(ex.getMessage());\n      throw ex;\n    }\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Stops the server.\n   * @param port server port\n   * @param eport event port\n   * @throws IOException I/O exception\n   */\n  public static void stop(final int port, final int eport) throws IOException {\n    final IOFile stop = stopFile(port);\n    try {\n      stop.write(Token.EMPTY);\n      new Socket(LOCALHOST, eport).close();\n      new Socket(LOCALHOST, port).close();\n      Performance.sleep(50);\n      Util.outln(SERVERSTOPPED);\n    } catch(final IOException ex) {\n      stop.delete();\n      throw ex;\n    }\n  }","id":59281,"modified_method":"/**\n   * Stops the server.\n   * @param port server port\n   * @param eport event port\n   * @throws IOException I/O exception\n   */\n  public static void stop(final int port, final int eport) throws IOException {\n    final IOFile stop = stopFile(port);\n    try {\n      stop.write(Token.EMPTY);\n      new Socket(LOCALHOST, eport).close();\n      new Socket(LOCALHOST, port).close();\n      // check if server was really stopped\n      while(ping(LOCALHOST, port)) Performance.sleep(50);\n      Performance.sleep(50);\n    } catch(final IOException ex) {\n      stop.delete();\n      throw ex;\n    }\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void run() {\n    events.start();\n    running = true;\n    while(running) {\n      try {\n        final Socket s = socket.accept();\n        if(stop.exists()) {\n          if(!stop.delete()) log.write(Util.info(DBNOTDELETED, stop));\n          quit();\n        } else {\n          // drop inactive connections\n          final long ka = context.mprop.num(MainProp.KEEPALIVE) * 1000L;\n          if(ka > 0) {\n            final long ms = System.currentTimeMillis();\n            for(final ClientListener cs : context.sessions) {\n              if(ms - cs.last > ka) cs.exit();\n            }\n          }\n          new ClientListener(s, context, log, this).start();\n        }\n      } catch(final IOException ex) {\n        // socket was closed..\n        break;\n      }\n    }\n  }","id":59282,"modified_method":"@Override\n  public void run() {\n    events.start();\n    running = true;\n    while(running) {\n      try {\n        final Socket s = socket.accept();\n        if(stop.exists()) {\n          if(!stop.delete()) log.write(Util.info(DBNOTDELETED, stop));\n          quit();\n        } else {\n          // drop inactive connections\n          final long ka = context.mprop.num(MainProp.KEEPALIVE) * 1000L;\n          if(ka > 0) {\n            final long ms = System.currentTimeMillis();\n            for(final ClientListener cs : context.sessions) {\n              if(ms - cs.last > ka) cs.quit();\n            }\n          }\n          new ClientListener(s, context, log, this).start();\n        }\n      } catch(final IOException ex) {\n        // socket was closed..\n        break;\n      }\n    }\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  protected void parseArguments(final String[] args) throws IOException {\n    final Args arg = new Args(args, this, SERVERINFO,\n        Util.info(CONSOLE, SERVERMODE));\n    boolean daemon = false;\n    while(arg.more()) {\n      if(arg.dash()) {\n        switch(arg.next()) {\n          case 'c': // send database commands\n            commands = arg.remaining();\n            break;\n          case 'd': // activate debug mode\n            context.mprop.set(MainProp.DEBUG, true);\n            break;\n          case 'D': // hidden flag: daemon mode\n            daemon = true;\n            break;\n          case 'e': // parse event port\n            context.mprop.set(MainProp.EVENTPORT, arg.num());\n            break;\n          case 'i': // activate interactive mode\n            console = true;\n            break;\n          case 'p': // parse server port\n            context.mprop.set(MainProp.SERVERPORT, arg.num());\n            break;\n          case 's': // set service flag\n            service = !daemon;\n            break;\n          case 'z': // suppress logging\n            quiet = true;\n            break;\n          default:\n            arg.usage();\n        }\n      } else {\n        if(arg.string().equalsIgnoreCase(\"stop\")) {\n          stopped = true;\n        } else {\n          arg.usage();\n        }\n      }\n    }\n\n    if(context.mprop.num(MainProp.SERVERPORT) ==\n       context.mprop.num(MainProp.EVENTPORT)) {\n      throw new BaseXException(SERVERPORTS);\n    }\n  }","id":59283,"modified_method":"@Override\n  protected void parseArguments(final String[] args) throws IOException {\n    final Args arg = new Args(args, this, SERVERINFO,\n        Util.info(CONSOLE, SERVERMODE));\n    boolean daemon = false;\n    while(arg.more()) {\n      if(arg.dash()) {\n        switch(arg.next()) {\n          case 'c': // send database commands\n            commands = arg.remaining();\n            break;\n          case 'd': // activate debug mode\n            context.mprop.set(MainProp.DEBUG, true);\n            break;\n          case 'D': // hidden flag: daemon mode\n            daemon = true;\n            break;\n          case 'e': // parse event port\n            context.mprop.set(MainProp.EVENTPORT, arg.num());\n            break;\n          case 'i': // activate interactive mode\n            console = true;\n            break;\n          case 'p': // parse server port\n            context.mprop.set(MainProp.SERVERPORT, arg.num());\n            break;\n          case 'S': // set service flag\n            service = !daemon;\n            break;\n          case 'z': // suppress logging\n            quiet = true;\n            break;\n          default:\n            arg.usage();\n        }\n      } else {\n        if(arg.string().equalsIgnoreCase(\"stop\")) {\n          stopped = true;\n        } else {\n          arg.usage();\n        }\n      }\n    }\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void quit() throws IOException {\n    if(!running) return;\n    running = false;\n    super.quit();\n\n    try {\n      // close interactive input if server was stopped by another process\n      if(console) System.in.close();\n      esocket.close();\n      socket.close();\n    } catch(final IOException ex) {\n      log.write(ex.getMessage());\n      Util.stack(ex);\n    }\n    console = false;\n    context.close();\n  }","id":59284,"modified_method":"@Override\n  public void quit() throws IOException {\n    if(!running) return;\n    running = false;\n    for(final ClientListener cs : context.sessions) cs.quit();\n    super.quit();\n    context.close();\n\n    try {\n      // close interactive input if server was stopped by another process\n      if(console) System.in.close();\n      esocket.close();\n      socket.close();\n    } catch(final IOException ex) {\n      log.write(ex.getMessage());\n      Util.stack(ex);\n    }\n    console = false;\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Stops the server of this instance.\n   * @throws IOException I/O exception\n   */\n  public void stop() throws IOException {\n    stop.write(Token.EMPTY);\n    new Socket(LOCALHOST, context.mprop.num(MainProp.EVENTPORT)).close();\n    final int port = context.mprop.num(MainProp.SERVERPORT);\n    new Socket(LOCALHOST, port).close();\n    Performance.sleep(50);\n  }","id":59285,"modified_method":"/**\n   * Stops the server of this instance.\n   * @throws IOException I/O exception\n   */\n  public void stop() throws IOException {\n    final int port = context.mprop.num(MainProp.SERVERPORT);\n    final int eport = context.mprop.num(MainProp.EVENTPORT);\n    stop(port, eport);\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void run() {\n    // loop until delay is exhausted, or until server is stopped\n    do Performance.sleep(1000); while(server.running && --delay > 0);\n\n    try {\n      // send negative flag\n      listener.send(false);\n    } catch(final IOException ex) {\n      // socket was closed..\n    }\n  }","id":59286,"modified_method":"@Override\n  public void run() {\n    // loop until delay is exhausted, or until server is stopped\n    while(server.running && --delay > 0) Performance.sleep(1000);\n\n    try {\n      // send negative flag\n      listener.send(false);\n    } catch(final IOException ex) {\n      // socket was closed..\n    }\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor.\n   * @param del delay\n   * @param cl client listener\n   * @param srv server instance\n   */\n  public ClientDelayer(final int del, final ClientListener cl,\n      final BaseXServer srv) {\n\n    delay = del;\n    server = srv;\n    listener = cl;\n    start();\n  }","id":59287,"modified_method":"/**\n   * Constructor.\n   * @param del delay\n   * @param cl client listener\n   * @param srv server instance\n   */\n  public ClientDelayer(final int del, final ClientListener cl,\n      final BaseXServer srv) {\n\n    delay = del;\n    server = srv;\n    listener = cl;\n    setDaemon(true);\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public void run() {\r\n    // initialize the session via cram-md5 authentication\r\n    try {\r\n      final String ts = Long.toString(System.nanoTime());\r\n      final byte[] address = socket.getInetAddress().getAddress();\r\n\r\n      // send {TIMESTAMP}0\r\n      out = PrintOutput.get(socket.getOutputStream());\r\n      out.print(ts);\r\n      send(true);\r\n\r\n      // evaluate login data\r\n      in = new BufferInput(socket.getInputStream());\r\n      // receive {USER}0{PASSWORD}0\r\n      final String us = in.readString();\r\n      final String pw = in.readString();\r\n      context.user = context.users.get(us);\r\n      running = context.user != null &&\r\n        md5(string(context.user.password) + ts).equals(pw);\r\n\r\n      // write log information\r\n      if(running) {\r\n        log.write(this, \"LOGIN \" + context.user.name, OK);\r\n        // send {OK}\r\n        send(true);\r\n        server.unblock(address);\r\n        context.add(this);\r\n      } else if(!us.isEmpty()) {\r\n        log.write(this, SERVERDENIED + COLS + us);\r\n        // temporarily block client\r\n        new ClientDelayer(server.block(address), this, server);\r\n      }\r\n    } catch(final IOException ex) {\r\n      Util.stack(ex);\r\n      log.write(ex.getMessage());\r\n    }\r\n\r\n    // authentification done, start command loop\r\n    ServerCmd sc = null;\r\n    String cmd = null;\r\n\r\n    try {\r\n      while(running) {\r\n        try {\r\n          final int b = in.read();\r\n          if(b == -1) {\r\n            // end of stream: exit session\r\n            exit();\r\n            break;\r\n          }\r\n\r\n          last = System.currentTimeMillis();\r\n          perf.getTime();\r\n          sc = get(b);\r\n          cmd = null;\r\n          if(sc == CREATE) {\r\n            create();\r\n          } else if(sc == ADD) {\r\n            add();\r\n          } else if(sc == WATCH) {\r\n            watch();\r\n          } else if(sc == UNWATCH) {\r\n            unwatch();\r\n          } else if(sc == REPLACE) {\r\n            replace();\r\n          } else if(sc == STORE) {\r\n            store();\r\n          } else if(sc != COMMAND) {\r\n            query(sc);\r\n          } else {\r\n            // database command\r\n            cmd = new ByteList().add(b).add(in.readBytes()).toString();\r\n          }\r\n        } catch(final IOException ex) {\r\n          // this exception may be thrown if a session is stopped\r\n          exit();\r\n          break;\r\n        }\r\n        if(sc != COMMAND) continue;\r\n\r\n        // parse input and create command instance\r\n        command = null;\r\n        try {\r\n          command = new CommandParser(cmd, context).parseSingle();\r\n        } catch(final QueryException ex) {\r\n          // log invalid command\r\n          final String msg = ex.getMessage();\r\n          log.write(this, cmd, INFOERROR + msg);\r\n          // send 0 to mark end of potential result\r\n          out.write(0);\r\n          // send {INFO}0\r\n          out.writeString(msg);\r\n          // send 1 to mark error\r\n          send(false);\r\n          continue;\r\n        }\r\n\r\n        // start timeout\r\n        command.startTimeout(context.mprop.num(MainProp.TIMEOUT));\r\n        log.write(this,\r\n            command.toString().replace('\\r', ' ').replace('\\n', ' '));\r\n\r\n        // execute command and send {RESULT}\r\n        boolean ok = true;\r\n        String info = null;\r\n        try {\r\n          command.execute(context, new EncodingOutput(out));\r\n          info = command.info();\r\n        } catch(final BaseXException ex) {\r\n          ok = false;\r\n          info = ex.getMessage();\r\n          if(info.startsWith(PROGERR)) info = SERVERTIMEOUT;\r\n        }\r\n        // stop timeout\r\n        command.stopTimeout();\r\n\r\n        // send 0 to mark end of result\r\n        out.write(0);\r\n        // send info\r\n        info(info, ok);\r\n\r\n        // stop console\r\n        if(command instanceof Exit) {\r\n          exit();\r\n          break;\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      log.write(this, sc == COMMAND ? cmd : sc, INFOERROR + ex.getMessage());\r\n      Util.stack(ex);\r\n      exit();\r\n    }\r\n  }","id":59288,"modified_method":"@Override\r\n  public void run() {\r\n    // initialize the session via cram-md5 authentication\r\n    try {\r\n      final String ts = Long.toString(System.nanoTime());\r\n      final byte[] address = socket.getInetAddress().getAddress();\r\n\r\n      // send {TIMESTAMP}0\r\n      out = PrintOutput.get(socket.getOutputStream());\r\n      out.print(ts);\r\n      send(true);\r\n\r\n      // evaluate login data\r\n      in = new BufferInput(socket.getInputStream());\r\n      // receive {USER}0{PASSWORD}0\r\n      final String us = in.readString();\r\n      final String pw = in.readString();\r\n      context.user = context.users.get(us);\r\n      running = context.user != null &&\r\n        md5(string(context.user.password) + ts).equals(pw);\r\n\r\n      // write log information\r\n      if(running) {\r\n        log.write(this, \"LOGIN \" + context.user.name, OK);\r\n        // send {OK}\r\n        send(true);\r\n        server.unblock(address);\r\n        context.add(this);\r\n      } else {\r\n        if(!us.isEmpty()) log.write(this, SERVERDENIED + COLS + us);\r\n        new ClientDelayer(server.block(address), this, server).start();\r\n      }\r\n    } catch(final IOException ex) {\r\n      Util.stack(ex);\r\n      log.write(ex.getMessage());\r\n      return;\r\n    }\r\n    if(!running) return;\r\n\r\n    // authentification done, start command loop\r\n    ServerCmd sc = null;\r\n    String cmd = null;\r\n\r\n    try {\r\n      while(running) {\r\n        command = null;\r\n        try {\r\n          final int b = in.read();\r\n          if(b == -1) {\r\n            // end of stream: exit session\r\n            quit();\r\n            break;\r\n          }\r\n\r\n          last = System.currentTimeMillis();\r\n          perf.getTime();\r\n          sc = get(b);\r\n          cmd = null;\r\n          if(sc == CREATE) {\r\n            create();\r\n          } else if(sc == ADD) {\r\n            add();\r\n          } else if(sc == WATCH) {\r\n            watch();\r\n          } else if(sc == UNWATCH) {\r\n            unwatch();\r\n          } else if(sc == REPLACE) {\r\n            replace();\r\n          } else if(sc == STORE) {\r\n            store();\r\n          } else if(sc != COMMAND) {\r\n            query(sc);\r\n          } else {\r\n            // database command\r\n            cmd = new ByteList().add(b).add(in.readBytes()).toString();\r\n          }\r\n        } catch(final IOException ex) {\r\n          // this exception may be thrown if a session is stopped\r\n          quit();\r\n          break;\r\n        }\r\n        if(sc != COMMAND) continue;\r\n\r\n        // parse input and create command instance\r\n        try {\r\n          command = new CommandParser(cmd, context).parseSingle();\r\n        } catch(final QueryException ex) {\r\n          // log invalid command\r\n          final String msg = ex.getMessage();\r\n          log.write(this, cmd, INFOERROR + msg);\r\n          // send 0 to mark end of potential result\r\n          out.write(0);\r\n          // send {INFO}0\r\n          out.writeString(msg);\r\n          // send 1 to mark error\r\n          send(false);\r\n          continue;\r\n        }\r\n\r\n        // start timeout\r\n        command.startTimeout(context.mprop.num(MainProp.TIMEOUT));\r\n        log.write(this,\r\n            command.toString().replace('\\r', ' ').replace('\\n', ' '));\r\n\r\n        // execute command and send {RESULT}\r\n        boolean ok = true;\r\n        String info = null;\r\n        try {\r\n          command.execute(context, new EncodingOutput(out));\r\n          info = command.info();\r\n        } catch(final BaseXException ex) {\r\n          ok = false;\r\n          info = ex.getMessage();\r\n          if(info.startsWith(PROGERR)) info = SERVERTIMEOUT;\r\n        }\r\n        // stop timeout\r\n        command.stopTimeout();\r\n\r\n        // send 0 to mark end of result\r\n        out.write(0);\r\n        // send info\r\n        info(info, ok);\r\n\r\n        // stop console\r\n        if(command instanceof Exit) {\r\n          command = null;\r\n          quit();\r\n        }\r\n      }\r\n    } catch(final IOException ex) {\r\n      log.write(this, sc == COMMAND ? cmd : sc, INFOERROR + ex.getMessage());\r\n      Util.debug(ex);\r\n      command = null;\r\n      quit();\r\n    }\r\n    command = null;\r\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Exits the session.\r\n   */\r\n  public synchronized void exit() {\r\n    running = false;\r\n    log.write(this, \"LOGOUT \" + context.user.name, OK);\r\n    try {\r\n      // remove this session from all events in pool\r\n      if(events) {\r\n        esocket.close();\r\n        for(final Sessions s : context.events.values()) s.remove(this);\r\n      }\r\n      new Close().execute(context);\r\n      if(command != null) command.stop();\r\n      context.delete(this);\r\n      socket.close();\r\n    } catch(final Exception ex) {\r\n      log.write(ex.getMessage());\r\n      Util.stack(ex);\r\n    }\r\n  }","id":59289,"modified_method":"/**\r\n   * Exits the session.\r\n   */\r\n  public synchronized void quit() {\r\n    running = false;\r\n    // wait until running command was stopped\r\n    if(command != null) {\r\n      command.stop();\r\n      while(command != null) Performance.sleep(50);\r\n    }\r\n    log.write(this, \"LOGOUT \" + context.user.name, OK);\r\n    context.delete(this);\r\n\r\n    try {\r\n      new Close().execute(context);\r\n      socket.close();\r\n      if(events) {\r\n        esocket.close();\r\n        // remove this session from all events in pool\r\n        for(final Sessions s : context.events.values()) s.remove(this);\r\n      }\r\n    } catch(final Exception ex) {\r\n      log.write(ex.getMessage());\r\n      Util.stack(ex);\r\n    }\r\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Closes the database context.\n   */\n  public synchronized void close() {\n    while(sessions.size() > 0) sessions.get(0).exit();\n    datas.close();\n  }","id":59290,"modified_method":"/**\n   * Closes the database context.\n   */\n  public synchronized void close() {\n    while(sessions.size() > 0) sessions.get(0).quit();\n    datas.close();\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  protected boolean run(final String user, final String db) {\r\n    // admin cannot be killed, and user cannot kill itself\r\n    if(user.equals(ADMIN)) return !info(USERADMIN);\r\n    if(user.equals(context.user.name)) return !info(USERKILLSELF, user);\r\n\r\n    // kill all sessions of the specified user\r\n    final Sessions ss = context.sessions;\r\n    for(int i = 0; i < ss.size(); ++i) {\r\n      if(user.equals(ss.get(i).user().name)) {\r\n        ss.get(i--).exit();\r\n        count++;\r\n      }\r\n    }\r\n    return true;\r\n  }","id":59291,"modified_method":"@Override\r\n  protected boolean run(final String user, final String db) {\r\n    // admin cannot be killed, and user cannot kill itself\r\n    if(user.equals(ADMIN)) return !info(USERADMIN);\r\n    if(user.equals(context.user.name)) return !info(USERKILLSELF, user);\r\n\r\n    // kill all sessions of the specified user\r\n    final Sessions ss = context.sessions;\r\n    for(int i = 0; i < ss.size(); ++i) {\r\n      if(user.equals(ss.get(i).user().name)) {\r\n        ss.get(i--).quit();\r\n        count++;\r\n      }\r\n    }\r\n    return true;\r\n  }","commit_id":"c41fc24754787d604e305e0dab6c3d1bb9fda226","url":"https://github.com/BaseXdb/basex"},{"original_method":"public static synchronized ServiceName registerResourceAdapterServiceNameWithSuffix(String raName, String suffix) {\n        ServiceName serviceName = RESOURCE_ADAPTER_SERVICE_PREFIX.append(raName + suffix);\n        if (resourceAdapterServiceNames.get(raName) == null) {\n            Set<ServiceName> serviceNames = new HashSet<ServiceName>(1);\n            serviceNames.add(serviceName);\n            resourceAdapterServiceNames.put(raName, serviceNames);\n        } else {\n            resourceAdapterServiceNames.get(raName).add(serviceName);\n        }\n        return serviceName;\n    }","id":59292,"modified_method":"public static synchronized void unregisterResourceAdapter(String raName, ServiceName serviceName) {\n        if (raName == null)\n            throw new IllegalArgumentException(\"RaName is null\");\n\n        if (serviceName == null)\n            throw new IllegalArgumentException(\"ServiceName is null\");\n\n        Set<ServiceName> entries = resourceAdapterServiceNames.get(raName);\n\n        if (entries != null) {\n            if (!entries.contains(serviceName))\n                throw new IllegalStateException(\"ServiceName '\" + serviceName.getCanonicalName() + \"' isn't registered\");\n\n            Integer identifier = Integer.valueOf(serviceName.getSimpleName().substring(serviceName.getSimpleName().lastIndexOf(\"_\") + 1));\n            resourceAdapterIdentifiers.get(raName).remove(identifier);\n\n            entries.remove(serviceName);\n\n            if (entries.size() == 0) {\n                resourceAdapterServiceNames.remove(raName);\n                resourceAdapterIdentifiers.remove(raName);\n            }\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static Set<ServiceName> getResourceAdapterXmlServiceName(String raName) {\n        return resourceAdapterXmlServiceNames.get(raName);\n\n    }","id":59293,"modified_method":"private static Integer getResourceAdapterIdentifier(String raName) {\n        Set<Integer> entries = resourceAdapterIdentifiers.get(raName);\n\n        if (entries == null) {\n            Integer identifier = Integer.valueOf(1);\n\n            entries = new HashSet<Integer>();\n            resourceAdapterIdentifiers.put(raName, entries);\n\n            entries.add(identifier);\n            return identifier;\n        }\n\n        Integer identifier = Integer.valueOf(1);\n        for (;;) {\n            if (!entries.contains(identifier)) {\n                entries.add(identifier);\n                return identifier;\n            }\n\n            identifier = Integer.valueOf(identifier.intValue() + 1);\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static Set<ServiceName> getResourceAdapteServiceName(String raName) {\n        return resourceAdapterServiceNames.get(raName);\n\n    }","id":59294,"modified_method":"public static synchronized Set<ServiceName> getResourceAdapterServiceNames(String raName) {\n        return resourceAdapterServiceNames.get(raName);\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static synchronized ServiceName registerResourceAdapterXmlServiceNameWithSuffix(String raName, String suffix) {\n        ServiceName serviceName = RESOURCE_ADAPTER_XML_SERVICE_PREFIX.append(raName + suffix);\n        if (resourceAdapterXmlServiceNames.get(raName) == null) {\n            Set<ServiceName> serviceNames = new HashSet<ServiceName>(1);\n            serviceNames.add(serviceName);\n            resourceAdapterXmlServiceNames.put(raName, serviceNames);\n        } else {\n            resourceAdapterXmlServiceNames.get(raName).add(serviceName);\n        }\n        return serviceName;\n    }","id":59295,"modified_method":"public static synchronized ServiceName registerResourceAdapter(String raName) {\n        if (raName == null)\n            throw new IllegalArgumentException(\"RaName is null\");\n\n        Integer identifier = getResourceAdapterIdentifier(raName);\n        ServiceName serviceName = RESOURCE_ADAPTER_SERVICE_PREFIX.append(raName + \"_\" + identifier);\n\n        Set<ServiceName> entries = resourceAdapterServiceNames.get(raName);\n\n        if (entries == null) {\n            entries = new HashSet<ServiceName>(1);\n            resourceAdapterServiceNames.put(raName, entries);\n        }\n\n        if (entries.contains(serviceName)) {\n            resourceAdapterIdentifiers.get(raName).remove(identifier);\n            throw new IllegalStateException(\"ServiceName '\" + serviceName.getCanonicalName() + \"' already registered\");\n        }\n\n        entries.add(serviceName);\n\n        return serviceName;\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"ServiceName getResourceAdapterServiceName() {\n        final Collection<ServiceName> serviceNames = ConnectorServices.getResourceAdapteServiceName(this.resourceAdapterName);\n        if (serviceNames == null || serviceNames.isEmpty()) {\n            throw new IllegalStateException(\"Cannot find any resource adapter service for resource adapter \" + this.resourceAdapterName);\n        }\n        return serviceNames.iterator().next();\n    }","id":59296,"modified_method":"ServiceName getResourceAdapterServiceName() {\n        final Collection<ServiceName> serviceNames = ConnectorServices.getResourceAdapterServiceNames(this.resourceAdapterName);\n        if (serviceNames == null || serviceNames.isEmpty()) {\n            throw new IllegalStateException(\"Cannot find any resource adapter service for resource adapter \" + this.resourceAdapterName);\n        }\n        return serviceNames.iterator().next();\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Process a deployment for a Connector. Will install a {@Code\n     * JBossService} for this ResourceAdapter.\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final ConnectorXmlDescriptor connectorXmlDescriptor = phaseContext.getDeploymentUnit().getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);\n        if(connectorXmlDescriptor == null) {\n            return;  // Skip non ra deployments\n        }\n\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final IronJacamarXmlDescriptor ironJacamarXmlDescriptor = deploymentUnit\n                .getAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY);\n\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null)\n            throw MESSAGES.failedToGetModuleAttachment(phaseContext.getDeploymentUnit());\n\n        final ClassLoader classLoader = module.getClassLoader();\n\n        Connector cmd = connectorXmlDescriptor != null ? connectorXmlDescriptor.getConnector() : null;\n        final IronJacamar ijmd = ironJacamarXmlDescriptor != null ? ironJacamarXmlDescriptor.getIronJacamar() : null;\n\n        try {\n            // Annotation merging\n            Annotations annotator = new Annotations();\n            Map<ResourceRoot, Index> indexes = AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);\n            for (Entry<ResourceRoot, Index> entry : indexes.entrySet()) {\n                AnnotationRepository repository = new JandexAnnotationRepositoryImpl(entry.getValue(), classLoader);\n                    cmd = annotator.merge(cmd, repository, classLoader);\n            }\n            // FIXME: when the connector is null the Iron Jacamar data is ignored\n            if (cmd != null) {\n                // Validate metadata\n                cmd.validate();\n\n                // Merge metadata\n                cmd = (new Merger()).mergeConnectorWithCommonIronJacamar(ijmd, cmd);\n            }\n\n            final ResourceAdapterDeploymentService raDeployementService = new ResourceAdapterDeploymentService(connectorXmlDescriptor, cmd, ijmd, module);\n\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n\n            // Create the service\n            serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName()), raDeployementService)\n                    .addDependency(ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raDeployementService.getMdrInjector())\n                    .addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE, ResourceAdapterRepository.class, raDeployementService.getRaRepositoryInjector())\n                    .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class, raDeployementService.getManagementRepositoryInjector())\n                    .addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE, ResourceAdapterDeploymentRegistry.class, raDeployementService.getRegistryInjector())\n                    .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class, raDeployementService.getTxIntegrationInjector())\n                    .addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class, raDeployementService.getConfigInjector())\n                    .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class, raDeployementService.getSubjectFactoryInjector())\n                    .addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, raDeployementService.getCcmInjector())\n                        .addDependency(NamingService.SERVICE_NAME)\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        } catch (Throwable t) {\n            throw new DeploymentUnitProcessingException(t);\n        }\n    }","id":59297,"modified_method":"/**\n     * Process a deployment for a Connector. Will install a {@Code\n     * JBossService} for this ResourceAdapter.\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final ConnectorXmlDescriptor connectorXmlDescriptor = phaseContext.getDeploymentUnit().getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);\n        if(connectorXmlDescriptor == null) {\n            return;  // Skip non ra deployments\n        }\n\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final IronJacamarXmlDescriptor ironJacamarXmlDescriptor = deploymentUnit\n                .getAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY);\n\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null)\n            throw MESSAGES.failedToGetModuleAttachment(phaseContext.getDeploymentUnit());\n\n        final ClassLoader classLoader = module.getClassLoader();\n\n        Connector cmd = connectorXmlDescriptor != null ? connectorXmlDescriptor.getConnector() : null;\n        final IronJacamar ijmd = ironJacamarXmlDescriptor != null ? ironJacamarXmlDescriptor.getIronJacamar() : null;\n\n        try {\n            // Annotation merging\n            Annotations annotator = new Annotations();\n            Map<ResourceRoot, Index> indexes = AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);\n            for (Entry<ResourceRoot, Index> entry : indexes.entrySet()) {\n                AnnotationRepository repository = new JandexAnnotationRepositoryImpl(entry.getValue(), classLoader);\n                    cmd = annotator.merge(cmd, repository, classLoader);\n            }\n            // FIXME: when the connector is null the Iron Jacamar data is ignored\n            if (cmd != null) {\n                // Validate metadata\n                cmd.validate();\n\n                // Merge metadata\n                cmd = (new Merger()).mergeConnectorWithCommonIronJacamar(ijmd, cmd);\n            }\n\n            final ServiceName deployerServiceName = ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName());\n            final ResourceAdapterDeploymentService raDeployementService = new ResourceAdapterDeploymentService(connectorXmlDescriptor, cmd, ijmd, module, null);\n\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n\n            // Create the service\n            serviceTarget.addService(deployerServiceName, raDeployementService)\n                    .addDependency(ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raDeployementService.getMdrInjector())\n                    .addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE, ResourceAdapterRepository.class, raDeployementService.getRaRepositoryInjector())\n                    .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class, raDeployementService.getManagementRepositoryInjector())\n                    .addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE, ResourceAdapterDeploymentRegistry.class, raDeployementService.getRegistryInjector())\n                    .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class, raDeployementService.getTxIntegrationInjector())\n                    .addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class, raDeployementService.getConfigInjector())\n                    .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class, raDeployementService.getSubjectFactoryInjector())\n                    .addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, raDeployementService.getCcmInjector())\n                        .addDependency(NamingService.SERVICE_NAME)\n                    .setInitialMode(Mode.ACTIVE)\n                    .install();\n        } catch (Throwable t) {\n            throw new DeploymentUnitProcessingException(t);\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Process a deployment for a Connector. Will install a {@Code\n     * JBossService} for this ResourceAdapter.\n     *\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     *\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ConnectorXmlDescriptor connectorXmlDescriptor = deploymentUnit\n                .getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);\n        if (connectorXmlDescriptor == null) {\n            return; // Skip non ra deployments\n        }\n\n        ResourceAdapters raxmls = null;\n        // getResourceAdaptersAttachment(deploymentUnit);\n        final ServiceController<?> raService = phaseContext.getServiceRegistry().getService(\n                ConnectorServices.RESOURCEADAPTERS_SERVICE);\n        if (raService != null)\n            raxmls = ((ResourceAdapters) raService.getValue());\n        if (raxmls == null)\n            return;\n\n        ROOT_LOGGER.tracef(\"processing Raxml\");\n        Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n\n        if (module == null)\n            throw MESSAGES.failedToGetModuleAttachment(deploymentUnit);\n\n        try {\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n\n            for (org.jboss.jca.common.api.metadata.resourceadapter.ResourceAdapter raxml : raxmls.getResourceAdapters()) {\n                if (deploymentUnit.getName().equals(raxml.getArchive())) {\n\n                    final String deployment;\n                    if (deploymentUnit.getName().lastIndexOf('.') == -1) {\n                        deployment = deploymentUnit.getName();\n                    } else {\n                        deployment = deploymentUnit.getName().substring(0, deploymentUnit.getName().lastIndexOf('.'));\n                    }\n                    String suffix = ConnectorServices.getNextValidSuffix(connectorXmlDescriptor.getDeploymentName());\n                    ResourceAdapterXmlDeploymentService service = new ResourceAdapterXmlDeploymentService(connectorXmlDescriptor,\n                            raxml, module, deployment, suffix);\n                    // Create the service\n                    ServiceName serviceName = ConnectorServices.registerResourceAdapterXmlServiceNameWithSuffix(\n                            connectorXmlDescriptor.getDeploymentName(), suffix);\n                    serviceTarget\n                            .addService(serviceName, service)\n                            .addDependency(ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, service.getMdrInjector())\n                            .addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE, ResourceAdapterRepository.class,\n                                    service.getRaRepositoryInjector())\n                            .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class,\n                                    service.getManagementRepositoryInjector())\n                            .addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,\n                                    ResourceAdapterDeploymentRegistry.class, service.getRegistryInjector())\n                            .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class,\n                                    service.getTxIntegrationInjector())\n                            .addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class,\n                                    service.getConfigInjector())\n                            .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class,\n                                    service.getSubjectFactoryInjector())\n                            .addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, service.getCcmInjector())\n                            .addDependency(NamingService.SERVICE_NAME)\n                            .addDependency(ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName()))\n                            .setInitialMode(Mode.ACTIVE).install();\n                }\n            }\n        } catch (Throwable t) {\n            throw new DeploymentUnitProcessingException(t);\n        }\n    }","id":59298,"modified_method":"/**\n     * Process a deployment for a Connector. Will install a {@Code\n     * JBossService} for this ResourceAdapter.\n     *\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     *\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ConnectorXmlDescriptor connectorXmlDescriptor = deploymentUnit\n                .getAttachment(ConnectorXmlDescriptor.ATTACHMENT_KEY);\n        if (connectorXmlDescriptor == null) {\n            return; // Skip non ra deployments\n        }\n\n        ResourceAdapters raxmls = null;\n        // getResourceAdaptersAttachment(deploymentUnit);\n        final ServiceController<?> raService = phaseContext.getServiceRegistry().getService(\n                ConnectorServices.RESOURCEADAPTERS_SERVICE);\n        if (raService != null)\n            raxmls = ((ResourceAdapters) raService.getValue());\n        if (raxmls == null)\n            return;\n\n        ROOT_LOGGER.tracef(\"processing Raxml\");\n        Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n\n        if (module == null)\n            throw MESSAGES.failedToGetModuleAttachment(deploymentUnit);\n\n        try {\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n\n            for (org.jboss.jca.common.api.metadata.resourceadapter.ResourceAdapter raxml : raxmls.getResourceAdapters()) {\n                if (deploymentUnit.getName().equals(raxml.getArchive())) {\n\n                    final String deployment;\n                    if (deploymentUnit.getName().lastIndexOf('.') == -1) {\n                        deployment = deploymentUnit.getName();\n                    } else {\n                        deployment = deploymentUnit.getName().substring(0, deploymentUnit.getName().lastIndexOf('.'));\n                    }\n\n                    // Create the service\n                    String raName = connectorXmlDescriptor.getDeploymentName();\n                    ServiceName serviceName = ConnectorServices.registerDeployment(raName);\n\n                    ResourceAdapterXmlDeploymentService service = new ResourceAdapterXmlDeploymentService(connectorXmlDescriptor,\n                        raxml, module, deployment, serviceName);\n\n                    serviceTarget\n                            .addService(serviceName, service)\n                            .addDependency(ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, service.getMdrInjector())\n                            .addDependency(ConnectorServices.RA_REPOSISTORY_SERVICE, ResourceAdapterRepository.class,\n                                    service.getRaRepositoryInjector())\n                            .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class,\n                                    service.getManagementRepositoryInjector())\n                            .addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,\n                                    ResourceAdapterDeploymentRegistry.class, service.getRegistryInjector())\n                            .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class,\n                                    service.getTxIntegrationInjector())\n                            .addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class,\n                                    service.getConfigInjector())\n                            .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class,\n                                    service.getSubjectFactoryInjector())\n                            .addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, service.getCcmInjector())\n                            .addDependency(NamingService.SERVICE_NAME)\n                            .addDependency(ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(connectorXmlDescriptor.getDeploymentName()))\n                            .setInitialMode(Mode.ACTIVE).install();\n                }\n            }\n        } catch (Throwable t) {\n            throw new DeploymentUnitProcessingException(t);\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n\n        String pathname = \"file://RaActivator\" + deploymentName;\n\n        final ServiceContainer container = context.getController().getServiceContainer();\n        CommonDeployment deploymentMD;\n        try {\n            ResourceAdapterActivator activator = new ResourceAdapterActivator(container, new URL(pathname), deploymentName,\n                    new File(pathname), cl, cmd, ijmd);\n            activator.setConfiguration(getConfig().getValue());\n            // FIXME!!, this should probably be done by IJ and not the service\n            ClassLoader old = Thread.currentThread().getContextClassLoader();\n            try {\n               Thread.currentThread().setContextClassLoader(cl);\n               deploymentMD = activator.doDeploy();\n            } finally {\n               Thread.currentThread().setContextClassLoader(old);\n            }\n        } catch (Throwable e) {\n            throw MESSAGES.failedToStartRaDeployment(e, deploymentName);\n        }\n\n        value = new ResourceAdapterDeployment(deploymentMD);\n        registry.getValue().registerResourceAdapterDeployment(value);\n        managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n        String suffix = ConnectorServices.getNextValidSuffix(value.getDeployment().getDeploymentName());\n        ServiceName serviceName = ConnectorServices.registerResourceAdapterServiceNameWithSuffix(value.getDeployment().getDeploymentName(), suffix);\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Starting service %s\", serviceName);\n        context.getChildTarget()\n                .addService(serviceName,\n                        new ResourceAdapterService(value.getDeployment().getResourceAdapter())).setInitialMode(Mode.ACTIVE)\n                .install();\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Started service %s\", ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE);\n    }","id":59299,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n\n        String pathname = \"file://RaActivator\" + deploymentName;\n\n        final ServiceContainer container = context.getController().getServiceContainer();\n        CommonDeployment deploymentMD;\n        try {\n            ResourceAdapterActivator activator = new ResourceAdapterActivator(container, new URL(pathname), deploymentName,\n                    new File(pathname), cl, cmd, ijmd);\n            activator.setConfiguration(getConfig().getValue());\n            // FIXME!!, this should probably be done by IJ and not the service\n            ClassLoader old = Thread.currentThread().getContextClassLoader();\n            try {\n               Thread.currentThread().setContextClassLoader(cl);\n               deploymentMD = activator.doDeploy();\n            } finally {\n               Thread.currentThread().setContextClassLoader(old);\n            }\n        } catch (Throwable e) {\n            throw MESSAGES.failedToStartRaDeployment(e, deploymentName);\n        }\n\n        value = new ResourceAdapterDeployment(deploymentMD);\n        registry.getValue().registerResourceAdapterDeployment(value);\n        managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n\n        String raName = value.getDeployment().getDeploymentName();\n        ServiceName raServiceName = ConnectorServices.registerResourceAdapter(raName);\n\n        context.getChildTarget()\n                .addService(raServiceName,\n                    new ResourceAdapterService(raName, raServiceName,\n                                               value.getDeployment().getResourceAdapter())).setInitialMode(Mode.ACTIVE)\n                .install();\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Started service %s\", ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE);\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n        final ServiceContainer container = context.getController().getServiceContainer();\n        final URL url = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getUrl();\n        final String deploymentName = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getDeploymentName();\n        final File root = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getRoot();\n        CommonDeployment raDeployment = null;\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"DEPLOYMENT name = %s\",deploymentName);\n        final AS7RaDeployer raDeployer = new AS7RaDeployer(context.getChildTarget(), url, deploymentName, root, module.getClassLoader(), cmd,\n                ijmd);\n        raDeployer.setConfiguration(config.getValue());\n\n        try {\n            raDeployment = raDeployer.doDeploy();\n        } catch (Throwable t) {\n            throw MESSAGES.failedToStartRaDeployment(t, deploymentName);\n        }\n\n        value = new ResourceAdapterDeployment(raDeployment);\n        managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n\n        if (raDeployer.checkActivation(cmd, ijmd)) {\n            registry.getValue().registerResourceAdapterDeployment(value);\n            String suffix = ConnectorServices.getNextValidSuffix(value.getDeployment().getDeploymentName());\n            ServiceName serviceName = ConnectorServices.registerResourceAdapterServiceNameWithSuffix(value.getDeployment().getDeploymentName(), suffix);\n            DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Starting sevice %s\",serviceName);\n\n            context.getChildTarget()\n                    .addService(serviceName,\n                            new ResourceAdapterService(value.getDeployment().getResourceAdapter())).setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n\n    }","id":59300,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n        final ServiceContainer container = context.getController().getServiceContainer();\n        final URL url = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getUrl();\n        final String deploymentName = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getDeploymentName();\n        final File root = connectorXmlDescriptor == null ? null : connectorXmlDescriptor.getRoot();\n        CommonDeployment raDeployment = null;\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"DEPLOYMENT name = %s\",deploymentName);\n        final AS7RaDeployer raDeployer =\n            new AS7RaDeployer(context.getChildTarget(), url, deploymentName, root, module.getClassLoader(), cmd, ijmd);\n        raDeployer.setConfiguration(config.getValue());\n\n        try {\n            raDeployment = raDeployer.doDeploy();\n        } catch (Throwable t) {\n            throw MESSAGES.failedToStartRaDeployment(t, deploymentName);\n        }\n\n        value = new ResourceAdapterDeployment(raDeployment);\n\n        managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n        raName = value.getDeployment().getDeploymentName();\n\n        if (raDeployer.checkActivation(cmd, ijmd)) {\n            registry.getValue().registerResourceAdapterDeployment(value);\n\n            ServiceName raServiceName = ConnectorServices.registerResourceAdapter(raName);\n            context.getChildTarget()\n                    .addService(raServiceName,\n                                new ResourceAdapterService(raName, raServiceName, value.getDeployment().getResourceAdapter())).setInitialMode(Mode.ACTIVE)\n                    .install();\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public ResourceAdapterDeploymentService(final ConnectorXmlDescriptor connectorXmlDescriptor, final Connector cmd,\n            final IronJacamar ijmd, final Module module) {\n        this.connectorXmlDescriptor = connectorXmlDescriptor;\n        this.cmd = cmd;\n        this.ijmd = ijmd;\n        this.module = module;\n    }","id":59301,"modified_method":"public ResourceAdapterDeploymentService(final ConnectorXmlDescriptor connectorXmlDescriptor, final Connector cmd,\n                                            final IronJacamar ijmd, final Module module, final ServiceName deploymentServiceName) {\n        this.connectorXmlDescriptor = connectorXmlDescriptor;\n        this.cmd = cmd;\n        this.ijmd = ijmd;\n        this.module = module;\n        this.raName = null;\n        this.deploymentServiceName = deploymentServiceName;\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Stop\n     */\n    @Override\n    public void stop(StopContext context) {\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Stopping sevice %s\",\n                ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(this.value.getDeployment().getDeploymentName()));\n        managementRepository.getValue().getConnectors().remove(value.getDeployment().getConnector());\n        super.stop(context);\n    }","id":59302,"modified_method":"/**\n     * Stop\n     */\n    @Override\n    public void stop(StopContext context) {\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Stopping sevice %s\",\n            ConnectorServices.RESOURCE_ADAPTER_DEPLOYMENT_SERVICE_PREFIX.append(this.value.getDeployment().getDeploymentName()));\n\n        if (raName != null && deploymentServiceName != null) {\n            ConnectorServices.unregisterDeployment(raName, deploymentServiceName);\n        }\n\n        managementRepository.getValue().getConnectors().remove(value.getDeployment().getConnector());\n        super.stop(context);\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ROOT_LOGGER.debugf(\"started ResourceAdapterService %s\", context.getController().getName());\n\n    }","id":59303,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ROOT_LOGGER.debugf(\"Started ResourceAdapterService %s\", serviceName);\n\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/** create an instance **/\n    public ResourceAdapterService(ResourceAdapter value) {\n        super();\n        this.value = value;\n\n    }","id":59304,"modified_method":"/** create an instance **/\n    public ResourceAdapterService(String raName, ServiceName serviceName, ResourceAdapter value) {\n        super();\n        this.raName = raName;\n        this.serviceName = serviceName;\n        this.value = value;\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void stop(StopContext context) {\n        ROOT_LOGGER.debugf(\"stopped ResourceAdapterService %s\", context.getController().getName());\n\n    }","id":59305,"modified_method":"@Override\n    public void stop(StopContext context) {\n        ROOT_LOGGER.debugf(\"Stopped ResourceAdapterService %s\", serviceName);\n\n        if (raName != null && serviceName != null) {\n            ConnectorServices.unregisterResourceAdapter(raName, serviceName);\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public ResourceAdapterXmlDeploymentService(ConnectorXmlDescriptor connectorXmlDescriptor, ResourceAdapter raxml,\n            Module module, final String deployment, final String serviceSuffix) {\n        this.connectorXmlDescriptor = connectorXmlDescriptor;\n        this.raxml = raxml;\n        this.module = module;\n        this.deployment = deployment;\n        this.serviceSuffix = serviceSuffix;\n    }","id":59306,"modified_method":"public ResourceAdapterXmlDeploymentService(ConnectorXmlDescriptor connectorXmlDescriptor, ResourceAdapter raxml,\n                                               Module module, final String deployment, final ServiceName deploymentServiceName) {\n        this.connectorXmlDescriptor = connectorXmlDescriptor;\n        this.raxml = raxml;\n        this.module = module;\n        this.deployment = deployment;\n        this.raName = raxml.getArchive().substring(0, raxml.getArchive().indexOf(\".rar\"));\n        this.deploymentServiceName = deploymentServiceName;\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Stop\n     */\n    @Override\n    public void stop(StopContext context) {\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Stopping service %s\",\n                ConnectorServices.RESOURCE_ADAPTER_XML_SERVICE_PREFIX.append(this.value.getDeployment().getDeploymentName()));\n        managementRepository.getValue().getConnectors().remove(value.getDeployment().getConnector());\n        super.stop(context);\n    }","id":59307,"modified_method":"/**\n     * Stop\n     */\n    @Override\n    public void stop(StopContext context) {\n        DEPLOYMENT_CONNECTOR_LOGGER.debugf(\"Stopping service %s\",\n            ConnectorServices.RESOURCE_ADAPTER_SERVICE_PREFIX.append(this.value.getDeployment().getDeploymentName()));\n\n        if (raName != null && deploymentServiceName != null) {\n            ConnectorServices.unregisterDeployment(raName, deploymentServiceName);\n        }\n\n        managementRepository.getValue().getConnectors().remove(value.getDeployment().getConnector());\n        super.stop(context);\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * create an instance *\n     */\n\n    @Override\n    public void start(StartContext context) throws StartException {\n        try {\n\n            String archive = raxml.getArchive();\n\n            Connector cmd = mdr.getValue().getResourceAdapter(deployment);\n            IronJacamar ijmd = mdr.getValue().getIronJacamar(deployment);\n            File root = mdr.getValue().getRoot(deployment);\n\n            cmd = (new Merger()).mergeConnectorWithCommonIronJacamar(raxml, cmd);\n\n            String deploymentName = archive.substring(0, archive.indexOf(\".rar\")) ;\n\n            final ServiceContainer container = context.getController().getServiceContainer();\n            final AS7RaXmlDeployer raDeployer = new AS7RaXmlDeployer(context.getChildTarget(), connectorXmlDescriptor.getUrl(),\n                    deploymentName + serviceSuffix, root, module.getClassLoader(), cmd, raxml, ijmd);\n\n            raDeployer.setConfiguration(config.getValue());\n\n            CommonDeployment raxmlDeployment = null;\n            try {\n                raxmlDeployment = raDeployer.doDeploy();\n            } catch (Throwable t) {\n                throw MESSAGES.failedToStartRaDeployment(t, deploymentName);\n            }\n\n            value = new ResourceAdapterDeployment(raxmlDeployment);\n            managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n\n            registry.getValue().registerResourceAdapterDeployment(value);\n            ServiceName serviceName = ConnectorServices.registerResourceAdapterServiceNameWithSuffix(deploymentName, serviceSuffix);\n            DEPLOYMENT_CONNECTOR_LOGGER.startingService(serviceName);\n            context.getChildTarget()\n                .addService(serviceName,\n                            new ResourceAdapterService(value.getDeployment().getResourceAdapter())).setInitialMode(ServiceController.Mode.ACTIVE)\n               .install();\n        } catch (Exception e) {\n            throw new StartException(e);\n        }\n    }","id":59308,"modified_method":"/**\n     * Start\n     */\n    @Override\n    public void start(StartContext context) throws StartException {\n        try {\n            Connector cmd = mdr.getValue().getResourceAdapter(deployment);\n            IronJacamar ijmd = mdr.getValue().getIronJacamar(deployment);\n            File root = mdr.getValue().getRoot(deployment);\n\n            cmd = (new Merger()).mergeConnectorWithCommonIronJacamar(raxml, cmd);\n\n            final ServiceContainer container = context.getController().getServiceContainer();\n            final AS7RaXmlDeployer raDeployer = new AS7RaXmlDeployer(context.getChildTarget(), connectorXmlDescriptor.getUrl(),\n                raName, root, module.getClassLoader(), cmd, raxml, ijmd);\n\n            raDeployer.setConfiguration(config.getValue());\n\n            CommonDeployment raxmlDeployment = null;\n            try {\n                raxmlDeployment = raDeployer.doDeploy();\n            } catch (Throwable t) {\n                throw MESSAGES.failedToStartRaDeployment(t, raName);\n            }\n\n            value = new ResourceAdapterDeployment(raxmlDeployment);\n            managementRepository.getValue().getConnectors().add(value.getDeployment().getConnector());\n\n            registry.getValue().registerResourceAdapterDeployment(value);\n\n            ServiceName raServiceName = ConnectorServices.registerResourceAdapter(raName);\n\n            context.getChildTarget()\n                .addService(raServiceName,\n                            new ResourceAdapterService(raName, raServiceName, value.getDeployment().getResourceAdapter())).setInitialMode(ServiceController.Mode.ACTIVE)\n               .install();\n        } catch (Exception e) {\n            throw new StartException(e);\n        }\n    }","commit_id":"cd6f17bb7604f04cdbe649c2106df1fc72c1c9ce","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Way combineWays(Collection<Way> ways) {\n\n        // prepare and clean the list of ways to combine\n        //\n        if (ways == null || ways.isEmpty())\n            return null;\n        ways.remove(null); // just in case -  remove all null ways from the collection\n        ways = new HashSet<Way>(ways); // remove duplicates\n\n        // try to build a new way which includes all the combined\n        // ways\n        //\n        NodeGraph graph = NodeGraph.createUndirectedGraphFromNodeWays(ways);\n        List<Node> path = graph.buildSpanningPath();\n        if (path == null) {\n            warnCombiningImpossible();\n            return null;\n        }\n        // check whether any ways have been reversed in the process\n        // and build the collection of tags used by the ways to combine\n        //\n        TagCollection wayTags = TagCollection.unionOfAllPrimitives(ways);\n\n        List<Way> reversedWays = new LinkedList<Way>();\n        List<Way> unreversedWays = new LinkedList<Way>();\n        for (Way w: ways) {\n            if ((path.indexOf(w.getNode(0)) + 1) == path.lastIndexOf(w.getNode(1))) {\n                unreversedWays.add(w);\n            } else {\n                reversedWays.add(w);\n            }\n        }\n        // reverse path if all ways have been reversed\n        if (unreversedWays.isEmpty()) {\n            Collections.reverse(path);\n            unreversedWays = reversedWays;\n            reversedWays = null;\n        }\n        if ((reversedWays != null) && !reversedWays.isEmpty()) {\n            if (!confirmChangeDirectionOfWays()) return null;\n            // filter out ways that have no direction-dependent tags\n            unreversedWays = ReverseWayTagCorrector.irreversibleWays(unreversedWays);\n            reversedWays = ReverseWayTagCorrector.irreversibleWays(reversedWays);\n            // reverse path if there are more reversed than unreversed ways with direction-dependent tags\n            if (reversedWays.size() > unreversedWays.size()) {\n                Collections.reverse(path);\n                List<Way> tempWays = unreversedWays;\n                unreversedWays = reversedWays;\n                reversedWays = tempWays;\n            }\n            // if there are still reversed ways with direction-dependent tags, reverse their tags\n            if (!reversedWays.isEmpty() && PROP_REVERSE_WAY.get()) {\n                List<Way> unreversedTagWays = new ArrayList<Way>(ways);\n                unreversedTagWays.removeAll(reversedWays);\n                ReverseWayTagCorrector reverseWayTagCorrector = new ReverseWayTagCorrector();\n                List<Way> reversedTagWays = new ArrayList<Way>();\n                Collection<Command> changePropertyCommands =  null;\n                for (Way w : reversedWays) {\n                    Way wnew = new Way(w);\n                    reversedTagWays.add(wnew);\n                    try {\n                        changePropertyCommands = reverseWayTagCorrector.execute(w, wnew);\n                    }\n                    catch(UserCancelException ex) {\n                        return null;\n                    }\n                }\n                if ((changePropertyCommands != null) && !changePropertyCommands.isEmpty()) {\n                    for (Command c : changePropertyCommands) {\n                        c.executeCommand();\n                    }\n                }\n                wayTags = TagCollection.unionOfAllPrimitives(reversedTagWays);\n                wayTags.add(TagCollection.unionOfAllPrimitives(unreversedTagWays));\n            }\n        }\n\n        // create the new way and apply the new node list\n        //\n        Way targetWay = getTargetWay(ways);\n        Way modifiedTargetWay = new Way(targetWay);\n        modifiedTargetWay.setNodes(path);\n\n        TagCollection completeWayTags = new TagCollection(wayTags);\n        combineTigerTags(completeWayTags);\n        normalizeTagCollectionBeforeEditing(completeWayTags, ways);\n        TagCollection tagsToEdit = new TagCollection(completeWayTags);\n        completeTagCollectionForEditing(tagsToEdit);\n\n        CombinePrimitiveResolverDialog dialog = CombinePrimitiveResolverDialog.getInstance();\n        dialog.getTagConflictResolverModel().populate(tagsToEdit, completeWayTags.getKeysWithMultipleValues());\n        dialog.setTargetPrimitive(targetWay);\n        Set<Relation> parentRelations = getParentRelations(ways);\n        dialog.getRelationMemberConflictResolverModel().populate(\n                parentRelations,\n                ways\n        );\n        dialog.prepareDefaultDecisions();\n\n        // resolve tag conflicts if necessary\n        //\n        if (!completeWayTags.isApplicableToPrimitive() || !parentRelations.isEmpty()) {\n            dialog.setVisible(true);\n            if (dialog.isCancelled())\n                return null;\n        }\n\n        LinkedList<Command> cmds = new LinkedList<Command>();\n        LinkedList<Way> deletedWays = new LinkedList<Way>(ways);\n        deletedWays.remove(targetWay);\n\n        cmds.add(new ChangeCommand(targetWay, modifiedTargetWay));\n        cmds.addAll(dialog.buildResolutionCommands());\n        cmds.add(new DeleteCommand(deletedWays));\n        final SequenceCommand sequenceCommand = new SequenceCommand(tr(\"Combine {0} ways\", ways.size()), cmds);\n        Main.main.undoRedo.add(sequenceCommand);\n\n        return targetWay;\n    }","id":59309,"modified_method":"public Way combineWays(Collection<Way> ways) {\n\n        // prepare and clean the list of ways to combine\n        //\n        if (ways == null || ways.isEmpty())\n            return null;\n        ways.remove(null); // just in case -  remove all null ways from the collection\n\n        // remove duplicates, preserving order\n        ways = new LinkedHashSet<Way>(ways);\n\n        // try to build a new way which includes all the combined\n        // ways\n        //\n        NodeGraph graph = NodeGraph.createUndirectedGraphFromNodeWays(ways);\n        List<Node> path = graph.buildSpanningPath();\n        if (path == null) {\n            warnCombiningImpossible();\n            return null;\n        }\n        // check whether any ways have been reversed in the process\n        // and build the collection of tags used by the ways to combine\n        //\n        TagCollection wayTags = TagCollection.unionOfAllPrimitives(ways);\n\n        List<Way> reversedWays = new LinkedList<Way>();\n        List<Way> unreversedWays = new LinkedList<Way>();\n        for (Way w: ways) {\n            if ((path.indexOf(w.getNode(0)) + 1) == path.lastIndexOf(w.getNode(1))) {\n                unreversedWays.add(w);\n            } else {\n                reversedWays.add(w);\n            }\n        }\n        // reverse path if all ways have been reversed\n        if (unreversedWays.isEmpty()) {\n            Collections.reverse(path);\n            unreversedWays = reversedWays;\n            reversedWays = null;\n        }\n        if ((reversedWays != null) && !reversedWays.isEmpty()) {\n            if (!confirmChangeDirectionOfWays()) return null;\n            // filter out ways that have no direction-dependent tags\n            unreversedWays = ReverseWayTagCorrector.irreversibleWays(unreversedWays);\n            reversedWays = ReverseWayTagCorrector.irreversibleWays(reversedWays);\n            // reverse path if there are more reversed than unreversed ways with direction-dependent tags\n            if (reversedWays.size() > unreversedWays.size()) {\n                Collections.reverse(path);\n                List<Way> tempWays = unreversedWays;\n                unreversedWays = reversedWays;\n                reversedWays = tempWays;\n            }\n            // if there are still reversed ways with direction-dependent tags, reverse their tags\n            if (!reversedWays.isEmpty() && PROP_REVERSE_WAY.get()) {\n                List<Way> unreversedTagWays = new ArrayList<Way>(ways);\n                unreversedTagWays.removeAll(reversedWays);\n                ReverseWayTagCorrector reverseWayTagCorrector = new ReverseWayTagCorrector();\n                List<Way> reversedTagWays = new ArrayList<Way>();\n                Collection<Command> changePropertyCommands =  null;\n                for (Way w : reversedWays) {\n                    Way wnew = new Way(w);\n                    reversedTagWays.add(wnew);\n                    try {\n                        changePropertyCommands = reverseWayTagCorrector.execute(w, wnew);\n                    }\n                    catch(UserCancelException ex) {\n                        return null;\n                    }\n                }\n                if ((changePropertyCommands != null) && !changePropertyCommands.isEmpty()) {\n                    for (Command c : changePropertyCommands) {\n                        c.executeCommand();\n                    }\n                }\n                wayTags = TagCollection.unionOfAllPrimitives(reversedTagWays);\n                wayTags.add(TagCollection.unionOfAllPrimitives(unreversedTagWays));\n            }\n        }\n\n        // create the new way and apply the new node list\n        //\n        Way targetWay = getTargetWay(ways);\n        Way modifiedTargetWay = new Way(targetWay);\n        modifiedTargetWay.setNodes(path);\n\n        TagCollection completeWayTags = new TagCollection(wayTags);\n        combineTigerTags(completeWayTags);\n        normalizeTagCollectionBeforeEditing(completeWayTags, ways);\n        TagCollection tagsToEdit = new TagCollection(completeWayTags);\n        completeTagCollectionForEditing(tagsToEdit);\n\n        CombinePrimitiveResolverDialog dialog = CombinePrimitiveResolverDialog.getInstance();\n        dialog.getTagConflictResolverModel().populate(tagsToEdit, completeWayTags.getKeysWithMultipleValues());\n        dialog.setTargetPrimitive(targetWay);\n        Set<Relation> parentRelations = getParentRelations(ways);\n        dialog.getRelationMemberConflictResolverModel().populate(\n                parentRelations,\n                ways\n        );\n        dialog.prepareDefaultDecisions();\n\n        // resolve tag conflicts if necessary\n        //\n        if (!completeWayTags.isApplicableToPrimitive() || !parentRelations.isEmpty()) {\n            dialog.setVisible(true);\n            if (dialog.isCancelled())\n                return null;\n        }\n\n        LinkedList<Command> cmds = new LinkedList<Command>();\n        LinkedList<Way> deletedWays = new LinkedList<Way>(ways);\n        deletedWays.remove(targetWay);\n\n        cmds.add(new ChangeCommand(targetWay, modifiedTargetWay));\n        cmds.addAll(dialog.buildResolutionCommands());\n        cmds.add(new DeleteCommand(deletedWays));\n        final SequenceCommand sequenceCommand = new SequenceCommand(tr(\"Combine {0} ways\", ways.size()), cmds);\n        Main.main.undoRedo.add(sequenceCommand);\n\n        return targetWay;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected Set<Node> getTerminalNodes() {\n            Set<Node> ret = new HashSet<Node>();\n            for (Node n: getNodes()) {\n                if (isTerminalNode(n)) {\n                    ret.add(n);\n                }\n            }\n            return ret;\n        }","id":59310,"modified_method":"protected Set<Node> getTerminalNodes() {\n            Set<Node> ret = new LinkedHashSet<Node>();\n            for (Node n: getNodes()) {\n                if (isTerminalNode(n)) {\n                    ret.add(n);\n                }\n            }\n            return ret;\n        }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"public NodeGraph() {\n            edges = new HashSet<NodePair>();\n        }","id":59311,"modified_method":"public NodeGraph() {\n            edges = new LinkedHashSet<NodePair>();\n        }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected void prepare() {\n            Set<NodePair> undirectedEdges = new HashSet<NodePair>();\n            successors = new HashMap<Node, List<NodePair>>();\n            predecessors = new HashMap<Node, List<NodePair>>();\n\n            for (NodePair pair: edges) {\n                if (!undirectedEdges.contains(pair) && ! undirectedEdges.contains(pair.swap())) {\n                    undirectedEdges.add(pair);\n                }\n                rememberSuccessor(pair);\n                rememberPredecessors(pair);\n            }\n            numUndirectedEges = undirectedEdges.size();\n        }","id":59312,"modified_method":"protected void prepare() {\n            Set<NodePair> undirectedEdges = new LinkedHashSet<NodePair>();\n            successors = new LinkedHashMap<Node, List<NodePair>>();\n            predecessors = new LinkedHashMap<Node, List<NodePair>>();\n\n            for (NodePair pair: edges) {\n                if (!undirectedEdges.contains(pair) && ! undirectedEdges.contains(pair.swap())) {\n                    undirectedEdges.add(pair);\n                }\n                rememberSuccessor(pair);\n                rememberPredecessors(pair);\n            }\n            numUndirectedEges = undirectedEdges.size();\n        }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected Set<Node> getNodes(Stack<NodePair> pairs) {\n            HashSet<Node> nodes = new HashSet<Node>();\n            for (NodePair pair: pairs) {\n                nodes.add(pair.getA());\n                nodes.add(pair.getB());\n            }\n            return nodes;\n        }","id":59313,"modified_method":"protected Set<Node> getNodes(Stack<NodePair> pairs) {\n            HashSet<Node> nodes = new LinkedHashSet<Node>();\n            for (NodePair pair: pairs) {\n                nodes.add(pair.getA());\n                nodes.add(pair.getB());\n            }\n            return nodes;\n        }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected Set<Node> getNodes() {\n            Set<Node> nodes = new HashSet<Node>();\n            for (NodePair pair: edges) {\n                nodes.add(pair.getA());\n                nodes.add(pair.getB());\n            }\n            return nodes;\n        }","id":59314,"modified_method":"protected Set<Node> getNodes() {\n            Set<Node> nodes = new LinkedHashSet<Node>();\n            for (NodePair pair: edges) {\n                nodes.add(pair.getA());\n                nodes.add(pair.getB());\n            }\n            return nodes;\n        }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Will join two overlapping areas\n     * @param Way First way/area\n     * @param Way Second way/area\n     * @return boolean Whether to display the \"no operation\" message\n     */\n    private boolean joinAreas(Way a, Way b) {\n        // Fix self-overlapping first or other errors\n        boolean same = a.equals(b);\n        boolean hadChanges = false;\n        if(!same) {\n            int i = 0;\n            if(checkForTagConflicts(a, b)) return true; // User aborted, so don't warn again\n            if(joinAreas(a, a)) {\n                ++i;\n            }\n            if(joinAreas(b, b)) {\n                ++i;\n            }\n            hadChanges = i > 0;\n            cmdsCount = i;\n        }\n\n        ArrayList<OsmPrimitive> nodes = addIntersections(a, b);\n        if(nodes.size() == 0) return hadChanges;\n        commitCommands(marktr(\"Added node on all intersections\"));\n\n        // Remove ways from all relations so ways can be combined/split quietly\n        ArrayList<RelationRole> relations = removeFromRelations(a);\n        if(!same) {\n            relations.addAll(removeFromRelations(b));\n        }\n\n        // Don't warn now, because it will really look corrupted\n        boolean warnAboutRelations = relations.size() > 0;\n\n        Collection<Way> allWays = splitWaysOnNodes(a, b, nodes);\n\n        // Find all nodes and inner ways save them to a list\n        Collection<Node> allNodes = getNodesFromWays(allWays);\n        Collection<Way> innerWays = findInnerWays(allWays, allNodes);\n\n        // Join outer ways\n        Way outerWay = joinOuterWays(allWays, innerWays);\n        if (outerWay == null)\n            return true;\n\n        // Fix Multipolygons if there are any\n        Collection<Way> newInnerWays = fixMultipolygons(innerWays, outerWay, same);\n\n        // Delete the remaining inner ways\n        if(innerWays != null && innerWays.size() > 0) {\n            cmds.add(DeleteCommand.delete(Main.map.mapView.getEditLayer(), innerWays, true));\n        }\n        commitCommands(marktr(\"Delete Ways that are not part of an inner multipolygon\"));\n\n        // We can attach our new multipolygon relation and pretend it has always been there\n        addOwnMultigonRelation(newInnerWays, outerWay, relations);\n        fixRelations(relations, outerWay);\n        commitCommands(marktr(\"Fix relations\"));\n\n        stripTags(newInnerWays);\n        makeCommitsOneAction(\n                same\n                ? marktr(\"Joined self-overlapping area\")\n                        : marktr(\"Joined overlapping areas\")\n        );\n\n        if(warnAboutRelations) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Some of the ways were part of relations that have been modified. Please verify no errors have been introduced.\"));\n        }\n\n        return true;\n    }","id":59315,"modified_method":"/**\n     * Will join two overlapping areas\n     * @param Way First way/area\n     * @param Way Second way/area\n     */\n    private JoinAreasResult joinAreas(Way a, Way b) {\n\n        JoinAreasResult result = new JoinAreasResult();\n        result.hasChanges = false;\n\n        // Fix self-overlapping first or other errors\n        boolean same = a.equals(b);\n        if(!same) {\n            int i = 0;\n\n            //join each area with itself, fixing self-crossings.\n            JoinAreasResult resultA = joinAreas(a, a);\n            JoinAreasResult resultB = joinAreas(b, b);\n\n            if (resultA.mergeSuccessful) {\n                a = resultA.outerWay;\n                ++i;\n            }\n            if(resultB.mergeSuccessful) {\n                b = resultB.outerWay;\n                ++i;\n            }\n\n            result.hasChanges = i > 0;\n            cmdsCount = i;\n        }\n\n        ArrayList<Node> nodes = addIntersections(a, b);\n\n        //no intersections, return.\n        if(nodes.size() == 0) return result;\n        commitCommands(marktr(\"Added node on all intersections\"));\n\n        // Remove ways from all relations so ways can be combined/split quietly\n        ArrayList<RelationRole> relations = removeFromRelations(a);\n        if(!same) {\n            relations.addAll(removeFromRelations(b));\n        }\n\n        // Don't warn now, because it will really look corrupted\n        boolean warnAboutRelations = relations.size() > 0;\n\n        ArrayList<Way> allWays = splitWaysOnNodes(a, b, nodes);\n\n        // Find inner ways save them to a list\n        ArrayList<WayInPath> outerWays = findOuterWays(allWays);\n        ArrayList<Way> innerWays = findInnerWays(allWays, outerWays);\n\n        // Join outer ways\n        Way outerWay = joinOuterWays(outerWays);\n\n        // Fix Multipolygons if there are any\n        List<Way> newInnerWays = fixMultipolygons(innerWays, outerWay, same);\n\n        // Delete the remaining inner ways\n        if(innerWays != null && innerWays.size() > 0) {\n            cmds.add(DeleteCommand.delete(Main.map.mapView.getEditLayer(), innerWays, true));\n        }\n        commitCommands(marktr(\"Delete Ways that are not part of an inner multipolygon\"));\n\n        // We can attach our new multipolygon relation and pretend it has always been there\n        addOwnMultigonRelation(newInnerWays, outerWay, relations);\n        fixRelations(relations, outerWay);\n        commitCommands(marktr(\"Fix relations\"));\n\n        stripTags(newInnerWays);\n\n        makeCommitsOneAction(\n                same\n                ? marktr(\"Joined self-overlapping area\")\n                        : marktr(\"Joined overlapping areas\")\n        );\n\n        if(warnAboutRelations) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Some of the ways were part of relations that have been modified. Please verify no errors have been introduced.\"));\n        }\n\n        result.mergeSuccessful = true;\n        result.outerWay = outerWay;\n        result.innerWays = newInnerWays;\n\n        return result;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * This is a hacky implementation to make use of the splitWayAction code and\n     * should be improved. SplitWayAction needs to expose its splitWay function though.\n     */\n    private Collection<Way> splitWaysOnNodes(Way a, Way b, Collection<OsmPrimitive> nodes) {\n        ArrayList<Way> ways = new ArrayList<Way>();\n        ways.add(a);\n        if(!a.equals(b)) {\n            ways.add(b);\n        }\n\n        List<OsmPrimitive> affected = new ArrayList<OsmPrimitive>();\n        for (Way way : ways) {\n            nodes.add(way);\n            Main.main.getCurrentDataSet().setSelected(nodes);\n            nodes.remove(way);\n            new SplitWayAction().actionPerformed(null);\n            cmdsCount++;\n            affected.addAll(Main.main.getCurrentDataSet().getSelectedWays());\n        }\n        return osmprim2way(affected);\n    }","id":59316,"modified_method":"/**\n     * This method splits ways into smaller parts, using the prepared nodes list as split points.\n     * Uses SplitWayAction.splitWay for the heavy lifting.\n     * @return list of split ways (or original ways if no splitting is done).\n     */\n    private ArrayList<Way> splitWaysOnNodes(Way a, Way b, Collection<Node> nodes) {\n\n        ArrayList<Way> result = new ArrayList<Way>();\n        List<Way> ways = new ArrayList<Way>();\n        ways.add(a);\n        ways.add(b);\n\n        for (Way way: ways) {\n            List<List<Node>> chunks = buildNodeChunks(way, nodes);\n            SplitWayResult split = SplitWayAction.splitWay(Main.map.mapView.getEditLayer(), way, chunks, Collections.<OsmPrimitive>emptyList());\n\n            //execute the command, we need the results\n            Main.main.undoRedo.add(split.getCommand());\n            cmdsCount ++;\n\n            result.add(split.getOriginalWay());\n            result.addAll(split.getNewWays());\n        }\n\n        return result;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Will find all intersection and add nodes there for two given ways\n     * @param Way First way\n     * @param Way Second way\n     * @return ArrayList<OsmPrimitive> List of new nodes\n     */\n    private ArrayList<OsmPrimitive> addIntersections(Way a, Way b) {\n        boolean same = a.equals(b);\n        int nodesSizeA = a.getNodesCount();\n        int nodesSizeB = b.getNodesCount();\n\n        // We use OsmPrimitive here instead of Node because we later need to split a way at these nodes.\n        // With OsmPrimitve we can simply add the way and don't have to loop over the nodes\n        ArrayList<OsmPrimitive> nodes = new ArrayList<OsmPrimitive>();\n        ArrayList<NodeToSegs> nodesA = new ArrayList<NodeToSegs>();\n        ArrayList<NodeToSegs> nodesB = new ArrayList<NodeToSegs>();\n\n        for (int i = (same ? 1 : 0); i < nodesSizeA - 1; i++) {\n            for (int j = (same ? i + 2 : 0); j < nodesSizeB - 1; j++) {\n                // Avoid re-adding nodes that already exist on (some) intersections\n                if(a.getNode(i).equals(b.getNode(j)) || a.getNode(i+1).equals(b.getNode(j)))   {\n                    nodes.add(b.getNode(j));\n                    continue;\n                } else\n                    if(a.getNode(i).equals(b.getNode(j+1)) || a.getNode(i+1).equals(b.getNode(j+1))) {\n                        nodes.add(b.getNode(j+1));\n                        continue;\n                    }\n                LatLon intersection = getLineLineIntersection(\n                        a.getNode(i)  .getEastNorth().east(), a.getNode(i)  .getEastNorth().north(),\n                        a.getNode(i+1).getEastNorth().east(), a.getNode(i+1).getEastNorth().north(),\n                        b.getNode(j)  .getEastNorth().east(), b.getNode(j)  .getEastNorth().north(),\n                        b.getNode(j+1).getEastNorth().east(), b.getNode(j+1).getEastNorth().north());\n                if(intersection == null) {\n                    continue;\n                }\n\n                // Create the node. Adding them to the ways must be delayed because we still loop over them\n                Node n = new Node(intersection);\n                cmds.add(new AddCommand(n));\n                nodes.add(n);\n                // The distance is needed to sort and add the nodes in direction of the way\n                nodesA.add(new NodeToSegs(i,  n, a.getNode(i).getCoor()));\n                if(same) {\n                    nodesA.add(new NodeToSegs(j,  n, a.getNode(j).getCoor()));\n                } else {\n                    nodesB.add(new NodeToSegs(j,  n, b.getNode(j).getCoor()));\n                }\n            }\n        }\n\n        addNodesToWay(a, nodesA);\n        if(!same) {\n            addNodesToWay(b, nodesB);\n        }\n\n        return nodes;\n    }","id":59317,"modified_method":"/**\n     * Will find all intersection and add nodes there for two given ways\n     * @param Way First way\n     * @param Way Second way\n     * @return ArrayList<OsmPrimitive> List of new nodes\n     */\n    private ArrayList<Node> addIntersections(Way a, Way b) {\n        boolean same = a.equals(b);\n        int nodesSizeA = a.getNodesCount();\n        int nodesSizeB = b.getNodesCount();\n\n        ArrayList<Node> nodes = new ArrayList<Node>();\n        ArrayList<NodeToSegs> nodesA = new ArrayList<NodeToSegs>();\n        ArrayList<NodeToSegs> nodesB = new ArrayList<NodeToSegs>();\n\n        for (int i = (same ? 1 : 0); i < nodesSizeA - 1; i++) {\n            for (int j = (same ? i + 2 : 0); j < nodesSizeB - 1; j++) {\n                // Avoid re-adding nodes that already exist on (some) intersections\n                if(a.getNode(i).equals(b.getNode(j)) || a.getNode(i+1).equals(b.getNode(j)))   {\n                    nodes.add(b.getNode(j));\n                    continue;\n                } else\n                    if(a.getNode(i).equals(b.getNode(j+1)) || a.getNode(i+1).equals(b.getNode(j+1))) {\n                        nodes.add(b.getNode(j+1));\n                        continue;\n                    }\n                LatLon intersection = getLineLineIntersection(\n                        a.getNode(i)  .getEastNorth().east(), a.getNode(i)  .getEastNorth().north(),\n                        a.getNode(i+1).getEastNorth().east(), a.getNode(i+1).getEastNorth().north(),\n                        b.getNode(j)  .getEastNorth().east(), b.getNode(j)  .getEastNorth().north(),\n                        b.getNode(j+1).getEastNorth().east(), b.getNode(j+1).getEastNorth().north());\n                if(intersection == null) {\n                    continue;\n                }\n\n                // Create the node. Adding them to the ways must be delayed because we still loop over them\n                Node n = new Node(intersection);\n                cmds.add(new AddCommand(n));\n                nodes.add(n);\n                // The distance is needed to sort and add the nodes in direction of the way\n                nodesA.add(new NodeToSegs(i,  n, a.getNode(i).getCoor()));\n                if(same) {\n                    nodesA.add(new NodeToSegs(j,  n, a.getNode(j).getCoor()));\n                } else {\n                    nodesB.add(new NodeToSegs(j,  n, b.getNode(j).getCoor()));\n                }\n            }\n        }\n\n        addNodesToWay(a, nodesA);\n        if(!same) {\n            addNodesToWay(b, nodesB);\n        }\n\n        return nodes;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Joins the two outer ways and deletes all short ways that can't be part of a multipolygon anyway\n     * @param Collection<OsmPrimitive> The list of all ways that belong to that multigon\n     * @param Collection<Way> The list of inner ways that belong to that multigon\n     * @return Way The newly created outer way\n     */\n    private Way joinOuterWays(Collection<Way> multigonWays, Collection<Way> innerWays) {\n        ArrayList<Way> join = new ArrayList<Way>();\n        for(Way w: multigonWays) {\n            // Skip inner ways\n            if(innerWays.contains(w)) {\n                continue;\n            }\n\n            if(w.getNodesCount() <= 2) {\n                cmds.add(new DeleteCommand(w));\n            } else {\n                join.add(w);\n            }\n        }\n\n        commitCommands(marktr(\"Join Areas: Remove Short Ways\"));\n        Way joinedWay = joinWays(join);\n        if (joinedWay != null)\n            return closeWay(joinedWay);\n        else\n            return null;\n    }","id":59318,"modified_method":"/**\n     * Finds all ways for a given list of Ways that form the outer hull.\n     * This works by starting with one node and traversing the multigon clockwise, always picking the leftmost path.\n     * Prerequisites - the ways must not intersect and have common end nodes where they meet.\n     * @param Collection<Way> A list of (splitted) ways that form a multigon\n     * @return Collection<Way> A list of ways that form the outer boundary of the multigon.\n     */\n    private static ArrayList<WayInPath> findOuterWays(Collection<Way> multigonWays) {\n\n        //find the node with minimum lat - it's guaranteed to be outer. (What about the south pole?)\n        Way bestWay = null;\n        Node topNode = null;\n        int topIndex = 0;\n        double minLat = Double.POSITIVE_INFINITY;\n\n        for(Way way: multigonWays) {\n            for (int pos = 0; pos < way.getNodesCount(); pos ++) {\n                Node node = way.getNode(pos);\n\n                if (node.getCoor().lat() < minLat) {\n                    minLat = node.getCoor().lat();\n                    bestWay = way;\n                    topNode = node;\n                    topIndex = pos;\n                }\n            }\n        }\n\n        //get two final nodes from best way to mark as starting point and orientation.\n        Node headNode = null;\n        Node prevNode = null;\n\n        if (topNode.equals(bestWay.firstNode()) || topNode.equals(bestWay.lastNode())) {\n            //node is in split point\n            headNode = topNode;\n            //make a fake node that is downwards from head node (smaller latitude). It will be a division point between paths.\n            prevNode = new Node(new LatLon(headNode.getCoor().lat() - 1000, headNode.getCoor().lon()));\n        } else {\n            //node is inside way - pick the clockwise going end.\n            Node prev = bestWay.getNode(topIndex - 1);\n            Node next = bestWay.getNode(topIndex + 1);\n\n            if (angleIsClockwise(prev, topNode, next)) {\n                headNode = bestWay.lastNode();\n                prevNode = bestWay.getNode(bestWay.getNodesCount() - 2);\n            }\n            else {\n                headNode = bestWay.firstNode();\n                prevNode = bestWay.getNode(1);\n            }\n        }\n\n        Set<Way> outerWays = new HashSet<Way>();\n        ArrayList<WayInPath> result = new ArrayList<WayInPath>();\n\n        //iterate till full circle is reached\n        while (true) {\n\n            bestWay = null;\n            Node bestWayNextNode = null;\n            boolean bestWayReverse = false;\n\n            for (Way way: multigonWays) {\n                boolean wayReverse;\n                Node nextNode;\n\n                if (way.firstNode().equals(headNode)) {\n                    //start adjacent to headNode\n                    nextNode = way.getNode(1);\n                    wayReverse = false;\n\n                    if (nextNode.equals(prevNode)) {\n                        //this is the path we came from - ignore it.\n                    } else if (bestWay == null || !isToTheRightSideOfLine(prevNode, headNode, bestWayNextNode, nextNode)) {\n                        //the new way is better\n                        bestWay = way;\n                        bestWayReverse = wayReverse;\n                        bestWayNextNode = nextNode;\n                    }\n                }\n\n                if (way.lastNode().equals(headNode)) {\n                    //end adjacent to headNode\n                    nextNode = way.getNode(way.getNodesCount() - 2);\n                    wayReverse = true;\n\n                    if (nextNode.equals(prevNode)) {\n                        //this is the path we came from - ignore it.\n                    } else if (bestWay == null || !isToTheRightSideOfLine(prevNode, headNode, bestWayNextNode, nextNode)) {\n                        //the new way is better\n                        bestWay = way;\n                        bestWayReverse = wayReverse;\n                        bestWayNextNode = nextNode;\n                    }\n                }\n            }\n\n            if (bestWay == null)\n                throw new RuntimeException();\n            else if (outerWays.contains(bestWay))\n                break; //full circle reached, terminate.\n            else {\n                //add to outer ways, repeat.\n                outerWays.add(bestWay);\n                result.add(new WayInPath(bestWay, bestWayReverse));\n                headNode = bestWayReverse ? bestWay.firstNode() : bestWay.lastNode();\n                prevNode = bestWayReverse ? bestWay.getNode(1) : bestWay.getNode(bestWay.getNodesCount() - 2);\n            }\n        }\n\n        return result;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Gets called whenever the shortcut is pressed or the menu entry is selected\n     * Checks whether the selected objects are suitable to join and joins them if so\n     */\n    public void actionPerformed(ActionEvent e) {\n        LinkedList<Way> ways = new LinkedList<Way>(Main.main.getCurrentDataSet().getSelectedWays());\n\n        if (ways.isEmpty()) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Please select at least one closed way that should be joined.\"));\n            return;\n        }\n\n        // Too many ways\n        if(ways.size() > 2) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Only up to two areas can be joined at the moment.\"));\n            return;\n        }\n\n        List<Node> allNodes = new ArrayList<Node>();\n        for (Way way: ways) {\n            if(!way.isClosed()) {\n                JOptionPane.showMessageDialog(Main.parent, tr(\"\\\"{0}\\\" is not closed and therefore cannot be joined.\", way.getName()));\n                return;\n            }\n\n            allNodes.addAll(way.getNodes());\n        }\n\n        // TODO: Only display this warning when nodes outside dataSourceArea are deleted\n        Area dataSourceArea = Main.main.getCurrentDataSet().getDataSourceArea();\n        if (dataSourceArea != null) {\n            for (Node node: allNodes) {\n                if (!dataSourceArea.contains(node.getCoor())) {\n                    int option = JOptionPane.showConfirmDialog(Main.parent,\n                            trn(\"The selected way has nodes outside of the downloaded data region.\",\n                                    \"The selected ways have nodes outside of the downloaded data region.\",\n                                    ways.size()) + \"\\n\"\n                                    + tr(\"This can lead to nodes being deleted accidentally.\") + \"\\n\"\n                                    + tr(\"Are you really sure to continue?\"),\n                                    tr(\"Please abort if you are not sure\"), JOptionPane.YES_NO_OPTION,\n                                    JOptionPane.WARNING_MESSAGE);\n\n                    if (option != JOptionPane.YES_OPTION) return;\n                    break;\n                }\n            }\n        }\n\n        if(joinAreas(ways.getFirst(), ways.getLast())) {\n            Main.map.mapView.repaint();\n            DataSet ds = Main.main.getCurrentDataSet();\n            ds.fireSelectionChanged();\n        } else {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"No intersection found. Nothing was changed.\"));\n        }\n    }","id":59319,"modified_method":"/**\n     * Gets called whenever the shortcut is pressed or the menu entry is selected\n     * Checks whether the selected objects are suitable to join and joins them if so\n     */\n    public void actionPerformed(ActionEvent e) {\n        LinkedList<Way> ways = new LinkedList<Way>(Main.main.getCurrentDataSet().getSelectedWays());\n\n        if (ways.isEmpty()) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Please select at least one closed way that should be joined.\"));\n            return;\n        }\n\n        // Too many ways\n        if(ways.size() > 2) {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"Only up to two areas can be joined at the moment.\"));\n            return;\n        }\n\n        List<Node> allNodes = new ArrayList<Node>();\n        for (Way way: ways) {\n            if(!way.isClosed()) {\n                JOptionPane.showMessageDialog(Main.parent, tr(\"\\\"{0}\\\" is not closed and therefore cannot be joined.\", way.getName()));\n                return;\n            }\n\n            allNodes.addAll(way.getNodes());\n        }\n\n        // TODO: Only display this warning when nodes outside dataSourceArea are deleted\n        Area dataSourceArea = Main.main.getCurrentDataSet().getDataSourceArea();\n        if (dataSourceArea != null) {\n            for (Node node: allNodes) {\n                if (!dataSourceArea.contains(node.getCoor())) {\n                    int option = JOptionPane.showConfirmDialog(Main.parent,\n                            trn(\"The selected way has nodes outside of the downloaded data region.\",\n                                    \"The selected ways have nodes outside of the downloaded data region.\",\n                                    ways.size()) + \"\\n\"\n                                    + tr(\"This can lead to nodes being deleted accidentally.\") + \"\\n\"\n                                    + tr(\"Are you really sure to continue?\"),\n                                    tr(\"Please abort if you are not sure\"), JOptionPane.YES_NO_OPTION,\n                                    JOptionPane.WARNING_MESSAGE);\n\n                    if (option != JOptionPane.YES_OPTION) return;\n                    break;\n                }\n            }\n        }\n\n        if (checkForTagConflicts(ways.getFirst(), ways.getLast())) {\n            //do nothing. //FIXME: abort?\n        }\n\n        JoinAreasResult result = joinAreas(ways.getFirst(), ways.getLast());\n\n        if (result.hasChanges) {\n            Main.map.mapView.repaint();\n            DataSet ds = Main.main.getCurrentDataSet();\n            ds.fireSelectionChanged();\n        } else {\n            JOptionPane.showMessageDialog(Main.parent, tr(\"No intersection found. Nothing was changed.\"));\n        }\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Finds all inner ways for a given list of Ways and Nodes from a multigon by constructing a polygon\n     * for each way, looking for inner nodes that are not part of this way. If a node is found, all ways\n     * containing this node are added to the list\n     * @param Collection<Way> A list of (splitted) ways that form a multigon\n     * @param Collection<Node> A list of nodes that belong to the multigon\n     * @return Collection<Way> A list of ways that are positioned inside the outer borders of the multigon\n     */\n    private Collection<Way> findInnerWays(Collection<Way> multigonWays, Collection<Node> multigonNodes) {\n        Collection<Way> innerWays = new ArrayList<Way>();\n        for(Way w: multigonWays) {\n            Polygon poly = new Polygon();\n            for(Node n: (w).getNodes()) {\n                poly.addPoint(latlonToXY(n.getCoor().lat()), latlonToXY(n.getCoor().lon()));\n            }\n\n            for(Node n: multigonNodes) {\n                if(!(w).containsNode(n) && poly.contains(latlonToXY(n.getCoor().lat()), latlonToXY(n.getCoor().lon()))) {\n                    getWaysByNode(innerWays, multigonWays, n);\n                }\n            }\n        }\n\n        return innerWays;\n    }","id":59320,"modified_method":"/**\n     * Gets all inner ways given all ways and outer ways.\n     * @param multigonWays\n     * @param outerWays\n     * @return list of inner ways.\n     */\n    private ArrayList<Way> findInnerWays(Collection<Way> multigonWays, Collection<WayInPath> outerWays) {\n        ArrayList<Way> innerWays = new ArrayList<Way>();\n        Set<Way> outerSet = new HashSet<Way>();\n\n        for(WayInPath w: outerWays) {\n            outerSet.add(w.way);\n        }\n\n        for(Way way: multigonWays) {\n            if (!outerSet.contains(way)) {\n                innerWays.add(way);\n            }\n        }\n\n        return innerWays;\n    }","commit_id":"7b5614215a7a6741f2aed0ec7581472a8684f038","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Creates the UI controls which are to control the details of a specific\n     * <tt>AudioSystem<\/tt>.\n     *\n     * @param audioSystem the <tt>AudioSystem<\/tt> for which the UI controls to\n     * control its details are to be created\n     * @param container the <tt>JComponent<\/tt> into which the UI controls which\n     * are to control the details of the specified <tt>audioSystem<\/tt> are to\n     * be added\n     */\n    public void createAudioSystemControls(\n            final AudioSystem audioSystem,\n            JComponent container)\n    {\n        GridBagConstraints cnstrnts = new GridBagConstraints();\n\n        cnstrnts.anchor = GridBagConstraints.NORTHWEST;\n        cnstrnts.fill = GridBagConstraints.HORIZONTAL;\n        cnstrnts.weighty = 0;\n\n        int audioSystemFeatures = audioSystem.getFeatures();\n        boolean featureNotifyAndPlaybackDevices\n            = ((audioSystemFeatures\n                    & AudioSystem.FEATURE_NOTIFY_AND_PLAYBACK_DEVICES)\n                != 0);\n\n        cnstrnts.gridx = 0;\n        cnstrnts.insets = new Insets(3, 0, 3, 3);\n        cnstrnts.weightx = 0;\n\n        cnstrnts.gridy = 0;\n        container.add(new JLabel(getLabelText(\n            DeviceConfigurationComboBoxModel.AUDIO_CAPTURE)), cnstrnts);\n        if (featureNotifyAndPlaybackDevices)\n        {\n            cnstrnts.gridy = 2;\n            container.add(new JLabel(getLabelText(\n                DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK)), cnstrnts);\n            cnstrnts.gridy = 3;\n            container.add(new JLabel(getLabelText(\n                DeviceConfigurationComboBoxModel.AUDIO_NOTIFY)), cnstrnts);\n        }\n\n        cnstrnts.gridx = 1;\n        cnstrnts.insets = new Insets(3, 3, 3, 0);\n        cnstrnts.weightx = 1;\n\n        JComboBox captureCombo = null;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            captureCombo = new JComboBox();\n            captureCombo.setEditable(false);\n            captureCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_CAPTURE));\n            cnstrnts.gridy = 0;\n            container.add(captureCombo, cnstrnts);\n        }\n\n        int anchor = cnstrnts.anchor;\n        SoundLevelIndicator capturePreview\n            = new SoundLevelIndicator(\n                    SimpleAudioLevelListener.MIN_LEVEL,\n                    SimpleAudioLevelListener.MAX_LEVEL);\n\n        cnstrnts.anchor = GridBagConstraints.CENTER;\n        cnstrnts.gridy = (captureCombo == null) ? 0 : 1;\n        container.add(capturePreview, cnstrnts);\n        cnstrnts.anchor = anchor;\n\n        cnstrnts.gridy = GridBagConstraints.RELATIVE;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            playbackCombo = new JComboBox();\n            playbackCombo.setEditable(false);\n            playbackCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK));\n            playbackCombo.addActionListener(this);\n            container.add(playbackCombo, cnstrnts);\n\n            notifyCombo = new JComboBox();\n            notifyCombo.setEditable(false);\n            notifyCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_NOTIFY));\n            notifyCombo.addActionListener(this);\n            container.add(notifyCombo, cnstrnts);\n        }\n\n        if ((AudioSystem.FEATURE_ECHO_CANCELLATION & audioSystemFeatures) != 0)\n        {\n            final SIPCommCheckBox echoCancelCheckBox\n                = new SIPCommCheckBox(\n                        NeomediaActivator.getResources().getI18NString(\n                                \"impl.media.configform.ECHOCANCEL\"));\n\n            /*\n             * First set the selected one, then add the listener in order to\n             * avoid saving the value when using the default one and only\n             * showing to user without modification.\n             */\n            echoCancelCheckBox.setSelected(audioSystem.isEchoCancel());\n            echoCancelCheckBox.addItemListener(\n                    new ItemListener()\n                    {\n                        public void itemStateChanged(ItemEvent e)\n                        {\n                            audioSystem.setEchoCancel(\n                                    echoCancelCheckBox.isSelected());\n                        }\n                    });\n            container.add(echoCancelCheckBox, cnstrnts);\n        }\n\n        if ((AudioSystem.FEATURE_DENOISE & audioSystemFeatures) != 0)\n        {\n            final SIPCommCheckBox denoiseCheckBox\n                = new SIPCommCheckBox(\n                        NeomediaActivator.getResources().getI18NString(\n                                \"impl.media.configform.DENOISE\"));\n\n            /*\n             * First set the selected one, then add the listener in order to\n             * avoid saving the value when using the default one and only\n             * showing to user without modification.\n             */\n            denoiseCheckBox.setSelected(audioSystem.isDenoise());\n            denoiseCheckBox.addItemListener(\n                    new ItemListener()\n                    {\n                        public void itemStateChanged(ItemEvent e)\n                        {\n                            audioSystem.setDenoise(\n                                    denoiseCheckBox.isSelected());\n                        }\n                    });\n            container.add(denoiseCheckBox, cnstrnts);\n        }\n\n        // Adds the play buttons for testing playback and notification devices.\n        cnstrnts.gridx = 2;\n        cnstrnts.insets = new Insets(3, 3, 3, 0);\n        cnstrnts.weightx = 0;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            // Playback play sound button.\n            cnstrnts.gridy = 2;\n            playbackPlaySoundButton\n                = new JButton(new ImageIcon(NeomediaActivator.getResources()\n                            .getImageInBytes(\n                                \"plugin.notificationconfig.PLAY_ICON\")));\n            playbackPlaySoundButton.setMinimumSize(new Dimension(30,30));\n            playbackPlaySoundButton.setPreferredSize(new Dimension(30,30));\n            if(((DeviceConfigurationComboBoxModel.CaptureDevice)\n                        playbackCombo.getSelectedItem()).info == null)\n            {\n                playbackPlaySoundButton.setEnabled(false);\n            }\n            playbackPlaySoundButton.setOpaque(false);\n            playbackPlaySoundButton.addActionListener(this);\n            container.add(playbackPlaySoundButton, cnstrnts);\n\n            // Notification play sound button.\n            cnstrnts.gridy = 3;\n            notificationPlaySoundButton\n                = new JButton(new ImageIcon(NeomediaActivator.getResources()\n                            .getImageInBytes(\n                                \"plugin.notificationconfig.PLAY_ICON\")));\n            notificationPlaySoundButton.setMinimumSize(new Dimension(30,30));\n            notificationPlaySoundButton.setPreferredSize(new Dimension(30,30));\n            if(((DeviceConfigurationComboBoxModel.CaptureDevice)\n                        notifyCombo.getSelectedItem()).info == null)\n            {\n                notificationPlaySoundButton.setEnabled(false);\n            }\n            notificationPlaySoundButton.setOpaque(false);\n            notificationPlaySoundButton.addActionListener(this);\n            container.add(notificationPlaySoundButton, cnstrnts);\n        }\n\n        if (audioLevelListenerThread == null)\n        {\n            audioLevelListenerThread\n                = new AudioLevelListenerThread(\n                        audioSystem,\n                        captureCombo,\n                        capturePreview);\n        }\n        else\n        {\n            audioLevelListenerThread.init(\n                    audioSystem,\n                    captureCombo,\n                    capturePreview);\n        }\n    }","id":59321,"modified_method":"/**\n     * Creates the UI controls which are to control the details of a specific\n     * <tt>AudioSystem<\/tt>.\n     *\n     * @param audioSystem the <tt>AudioSystem<\/tt> for which the UI controls to\n     * control its details are to be created\n     * @param container the <tt>JComponent<\/tt> into which the UI controls which\n     * are to control the details of the specified <tt>audioSystem<\/tt> are to\n     * be added\n     */\n    public void createAudioSystemControls(\n            final AudioSystem audioSystem,\n            JComponent container)\n    {\n        GridBagConstraints cnstrnts = new GridBagConstraints();\n\n        cnstrnts.anchor = GridBagConstraints.NORTHWEST;\n        cnstrnts.fill = GridBagConstraints.HORIZONTAL;\n        cnstrnts.weighty = 0;\n\n        int audioSystemFeatures = audioSystem.getFeatures();\n        boolean featureNotifyAndPlaybackDevices\n            = ((audioSystemFeatures\n                    & AudioSystem.FEATURE_NOTIFY_AND_PLAYBACK_DEVICES)\n                != 0);\n\n        cnstrnts.gridx = 0;\n        cnstrnts.insets = new Insets(3, 0, 3, 3);\n        cnstrnts.weightx = 0;\n\n        cnstrnts.gridy = 0;\n        container.add(new JLabel(getLabelText(\n            DeviceConfigurationComboBoxModel.AUDIO_CAPTURE)), cnstrnts);\n        if (featureNotifyAndPlaybackDevices)\n        {\n            cnstrnts.gridy = 2;\n            container.add(new JLabel(getLabelText(\n                DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK)), cnstrnts);\n            cnstrnts.gridy = 3;\n            container.add(new JLabel(getLabelText(\n                DeviceConfigurationComboBoxModel.AUDIO_NOTIFY)), cnstrnts);\n        }\n\n        cnstrnts.gridx = 1;\n        cnstrnts.insets = new Insets(3, 3, 3, 0);\n        cnstrnts.weightx = 1;\n\n        JComboBox captureCombo = null;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            captureCombo = new JComboBox();\n            captureCombo.setEditable(false);\n            captureCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_CAPTURE));\n            cnstrnts.gridy = 0;\n            container.add(captureCombo, cnstrnts);\n        }\n\n        int anchor = cnstrnts.anchor;\n        SoundLevelIndicator capturePreview\n            = new SoundLevelIndicator(\n                    SimpleAudioLevelListener.MIN_LEVEL,\n                    SimpleAudioLevelListener.MAX_LEVEL);\n\n        cnstrnts.anchor = GridBagConstraints.CENTER;\n        cnstrnts.gridy = (captureCombo == null) ? 0 : 1;\n        container.add(capturePreview, cnstrnts);\n        cnstrnts.anchor = anchor;\n\n        cnstrnts.gridy = GridBagConstraints.RELATIVE;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            playbackCombo = new JComboBox();\n            playbackCombo.setEditable(false);\n            playbackCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK));\n            playbackCombo.addActionListener(this);\n            container.add(playbackCombo, cnstrnts);\n\n            notifyCombo = new JComboBox();\n            notifyCombo.setEditable(false);\n            notifyCombo.setModel(\n                    new DeviceConfigurationComboBoxModel(\n                            mediaService.getDeviceConfiguration(),\n                            DeviceConfigurationComboBoxModel.AUDIO_NOTIFY));\n            notifyCombo.addActionListener(this);\n            container.add(notifyCombo, cnstrnts);\n        }\n\n        int[] checkBoxAudioSystemFeatures\n            = new int[]\n                    {\n                        AudioSystem.FEATURE_ECHO_CANCELLATION,\n                        AudioSystem.FEATURE_DENOISE,\n                        AudioSystem.FEATURE_AGC\n                    };\n\n        for (int i = 0; i < checkBoxAudioSystemFeatures.length; i++)\n        {\n            final int f = checkBoxAudioSystemFeatures[i];\n\n            if ((f & audioSystemFeatures) != 0)\n            {\n                String textKey;\n                boolean selected;\n\n                switch (f)\n                {\n                case AudioSystem.FEATURE_AGC:\n                    textKey = \"impl.media.configform.AUTOMATICGAINCONTROL\";\n                    selected = audioSystem.isAutomaticGainControl();\n                    break;\n                case AudioSystem.FEATURE_DENOISE:\n                    textKey = \"impl.media.configform.DENOISE\";\n                    selected = audioSystem.isDenoise();\n                    break;\n                case AudioSystem.FEATURE_ECHO_CANCELLATION:\n                    textKey = \"impl.media.configform.ECHOCANCEL\";\n                    selected = audioSystem.isEchoCancel();\n                    break;\n                default:\n                    continue;\n                }\n\n                final SIPCommCheckBox checkBox\n                    = new SIPCommCheckBox(\n                            NeomediaActivator.getResources().getI18NString(\n                                    textKey));\n\n                /*\n                 * First set the selected one, then add the listener in order to\n                 * avoid saving the value when using the default one and only\n                 * showing to user without modification.\n                 */\n                checkBox.setSelected(selected);\n                checkBox.addItemListener(\n                        new ItemListener()\n                        {\n                            public void itemStateChanged(ItemEvent e)\n                            {\n                                boolean b = checkBox.isSelected();\n\n                                switch (f)\n                                {\n                                case AudioSystem.FEATURE_AGC:\n                                    audioSystem.setAutomaticGainControl(b);\n                                    break;\n                                case AudioSystem.FEATURE_DENOISE:\n                                    audioSystem.setDenoise(b);\n                                    break;\n                                case AudioSystem.FEATURE_ECHO_CANCELLATION:\n                                    audioSystem.setEchoCancel(b);\n                                    break;\n                                }\n                            }\n                        });\n                container.add(checkBox, cnstrnts);\n            }\n        }\n\n        // Adds the play buttons for testing playback and notification devices.\n        cnstrnts.gridx = 2;\n        cnstrnts.insets = new Insets(3, 3, 3, 0);\n        cnstrnts.weightx = 0;\n\n        if (featureNotifyAndPlaybackDevices)\n        {\n            // Playback play sound button.\n            cnstrnts.gridy = 2;\n            playbackPlaySoundButton\n                = new JButton(new ImageIcon(NeomediaActivator.getResources()\n                            .getImageInBytes(\n                                \"plugin.notificationconfig.PLAY_ICON\")));\n            playbackPlaySoundButton.setMinimumSize(new Dimension(30,30));\n            playbackPlaySoundButton.setPreferredSize(new Dimension(30,30));\n            if(((DeviceConfigurationComboBoxModel.CaptureDevice)\n                        playbackCombo.getSelectedItem()).info == null)\n            {\n                playbackPlaySoundButton.setEnabled(false);\n            }\n            playbackPlaySoundButton.setOpaque(false);\n            playbackPlaySoundButton.addActionListener(this);\n            container.add(playbackPlaySoundButton, cnstrnts);\n\n            // Notification play sound button.\n            cnstrnts.gridy = 3;\n            notificationPlaySoundButton\n                = new JButton(new ImageIcon(NeomediaActivator.getResources()\n                            .getImageInBytes(\n                                \"plugin.notificationconfig.PLAY_ICON\")));\n            notificationPlaySoundButton.setMinimumSize(new Dimension(30,30));\n            notificationPlaySoundButton.setPreferredSize(new Dimension(30,30));\n            if(((DeviceConfigurationComboBoxModel.CaptureDevice)\n                        notifyCombo.getSelectedItem()).info == null)\n            {\n                notificationPlaySoundButton.setEnabled(false);\n            }\n            notificationPlaySoundButton.setOpaque(false);\n            notificationPlaySoundButton.addActionListener(this);\n            container.add(notificationPlaySoundButton, cnstrnts);\n        }\n\n        if (audioLevelListenerThread == null)\n        {\n            audioLevelListenerThread\n                = new AudioLevelListenerThread(\n                        audioSystem,\n                        captureCombo,\n                        capturePreview);\n        }\n        else\n        {\n            audioLevelListenerThread.init(\n                    audioSystem,\n                    captureCombo,\n                    capturePreview);\n        }\n    }","commit_id":"833358c13aa13875f82bc74b08db3f4bcf933b04","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>Component<\/tt> which.is to preview and/or allow\n     * detailed configuration of an audio or video <tt>DeviceSystem<\/tt>.\n     *\n     * @param type either {@link DeviceConfigurationComboBoxModel#AUDIO} or\n     * {@link DeviceConfigurationComboBoxModel#VIDEO}\n     * @param comboBox the <tt>JComboBox<\/tt> which lists the available\n     * alternatives and the selection which is to be previewed. May be\n     * <tt>null<\/tt> in the case of audio in which case it is assumed that the\n     * user is not allowed to set the <tt>AudioSystem<\/tt> to be used and the\n     * selection is determined by the <tt>DeviceConfiguration<\/tt> of the\n     * <tt>MediaService<\/tt>.\n     * @param prefSize the preferred size to be applied to the preview\n     * @return a new <tt>Component<\/tt> which is to preview and/or allow\n     * detailed configuration of the <tt>DeviceSystem<\/tt> identified by\n     * <tt>type<\/tt> and <tt>comboBox<\/tt>\n     */\n    private Component createPreview(\n            int type,\n            JComboBox comboBox,\n            Dimension prefSize)\n    {\n        JComponent preview = null;\n\n        if (type == DeviceConfigurationComboBoxModel.AUDIO)\n        {\n            AudioSystem audioSystem = null;\n\n            /*\n             * If the Audio System combo box is disabled (i.e. the user is not\n             * allowed to set the AudioSystem to be used), the current\n             * AudioSystem (specified by the DeviceConfiguration of the\n             * MediaService) is to be configured.\n             */\n            if ((comboBox == null) || !comboBox.isEnabled())\n            {\n                audioSystem\n                    = mediaService.getDeviceConfiguration().getAudioSystem();\n            }\n            else\n            {\n                Object selectedItem = comboBox.getSelectedItem();\n\n                if (selectedItem instanceof AudioSystem)\n                {\n                    audioSystem = (AudioSystem) selectedItem;\n\n                    AudioSystem mediaServiceDeviceConfigurationAudioSystem\n                        = mediaService\n                            .getDeviceConfiguration()\n                                .getAudioSystem();\n\n                    if (audioSystem\n                            != mediaServiceDeviceConfigurationAudioSystem)\n                    {\n                        logger.warn(\n                                \"JComboBox.selectedItem is not identical to MediaService.deviceConfiguration.audioSystem!\");\n                    }\n                }\n            }\n\n            if ((audioSystem != null)\n                    && !NoneAudioSystem.LOCATOR_PROTOCOL.equalsIgnoreCase(\n                            audioSystem.getLocatorProtocol()))\n            {\n                preview = new TransparentPanel(new GridBagLayout());\n                createAudioSystemControls(audioSystem, preview);\n            }\n            else\n            {\n                /*\n                 * If there are AudioSystems other than \"None\" and they have all\n                 * not been reported as available, then each of them failed to\n                 * detect any devices whatsoever.\n                 */\n                AudioSystem[] audioSystems = AudioSystem.getAudioSystems();\n\n                if ((audioSystems != null) && (audioSystems.length != 1))\n                {\n                    AudioSystem[] availableAudioSystems\n                        = mediaService\n                            .getDeviceConfiguration()\n                                .getAvailableAudioSystems();\n\n                    if ((availableAudioSystems != null)\n                            && (availableAudioSystems.length == 1))\n                    {\n                        String noAvailableAudioDevice\n                            = NeomediaActivator.getResources().getI18NString(\n                                    \"impl.media.configform.NO_AVAILABLE_AUDIO_DEVICE\");\n\n                        preview = new TransparentPanel(new GridBagLayout());\n                        preview.add(new JLabel(noAvailableAudioDevice));\n                    }\n                }\n            }\n        }\n        else if (type == DeviceConfigurationComboBoxModel.VIDEO)\n        {\n            JLabel noPreview\n                = new JLabel(\n                        NeomediaActivator.getResources().getI18NString(\n                                \"impl.media.configform.NO_PREVIEW\"));\n\n            noPreview.setHorizontalAlignment(SwingConstants.CENTER);\n            noPreview.setVerticalAlignment(SwingConstants.CENTER);\n\n            preview = createVideoContainer(noPreview);\n            preview.setPreferredSize(prefSize);\n\n            Object selectedItem = comboBox.getSelectedItem();\n            CaptureDeviceInfo device = null;\n            if (selectedItem\n                    instanceof\n                        DeviceConfigurationComboBoxModel.CaptureDevice)\n                device\n                    = ((DeviceConfigurationComboBoxModel.CaptureDevice)\n                            selectedItem)\n                        .info;\n\n            Exception exception;\n            try\n            {\n                createVideoPreview(device, preview);\n                exception = null;\n            }\n            catch (IOException ex)\n            {\n                exception = ex;\n            }\n            catch (MediaException ex)\n            {\n                exception = ex;\n            }\n            if (exception != null)\n            {\n                logger.error(\n                        \"Failed to create preview for device \" + device,\n                        exception);\n            }\n        }\n\n        return preview;\n    }","id":59322,"modified_method":"/**\n     * Initializes a new <tt>Component<\/tt> which.is to preview and/or allow\n     * detailed configuration of an audio or video <tt>DeviceSystem<\/tt>.\n     *\n     * @param type either {@link DeviceConfigurationComboBoxModel#AUDIO} or\n     * {@link DeviceConfigurationComboBoxModel#VIDEO}\n     * @param comboBox the <tt>JComboBox<\/tt> which lists the available\n     * alternatives and the selection which is to be previewed. May be\n     * <tt>null<\/tt> in the case of audio in which case it is assumed that the\n     * user is not allowed to set the <tt>AudioSystem<\/tt> to be used and the\n     * selection is determined by the <tt>DeviceConfiguration<\/tt> of the\n     * <tt>MediaService<\/tt>.\n     * @param prefSize the preferred size to be applied to the preview\n     * @return a new <tt>Component<\/tt> which is to preview and/or allow\n     * detailed configuration of the <tt>DeviceSystem<\/tt> identified by\n     * <tt>type<\/tt> and <tt>comboBox<\/tt>\n     */\n    private Component createPreview(\n            int type,\n            JComboBox comboBox,\n            Dimension prefSize)\n    {\n        JComponent preview = null;\n\n        if (type == DeviceConfigurationComboBoxModel.AUDIO)\n        {\n            AudioSystem audioSystem = null;\n\n            /*\n             * If the Audio System combo box is disabled (i.e. the user is not\n             * allowed to set the AudioSystem to be used), the current\n             * AudioSystem (specified by the DeviceConfiguration of the\n             * MediaService) is to be configured.\n             */\n            if ((comboBox == null) || !comboBox.isEnabled())\n            {\n                audioSystem\n                    = mediaService.getDeviceConfiguration().getAudioSystem();\n            }\n            else\n            {\n                Object selectedItem = comboBox.getSelectedItem();\n\n                if (selectedItem instanceof AudioSystem)\n                {\n                    audioSystem = (AudioSystem) selectedItem;\n\n                    AudioSystem mediaServiceDeviceConfigurationAudioSystem\n                        = mediaService\n                            .getDeviceConfiguration()\n                                .getAudioSystem();\n\n                    if (audioSystem\n                            != mediaServiceDeviceConfigurationAudioSystem)\n                    {\n                        logger.warn(\n                                \"JComboBox.selectedItem is not identical to\"\n                                    + \" MediaService.deviceConfiguration.audioSystem!\");\n                    }\n                }\n            }\n\n            if ((audioSystem != null)\n                    && !NoneAudioSystem.LOCATOR_PROTOCOL.equalsIgnoreCase(\n                            audioSystem.getLocatorProtocol()))\n            {\n                preview = new TransparentPanel(new GridBagLayout());\n                createAudioSystemControls(audioSystem, preview);\n            }\n            else\n            {\n                /*\n                 * If there are AudioSystems other than \"None\" and they have all\n                 * not been reported as available, then each of them failed to\n                 * detect any devices whatsoever.\n                 */\n                AudioSystem[] audioSystems = AudioSystem.getAudioSystems();\n\n                if ((audioSystems != null) && (audioSystems.length != 1))\n                {\n                    AudioSystem[] availableAudioSystems\n                        = mediaService\n                            .getDeviceConfiguration()\n                                .getAvailableAudioSystems();\n\n                    if ((availableAudioSystems != null)\n                            && (availableAudioSystems.length == 1))\n                    {\n                        String noAvailableAudioDevice\n                            = NeomediaActivator.getResources().getI18NString(\n                                    \"impl.media.configform\"\n                                        + \".NO_AVAILABLE_AUDIO_DEVICE\");\n\n                        preview = new TransparentPanel(new GridBagLayout());\n                        preview.add(new JLabel(noAvailableAudioDevice));\n                    }\n                }\n            }\n        }\n        else if (type == DeviceConfigurationComboBoxModel.VIDEO)\n        {\n            JLabel noPreview\n                = new JLabel(\n                        NeomediaActivator.getResources().getI18NString(\n                                \"impl.media.configform.NO_PREVIEW\"));\n\n            noPreview.setHorizontalAlignment(SwingConstants.CENTER);\n            noPreview.setVerticalAlignment(SwingConstants.CENTER);\n\n            preview = createVideoContainer(noPreview);\n            preview.setPreferredSize(prefSize);\n\n            Object selectedItem = comboBox.getSelectedItem();\n            CaptureDeviceInfo device = null;\n            if (selectedItem\n                    instanceof\n                        DeviceConfigurationComboBoxModel.CaptureDevice)\n                device\n                    = ((DeviceConfigurationComboBoxModel.CaptureDevice)\n                            selectedItem)\n                        .info;\n\n            Exception exception;\n            try\n            {\n                createVideoPreview(device, preview);\n                exception = null;\n            }\n            catch (IOException ex)\n            {\n                exception = ex;\n            }\n            catch (MediaException ex)\n            {\n                exception = ex;\n            }\n            if (exception != null)\n            {\n                logger.error(\n                        \"Failed to create preview for device \" + device,\n                        exception);\n            }\n        }\n\n        return preview;\n    }","commit_id":"833358c13aa13875f82bc74b08db3f4bcf933b04","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void apply() {\n    GeneralSettings settings = GeneralSettings.getInstance();\n\n    settings.setUseDefaultBrowser(getDefaultBrowser() == DefaultBrowser.SYSTEM);\n\n    if (alternativeBrowserPathField.isEnabled()) {\n      settings.setBrowserPath(alternativeBrowserPathField.getText());\n    }\n\n    settings.setConfirmExtractFiles(confirmExtractFiles.isSelected());\n\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    browserManager.defaultBrowser = getDefaultBrowser();\n    browserManager.setList(browsersEditor.apply());\n  }","id":59323,"modified_method":"public void apply() {\n    GeneralSettings settings = GeneralSettings.getInstance();\n\n    settings.setUseDefaultBrowser(getDefaultBrowser() == DefaultBrowserPolicy.SYSTEM);\n\n    if (alternativeBrowserPathField.isEnabled()) {\n      settings.setBrowserPath(alternativeBrowserPathField.getText());\n    }\n\n    settings.setConfirmExtractFiles(confirmExtractFiles.isSelected());\n\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    browserManager.defaultBrowserPolicy = getDefaultBrowser();\n    browserManager.setList(browsersEditor.apply());\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createUIComponents() {\n    TableModelEditor.DialogItemEditor<ConfigurableWebBrowser> itemEditor = new TableModelEditor.DialogItemEditor<ConfigurableWebBrowser>() {\n      @NotNull\n      @Override\n      public Class<ConfigurableWebBrowser> getItemClass() {\n        return ConfigurableWebBrowser.class;\n      }\n\n      @Override\n      public ConfigurableWebBrowser clone(@NotNull ConfigurableWebBrowser item, boolean forInPlaceEditing) {\n        return new ConfigurableWebBrowser(forInPlaceEditing ? item.getId() : UUID.randomUUID(),\n                                          item.getFamily(), item.getName(), item.getPath(), item.isActive(),\n                                          forInPlaceEditing ? item.getSpecificSettings() : cloneSettings(item));\n      }\n\n      @Override\n      public void edit(@NotNull ConfigurableWebBrowser browser, @NotNull Function<ConfigurableWebBrowser, ConfigurableWebBrowser> mutator, boolean isAdd) {\n        BrowserSpecificSettings settings = cloneSettings(browser);\n        if (settings != null && ShowSettingsUtil.getInstance().editConfigurable(browsersTable, settings.createConfigurable())) {\n          mutator.fun(browser).setSpecificSettings(settings);\n        }\n      }\n\n      @Nullable\n      private BrowserSpecificSettings cloneSettings(@NotNull ConfigurableWebBrowser browser) {\n        BrowserSpecificSettings settings = browser.getSpecificSettings();\n        if (settings == null) {\n          return null;\n        }\n\n        BrowserSpecificSettings newSettings = browser.getFamily().createBrowserSpecificSettings();\n        assert newSettings != null;\n        TableModelEditor.cloneUsingXmlSerialization(settings, newSettings);\n        return newSettings;\n      }\n\n      @Override\n      public void applyEdited(@NotNull ConfigurableWebBrowser oldItem, @NotNull ConfigurableWebBrowser newItem) {\n        oldItem.setSpecificSettings(newItem.getSpecificSettings());\n      }\n\n      @Override\n      public boolean isEditable(@NotNull ConfigurableWebBrowser browser) {\n        return browser.getSpecificSettings() != null;\n      }\n\n      @Override\n      public boolean isRemovable(@NotNull ConfigurableWebBrowser item) {\n        return !WebBrowserManager.getInstance().isPredefinedBrowser(item);\n      }\n    };\n    browsersEditor = new TableModelEditor<ConfigurableWebBrowser>(COLUMNS, itemEditor, \"No web browsers configured\")\n      .modelListener(new TableModelEditor.DataChangedListener<ConfigurableWebBrowser>() {\n        @Override\n        public void tableChanged(TableModelEvent event) {\n          update(event.getFirstRow());\n        }\n\n        @Override\n        public void dataChanged(@NotNull ColumnInfo<ConfigurableWebBrowser, ?> columnInfo, int rowIndex) {\n          if (columnInfo == PATH_COLUMN_INFO) {\n            update(rowIndex);\n          }\n        }\n\n        private void update(int rowIndex) {\n          if (rowIndex == 0 && getDefaultBrowser() == DefaultBrowser.FIRST) {\n            setCustomPathToFirstListed();\n          }\n        }\n      });\n    browsersTable = browsersEditor.createComponent();\n  }","id":59324,"modified_method":"private void createUIComponents() {\n    TableModelEditor.DialogItemEditor<ConfigurableWebBrowser> itemEditor = new TableModelEditor.DialogItemEditor<ConfigurableWebBrowser>() {\n      @NotNull\n      @Override\n      public Class<ConfigurableWebBrowser> getItemClass() {\n        return ConfigurableWebBrowser.class;\n      }\n\n      @Override\n      public ConfigurableWebBrowser clone(@NotNull ConfigurableWebBrowser item, boolean forInPlaceEditing) {\n        return new ConfigurableWebBrowser(forInPlaceEditing ? item.getId() : UUID.randomUUID(),\n                                          item.getFamily(), item.getName(), item.getPath(), item.isActive(),\n                                          forInPlaceEditing ? item.getSpecificSettings() : cloneSettings(item));\n      }\n\n      @Override\n      public void edit(@NotNull ConfigurableWebBrowser browser, @NotNull Function<ConfigurableWebBrowser, ConfigurableWebBrowser> mutator, boolean isAdd) {\n        BrowserSpecificSettings settings = cloneSettings(browser);\n        if (settings != null && ShowSettingsUtil.getInstance().editConfigurable(browsersTable, settings.createConfigurable())) {\n          mutator.fun(browser).setSpecificSettings(settings);\n        }\n      }\n\n      @Nullable\n      private BrowserSpecificSettings cloneSettings(@NotNull ConfigurableWebBrowser browser) {\n        BrowserSpecificSettings settings = browser.getSpecificSettings();\n        if (settings == null) {\n          return null;\n        }\n\n        BrowserSpecificSettings newSettings = browser.getFamily().createBrowserSpecificSettings();\n        assert newSettings != null;\n        TableModelEditor.cloneUsingXmlSerialization(settings, newSettings);\n        return newSettings;\n      }\n\n      @Override\n      public void applyEdited(@NotNull ConfigurableWebBrowser oldItem, @NotNull ConfigurableWebBrowser newItem) {\n        oldItem.setSpecificSettings(newItem.getSpecificSettings());\n      }\n\n      @Override\n      public boolean isEditable(@NotNull ConfigurableWebBrowser browser) {\n        return browser.getSpecificSettings() != null;\n      }\n\n      @Override\n      public boolean isRemovable(@NotNull ConfigurableWebBrowser item) {\n        return !WebBrowserManager.getInstance().isPredefinedBrowser(item);\n      }\n    };\n    browsersEditor = new TableModelEditor<ConfigurableWebBrowser>(COLUMNS, itemEditor, \"No web browsers configured\")\n      .modelListener(new TableModelEditor.DataChangedListener<ConfigurableWebBrowser>() {\n        @Override\n        public void tableChanged(TableModelEvent event) {\n          update(event.getFirstRow());\n        }\n\n        @Override\n        public void dataChanged(@NotNull ColumnInfo<ConfigurableWebBrowser, ?> columnInfo, int rowIndex) {\n          if (columnInfo == PATH_COLUMN_INFO) {\n            update(rowIndex);\n          }\n        }\n\n        private void update(int rowIndex) {\n          if (rowIndex == 0 && getDefaultBrowser() == DefaultBrowserPolicy.FIRST) {\n            setCustomPathToFirstListed();\n          }\n        }\n      });\n    browsersTable = browsersEditor.createComponent();\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void updateCustomPathTextFieldValue(DefaultBrowser browser) {\n    if (browser == DefaultBrowser.ALTERNATIVE) {\n      alternativeBrowserPathField.setText(customPathValue);\n    }\n    else if (browser == DefaultBrowser.FIRST) {\n      setCustomPathToFirstListed();\n    }\n    else {\n      alternativeBrowserPathField.setText(\"\");\n    }\n  }","id":59325,"modified_method":"private void updateCustomPathTextFieldValue(@NotNull DefaultBrowserPolicy browser) {\n    if (browser == DefaultBrowserPolicy.ALTERNATIVE) {\n      alternativeBrowserPathField.setText(customPathValue);\n    }\n    else if (browser == DefaultBrowserPolicy.FIRST) {\n      setCustomPathToFirstListed();\n    }\n    else {\n      alternativeBrowserPathField.setText(\"\");\n    }\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private DefaultBrowser getDefaultBrowser() {\n    return (DefaultBrowser)defaultBrowserComboBox.getSelectedItem();\n  }","id":59326,"modified_method":"private DefaultBrowserPolicy getDefaultBrowser() {\n    return (DefaultBrowserPolicy)defaultBrowserPolicyComboBox.getSelectedItem();\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isModified() {\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    GeneralSettings generalSettings = GeneralSettings.getInstance();\n\n    DefaultBrowser defaultBrowser = getDefaultBrowser();\n    if (browserManager.getDefaultBrowserMode() != defaultBrowser || generalSettings.isConfirmExtractFiles() != confirmExtractFiles.isSelected()) {\n      return true;\n    }\n\n    if (defaultBrowser == DefaultBrowser.ALTERNATIVE &&\n        !Comparing.strEqual(generalSettings.getBrowserPath(), alternativeBrowserPathField.getText())) {\n      return true;\n    }\n\n    return browsersEditor.isModified(browserManager.getList());\n  }","id":59327,"modified_method":"public boolean isModified() {\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    GeneralSettings generalSettings = GeneralSettings.getInstance();\n\n    DefaultBrowserPolicy defaultBrowserPolicy = getDefaultBrowser();\n    if (browserManager.getDefaultBrowserPolicy() != defaultBrowserPolicy || generalSettings.isConfirmExtractFiles() != confirmExtractFiles.isSelected()) {\n      return true;\n    }\n\n    if (defaultBrowserPolicy == DefaultBrowserPolicy.ALTERNATIVE &&\n        !Comparing.strEqual(generalSettings.getBrowserPath(), alternativeBrowserPathField.getText())) {\n      return true;\n    }\n\n    return browsersEditor.isModified(browserManager.getList());\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void reset() {\n    GeneralSettings settings = GeneralSettings.getInstance();\n\n    DefaultBrowser defaultBrowser = WebBrowserManager.getInstance().getDefaultBrowserMode();\n    defaultBrowserComboBox.setSelectedItem(defaultBrowser);\n\n    confirmExtractFiles.setSelected(settings.isConfirmExtractFiles());\n    browsersEditor.reset(WebBrowserManager.getInstance().getList());\n\n    customPathValue = settings.getBrowserPath();\n    alternativeBrowserPathField.setEnabled(defaultBrowser == DefaultBrowser.ALTERNATIVE);\n    updateCustomPathTextFieldValue(defaultBrowser);\n  }","id":59328,"modified_method":"public void reset() {\n    GeneralSettings settings = GeneralSettings.getInstance();\n\n    boolean canUseSystemDefaultBrowserPolicy = BrowserLauncherAppless.canUseSystemDefaultBrowserPolicy();\n\n    DefaultBrowserPolicy defaultBrowserPolicy = WebBrowserManager.getInstance().getDefaultBrowserPolicy();\n    defaultBrowserPolicyComboBox.setSelectedItem(defaultBrowserPolicy == DefaultBrowserPolicy.SYSTEM && !canUseSystemDefaultBrowserPolicy ? DefaultBrowserPolicy.ALTERNATIVE : defaultBrowserPolicy);\n\n    confirmExtractFiles.setSelected(settings.isConfirmExtractFiles());\n    browsersEditor.reset(WebBrowserManager.getInstance().getList());\n\n    customPathValue = settings.getBrowserPath();\n    alternativeBrowserPathField.setEnabled(defaultBrowserPolicy == DefaultBrowserPolicy.ALTERNATIVE || !canUseSystemDefaultBrowserPolicy);\n    updateCustomPathTextFieldValue(defaultBrowserPolicy);\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public BrowserSettingsPanel() {\n    alternativeBrowserPathField.addBrowseFolderListener(IdeBundle.message(\"title.select.path.to.browser\"), null, null, APP_FILE_CHOOSER_DESCRIPTOR);\n    defaultBrowserPanel.setBorder(TitledSeparator.EMPTY_BORDER);\n\n    //noinspection unchecked\n    defaultBrowserComboBox.setModel(new EnumComboBoxModel<DefaultBrowser>(DefaultBrowser.class));\n    if (BrowserLauncherAppless.canStartDefaultBrowser()) {\n      defaultBrowserComboBox.addItemListener(new ItemListener() {\n        @Override\n        public void itemStateChanged(ItemEvent e) {\n          boolean customPathEnabled = e.getItem() == DefaultBrowser.ALTERNATIVE;\n          if (e.getStateChange() == ItemEvent.DESELECTED) {\n            if (customPathEnabled) {\n              customPathValue = alternativeBrowserPathField.getText();\n            }\n          }\n          else if (e.getStateChange() == ItemEvent.SELECTED) {\n            alternativeBrowserPathField.setEnabled(customPathEnabled);\n            updateCustomPathTextFieldValue((DefaultBrowser)e.getItem());\n          }\n        }\n      });\n\n      defaultBrowserComboBox.setRenderer(new ListCellRendererWrapper<DefaultBrowser>() {\n        @Override\n        public void customize(JList list, DefaultBrowser value, int index, boolean selected, boolean hasFocus) {\n          String name;\n          switch (value) {\n            case SYSTEM:\n              name = \"System default\";\n              break;\n            case FIRST:\n              name = \"First listed\";\n              break;\n            case ALTERNATIVE:\n              name = \"Custom path\";\n              break;\n            default:\n              throw new IllegalStateException();\n          }\n\n          setText(name);\n        }\n      });\n\n      if (UIUtil.isUnderAquaLookAndFeel()) {\n        defaultBrowserComboBox.setBorder(new EmptyBorder(3, 0, 0, 0));\n      }\n    }\n    else {\n      defaultBrowserComboBox.setVisible(false);\n    }\n\n    clearExtractedFiles.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        BrowserLauncherAppless.clearExtractedFiles();\n      }\n    });\n  }","id":59329,"modified_method":"public BrowserSettingsPanel() {\n    alternativeBrowserPathField.addBrowseFolderListener(IdeBundle.message(\"title.select.path.to.browser\"), null, null, APP_FILE_CHOOSER_DESCRIPTOR);\n    defaultBrowserPanel.setBorder(TitledSeparator.EMPTY_BORDER);\n\n    ArrayList<DefaultBrowserPolicy> defaultBrowserPolicies = new ArrayList<DefaultBrowserPolicy>();\n    if (BrowserLauncherAppless.canUseSystemDefaultBrowserPolicy()) {\n      defaultBrowserPolicies.add(DefaultBrowserPolicy.SYSTEM);\n    }\n    defaultBrowserPolicies.add(DefaultBrowserPolicy.FIRST);\n    defaultBrowserPolicies.add(DefaultBrowserPolicy.ALTERNATIVE);\n\n    //noinspection Since15,unchecked\n    defaultBrowserPolicyComboBox.setModel(new ListComboBoxModel<DefaultBrowserPolicy>(defaultBrowserPolicies));\n    defaultBrowserPolicyComboBox.addItemListener(new ItemListener() {\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        boolean customPathEnabled = e.getItem() == DefaultBrowserPolicy.ALTERNATIVE;\n        if (e.getStateChange() == ItemEvent.DESELECTED) {\n          if (customPathEnabled) {\n            customPathValue = alternativeBrowserPathField.getText();\n          }\n        }\n        else if (e.getStateChange() == ItemEvent.SELECTED) {\n          alternativeBrowserPathField.setEnabled(customPathEnabled);\n          updateCustomPathTextFieldValue((DefaultBrowserPolicy)e.getItem());\n        }\n      }\n    });\n\n    defaultBrowserPolicyComboBox.setRenderer(new ListCellRendererWrapper<DefaultBrowserPolicy>() {\n      @Override\n      public void customize(JList list, DefaultBrowserPolicy value, int index, boolean selected, boolean hasFocus) {\n        String name;\n        switch (value) {\n          case SYSTEM:\n            name = \"System default\";\n            break;\n          case FIRST:\n            name = \"First listed\";\n            break;\n          case ALTERNATIVE:\n            name = \"Custom path\";\n            break;\n          default:\n            throw new IllegalStateException();\n        }\n\n        setText(name);\n      }\n    });\n\n    if (UIUtil.isUnderAquaLookAndFeel()) {\n      defaultBrowserPolicyComboBox.setBorder(new EmptyBorder(3, 0, 0, 0));\n    }\n\n    clearExtractedFiles.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        BrowserLauncherAppless.clearExtractedFiles();\n      }\n    });\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static WebBrowser findUsingBrowser() {\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    if (browserManager.getDefaultBrowserMode() == WebBrowserManager.DefaultBrowser.FIRST) {\n      return browserManager.getDefaultBrowser();\n    }\n    else if (browserManager.getDefaultBrowserMode() == WebBrowserManager.DefaultBrowser.ALTERNATIVE) {\n      String path = GeneralSettings.getInstance().getBrowserPath();\n      if (!StringUtil.isEmpty(path)) {\n        WebBrowser browser = browserManager.findBrowserById(path);\n        if (browser == null) {\n          for (WebBrowser item : browserManager.getActiveBrowsers()) {\n            if (path.equals(item.getPath())) {\n              return item;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }","id":59330,"modified_method":"@Nullable\n  private static WebBrowser findUsingBrowser() {\n    WebBrowserManager browserManager = WebBrowserManager.getInstance();\n    DefaultBrowserPolicy defaultBrowserPolicy = browserManager.getDefaultBrowserPolicy();\n    if (defaultBrowserPolicy == DefaultBrowserPolicy.FIRST || (defaultBrowserPolicy == DefaultBrowserPolicy.SYSTEM && !BrowserLauncherAppless.canUseSystemDefaultBrowserPolicy())) {\n      return browserManager.getDefaultBrowser();\n    }\n    else if (defaultBrowserPolicy == DefaultBrowserPolicy.ALTERNATIVE) {\n      String path = GeneralSettings.getInstance().getBrowserPath();\n      if (!StringUtil.isEmpty(path)) {\n        WebBrowser browser = browserManager.findBrowserById(path);\n        if (browser == null) {\n          for (WebBrowser item : browserManager.getActiveBrowsers()) {\n            if (path.equals(item.getPath())) {\n              return item;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void loadState(Element element) {\n    String defaultValue = element.getAttributeValue(\"default\");\n    if (!StringUtil.isEmpty(defaultValue)) {\n      try {\n        defaultBrowser = DefaultBrowser.valueOf(defaultValue.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException e) {\n        LOG.warn(e);\n      }\n    }\n\n    List<ConfigurableWebBrowser> list = new ArrayList<ConfigurableWebBrowser>();\n    for (Element child : element.getChildren(\"browser\")) {\n      BrowserFamily family = readFamily(child.getAttributeValue(\"family\"));\n      if (family == null) {\n        continue;\n      }\n\n      UUID id = readId(child.getAttributeValue(\"id\"), family, list);\n      if (id == null) {\n        continue;\n      }\n\n      Element settingsElement = child.getChild(\"settings\");\n      BrowserSpecificSettings specificSettings = family.createBrowserSpecificSettings();\n      if (specificSettings != null && settingsElement != null) {\n        try {\n          XmlSerializer.deserializeInto(specificSettings, settingsElement);\n        }\n        catch (Exception e) {\n          LOG.warn(e);\n        }\n      }\n\n      String activeValue = child.getAttributeValue(\"active\");\n\n      String path = StringUtil.nullize(child.getAttributeValue(\"path\"), true);\n      if (path == null) {\n        path = family.getExecutionPath();\n      }\n\n      list.add(new ConfigurableWebBrowser(id,\n                                          family,\n                                          StringUtil.notNullize(child.getAttributeValue(\"name\"), family.getName()),\n                                          path,\n                                          activeValue == null || Boolean.parseBoolean(activeValue),\n                                          specificSettings));\n    }\n\n    setList(list);\n  }","id":59331,"modified_method":"@Override\n  public void loadState(Element element) {\n    String defaultValue = element.getAttributeValue(\"default\");\n    if (!StringUtil.isEmpty(defaultValue)) {\n      try {\n        defaultBrowserPolicy = DefaultBrowserPolicy.valueOf(defaultValue.toUpperCase(Locale.ENGLISH));\n      }\n      catch (IllegalArgumentException e) {\n        LOG.warn(e);\n      }\n    }\n\n    List<ConfigurableWebBrowser> list = new ArrayList<ConfigurableWebBrowser>();\n    for (Element child : element.getChildren(\"browser\")) {\n      BrowserFamily family = readFamily(child.getAttributeValue(\"family\"));\n      if (family == null) {\n        continue;\n      }\n\n      UUID id = readId(child.getAttributeValue(\"id\"), family, list);\n      if (id == null) {\n        continue;\n      }\n\n      Element settingsElement = child.getChild(\"settings\");\n      BrowserSpecificSettings specificSettings = family.createBrowserSpecificSettings();\n      if (specificSettings != null && settingsElement != null) {\n        try {\n          XmlSerializer.deserializeInto(specificSettings, settingsElement);\n        }\n        catch (Exception e) {\n          LOG.warn(e);\n        }\n      }\n\n      String activeValue = child.getAttributeValue(\"active\");\n\n      String path = StringUtil.nullize(child.getAttributeValue(\"path\"), true);\n      if (path == null) {\n        path = family.getExecutionPath();\n      }\n\n      list.add(new ConfigurableWebBrowser(id,\n                                          family,\n                                          StringUtil.notNullize(child.getAttributeValue(\"name\"), family.getName()),\n                                          path,\n                                          activeValue == null || Boolean.parseBoolean(activeValue),\n                                          specificSettings));\n    }\n\n    setList(list);\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public Element getState() {\n    Element state = new Element(\"state\");\n    if (defaultBrowser != DefaultBrowser.SYSTEM) {\n      state.setAttribute(\"default\", defaultBrowser.name().toLowerCase(Locale.ENGLISH));\n    }\n\n    for (ConfigurableWebBrowser browser : browsers) {\n      Element entry = new Element(\"browser\");\n      entry.setAttribute(\"id\", browser.getId().toString());\n      entry.setAttribute(\"name\", browser.getName());\n      entry.setAttribute(\"family\", browser.getFamily().name());\n\n      String path = browser.getPath();\n      if (path != null && !path.equals(browser.getFamily().getExecutionPath())) {\n        entry.setAttribute(\"path\", path);\n      }\n\n      if (!browser.isActive()) {\n        entry.setAttribute(\"active\", \"false\");\n      }\n\n      BrowserSpecificSettings specificSettings = browser.getSpecificSettings();\n      if (specificSettings != null) {\n        Element settingsElement = new Element(\"settings\");\n        XmlSerializer.serializeInto(specificSettings, settingsElement, new SkipDefaultValuesSerializationFilters());\n        if (!JDOMUtil.isEmpty(settingsElement)) {\n          entry.addContent(settingsElement);\n        }\n      }\n      state.addContent(entry);\n    }\n    return state;\n  }","id":59332,"modified_method":"@Override\n  public Element getState() {\n    Element state = new Element(\"state\");\n    if (defaultBrowserPolicy != DefaultBrowserPolicy.SYSTEM) {\n      state.setAttribute(\"default\", defaultBrowserPolicy.name().toLowerCase(Locale.ENGLISH));\n    }\n\n    for (ConfigurableWebBrowser browser : browsers) {\n      Element entry = new Element(\"browser\");\n      entry.setAttribute(\"id\", browser.getId().toString());\n      entry.setAttribute(\"name\", browser.getName());\n      entry.setAttribute(\"family\", browser.getFamily().name());\n\n      String path = browser.getPath();\n      if (path != null && !path.equals(browser.getFamily().getExecutionPath())) {\n        entry.setAttribute(\"path\", path);\n      }\n\n      if (!browser.isActive()) {\n        entry.setAttribute(\"active\", \"false\");\n      }\n\n      BrowserSpecificSettings specificSettings = browser.getSpecificSettings();\n      if (specificSettings != null) {\n        Element settingsElement = new Element(\"settings\");\n        XmlSerializer.serializeInto(specificSettings, settingsElement, new SkipDefaultValuesSerializationFilters());\n        if (!JDOMUtil.isEmpty(settingsElement)) {\n          entry.addContent(settingsElement);\n        }\n      }\n      state.addContent(entry);\n    }\n    return state;\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public DefaultBrowser getDefaultBrowserMode() {\n    return defaultBrowser;\n  }","id":59333,"modified_method":"@NotNull\n  public DefaultBrowserPolicy getDefaultBrowserPolicy() {\n    return defaultBrowserPolicy;\n  }","commit_id":"416fd42daecc18ce528bda05610236b7e0bae05e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public void fillCompletionVariants(CompletionParameters parameters, CompletionResultSet result) {\n    final String dummyIdentifier;\n    synchronized (myDummyIdentifierLock) { dummyIdentifier = myDummyIdentifier; }\n\n    // todo: make this configurable?\n    result.runRemainingContributors(parameters, true);\n\n    boolean isForceMode = !parameters.isAutoPopup() && !behaveAsAutoPopupForTests;\n\n    CompletionType completionType = parameters.getCompletionType();\n    if (completionType != CompletionType.BASIC) return;\n\n    PostfixExecutionContext executionContext = new PostfixExecutionContext(isForceMode, dummyIdentifier);\n\n    PostfixItemsCompletionProvider.addCompletions(parameters, result, executionContext);\n  }","id":59334,"modified_method":"@Override public void fillCompletionVariants(final CompletionParameters parameters, final CompletionResultSet result) {\n    final String dummyIdentifier;\n    synchronized (myDummyIdentifierLock) { dummyIdentifier = myDummyIdentifier; }\n\n    CompletionType completionType = parameters.getCompletionType();\n    if (completionType != CompletionType.BASIC) return;\n\n\n    LinkedHashSet<CompletionResult> completionResults = result.runRemainingContributors(parameters, true);\n\n    boolean isForceMode = !parameters.isAutoPopup() && !behaveAsAutoPopupForTests;\n\n    PostfixExecutionContext executionContext = new PostfixExecutionContext(isForceMode, dummyIdentifier);\n\n\n    if (!completionResults.isEmpty()) {\n      PostfixItemsCompletionProvider.addCompletions(parameters, result, executionContext);\n    }\n\n\n    LinkedHashSet<LookupElement> chainQualifiers = new LinkedHashSet<LookupElement>();\n    for (CompletionResult completionResult : completionResults) {\n      LookupElement lookupElement = completionResult.getLookupElement();\n      if (lookupElement instanceof JavaChainLookupElement) {\n        JavaChainLookupElement chainLookupElement = (JavaChainLookupElement) lookupElement;\n        LookupElement qualifier = chainLookupElement.getQualifier();\n        if (chainQualifiers.add(qualifier)) {\n\n          PsiType exprType = null;\n          TypedLookupItem typedLookupItem = qualifier.as(TypedLookupItem.CLASS_CONDITION_KEY);\n          if (typedLookupItem != null) exprType = typedLookupItem.getType();\n\n\n          List<LookupElement> elements = PostfixItemsCompletionProvider.addCompletions2(parameters, executionContext, exprType);\n          for (LookupElement postfixElement : elements) {\n\n            JavaChainLookupElement chainedPostfix =\n              new JavaChainLookupElement(qualifier, postfixElement) {\n                @Override public PsiType getType() { return null; }\n              };\n\n            PrefixMatcher prefixMatcher = completionResult.getPrefixMatcher();\n            if (!prefixMatcher.prefixMatches(chainedPostfix)) continue;\n            CompletionResult postfixResult = completionResult.withLookupElement(chainedPostfix);\n            result.passResult(postfixResult);\n          }\n        }\n      }\n    }\n  }","commit_id":"0f5abc426232e5b6aa83b5f32b054118da16ee94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public void handleInsert(@NotNull InsertionContext context) {\n    Document document = context.getDocument();\n    int startOffset = context.getStartOffset();\n    PsiDocumentManager documentManager = PsiDocumentManager.getInstance(context.getProject());\n\n    // note: use 'postfix' string, to break expression like '0.postfix'\n    document.replaceString(startOffset, context.getTailOffset(), myExecutionContext.dummyIdentifier);\n    context.commitDocument();\n\n    PsiFile file = context.getFile();\n    PsiElement psiElement = file.findElementAt(startOffset);\n    if (psiElement == null) return; // shit happens?\n\n    PostfixTemplatesManager manager =\n      ApplicationManager.getApplication().getComponent(PostfixTemplatesManager.class);\n    PostfixTemplateContext acceptanceContext = manager.isAvailable(psiElement, myExecutionContext);\n    if (acceptanceContext == null) return; // yes, shit happens\n\n    for (PrefixExpressionContext expression : acceptanceContext.expressions) {\n      if (myExpressionType.isInstance(expression.expression) &&\n          expression.expressionRange.equals(myExpressionRange)) {\n\n        TPsiElement newElement = handlePostfixInsert(context, expression);\n        assert newElement.isPhysical() : \"newElement.isPhysical()\";\n\n        SmartPointerManager pointerManager = SmartPointerManager.getInstance(context.getProject());\n        SmartPsiElementPointer<TPsiElement> pointer = pointerManager.createSmartPsiElementPointer(newElement);\n\n        documentManager.doPostponedOperationsAndUnblockDocument(document);\n\n        newElement = pointer.getElement();\n        if (newElement != null) {\n          postProcess(context, newElement);\n        }\n\n        break;\n      }\n    }\n  }","id":59335,"modified_method":"@Override public void handleInsert(@NotNull InsertionContext context) {\n    Document document = context.getDocument();\n    int startOffset = context.getStartOffset();\n    PsiDocumentManager documentManager = PsiDocumentManager.getInstance(context.getProject());\n\n    // note: use 'postfix' string, to break expression like '0.postfix'\n    document.replaceString(startOffset, context.getTailOffset(), myExecutionContext.dummyIdentifier);\n    context.commitDocument();\n\n    PsiFile file = context.getFile();\n    PsiElement psiElement = file.findElementAt(startOffset);\n    if (psiElement == null) return; // shit happens?\n\n    PostfixTemplatesManager manager =\n      ApplicationManager.getApplication().getComponent(PostfixTemplatesManager.class);\n    PostfixTemplateContext acceptanceContext = manager.isAvailable(psiElement, myExecutionContext);\n    if (acceptanceContext == null) return; // yes, shit happens\n\n    int index = 0;\n    for (PrefixExpressionContext expression : acceptanceContext.expressions) {\n      //if (myExpressionType.isInstance(expression.expression) &&\n      //    expression.expressionRange.equals(myExpressionRange)) {\n      if (myContextIndex == index++) {\n\n        TPsiElement newElement = handlePostfixInsert(context, expression);\n        assert newElement.isPhysical() : \"newElement.isPhysical()\";\n\n        SmartPointerManager pointerManager = SmartPointerManager.getInstance(context.getProject());\n        SmartPsiElementPointer<TPsiElement> pointer = pointerManager.createSmartPsiElementPointer(newElement);\n\n        documentManager.doPostponedOperationsAndUnblockDocument(document);\n\n        newElement = pointer.getElement();\n        if (newElement != null) {\n          postProcess(context, newElement);\n        }\n\n        break;\n      }\n    }\n  }","commit_id":"0f5abc426232e5b6aa83b5f32b054118da16ee94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PostfixLookupElement(@NotNull String lookupString, @NotNull PrefixExpressionContext context) {\n    myExecutionContext = context.parentContext.executionContext;\n    myExpressionType = context.expression.getClass();\n    myLookupString = lookupString;\n    myExpressionRange = context.expressionRange;\n  }","id":59336,"modified_method":"public PostfixLookupElement(@NotNull String lookupString, @NotNull PrefixExpressionContext context) {\n    myExecutionContext = context.parentContext.executionContext;\n    myExpressionType = context.expression.getClass();\n    myLookupString = lookupString;\n    myExpressionRange = context.expressionRange;\n\n    myContextIndex = context.parentContext.expressions.indexOf(context);\n  }","commit_id":"0f5abc426232e5b6aa83b5f32b054118da16ee94","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean isValid() {\n    final SRepository repository = ProjectHelper.toMPSProject(getProject()).getRepository();\n    final Ref<Boolean> result = new Ref<Boolean>(false);\n\n    repository.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SModel model = myModelReference.resolve(repository);\n        result.set(model != null);\n      }\n    });\n\n    return result.get();\n  }","id":59337,"modified_method":"@Override\n  public boolean isValid() {\n    if (myPsiDirectory == null || !(myPsiDirectory.isValid())) return false;\n    final SRepository repository = ProjectHelper.toMPSProject(getProject()).getRepository();\n    final Ref<Boolean> result = new Ref<Boolean>(false);\n\n    repository.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SModel model = myModelReference.resolve(repository);\n        result.set(model != null);\n      }\n    });\n\n    return result.get();\n  }","commit_id":"ef7024411cf9d7311af9bf6d9604591b821dc566","url":"https://github.com/JetBrains/MPS"},{"original_method":"void notifyPsiChanged(MPSPsiModel model, MPSPsiNodeBase node) {\n\n    PsiManager manager = model.getManager();\n    if (manager == null || !(manager instanceof PsiManagerImpl)) return;\n\n    myModificationTracker.incCounter();\n\n    // TODO: this is a dumb straightforward solution, better use beforeChage*. Or not?\n    manager.dropResolveCaches();\n\n    PsiTreeChangeEventImpl event = new PsiTreeChangeEventImpl(manager);\n    event.setParent(node != null ? node : model);\n    event.setGenericChange(false);\n\n    ((PsiManagerImpl) manager).childrenChanged(event);\n  }","id":59338,"modified_method":"void notifyPsiChanged(MPSPsiModel model, MPSPsiNodeBase node) {\n\n    if (!model.isValid()) return;\n\n    PsiManager manager = model.getManager();\n    if (manager == null || !(manager instanceof PsiManagerImpl)) return;\n\n    myModificationTracker.incCounter();\n\n    // TODO: this is a dumb straightforward solution, better use beforeChage*. Or not?\n    manager.dropResolveCaches();\n\n    PsiTreeChangeEventImpl event = new PsiTreeChangeEventImpl(manager);\n    event.setParent(node != null ? node : model);\n    event.setGenericChange(false);\n\n    ((PsiManagerImpl) manager).childrenChanged(event);\n  }","commit_id":"ef7024411cf9d7311af9bf6d9604591b821dc566","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public PsiElement getContext() {\n    VirtualFile vFile = mySeparateFile != null ?\n      mySeparateFile :\n      myModel.getSourceVirtualFile();\n    return PsiManager.getInstance(getProject()).findFile(vFile);\n  }","id":59339,"modified_method":"@Override\n  public PsiElement getContext() {\n    VirtualFile vFile = mySeparateFile != null ?\n      mySeparateFile :\n      myModel.getSourceVirtualFile();\n    return vFile.isValid() ? PsiManager.getInstance(getProject()).findFile(vFile) : null;\n  }","commit_id":"ef7024411cf9d7311af9bf6d9604591b821dc566","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public boolean isValid() {\n    final SRepository repository = ProjectHelper.toMPSProject(getProject()).getRepository();\n    final Ref<Boolean> result = new Ref<Boolean>(false);\n    final SNodeReference nodeRef = getSNodeReference();\n    if (nodeRef == null) return false;\n\n    repository.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SNode node = nodeRef.resolve(repository);\n        result.set(node != null);\n      }\n    });\n\n    return result.get();\n  }","id":59340,"modified_method":"@Override\n  public boolean isValid() {\n    if (!myModel.isValid() || mySeparateFile != null && !mySeparateFile.isValid()) return false;\n    final SRepository repository = ProjectHelper.toMPSProject(getProject()).getRepository();\n    final Ref<Boolean> result = new Ref<Boolean>(false);\n    final SNodeReference nodeRef = getSNodeReference();\n    if (nodeRef == null) return false;\n\n    repository.getModelAccess().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        SNode node = nodeRef.resolve(repository);\n        result.set(node != null);\n      }\n    });\n\n    return result.get();\n  }","commit_id":"ef7024411cf9d7311af9bf6d9604591b821dc566","url":"https://github.com/JetBrains/MPS"},{"original_method":"void reload(SModel model) {\n    // happens under Idea read-lock (via MPSPsiProvider.getPsi(SModel)), so we have to guard consistent state\n    // as there may be multiple readers\n    synchronized (LOCK) {\n      clearChildren();\n      for (SNode root : model.getRootNodes()) {\n        String rootName = null;\n        rootName = extractName(root);\n        MPSPsiRootNode rootNode = null;\n        if(model.getSource() instanceof FilePerRootDataSource) {\n          final VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(((FilePerRootDataSource)model.getSource()).getFile(rootName + MPSExtentions.DOT_MODEL_ROOT));\n          PsiFile psiFile = getManager().findFile(virtualFile);\n          rootNode = psiFile != null && psiFile instanceof MPSPsiRootNode\n            ? (MPSPsiRootNode)psiFile :\n            new MPSPsiRootNode(root.getNodeId(), rootName, getManager(), virtualFile);\n        } else {\n          rootNode = new MPSPsiRootNode(root.getNodeId(), rootName, getManager());\n        }\n        rootNode.setModel(this);\n\n        addChildLast(rootNode);\n        if(rootNode.getChildren().length == 0)\n          rootNode.addChildLast(convert(root));\n        else {\n          rootNode.updateChildren();\n          fillNodes(rootNode);\n        }\n      }\n\n      enumerateNodes();\n\n      // TODO use ModelUtil\n      DataSource source = model.getSource();\n      if (source instanceof FileDataSource) {\n        File file = new File(((FileDataSource) source).getFile().getPath());\n        VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(file);\n        this.mySourceVirtualFile = vfile;\n      } else if(source instanceof FilePerRootDataSource) {\n        this.mySourceVirtualFile = VirtualFileUtils.getVirtualFile(((FilePerRootDataSource) source).getFolder()).findChild(MPSExtentions.DOT_MODEL_HEADER);\n      }\n      if(getSourceVirtualFile() == null || getSourceVirtualFile().getParent() == null)\n        myPsiDirectory = null;\n      else\n        myPsiDirectory = new PsiDirectoryImpl((PsiManagerImpl)myManager, getSourceVirtualFile().getParent());\n      /*MPSModuleRepository.getInstance().getModelAccess().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          mySourceVirtualFile = ModelUtil.getFileByModel(myModelReference.resolve(MPSModuleRepository.getInstance()));\n        }\n      });*/\n    }\n  }","id":59341,"modified_method":"void reload(SModel model) {\n    // happens under Idea read-lock (via MPSPsiProvider.getPsi(SModel)), so we have to guard consistent state\n    // as there may be multiple readers\n    synchronized (LOCK) {\n      clearChildren();\n      for (SNode root : model.getRootNodes()) {\n        String rootName = null;\n        rootName = extractName(root);\n        MPSPsiRootNode rootNode = null;\n        if(model.getSource() instanceof FilePerRootDataSource) {\n          final IFile iFile = ((FilePerRootDataSource) model.getSource()).getFile(rootName + MPSExtentions.DOT_MODEL_ROOT);\n          VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(iFile);\n          if(virtualFile == null) virtualFile = VirtualFileUtils.getVirtualFile(iFile.getPath());\n          PsiFile psiFile = virtualFile != null ? getManager().findFile(virtualFile) : null;\n          rootNode = psiFile != null && psiFile instanceof MPSPsiRootNode\n            ? (MPSPsiRootNode)psiFile :\n            new MPSPsiRootNode(root.getNodeId(), rootName, getManager(), virtualFile);\n        } else {\n          rootNode = new MPSPsiRootNode(root.getNodeId(), rootName, getManager());\n        }\n        rootNode.setModel(this);\n\n        addChildLast(rootNode);\n        if(rootNode.getChildren().length == 0)\n          rootNode.addChildLast(convert(root));\n        else {\n          rootNode.updateChildren();\n          fillNodes(rootNode);\n        }\n      }\n\n      enumerateNodes();\n\n      // TODO use ModelUtil\n      DataSource source = model.getSource();\n      if (source instanceof FileDataSource) {\n        File file = new File(((FileDataSource) source).getFile().getPath());\n        VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(file);\n        this.mySourceVirtualFile = vfile;\n      } else if(source instanceof FilePerRootDataSource) {\n        this.mySourceVirtualFile = VirtualFileUtils.getVirtualFile(((FilePerRootDataSource) source).getFolder()).findChild(MPSExtentions.DOT_MODEL_HEADER);\n      }\n      if(getSourceVirtualFile() == null || getSourceVirtualFile().getParent() == null)\n        myPsiDirectory = null;\n      else\n        myPsiDirectory = new PsiDirectoryImpl((PsiManagerImpl)myManager, getSourceVirtualFile().getParent());\n      /*MPSModuleRepository.getInstance().getModelAccess().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          mySourceVirtualFile = ModelUtil.getFileByModel(myModelReference.resolve(MPSModuleRepository.getInstance()));\n        }\n      });*/\n    }\n  }","commit_id":"264c941d16ea9e7699f2ed5ebe9d7815f23b40c3","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Looks for file with specified <code>fileName<\/code> in caches or anywhere in the project in following order:\n   * <ul>\n   * <li>[1] matching <code>id<\/code><\/li>\n   * <li>[2] in <code>myFileNameToFilesMap<\/code> matching <code>packageName<\/code><\/li>\n   * <li>[3] in <code>myFileNameToPathsMap<\/code> matching <code>packageName<\/code><\/li>\n   * <li>[4] in the whole project with libraries matching <code>packageName<\/code><\/li>\n   * <li>[5] in <code>myFileNameToPathsMap<\/code><\/li>\n   * <li>[6] in the whole project with libraries<\/li>\n   * <\/ul>\n   *\n   * @param fileName\n   * @param packageName used as auxiliary information if there are more than one file with the same name.\n   *                    <code>null<\/code> means that we don't have information about package\n   * @param id\n   */\n  @Nullable\n  VirtualFile findFileByNameOrId(@NotNull String fileName, @Nullable String packageName, @Nullable String id) {\n    // [1]\n    if (id != null) {\n      ensureFilePathToIdMapIsUpToDate();\n      List<String> value = myFilePathToIdMap.getKeysByValue(id);\n      if (value != null && value.size() > 0) {\n        final String path = value.get(0);\n        final VirtualFile file = doFindFileByPath(path);\n        if (file != null) return file;\n\n        log(\"Cannot find file \" + fileName + \" by id \" + id);\n        if (packageName == null) {\n          final int srcIndex = path.indexOf(SRC_PATH_ELEMENT);\n          if (srcIndex > 0) {\n            packageName = StringUtil.getPackageName(path.substring(srcIndex + SRC_PATH_ELEMENT.length()), '/').replace('/', '.');\n          }\n        }\n      }\n    }\n\n    return findFile(fileName, packageName);\n  }","id":59342,"modified_method":"/**\n   * Looks for file with specified <code>fileName<\/code> in caches or anywhere in the project in following order:\n   * <ul>\n   * <li>[1] matching <code>id<\/code>. If the file is not within the project - try to find if its copy exists within the project<\/li>\n   * <li>[2] in <code>myFileNameToPathsMap<\/code> matching <code>packageName<\/code>. If the file is not within the project - try to find if its copy exists within the project<\/li>\n   * <li>[3] in the whole project with libraries matching <code>packageName<\/code> (prefer in BC scope)<\/li>\n   * <li>[4] in the whole project with libraries (prefer BC scope)<\/li>\n   * <\/ul>\n   *\n   * @param fileName\n   * @param packageName used as auxiliary information if there are more than one file with the same name.\n   *                    <code>null<\/code> means that we don't have information about package\n   * @param id\n   */\n  @Nullable\n  VirtualFile findFileByNameOrId(final @NotNull String fileName, @Nullable String packageName, final @Nullable String id) {\n    // [1]\n    if (id != null) {\n      ensureFilePathToIdMapIsUpToDate();\n      final List<String> value = myFilePathToIdMap.getKeysByValue(id);\n\n      if (value != null && value.size() > 0) {\n        final String path = value.get(0);\n        final VirtualFile fileById = LocalFileSystem.getInstance().findFileByPath(path);\n\n        if (packageName == null) {\n          // try to guess package name\n          final String mavenStyleSrc = \"/src/main/flex/\";\n          int srcIndex = path.indexOf(mavenStyleSrc);\n          if (srcIndex > 0) {\n            packageName = StringUtil.getPackageName(path.substring(srcIndex + mavenStyleSrc.length()), '/').replace('/', '.');\n          }\n          else {\n            srcIndex = path.indexOf(SRC_PATH_ELEMENT);\n            if (srcIndex > 0) {\n              packageName = StringUtil.getPackageName(path.substring(srcIndex + SRC_PATH_ELEMENT.length()), '/').replace('/', '.');\n            }\n          }\n        }\n\n        if (fileById != null) {\n          return getThisOrSimilarFileInProject(fileById, packageName);\n        }\n      }\n    }\n\n    if (\"<null>\".equals(fileName)) return null;\n\n    return packageName == null ? findFile(fileName) : findFile(fileName, packageName);\n  }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"/**\n   * @see #findFileByNameOrId(String, String, String)\n   */\n  @Nullable\n  private VirtualFile findFile(final String shortName) {\n    // [5]\n    final Collection<String> paths = myFileNameToPathsMap.get(shortName);\n    if (paths != null && !paths.isEmpty()) {\n      final VirtualFile file = doFindFileByPath(paths.iterator().next());\n      if (file != null) {\n        addToMap(myFileNameToFilesMap, shortName, file);\n        return file;\n      }\n    }\n\n    // [6]\n    final Collection<VirtualFile> files =\n      ApplicationManager.getApplication().runReadAction(new NullableComputable<Collection<VirtualFile>>() {\n        public Collection<VirtualFile> compute() {\n          final Project project = getSession().getProject();\n          return FilenameIndex.getVirtualFilesByName(project, shortName, GlobalSearchScope.allScope(project));\n        }\n      });\n\n    if (files != null && !files.isEmpty()) {\n      final VirtualFile file = files.iterator().next();\n      addToMap(myFileNameToFilesMap, shortName, file);\n      return file;\n    }\n\n    return null;\n  }","id":59343,"modified_method":"/**\n   * @see #findFileByNameOrId(String, String, String)\n   */\n  @Nullable\n  private VirtualFile findFile(final String fileName) {\n    // [4]\n    final GlobalSearchScope bcScope = FlexUtils.getModuleWithDependenciesAndLibrariesScope(myModule, myBC, myFlexUnit);\n    Collection<VirtualFile> files = getFilesByName(getSession().getProject(), bcScope, fileName);\n\n    if (files.isEmpty()) {\n      files = getFilesByName(getSession().getProject(), GlobalSearchScope.allScope(getSession().getProject()), fileName);\n    }\n\n    if (!fileName.isEmpty()) {\n      return files.iterator().next();\n    }\n\n    // last chance to find file out of project\n    final Collection<String> paths = myFileNameToPathsMap.get(fileName);\n    if (paths != null) {\n      for (final String path : paths) {\n        final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(path);\n        if (file != null) {\n          return file;\n        }\n      }\n    }\n\n    return null;\n  }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"/**\n   * @see #findFileByNameOrId(String, String, String)\n   */\n  @Nullable\n  private VirtualFile findFile(final String shortName, @Nullable String packageName) {\n    if (\"<null>\".equals(shortName)) return null;\n\n    if (packageName == null) {\n      return findFile(shortName);\n    }\n\n    final String packagePath = packageName.replace(\".\", \"/\");\n\n    // [2]\n    final Collection<VirtualFile> cachedFiles = myFileNameToFilesMap.get(shortName);\n    if (cachedFiles != null && !cachedFiles.isEmpty()) {\n      for (final VirtualFile cachedFile : cachedFiles) {\n        if (cachedFile != null) {\n          final String path = cachedFile.getPath();\n          int lastSlashIndex = path.lastIndexOf(\"/\");\n          final String folderPath = lastSlashIndex > 0 ? path.substring(0, lastSlashIndex) : \"\";\n          if (folderPath.endsWith(packagePath)) {\n            return cachedFile;\n          }\n        }\n      }\n    }\n\n    // [3]\n    final Collection<String> paths = myFileNameToPathsMap.get(shortName);\n    if (paths != null && !paths.isEmpty()) {\n      for (final String path : paths) {\n        int lastSlashIndex = path.lastIndexOf(\"/\");\n        final String folderPath = lastSlashIndex > 0 ? path.substring(0, lastSlashIndex) : \"\";\n        if (folderPath.endsWith(packagePath)) {\n          final VirtualFile file = doFindFileByPath(path);\n          if (file != null) {\n            addToMap(myFileNameToFilesMap, shortName, file);\n            return file;\n          }\n          break;\n        }\n      }\n    }\n\n    // [4]\n    final Collection<VirtualFile> files =\n      ApplicationManager.getApplication().runReadAction(new NullableComputable<Collection<VirtualFile>>() {\n        public Collection<VirtualFile> compute() {\n          final Project project = getSession().getProject();\n          return FilenameIndex.getVirtualFilesByName(project, shortName, GlobalSearchScope.allScope(project));\n        }\n      });\n\n    if (files != null && !files.isEmpty()) {\n      for (final VirtualFile file : files) {\n        if (file != null) {\n          final String path = file.getPath();\n          int lastSlashIndex = path.lastIndexOf(\"/\");\n          final String folderPath = lastSlashIndex > 0 ? path.substring(0, lastSlashIndex) : \"\";\n          if (folderPath.endsWith(packagePath)) {\n            addToMap(myFileNameToFilesMap, shortName, file);\n            return file;\n          }\n        }\n      }\n    }\n\n    return findFile(shortName);\n  }","id":59344,"modified_method":"/**\n   * @see #findFileByNameOrId(String, String, String)\n   */\n  @Nullable\n  private VirtualFile findFile(final String fileName, @NotNull String packageName) {\n    final String packagePath = packageName.replace('.', '/');\n\n    // [2]\n    final Collection<String> paths = myFileNameToPathsMap.get(fileName);\n\n    if (paths != null) {\n      for (final String path : paths) {\n        final String folderPath = PathUtil.getParentPath(path);\n        if (folderPath.endsWith(packagePath)) {\n          final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(path);\n          if (file != null) {\n            return getThisOrSimilarFileInProject(file, packageName);\n          }\n        }\n      }\n    }\n\n    // [3]\n    final GlobalSearchScope bcScope = FlexUtils.getModuleWithDependenciesAndLibrariesScope(myModule, myBC, myFlexUnit);\n    Collection<VirtualFile> files = getFilesByName(getSession().getProject(), bcScope, fileName);\n\n    VirtualFile file = getFileMatchingPackageName(getSession().getProject(), files, packageName);\n    if (file == null) {\n      files = getFilesByName(getSession().getProject(), GlobalSearchScope.allScope(getSession().getProject()), fileName);\n      file = getFileMatchingPackageName(getSession().getProject(), files, packageName);\n    }\n\n    return file != null ? file : findFile(fileName);\n  }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private void processOneCommandLoop() throws IOException, InterruptedException {\n    assert Thread.currentThread() == myDebuggerManagerThread;\n    final DebuggerCommand command = postCommand();\n    if (command == null) return;\n    boolean explicitlyContinueRead = false;\n\n    do {\n      final CommandOutputProcessingType outputProcessingType = command.getOutputProcessingMode();\n      if (outputProcessingType == CommandOutputProcessingType.NO_PROCESSING ||\n          (outputProcessingType == CommandOutputProcessingType.DEFAULT_PROCESSING && !reader.hasSomeDataPending())) {\n        return;\n      }\n\n      if (myCheckForUnexpectedStartupStop && !(command instanceof DumpOutputCommand)) {\n        myCheckForUnexpectedStartupStop = false;\n      }\n\n      @NonNls String commandOutput = null;\n      try {\n        commandOutput = command.read(this);\n      }\n      catch (IOException e) {\n        if (!(command instanceof QuitCommand)) {\n          throw e;\n        }\n      }\n\n      if (command instanceof QuitCommand) {\n        Thread.currentThread().interrupt();  // request to finish\n      }\n      if (commandOutput == null) break;\n\n      commandOutput = commandOutput.trim();\n      log(commandOutput);\n\n      if (outputProcessingType == CommandOutputProcessingType.SPECIAL_PROCESSING) {\n        log(\"Processed by \" + command);\n        if (command.onTextAvailable(commandOutput) == CommandOutputProcessingMode.DONE) break;\n        explicitlyContinueRead = true;\n        continue;\n      }\n\n      ResponseLineIterator iterator = new ResponseLineIterator(commandOutput);\n\n      boolean toInsertContinue = false;\n      boolean encounteredNonsuspendableBreakpoint = false;\n      int index;\n\n      while (iterator.hasNext()) {\n        final String line = iterator.next();\n\n        if (line.indexOf(\"Additional ActionScript code has been loaded\") != -1) {\n          if (!suspended) reader.readLine(false);\n          myFileIdIsUpToDate = false;\n        }\n        else if ((index = line.indexOf(BREAKPOINT_MARKER)) != -1 && line.indexOf(\" created\") == -1) { // TODO: move to break point handler\n          // Breakpoint 1, aaa() at A.mxml:14\n          try {\n            final int from = index + BREAKPOINT_MARKER.length();\n\n            // Breakpoint 1, aaa() at A.mxml:14\n            // Breakpoint 2: file ConfigurationService.as\n            // Breakpoint 3 at 0xFFF\n            int endOfBreakpointIndexPosition = line.indexOf(',', from);\n            final int colonIndex = line.indexOf(':', from);\n            final int spaceIndex = line.indexOf(' ', from);\n\n            if (endOfBreakpointIndexPosition != -1) {\n              if (colonIndex != -1) {\n                endOfBreakpointIndexPosition = Math.min(colonIndex, endOfBreakpointIndexPosition);\n              }\n              if (spaceIndex != -1) {\n                endOfBreakpointIndexPosition = Math.min(spaceIndex, endOfBreakpointIndexPosition);\n              }\n              index = Integer.parseInt(line.substring(from, endOfBreakpointIndexPosition));\n              final XLineBreakpoint<XBreakpointProperties> breakpoint = myBreakpointsHandler.getBreakpointByIndex(index);\n\n              if (breakpoint != null) {\n                FlexSuspendContext suspendContext = new FlexSuspendContext(new FlexStackFrame(this, breakpoint.getSourcePosition()));\n                boolean suspend = getSession().breakpointReached(breakpoint, suspendContext);\n                final VirtualFile file = breakpoint.getSourcePosition().getFile();\n\n                final String shortName = file.getName();\n                addToMap(myFileNameToFilesMap, shortName, file);\n\n                if (!suspend) {\n                  encounteredNonsuspendableBreakpoint = true;\n                  toInsertContinue = true;\n                }\n              }\n              else {\n                insertCommand(myBreakpointsHandler.new RemoveBreakpointCommand(index, breakpoint));  // run to cursor break point\n              }\n            }\n          }\n          catch (NumberFormatException ex) {\n            log(ex);\n          }\n        }\n        else if (line.length() > 0 &&\n                 Character.isDigit(line.charAt(0))) {  // we are on new location: e.g. \" 119           trace('\\x30 \\123')\"\n          if (!encounteredNonsuspendableBreakpoint) insertCommand(new DumpSourceLocationCommand(this));\n        }\n        else if (handleStdResponse(line, iterator)) {\n        }\n        else if (line.startsWith(RESOLVED_BREAKPOINT_MARKER)) { // TODO: move to break point handler\n          // Resolved breakpoint 1 to aaa() at A.mxml:14\n          final String breakPointNumber =\n            line.substring(RESOLVED_BREAKPOINT_MARKER.length(), line.indexOf(' ', RESOLVED_BREAKPOINT_MARKER.length()));\n          myBreakpointsHandler.updateBreakpointStatusToVerified(breakPointNumber);\n        }\n        else if (line.startsWith(ATTEMPTING_TO_RESOLVE_BREAKPOINT_MARKER)) {  // TODO: move to break point handler\n          int breakpointId = Integer.parseInt(line.substring(ATTEMPTING_TO_RESOLVE_BREAKPOINT_MARKER.length(), line.indexOf(',')));\n          final XLineBreakpoint<XBreakpointProperties> breakpoint = myBreakpointsHandler.getBreakpointByIndex(breakpointId);\n\n          if (iterator.hasNext() && iterator.getNext().indexOf(\"no executable code\") != -1) {\n            iterator.next();\n\n            myBreakpointsHandler.updateBreakpointStatusToInvalid(breakpoint);\n            toInsertContinue = true;\n          }\n          else if (iterator.hasNext() && iterator.getNext().indexOf(AMBIGUOUS_MATCHING_FILE_NAMES) != -1) {\n            iterator.next();\n            iterator.next();\n\n            while (iterator.hasNext() && iterator.getNext().indexOf(\"#\") != -1) {\n              iterator.next();\n            }\n\n            if (getFileId(breakpoint.getSourcePosition().getFile().getPath()) != null) {\n              final XBreakpointHandler handler = getBreakpointHandlers()[0];\n              handler.unregisterBreakpoint(breakpoint, false);\n              handler.registerBreakpoint(breakpoint);\n            }\n\n            toInsertContinue = true;\n          }\n        }\n        else if (line.startsWith(\"Set additional breakpoints\")) {\n          //Set additional breakpoints as desired, and then type 'continue'.\n          toInsertContinue = true;    // TODO: move to break point handler\n        }\n        else if (line.startsWith(\"Player session terminated\")) {\n          handleProbablyUnexpectedStop(line);\n        }\n        else if (line.indexOf(\"Execution halted\") != -1) {\n          if (!getSession().isPaused()) {\n            getSession().pause();\n          }\n        }\n      }\n\n      if (toInsertContinue) insertCommand(new ContinueCommand());\n    }\n    while (explicitlyContinueRead || reader.hasSomeDataPending());\n  }","id":59345,"modified_method":"private void processOneCommandLoop() throws IOException, InterruptedException {\n    assert Thread.currentThread() == myDebuggerManagerThread;\n    final DebuggerCommand command = postCommand();\n    if (command == null) return;\n    boolean explicitlyContinueRead = false;\n\n    do {\n      final CommandOutputProcessingType outputProcessingType = command.getOutputProcessingMode();\n      if (outputProcessingType == CommandOutputProcessingType.NO_PROCESSING ||\n          (outputProcessingType == CommandOutputProcessingType.DEFAULT_PROCESSING && !reader.hasSomeDataPending())) {\n        return;\n      }\n\n      if (myCheckForUnexpectedStartupStop && !(command instanceof DumpOutputCommand)) {\n        myCheckForUnexpectedStartupStop = false;\n      }\n\n      @NonNls String commandOutput = null;\n      try {\n        commandOutput = command.read(this);\n      }\n      catch (IOException e) {\n        if (!(command instanceof QuitCommand)) {\n          throw e;\n        }\n      }\n\n      if (command instanceof QuitCommand) {\n        Thread.currentThread().interrupt();  // request to finish\n      }\n      if (commandOutput == null) break;\n\n      commandOutput = commandOutput.trim();\n      log(commandOutput);\n\n      if (outputProcessingType == CommandOutputProcessingType.SPECIAL_PROCESSING) {\n        log(\"Processed by \" + command);\n        if (command.onTextAvailable(commandOutput) == CommandOutputProcessingMode.DONE) break;\n        explicitlyContinueRead = true;\n        continue;\n      }\n\n      ResponseLineIterator iterator = new ResponseLineIterator(commandOutput);\n\n      boolean toInsertContinue = false;\n      boolean encounteredNonsuspendableBreakpoint = false;\n      int index;\n\n      while (iterator.hasNext()) {\n        final String line = iterator.next();\n\n        if (line.contains(\"Additional ActionScript code has been loaded\")) {\n          if (!suspended) reader.readLine(false);\n          myFileIdIsUpToDate = false;\n        }\n        else if ((index = line.indexOf(BREAKPOINT_MARKER)) != -1 && !line.contains(\" created\")) { // TODO: move to break point handler\n          // Breakpoint 1, aaa() at A.mxml:14\n          try {\n            final int from = index + BREAKPOINT_MARKER.length();\n\n            // Breakpoint 1, aaa() at A.mxml:14\n            // Breakpoint 2: file ConfigurationService.as\n            // Breakpoint 3 at 0xFFF\n            int endOfBreakpointIndexPosition = line.indexOf(',', from);\n            final int colonIndex = line.indexOf(':', from);\n            final int spaceIndex = line.indexOf(' ', from);\n\n            if (endOfBreakpointIndexPosition != -1) {\n              if (colonIndex != -1) {\n                endOfBreakpointIndexPosition = Math.min(colonIndex, endOfBreakpointIndexPosition);\n              }\n              if (spaceIndex != -1) {\n                endOfBreakpointIndexPosition = Math.min(spaceIndex, endOfBreakpointIndexPosition);\n              }\n              index = Integer.parseInt(line.substring(from, endOfBreakpointIndexPosition));\n              final XLineBreakpoint<XBreakpointProperties> breakpoint = myBreakpointsHandler.getBreakpointByIndex(index);\n\n              if (breakpoint != null) {\n                FlexSuspendContext suspendContext = new FlexSuspendContext(new FlexStackFrame(this, breakpoint.getSourcePosition()));\n                boolean suspend = getSession().breakpointReached(breakpoint, suspendContext);\n\n                if (!suspend) {\n                  encounteredNonsuspendableBreakpoint = true;\n                  toInsertContinue = true;\n                }\n              }\n              else {\n                insertCommand(myBreakpointsHandler.new RemoveBreakpointCommand(index, breakpoint));  // run to cursor break point\n              }\n            }\n          }\n          catch (NumberFormatException ex) {\n            log(ex);\n          }\n        }\n        else if (line.length() > 0 &&\n                 Character.isDigit(line.charAt(0))) {  // we are on new location: e.g. \" 119           trace('\\x30 \\123')\"\n          if (!encounteredNonsuspendableBreakpoint) insertCommand(new DumpSourceLocationCommand(this));\n        }\n        else if (handleStdResponse(line, iterator)) {\n        }\n        else if (line.startsWith(RESOLVED_BREAKPOINT_MARKER)) { // TODO: move to break point handler\n          // Resolved breakpoint 1 to aaa() at A.mxml:14\n          final String breakPointNumber =\n            line.substring(RESOLVED_BREAKPOINT_MARKER.length(), line.indexOf(' ', RESOLVED_BREAKPOINT_MARKER.length()));\n          myBreakpointsHandler.updateBreakpointStatusToVerified(breakPointNumber);\n        }\n        else if (line.startsWith(ATTEMPTING_TO_RESOLVE_BREAKPOINT_MARKER)) {  // TODO: move to break point handler\n          int breakpointId = Integer.parseInt(line.substring(ATTEMPTING_TO_RESOLVE_BREAKPOINT_MARKER.length(), line.indexOf(',')));\n          final XLineBreakpoint<XBreakpointProperties> breakpoint = myBreakpointsHandler.getBreakpointByIndex(breakpointId);\n\n          if (iterator.hasNext() && iterator.getNext().contains(\"no executable code\")) {\n            iterator.next();\n\n            myBreakpointsHandler.updateBreakpointStatusToInvalid(breakpoint);\n            toInsertContinue = true;\n          }\n          else if (iterator.hasNext() && iterator.getNext().contains(AMBIGUOUS_MATCHING_FILE_NAMES)) {\n            iterator.next();\n            iterator.next();\n\n            while (iterator.hasNext() && iterator.getNext().contains(\"#\")) {\n              iterator.next();\n            }\n\n            if (getFileId(breakpoint.getSourcePosition().getFile().getPath()) != null) {\n              final XBreakpointHandler handler = getBreakpointHandlers()[0];\n              handler.unregisterBreakpoint(breakpoint, false);\n              handler.registerBreakpoint(breakpoint);\n            }\n\n            toInsertContinue = true;\n          }\n        }\n        else if (line.startsWith(\"Set additional breakpoints\")) {\n          //Set additional breakpoints as desired, and then type 'continue'.\n          toInsertContinue = true;    // TODO: move to break point handler\n        }\n        else if (line.startsWith(\"Player session terminated\")) {\n          handleProbablyUnexpectedStop(line);\n        }\n        else if (line.contains(\"Execution halted\")) {\n          if (!getSession().isPaused()) {\n            getSession().pause();\n          }\n        }\n      }\n\n      if (toInsertContinue) insertCommand(new ContinueCommand());\n    }\n    while (explicitlyContinueRead || reader.hasSomeDataPending());\n  }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n    CommandOutputProcessingMode onTextAvailable(String s) {\n      StringBuilder builder = new StringBuilder(s.length());\n      StringTokenizer tokenizer = new StringTokenizer(s, \"\\r\\n\");\n\n      while (tokenizer.hasMoreTokens()) {\n        String next = tokenizer.nextToken();\n        if (next.indexOf(\"type 'continue'\") == -1) {\n          builder.append(next + \"\\n\");\n        }\n      }\n\n      s = builder.toString();\n\n      final ResponseLineIterator iterator = new ResponseLineIterator(s);\n      while (iterator.hasNext()) {\n        final String line = iterator.next();\n        if (line.startsWith(\"[SWF]\") || line.startsWith(\"[UnloadSWF]\")) {\n          if (!FilterSwfLoadUnloadMessagesAction.isFilterEnabled(getSession().getProject())) {\n            myConsoleView.print(line + \"\\n\", ConsoleViewContentType.SYSTEM_OUTPUT);\n          }\n        }\n        else {\n          myConsoleView.print(line + \"\\n\", ConsoleViewContentType.SYSTEM_OUTPUT);\n        }\n      }\n\n      if (s.indexOf(\"Another Flash debugger is probably running\") != -1) {\n        reportProblem(s);\n        getProcessHandler().detachProcess();\n        return CommandOutputProcessingMode.DONE;\n      }\n      if (s.indexOf(\"Failed to connect\") != -1) {\n        reportProblem(s);\n        handleProbablyUnexpectedStop(s);\n        return CommandOutputProcessingMode.DONE;\n      }\n\n      if (s.indexOf(WAITING_PLAYER_MARKER) != -1) {\n        fdbWaitingForPlayerStateReached = true;\n        getSession().rebuildViews();\n        notifyFdbWaitingForPlayerStateReached();\n\n        try {\n          launchDebuggedApplication();\n        }\n        catch (IOException e) {\n          reportProblem(s);\n          handleProbablyUnexpectedStop(s);\n          return CommandOutputProcessingMode.DONE;\n        }\n      }\n      else {\n        startupDone = (s.indexOf(\"Player connected; session starting.\") != -1);\n        if (startupDone) {\n          if (connectToRunningFlashPlayerMode) {\n            final Balloon balloon = ToolWindowManager.getInstance(getSession().getProject()).getToolWindowBalloon(ToolWindowId.DEBUG);\n            if (balloon != null) {\n              balloon.hide();\n            }\n          }\n\n          getSession().rebuildViews();\n          return CommandOutputProcessingMode.DONE;\n        }\n      }\n\n      return CommandOutputProcessingMode.PROCEEDING;\n    }","id":59346,"modified_method":"@Override\n    CommandOutputProcessingMode onTextAvailable(String s) {\n      StringBuilder builder = new StringBuilder(s.length());\n      StringTokenizer tokenizer = new StringTokenizer(s, \"\\r\\n\");\n\n      while (tokenizer.hasMoreTokens()) {\n        String next = tokenizer.nextToken();\n        if (!next.contains(\"type 'continue'\")) {\n          builder.append(next).append(\"\\n\");\n        }\n      }\n\n      s = builder.toString();\n\n      final ResponseLineIterator iterator = new ResponseLineIterator(s);\n      while (iterator.hasNext()) {\n        final String line = iterator.next();\n        if (line.startsWith(\"[SWF]\") || line.startsWith(\"[UnloadSWF]\")) {\n          if (!FilterSwfLoadUnloadMessagesAction.isFilterEnabled(getSession().getProject())) {\n            myConsoleView.print(line + \"\\n\", ConsoleViewContentType.SYSTEM_OUTPUT);\n          }\n        }\n        else {\n          myConsoleView.print(line + \"\\n\", ConsoleViewContentType.SYSTEM_OUTPUT);\n        }\n      }\n\n      if (s.contains(\"Another Flash debugger is probably running\")) {\n        reportProblem(s);\n        getProcessHandler().detachProcess();\n        return CommandOutputProcessingMode.DONE;\n      }\n      if (s.contains(\"Failed to connect\")) {\n        reportProblem(s);\n        handleProbablyUnexpectedStop(s);\n        return CommandOutputProcessingMode.DONE;\n      }\n\n      if (s.contains(WAITING_PLAYER_MARKER)) {\n        fdbWaitingForPlayerStateReached = true;\n        getSession().rebuildViews();\n        notifyFdbWaitingForPlayerStateReached();\n\n        try {\n          launchDebuggedApplication();\n        }\n        catch (IOException e) {\n          reportProblem(s);\n          handleProbablyUnexpectedStop(s);\n          return CommandOutputProcessingMode.DONE;\n        }\n      }\n      else {\n        startupDone = (s.contains(\"Player connected; session starting.\"));\n        if (startupDone) {\n          if (connectToRunningFlashPlayerMode) {\n            final Balloon balloon = ToolWindowManager.getInstance(getSession().getProject()).getToolWindowBalloon(ToolWindowId.DEBUG);\n            if (balloon != null) {\n              balloon.hide();\n            }\n          }\n\n          getSession().rebuildViews();\n          return CommandOutputProcessingMode.DONE;\n        }\n      }\n\n      return CommandOutputProcessingMode.PROCEEDING;\n    }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private void processFrames(String s, XStackFrameContainer container, int frameIndex) {\n      String[] frames = splitStackFrames(s);\n      final XStackFrame[] allFrames = new XStackFrame[frames.length];\n      int i = 0;\n\n      final FlexDebugProcess flexDebugProcess = myTopFrame.getDebugProcess();\n\n      if (frames.length == 0) {\n        container.addStackFrames(Collections.<XStackFrame>emptyList(), true); // empty value\n        return;\n      }\n      String stackFrame = frames[i];\n      myTopFrame.setScope(extractScope(stackFrame));\n      myTopFrame.setFrameIndex(0);\n      allFrames[i++] = myTopFrame;\n\n      while (i < frames.length) {\n        stackFrame = frames[i];\n        VirtualFile file = null;\n\n        final Trinity<String, String, Integer> fileNameAndIndexAndLine = getFileNameAndIndexAndLine(frames[i]);\n        final String fileName = fileNameAndIndexAndLine.first;\n        final String fileId = fileNameAndIndexAndLine.second;\n        int line = fileNameAndIndexAndLine.third;\n\n        if (!StringUtil.isEmpty(fileName)) {\n          String packageName = null;\n          final int classMarkerPosition = stackFrame.indexOf(FlexStackFrame.CLASS_MARKER);\n          final int packageEndPosition = stackFrame.indexOf(\"::\", classMarkerPosition);\n          if (classMarkerPosition > 0 && packageEndPosition > classMarkerPosition) {\n            packageName = stackFrame.substring(classMarkerPosition + FlexStackFrame.CLASS_MARKER.length(), packageEndPosition);\n          }\n\n          file = flexDebugProcess.findFileByNameOrId(fileName, packageName, fileId);\n\n          if (file == null) {\n            // todo find position in decompiled code\n          }\n        }\n\n        final FlexStackFrame flexStackFrame =\n          new FlexStackFrame(flexDebugProcess,\n                             file != null ? XDebuggerUtil.getInstance().createPosition(file, line > 0 ? line - 1 : line) : null);\n        allFrames[i] = flexStackFrame;\n        flexStackFrame.setScope(extractScope(stackFrame));\n        flexStackFrame.setFrameIndex(i);\n        i++;\n      }\n\n      container.addStackFrames(Arrays.asList(allFrames).subList(frameIndex, allFrames.length), true);\n    }","id":59347,"modified_method":"private void processFrames(String s, XStackFrameContainer container, int frameIndex) {\n      String[] frames = splitStackFrames(s);\n      final XStackFrame[] allFrames = new XStackFrame[frames.length];\n      int i = 0;\n\n      final FlexDebugProcess flexDebugProcess = myTopFrame.getDebugProcess();\n\n      if (frames.length == 0) {\n        container.addStackFrames(Collections.<XStackFrame>emptyList(), true); // empty value\n        return;\n      }\n      String stackFrame = frames[i];\n      myTopFrame.setScope(extractScope(stackFrame));\n      myTopFrame.setFrameIndex(0);\n      allFrames[i++] = myTopFrame;\n\n      while (i < frames.length) {\n        stackFrame = frames[i];\n        VirtualFile file = null;\n\n        final Trinity<String, String, Integer> fileNameAndIndexAndLine = getFileNameAndIndexAndLine(frames[i]);\n        final String fileName = fileNameAndIndexAndLine.first;\n        final String fileId = fileNameAndIndexAndLine.second;\n        int line = fileNameAndIndexAndLine.third;\n\n        if (!StringUtil.isEmpty(fileName)) {\n          final String packageName;\n          final int classMarkerIndex = stackFrame.indexOf(FlexStackFrame.CLASS_MARKER);\n          final int packageEndIndex = stackFrame.indexOf(\"::\", classMarkerIndex);\n          final int classEndIndex = stackFrame.indexOf(\"'\", classMarkerIndex);\n\n          if (classMarkerIndex > 0 && packageEndIndex > classMarkerIndex && packageEndIndex < classEndIndex) {\n            packageName = stackFrame.substring(classMarkerIndex + FlexStackFrame.CLASS_MARKER.length(), packageEndIndex);\n          }\n          else {\n            packageName = \"\";\n          }\n\n          file = flexDebugProcess.findFileByNameOrId(fileName, packageName, fileId);\n\n          if (file == null) {\n            // todo find position in decompiled code\n          }\n        }\n\n        final FlexStackFrame flexStackFrame =\n          new FlexStackFrame(flexDebugProcess,\n                             file != null ? XDebuggerUtil.getInstance().createPosition(file, line > 0 ? line - 1 : line) : null);\n        allFrames[i] = flexStackFrame;\n        flexStackFrame.setScope(extractScope(stackFrame));\n        flexStackFrame.setFrameIndex(i);\n        i++;\n      }\n\n      container.addStackFrames(Arrays.asList(allFrames).subList(frameIndex, allFrames.length), true);\n    }","commit_id":"0643fdee193793d044e5ae953c4aef6b141268cf","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public final int getCategoricalId(int cid, int val) {\n    if (_catLvls != null) { // some levels are ignored?\n      int c = Arrays.binarySearch(_catLvls[cid], val);\n      if (c >= 0)\n        return c + _catOffsets[cid];\n    } else if (_useAllFactorLevels)\n      return val + _catOffsets[cid];\n    return val + _catOffsets[cid] - 1;\n  }","id":59348,"modified_method":"public final int getCategoricalId(int cid, int val) {\n    final int c;\n    if (_catLvls != null)  // some levels are ignored?\n      c = Arrays.binarySearch(_catLvls[cid], val);\n    else c = val - (_useAllFactorLevels?0:1);\n    return c >= 0?(c + _catOffsets[cid]):-1;\n  }","commit_id":"05baad58b7b3d62083e070aac310b884b29c39ea","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override\n    protected void flushData()\n    {\n        seekToChunkStart(); // why is this necessary? seems like it should always be at chunk start in normal operation\n\n        int compressedLength;\n        try\n        {\n            // compressing data with buffer re-use\n            compressedLength = compressor.compress(buffer, 0, validBufferBytes, compressed, 0);\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(\"Compression exception\", e); // shouldn't happen\n        }\n\n        originalSize += validBufferBytes;\n        compressedSize += compressedLength;\n\n        try\n        {\n            // write an offset of the newly written chunk to the index file\n            metadataWriter.addOffset(chunkOffset);\n            chunkCount++;\n\n            assert compressedLength <= compressed.buffer.length;\n\n            // write data itself\n            out.write(compressed.buffer, 0, compressedLength);\n            // write corresponding checksum\n            crcMetadata.append(compressed.buffer, 0, compressedLength);\n            lastFlushOffset += compressedLength + 4;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, getPath());\n        }\n\n        // next chunk should be written right after current + length of the checksum (int)\n        chunkOffset += compressedLength + 4;\n    }","id":59349,"modified_method":"@Override\n    protected void flushData()\n    {\n        seekToChunkStart(); // why is this necessary? seems like it should always be at chunk start in normal operation\n\n        int compressedLength;\n        try\n        {\n            // compressing data with buffer re-use\n            compressedLength = compressor.compress(buffer, 0, validBufferBytes, compressed, 0);\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(\"Compression exception\", e); // shouldn't happen\n        }\n\n        originalSize += validBufferBytes;\n        compressedSize += compressedLength;\n\n        try\n        {\n            // write an offset of the newly written chunk to the index file\n            metadataWriter.addOffset(chunkOffset);\n            chunkCount++;\n\n            assert compressedLength <= compressed.buffer.length;\n\n            // write data itself\n            out.write(compressed.buffer, 0, compressedLength);\n            // write corresponding checksum\n            crcMetadata.append(compressed.buffer, 0, compressedLength);\n            lastFlushOffset += compressedLength + 4;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, getPath());\n        }\n\n        // next chunk should be written right after current + length of the checksum (int)\n        chunkOffset += compressedLength + 4;\n        if (runPostFlush != null)\n            runPostFlush.run();\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public IndexSummary build(IPartitioner partitioner, DecoratedKey exclusiveUpperBound)\n    {\n        assert keys.size() > 0;\n        assert keys.size() == positions.size();\n\n        int length;\n        if (exclusiveUpperBound == null)\n            length = keys.size();\n        else\n            length = Collections.binarySearch(keys, exclusiveUpperBound);\n\n        assert length > 0;\n\n        long offheapSize = this.offheapSize;\n        if (length < keys.size())\n            for (int i = length ; i < keys.size() ; i++)\n                offheapSize -= keys.get(i).getKey().remaining() + TypeSizes.NATIVE.sizeof(positions.get(i));\n\n        // first we write out the position in the *summary* for each key in the summary,\n        // then we write out (key, actual index position) pairs\n        Memory memory = Memory.allocate(offheapSize + (length * 4));\n        int idxPosition = 0;\n        int keyPosition = length * 4;\n        for (int i = 0; i < length; i++)\n        {\n            // write the position of the actual entry in the index summary (4 bytes)\n            memory.setInt(idxPosition, keyPosition);\n            idxPosition += TypeSizes.NATIVE.sizeof(keyPosition);\n\n            // write the key\n            ByteBuffer keyBytes = keys.get(i).getKey();\n            memory.setBytes(keyPosition, keyBytes);\n            keyPosition += keyBytes.remaining();\n\n            // write the position in the actual index file\n            long actualIndexPosition = positions.get(i);\n            memory.setLong(keyPosition, actualIndexPosition);\n            keyPosition += TypeSizes.NATIVE.sizeof(actualIndexPosition);\n        }\n        assert keyPosition == offheapSize + (length * 4);\n        int sizeAtFullSampling = (int) Math.ceil(keysWritten / (double) minIndexInterval);\n        return new IndexSummary(partitioner, memory, length, sizeAtFullSampling, minIndexInterval, samplingLevel);\n    }","id":59350,"modified_method":"public IndexSummary build(IPartitioner partitioner, DecoratedKey lastIntervalKey)\n    {\n        assert keys.size() > 0;\n        assert keys.size() == positions.size();\n\n        int length;\n        if (lastIntervalKey == null)\n            length = keys.size();\n        else // since it's an inclusive upper bound, this should never match exactly\n            length = -1 -Collections.binarySearch(keys, lastIntervalKey);\n\n        assert length > 0;\n\n        long offheapSize = this.offheapSize;\n        if (length < keys.size())\n            for (int i = length ; i < keys.size() ; i++)\n                offheapSize -= keys.get(i).getKey().remaining() + TypeSizes.NATIVE.sizeof(positions.get(i));\n\n        // first we write out the position in the *summary* for each key in the summary,\n        // then we write out (key, actual index position) pairs\n        Memory memory = Memory.allocate(offheapSize + (length * 4));\n        int idxPosition = 0;\n        int keyPosition = length * 4;\n        for (int i = 0; i < length; i++)\n        {\n            // write the position of the actual entry in the index summary (4 bytes)\n            memory.setInt(idxPosition, keyPosition);\n            idxPosition += TypeSizes.NATIVE.sizeof(keyPosition);\n\n            // write the key\n            ByteBuffer keyBytes = keys.get(i).getKey();\n            memory.setBytes(keyPosition, keyBytes);\n            keyPosition += keyBytes.remaining();\n\n            // write the position in the actual index file\n            long actualIndexPosition = positions.get(i);\n            memory.setLong(keyPosition, actualIndexPosition);\n            keyPosition += TypeSizes.NATIVE.sizeof(actualIndexPosition);\n        }\n        assert keyPosition == offheapSize + (length * 4);\n        int sizeAtFullSampling = (int) Math.ceil(keysWritten / (double) minIndexInterval);\n        return new IndexSummary(partitioner, memory, length, sizeAtFullSampling, minIndexInterval, samplingLevel);\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public IndexSummaryBuilder maybeAddEntry(DecoratedKey decoratedKey, long indexPosition)\n    {\n        if (keysWritten % minIndexInterval == 0)\n        {\n            // see if we should skip this key based on our sampling level\n            boolean shouldSkip = false;\n            for (int start : startPoints)\n            {\n                if ((indexIntervalMatches - start) % BASE_SAMPLING_LEVEL == 0)\n                {\n                    shouldSkip = true;\n                    break;\n                }\n            }\n\n            if (!shouldSkip)\n            {\n                keys.add(getMinimalKey(decoratedKey));\n                offheapSize += decoratedKey.getKey().remaining();\n                positions.add(indexPosition);\n                offheapSize += TypeSizes.NATIVE.sizeof(indexPosition);\n            }\n\n            indexIntervalMatches++;\n        }\n        keysWritten++;\n\n        return this;\n    }","id":59351,"modified_method":"public IndexSummaryBuilder maybeAddEntry(DecoratedKey decoratedKey, long indexStart)\n    {\n        return maybeAddEntry(decoratedKey, indexStart, 0, 0);\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public IndexSummaryBuilder(long expectedKeys, int minIndexInterval, int samplingLevel)\n    {\n        this.samplingLevel = samplingLevel;\n        this.startPoints = Downsampling.getStartPoints(BASE_SAMPLING_LEVEL, samplingLevel);\n\n        long maxExpectedEntries = expectedKeys / minIndexInterval;\n        if (maxExpectedEntries > Integer.MAX_VALUE)\n        {\n            // that's a _lot_ of keys, and a very low min index interval\n            int effectiveMinInterval = (int) Math.ceil((double) Integer.MAX_VALUE / expectedKeys);\n            maxExpectedEntries = expectedKeys / effectiveMinInterval;\n            assert maxExpectedEntries <= Integer.MAX_VALUE : maxExpectedEntries;\n            logger.warn(\"min_index_interval of {} is too low for {} expected keys; using interval of {} instead\",\n                        minIndexInterval, expectedKeys, effectiveMinInterval);\n            this.minIndexInterval = effectiveMinInterval;\n        }\n        else\n        {\n            this.minIndexInterval = minIndexInterval;\n        }\n\n        // for initializing data structures, adjust our estimates based on the sampling level\n        maxExpectedEntries = (maxExpectedEntries * samplingLevel) / BASE_SAMPLING_LEVEL;\n        positions = new ArrayList<>((int)maxExpectedEntries);\n        keys = new ArrayList<>((int)maxExpectedEntries);\n    }","id":59352,"modified_method":"public IndexSummaryBuilder(long expectedKeys, int minIndexInterval, int samplingLevel)\n    {\n        this.samplingLevel = samplingLevel;\n        this.startPoints = Downsampling.getStartPoints(BASE_SAMPLING_LEVEL, samplingLevel);\n\n        long maxExpectedEntries = expectedKeys / minIndexInterval;\n        if (maxExpectedEntries > Integer.MAX_VALUE)\n        {\n            // that's a _lot_ of keys, and a very low min index interval\n            int effectiveMinInterval = (int) Math.ceil((double) Integer.MAX_VALUE / expectedKeys);\n            maxExpectedEntries = expectedKeys / effectiveMinInterval;\n            assert maxExpectedEntries <= Integer.MAX_VALUE : maxExpectedEntries;\n            logger.warn(\"min_index_interval of {} is too low for {} expected keys; using interval of {} instead\",\n                        minIndexInterval, expectedKeys, effectiveMinInterval);\n            this.minIndexInterval = effectiveMinInterval;\n        }\n        else\n        {\n            this.minIndexInterval = minIndexInterval;\n        }\n\n        // for initializing data structures, adjust our estimates based on the sampling level\n        maxExpectedEntries = (maxExpectedEntries * samplingLevel) / BASE_SAMPLING_LEVEL;\n        positions = new ArrayList<>((int)maxExpectedEntries);\n        keys = new ArrayList<>((int)maxExpectedEntries);\n        // if we're downsampling we may not use index 0\n        setNextSamplePosition(-minIndexInterval);\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"IndexWriter(long keyCount)\n        {\n            indexFile = SequentialWriter.open(new File(descriptor.filenameFor(Component.PRIMARY_INDEX)));\n            builder = SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());\n            summary = new IndexSummaryBuilder(keyCount, metadata.getMinIndexInterval(), Downsampling.BASE_SAMPLING_LEVEL);\n            bf = FilterFactory.getFilter(keyCount, metadata.getBloomFilterFpChance(), true);\n        }","id":59353,"modified_method":"IndexWriter(long keyCount, final SequentialWriter dataFile)\n        {\n            indexFile = SequentialWriter.open(new File(descriptor.filenameFor(Component.PRIMARY_INDEX)));\n            builder = SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());\n            summary = new IndexSummaryBuilder(keyCount, metadata.getMinIndexInterval(), Downsampling.BASE_SAMPLING_LEVEL);\n            bf = FilterFactory.getFilter(keyCount, metadata.getBloomFilterFpChance(), true);\n            // register listeners to be alerted when the data files are flushed\n            indexFile.setPostFlushListener(new Runnable()\n            {\n                public void run()\n                {\n                    summary.markIndexSynced(indexFile.getLastFlushOffset());\n                }\n            });\n            dataFile.setPostFlushListener(new Runnable()\n            {\n                public void run()\n                {\n                    summary.markDataSynced(dataFile.getLastFlushOffset());\n                }\n            });\n        }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public void append(DecoratedKey key, RowIndexEntry indexEntry)\n        {\n            bf.add(key.getKey());\n            long indexPosition = indexFile.getFilePointer();\n            try\n            {\n                ByteBufferUtil.writeWithShortLength(key.getKey(), indexFile.stream);\n                metadata.comparator.rowIndexEntrySerializer().serialize(indexEntry, indexFile.stream);\n            }\n            catch (IOException e)\n            {\n                throw new FSWriteError(e, indexFile.getPath());\n            }\n\n            if (logger.isTraceEnabled())\n                logger.trace(\"wrote index entry: \" + indexEntry + \" at \" + indexPosition);\n\n            summary.maybeAddEntry(key, indexPosition);\n            builder.addPotentialBoundary(indexPosition);\n        }","id":59354,"modified_method":"public void append(DecoratedKey key, RowIndexEntry indexEntry, long dataEnd)\n        {\n            bf.add(key.getKey());\n            long indexStart = indexFile.getFilePointer();\n            try\n            {\n                ByteBufferUtil.writeWithShortLength(key.getKey(), indexFile.stream);\n                metadata.comparator.rowIndexEntrySerializer().serialize(indexEntry, indexFile.stream);\n            }\n            catch (IOException e)\n            {\n                throw new FSWriteError(e, indexFile.getPath());\n            }\n            long indexEnd = indexFile.getFilePointer();\n\n            if (logger.isTraceEnabled())\n                logger.trace(\"wrote index entry: \" + indexEntry + \" at \" + indexStart);\n\n            summary.maybeAddEntry(key, indexStart, indexEnd, dataEnd);\n            builder.addPotentialBoundary(indexStart);\n        }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"private void afterAppend(DecoratedKey decoratedKey, long dataPosition, RowIndexEntry index)\n    {\n        sstableMetadataCollector.addKey(decoratedKey.getKey());\n        lastWrittenKey = decoratedKey;\n        last = lastWrittenKey;\n        if (first == null)\n            first = lastWrittenKey;\n\n        if (logger.isTraceEnabled())\n            logger.trace(\"wrote \" + decoratedKey + \" at \" + dataPosition);\n        iwriter.append(decoratedKey, index);\n        dbuilder.addPotentialBoundary(dataPosition);\n    }","id":59355,"modified_method":"private void afterAppend(DecoratedKey decoratedKey, long dataPosition, RowIndexEntry index)\n    {\n        sstableMetadataCollector.addKey(decoratedKey.getKey());\n        lastWrittenKey = decoratedKey;\n        last = lastWrittenKey;\n        if (first == null)\n            first = lastWrittenKey;\n\n        if (logger.isTraceEnabled())\n            logger.trace(\"wrote \" + decoratedKey + \" at \" + dataPosition);\n        iwriter.append(decoratedKey, index, dataPosition);\n        dbuilder.addPotentialBoundary(dataPosition);\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * @param row\n     * @return null if the row was compacted away entirely; otherwise, the PK index entry for this row\n     */\n    public RowIndexEntry append(AbstractCompactedRow row)\n    {\n        long currentPosition = beforeAppend(row.key);\n        RowIndexEntry entry;\n        try\n        {\n            entry = row.write(currentPosition, dataFile.stream);\n            if (entry == null)\n                return null;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, dataFile.getPath());\n        }\n        sstableMetadataCollector.update(dataFile.getFilePointer() - currentPosition, row.columnStats());\n        afterAppend(row.key, currentPosition, entry);\n        return entry;\n    }","id":59356,"modified_method":"/**\n     * @param row\n     * @return null if the row was compacted away entirely; otherwise, the PK index entry for this row\n     */\n    public RowIndexEntry append(AbstractCompactedRow row)\n    {\n        long startPosition = beforeAppend(row.key);\n        RowIndexEntry entry;\n        try\n        {\n            entry = row.write(startPosition, dataFile.stream);\n            if (entry == null)\n                return null;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, dataFile.getPath());\n        }\n        long endPosition = dataFile.getFilePointer();\n        sstableMetadataCollector.update(endPosition - startPosition, row.columnStats());\n        afterAppend(row.key, endPosition, entry);\n        return entry;\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public SSTableWriter(String filename,\n                         long keyCount,\n                         long repairedAt,\n                         CFMetaData metadata,\n                         IPartitioner partitioner,\n                         MetadataCollector sstableMetadataCollector)\n    {\n        super(Descriptor.fromFilename(filename),\n              components(metadata),\n              metadata,\n              partitioner);\n        this.repairedAt = repairedAt;\n        iwriter = new IndexWriter(keyCount);\n\n        if (compression)\n        {\n            dataFile = SequentialWriter.open(getFilename(),\n                                             descriptor.filenameFor(Component.COMPRESSION_INFO),\n                                             metadata.compressionParameters(),\n                                             sstableMetadataCollector);\n            dbuilder = SegmentedFile.getCompressedBuilder((CompressedSequentialWriter) dataFile);\n        }\n        else\n        {\n            dataFile = SequentialWriter.open(new File(getFilename()), new File(descriptor.filenameFor(Component.CRC)));\n            dbuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());\n        }\n\n        this.sstableMetadataCollector = sstableMetadataCollector;\n    }","id":59357,"modified_method":"public SSTableWriter(String filename,\n                         long keyCount,\n                         long repairedAt,\n                         CFMetaData metadata,\n                         IPartitioner partitioner,\n                         MetadataCollector sstableMetadataCollector)\n    {\n        super(Descriptor.fromFilename(filename),\n              components(metadata),\n              metadata,\n              partitioner);\n        this.repairedAt = repairedAt;\n\n        if (compression)\n        {\n            dataFile = SequentialWriter.open(getFilename(),\n                                             descriptor.filenameFor(Component.COMPRESSION_INFO),\n                                             metadata.compressionParameters(),\n                                             sstableMetadataCollector);\n            dbuilder = SegmentedFile.getCompressedBuilder((CompressedSequentialWriter) dataFile);\n        }\n        else\n        {\n            dataFile = SequentialWriter.open(new File(getFilename()), new File(descriptor.filenameFor(Component.CRC)));\n            dbuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());\n        }\n        iwriter = new IndexWriter(keyCount, dataFile);\n\n        this.sstableMetadataCollector = sstableMetadataCollector;\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public SSTableReader openEarly(long maxDataAge)\n    {\n        StatsMetadata sstableMetadata = (StatsMetadata) sstableMetadataCollector.finalizeMetadata(partitioner.getClass().getCanonicalName(),\n                                                  metadata.getBloomFilterFpChance(),\n                                                  repairedAt).get(MetadataType.STATS);\n\n        // find the max (exclusive) readable key\n        DecoratedKey exclusiveUpperBoundOfReadableIndex = iwriter.getMaxReadableKey(0);\n        if (exclusiveUpperBoundOfReadableIndex == null)\n            return null;\n\n        Descriptor link = makeTmpLinks();\n        // open the reader early, giving it a FINAL descriptor type so that it is indistinguishable for other consumers\n        SegmentedFile ifile = iwriter.builder.complete(link.filenameFor(Component.PRIMARY_INDEX), FinishType.EARLY);\n        SegmentedFile dfile = dbuilder.complete(link.filenameFor(Component.DATA), FinishType.EARLY);\n        SSTableReader sstable = SSTableReader.internalOpen(descriptor.asType(Descriptor.Type.FINAL),\n                                                           components, metadata,\n                                                           partitioner, ifile,\n                                                           dfile, iwriter.summary.build(partitioner, exclusiveUpperBoundOfReadableIndex),\n                                                           iwriter.bf.sharedCopy(), maxDataAge, sstableMetadata, SSTableReader.OpenReason.EARLY);\n\n        // now it's open, find the ACTUAL last readable key (i.e. for which the data file has also been flushed)\n        sstable.first = getMinimalKey(first);\n        sstable.last = getMinimalKey(exclusiveUpperBoundOfReadableIndex);\n        DecoratedKey inclusiveUpperBoundOfReadableData = iwriter.getMaxReadableKey(1);\n        if (inclusiveUpperBoundOfReadableData == null)\n        {\n            // Prevent leaving tmplink files on disk\n            sstable.selfRef().release();\n            return null;\n        }\n        int offset = 2;\n        while (true)\n        {\n            RowIndexEntry indexEntry = sstable.getPosition(inclusiveUpperBoundOfReadableData, SSTableReader.Operator.GT);\n            if (indexEntry != null && indexEntry.position <= dataFile.getLastFlushOffset())\n                break;\n            inclusiveUpperBoundOfReadableData = iwriter.getMaxReadableKey(offset++);\n            if (inclusiveUpperBoundOfReadableData == null)\n            {\n                sstable.selfRef().release();\n                return null;\n            }\n        }\n        sstable.last = getMinimalKey(inclusiveUpperBoundOfReadableData);\n        return sstable;\n    }","id":59358,"modified_method":"public SSTableReader openEarly(long maxDataAge)\n    {\n        StatsMetadata sstableMetadata = (StatsMetadata) sstableMetadataCollector.finalizeMetadata(partitioner.getClass().getCanonicalName(),\n                                                  metadata.getBloomFilterFpChance(),\n                                                  repairedAt).get(MetadataType.STATS);\n\n        // find the max (exclusive) readable key\n        IndexSummaryBuilder.ReadableBoundary boundary = iwriter.getMaxReadable();\n        if (boundary == null)\n            return null;\n\n        assert boundary.indexLength > 0 && boundary.dataLength > 0;\n        Descriptor link = makeTmpLinks();\n        // open the reader early, giving it a FINAL descriptor type so that it is indistinguishable for other consumers\n        SegmentedFile ifile = iwriter.builder.complete(link.filenameFor(Component.PRIMARY_INDEX), FinishType.EARLY);\n        SegmentedFile dfile = dbuilder.complete(link.filenameFor(Component.DATA), FinishType.EARLY);\n        SSTableReader sstable = SSTableReader.internalOpen(descriptor.asType(Descriptor.Type.FINAL),\n                                                           components, metadata,\n                                                           partitioner, ifile,\n                                                           dfile, iwriter.summary.build(partitioner, boundary.lastKey),\n                                                           iwriter.bf.sharedCopy(), maxDataAge, sstableMetadata, SSTableReader.OpenReason.EARLY);\n\n        // now it's open, find the ACTUAL last readable key (i.e. for which the data file has also been flushed)\n        sstable.first = getMinimalKey(first);\n        sstable.last = getMinimalKey(boundary.lastKey);\n        return sstable;\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"DecoratedKey getMaxReadableKey(int offset)\n        {\n            long maxIndexLength = indexFile.getLastFlushOffset();\n            return summary.getMaxReadableKey(maxIndexLength, offset);\n        }","id":59359,"modified_method":"IndexSummaryBuilder.ReadableBoundary getMaxReadable()\n        {\n            return summary.getLastReadableBoundary();\n        }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Override this method instead of overriding flush()\n     * @throws FSWriteError on any I/O error.\n     */\n    protected void flushData()\n    {\n        try\n        {\n            out.write(buffer, 0, validBufferBytes);\n            lastFlushOffset += validBufferBytes;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, getPath());\n        }\n    }","id":59360,"modified_method":"/**\n     * Override this method instead of overriding flush()\n     * @throws FSWriteError on any I/O error.\n     */\n    protected void flushData()\n    {\n        try\n        {\n            out.write(buffer, 0, validBufferBytes);\n            lastFlushOffset += validBufferBytes;\n        }\n        catch (IOException e)\n        {\n            throw new FSWriteError(e, getPath());\n        }\n        if (runPostFlush != null)\n            runPostFlush.run();\n    }","commit_id":"4eb9fa78bd233f5f9b901dd677636842b351330b","url":"https://github.com/apache/cassandra"},{"original_method":"public void testViewContactMyContactsCC() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\tselenium.waitForVisible(\n\t\t\t\"//nav/ul/li[contains(.,'Contacts Center')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Contacts Center')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Contacts Center\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_contactsportlet_name']\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//select[@id='_1_WAR_contactsportlet_filterBy']\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_contactsportlet_filterBy']\",\n\t\t\tRuntimeVariables.replace(\"My Contacts\"));\n\t\tThread.sleep(1000);\n\t\tselenium.waitForText(\"//div[contains(@class, 'lfr-contact-name')]/a\",\n\t\t\t\"Social01 Office01 Contact01\");\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 Contact01\"),\n\t\t\tselenium.getText(\"//div[contains(@class, 'lfr-contact-name')]/a\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"socialofficecontact01@liferay.com\"),\n\t\t\tselenium.getText(\"//div[contains(@class, 'lfr-contact-extra')]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"View my 1 contacts.\"),\n\t\t\tselenium.getText(\"link=View my 1 contacts.\"));\n\t}","id":59361,"modified_method":"public void testViewContactMyContactsCC() throws Exception {\n\t\tselenium.selectWindow(\"null\");\n\t\tselenium.selectFrame(\"relative=top\");\n\t\tselenium.open(\"/user/joebloggs/so/dashboard/\");\n\t\tselenium.waitForVisible(\n\t\t\t\"//nav/ul/li[contains(.,'Contacts Center')]/a/span\");\n\t\tselenium.clickAt(\"//nav/ul/li[contains(.,'Contacts Center')]/a/span\",\n\t\t\tRuntimeVariables.replace(\"Contacts Center\"));\n\t\tselenium.waitForPageToLoad(\"30000\");\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//input[@id='_1_WAR_contactsportlet_name']\"));\n\t\tselenium.type(\"//input[@id='_1_WAR_contactsportlet_name']\",\n\t\t\tRuntimeVariables.replace(\"social\"));\n\t\tselenium.waitForText(\"//div[contains(@class,'lfr-contact-name')]/a\",\n\t\t\t\"Social01 Office01 Contact01\");\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 Contact01\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-name')]/a)[contains(.,'Social01 Office01 Contact01')]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"socialofficecontact01@liferay.com\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-extra')])[contains(.,'socialofficecontact01@liferay.com')]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"User01, Social01\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-name')]/a)[contains(.,'User01, Social01')]\"));\n\t\tassertEquals(RuntimeVariables.replace(\"socialoffice01@liferay.com\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-extra')])[contains(.,'socialoffice01@liferay.com')]\"));\n\t\tassertTrue(selenium.isVisible(\n\t\t\t\t\"//select[@id='_1_WAR_contactsportlet_filterBy']\"));\n\t\tselenium.select(\"//select[@id='_1_WAR_contactsportlet_filterBy']\",\n\t\t\tRuntimeVariables.replace(\"My Contacts\"));\n\t\tThread.sleep(1000);\n\t\tselenium.waitForElementNotPresent(\n\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-name')]/a)[contains(.,'User01, Social01')]\");\n\t\tassertEquals(RuntimeVariables.replace(\"Social01 Office01 Contact01\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-name')]/a)[contains(.,'Social01 Office01 Contact01')]\"));\n\t\tassertEquals(RuntimeVariables.replace(\n\t\t\t\t\"socialofficecontact01@liferay.com\"),\n\t\t\tselenium.getText(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-extra')])[contains(.,'socialofficecontact01@liferay.com')]\"));\n\t\tassertTrue(selenium.isElementNotPresent(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-name')]/a)[contains(.,'User01, Social01')]\"));\n\t\tassertTrue(selenium.isElementNotPresent(\n\t\t\t\t\"xPath=(//div[contains(@class,'lfr-contact-extra')])[contains(.,'socialoffice01@liferay.com')]\"));\n\t\tassertFalse(selenium.isTextPresent(\"User01, Social01\"));\n\t\tassertFalse(selenium.isTextPresent(\"socialoffice01@liferay.com\"));\n\t\tassertEquals(RuntimeVariables.replace(\"View my 1 contacts.\"),\n\t\t\tselenium.getText(\"link=View my 1 contacts.\"));\n\t}","commit_id":"f2e8f3bdb9c2d19159362c0cf78705aaf524566d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected ServerSocket createSocket(URI uri) throws IOException, NoSuchAlgorithmException,\n            KeyManagementException\n    {\n        HttpsConnector cnn = null;\n        ServerSocketFactory ssf = null;\n        cnn = (HttpsConnector)connector;\n        // An SSLContext is an environment for implementing JSSE\n        // It is used to create a ServerSocketFactory\n        SSLContext sslc = SSLContext.getInstance(cnn.getSslType());\n\n        // Initialize the SSLContext to work with our key managers\n        sslc.init(cnn.getKeyManagerFactory().getKeyManagers(), null, null);\n\n        ssf = sslc.getServerSocketFactory();\n\n        String host = uri.getHost();\n        InetAddress inetAddress = null;\n        int backlog = cnn.getBacklog();\n        if (host == null || host.length() == 0) {\n            host = \"localhost\";\n        }\n\n        SSLServerSocket serverSocket = null;\n        inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            serverSocket = (SSLServerSocket)ssf.createServerSocket(uri.getPort(), backlog);\n        }\n        else {\n            serverSocket = (SSLServerSocket)ssf.createServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n        // Authenticate the client?\n        serverSocket.setNeedClientAuth(cnn.isRequireClientAuthentication());\n        return serverSocket;\n    }","id":59362,"modified_method":"protected ServerSocket createSocket(URI uri) throws IOException, NoSuchAlgorithmException,\n            KeyManagementException\n    {\n        HttpsConnector cnn = null;\n        ServerSocketFactory ssf = null;\n        cnn = (HttpsConnector)connector;\n        // An SSLContext is an environment for implementing JSSE\n        // It is used to create a ServerSocketFactory\n        SSLContext sslc = SSLContext.getInstance(cnn.getSslType());\n\n        // Initialize the SSLContext to work with our key managers\n        sslc.init(cnn.getKeyManagerFactory().getKeyManagers(), null, null);\n\n        ssf = sslc.getServerSocketFactory();\n\n        String host = StringUtils.defaultIfEmpty(uri.getHost(), \"localhost\");\n        int backlog = cnn.getBacklog();\n        SSLServerSocket serverSocket = null;\n\n        InetAddress inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            serverSocket = (SSLServerSocket)ssf.createServerSocket(uri.getPort(), backlog);\n        }\n        else {\n            serverSocket = (SSLServerSocket)ssf.createServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n        // Authenticate the client?\n        serverSocket.setNeedClientAuth(cnn.isRequireClientAuthentication());\n        return serverSocket;\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"public void doConnect() throws Exception\n    {\n        httpServer = new Server();\n        SocketListener socketListener = new SocketListener(new InetAddrPort(endpoint.getEndpointURI()\n                .getPort()));\n        // Todo\n        // socketListener.setMaxIdleTimeMs();\n        // socketListener.setMaxThreads();\n        // socketListener.setMinThreads();\n        httpServer.addListener(socketListener);\n\n        String path = endpoint.getEndpointURI().getPath();\n        if (path == null || \"\".equals(path)) {\n            path = \"/\";\n        }\n\n        if (!path.endsWith(\"/\")) {\n            path += \"/\";\n        }\n\n        HttpContext context = httpServer.getContext(path);\n        context.setRequestLog(null);\n\n        ServletHandler handler = new ServletHandler();\n        if (\"rest\".equals(endpoint.getEndpointURI().getScheme())) {\n            handler.addServlet(\"MuleRESTReceiverServlet\", path + \"*\", MuleRESTReceiverServlet.class\n                    .getName());\n        }\n        else {\n            handler.addServlet(\"JettyReceiverServlet\", path + \"*\", JettyReceiverServlet.class.getName());\n        }\n\n        context.addHandler(handler);\n        context.setAttribute(\"messageReceiver\", this);\n\n    }","id":59363,"modified_method":"public void doConnect() throws Exception\n    {\n        httpServer = new Server();\n        SocketListener socketListener = new SocketListener(new InetAddrPort(endpoint.getEndpointURI()\n                .getPort()));\n        // Todo\n        // socketListener.setMaxIdleTimeMs();\n        // socketListener.setMaxThreads();\n        // socketListener.setMinThreads();\n        httpServer.addListener(socketListener);\n\n        String path = endpoint.getEndpointURI().getPath();\n        if (StringUtils.isEmpty(path)) {\n            path = \"/\";\n        }\n\n        if (!path.endsWith(\"/\")) {\n            path += \"/\";\n        }\n\n        HttpContext context = httpServer.getContext(path);\n        context.setRequestLog(null);\n\n        ServletHandler handler = new ServletHandler();\n        if (\"rest\".equals(endpoint.getEndpointURI().getScheme())) {\n            handler.addServlet(\"MuleRESTReceiverServlet\", path + \"*\", MuleRESTReceiverServlet.class\n                    .getName());\n        }\n        else {\n            handler.addServlet(\"JettyReceiverServlet\", path + \"*\", JettyReceiverServlet.class.getName());\n        }\n\n        context.addHandler(handler);\n        context.setAttribute(\"messageReceiver\", this);\n\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"protected ServerSocket createSocket(URI uri) throws IOException, NoSuchAlgorithmException, KeyManagementException\n    {\n        SslConnector cnn = null;\n        ServerSocketFactory ssf = null;\n        cnn = (SslConnector) connector;\n        // An SSLContext is an environment for implementing JSSE\n        // It is used to create a ServerSocketFactory\n        SSLContext sslc = SSLContext.getInstance(cnn.getProtocol().toLowerCase());\n\n        // Initialize the SSLContext to work with our key managers\n        sslc.init(cnn.getKeyManagerFactory().getKeyManagers(), null, null);\n\n        ssf = sslc.getServerSocketFactory();\n\n        String host = uri.getHost();\n        InetAddress inetAddress = null;\n        int backlog = cnn.getBacklog();\n        if (host == null || host.length() == 0) {\n            host = \"localhost\";\n        }\n\n        SSLServerSocket serverSocket = null;\n        inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            serverSocket = (SSLServerSocket) ssf.createServerSocket(uri.getPort(), backlog);\n        } else {\n            serverSocket = (SSLServerSocket) ssf.createServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n        // Authenticate the client?\n        serverSocket.setNeedClientAuth(cnn.isRequireClientAuthentication());\n        return serverSocket;\n\n    }","id":59364,"modified_method":"protected ServerSocket createSocket(URI uri) throws IOException, NoSuchAlgorithmException, KeyManagementException\n    {\n        SslConnector cnn = null;\n        ServerSocketFactory ssf = null;\n        cnn = (SslConnector) connector;\n        // An SSLContext is an environment for implementing JSSE\n        // It is used to create a ServerSocketFactory\n        SSLContext sslc = SSLContext.getInstance(cnn.getProtocol().toLowerCase());\n\n        // Initialize the SSLContext to work with our key managers\n        sslc.init(cnn.getKeyManagerFactory().getKeyManagers(), null, null);\n\n        ssf = sslc.getServerSocketFactory();\n\n        String host = StringUtils.defaultIfEmpty(uri.getHost(), \"localhost\");\n        int backlog = cnn.getBacklog();\n        SSLServerSocket serverSocket = null;\n\n        InetAddress inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            serverSocket = (SSLServerSocket) ssf.createServerSocket(uri.getPort(), backlog);\n        } else {\n            serverSocket = (SSLServerSocket) ssf.createServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n        // Authenticate the client?\n        serverSocket.setNeedClientAuth(cnn.isRequireClientAuthentication());\n        return serverSocket;\n\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"protected ServerSocket createSocket(URI uri) throws Exception {\n        String host = uri.getHost();\n        int backlog = ((TcpConnector) connector).getBacklog();\n        if (host == null || host.length() == 0) {\n            host = \"localhost\";\n        }\n        InetAddress inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            return new ServerSocket(uri.getPort(), backlog);\n        } else {\n            return new ServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n    }","id":59365,"modified_method":"protected ServerSocket createSocket(URI uri) throws Exception {\n        String host = StringUtils.defaultIfEmpty(uri.getHost(), \"localhost\");\n        int backlog = ((TcpConnector) connector).getBacklog();\n        InetAddress inetAddress = InetAddress.getByName(host);\n        if (inetAddress.equals(InetAddress.getLocalHost()) || inetAddress.isLoopbackAddress()\n                || host.trim().equals(\"localhost\")) {\n            return new ServerSocket(uri.getPort(), backlog);\n        } else {\n            return new ServerSocket(uri.getPort(), backlog, inetAddress);\n        }\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"public void doConnect() throws ConnectException\n    {\n        URI uri = endpoint.getEndpointURI().getUri();\n        String host = uri.getHost();\n        if (host == null || host.length() == 0) {\n            host = \"localhost\";\n        }\n        try {\n            logger.debug(\"Attempting to connect to server socket\");\n            InetAddress inetAddress = InetAddress.getByName(host);\n            clientSocket = new Socket(inetAddress, uri.getPort());\n            TcpConnector connector = (TcpConnector) this.connector;\n            clientSocket.setReceiveBufferSize(connector.getBufferSize());\n            clientSocket.setSendBufferSize(connector.getBufferSize());\n            clientSocket.setSoTimeout(connector.getReceiveTimeout());\n\n            dataIn = new DataInputStream(new BufferedInputStream(clientSocket\n                    .getInputStream()));\n            logger.debug(\"Connected to server socket\");\n        } catch (Exception e) {\n            logger.error(e);\n            throw new ConnectException(new Message(\"tcp\", 1, uri), e, this);\n        }\n    }","id":59366,"modified_method":"public void doConnect() throws ConnectException\n    {\n        URI uri = endpoint.getEndpointURI().getUri();\n        String host = StringUtils.defaultIfEmpty(uri.getHost(), \"localhost\");\n\n        try {\n            logger.debug(\"Attempting to connect to server socket\");\n            InetAddress inetAddress = InetAddress.getByName(host);\n            clientSocket = new Socket(inetAddress, uri.getPort());\n            TcpConnector connector = (TcpConnector) this.connector;\n            clientSocket.setReceiveBufferSize(connector.getBufferSize());\n            clientSocket.setSendBufferSize(connector.getBufferSize());\n            clientSocket.setSoTimeout(connector.getReceiveTimeout());\n\n            dataIn = new DataInputStream(new BufferedInputStream(clientSocket\n                    .getInputStream()));\n            logger.debug(\"Connected to server socket\");\n        } catch (Exception e) {\n            logger.error(e);\n            throw new ConnectException(new Message(\"tcp\", 1, uri), e, this);\n        }\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"public Person getPerson(String firstName)\n    {\n        if(firstName==null ||\"\".equals(firstName)) {\n            throw new NullPointerException(\"Name parameter cannot be null\");\n        }\n        Person p = (Person) people.get(firstName);\n        return p;\n    }","id":59367,"modified_method":"public Person getPerson(String firstName)\n    {\n        if(StringUtils.isEmpty(firstName)) {\n            throw new NullPointerException(\"Name parameter cannot be null\");\n        }\n        Person p = (Person) people.get(firstName);\n        return p;\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void initHeaders()\n    {\n        if (messageContext.getInMessage().hasHeader()) {\n            MuleSoapHeaders header = new MuleSoapHeaders(messageContext.getInMessage().getHeader()\n                    .getChildren().iterator());\n\n            if (header.getReplyTo() != null && !\"\".equals(header.getReplyTo())) {\n                setReplyTo(header.getReplyTo());\n            }\n\n            if (header.getCorrelationGroup() != null && !\"\".equals(header.getCorrelationGroup())\n                    && !\"-1\".equals(header.getCorrelationGroup())) {\n                setCorrelationGroupSize(Integer.parseInt(header.getCorrelationGroup()));\n            }\n            if (header.getCorrelationSequence() != null && !\"\".equals(header.getCorrelationSequence())\n                    && !\"-1\".equals(header.getCorrelationSequence())) {\n                setCorrelationSequence(Integer.parseInt(header.getCorrelationSequence()));\n            }\n            if (header.getCorrelationId() != null && !\"\".equals(header.getCorrelationId())) {\n                setCorrelationId(header.getCorrelationId());\n            }\n        }\n    }","id":59368,"modified_method":"protected void initHeaders()\n    {\n        if (messageContext.getInMessage().hasHeader()) {\n            MuleSoapHeaders header = new MuleSoapHeaders(messageContext.getInMessage().getHeader()\n                    .getChildren().iterator());\n\n            if (!StringUtils.isEmpty(header.getReplyTo())) {\n                setReplyTo(header.getReplyTo());\n            }\n\n            if (!StringUtils.isEmpty(header.getCorrelationGroup())\n                    && !\"-1\".equals(header.getCorrelationGroup())) {\n                setCorrelationGroupSize(Integer.parseInt(header.getCorrelationGroup()));\n            }\n            if (!StringUtils.isEmpty(header.getCorrelationSequence())) {\n                setCorrelationSequence(Integer.parseInt(header.getCorrelationSequence()));\n            }\n            if (!StringUtils.isEmpty(header.getCorrelationId())) {\n                setCorrelationId(header.getCorrelationId());\n            }\n        }\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Get the service that is mapped to the specified request.\n     */\n    protected String getService(UMOEndpointURI uri)\n    {\n        String pathInfo = uri.getPath();\n\n        if (pathInfo == null || \"\".equals(pathInfo)) {\n            return uri.getHost();\n        }\n\n        String serviceName;\n\n        int i = pathInfo.lastIndexOf(\"/\");\n\n        if (i > -1) {\n            serviceName = pathInfo.substring(i + 1);\n        }\n        else {\n            serviceName = pathInfo;\n        }\n\n        return serviceName;\n    }","id":59369,"modified_method":"/**\n     * Get the service that is mapped to the specified request.\n     */\n    protected String getService(UMOEndpointURI uri)\n    {\n        String pathInfo = uri.getPath();\n\n        if (StringUtils.isEmpty(pathInfo)) {\n            return uri.getHost();\n        }\n\n        String serviceName;\n\n        int i = pathInfo.lastIndexOf(\"/\");\n\n        if (i > -1) {\n            serviceName = pathInfo.substring(i + 1);\n        }\n        else {\n            serviceName = pathInfo;\n        }\n\n        return serviceName;\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Get the service that is mapped to the specified request.\n     */\n    protected String getService(UMOEventContext context)\n    {\n        String pathInfo = context.getEndpointURI().getPath();\n\n        if (pathInfo == null || \"\".equals(pathInfo)) {\n            return context.getEndpointURI().getHost();\n        }\n\n        String serviceName;\n\n        int i = pathInfo.lastIndexOf(\"/\");\n\n        if (i > -1) {\n            serviceName = pathInfo.substring(i + 1);\n        }\n        else {\n            serviceName = pathInfo;\n        }\n\n        return serviceName;\n    }","id":59370,"modified_method":"/**\n     * Get the service that is mapped to the specified request.\n     */\n    protected String getService(UMOEventContext context)\n    {\n        String pathInfo = context.getEndpointURI().getPath();\n\n        if (StringUtils.isEmpty(pathInfo)) {\n            return context.getEndpointURI().getHost();\n        }\n\n        String serviceName;\n\n        int i = pathInfo.lastIndexOf(\"/\");\n\n        if (i > -1) {\n            serviceName = pathInfo.substring(i + 1);\n        }\n        else {\n            serviceName = pathInfo;\n        }\n\n        return serviceName;\n    }","commit_id":"73cacb2da0369ee56413ecd13538f302f8692f66","url":"https://github.com/mulesoft/mule"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) throws IOException {\r\n        plasmaSwitchboard switchboard = (plasmaSwitchboard) env;\r\n        serverObjects prop = new serverObjects();\r\n        if (post == null) {\r\n            post = new serverObjects();\r\n            post.put(\"page\", \"start\");\r\n        }\r\n\r\n        String access = switchboard.getConfig(\"WikiAccess\", \"admin\");\r\n        String pagename = post.get(\"page\", \"start\");\r\n        String ip = post.get(\"CLIENTIP\", \"127.0.0.1\");\r\n        String author = post.get(\"author\", \"anonymous\");\r\n        if (author.equals(\"anonymous\")) {\r\n            author = wikiBoard.guessAuthor(ip);\r\n            if (author == null) {\r\n                if (de.anomic.yacy.yacyCore.seedDB.mySeed == null) author = \"anonymous\";\r\n                else author = de.anomic.yacy.yacyCore.seedDB.mySeed.get(\"Name\", \"anonymous\");\r\n            }\r\n        }\r\n        \r\n        if (post.containsKey(\"access\")) {\r\n            // only the administrator may change the access right\r\n            if (!switchboard.verifyAuthentication(header, true)) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            access = post.get(\"access\", \"admin\");\r\n            switchboard.setConfig(\"WikiAccess\", access);\r\n        }\r\n        if (access.equals(\"admin\")) prop.put(\"mode_access\", 0);\r\n        if (access.equals(\"all\"))   prop.put(\"mode_access\", 1);\r\n        \r\n        if (post.containsKey(\"submit\")) {\r\n            \r\n            if ((access.equals(\"admin\") && (!switchboard.verifyAuthentication(header, true)))) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            // store a new page\r\n            byte[] content;\r\n            try {\r\n                content = post.get(\"content\", \"\").getBytes(\"UTF-8\");\r\n            } catch (UnsupportedEncodingException e) {\r\n                content = post.get(\"content\", \"\").getBytes();\r\n            }\r\n            switchboard.wikiDB.write(switchboard.wikiDB.newEntry(pagename, author, ip, post.get(\"reason\", \"edit\"), content));\r\n            // create a news message\r\n            HashMap map = new HashMap();\r\n            map.put(\"page\", pagename);\r\n            map.put(\"author\", author.replace(',', ' '));\r\n            yacyCore.newsPool.publishMyNews(new yacyNewsRecord(\"wiki_upd\", map));\r\n        }\r\n\r\n        wikiBoard.entry page = switchboard.wikiDB.read(pagename);\r\n\r\n        if (post.containsKey(\"edit\")) {\r\n            if ((access.equals(\"admin\") && (!switchboard.verifyAuthentication(header, true)))) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            // edit the page\r\n            try {\r\n                prop.put(\"mode\", 1); //edit\r\n                prop.put(\"mode_author\", author);\r\n                prop.put(\"mode_page-code\", new String(page.page(), \"UTF-8\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n                prop.put(\"mode_pagename\", pagename);\r\n            } catch (UnsupportedEncodingException e) {}\r\n        }\r\n\r\n        //contributed by [MN]\r\n        else if (post.containsKey(\"preview\")) {\r\n            // preview the page\r\n            wikiCode wikiTransformer=new wikiCode(switchboard);\r\n            prop.put(\"mode\", 2);//preview\r\n            prop.put(\"mode_pagename\", pagename);\r\n            prop.put(\"mode_author\", author);\r\n            prop.put(\"mode_date\", dateString(new Date()));\r\n            prop.putASIS(\"mode_page\", wikiTransformer.transform(post.get(\"content\", \"\")));\r\n            prop.put(\"mode_page-code\", post.get(\"content\", \"\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n        }\r\n        //end contrib of [MN]\r\n\r\n        else if (post.containsKey(\"index\")) {\r\n            // view an index\r\n            prop.put(\"mode\", 3); //Index\r\n            String subject;\r\n            try {\r\n                Iterator i = switchboard.wikiDB.keys(true);\r\n                wikiBoard.entry entry;\r\n                int count=0;\r\n                while (i.hasNext()) {\r\n                    subject = (String) i.next();\r\n                    entry = switchboard.wikiDB.read(subject);\r\n                    prop.put(\"mode_pages_\"+count+\"_name\",wikiBoard.webalize(subject));\r\n                    prop.put(\"mode_pages_\"+count+\"_subject\", subject);\r\n                    prop.put(\"mode_pages_\"+count+\"_date\", dateString(entry.date()));\r\n                    prop.put(\"mode_pages_\"+count+\"_author\", entry.author());\r\n                    count++;\r\n                }\r\n                prop.put(\"mode_pages\", count);\r\n            } catch (IOException e) {\r\n                prop.put(\"mode_error\", 1); //IO Error reading Wiki\r\n                prop.put(\"mode_error_message\", e.getMessage());\r\n            }\r\n            prop.put(\"mode_pagename\", pagename);\r\n        }\r\n\r\n        else {\r\n            wikiCode wikiTransformer=new wikiCode(switchboard);\r\n            // show page\r\n            prop.put(\"mode\", 0); //viewing\r\n            prop.put(\"mode_pagename\", pagename);\r\n            prop.put(\"mode_author\", page.author());\r\n            prop.put(\"mode_date\", dateString(page.date()));\r\n            prop.putASIS(\"mode_page\", wikiTransformer.transform(page.page()));\r\n\r\n            prop.put(\"controls\", 0);\r\n            prop.put(\"controls_pagename\", pagename);\r\n        }\r\n\r\n        // return rewrite properties\r\n        return prop;\r\n    }","id":59371,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) throws IOException {\r\n        plasmaSwitchboard switchboard = (plasmaSwitchboard) env;\r\n        serverObjects prop = new serverObjects();\r\n        if (post == null) {\r\n            post = new serverObjects();\r\n            post.put(\"page\", \"start\");\r\n        }\r\n\r\n        String access = switchboard.getConfig(\"WikiAccess\", \"admin\");\r\n        String pagename = post.get(\"page\", \"start\");\r\n        String ip = post.get(\"CLIENTIP\", \"127.0.0.1\");\r\n        String author = post.get(\"author\", \"anonymous\");\r\n        if (author.equals(\"anonymous\")) {\r\n            author = wikiBoard.guessAuthor(ip);\r\n            if (author == null) {\r\n                if (de.anomic.yacy.yacyCore.seedDB.mySeed == null) author = \"anonymous\";\r\n                else author = de.anomic.yacy.yacyCore.seedDB.mySeed.get(\"Name\", \"anonymous\");\r\n            }\r\n        }\r\n        \r\n        if (post.containsKey(\"access\")) {\r\n            // only the administrator may change the access right\r\n            if (!switchboard.verifyAuthentication(header, true)) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            access = post.get(\"access\", \"admin\");\r\n            switchboard.setConfig(\"WikiAccess\", access);\r\n        }\r\n        if (access.equals(\"admin\")) prop.put(\"mode_access\", 0);\r\n        if (access.equals(\"all\"))   prop.put(\"mode_access\", 1);\r\n        \r\n        if (post.containsKey(\"submit\")) {\r\n            \r\n            if ((access.equals(\"admin\") && (!switchboard.verifyAuthentication(header, true)))) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            // store a new page\r\n            byte[] content;\r\n            try {\r\n                content = post.get(\"content\", \"\").getBytes(\"UTF-8\");\r\n            } catch (UnsupportedEncodingException e) {\r\n                content = post.get(\"content\", \"\").getBytes();\r\n            }\r\n            switchboard.wikiDB.write(switchboard.wikiDB.newEntry(pagename, author, ip, post.get(\"reason\", \"edit\"), content));\r\n            // create a news message\r\n            HashMap map = new HashMap();\r\n            map.put(\"page\", pagename);\r\n            map.put(\"author\", author.replace(',', ' '));\r\n            yacyCore.newsPool.publishMyNews(new yacyNewsRecord(\"wiki_upd\", map));\r\n        }\r\n\r\n        wikiBoard.entry page = switchboard.wikiDB.read(pagename);\r\n\r\n        if (post.containsKey(\"edit\")) {\r\n            if ((access.equals(\"admin\") && (!switchboard.verifyAuthentication(header, true)))) {\r\n                // check access right for admin\r\n                prop.put(\"AUTHENTICATE\", \"admin log-in\"); // force log-in\r\n                return prop;\r\n            }\r\n            \r\n            // edit the page\r\n            try {\r\n                prop.put(\"mode\", 1); //edit\r\n                prop.put(\"mode_author\", author);\r\n                prop.put(\"mode_page-code\", new String(page.page(), \"UTF-8\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n                prop.put(\"mode_pagename\", pagename);\r\n            } catch (UnsupportedEncodingException e) {}\r\n        }\r\n\r\n        //contributed by [MN]\r\n        else if (post.containsKey(\"preview\")) {\r\n            // preview the page\r\n            prop.put(\"mode\", 2);//preview\r\n            prop.put(\"mode_pagename\", pagename);\r\n            prop.put(\"mode_author\", author);\r\n            prop.put(\"mode_date\", dateString(new Date()));\r\n            prop.putWiki(\"mode_page\", post.get(\"content\", \"\"));\r\n            prop.put(\"mode_page-code\", post.get(\"content\", \"\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n        }\r\n        //end contrib of [MN]\r\n\r\n        else if (post.containsKey(\"index\")) {\r\n            // view an index\r\n            prop.put(\"mode\", 3); //Index\r\n            String subject;\r\n            try {\r\n                Iterator i = switchboard.wikiDB.keys(true);\r\n                wikiBoard.entry entry;\r\n                int count=0;\r\n                while (i.hasNext()) {\r\n                    subject = (String) i.next();\r\n                    entry = switchboard.wikiDB.read(subject);\r\n                    prop.put(\"mode_pages_\"+count+\"_name\",wikiBoard.webalize(subject));\r\n                    prop.put(\"mode_pages_\"+count+\"_subject\", subject);\r\n                    prop.put(\"mode_pages_\"+count+\"_date\", dateString(entry.date()));\r\n                    prop.put(\"mode_pages_\"+count+\"_author\", entry.author());\r\n                    count++;\r\n                }\r\n                prop.put(\"mode_pages\", count);\r\n            } catch (IOException e) {\r\n                prop.put(\"mode_error\", 1); //IO Error reading Wiki\r\n                prop.put(\"mode_error_message\", e.getMessage());\r\n            }\r\n            prop.put(\"mode_pagename\", pagename);\r\n        }\r\n\r\n        else {\r\n            // show page\r\n            prop.put(\"mode\", 0); //viewing\r\n            prop.put(\"mode_pagename\", pagename);\r\n            prop.put(\"mode_author\", page.author());\r\n            prop.put(\"mode_date\", dateString(page.date()));\r\n            prop.putWiki(\"mode_page\", page.page());\r\n\r\n            prop.put(\"controls\", 0);\r\n            prop.put(\"controls_pagename\", pagename);\r\n        }\r\n\r\n        // return rewrite properties\r\n        return prop;\r\n    }","commit_id":"98cb777e1877896010644cd69d9c646140db8974","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n\t\tplasmaSwitchboard switchboard = (plasmaSwitchboard) env;\r\n\t\tserverObjects prop = new serverObjects();\r\n\t\tblogBoard.entry page = null;\r\n\t\t\r\n\t\tboolean hasRights = switchboard.verifyAuthentication(header, true);\r\n\r\n        if(hasRights) prop.put(\"mode_admin\",1);\r\n        else prop.put(\"mode_admin\",0);\r\n\r\n        if (post == null) {\r\n            post = new serverObjects();\r\n            post.put(\"page\", \"blog_default\");\r\n        }\r\n\r\n        if(!hasRights){\r\n            userDB.Entry userentry = switchboard.userDB.proxyAuth((String)header.get(\"Authorization\", \"xxxxxx\"));\r\n            if(userentry != null && userentry.hasBlogRight()){\r\n                hasRights=true;\r\n            }\r\n            //opens login window if login link is clicked - contrib [MN]\r\n            else if(post.containsKey(\"login\")){\r\n                prop.put(\"AUTHENTICATE\",\"admin log-in\");\r\n            }\r\n\t\t}\r\n\r\n\t\tString pagename = post.get(\"page\", \"blog_default\");\r\n\t    String ip = post.get(\"CLIENTIP\", \"127.0.0.1\");\r\n\t    \r\n\t\tString StrAuthor = post.get(\"author\", \"\");\r\n\t\t\r\n\t\tif (StrAuthor.equals(\"anonymous\")) {\r\n\t\t\tStrAuthor = switchboard.blogDB.guessAuthor(ip);\r\n\t\t\t\r\n\t    \tif (StrAuthor == null || StrAuthor.length() == 0) {\r\n\t    \t\tif (de.anomic.yacy.yacyCore.seedDB.mySeed == null)\r\n\t    \t\t\tStrAuthor = \"anonymous\";\r\n\t        \telse {\r\n\t        \t\tStrAuthor = de.anomic.yacy.yacyCore.seedDB.mySeed.get(\"Name\", \"anonymous\");\r\n\t        \t}\r\n\t        }\r\n\t    }\r\n\t\t\r\n\t\tbyte[] author;\r\n\t\ttry {\r\n\t\t\tauthor = StrAuthor.getBytes(\"UTF-8\");\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\tauthor = StrAuthor.getBytes();\r\n\t\t}\r\n\r\n\t\tif(hasRights && post.containsKey(\"delete\") && post.get(\"delete\").equals(\"sure\")) {\r\n\t\t\tswitchboard.blogDB.delete(pagename);\r\n\t\t\tpagename = \"blog_default\";\r\n\t\t}\r\n\r\n\t\tif (post.containsKey(\"submit\") && (hasRights)) {\r\n\t\t\t// store a new/edited blog-entry\r\n\t\t\tbyte[] content;\r\n\t\t\ttry {\r\n\t\t\t\tcontent = post.get(\"content\", \"\").getBytes(\"UTF-8\");\r\n\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\tcontent = post.get(\"content\", \"\").getBytes();\r\n\t\t\t}\r\n\r\n\t\t\tDate date = null;\r\n\t\t\t\r\n\t\t\t//set name for new entry or date for old entry\r\n\t\t\tif(pagename.equals(\"blog_default\"))\r\n\t\t\t\tpagename = String.valueOf(System.currentTimeMillis());\r\n\t\t\telse {\r\n\t\t\t\tpage = switchboard.blogDB.read(pagename);\r\n\t\t\t\tdate = page.date();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString StrSubject = post.get(\"subject\", \"\");\r\n\t\t\tbyte[] subject;\r\n\t\t\ttry {\r\n\t\t\t\tsubject = StrSubject.getBytes(\"UTF-8\");\r\n\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\tsubject = StrSubject.getBytes();\r\n\t\t\t}\r\n         \r\n\t\t\tswitchboard.blogDB.write(switchboard.blogDB.newEntry(pagename, subject, author, ip, date, content));\r\n            \r\n\t\t\t// create a news message\r\n             HashMap map = new HashMap();\r\n             map.put(\"page\", pagename);\r\n             map.put(\"subject\", StrSubject.replace(',', ' '));\r\n             map.put(\"author\", StrAuthor.replace(',', ' '));\r\n             yacyCore.newsPool.publishMyNews(new yacyNewsRecord(\"blog_add\", map));\r\n\t\t}\r\n\r\n\t\tpage = switchboard.blogDB.read(pagename); //maybe \"if(page == null)\"\r\n\r\n\t\tif (post.containsKey(\"edit\")) {\r\n\t\t    //edit an entry\r\n\t\t\tif(hasRights) {\r\n\t\t\t\ttry {\r\n\t\t\t        prop.put(\"mode\", 1); //edit\r\n\t\t\t        prop.put(\"mode_author\", wikiCode.replaceHTML(new String(page.author(),\"UTF-8\")));\r\n\t\t\t        prop.put(\"mode_pageid\", page.key());\r\n\t\t\t        prop.put(\"mode_subject\", wikiCode.replaceHTML(new String(page.subject(), \"UTF-8\")));\r\n\t\t\t        prop.put(\"mode_page-code\", new String(page.page(), \"UTF-8\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n\t\t\t    } catch (UnsupportedEncodingException e) {}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprop.put(\"mode\",3); //access denied (no rights)\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(post.containsKey(\"preview\")) {\r\n\t\t\t//preview the page\r\n\t\t\tif(hasRights) {\r\n\t\t\t\twikiCode wikiTransformer=new wikiCode(switchboard);\r\n\t            prop.put(\"mode\", 2);//preview\r\n\t            prop.put(\"mode_pageid\", pagename);\r\n\t            try {\r\n\t\t\t\t\tprop.put(\"mode_author\", wikiCode.replaceHTML(new String(author, \"UTF-8\")));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_author\", wikiCode.replaceHTML(new String(author)));\r\n\t\t\t\t}\r\n\t            prop.put(\"mode_subject\", wikiCode.replaceHTML(post.get(\"subject\",\"\")));\r\n\t            prop.put(\"mode_date\", dateString(new Date()));\r\n\t            prop.putASIS(\"mode_page\", wikiTransformer.transform(post.get(\"content\", \"\")));\r\n\t            prop.put(\"mode_page-code\", post.get(\"content\", \"\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n\t\t\t}\r\n\t\t\telse prop.put(\"mode\",3); //access denied (no rights)\r\n\t\t}\r\n\t\telse if(post.containsKey(\"delete\") && post.get(\"delete\").equals(\"try\")) {\r\n\t\t\tif(hasRights) {\r\n\t\t\t\tprop.put(\"mode\",4);\r\n\t\t\t\tprop.put(\"mode_pageid\",pagename);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprop.put(\"mode_author\",wikiCode.replaceHTML(new String(page.author(), \"UTF-8\")));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_author\",wikiCode.replaceHTML(new String(page.author())));\r\n\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprop.put(\"mode_subject\",wikiCode.replaceHTML(new String(page.subject(),\"UTF-8\")));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_subject\",wikiCode.replaceHTML(new String(page.subject())));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse prop.put(\"mode\",3); //access denied (no rights)\r\n\t\t}\r\n\t\telse if(post.containsKey(\"import\")) {\r\n\t\t\tprop.put(\"mode\",5);\r\n\t\t\tprop.put(\"mode_state\",0);\r\n\t\t}\r\n\t\telse if(post.containsKey(\"xmlfile\")) {\r\n\t\t\tprop.put(\"mode\",5);\r\n\t\t\tif(switchboard.blogDB.importXML(new String((byte[])post.get(\"xmlfile$file\")))) {\r\n\t\t\t\tprop.put(\"mode_state\",1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprop.put(\"mode_state\",2);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t        wikiCode wikiTransformer=new wikiCode(switchboard);\r\n\t\t    // show blog-entry/entries\r\n\t        prop.put(\"mode\", 0); //viewing\r\n\t        if(pagename.equals(\"blog_default\")) {\r\n\t        \t//index all entries\r\n\t        \ttry {\r\n\t        \t\tIterator i = switchboard.blogDB.keys(false);\r\n\t        \t\tString pageid;\r\n\t        \t\tblogBoard.entry entry;\r\n\t        \t\tboolean xml = false;\r\n\t        \t\tif(post.containsKey(\"xml\"))\r\n\t        \t\t\txml = true;\r\n\t        \t\tint count = 0; //counts how many entries are shown to the user\r\n\t        \t\tint start = post.getInt(\"start\",0); //indicates from where entries should be shown\r\n\t        \t\tint num   = post.getInt(\"num\",20);  //indicates how many entries should be shown\r\n\t        \t\tif(xml) num = 0;\r\n\t        \t\tint nextstart = start+num;\t\t//indicates the starting offset for next results\r\n\t        \t\twhile(i.hasNext()) {\r\n\t        \t\t\tif(count >= num && num > 0)\r\n\t        \t\t\t\tbreak;\r\n\t        \t\t\tpageid = (String) i.next();\r\n\t        \t\t\tif(0 < start--)\r\n\t        \t\t\t\tcontinue;\r\n\t        \t\t\tentry = switchboard.blogDB.read(pageid);\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_pageid\",entry.key());\r\n\t        \t\t\tif(!xml) {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_subject\", wikiCode.replaceHTML(new String(entry.subject(),\"UTF-8\")));\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_author\", wikiCode.replaceHTML(new String(entry.author(),\"UTF-8\")));\r\n\t\t        \t\t\tprop.putASIS(\"mode_entries_\"+count+\"_page\", wikiTransformer.transform(entry.page()));\r\n\t        \t\t\t}\r\n\t        \t\t\telse {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_subject\", new String(entry.subject(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_author\", new String(entry.author(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.putASIS(\"mode_entries_\"+count+\"_page\", entry.page());\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_timestamp\", entry.timestamp());\r\n\t        \t\t\t}\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_date\", dateString(entry.date()));\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_ip\", entry.ip());\r\n\t        \t\t\tif(hasRights) {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_admin\", 1);\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_admin_pageid\",entry.key());\r\n\t        \t\t\t}\r\n\t        \t\t\telse prop.put(\"mode_entries_\"+count+\"_admin\", 0);\r\n\t        \t\t\t++count;\r\n\t        \t\t}\r\n\t        \t\tprop.put(\"mode_entries\",count);\r\n\t        \t\tif(i.hasNext()) {\r\n\t        \t\t\tprop.put(\"mode_moreentries\",1); //more entries are availible\r\n\t        \t\t\tprop.put(\"mode_moreentries_start\",nextstart);\r\n\t        \t\t\tprop.put(\"mode_moreentries_num\",num);\r\n\t        \t\t}\r\n\t        \t\telse prop.put(\"moreentries\",0);\r\n\t        \t} catch (IOException e) {\r\n\r\n\t        \t}\r\n\t        }\r\n\t        else {\r\n\t        \t//only show 1 entry\r\n\t        \tprop.put(\"mode_entries\",1);\r\n\t        \tprop.put(\"mode_entries_0_pageid\", page.key());\r\n\t        \ttry {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_subject\", wikiCode.replaceHTML(new String(page.subject(),\"UTF-8\")));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_subject\", wikiCode.replaceHTML(new String(page.subject())));\r\n\t\t\t\t}\r\n\t        \ttry {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_author\", wikiCode.replaceHTML(new String(page.author(),\"UTF-8\")));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_author\", wikiCode.replaceHTML(new String(page.author())));\r\n\t\t\t\t}\r\n\t        \tprop.put(\"mode_entries_0_date\", dateString(page.date()));\r\n\t        \tprop.putASIS(\"mode_entries_0_page\", wikiTransformer.transform(page.page()));\r\n\t        \tif(hasRights) {\r\n    \t\t\t\tprop.put(\"mode_entries_0_admin\", 1);\r\n    \t\t\t\tprop.put(\"mode_entries_0_admin_pageid\",page.key());\r\n    \t\t\t}\r\n\t        }\r\n\t\t}\r\n\r\n\t\t// return rewrite properties\r\n\t\treturn prop;\r\n\t}","id":59372,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch env) {\r\n\t\tplasmaSwitchboard switchboard = (plasmaSwitchboard) env;\r\n\t\tserverObjects prop = new serverObjects();\r\n\t\tblogBoard.entry page = null;\r\n\t\t\r\n\t\tboolean hasRights = switchboard.verifyAuthentication(header, true);\r\n\r\n        if(hasRights) prop.put(\"mode_admin\",1);\r\n        else prop.put(\"mode_admin\",0);\r\n\r\n        if (post == null) {\r\n            post = new serverObjects();\r\n            post.put(\"page\", \"blog_default\");\r\n        }\r\n\r\n        if(!hasRights){\r\n            userDB.Entry userentry = switchboard.userDB.proxyAuth((String)header.get(\"Authorization\", \"xxxxxx\"));\r\n            if(userentry != null && userentry.hasBlogRight()){\r\n                hasRights=true;\r\n            }\r\n            //opens login window if login link is clicked - contrib [MN]\r\n            else if(post.containsKey(\"login\")){\r\n                prop.put(\"AUTHENTICATE\",\"admin log-in\");\r\n            }\r\n\t\t}\r\n\r\n\t\tString pagename = post.get(\"page\", \"blog_default\");\r\n\t    String ip = post.get(\"CLIENTIP\", \"127.0.0.1\");\r\n\t    \r\n\t\tString StrAuthor = post.get(\"author\", \"\");\r\n\t\t\r\n\t\tif (StrAuthor.equals(\"anonymous\")) {\r\n\t\t\tStrAuthor = switchboard.blogDB.guessAuthor(ip);\r\n\t\t\t\r\n\t    \tif (StrAuthor == null || StrAuthor.length() == 0) {\r\n\t    \t\tif (de.anomic.yacy.yacyCore.seedDB.mySeed == null)\r\n\t    \t\t\tStrAuthor = \"anonymous\";\r\n\t        \telse {\r\n\t        \t\tStrAuthor = de.anomic.yacy.yacyCore.seedDB.mySeed.get(\"Name\", \"anonymous\");\r\n\t        \t}\r\n\t        }\r\n\t    }\r\n\t\t\r\n\t\tbyte[] author;\r\n\t\ttry {\r\n\t\t\tauthor = StrAuthor.getBytes(\"UTF-8\");\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\tauthor = StrAuthor.getBytes();\r\n\t\t}\r\n\r\n\t\tif(hasRights && post.containsKey(\"delete\") && post.get(\"delete\").equals(\"sure\")) {\r\n\t\t\tswitchboard.blogDB.delete(pagename);\r\n\t\t\tpagename = \"blog_default\";\r\n\t\t}\r\n\r\n\t\tif (post.containsKey(\"submit\") && (hasRights)) {\r\n\t\t\t// store a new/edited blog-entry\r\n\t\t\tbyte[] content;\r\n\t\t\ttry {\r\n\t\t\t\tcontent = post.get(\"content\", \"\").getBytes(\"UTF-8\");\r\n\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\tcontent = post.get(\"content\", \"\").getBytes();\r\n\t\t\t}\r\n\r\n\t\t\tDate date = null;\r\n\t\t\t\r\n\t\t\t//set name for new entry or date for old entry\r\n\t\t\tif(pagename.equals(\"blog_default\"))\r\n\t\t\t\tpagename = String.valueOf(System.currentTimeMillis());\r\n\t\t\telse {\r\n\t\t\t\tpage = switchboard.blogDB.read(pagename);\r\n\t\t\t\tdate = page.date();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString StrSubject = post.get(\"subject\", \"\");\r\n\t\t\tbyte[] subject;\r\n\t\t\ttry {\r\n\t\t\t\tsubject = StrSubject.getBytes(\"UTF-8\");\r\n\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\tsubject = StrSubject.getBytes();\r\n\t\t\t}\r\n         \r\n\t\t\tswitchboard.blogDB.write(switchboard.blogDB.newEntry(pagename, subject, author, ip, date, content));\r\n            \r\n\t\t\t// create a news message\r\n             HashMap map = new HashMap();\r\n             map.put(\"page\", pagename);\r\n             map.put(\"subject\", StrSubject.replace(',', ' '));\r\n             map.put(\"author\", StrAuthor.replace(',', ' '));\r\n             yacyCore.newsPool.publishMyNews(new yacyNewsRecord(\"blog_add\", map));\r\n\t\t}\r\n\r\n\t\tpage = switchboard.blogDB.read(pagename); //maybe \"if(page == null)\"\r\n\r\n\t\tif (post.containsKey(\"edit\")) {\r\n\t\t    //edit an entry\r\n\t\t\tif(hasRights) {\r\n\t\t\t\ttry {\r\n\t\t\t        prop.put(\"mode\", 1); //edit\r\n\t\t\t        prop.put(\"mode_author\", new String(page.author(),\"UTF-8\"));\r\n\t\t\t        prop.put(\"mode_pageid\", page.key());\r\n\t\t\t        prop.put(\"mode_subject\", new String(page.subject(), \"UTF-8\"));\r\n\t\t\t        prop.put(\"mode_page-code\", new String(page.page(), \"UTF-8\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n\t\t\t    } catch (UnsupportedEncodingException e) {}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprop.put(\"mode\",3); //access denied (no rights)\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(post.containsKey(\"preview\")) {\r\n\t\t\t//preview the page\r\n\t\t\tif(hasRights) {\r\n\t            prop.put(\"mode\", 2);//preview\r\n\t            prop.put(\"mode_pageid\", pagename);\r\n\t            try {\r\n\t\t\t\t\tprop.put(\"mode_author\", new String(author, \"UTF-8\"));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_author\", new String(author));\r\n\t\t\t\t}\r\n\t            prop.put(\"mode_subject\", post.get(\"subject\",\"\"));\r\n\t            prop.put(\"mode_date\", dateString(new Date()));\r\n\t            prop.putWiki(\"mode_page\", post.get(\"content\", \"\"));\r\n\t            prop.put(\"mode_page-code\", post.get(\"content\", \"\").replaceAll(\"<\",\"&lt;\").replaceAll(\">\",\"&gt;\"));\r\n\t\t\t}\r\n\t\t\telse prop.put(\"mode\",3); //access denied (no rights)\r\n\t\t}\r\n\t\telse if(post.containsKey(\"delete\") && post.get(\"delete\").equals(\"try\")) {\r\n\t\t\tif(hasRights) {\r\n\t\t\t\tprop.put(\"mode\",4);\r\n\t\t\t\tprop.put(\"mode_pageid\",pagename);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprop.put(\"mode_author\",new String(page.author(), \"UTF-8\"));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_author\",new String(page.author()));\r\n\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprop.put(\"mode_subject\",new String(page.subject(),\"UTF-8\"));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_subject\",new String(page.subject()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse prop.put(\"mode\",3); //access denied (no rights)\r\n\t\t}\r\n\t\telse if(post.containsKey(\"import\")) {\r\n\t\t\tprop.put(\"mode\",5);\r\n\t\t\tprop.put(\"mode_state\",0);\r\n\t\t}\r\n\t\telse if(post.containsKey(\"xmlfile\")) {\r\n\t\t\tprop.put(\"mode\",5);\r\n\t\t\tif(switchboard.blogDB.importXML(new String((byte[])post.get(\"xmlfile$file\")))) {\r\n\t\t\t\tprop.put(\"mode_state\",1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprop.put(\"mode_state\",2);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t    // show blog-entry/entries\r\n\t        prop.put(\"mode\", 0); //viewing\r\n\t        if(pagename.equals(\"blog_default\")) {\r\n\t        \t//index all entries\r\n\t        \ttry {\r\n\t        \t\tIterator i = switchboard.blogDB.keys(false);\r\n\t        \t\tString pageid;\r\n\t        \t\tblogBoard.entry entry;\r\n\t        \t\tboolean xml = false;\r\n\t        \t\tif(post.containsKey(\"xml\"))\r\n\t        \t\t\txml = true;\r\n\t        \t\tint count = 0; //counts how many entries are shown to the user\r\n\t        \t\tint start = post.getInt(\"start\",0); //indicates from where entries should be shown\r\n\t        \t\tint num   = post.getInt(\"num\",20);  //indicates how many entries should be shown\r\n\t        \t\tif(xml) num = 0;\r\n\t        \t\tint nextstart = start+num;\t\t//indicates the starting offset for next results\r\n\t        \t\twhile(i.hasNext()) {\r\n\t        \t\t\tif(count >= num && num > 0)\r\n\t        \t\t\t\tbreak;\r\n\t        \t\t\tpageid = (String) i.next();\r\n\t        \t\t\tif(0 < start--)\r\n\t        \t\t\t\tcontinue;\r\n\t        \t\t\tentry = switchboard.blogDB.read(pageid);\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_pageid\",entry.key());\r\n\t        \t\t\tif(!xml) {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_subject\", new String(entry.subject(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_author\", new String(entry.author(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.putWiki(\"mode_entries_\"+count+\"_page\", entry.page());\r\n\t        \t\t\t}\r\n\t        \t\t\telse {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_subject\", new String(entry.subject(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_author\", new String(entry.author(),\"UTF-8\"));\r\n\t\t        \t\t\tprop.putASIS(\"mode_entries_\"+count+\"_page\", entry.page());\r\n\t\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_timestamp\", entry.timestamp());\r\n\t        \t\t\t}\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_date\", dateString(entry.date()));\r\n\t        \t\t\tprop.put(\"mode_entries_\"+count+\"_ip\", entry.ip());\r\n\t        \t\t\tif(hasRights) {\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_admin\", 1);\r\n\t        \t\t\t\tprop.put(\"mode_entries_\"+count+\"_admin_pageid\",entry.key());\r\n\t        \t\t\t}\r\n\t        \t\t\telse prop.put(\"mode_entries_\"+count+\"_admin\", 0);\r\n\t        \t\t\t++count;\r\n\t        \t\t}\r\n\t        \t\tprop.put(\"mode_entries\",count);\r\n\t        \t\tif(i.hasNext()) {\r\n\t        \t\t\tprop.put(\"mode_moreentries\",1); //more entries are availible\r\n\t        \t\t\tprop.put(\"mode_moreentries_start\",nextstart);\r\n\t        \t\t\tprop.put(\"mode_moreentries_num\",num);\r\n\t        \t\t}\r\n\t        \t\telse prop.put(\"moreentries\",0);\r\n\t        \t} catch (IOException e) {\r\n\r\n\t        \t}\r\n\t        }\r\n\t        else {\r\n\t        \t//only show 1 entry\r\n\t        \tprop.put(\"mode_entries\",1);\r\n\t        \tprop.put(\"mode_entries_0_pageid\", page.key());\r\n\t        \ttry {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_subject\", new String(page.subject(),\"UTF-8\"));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_subject\", new String(page.subject()));\r\n\t\t\t\t}\r\n\t        \ttry {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_author\", new String(page.author(),\"UTF-8\"));\r\n\t\t\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t\t\tprop.put(\"mode_entries_0_author\", new String(page.author()));\r\n\t\t\t\t}\r\n\t        \tprop.put(\"mode_entries_0_date\", dateString(page.date()));\r\n\t        \tprop.putWiki(\"mode_entries_0_page\", page.page());\r\n\t        \tif(hasRights) {\r\n    \t\t\t\tprop.put(\"mode_entries_0_admin\", 1);\r\n    \t\t\t\tprop.put(\"mode_entries_0_admin_pageid\",page.key());\r\n    \t\t\t}\r\n\t        }\r\n\t\t}\r\n\r\n\t\t// return rewrite properties\r\n\t\treturn prop;\r\n\t}","commit_id":"ff829e97f8948ee17360069f77cab0365dcd9cca","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"protected String getValue(RequestLoggerResponse response) {\n            Cookie cookie = response.getCookie(this.cookieName);\n            return (cookie == null) ? null : escape(cookie.toString());\n        }","id":59373,"modified_method":"protected String getValue(RequestLoggerResponse response) {\n            return getValue(response.getCookie(this.cookieName));\n\n        }","commit_id":"6948b13d9a77452ee32e15f17fb1dcadff2912c8","url":"https://github.com/apache/sling"},{"original_method":"protected String getValue(RequestLoggerRequest request) {\n            Cookie cookie = request.getCookie(this.cookieName);\n            return (cookie == null) ? null : escape(cookie.toString());\n        }","id":59374,"modified_method":"protected String getValue(RequestLoggerRequest request) {\n            return getValue(request.getCookie(this.cookieName));\n        }","commit_id":"6948b13d9a77452ee32e15f17fb1dcadff2912c8","url":"https://github.com/apache/sling"},{"original_method":"/**\n\t * @see org.apache.wicket.markup.html.form.persistence.IValuePersister#clear(org.apache.wicket.markup.html.form.FormComponent)\n\t */\n\tpublic void clear(final FormComponent<?> component)\n\t{\n\t\tfinal Cookie cookie = getCookie(component);\n\t\tif (cookie != null)\n\t\t{\n\t\t\tclear(cookie);\n\t\t\tif (log.isDebugEnabled())\n\t\t\t{\n\t\t\t\tlog.debug(\"Cookie for \" + component + \" removed\");\n\t\t\t}\n\t\t}\n\t}","id":59375,"modified_method":"/**\n\t * @see org.apache.wicket.markup.html.form.persistence.IValuePersister#clear(org.apache.wicket.markup.html.form.FormComponent)\n\t */\n\tpublic void clear(final FormComponent<?> component)\n\t{\n\t\tfinal Cookie cookie = getCookie(component);\n\t\tif (cookie != null)\n\t\t{\n\t\t\tclear(cookie);\n\t\t}\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Convenience method for deleting a cookie by name. Delete the cookie by setting its maximum\n\t * age to zero.\n\t * \n\t * @param cookie\n\t *            The cookie to delete\n\t */\n\tprivate void clear(final Cookie cookie)\n\t{\n\t\tif (cookie != null)\n\t\t{\n\t\t\t// Delete the cookie by setting its maximum age to zero\n\t\t\tcookie.setMaxAge(0);\n\t\t\tcookie.setValue(null);\n\n\t\t\tsave(cookie);\n\t\t}\n\t}","id":59376,"modified_method":"/**\n\t * Convenience method for deleting a cookie by name. Delete the cookie by setting its maximum\n\t * age to zero.\n\t * \n\t * @param cookie\n\t *            The cookie to delete\n\t */\n\tprivate void clear(final Cookie cookie)\n\t{\n\t\tif (cookie != null)\n\t\t{\n\t\t\t// Delete the cookie by setting its maximum age to zero\n\t\t\tcookie.setMaxAge(0);\n\t\t\tcookie.setValue(null);\n\n\t\t\tsave(cookie);\n\n\t\t\tif (log.isDebugEnabled())\n\t\t\t{\n\t\t\t\tlog.debug(\"Removed Cookie: \" + cookie.getName());\n\t\t\t}\n\t\t}\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Persist/save the data using Cookies.\n\t * \n\t * @param cookie\n\t *            The Cookie to be persisted.\n\t * @return The cookie provided\n\t */\n\tprivate Cookie save(final Cookie cookie)\n\t{\n\t\tif (cookie == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfinal String comment = getSettings().getComment();\n\t\t\tif (comment != null)\n\t\t\t{\n\t\t\t\tcookie.setComment(comment);\n\t\t\t}\n\n\t\t\tfinal String domain = getSettings().getDomain();\n\t\t\tif (domain != null)\n\t\t\t{\n\t\t\t\tcookie.setDomain(domain);\n\t\t\t}\n\n\t\t\tcookie.setPath(getWebRequest().getHttpServletRequest().getContextPath());\n\t\t\t// cookie.setPath(\"/\");\n\t\t\t// cookie.setPath(getWebRequest().getContextPath());\n\n\t\t\tcookie.setVersion(getSettings().getVersion());\n\t\t\tcookie.setSecure(getSettings().getSecure());\n\n\t\t\tgetWebResponse().addCookie(cookie);\n\n\t\t\tif (log.isDebugEnabled())\n\t\t\t{\n\t\t\t\tlog.debug(\"saved: \" + cookieToDebugString(cookie));\n\t\t\t}\n\n\t\t\treturn cookie;\n\t\t}\n\t}","id":59377,"modified_method":"/**\n\t * Persist/save the data using Cookies.\n\t * \n\t * @param cookie\n\t *            The Cookie to be persisted.\n\t * @return The cookie provided\n\t */\n\tprivate Cookie save(final Cookie cookie)\n\t{\n\t\tif (cookie == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfinal String comment = getSettings().getComment();\n\t\t\tif (comment != null)\n\t\t\t{\n\t\t\t\tcookie.setComment(comment);\n\t\t\t}\n\n\t\t\tfinal String domain = getSettings().getDomain();\n\t\t\tif (domain != null)\n\t\t\t{\n\t\t\t\tcookie.setDomain(domain);\n\t\t\t}\n\n\t\t\tString path = getWebRequest().getHttpServletRequest().getContextPath();\n\t\t\tif (Strings.isEmpty(path))\n\t\t\t{\n\t\t\t\tpath = \"/\";\n\t\t\t}\n\t\t\tcookie.setPath(path);\n\t\t\tcookie.setVersion(getSettings().getVersion());\n\t\t\tcookie.setSecure(getSettings().getSecure());\n\n\t\t\tgetWebResponse().addCookie(cookie);\n\n\t\t\tif (log.isDebugEnabled())\n\t\t\t{\n\t\t\t\tlog.debug(\"Cookie saved: \" + cookieToDebugString(cookie) + \"; request URI=\" +\n\t\t\t\t\tgetWebRequest().getHttpServletRequest().getRequestURI());\n\t\t\t}\n\n\t\t\treturn cookie;\n\t\t}\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.markup.html.form.persistence.IValuePersister#load(org.apache.wicket.markup.html.form.FormComponent)\n\t */\n\tpublic void load(final FormComponent<?> component)\n\t{\n\t\tfinal Cookie cookie = getCookie(component);\n\t\tif (cookie != null)\n\t\t{\n\t\t\tfinal String value = cookie.getValue();\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\t// Assign the retrieved/persisted value to the component\n\t\t\t\tcomponent.setModelValue(value.split(FormComponent.VALUE_SEPARATOR));\n\t\t\t}\n\t\t}\n\t}","id":59378,"modified_method":"/**\n\t * @see org.apache.wicket.markup.html.form.persistence.IValuePersister#load(org.apache.wicket.markup.html.form.FormComponent)\n\t */\n\tpublic void load(final FormComponent<?> component)\n\t{\n\t\tfinal Cookie cookie = getCookie(component);\n\t\tif (cookie != null)\n\t\t{\n\t\t\tfinal String value = cookie.getValue();\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\t// Assign the retrieved/persisted value to the component\n\t\t\t\tcomponent.setModelValue(value.split(FormComponent.VALUE_SEPARATOR));\n\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Cookie value successfully transferred into Component: \" + component);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Gets the cookie for a given persistent form component. The name of the cookie will be the\n\t * component's page relative path (@see\n\t * org.apache.wicket.markup.html.form.FormComponent#getPageRelativePath()). Be reminded that\n\t * only if the cookie data have been provided by the client (browser), they'll be accessible by\n\t * the server.\n\t * \n\t * @param component\n\t *            The form component\n\t * @return The cookie for the component or null if none is available\n\t */\n\tprivate Cookie getCookie(final FormComponent<?> component)\n\t{\n\t\t// Gets the cookie's name\n\t\tfinal String name = getName(component);\n\n\t\t// Get the cookie attached to the Request by the client browser\n\t\tCookie cookie = getCookie(name);\n\t\tif (cookie != null)\n\t\t{\n\t\t\t// cookie with no value do me no good!\n\t\t\tif (cookie.getValue() != null && cookie.getValue().length() > 0)\n\t\t\t{\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Got cookie: \" + cookieToDebugString(cookie));\n\t\t\t\t}\n\t\t\t\treturn cookie;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Got cookie \" + name + \", but it had no value; returning null\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":59379,"modified_method":"/**\n\t * Gets the cookie for a given persistent form component. The name of the cookie will be the\n\t * component's page relative path (@see\n\t * org.apache.wicket.markup.html.form.FormComponent#getPageRelativePath()). Be reminded that\n\t * only if the cookie data have been provided by the client (browser), they'll be accessible by\n\t * the server.\n\t * \n\t * @param component\n\t *            The form component\n\t * @return The cookie for the component or null if none is available\n\t */\n\tprivate Cookie getCookie(final FormComponent<?> component)\n\t{\n\t\t// Gets the cookie's name\n\t\tfinal String name = getName(component);\n\n\t\t// Get the cookie attached to the Request by the client browser\n\t\tCookie cookie = getCookie(name);\n\t\tif (cookie != null)\n\t\t{\n\t\t\t// cookie with no value do me no good!\n\t\t\tif (cookie.getValue() != null && cookie.getValue().length() > 0)\n\t\t\t{\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Found cookie: \" + cookieToDebugString(cookie) + \"; request URI=\" +\n\t\t\t\t\t\tgetWebRequest().getHttpServletRequest().getRequestURI());\n\t\t\t\t}\n\t\t\t\treturn cookie;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Found cookie \" + name + \", but it had no value; returning null\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Gets any cookies for request.\n\t * \n\t * @param name\n\t *            The name of the cookie to be looked up\n\t * \n\t * @return Any cookies for this request\n\t */\n\tprivate Cookie getCookie(String name)\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn getWebRequest().getCookie(name);\n\t\t}\n\t\tcatch (NullPointerException ex)\n\t\t{\n\t\t\t// Ignore any app server problem here\n\t\t}\n\n\t\treturn null;\n\t}","id":59380,"modified_method":"/**\n\t * Gets any cookies for request.\n\t * \n\t * @param name\n\t *            The name of the cookie to be looked up\n\t * \n\t * @return Any cookies for this request\n\t */\n\tprivate Cookie getCookie(String name)\n\t{\n\t\ttry\n\t\t{\n\t\t\tCookie cookie = getWebRequest().getCookie(name);\n\t\t\tif (log.isDebugEnabled())\n\t\t\t{\n\t\t\t\tif (cookie != null)\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Found Cookie with name=\" + name + \" and request URI=\" +\n\t\t\t\t\t\tgetWebRequest().getHttpServletRequest().getRequestURI());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"Unable to find Cookie with name=\" + name + \" and request URI=\" +\n\t\t\t\t\t\tgetWebRequest().getHttpServletRequest().getRequestURI());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cookie;\n\t\t}\n\t\tcatch (NullPointerException ex)\n\t\t{\n\t\t\t// Ignore any app server problem here\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"38b2d49b74742a5cfc03fd023214c1bbb357d15c","url":"https://github.com/apache/wicket"},{"original_method":"public void readData(DataInput in) throws IOException {\n        dataKey = new Data();\n        dataKey.readData(in);\n    }","id":59381,"modified_method":"public void readData(DataInput in) throws IOException {\n        dataKey = new Data();\n        dataKey.readData(in);\n        threadId = in.readInt();\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void writeData(DataOutput out) throws IOException {\n        dataKey.writeData(out);\n    }","id":59382,"modified_method":"public void writeData(DataOutput out) throws IOException {\n        dataKey.writeData(out);\n        out.writeInt(threadId);\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        txnalService.commit(txnId, context.getPartitionId());\n        ResponseHandler responseHandler = context.getResponseHandler();\n        responseHandler.sendResponse(null);\n    }","id":59383,"modified_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        ResponseHandler responseHandler = context.getResponseHandler();\n        try {\n            txnalService.commit(txnId, context.getPartitionId());\n            responseHandler.sendResponse(null);\n        } catch (TransactionException e) {\n            responseHandler.sendResponse(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Object put(String name, Object k, Object v, long ttl) {\n        Data key = toData(k);\n        int partitionId = nodeService.getPartitionId(key);\n        ThreadContext threadContext = ThreadContext.get();\n        TransactionImpl txn = threadContext.getTransaction();\n        String txnId = null;\n        if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {\n            txnId = txn.getTxnId();\n            txn.attachParticipant(MAP_SERVICE_NAME, partitionId);\n        }\n        PutOperation putOperation = new PutOperation(name, toData(k), v, txnId, ttl);\n        try {\n            Invocation invocation = nodeService.createSinglePartitionInvocation(MAP_SERVICE_NAME, putOperation, partitionId).build();\n            Future f = invocation.invoke();\n            Data response = (Data) f.get();\n            return toObject(response);\n        } catch (Throwable throwable) {\n            throw new RuntimeException(throwable);\n        }\n    }","id":59384,"modified_method":"public Object put(String name, Object k, Object v, long ttl) {\n        Data key = toData(k);\n        int partitionId = nodeService.getPartitionId(key);\n        ThreadContext threadContext = ThreadContext.get();\n        TransactionImpl txn = threadContext.getTransaction();\n        String txnId = null;\n        if (txn != null && txn.getStatus() == Transaction.TXN_STATUS_ACTIVE) {\n            txnId = txn.getTxnId();\n            txn.attachParticipant(MAP_SERVICE_NAME, partitionId);\n        }\n        PutOperation putOperation = new PutOperation(name, toData(k), v, txnId, ttl);\n        try {\n            Invocation invocation = nodeService.createSinglePartitionInvocation(MAP_SERVICE_NAME, putOperation, partitionId).build();\n            Future f = invocation.invoke();\n            Object response = f.get();\n            if (response instanceof Response) {\n                return ((Response) response).getResult();\n            }\n            return toObject((Data) response);\n        } catch (Throwable throwable) {\n            throw new RuntimeException(throwable);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void prepare(String txnId, int partitionId) {\n        System.out.println(nodeService.getThisAddress() + \" MapService prepare \" + txnId);\n        PartitionContainer pc = partitionContainers[partitionId];\n        TransactionLog txnLog = pc.getTransactionLog(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        takeBackups(new MapTxnBackupPrepareOperation(txnLog), partitionId, maxBackupCount);\n    }","id":59385,"modified_method":"public void prepare(String txnId, int partitionId) throws TransactionException {\n        System.out.println(nodeService.getThisAddress() + \" MapService prepare \" + txnId);\n        PartitionContainer pc = partitionContainers[partitionId];\n        TransactionLog txnLog = pc.getTransactionLog(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        try {\n            nodeService.takeBackups(new MapTxnBackupPrepareOperation(txnLog), partitionId, maxBackupCount, 60);\n        } catch (Exception e) {\n            throw new TransactionException(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void rollback(String txnId, int partitionId) {\n        System.out.println(nodeService.getThisAddress() + \" MapService commit \" + txnId);\n        getPartitionContainer(partitionId).rollback(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        takeBackups(new MapTxnBackupRollbackOperation(txnId), partitionId, maxBackupCount);\n    }","id":59386,"modified_method":"public void rollback(String txnId, int partitionId) throws TransactionException {\n        System.out.println(nodeService.getThisAddress() + \" MapService commit \" + txnId);\n        getPartitionContainer(partitionId).rollback(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        try {\n            nodeService.takeBackups(new MapTxnBackupRollbackOperation(txnId), partitionId, maxBackupCount, 60);\n        } catch (Exception e) {\n            throw new TransactionException(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void commit(String txnId, int partitionId) {\n        System.out.println(nodeService.getThisAddress() + \" MapService commit \" + txnId);\n        getPartitionContainer(partitionId).commit(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        takeBackups(new MapTxnBackupCommitOperation(txnId), partitionId, maxBackupCount);\n    }","id":59387,"modified_method":"public void commit(String txnId, int partitionId) throws TransactionException {\n        System.out.println(nodeService.getThisAddress() + \" MapService commit \" + txnId);\n        getPartitionContainer(partitionId).commit(txnId);\n        int maxBackupCount = 1; //txnLog.getMaxBackupCount();\n        try {\n            nodeService.takeBackups(new MapTxnBackupCommitOperation(txnId), partitionId, maxBackupCount, 60);\n        } catch (Exception e) {\n            throw new TransactionException(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void handleOperation(final Packet packet) {\n        final int partitionId = packet.blockId;\n        final boolean nonBlocking = packet.longValue == 1;\n        final Data data = packet.getValueData();\n        final long callId = packet.callId;\n        final Address caller = packet.conn.getEndPoint();\n        final String serviceName = packet.name;\n        final Executor executor = getExecutor(partitionId, nonBlocking);\n        executor.execute(new Runnable() {\n            public void run() {\n                try {\n                    final Operation op = (Operation) toObject(data);\n                    setOperationContext(op, serviceName, caller, callId, partitionId);\n                    final boolean noReply = (op instanceof NoReply);\n                    if (!noReply) {\n                        ResponseHandler responseHandler = new ResponseHandler() {\n                            public void sendResponse(Object response) {\n                                if (!noReply) {\n                                    if (!(response instanceof Operation)) {\n                                        response = new Response(response);\n                                    }\n                                    packet.clearForResponse();\n                                    packet.blockId = partitionId;\n                                    packet.callId = callId;\n                                    packet.longValue = (response instanceof NonBlockingOperation) ? 1 : 0;\n                                    packet.setValue(toData(response));\n                                    packet.name = serviceName;\n                                    node.concurrentMapManager.sendOrReleasePacket(packet, packet.conn);\n                                }\n                            }\n                        };\n                        op.getOperationContext().setResponseHandler(responseHandler);\n                    }\n                    try {\n                        if (partitionId != -1) {\n                            PartitionInfo partitionInfo = getPartitionInfo(partitionId);\n                            Address owner = partitionInfo.getOwner();\n                            if (!(op instanceof NonBlockingOperation) && !getThisAddress().equals(owner)) {\n                                throw new WrongTargetException(getThisAddress(), owner);\n                            }\n                        }\n                        op.run();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        if (!noReply) {\n                            op.getOperationContext().getResponseHandler().sendResponse(e);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    packet.clearForResponse();\n                    packet.blockId = partitionId;\n                    packet.callId = callId;\n                    packet.longValue = 1;\n                    packet.setValue(toData(e));\n                    packet.name = serviceName;\n                    node.concurrentMapManager.sendOrReleasePacket(packet, packet.conn);\n                }\n            }\n        });\n    }","id":59388,"modified_method":"public void handleOperation(final Packet packet) {\n        final int partitionId = packet.blockId;\n        final boolean nonBlocking = packet.longValue == 1;\n        final Data data = packet.getValueData();\n        final long callId = packet.callId;\n        final Address caller = packet.conn.getEndPoint();\n        final String serviceName = packet.name;\n        final Executor executor = getExecutor(partitionId, nonBlocking);\n        executor.execute(new Runnable() {\n            public void run() {\n                try {\n                    final Operation op = (Operation) toObject(data);\n                    setOperationContext(op, serviceName, caller, callId, partitionId);\n                    final boolean noReply = (op instanceof NoReply);\n                    if (!noReply) {\n                        ResponseHandler responseHandler = new ResponseHandler() {\n                            public void sendResponse(Object response) {\n                                if (!(response instanceof Operation)) {\n                                    response = new Response(response);\n                                }\n                                packet.clearForResponse();\n                                packet.blockId = partitionId;\n                                packet.callId = callId;\n                                packet.longValue = (response instanceof NonBlockingOperation) ? 1 : 0;\n                                packet.setValue(toData(response));\n                                packet.name = serviceName;\n                                node.concurrentMapManager.sendOrReleasePacket(packet, packet.conn);\n                            }\n                        };\n                        op.getOperationContext().setResponseHandler(responseHandler);\n                    }\n                    try {\n                        if (partitionId != -1) {\n                            PartitionInfo partitionInfo = getPartitionInfo(partitionId);\n                            Address owner = partitionInfo.getOwner();\n                            if (!(op instanceof NonBlockingOperation) && !getThisAddress().equals(owner)) {\n                                throw new WrongTargetException(getThisAddress(), owner);\n                            }\n                        }\n                        op.run();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        if (!noReply) {\n                            op.getOperationContext().getResponseHandler().sendResponse(e);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    packet.clearForResponse();\n                    packet.blockId = partitionId;\n                    packet.callId = callId;\n                    packet.longValue = 1;\n                    packet.setValue(toData(e));\n                    packet.name = serviceName;\n                    node.concurrentMapManager.sendOrReleasePacket(packet, packet.conn);\n                }\n            }\n        });\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"void invokeOnSinglePartition(final SinglePartitionInvocation inv) {\n        final Address target = inv.getTarget();\n        final Operation op = inv.getOperation();\n        final int partitionId = inv.getPartitionId();\n        final String serviceName = inv.getServiceName();\n        final boolean nonBlocking = (op instanceof NonBlockingOperation);\n        setOperationContext(op, serviceName, node.getThisAddress(), -1, partitionId)\n                .setLocal(true);\n        if (target == null) {\n            throw new NullPointerException(inv.getOperation() + \": Target is null\");\n        }\n        if (getClusterImpl().getMember(target) == null) {\n            throw new RuntimeException(\"Target not a member: \" + target);\n        }\n        if (getThisAddress().equals(target)) {\n            if (!(op instanceof NoReply)) {\n                op.getOperationContext().setResponseHandler(new ResponseHandler() {\n                    public void sendResponse(Object obj) {\n                        inv.setResult(obj);\n                    }\n                });\n            }\n            runLocally(partitionId, op, nonBlocking);\n        } else {\n            final Packet packet = new Packet();\n            packet.operation = REMOTE_CALL;\n            packet.blockId = partitionId;\n            packet.name = serviceName;\n            packet.longValue = nonBlocking ? 1 : 0;\n            Data valueData = toData(op);\n            packet.setValue(valueData);\n            TheCall call = new TheCall(target, inv);\n            boolean sent = node.concurrentMapManager.registerAndSend(target, packet, call);\n            if (!sent) {\n                inv.setResult(new IOException());\n            }\n        }\n    }","id":59389,"modified_method":"void invokeOnSinglePartition(final SinglePartitionInvocation inv) {\n        ThreadContext.get().setCurrentFactory(node.factory);\n        final Address target = inv.getTarget();\n        final Operation op = inv.getOperation();\n        final int partitionId = inv.getPartitionId();\n        final String serviceName = inv.getServiceName();\n        final boolean nonBlocking = (op instanceof NonBlockingOperation);\n        setOperationContext(op, serviceName, node.getThisAddress(), -1, partitionId)\n                .setLocal(true);\n        if (op instanceof KeyBasedOperation) {\n            ((KeyBasedOperation) op).setThreadId(ThreadContext.get().getThreadId());\n        }\n        if (target == null) {\n            throw new NullPointerException(inv.getOperation() + \": Target is null\");\n        }\n        if (getClusterImpl().getMember(target) == null) {\n            throw new RuntimeException(\"Target not a member: \" + target);\n        }\n        if (getThisAddress().equals(target)) {\n            if (!(op instanceof NoReply)) {\n                op.getOperationContext().setResponseHandler(new ResponseHandler() {\n                    public void sendResponse(Object obj) {\n                        inv.setResult(obj);\n                    }\n                });\n            }\n            runLocally(partitionId, op, nonBlocking);\n        } else {\n            final Packet packet = new Packet();\n            packet.operation = REMOTE_CALL;\n            packet.blockId = partitionId;\n            packet.name = serviceName;\n            packet.longValue = nonBlocking ? 1 : 0;\n            Data valueData = toData(op);\n            packet.setValue(valueData);\n            TheCall call = new TheCall(target, inv);\n            boolean sent = node.concurrentMapManager.registerAndSend(target, packet, call);\n            if (!sent) {\n                inv.setResult(new IOException());\n            }\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        txnalService.prepare(txnId, context.getPartitionId());\n        ResponseHandler responseHandler = context.getResponseHandler();\n        responseHandler.sendResponse(null);\n    }","id":59390,"modified_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        ResponseHandler responseHandler = context.getResponseHandler();\n        try {\n            txnalService.prepare(txnId, context.getPartitionId());\n            responseHandler.sendResponse(null);\n        } catch (TransactionException e) {\n            responseHandler.sendResponse(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public PutBackupOperation(String name, Data dataKey, Data dataValue, long ttl) {\n        super(name, dataKey, dataValue, null, ttl);\n    }","id":59391,"modified_method":"public PutBackupOperation(String name, Data dataKey, Data dataValue, long ttl) {\n        this(name, dataKey, dataValue, ttl, true);\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        if (dataValue == null) {\n            dataValue = toData(value);\n        }\n        OperationContext context = getOperationContext();\n        ResponseHandler responseHandler = context.getResponseHandler();\n        System.out.println(context.getNodeService().getThisAddress() + \" Put txnId  \" + txnId);\n        MapService mapService = (MapService) context.getService();\n        int partitionId = context.getPartitionId();\n        PartitionContainer pc = mapService.getPartitionContainer(partitionId);\n        if (txnId != null) {\n            pc.addTransactionLogItem(txnId, new TransactionLogItem(name, dataKey, dataValue, false, false));\n            responseHandler.sendResponse(null);\n            return;\n        }\n        MapPartition mapPartition = pc.getMapPartition(name);\n        Record record = mapPartition.records.get(dataKey);\n        Object key = null;\n        Object oldValue = null;\n        Data oldValueData = null;\n        if (record == null) {\n            if (mapPartition.loader != null) {\n                key = toObject(dataKey);\n                oldValue = mapPartition.loader.load(key);\n                oldValueData = toData(oldValue);\n            }\n            record = new DefaultRecord(null, partitionId, dataKey, dataValue, -1, -1, mapService.nextId());\n            mapPartition.records.put(dataKey, record);\n        } else {\n            oldValueData = record.getValueData();\n            record.setValueData(dataValue);\n        }\n        record.setActive();\n        record.setDirty(true);\n        if (mapPartition.store != null && mapPartition.writeDelayMillis == 0) {\n            if (key == null) {\n                key = toObject(dataKey);\n            }\n            mapPartition.store.store(key, record.getValue());\n        }\n        boolean callerBackup = takeBackup();\n        Object result = (callerBackup) ? new PutBackupAndResponse(oldValueData, name, dataKey, dataValue) : new Response(oldValueData);\n        responseHandler.sendResponse(result);\n    }","id":59392,"modified_method":"public void run() {\n        if (dataValue == null) {\n            dataValue = toData(value);\n        }\n        OperationContext context = getOperationContext();\n        ResponseHandler responseHandler = context.getResponseHandler();\n        System.out.println(context.getNodeService().getThisAddress() + \" Put txnId  \" + txnId);\n        MapService mapService = (MapService) context.getService();\n        int partitionId = context.getPartitionId();\n        PartitionContainer pc = mapService.getPartitionContainer(partitionId);\n        if (txnId != null) {\n            pc.addTransactionLogItem(txnId, new TransactionLogItem(name, dataKey, dataValue, false, false));\n            responseHandler.sendResponse(null);\n            return;\n        }\n        MapPartition mapPartition = pc.getMapPartition(name);\n        Record record = mapPartition.records.get(dataKey);\n        Object key = null;\n        Object oldValue = null;\n        Data oldValueData = null;\n        if (record == null) {\n            if (mapPartition.loader != null) {\n                key = toObject(dataKey);\n                oldValue = mapPartition.loader.load(key);\n                oldValueData = toData(oldValue);\n            }\n            record = new DefaultRecord(null, partitionId, dataKey, dataValue, -1, -1, mapService.nextId());\n            mapPartition.records.put(dataKey, record);\n        } else {\n            oldValueData = record.getValueData();\n            record.setValueData(dataValue);\n        }\n        record.setActive();\n        record.setDirty(true);\n        if (mapPartition.store != null && mapPartition.writeDelayMillis == 0) {\n            if (key == null) {\n                key = toObject(dataKey);\n            }\n            mapPartition.store.store(key, record.getValue());\n        }\n        boolean callerBackup = takeBackup();\n        Operation preResponseBackupOp = null;\n        if (callerBackup) {\n            preResponseBackupOp = new PutBackupOperation(name, dataKey, dataValue, ttl, false);\n        }\n        responseHandler.sendResponse(new Response(preResponseBackupOp, oldValueData, false));\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void readData(DataInput in) throws IOException {\n        boolean NULL = in.readBoolean();\n        if (!NULL) {\n            resultData = new Data();\n            resultData.readData(in);\n        }\n        exception = in.readBoolean();\n    }","id":59393,"modified_method":"public void readData(DataInput in) throws IOException {\n        opBeforeData = SerializationHelper.readNullableData(in);\n        resultData = SerializationHelper.readNullableData(in);\n        exception = in.readBoolean();\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void writeData(DataOutput out) throws IOException {\n        boolean NULL = (resultData == null);\n        out.writeBoolean(NULL);\n        if (!NULL) {\n            resultData.writeData(out);\n        }\n        out.writeBoolean(exception);\n    }","id":59394,"modified_method":"public void writeData(DataOutput out) throws IOException {\n        SerializationHelper.writeNullableData(out, opBeforeData);\n        SerializationHelper.writeNullableData(out, resultData);\n        out.writeBoolean(exception);\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Response(Object result, boolean exception) {\n        this.result = result;\n        this.exception = exception;\n        try {\n            this.resultData = toData(result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }","id":59395,"modified_method":"public Response(Object result, boolean exception) {\n        this(null, result, exception);\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        long callId = getOperationContext().getCallId();\n        getOperationContext().getNodeService().notifyCall(callId, Response.this);\n    }","id":59396,"modified_method":"public void run() {\n        if (opBeforeData != null) {\n            Operation op = (Operation) toObject(opBeforeData);\n            op.getOperationContext().setCallId(getOperationContext().getCallId())\n                    .setService(getOperationContext().getService())\n                    .setPartitionId(getOperationContext().getPartitionId())\n                    .setCaller(getOperationContext().getCaller())\n                    .setCallId(getOperationContext().getCallId())\n                    .setNodeService(getOperationContext().getNodeService());\n            op.run();\n        }\n        long callId = getOperationContext().getCallId();\n        getOperationContext().getNodeService().notifyCall(callId, Response.this);\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        txnalService.rollback(txnId, context.getPartitionId());\n        ResponseHandler responseHandler = context.getResponseHandler();\n        responseHandler.sendResponse(null);\n    }","id":59397,"modified_method":"public void run() {\n        OperationContext context = getOperationContext();\n        TransactionalService txnalService = (TransactionalService) context.getService();\n        ResponseHandler responseHandler = context.getResponseHandler();\n        try {\n            txnalService.rollback(txnId, context.getPartitionId());\n            responseHandler.sendResponse(null);\n        } catch (TransactionException e) {\n            responseHandler.sendResponse(e);\n        }\n    }","commit_id":"5cf89b55ad0ad1afc01f5556805d7de748cd8635","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void update( Cluster cluster, List<ClusterAddressInfo> ccList ) {\n    if ( !cluster.getState( ).isAddressingInitialized( ) ) {\n      Helper.loadStoredAddresses( cluster );\n      cluster.getState( ).setAddressingInitialized( true );\n    }\n    for( ClusterAddressInfo addrInfo : ccList ) {\n      try {\n        Address address = Helper.lookupOrCreate( cluster, addrInfo );\n        if ( address.isAssigned( ) ) {\n          if( Address.UNALLOCATED_USERID.equals( address.getUserId( ) ) ) {\n            this.markAsAllocated( cluster, addrInfo, address );\n          }\n          try {\n            VmInstance vm = VmInstances.getInstance( ).lookupByInstanceIp( addrInfo.getInstanceIp( ) );\n            cluster.getState( ).clearOrphan( addrInfo );\n          } catch ( NoSuchElementException e ) {\n            InetAddress addr = null;\n            try {\n              addr = Inet4Address.getByName( addrInfo.getInstanceIp( ) );\n            } catch ( UnknownHostException e1 ) {\n              LOG.debug( e1, e1 );\n            }\n            if ( addr == null || !addr.isLoopbackAddress( )  ) {\n              cluster.getState().handleOrphan( addrInfo );\n            }\n          }\n        } else if( address.isAllocated( ) && Address.UNALLOCATED_USERID.equals( address.getUserId( ) ) && !address.isPending( ) ) {\n          this.markAsAllocated( cluster, addrInfo, address );\n        } \n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }\n  }","id":59398,"modified_method":"public void update( Cluster cluster, List<ClusterAddressInfo> ccList ) {\n    if ( !cluster.getState( ).isAddressingInitialized( ) ) {\n      Helper.loadStoredAddresses( cluster );\n      cluster.getState( ).setAddressingInitialized( true );\n    }\n    for ( ClusterAddressInfo addrInfo : ccList ) {\n      try {\n        Address address = Helper.lookupOrCreate( cluster, addrInfo );\n        if ( address.isAssigned( ) ) {\n          if ( Address.UNALLOCATED_USERID.equals( address.getUserId( ) ) ) {\n            Helper.markAsAllocated( cluster, addrInfo, address );\n          }\n          try {\n            VmInstance vm = VmInstances.getInstance( ).lookupByInstanceIp( addrInfo.getInstanceIp( ) );\n            cluster.getState( ).clearOrphan( addrInfo );\n          } catch ( NoSuchElementException e ) {\n            InetAddress addr = null;\n            try {\n              addr = Inet4Address.getByName( addrInfo.getInstanceIp( ) );\n            } catch ( UnknownHostException e1 ) {\n              LOG.debug( e1, e1 );\n            }\n            if ( addr == null || !addr.isLoopbackAddress( ) ) {\n              cluster.getState( ).handleOrphan( addrInfo );\n            }\n          }\n        } else if ( address.isAllocated( ) && Address.UNALLOCATED_USERID.equals( address.getUserId( ) ) && !address.isPending( ) ) {\n          Helper.markAsAllocated( cluster, addrInfo, address );\n        }\n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }\n  }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"protected static void loadStoredAddresses( Cluster cluster ) {\n      try {\n        EntityWrapper<Address> db = new EntityWrapper<Address>( );\n        Address clusterAddr = new Address( );\n        clusterAddr.setCluster( cluster.getName( ) );\n        List<Address> addrList = Lists.newArrayList( );\n        try {\n           addrList = db.query( clusterAddr );\n          db.commit( );\n        } catch ( Exception e1 ) {\n          db.rollback( );\n        }\n        for( Address addr : addrList ) {\n          try {\n            Addresses.getInstance( ).lookup( addr.getName( ) );\n            addr.init( );\n          } catch ( Throwable e ) {\n            addr.init( );\n          }\n        }\n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }","id":59399,"modified_method":"protected static void loadStoredAddresses( Cluster cluster ) {\n      try {\n        EntityWrapper<Address> db = new EntityWrapper<Address>( );\n        Address clusterAddr = new Address( );\n        clusterAddr.setCluster( cluster.getName( ) );\n        List<Address> addrList = Lists.newArrayList( );\n        try {\n          addrList = db.query( clusterAddr );\n          db.commit( );\n        } catch ( Exception e1 ) {\n          db.rollback( );\n        }\n        for ( Address addr : addrList ) {\n          try {\n            LOG.info( \"[INIT] restoring persistent address info for: \" + addr );\n            Addresses.getInstance( ).lookup( addr.getName( ) );\n            addr.init( );\n          } catch ( Throwable e ) {\n            addr.init( );\n          }\n        }\n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"protected static Address lookupOrCreate( Cluster cluster, ClusterAddressInfo addrInfo ) {\n      Address addr = null;\n      try {\n        addr = Addresses.getInstance( ).lookupDisabled( addrInfo.getAddress( ) );\n      } catch ( NoSuchElementException e1 ) {\n        try {\n          addr = Addresses.getInstance( ).lookup( addrInfo.getAddress( ) );\n        } catch ( NoSuchElementException e ) {\n          addr = new Address(addrInfo.getAddress( ), cluster.getName( ));\n        }\n      }\n      if( addrInfo.getInstanceIp( ) != null &&  !\"\".equals(addrInfo.getInstanceIp( ))) {\n        try {\n          VmInstance vm = VmInstances.getInstance( ).lookupByInstanceIp( addrInfo.getInstanceIp( ) );\n          if( VmInstance.DEFAULT_IP.equals( vm.getNetworkConfig().getIgnoredPublicIp( ) ) ) {\n            vm.getNetworkConfig( ).setIgnoredPublicIp( addrInfo.getAddress( ) );\n            if( !addr.isAllocated( ) ) {\n              try {\n                addr.allocate( Component.eucalyptus.name( ) );\n              } catch ( Throwable e1 ) {\n                LOG.debug( e1, e1 );\n              }\n            }\n            if( !addr.isAssigned() && !addr.isPending() ) {\n              try {\n                addr.assign( vm.getInstanceId( ), addrInfo.getInstanceIp( ) ).clearPending( );\n              } catch ( Throwable e1 ) {\n                LOG.debug( e1, e1 );\n              }\n            }            \n          }\n        } catch ( NoSuchElementException e ) {\n          LOG.debug( \"Failed to lookup instance owning the address: \" + addrInfo );\n          if( !addr.isPending( ) ) {\n            final boolean isSystemOwned = addr.isSystemOwned( );\n            final Address a = addr;\n            try {\n              new UnassignAddressCallback( addrInfo ).then( new SuccessCallback() {\n                @Override public void apply( Object t ) {\n                  if( isSystemOwned ) {\n                    Addresses.getAddressManager( ).releaseSystemAddress( a );\n                  }\n                }\n              } ).dispatch( cluster );\n            } catch ( Throwable e1 ) {\n              LOG.debug( e1, e1 );\n            }\n          }\n        }\n      } else {\n        if( !addr.isPending( ) ) {\n          try {\n            VmInstance vm = VmInstances.getInstance( ).lookupByPublicIp( addrInfo.getAddress( ) );\n            vm.getNetworkConfig( ).setIgnoredPublicIp( VmInstance.DEFAULT_IP );\n          } catch ( NoSuchElementException e ) {\n            if( addr.isAssigned( ) ) {\n              try {\n                addr.unassign( ).clearPending( );\n              } catch ( Throwable e1 ) {\n                LOG.debug( e1, e1 );\n              }\n            }\n          }        \n        }\n      }\n      return addr;\n    }","id":59400,"modified_method":"protected static Address lookupOrCreate( Cluster cluster, ClusterAddressInfo addrInfo ) {\n      Address addr = null;\n      VmInstance vm = null;\n      try {\n        addr = Addresses.getInstance( ).lookupDisabled( addrInfo.getAddress( ) );\n        LOG.info( \"[INIT] found address in the inactive set cache: \" + addr );\n      } catch ( NoSuchElementException e1 ) {\n        try {\n          addr = Addresses.getInstance( ).lookup( addrInfo.getAddress( ) );\n          LOG.info( \"[INIT] found address in the active set cache: \" + addr );\n        } catch ( NoSuchElementException e ) {}\n      }\n      Helper.checkUniqueness( addrInfo );\n      if ( addrInfo.hasMapping( ) ) {\n        vm = Helper.maybeFindVm( addrInfo.getAddress( ), addrInfo.getInstanceIp( ) );\n        if ( addr != null && vm != null ) {\n          Helper.ensureAllocated( addr );\n          Helper.ensureAssigned( addr, vm );\n          cluster.getState( ).clearOrphan( addrInfo );\n        } else if ( addr != null && vm == null ) {\n          cluster.getState( ).handleOrphan( addrInfo );\n        } else if ( addr == null && vm != null ) {\n          addr = new Address( addrInfo.getAddress( ), cluster.getName( ), vm.getOwnerId( ), vm.getInstanceId( ), vm.getNetworkConfig( ).getIpAddress( ) );\n          cluster.getState( ).clearOrphan( addrInfo );\n        } else if( addr == null && vm == null ) {\n          addr = new Address( addrInfo.getAddress( ), cluster.getName( ) );\n          cluster.getState().handleOrphan( addrInfo );\n        }\n      } else {\n        if( addr != null && addr.isAssigned( ) && !addr.isPending( ) ) {\n          Helper.clearAddressCachedState( addr );\n          /* \n           * REVIEW:\n           * there are two cases here:\n           * - vm exists with assignment addr\n           * - no vm with assignment addr      \n           *      \n           * if( Helper.maybeFindVm( addr.getName( ), addr.getInstanceAddress( ) ) == null ) {\n           * } else {\n           * }\n           */\n        } else if( addr != null && !addr.isAssigned( ) && !addr.isPending( ) && addr.isSystemOwned( ) ) {\n          Addresses.getAddressManager( ).releaseSystemAddress( addr );\n        } else if( addr == null ) {\n          addr = new Address( addrInfo.getAddress( ), cluster.getName( ) );\n          Helper.clearVmState( addrInfo );\n        }\n      } \n      return addr;\n    }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void init( ) {//Should only EVER be called externally after loading from the db\n    this.state = new AtomicMarkableReference<State>( State.unallocated, false );\n    this.transition = QUIESCENT;\n    if( this.userId == null ) {\n      this.userId = UNALLOCATED_USERID;\n    }\n    if( this.instanceAddress == null || this.instanceId == null ) {\n      this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n      this.instanceId = UNASSIGNED_INSTANCEID;\n    }\n    if ( UNALLOCATED_USERID.equals( this.userId ) ) {\n      this.state.set( State.unallocated, true );\n      this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n      this.instanceId = UNASSIGNED_INSTANCEID;\n      Addresses.getInstance( ).registerDisabled( this );\n      this.state.set( State.unallocated, false );\n    } else if ( !this.instanceId.equals( UNASSIGNED_INSTANCEID ) ) {\n      this.state.set( State.assigned, true );\n      Addresses.getInstance( ).register( this );\n      this.state.set( State.assigned, false );\n    } else {\n      this.state.set( State.allocated, true );\n      if ( this.isSystemOwned( ) ) {\n        Addresses.getInstance( ).registerDisabled( this );\n        this.userId = UNALLOCATED_USERID;\n        this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n        this.instanceId = UNASSIGNED_INSTANCEID;\n        Address.removeAddress( this.name );\n        this.state.set( State.unallocated, false );        \n      } else {\n        Addresses.getInstance( ).register( this );\n        this.state.set( State.allocated, false );        \n      }\n    }\n    LOG.debug( \"Initialized address: \" + this.toString( ) );\n  }","id":59401,"modified_method":"public void init( ) {//Should only EVER be called externally after loading from the db\n    this.state = new AtomicMarkableReference<State>( State.unallocated, false );\n    this.transition = QUIESCENT;\n    if( this.userId == null ) {\n      this.userId = UNALLOCATED_USERID;\n    }\n    if( this.instanceAddress == null || this.instanceId == null ) {\n      this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n      this.instanceId = UNASSIGNED_INSTANCEID;\n    }\n    if ( UNALLOCATED_USERID.equals( this.userId ) ) {\n      this.state.set( State.unallocated, true );\n      this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n      this.instanceId = UNASSIGNED_INSTANCEID;\n      Addresses.getInstance( ).registerDisabled( this );\n      this.state.set( State.unallocated, false );\n    } else if ( !this.instanceId.equals( UNASSIGNED_INSTANCEID ) ) {\n      this.state.set( State.assigned, true );\n      Addresses.getInstance( ).register( this );\n      this.state.set( State.assigned, false );\n    } else {\n      this.state.set( State.allocated, true );\n      if ( this.isSystemOwned( ) ) {\n        Addresses.getInstance( ).registerDisabled( this );\n        this.userId = UNALLOCATED_USERID;\n        this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n        this.instanceId = UNASSIGNED_INSTANCEID;\n        Address.removeAddress( this.name );\n        this.state.set( State.unallocated, false );        \n      } else {\n        Addresses.getInstance( ).register( this );\n        this.state.set( State.allocated, false );        \n      }\n    }\n    LOG.debug( \"INIT Initialized address: \" + this.toString( ) );\n  }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public void handleOrphan( ClusterAddressInfo address ) {\n    Integer orphanCount = 1;\n    orphanCount = orphans.putIfAbsent( address, orphanCount );\n    LOG.warn( \"Found orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n    orphanCount = ( orphanCount == null ) ? 1 : orphanCount;\n    orphans.put( address, orphanCount + 1 );\n    LOG.warn( \"Updated orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n    if ( orphanCount > 10 ) {\n      LOG.warn( \"Unassigning orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n      new UnassignAddressCallback( address ).dispatch( this.clusterName );\n      orphans.remove( address.getAddress( ) );\n    }\n  }","id":59402,"modified_method":"public void handleOrphan( ClusterAddressInfo address ) {\n    Integer orphanCount = 1;\n    orphanCount = orphans.putIfAbsent( address, orphanCount );\n    LOG.warn( \"Found orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n    orphanCount = ( orphanCount == null ) ? 1 : orphanCount;\n    orphans.put( address, orphanCount + 1 );\n    LOG.warn( \"Updated orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n    if ( orphanCount > 10 ) {\n      LOG.warn( \"Unassigning orphaned public ip address: \" + LogUtil.dumpObject( address ) + \" count=\" + orphanCount );\n      try {\n        final Address addr = Addresses.getInstance( ).lookup( address.getAddress( ) );\n        new UnassignAddressCallback( address ).then( new SuccessCallback( ) {\n          @Override\n          public void apply( Object t ) {\n            if ( addr.isSystemOwned( ) ) {\n              Addresses.getAddressManager( ).releaseSystemAddress( addr );\n            }\n          }\n        } ).dispatch( this.clusterName );\n      } catch ( NoSuchElementException e ) {\n      }\n      orphans.remove( address.getAddress( ) );\n    }\n  }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public VmInstance lookupByPublicIp ( String ip ) throws NoSuchElementException {\n    for( VmInstance vm : this.listValues( ) ) {\n      if( ip.equals( vm.getNetworkConfig( ).getIgnoredPublicIp( ) ) ) {\n        return vm;\n      }\n    }\n    throw new NoSuchElementException( \"Can't find registered object with public ip:\" + ip + \" in \" + this.getClass( ).getSimpleName( ) );\n  }","id":59403,"modified_method":"public VmInstance lookupByPublicIp ( String ip ) throws NoSuchElementException {\n    for( VmInstance vm : this.listValues( ) ) {\n      if( ip.equals( vm.getNetworkConfig( ).getIgnoredPublicIp( ) ) && ( VmState.PENDING.equals( vm.getState( ) ) || VmState.RUNNING.equals( vm.getState( ) ) )) {\n        return vm;\n      }\n    }\n    throw new NoSuchElementException( \"Can't find registered object with public ip:\" + ip + \" in \" + this.getClass( ).getSimpleName( ) );\n  }","commit_id":"70a92326152ce56f931093bbb9d9c76eed9d587b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private static void ensureAllocated( Address addr, VmInstance vm ) {\n      if ( !addr.isAllocated( ) && !addr.isPending( ) ) {\n        try {\n          if ( !addr.isAssigned( ) && !addr.isPending( ) ) {\n            addr.pendingAssignment( );\n            try {\n              addr.assign( vm.getInstanceId( ), vm.getPrivateAddress( ) ).clearPending( );\n            } catch ( Throwable e1 ) {\n              LOG.debug( e1, e1 );\n            }\n          }\n        } catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      } else if ( !addr.isAssigned( ) ) {\n        try {\n          addr.assign( vm.getInstanceId( ), vm.getPrivateAddress( ) ).clearPending( );\n        } catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      } else {\n        LOG.debug( \"Address usage checked: \" + addr );\n      }\n    }","id":59404,"modified_method":"private static void ensureAllocated( Address addr, VmInstance vm ) {\n      if ( !addr.isAllocated( ) && !addr.isPending( ) ) {\n        try {\n          if ( !addr.isAssigned( ) && !addr.isPending( ) ) {\n            addr.pendingAssignment( );\n            try {\n              addr.assign( vm ).clearPending( );\n            } catch ( Throwable e1 ) {\n              LOG.debug( e1, e1 );\n            }\n          }\n        } catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      } else if ( !addr.isAssigned( ) ) {\n        try {\n          addr.assign( vm ).clearPending( );\n        } catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      } else {\n        LOG.debug( \"Address usage checked: \" + addr );\n      }\n    }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private static void markAsAllocated( Cluster cluster, ClusterAddressInfo addrInfo, Address address ) {\n      try {\n        if( !address.isPending( ) ) {\n          for ( VmInstance vm : VmInstances.getInstance( ).listValues( ) ) {\n            if ( addrInfo.getInstanceIp( ).equals( vm.getPrivateAddress( ) ) && VmState.RUNNING.equals( vm.getState( ) ) ) {\n              LOG.warn( \"Out of band address state change: \" + LogUtil.dumpObject( addrInfo ) + \" address=\" + address + \" vm=\" + vm );\n              if( !address.isAllocated( ) ) {\n                address.pendingAssignment( ).assign( vm.getInstanceId( ), vm.getPrivateAddress( ) ).clearPending( );\n              } else {\n                address.assign( vm.getInstanceId( ), vm.getPrivateAddress( ) ).clearPending( );\n              }\n              cluster.getState( ).clearOrphan( addrInfo );\n              return;\n            }\n          }\n        }\n      } catch ( IllegalStateException e ) {\n        LOG.error( e );\n      }\n    }","id":59405,"modified_method":"private static void markAsAllocated( Cluster cluster, ClusterAddressInfo addrInfo, Address address ) {\n      try {\n        if( !address.isPending( ) ) {\n          for ( VmInstance vm : VmInstances.getInstance( ).listValues( ) ) {\n            if ( addrInfo.getInstanceIp( ).equals( vm.getPrivateAddress( ) ) && VmState.RUNNING.equals( vm.getState( ) ) ) {\n              LOG.warn( \"Out of band address state change: \" + LogUtil.dumpObject( addrInfo ) + \" address=\" + address + \" vm=\" + vm );\n              if( !address.isAllocated( ) ) {\n                address.pendingAssignment( ).assign( vm ).clearPending( );\n              } else {\n                address.assign( vm ).clearPending( );\n              }\n              cluster.getState( ).clearOrphan( addrInfo );\n              return;\n            }\n          }\n        }\n      } catch ( IllegalStateException e ) {\n        LOG.error( e );\n      }\n    }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public Address unassign( ) {\n    this.transition( State.assigned, State.allocated, false, true, //\n                     new SplitTransition( Transition.unassigning ) {\n                       public void top( ) {\n                         String userId = Address.this.userId;\n                         try {\n                           VmInstance vm = VmInstances.getInstance( ).lookup( Address.this.getInstanceId( ) );\n                         } catch ( NoSuchElementException e ) {}\n                         EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_ASSIGN )\n                                    .withDetails( userId, Address.this.name, \"instance\", Address.this.instanceId )\n                                    .withDetails( \"instance-address\", Address.this.instanceAddress ).withDetails( \"type\", Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" ).info( );\n                       }\n                       \n                       public void bottom( ) {\n                         Address.this.instanceId = UNASSIGNED_INSTANCEID;\n                         Address.this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n                       }\n                     } );\n    return this;\n  }","id":59406,"modified_method":"public Address unassign( ) {\n    this.transition( State.assigned, State.allocated, false, true, //\n                     new SplitTransition( Transition.unassigning ) {\n                       public void top( ) {\n                         String userId = Address.this.userId;\n                         try {\n                           VmInstance vm = VmInstances.getInstance( ).lookup( Address.this.getInstanceId( ) );\n                           EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_UNASSIGNING )\n                                      .withDetails( vm.getOwnerId( ), Address.this.getName( ), \"instanceid\", vm.getInstanceId( ) )\n                                      .withDetails( \"type\", Address.this.isSystemOwned( )\n                                        ? \"SYSTEM\"\n                                        : \"USER\" )\n                                      .withDetails( \"cluster\", Address.this.getCluster( ) ).info( );\n                         } catch ( NoSuchElementException e ) {}\n                         EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_ASSIGN )\n                                    .withDetails( userId, Address.this.name, \"instance\", Address.this.instanceId )\n                                    .withDetails( \"instance-address\", Address.this.instanceAddress ).withDetails( \"type\", Address.this.isSystemOwned( )\n                                      ? \"SYSTEM\"\n                                      : \"USER\" ).info( );\n                       }\n                       \n                       public void bottom( ) {\n                         Address.this.instanceId = UNASSIGNED_INSTANCEID;\n                         Address.this.instanceAddress = UNASSIGNED_INSTANCEADDR;\n                       }\n                     } );\n    return this;\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public DisassociateAddressResponseType DisassociateAddress( DisassociateAddressType request ) throws EucalyptusCloudException {\n    DisassociateAddressResponseType reply = ( DisassociateAddressResponseType ) request.getReply( );\n    reply.set_return( false );\n    Addresses.updateAddressingMode( );\n    final Address address = Addresses.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getPublicIp( ) );\n    reply.set_return( true );\n    final String vmId = address.getInstanceId( );\n    if ( address.isSystemOwned( ) && !request.isAdministrator( ) ) {\n      throw new EucalyptusCloudException( \"Only administrators can unassign system owned addresses: \" + address.toString( ) );\n    } else {\n      try {\n        if ( address.isSystemOwned( ) ) {\n          AddressCategory.unassign( address ).then( new UnconditionalCallback( ) {\n            public void fire( ) {\n              try {\n                Addresses.system( VmInstances.getInstance( ).lookup( vmId ) );\n              } catch ( Exception e ) {\n                LOG.debug( e, e );\n              }\n            }\n          } ).dispatch( address.getCluster( ) );\n        } else {\n          AddressCategory.unassign( address ).then( new UnconditionalCallback( ) {\n            @Override\n            public void fire( ) {\n              try {\n                Addresses.system( VmInstances.getInstance( ).lookup( vmId ) );\n              } catch ( Exception e ) {\n                LOG.debug( e, e );\n              }\n            }\n          } ).dispatch( address.getCluster( ) );\n        }\n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }\n    return reply;\n  }","id":59407,"modified_method":"public DisassociateAddressResponseType DisassociateAddress( DisassociateAddressType request ) throws EucalyptusCloudException {\n    DisassociateAddressResponseType reply = ( DisassociateAddressResponseType ) request.getReply( );\n    reply.set_return( false );\n    Addresses.updateAddressingMode( );\n    final Address address = Addresses.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getPublicIp( ) );\n    reply.set_return( true );\n    final String vmId = address.getInstanceId( );\n    if ( address.isSystemOwned( ) && !request.isAdministrator( ) ) {\n      throw new EucalyptusCloudException( \"Only administrators can unassign system owned addresses: \" + address.toString( ) );\n    } else {\n      try {\n        if ( address.isSystemOwned( ) ) {\n          Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).then( new UnconditionalCallback( ) {\n            public void fire( ) {\n              try {\n                Addresses.system( VmInstances.getInstance( ).lookup( vmId ) );\n              } catch ( Exception e ) {\n                LOG.debug( e, e );\n              }\n            }\n          } ).dispatch( address.getCluster( ) );\n        } else {\n          Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).then( new UnconditionalCallback( ) {\n            @Override\n            public void fire( ) {\n              try {\n                Addresses.system( VmInstances.getInstance( ).lookup( vmId ) );\n              } catch ( Exception e ) {\n                LOG.debug( e, e );\n              }\n            }\n          } ).dispatch( address.getCluster( ) );\n        }\n      } catch ( Throwable e ) {\n        LOG.debug( e, e );\n      }\n    }\n    return reply;\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n  public AssociateAddressResponseType AssociateAddress( final AssociateAddressType request ) throws Exception {\n    AssociateAddressResponseType reply = ( AssociateAddressResponseType ) request.getReply( );\n    reply.set_return( false );\n    Addresses.updateAddressingMode( );\n    final Address address = Addresses.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getPublicIp( ) );//TODO: test should throw error.\n    final VmInstance vm = VmInstances.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getInstanceId( ) );\n    final VmInstance oldVm = findCurrentAssignedVm( address );\n    final Address oldAddr = findVmExistingAddress( vm );\n    final boolean oldAddrSystem = oldAddr != null ? oldAddr.isSystemOwned( ) : false;\n    reply.set_return( true );\n    \n    final UnconditionalCallback assignTarget = new UnconditionalCallback( ) {\n      public void fire( ) {\n        AddressCategory.assign( address, vm ).dispatch( address.getCluster( ) );\n        if ( oldVm != null ) {\n          Addresses.system( oldVm );\n        }\n      }\n    };\n    \n    final UnconditionalCallback unassignBystander = new UnconditionalCallback( ) {\n      public void fire( ) {\n        if ( oldAddr != null ) {\n          AddressCategory.unassign( oldAddr ).then( assignTarget ).dispatch( oldAddr.getCluster( ) );\n        } else {\n          assignTarget.fire( );\n        }\n      }\n    };\n    if ( address.isAssigned( ) ) {\n      Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).then( unassignBystander ).dispatch( oldAddr.getCluster( ) );\n    } else {\n      unassignBystander.fire( );\n    }\n    return reply;\n  }","id":59408,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  public AssociateAddressResponseType AssociateAddress( final AssociateAddressType request ) throws Exception {\n    AssociateAddressResponseType reply = ( AssociateAddressResponseType ) request.getReply( );\n    reply.set_return( false );\n    Addresses.updateAddressingMode( );\n    final Address address = Addresses.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getPublicIp( ) );//TODO: test should throw error.\n    final VmInstance vm = VmInstances.restrictedLookup( request.getUserId( ), request.isAdministrator( ), request.getInstanceId( ) );\n    final VmInstance oldVm = findCurrentAssignedVm( address );\n    final Address oldAddr = findVmExistingAddress( vm );\n    final boolean oldAddrSystem = oldAddr != null ? oldAddr.isSystemOwned( ) : false;\n    reply.set_return( true );\n    \n    final UnconditionalCallback assignTarget = new UnconditionalCallback( ) {\n      public void fire( ) {\n        Callbacks.newClusterRequest( address.assign( vm ).getCallback( ) ).then( new Callback.Success<BaseMessage>() {\n          public void fire( BaseMessage response ) {\n            vm.updatePublicAddress( address.getName( ) );\n          }\n        }).dispatch( address.getCluster( ) );\n        if ( oldVm != null ) {\n          Addresses.system( oldVm );\n        }\n      }\n    };\n    \n    final UnconditionalCallback unassignBystander = new UnconditionalCallback( ) {\n      public void fire( ) {\n        if ( oldAddr != null ) {\n          Callbacks.newClusterRequest( oldAddr.unassign( ).getCallback( ) ).then( assignTarget ).dispatch( oldAddr.getCluster( ) );\n        } else {\n          assignTarget.fire( );\n        }\n      }\n    };\n    if ( address.isAssigned( ) ) {\n      Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).then( unassignBystander ).dispatch( address.getCluster( ) );\n    } else {\n      unassignBystander.fire( );\n    }\n    return reply;\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void fire( AssignAddressResponseType msg ) {\n    try {\n      this.updateState( );\n    } catch ( IllegalStateException e ) {\n      AddressCategory.unassign( address ).dispatch( address.getCluster( ) );\n    } catch ( Exception e ) {\n      LOG.debug( e, e );\n      AddressCategory.unassign( address ).dispatch( address.getCluster( ) );\n    }\n  }","id":59409,"modified_method":"@Override\n  public void fire( AssignAddressResponseType msg ) {\n    try {\n      this.updateState( );\n    } catch ( IllegalStateException e ) {\n      Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).dispatch( address.getCluster( ) );\n    } catch ( Exception e ) {\n      LOG.debug( e, e );\n      Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).dispatch( address.getCluster( ) );\n    }\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void cleanupState( ) {\n    EventRecord.here( AssignAddressCallback.class, EventType.ADDRESS_ASSIGNING, Transition.assigning.toString( ), LogUtil.FAIL, address.toString( ) ).debug( );\n    LOG.debug( LogUtil.subheader( this.getRequest( ).toString( ) ) );\n    if ( this.address.isPending( ) ) {\n      this.address.clearPending( );\n    } else if ( this.address.isSystemOwned( ) ) {\n      Addresses.release( address );\n    } else if ( this.address.isAssigned( ) ) {\n      AddressCategory.unassign( address );\n    }\n  }","id":59410,"modified_method":"private void cleanupState( ) {\n    EventRecord.here( AssignAddressCallback.class, EventType.ADDRESS_ASSIGNING, Transition.assigning.toString( ), LogUtil.FAIL, address.toString( ) ).debug( );\n    LOG.debug( LogUtil.subheader( this.getRequest( ).toString( ) ) );\n    if ( this.address.isPending( ) ) {\n      this.address.clearPending( );\n    } else if ( this.address.isSystemOwned( ) ) {\n      Addresses.release( address );\n    } else if ( this.address.isAssigned( ) ) {\n      Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).dispatch( address.getCluster( ) );\n    }\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private Request makeRunRequest( RunInstancesType request, ResourceToken childToken, String rsvId, List<String> instanceIds, VmImageInfo imgInfo, VmKeyInfo keyInfo, VmTypeInfo vmInfo, Integer vlan, List<String> networkNames, List<String> netIndexes, final List<String> addrList, String userData ) {\n    List<String> macs = Lists.transform( instanceIds, new Function<String, String>( ) {\n      @Override\n      public String apply( String instanceId ) {\n        return VmInstances.getAsMAC( instanceId );\n      }\n    } );\n    VmRunType run = new VmRunType( rsvId, userData, childToken.getAmount( ), imgInfo, vmInfo, keyInfo, instanceIds, macs, vlan, networkNames, netIndexes ).regardingUserRequest( request );\n    Request<VmRunType, VmRunResponseType> req = Callbacks.newClusterRequest( new VmRunCallback( run, childToken ) );\n    if ( !addrList.isEmpty( ) ) {\n      req.then( new Callback.Success<VmRunResponseType>( ) {\n        @Override\n        public void fire( VmRunResponseType response ) {\n          Iterator<String> addrs = addrList.iterator( );\n          for ( VmInfo vmInfo : response.getVms( ) ) {//TODO: this will have some funny failure characteristics\n            Address addr = Addresses.getInstance( ).lookup( addrs.next( ) );\n            VmInstance vm = VmInstances.getInstance( ).lookup( vmInfo.getInstanceId( ) );\n            AddressCategory.assign( addr, vm ).dispatch( addr.getCluster( ) );\n          }\n        }\n      } );\n    }\n    return req;\n  }","id":59411,"modified_method":"private Request makeRunRequest( RunInstancesType request, ResourceToken childToken, String rsvId, List<String> instanceIds, VmImageInfo imgInfo, VmKeyInfo keyInfo, VmTypeInfo vmInfo, Integer vlan, List<String> networkNames, List<String> netIndexes, final List<String> addrList, String userData ) {\n    List<String> macs = Lists.transform( instanceIds, new Function<String, String>( ) {\n      @Override\n      public String apply( String instanceId ) {\n        return VmInstances.getAsMAC( instanceId );\n      }\n    } );\n    VmRunType run = new VmRunType( rsvId, userData, childToken.getAmount( ), imgInfo, vmInfo, keyInfo, instanceIds, macs, vlan, networkNames, netIndexes ).regardingUserRequest( request );\n    Request<VmRunType, VmRunResponseType> req = Callbacks.newClusterRequest( new VmRunCallback( run, childToken ) );\n    if ( !addrList.isEmpty( ) ) {\n      req.then( new Callback.Success<VmRunResponseType>( ) {\n        @Override\n        public void fire( VmRunResponseType response ) {\n          Iterator<String> addrs = addrList.iterator( );\n          for ( VmInfo vmInfo : response.getVms( ) ) {//TODO: this will have some funny failure characteristics\n            final Address addr = Addresses.getInstance( ).lookup( addrs.next( ) );\n            final VmInstance vm = VmInstances.getInstance( ).lookup( vmInfo.getInstanceId( ) );\n            Callbacks.newClusterRequest( addr.assign( vm ).getCallback( ) ).then( new Callback.Success<BaseMessage>() {\n              public void fire( BaseMessage response ) {\n                vm.updatePublicAddress( addr.getName( ) );\n              }\n            }).dispatch( addr.getCluster( ) );\n          }\n        }\n      } );\n    }\n    return req;\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void assignSystemAddress( VmInstance vm ) throws NotEnoughResourcesAvailable {\n    Address addr = this.allocateSystemAddresses( vm.getPlacement( ), 1 ).get( 0 );\n    AddressCategory.assign( addr, vm ).dispatch( addr.getCluster( ) );\n  }","id":59412,"modified_method":"@Override\n  public void assignSystemAddress( final VmInstance vm ) throws NotEnoughResourcesAvailable {\n    final Address addr = this.allocateSystemAddresses( vm.getPlacement( ), 1 ).get( 0 );\n    Callbacks.newClusterRequest( addr.assign( vm ).getCallback( ) ).then( new Callback.Success<BaseMessage>() {\n      public void fire( BaseMessage response ) {\n        vm.updatePublicAddress( addr.getName( ) );\n      }\n    }).dispatch( addr.getCluster( ) );\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public void assignSystemAddress( VmInstance vm ) throws NotEnoughResourcesAvailable {\n    Address addr = this.getNext( );\n    AddressCategory.assign( addr, vm ).dispatch( addr.getCluster( ) );\n  }","id":59413,"modified_method":"@Override\n  public void assignSystemAddress( final VmInstance vm ) throws NotEnoughResourcesAvailable {\n    final Address addr = this.allocateSystemAddresses( vm.getPlacement( ), 1 ).get( 0 );\n    Callbacks.newClusterRequest( addr.assign( vm ).getCallback( ) ).then( new Callback.Success<BaseMessage>() {\n      public void fire( BaseMessage response ) {\n        vm.updatePublicAddress( addr.getName( ) );\n      }\n    }).dispatch( addr.getCluster( ) );\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static UnconditionalCallback getCleanUpCallback( final Address address, final VmInstance vm, final int networkIndex, final String networkFqName, final Cluster cluster ) {\n    UnconditionalCallback cleanup = new UnconditionalCallback( ) {\n      public void fire( ) {\n        if ( address != null ) {\n          try {\n            if ( address.isSystemOwned( ) ) {\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"SYSTEM_ADDRESS\", address.toString( ) ).debug( );\n              Addresses.release( address );\n            } else {\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"USER_ADDRESS\", address.toString( ) ).debug( );\n              AddressCategory.unassign( address ).dispatch( address.getCluster( ) );\n            }\n          } catch ( IllegalStateException e ) {} catch ( Throwable e ) {\n            LOG.debug( e, e );\n          }\n        }\n        vm.updateNetworkIndex( -1 );\n        try {\n          if ( networkFqName != null ) {\n            Network net = Networks.getInstance( ).lookup( networkFqName );\n            if ( networkIndex > 0 && vm.getNetworkNames( ).size( ) > 0 ) {\n              net.returnNetworkIndex( networkIndex );\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"NETWORK_INDEX\", networkFqName, Integer.toString( networkIndex ) ).debug( );\n            }\n            if ( !Networks.getInstance( ).lookup( networkFqName ).hasTokens( ) ) {\n              StopNetworkCallback stopNet = new StopNetworkCallback( new NetworkToken( cluster.getName( ), net.getUserName( ), net.getNetworkName( ),\n                                                                                       net.getVlan( ) ) );\n              for ( Cluster c : Clusters.getInstance( ).listValues( ) ) {\n                Callbacks.newClusterRequest( stopNet.newInstance( ) ).dispatch( cluster.getServiceEndpoint( ) );\n              }\n            }\n          }\n        } catch ( NoSuchElementException e1 ) {} catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      }\n    };\n    return cleanup;\n  }","id":59414,"modified_method":"public static UnconditionalCallback getCleanUpCallback( final Address address, final VmInstance vm, final int networkIndex, final String networkFqName, final Cluster cluster ) {\n    UnconditionalCallback cleanup = new UnconditionalCallback( ) {\n      public void fire( ) {\n        if ( address != null ) {\n          try {\n            if ( address.isSystemOwned( ) ) {\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"SYSTEM_ADDRESS\", address.toString( ) ).debug( );\n              Addresses.release( address );\n            } else {\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"USER_ADDRESS\", address.toString( ) ).debug( );\n              Callbacks.newClusterRequest( address.unassign( ).getCallback( ) ).dispatch( address.getCluster( ) );\n            }\n          } catch ( IllegalStateException e ) {} catch ( Throwable e ) {\n            LOG.debug( e, e );\n          }\n        }\n        vm.updateNetworkIndex( -1 );\n        try {\n          if ( networkFqName != null ) {\n            Network net = Networks.getInstance( ).lookup( networkFqName );\n            if ( networkIndex > 0 && vm.getNetworkNames( ).size( ) > 0 ) {\n              net.returnNetworkIndex( networkIndex );\n              EventRecord.caller( SystemState.class, EventType.VM_TERMINATING, \"NETWORK_INDEX\", networkFqName, Integer.toString( networkIndex ) ).debug( );\n            }\n            if ( !Networks.getInstance( ).lookup( networkFqName ).hasTokens( ) ) {\n              StopNetworkCallback stopNet = new StopNetworkCallback( new NetworkToken( cluster.getName( ), net.getUserName( ), net.getNetworkName( ),\n                                                                                       net.getVlan( ) ) );\n              for ( Cluster c : Clusters.getInstance( ).listValues( ) ) {\n                Callbacks.newClusterRequest( stopNet.newInstance( ) ).dispatch( cluster.getServiceEndpoint( ) );\n              }\n            }\n          }\n        } catch ( NoSuchElementException e1 ) {} catch ( Throwable e1 ) {\n          LOG.debug( e1, e1 );\n        }\n      }\n    };\n    return cleanup;\n  }","commit_id":"84f64152ff3eaab5927c0926210869a22a22ad8d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic void serveResource(\n\t\t\tActionMapping actionMapping, ActionForm actionForm,\n\t\t\tPortletConfig portletConfig, ResourceRequest resourceRequest,\n\t\t\tResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tPortletContext portletContext = portletConfig.getPortletContext();\n\n\t\tPortletRequestDispatcher portletRequestDispatcher =\n\t\t\tportletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/portlet_configuration/\" +\n\t\t\t\t\t\"import_portlet_resources.jsp\");\n\n\t\tresourceRequest = ActionUtil.getWrappedResourceRequest(\n\t\t\tresourceRequest, null);\n\n\t\tportletRequestDispatcher.include(resourceRequest, resourceResponse);\n\t}","id":59415,"modified_method":"@Override\n\tpublic void serveResource(\n\t\t\tActionMapping actionMapping, ActionForm actionForm,\n\t\t\tPortletConfig portletConfig, ResourceRequest resourceRequest,\n\t\t\tResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(resourceRequest, Constants.CMD);\n\n\t\tPortletContext portletContext = portletConfig.getPortletContext();\n\n\t\tPortletRequestDispatcher portletRequestDispatcher = null;\n\n\t\tif (cmd.equals(Constants.EXPORT)) {\n\t\t\tportletRequestDispatcher = portletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/portlet_configuration/\" +\n\t\t\t\t\t\"export_portlet_processes.jsp\");\n\t\t}\n\t\telse {\n\t\t\tportletRequestDispatcher = portletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/portlet_configuration/\" +\n\t\t\t\t\t\"import_portlet_resources.jsp\");\n\t\t}\n\n\t\tresourceRequest = ActionUtil.getWrappedResourceRequest(\n\t\t\tresourceRequest, null);\n\n\t\tportletRequestDispatcher.include(resourceRequest, resourceResponse);\n\t}","commit_id":"146998686e20154fb6757653c0f568bfc71b2e84","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Called after the body has been processed.\n     * \n     * @return whether additional evaluations of the body are desired\n     */\n    public int doEndTag() throws JspException {\n        log.debug(\"IncludeTagHandler.doEndTag\");\n\n        final SlingHttpServletRequest request = TagUtil.getRequest(pageContext);\n\n        // check for resource otherwise resolve from path\n        RequestDispatcherOptions opts = null;\n        if (resource == null) {\n            if (path == null) {\n                resource = request.getResource();\n            } else {\n                if (!path.startsWith(\"/\")) {\n                    path = request.getResource().getPath() + \"/\" + JcrResourceUtil.normalize(this.path);\n                }\n                resource = request.getResourceResolver().getResource(path);\n            }\n        }\n\n        // if resource could not be resolved, create synthetic one\n        if (resource == null) {\n            if (resourceType == null) {\n                TagUtil.log(log, pageContext, \"unable to include path \" + path\n                    + \". Resource not found and no resource type given.\", null);\n                return EVAL_PAGE;\n            }\n            resource = new SyntheticResource(path, resourceType);\n        } else {\n            // overwrite resource type if desired\n            if (resourceType != null && !resourceType.equals(resource.getResourceType())) {\n                opts = new RequestDispatcherOptions();\n                opts.put(RequestDispatcherOptions.OPT_FORCE_RESOURCE_TYPE, resourceType);\n            }\n        }\n\n        try {\n            // optionally flush\n            if (flush && !(pageContext.getOut() instanceof BodyContent)) {\n                // might throw an IOException of course\n                pageContext.getOut().flush();\n            }\n            // include the rendered content\n            RequestDispatcher dispatcher = request.getRequestDispatcher(resource, opts);\n            if (dispatcher != null) {\n                SlingHttpServletResponse response = new JspSlingHttpServletResponseWrapper(\n                    pageContext);\n                dispatcher.include(request, response);\n            } else {\n                TagUtil.log(log, pageContext, \"No content to include...\", null);\n            }\n\n        } catch (IOException ioe) {\n            throw new JspException(\"Error including \" + path, ioe);\n        } catch (ServletException ce) {\n            throw new JspException(\"Error including \" + path,\n                TagUtil.getRootCause(ce));\n        }\n\n        return EVAL_PAGE;\n    }","id":59416,"modified_method":"/**\n     * Called after the body has been processed.\n     * \n     * @return whether additional evaluations of the body are desired\n     */\n    public int doEndTag() throws JspException {\n        log.debug(\"IncludeTagHandler.doEndTag\");\n\n        final SlingHttpServletRequest request = TagUtil.getRequest(pageContext);\n\n        // check for resource otherwise resolve from path\n        RequestDispatcherOptions opts = null;\n        if (resourceType != null) {\n            opts = new RequestDispatcherOptions();\n            opts.put(RequestDispatcherOptions.OPT_FORCE_RESOURCE_TYPE, resourceType);\n        }\n\n        // ensure the path (if set) is absolute and normalized\n        if (path != null) {\n            if (!path.startsWith(\"/\")) {\n                path = request.getResource().getPath() + \"/\" + path;\n            }\n            path = JcrResourceUtil.normalize(path);\n        }\n        \n        // check the resource\n        if (resource == null) {\n            if (path == null) {\n                // neither resource nor path is defined, use current resource\n                resource = request.getResource();\n            } else {\n                // check whether the path (would) resolve, else SyntheticRes.\n                Resource tmp = request.getResourceResolver().resolve(path);\n                if (tmp == null && resourceType != null) {\n                    opts = null; // not needed\n                    resource = new SyntheticResource(path, resourceType);\n                }\n            }\n        }\n\n        try {\n            // optionally flush\n            if (flush && !(pageContext.getOut() instanceof BodyContent)) {\n                // might throw an IOException of course\n                pageContext.getOut().flush();\n            }\n            \n            // create a dispatcher for the resource or path\n            RequestDispatcher dispatcher;\n            if (resource != null) {\n                dispatcher = request.getRequestDispatcher(resource, opts);\n            } else {\n                dispatcher = request.getRequestDispatcher(path, opts);\n            }\n            \n            if (dispatcher != null) {\n                SlingHttpServletResponse response = new JspSlingHttpServletResponseWrapper(\n                    pageContext);\n                dispatcher.include(request, response);\n            } else {\n                TagUtil.log(log, pageContext, \"No content to include...\", null);\n            }\n\n        } catch (IOException ioe) {\n            throw new JspException(\"Error including \" + path, ioe);\n        } catch (ServletException ce) {\n            throw new JspException(\"Error including \" + path,\n                TagUtil.getRootCause(ce));\n        }\n\n        return EVAL_PAGE;\n    }","commit_id":"56fab748469fde334885aac3d6dc133d82d68d95","url":"https://github.com/apache/sling"},{"original_method":"@Override\n\tpublic void serveResource(\n\t\t\tActionMapping actionMapping, ActionForm actionForm,\n\t\t\tPortletConfig portletConfig, ResourceRequest resourceRequest,\n\t\t\tResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tPortletContext portletContext = portletConfig.getPortletContext();\n\n\t\tPortletRequestDispatcher portletRequestDispatcher =\n\t\t\tportletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/layouts_admin/import_layouts_resources.jsp\");\n\n\t\tportletRequestDispatcher.include(resourceRequest, resourceResponse);\n\t}","id":59417,"modified_method":"@Override\n\tpublic void serveResource(\n\t\t\tActionMapping actionMapping, ActionForm actionForm,\n\t\t\tPortletConfig portletConfig, ResourceRequest resourceRequest,\n\t\t\tResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(resourceRequest, Constants.CMD);\n\n\t\tPortletContext portletContext = portletConfig.getPortletContext();\n\n\t\tPortletRequestDispatcher portletRequestDispatcher = null;\n\n\t\tif (cmd.equals(Constants.IMPORT)) {\n\t\t\tportletRequestDispatcher = portletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/layouts_admin/import_layouts_processes.jsp\");\n\t\t}\n\t\telse {\n\t\t\tportletRequestDispatcher = portletContext.getRequestDispatcher(\n\t\t\t\t\"/html/portlet/layouts_admin/import_layouts_resources.jsp\");\n\t\t}\n\n\t\tportletRequestDispatcher.include(resourceRequest, resourceResponse);\n\t}","commit_id":"af3a80e810cba7acc9bd978593646f2972d53535","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    public Response getToken(String tokenType, String keyType, \n                             List<String> requestedClaims, String appliesTo,\n                             boolean wstrustResponse) {\n        RequestSecurityTokenResponseType response = \n            issueToken(tokenType, keyType, requestedClaims, appliesTo);\n        \n        if (wstrustResponse) {\n            JAXBElement<RequestSecurityTokenResponseType> jaxbResponse = \n                QNameConstants.WS_TRUST_FACTORY.createRequestSecurityTokenResponse(response);\n            \n            return Response.ok(jaxbResponse).build();\n        }\n        \n        RequestedSecurityTokenType requestedToken = getRequestedSecurityToken(response);\n        \n        if (\"jwt\".equals(tokenType)) {\n            // Discard the wrapper here\n            return Response.ok(((Element)requestedToken.getAny()).getTextContent()).build();\n        } else {\n            return Response.ok(requestedToken.getAny()).build();\n        }\n    }","id":59418,"modified_method":"@Override\n    public Response getXMLToken(String tokenType, String keyType, \n                             List<String> requestedClaims, String appliesTo,\n                             boolean wstrustResponse) {\n        RequestSecurityTokenResponseType response = \n            issueToken(tokenType, keyType, requestedClaims, appliesTo);\n        \n        if (wstrustResponse) {\n            JAXBElement<RequestSecurityTokenResponseType> jaxbResponse = \n                QNameConstants.WS_TRUST_FACTORY.createRequestSecurityTokenResponse(response);\n            \n            return Response.ok(jaxbResponse).build();\n        }\n        \n        RequestedSecurityTokenType requestedToken = getRequestedSecurityToken(response);\n        return Response.ok(requestedToken.getAny()).build();\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"private RequestSecurityTokenResponseType issueToken(\n        String tokenType,\n        String keyType,\n        List<String> requestedClaims,\n        String appliesTo\n    ) {\n        if (tokenTypeMap != null && tokenTypeMap.containsKey(tokenType)) {\n            tokenType = tokenTypeMap.get(tokenType);\n        }\n        ObjectFactory of = new ObjectFactory();\n        RequestSecurityTokenType request = of.createRequestSecurityTokenType();\n\n        request.getAny().add(of.createTokenType(tokenType));\n\n        request.getAny().add(of.createRequestType(\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue\"));\n\n        String desiredKeyType = keyType != null ? keyType : defaultKeyType;\n        request.getAny().add(of.createKeyType(desiredKeyType));\n        \n        // Add the TLS client Certificate as the UseKey Element if the KeyType is PublicKey\n        if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(desiredKeyType)) {\n            X509Certificate clientCert = getTLSClientCertificate();\n            if (clientCert != null) {\n                Document doc = DOMUtils.createDocument();\n                Element keyInfoElement = doc.createElementNS(\"http://www.w3.org/2000/09/xmldsig#\", \"KeyInfo\");\n                \n                try {\n                    X509Data certElem = new X509Data(doc);\n                    certElem.addCertificate(clientCert);\n                    keyInfoElement.appendChild(certElem.getElement());\n                    \n                    UseKeyType useKeyType = of.createUseKeyType();\n                    useKeyType.setAny(keyInfoElement);\n                    \n                    JAXBElement<UseKeyType> useKey = of.createUseKey(useKeyType);\n                    request.getAny().add(useKey);\n                } catch (XMLSecurityException ex) {\n                    // TODO\n                }\n            }\n        }\n\n        // Claims\n        if (requestedClaims == null) {\n            requestedClaims = defaultClaims;\n        }\n\n        if (requestedClaims != null) {\n            ClaimsType claimsType = of.createClaimsType();\n            claimsType.setDialect(CLAIM_TYPE_NS);\n            JAXBElement<ClaimsType> claims = of.createClaims(claimsType);\n            for (String claim : requestedClaims) {\n\n                if (claimTypeMap != null && claimTypeMap.containsKey(claim)) {\n                    claim = claimTypeMap.get(claim);\n                }\n\n                Document doc = DOMUtils.createDocument();\n                Element claimElement = doc.createElementNS(CLAIM_TYPE_NS, CLAIM_TYPE);\n                claimElement.setAttributeNS(null, \"Uri\", claim);\n                claimElement.setAttributeNS(null, \"Optional\", Boolean.toString(requestClaimsOptional));\n                claimsType.getAny().add(claimElement);\n            }\n            request.getAny().add(claims);\n        }\n        \n        if (appliesTo != null) {\n            String wspNamespace = \"http://www.w3.org/ns/ws-policy\";\n            Document doc = DOMUtils.createDocument();\n            Element appliesToElement = doc.createElementNS(wspNamespace, \"AppliesTo\");\n            \n            String addressingNamespace = \"http://www.w3.org/2005/08/addressing\";\n            Element eprElement = doc.createElementNS(addressingNamespace, \"EndpointReference\");\n            Element addressElement = doc.createElementNS(addressingNamespace, \"Address\");\n            addressElement.setTextContent(appliesTo);\n\n            eprElement.appendChild(addressElement);\n            appliesToElement.appendChild(eprElement);\n            \n            request.getAny().add(appliesToElement);\n        }\n\n        // OnBehalfOf\n        // User Authentication done with JWT or SAML?\n        //if (securityContext != null && securityContext.getUserPrincipal() != null) {\n            //TODO\n//            if (onBehalfOfToken != null) {\n//                OnBehalfOfType onBehalfOfType = of.createOnBehalfOfType();\n//                onBehalfOfType.setAny(onBehalfOfToken);\n//                JAXBElement<OnBehalfOfType> onBehalfOfElement = of.createOnBehalfOf(onBehalfOfType);\n//                request.getAny().add(onBehalfOfElement);\n//            }\n      //  }\n\n        // request.setContext(null);\n        return processRequest(Action.issue, request);\n    }","id":59419,"modified_method":"private RequestSecurityTokenResponseType issueToken(\n        String tokenType,\n        String keyType,\n        List<String> requestedClaims,\n        String appliesTo\n    ) {\n        if (tokenTypeMap != null && tokenTypeMap.containsKey(tokenType)) {\n            tokenType = tokenTypeMap.get(tokenType);\n        }\n        ObjectFactory of = new ObjectFactory();\n        RequestSecurityTokenType request = of.createRequestSecurityTokenType();\n\n        request.getAny().add(of.createTokenType(tokenType));\n\n        request.getAny().add(of.createRequestType(\"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue\"));\n\n        String desiredKeyType = keyType != null ? keyType : defaultKeyType;\n        request.getAny().add(of.createKeyType(desiredKeyType));\n        \n        // Add the TLS client Certificate as the UseKey Element if the KeyType is PublicKey\n        if (STSConstants.PUBLIC_KEY_KEYTYPE.equals(desiredKeyType)) {\n            X509Certificate clientCert = getTLSClientCertificate();\n            if (clientCert != null) {\n                Document doc = DOMUtils.createDocument();\n                Element keyInfoElement = doc.createElementNS(\"http://www.w3.org/2000/09/xmldsig#\", \"KeyInfo\");\n                \n                try {\n                    X509Data certElem = new X509Data(doc);\n                    certElem.addCertificate(clientCert);\n                    keyInfoElement.appendChild(certElem.getElement());\n                    \n                    UseKeyType useKeyType = of.createUseKeyType();\n                    useKeyType.setAny(keyInfoElement);\n                    \n                    JAXBElement<UseKeyType> useKey = of.createUseKey(useKeyType);\n                    request.getAny().add(useKey);\n                } catch (XMLSecurityException ex) {\n                    LOG.warning(ex.getMessage());\n                }\n            }\n        }\n\n        // Claims\n        if (requestedClaims == null) {\n            requestedClaims = defaultClaims;\n        }\n\n        if (requestedClaims != null) {\n            ClaimsType claimsType = of.createClaimsType();\n            claimsType.setDialect(CLAIM_TYPE_NS);\n            JAXBElement<ClaimsType> claims = of.createClaims(claimsType);\n            for (String claim : requestedClaims) {\n\n                if (claimTypeMap != null && claimTypeMap.containsKey(claim)) {\n                    claim = claimTypeMap.get(claim);\n                }\n\n                Document doc = DOMUtils.createDocument();\n                Element claimElement = doc.createElementNS(CLAIM_TYPE_NS, CLAIM_TYPE);\n                claimElement.setAttributeNS(null, \"Uri\", claim);\n                claimElement.setAttributeNS(null, \"Optional\", Boolean.toString(requestClaimsOptional));\n                claimsType.getAny().add(claimElement);\n            }\n            request.getAny().add(claims);\n        }\n        \n        if (appliesTo != null) {\n            String wspNamespace = \"http://www.w3.org/ns/ws-policy\";\n            Document doc = DOMUtils.createDocument();\n            Element appliesToElement = doc.createElementNS(wspNamespace, \"AppliesTo\");\n            \n            String addressingNamespace = \"http://www.w3.org/2005/08/addressing\";\n            Element eprElement = doc.createElementNS(addressingNamespace, \"EndpointReference\");\n            Element addressElement = doc.createElementNS(addressingNamespace, \"Address\");\n            addressElement.setTextContent(appliesTo);\n\n            eprElement.appendChild(addressElement);\n            appliesToElement.appendChild(eprElement);\n            \n            request.getAny().add(appliesToElement);\n        }\n\n        // OnBehalfOf\n        // User Authentication done with JWT or SAML?\n        //if (securityContext != null && securityContext.getUserPrincipal() != null) {\n            //TODO\n//            if (onBehalfOfToken != null) {\n//                OnBehalfOfType onBehalfOfType = of.createOnBehalfOfType();\n//                onBehalfOfType.setAny(onBehalfOfToken);\n//                JAXBElement<OnBehalfOfType> onBehalfOfElement = of.createOnBehalfOf(onBehalfOfType);\n//                request.getAny().add(onBehalfOfElement);\n//            }\n      //  }\n\n        // request.setContext(null);\n        return processRequest(Action.issue, request);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueJWTTokenClaims() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/json\").accept(\"application/json\");\n        client.path(\"jwt\");\n        \n        // First check that the role isn't usually in the generated token\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        JwsJwtCompactConsumer jwtConsumer = new JwsJwtCompactConsumer(token);\n        JwtToken jwt = jwtConsumer.getJwtToken();\n        \n        String role = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\";\n        assertTrue(jwt.getClaim(role) == null);\n        \n        // Now get another token specifying the role\n        client.query(\"claim\", role);\n        \n        response = client.get();\n        token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        // Process the token\n        validateJWTToken(token, null);\n        \n        jwtConsumer = new JwsJwtCompactConsumer(token);\n        jwt = jwtConsumer.getJwtToken();\n        assertEquals(\"ordinary-user\", jwt.getClaim(role));\n        \n        bus.shutdown(true);\n    }","id":59420,"modified_method":"@org.junit.Test\n    public void testIssueJWTTokenClaims() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"text/plain\");\n        client.path(\"jwt\");\n        \n        // First check that the role isn't usually in the generated token\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        JwsJwtCompactConsumer jwtConsumer = new JwsJwtCompactConsumer(token);\n        JwtToken jwt = jwtConsumer.getJwtToken();\n        \n        String role = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\";\n        assertTrue(jwt.getClaim(role) == null);\n        \n        // Now get another token specifying the role\n        client.query(\"claim\", role);\n        \n        response = client.get();\n        token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        // Process the token\n        validateJWTToken(token, null);\n        \n        jwtConsumer = new JwsJwtCompactConsumer(token);\n        jwt = jwtConsumer.getJwtToken();\n        assertEquals(\"ordinary-user\", jwt.getClaim(role));\n        \n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueJWTToken() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/json\").accept(\"application/json\");\n        client.path(\"jwt\");\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        validateJWTToken(token, null);\n    }","id":59421,"modified_method":"@org.junit.Test\n    public void testIssueJWTTokenPlain() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"text/plain\");\n        client.path(\"jwt\");\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        validateJWTToken(token, null);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML2TokenUnknownAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"appliesTo\", \"https://localhost:8081/tripleit/\");\n        \n        Response response = client.get();\n        try {\n            response.readEntity(Document.class);\n            fail(\"Failure expected on an unknown AppliesTo address\");\n        } catch (Exception ex) {\n            // expected\n        }\n\n        bus.shutdown(true);\n    }","id":59422,"modified_method":"@org.junit.Test\n    public void testIssueSAML2TokenUnknownAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"appliesTo\", \"https://localhost:8081/tripleit/\");\n        \n        Response response = client.get();\n        try {\n            response.readEntity(Document.class);\n            fail(\"Failure expected on an unknown AppliesTo address\");\n        } catch (Exception ex) {\n            // expected\n        }\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueBearerSAML1Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        client.query(\"keyType\", BEARER_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(confirmMethod.contains(\"bearer\"));\n\n        bus.shutdown(true);\n    }","id":59423,"modified_method":"@org.junit.Test\n    public void testIssueBearerSAML1Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        client.query(\"keyType\", BEARER_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(confirmMethod.contains(\"bearer\"));\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testValidateJWTAndIssueSAML() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"jwt\");\n        \n        // 1. Get a token via GET\n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        // 2. Now validate it in the STS using POST\n        client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.query(\"action\", \"validate\");\n        \n        // Create RequestSecurityToken\n        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n        String namespace = STSUtils.WST_NS_05_12;\n        writer.writeStartElement(\"wst\", \"RequestSecurityToken\", namespace);\n        writer.writeNamespace(\"wst\", namespace);\n        \n        writer.writeStartElement(\"wst\", \"RequestType\", namespace);\n        writer.writeCharacters(namespace + \"/Validate\");\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"TokenType\", namespace);\n        writer.writeCharacters(SAML2_TOKEN_TYPE);\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"ValidateTarget\", namespace);\n        writer.writeStartElement(null, \"TokenWrapper\", null);\n        writer.writeCharacters(token);\n        writer.writeEndElement();\n        writer.writeEndElement();\n        \n        writer.writeEndElement();\n        \n        response = client.post(new DOMSource(writer.getDocument().getDocumentElement()));\n        \n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        StatusType status = null;\n        for (Object obj : securityResponse.getAny()) {\n            if (obj instanceof JAXBElement<?>) {\n                JAXBElement<?> jaxbElement = (JAXBElement<?>)obj;\n                if (\"Status\".equals(jaxbElement.getName().getLocalPart())) {\n                    status = (StatusType)jaxbElement.getValue();\n                    break;\n                }\n            }\n        }\n        assertNotNull(status);\n        \n        // Check the token was valid\n        String validCode = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid\";\n        assertEquals(validCode, status.getCode());\n        \n        // Check the token\n        validateSAMLSecurityTokenResponse(securityResponse, true);\n        \n        bus.shutdown(true);\n    }","id":59424,"modified_method":"@org.junit.Test\n    public void testValidateJWTAndIssueSAML() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"text/plain\");\n        client.path(\"jwt\");\n        \n        // 1. Get a token via GET\n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        // 2. Now validate it in the STS using POST\n        client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.query(\"action\", \"validate\");\n        \n        // Create RequestSecurityToken\n        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n        String namespace = STSUtils.WST_NS_05_12;\n        writer.writeStartElement(\"wst\", \"RequestSecurityToken\", namespace);\n        writer.writeNamespace(\"wst\", namespace);\n        \n        writer.writeStartElement(\"wst\", \"RequestType\", namespace);\n        writer.writeCharacters(namespace + \"/Validate\");\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"TokenType\", namespace);\n        writer.writeCharacters(SAML2_TOKEN_TYPE);\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"ValidateTarget\", namespace);\n        writer.writeStartElement(null, \"TokenWrapper\", null);\n        writer.writeCharacters(token);\n        writer.writeEndElement();\n        writer.writeEndElement();\n        \n        writer.writeEndElement();\n        \n        response = client.post(new DOMSource(writer.getDocument().getDocumentElement()));\n        \n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        StatusType status = null;\n        for (Object obj : securityResponse.getAny()) {\n            if (obj instanceof JAXBElement<?>) {\n                JAXBElement<?> jaxbElement = (JAXBElement<?>)obj;\n                if (\"Status\".equals(jaxbElement.getName().getLocalPart())) {\n                    status = (StatusType)jaxbElement.getValue();\n                    break;\n                }\n            }\n        }\n        assertNotNull(status);\n        \n        // Check the token was valid\n        String validCode = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid\";\n        assertEquals(validCode, status.getCode());\n        \n        // Check the token\n        validateSAMLSecurityTokenResponse(securityResponse, true);\n        \n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML1Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","id":59425,"modified_method":"@org.junit.Test\n    public void testIssueSAML1Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueJWTTokenAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/json\").accept(\"application/json\");\n        client.path(\"jwt\");\n        client.query(\"appliesTo\", DEFAULT_ADDRESS);\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        validateJWTToken(token, DEFAULT_ADDRESS);\n    }","id":59426,"modified_method":"@org.junit.Test\n    public void testIssueJWTTokenAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"text/plain\");\n        client.path(\"jwt\");\n        client.query(\"appliesTo\", DEFAULT_ADDRESS);\n        \n        Response response = client.get();\n        String token = response.readEntity(String.class);\n        assertNotNull(token);\n        \n        validateJWTToken(token, DEFAULT_ADDRESS);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML2Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","id":59427,"modified_method":"@org.junit.Test\n    public void testIssueSAML2Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssuePublicKeySAML2Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"keyType\", PUBLIC_KEY_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(OpenSAMLUtil.isMethodHolderOfKey(confirmMethod));\n        SAMLKeyInfo subjectKeyInfo = assertion.getSubjectKeyInfo();\n        assertTrue(subjectKeyInfo.getCerts() != null);\n\n        bus.shutdown(true);\n    }","id":59428,"modified_method":"@org.junit.Test\n    public void testIssuePublicKeySAML2Token() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"keyType\", PUBLIC_KEY_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(OpenSAMLUtil.isMethodHolderOfKey(confirmMethod));\n        SAMLKeyInfo subjectKeyInfo = assertion.getSubjectKeyInfo();\n        assertTrue(subjectKeyInfo.getCerts() != null);\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML2TokenAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"appliesTo\", DEFAULT_ADDRESS);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","id":59429,"modified_method":"@org.junit.Test\n    public void testIssueSAML2TokenAppliesTo() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"appliesTo\", DEFAULT_ADDRESS);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSymmetricKeySaml1() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        client.query(\"keyType\", SYMMETRIC_KEY_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(OpenSAMLUtil.isMethodHolderOfKey(confirmMethod));\n        SAMLKeyInfo subjectKeyInfo = assertion.getSubjectKeyInfo();\n        assertTrue(subjectKeyInfo.getSecret() != null);\n\n        bus.shutdown(true);\n    }","id":59430,"modified_method":"@org.junit.Test\n    public void testIssueSymmetricKeySaml1() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml1.1\");\n        client.query(\"keyType\", SYMMETRIC_KEY_KEYTYPE);\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() == null && assertion.getSaml1() != null);\n        assertTrue(assertion.isSigned());\n        \n        List<String> methods = assertion.getConfirmationMethods();\n        String confirmMethod = null;\n        if (methods != null && methods.size() > 0) {\n            confirmMethod = methods.get(0);\n        }\n        assertTrue(OpenSAMLUtil.isMethodHolderOfKey(confirmMethod));\n        SAMLKeyInfo subjectKeyInfo = assertion.getSubjectKeyInfo();\n        assertTrue(subjectKeyInfo.getSecret() != null);\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML2TokenClaims() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        // First check that the role isn't usually in the generated token\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        ClaimCollection claims = SAMLUtils.getClaims(assertion);\n        assertEquals(1, claims.size());\n        Claim claim = claims.get(0);\n        String role = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\";\n        assertNotEquals(claim.getClaimType().toString(), role);\n        \n        // Now get another token specifying the role\n        client.query(\"claim\", role);\n        response = client.get();\n        assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        claims = SAMLUtils.getClaims(assertion);\n        assertEquals(1, claims.size());\n        claim = claims.get(0);\n        assertEquals(claim.getClaimType().toString(), role);\n        assertEquals(\"ordinary-user\", claim.getValues().get(0));\n        \n        bus.shutdown(true);\n    }","id":59431,"modified_method":"@org.junit.Test\n    public void testIssueSAML2TokenClaims() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        // First check that the role isn't usually in the generated token\n        \n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        List<WSSecurityEngineResult> results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        SamlAssertionWrapper assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        ClaimCollection claims = SAMLUtils.getClaims(assertion);\n        assertEquals(1, claims.size());\n        Claim claim = claims.get(0);\n        String role = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\";\n        assertNotEquals(claim.getClaimType().toString(), role);\n        \n        // Now get another token specifying the role\n        client.query(\"claim\", role);\n        response = client.get();\n        assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // Process the token\n        results = processToken(assertionDoc.getDocumentElement());\n\n        assertTrue(results != null && results.size() == 1);\n        assertion = \n            (SamlAssertionWrapper)results.get(0).get(WSSecurityEngineResult.TAG_SAML_ASSERTION);\n        assertTrue(assertion != null);\n        assertTrue(assertion.getSaml2() != null && assertion.getSaml1() == null);\n        assertTrue(assertion.isSigned());\n        \n        claims = SAMLUtils.getClaims(assertion);\n        assertEquals(1, claims.size());\n        claim = claims.get(0);\n        assertEquals(claim.getClaimType().toString(), role);\n        assertEquals(\"ordinary-user\", claim.getValues().get(0));\n        \n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testIssueSAML2TokenViaWSTrust() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"wstrustResponse\", \"true\");\n        \n        Response response = client.get();\n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        validateSAMLSecurityTokenResponse(securityResponse, true);\n\n        bus.shutdown(true);\n    }","id":59432,"modified_method":"@org.junit.Test\n    public void testIssueSAML2TokenViaWSTrust() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        client.query(\"wstrustResponse\", \"true\");\n        \n        Response response = client.get();\n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        validateSAMLSecurityTokenResponse(securityResponse, true);\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@org.junit.Test\n    public void testValidateSAMLAndIssueJWT() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        // 1. Get a token via GET\n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // 2. Now validate it in the STS using POST\n        client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.query(\"action\", \"validate\");\n        \n        // Create RequestSecurityToken\n        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n        String namespace = STSUtils.WST_NS_05_12;\n        writer.writeStartElement(\"wst\", \"RequestSecurityToken\", namespace);\n        writer.writeNamespace(\"wst\", namespace);\n        \n        writer.writeStartElement(\"wst\", \"RequestType\", namespace);\n        writer.writeCharacters(namespace + \"/Validate\");\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"TokenType\", namespace);\n        writer.writeCharacters(JWT_TOKEN_TYPE);\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"ValidateTarget\", namespace);\n        StaxUtils.copy(assertionDoc.getDocumentElement(), writer);\n        writer.writeEndElement();\n        \n        writer.writeEndElement();\n        \n        response = client.post(new DOMSource(writer.getDocument().getDocumentElement()));\n        \n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        StatusType status = null;\n        for (Object obj : securityResponse.getAny()) {\n            if (obj instanceof JAXBElement<?>) {\n                JAXBElement<?> jaxbElement = (JAXBElement<?>)obj;\n                if (\"Status\".equals(jaxbElement.getName().getLocalPart())) {\n                    status = (StatusType)jaxbElement.getValue();\n                    break;\n                }\n            }\n        }\n        assertNotNull(status);\n        \n        // Check the token was valid\n        String validCode = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid\";\n        assertEquals(validCode, status.getCode());\n        \n        // Check the token\n        RequestedSecurityTokenType requestedSecurityToken = getRequestedSecurityToken(securityResponse);\n        assertNotNull(requestedSecurityToken);\n        \n        String token = ((Element)requestedSecurityToken.getAny()).getTextContent();\n        assertNotNull(token);\n        \n        validateJWTToken(token, null);\n\n        bus.shutdown(true);\n    }","id":59433,"modified_method":"@org.junit.Test\n    public void testValidateSAMLAndIssueJWT() throws Exception {\n        SpringBusFactory bf = new SpringBusFactory();\n        URL busFile = STSRESTTest.class.getResource(\"cxf-client.xml\");\n\n        Bus bus = bf.createBus(busFile.toString());\n        SpringBusFactory.setDefaultBus(bus);\n        SpringBusFactory.setThreadDefaultBus(bus);\n        \n        String address = \"https://localhost:\" + STSPORT + \"/SecurityTokenService/token\";\n        WebClient client = WebClient.create(address, busFile.toString());\n\n        client.accept(\"application/xml\");\n        client.path(\"saml2.0\");\n        \n        // 1. Get a token via GET\n        Response response = client.get();\n        Document assertionDoc = response.readEntity(Document.class);\n        assertNotNull(assertionDoc);\n        \n        // 2. Now validate it in the STS using POST\n        client = WebClient.create(address, busFile.toString());\n\n        client.type(\"application/xml\").accept(\"application/xml\");\n        client.query(\"action\", \"validate\");\n        \n        // Create RequestSecurityToken\n        W3CDOMStreamWriter writer = new W3CDOMStreamWriter();\n        String namespace = STSUtils.WST_NS_05_12;\n        writer.writeStartElement(\"wst\", \"RequestSecurityToken\", namespace);\n        writer.writeNamespace(\"wst\", namespace);\n        \n        writer.writeStartElement(\"wst\", \"RequestType\", namespace);\n        writer.writeCharacters(namespace + \"/Validate\");\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"TokenType\", namespace);\n        writer.writeCharacters(JWT_TOKEN_TYPE);\n        writer.writeEndElement();\n        \n        writer.writeStartElement(\"wst\", \"ValidateTarget\", namespace);\n        StaxUtils.copy(assertionDoc.getDocumentElement(), writer);\n        writer.writeEndElement();\n        \n        writer.writeEndElement();\n        \n        response = client.post(new DOMSource(writer.getDocument().getDocumentElement()));\n        \n        RequestSecurityTokenResponseType securityResponse = \n            response.readEntity(RequestSecurityTokenResponseType.class);\n        \n        StatusType status = null;\n        for (Object obj : securityResponse.getAny()) {\n            if (obj instanceof JAXBElement<?>) {\n                JAXBElement<?> jaxbElement = (JAXBElement<?>)obj;\n                if (\"Status\".equals(jaxbElement.getName().getLocalPart())) {\n                    status = (StatusType)jaxbElement.getValue();\n                    break;\n                }\n            }\n        }\n        assertNotNull(status);\n        \n        // Check the token was valid\n        String validCode = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid\";\n        assertEquals(validCode, status.getCode());\n        \n        // Check the token\n        RequestedSecurityTokenType requestedSecurityToken = getRequestedSecurityToken(securityResponse);\n        assertNotNull(requestedSecurityToken);\n        \n        String token = ((Element)requestedSecurityToken.getAny()).getTextContent();\n        assertNotNull(token);\n        \n        validateJWTToken(token, null);\n\n        bus.shutdown(true);\n    }","commit_id":"ad71b7a77803354ceff3c4bcdcc8baf8364a24cb","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\tjavaProject1 = makeJavaProject(project1);\n\t\taddSourceFolder(javaProject1, \"src2\");\n\t\turi1 = createFileAndRegisterResource(project1, \"src/file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"src/file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"src2/file3\");\n\t\tIResource member = javaProject1.getProject().findMember(\"src\");\n\t\tsrcRoot = javaProject1.getPackageFragmentRoot(member);\n\t\tStorage2UriMapperImpl mapper = new Storage2UriMapperImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null \n\t\t\t\t\t&& !uri.toString().endsWith(\"/.project\")\n\t\t\t\t\t&& !uri.toString().endsWith(\"/.classpath\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator());\n\t\tprojectsState = createProjectsState(mapper);\n\t}","id":59434,"modified_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\tjavaProject1 = makeJavaProject(project1);\n\t\taddSourceFolder(javaProject1, \"src2\");\n\t\turi1 = createFileAndRegisterResource(project1, \"src/file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"src/file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"src2/file3\");\n\t\tIResource member = javaProject1.getProject().findMember(\"src\");\n\t\tsrcRoot = javaProject1.getPackageFragmentRoot(member);\n\t\tStorage2UriMapperJavaImpl mapper = new Storage2UriMapperJavaImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null \n\t\t\t\t\t&& !uri.toString().endsWith(\"/.project\")\n\t\t\t\t\t&& !uri.toString().endsWith(\"/.classpath\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator() {\n\t\t\t@Override\n\t\t\tpublic boolean isValid(URI uri, IStorage storage) {\n\t\t\t\treturn \"name\".equals(uri.fileExtension());\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isPossiblyManaged(IStorage storage) {\n\t\t\t\treturn \"name\".equals(storage.getFullPath().getFileExtension());\n\t\t\t}\n\t\t});\n\t\tmapper.setJdtHelper(new JdtHelper());\n\t\tmapper.setLocator(new JarEntryLocator());\n\t\tprojectsState = createProjectsState(mapper);\n\t}","commit_id":"6f1142cffeb134be88fe798be089f6c2cbae777f","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<URI> initContainedURIs(String containerHandle) {\n\t\tIJavaElement javaElement = JavaCore.create(containerHandle);\n\t\tif (javaElement instanceof IPackageFragmentRoot) {\n\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) javaElement;\n\t\t\tIJavaProject javaProject = root.getJavaProject();\n\t\t\tif (!isAccessibleXtextProject(javaProject.getProject())) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\tMap<URI, IStorage> entries = storage2UriMapper.getAllEntries(root);\n\t\t\treturn entries.keySet();\n\t\t}\n\t\treturn Collections.emptyList();\n\t}","id":59435,"modified_method":"public Collection<URI> initContainedURIs(String containerHandle) {\n\t\tIJavaElement javaElement = JavaCore.create(containerHandle);\n\t\tif (javaElement instanceof IPackageFragmentRoot) {\n\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) javaElement;\n\t\t\tIJavaProject javaProject = root.getJavaProject();\n\t\t\tif (!isAccessibleXtextProject(javaProject.getProject())) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\tMap<URI, IStorage> entries = ((IStorage2UriMapperJdtExtensions)super.getMapper()).getAllEntries(root);\n\t\t\treturn entries.keySet();\n\t\t}\n\t\treturn Collections.emptyList();\n\t}","commit_id":"6f1142cffeb134be88fe798be089f6c2cbae777f","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @since 2.4\n\t */\n\tpublic Map<URI, IStorage> getAllEntries(IContainer container) {\n\t\tfinal Map<URI,IStorage> result = newLinkedHashMap();\n\t\ttry {\n\t\t\tcontainer.accept(new IResourceVisitor() {\n\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {\n\t\t\t\t\tif (resource instanceof IFile) {\n\t\t\t\t\t\tfinal IFile storage = (IFile) resource;\n\t\t\t\t\t\tURI uri = getUri(storage);\n\t\t\t\t\t\tresult.put(uri, storage);\n\t\t\t\t\t}\n\t\t\t\t\tif (resource instanceof IFolder) {\n\t\t\t\t\t\treturn isHandled((IFolder)resource);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (CoreException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn result;\n\t}","id":59436,"modified_method":"/**\n\t * @since 2.4\n\t */\n\tpublic Map<URI, IStorage> getAllEntries(IContainer container) {\n\t\tfinal Map<URI,IStorage> result = newLinkedHashMap();\n\t\ttry {\n\t\t\tcontainer.accept(new IResourceVisitor() {\n\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {\n\t\t\t\t\tif (resource instanceof IFile) {\n\t\t\t\t\t\tfinal IFile storage = (IFile) resource;\n\t\t\t\t\t\tURI uri = getUri(storage);\n\t\t\t\t\t\tif (uri != null)\n\t\t\t\t\t\t\tresult.put(uri, storage);\n\t\t\t\t\t}\n\t\t\t\t\tif (resource instanceof IFolder) {\n\t\t\t\t\t\treturn isHandled((IFolder)resource);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (CoreException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn result;\n\t}","commit_id":"6f1142cffeb134be88fe798be089f6c2cbae777f","url":"https://github.com/eclipse/xtext"},{"original_method":"public Collection<URI> initContainedURIs(String containerHandle) {\n\t\ttry {\n\t\t\tIPath projectPath = new Path(null, containerHandle).makeAbsolute();\n\t\t\tif (projectPath.segmentCount()!=1) \n\t\t\t\treturn Collections.emptySet();\n\t\t\tIProject project = getWorkspaceRoot().getProject(containerHandle);\n\t\t\tif (project != null && isAccessibleXtextProject(project)) {\n\t\t\t\tMap<URI, IStorage> entries = storage2UriMapper.getAllEntries(project);\n\t\t\t\treturn entries.keySet();\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"Cannot init contained URIs for containerHandle '\" + containerHandle + \"'\", e);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}","id":59437,"modified_method":"public Collection<URI> initContainedURIs(String containerHandle) {\n\t\ttry {\n\t\t\tIPath projectPath = new Path(null, containerHandle).makeAbsolute();\n\t\t\tif (projectPath.segmentCount()!=1) \n\t\t\t\treturn Collections.emptySet();\n\t\t\tIProject project = getWorkspaceRoot().getProject(containerHandle);\n\t\t\tif (project != null && isAccessibleXtextProject(project)) {\n\t\t\t\tMap<URI, IStorage> entries = getMapper().getAllEntries(project);\n\t\t\t\treturn entries.keySet();\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tif (log.isDebugEnabled())\n\t\t\t\tlog.debug(\"Cannot init contained URIs for containerHandle '\" + containerHandle + \"'\", e);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}","commit_id":"6f1142cffeb134be88fe798be089f6c2cbae777f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\tIResourcesSetupUtil.setReference(project1, project2);\n\t\turi1 = createFileAndRegisterResource(project1, \"file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"file3\");\n\t\tStorage2UriMapperImpl mapper = new Storage2UriMapperImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null && !uri.toString().endsWith(\"/.project\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator());\n\t\tprojectsState = new WorkspaceProjectsState();\n\t\tprojectsState.setMapper(mapper);\n\t\tWorkspaceProjectsStateHelper helper = new WorkspaceProjectsStateHelper();\n\t\thelper.setMapper(mapper);\n\t\thelper.setWorkspace(ResourcesPlugin.getWorkspace());\n\t\tprojectsState.setHelper(helper);\n\t\tcontainerManager = new StateBasedContainerManager();\n\t\tcontainerManager.setStateProvider(this);\n\t}","id":59438,"modified_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\tIResourcesSetupUtil.setReference(project1, project2);\n\t\turi1 = createFileAndRegisterResource(project1, \"file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"file3\");\n\t\tStorage2UriMapperImpl mapper = new Storage2UriMapperImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null && !uri.toString().endsWith(\"/.project\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator() {\n\t\t\t@Override\n\t\t\tpublic boolean isPossiblyManaged(IStorage storage) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isValid(URI uri, IStorage storage) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tprojectsState = new WorkspaceProjectsState();\n\t\tprojectsState.setMapper(mapper);\n\t\tWorkspaceProjectsStateHelper helper = new WorkspaceProjectsStateHelper();\n\t\thelper.setMapper(mapper);\n\t\thelper.setWorkspace(ResourcesPlugin.getWorkspace());\n\t\tprojectsState.setHelper(helper);\n\t\tcontainerManager = new StateBasedContainerManager();\n\t\tcontainerManager.setStateProvider(this);\n\t}","commit_id":"05f1eddd1b7e9272cf646eba27d65db3d16d193d","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\turi1 = createFileAndRegisterResource(project1, \"file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"file3\");\n\t\tStorage2UriMapperImpl mapper = new Storage2UriMapperImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null && !uri.toString().endsWith(\"/.project\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator());\n\t\tprojectsState = new WorkspaceProjectsState();\n\t\tprojectsState.setMapper(mapper);\n\t\tWorkspaceProjectsStateHelper helper = new WorkspaceProjectsStateHelper();\n\t\thelper.setMapper(mapper);\n\t\thelper.setWorkspace(ResourcesPlugin.getWorkspace());\n\t\tprojectsState.setHelper(helper);\n\t}","id":59439,"modified_method":"@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\turi1 = createFileAndRegisterResource(project1, \"file1\");\n\t\turi2 = createFileAndRegisterResource(project1, \"file2\");\n\t\turi3 = createFileAndRegisterResource(project2, \"file3\");\n\t\tStorage2UriMapperImpl mapper = new Storage2UriMapperImpl() {\n\t\t\t@Override\n\t\t\tpublic boolean isValidUri(URI uri, IStorage storage) {\n\t\t\t\treturn uri != null && !uri.toString().endsWith(\"/.project\");\n\t\t\t}\n\t\t};\n\t\tmapper.setUriValidator(new UriValidator() {\n\t\t\t@Override\n\t\t\tpublic boolean isValid(URI uri, IStorage storage) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isPossiblyManaged(IStorage storage) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tprojectsState = new WorkspaceProjectsState();\n\t\tprojectsState.setMapper(mapper);\n\t\tWorkspaceProjectsStateHelper helper = new WorkspaceProjectsStateHelper();\n\t\thelper.setMapper(mapper);\n\t\thelper.setWorkspace(ResourcesPlugin.getWorkspace());\n\t\tprojectsState.setHelper(helper);\n\t}","commit_id":"05f1eddd1b7e9272cf646eba27d65db3d16d193d","url":"https://github.com/eclipse/xtext"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private Object getManagedObjectForService(CamelContext context, Service service, Route route) {\n        // skip channel, UoW and dont double wrap instrumentation\n        if (service instanceof Channel || service instanceof UnitOfWork || service instanceof InstrumentationProcessor) {\n            return null;\n        }\n\n        Object answer = null;\n\n        if (service instanceof ManagementAware) {\n            return ((ManagementAware<Service>) service).getManagedObject(service);\n        } else if (service instanceof Tracer) {\n            // special for tracer\n            Object mo = this.managedTracers.get(service);\n            if (mo == null) {\n                ManagedTracer mt = new ManagedTracer(context, (Tracer) service);\n                mt.init(getManagementStrategy());\n                this.managedTracers.put(service, mt);\n                mo = mt;\n            }\n            return mo;\n        } else if (service instanceof EventNotifier) {\n            answer = getManagementObjectStrategy().getManagedObjectForEventNotifier(context, (EventNotifier) service);\n        } else if (service instanceof Producer) {\n            answer = getManagementObjectStrategy().getManagedObjectForProducer(context, (Producer) service);\n        } else if (service instanceof Consumer) {\n            answer = getManagementObjectStrategy().getManagedObjectForConsumer(context, (Consumer) service);\n        } else if (service instanceof Processor) {\n            // special for processors as we need to do some extra work\n            return getManagedObjectForProcessor(context, (Processor) service, route);\n        } else if (service instanceof ThrottlingInflightRoutePolicy) {\n            answer = new ManagedThrottlingInflightRoutePolicy(context, (ThrottlingInflightRoutePolicy) service);\n        } else if (service instanceof ConsumerCache) {\n            answer = new ManagedConsumerCache(context, (ConsumerCache) service);\n        } else if (service instanceof ProducerCache) {\n            answer = new ManagedProducerCache(context, (ProducerCache) service);\n        } else if (service instanceof EndpointRegistry) {\n            answer = new ManagedEndpointRegistry(context, (EndpointRegistry) service);\n        } else if (service != null) {\n            // fallback as generic service\n            answer = getManagementObjectStrategy().getManagedObjectForService(context, service);\n        }\n\n        if (answer != null && answer instanceof ManagedService) {\n            ManagedService ms = (ManagedService) answer;\n            ms.setRoute(route);\n            ms.init(getManagementStrategy());\n            return answer;\n        } else {\n            return answer;\n        }\n    }","id":59440,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private Object getManagedObjectForService(CamelContext context, Service service, Route route) {\n        // skip channel, UoW and dont double wrap instrumentation\n        if (service instanceof Channel || service instanceof UnitOfWork || service instanceof InstrumentationProcessor) {\n            return null;\n        }\n\n        Object answer = null;\n\n        if (service instanceof ManagementAware) {\n            return ((ManagementAware<Service>) service).getManagedObject(service);\n        } else if (service instanceof Tracer) {\n            // special for tracer\n            Object mo = this.managedTracers.get(service);\n            if (mo == null) {\n                ManagedTracer mt = new ManagedTracer(context, (Tracer) service);\n                mt.init(getManagementStrategy());\n                this.managedTracers.put(service, mt);\n                mo = mt;\n            }\n            return mo;\n        } else if (service instanceof EventNotifier) {\n            answer = getManagementObjectStrategy().getManagedObjectForEventNotifier(context, (EventNotifier) service);\n        } else if (service instanceof Producer) {\n            answer = getManagementObjectStrategy().getManagedObjectForProducer(context, (Producer) service);\n        } else if (service instanceof Consumer) {\n            answer = getManagementObjectStrategy().getManagedObjectForConsumer(context, (Consumer) service);\n        } else if (service instanceof Processor) {\n            // special for processors as we need to do some extra work\n            return getManagedObjectForProcessor(context, (Processor) service, route);\n        } else if (service instanceof ThrottlingInflightRoutePolicy) {\n            answer = new ManagedThrottlingInflightRoutePolicy(context, (ThrottlingInflightRoutePolicy) service);\n        } else if (service instanceof ConsumerCache) {\n            answer = new ManagedConsumerCache(context, (ConsumerCache) service);\n        } else if (service instanceof ProducerCache) {\n            answer = new ManagedProducerCache(context, (ProducerCache) service);\n        } else if (service instanceof EndpointRegistry) {\n            answer = new ManagedEndpointRegistry(context, (EndpointRegistry) service);\n        } else if (service != null) {\n            // fallback as generic service\n            answer = getManagementObjectStrategy().getManagedObjectForService(context, service);\n        }\n\n        if (answer != null && answer instanceof ManagedService) {\n            ManagedService ms = (ManagedService) answer;\n            ms.setRoute(route);\n            ms.init(getManagementStrategy());\n        }\n\n        return answer;\n    }","commit_id":"e36f187eac204cb44c1b01040b2de612c37ff803","url":"https://github.com/apache/camel"},{"original_method":"@SuppressWarnings({\"deprecation\", \"unchecked\"})\n    public Object getManagedObjectForProcessor(CamelContext context, Processor processor,\n                                               ProcessorDefinition<?> definition, Route route) {\n        ManagedProcessor answer = null;\n\n        // unwrap delegates as we want the real target processor\n        Processor target = processor;\n        while (target != null) {\n\n            // skip error handlers\n            if (target instanceof ErrorHandler) {\n                return false;\n            }\n\n            // look for specialized processor which we should prefer to use\n            if (target instanceof Delayer) {\n                answer = new ManagedDelayer(context, (Delayer) target, definition);\n            } else if (target instanceof Throttler) {\n                answer = new ManagedThrottler(context, (Throttler) target, definition);\n            } else if (target instanceof SendProcessor) {\n                answer = new ManagedSendProcessor(context, (SendProcessor) target, definition);\n            } else if (target instanceof BeanProcessor) {\n                answer = new ManagedBeanProcessor(context, (BeanProcessor) target, definition);\n            } else if (target instanceof org.apache.camel.spi.ManagementAware) {\n                return ((org.apache.camel.spi.ManagementAware<Processor>) target).getManagedObject(processor);\n            }\n\n            if (answer != null) {\n                // break out as we found an answer\n                break;\n            }\n\n            // no answer yet, so unwrap any delegates and try again\n            if (target instanceof DelegateProcessor) {\n                target = ((DelegateProcessor) target).getProcessor();\n            } else {\n                // no delegate so we dont have any target to try next\n                break;\n            }\n        }\n\n        if (answer == null) {\n            // fallback to a generic processor\n            answer = new ManagedProcessor(context, target, definition);\n        }\n\n        answer.setRoute(route);\n        answer.init(context.getManagementStrategy());\n        return answer;\n    }","id":59441,"modified_method":"@SuppressWarnings({\"deprecation\", \"unchecked\"})\n    public Object getManagedObjectForProcessor(CamelContext context, Processor processor,\n                                               ProcessorDefinition<?> definition, Route route) {\n        ManagedProcessor answer = null;\n\n        // unwrap delegates as we want the real target processor\n        Processor target = processor;\n        while (target != null) {\n\n            // skip error handlers\n            if (target instanceof ErrorHandler) {\n                return false;\n            }\n\n            // look for specialized processor which we should prefer to use\n            if (target instanceof Delayer) {\n                answer = new ManagedDelayer(context, (Delayer) target, definition);\n            } else if (target instanceof Throttler) {\n                answer = new ManagedThrottler(context, (Throttler) target, definition);\n            } else if (target instanceof SendProcessor) {\n                answer = new ManagedSendProcessor(context, (SendProcessor) target, definition);\n            } else if (target instanceof BeanProcessor) {\n                answer = new ManagedBeanProcessor(context, (BeanProcessor) target, definition);\n            } else if (target instanceof IdempotentConsumer) {\n                answer = new ManagedIdempotentConsumer(context, (IdempotentConsumer) target, definition);\n            } else if (target instanceof org.apache.camel.spi.ManagementAware) {\n                return ((org.apache.camel.spi.ManagementAware<Processor>) target).getManagedObject(processor);\n            }\n\n            if (answer != null) {\n                // break out as we found an answer\n                break;\n            }\n\n            // no answer yet, so unwrap any delegates and try again\n            if (target instanceof DelegateProcessor) {\n                target = ((DelegateProcessor) target).getProcessor();\n            } else {\n                // no delegate so we dont have any target to try next\n                break;\n            }\n        }\n\n        if (answer == null) {\n            // fallback to a generic processor\n            answer = new ManagedProcessor(context, target, definition);\n        }\n\n        answer.setRoute(route);\n        answer.init(context.getManagementStrategy());\n        return answer;\n    }","commit_id":"e36f187eac204cb44c1b01040b2de612c37ff803","url":"https://github.com/apache/camel"},{"original_method":"public boolean process(Exchange exchange, AsyncCallback callback) {\n        final String messageId = messageIdExpression.evaluate(exchange, String.class);\n        if (messageId == null) {\n            throw new NoMessageIdException(exchange, messageIdExpression);\n        }\n\n        boolean newKey;\n        if (eager) {\n            // add the key to the repository\n            newKey = idempotentRepository.add(messageId);\n        } else {\n            // check if we already have the key\n            newKey = !idempotentRepository.contains(messageId);\n        }\n\n\n        if (!newKey) {\n            // mark the exchange as duplicate\n            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE);\n        }\n\n        if (!newKey) {\n            // we already have this key so its a duplicate message\n            onDuplicateMessage(exchange, messageId);\n            if (skipDuplicate) {\n                // if we should skip duplicate then we are done\n                LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n                callback.done(true);\n                return true;\n            }\n        }\n\n        // register our on completion callback\n        exchange.addOnCompletion(new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure));\n\n        // process the exchange\n        return processor.process(exchange, callback);\n    }","id":59442,"modified_method":"public boolean process(Exchange exchange, AsyncCallback callback) {\n        final String messageId = messageIdExpression.evaluate(exchange, String.class);\n        if (messageId == null) {\n            throw new NoMessageIdException(exchange, messageIdExpression);\n        }\n\n        boolean newKey;\n        if (eager) {\n            // add the key to the repository\n            newKey = idempotentRepository.add(messageId);\n        } else {\n            // check if we already have the key\n            newKey = !idempotentRepository.contains(messageId);\n        }\n\n\n        if (!newKey) {\n            // mark the exchange as duplicate\n            exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE);\n\n            // we already have this key so its a duplicate message\n            onDuplicate(exchange, messageId);\n\n            if (skipDuplicate) {\n                // if we should skip duplicate then we are done\n                LOG.debug(\"Ignoring duplicate message with id: {} for exchange: {}\", messageId, exchange);\n                callback.done(true);\n                return true;\n            }\n        }\n\n        // register our on completion callback\n        exchange.addOnCompletion(new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure));\n\n        // process the exchange\n        return processor.process(exchange, callback);\n    }","commit_id":"e36f187eac204cb44c1b01040b2de612c37ff803","url":"https://github.com/apache/camel"},{"original_method":"public void testDuplicateMessagesAreFilteredOut() throws Exception {\n        MBeanServer mbeanServer = getMBeanServer();\n\n        // services\n        Set<ObjectName> names = CastUtils.cast(mbeanServer.queryNames(new ObjectName(\"org.apache.camel\" + \":type=services,*\"), null));\n        ObjectName on = null;\n        for (ObjectName name : names) {\n            if (name.toString().contains(\"MemoryIdempotentRepository\")) {\n                on = name;\n                break;\n            }\n        }\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n\n        Integer size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(1, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertFalse(repo.contains(\"2\"));\n        assertFalse(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"4\", \"four\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"3\", \"three\");\n\n        resultEndpoint.assertIsSatisfied();\n\n        assertTrue(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(4, size.intValue());\n\n        // remove one from repo\n        mbeanServer.invoke(on, \"remove\", new Object[]{\"1\"}, new String[]{\"java.lang.String\"});\n\n        // there should be 3 now\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(3, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n    }","id":59443,"modified_method":"public void testDuplicateMessagesAreFilteredOut() throws Exception {\n        MBeanServer mbeanServer = getMBeanServer();\n\n        // services\n        Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(\"org.apache.camel\" + \":type=services,*\"), null);\n        ObjectName on = null;\n        for (ObjectName name : names) {\n            if (name.toString().contains(\"MemoryIdempotentRepository\")) {\n                on = name;\n                break;\n            }\n        }\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n\n        Integer size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(1, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertFalse(repo.contains(\"2\"));\n        assertFalse(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"4\", \"four\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"3\", \"three\");\n\n        resultEndpoint.assertIsSatisfied();\n\n        assertTrue(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(4, size.intValue());\n\n        // remove one from repo\n        mbeanServer.invoke(on, \"remove\", new Object[]{\"1\"}, new String[]{\"java.lang.String\"});\n\n        // there should be 3 now\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(3, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n    }","commit_id":"e36f187eac204cb44c1b01040b2de612c37ff803","url":"https://github.com/apache/camel"},{"original_method":"public void testMBeansRegistered() throws Exception {\n        assertDefaultDomain();\n\n        Set<ObjectName> s = CastUtils.cast(mbsc.queryNames(new ObjectName(domainName + \":type=endpoints,*\"), null));\n        assertEquals(\"Could not find 2 endpoints: \" + s, 2, s.size());\n\n        s = CastUtils.cast(mbsc.queryNames(new ObjectName(domainName + \":type=context,*\"), null));\n        assertEquals(\"Could not find 1 context: \" + s, 1, s.size());\n\n        s = CastUtils.cast(mbsc.queryNames(new ObjectName(domainName + \":type=processors,*\"), null));\n        assertEquals(\"Could not find 1 processors: \" + s, 2, s.size());\n\n        s = CastUtils.cast(mbsc.queryNames(new ObjectName(domainName + \":type=routes,*\"), null));\n        assertEquals(\"Could not find 1 route: \" + s, 1, s.size());\n    }","id":59444,"modified_method":"public void testMBeansRegistered() throws Exception {\n        assertDefaultDomain();\n\n        Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + \":type=endpoints,*\"), null);\n        assertEquals(\"Could not find 2 endpoints: \" + s, 2, s.size());\n\n        s = mbsc.queryNames(new ObjectName(domainName + \":type=context,*\"), null);\n        assertEquals(\"Could not find 1 context: \" + s, 1, s.size());\n\n        s = mbsc.queryNames(new ObjectName(domainName + \":type=processors,*\"), null);\n        assertEquals(\"Could not find 1 processors: \" + s, 2, s.size());\n\n        s = mbsc.queryNames(new ObjectName(domainName + \":type=routes,*\"), null);\n        assertEquals(\"Could not find 1 route: \" + s, 1, s.size());\n    }","commit_id":"55b32f9a020d7935cbe8208c55dd6b7c05c88ed1","url":"https://github.com/apache/camel"},{"original_method":"public void testCustomEndpoint() throws Exception {\n        assertDefaultDomain();\n\n        resolveMandatoryEndpoint(\"custom://end\", CustomEndpoint.class);\n\n        Set<ObjectName> s = CastUtils.cast(mbsc.queryNames(new ObjectName(domainName + \":type=endpoints,*\"), null));\n        assertEquals(\"Could not find 2 endpoints: \" + s, 2, s.size());\n\n        // get custom\n        Iterator<ObjectName> it = s.iterator();\n        ObjectName on1 = it.next();\n        ObjectName on2 = it.next();\n\n        if (on1.getCanonicalName().contains(\"custom\")) {\n            assertEquals(\"bar\", mbsc.getAttribute(on1, \"Foo\"));\n        } else {\n            assertEquals(\"bar\", mbsc.getAttribute(on2, \"Foo\"));\n        }\n    }","id":59445,"modified_method":"public void testCustomEndpoint() throws Exception {\n        assertDefaultDomain();\n\n        resolveMandatoryEndpoint(\"custom://end\", CustomEndpoint.class);\n\n        Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + \":type=endpoints,*\"), null);\n        assertEquals(\"Could not find 2 endpoints: \" + s, 2, s.size());\n\n        // get custom\n        Iterator<ObjectName> it = s.iterator();\n        ObjectName on1 = it.next();\n        ObjectName on2 = it.next();\n\n        if (on1.getCanonicalName().contains(\"custom\")) {\n            assertEquals(\"bar\", mbsc.getAttribute(on1, \"Foo\"));\n        } else {\n            assertEquals(\"bar\", mbsc.getAttribute(on2, \"Foo\"));\n        }\n    }","commit_id":"55b32f9a020d7935cbe8208c55dd6b7c05c88ed1","url":"https://github.com/apache/camel"},{"original_method":"public void testDuplicateMessagesAreFilteredOut() throws Exception {\n        MBeanServer mbeanServer = getMBeanServer();\n\n        // services\n        Set<ObjectName> names = CastUtils.cast(mbeanServer.queryNames(new ObjectName(\"org.apache.camel\" + \":type=services,*\"), null));\n        ObjectName on = null;\n        for (ObjectName name : names) {\n            if (name.toString().contains(\"FileIdempotentRepository\")) {\n                on = name;\n                break;\n            }\n        }\n\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n        String path = (String) mbeanServer.getAttribute(on, \"FilePath\");\n        assertEquals(FileUtil.normalizePath(\"target/idempotentfilestore.dat\"), FileUtil.normalizePath(path));\n\n        Integer size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(1, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertFalse(repo.contains(\"2\"));\n        assertFalse(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"4\", \"four\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"3\", \"three\");\n\n        resultEndpoint.assertIsSatisfied();\n\n        assertTrue(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(4, size.intValue());\n\n        // remove one from repo\n        mbeanServer.invoke(on, \"remove\", new Object[]{\"1\"}, new String[]{\"java.lang.String\"});\n\n        // reset\n        mbeanServer.invoke(on, \"reset\", null, null);\n\n        // there should be 3 now\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(3, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n    }","id":59446,"modified_method":"public void testDuplicateMessagesAreFilteredOut() throws Exception {\n        MBeanServer mbeanServer = getMBeanServer();\n\n        // services\n        Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(\"org.apache.camel\" + \":type=services,*\"), null);\n        ObjectName on = null;\n        for (ObjectName name : names) {\n            if (name.toString().contains(\"FileIdempotentRepository\")) {\n                on = name;\n                break;\n            }\n        }\n\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n        String path = (String) mbeanServer.getAttribute(on, \"FilePath\");\n        assertEquals(FileUtil.normalizePath(\"target/idempotentfilestore.dat\"), FileUtil.normalizePath(path));\n\n        Integer size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(1, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertFalse(repo.contains(\"2\"));\n        assertFalse(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"2\", \"two\");\n        sendMessage(\"4\", \"four\");\n        sendMessage(\"1\", \"one\");\n        sendMessage(\"3\", \"three\");\n\n        resultEndpoint.assertIsSatisfied();\n\n        assertTrue(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(4, size.intValue());\n\n        // remove one from repo\n        mbeanServer.invoke(on, \"remove\", new Object[]{\"1\"}, new String[]{\"java.lang.String\"});\n\n        // reset\n        mbeanServer.invoke(on, \"reset\", null, null);\n\n        // there should be 3 now\n        size = (Integer) mbeanServer.getAttribute(on, \"CacheSize\");\n        assertEquals(3, size.intValue());\n\n        assertFalse(repo.contains(\"1\"));\n        assertTrue(repo.contains(\"2\"));\n        assertTrue(repo.contains(\"3\"));\n        assertTrue(repo.contains(\"4\"));\n    }","commit_id":"55b32f9a020d7935cbe8208c55dd6b7c05c88ed1","url":"https://github.com/apache/camel"},{"original_method":"public void create () {\n\t\tint size =1;\n\n\t\tbatch = new SpriteBatch();\n\t\tPixmap p = new Pixmap(64, 64, Format.RGBA8888);\n\t\tp.setColor(Color.RED);\n\t\tp.fillRectangle(32, 32, size, size);\n\t\tregion = new TextureRegion(new Texture(p), 32, 32, size, size);\n\n\t\tGdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);\n\t\tGdx.gl.glClearColor(0, 0, 0, 1);\n\t\tbatch.begin();\n\t\tbatch.draw(region, 1, 1, 256, 256);\n\t\tbatch.end();\n\t\tscreenCap = ScreenUtils.getFrameBufferPixmap(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n\t\tscreenCapTex = new Texture(screenCap);\n\t\tSystem.out.println(screenCap.getPixel(0, 0));\n\t\tSystem.out.println(screenCap.getPixel(1, 1));\n\t\tSystem.out.println(screenCap.getPixel(256, 256));\n\t\tSystem.out.println(screenCap.getPixel(257, 257));\n\t}","id":59447,"modified_method":"public void create () {\n\t\tint size =1;\n\n\t\tbatch = new SpriteBatch();\n\t\tPixmap p = new Pixmap(64, 64, Format.RGBA8888);\n\t\tp.setColor(Color.RED);\n\t\tp.fillRectangle(32, 32, size, size);\n\t\tregion = new TextureRegion(new Texture(p), 32, 32, size, size);\n\n\t\tGdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);\n\t\tGdx.gl.glClearColor(0, 0, 0, 1);\n\t\tbatch.begin();\n\t\tbatch.draw(region, 1, 1, 256, 256);\n\t\tbatch.end();\n\t\tscreenCap = ScreenUtils.getFrameBufferPixmap(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n\t\tscreenCapTex = new Texture(screenCap);\n\t\tSystem.out.println(Integer.toHexString(screenCap.getPixel(0, 0)));\n\t\tSystem.out.println(Integer.toHexString(screenCap.getPixel(1, 1)));\n\t\tSystem.out.println(Integer.toHexString(screenCap.getPixel(256, 256)));\n\t\tSystem.out.println(Integer.toHexString(screenCap.getPixel(257, 257)));\n\t}","commit_id":"21e586295eddd38f93d15b73e16d281c7e493480","url":"https://github.com/libgdx/libgdx"},{"original_method":"@NotNull\n    public static GlobalSearchScope kotlinSources(@NotNull GlobalSearchScope delegate, @NotNull Project project) {\n        return new JetSourceFilterScope(delegate, false, project);\n    }","id":59448,"modified_method":"@NotNull\n    public static GlobalSearchScope kotlinSources(@NotNull GlobalSearchScope delegate, @NotNull Project project) {\n        if (delegate instanceof JetSourceFilterScope) {\n            delegate = ((JetSourceFilterScope) delegate).myBaseScope;\n        }\n        return new JetSourceFilterScope(delegate, false, project);\n    }","commit_id":"e3e83fdee5dd48a043712bd4375cb67790c87fa4","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private JetSourceFilterScope(@NotNull GlobalSearchScope delegate, boolean includeLibraries, @NotNull Project project) {\n        super(delegate);\n        this.includeLibraries = includeLibraries;\n        this.index = ProjectRootManager.getInstance(project).getFileIndex();\n        this.project = project;\n    }","id":59449,"modified_method":"private JetSourceFilterScope(@NotNull GlobalSearchScope delegate, boolean includeLibraries, @NotNull Project project) {\n        super(delegate);\n        this.index = ProjectRootManager.getInstance(project).getFileIndex();\n        this.project = project;\n        this.includeLibraries = includeLibraries;\n    }","commit_id":"e3e83fdee5dd48a043712bd4375cb67790c87fa4","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static GlobalSearchScope kotlinSourcesAndLibraries(@NotNull GlobalSearchScope delegate, @NotNull Project project) {\n        return new JetSourceFilterScope(delegate, true, project);\n    }","id":59450,"modified_method":"@NotNull\n    public static GlobalSearchScope kotlinSourcesAndLibraries(@NotNull GlobalSearchScope delegate, @NotNull Project project) {\n        if (delegate instanceof JetSourceFilterScope) {\n            return delegate;\n        }\n        return new JetSourceFilterScope(delegate, true, project);\n    }","commit_id":"e3e83fdee5dd48a043712bd4375cb67790c87fa4","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    public boolean contains(@NotNull VirtualFile file) {\n        if (!super.contains(file)) {\n            return false;\n        }\n\n        if (includeLibraries && JavaClassFileType.INSTANCE == file.getFileType()) {\n            return index.isInLibraryClasses(file);\n        }\n\n        if (JetModuleTypeManager.getInstance().isKtFileInGradleProjectInWrongFolder(file, getProject())) {\n            return false;\n        }\n\n        return file.getFileType().equals(JetFileType.INSTANCE) &&\n               (index.isInSourceContent(file) || includeLibraries && index.isInLibrarySource(file));\n    }","id":59451,"modified_method":"@Override\n    public boolean contains(@NotNull VirtualFile file) {\n        if (!super.contains(file)) {\n            return false;\n        }\n\n        if (index.isInSourceContent(file)) {\n            return !JetModuleTypeManager.getInstance().isKtFileInGradleProjectInWrongFolder(file, project);\n        }\n\n        if (!includeLibraries) return false;\n\n        return index.isInLibraryClasses(file) || index.isInLibrarySource(file);\n    }","commit_id":"e3e83fdee5dd48a043712bd4375cb67790c87fa4","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public boolean contains(final VirtualFile file) {\n    final FileType fileType = file.getFileType();\n    return (myDelegate == null || myDelegate.contains(file)) &&\n            (GroovyFileType.GROOVY_FILE_TYPE == fileType && myIndex.isInSourceContent(file) ||\n                    StdFileTypes.CLASS == fileType && myIndex.isInLibraryClasses(file));\n  }","id":59452,"modified_method":"public boolean contains(final VirtualFile file) {\n    if (myDelegate != null && !myDelegate.contains(file)) {\n      return false;\n    }\n    \n    return myIndex.isInSourceContent(file) || myIndex.isInLibraryClasses(file);\n  }","commit_id":"38badbf07a6a49c546530bd943dd29d6427eca31","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PsiFile createFile(FileViewProvider viewProvider) {\n    if (JavaParserDefinition.shouldCreateJavaFile(viewProvider)) {\n      return new GroovyFileImpl(viewProvider);\n    }\n    else {\n      return new PsiPlainTextFileImpl(viewProvider);\n    }\n  }","id":59453,"modified_method":"public PsiFile createFile(FileViewProvider viewProvider) {\n    return new GroovyFileImpl(viewProvider);\n  }","commit_id":"38badbf07a6a49c546530bd943dd29d6427eca31","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n    private JetType getReceiverType(\n            PropertyPsiDataElement characteristicMember,\n            TypeVariableResolver typeVariableResolverForPropertyInternals\n    ) {\n        JetType receiverType;\n        if (characteristicMember.getReceiverType() == null) {\n            receiverType = null;\n        }\n        else if (characteristicMember.getReceiverType().getTypeString().length() > 0) {\n            receiverType = semanticServices.getTypeTransformer().transformToType(characteristicMember.getReceiverType().getTypeString(), typeVariableResolverForPropertyInternals);\n        }\n        else {\n            receiverType = semanticServices.getTypeTransformer().transformToType(characteristicMember.getReceiverType().getPsiType(), typeVariableResolverForPropertyInternals);\n        }\n        return receiverType;\n    }","id":59454,"modified_method":"@Nullable\n    private JetType getReceiverType(\n            PropertyPsiDataElement characteristicMember,\n            TypeVariableResolver typeVariableResolverForPropertyInternals\n    ) {\n        if (characteristicMember.getReceiverType() == null) {\n            return null;\n        }\n        if (!characteristicMember.getReceiverType().getTypeString().isEmpty()) {\n            return semanticServices.getTypeTransformer().transformToType(characteristicMember.getReceiverType().getTypeString(), typeVariableResolverForPropertyInternals);\n        }\n        return semanticServices.getTypeTransformer().transformToType(characteristicMember.getReceiverType().getPsiType(), typeVariableResolverForPropertyInternals);\n    }","commit_id":"6dcb3cc8f7e5918a4b2ef13f2da8ff05fc72920f","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForJavaDescriptorResolver(\n        @NotNull Project project,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.bindingTrace = bindingTrace;\n        this.javaDescriptorResolver = new JavaDescriptorResolver();\n        this.psiClassFinder = new PsiClassFinderImpl();\n        this.javaClassResolver = new JavaClassResolver();\n        this.javaAnnotationResolver = new JavaAnnotationResolver();\n        this.javaCompileTimeConstResolver = new JavaCompileTimeConstResolver();\n        this.javaFunctionResolver = new JavaFunctionResolver();\n        this.javaValueParameterResolver = new JavaValueParameterResolver();\n        this.javaTypeTransformer = new JavaTypeTransformer();\n        this.javaSignatureResolver = new JavaSignatureResolver();\n        this.javaSemanticServices = new JavaSemanticServices();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer();\n        this.javaNamespaceResolver = new JavaNamespaceResolver();\n        this.javaSupertypeResolver = new JavaSupertypeResolver();\n        this.javaConstructorResolver = new JavaConstructorResolver();\n        this.javaInnerClassResolver = new JavaInnerClassResolver();\n        this.javaPropertyResolver = new JavaPropertyResolver();\n\n        this.javaDescriptorResolver.setClassResolver(javaClassResolver);\n        this.javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);\n        this.javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);\n        this.javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);\n        this.javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);\n        this.javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);\n\n        this.psiClassFinder.setProject(project);\n\n        javaClassResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaClassResolver.setFunctionResolver(javaFunctionResolver);\n        javaClassResolver.setKotlinDescriptorResolver(deserializedDescriptorResolver);\n        javaClassResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaClassResolver.setPsiClassFinder(psiClassFinder);\n        javaClassResolver.setSemanticServices(javaSemanticServices);\n        javaClassResolver.setSignatureResolver(javaSignatureResolver);\n        javaClassResolver.setSupertypesResolver(javaSupertypeResolver);\n        javaClassResolver.setTrace(bindingTrace);\n\n        javaAnnotationResolver.setClassResolver(javaClassResolver);\n        javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);\n\n        javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaCompileTimeConstResolver.setClassResolver(javaClassResolver);\n\n        javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaFunctionResolver.setParameterResolver(javaValueParameterResolver);\n        javaFunctionResolver.setSignatureResolver(javaSignatureResolver);\n        javaFunctionResolver.setTrace(bindingTrace);\n        javaFunctionResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaTypeTransformer.setResolver(javaDescriptorResolver);\n\n        javaSignatureResolver.setJavaSemanticServices(javaSemanticServices);\n\n        javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);\n        javaSemanticServices.setPsiClassFinder(psiClassFinder);\n        javaSemanticServices.setTypeTransformer(javaTypeTransformer);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);\n        deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);\n\n        annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);\n        annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);\n\n        javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);\n        javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);\n        javaNamespaceResolver.setPsiClassFinder(psiClassFinder);\n        javaNamespaceResolver.setTrace(bindingTrace);\n\n        javaSupertypeResolver.setClassResolver(javaClassResolver);\n        javaSupertypeResolver.setTrace(bindingTrace);\n        javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaConstructorResolver.setTrace(bindingTrace);\n        javaConstructorResolver.setTypeTransformer(javaTypeTransformer);\n        javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);\n\n        javaInnerClassResolver.setClassResolver(javaClassResolver);\n\n        javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaPropertyResolver.setSemanticServices(javaSemanticServices);\n        javaPropertyResolver.setTrace(bindingTrace);\n\n        psiClassFinder.initialize();\n\n    }","id":59455,"modified_method":"public InjectorForJavaDescriptorResolver(\n        @NotNull Project project,\n        @NotNull BindingTrace bindingTrace\n    ) {\n        this.project = project;\n        this.bindingTrace = bindingTrace;\n        this.javaDescriptorResolver = new JavaDescriptorResolver();\n        this.psiClassFinder = new PsiClassFinderImpl();\n        this.javaClassResolver = new JavaClassResolver();\n        this.javaAnnotationResolver = new JavaAnnotationResolver();\n        this.javaCompileTimeConstResolver = new JavaCompileTimeConstResolver();\n        this.javaFunctionResolver = new JavaFunctionResolver();\n        this.javaValueParameterResolver = new JavaValueParameterResolver();\n        this.javaTypeTransformer = new JavaTypeTransformer();\n        this.javaSignatureResolver = new JavaSignatureResolver();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer();\n        this.javaNamespaceResolver = new JavaNamespaceResolver();\n        this.javaSemanticServices = new JavaSemanticServices();\n        this.javaSupertypeResolver = new JavaSupertypeResolver();\n        this.javaConstructorResolver = new JavaConstructorResolver();\n        this.javaInnerClassResolver = new JavaInnerClassResolver();\n        this.javaPropertyResolver = new JavaPropertyResolver();\n\n        this.javaDescriptorResolver.setClassResolver(javaClassResolver);\n        this.javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);\n        this.javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);\n        this.javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);\n        this.javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);\n        this.javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);\n\n        this.psiClassFinder.setProject(project);\n\n        javaClassResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaClassResolver.setFunctionResolver(javaFunctionResolver);\n        javaClassResolver.setKotlinDescriptorResolver(deserializedDescriptorResolver);\n        javaClassResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaClassResolver.setPsiClassFinder(psiClassFinder);\n        javaClassResolver.setSemanticServices(javaSemanticServices);\n        javaClassResolver.setSignatureResolver(javaSignatureResolver);\n        javaClassResolver.setSupertypesResolver(javaSupertypeResolver);\n        javaClassResolver.setTrace(bindingTrace);\n\n        javaAnnotationResolver.setClassResolver(javaClassResolver);\n        javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);\n\n        javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaCompileTimeConstResolver.setClassResolver(javaClassResolver);\n\n        javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaFunctionResolver.setParameterResolver(javaValueParameterResolver);\n        javaFunctionResolver.setSignatureResolver(javaSignatureResolver);\n        javaFunctionResolver.setTrace(bindingTrace);\n        javaFunctionResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaTypeTransformer.setResolver(javaDescriptorResolver);\n\n        javaSignatureResolver.setTypeTransformer(javaTypeTransformer);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);\n        deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);\n\n        annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);\n        annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);\n\n        javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);\n        javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);\n        javaNamespaceResolver.setPsiClassFinder(psiClassFinder);\n        javaNamespaceResolver.setTrace(bindingTrace);\n\n        javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);\n        javaSemanticServices.setPsiClassFinder(psiClassFinder);\n\n        javaSupertypeResolver.setClassResolver(javaClassResolver);\n        javaSupertypeResolver.setTrace(bindingTrace);\n        javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaConstructorResolver.setTrace(bindingTrace);\n        javaConstructorResolver.setTypeTransformer(javaTypeTransformer);\n        javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);\n\n        javaInnerClassResolver.setClassResolver(javaClassResolver);\n\n        javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaPropertyResolver.setTrace(bindingTrace);\n        javaPropertyResolver.setTypeTransformer(javaTypeTransformer);\n\n        psiClassFinder.initialize();\n\n    }","commit_id":"a0cbe80acab5d5b949b85915ba62945492865eb3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.needSyntheticCallResolverExtension = new NeedSyntheticCallResolverExtension();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.javaBridgeConfiguration = new JavaBridgeConfiguration();\n        this.javaDescriptorResolver = new JavaDescriptorResolver();\n        this.psiClassFinder = new PsiClassFinderImpl();\n        this.namespaceFactory = new NamespaceFactoryImpl();\n        this.declarationResolver = new DeclarationResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.javaSemanticServices = new JavaSemanticServices();\n        this.javaTypeTransformer = new JavaTypeTransformer();\n        this.javaClassResolver = new JavaClassResolver();\n        this.javaAnnotationResolver = new JavaAnnotationResolver();\n        this.javaCompileTimeConstResolver = new JavaCompileTimeConstResolver();\n        this.javaFunctionResolver = new JavaFunctionResolver();\n        this.javaValueParameterResolver = new JavaValueParameterResolver();\n        this.javaSignatureResolver = new JavaSignatureResolver();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer();\n        this.javaNamespaceResolver = new JavaNamespaceResolver();\n        this.javaSupertypeResolver = new JavaSupertypeResolver();\n        this.javaConstructorResolver = new JavaConstructorResolver();\n        this.javaInnerClassResolver = new JavaInnerClassResolver();\n        this.javaPropertyResolver = new JavaPropertyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setNamespaceFactory(namespaceFactory);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDescriptorResolver(descriptorResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.controlFlowAnalyzer.setTrace(bindingTrace);\n\n        this.declarationsChecker.setTrace(bindingTrace);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        this.javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);\n\n        javaDescriptorResolver.setClassResolver(javaClassResolver);\n        javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);\n        javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);\n        javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);\n        javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);\n\n        psiClassFinder.setProject(project);\n\n        this.namespaceFactory.setModuleDescriptor(moduleDescriptor);\n        this.namespaceFactory.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setExtension(needSyntheticCallResolverExtension);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setDescriptorResolver(descriptorResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);\n        scriptHeaderResolver.setNamespaceFactory(namespaceFactory);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setNamespaceFactory(namespaceFactory);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);\n        javaSemanticServices.setPsiClassFinder(psiClassFinder);\n        javaSemanticServices.setTypeTransformer(javaTypeTransformer);\n\n        javaTypeTransformer.setResolver(javaDescriptorResolver);\n\n        javaClassResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaClassResolver.setFunctionResolver(javaFunctionResolver);\n        javaClassResolver.setKotlinDescriptorResolver(deserializedDescriptorResolver);\n        javaClassResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaClassResolver.setPsiClassFinder(psiClassFinder);\n        javaClassResolver.setSemanticServices(javaSemanticServices);\n        javaClassResolver.setSignatureResolver(javaSignatureResolver);\n        javaClassResolver.setSupertypesResolver(javaSupertypeResolver);\n        javaClassResolver.setTrace(bindingTrace);\n\n        javaAnnotationResolver.setClassResolver(javaClassResolver);\n        javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);\n\n        javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaCompileTimeConstResolver.setClassResolver(javaClassResolver);\n\n        javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaFunctionResolver.setParameterResolver(javaValueParameterResolver);\n        javaFunctionResolver.setSignatureResolver(javaSignatureResolver);\n        javaFunctionResolver.setTrace(bindingTrace);\n        javaFunctionResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaSignatureResolver.setJavaSemanticServices(javaSemanticServices);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);\n        deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);\n\n        annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);\n        annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);\n\n        javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);\n        javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);\n        javaNamespaceResolver.setPsiClassFinder(psiClassFinder);\n        javaNamespaceResolver.setTrace(bindingTrace);\n\n        javaSupertypeResolver.setClassResolver(javaClassResolver);\n        javaSupertypeResolver.setTrace(bindingTrace);\n        javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaConstructorResolver.setTrace(bindingTrace);\n        javaConstructorResolver.setTypeTransformer(javaTypeTransformer);\n        javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);\n\n        javaInnerClassResolver.setClassResolver(javaClassResolver);\n\n        javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaPropertyResolver.setSemanticServices(javaSemanticServices);\n        javaPropertyResolver.setTrace(bindingTrace);\n\n        psiClassFinder.initialize();\n\n    }","id":59456,"modified_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull TopDownAnalysisParameters topDownAnalysisParameters,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.topDownAnalysisContext = new TopDownAnalysisContext();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.needSyntheticCallResolverExtension = new NeedSyntheticCallResolverExtension();\n        this.project = project;\n        this.topDownAnalysisParameters = topDownAnalysisParameters;\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.javaBridgeConfiguration = new JavaBridgeConfiguration();\n        this.javaDescriptorResolver = new JavaDescriptorResolver();\n        this.psiClassFinder = new PsiClassFinderImpl();\n        this.namespaceFactory = new NamespaceFactoryImpl();\n        this.declarationResolver = new DeclarationResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingServices = new ExpressionTypingServices();\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.typeResolver = new TypeResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.candidateResolver = new CandidateResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.javaSemanticServices = new JavaSemanticServices();\n        this.javaClassResolver = new JavaClassResolver();\n        this.javaAnnotationResolver = new JavaAnnotationResolver();\n        this.javaCompileTimeConstResolver = new JavaCompileTimeConstResolver();\n        this.javaFunctionResolver = new JavaFunctionResolver();\n        this.javaValueParameterResolver = new JavaValueParameterResolver();\n        this.javaTypeTransformer = new JavaTypeTransformer();\n        this.javaSignatureResolver = new JavaSignatureResolver();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver();\n        this.annotationDescriptorDeserializer = new AnnotationDescriptorDeserializer();\n        this.javaNamespaceResolver = new JavaNamespaceResolver();\n        this.javaSupertypeResolver = new JavaSupertypeResolver();\n        this.javaConstructorResolver = new JavaConstructorResolver();\n        this.javaInnerClassResolver = new JavaInnerClassResolver();\n        this.javaPropertyResolver = new JavaPropertyResolver();\n\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setContext(topDownAnalysisContext);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setNamespaceFactory(namespaceFactory);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);\n\n        this.bodyResolver.setAnnotationResolver(annotationResolver);\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        this.bodyResolver.setDeclarationsChecker(declarationsChecker);\n        this.bodyResolver.setDescriptorResolver(descriptorResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.bodyResolver.setTrace(bindingTrace);\n\n        this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        this.controlFlowAnalyzer.setTrace(bindingTrace);\n\n        this.declarationsChecker.setTrace(bindingTrace);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        this.javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);\n\n        javaDescriptorResolver.setClassResolver(javaClassResolver);\n        javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);\n        javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);\n        javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);\n        javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);\n\n        psiClassFinder.setProject(project);\n\n        this.namespaceFactory.setModuleDescriptor(moduleDescriptor);\n        this.namespaceFactory.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setExtension(needSyntheticCallResolverExtension);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setDescriptorResolver(descriptorResolver);\n        typeResolver.setModuleDescriptor(moduleDescriptor);\n        typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        importsResolver.setContext(topDownAnalysisContext);\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        scriptHeaderResolver.setContext(topDownAnalysisContext);\n        scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);\n        scriptHeaderResolver.setNamespaceFactory(namespaceFactory);\n        scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n        overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setNamespaceFactory(namespaceFactory);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptBodyResolver.setContext(topDownAnalysisContext);\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n        scriptBodyResolver.setTrace(bindingTrace);\n\n        javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);\n        javaSemanticServices.setPsiClassFinder(psiClassFinder);\n\n        javaClassResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaClassResolver.setFunctionResolver(javaFunctionResolver);\n        javaClassResolver.setKotlinDescriptorResolver(deserializedDescriptorResolver);\n        javaClassResolver.setNamespaceResolver(javaNamespaceResolver);\n        javaClassResolver.setPsiClassFinder(psiClassFinder);\n        javaClassResolver.setSemanticServices(javaSemanticServices);\n        javaClassResolver.setSignatureResolver(javaSignatureResolver);\n        javaClassResolver.setSupertypesResolver(javaSupertypeResolver);\n        javaClassResolver.setTrace(bindingTrace);\n\n        javaAnnotationResolver.setClassResolver(javaClassResolver);\n        javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);\n\n        javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaCompileTimeConstResolver.setClassResolver(javaClassResolver);\n\n        javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaFunctionResolver.setParameterResolver(javaValueParameterResolver);\n        javaFunctionResolver.setSignatureResolver(javaSignatureResolver);\n        javaFunctionResolver.setTrace(bindingTrace);\n        javaFunctionResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaTypeTransformer.setResolver(javaDescriptorResolver);\n\n        javaSignatureResolver.setTypeTransformer(javaTypeTransformer);\n\n        deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);\n        deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);\n        deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);\n\n        annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);\n        annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);\n\n        javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);\n        javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);\n        javaNamespaceResolver.setPsiClassFinder(psiClassFinder);\n        javaNamespaceResolver.setTrace(bindingTrace);\n\n        javaSupertypeResolver.setClassResolver(javaClassResolver);\n        javaSupertypeResolver.setTrace(bindingTrace);\n        javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);\n\n        javaConstructorResolver.setTrace(bindingTrace);\n        javaConstructorResolver.setTypeTransformer(javaTypeTransformer);\n        javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);\n\n        javaInnerClassResolver.setClassResolver(javaClassResolver);\n\n        javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);\n        javaPropertyResolver.setTrace(bindingTrace);\n        javaPropertyResolver.setTypeTransformer(javaTypeTransformer);\n\n        psiClassFinder.initialize();\n\n    }","commit_id":"a0cbe80acab5d5b949b85915ba62945492865eb3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    private JetType getPropertyType(\n            PsiFieldWrapper field,\n            TypeVariableResolver typeVariableResolverForPropertyInternals\n    ) {\n        JetType propertyType = semanticServices.getTypeTransformer().transformToType(\n                field.getType(), typeVariableResolverForPropertyInternals);\n\n        boolean hasNotNullAnnotation = JavaAnnotationResolver.findAnnotationWithExternal(\n                field.getPsiField(),\n                JvmAnnotationNames.JETBRAINS_NOT_NULL_ANNOTATION.getFqName().asString()) != null;\n\n        if (hasNotNullAnnotation || isStaticFinalField(field)) {\n            propertyType = TypeUtils.makeNotNullable(propertyType);\n        }\n        return propertyType;\n    }","id":59457,"modified_method":"@NotNull\n    private JetType getPropertyType(@NotNull PsiFieldWrapper field, @NotNull TypeVariableResolver typeVariableResolver) {\n        JetType propertyType = typeTransformer.transformToType(field.getType(), typeVariableResolver);\n\n        boolean hasNotNullAnnotation = JavaAnnotationResolver.findAnnotationWithExternal(\n                field.getPsiField(),\n                JvmAnnotationNames.JETBRAINS_NOT_NULL_ANNOTATION.getFqName().asString()) != null;\n\n        if (hasNotNullAnnotation || isStaticFinalField(field)) {\n            propertyType = TypeUtils.makeNotNullable(propertyType);\n        }\n        return propertyType;\n    }","commit_id":"a0cbe80acab5d5b949b85915ba62945492865eb3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void initializeTypeParameter(\n            TypeParameterDescriptorInitialization typeParameter,\n            TypeVariableResolver typeVariableByPsiResolver\n    ) {\n        TypeParameterDescriptorImpl typeParameterDescriptor = typeParameter.descriptor;\n        PsiClassType[] referencedTypes = typeParameter.psiTypeParameter.getExtendsList().getReferencedTypes();\n        if (referencedTypes.length == 0) {\n            typeParameterDescriptor.addUpperBound(KotlinBuiltIns.getInstance().getNullableAnyType());\n        }\n        else if (referencedTypes.length == 1) {\n            typeParameterDescriptor.addUpperBound(semanticServices.getTypeTransformer()\n                                                          .transformToType(referencedTypes[0], TypeUsage.UPPER_BOUND,\n                                                                           typeVariableByPsiResolver));\n        }\n        else {\n            for (PsiClassType referencedType : referencedTypes) {\n                typeParameterDescriptor.addUpperBound(semanticServices.getTypeTransformer()\n                                                              .transformToType(referencedType, TypeUsage.UPPER_BOUND,\n                                                                               typeVariableByPsiResolver));\n            }\n        }\n        typeParameterDescriptor.setInitialized();\n    }","id":59458,"modified_method":"private void initializeTypeParameter(\n            TypeParameterDescriptorInitialization typeParameter,\n            TypeVariableResolver typeVariableByPsiResolver\n    ) {\n        TypeParameterDescriptorImpl typeParameterDescriptor = typeParameter.descriptor;\n        PsiClassType[] referencedTypes = typeParameter.psiTypeParameter.getExtendsList().getReferencedTypes();\n        if (referencedTypes.length == 0) {\n            typeParameterDescriptor.addUpperBound(KotlinBuiltIns.getInstance().getNullableAnyType());\n        }\n        else {\n            for (PsiClassType referencedType : referencedTypes) {\n                JetType transformedType = typeTransformer.transformToType(referencedType, TypeUsage.UPPER_BOUND, typeVariableByPsiResolver);\n                typeParameterDescriptor.addUpperBound(transformedType);\n            }\n        }\n        typeParameterDescriptor.setInitialized();\n    }","commit_id":"a0cbe80acab5d5b949b85915ba62945492865eb3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n    public void getLanguagesToInject(@NotNull final MultiHostRegistrar injectionPlacesRegistrar, @NotNull PsiElement context) {\n      final PsiLanguageInjectionHost host = (PsiLanguageInjectionHost)context;\n      InjectedLanguagePlaces placesRegistrar = new InjectedLanguagePlaces() {\n        @Override\n        public void addPlace(@NotNull Language language, @NotNull TextRange rangeInsideHost, @NonNls @Nullable String prefix, @NonNls @Nullable String suffix) {\n          injectionPlacesRegistrar\n            .startInjecting(language)\n            .addPlace(prefix, suffix, host, rangeInsideHost)\n            .doneInjecting();\n        }\n      };\n      for (LanguageInjector injector : Extensions.getExtensions(LanguageInjector.EXTENSION_POINT_NAME)) {\n        injector.getLanguagesToInject(host, placesRegistrar);\n      }\n    }","id":59459,"modified_method":"@Override\n    public void getLanguagesToInject(@NotNull final MultiHostRegistrar injectionPlacesRegistrar, @NotNull PsiElement context) {\n      final PsiLanguageInjectionHost host = (PsiLanguageInjectionHost)context;\n      InjectedLanguagePlaces placesRegistrar = (language, rangeInsideHost, prefix, suffix) -> injectionPlacesRegistrar\n        .startInjecting(language)\n        .addPlace(prefix, suffix, host, rangeInsideHost)\n        .doneInjecting();\n      for (LanguageInjector injector : Extensions.getExtensions(LanguageInjector.EXTENSION_POINT_NAME)) {\n        injector.getLanguagesToInject(host, placesRegistrar);\n      }\n    }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void startRunInjectors(@NotNull final Document hostDocument, final boolean synchronously) {\n    if (myProject.isDisposed()) return;\n    if (!synchronously && ApplicationManager.getApplication().isWriteAccessAllowed()) return;\n    // use cached to avoid recreate PSI in alien project\n    final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(myProject);\n    final PsiFile hostPsiFile = documentManager.getCachedPsiFile(hostDocument);\n    if (hostPsiFile == null) return;\n\n    final ConcurrentList<DocumentWindow> injected = InjectedLanguageUtil.getCachedInjectedDocuments(hostPsiFile);\n    if (injected.isEmpty()) return;\n\n    if (myProgress.isCanceled()) {\n      myProgress = new DaemonProgressIndicator();\n    }\n    final Set<DocumentWindow> newDocuments = Collections.synchronizedSet(new THashSet());\n    final Processor<DocumentWindow> commitProcessor = new Processor<DocumentWindow>() {\n      @Override\n      public boolean process(DocumentWindow documentWindow) {\n        if (myProject.isDisposed()) return false;\n        ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();\n        if (indicator != null && indicator.isCanceled()) return false;\n        if (documentManager.isUncommited(hostDocument) || !hostPsiFile.isValid()) return false; // will be committed later\n\n        // it is here where the reparse happens and old file contents replaced\n        InjectedLanguageUtil.enumerate(documentWindow, hostPsiFile, new PsiLanguageInjectionHost.InjectedPsiVisitor() {\n          @Override\n          public void visit(@NotNull PsiFile injectedPsi, @NotNull List<PsiLanguageInjectionHost.Shred> places) {\n            DocumentWindow newDocument = (DocumentWindow)injectedPsi.getViewProvider().getDocument();\n            if (newDocument != null) {\n              PsiDocumentManagerBase.checkConsistency(injectedPsi, newDocument);\n              newDocuments.add(newDocument);\n            }\n          }\n        });\n        return true;\n      }\n    };\n    final Runnable commitInjectionsRunnable = new Runnable() {\n      @Override\n      public void run() {\n        if (myProgress.isCanceled()) return;\n        JobLauncher.getInstance().invokeConcurrentlyUnderProgress(new ArrayList<DocumentWindow>(injected), myProgress, true, commitProcessor);\n\n        synchronized (PsiLock.LOCK) {\n          injected.clear();\n          injected.addAll(newDocuments);\n        }\n      }\n    };\n\n    if (synchronously) {\n      if (Thread.holdsLock(PsiLock.LOCK)) {\n        // hack for the case when docCommit was called from within PSI modification, e.g. in formatter.\n        // we can't spawn threads to do injections there, otherwise a deadlock is imminent\n        ContainerUtil.process(new ArrayList<DocumentWindow>(injected), commitProcessor);\n      }\n      else {\n        commitInjectionsRunnable.run();\n      }\n    }\n    else {\n      JobLauncher.getInstance().submitToJobThread(new Runnable() {\n        @Override\n        public void run() {\n          ApplicationManagerEx.getApplicationEx().tryRunReadAction(commitInjectionsRunnable);\n        }\n      }, null);\n    }\n  }","id":59460,"modified_method":"@Override\n  public void startRunInjectors(@NotNull final Document hostDocument, final boolean synchronously) {\n    if (myProject.isDisposed()) return;\n    if (!synchronously && ApplicationManager.getApplication().isWriteAccessAllowed()) return;\n    // use cached to avoid recreate PSI in alien project\n    final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(myProject);\n    final PsiFile hostPsiFile = documentManager.getCachedPsiFile(hostDocument);\n    if (hostPsiFile == null) return;\n\n    final ConcurrentList<DocumentWindow> injected = InjectedLanguageUtil.getCachedInjectedDocuments(hostPsiFile);\n    if (injected.isEmpty()) return;\n\n    if (myProgress.isCanceled()) {\n      myProgress = new DaemonProgressIndicator();\n    }\n    final Set<DocumentWindow> newDocuments = Collections.synchronizedSet(new THashSet<>());\n    final Processor<DocumentWindow> commitProcessor = documentWindow -> {\n      if (myProject.isDisposed()) return false;\n      ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();\n      if (indicator != null && indicator.isCanceled()) return false;\n      if (documentManager.isUncommited(hostDocument) || !hostPsiFile.isValid()) return false; // will be committed later\n\n      // it is here where the reparse happens and old file contents replaced\n      InjectedLanguageUtil.enumerate(documentWindow, hostPsiFile, (injectedPsi, places) -> {\n        DocumentWindow newDocument = (DocumentWindow)injectedPsi.getViewProvider().getDocument();\n        if (newDocument != null) {\n          PsiDocumentManagerBase.checkConsistency(injectedPsi, newDocument);\n          newDocuments.add(newDocument);\n        }\n      });\n      return true;\n    };\n    final Runnable commitInjectionsRunnable = () -> {\n      if (myProgress.isCanceled()) return;\n      JobLauncher.getInstance().invokeConcurrentlyUnderProgress(new ArrayList<>(injected), myProgress, true, commitProcessor);\n\n      synchronized (PsiLock.LOCK) {\n        injected.clear();\n        injected.addAll(newDocuments);\n      }\n    };\n\n    if (synchronously) {\n      if (Thread.holdsLock(PsiLock.LOCK)) {\n        // hack for the case when docCommit was called from within PSI modification, e.g. in formatter.\n        // we can't spawn threads to do injections there, otherwise a deadlock is imminent\n        ContainerUtil.process(new ArrayList<>(injected), commitProcessor);\n      }\n      else {\n        commitInjectionsRunnable.run();\n      }\n    }\n    else {\n      JobLauncher.getInstance().submitToJobThread(() -> ApplicationManagerEx.getApplicationEx().tryRunReadAction(commitInjectionsRunnable), null);\n    }\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public List<Pair<PsiElement, TextRange>> getInjectedPsiFiles(@NotNull final PsiElement host) {\n    if (!(host instanceof PsiLanguageInjectionHost) || !((PsiLanguageInjectionHost) host).isValidHost()) {\n      return null;\n    }\n    final PsiElement inTree = InjectedLanguageUtil.loadTree(host, host.getContainingFile());\n    final List<Pair<PsiElement, TextRange>> result = new SmartList<Pair<PsiElement, TextRange>>();\n    InjectedLanguageUtil.enumerate(inTree, new PsiLanguageInjectionHost.InjectedPsiVisitor() {\n      @Override\n      public void visit(@NotNull PsiFile injectedPsi, @NotNull List<PsiLanguageInjectionHost.Shred> places) {\n        for (PsiLanguageInjectionHost.Shred place : places) {\n          if (place.getHost() == inTree) {\n            result.add(new Pair<PsiElement, TextRange>(injectedPsi, place.getRangeInsideHost()));\n          }\n        }\n      }\n    });\n    return result.isEmpty() ? null : result;\n  }","id":59461,"modified_method":"@Override\n  @Nullable\n  public List<Pair<PsiElement, TextRange>> getInjectedPsiFiles(@NotNull final PsiElement host) {\n    if (!(host instanceof PsiLanguageInjectionHost) || !((PsiLanguageInjectionHost) host).isValidHost()) {\n      return null;\n    }\n    final PsiElement inTree = InjectedLanguageUtil.loadTree(host, host.getContainingFile());\n    final List<Pair<PsiElement, TextRange>> result = new SmartList<>();\n    InjectedLanguageUtil.enumerate(inTree, (injectedPsi, places) -> {\n      for (PsiLanguageInjectionHost.Shred place : places) {\n        if (place.getHost() == inTree) {\n          result.add(new Pair<>(injectedPsi, place.getRangeInsideHost()));\n        }\n      }\n    });\n    return result.isEmpty() ? null : result;\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@TestOnly\n  public static void checkInjectorsAreDisposed(@NotNull Project project) {\n    InjectedLanguageManagerImpl cachedManager = (InjectedLanguageManagerImpl)project.getUserData(INSTANCE_CACHE);\n    if (cachedManager == null) {\n      return;\n    }\n    try {\n      ClassMapCachingNulls<MultiHostInjector> cached = cachedManager.cachedInjectors;\n      if (cached == null) return;\n      for (Map.Entry<Class, MultiHostInjector[]> entry : cached.getBackingMap().entrySet()) {\n        Class key = entry.getKey();\n        if (cachedManager.myInjectorsClone.isEmpty()) return;\n        MultiHostInjector[] oldInjectors = cachedManager.myInjectorsClone.get(key);\n        for (MultiHostInjector injector : entry.getValue()) {\n          if (!ArrayUtil.contains(injector, oldInjectors)) {\n            throw new AssertionError(\"Injector was not disposed: \" + key + \" -> \" + injector);\n          }\n        }\n      }\n    }\n    finally {\n      cachedManager.myInjectorsClone.clear();\n    }\n  }","id":59462,"modified_method":"@TestOnly\n  public static void checkInjectorsAreDisposed(@NotNull Project project) {\n    InjectedLanguageManagerImpl cachedManager = (InjectedLanguageManagerImpl)project.getUserData(INSTANCE_CACHE);\n    if (cachedManager == null) {\n      return;\n    }\n    try {\n      ClassMapCachingNulls<MultiHostInjector> cached = cachedManager.cachedInjectors;\n      if (cached == null) return;\n      for (Map.Entry<Class, MultiHostInjector[]> entry : cached.getBackingMap().entrySet()) {\n        Class key = entry.getKey();\n        if (cachedManager.myInjectorsClone.isEmpty()) return;\n        MultiHostInjector[] oldInjectors = cachedManager.myInjectorsClone.get(key);\n        for (MultiHostInjector injector : entry.getValue()) {\n          if (ArrayUtil.indexOf(oldInjectors, injector) == -1) {\n            throw new AssertionError(\"Injector was not disposed: \" + key + \" -> \" + injector);\n          }\n        }\n      }\n    }\n    finally {\n      cachedManager.myInjectorsClone.clear();\n    }\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   *  intersection may spread over several injected fragments\n   *  @param rangeToEdit range in encoded(raw) PSI\n   *  @return list of ranges in encoded (raw) PSI\n   */\n  @Override\n  @SuppressWarnings({\"ConstantConditions\", \"unchecked\"})\n  @NotNull\n  public List<TextRange> intersectWithAllEditableFragments(@NotNull PsiFile injectedPsi, @NotNull TextRange rangeToEdit) {\n    Place shreds = InjectedLanguageUtil.getShreds(injectedPsi);\n    if (shreds == null) return Collections.emptyList();\n    Object result = null; // optimization: TextRange or ArrayList\n    int count = 0;\n    int offset = 0;\n    for (PsiLanguageInjectionHost.Shred shred : shreds) {\n      TextRange encodedRange = TextRange.from(offset + shred.getPrefix().length(), shred.getRangeInsideHost().getLength());\n      TextRange intersection = encodedRange.intersection(rangeToEdit);\n      if (intersection != null) {\n        count++;\n        if (count == 1) {\n          result = intersection;\n        }\n        else if (count == 2) {\n          TextRange range = (TextRange)result;\n          if (range.isEmpty()) {\n            result = intersection;\n            count = 1;\n          }\n          else if (intersection.isEmpty()) {\n            count = 1;\n          }\n          else {\n            List<TextRange> list = new ArrayList<TextRange>();\n            list.add(range);\n            list.add(intersection);\n            result = list;\n          }\n        }\n        else if (intersection.isEmpty()) {\n          count--;\n        }\n        else {\n          ((List<TextRange>)result).add(intersection);\n        }\n      }\n      offset += shred.getPrefix().length() + shred.getRangeInsideHost().getLength() + shred.getSuffix().length();\n    }\n    return count == 0 ? Collections.<TextRange>emptyList() : count == 1 ? Collections.singletonList((TextRange)result) : (List<TextRange>)result;\n  }","id":59463,"modified_method":"/**\n   *  intersection may spread over several injected fragments\n   *  @param rangeToEdit range in encoded(raw) PSI\n   *  @return list of ranges in encoded (raw) PSI\n   */\n  @Override\n  @SuppressWarnings({\"ConstantConditions\", \"unchecked\"})\n  @NotNull\n  public List<TextRange> intersectWithAllEditableFragments(@NotNull PsiFile injectedPsi, @NotNull TextRange rangeToEdit) {\n    Place shreds = InjectedLanguageUtil.getShreds(injectedPsi);\n    if (shreds == null) return Collections.emptyList();\n    Object result = null; // optimization: TextRange or ArrayList\n    int count = 0;\n    int offset = 0;\n    for (PsiLanguageInjectionHost.Shred shred : shreds) {\n      TextRange encodedRange = TextRange.from(offset + shred.getPrefix().length(), shred.getRangeInsideHost().getLength());\n      TextRange intersection = encodedRange.intersection(rangeToEdit);\n      if (intersection != null) {\n        count++;\n        if (count == 1) {\n          result = intersection;\n        }\n        else if (count == 2) {\n          TextRange range = (TextRange)result;\n          if (range.isEmpty()) {\n            result = intersection;\n            count = 1;\n          }\n          else if (intersection.isEmpty()) {\n            count = 1;\n          }\n          else {\n            List<TextRange> list = new ArrayList<>();\n            list.add(range);\n            list.add(intersection);\n            result = list;\n          }\n        }\n        else if (intersection.isEmpty()) {\n          count--;\n        }\n        else {\n          ((List<TextRange>)result).add(intersection);\n        }\n      }\n      offset += shred.getPrefix().length() + shred.getRangeInsideHost().getLength() + shred.getSuffix().length();\n    }\n    return count == 0 ? Collections.emptyList() : count == 1 ? Collections.singletonList((TextRange)result) : (List<TextRange>)result;\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    @NotNull\n    public List<? extends Class<? extends PsiElement>> elementsToInjectIn() {\n      return Arrays.asList(PsiLanguageInjectionHost.class);\n    }","id":59464,"modified_method":"@Override\n    @NotNull\n    public List<? extends Class<? extends PsiElement>> elementsToInjectIn() {\n      return Collections.singletonList(PsiLanguageInjectionHost.class);\n    }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ClassMapCachingNulls<MultiHostInjector> getInjectorMap() {\n    ClassMapCachingNulls<MultiHostInjector> cached = cachedInjectors;\n    if (cached != null) {\n      return cached;\n    }\n\n    Map<Class, MultiHostInjector[]> injectors = ContainerUtil.newHashMap();\n\n    List<MultiHostInjector> allInjectors = ContainerUtil.newArrayList();\n    allInjectors.addAll(myManualInjectors);\n    Collections.addAll(allInjectors, MultiHostInjector.MULTIHOST_INJECTOR_EP_NAME.getExtensions(myProject));\n    if (LanguageInjector.EXTENSION_POINT_NAME.getExtensions().length > 0) {\n      allInjectors.add(PsiManagerRegisteredInjectorsAdapter.INSTANCE);\n    }\n\n    for (MultiHostInjector injector : allInjectors) {\n      for (Class<? extends PsiElement> place : injector.elementsToInjectIn()) {\n        LOG.assertTrue(place != null, injector);\n        MultiHostInjector[] existing = injectors.get(place);\n        injectors.put(place, existing == null ? new MultiHostInjector[]{injector} : ArrayUtil.append(existing, injector));\n      }\n    }\n\n    ClassMapCachingNulls<MultiHostInjector> result = new ClassMapCachingNulls<MultiHostInjector>(injectors, new MultiHostInjector[0]);\n    cachedInjectors = result;\n    return result;\n  }","id":59465,"modified_method":"private ClassMapCachingNulls<MultiHostInjector> getInjectorMap() {\n    ClassMapCachingNulls<MultiHostInjector> cached = cachedInjectors;\n    if (cached != null) {\n      return cached;\n    }\n\n    Map<Class, MultiHostInjector[]> injectors = ContainerUtil.newHashMap();\n\n    List<MultiHostInjector> allInjectors = ContainerUtil.newArrayList();\n    allInjectors.addAll(myManualInjectors);\n    Collections.addAll(allInjectors, MultiHostInjector.MULTIHOST_INJECTOR_EP_NAME.getExtensions(myProject));\n    if (LanguageInjector.EXTENSION_POINT_NAME.getExtensions().length > 0) {\n      allInjectors.add(PsiManagerRegisteredInjectorsAdapter.INSTANCE);\n    }\n\n    for (MultiHostInjector injector : allInjectors) {\n      for (Class<? extends PsiElement> place : injector.elementsToInjectIn()) {\n        LOG.assertTrue(place != null, injector);\n        MultiHostInjector[] existing = injectors.get(place);\n        injectors.put(place, existing == null ? new MultiHostInjector[]{injector} : ArrayUtil.append(existing, injector));\n      }\n    }\n\n    ClassMapCachingNulls<MultiHostInjector> result = new ClassMapCachingNulls<>(injectors, new MultiHostInjector[0]);\n    cachedInjectors = result;\n    return result;\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processInPlaceInjectorsFor(@NotNull PsiElement element, @NotNull InjProcessor processor) {\n    MultiHostInjector[] infos = getInjectorMap().get(element.getClass());\n    if (infos != null) {\n      final boolean dumb = myDumbService.isDumb();\n      for (MultiHostInjector injector : infos) {\n        if (dumb && !DumbService.isDumbAware(injector)) {\n          continue;\n        }\n\n        if (!processor.process(element, injector)) return;\n      }\n    }\n  }","id":59466,"modified_method":"void processInPlaceInjectorsFor(@NotNull PsiElement element, @NotNull InjProcessor processor) {\n    MultiHostInjector[] infos = getInjectorMap().get(element.getClass());\n    if (infos != null) {\n      final boolean dumb = myDumbService.isDumb();\n      for (MultiHostInjector injector : infos) {\n        if (dumb && !DumbService.isDumbAware(injector)) {\n          continue;\n        }\n\n        if (!processor.process(element, injector)) return;\n      }\n    }\n  }","commit_id":"6b3d352c515155e6ce11d5d8ebe3c16ef6f6b9ee","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n         * Get free space in bytes of the drive where case dir resides\n         *\n         * @return free space in bytes\n         */\n        private long getFreeSpace() throws SecurityException {\n            return root.getFreeSpace();\n        }","id":59467,"modified_method":"/**\n         * Get free space in bytes of the drive where case dir resides, or -1 if\n         * unknown\n         *\n         * @return free space in bytes\n         */\n        private long getFreeSpace() throws SecurityException {\n            final long freeSpace = root.getFreeSpace();\n\n            if (freeSpace == 0) {\n                //check if network drive, some network filesystems always return 0\n                final String monitoredPath = root.getAbsolutePath();\n                if (monitoredPath.startsWith(\"\\\\\\\\\") || monitoredPath.startsWith(\"//\")) {\n                    return DISK_FREE_SPACE_UNKNOWN;\n\n                }\n            }\n\n            return freeSpace;\n\n        }","commit_id":"3f1b81a4c35940fb47dd91e3d193a0342fc3e3a1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Get free space in bytes of the drive where case dir resides\n     *\n     * @return free space in bytes or -1 if could not be determined.\n     */\n    long getFreeSpace() {\n        try {\n            return monitor.getFreeSpace();\n        } catch (SecurityException e) {\n            logger.log(Level.WARNING, \"Error checking for free disk space on ingest data drive\", e);\n            return -1;\n        }\n    }","id":59468,"modified_method":"/**\n     * Get free space in bytes of the drive where case dir resides\n     *\n     * @return free space in bytes or -1 if could not be determined.\n     */\n    long getFreeSpace() {\n        try {\n            return monitor.getFreeSpace();\n        } catch (SecurityException e) {\n            logger.log(Level.WARNING, \"Error checking for free disk space on ingest data drive\", e);\n            return DISK_FREE_SPACE_UNKNOWN;\n        }\n    }","commit_id":"3f1b81a4c35940fb47dd91e3d193a0342fc3e3a1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n         * check disk space and see if enough to process/continue ingest\n         *\n         * @return true if OK, false otherwise\n         */\n        private boolean checkDiskSpace() {\n            long freeSpace;\n            try {\n                freeSpace = getFreeSpace();\n            } catch (SecurityException e) {\n                logger.log(Level.WARNING, \"Unable to check for free disk space (permission issue)\", e);\n                return true; //OK\n            }\n            //logger.log(Level.INFO, \"Checking free disk apce: \" + freeSpace + \" need: \" + Long.toString(MIN_FREE_DISK_SPACE));\n            return freeSpace > MIN_FREE_DISK_SPACE;\n        }","id":59469,"modified_method":"/**\n         * check disk space and see if enough to process/continue ingest\n         *\n         * @return true if OK, false otherwise\n         */\n        private boolean checkDiskSpace() {\n            long freeSpace;\n            try {\n                freeSpace = getFreeSpace();\n            } catch (SecurityException e) {\n                logger.log(Level.WARNING, \"Unable to check for free disk space (permission issue)\", e);\n                return true; //OK\n            }\n\n            if (freeSpace == DISK_FREE_SPACE_UNKNOWN) {\n                return true;\n            } else {\n                //logger.log(Level.INFO, \"Checking free disk apce: \" + freeSpace + \" need: \" + Long.toString(MIN_FREE_DISK_SPACE));\n                return freeSpace > MIN_FREE_DISK_SPACE;\n            }\n        }","commit_id":"3f1b81a4c35940fb47dd91e3d193a0342fc3e3a1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Unpack the file to local folder and return a list of derived files\n     *\n     * @param pipelineContext current ingest context\n     * @param archiveFile file to unpack\n     * @return list of unpacked derived files\n     */\n    private List<AbstractFile> unpack(AbstractFile archiveFile) {\n        List<AbstractFile> unpackedFiles = Collections.<AbstractFile>emptyList();\n\n        //recursion depth check for zip bomb\n        final long archiveId = archiveFile.getId();\n        ArchiveDepthCountTree.Archive parentAr = archiveDepthCountTree.findArchive(archiveId);\n        if (parentAr == null) {\n            parentAr = archiveDepthCountTree.addArchive(null, archiveId);\n        } else if (parentAr.getDepth() == MAX_DEPTH) {\n            String msg = \"Possible ZIP bomb detected: \" + archiveFile.getName();\n            String details = \"The archive is \" + parentAr.getDepth()\n                    + \" levels deep, skipping processing of this archive and its contents \";\n            //MessageNotifyUtil.Notify.error(msg, details);\n            services.postMessage(IngestMessage.createWarningMessage(++messageID, instance, msg, details));\n            return unpackedFiles;\n        }\n\n        boolean hasEncrypted = false;\n        boolean fullEncryption = true;\n\n        ISevenZipInArchive inArchive = null;\n        SevenZipContentReadStream stream = null;\n\n        final ProgressHandle progress = ProgressHandleFactory.createHandle(MODULE_NAME);\n        int processedItems = 0;\n\n        String compressMethod = null;\n        try {\n            stream = new SevenZipContentReadStream(new ReadContentInputStream(archiveFile));\n            inArchive = SevenZip.openInArchive(null, // autodetect archive type\n                    stream);\n\n            int numItems = inArchive.getNumberOfItems();\n            logger.log(Level.INFO, \"Count of items in archive: \" + archiveFile.getName() + \": \"\n                    + numItems);\n            progress.start(numItems);\n\n            final ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();\n\n            //setup the archive local root folder\n            final String localRootPath = getLocalRootRelPath(archiveFile);\n            final String localRootAbsPath = getLocalRootAbsPath(localRootPath);\n            final File localRoot = new File(localRootAbsPath);\n            if (!localRoot.exists()) {\n                try {\n                    localRoot.mkdirs();\n                } catch (SecurityException e) {\n                    logger.log(Level.SEVERE, \"Error setting up output path for archive root: \" + localRootAbsPath);\n                    //bail\n                    return unpackedFiles;\n                }\n            }\n\n            //initialize tree hierarchy to keep track of unpacked file structure\n            UnpackedTree uTree = new UnpackedTree(unpackDir + \"/\" + localRootPath, archiveFile, fileManager);\n\n            long freeDiskSpace = services.getFreeDiskSpace();\n\n            //unpack and process every item in archive\n            int itemNumber = 0;\n            for (ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()) {\n                String extractedPath = item.getPath();\n                if (extractedPath == null || extractedPath.isEmpty() ) {\n                    //some formats (.tar.gz) may not be handled correctly -- file in archive has no name/path\n                    //handle this for .tar.gz and tgz but assuming the child is tar,\n                    //otherwise, unpack using itemNumber as name\n                    \n                    //TODO this should really be signature based, not extension based\n                    String archName = archiveFile.getName();\n                    int dotI = archName.lastIndexOf(\".\");\n                    String useName = null;\n                    if (dotI != -1 ) {\n                        String base = archName.substring(0, dotI);\n                        String ext = archName.substring(dotI);\n                        if (ext.equals(\".gz\") ) {\n                            useName = base;\n                        }\n                        else if (ext.equals(\".tgz\")) {\n                            useName = base + \".tar\";\n                        }\n                    }\n                    \n                    if (useName == null) {\n                        extractedPath = \"/\" + archName + \"/\" + Integer.toString(itemNumber);\n                    }\n                    else {\n                        extractedPath = \"/\" + useName;\n                    }\n                    \n                    String msg = \"Unknown item path in archive: \" + archiveFile.getName() + \", will use: \" + extractedPath;\n                    logger.log(Level.WARNING, msg);\n                    \n                }\n                ++itemNumber;\n                logger.log(Level.INFO, \"Extracted item path: \" + extractedPath);\n\n                //check if possible zip bomb\n                if (isZipBombArchiveItemCheck(archiveFile.getName(), item)) {\n                    continue; //skip the item\n                }\n\n                //find this node in the hierarchy, create if needed\n                UnpackedTree.Data uNode = uTree.find(extractedPath);\n\n                String fileName = uNode.getFileName();\n\n                //update progress bar\n                progress.progress(archiveFile.getName() + \": \" + fileName, processedItems);\n\n                if (compressMethod == null) {\n                    compressMethod = item.getMethod();\n                }\n\n                final boolean isEncrypted = item.isEncrypted();\n                final boolean isDir = item.isFolder();\n\n                if (isEncrypted) {\n                    logger.log(Level.WARNING, \"Skipping encrypted file in archive: \" + extractedPath);\n                    hasEncrypted = true;\n                    continue;\n                } else {\n                    fullEncryption = false;\n                }\n\n                final long size = item.getSize();\n\n                //check if unpacking this file will result in out of disk space\n                //this is additional to zip bomb prevention mechanism\n                if (freeDiskSpace != -1 && size > 0) { //if known free space and file not empty\n                    long newDiskSpace = freeDiskSpace - size;\n                    if (newDiskSpace < MIN_FREE_DISK_SPACE) {\n                        String msg = \"Not enough disk space to unpack archive item: \" + archiveFile.getName() + \", \" + fileName;\n                        String details = \"The archive item is too large to unpack, skipping unpacking this item. \";\n                        //MessageNotifyUtil.Notify.error(msg, details);\n                        services.postMessage(IngestMessage.createErrorMessage(++messageID, instance, msg, details));\n                        logger.log(Level.INFO, \"Skipping archive item due not sufficient disk space for this item: \" + archiveFile.getName() + \", \" + fileName);\n                        continue; //skip this file\n                    } else {\n                        //update est. disk space during this archive, so we don't need to poll for every file extracted\n                        freeDiskSpace = newDiskSpace;\n                    }\n                }\n\n                final String localFileRelPath = localRootPath + File.separator + extractedPath;\n                //final String localRelPath = unpackDir + File.separator + localFileRelPath;\n                final String localAbsPath = unpackDirPath + File.separator + localFileRelPath;\n\n                //create local dirs and empty files before extracted\n                File localFile = new java.io.File(localAbsPath);\n                //cannot rely on files in top-bottom order\n                if (!localFile.exists()) {\n                    try {\n                        if (isDir) {\n                            localFile.mkdirs();\n                        } else {\n                            localFile.getParentFile().mkdirs();\n                            try {\n                                localFile.createNewFile();\n                            } catch (IOException ex) {\n                                logger.log(Level.SEVERE, \"Error creating extracted file: \" + localFile.getAbsolutePath(), ex);\n                            }\n                        }\n                    } catch (SecurityException e) {\n                        logger.log(Level.SEVERE, \"Error setting up output path for unpacked file: \" + extractedPath);\n                        //TODO consider bail out / msg to the user\n                    }\n                }\n\n                final Date createTime = item.getCreationTime();\n                final Date accessTime = item.getLastAccessTime();\n                final Date writeTime = item.getLastWriteTime();\n                final long createtime = createTime == null ? 0L : createTime.getTime() / 1000;\n                final long modtime = writeTime == null ? 0L : writeTime.getTime() / 1000;\n                final long accesstime = accessTime == null ? 0L : accessTime.getTime() / 1000;\n\n                //record derived data in unode, to be traversed later after unpacking the archive\n                uNode.addDerivedInfo(size, !isDir,\n                        0L, createtime, accesstime, modtime);\n\n                //unpack locally if a file\n                if (!isDir) {\n                    UnpackStream unpackStream = null;\n                    try {\n                        unpackStream = new UnpackStream(localAbsPath);\n                        item.extractSlow(unpackStream);\n                    } catch (Exception e) {\n                        //could be something unexpected with this file, move on\n                        logger.log(Level.WARNING, \"Could not extract file from archive: \" + localAbsPath, e);\n                    } finally {\n                        if (unpackStream != null) {\n                            unpackStream.close();\n                        }\n                    }\n                }\n\n                //update units for progress bar\n                ++processedItems;\n            } //for every item in archive\n\n            try {\n                uTree.createDerivedFiles();\n                unpackedFiles = uTree.getAllFileObjects();\n\n                //check if children are archives, update archive depth tracking\n                for (AbstractFile unpackedFile : unpackedFiles) {\n                    if (isSupported(unpackedFile)) {\n                        archiveDepthCountTree.addArchive(parentAr, unpackedFile.getId());\n                    }\n                }\n\n            } catch (TskCoreException e) {\n                logger.log(Level.SEVERE, \"Error populating complete derived file hierarchy from the unpacked dir structure\");\n                //TODO decide if anything to cleanup, for now bailing\n            }\n\n        } catch (SevenZipException ex) {\n            logger.log(Level.SEVERE, \"Error unpacking file: \" + archiveFile, ex);\n            //inbox message\n            String msg = \"Error unpacking file: \" + archiveFile.getName();\n            String details = msg + \". \" + ex.getMessage();\n            services.postMessage(IngestMessage.createErrorMessage(++messageID, instance, msg, details));\n        } finally {\n            if (inArchive != null) {\n                try {\n                    inArchive.close();\n                } catch (SevenZipException e) {\n                    logger.log(Level.SEVERE, \"Error closing archive: \" + archiveFile, e);\n                }\n            }\n\n            if (stream != null) {\n                try {\n                    stream.close();\n                } catch (IOException ex) {\n                    logger.log(Level.SEVERE, \"Error closing stream after unpacking archive: \" + archiveFile, ex);\n                }\n            }\n\n            //close progress bar\n            progress.finish();\n        }\n\n        //create artifact and send user message\n        if (hasEncrypted) {\n            String encryptionType = fullEncryption ? ENCRYPTION_FULL : ENCRYPTION_FILE_LEVEL;\n            try {\n                BlackboardArtifact generalInfo = archiveFile.newArtifact(ARTIFACT_TYPE.TSK_GEN_INFO);\n                generalInfo.addAttribute(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_ENCRYPTION_DETECTED.getTypeID(),\n                        MODULE_NAME, encryptionType));\n            } catch (TskCoreException ex) {\n                logger.log(Level.SEVERE, \"Error creating blackboard artifact for encryption detected for file: \" + archiveFile, ex);\n            }\n\n            String msg = \"Encrypted files in archive detected. \";\n            String details = \"Some files in archive: \" + archiveFile.getName() + \" are encrypted. \"\n                    + MODULE_NAME + \" extractor was unable to extract all files from this archive.\";\n            // MessageNotifyUtil.Notify.info(msg, details);\n\n            services.postMessage(IngestMessage.createWarningMessage(++messageID, instance, msg, details));\n        }\n\n\n        return unpackedFiles;\n    }","id":59470,"modified_method":"/**\n     * Unpack the file to local folder and return a list of derived files\n     *\n     * @param pipelineContext current ingest context\n     * @param archiveFile file to unpack\n     * @return list of unpacked derived files\n     */\n    private List<AbstractFile> unpack(AbstractFile archiveFile) {\n        List<AbstractFile> unpackedFiles = Collections.<AbstractFile>emptyList();\n\n        //recursion depth check for zip bomb\n        final long archiveId = archiveFile.getId();\n        ArchiveDepthCountTree.Archive parentAr = archiveDepthCountTree.findArchive(archiveId);\n        if (parentAr == null) {\n            parentAr = archiveDepthCountTree.addArchive(null, archiveId);\n        } else if (parentAr.getDepth() == MAX_DEPTH) {\n            String msg = \"Possible ZIP bomb detected: \" + archiveFile.getName();\n            String details = \"The archive is \" + parentAr.getDepth()\n                    + \" levels deep, skipping processing of this archive and its contents \";\n            //MessageNotifyUtil.Notify.error(msg, details);\n            services.postMessage(IngestMessage.createWarningMessage(++messageID, instance, msg, details));\n            return unpackedFiles;\n        }\n\n        boolean hasEncrypted = false;\n        boolean fullEncryption = true;\n\n        ISevenZipInArchive inArchive = null;\n        SevenZipContentReadStream stream = null;\n\n        final ProgressHandle progress = ProgressHandleFactory.createHandle(MODULE_NAME);\n        int processedItems = 0;\n\n        String compressMethod = null;\n        try {\n            stream = new SevenZipContentReadStream(new ReadContentInputStream(archiveFile));\n            inArchive = SevenZip.openInArchive(null, // autodetect archive type\n                    stream);\n\n            int numItems = inArchive.getNumberOfItems();\n            logger.log(Level.INFO, \"Count of items in archive: \" + archiveFile.getName() + \": \"\n                    + numItems);\n            progress.start(numItems);\n\n            final ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();\n\n            //setup the archive local root folder\n            final String localRootPath = getLocalRootRelPath(archiveFile);\n            final String localRootAbsPath = getLocalRootAbsPath(localRootPath);\n            final File localRoot = new File(localRootAbsPath);\n            if (!localRoot.exists()) {\n                try {\n                    localRoot.mkdirs();\n                } catch (SecurityException e) {\n                    logger.log(Level.SEVERE, \"Error setting up output path for archive root: \" + localRootAbsPath);\n                    //bail\n                    return unpackedFiles;\n                }\n            }\n\n            //initialize tree hierarchy to keep track of unpacked file structure\n            UnpackedTree uTree = new UnpackedTree(unpackDir + \"/\" + localRootPath, archiveFile, fileManager);\n\n            long freeDiskSpace = services.getFreeDiskSpace();\n\n            //unpack and process every item in archive\n            int itemNumber = 0;\n            for (ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()) {\n                String extractedPath = item.getPath();\n                if (extractedPath == null || extractedPath.isEmpty() ) {\n                    //some formats (.tar.gz) may not be handled correctly -- file in archive has no name/path\n                    //handle this for .tar.gz and tgz but assuming the child is tar,\n                    //otherwise, unpack using itemNumber as name\n                    \n                    //TODO this should really be signature based, not extension based\n                    String archName = archiveFile.getName();\n                    int dotI = archName.lastIndexOf(\".\");\n                    String useName = null;\n                    if (dotI != -1 ) {\n                        String base = archName.substring(0, dotI);\n                        String ext = archName.substring(dotI);\n                        if (ext.equals(\".gz\") ) {\n                            useName = base;\n                        }\n                        else if (ext.equals(\".tgz\")) {\n                            useName = base + \".tar\";\n                        }\n                    }\n                    \n                    if (useName == null) {\n                        extractedPath = \"/\" + archName + \"/\" + Integer.toString(itemNumber);\n                    }\n                    else {\n                        extractedPath = \"/\" + useName;\n                    }\n                    \n                    String msg = \"Unknown item path in archive: \" + archiveFile.getName() + \", will use: \" + extractedPath;\n                    logger.log(Level.WARNING, msg);\n                    \n                }\n                ++itemNumber;\n                logger.log(Level.INFO, \"Extracted item path: \" + extractedPath);\n\n                //check if possible zip bomb\n                if (isZipBombArchiveItemCheck(archiveFile.getName(), item)) {\n                    continue; //skip the item\n                }\n\n                //find this node in the hierarchy, create if needed\n                UnpackedTree.Data uNode = uTree.find(extractedPath);\n\n                String fileName = uNode.getFileName();\n\n                //update progress bar\n                progress.progress(archiveFile.getName() + \": \" + fileName, processedItems);\n\n                if (compressMethod == null) {\n                    compressMethod = item.getMethod();\n                }\n\n                final boolean isEncrypted = item.isEncrypted();\n                final boolean isDir = item.isFolder();\n\n                if (isEncrypted) {\n                    logger.log(Level.WARNING, \"Skipping encrypted file in archive: \" + extractedPath);\n                    hasEncrypted = true;\n                    continue;\n                } else {\n                    fullEncryption = false;\n                }\n\n                final long size = item.getSize();\n\n                //check if unpacking this file will result in out of disk space\n                //this is additional to zip bomb prevention mechanism\n                if (freeDiskSpace != IngestMonitor.DISK_FREE_SPACE_UNKNOWN && size > 0) { //if known free space and file not empty\n                    long newDiskSpace = freeDiskSpace - size;\n                    if (newDiskSpace < MIN_FREE_DISK_SPACE) {\n                        String msg = \"Not enough disk space to unpack archive item: \" + archiveFile.getName() + \", \" + fileName;\n                        String details = \"The archive item is too large to unpack, skipping unpacking this item. \";\n                        //MessageNotifyUtil.Notify.error(msg, details);\n                        services.postMessage(IngestMessage.createErrorMessage(++messageID, instance, msg, details));\n                        logger.log(Level.INFO, \"Skipping archive item due not sufficient disk space for this item: \" + archiveFile.getName() + \", \" + fileName);\n                        continue; //skip this file\n                    } else {\n                        //update est. disk space during this archive, so we don't need to poll for every file extracted\n                        freeDiskSpace = newDiskSpace;\n                    }\n                }\n\n                final String localFileRelPath = localRootPath + File.separator + extractedPath;\n                //final String localRelPath = unpackDir + File.separator + localFileRelPath;\n                final String localAbsPath = unpackDirPath + File.separator + localFileRelPath;\n\n                //create local dirs and empty files before extracted\n                File localFile = new java.io.File(localAbsPath);\n                //cannot rely on files in top-bottom order\n                if (!localFile.exists()) {\n                    try {\n                        if (isDir) {\n                            localFile.mkdirs();\n                        } else {\n                            localFile.getParentFile().mkdirs();\n                            try {\n                                localFile.createNewFile();\n                            } catch (IOException ex) {\n                                logger.log(Level.SEVERE, \"Error creating extracted file: \" + localFile.getAbsolutePath(), ex);\n                            }\n                        }\n                    } catch (SecurityException e) {\n                        logger.log(Level.SEVERE, \"Error setting up output path for unpacked file: \" + extractedPath);\n                        //TODO consider bail out / msg to the user\n                    }\n                }\n\n                final Date createTime = item.getCreationTime();\n                final Date accessTime = item.getLastAccessTime();\n                final Date writeTime = item.getLastWriteTime();\n                final long createtime = createTime == null ? 0L : createTime.getTime() / 1000;\n                final long modtime = writeTime == null ? 0L : writeTime.getTime() / 1000;\n                final long accesstime = accessTime == null ? 0L : accessTime.getTime() / 1000;\n\n                //record derived data in unode, to be traversed later after unpacking the archive\n                uNode.addDerivedInfo(size, !isDir,\n                        0L, createtime, accesstime, modtime);\n\n                //unpack locally if a file\n                if (!isDir) {\n                    UnpackStream unpackStream = null;\n                    try {\n                        unpackStream = new UnpackStream(localAbsPath);\n                        item.extractSlow(unpackStream);\n                    } catch (Exception e) {\n                        //could be something unexpected with this file, move on\n                        logger.log(Level.WARNING, \"Could not extract file from archive: \" + localAbsPath, e);\n                    } finally {\n                        if (unpackStream != null) {\n                            unpackStream.close();\n                        }\n                    }\n                }\n\n                //update units for progress bar\n                ++processedItems;\n            } //for every item in archive\n\n            try {\n                uTree.createDerivedFiles();\n                unpackedFiles = uTree.getAllFileObjects();\n\n                //check if children are archives, update archive depth tracking\n                for (AbstractFile unpackedFile : unpackedFiles) {\n                    if (isSupported(unpackedFile)) {\n                        archiveDepthCountTree.addArchive(parentAr, unpackedFile.getId());\n                    }\n                }\n\n            } catch (TskCoreException e) {\n                logger.log(Level.SEVERE, \"Error populating complete derived file hierarchy from the unpacked dir structure\");\n                //TODO decide if anything to cleanup, for now bailing\n            }\n\n        } catch (SevenZipException ex) {\n            logger.log(Level.SEVERE, \"Error unpacking file: \" + archiveFile, ex);\n            //inbox message\n            String msg = \"Error unpacking file: \" + archiveFile.getName();\n            String details = msg + \". \" + ex.getMessage();\n            services.postMessage(IngestMessage.createErrorMessage(++messageID, instance, msg, details));\n        } finally {\n            if (inArchive != null) {\n                try {\n                    inArchive.close();\n                } catch (SevenZipException e) {\n                    logger.log(Level.SEVERE, \"Error closing archive: \" + archiveFile, e);\n                }\n            }\n\n            if (stream != null) {\n                try {\n                    stream.close();\n                } catch (IOException ex) {\n                    logger.log(Level.SEVERE, \"Error closing stream after unpacking archive: \" + archiveFile, ex);\n                }\n            }\n\n            //close progress bar\n            progress.finish();\n        }\n\n        //create artifact and send user message\n        if (hasEncrypted) {\n            String encryptionType = fullEncryption ? ENCRYPTION_FULL : ENCRYPTION_FILE_LEVEL;\n            try {\n                BlackboardArtifact generalInfo = archiveFile.newArtifact(ARTIFACT_TYPE.TSK_GEN_INFO);\n                generalInfo.addAttribute(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_ENCRYPTION_DETECTED.getTypeID(),\n                        MODULE_NAME, encryptionType));\n            } catch (TskCoreException ex) {\n                logger.log(Level.SEVERE, \"Error creating blackboard artifact for encryption detected for file: \" + archiveFile, ex);\n            }\n\n            String msg = \"Encrypted files in archive detected. \";\n            String details = \"Some files in archive: \" + archiveFile.getName() + \" are encrypted. \"\n                    + MODULE_NAME + \" extractor was unable to extract all files from this archive.\";\n            // MessageNotifyUtil.Notify.info(msg, details);\n\n            services.postMessage(IngestMessage.createWarningMessage(++messageID, instance, msg, details));\n        }\n\n\n        return unpackedFiles;\n    }","commit_id":"3f1b81a4c35940fb47dd91e3d193a0342fc3e3a1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        return getFreeSpace(c);\n    }","id":59471,"modified_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        DiskSpace size = getFreeSpace(c);\n        if(size!=null && !size.moreThanGB() && markOffline(c,size))\n            LOGGER.warning(Messages.DiskSpaceMonitor_MarkedOffline(c.getName()));\n        return size;\n    }","commit_id":"11f60f6f0e74ca39a8c839246a6d94078b0c23d3","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(triggered) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","id":59472,"modified_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(space<1024) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","commit_id":"11f60f6f0e74ca39a8c839246a6d94078b0c23d3","url":"https://github.com/kohsuke/hudson"},{"original_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n            // Get the minimum amount of space to check for, with a default of 1GB\n            long freeSpaceTheshold = Long.getLong(\n            \t\tHudsonHomeDiskUsageChecker.class.getName() + \".freeSpaceTheshold\",\n            \t\tLong.valueOf(1073741824L));\n\n            // if it's more than 90% full and less than the minimum, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free<freeSpaceTheshold);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n            return;\n        }\n    }","id":59473,"modified_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n            // if it's more than 90% full and less than 1GB, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free<1024L*1024*1024);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n            return;\n        }\n    }","commit_id":"11f60f6f0e74ca39a8c839246a6d94078b0c23d3","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Override\n    public String getColumnCaption() {\n        // Hide this column from non-admins\n        return Hudson.getInstance().hasPermission(Hudson.ADMINISTER) ? super.getColumnCaption() : null;\n    }","id":59474,"modified_method":"@DataBoundConstructor\n\tpublic DiskSpaceMonitor(long freeSpaceTheshold) {\n\t\tthis.freeSpaceTheshold = freeSpaceTheshold;\n\t}","commit_id":"a146fd1105575f47906ccd2cf5671360e582ba42","url":"https://github.com/kohsuke/hudson"},{"original_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        DiskSpace size = getFreeSpace(c);\n        if(size!=null && !size.moreThanGB() && markOffline(c,size))\n            LOGGER.warning(Messages.DiskSpaceMonitor_MarkedOffline(c.getName()));\n        return size;\n    }","id":59475,"modified_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        return getFreeSpace(c);\n    }","commit_id":"a146fd1105575f47906ccd2cf5671360e582ba42","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(space<1024) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","id":59476,"modified_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(triggered) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","commit_id":"a146fd1105575f47906ccd2cf5671360e582ba42","url":"https://github.com/kohsuke/hudson"},{"original_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n            // if it's more than 90% full and less than 1GB, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free<1024L*1024*1024);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n            return;\n        }\n    }","id":59477,"modified_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n            // Get the minimum amount of space to check for, with a default of 1GB\n            long freeSpaceTheshold = Long.getLong(\n            \t\tHudsonHomeDiskUsageChecker.class.getName() + \".freeSpaceTheshold\",\n            \t\tLong.valueOf(1073741824L));\n\n            // if it's more than 90% full and less than the minimum, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free<freeSpaceTheshold);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n            return;\n        }\n    }","commit_id":"a146fd1105575f47906ccd2cf5671360e582ba42","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Override\n    public String getColumnCaption() {\n        // Hide this column from non-admins\n        return Hudson.getInstance().hasPermission(Hudson.ADMINISTER) ? super.getColumnCaption() : null;\n    }","id":59478,"modified_method":"@DataBoundConstructor\n\tpublic TemporarySpaceMonitor(long freeSpaceTheshold) {\n\t\tthis.freeSpaceTheshold = freeSpaceTheshold;\n\t}","commit_id":"a146fd1105575f47906ccd2cf5671360e582ba42","url":"https://github.com/kohsuke/hudson"},{"original_method":"public DiskSpace getFreeSpace(Computer c) {\n        return DESCRIPTOR.get(c);\n    }","id":59479,"modified_method":"@DataBoundConstructor\n\tpublic DiskSpaceMonitor(String freeSpaceThreshold) throws ParseException {\n        super(freeSpaceThreshold);\n\t}","commit_id":"66acb4d73927b36bfaef5a6e99028f1633f77920","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(space<1024) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","id":59480,"modified_method":"/**\n         * Returns the HTML representation of the space.\n         */\n        public String toHtml() {\n            long space = size;\n            space/=1024L;   // convert to KB\n            space/=1024L;   // convert to MB\n            if(triggered) {\n                // less than a GB\n                return Util.wrapToErrorSpan(new BigDecimal(space).scaleByPowerOfTen(-3).toPlainString()+\"GB\");\n            }\n\n            return space/1024+\"GB\";\n        }","commit_id":"66acb4d73927b36bfaef5a6e99028f1633f77920","url":"https://github.com/kohsuke/hudson"},{"original_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        DiskSpace size = getFreeSpace(c);\n        if(size!=null && !size.moreThanGB() && markOffline(c,size))\n            LOGGER.warning(Messages.DiskSpaceMonitor_MarkedOffline(c.getName()));\n        return size;\n    }","id":59481,"modified_method":"protected DiskSpace monitor(Computer c) throws IOException, InterruptedException {\n        return getFreeSpace(c);\n    }","commit_id":"66acb4d73927b36bfaef5a6e99028f1633f77920","url":"https://github.com/kohsuke/hudson"},{"original_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n            // if it's more than 90% full and less than 1GB, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free<1024L*1024*1024);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n            return;\n        }\n    }","id":59482,"modified_method":"@IgnoreJRERequirement\n    protected void doRun() {\n        try {\n            long free = Hudson.getInstance().getRootDir().getUsableSpace();\n            long total = Hudson.getInstance().getRootDir().getTotalSpace();\n            if(free<=0 || total<=0) {\n                // information unavailable. pointless to try.\n                LOGGER.info(\"HUDSON_HOME disk usage information isn't available. aborting to monitor\");\n                cancel();\n                return;\n            }\n\n            LOGGER.fine(\"Monitoring disk usage of HUDSON_HOME. total=\"+total+\" free=\"+free);\n\n\n            // if it's more than 90% full and less than the minimum, activate\n            // it's AND and not OR so that small Hudson home won't get a warning,\n            // and similarly, if you have a 1TB disk, you don't get a warning when you still have 100GB to go.\n            HudsonHomeDiskUsageMonitor.get().activated = (total/free>10 && free< FREE_SPACE_THRESHOLD);\n        } catch (LinkageError _) {\n            // pre Mustang\n            LOGGER.info(\"Not on JDK6. Cannot monitor HUDSON_HOME disk usage\");\n            cancel();\n        }\n    }","commit_id":"66acb4d73927b36bfaef5a6e99028f1633f77920","url":"https://github.com/kohsuke/hudson"},{"original_method":"public DiskSpace getFreeSpace(Computer c) {\n        return DESCRIPTOR.get(c);\n    }","id":59483,"modified_method":"@DataBoundConstructor\n\tpublic TemporarySpaceMonitor(String freeSpaceThreshold) throws ParseException {\n        super(freeSpaceThreshold);\n\t}","commit_id":"66acb4d73927b36bfaef5a6e99028f1633f77920","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Configuration\n    public Option[] config() {\n        return options(\n            bootDelegationPackage(\"sun.*\"),\n            cleanCaches(),\n            CoreOptions.systemProperty(\"logback.configurationFile\").value(\"file:src/test/resources/logback.xml\"),\n//            CoreOptions.vmOption(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8787\"),\n\n            mavenBundle(\"org.slf4j\", \"slf4j-api\").version(\"1.6.5\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"ch.qos.logback\", \"logback-core\").version(\"1.0.6\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"ch.qos.logback\", \"logback-classic\").version(\"1.0.6\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.exam.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.exam.inject.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.extender.service.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.base.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.core.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.extender.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.lifecycle.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.framework.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.apache.geronimo.specs.atinject.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n\n            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN).versionAsInProject().startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_FILESTORE).versionAsInProject().startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            \n            junitBundles(),\n            frameworkStartLevel(START_LEVEL_TEST_BUNDLE),\n            felix());\n    }","id":59484,"modified_method":"@Configuration\n    public Option[] config()\n    {\n        return options(\n            bootDelegationPackage(\"sun.*\"),\n            cleanCaches(),\n            CoreOptions.systemProperty(\"logback.configurationFile\").value(\"file:src/test/resources/logback.xml\"), //\n//            CoreOptions.vmOption(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8787\"),\n\n            mavenBundle(\"org.slf4j\", \"slf4j-api\").version(\"1.6.5\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"ch.qos.logback\", \"logback-core\").version(\"1.0.6\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"ch.qos.logback\", \"logback-classic\").version(\"1.0.6\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.exam.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.exam.inject.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.extender.service.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.base.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.core.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.extender.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.lifecycle.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.ops4j.pax.swissbox.framework.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            url(\"link:classpath:META-INF/links/org.apache.geronimo.specs.atinject.link\").startLevel(START_LEVEL_SYSTEM_BUNDLES),\n\n            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN).versionAsInProject().startLevel(START_LEVEL_SYSTEM_BUNDLES),\n            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_FILESTORE).versionAsInProject().noStart(),\n            mavenBundle(\"org.apache.felix\", ORG_APACHE_FELIX_USERADMIN_MONGODBSTORE).versionAsInProject().noStart(), mavenBundle(\"org.mongodb\", \"mongo-java-driver\").versionAsInProject().noStart(),\n\n            junitBundles(), frameworkStartLevel(START_LEVEL_TEST_BUNDLE), felix());\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n\t * Tests that initialization and closing of the repository store is\n\t * performed correctly.\n\t */\n\t@Test\n\tpublic void testStoreIsInitializedAndClosedProperlyOk() throws Exception {\n\t    UserAdmin ua = getUserAdmin();\n\t    \n\t    // Create two roles...\n\t    User user = (User) ua.createRole(\"user1\", Role.USER);\n\t    assertNotNull(user);\n\t    \n\t    Group group = (Group) ua.createRole(\"group1\", Role.GROUP);\n\t    assertNotNull(group);\n\t    \n\t    group.addMember(user);\n\t    group.addRequiredMember(ua.getRole(Role.USER_ANYONE));\n\n\t\t// Stop the file store; should persist the two roles...\n\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n\t\tassertNotNull(fileStoreBundle);\n\t\tfileStoreBundle.stop();\n\n\t\tThread.sleep(100); // Wait a little until the bundle is really stopped...\n\t\t\n\t\t// Retrieve the roles again; should both yield null due to the store not being available...\n\t\tuser = (User) ua.getRole(\"user1\");\n\t\tassertNull(user);\n\n\t\tgroup = (Group) ua.getRole(\"group1\");\n\t\tassertNull(group);\n\t\t\n\t\t// This will not succeed: no backend to store the user in...\n\t\tassertNull(ua.createRole(\"user2\", Role.USER));\n\n\t\tfileStoreBundle.start();\n\n\t\tawaitService(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n        \n        // Retrieve the roles again; should both yield valid values...\n        user = (User) ua.getRole(\"user1\");\n        assertNotNull(user);\n        \n        group = (Group) ua.getRole(\"group1\");\n        assertNotNull(group);\n\n        Role[] members = group.getMembers();\n        assertNotNull(members);\n        assertEquals(1, members.length);\n        assertEquals(\"user1\", members[0].getName());\n\n        members = group.getRequiredMembers();\n        assertNotNull(members);\n        assertEquals(1, members.length);\n        assertEquals(Role.USER_ANYONE, members[0].getName());\n        \n        user = (User) ua.getRole(\"user2\");\n        assertNull(user);\n\t}","id":59485,"modified_method":"/**\n     * Tests that initialization and closing of the repository store is\n     * performed correctly.\n     */\n    @Test\n    public void testStoreIsInitializedAndClosedProperlyOk() throws Exception\n    {\n        UserAdmin ua = getUserAdmin();\n        // Start the file store bundle...\n        Bundle fileStoreBundle = getFileStoreBundle();\n        fileStoreBundle.start();\n\n        // Create two roles...\n        User user = (User) ua.createRole(\"user1\", Role.USER);\n        assertNotNull(user);\n\n        Group group = (Group) ua.createRole(\"group1\", Role.GROUP);\n        assertNotNull(group);\n\n        group.addMember(user);\n        group.addRequiredMember(ua.getRole(Role.USER_ANYONE));\n\n        // Stop the file store; should persist the two roles...\n        fileStoreBundle.stop();\n\n        Thread.sleep(100); // Wait a little until the bundle is really stopped...\n\n        // Retrieve the roles again; should both yield null due to the store not being available...\n        user = (User) ua.getRole(\"user1\");\n        assertNull(user);\n\n        group = (Group) ua.getRole(\"group1\");\n        assertNull(group);\n\n        // This will not succeed: no backend to store the user in...\n        assertNull(ua.createRole(\"user2\", Role.USER));\n\n        fileStoreBundle.start();\n\n        awaitService(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n\n        // Retrieve the roles again; should both yield valid values...\n        user = (User) ua.getRole(\"user1\");\n        assertNotNull(user);\n\n        group = (Group) ua.getRole(\"group1\");\n        assertNotNull(group);\n\n        Role[] members = group.getMembers();\n        assertNotNull(members);\n        assertEquals(1, members.length);\n        assertEquals(\"user1\", members[0].getName());\n\n        members = group.getRequiredMembers();\n        assertNotNull(members);\n        assertEquals(1, members.length);\n        assertEquals(Role.USER_ANYONE, members[0].getName());\n\n        user = (User) ua.getRole(\"user2\");\n        assertNull(user);\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"@Override\n    public Role addRole(String roleName, int type) throws MongoException {\n        if (roleName == null) {\n            throw new IllegalArgumentException(\"Role cannot be null!\");\n        }\n        \n        DBCollection coll = getCollection();\n\n        Role role = getRole(roleName);\n        if (role != null) {\n            return null;\n        }\n\n        // Role does not exist; insert it...\n        DBObject data = m_helper.serialize(roleName, type);\n\n        WriteResult result = coll.insert(data);\n        \n        if (result.getLastError() != null) {\n            result.getLastError().throwOnError();\n        }\n\n        return role;\n    }","id":59486,"modified_method":"@Override\n    public Role addRole(String roleName, int type) throws MongoException {\n        if (roleName == null) {\n            throw new IllegalArgumentException(\"Role cannot be null!\");\n        }\n        \n        DBCollection coll = getCollection();\n\n        Role role = getRole(roleName);\n        if (role != null) {\n            return null;\n        }\n\n        // Role does not exist; insert it...\n        DBObject data = m_helper.serialize(roleName, type);\n\n        WriteResult result = coll.insert(data);\n        \n        if (result.getLastError() != null) {\n            result.getLastError().throwOnError();\n        }\n\n        // FELIX-4400: ensure we return the correct role...\n        return getRole(roleName);\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n     * Deserializes the given {@link DBObject} into the given {@link Dictionary}.\n     * \n     * @param dictionary the dictionary to fill;\n     * @param object the {@link DBObject} to deserialize.\n     */\n    private void deserializeDictionary(Dictionary dictionary, DBObject object) {\n        for (String key : object.keySet()) {\n            dictionary.put(KeyCodec.decode(key), object.get(key));\n        }\n    }","id":59487,"modified_method":"/**\n     * Deserializes the given {@link DBObject} into the given {@link Dictionary}.\n     * \n     * @param dictionary the dictionary to fill, cannot be <code>null<\/code>;\n     * @param object the {@link DBObject} to deserialize, can be <code>null<\/code>.\n     */\n    private void deserializeDictionary(Dictionary dictionary, DBObject object)\n    {\n        // FELIX-4399: MongoDB does return null for empty properties...\n        if (object != null)\n        {\n            for (String key : object.keySet())\n            {\n                dictionary.put(KeyCodec.decode(key), object.get(key));\n            }\n        }\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n     * Returns all roles mentioned in the given list.\n     * \n     * @param list the list with role names to convert.\n     * @return a list with {@link Role}s, never <code>null<\/code>.\n     */\n    private List<Role> getRoles(BasicDBList list) {\n        List<Role> result = new ArrayList<Role>();\n        for (int i = 0, size = list.size(); i < size; i++) {\n            final String memberName = (String) list.get(i);\n            result.add(findExistingMember(memberName));\n        }\n        return result;\n    }","id":59488,"modified_method":"/**\n     * Returns all roles mentioned in the given list.\n     * \n     * @param list the list with role names to convert, can be <code>null<\/code>.\n     * @return a list with {@link Role}s, never <code>null<\/code>.\n     */\n    private List<Role> getRoles(BasicDBList list)\n    {\n        List<Role> result = new ArrayList<Role>();\n        // FELIX-4399: MongoDB does return null for empty properties...\n        int size = (list == null) ? 0 : list.size();\n        for (int i = 0; i < size; i++)\n        {\n            final String memberName = (String) list.get(i);\n            result.add(findExistingMember(memberName));\n        }\n        return result;\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n\t * Tests that starting the file store <em>after<\/em> the user admin service\n\t * is started will cause it to be properly initialized.\n\t */\n\t@Test\n\tpublic void testFelix3735_StartStoreAfterUserAdminInitializesOk() throws Exception {\n\t\tfinal String userName = \"anotherTestUser\";\n\t\tfinal String groupName = \"anotherTestGroup\";\n\n\t\tUserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n\n\t\t// Fill the user admin with some data...\n\t\tUser testUser = (User) userAdmin.createRole(userName, Role.USER);\n\t\ttestUser.getProperties().put(\"key\", \"value\");\n\n\t\tGroup testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n\t\ttestGroup.addMember(testUser);\n\n\t\t// Stop the file store...\n\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n\t\tassertNotNull(fileStoreBundle);\n\t\tfileStoreBundle.stop();\n\n\t\tBundle userAdminBundle = findBundle(ORG_APACHE_FELIX_USERADMIN);\n\t\tassertNotNull(userAdminBundle);\n\t\tuserAdminBundle.stop();\n\n\t\t// Obtain user admin service again; shouldn't be available...\n\t\tuserAdmin = getService(UserAdmin.class.getName());\n\t\tassertNull(userAdmin);\n\n\t\tuserAdminBundle.start();\n\n\t\t// Obtain user admin service again; should be available now...\n\t\tuserAdmin = awaitService(UserAdmin.class.getName());\n\t\tassertNotNull(userAdmin);\n\n\t\t// Verify the user + group are gone (no store available)...\n\t\tassertNull(userAdmin.getRole(userName));\n\t\tassertNull(userAdmin.getRole(groupName));\n\n\t\t// Start the file store...\n\t\tfileStoreBundle.start();\n\n\t\t// Verify the user + group are gone (no store available)...\n\t\tUser readUser = (User) userAdmin.getRole(userName);\n\t\tassertNotNull(readUser);\n\t\tassertEquals(userName, readUser.getName());\n\t\tassertEquals(\"value\", readUser.getProperties().get(\"key\"));\n\n\t\tGroup readGroup = (Group) userAdmin.getRole(groupName);\n\t\tassertNotNull(readGroup);\n\t\tassertEquals(groupName, readGroup.getName());\n\t\tassertEquals(1, readGroup.getMembers().length);\n\t\tassertEquals(readUser, readGroup.getMembers()[0]);\n\t}","id":59489,"modified_method":"/**\n     * Tests that starting the file store <em>after<\/em> the user admin service\n     * is started will cause it to be properly initialized.\n     */\n    @Test\n    public void testFelix3735_StartStoreAfterUserAdminInitializesOk() throws Exception\n    {\n        final String userName = \"anotherTestUser\";\n        final String groupName = \"anotherTestGroup\";\n\n        UserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n        Bundle fileStoreBundle = getFileStoreBundle();\n        // Start a suitable storage service...\n        fileStoreBundle.start();\n\n        // Fill the user admin with some data...\n        User testUser = (User) userAdmin.createRole(userName, Role.USER);\n        testUser.getProperties().put(\"key\", \"value\");\n\n        Group testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n        testGroup.addMember(testUser);\n\n        // Stop the file store...\n        fileStoreBundle.stop();\n\n        Bundle userAdminBundle = findBundle(ORG_APACHE_FELIX_USERADMIN);\n        assertNotNull(userAdminBundle);\n        userAdminBundle.stop();\n\n        // Obtain user admin service again; shouldn't be available...\n        userAdmin = getService(UserAdmin.class.getName());\n        assertNull(userAdmin);\n\n        userAdminBundle.start();\n\n        // Obtain user admin service again; should be available now...\n        userAdmin = awaitService(UserAdmin.class.getName());\n        assertNotNull(userAdmin);\n\n        // Verify the user + group are gone (no store available)...\n        assertNull(userAdmin.getRole(userName));\n        assertNull(userAdmin.getRole(groupName));\n\n        // Start the file store...\n        fileStoreBundle.start();\n\n        // Verify the user + group are gone (no store available)...\n        User readUser = (User) userAdmin.getRole(userName);\n        assertNotNull(readUser);\n        assertEquals(userName, readUser.getName());\n        assertEquals(\"value\", readUser.getProperties().get(\"key\"));\n\n        Group readGroup = (Group) userAdmin.getRole(groupName);\n        assertNotNull(readGroup);\n        assertEquals(groupName, readGroup.getName());\n        assertEquals(1, readGroup.getMembers().length);\n        assertEquals(readUser, readGroup.getMembers()[0]);\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n\t * Tests that stopping a filled store and starting it again will cause it to\n\t * properly restore its state.\n\t */\n\t@Test\n\tpublic void testFelix3735_StopRunningStoreRetainsDataOk() throws Exception {\n\t\tfinal String userName = \"testUser\";\n\t\tfinal String groupName = \"testGroup\";\n\n\t\tUserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n\n\t\t// Fill the user admin with some data...\n\t\tUser testUser = (User) userAdmin.createRole(userName, Role.USER);\n\t\ttestUser.getProperties().put(\"key\", \"value\");\n\n\t\tGroup testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n\t\ttestGroup.addMember(testUser);\n\n\t\t// Stop the file store...\n\t\tBundle fileStoreBundle = findBundle(ORG_APACHE_FELIX_USERADMIN_FILESTORE);\n\t\tassertNotNull(fileStoreBundle);\n\t\tfileStoreBundle.stop();\n\n\t\t// retrieve the useradmin again...\n\t\tuserAdmin = awaitService(UserAdmin.class.getName());\n\n\t\t// Verify the user + group are gone (no store available)...\n\t\tassertNull(userAdmin.getRole(userName));\n\t\tassertNull(userAdmin.getRole(groupName));\n\n\t\t// Start the file store...\n\t\tfileStoreBundle.start();\n\n\t\t// Verify the user + group are gone (no store available)...\n\t\tUser readUser = (User) userAdmin.getRole(userName);\n\t\tassertNotNull(readUser);\n\t\tassertEquals(userName, readUser.getName());\n\t\tassertEquals(\"value\", readUser.getProperties().get(\"key\"));\n\n\t\tGroup readGroup = (Group) userAdmin.getRole(groupName);\n\t\tassertNotNull(readGroup);\n\t\tassertEquals(groupName, readGroup.getName());\n\t\tassertEquals(1, readGroup.getMembers().length);\n\t\tassertEquals(readUser, readGroup.getMembers()[0]);\n\t}","id":59490,"modified_method":"/**\n     * Tests that stopping a filled store and starting it again will cause it to\n     * properly restore its state.\n     */\n    @Test\n    public void testFelix3735_StopRunningStoreRetainsDataOk() throws Exception\n    {\n        final String userName = \"testUser\";\n        final String groupName = \"testGroup\";\n\n        UserAdmin userAdmin = awaitService(UserAdmin.class.getName());\n        Bundle fileStoreBundle = getFileStoreBundle();\n        // Start a suitable storage service...\n        fileStoreBundle.start();\n\n        // Fill the user admin with some data...\n        User testUser = (User) userAdmin.createRole(userName, Role.USER);\n        testUser.getProperties().put(\"key\", \"value\");\n\n        Group testGroup = (Group) userAdmin.createRole(groupName, Role.GROUP);\n        testGroup.addMember(testUser);\n\n        // Stop the file store...\n        fileStoreBundle.stop();\n\n        // retrieve the useradmin again...\n        userAdmin = awaitService(UserAdmin.class.getName());\n\n        // Verify the user + group are gone (no store available)...\n        assertNull(userAdmin.getRole(userName));\n        assertNull(userAdmin.getRole(groupName));\n\n        // Start the file store...\n        fileStoreBundle.start();\n\n        // Verify the user + group are gone (no store available)...\n        User readUser = (User) userAdmin.getRole(userName);\n        assertNotNull(readUser);\n        assertEquals(userName, readUser.getName());\n        assertEquals(\"value\", readUser.getProperties().get(\"key\"));\n\n        Group readGroup = (Group) userAdmin.getRole(groupName);\n        assertNotNull(readGroup);\n        assertEquals(groupName, readGroup.getName());\n        assertEquals(1, readGroup.getMembers().length);\n        assertEquals(readUser, readGroup.getMembers()[0]);\n    }","commit_id":"dd6edeca29ab173fd8b0fad2842f9c5d0f332506","url":"https://github.com/apache/felix"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    protected CheckstyleExecutorRequest createRequest()\n            throws MavenReportException\n    {\n        CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n        request.setAggregate( true )\n            .setReactorProjects( reactorProjects )\n            .setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n            .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n            .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n            .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory )\n            .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n            .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n            .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n            .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n            .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n        return request;\n    }","id":59491,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    protected CheckstyleExecutorRequest createRequest()\n            throws MavenReportException\n    {\n        CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n        request.setAggregate( true )\n            .setReactorProjects( reactorProjects )\n            .setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n            .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n            .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n            .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory ).setResources( resources )\n            .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n            .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n            .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n            .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n            .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n        return request;\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    protected CheckstyleExecutorRequest createRequest()\n            throws MavenReportException\n    {\n        CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n        request.setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n            .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n            .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n            .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory )\n            .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n            .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n            .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n            .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n            .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n        return request;\n    }","id":59492,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    protected CheckstyleExecutorRequest createRequest()\n            throws MavenReportException\n    {\n        CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n        request.setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n            .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n            .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n            .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory ).setResources( resources )\n            .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n            .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n            .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n            .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n            .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n        return request;\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"private File[] getFilesToProcess( CheckstyleExecutorRequest request )\n        throws IOException\n    {\n        StringBuilder excludesStr = new StringBuilder();\n\n        if ( StringUtils.isNotEmpty( request.getExcludes() ) )\n        {\n            excludesStr.append( request.getExcludes() );\n        }\n\n        String[] defaultExcludes = FileUtils.getDefaultExcludes();\n        for ( int i = 0; i < defaultExcludes.length; i++ )\n        {\n            if ( excludesStr.length() > 0 )\n            {\n                excludesStr.append( \",\" );\n            }\n\n            excludesStr.append( defaultExcludes[i] );\n        }\n\n        File sourceDirectory = request.getSourceDirectory();\n\n        List<File> files = new ArrayList<File>();\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject project : request.getReactorProjects() )\n            {\n                addFilesToProcess( request, excludesStr, new File( project.getBuild().getSourceDirectory() ), files );\n            }\n        }\n        else\n        {\n            addFilesToProcess( request, excludesStr, sourceDirectory, files );\n        }\n\n        return (File[]) files.toArray( EMPTY_FILE_ARRAY );\n    }","id":59493,"modified_method":"private File[] getFilesToProcess( CheckstyleExecutorRequest request )\n        throws IOException\n    {\n        StringBuilder excludesStr = new StringBuilder();\n\n        if ( StringUtils.isNotEmpty( request.getExcludes() ) )\n        {\n            excludesStr.append( request.getExcludes() );\n        }\n\n        String[] defaultExcludes = FileUtils.getDefaultExcludes();\n        for ( int i = 0; i < defaultExcludes.length; i++ )\n        {\n            if ( excludesStr.length() > 0 )\n            {\n                excludesStr.append( \",\" );\n            }\n\n            excludesStr.append( defaultExcludes[i] );\n        }\n\n        File sourceDirectory = request.getSourceDirectory();\n\n        List<File> files = new ArrayList<File>();\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject project : request.getReactorProjects() )\n            {\n                addFilesToProcess( request, excludesStr, new File( project.getBuild().getSourceDirectory() ), project.getResources(), files);\n            }\n        }\n        else\n        {\n            addFilesToProcess( request, excludesStr, sourceDirectory, request.getResources(), files);\n        }\n\n        return (File[]) files.toArray( EMPTY_FILE_ARRAY );\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void addFilesToProcess( CheckstyleExecutorRequest request, StringBuilder excludesStr, File sourceDirectory,\n                                    List<File> files )\n        throws IOException\n    {\n        if ( sourceDirectory == null || !sourceDirectory.exists() )\n        {\n            return;\n        }\n        files.addAll(\n            FileUtils.getFiles( sourceDirectory, request.getIncludes(), excludesStr.toString() ) );\n        File testSourceDirectory = request.getTestSourceDirectory();\n        if ( request.isIncludeTestSourceDirectory() && ( testSourceDirectory != null )\n            && ( testSourceDirectory.exists() ) && ( testSourceDirectory.isDirectory() ) )\n        {\n            files.addAll( FileUtils.getFiles( testSourceDirectory, request.getIncludes(),\n                                              excludesStr.toString() ) );\n        }\n    }","id":59494,"modified_method":"private void addFilesToProcess( CheckstyleExecutorRequest request, StringBuilder excludesStr, File sourceDirectory,\n                                    List<Resource> resources, List<File> files)\n        throws IOException\n    {\n        if ( sourceDirectory == null || !sourceDirectory.exists() )\n        {\n            return;\n        }\n        files.addAll(\n            FileUtils.getFiles( sourceDirectory, request.getIncludes(), excludesStr.toString() ) );\n\n        File testSourceDirectory = request.getTestSourceDirectory();\n        if ( request.isIncludeTestSourceDirectory() && ( testSourceDirectory != null )\n            && ( testSourceDirectory.exists() ) && ( testSourceDirectory.isDirectory() ) )\n        {\n            files.addAll( FileUtils.getFiles( testSourceDirectory, request.getIncludes(),\n                                              excludesStr.toString() ) );\n        }\n\n        // @todo Should we add a check to see if resources should be included or not, similar to request.isIncludeTestSourceDirectory()?\n        if ( resources != null )\n        {\n            for ( Resource resource : resources)\n            {\n                if ( resource.getDirectory() != null )\n                {\n                    File resourcesDirectory = new File( resource.getDirectory() );\n                    if ( resourcesDirectory.exists() && resourcesDirectory.isDirectory() )\n                    {\n                        // @todo Perhaps extend the functionality in the future so that the included types of files can be configured. For now it is hard-coded to properties files.\n                        List resourceFiles = FileUtils.getFiles( resourcesDirectory, \"**/*.properties\", null );\n                        files.addAll( resourceFiles );\n                        getLogger().debug( \"Added \" + resourceFiles.size() + \" resource files found in '\" + resourcesDirectory.getAbsolutePath() + \"'.\" );\n                    }\n                    else\n                    {\n                        getLogger().debug( \"The resources directory '\" + resourcesDirectory.getAbsolutePath() + \"' does not exist or is not a directory.\" );\n                    }\n                }\n            }\n        }\n        else\n        {\n            getLogger().debug( \"No resources found in this project.\" );\n        }\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void addSourceDirectory( CheckstyleReportListener sinkListener, File sourceDirectory,\n                                       File testSourceDirectory, CheckstyleExecutorRequest request )\n    {\n        if ( sourceDirectory != null )\n        {\n            sinkListener.addSourceDirectory( sourceDirectory );\n        }\n        if ( request.isIncludeTestSourceDirectory() && ( testSourceDirectory != null )\n            && ( testSourceDirectory.exists() ) && ( testSourceDirectory.isDirectory() ) )\n        {\n            sinkListener.addSourceDirectory( testSourceDirectory );\n        }\n    }","id":59495,"modified_method":"protected void addSourceDirectory( CheckstyleReportListener sinkListener, File sourceDirectory,\n                                       File testSourceDirectory, List<Resource> resources,\n                                       CheckstyleExecutorRequest request )\n    {\n        if ( sourceDirectory != null )\n        {\n            sinkListener.addSourceDirectory( sourceDirectory );\n        }\n\n        if ( request.isIncludeTestSourceDirectory() && ( testSourceDirectory != null )\n            && ( testSourceDirectory.exists() ) && ( testSourceDirectory.isDirectory() ) )\n        {\n            sinkListener.addSourceDirectory( testSourceDirectory );\n        }\n\n        if ( resources != null )\n        {\n            for ( Resource resource : resources )\n            {\n                if ( resource.getDirectory() != null )\n                {\n                    File resourcesDirectory = new File( resource.getDirectory() );\n                    if ( resourcesDirectory.exists() && resourcesDirectory.isDirectory() )\n                    {\n                        sinkListener.addSourceDirectory( resourcesDirectory );\n                        getLogger().debug( \"Added '\" + resourcesDirectory.getAbsolutePath() + \"' as a source directory.\" );\n                    }\n                }\n            }\n        }\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"public CheckstyleResults executeCheckstyle( CheckstyleExecutorRequest request )\n        throws CheckstyleExecutorException, CheckstyleException\n    {\n        // checkstyle will always use the context classloader in order\n        // to load resources (dtds),\n        // so we have to fix it\n        // olamy this hack is not anymore needed in maven 3.x\n        ClassLoader checkstyleClassLoader = PackageNamesLoader.class.getClassLoader();\n        Thread.currentThread().setContextClassLoader( checkstyleClassLoader );\n\n        if ( getLogger().isDebugEnabled() )\n        {\n            getLogger().debug( \"executeCheckstyle start headerLocation : \" + request.getHeaderLocation() );\n        }\n        MavenProject project = request.getProject();\n        locator.setOutputDirectory( new File( project.getBuild().getDirectory() ) );\n        File[] files;\n        try\n        {\n            files = getFilesToProcess( request );\n        }\n        catch ( IOException e )\n        {\n            throw new CheckstyleExecutorException( \"Error getting files to process\", e );\n        }\n\n        FilterSet filterSet = getSuppressions( request );\n\n        Checker checker = new Checker();\n\n        // setup classloader, needed to avoid \"Unable to get class information\n        // for ...\" errors\n        List<String> classPathStrings = new ArrayList<String>();\n        List<String> outputDirectories = new ArrayList<String>();\n        File sourceDirectory = request.getSourceDirectory();\n        File testSourceDirectory = request.getTestSourceDirectory();\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject childProject : request.getReactorProjects() )\n            {\n                prepareCheckstylePaths( request, childProject, classPathStrings, outputDirectories,\n                                        new File( childProject.getBuild().getSourceDirectory() ),\n                                        new File( childProject.getBuild().getTestSourceDirectory() ) );\n            }\n        }\n        else\n        {\n            prepareCheckstylePaths( request, project, classPathStrings, outputDirectories, sourceDirectory,\n                                    testSourceDirectory );\n        }\n\n        List<URL> urls = new ArrayList<URL>( classPathStrings.size() );\n\n        for ( String path : classPathStrings )\n        {\n            try\n            {\n                urls.add( new File( path ).toURL() );\n            }\n            catch ( MalformedURLException e )\n            {\n                throw new CheckstyleExecutorException( e.getMessage(), e );\n            }\n        }\n\n        for ( String outputDirectoryString : outputDirectories )\n        {\n            try\n            {\n                if ( outputDirectoryString != null )\n                {\n                    File outputDirectoryFile = new File( outputDirectoryString );\n                    if ( outputDirectoryFile.exists() )\n                    {\n                        URL outputDirectoryUrl = outputDirectoryFile.toURL();\n                        request.getLog().debug(\n                                                \"Adding the outputDirectory \" + outputDirectoryUrl.toString()\n                                                    + \" to the Checkstyle class path\" );\n                        urls.add( outputDirectoryUrl );\n                    }\n                }\n            }\n            catch ( MalformedURLException e )\n            {\n                throw new CheckstyleExecutorException( e.getMessage(), e );\n            }\n        }\n\n        URLClassLoader projectClassLoader = new URLClassLoader( (URL[]) urls.toArray( new URL[urls.size()] ), null );\n        checker.setClassloader( projectClassLoader );\n\n        checker.setModuleClassLoader( Thread.currentThread().getContextClassLoader() );\n\n        if ( filterSet != null )\n        {\n            checker.addFilter( filterSet );\n        }\n        Configuration configuration = getConfiguration( request );\n        checker.configure( configuration );\n\n        AuditListener listener = request.getListener();\n\n        if ( listener != null )\n        {\n            checker.addListener( listener );\n        }\n\n        if ( request.isConsoleOutput() )\n        {\n            checker.addListener( request.getConsoleListener() );\n        }\n\n        CheckstyleReportListener sinkListener = new CheckstyleReportListener( configuration );\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject childProject : request.getReactorProjects() )\n            {\n                addSourceDirectory( sinkListener, new File( childProject.getBuild().getSourceDirectory() ),\n                                    new File( childProject.getBuild().getSourceDirectory() ), request );\n            }\n        }\n        else\n        {\n            addSourceDirectory( sinkListener, sourceDirectory, testSourceDirectory, request );\n        }\n\n        checker.addListener( sinkListener );\n\n        List<File> filesList = Arrays.asList( files );\n        int nbErrors = checker.process( filesList );\n\n        checker.destroy();\n\n        if ( request.getStringOutputStream() != null )\n        {\n            request.getLog().info( request.getStringOutputStream().toString() );\n        }\n\n        if ( request.isFailsOnError() && nbErrors > 0 )\n        {\n            // TODO: should be a failure, not an error. Report is not meant to\n            // throw an exception here (so site would\n            // work regardless of config), but should record this information\n            throw new CheckstyleExecutorException( \"There are \" + nbErrors + \" checkstyle errors.\" );\n        }\n        else if ( nbErrors > 0 )\n        {\n            request.getLog().info( \"There are \" + nbErrors + \" checkstyle errors.\" );\n        }\n\n        return sinkListener.getResults();\n    }","id":59496,"modified_method":"public CheckstyleResults executeCheckstyle( CheckstyleExecutorRequest request )\n        throws CheckstyleExecutorException, CheckstyleException\n    {\n        // checkstyle will always use the context classloader in order\n        // to load resources (dtds),\n        // so we have to fix it\n        // olamy this hack is not anymore needed in maven 3.x\n        ClassLoader checkstyleClassLoader = PackageNamesLoader.class.getClassLoader();\n        Thread.currentThread().setContextClassLoader( checkstyleClassLoader );\n\n        if ( getLogger().isDebugEnabled() )\n        {\n            getLogger().debug( \"executeCheckstyle start headerLocation : \" + request.getHeaderLocation() );\n        }\n        MavenProject project = request.getProject();\n        locator.setOutputDirectory( new File( project.getBuild().getDirectory() ) );\n        File[] files;\n        try\n        {\n            files = getFilesToProcess( request );\n        }\n        catch ( IOException e )\n        {\n            throw new CheckstyleExecutorException( \"Error getting files to process\", e );\n        }\n\n        FilterSet filterSet = getSuppressions( request );\n\n        Checker checker = new Checker();\n\n        // setup classloader, needed to avoid \"Unable to get class information\n        // for ...\" errors\n        List<String> classPathStrings = new ArrayList<String>();\n        List<String> outputDirectories = new ArrayList<String>();\n        File sourceDirectory = request.getSourceDirectory();\n        File testSourceDirectory = request.getTestSourceDirectory();\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject childProject : request.getReactorProjects() )\n            {\n                prepareCheckstylePaths( request, childProject, classPathStrings, outputDirectories,\n                                        new File( childProject.getBuild().getSourceDirectory() ),\n                                        new File( childProject.getBuild().getTestSourceDirectory() ) );\n            }\n        }\n        else\n        {\n            prepareCheckstylePaths( request, project, classPathStrings, outputDirectories, sourceDirectory,\n                                    testSourceDirectory );\n        }\n\n        List<URL> urls = new ArrayList<URL>( classPathStrings.size() );\n\n        for ( String path : classPathStrings )\n        {\n            try\n            {\n                urls.add( new File( path ).toURL() );\n            }\n            catch ( MalformedURLException e )\n            {\n                throw new CheckstyleExecutorException( e.getMessage(), e );\n            }\n        }\n\n        for ( String outputDirectoryString : outputDirectories )\n        {\n            try\n            {\n                if ( outputDirectoryString != null )\n                {\n                    File outputDirectoryFile = new File( outputDirectoryString );\n                    if ( outputDirectoryFile.exists() )\n                    {\n                        URL outputDirectoryUrl = outputDirectoryFile.toURL();\n                        request.getLog().debug(\n                                                \"Adding the outputDirectory \" + outputDirectoryUrl.toString()\n                                                    + \" to the Checkstyle class path\" );\n                        urls.add( outputDirectoryUrl );\n                    }\n                }\n            }\n            catch ( MalformedURLException e )\n            {\n                throw new CheckstyleExecutorException( e.getMessage(), e );\n            }\n        }\n\n        URLClassLoader projectClassLoader = new URLClassLoader( (URL[]) urls.toArray( new URL[urls.size()] ), null );\n        checker.setClassloader( projectClassLoader );\n\n        checker.setModuleClassLoader( Thread.currentThread().getContextClassLoader() );\n\n        if ( filterSet != null )\n        {\n            checker.addFilter( filterSet );\n        }\n        Configuration configuration = getConfiguration( request );\n        checker.configure( configuration );\n\n        AuditListener listener = request.getListener();\n\n        if ( listener != null )\n        {\n            checker.addListener( listener );\n        }\n\n        if ( request.isConsoleOutput() )\n        {\n            checker.addListener( request.getConsoleListener() );\n        }\n\n        CheckstyleReportListener sinkListener = new CheckstyleReportListener( configuration );\n        if ( request.isAggregate() )\n        {\n            for ( MavenProject childProject : request.getReactorProjects() )\n            {\n                addSourceDirectory( sinkListener, new File( childProject.getBuild().getSourceDirectory() ),\n                                    new File( childProject.getBuild().getSourceDirectory() ), childProject.getResources(), request);\n            }\n        }\n        else\n        {\n            addSourceDirectory( sinkListener, sourceDirectory, testSourceDirectory, request.getResources(), request);\n        }\n\n        checker.addListener( sinkListener );\n\n        List<File> filesList = Arrays.asList( files );\n        int nbErrors = checker.process( filesList );\n\n        checker.destroy();\n\n        if ( request.getStringOutputStream() != null )\n        {\n            request.getLog().info( request.getStringOutputStream().toString() );\n        }\n\n        if ( request.isFailsOnError() && nbErrors > 0 )\n        {\n            // TODO: should be a failure, not an error. Report is not meant to\n            // throw an exception here (so site would\n            // work regardless of config), but should record this information\n            throw new CheckstyleExecutorException( \"There are \" + nbErrors + \" checkstyle errors.\" );\n        }\n        else if ( nbErrors > 0 )\n        {\n            request.getLog().info( \"There are \" + nbErrors + \" checkstyle errors.\" );\n        }\n\n        return sinkListener.getResults();\n    }","commit_id":"e22cd5f580b4d94b61529c69c3116bfd51126987","url":"https://github.com/apache/maven-plugins"},{"original_method":"/** {@inheritDoc} */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n\n        if ( !skip )\n        {\n\n            if ( !skipExec )\n            {\n\n                ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n\n                try\n                {\n                    CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n                    request.setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n                        .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n                        .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n                        .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory )\n                        .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n                        .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n                        .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n                        .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n                        .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n\n                    checkstyleExecutor.executeCheckstyle( request );\n\n                }\n                catch ( CheckstyleException e )\n                {\n                    throw new MojoExecutionException( \"Failed during checkstyle configuration\", e );\n                }\n                catch ( CheckstyleExecutorException e )\n                {\n                    throw new MojoExecutionException( \"Failed during checkstyle execution\", e );\n                }\n                finally\n                {\n                    //be sure to restore original context classloader\n                    Thread.currentThread().setContextClassLoader( currentClassLoader );\n                }\n\n            }\n            if ( !\"xml\".equals( outputFileFormat ) )\n            {\n                throw new MojoExecutionException( \"Output format is '\" + outputFileFormat\n                    + \"', checkstyle:check requires format to be 'xml'.\" );\n            }\n\n            if ( !outputFile.exists() )\n            {\n                getLog().info(\n                               \"Unable to perform checkstyle:check, \"\n                                   + \"unable to find checkstyle:checkstyle outputFile.\" );\n                return;\n            }\n\n            try\n            {\n                XmlPullParser xpp = new MXParser();\n                Reader freader = ReaderFactory.newXmlReader( outputFile );\n                BufferedReader breader = new BufferedReader( freader );\n                xpp.setInput( breader );\n\n                int violations = countViolations( xpp );\n                if ( violations > maxAllowedViolations )\n                {\n                    if ( failOnViolation )\n                    {\n                        String msg = \"You have \" + violations + \" Checkstyle violation\"\n                            + ( ( violations > 1 ) ? \"s\" : \"\" ) + \".\";\n                        if ( maxAllowedViolations > 0 )\n                        {\n                            msg += \" The maximum number of allowed violations is \" + maxAllowedViolations + \".\";\n                        }\n                        throw new MojoFailureException( msg );\n                    }\n\n                    getLog().warn( \"checkstyle:check violations detected but failOnViolation set to false\" );\n                }\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Unable to read Checkstyle results xml: \"\n                    + outputFile.getAbsolutePath(), e );\n            }\n            catch ( XmlPullParserException e )\n            {\n                throw new MojoExecutionException( \"Unable to read Checkstyle results xml: \"\n                    + outputFile.getAbsolutePath(), e );\n            }\n        }\n    }","id":59497,"modified_method":"/** {@inheritDoc} */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n\n        if ( !skip )\n        {\n\n            if ( !skipExec )\n            {\n\n                ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n\n                try\n                {\n                    CheckstyleExecutorRequest request = new CheckstyleExecutorRequest();\n                    request.setConsoleListener( getConsoleListener() ).setConsoleOutput( consoleOutput )\n                        .setExcludes( excludes ).setFailsOnError( failsOnError ).setIncludes( includes )\n                        .setIncludeTestSourceDirectory( includeTestSourceDirectory ).setListener( getListener() )\n                        .setLog( getLog() ).setProject( project ).setSourceDirectory( sourceDirectory ).setResources( resources )\n                        .setStringOutputStream( stringOutputStream ).setSuppressionsLocation( suppressionsLocation )\n                        .setTestSourceDirectory( testSourceDirectory ).setConfigLocation( configLocation )\n                        .setPropertyExpansion( propertyExpansion ).setHeaderLocation( headerLocation )\n                        .setCacheFile( cacheFile ).setSuppressionsFileExpression( suppressionsFileExpression )\n                        .setEncoding( encoding ).setPropertiesLocation( propertiesLocation );\n\n                    checkstyleExecutor.executeCheckstyle( request );\n\n                }\n                catch ( CheckstyleException e )\n                {\n                    throw new MojoExecutionException( \"Failed during checkstyle configuration\", e );\n                }\n                catch ( CheckstyleExecutorException e )\n                {\n                    throw new MojoExecutionException( \"Failed during checkstyle execution\", e );\n                }\n                finally\n                {\n                    //be sure to restore original context classloader\n                    Thread.currentThread().setContextClassLoader( currentClassLoader );\n                }\n\n            }\n            if ( !\"xml\".equals( outputFileFormat ) )\n            {\n                throw new MojoExecutionException( \"Output format is '\" + outputFileFormat\n                    + \"', checkstyle:check requires format to be 'xml'.\" );\n            }\n\n            if ( !outputFile.exists() )\n            {\n                getLog().info(\n                               \"Unable to perform checkstyle:check, \"\n                                   + \"unable to find checkstyle:checkstyle outputFile.\" );\n                return;\n            }\n\n            try\n            {\n                XmlPullParser xpp = new MXParser();\n                Reader freader = ReaderFactory.newXmlReader( outputFile );\n                BufferedReader breader = new BufferedReader( freader );\n                xpp.setInput( breader );\n\n                int violations = countViolations( xpp );\n                if ( violations > maxAllowedViolations )\n                {\n                    if ( failOnViolation )\n                    {\n                        String msg = \"You have \" + violations + \" Checkstyle violation\"\n                            + ( ( violations > 1 ) ? \"s\" : \"\" ) + \".\";\n                        if ( maxAllowedViolations > 0 )\n                        {\n                            msg += \" The maximum number of allowed violations is \" + maxAllowedViolations + \".\";\n                        }\n                        throw new MojoFailureException( msg );\n                    }\n\n                    getLog().warn( \"checkstyle:check violations detected but failOnViolation set to false\" );\n                }\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Unable to read Checkstyle results xml: \"\n                    + outputFile.getAbsolutePath(), e );\n            }\n            catch ( XmlPullParserException e )\n            {\n                throw new MojoExecutionException( \"Unable to read Checkstyle results xml: \"\n                    + outputFile.getAbsolutePath(), e );\n            }\n        }\n    }","commit_id":"8ab28c7a7ff05f9e022aa1f4ca7052fbe0041382","url":"https://github.com/apache/maven-plugins"},{"original_method":"private static AccessPointMonitorConfig unmarshall(InputStream is) throws JAXBException {\n        InputStream apmcStream = is;\n        JAXBContext context = JAXBContext.newInstance(AccessPointMonitorConfig.class);\n        Unmarshaller um = context.createUnmarshaller();\n        um.setSchema(null);\n        return (AccessPointMonitorConfig) um.unmarshal(apmcStream);\n    }","id":59498,"modified_method":"private static AccessPointMonitorConfig unmarshall(InputStream is) {\n        return JaxbUtils.unmarshal(AccessPointMonitorConfig.class, new InputSource(is));\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void generateXML() throws Exception {\n        // Marshal the test object to an XML string\n        StringWriter objectXML = new StringWriter();\n        m.marshal(apmc, objectXML);\n\n        // Read the example XML from src/test/resources\n        StringBuffer exampleXML = new StringBuffer();\n        File apmConfig = new File(ClassLoader.getSystemResource(\"access-point-monitor-configuration.xml\").getFile());\n        assertTrue(\"access-point-monitor-configuration.xml is readable\", apmConfig.canRead());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(apmConfig), \"UTF-8\"));\n        String line;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                reader.close();\n                break;\n            }\n            exampleXML.append(line).append(\"\\n\");\n        }\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Object XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(objectXML.toString());\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Example XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(exampleXML.toString());\n        DetailedDiff myDiff = getDiff(objectXML, exampleXML);\n        assertEquals(\"Number of XMLUnit differences between the example XML and the mock object XML is 0\", 0, myDiff.getAllDifferences().size());\n    }","id":59499,"modified_method":"@Test\n    public void generateXML() throws Exception {\n        // Marshal the test object to an XML string\n        StringWriter objectXML = new StringWriter();\n        JaxbUtils.marshal(apmc, objectXML);\n\n        // Read the example XML from src/test/resources\n        StringBuffer exampleXML = new StringBuffer();\n        File apmConfig = new File(ClassLoader.getSystemResource(\"access-point-monitor-configuration.xml\").getFile());\n        assertTrue(\"access-point-monitor-configuration.xml is readable\", apmConfig.canRead());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(apmConfig), \"UTF-8\"));\n        String line;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                reader.close();\n                break;\n            }\n            exampleXML.append(line).append(\"\\n\");\n        }\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Object XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(objectXML.toString());\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Example XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(exampleXML.toString());\n        DetailedDiff myDiff = getDiff(objectXML, exampleXML);\n        assertEquals(\"Number of XMLUnit differences between the example XML and the mock object XML is 0\", 0, myDiff.getAllDifferences().size());\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void readXML() throws Exception {\n        // Retrieve the file we're parsing.\n        File apmConfig = new File(ClassLoader.getSystemResource(\"access-point-monitor-configuration.xml\").getFile());\n        assertTrue(\"access-point-monitor-configuration.xml is readable\", apmConfig.canRead());\n\n        InputStream reader = new FileInputStream(apmConfig);\n\n        um.setSchema(null);\n        AccessPointMonitorConfig exampleApmc = (AccessPointMonitorConfig) um.unmarshal(reader);\n\n        assertTrue(\"Compare Access Point Monitor Config objects.\", apmc.equals(exampleApmc));\n\n        reader.close();\n    }","id":59500,"modified_method":"@Test\n    public void readXML() throws Exception {\n        // Retrieve the file we're parsing.\n        File apmConfig = new File(ClassLoader.getSystemResource(\"access-point-monitor-configuration.xml\").getFile());\n        assertTrue(\"access-point-monitor-configuration.xml is readable\", apmConfig.canRead());\n\n        AccessPointMonitorConfig exampleApmc = JaxbUtils.unmarshal(AccessPointMonitorConfig.class, apmConfig);\n\n        assertTrue(\"Compare Access Point Monitor Config objects.\", apmc.equals(exampleApmc));\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws Exception {\n        fa = new FileAnticipator();\n        c = JAXBContext.newInstance(AccessPointMonitorConfig.class);\n        m = c.createMarshaller();\n        um = c.createUnmarshaller();\n\n        ServiceTemplate svcTemplate = new ServiceTemplate();\n        svcTemplate.setName(\"IsAPAdoptedOnController-Template\");\n        svcTemplate.setInterval(120000L);\n        svcTemplate.setStatus(\"off\");\n        svcTemplate.addParameter(new Parameter(\"retry\", \"2\"));\n        svcTemplate.addParameter(new Parameter(\"oid\", \".1.3.6.1.4.1.14823.2.2.1.5.2.1.4.1.19\"));\n        svcTemplate.addParameter(new Parameter(\"operator\", \"=\"));\n        svcTemplate.addParameter(new Parameter(\"operand\", \"1\"));\n        svcTemplate.addParameter(new Parameter(\"match\", \"true\"));\n\n        Service svc = new Service();\n        svc.setName(\"IsAPAdoptedOnController\");\n        svc.setTemplateName(\"IsAPAdoptedOnController-Template\");\n        svc.setStatus(\"on\");\n        svc.addParameter(new Parameter(\"retry\", \"3\"));\n\n        Package pkg = new Package();\n        pkg.setName(\"default\");\n        pkg.setFilter(\"IPADDR != '0.0.0.0'\");\n        pkg.addSpecific(\"172.23.1.1\");\n        pkg.addIncludeRange(new IpRange(\"192.168.0.0\", \"192.168.255.255\"));\n        pkg.addExcludeRange(new IpRange(\"192.168.1.0\", \"192.168.1.255\"));\n        pkg.setService(svc);\n\n        Monitor monitor = new Monitor();\n        monitor.setService(\"IsAPAdoptedOnController\");\n        monitor.setClassName(\"org.opennms.netmgt.accesspointmonitor.poller.InstanceStrategy\");\n\n        apmc = new AccessPointMonitorConfig();\n        apmc.setThreads(30);\n        apmc.setPackageScanInterval(1800000L);\n        apmc.addServiceTemplate(svcTemplate);\n        apmc.addPackage(pkg);\n        apmc.addMonitor(monitor);\n\n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":59501,"modified_method":"@Before\n    public void setUp() throws Exception {\n        fa = new FileAnticipator();\n\n        ServiceTemplate svcTemplate = new ServiceTemplate();\n        svcTemplate.setName(\"IsAPAdoptedOnController-Template\");\n        svcTemplate.setInterval(120000L);\n        svcTemplate.setStatus(\"off\");\n        svcTemplate.addParameter(new Parameter(\"retry\", \"2\"));\n        svcTemplate.addParameter(new Parameter(\"oid\", \".1.3.6.1.4.1.14823.2.2.1.5.2.1.4.1.19\"));\n        svcTemplate.addParameter(new Parameter(\"operator\", \"=\"));\n        svcTemplate.addParameter(new Parameter(\"operand\", \"1\"));\n        svcTemplate.addParameter(new Parameter(\"match\", \"true\"));\n\n        Service svc = new Service();\n        svc.setName(\"IsAPAdoptedOnController\");\n        svc.setTemplateName(\"IsAPAdoptedOnController-Template\");\n        svc.setStatus(\"on\");\n        svc.addParameter(new Parameter(\"retry\", \"3\"));\n\n        Package pkg = new Package();\n        pkg.setName(\"default\");\n        pkg.setFilter(\"IPADDR != '0.0.0.0'\");\n        pkg.addSpecific(\"172.23.1.1\");\n        pkg.addIncludeRange(new IpRange(\"192.168.0.0\", \"192.168.255.255\"));\n        pkg.addExcludeRange(new IpRange(\"192.168.1.0\", \"192.168.1.255\"));\n        pkg.setService(svc);\n\n        Monitor monitor = new Monitor();\n        monitor.setService(\"IsAPAdoptedOnController\");\n        monitor.setClassName(\"org.opennms.netmgt.accesspointmonitor.poller.InstanceStrategy\");\n\n        apmc = new AccessPointMonitorConfig();\n        apmc.setThreads(30);\n        apmc.setPackageScanInterval(1800000L);\n        apmc.addServiceTemplate(svcTemplate);\n        apmc.addPackage(pkg);\n        apmc.addMonitor(monitor);\n\n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void generateSchema() throws Exception {\n        File schemaFile = fa.expecting(\"access-point-monitor-configuration.xsd\");\n        c.generateSchema(new TestOutputResolver(schemaFile));\n        if (fa.isInitialized()) {\n            fa.deleteExpected();\n        }\n    }","id":59502,"modified_method":"@Test\n    public void generateSchema() throws Exception {\n        File schemaFile = fa.expecting(\"access-point-monitor-configuration.xsd\");\n        JAXBContext c = JAXBContext.newInstance(AccessPointMonitorConfig.class);\n        c.generateSchema(new TestOutputResolver(schemaFile));\n        if (fa.isInitialized()) {\n            fa.deleteExpected();\n        }\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public JdbcDataCollectionConfig unmarshall(InputStream configFile) {\n        try {\n            InputStream jdccStream = configFile;\n            JAXBContext context = JAXBContext.newInstance(JdbcDataCollectionConfig.class);\n            Unmarshaller um = context.createUnmarshaller();\n            um.setSchema(null);\n            JdbcDataCollectionConfig jdcc = (JdbcDataCollectionConfig) um.unmarshal(jdccStream);\n            m_jdbcDataCollectionConfig = jdcc;\n            return jdcc;\n        } catch (Throwable e) {\n            // TODO!!\n            //throw new ForeignSourceRepositoryException(\"unable to access default foreign source resource\", e);\n        }\n        return m_jdbcDataCollectionConfig;\n    }","id":59503,"modified_method":"public JdbcDataCollectionConfig unmarshall(InputStream configFile) {\n        try {\n            m_jdbcDataCollectionConfig = JaxbUtils.unmarshal(JdbcDataCollectionConfig.class, new InputSource(configFile));\n            return m_jdbcDataCollectionConfig;\n        } catch (Throwable e) {\n            // TODO!!\n            //throw new ForeignSourceRepositoryException(\"unable to access default foreign source resource\", e);\n        }\n        return m_jdbcDataCollectionConfig;\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws Exception {\n        fa = new FileAnticipator();\n        c = JAXBContext.newInstance(JdbcDataCollectionConfig.class);\n        m = c.createMarshaller();\n        um = c.createUnmarshaller();\n        \n        // Mock up a JdbcDataCollectionConfig class.      \n        JdbcRrd jdbcRrd = new JdbcRrd();\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:1:2016\");\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:12:1488\");\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:288:366\");\n        jdbcRrd.addRra(\"RRA:MAX:0.5:288:366\");\n        jdbcRrd.addRra(\"RRA:MIN:0.5:288:366\");\n        jdbcRrd.setStep(300);\n        \n        JdbcStatement jdbcStatement = new JdbcStatement();\n        jdbcStatement.setJdbcQuery(\n        \"SELECT COUNT(eventid) as EventCount\\n\"+\n        \"FROM events\\n\"+\n        \"WHERE eventtime\\n\"+ \n        \"BETWEEN (CURRENT_TIMESTAMP - INTERVAL '1 day')\\n\"+ \n        \"AND CURRENT_TIMESTAMP;\");\n        \n        JdbcColumn column = new JdbcColumn();\n        column.setColumnName(\"eventCount\");\n        column.setDataSourceName(\"EventCount\");\n        column.setDataType(\"GAUGE\");\n        column.setAlias(\"eventCount\");\n        \n        JdbcQuery jdbcQuery = new JdbcQuery();\n        jdbcQuery.setQueryName(\"opennmsQuery\");\n        jdbcQuery.setJdbcStatement(jdbcStatement);\n        jdbcQuery.addJdbcColumn(column);\n        jdbcQuery.setRecheckInterval(3600000);\n        jdbcQuery.setIfType(\"all\");\n        jdbcQuery.setResourceType(\"node\");\n        \n        JdbcDataCollection jdbcDataCollection = new JdbcDataCollection();\n        jdbcDataCollection.setJdbcRrd(jdbcRrd);\n        jdbcDataCollection.addQuery(jdbcQuery);\n        jdbcDataCollection.setName(\"default\");\n        \n        jdcc = new JdbcDataCollectionConfig();\n        jdcc.addDataCollection(jdbcDataCollection);\n        jdcc.setRrdRepository(\"/opt/opennms/share/rrd/snmp/\");\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":59504,"modified_method":"@Before\n    public void setUp() throws Exception {\n        fa = new FileAnticipator();\n        \n        // Mock up a JdbcDataCollectionConfig class.      \n        JdbcRrd jdbcRrd = new JdbcRrd();\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:1:2016\");\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:12:1488\");\n        jdbcRrd.addRra(\"RRA:AVERAGE:0.5:288:366\");\n        jdbcRrd.addRra(\"RRA:MAX:0.5:288:366\");\n        jdbcRrd.addRra(\"RRA:MIN:0.5:288:366\");\n        jdbcRrd.setStep(300);\n        \n        JdbcStatement jdbcStatement = new JdbcStatement();\n        jdbcStatement.setJdbcQuery(\n        \"SELECT COUNT(eventid) as EventCount\\n\"+\n        \"FROM events\\n\"+\n        \"WHERE eventtime\\n\"+ \n        \"BETWEEN (CURRENT_TIMESTAMP - INTERVAL '1 day')\\n\"+ \n        \"AND CURRENT_TIMESTAMP;\");\n        \n        JdbcColumn column = new JdbcColumn();\n        column.setColumnName(\"eventCount\");\n        column.setDataSourceName(\"EventCount\");\n        column.setDataType(\"GAUGE\");\n        column.setAlias(\"eventCount\");\n        \n        JdbcQuery jdbcQuery = new JdbcQuery();\n        jdbcQuery.setQueryName(\"opennmsQuery\");\n        jdbcQuery.setJdbcStatement(jdbcStatement);\n        jdbcQuery.addJdbcColumn(column);\n        jdbcQuery.setRecheckInterval(3600000);\n        jdbcQuery.setIfType(\"all\");\n        jdbcQuery.setResourceType(\"node\");\n        \n        JdbcDataCollection jdbcDataCollection = new JdbcDataCollection();\n        jdbcDataCollection.setJdbcRrd(jdbcRrd);\n        jdbcDataCollection.addQuery(jdbcQuery);\n        jdbcDataCollection.setName(\"default\");\n        \n        jdcc = new JdbcDataCollectionConfig();\n        jdcc.addDataCollection(jdbcDataCollection);\n        jdcc.setRrdRepository(\"/opt/opennms/share/rrd/snmp/\");\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void readXML() throws Exception {\n        // Retrieve the file we're parsing.\n        File jdbcCollectionConfig = new File(ClassLoader.getSystemResource(\"jdbc-datacollection-config.xml\").getFile());\n        assertTrue(\"jdbc-datacollection-config.xml is readable\", jdbcCollectionConfig.canRead());\n        \n        InputStream reader = new FileInputStream(jdbcCollectionConfig);\n        \n        um.setSchema(null);\n        JdbcDataCollectionConfig exampleJdcc = (JdbcDataCollectionConfig)um.unmarshal(reader);\n\n        assertTrue(\"Compare JDBC Data Collection Config objects.\", jdcc.equals(exampleJdcc));\n        \n        reader.close();\n    }","id":59505,"modified_method":"@Test\n    public void readXML() throws Exception {\n        // Retrieve the file we're parsing.\n        File jdbcCollectionConfig = new File(ClassLoader.getSystemResource(\"jdbc-datacollection-config.xml\").getFile());\n        assertTrue(\"jdbc-datacollection-config.xml is readable\", jdbcCollectionConfig.canRead());\n        \n        JdbcDataCollectionConfig exampleJdcc = JaxbUtils.unmarshal(JdbcDataCollectionConfig.class, jdbcCollectionConfig);\n\n        assertTrue(\"Compare JDBC Data Collection Config objects.\", jdcc.equals(exampleJdcc));\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void generateXML() throws Exception {\n        // Marshal the test object to an XML string\n        StringWriter objectXML = new StringWriter();\n        m.marshal(jdcc, objectXML);\n\n        // Read the example XML from src/test/resources\n        StringBuffer exampleXML = new StringBuffer();\n        File jdbcCollectionConfig = new File(ClassLoader.getSystemResource(\"jdbc-datacollection-config.xml\").getFile());\n        assertTrue(\"jdbc-datacollection-config.xml is readable\", jdbcCollectionConfig.canRead());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(jdbcCollectionConfig), \"UTF-8\"));\n        String line;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                reader.close();\n                break;\n            }\n            exampleXML.append(line).append(\"\\n\");\n        }\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Object XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(objectXML.toString());\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Example XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(exampleXML.toString());\n        DetailedDiff myDiff = getDiff(objectXML, exampleXML);\n        assertEquals(\"number of XMLUnit differences between the example XML and the mock object XML is 0\", 0, myDiff.getAllDifferences().size());\n    }","id":59506,"modified_method":"@Test\n    public void generateXML() throws Exception {\n        // Marshal the test object to an XML string\n        StringWriter objectXML = new StringWriter();\n        JaxbUtils.marshal(jdcc, objectXML);\n\n        // Read the example XML from src/test/resources\n        StringBuffer exampleXML = new StringBuffer();\n        File jdbcCollectionConfig = new File(ClassLoader.getSystemResource(\"jdbc-datacollection-config.xml\").getFile());\n        assertTrue(\"jdbc-datacollection-config.xml is readable\", jdbcCollectionConfig.canRead());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(jdbcCollectionConfig), \"UTF-8\"));\n        String line;\n        while (true) {\n            line = reader.readLine();\n            if (line == null) {\n                reader.close();\n                break;\n            }\n            exampleXML.append(line).append(\"\\n\");\n        }\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Object XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(objectXML.toString());\n        System.err.println(\"========================================================================\");\n        System.err.println(\"Example XML:\");\n        System.err.println(\"========================================================================\");\n        System.err.print(exampleXML.toString());\n        DetailedDiff myDiff = getDiff(objectXML, exampleXML);\n        assertEquals(\"number of XMLUnit differences between the example XML and the mock object XML is 0\", 0, myDiff.getAllDifferences().size());\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void generateSchema() throws Exception {\n        File schemaFile = fa.expecting(\"jdbc-datacollection-config.xsd\");\n        c.generateSchema(new TestOutputResolver(schemaFile));\n        if (fa.isInitialized()) {\n            fa.deleteExpected();\n        }\n    }","id":59507,"modified_method":"@Test\n    public void generateSchema() throws Exception {\n        File schemaFile = fa.expecting(\"jdbc-datacollection-config.xsd\");\n        JAXBContext c = JAXBContext.newInstance(JdbcDataCollectionConfig.class);\n        c.generateSchema(new TestOutputResolver(schemaFile));\n        if (fa.isInitialized()) {\n            fa.deleteExpected();\n        }\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private HttpEntity createEntity(List<NorthboundAlarm> alarms) {\n\n\t\ttry {\n\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\n\t\t\t// marshall the output\n\t\t\tm_marshaller.marshal(toServiceAlarms(alarms), out);\n\n\t\t\t// verify its matches the expected results\n\t\t\tbyte[] utf8 = out.toByteArray();\n\n\t\t\tByteArrayEntity entity = new ByteArrayEntity(utf8);\n\t\t\tentity.setContentType(\"application/xml\");\n            return entity;\n\n\t\t} catch (JAXBException e) {\n\t\t\tthrow new NorthbounderException(\"failed to convert alarms to xml\", e);\n\t\t}\n\t}","id":59508,"modified_method":"private HttpEntity createEntity(List<NorthboundAlarm> alarms) {\n\n\t\ttry {\n\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\n\t\t\t// marshall the output\n\t\t\tJaxbUtils.marshal(toServiceAlarms(alarms), new OutputStreamWriter(out));\n\n\t\t\t// verify its matches the expected results\n\t\t\tbyte[] utf8 = out.toByteArray();\n\n\t\t\tByteArrayEntity entity = new ByteArrayEntity(utf8);\n\t\t\tentity.setContentType(\"application/xml\");\n            return entity;\n\n\t\t} catch (Exception e) {\n\t\t\tthrow new NorthbounderException(\"failed to convert alarms to xml\", e);\n\t\t}\n\t}","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public NCSNorthbounder(NCSNorthbounderConfig config) throws JAXBException {\n        super(\"NCSNorthbounder\");\n        \n\t\tm_context = JAXBContext.newInstance(ServiceAlarmNotification.class);\n\t\tm_marshaller = m_context.createMarshaller();\n\t\tm_marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n\t\t\n\t\tm_config = config;\n\t\t\n\t\tsetNaglesDelay(m_config.getNaglesDelay());\n\n    }","id":59509,"modified_method":"public NCSNorthbounder(NCSNorthbounderConfig config) {\n        super(\"NCSNorthbounder\");\n        \n\t\tm_config = config;\n\t\t\n\t\tsetNaglesDelay(m_config.getNaglesDelay());\n\n    }","commit_id":"fbeff83d58edb76f529f0069e83090b4bfd9f8af","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** \n     * This method has to be called after initializing the body element name and language.<p>\n     * \n     * @see org.opencms.workplace.editor.CmsEditor#initContent()\n     */\n    protected void initContent() {\n        // get the content from the temporary file     \n        try {\n            CmsDefaultPage page = (CmsDefaultPage)CmsXmlPage.newInstance(getCms(), getCms().readFile(this.getParamTempfile()));\n            String elementData = page.getElementData(getParamBodyname(), getParamBodylanguage());\n            if (elementData != null) {\n                setParamContent(elementData);\n            } else {\n                setParamContent(\"\");\n            }\n        } catch (CmsException e) {\n            // reading of file contents failed, show error page\n            try {\n                showErrorPage(this, e, \"read\");\n            } catch (JspException exc) {\n                // inclusion of error page failed, ignore\n            }\n        }\n    }","id":59510,"modified_method":"/** \n     * This method has to be called after initializing the body element name and language.<p>\n     * \n     * @see org.opencms.workplace.editor.CmsEditor#initContent()\n     */\n    protected void initContent() {\n        // get the content from the temporary file     \n        try {\n            CmsXmlPage page = new CmsXmlPage().unmarshal(getCms(), getCms().readFile(this.getParamTempfile()));\n            String elementData = page.getElementData(getParamBodyname(), getParamBodylanguage());\n            if (elementData != null) {\n                setParamContent(elementData);\n            } else {\n                setParamContent(\"\");\n            }\n        } catch (CmsException e) {\n            // reading of file contents failed, show error page\n            try {\n                showErrorPage(this, e, \"read\");\n            } catch (JspException exc) {\n                // inclusion of error page failed, ignore\n            }\n        }\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Saves the editor content to the temporary file.<p>\n     * \n     * @param body the body name to write\n     * @param language the body language to write\n     * @throws CmsException if writing the file fails\n     */\n    protected void performSaveContent(String body, String language) throws CmsException {\n        // prepare the content for saving\n        String content = prepareContent(true);\n\n        // create the element if necessary\n        if (!m_page.hasElement(body, language)) {\n            m_page.addElement(body, language);\n        }\n        // set the element data\n        m_page.setElementData(body, language, content.getBytes());\n        \n        // write the file\n        getCms().writeFile(m_page.marshal());\n    }","id":59511,"modified_method":"/**\n     * Saves the editor content to the temporary file.<p>\n     * \n     * @param body the body name to write\n     * @param language the body language to write\n     * @throws CmsException if writing the file fails\n     */\n    protected void performSaveContent(String body, String language) throws CmsException {\n        // prepare the content for saving\n        String content = prepareContent(true);\n\n        // create the element if necessary\n        if (!m_page.hasElement(body, language)) {\n            m_page.addElement(body, language);\n        }\n        // set the element data\n        m_page.setElementData(body, language, content);\n        \n        // write the file\n        getCms().writeFile(m_page.marshal(m_file));\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Initializes the body element name of the editor.<p>\n     * \n     * This has to be called after the element language has been set with setParamBodylanguage().<p>\n     */\n    protected void initBodyElementName() {\n        // set the initial body element name\n       List bodies = m_page.getNames(getParamBodylanguage());\n       if (bodies.size() == 0) {\n           // no body present, so create an empty default body\n            m_page.addElement(I_CmsConstants.C_XML_BODY_ELEMENT, getParamBodylanguage());\n            try {\n            getCms().writeFile(m_page.marshal());\n            } catch (CmsException e) {\n                // writing file failed, show error page\n                try {\n                showErrorPage(this, e, \"save\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            setParamBodyname(I_CmsConstants.C_XML_BODY_ELEMENT);\n        } else {\n            // body present, set body to default body if possible\n            if (bodies.contains(I_CmsConstants.C_XML_BODY_ELEMENT)) {\n                setParamBodyname(I_CmsConstants.C_XML_BODY_ELEMENT);\n            } else {\n                setParamBodyname((String)bodies.get(0));\n            }\n        }\n    }","id":59512,"modified_method":"/**\n     * Initializes the body element name of the editor.<p>\n     * \n     * This has to be called after the element language has been set with setParamBodylanguage().<p>\n     */\n    protected void initBodyElementName() {\n        // set the initial body element name\n       List bodies = m_page.getNames(getParamBodylanguage());\n       if (bodies.size() == 0) {\n           // no body present, so create an empty default body\n            m_page.addElement(I_CmsConstants.C_XML_BODY_ELEMENT, getParamBodylanguage());\n            try {\n            getCms().writeFile(m_page.marshal(m_file));\n            } catch (CmsException e) {\n                // writing file failed, show error page\n                try {\n                showErrorPage(this, e, \"save\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            setParamBodyname(I_CmsConstants.C_XML_BODY_ELEMENT);\n        } else {\n            // body present, set body to default body if possible\n            if (bodies.contains(I_CmsConstants.C_XML_BODY_ELEMENT)) {\n                setParamBodyname(I_CmsConstants.C_XML_BODY_ELEMENT);\n            } else {\n                setParamBodyname((String)bodies.get(0));\n            }\n        }\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Initializes the body element language for the first call of the editor.<p>\n     */\n    protected void initBodyElementLanguage() {\n        Set languages = m_page.getLanguages();\n        String defaultLanguage = OpenCms.getUserDefaultLanguage();\n        if (languages.size() == 0) {\n            // no body present, create default body\n            if (!m_page.hasElement(I_CmsConstants.C_XML_BODY_ELEMENT, defaultLanguage)) {\n                m_page.addElement(I_CmsConstants.C_XML_BODY_ELEMENT, defaultLanguage);\n            }\n            try {\n                getCms().writeFile(m_page.marshal());\n            } catch (CmsException e) {\n                // show error page\n                try {\n                showErrorPage(this, e, \"save\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            setParamBodylanguage(defaultLanguage);\n        } else {\n            // body present, get the language\n            if (languages.contains(defaultLanguage)) {\n                // get the body for the default language\n                setParamBodylanguage(defaultLanguage);\n            } else {\n                // get the first body that can be found\n                setParamBodylanguage((String)languages.toArray()[0]);\n            }\n\n        }\n    }","id":59513,"modified_method":"/**\n     * Initializes the body element language for the first call of the editor.<p>\n     */\n    protected void initBodyElementLanguage() {\n        Set languages = m_page.getLanguages();\n        String defaultLanguage = OpenCms.getUserDefaultLanguage();\n        if (languages.size() == 0) {\n            // no body present, create default body\n            if (!m_page.hasElement(I_CmsConstants.C_XML_BODY_ELEMENT, defaultLanguage)) {\n                m_page.addElement(I_CmsConstants.C_XML_BODY_ELEMENT, defaultLanguage);\n            }\n            try {\n                getCms().writeFile(m_page.marshal(m_file));\n            } catch (CmsException e) {\n                // show error page\n                try {\n                showErrorPage(this, e, \"save\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            setParamBodylanguage(defaultLanguage);\n        } else {\n            // body present, get the language\n            if (languages.contains(defaultLanguage)) {\n                // get the body for the default language\n                setParamBodylanguage(defaultLanguage);\n            } else {\n                // get the first body that can be found\n                setParamBodylanguage((String)languages.toArray()[0]);\n            }\n\n        }\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Performs the creation of a new body action.<p>\n     */\n    public void actionNewBody() {\n        try {\n            // save content of the editor to the temporary file\n            performSaveContent(getParamBodyname(), getParamBodylanguage());\n            String newBody = getParamNewbodyname();\n            if (newBody != null && !\"\".equals(newBody.trim()) && !\"null\".equals(newBody)) {\n                if (!m_page.hasElement(newBody, getParamBodylanguage())) {\n                    m_page.addElement(newBody, getParamBodylanguage());\n                    getCms().writeFile(m_page.marshal());\n                    setParamBodyname(newBody);\n                    initContent();\n                }\n            } \n        } catch (CmsException e) {\n            // show error page\n            try {\n            showErrorPage(this, e, \"save\");\n            } catch (JspException exc) {\n                // ignore this exception\n            }\n        }\n    }","id":59514,"modified_method":"/**\n     * Performs the creation of a new body action.<p>\n     */\n    public void actionNewBody() {\n        try {\n            // save content of the editor to the temporary file\n            performSaveContent(getParamBodyname(), getParamBodylanguage());\n            String newBody = getParamNewbodyname();\n            if (newBody != null && !\"\".equals(newBody.trim()) && !\"null\".equals(newBody)) {\n                if (!m_page.hasElement(newBody, getParamBodylanguage())) {\n                    m_page.addElement(newBody, getParamBodylanguage());\n                    getCms().writeFile(m_page.marshal(m_file));\n                    setParamBodyname(newBody);\n                    initContent();\n                }\n            } \n        } catch (CmsException e) {\n            // show error page\n            try {\n            showErrorPage(this, e, \"save\");\n            } catch (JspException exc) {\n                // ignore this exception\n            }\n        }\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.workplace.CmsWorkplace#initWorkplaceRequestValues(org.opencms.workplace.CmsWorkplaceSettings, javax.servlet.http.HttpServletRequest)\n     */\n    protected void initWorkplaceRequestValues(CmsWorkplaceSettings settings, HttpServletRequest request) {\n        // fill the parameter values in the get/set methods\n        fillParamValues(request);\n        // set the dialog type\n        setParamDialogtype(EDITOR_TYPE);\n        \n        // Initialize a page object from the temporary file\n        if (getParamTempfile() != null && !\"null\".equals(getParamTempfile())) {\n            try {\n                m_page = (CmsDefaultPage)CmsXmlPage.newInstance(getCms(), getCms().readFile(this.getParamTempfile()));\n            } catch (CmsException e) {\n                // error during initialization\n                try {\n                    showErrorPage(this, e, \"read\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n        }\n\n        // set the action for the JSP switch \n        if (EDITOR_SAVE.equals(getParamAction())) {\n            setAction(ACTION_SAVE);\n        } else if (EDITOR_SAVEEXIT.equals(getParamAction())) {\n            setAction(ACTION_SAVEEXIT);         \n        } else if (EDITOR_EXIT.equals(getParamAction())) {\n            setAction(ACTION_EXIT);\n        } else if (EDITOR_CHANGE_BODY.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n            actionChangeBodyElement();\n        } else if (EDITOR_CHANGE_TEMPLATE.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n            actionChangeTemplate();\n        } else if (EDITOR_NEW_BODY.equals(getParamAction())) {\n            setAction(ACTION_SHOW);            \n            actionNewBody();\n        } else if (EDITOR_SHOW.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n        } else if (EDITOR_PREVIEW.equals(getParamAction())) {\n            setAction(ACTION_PREVIEW);\n        } else {\n            // initial call of editor, initialize page and page parameters\n            setAction(ACTION_DEFAULT);\n            try {\n                // lock resource if autolock is enabled in configuration\n                checkLock(getParamResource());\n                // create the temporary file\n                setParamTempfile(createTempFile());\n                // initialize a page object from the created temporary file\n                m_page = (CmsDefaultPage)CmsXmlPage.newInstance(getCms(), getCms().readFile(this.getParamTempfile()));\n            } catch (CmsException e) {\n                // error during initialization\n                try {\n                    showErrorPage(this, e, \"read\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            // set the initial body language & name if not given in request parameters\n            if (getParamBodylanguage() == null) {\n                initBodyElementLanguage();\n            }\n            if (getParamBodyname() == null) {\n                initBodyElementName();\n            }\n            // initialize the editor content\n            initContent();\n            // set template and page title  \n            setParamPagetemplate(getJsp().property(I_CmsConstants.C_PROPERTY_TEMPLATE, getParamTempfile(), \"\"));                    \n            setParamPagetitle(getJsp().property(I_CmsConstants.C_PROPERTY_TITLE, getParamTempfile(), \"\"));\n        } \n        \n        // prepare the content String for the editor\n        prepareContent(false);\n    }","id":59515,"modified_method":"/**\n     * @see org.opencms.workplace.CmsWorkplace#initWorkplaceRequestValues(org.opencms.workplace.CmsWorkplaceSettings, javax.servlet.http.HttpServletRequest)\n     */\n    protected void initWorkplaceRequestValues(CmsWorkplaceSettings settings, HttpServletRequest request) {\n        // fill the parameter values in the get/set methods\n        fillParamValues(request);\n        // set the dialog type\n        setParamDialogtype(EDITOR_TYPE);\n        \n        // Initialize a page object from the temporary file\n        if (getParamTempfile() != null && !\"null\".equals(getParamTempfile())) {\n            try {\n                m_file = getCms().readFile(this.getParamTempfile());\n                m_page = new CmsXmlPage().unmarshal(getCms(), m_file);\n            } catch (CmsException e) {\n                // error during initialization\n                try {\n                    showErrorPage(this, e, \"read\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n        }\n\n        // set the action for the JSP switch \n        if (EDITOR_SAVE.equals(getParamAction())) {\n            setAction(ACTION_SAVE);\n        } else if (EDITOR_SAVEEXIT.equals(getParamAction())) {\n            setAction(ACTION_SAVEEXIT);         \n        } else if (EDITOR_EXIT.equals(getParamAction())) {\n            setAction(ACTION_EXIT);\n        } else if (EDITOR_CHANGE_BODY.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n            actionChangeBodyElement();\n        } else if (EDITOR_CHANGE_TEMPLATE.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n            actionChangeTemplate();\n        } else if (EDITOR_NEW_BODY.equals(getParamAction())) {\n            setAction(ACTION_SHOW);            \n            actionNewBody();\n        } else if (EDITOR_SHOW.equals(getParamAction())) {\n            setAction(ACTION_SHOW);\n        } else if (EDITOR_PREVIEW.equals(getParamAction())) {\n            setAction(ACTION_PREVIEW);\n        } else {\n            // initial call of editor, initialize page and page parameters\n            setAction(ACTION_DEFAULT);\n            try {\n                // lock resource if autolock is enabled in configuration\n                checkLock(getParamResource());\n                // create the temporary file\n                setParamTempfile(createTempFile());\n                // initialize a page object from the created temporary file\n                m_file =  getCms().readFile(this.getParamTempfile());\n                m_page = new CmsXmlPage().unmarshal(getCms(), m_file);\n            } catch (CmsException e) {\n                // error during initialization\n                try {\n                    showErrorPage(this, e, \"read\");\n                } catch (JspException exc) {\n                    // ignore this exception\n                }\n            }\n            // set the initial body language & name if not given in request parameters\n            if (getParamBodylanguage() == null) {\n                initBodyElementLanguage();\n            }\n            if (getParamBodyname() == null) {\n                initBodyElementName();\n            }\n            // initialize the editor content\n            initContent();\n            // set template and page title  \n            setParamPagetemplate(getJsp().property(I_CmsConstants.C_PROPERTY_TEMPLATE, getParamTempfile(), \"\"));                    \n            setParamPagetitle(getJsp().property(I_CmsConstants.C_PROPERTY_TITLE, getParamTempfile(), \"\"));\n        } \n        \n        // prepare the content String for the editor\n        prepareContent(false);\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns all languages with available elements.<p>\n     * \n     * @return list of languages with available elements\n     */\n    public abstract Set getLanguages();","id":59516,"modified_method":"/**\n     * Returns all languages with available elements.<p>\n     * \n     * @return list of languages with available elements\n     */\n    public Set getLanguages() {\n    \n        Set languages = new HashSet();\n        for (Iterator i = getBookmarks().iterator(); i.hasNext();) {\n            String name = (String)i.next();\n            String language = name.substring(0, name.indexOf(\"_\"));\n            languages.add(language);\n        }\n        return languages;\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Constructor, creates a new CmsPage Object from the given CmsFile \n     * \n     * @param file the base file object to create a page from\n     */\n    public CmsXmlPage(CmsFile file) {       \n         super(file);\n         this.setContents(file.getContents());\n    }","id":59517,"modified_method":"/**\n     * Creates a new empty CmsXmlPage.<p>\n     * The page is initialized according to the minimal neccessary xml structure.\n     */\n    public CmsXmlPage() {\n\n        initDocument();\n        initBookmarks();\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns all available elements for a given language.<p>\n     * \n     * @param language language\n     * @return list of available elements\n     */\n    public abstract List getNames(String language);","id":59518,"modified_method":"/**\n     * Returns all available elements for a given language.<p>\n     * \n     * @param language language\n     * @return list of available elements\n     */\n    public List getNames(String language) {\n        \n        List names = new ArrayList();\n        for (Iterator i = getBookmarks().iterator(); i.hasNext();) {\n            String name = (String)i.next();\n            if (name.startsWith(language+\"_\")) {\n                names.add(name.substring(language.length()+1));\n            }\n        }\n        return names;\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Method to marshal (write) the xml contents into the underlying CmsFile.<p>\n     * This method must be implemented by the implementation class.\n     * \n     * @return the underlying file updated with the data from the implementation class.\n     * @throws CmsPageException if something goes wrong\n     */\n    public abstract CmsFile marshal()\n        throws CmsPageException;","id":59519,"modified_method":"/**\n     * Marshals (writes) the xml contents into the CmsFile.<p>\n     * The contents are written with the opencms default encoding.\n     * \n     * @param file the file to write the xml\n     * @return the file with the xml content\n     * @throws CmsPageException if something goes wrong\n     */\n    public CmsFile marshal(CmsFile file) \n        throws CmsPageException {\n        \n        return marshal(file, OpenCms.getDefaultEncoding());\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Method to unmarshal (read) the xml contents into the implementation class.<p>\n     * This method must be implemented by the implementation class.\n     * \n     * @param cms the cms object\n     * @return the concrete PageObject instanciated with the xml data\n     * @throws CmsPageException if something goes wrong\n     */\n    public abstract CmsXmlPage unmarshal(CmsObject cms) \n        throws CmsPageException;","id":59520,"modified_method":"/**\n     * Unmarshals (read) the xml contents of a file into the page.<p>\n     * \n     * @param cms the cms object\n     * @param file the file with xml data\n     * @return the concrete PageObject instanciated with the xml data\n     * @throws CmsPageException if something goes wrong\n     */\n    public CmsXmlPage unmarshal(CmsObject cms, CmsFile file) \n        throws CmsPageException {\n\n        byte[] content = file.getContents();\n        if (content.length > 0) {\n            \n            InputStream in = new ByteArrayInputStream(content);\n            try {    \n                return unmarshal(cms, new InputSource(in));\n            } finally {\n                try {\n                    in.close();\n                } catch (Exception exc) {\n                    // noop\n                }\n            }\n        }\n        \n        return this;\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the display content (processed data) of an element.<p>\n     * \n     * @param name name of the element\n     * @param language language of the element\n     * @return the display content\n     * \n     * @throws CmsPageException if something goes wrong\n     */\n    public abstract String getContent(String name, String language) throws CmsPageException;","id":59521,"modified_method":"/**\n     * Returns the display content (processed data) of an element.<p>\n     * \n     * @param cms the cms object\n     * @param name name of the element\n     * @param language language of the element\n     * @return the display content\n     * \n     * @throws CmsPageException if something goes wrong\n     */\n    public String getContent(CmsObject cms, String name, String language) \n        throws CmsPageException {\n\n        Element element = getBookmark(language+\"_\"+name);\n        Element displaydata = element.element(\"displaydata\");\n        String content = displaydata.getText();\n        \n        CmsLinkTable linkTable = getLinkTable(name, language);\n        if (!linkTable.isEmpty()) {\n            \n            CmsLinkProcessor macroReplacer = new CmsLinkProcessor(linkTable);\n        \n            try {\n            \n                content = macroReplacer.processLinks(cms, content);\n            } catch (Exception exc) {\n                throw new CmsPageException (\"HTML data processing failed\", exc);\n            }\n        } \n            \n        return content;\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the link table of an element.<p>\n     * \n     * @param name name of the element\n     * @param language language of the element\n     * @return the link table\n     */\n    public abstract CmsLinkTable getLinkTable(String name, String language);","id":59522,"modified_method":"/**\n     * Returns the link table of an element.<p>\n     * \n     * @param name name of the element\n     * @param language language of the element\n     * @return the link table\n     */\n    public CmsLinkTable getLinkTable(String name, String language) {\n\n        Element element = getBookmark(language+\"_\"+name);\n        Element links = element.element(\"links\");\n        \n        CmsLinkTable linkTable = new CmsLinkTable();\n        \n        for (Iterator i = links.elementIterator(\"link\"); i.hasNext();) {\n                    \n            Element lelem = (Element)i.next();\n            linkTable.addLink(lelem.attribute(\"name\").getValue(), \n                    lelem.attribute(\"type\").getValue(), \n                    lelem.attribute(\"target\").getValue(), \n                    Boolean.valueOf(lelem.attribute(\"internal\").getValue()).booleanValue());\n        }        \n        \n        return linkTable;\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.loader.I_CmsResourceLoader#service(com.opencms.file.CmsObject, com.opencms.file.CmsResource, javax.servlet.ServletRequest, javax.servlet.ServletResponse)\n     */\n    public void service(CmsObject cms, CmsResource file, ServletRequest req, ServletResponse res)\n        throws ServletException {\n          \n        I_CmsRequest cms_req = cms.getRequestContext().getRequest(); \n        String rnc = cms.getRequestContext().getEncoding().trim();\n        HttpServletRequest originalreq = (HttpServletRequest)cms_req.getOriginalRequest();\n        \n        try {\n            byte[] result = null;\n            String absolutePath = cms.readAbsolutePath(file);\n            CmsXmlPage page = CmsXmlPage.newInstance(cms, cms.readFile(absolutePath));\n            \n            // care about encoding issues\n            String dnc = OpenCms.getDefaultEncoding().trim();\n            String enc = cms.readProperty(cms.readAbsolutePath(page), I_CmsConstants.C_PROPERTY_CONTENT_ENCODING, true, dnc).trim();\n            \n            cms.getRequestContext().setEncoding(enc);      \n            if (DEBUG > 1) {\n                System.err.println(\"CmsXmlPageLoader.service(): Encodig set to \" + cms.getRequestContext().getEncoding());\n                System.err.println(\"CmsXmlPageLoader.service(): Uri set to \" + cms.getRequestContext().getUri());\n            }\n            \n            // get the element selector\n            String elementName = req.getParameter(C_TEMPLATE_ELEMENT);\n            \n            // check the current locales\n            String localeProp = OpenCms.getUserDefaultLanguage();\n            \n            // get the appropriate content\n            result = page.getContent(elementName, localeProp).getBytes(); \n            \n            // append the result to the output stream\n            if (result != null) {\n                // Encoding project:\n                // The byte array must internally be encoded in the OpenCms\n                // default encoding. It will be converted to the requested encoding \n                // on the most top-level JSP element\n                result = Encoder.changeEncoding(result, enc, dnc);\n                if (DEBUG > 1) {\n                    System.err.println(\"CmsXmlPageLoader.service(): encoding=\" + enc + \" requestEncoding=\" + rnc + \" defaultEncoding=\" + dnc);\n                }\n                res.getOutputStream().write(result);\n            }        \n        } catch (Throwable t) {\n            if (DEBUG > 0) {\n                t.printStackTrace(System.err);\n            }\n            throw new ServletException(\"Error in CmsXmlPageLoader while processing \" + cms.readAbsolutePath(file), t);       \n        } finally {\n            // restore the context settings\n            cms_req.setOriginalRequest(originalreq);\n            cms.getRequestContext().setEncoding(rnc);\n        \n            if (DEBUG > 1) {\n                System.err.println(\"CmsXmlPageLoader.service(): Encodig reset to \" + cms.getRequestContext().getEncoding());\n                System.err.println(\"CmsXmlPageLoader.service(): Uri reset to \" + cms.getRequestContext().getUri());\n            }\n        }\n    }","id":59523,"modified_method":"/**\n     * @see org.opencms.loader.I_CmsResourceLoader#service(com.opencms.file.CmsObject, com.opencms.file.CmsResource, javax.servlet.ServletRequest, javax.servlet.ServletResponse)\n     */\n    public void service(CmsObject cms, CmsResource file, ServletRequest req, ServletResponse res)\n        throws ServletException {\n          \n        I_CmsRequest cms_req = cms.getRequestContext().getRequest(); \n        String rnc = cms.getRequestContext().getEncoding().trim();\n        HttpServletRequest originalreq = (HttpServletRequest)cms_req.getOriginalRequest();\n        \n        try {\n            byte[] result = null;\n            String absolutePath = cms.readAbsolutePath(file);\n            CmsFile xmlFile = cms.readFile(absolutePath);\n            CmsXmlPage page = new CmsXmlPage().unmarshal(cms, xmlFile);\n            \n            // care about encoding issues\n            String dnc = OpenCms.getDefaultEncoding().trim();\n            String enc = cms.readProperty(cms.readAbsolutePath(xmlFile), I_CmsConstants.C_PROPERTY_CONTENT_ENCODING, true, dnc).trim();\n            \n            cms.getRequestContext().setEncoding(enc);      \n            if (DEBUG > 1) {\n                System.err.println(\"CmsXmlPageLoader.service(): Encodig set to \" + cms.getRequestContext().getEncoding());\n                System.err.println(\"CmsXmlPageLoader.service(): Uri set to \" + cms.getRequestContext().getUri());\n            }\n            \n            // get the element selector\n            String elementName = req.getParameter(C_TEMPLATE_ELEMENT);\n            \n            // check the current locales\n            String localeProp = OpenCms.getUserDefaultLanguage();\n            \n            // get the appropriate content\n            result = page.getContent(cms, elementName, localeProp).getBytes(); \n            \n            // append the result to the output stream\n            if (result != null) {\n                // Encoding project:\n                // The byte array must internally be encoded in the OpenCms\n                // default encoding. It will be converted to the requested encoding \n                // on the most top-level JSP element\n                result = Encoder.changeEncoding(result, enc, dnc);\n                if (DEBUG > 1) {\n                    System.err.println(\"CmsXmlPageLoader.service(): encoding=\" + enc + \" requestEncoding=\" + rnc + \" defaultEncoding=\" + dnc);\n                }\n                res.getOutputStream().write(result);\n            }        \n        } catch (Throwable t) {\n            if (DEBUG > 0) {\n                t.printStackTrace(System.err);\n            }\n            throw new ServletException(\"Error in CmsXmlPageLoader while processing \" + cms.readAbsolutePath(file), t);       \n        } finally {\n            // restore the context settings\n            cms_req.setOriginalRequest(originalreq);\n            cms.getRequestContext().setEncoding(rnc);\n        \n            if (DEBUG > 1) {\n                System.err.println(\"CmsXmlPageLoader.service(): Encodig reset to \" + cms.getRequestContext().getEncoding());\n                System.err.println(\"CmsXmlPageLoader.service(): Uri reset to \" + cms.getRequestContext().getUri());\n            }\n        }\n    }","commit_id":"1e4f6109338e5eb1443ff61e7480fb562ef0d3be","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public SearchContainer getCategoriesSearchContainer()\n\t\tthrows PortalException {\n\n\t\tif (_categoriesSearchContainer != null) {\n\t\t\treturn _categoriesSearchContainer;\n\t\t}\n\n\t\tString emptyResultsMessage = \"there-are-no-categories.\";\n\n\t\tif (showCategoriesAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-categories.-you-can-add-a-category-by-clicking-\" +\n\t\t\t\t\t\"the-plus-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tSearchContainer categoriesSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, getIteratorURL(), null, emptyResultsMessage);\n\n\t\tif (Validator.isNull(getKeywords())) {\n\t\t\tif (showCategoriesAddButton()) {\n\t\t\t\tcategoriesSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcategoriesSearchContainer.setSearch(true);\n\t\t}\n\n\t\tcategoriesSearchContainer.setOrderByCol(getOrderByCol());\n\n\t\tboolean orderByAsc = false;\n\n\t\tString orderByType = getOrderByType();\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<AssetCategory> orderByComparator =\n\t\t\tnew AssetCategoryCreateDateComparator(orderByAsc);\n\n\t\tcategoriesSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\tcategoriesSearchContainer.setOrderByType(orderByType);\n\n\t\tEmptyOnClickRowChecker emptyOnClickRowChecker =\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse);\n\n\t\tStringBundler sb = new StringBundler(7);\n\n\t\tsb.append(\"^(?!.*\");\n\t\tsb.append(_renderResponse.getNamespace());\n\t\tsb.append(\"redirect).*(/vocabulary/\");\n\t\tsb.append(getVocabularyId());\n\t\tsb.append(\"/category/\");\n\t\tsb.append(getCategoryId());\n\t\tsb.append(\")\");\n\n\t\temptyOnClickRowChecker.setRememberCheckBoxStateURLRegex(sb.toString());\n\n\t\tcategoriesSearchContainer.setRowChecker(emptyOnClickRowChecker);\n\n\t\tList<AssetCategory> categories = null;\n\t\tint categoriesCount = 0;\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tif (Validator.isNotNull(getKeywords())) {\n\t\t\tSort sort = new Sort(\"createDate\", Sort.LONG_TYPE, orderByAsc);\n\n\t\t\tAssetCategoryDisplay assetCategoryDisplay =\n\t\t\t\tAssetCategoryServiceUtil.searchCategoriesDisplay(\n\t\t\t\t\tscopeGroupId, getKeywords(), getVocabularyId(),\n\t\t\t\t\tgetCategoryId(), categoriesSearchContainer.getStart(),\n\t\t\t\t\tcategoriesSearchContainer.getEnd(), sort);\n\n\t\t\tcategoriesCount = assetCategoryDisplay.getTotal();\n\n\t\t\tcategoriesSearchContainer.setTotal(categoriesCount);\n\n\t\t\tcategories = assetCategoryDisplay.getCategories();\n\t\t}\n\t\telse {\n\t\t\tcategoriesCount =\n\t\t\t\tAssetCategoryServiceUtil.getVocabularyCategoriesCount(\n\t\t\t\t\tscopeGroupId, getCategoryId(), getVocabularyId());\n\n\t\t\tcategoriesSearchContainer.setTotal(categoriesCount);\n\n\t\t\tcategories = AssetCategoryServiceUtil.getVocabularyCategories(\n\t\t\t\tscopeGroupId, getCategoryId(), getVocabularyId(),\n\t\t\t\tcategoriesSearchContainer.getStart(),\n\t\t\t\tcategoriesSearchContainer.getEnd(),\n\t\t\t\tcategoriesSearchContainer.getOrderByComparator());\n\t\t}\n\n\t\tcategoriesSearchContainer.setResults(categories);\n\n\t\t_categoriesSearchContainer = categoriesSearchContainer;\n\n\t\treturn _categoriesSearchContainer;\n\t}","id":59524,"modified_method":"public SearchContainer getCategoriesSearchContainer()\n\t\tthrows PortalException {\n\n\t\tif (_categoriesSearchContainer != null) {\n\t\t\treturn _categoriesSearchContainer;\n\t\t}\n\n\t\tSearchContainer categoriesSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, getIteratorURL(), null, \"there-are-no-categories\");\n\n\t\tif (Validator.isNull(getKeywords())) {\n\t\t\tif (showCategoriesAddButton()) {\n\t\t\t\tcategoriesSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"there-are-no-categories.-you-can-add-a-category-by-\" +\n\t\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\");\n\t\t\t\tcategoriesSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcategoriesSearchContainer.setSearch(true);\n\t\t}\n\n\t\tcategoriesSearchContainer.setOrderByCol(getOrderByCol());\n\n\t\tboolean orderByAsc = false;\n\n\t\tString orderByType = getOrderByType();\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<AssetCategory> orderByComparator =\n\t\t\tnew AssetCategoryCreateDateComparator(orderByAsc);\n\n\t\tcategoriesSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\tcategoriesSearchContainer.setOrderByType(orderByType);\n\n\t\tEmptyOnClickRowChecker emptyOnClickRowChecker =\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse);\n\n\t\tStringBundler sb = new StringBundler(7);\n\n\t\tsb.append(\"^(?!.*\");\n\t\tsb.append(_renderResponse.getNamespace());\n\t\tsb.append(\"redirect).*(/vocabulary/\");\n\t\tsb.append(getVocabularyId());\n\t\tsb.append(\"/category/\");\n\t\tsb.append(getCategoryId());\n\t\tsb.append(\")\");\n\n\t\temptyOnClickRowChecker.setRememberCheckBoxStateURLRegex(sb.toString());\n\n\t\tcategoriesSearchContainer.setRowChecker(emptyOnClickRowChecker);\n\n\t\tList<AssetCategory> categories = null;\n\t\tint categoriesCount = 0;\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tif (Validator.isNotNull(getKeywords())) {\n\t\t\tSort sort = new Sort(\"createDate\", Sort.LONG_TYPE, orderByAsc);\n\n\t\t\tAssetCategoryDisplay assetCategoryDisplay =\n\t\t\t\tAssetCategoryServiceUtil.searchCategoriesDisplay(\n\t\t\t\t\tscopeGroupId, getKeywords(), getVocabularyId(),\n\t\t\t\t\tgetCategoryId(), categoriesSearchContainer.getStart(),\n\t\t\t\t\tcategoriesSearchContainer.getEnd(), sort);\n\n\t\t\tcategoriesCount = assetCategoryDisplay.getTotal();\n\n\t\t\tcategoriesSearchContainer.setTotal(categoriesCount);\n\n\t\t\tcategories = assetCategoryDisplay.getCategories();\n\t\t}\n\t\telse {\n\t\t\tcategoriesCount =\n\t\t\t\tAssetCategoryServiceUtil.getVocabularyCategoriesCount(\n\t\t\t\t\tscopeGroupId, getCategoryId(), getVocabularyId());\n\n\t\t\tcategoriesSearchContainer.setTotal(categoriesCount);\n\n\t\t\tcategories = AssetCategoryServiceUtil.getVocabularyCategories(\n\t\t\t\tscopeGroupId, getCategoryId(), getVocabularyId(),\n\t\t\t\tcategoriesSearchContainer.getStart(),\n\t\t\t\tcategoriesSearchContainer.getEnd(),\n\t\t\t\tcategoriesSearchContainer.getOrderByComparator());\n\t\t}\n\n\t\tcategoriesSearchContainer.setResults(categories);\n\n\t\t_categoriesSearchContainer = categoriesSearchContainer;\n\n\t\treturn _categoriesSearchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SearchContainer getVocabulariesSearchContainer()\n\t\tthrows PortalException {\n\n\t\tif (_vocabulariesSearchContainer != null) {\n\t\t\treturn _vocabulariesSearchContainer;\n\t\t}\n\n\t\tString emptyResultsMessage = \"there-are-no-vocabularies.\";\n\n\t\tif (showVocabulariesAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-vocabularies.-you-can-add-a-vocabulary-by\" +\n\t\t\t\t\t\"-clicking-the-plus-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tSearchContainer vocabulariesSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\temptyResultsMessage);\n\n\t\tString keywords = getKeywords();\n\n\t\tif (Validator.isNull(keywords)) {\n\t\t\tif (showVocabulariesAddButton()) {\n\t\t\t\tvocabulariesSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvocabulariesSearchContainer.setSearch(true);\n\t\t}\n\n\t\tvocabulariesSearchContainer.setOrderByCol(getOrderByCol());\n\n\t\tString orderByType = getOrderByType();\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<AssetVocabulary> orderByComparator =\n\t\t\tnew AssetVocabularyCreateDateComparator(orderByAsc);\n\n\t\tvocabulariesSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\tvocabulariesSearchContainer.setOrderByType(orderByType);\n\n\t\tEmptyOnClickRowChecker emptyOnClickRowChecker =\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse);\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(\"^(?!.*\");\n\t\tsb.append(_renderResponse.getNamespace());\n\t\tsb.append(\"redirect).*(/vocabulary/\");\n\t\tsb.append(getVocabularyId());\n\t\tsb.append(\")\");\n\n\t\temptyOnClickRowChecker.setRememberCheckBoxStateURLRegex(sb.toString());\n\n\t\tvocabulariesSearchContainer.setRowChecker(emptyOnClickRowChecker);\n\n\t\tList<AssetVocabulary> vocabularies = null;\n\t\tint vocabulariesCount = 0;\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tif (Validator.isNotNull(keywords)) {\n\t\t\tSort sort = new Sort(\"createDate\", Sort.LONG_TYPE, orderByAsc);\n\n\t\t\tAssetVocabularyDisplay assetVocabularyDisplay =\n\t\t\t\tAssetVocabularyServiceUtil.searchVocabulariesDisplay(\n\t\t\t\t\tscopeGroupId, keywords, true,\n\t\t\t\t\tvocabulariesSearchContainer.getStart(),\n\t\t\t\t\tvocabulariesSearchContainer.getEnd(), sort);\n\n\t\t\tvocabulariesCount = assetVocabularyDisplay.getTotal();\n\n\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\n\t\t\tvocabularies = assetVocabularyDisplay.getVocabularies();\n\t\t}\n\t\telse {\n\t\t\tvocabulariesCount =\n\t\t\t\tAssetVocabularyServiceUtil.getGroupVocabulariesCount(\n\t\t\t\t\tscopeGroupId);\n\n\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\n\t\t\tvocabularies = AssetVocabularyServiceUtil.getGroupVocabularies(\n\t\t\t\tscopeGroupId, true, vocabulariesSearchContainer.getStart(),\n\t\t\t\tvocabulariesSearchContainer.getEnd(),\n\t\t\t\tvocabulariesSearchContainer.getOrderByComparator());\n\n\t\t\tif (vocabulariesCount == 0) {\n\t\t\t\tvocabulariesCount =\n\t\t\t\t\tAssetVocabularyServiceUtil.getGroupVocabulariesCount(\n\t\t\t\t\t\tscopeGroupId);\n\n\t\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\t\t\t}\n\t\t}\n\n\t\tvocabulariesSearchContainer.setResults(vocabularies);\n\n\t\t_vocabulariesSearchContainer = vocabulariesSearchContainer;\n\n\t\treturn _vocabulariesSearchContainer;\n\t}","id":59525,"modified_method":"public SearchContainer getVocabulariesSearchContainer()\n\t\tthrows PortalException {\n\n\t\tif (_vocabulariesSearchContainer != null) {\n\t\t\treturn _vocabulariesSearchContainer;\n\t\t}\n\n\t\tSearchContainer vocabulariesSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\t\"there-are-no-vocabularies\");\n\n\t\tString keywords = getKeywords();\n\n\t\tif (Validator.isNull(keywords)) {\n\t\t\tif (showVocabulariesAddButton()) {\n\t\t\t\tvocabulariesSearchContainer.setEmptyResultsMessage(\n\t\t\t\t\t\"there-are-no-vocabularies.-you-can-add-a-vocabulary-by\" +\n\t\t\t\t\t\t\"-clicking-the-plus-button-on-the-bottom-right-corner\");\n\t\t\t\tvocabulariesSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvocabulariesSearchContainer.setSearch(true);\n\t\t}\n\n\t\tvocabulariesSearchContainer.setOrderByCol(getOrderByCol());\n\n\t\tString orderByType = getOrderByType();\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<AssetVocabulary> orderByComparator =\n\t\t\tnew AssetVocabularyCreateDateComparator(orderByAsc);\n\n\t\tvocabulariesSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\tvocabulariesSearchContainer.setOrderByType(orderByType);\n\n\t\tEmptyOnClickRowChecker emptyOnClickRowChecker =\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse);\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(\"^(?!.*\");\n\t\tsb.append(_renderResponse.getNamespace());\n\t\tsb.append(\"redirect).*(/vocabulary/\");\n\t\tsb.append(getVocabularyId());\n\t\tsb.append(\")\");\n\n\t\temptyOnClickRowChecker.setRememberCheckBoxStateURLRegex(sb.toString());\n\n\t\tvocabulariesSearchContainer.setRowChecker(emptyOnClickRowChecker);\n\n\t\tList<AssetVocabulary> vocabularies = null;\n\t\tint vocabulariesCount = 0;\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tif (Validator.isNotNull(keywords)) {\n\t\t\tSort sort = new Sort(\"createDate\", Sort.LONG_TYPE, orderByAsc);\n\n\t\t\tAssetVocabularyDisplay assetVocabularyDisplay =\n\t\t\t\tAssetVocabularyServiceUtil.searchVocabulariesDisplay(\n\t\t\t\t\tscopeGroupId, keywords, true,\n\t\t\t\t\tvocabulariesSearchContainer.getStart(),\n\t\t\t\t\tvocabulariesSearchContainer.getEnd(), sort);\n\n\t\t\tvocabulariesCount = assetVocabularyDisplay.getTotal();\n\n\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\n\t\t\tvocabularies = assetVocabularyDisplay.getVocabularies();\n\t\t}\n\t\telse {\n\t\t\tvocabulariesCount =\n\t\t\t\tAssetVocabularyServiceUtil.getGroupVocabulariesCount(\n\t\t\t\t\tscopeGroupId);\n\n\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\n\t\t\tvocabularies = AssetVocabularyServiceUtil.getGroupVocabularies(\n\t\t\t\tscopeGroupId, true, vocabulariesSearchContainer.getStart(),\n\t\t\t\tvocabulariesSearchContainer.getEnd(),\n\t\t\t\tvocabulariesSearchContainer.getOrderByComparator());\n\n\t\t\tif (vocabulariesCount == 0) {\n\t\t\t\tvocabulariesCount =\n\t\t\t\t\tAssetVocabularyServiceUtil.getGroupVocabulariesCount(\n\t\t\t\t\t\tscopeGroupId);\n\n\t\t\t\tvocabulariesSearchContainer.setTotal(vocabulariesCount);\n\t\t\t}\n\t\t}\n\n\t\tvocabulariesSearchContainer.setResults(vocabularies);\n\n\t\t_vocabulariesSearchContainer = vocabulariesSearchContainer;\n\n\t\treturn _vocabulariesSearchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SearchContainer getTagsSearchContainer() {\n\t\tif (_tagsSearchContainer != null) {\n\t\t\treturn _tagsSearchContainer;\n\t\t}\n\n\t\tString emptyResultsMessage = \"there-are-no-tags.\";\n\n\t\tif (showAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-tags.-you-can-add-a-tag-by-clicking-the-plus\" +\n\t\t\t\t\t\"-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tSearchContainer tagsSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\temptyResultsMessage);\n\n\t\tString keywords = getKeywords();\n\n\t\tif (Validator.isNull(keywords)) {\n\t\t\tif (showAddButton()) {\n\t\t\t\ttagsSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttagsSearchContainer.setSearch(true);\n\t\t}\n\n\t\tString orderByCol = getOrderByCol();\n\n\t\ttagsSearchContainer.setOrderByCol(orderByCol);\n\n\t\tOrderByComparator<AssetTag> orderByComparator = null;\n\n\t\tboolean orderByAsc = false;\n\n\t\tString orderByType = getOrderByType();\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tif (orderByCol.equals(\"name\")) {\n\t\t\torderByComparator = new AssetTagNameComparator(orderByAsc);\n\t\t}\n\t\telse if (orderByCol.equals(\"usages\")) {\n\t\t\torderByComparator = new AssetTagAssetCountComparator(orderByAsc);\n\t\t}\n\n\t\ttagsSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\ttagsSearchContainer.setOrderByType(orderByType);\n\n\t\ttagsSearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tint tagsCount = AssetTagServiceUtil.getTagsCount(\n\t\t\tscopeGroupId, keywords);\n\n\t\ttagsSearchContainer.setTotal(tagsCount);\n\n\t\tList<AssetTag> tags = AssetTagServiceUtil.getTags(\n\t\t\tscopeGroupId, keywords, tagsSearchContainer.getStart(),\n\t\t\ttagsSearchContainer.getEnd(),\n\t\t\ttagsSearchContainer.getOrderByComparator());\n\n\t\ttagsSearchContainer.setResults(tags);\n\n\t\t_tagsSearchContainer = tagsSearchContainer;\n\n\t\treturn _tagsSearchContainer;\n\t}","id":59526,"modified_method":"public SearchContainer getTagsSearchContainer() {\n\t\tif (_tagsSearchContainer != null) {\n\t\t\treturn _tagsSearchContainer;\n\t\t}\n\n\t\tSearchContainer tagsSearchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\t\"there-are-no-tags\");\n\n\t\tString keywords = getKeywords();\n\n\t\tif (Validator.isNull(keywords)) {\n\t\t\tif (showAddButton()) {\n\t\t\t\ttagsSearchContainer.setEmptyResultsMessage(\n\t\t\t\t\t\"there-are-no-tags.-you-can-add-a-tag-by-clicking-the-\" +\n\t\t\t\t\t\t\"plus-button-on-the-bottom-right-corner\");\n\t\t\t\ttagsSearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttagsSearchContainer.setSearch(true);\n\t\t}\n\n\t\tString orderByCol = getOrderByCol();\n\n\t\ttagsSearchContainer.setOrderByCol(orderByCol);\n\n\t\tOrderByComparator<AssetTag> orderByComparator = null;\n\n\t\tboolean orderByAsc = false;\n\n\t\tString orderByType = getOrderByType();\n\n\t\tif (orderByType.equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tif (orderByCol.equals(\"name\")) {\n\t\t\torderByComparator = new AssetTagNameComparator(orderByAsc);\n\t\t}\n\t\telse if (orderByCol.equals(\"usages\")) {\n\t\t\torderByComparator = new AssetTagAssetCountComparator(orderByAsc);\n\t\t}\n\n\t\ttagsSearchContainer.setOrderByComparator(orderByComparator);\n\n\t\ttagsSearchContainer.setOrderByType(orderByType);\n\n\t\ttagsSearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong scopeGroupId = themeDisplay.getScopeGroupId();\n\n\t\tint tagsCount = AssetTagServiceUtil.getTagsCount(\n\t\t\tscopeGroupId, keywords);\n\n\t\ttagsSearchContainer.setTotal(tagsCount);\n\n\t\tList<AssetTag> tags = AssetTagServiceUtil.getTags(\n\t\t\tscopeGroupId, keywords, tagsSearchContainer.getStart(),\n\t\t\ttagsSearchContainer.getEnd(),\n\t\t\ttagsSearchContainer.getOrderByComparator());\n\n\t\ttagsSearchContainer.setResults(tags);\n\n\t\t_tagsSearchContainer = tagsSearchContainer;\n\n\t\treturn _tagsSearchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SearchContainer getSearchContainer() {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tString emptyResultsMessage = \"there-are-no-page-templates.\";\n\n\t\tif (showAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-page-templates.-you-can-add-a-page-template-by-\" +\n\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tSearchContainer searchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\temptyResultsMessage);\n\n\t\tif (showAddButton()) {\n\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t}\n\n\t\tsearchContainer.setId(\"layoutPrototype\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (getOrderByType().equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<LayoutPrototype> orderByComparator =\n\t\t\tnew LayoutPrototypeCreateDateComparator(orderByAsc);\n\n\t\tsearchContainer.setOrderByCol(getOrderByCol());\n\t\tsearchContainer.setOrderByComparator(orderByComparator);\n\t\tsearchContainer.setOrderByType(getOrderByType());\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = LayoutPrototypeLocalServiceUtil.search(\n\t\t\tthemeDisplay.getCompanyId(), getActive(),\n\t\t\tsearchContainer.getStart(), searchContainer.getEnd(),\n\t\t\tsearchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","id":59527,"modified_method":"public SearchContainer getSearchContainer() {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tSearchContainer searchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\t\"there-are-no-page-templates\");\n\n\t\tif (showAddButton()) {\n\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\"there-are-no-page-templates.-you-can-add-a-page-template-by-\" +\n\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\");\n\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t}\n\n\t\tsearchContainer.setId(\"layoutPrototype\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (getOrderByType().equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<LayoutPrototype> orderByComparator =\n\t\t\tnew LayoutPrototypeCreateDateComparator(orderByAsc);\n\n\t\tsearchContainer.setOrderByCol(getOrderByCol());\n\t\tsearchContainer.setOrderByComparator(orderByComparator);\n\t\tsearchContainer.setOrderByType(getOrderByType());\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = LayoutPrototypeLocalServiceUtil.search(\n\t\t\tthemeDisplay.getCompanyId(), getActive(),\n\t\t\tsearchContainer.getStart(), searchContainer.getEnd(),\n\t\t\tsearchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SearchContainer getSearchContainer() {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tString emptyResultsMessage = \"there-are-no-site-templates.\";\n\n\t\tif (showAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-site-templates.-you-can-add-a-site-template-by-\" +\n\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tSearchContainer searchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\temptyResultsMessage);\n\n\t\tif (showAddButton()) {\n\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t}\n\n\t\tsearchContainer.setId(\"layoutSetPrototype\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (getOrderByType().equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<LayoutSetPrototype> orderByComparator =\n\t\t\tnew LayoutSetPrototypeCreateDateComparator(orderByAsc);\n\n\t\tsearchContainer.setOrderByCol(getOrderByCol());\n\t\tsearchContainer.setOrderByComparator(orderByComparator);\n\t\tsearchContainer.setOrderByType(getOrderByType());\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = LayoutSetPrototypeLocalServiceUtil.search(\n\t\t\tthemeDisplay.getCompanyId(), getActive(),\n\t\t\tsearchContainer.getStart(), searchContainer.getEnd(),\n\t\t\tsearchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","id":59528,"modified_method":"public SearchContainer getSearchContainer() {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tSearchContainer searchContainer = new SearchContainer(\n\t\t\t_renderRequest, _renderResponse.createRenderURL(), null,\n\t\t\t\"there-are-no-site-templates\");\n\n\t\tif (showAddButton()) {\n\t\t\tsearchContainer.setEmptyResultsMessage(\n\t\t\t\t\"there-are-no-site-templates.-you-can-add-a-site-template-by-\" +\n\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\");\n\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t}\n\n\t\tsearchContainer.setId(\"layoutSetPrototype\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tboolean orderByAsc = false;\n\n\t\tif (getOrderByType().equals(\"asc\")) {\n\t\t\torderByAsc = true;\n\t\t}\n\n\t\tOrderByComparator<LayoutSetPrototype> orderByComparator =\n\t\t\tnew LayoutSetPrototypeCreateDateComparator(orderByAsc);\n\n\t\tsearchContainer.setOrderByCol(getOrderByCol());\n\t\tsearchContainer.setOrderByComparator(orderByComparator);\n\t\tsearchContainer.setOrderByType(getOrderByType());\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = LayoutSetPrototypeLocalServiceUtil.search(\n\t\t\tthemeDisplay.getCompanyId(), getActive(),\n\t\t\tsearchContainer.getStart(), searchContainer.getEnd(),\n\t\t\tsearchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SearchContainer getSearchContainer() throws PortalException {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tSearchContainer searchContainer = new TeamSearch(\n\t\t\t_renderRequest, getPortletURL());\n\n\t\tString emptyResultsMessage = \"there-are-no-site-teams.\";\n\n\t\tif (showAddButton()) {\n\t\t\temptyResultsMessage =\n\t\t\t\t\"there-are-no-site-teams.-you-can-add-a-site-team-by-\" +\n\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\";\n\t\t}\n\n\t\tsearchContainer.setEmptyResultsMessage(emptyResultsMessage);\n\n\t\tif (Validator.isNull(getKeywords())) {\n\t\t\tif (showAddButton()) {\n\t\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsearchContainer.setSearch(true);\n\t\t}\n\n\t\tsearchContainer.setId(\"teams\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = TeamServiceUtil.search(\n\t\t\tthemeDisplay.getScopeGroupId(), getKeywords(), getKeywords(),\n\t\t\tnew LinkedHashMap<String, Object>(), searchContainer.getStart(),\n\t\t\tsearchContainer.getEnd(), searchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","id":59529,"modified_method":"public SearchContainer getSearchContainer() throws PortalException {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)_request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tSearchContainer searchContainer = new TeamSearch(\n\t\t\t_renderRequest, getPortletURL());\n\n\t\tsearchContainer.setEmptyResultsMessage(\"there-are-no-site-teams\");\n\n\t\tif (Validator.isNull(getKeywords())) {\n\t\t\tif (showAddButton()) {\n\t\t\t\tsearchContainer.setEmptyResultsMessage(\n\t\t\t\t\t\"there-are-no-site-teams.-you-can-add-a-site-team-by-\" +\n\t\t\t\t\t\t\"clicking-the-plus-button-on-the-bottom-right-corner\");\n\t\t\t\tsearchContainer.setEmptyResultsMessageCssClass(\n\t\t\t\t\t\"taglib-empty-result-message-header-has-plus-btn\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsearchContainer.setSearch(true);\n\t\t}\n\n\t\tsearchContainer.setId(\"teams\");\n\t\tsearchContainer.setRowChecker(\n\t\t\tnew EmptyOnClickRowChecker(_renderResponse));\n\n\t\tsearchContainer.setTotal(getTotal());\n\n\t\tList results = TeamServiceUtil.search(\n\t\t\tthemeDisplay.getScopeGroupId(), getKeywords(), getKeywords(),\n\t\t\tnew LinkedHashMap<String, Object>(), searchContainer.getStart(),\n\t\t\tsearchContainer.getEnd(), searchContainer.getOrderByComparator());\n\n\t\tsearchContainer.setResults(results);\n\n\t\treturn searchContainer;\n\t}","commit_id":"3dc73db4bfb3392307f4ce6f931852700443c910","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private boolean processDeclarationsNoGuess(PsiScopeProcessor processor, PsiSubstitutor substitutor, PsiElement lastParent, PsiElement place){\n    processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER, this);\n    final ElementClassHint classHint = processor.getHint(ElementClassHint.class);\n    final NameHint nameHint = processor.getHint(NameHint.class);\n    final String name = nameHint != null ? nameHint.getName() : null;\n    if (classHint == null || classHint.shouldProcess(PsiClass.class)){\n      if(processor instanceof ClassResolverProcessor){\n        // Some speedup\n        final JavaResolveResult[] guessClass = getGuess(name);\n        if(guessClass != null){\n          ((ClassResolverProcessor) processor).forceResult(guessClass);\n          return false;\n        }\n      }\n\n      final PsiClass[] classes = getClasses();\n      for (PsiClass aClass : classes) {\n        if (!processor.execute(aClass, substitutor)) return false;\n      }\n\n      PsiImportList importList = getImportList();\n      PsiImportStatement[] importStatements = importList.getImportStatements();\n\n      //Single-type processing\n      for (PsiImportStatement statement : importStatements) {\n        if (!statement.isOnDemand()) {\n          if (nameHint != null) {\n            String refText = statement.getQualifiedName();\n            if (refText == null || !refText.endsWith(name)) continue;\n          }\n\n          PsiElement resolved = statement.resolve();\n          if (resolved instanceof PsiClass) {\n            processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, statement);\n            if (!processor.execute(resolved, substitutor)) return false;\n          }\n        }\n      }\n      processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n\n      // check in current package\n      String packageName = getPackageName();\n      PsiPackage aPackage = myManager.findPackage(packageName);\n      if (aPackage != null){\n        if (!PsiScopesUtil.processScope(aPackage, processor, substitutor, null, place)) {\n          return false;\n        }\n      }\n\n      //On demand processing\n      for (PsiImportStatement statement : importStatements) {\n        if (statement.isOnDemand()) {\n          PsiElement resolved = statement.resolve();\n          if (resolved != null) {\n            processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, statement);\n            processOnDemandTarget(resolved, processor, substitutor, place);\n          }\n        }\n      }\n      processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n\n      PsiJavaCodeReferenceElement[] implicitlyImported = getImplicitlyImportedPackageReferences();\n      for (PsiJavaCodeReferenceElement aImplicitlyImported : implicitlyImported) {\n        PsiElement resolved = aImplicitlyImported.resolve();\n        if (resolved != null) {\n          processOnDemandTarget(resolved, processor, substitutor, place);\n        }\n      }\n    }\n\n    if(classHint == null || classHint.shouldProcess(PsiPackage.class)){\n      final PsiPackage rootPackage = getManager().findPackage(\"\");\n      if(rootPackage != null) rootPackage.processDeclarations(processor, substitutor, null, place);\n    }\n\n    // todo[dsl] class processing\n    final PsiImportList importList = getImportList();\n    final PsiImportStaticStatement[] importStaticStatements = importList.getImportStaticStatements();\n    if (importStaticStatements.length > 0) {\n      final StaticImportFilteringProcessor staticImportProcessor = new StaticImportFilteringProcessor(processor, null);\n\n      // single member processing\n      for (PsiImportStaticStatement importStaticStatement : importStaticStatements) {\n        if (!importStaticStatement.isOnDemand()) {\n          final String referenceName = importStaticStatement.getReferenceName();\n          final PsiClass targetElement = importStaticStatement.resolveTargetClass();\n          if (targetElement != null) {\n            staticImportProcessor.setNameToFilter(referenceName);\n            staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, importStaticStatement);\n            final boolean result = targetElement.processDeclarations(staticImportProcessor, substitutor, lastParent, place);\n            if (!result) return false;\n          }\n        }\n      }\n\n      // on-demand processing\n      for (PsiImportStaticStatement importStaticStatement : importStaticStatements) {\n        if (importStaticStatement.isOnDemand()) {\n          final PsiClass targetElement = importStaticStatement.resolveTargetClass();\n          if (targetElement != null) {\n            staticImportProcessor.setNameToFilter(null);\n            staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, importStaticStatement);\n            final boolean result = targetElement.processDeclarations(staticImportProcessor, substitutor, lastParent, place);\n            if (!result) return false;\n          }\n        }\n      }\n\n      staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n    }\n\n    return true;\n  }","id":59530,"modified_method":"private boolean processDeclarationsNoGuess(PsiScopeProcessor processor, PsiSubstitutor substitutor, PsiElement lastParent, PsiElement place){\n    processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER, this);\n    final ElementClassHint classHint = processor.getHint(ElementClassHint.class);\n    final NameHint nameHint = processor.getHint(NameHint.class);\n    final String name = nameHint != null ? nameHint.getName() : null;\n    if (classHint == null || classHint.shouldProcess(PsiClass.class)){\n      if(processor instanceof ClassResolverProcessor){\n        // Some speedup\n        final JavaResolveResult[] guessClass = getGuess(name);\n        if(guessClass != null){\n          ((ClassResolverProcessor) processor).forceResult(guessClass);\n          return false;\n        }\n      }\n\n      final PsiClass[] classes = getClasses();\n      for (PsiClass aClass : classes) {\n        if (!processor.execute(aClass, substitutor)) return false;\n      }\n\n      PsiImportList importList = getImportList();\n      PsiImportStatement[] importStatements = importList.getImportStatements();\n\n      //Single-type processing\n      for (PsiImportStatement statement : importStatements) {\n        if (!statement.isOnDemand()) {\n          if (nameHint != null) {\n            String refText = statement.getQualifiedName();\n            if (refText == null || !refText.endsWith(name)) continue;\n          }\n\n          PsiElement resolved = statement.resolve();\n          if (resolved instanceof PsiClass) {\n            processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, statement);\n            if (!processor.execute(resolved, substitutor)) return false;\n          }\n        }\n      }\n      processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n\n      // check in current package\n      String packageName = getPackageName();\n      PsiPackage aPackage = myManager.findPackage(packageName);\n      if (aPackage != null){\n        if (!PsiScopesUtil.processScope(aPackage, processor, substitutor, null, place)) {\n          return false;\n        }\n      }\n\n      //On demand processing\n      for (PsiImportStatement statement : importStatements) {\n        if (statement.isOnDemand()) {\n          PsiElement resolved = statement.resolve();\n          if (resolved != null) {\n            processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, statement);\n            processOnDemandTarget(resolved, processor, substitutor, place);\n          }\n        }\n      }\n    }\n\n    if(classHint == null || classHint.shouldProcess(PsiPackage.class)){\n      final PsiPackage rootPackage = getManager().findPackage(\"\");\n      processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, rootPackage);\n      if(rootPackage != null) rootPackage.processDeclarations(processor, substitutor, null, place);\n    }\n\n    // todo[dsl] class processing\n    final PsiImportList importList = getImportList();\n    final PsiImportStaticStatement[] importStaticStatements = importList.getImportStaticStatements();\n    if (importStaticStatements.length > 0) {\n      final StaticImportFilteringProcessor staticImportProcessor = new StaticImportFilteringProcessor(processor, null);\n\n      // single member processing\n      for (PsiImportStaticStatement importStaticStatement : importStaticStatements) {\n        if (!importStaticStatement.isOnDemand()) {\n          final String referenceName = importStaticStatement.getReferenceName();\n          final PsiClass targetElement = importStaticStatement.resolveTargetClass();\n          if (targetElement != null) {\n            staticImportProcessor.setNameToFilter(referenceName);\n            staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, importStaticStatement);\n            final boolean result = targetElement.processDeclarations(staticImportProcessor, substitutor, lastParent, place);\n            if (!result) return false;\n          }\n        }\n      }\n\n      // on-demand processing\n      for (PsiImportStaticStatement importStaticStatement : importStaticStatements) {\n        if (importStaticStatement.isOnDemand()) {\n          final PsiClass targetElement = importStaticStatement.resolveTargetClass();\n          if (targetElement != null) {\n            staticImportProcessor.setNameToFilter(null);\n            staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, importStaticStatement);\n            final boolean result = targetElement.processDeclarations(staticImportProcessor, substitutor, lastParent, place);\n            if (!result) return false;\n          }\n        }\n      }\n\n      staticImportProcessor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n    }\n\n    if (classHint == null || classHint.shouldProcess(PsiClass.class)){\n      processor.handleEvent(PsiScopeProcessor.Event.SET_CURRENT_FILE_CONTEXT, null);\n      \n      PsiJavaCodeReferenceElement[] implicitlyImported = getImplicitlyImportedPackageReferences();\n      for (PsiJavaCodeReferenceElement aImplicitlyImported : implicitlyImported) {\n        PsiElement resolved = aImplicitlyImported.resolve();\n        if (resolved != null) {\n          processOnDemandTarget(resolved, processor, substitutor, place);\n        }\n      }\n    }\n\n    return true;\n  }","commit_id":"9084f9f988110338a2857a3478e67663785c19b5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public List<Stage> getAllStages(String requestId) {\n    return null;\n  }","id":59531,"modified_method":"@Override\n  public List<Stage> getAllStages(long requestId) {\n    return null;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public void timeoutHostRole(String host, long requestId, long stageId, Role role) {\n    // TODO Auto-generated method stub\n  }","id":59532,"modified_method":"@Override\n  public synchronized void timeoutHostRole(String host, long requestId,\n      long stageId, Role role) {\n    for (Stage s : stageList) {\n      for (HostRoleCommand r : s.getHostActions().get(host).getRoleCommands()) {\n        if (r.getRole().equals(role)) {\n          r.setStatus(HostRoleStatus.TIMEDOUT);\n        }\n      }\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public void abortOperation(long requestId) {\n    // TODO Auto-generated method stub\n  }","id":59533,"modified_method":"@Override\n  public synchronized void abortOperation(long requestId) {\n    for (Stage s : stageList) {\n      if (s.getRequestId() == requestId) {\n        for(String host: s.getHostActions().keySet()) {\n          for (HostRoleCommand role : s.getHostActions().get(host).getRoleCommands()) {\n            role.setStatus(HostRoleStatus.ABORTED);\n          }\n        }\n      }\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public List<Stage> getAllStages(String requestId) {\n    // TODO Auto-generated method stub\n    return null;\n  }","id":59534,"modified_method":"@Override\n  public synchronized List<Stage> getAllStages(long requestId) {\n    List<Stage> l = new ArrayList<Stage>();\n    for (Stage s: stageList) {\n      if (s.getRequestId() == requestId) {\n        l.add(s);\n      }\n    }\n    return l;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public Stage getAction(String actionId) {\n    // TODO Auto-generated method stub\n    return null;\n  }","id":59535,"modified_method":"@Override\n  public synchronized Stage getAction(String actionId) {\n    for (Stage s: stageList) {\n      if (s.getActionId().equals(actionId)) {\n        return s;\n      }\n    }\n    return null;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"@Inject\n  public ActionManager(long schedulerSleepTime, long actionTimeout,\n      ActionQueue aq, Clusters fsm) {\n    this.actionQueue = aq;\n    db = new ActionDBAccessorImpl();\n    scheduler = new ActionScheduler(schedulerSleepTime, actionTimeout, db,\n        actionQueue, fsm, 2);\n    this.fsm = fsm;\n  }","id":59536,"modified_method":"@Inject\n  public ActionManager(long schedulerSleepTime, long actionTimeout,\n      ActionQueue aq, Clusters fsm, ActionDBAccessor db) {\n    this.actionQueue = aq;\n    this.db = db;\n    scheduler = new ActionScheduler(schedulerSleepTime, actionTimeout, db,\n        actionQueue, fsm, 2);\n    this.fsm = fsm;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public List<AgentCommand> dequeueAll(String hostname) {\n    Queue<AgentCommand> q = getQueue(hostname);\n    List<AgentCommand> l = new ArrayList<AgentCommand>();\n    synchronized (q) {\n      while (true) {\n        try {\n          l.add(q.remove());\n        } catch (NoSuchElementException ex) {\n          return l;\n        }\n      }\n    }\n  }","id":59537,"modified_method":"public List<AgentCommand> dequeueAll(String hostname) {\n    Queue<AgentCommand> q = getQueue(hostname);\n    if (q == null) {\n      return null;\n    }\n    List<AgentCommand> l = new ArrayList<AgentCommand>();\n    synchronized (q) {\n      while (true) {\n        try {\n          l.add(q.remove());\n        } catch (NoSuchElementException ex) {\n          return l;\n        }\n      }\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public void enqueue(String hostname, AgentCommand cmd) {\n\n    Queue<AgentCommand> q = getQueue(hostname);\n    if (q == null) {\n      q = new LinkedList<AgentCommand>();\n      addQueue(hostname, q);\n    }\n    if (q.contains(cmd)) {\n      LOG.warn(\"cmd already exists in the queue, not adding again\");\n      return;\n    }\n    synchronized (q) {\n      q.add(cmd);\n    }\n  }","id":59538,"modified_method":"public void enqueue(String hostname, AgentCommand cmd) {\n\n    Queue<AgentCommand> q = getQueue(hostname);\n    if (q == null) {\n      q = new LinkedList<AgentCommand>();\n      addQueue(hostname, q);\n    }\n    synchronized (q) {\n      if (q.contains(cmd)) {\n        LOG.warn(\"cmd already exists in the queue, not adding again\");\n        return;\n      }\n      q.add(cmd);\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"private void doWork() throws AmbariException {\n    List<Stage> stages = db.getPendingStages();\n    if (stages == null || stages.isEmpty()) {\n      //Nothing to do\n      return;\n    }\n\n    //First discover completions and timeouts.\n    boolean operationFailure = false;\n    for (Stage s : stages) {\n      Map<Role, Map<String, HostRoleCommand>> roleToHrcMap = getInvertedRoleMap(s);\n\n      //Iterate for completion\n      boolean moveToNextStage = true;\n      for (Role r: roleToHrcMap.keySet()) {\n        processPendingsAndReschedule(s, roleToHrcMap.get(r));\n        RoleStatus roleStatus = getRoleStatus(roleToHrcMap.get(r), s.getSuccessFactor(r));\n        if (!roleStatus.isRoleSuccessful()) {\n          if (!roleStatus.isRoleInProgress()) {\n            //The role has completely failed\n            //Mark the entire operation as failed\n            operationFailure = true;\n            break;\n          }\n          moveToNextStage = false;\n        }\n      }\n      if (operationFailure) {\n        db.abortOperation(s.getRequestId());\n      }\n      if (operationFailure || !moveToNextStage) {\n        break;\n      }\n    }\n  }","id":59539,"modified_method":"private void doWork() throws AmbariException {\n    List<Stage> stages = db.getStagesInProgress();\n    if (stages == null || stages.isEmpty()) {\n      //Nothing to do\n      return;\n    }\n\n    //First discover completions and timeouts.\n    boolean operationFailure = false;\n    for (Stage s : stages) {\n      Map<Role, Map<String, HostRoleCommand>> roleToHrcMap = getInvertedRoleMap(s);\n\n      //Iterate for completion\n      boolean moveToNextStage = true;\n      for (Role r: roleToHrcMap.keySet()) {\n        processPendingsAndReschedule(s, roleToHrcMap.get(r));\n        RoleStatus roleStatus = getRoleStatus(roleToHrcMap.get(r), s.getSuccessFactor(r));\n        if (!roleStatus.isRoleSuccessful()) {\n          if (!roleStatus.isRoleInProgress()) {\n            //The role has completely failed\n            //Mark the entire operation as failed\n            operationFailure = true;\n            break;\n          }\n          moveToNextStage = false;\n        }\n      }\n      if (operationFailure) {\n        db.abortOperation(s.getRequestId());\n      }\n      if (operationFailure || !moveToNextStage) {\n        break;\n      }\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public RegistrationResponse handleRegistration(Register register)\n      throws InvalidStateTransitonException, AmbariException {\n    String hostname = register.getHostname();\n    List<String> roles = clusterFsm.getHostComponents(hostname);\n    Host hostObject = clusterFsm.getHost(hostname);\n    RegistrationResponse response = new RegistrationResponse();\n    StatusCommand statusCmd = new StatusCommand();\n    statusCmd.setRoles(roles);\n    response.setCommand(statusCmd);\n    hostObject.handleEvent(new HostEvent(hostname,\n        HostEventType.HOST_REGISTRATION_REQUEST));\n    return response;\n  }","id":59540,"modified_method":"public RegistrationResponse handleRegistration(Register register)\n      throws InvalidStateTransitonException, AmbariException {\n    String hostname = register.getHostname();\n    long now = System.currentTimeMillis();\n    List<StatusCommand> cmds = new ArrayList<StatusCommand>();\n    for (Cluster cl : clusterFsm.getClustersForHost(hostname)) {\n      List<ServiceComponentHost> roleList = cl\n          .getServiceComponentHosts(hostname);\n      List<String> roles = new ArrayList<String>();\n      for (ServiceComponentHost sch : roleList) {\n        roles.add(sch.getServiceComponentName());\n      }\n      StatusCommand statusCmd = new StatusCommand();\n      statusCmd.setRoles(roles);\n      cmds.add(statusCmd);\n    }\n    Host hostObject = clusterFsm.getHost(hostname);\n    RegistrationResponse response = new RegistrationResponse();\n    response.setCommand(cmds);\n\n    hostObject.handleEvent(new HostRegistrationRequestEvent(hostname,\n        new AgentVersion(\"v1\"), now, register.getHardwareProfile()));\n    return response;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public HeartBeatResponse handleHeartBeat(HeartBeat heartbeat) throws AmbariException {\n\n    HeartBeatResponse response = new HeartBeatResponse();\n    response.setResponseId(0L);\n    String hostname = heartbeat.getHostname();\n    Host hostObject = clusterFsm.getHost(hostname);\n    try {\n      // TODO: handle unhealthy heartbeat as well\n      hostObject.handleEvent(new HostEvent(hostname,\n          HostEventType.HOST_HEARTBEAT_HEALTHY));\n    } catch (InvalidStateTransitonException ex) {\n      hostObject.setState(HostState.INIT);\n      RegistrationCommand regCmd = new RegistrationCommand();\n      List<AgentCommand> cmds = new ArrayList<AgentCommand>();\n      cmds.add(regCmd);\n      response.setAgentCommands(cmds);\n      return response;\n    }\n\n    //Examine heartbeat for command reports\n    List<CommandReport> reports = heartbeat.getCommandReports();\n    actionManager.actionResponse(hostname, reports);\n\n    // Examine heartbeart for component status\n    List<Cluster> clusters = clusterFsm.getClustersForHost(hostname);\n    for (Cluster cl : clusters) {\n      for (ComponentStatus status : heartbeat.componentStatus) {\n        if (status.getClusterName() == cl.getClusterName()) {\n          ServiceComponentHost scHost = cl.getServiceComponentHost(\n              status.getServiceName(), status.getComponentName(), hostname);\n          ServiceComponentHostState currentState = scHost.getState();\n          ServiceComponentHostLiveState liveState = ServiceComponentHostLiveState\n              .valueOf(ServiceComponentHostLiveState.class, status.getStatus());\n          // Hack\n          scHost.setState(new ServiceComponentHostState(currentState\n              .getConfigVersion(), currentState.getStackVersion(), liveState));\n        }\n      }\n    }\n\n    // Send commands if node is active\n    if (hostObject.getState().equals(HostState.HEALTHY)) {\n      List<AgentCommand> cmds = actionQueue.dequeueAll(heartbeat.getHostname());\n      response.setAgentCommands(cmds);\n    }\n    return response;\n  }","id":59541,"modified_method":"public HeartBeatResponse handleHeartBeat(HeartBeat heartbeat) throws AmbariException {\n\n    HeartBeatResponse response = new HeartBeatResponse();\n    response.setResponseId(0L);\n    String hostname = heartbeat.getHostname();\n    Host hostObject = clusterFsm.getHost(hostname);\n    long now = System.currentTimeMillis();\n    try {\n      if (heartbeat.getNodeStatus().getStatus()\n          .equals(HostStatus.Status.HEALTHY)) {\n        hostObject.handleEvent(new HostHealthyHeartbeatEvent(hostname, now));\n      } else {\n        hostObject.handleEvent(new HostUnhealthyHeartbeatEvent(hostname, now, null));\n      }\n    } catch (InvalidStateTransitonException ex) {\n      hostObject.setState(HostState.INIT);\n      RegistrationCommand regCmd = new RegistrationCommand();\n      List<AgentCommand> cmds = new ArrayList<AgentCommand>();\n      cmds.add(regCmd);\n      response.setAgentCommands(cmds);\n      return response;\n    }\n\n    //Examine heartbeat for command reports\n    List<CommandReport> reports = heartbeat.getCommandReports();\n    actionManager.actionResponse(hostname, reports);\n\n    // Examine heartbeart for component status\n    List<Cluster> clusters = clusterFsm.getClustersForHost(hostname);\n    for (Cluster cl : clusters) {\n      for (ComponentStatus status : heartbeat.componentStatus) {\n        if (status.getClusterName() == cl.getClusterName()) {\n          ServiceComponentHost scHost = cl.getServiceComponentHost(\n              status.getServiceName(), status.getComponentName(), hostname);\n          ServiceComponentHostState currentState = scHost.getState();\n          ServiceComponentHostLiveState liveState = ServiceComponentHostLiveState\n              .valueOf(ServiceComponentHostLiveState.class, status.getStatus());\n          // Hack\n          scHost.setState(new ServiceComponentHostState(currentState\n              .getConfigVersion(), currentState.getStackVersion(), liveState));\n        }\n      }\n    }\n\n    // Send commands if node is active\n    if (hostObject.getState().equals(HostState.HEALTHY)) {\n      List<AgentCommand> cmds = actionQueue.dequeueAll(heartbeat.getHostname());\n      response.setAgentCommands(cmds);\n    }\n    return response;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"private void doWork() throws InvalidStateTransitonException {\n    List<Host> allHosts = fsm.getAllHosts();\n    long now = System.currentTimeMillis();\n    for (Host hostObj : allHosts) {\n      String host = hostObj.getHostName();\n      HostState hostState = hostObj.getState();\n\n      long lastHeartbeat = 0;\n      try {\n        lastHeartbeat = fsm.getHost(host).getLastHeartbeatTime();\n      } catch (AmbariException e) {\n        LOG.warn(\"Exception in getting host object; Is it fatal?\", e);\n      }\n      if (lastHeartbeat + 5*threadWakeupInterval < now) {\n        LOG.warn(\"Hearbeat lost from host \"+host);\n        //Heartbeat is expired\n        hostObj.handleEvent(new HostEvent(host, HostEventType.HOST_HEARTBEAT_LOST));\n        //Purge action queue\n        actionQueue.dequeueAll(host);\n        //notify action manager\n        actionManager.handleLostHost(host);\n      }\n      if (hostState == HostState.WAITING_FOR_HOST_STATUS_UPDATES) {\n        long timeSpentInState = hostObj.getTimeInState();\n        if (timeSpentInState + 5*threadWakeupInterval < now) {\n          //Go back to init, the agent will be asked to register again in the next heartbeat\n          hostObj.setState(HostState.INIT);\n        }\n      }\n    }\n  }","id":59542,"modified_method":"private void doWork() throws InvalidStateTransitonException {\n    List<Host> allHosts = fsm.getAllHosts();\n    long now = System.currentTimeMillis();\n    for (Host hostObj : allHosts) {\n      String host = hostObj.getHostName();\n      HostState hostState = hostObj.getState();\n\n      long lastHeartbeat = 0;\n      try {\n        lastHeartbeat = fsm.getHost(host).getLastHeartbeatTime();\n      } catch (AmbariException e) {\n        LOG.warn(\"Exception in getting host object; Is it fatal?\", e);\n      }\n      if (lastHeartbeat + 5*threadWakeupInterval < now) {\n        LOG.warn(\"Hearbeat lost from host \"+host);\n        //Heartbeat is expired\n        hostObj.handleEvent(new HostHeartbeatLostEvent(host));\n        //Purge action queue\n        actionQueue.dequeueAll(host);\n        //notify action manager\n        actionManager.handleLostHost(host);\n      }\n      if (hostState == HostState.WAITING_FOR_HOST_STATUS_UPDATES) {\n        long timeSpentInState = hostObj.getTimeInState();\n        if (timeSpentInState + 5*threadWakeupInterval < now) {\n          //Go back to init, the agent will be asked to register again in the next heartbeat\n          hostObj.setState(HostState.INIT);\n        }\n      }\n    }\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public AgentCommand getCommand() {\n    return command;\n  }","id":59543,"modified_method":"public List<StatusCommand> getCommand() {\n    return commands;\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Test whether scheduler times out an action\n   */\n  @Test\n  public void testActionTimeout() throws Exception {\n    ActionQueue aq = new ActionQueue();\n    Clusters fsm = mock(Clusters.class);\n    Cluster oneClusterMock = mock(Cluster.class);\n    when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);\n    ActionDBAccessorImpl db = mock(ActionDBAccessorImpl.class);\n    List<Stage> stages = new ArrayList<Stage>();\n    Stage s = new Stage(1, \"/bogus\", \"clusterName\");\n    s.setStageId(977);\n    stages.add(s);\n    String hostname = \"ahost.ambari.apache.org\";\n    HostAction ha = new HostAction(hostname);\n    HostRoleCommand hrc = new HostRoleCommand(Role.DATANODE,\n        null);\n    ha.addHostRoleCommand(hrc);\n    // ha.setManifest(\"1-977-manifest\");\n    s.addHostAction(hostname, ha);\n    when(db.getPendingStages()).thenReturn(stages);\n\n    //Keep large number of attempts so that the task is not expired finally\n    //Small action timeout to test rescheduling\n    ActionScheduler scheduler = new ActionScheduler(100, 100, db, aq, fsm, 3);\n    // Start the thread\n    scheduler.start();\n\n    Thread.sleep(500);\n    //TODO timeoutHostRole must be called exactly once but in this case the state\n    //in the db continues to be pending therefore it is processed multiple times.\n    verify(db, atLeastOnce()).timeoutHostRole(hostname, 1, 977, Role.DATANODE);\n  }","id":59544,"modified_method":"/**\n   * Test whether scheduler times out an action\n   */\n  @Test\n  public void testActionTimeout() throws Exception {\n    ActionQueue aq = new ActionQueue();\n    Clusters fsm = mock(Clusters.class);\n    Cluster oneClusterMock = mock(Cluster.class);\n    when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);\n    ActionDBAccessorImpl db = mock(ActionDBAccessorImpl.class);\n    List<Stage> stages = new ArrayList<Stage>();\n    Stage s = new Stage(1, \"/bogus\", \"clusterName\");\n    s.setStageId(977);\n    stages.add(s);\n    String hostname = \"ahost.ambari.apache.org\";\n    HostAction ha = new HostAction(hostname);\n    HostRoleCommand hrc = new HostRoleCommand(Role.DATANODE,\n        null);\n    ha.addHostRoleCommand(hrc);\n    // ha.setManifest(\"1-977-manifest\");\n    s.addHostAction(hostname, ha);\n    when(db.getStagesInProgress()).thenReturn(stages);\n    \n    //Keep large number of attempts so that the task is not expired finally\n    //Small action timeout to test rescheduling\n    ActionScheduler scheduler = new ActionScheduler(100, 100, db, aq, fsm, 3);\n    // Start the thread\n    scheduler.start();\n\n    Thread.sleep(500);\n    //TODO timeoutHostRole must be called exactly once but in this case the state\n    //in the db continues to be pending therefore it is processed multiple times.\n    verify(db, atLeastOnce()).timeoutHostRole(hostname, 1, 977, Role.DATANODE);\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * This test sends a new action to the action scheduler and verifies that the action\n   * shows up in the action queue.\n   */\n  @Test\n  public void testActionSchedule() throws Exception {\n    ActionQueue aq = new ActionQueue();\n    Clusters fsm = mock(Clusters.class);\n    Cluster oneClusterMock = mock(Cluster.class);\n    when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);\n    ActionDBAccessor db = mock(ActionDBAccessorImpl.class);\n    List<Stage> stages = new ArrayList<Stage>();\n    Stage s = new Stage(1, \"/bogus\", \"clusterName\");\n    s.setStageId(977);\n    stages.add(s);\n    String hostname = \"ahost.ambari.apache.org\";\n    HostAction ha = new HostAction(hostname);\n    HostRoleCommand hrc = new HostRoleCommand(Role.DATANODE,\n        null);\n    ha.addHostRoleCommand(hrc);\n   // ha.setManifest(\"1-977-manifest\");\n    s.addHostAction(hostname, ha);\n    when(db.getPendingStages()).thenReturn(stages);\n\n    //Keep large number of attempts so that the task is not expired finally\n    //Small action timeout to test rescheduling\n    ActionScheduler scheduler = new ActionScheduler(1000, 100, db, aq, fsm, 10000);\n    // Start the thread\n    scheduler.start();\n\n    Thread.sleep(1000);\n    List<AgentCommand> ac = aq.dequeueAll(hostname);\n    assertEquals(1, ac.size());\n    assertTrue(ac.get(0) instanceof ExecutionCommand);\n    assertEquals(\"1-977\", ((ExecutionCommand) (ac.get(0))).getCommandId());\n\n    //The action status has not changed, it should be queued again.\n    Thread.sleep(1000);\n    ac = aq.dequeueAll(hostname);\n    assertEquals(1, ac.size());\n    assertTrue(ac.get(0) instanceof ExecutionCommand);\n    assertEquals(\"1-977\", ((ExecutionCommand) (ac.get(0))).getCommandId());\n\n    //Now change the action status\n    hrc.setStatus(HostRoleStatus.COMPLETED);\n    ac = aq.dequeueAll(hostname);\n\n    //Wait for sometime, it shouldn't be scheduled this time.\n    Thread.sleep(1000);\n    ac = aq.dequeueAll(hostname);\n    assertEquals(0, ac.size());\n  }","id":59545,"modified_method":"/**\n   * This test sends a new action to the action scheduler and verifies that the action\n   * shows up in the action queue.\n   */\n  @Test\n  public void testActionSchedule() throws Exception {\n    ActionQueue aq = new ActionQueue();\n    Clusters fsm = mock(Clusters.class);\n    Cluster oneClusterMock = mock(Cluster.class);\n    when(fsm.getCluster(anyString())).thenReturn(oneClusterMock);\n    ActionDBAccessor db = mock(ActionDBAccessorImpl.class);\n    List<Stage> stages = new ArrayList<Stage>();\n    Stage s = new Stage(1, \"/bogus\", \"clusterName\");\n    s.setStageId(977);\n    stages.add(s);\n    String hostname = \"ahost.ambari.apache.org\";\n    HostAction ha = new HostAction(hostname);\n    HostRoleCommand hrc = new HostRoleCommand(Role.DATANODE,\n        null);\n    ha.addHostRoleCommand(hrc);\n   // ha.setManifest(\"1-977-manifest\");\n    s.addHostAction(hostname, ha);\n    when(db.getStagesInProgress()).thenReturn(stages);\n    \n    //Keep large number of attempts so that the task is not expired finally\n    //Small action timeout to test rescheduling\n    ActionScheduler scheduler = new ActionScheduler(1000, 100, db, aq, fsm, 10000);\n    // Start the thread\n    scheduler.start();\n\n    Thread.sleep(1000);\n    List<AgentCommand> ac = aq.dequeueAll(hostname);\n    assertEquals(1, ac.size());\n    assertTrue(ac.get(0) instanceof ExecutionCommand);\n    assertEquals(\"1-977\", ((ExecutionCommand) (ac.get(0))).getCommandId());\n\n    //The action status has not changed, it should be queued again.\n    Thread.sleep(1000);\n    ac = aq.dequeueAll(hostname);\n    assertEquals(1, ac.size());\n    assertTrue(ac.get(0) instanceof ExecutionCommand);\n    assertEquals(\"1-977\", ((ExecutionCommand) (ac.get(0))).getCommandId());\n\n    //Now change the action status\n    hrc.setStatus(HostRoleStatus.COMPLETED);\n    ac = aq.dequeueAll(hostname);\n\n    //Wait for sometime, it shouldn't be scheduled this time.\n    Thread.sleep(1000);\n    ac = aq.dequeueAll(hostname);\n    assertEquals(0, ac.size());\n  }","commit_id":"a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc","url":"https://github.com/apache/ambari"},{"original_method":"public RegistrationResponse handleRegistration(Register register)\n      throws InvalidStateTransitonException, AmbariException {\n    String hostname = register.getHostname();\n    long now = System.currentTimeMillis();\n    List<StatusCommand> cmds = new ArrayList<StatusCommand>();\n    for (Cluster cl : clusterFsm.getClustersForHost(hostname)) {\n      List<ServiceComponentHost> roleList = cl\n          .getServiceComponentHosts(hostname);\n      List<String> roles = new ArrayList<String>();\n      for (ServiceComponentHost sch : roleList) {\n        roles.add(sch.getServiceComponentName());\n      }\n      StatusCommand statusCmd = new StatusCommand();\n      statusCmd.setRoles(roles);\n      cmds.add(statusCmd);\n    }\n    Host hostObject = clusterFsm.getHost(hostname);\n    RegistrationResponse response = new RegistrationResponse();\n    response.setCommand(cmds);\n\n    hostObject.handleEvent(new HostRegistrationRequestEvent(hostname,\n        new AgentVersion(\"v1\"), now, register.getHardwareProfile()));\n    return response;\n  }","id":59546,"modified_method":"public RegistrationResponse handleRegistration(Register register)\n      throws InvalidStateTransitonException, AmbariException {\n    String hostname = register.getHostname();\n    long now = System.currentTimeMillis();\n    List<StatusCommand> cmds = new ArrayList<StatusCommand>();\n    for (Cluster cl : clusterFsm.getClustersForHost(hostname)) {\n      List<ServiceComponentHost> roleList = cl\n          .getServiceComponentHosts(hostname);\n      List<String> roles = new ArrayList<String>();\n      for (ServiceComponentHost sch : roleList) {\n        roles.add(sch.getServiceComponentName());\n      }\n      StatusCommand statusCmd = new StatusCommand();\n      statusCmd.setRoles(roles);\n      cmds.add(statusCmd);\n    }\n    Host hostObject = clusterFsm.getHost(hostname);\n    hostObject.handleEvent(new HostRegistrationRequestEvent(hostname,\n        new AgentVersion(\"v1\"), now, register.getHardwareProfile()));\n    RegistrationResponse response = new RegistrationResponse();\n    if (cmds.isEmpty()) {\n      //No status commands needed let the fsm know that status step is done\n      hostObject.handleEvent(new HostStatusUpdatesReceivedEvent(hostname,\n          now));\n    } else {\n      response.setCommand(cmds);\n    }\n    return response;\n  }","commit_id":"7e59ad9b94625df91ff2b8d2e864887284e08262","url":"https://github.com/apache/ambari"},{"original_method":"protected Document executeMojo( String pluginXml )\n        throws Exception\n    {\n        List expectedDeps = new ArrayList();\n        expectedDeps.add( \"/org.apache.maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" );\n        expectedDeps.add( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" );\n\n        Document imlDocument = super.executeMojo( \"module\", pluginXml, \"iml\" );\n\n        Element component = findComponent( imlDocument.getRootElement(), \"NewModuleRootManager\" );\n\n        Element output = findElement( component, \"output\" );\n        assertEquals( \"Module output url created.\", \"file://$MODULE_DIR$/target/classes\", output.attributeValue( \"url\" ) );\n\n        Element outputTest = findElement( component, \"output-test\" );\n        assertEquals( \"Module test-output url created.\", \"file://$MODULE_DIR$/target/test-classes\", outputTest.attributeValue( \"url\" ) );\n\n        Element content = findElement( component, \"content\" );\n\n        List excludeList = content.elements( \"excludeFolder\" );\n        if ( excludeList.size() == 1 )\n        {\n            Element excl = content.element( \"excludeFolder\" );\n            assertEquals( \"Test default exclude folder\", \"file://$MODULE_DIR$/target\", excl.attributeValue( \"url\" ) );\n        }\n        else\n        {\n            boolean targetIsExcluded = false;\n            for ( Iterator excludes = excludeList.iterator(); excludes.hasNext(); )\n            {\n                Element excl = (Element) excludes.next();\n\n                if ( \"file://$MODULE_DIR$/target\".equals( excl.attributeValue( \"url\" ) ) )\n                {\n                    targetIsExcluded = true;\n                    break;\n                }\n            }\n\n            if ( !targetIsExcluded )\n            {\n                fail( \"Default exclude folder 'target' not found\" );\n            }\n        }\n\n        List elementList = findElementsByName( content, \"sourceFolder\" );\n        for ( Iterator sourceFolders = elementList.iterator(); sourceFolders.hasNext(); )\n        {\n            Element sourceFolder = (Element) sourceFolders.next();\n\n            String isTestSource = sourceFolder.attributeValue( \"isTestSource\" ).toLowerCase();\n            if ( \"false\".equals( isTestSource ) )\n            {\n                assertTrue( \"Main source url\",\n                            sourceFolder.attributeValue( \"url\" ).startsWith( \"file://$MODULE_DIR$/src/main\" ) );\n            }\n            else if ( \"true\".equals( isTestSource ) )\n            {\n                assertTrue( \"Test source url\",\n                            sourceFolder.attributeValue( \"url\" ).startsWith( \"file://$MODULE_DIR$/src/test\" ) );\n            }\n            else\n            {\n                fail( \"Unknown sourceFolder 'isTestSource' attribute value: \" + isTestSource );\n            }\n        }\n\n        List orderEntryList = findElementsByName( component, \"orderEntry\" );\n\n        for ( Iterator orderEntries = orderEntryList.iterator(); orderEntries.hasNext(); )\n        {\n            Element orderEntry = (Element) orderEntries.next();\n\n            if ( \"module-library\".equals( orderEntry.attributeValue( \"type\" ) ) )\n            {\n                Element library = (Element) orderEntry.elementIterator( \"library\" ).next();\n\n                Element classes = (Element) library.elementIterator( \"CLASSES\" ).next();\n\n                Element root = (Element) classes.elementIterator( \"root\" ).next();\n\n                String depUrl = root.attributeValue( \"url\" );\n\n                if ( depUrl.endsWith( \"/org.apache.maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" ) )\n                {\n                    expectedDeps.remove( \"/org.apache.maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" );\n                }\n                else if ( depUrl.endsWith( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" ) )\n                {\n                    expectedDeps.remove( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" );\n                }\n            }\n        }\n\n        assertTrue( \"All dependencies are present\", expectedDeps.size() == 0 );\n\n        return imlDocument;\n    }","id":59547,"modified_method":"protected Document executeMojo( String pluginXml )\n        throws Exception\n    {\n        List expectedDeps = new ArrayList();\n        expectedDeps.add( \"/org/apache/maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" );\n        expectedDeps.add( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" );\n\n        Document imlDocument = super.executeMojo( \"module\", pluginXml, \"iml\" );\n\n        Element component = findComponent( imlDocument.getRootElement(), \"NewModuleRootManager\" );\n\n        Element output = findElement( component, \"output\" );\n        assertEquals( \"Module output url created.\", \"file://$MODULE_DIR$/target/classes\", output.attributeValue( \"url\" ) );\n\n        Element outputTest = findElement( component, \"output-test\" );\n        assertEquals( \"Module test-output url created.\", \"file://$MODULE_DIR$/target/test-classes\", outputTest.attributeValue( \"url\" ) );\n\n        Element content = findElement( component, \"content\" );\n\n        List excludeList = content.elements( \"excludeFolder\" );\n        if ( excludeList.size() == 1 )\n        {\n            Element excl = content.element( \"excludeFolder\" );\n            assertEquals( \"Test default exclude folder\", \"file://$MODULE_DIR$/target\", excl.attributeValue( \"url\" ) );\n        }\n        else\n        {\n            boolean targetIsExcluded = false;\n            for ( Iterator excludes = excludeList.iterator(); excludes.hasNext(); )\n            {\n                Element excl = (Element) excludes.next();\n\n                if ( \"file://$MODULE_DIR$/target\".equals( excl.attributeValue( \"url\" ) ) )\n                {\n                    targetIsExcluded = true;\n                    break;\n                }\n            }\n\n            if ( !targetIsExcluded )\n            {\n                fail( \"Default exclude folder 'target' not found\" );\n            }\n        }\n\n        List elementList = findElementsByName( content, \"sourceFolder\" );\n        for ( Iterator sourceFolders = elementList.iterator(); sourceFolders.hasNext(); )\n        {\n            Element sourceFolder = (Element) sourceFolders.next();\n\n            String isTestSource = sourceFolder.attributeValue( \"isTestSource\" ).toLowerCase();\n            if ( \"false\".equals( isTestSource ) )\n            {\n                assertTrue( \"Main source url\",\n                            sourceFolder.attributeValue( \"url\" ).startsWith( \"file://$MODULE_DIR$/src/main\" ) );\n            }\n            else if ( \"true\".equals( isTestSource ) )\n            {\n                assertTrue( \"Test source url\",\n                            sourceFolder.attributeValue( \"url\" ).startsWith( \"file://$MODULE_DIR$/src/test\" ) );\n            }\n            else\n            {\n                fail( \"Unknown sourceFolder 'isTestSource' attribute value: \" + isTestSource );\n            }\n        }\n\n        List orderEntryList = findElementsByName( component, \"orderEntry\" );\n\n        for ( Iterator orderEntries = orderEntryList.iterator(); orderEntries.hasNext(); )\n        {\n            Element orderEntry = (Element) orderEntries.next();\n\n            if ( \"module-library\".equals( orderEntry.attributeValue( \"type\" ) ) )\n            {\n                Element library = (Element) orderEntry.elementIterator( \"library\" ).next();\n\n                Element classes = (Element) library.elementIterator( \"CLASSES\" ).next();\n\n                Element root = (Element) classes.elementIterator( \"root\" ).next();\n\n                String depUrl = root.attributeValue( \"url\" );\n\n                if ( depUrl.endsWith( \"/org/apache/maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" ) )\n                {\n                    expectedDeps.remove( \"/org/apache/maven/maven-model/2.0.1/maven-model-2.0.1.jar!/\" );\n                }\n                else if ( depUrl.endsWith( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" ) )\n                {\n                    expectedDeps.remove( \"/junit/junit/3.8.1/junit-3.8.1.jar!/\" );\n                }\n            }\n        }\n\n        assertTrue( \"All dependencies are present\", expectedDeps.size() == 0 );\n\n        return imlDocument;\n    }","commit_id":"14d159a460bfe058e63308a96261107b4798654d","url":"https://github.com/apache/maven-plugins"},{"original_method":"private Artifact createArtifact( String groupId, String artifactId, String version )\n    {\n        Artifact artifact = new IdeaArtifactStub();\n\n        artifact.setGroupId( groupId );\n        artifact.setArtifactId( artifactId );\n        artifact.setVersion( version );\n        artifact.setFile( new File( \"/localRepository/\" + artifact.getId().replace( ':', '/' ) +\n                          \"/\" + artifact.getArtifactId() + \"-\" + artifact.getVersion() + \".jar\" ) );\n\n        return artifact;\n    }","id":59548,"modified_method":"private Artifact createArtifact( String groupId, String artifactId, String version )\n    {\n        Artifact artifact = new IdeaArtifactStub();\n\n        artifact.setGroupId( groupId );\n        artifact.setArtifactId( artifactId );\n        artifact.setVersion( version );\n        artifact.setFile( new File( \"target/local-repo/\" + artifact.getGroupId().replace( '.', '/' ) +\n                          \"/\" + artifact.getArtifactId() + \"/\" + artifact.getVersion() +\n                          \"/\" + artifact.getArtifactId() + \"-\" + artifact.getVersion() + \".jar\" ) );\n\n        return artifact;\n    }","commit_id":"14d159a460bfe058e63308a96261107b4798654d","url":"https://github.com/apache/maven-plugins"},{"original_method":"public List getRemoteArtifactRepositories()\n    {\n        return Collections.EMPTY_LIST;\n    }","id":59549,"modified_method":"public List getRemoteArtifactRepositories()\n    {\n        if ( remoteRepositories == null )\n        {\n            File testRepo = new File( \"src/test/remote-repo\" );\n            ArtifactRepository repository = new DefaultArtifactRepository( \"test-repo\",\n                                                                           \"file://\" + testRepo.getAbsolutePath(),\n                                                                           new DefaultRepositoryLayout() );\n            remoteRepositories = Collections.singletonList( repository );\n        }\n\n        return remoteRepositories;\n    }","commit_id":"14d159a460bfe058e63308a96261107b4798654d","url":"https://github.com/apache/maven-plugins"},{"original_method":"NewestVersionComponentChooser(LatestStrategy latestStrategy, VersionMatcher versionMatcher) {\n        this.latestStrategy = latestStrategy;\n        this.versionMatcher = versionMatcher;\n    }","id":59550,"modified_method":"NewestVersionComponentChooser(LatestStrategy latestStrategy, VersionMatcher versionMatcher, VersionSelectionRulesInternal versionSelectionRules) {\n        this.latestStrategy = latestStrategy;\n        this.versionMatcher = versionMatcher;\n        this.versionSelectionRules = versionSelectionRules;\n    }","commit_id":"f834638bb6e96b6f7342b21bb99c61fac181fdad","url":"https://github.com/gradle/gradle"},{"original_method":"private ModuleComponentIdentifier chooseBestMatchingDependencyWithMetaData(ModuleVersionListing versions, DependencyMetaData dependency, ModuleComponentRepositoryAccess moduleAccess) {\n        for (Versioned candidate : sortLatestFirst(versions)) {\n            MutableModuleVersionMetaData metaData = resolveComponentMetaData(dependency, candidate, moduleAccess);\n            if (versionMatcher.accept(dependency.getRequested().getVersion(), metaData)) {\n                // We already resolved the correct module.\n                return metaData.getComponentId();\n            }\n        }\n        return null;\n    }","id":59551,"modified_method":"private ModuleComponentIdentifier chooseBestMatchingDependencyWithMetaData(ModuleVersionListing versions, DependencyMetaData dependency, ModuleComponentRepositoryAccess moduleAccess) {\n        for (Versioned candidate : sortLatestFirst(versions)) {\n            MutableModuleVersionMetaData metaData = resolveComponentMetaData(dependency, candidate, moduleAccess);\n            ModuleComponentIdentifier candidateIdentifier = metaData.getComponentId();\n\n            // Apply version selection rules\n            ModuleComponentSelector requestedComponentSelector = DefaultModuleComponentSelector.newSelector(\n                    dependency.getRequested().getGroup(),\n                    dependency.getRequested().getName(),\n                    dependency.getRequested().getVersion()\n            );\n            VersionSelection selection = new DefaultVersionSelection(requestedComponentSelector, candidateIdentifier);\n            versionSelectionRules.apply(selection);\n\n            // Invoke version matcher\n            if (versionMatcher.accept(dependency.getRequested().getVersion(), metaData)) {\n                // We already resolved the correct module.\n                return metaData.getComponentId();\n            }\n        }\n        return null;\n    }","commit_id":"f834638bb6e96b6f7342b21bb99c61fac181fdad","url":"https://github.com/gradle/gradle"},{"original_method":"private ModuleComponentIdentifier chooseBestMatchingDependency(ModuleVersionListing versions, ModuleVersionSelector requested) {\n        for (Versioned candidate : sortLatestFirst(versions)) {\n            if (versionMatcher.accept(requested.getVersion(), candidate.getVersion())) {\n                return DefaultModuleComponentIdentifier.newId(requested.getGroup(), requested.getName(), candidate.getVersion());\n            }\n        }\n        return null;\n    }","id":59552,"modified_method":"private ModuleComponentIdentifier chooseBestMatchingDependency(ModuleVersionListing versions, ModuleVersionSelector requested) {\n        for (Versioned candidate : sortLatestFirst(versions)) {\n            // Apply version selection rules\n            ModuleComponentIdentifier candidateIdentifier = DefaultModuleComponentIdentifier.newId(requested.getGroup(), requested.getName(), candidate.getVersion());\n            ModuleComponentSelector requestedComponentSelector = DefaultModuleComponentSelector.newSelector(requested.getGroup(), requested.getName(), requested.getVersion());\n            VersionSelection selection = new DefaultVersionSelection(requestedComponentSelector, candidateIdentifier);\n            versionSelectionRules.apply(selection);\n\n            // Invoke version matcher\n            if (versionMatcher.accept(requested.getVersion(), candidate.getVersion())) {\n                return candidateIdentifier;\n            }\n        }\n        return null;\n    }","commit_id":"f834638bb6e96b6f7342b21bb99c61fac181fdad","url":"https://github.com/gradle/gradle"},{"original_method":"public RepositoryChain create(ConfigurationInternal configuration,\n                                  Iterable<? extends ResolutionAwareRepository> repositories,\n                                  ModuleMetadataProcessor metadataProcessor) {\n        ResolutionRules resolutionRules = configuration.getResolutionStrategy().getResolutionRules();\n        CachePolicy cachePolicy = configuration.getResolutionStrategy().getCachePolicy();\n\n        startParameterResolutionOverride.addResolutionRules(resolutionRules);\n\n        UserResolverChain userResolverChain = new UserResolverChain(versionMatcher, latestStrategy);\n        RepositoryChain parentLookupResolver = new ParentModuleLookupResolver(userResolverChain, cacheLockingManager);\n\n        for (ResolutionAwareRepository repository : repositories) {\n            ConfiguredModuleComponentRepository baseRepository = repository.createResolver();\n\n            if (baseRepository instanceof ExternalResourceResolver) {\n                ((ExternalResourceResolver) baseRepository).setRepositoryChain(parentLookupResolver);\n            }\n\n            // TODO:DAZ In theory we could update this so that _all_ repositories are wrapped in a cache:\n            //     - would need to add local/remote pattern to artifact download\n            //     - This might help later when we integrate in-memory caching with file-backed caching.\n            ModuleComponentRepository moduleComponentRepository = baseRepository;\n            if (baseRepository.isLocal()) {\n                moduleComponentRepository = new LocalModuleComponentRepository(baseRepository, metadataProcessor);\n            } else {\n                moduleComponentRepository = new CacheLockReleasingModuleComponentsRepository(moduleComponentRepository, cacheLockingManager);\n                moduleComponentRepository = startParameterResolutionOverride.overrideModuleVersionRepository(moduleComponentRepository);\n                moduleComponentRepository = new CachingModuleComponentRepository(moduleComponentRepository, moduleVersionsCache, moduleMetaDataCache, moduleArtifactsCache, artifactAtRepositoryCachedResolutionIndex,\n                        cachePolicy, timeProvider, metadataProcessor);\n            }\n\n            if (baseRepository.isDynamicResolveMode()) {\n                moduleComponentRepository = IvyDynamicResolveModuleComponentRepositoryAccess.wrap(moduleComponentRepository);\n            }\n            moduleComponentRepository = inMemoryCache.cached(moduleComponentRepository);\n            userResolverChain.add(moduleComponentRepository);\n        }\n\n        return userResolverChain;\n    }","id":59553,"modified_method":"public RepositoryChain create(ConfigurationInternal configuration,\n                                  Iterable<? extends ResolutionAwareRepository> repositories,\n                                  ModuleMetadataProcessor metadataProcessor) {\n        ResolutionRules resolutionRules = configuration.getResolutionStrategy().getResolutionRules();\n        CachePolicy cachePolicy = configuration.getResolutionStrategy().getCachePolicy();\n\n        startParameterResolutionOverride.addResolutionRules(resolutionRules);\n\n        UserResolverChain userResolverChain = new UserResolverChain(versionMatcher, latestStrategy, configuration.getResolutionStrategy().getVersionSelection());\n        RepositoryChain parentLookupResolver = new ParentModuleLookupResolver(userResolverChain, cacheLockingManager);\n\n        for (ResolutionAwareRepository repository : repositories) {\n            ConfiguredModuleComponentRepository baseRepository = repository.createResolver();\n\n            if (baseRepository instanceof ExternalResourceResolver) {\n                ((ExternalResourceResolver) baseRepository).setRepositoryChain(parentLookupResolver);\n            }\n\n            // TODO:DAZ In theory we could update this so that _all_ repositories are wrapped in a cache:\n            //     - would need to add local/remote pattern to artifact download\n            //     - This might help later when we integrate in-memory caching with file-backed caching.\n            ModuleComponentRepository moduleComponentRepository = baseRepository;\n            if (baseRepository.isLocal()) {\n                moduleComponentRepository = new LocalModuleComponentRepository(baseRepository, metadataProcessor);\n            } else {\n                moduleComponentRepository = new CacheLockReleasingModuleComponentsRepository(moduleComponentRepository, cacheLockingManager);\n                moduleComponentRepository = startParameterResolutionOverride.overrideModuleVersionRepository(moduleComponentRepository);\n                moduleComponentRepository = new CachingModuleComponentRepository(moduleComponentRepository, moduleVersionsCache, moduleMetaDataCache, moduleArtifactsCache, artifactAtRepositoryCachedResolutionIndex,\n                        cachePolicy, timeProvider, metadataProcessor);\n            }\n\n            if (baseRepository.isDynamicResolveMode()) {\n                moduleComponentRepository = IvyDynamicResolveModuleComponentRepositoryAccess.wrap(moduleComponentRepository);\n            }\n            moduleComponentRepository = inMemoryCache.cached(moduleComponentRepository);\n            userResolverChain.add(moduleComponentRepository);\n        }\n\n        return userResolverChain;\n    }","commit_id":"f834638bb6e96b6f7342b21bb99c61fac181fdad","url":"https://github.com/gradle/gradle"},{"original_method":"public UserResolverChain(VersionMatcher versionMatcher, LatestStrategy latestStrategy) {\n        this.dependencyResolver = new RepositoryChainDependencyResolver(new NewestVersionComponentChooser(latestStrategy, versionMatcher), new ModuleTransformer());\n    }","id":59554,"modified_method":"public UserResolverChain(VersionMatcher versionMatcher, LatestStrategy latestStrategy, VersionSelectionRulesInternal versionSelectionRules) {\n        this.dependencyResolver = new RepositoryChainDependencyResolver(new NewestVersionComponentChooser(latestStrategy, versionMatcher, versionSelectionRules), new ModuleTransformer());\n    }","commit_id":"f834638bb6e96b6f7342b21bb99c61fac181fdad","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void install() {\n        String saveAs = resolver.getFilename();\n\n        OsDetails osDetails = getMachine().getMachineDetails().getOsDetails();\n        List<String> commands = Lists.newLinkedList();\n        if (osDetails.isLinux()) {\n            commands.addAll(installLinux(getExpandedInstallDir()));\n        } else if (osDetails.isMac()) {\n            isPackageInstall = false;\n            commands.addAll(installMac(saveAs));\n        } else if (osDetails.isWindows()) {\n            throw new UnsupportedOperationException(\"RiakNode not supported on Windows instances\");\n        } else {\n            throw new IllegalStateException(\"Machine was not detected as linux, mac or windows! Installation does not know how to proceed with \" +\n                    getMachine() + \". Details: \" + getMachine().getMachineDetails().getOsDetails());\n        }\n        newScript(INSTALLING)\n                .body.append(commands)\n                .execute();\n    }","id":59555,"modified_method":"@Override\n    public void install() {\n        if (entity.getConfig(Attributes.DOWNLOAD_URL) != null) {\n            LOG.warn(\"Ignoring download.url {}, use download.url.rhelcentos or download.url.mac\", entity.getConfig(Attributes.DOWNLOAD_URL));\n        }\n\n        OsDetails osDetails = getMachine().getMachineDetails().getOsDetails();\n        List<String> commands = Lists.newLinkedList();\n        if (osDetails.isLinux()) {\n            commands.addAll(installLinux(getExpandedInstallDir()));\n        } else if (osDetails.isMac()) {\n            isPackageInstall = false;\n            commands.addAll(installMac());\n        } else if (osDetails.isWindows()) {\n            throw new UnsupportedOperationException(\"RiakNode not supported on Windows instances\");\n        } else {\n            throw new IllegalStateException(\"Machine was not detected as linux, mac or windows! Installation does not know how to proceed with \" +\n                    getMachine() + \". Details: \" + getMachine().getMachineDetails().getOsDetails());\n        }\n        newScript(INSTALLING)\n                .body.append(commands)\n                .failIfBodyEmpty()\n                .failOnNonZeroResultCode()\n                .execute();\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public Map<String, String> getShellEnvironment() {\n        MutableMap<String, String> result = MutableMap.copyOf(super.getShellEnvironment());\n        // how to change epmd port, according to \n        // http://serverfault.com/questions/582787/how-to-change-listening-interface-of-rabbitmqs-epmd-port-4369\n        result.put(\"ERL_EPMD_PORT\", \"\" + Integer.toString(getEntity().getEpmdListenerPort()));\n        return result;\n    }","id":59556,"modified_method":"@Override\n    public Map<String, String> getShellEnvironment() {\n        MutableMap<String, String> result = MutableMap.copyOf(super.getShellEnvironment());\n        // how to change epmd port, according to \n        // http://serverfault.com/questions/582787/how-to-change-listening-interface-of-rabbitmqs-epmd-port-4369\n        if (getEntity().getEpmdListenerPort() != null) {\n            result.put(\"ERL_EPMD_PORT\", \"\" + Integer.toString(getEntity().getEpmdListenerPort()));\n        }\n        return result;\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public void customize() {\n        //create entity's runDir\n        newScript(CUSTOMIZING).execute();\n\n        isRiakOnPath = isPackageInstall ? isRiakOnPath() : true;\n\n        OsDetails osDetails = getMachine().getMachineDetails().getOsDetails();\n\n        List<String> commands = Lists.newLinkedList();\n        commands.add(sudo(\"mkdir -p \" + getRiakEtcDir()));\n\n        String vmArgsTemplate = processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));\n        String saveAsVmArgs = Urls.mergePaths(getRunDir(), \"vm.args\");\n        DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));\n        commands.add(sudo(\"mv \" + saveAsVmArgs + \" \" + getRiakEtcDir()));\n\n        String appConfigTemplate = processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));\n        String saveAsAppConfig = Urls.mergePaths(getRunDir(), \"app.config\");\n        DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));\n        commands.add(sudo(\"mv \" + saveAsAppConfig + \" \" + getRiakEtcDir()));\n\n        //increase open file limit (default min for riak is: 4096)\n        //TODO: detect the actual limit then do the modificaiton.\n        //TODO: modify ulimit for linux distros\n        //    commands.add(sudo(\"launchctl limit maxfiles 4096 32768\"));\n        if (osDetails.isMac()) {\n            commands.add(\"ulimit -n 4096\");\n        } else if (osDetails.isLinux()) {\n            commands.add(sudo(\"chown -R riak:riak \" + getRiakEtcDir()));\n        }\n\n        ScriptHelper customizeScript = newScript(CUSTOMIZING)\n                .failOnNonZeroResultCode()\n                .body.append(commands);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            customizeScript.environmentVariablesReset(newPathVariable);\n        }\n        customizeScript.execute();\n\n        //set the riak node name\n        entity.setAttribute(RiakNode.RIAK_NODE_NAME, format(\"riak@%s\", getEntity().getAttribute(Attributes.SUBNET_HOSTNAME)));\n    }","id":59557,"modified_method":"@Override\n    public void customize() {\n        //create entity's runDir\n        newScript(CUSTOMIZING).execute();\n\n        isRiakOnPath = isPackageInstall ? isRiakOnPath() : true;\n\n        OsDetails osDetails = getMachine().getMachineDetails().getOsDetails();\n\n        List<String> commands = Lists.newLinkedList();\n        commands.add(sudo(\"mkdir -p \" + getRiakEtcDir()));\n\n        if (isVersion1()) {\n            String vmArgsTemplate = processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));\n            String saveAsVmArgs = Urls.mergePaths(getRunDir(), \"vm.args\");\n            DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));\n            commands.add(sudo(\"mv \" + saveAsVmArgs + \" \" + getRiakEtcDir()));\n\n            String appConfigTemplate = processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));\n            String saveAsAppConfig = Urls.mergePaths(getRunDir(), \"app.config\");\n            DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));\n            commands.add(sudo(\"mv \" + saveAsAppConfig + \" \" + getRiakEtcDir()));\n        } else {\n            String templateUrl = osDetails.isMac() ? entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_MAC) :\n                    entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_LINUX);\n            String riakConfTemplate = processTemplate(templateUrl);\n            String saveAsRiakConf = Urls.mergePaths(getRunDir(), \"riak.conf\");\n            DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsRiakConf).contents(riakConfTemplate));\n            commands.add(sudo(\"mv \" + saveAsRiakConf + \" \" + getRiakEtcDir()));\n        }\n\n        //increase open file limit (default min for riak is: 4096)\n        //TODO: detect the actual limit then do the modification.\n        //TODO: modify ulimit for linux distros\n        //    commands.add(sudo(\"launchctl limit maxfiles 4096 32768\"));\n        if (osDetails.isMac()) {\n            commands.add(\"ulimit -n 4096\");\n        } else if (osDetails.isLinux() && isVersion1()) {\n            commands.add(sudo(\"chown -R riak:riak \" + getRiakEtcDir()));\n        }\n\n        ScriptHelper customizeScript = newScript(CUSTOMIZING)\n                .failOnNonZeroResultCode()\n                .body.append(commands);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            customizeScript.environmentVariablesReset(newPathVariable);\n        }\n        customizeScript.failOnNonZeroResultCode().execute();\n\n        //set the riak node name\n        entity.setAttribute(RiakNode.RIAK_NODE_NAME, format(\"riak@%s\", getEntity().getAttribute(Attributes.SUBNET_HOSTNAME)));\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public void commitCluster() {\n\n        if (hasJoinedCluster()) {\n            ScriptHelper commitClusterScript = newScript(\"commitCluster\")\n                    .body.append(format(\"%s cluster plan\", getRiakAdminCmd()))\n                    .body.append(format(\"%s cluster commit\", getRiakAdminCmd()));\n\n            if (!isRiakOnPath) {\n                Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n                log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n                commitClusterScript.environmentVariablesReset(newPathVariable);\n            }\n            commitClusterScript.execute();\n\n        } else {\n            log.warn(\"entity {}: is not in the riak cluster\", entity.getId());\n        }\n    }","id":59558,"modified_method":"@Override\n    public void commitCluster() {\n\n        if (hasJoinedCluster()) {\n            ScriptHelper commitClusterScript = newScript(\"commitCluster\")\n                    .body.append(sudo(format(\"%s cluster plan\", getRiakAdminCmd())))\n                    .body.append(sudo(format(\"%s cluster commit\", getRiakAdminCmd())))\n                    .failOnNonZeroResultCode();\n\n            if (!isRiakOnPath) {\n                Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n                log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n                commitClusterScript.environmentVariablesReset(newPathVariable);\n            }\n            commitClusterScript.execute();\n\n        } else {\n            log.warn(\"entity {}: is not in the riak cluster\", entity.getId());\n        }\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<String> installMac(String saveAs) {\n        String fullVersion = getEntity().getConfig(RiakNode.SUGGESTED_VERSION);\n        String majorVersion = fullVersion.substring(0, 3);\n        // Docs refer to 10.8. No download for 10.9 seems to exist.\n        String hostOsVersion = \"10.8\";\n        String url = String.format(\"http://s3.amazonaws.com/downloads.basho.com/riak/%s/%s/osx/%s/riak-%s-OSX-x86_64.tar.gz\",\n                majorVersion, fullVersion, hostOsVersion, fullVersion);\n        return ImmutableList.<String>builder()\n                .add(INSTALL_TAR)\n                .add(INSTALL_CURL)\n                .add(commandToDownloadUrlAs(url, saveAs))\n                .add(\"tar xzvf \" + saveAs)\n                .build();\n    }","id":59559,"modified_method":"protected List<String> installMac() {\n        String saveAs = resolver.getFilename();\n        String url = entity.getAttribute(RiakNode.DOWNLOAD_URL_MAC).toString();\n        return ImmutableList.<String>builder()\n                .add(INSTALL_TAR)\n                .add(INSTALL_CURL)\n                .add(commandToDownloadUrlAs(url, saveAs))\n                .add(\"tar xzvf \" + saveAs)\n                .build();\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private List<String> installLinux(String expandedInstallDir) {\n        LOG.info(\"Ignoring version config ({}) and installing from package manager\", getEntity().getConfig(RiakNode.SUGGESTED_VERSION));\n        OsDetails osDetails = getMachine().getMachineDetails().getOsDetails();\n        String osVersion = osDetails.getVersion();\n        String osMajorVersion = osVersion.contains(\".\") ? osVersion.substring(0, osVersion.indexOf(\".\")) : osVersion;\n        String fullVersion = getEntity().getConfig(RiakNode.SUGGESTED_VERSION);\n        String majorVersion = fullVersion.substring(0, 3);\n        String installBin = Urls.mergePaths(expandedInstallDir, \"bin\");\n        String apt = chainGroup(\n                //debian fix\n                \"export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"which apt-get\",\n                ok(sudo(\"apt-get -y --allow-unauthenticated install logrotate libpam0g-dev libssl0.9.8\")),\n                // TODO: Debian support (default debian image fails with 'sudo: command not found')\n                \"[[ \\\"lucid natty precise\\\" =~ (^| )`lsb_release -sc`($| )  ]] && export OS_RELEASE=`lsb_release -sc` || export OS_RELEASE=precise\",\n                String.format(\"wget http://s3.amazonaws.com/downloads.basho.com/riak/%s/%s/ubuntu/$OS_RELEASE/riak_%<s-1_amd64.deb\", majorVersion, fullVersion),\n                sudo(String.format(\"dpkg -i riak_%s-1_amd64.deb\", fullVersion)),\n                sudo(\"apt-get -y --allow-unauthenticated -f install\"));\n        String yum = chainGroup(\n                \"which yum\",\n                ok(sudo(\"yum -y install openssl\")),\n                String.format(\"wget http://s3.amazonaws.com/downloads.basho.com/riak/%s/%s/rhel/%s/riak-%s-1.el6.x86_64.rpm\", majorVersion, fullVersion, osMajorVersion, fullVersion),\n                sudo(String.format(\"rpm -Uvh riak-%s-1.el6.x86_64.rpm\", fullVersion)));\n        return ImmutableList.<String>builder()\n                .add(\"mkdir -p \" + installBin)\n                .add(INSTALL_CURL)\n                .add(alternatives(apt, yum))\n                .add(\"ln -s `which riak` \" + Urls.mergePaths(installBin, \"riak\"))\n                .add(\"ln -s `which riak-admin` \" + Urls.mergePaths(installBin, \"riak-admin\"))\n                .build();\n    }","id":59560,"modified_method":"private List<String> installLinux(String expandedInstallDir) {\n\n        DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(), SshTasks.OnFailingTask.WARN_OR_IF_DYNAMIC_FAIL_MARKING_INESSENTIAL)).orSubmitAndBlock();\n\n        isPackageInstall = true;\n\n        String installBin = Urls.mergePaths(expandedInstallDir, \"bin\");\n        String saveAsYum = \"riak.rpm\";\n        String saveAsApt = \"riak.deb\";\n        OsDetails osDetails = getMachine().getOsDetails();\n        String apt = chainGroup(\n                //debian fix\n                \"export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"which apt-get\",\n                ok(sudo(\"apt-get -y --allow-unauthenticated install logrotate libpam0g-dev libssl0.9.8\")),\n                \"export OS_NAME=\" + osDetails.getName(),\n                // TODO: Debian support (default debian image fails with 'sudo: command not found')\n                \"debian\".equals(osDetails.getName()) ?\n                    \"export OS_RELEASE=\" + osDetails.getVersion().substring(0, osDetails.getVersion().indexOf(\".\")) :\n                    \"export OS_RELEASE=`lsb_release -sc` && \" +\n                    \"export OS_RELEASE=`([[ \\\"lucid natty precise\\\" =~ (^| )\\\\$OS_RELEASE($| ) ]] && echo $OS_RELEASE || echo precise)`\",\n                String.format(\"wget -O %s %s\", saveAsApt, entity.getAttribute(RiakNode.DOWNLOAD_URL_UBUNTU_DEBIAN)),\n                sudo(String.format(\"dpkg -i %s\", saveAsApt)));\n        String yum = chainGroup(\n                \"which yum\",\n                ok(sudo(\"yum -y install openssl\")),\n                String.format(\"wget -O %s %s\", saveAsYum, entity.getAttribute(RiakNode.DOWNLOAD_URL_RHEL_CENTOS)),\n                sudo(String.format(\"rpm -Uvh %s\", saveAsYum)));\n        return ImmutableList.<String>builder()\n                .add(\"mkdir -p \" + installBin)\n                .add(INSTALL_CURL)\n                .add(alternatives(apt, yum))\n                .add(\"ln -s `which riak` \" + Urls.mergePaths(installBin, \"riak\"))\n                .add(\"ln -s `which riak-admin` \" + Urls.mergePaths(installBin, \"riak-admin\"))\n                .build();\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public void stop() {\n\n        leaveCluster();\n\n        String command = format(\"%s stop\", getRiakCmd());\n        command = isPackageInstall ? \"sudo \" + command : command;\n\n        ScriptHelper stopScript = newScript(ImmutableMap.of(USE_PID_FILE, false), STOPPING)\n                .body.append(command);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            stopScript.environmentVariablesReset(newPathVariable);\n        }\n\n        int result = stopScript.execute();\n        if (result != 0) {\n            newScript(ImmutableMap.of(USE_PID_FILE, \"\"), STOPPING).execute();\n        }\n    }","id":59561,"modified_method":"@Override\n    public void stop() {\n\n        leaveCluster();\n\n        String command = format(\"%s stop\", getRiakCmd());\n        command = isPackageInstall ? \"sudo \" + command : command;\n\n        ScriptHelper stopScript = newScript(ImmutableMap.of(USE_PID_FILE, false), STOPPING)\n                .body.append(command);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            stopScript.environmentVariablesReset(newPathVariable);\n        }\n\n        int result = stopScript.failOnNonZeroResultCode().execute();\n        if (result != 0) {\n            newScript(ImmutableMap.of(USE_PID_FILE, \"\"), STOPPING).execute();\n        }\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public void leaveCluster() {\n        //TODO: add 'riak-admin cluster force-remove' for erroneous and unrecoverable nodes.\n        //FIXME: find a way to batch commit the changes, instead of committing for every operation.\n        //FIXME: find a way to check if the node is the last in the cluster to avoid removing the only member and getting \"last node error\"\n\n        if (hasJoinedCluster()) {\n            ScriptHelper leaveClusterScript = newScript(\"leaveCluster\")\n                    .body.append(sudo(format(\"%s cluster leave\", getRiakAdminCmd())))\n                    .body.append(sudo(format(\"%s cluster plan\", getRiakAdminCmd())))\n                    .body.append(sudo(format(\"%s cluster commit\", getRiakAdminCmd())));\n\n            if (!isRiakOnPath) {\n                Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n                log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n                leaveClusterScript.environmentVariablesReset(newPathVariable);\n            }\n\n            leaveClusterScript.execute();\n\n            entity.setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER, Boolean.FALSE);\n        } else {\n            log.warn(\"entity {}: is not in the riak cluster\", entity.getId());\n        }\n    }","id":59562,"modified_method":"@Override\n    public void leaveCluster() {\n        //TODO: add 'riak-admin cluster force-remove' for erroneous and unrecoverable nodes.\n        //FIXME: find a way to batch commit the changes, instead of committing for every operation.\n        //FIXME: find a way to check if the node is the last in the cluster to avoid removing the only member and getting \"last node error\"\n\n        if (hasJoinedCluster()) {\n            ScriptHelper leaveClusterScript = newScript(\"leaveCluster\")\n                    .body.append(sudo(format(\"%s cluster leave\", getRiakAdminCmd())))\n                    .body.append(sudo(format(\"%s cluster plan\", getRiakAdminCmd())))\n                    .body.append(sudo(format(\"%s cluster commit\", getRiakAdminCmd())))\n                    .failOnNonZeroResultCode();\n\n            if (!isRiakOnPath) {\n                Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n                log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n                leaveClusterScript.environmentVariablesReset(newPathVariable);\n            }\n\n            leaveClusterScript.execute();\n\n            entity.setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER, Boolean.FALSE);\n        } else {\n            log.warn(\"entity {}: is not in the riak cluster\", entity.getId());\n        }\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    public void launch() {\n\n        String command = format(\"%s start >/dev/null 2>&1 < /dev/null &\", getRiakCmd());\n        command = isPackageInstall ? BashCommands.sudo(command) : command;\n\n        ScriptHelper launchScript = newScript(LAUNCHING)\n                .body.append(command);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            launchScript.environmentVariablesReset(newPathVariable);\n        }\n        launchScript.execute();\n    }","id":59563,"modified_method":"@Override\n    public void launch() {\n        List<String> commands = Lists.newLinkedList();\n        if (isPackageInstall) {\n            commands.add(sudo(\"service riak start\"));\n        } else {\n            // NOTE: See instructions at http://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1\n            // for increasing the system limit for number of open files\n            commands.add(\"ulimit -n 65536 || true\"); // `BashCommands.ok` will put this in parentheses, which will set ulimit -n in the subshell\n            commands.add(format(\"%s start >/dev/null 2>&1 < /dev/null &\", getRiakCmd()));\n        }\n\n        ScriptHelper launchScript = newScript(LAUNCHING)\n                .body.append(commands);\n\n        if (!isRiakOnPath) {\n            Map<String, String> newPathVariable = ImmutableMap.of(\"PATH\", sbinPath);\n            log.warn(\"riak command not found on PATH. Altering future commands' environment variables from {} to {}\", getShellEnvironment(), newPathVariable);\n            launchScript.environmentVariablesReset(newPathVariable);\n        }\n        launchScript.failOnNonZeroResultCode().execute();\n    }","commit_id":"4abc623ee28e20fc5cc2c18401ca37c01cc9fa12","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"protected void compareVersions(RenderRequest renderRequest)\n\t\tthrows Exception {\n\n\t\tlong sourceVersionId = ParamUtil.getLong(\n\t\t\trenderRequest, \"sourceVersionId\");\n\t\tlong targetVersionId = ParamUtil.getLong(\n\t\t\trenderRequest, \"targetVersionId\");\n\n\t\tFileVersion sourceFileVersion = DLAppServiceUtil.getFileVersion(\n\t\t\tsourceVersionId);\n\n\t\tInputStream sourceIs = sourceFileVersion.getContentStream(false);\n\n\t\tString sourceExtension = sourceFileVersion.getExtension();\n\n\t\tif (sourceExtension.equals(\"css\") || sourceExtension.equals(\"htm\") ||\n\t\t\tsourceExtension.equals(\"html\") || sourceExtension.equals(\"js\") ||\n\t\t\tsourceExtension.equals(\"txt\") || sourceExtension.equals(\"xml\")) {\n\n\t\t\tString sourceContent = HtmlUtil.escape(StringUtil.read(sourceIs));\n\n\t\t\tsourceIs = new UnsyncByteArrayInputStream(\n\t\t\t\tsourceContent.getBytes(StringPool.UTF8));\n\t\t}\n\n\t\tFileVersion targetFileVersion = DLAppLocalServiceUtil.getFileVersion(\n\t\t\ttargetVersionId);\n\n\t\tInputStream targetIs = targetFileVersion.getContentStream(false);\n\n\t\tString targetExtension = targetFileVersion.getExtension();\n\n\t\tif (targetExtension.equals(\"css\") || targetExtension.equals(\"htm\") ||\n\t\t\ttargetExtension.equals(\"html\") || targetExtension.equals(\"js\") ||\n\t\t\ttargetExtension.equals(\"txt\") || targetExtension.equals(\"xml\")) {\n\n\t\t\tString targetContent = HtmlUtil.escape(StringUtil.read(targetIs));\n\n\t\t\ttargetIs = new UnsyncByteArrayInputStream(\n\t\t\t\ttargetContent.getBytes(StringPool.UTF8));\n\t\t}\n\n\t\tString targetVersion = targetFileVersion.getVersion();\n\t\tString sourceVersion = sourceFileVersion.getVersion();\n\n\t\tif (DocumentConversionUtil.isEnabled()) {\n\t\t\tif (DocumentConversionUtil.isConvertBeforeCompare(\n\t\t\t\t\tsourceExtension)) {\n\n\t\t\t\tString sourceTempFileId = DLUtil.getTempFileId(\n\t\t\t\t\tsourceFileVersion.getFileEntryId(), sourceVersion);\n\n\t\t\t\tsourceIs = new FileInputStream(\n\t\t\t\t\tDocumentConversionUtil.convert(\n\t\t\t\t\t\tsourceTempFileId, sourceIs, sourceExtension, \"txt\"));\n\t\t\t}\n\n\t\t\tif (DocumentConversionUtil.isConvertBeforeCompare(\n\t\t\t\t\ttargetExtension)) {\n\n\t\t\t\tString targetTempFileId = DLUtil.getTempFileId(\n\t\t\t\t\ttargetFileVersion.getFileEntryId(), targetVersion);\n\n\t\t\t\ttargetIs = new FileInputStream(\n\t\t\t\t\tDocumentConversionUtil.convert(\n\t\t\t\t\t\ttargetTempFileId, targetIs, targetExtension, \"txt\"));\n\t\t\t}\n\t\t}\n\n\t\tList<DiffResult>[] diffResults = DiffUtil.diff(\n\t\t\tnew InputStreamReader(sourceIs), new InputStreamReader(targetIs));\n\n\t\trenderRequest.setAttribute(\n\t\t\tWebKeys.SOURCE_NAME,\n\t\t\tsourceFileVersion.getTitle() + StringPool.SPACE + sourceVersion);\n\t\trenderRequest.setAttribute(\n\t\t\tWebKeys.TARGET_NAME,\n\t\t\ttargetFileVersion.getTitle() + StringPool.SPACE + targetVersion);\n\t\trenderRequest.setAttribute(WebKeys.DIFF_RESULTS, diffResults);\n\t}","id":59564,"modified_method":"protected void compareVersions(RenderRequest renderRequest)\n\t\tthrows Exception {\n\n\t\tlong sourceFileVersionId = ParamUtil.getLong(\n\t\t\trenderRequest, \"sourceFileVersionId\");\n\t\tlong targetFileVersionId = ParamUtil.getLong(\n\t\t\trenderRequest, \"targetFileVersionId\");\n\n\t\tFileVersion sourceFileVersion = DLAppServiceUtil.getFileVersion(\n\t\t\tsourceFileVersionId);\n\n\t\tInputStream sourceIs = sourceFileVersion.getContentStream(false);\n\n\t\tString sourceExtension = sourceFileVersion.getExtension();\n\n\t\tif (sourceExtension.equals(\"css\") || sourceExtension.equals(\"htm\") ||\n\t\t\tsourceExtension.equals(\"html\") || sourceExtension.equals(\"js\") ||\n\t\t\tsourceExtension.equals(\"txt\") || sourceExtension.equals(\"xml\")) {\n\n\t\t\tString sourceContent = HtmlUtil.escape(StringUtil.read(sourceIs));\n\n\t\t\tsourceIs = new UnsyncByteArrayInputStream(\n\t\t\t\tsourceContent.getBytes(StringPool.UTF8));\n\t\t}\n\n\t\tFileVersion targetFileVersion = DLAppLocalServiceUtil.getFileVersion(\n\t\t\ttargetFileVersionId);\n\n\t\tInputStream targetIs = targetFileVersion.getContentStream(false);\n\n\t\tString targetExtension = targetFileVersion.getExtension();\n\n\t\tif (targetExtension.equals(\"css\") || targetExtension.equals(\"htm\") ||\n\t\t\ttargetExtension.equals(\"html\") || targetExtension.equals(\"js\") ||\n\t\t\ttargetExtension.equals(\"txt\") || targetExtension.equals(\"xml\")) {\n\n\t\t\tString targetContent = HtmlUtil.escape(StringUtil.read(targetIs));\n\n\t\t\ttargetIs = new UnsyncByteArrayInputStream(\n\t\t\t\ttargetContent.getBytes(StringPool.UTF8));\n\t\t}\n\n\t\tif (DocumentConversionUtil.isEnabled()) {\n\t\t\tif (DocumentConversionUtil.isConvertBeforeCompare(\n\t\t\t\t\tsourceExtension)) {\n\n\t\t\t\tString sourceTempFileId = DLUtil.getTempFileId(\n\t\t\t\t\tsourceFileVersion.getFileEntryId(),\n\t\t\t\t\tsourceFileVersion.getVersion());\n\n\t\t\t\tsourceIs = new FileInputStream(\n\t\t\t\t\tDocumentConversionUtil.convert(\n\t\t\t\t\t\tsourceTempFileId, sourceIs, sourceExtension, \"txt\"));\n\t\t\t}\n\n\t\t\tif (DocumentConversionUtil.isConvertBeforeCompare(\n\t\t\t\t\ttargetExtension)) {\n\n\t\t\t\tString targetTempFileId = DLUtil.getTempFileId(\n\t\t\t\t\ttargetFileVersion.getFileEntryId(),\n\t\t\t\t\ttargetFileVersion.getVersion());\n\n\t\t\t\ttargetIs = new FileInputStream(\n\t\t\t\t\tDocumentConversionUtil.convert(\n\t\t\t\t\t\ttargetTempFileId, targetIs, targetExtension, \"txt\"));\n\t\t\t}\n\t\t}\n\n\t\tList<DiffResult>[] diffResults = DiffUtil.diff(\n\t\t\tnew InputStreamReader(sourceIs), new InputStreamReader(targetIs));\n\n\t\trenderRequest.setAttribute(\n\t\t\tWebKeys.SOURCE_NAME,\n\t\t\tsourceFileVersion.getTitle() + StringPool.SPACE +\n\t\t\t\tsourceFileVersion.getVersion());\n\t\trenderRequest.setAttribute(\n\t\t\tWebKeys.TARGET_NAME,\n\t\t\ttargetFileVersion.getTitle() + StringPool.SPACE +\n\t\t\t\ttargetFileVersion.getVersion());\n\t\trenderRequest.setAttribute(WebKeys.DIFF_RESULTS, diffResults);\n\t}","commit_id":"695b46bc1a7f08cb5f9ba35612961bd777ca7732","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static String toJSONSerializedString(ResponseObject result) {\n        if (result != null) {\n            Gson gson = ApiResponseGsonHelper.getBuilder().excludeFieldsWithModifiers(Modifier.TRANSIENT).create();\n            \t\n            StringBuilder sb = new StringBuilder();\n\n            sb.append(\"{ \\\"\").append(result.getResponseName()).append(\"\\\" : \");\n            if (result instanceof ListResponse) {\n                List<? extends ResponseObject> responses = ((ListResponse) result).getResponses();\n                Integer count = ((ListResponse) result).getCount();\n                boolean nonZeroCount = (count != null && count.longValue() != 0);\n                if (nonZeroCount) {\n                    sb.append(\"{ \\\"\").append(ApiConstants.COUNT).append(\"\\\":\").append(count);\n                }\n                \n                if ((responses != null) && !responses.isEmpty()) {\n                    String jsonStr = gson.toJson(responses.get(0));                    \n                    jsonStr = unescape(jsonStr);\n\n                    if (nonZeroCount) {\n                        sb.append(\" ,\\\"\").append(responses.get(0).getObjectName()).append(\"\\\" : [  \").append(jsonStr);\n                    }\n                    \n                    for (int i = 1; i < ((ListResponse) result).getResponses().size(); i++) {\n                        jsonStr = gson.toJson(responses.get(i));\n                        jsonStr = unescape(jsonStr);\n                        sb.append(\", \").append(jsonStr);\n                    }\n                    sb.append(\" ] }\");\n                } else  {\n                    if (!nonZeroCount){ \n                        sb.append(\"{\");\n                    }\n                    \n                    sb.append(\" }\");\n                }\n            } else if (result instanceof SuccessResponse) {\n                sb.append(\"{ \\\"success\\\" : \\\"\").append(((SuccessResponse) result).getSuccess()).append(\"\\\"} \");\n            } else if (result instanceof ExceptionResponse) {\n            \tString jsonErrorText = gson.toJson((ExceptionResponse) result);\n            \tjsonErrorText = unescape(jsonErrorText);\n            \tsb.append(jsonErrorText);            \t\n            } else {\n                String jsonStr = gson.toJson(result);\n                if ((jsonStr != null) && !\"\".equals(jsonStr)) {\n                    jsonStr = unescape(jsonStr);\n                    if (result instanceof AsyncJobResponse || result instanceof CreateCmdResponse) {\n                        sb.append(jsonStr);\n                    } else {\n                        sb.append(\" { \\\"\").append(result.getObjectName()).append(\"\\\" : \").append(jsonStr).append(\" } \");\n                    }\n                } else {\n                    sb.append(\"{ }\");\n                }\n            }\n            sb.append(\" }\");            \n            return sb.toString();\n        }\n        return null;\n    }","id":59565,"modified_method":"public static String toJSONSerializedString(ResponseObject result) {\n        if (result != null) {\n            Gson gson = ApiResponseGsonHelper.getBuilder().excludeFieldsWithModifiers(Modifier.TRANSIENT).create();\n            \t\n            StringBuilder sb = new StringBuilder();\n\n            sb.append(\"{ \\\"\").append(result.getResponseName()).append(\"\\\" : \");\n            if (result instanceof ListResponse) {\n                List<? extends ResponseObject> responses = ((ListResponse) result).getResponses();\n                Integer count = ((ListResponse) result).getCount();\n                boolean nonZeroCount = (count != null && count.longValue() != 0);\n                if (nonZeroCount) {\n                    sb.append(\"{ \\\"\").append(ApiConstants.COUNT).append(\"\\\":\").append(count);\n                }\n                \n                if ((responses != null) && !responses.isEmpty()) {\n                    String jsonStr = gson.toJson(responses.get(0));                    \n                    jsonStr = unescape(jsonStr);\n\n                    if (nonZeroCount) {\n                        sb.append(\" ,\\\"\").append(responses.get(0).getObjectName()).append(\"\\\" : [  \").append(jsonStr);\n                    }\n                    \n                    for (int i = 1; i < ((ListResponse) result).getResponses().size(); i++) {\n                        jsonStr = gson.toJson(responses.get(i));\n                        jsonStr = unescape(jsonStr);\n                        sb.append(\", \").append(jsonStr);\n                    }\n                    sb.append(\" ] }\");\n                } else  {\n                    if (!nonZeroCount){ \n                        sb.append(\"{\");\n                    }\n                    \n                    sb.append(\" }\");\n                }\n            } else if (result instanceof SuccessResponse) {\n                sb.append(\"{ \\\"success\\\" : \\\"\").append(((SuccessResponse) result).getSuccess()).append(\"\\\"} \");\n            } else if (result instanceof ExceptionResponse) {\n            \tString jsonErrorText = gson.toJson((ExceptionResponse) result);\n            \tjsonErrorText = unescape(jsonErrorText);\n            \tsb.append(jsonErrorText);            \t\n            } else {\n                String jsonStr = gson.toJson(result);\n                if ((jsonStr != null) && !\"\".equals(jsonStr)) {\n                    jsonStr = unescape(jsonStr);\n                    if (result instanceof AsyncJobResponse || result instanceof CreateCmdResponse) {\n                        sb.append(jsonStr);\n                    } else {\n                        sb.append(\" { \\\"\").append(result.getObjectName()).append(\"\\\" : \").append(jsonStr).append(\" } \");\n                    }\n                } else {\n                    sb.append(\"{ }\");\n                }\n            }\n            sb.append(\", \\\"cloudstack-version\\\": \\\"\");\n            sb.append(ApiDBUtils.getVersion());\n            sb.append(\"\\\" }\");\n            return sb.toString();\n        }\n        return null;\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"private static String toXMLSerializedString(ResponseObject result) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n        sb.append(\"<\").append(result.getResponseName()).append(\" cloud-stack-version=\\\"\").append(ApiDBUtils.getVersion()).append(\"\\\">\");\n\n        if (result instanceof ListResponse) {\n            Integer count = ((ListResponse) result).getCount();\n\n            if (count != null && count != 0) {\n                sb.append(\"<\").append(ApiConstants.COUNT).append(\">\").append(((ListResponse) result).getCount()).\n                append(\"<\/\").append(ApiConstants.COUNT).append(\">\");\n            }\n            List<? extends ResponseObject> responses = ((ListResponse) result).getResponses();\n            if ((responses != null) && !responses.isEmpty()) {\n                for (ResponseObject obj : responses) {\n                    serializeResponseObjXML(sb, obj);\n                }\n            }\n        } else {\n            if (result instanceof CreateCmdResponse || result instanceof AsyncJobResponse) {\n                serializeResponseObjFieldsXML(sb, result);\n            } else {\n                serializeResponseObjXML(sb, result);\n            }\n        }\n\n        sb.append(\"<\/\").append(result.getResponseName()).append(\">\");\n        return sb.toString();\n    }","id":59566,"modified_method":"private static String toXMLSerializedString(ResponseObject result) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n        sb.append(\"<\").append(result.getResponseName()).append(\" cloudstack-version=\\\"\").append(ApiDBUtils.getVersion()).append(\"\\\">\");\n\n        if (result instanceof ListResponse) {\n            Integer count = ((ListResponse) result).getCount();\n\n            if (count != null && count != 0) {\n                sb.append(\"<\").append(ApiConstants.COUNT).append(\">\").append(((ListResponse) result).getCount()).\n                append(\"<\/\").append(ApiConstants.COUNT).append(\">\");\n            }\n            List<? extends ResponseObject> responses = ((ListResponse) result).getResponses();\n            if ((responses != null) && !responses.isEmpty()) {\n                for (ResponseObject obj : responses) {\n                    serializeResponseObjXML(sb, obj);\n                }\n            }\n        } else {\n            if (result instanceof CreateCmdResponse || result instanceof AsyncJobResponse) {\n                serializeResponseObjFieldsXML(sb, result);\n            } else {\n                serializeResponseObjXML(sb, result);\n            }\n        }\n\n        sb.append(\"<\/\").append(result.getResponseName()).append(\">\");\n        return sb.toString();\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"private String getLogoutSuccessResponse(String responseType) {\n        StringBuffer sb = new StringBuffer();\n        if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            sb.append(\"{ \\\"logoutresponse\\\" : { \\\"description\\\" : \\\"success\\\" } }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<logoutresponse cloud-stack-version=\\\"\" + ApiDBUtils.getVersion() + \"\\\">\");\n            sb.append(\"<description>success<\/description>\");\n            sb.append(\"<\/logoutresponse>\");\n        }\n        return sb.toString();\n    }","id":59567,"modified_method":"private String getLogoutSuccessResponse(String responseType) {\n        StringBuffer sb = new StringBuffer();\n        if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            sb.append(\"{ \\\"logoutresponse\\\" : { \\\"description\\\" : \\\"success\\\" }\");\n            sb.append(\", \\\"cloudstack-version\\\": \\\"\");\n            sb.append(ApiDBUtils.getVersion());\n            sb.append(\"\\\" }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<logoutresponse cloudstack-version=\\\"\" + ApiDBUtils.getVersion() + \"\\\">\");\n            sb.append(\"<description>success<\/description>\");\n            sb.append(\"<\/logoutresponse>\");\n        }\n        return sb.toString();\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"@SuppressWarnings(\"rawtypes\")\n    private String getLoginSuccessResponse(HttpSession session, String responseType) {\n        StringBuffer sb = new StringBuffer();\n        int inactiveInterval = session.getMaxInactiveInterval();\n        \n        String user_UUID = (String)session.getAttribute(\"user_UUID\");\n        session.removeAttribute(\"user_UUID\");\n\n        String domain_UUID = (String)session.getAttribute(\"domain_UUID\");\n        session.removeAttribute(\"domain_UUID\");\n\n        if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            sb.append(\"{ \\\"loginresponse\\\" : { \");\n            Enumeration attrNames = session.getAttributeNames();\n            if (attrNames != null) {\n                sb.append(\"\\\"timeout\\\" : \\\"\" + inactiveInterval + \"\\\"\");\n                while (attrNames.hasMoreElements()) {\n                    String attrName = (String) attrNames.nextElement();\n                    if(\"userid\".equalsIgnoreCase(attrName)){\n                        sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + user_UUID + \"\\\"\");\n                    }else if(\"domainid\".equalsIgnoreCase(attrName)){\n                        sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + domain_UUID + \"\\\"\");\n                    }else{\n                        Object attrObj = session.getAttribute(attrName);\n                        if ((attrObj instanceof String) || (attrObj instanceof Long)) {\n                            sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + attrObj.toString() + \"\\\"\");\n                        }\n                    }\n                }\n            }\n            sb.append(\" } }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<loginresponse cloud-stack-version=\\\"\" + ApiDBUtils.getVersion() + \"\\\">\");\n            sb.append(\"<timeout>\" + inactiveInterval + \"<\/timeout>\");\n            Enumeration attrNames = session.getAttributeNames();\n            if (attrNames != null) {\n                while (attrNames.hasMoreElements()) {\n                    String attrName = (String) attrNames.nextElement();\n                    if(\"userid\".equalsIgnoreCase(attrName)){\n                        sb.append(\"<\" + attrName + \">\" + user_UUID + \"<\/\" + attrName + \">\");\n                    }else if(\"domainid\".equalsIgnoreCase(attrName)){\n                        sb.append(\"<\" + attrName + \">\" + domain_UUID + \"<\/\" + attrName + \">\");\n                    }else{\n                        Object attrObj = session.getAttribute(attrName);\n                        if (attrObj instanceof String || attrObj instanceof Long || attrObj instanceof Short) {\n                            sb.append(\"<\" + attrName + \">\" + attrObj.toString() + \"<\/\" + attrName + \">\");\n                        }\n                    }\n                }\n            }\n\n            sb.append(\"<\/loginresponse>\");\n        }\n        return sb.toString();\n    }","id":59568,"modified_method":"@SuppressWarnings(\"rawtypes\")\n    private String getLoginSuccessResponse(HttpSession session, String responseType) {\n        StringBuffer sb = new StringBuffer();\n        int inactiveInterval = session.getMaxInactiveInterval();\n        \n        String user_UUID = (String)session.getAttribute(\"user_UUID\");\n        session.removeAttribute(\"user_UUID\");\n\n        String domain_UUID = (String)session.getAttribute(\"domain_UUID\");\n        session.removeAttribute(\"domain_UUID\");\n\n        if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            sb.append(\"{ \\\"loginresponse\\\" : { \");\n            Enumeration attrNames = session.getAttributeNames();\n            if (attrNames != null) {\n                sb.append(\"\\\"timeout\\\" : \\\"\" + inactiveInterval + \"\\\"\");\n                while (attrNames.hasMoreElements()) {\n                    String attrName = (String) attrNames.nextElement();\n                    if(\"userid\".equalsIgnoreCase(attrName)){\n                        sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + user_UUID + \"\\\"\");\n                    }else if(\"domainid\".equalsIgnoreCase(attrName)){\n                        sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + domain_UUID + \"\\\"\");\n                    }else{\n                        Object attrObj = session.getAttribute(attrName);\n                        if ((attrObj instanceof String) || (attrObj instanceof Long)) {\n                            sb.append(\", \\\"\" + attrName + \"\\\" : \\\"\" + attrObj.toString() + \"\\\"\");\n                        }\n                    }\n                }\n            }\n            sb.append(\" }\");\n            sb.append(\", \\\"cloudstack-version\\\": \\\"\");\n            sb.append(ApiDBUtils.getVersion());\n            sb.append(\"\\\" }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<loginresponse cloudstack-version=\\\"\" + ApiDBUtils.getVersion() + \"\\\">\");\n            sb.append(\"<timeout>\" + inactiveInterval + \"<\/timeout>\");\n            Enumeration attrNames = session.getAttributeNames();\n            if (attrNames != null) {\n                while (attrNames.hasMoreElements()) {\n                    String attrName = (String) attrNames.nextElement();\n                    if(\"userid\".equalsIgnoreCase(attrName)){\n                        sb.append(\"<\" + attrName + \">\" + user_UUID + \"<\/\" + attrName + \">\");\n                    }else if(\"domainid\".equalsIgnoreCase(attrName)){\n                        sb.append(\"<\" + attrName + \">\" + domain_UUID + \"<\/\" + attrName + \">\");\n                    }else{\n                        Object attrObj = session.getAttribute(attrName);\n                        if (attrObj instanceof String || attrObj instanceof Long || attrObj instanceof Short) {\n                            sb.append(\"<\" + attrName + \">\" + attrObj.toString() + \"<\/\" + attrName + \">\");\n                        }\n                    }\n                }\n            }\n\n            sb.append(\"<\/loginresponse>\");\n        }\n        return sb.toString();\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"public String buildResponse(ServerApiException apiException, String responseType) {\n        StringBuffer sb = new StringBuffer();\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            // JSON response\n            sb.append(\"{ \\\"\" + getCommandName() + \"\\\" : { \" + \"\\\"@attributes\\\":{\\\"cloud-stack-version\\\":\\\"\" + _mgr.getVersion() + \"\\\"},\");\n            sb.append(\"\\\"errorcode\\\" : \\\"\" + apiException.getErrorCode() + \"\\\", \\\"description\\\" : \\\"\" + apiException.getDescription() + \"\\\" } }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<\" + getCommandName() + \">\");\n            sb.append(\"<errorcode>\" + apiException.getErrorCode() + \"<\/errorcode>\");\n            sb.append(\"<description>\" + escapeXml(apiException.getDescription()) + \"<\/description>\");\n            sb.append(\"<\/\" + getCommandName() + \" cloud-stack-version=\\\"\" + _mgr.getVersion() + \"\\\">\");\n        }\n        return sb.toString();\n    }","id":59569,"modified_method":"public String buildResponse(ServerApiException apiException, String responseType) {\n        StringBuffer sb = new StringBuffer();\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            // JSON response\n            sb.append(\"{ \\\"\" + getCommandName() + \"\\\" : { \" + \"\\\"@attributes\\\":{\\\"cloudstack-version\\\":\\\"\" + _mgr.getVersion() + \"\\\"},\");\n            sb.append(\"\\\"errorcode\\\" : \\\"\" + apiException.getErrorCode() + \"\\\", \\\"description\\\" : \\\"\" + apiException.getDescription() + \"\\\" } }\");\n        } else {\n            sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            sb.append(\"<\" + getCommandName() + \">\");\n            sb.append(\"<errorcode>\" + apiException.getErrorCode() + \"<\/errorcode>\");\n            sb.append(\"<description>\" + escapeXml(apiException.getDescription()) + \"<\/description>\");\n            sb.append(\"<\/\" + getCommandName() + \" cloudstack-version=\\\"\" + _mgr.getVersion() + \"\\\">\");\n        }\n        return sb.toString();\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"public String buildResponse(List<Pair<String, Object>> tagList, String responseType) {\n        StringBuffer prefixSb = new StringBuffer();\n        StringBuffer suffixSb = new StringBuffer();\n\n        // set up the return value with the name of the response\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            prefixSb.append(\"{ \\\"\" + getCommandName() + \"\\\" : { \\\"@attributes\\\":{\\\"cloud-stack-version\\\":\\\"\" + _mgr.getVersion() + \"\\\"},\");\n        } else {\n            prefixSb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            prefixSb.append(\"<\" + getCommandName() + \" cloud-stack-version=\\\"\" + _mgr.getVersion() + \"\\\">\");\n        }\n\n        int i = 0;\n        for (Pair<String, Object> tagData : tagList) {\n            String tagName = tagData.first();\n            Object tagValue = tagData.second();\n            if (tagValue instanceof Object[]) {\n                Object[] subObjects = (Object[]) tagValue;\n                if (subObjects.length < 1) {\n                    continue;\n                }\n                writeObjectArray(responseType, suffixSb, i++, tagName, subObjects);\n            } else {\n                writeNameValuePair(suffixSb, tagName, tagValue, responseType, i++);\n            }\n        }\n\n        if (suffixSb.length() > 0) {\n            if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) { // append comma only if we have some suffix else\n                // not as per strict Json syntax.\n                prefixSb.append(\",\");\n            }\n            prefixSb.append(suffixSb);\n        }\n        // close the response\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            prefixSb.append(\"} }\");\n        } else {\n            prefixSb.append(\"<\/\" + getCommandName() + \">\");\n        }\n        return prefixSb.toString();\n    }","id":59570,"modified_method":"public String buildResponse(List<Pair<String, Object>> tagList, String responseType) {\n        StringBuffer prefixSb = new StringBuffer();\n        StringBuffer suffixSb = new StringBuffer();\n\n        // set up the return value with the name of the response\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            prefixSb.append(\"{ \\\"\" + getCommandName() + \"\\\" : { \\\"@attributes\\\":{\\\"cloudstack-version\\\":\\\"\" + _mgr.getVersion() + \"\\\"},\");\n        } else {\n            prefixSb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");\n            prefixSb.append(\"<\" + getCommandName() + \" cloudstack-version=\\\"\" + _mgr.getVersion() + \"\\\">\");\n        }\n\n        int i = 0;\n        for (Pair<String, Object> tagData : tagList) {\n            String tagName = tagData.first();\n            Object tagValue = tagData.second();\n            if (tagValue instanceof Object[]) {\n                Object[] subObjects = (Object[]) tagValue;\n                if (subObjects.length < 1) {\n                    continue;\n                }\n                writeObjectArray(responseType, suffixSb, i++, tagName, subObjects);\n            } else {\n                writeNameValuePair(suffixSb, tagName, tagValue, responseType, i++);\n            }\n        }\n\n        if (suffixSb.length() > 0) {\n            if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) { // append comma only if we have some suffix else\n                // not as per strict Json syntax.\n                prefixSb.append(\",\");\n            }\n            prefixSb.append(suffixSb);\n        }\n        // close the response\n        if (RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {\n            prefixSb.append(\"} }\");\n        } else {\n            prefixSb.append(\"<\/\" + getCommandName() + \">\");\n        }\n        return prefixSb.toString();\n    }","commit_id":"f8a483fc5a47cb66ac4788fcd7d53da0c9d6ea2b","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(request.getContextPath());\n\t\t}\n\t\ttargetUrl.append(getUrl());\n\t\tif (this.exposeModelAttributes) {\n\t\t\tString enc = this.encodingScheme;\n\t\t\tif (enc == null) {\n\t\t\t\tenc = request.getCharacterEncoding();\n\t\t\t}\n\t\t\tif (enc == null) {\n\t\t\t\tenc = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\t\t\t}\n\t\t\tappendQueryProperties(targetUrl, model, enc);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","id":59571,"modified_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(request.getContextPath());\n\t\t}\n\t\ttargetUrl.append(getUrl());\n\n\t\tString enc = this.encodingScheme;\n\t\tif (enc == null) {\n\t\t\tenc = request.getCharacterEncoding();\n\t\t}\n\t\tif (enc == null) {\n\t\t\tenc = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\t\t}\n\n\t\tUriTemplate uriTemplate = createUriTemplate(targetUrl, enc);\n\t\tif (uriTemplate.getVariableNames().size() > 0) {\n\t\t\ttargetUrl = new StringBuilder(uriTemplate.expand(model).toString());\n\t\t\tmodel = removeKeys(model, uriTemplate.getVariableNames());\n\t\t}\n\t\tif (this.exposeModelAttributes) {\n\t\t\tappendQueryProperties(targetUrl, model, enc);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","commit_id":"761a8362363fd99e80b149674180f79096bfe4ca","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(request.getContextPath());\n\t\t}\n\t\ttargetUrl.append(getUrl());\n\n\t\tString enc = this.encodingScheme;\n\t\tif (enc == null) {\n\t\t\tenc = request.getCharacterEncoding();\n\t\t}\n\t\tif (enc == null) {\n\t\t\tenc = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\t\t}\n\n\t\tUriTemplate uriTemplate = createUriTemplate(targetUrl, enc);\n\t\tif (uriTemplate.getVariableNames().size() > 0) {\n\t\t\ttargetUrl = new StringBuilder(uriTemplate.expand(model).toString());\n\t\t\tmodel = removeKeys(model, uriTemplate.getVariableNames());\n\t\t}\n\t\tif (this.exposeModelAttributes) {\n\t\t\tappendQueryProperties(targetUrl, model, enc);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","id":59572,"modified_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(request.getContextPath());\n\t\t}\n\t\ttargetUrl.append(getUrl());\n\n\t\tString enc = this.encodingScheme;\n\t\tif (enc == null) {\n\t\t\tenc = request.getCharacterEncoding();\n\t\t}\n\t\tif (enc == null) {\n\t\t\tenc = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\t\t}\n\n\t\tUriTemplate redirectUri = createUriTemplate(targetUrl, enc);\n\t\tif (redirectUri.getVariableNames().size() > 0) {\n\t\t\ttargetUrl = new StringBuilder(redirectUri.expand(model).toString());\n\t\t\tmodel = removeKeys(model, redirectUri.getVariableNames());\n\t\t}\n\t\tif (this.exposeModelAttributes) {\n\t\t\tList<String> uriTemplateVarNames = getUriTemplateVarNames(request);\n\t\t\tif (!uriTemplateVarNames.isEmpty()) {\n\t\t\t\tmodel = removeKeys(model, uriTemplateVarNames);\n\t\t\t}\n\t\t\tappendQueryProperties(targetUrl, model, enc);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","commit_id":"23f31d453f1629a694562b72edb73aeeceb5afc2","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void pathVarWithObjectConversion() throws Exception {\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tmodel.put(\"foo\", new Long(611));\n\n\t\tRedirectView redirectView = new RedirectView(\"/foo/{foo}\");\n\t\tredirectView.renderMergedOutputModel(model, request, response);\n\n\t\tassertEquals(\"/foo/611\", response.getRedirectedUrl());\n\t}","id":59573,"modified_method":"@Test\n\tpublic void uriTemplateVarWithObjectConversion() throws Exception {\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tmodel.put(\"foo\", new Long(611));\n\n\t\tRedirectView redirectView = new RedirectView(\"/foo/{foo}\");\n\t\tredirectView.renderMergedOutputModel(model, request, response);\n\n\t\tassertEquals(\"/foo/611\", response.getRedirectedUrl());\n\t}","commit_id":"23f31d453f1629a694562b72edb73aeeceb5afc2","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void pathVarAndArrayParam() throws Exception {\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tmodel.put(\"foo\", \"bar\");\n\t\tmodel.put(\"fooArr\", new String[] { \"baz\", \"bazz\" });\n\n\t\tRedirectView redirectView = new RedirectView(\"/foo/{foo}\");\n\t\tredirectView.renderMergedOutputModel(model, request, response);\n\n\t\tassertEquals(\"/foo/bar?fooArr=baz&fooArr=bazz\", response.getRedirectedUrl());\n\t}","id":59574,"modified_method":"@Test\n\tpublic void uriTemplateVarAndArrayParam() throws Exception {\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tmodel.put(\"foo\", \"bar\");\n\t\tmodel.put(\"fooArr\", new String[] { \"baz\", \"bazz\" });\n\n\t\tRedirectView redirectView = new RedirectView(\"/foo/{foo}\");\n\t\tredirectView.renderMergedOutputModel(model, request, response);\n\n\t\tassertEquals(\"/foo/bar?fooArr=baz&fooArr=bazz\", response.getRedirectedUrl());\n\t}","commit_id":"23f31d453f1629a694562b72edb73aeeceb5afc2","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\tString encoding = getEncoding(request);\n\t\t\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(UriUtils.encodePath(request.getContextPath(), encoding));\n\t\t\ttargetUrl.append(UriUtils.encodeUri(getUrl(), encoding));\n\t\t}\n\t\telse {\n\t\t\ttargetUrl.append(UriUtils.encodeUri(getUrl(), encoding));\n\t\t}\n\t\tif (this.exposeModelAttributes) {\n\t\t\tappendQueryProperties(targetUrl, model, encoding);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","id":59575,"modified_method":"/**\n\t * Convert model to request parameters and redirect to the given URL.\n\t * @see #appendQueryProperties\n\t * @see #sendRedirect\n\t */\n\t@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap<String, Object> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\n\t\t// Prepare target URL.\n\t\tStringBuilder targetUrl = new StringBuilder();\n\t\tif (this.contextRelative && getUrl().startsWith(\"/\")) {\n\t\t\t// Do not apply context path to relative URLs.\n\t\t\ttargetUrl.append(request.getContextPath());\n\t\t}\n\t\ttargetUrl.append(getUrl());\n\t\tif (this.exposeModelAttributes) {\n\t\t\tString enc = this.encodingScheme;\n\t\t\tif (enc == null) {\n\t\t\t\tenc = request.getCharacterEncoding();\n\t\t\t}\n\t\t\tif (enc == null) {\n\t\t\t\tenc = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\t\t\t}\n\t\t\tappendQueryProperties(targetUrl, model, enc);\n\t\t}\n\n\t\tsendRedirect(request, response, targetUrl.toString(), this.http10Compatible);\n\t}","commit_id":"d0f13b5bebe548232bd4d2658db81bc2e7203c5f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Append query properties to the redirect URL.\n\t * Stringifies, URL-encodes and formats model attributes as query properties.\n\t * @param targetUrl the StringBuilder to append the properties to\n\t * @param model Map that contains model attributes\n\t * @param encodingScheme the encoding scheme to use\n\t * @throws UnsupportedEncodingException if string encoding failed\n\t * @see #queryProperties\n\t */\n\tprotected void appendQueryProperties(StringBuilder targetUrl, Map<String, Object> model, String encodingScheme)\n\t\t\tthrows UnsupportedEncodingException {\n\n\t\t// Extract anchor fragment, if any.\n\t\tString fragment = null;\n\t\tint anchorIndex = targetUrl.indexOf(\"#\");\n\t\tif (anchorIndex > -1) {\n\t\t\tfragment = targetUrl.substring(anchorIndex);\n\t\t\ttargetUrl.delete(anchorIndex, targetUrl.length());\n\t\t}\n\n\t\t// If there aren't already some parameters, we need a \"?\".\n\t\tboolean first = (getUrl().indexOf('?') < 0);\n\t\tfor (Map.Entry<String, Object> entry : queryProperties(model).entrySet()) {\n\t\t\tObject rawValue = entry.getValue();\n\t\t\tIterator valueIter;\n\t\t\tif (rawValue != null && rawValue.getClass().isArray()) {\n\t\t\t\tvalueIter = Arrays.asList(ObjectUtils.toObjectArray(rawValue)).iterator();\n\t\t\t}\n\t\t\telse if (rawValue instanceof Collection) {\n\t\t\t\tvalueIter = ((Collection) rawValue).iterator();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalueIter = Collections.singleton(rawValue).iterator();\n\t\t\t}\n\t\t\twhile (valueIter.hasNext()) {\n\t\t\t\tObject value = valueIter.next();\n\t\t\t\tif (first) {\n\t\t\t\t\ttargetUrl.append('?');\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttargetUrl.append('&');\n\t\t\t\t}\n\t\t\t\tString encodedKey = UriUtils.encodeQueryParam(entry.getKey(), encodingScheme);\n\t\t\t\tString encodedValue = (value != null ? UriUtils.encodeQueryParam(value.toString(), encodingScheme) : \"\");\n\t\t\t\ttargetUrl.append(encodedKey).append('=').append(encodedValue);\n\t\t\t}\n\t\t}\n\n\t\t// Append anchor fragment, if any, to end of URL.\n\t\tif (fragment != null) {\n\t\t\ttargetUrl.append(fragment);\n\t}\n\t}","id":59576,"modified_method":"/**\n\t * Append query properties to the redirect URL.\n\t * Stringifies, URL-encodes and formats model attributes as query properties.\n\t * @param targetUrl the StringBuilder to append the properties to\n\t * @param model Map that contains model attributes\n\t * @param encodingScheme the encoding scheme to use\n\t * @throws UnsupportedEncodingException if string encoding failed\n\t * @see #queryProperties\n\t */\n\tprotected void appendQueryProperties(StringBuilder targetUrl, Map<String, Object> model, String encodingScheme)\n\t\t\tthrows UnsupportedEncodingException {\n\n\t\t// Extract anchor fragment, if any.\n\t\tString fragment = null;\n\t\tint anchorIndex = targetUrl.indexOf(\"#\");\n\t\tif (anchorIndex > -1) {\n\t\t\tfragment = targetUrl.substring(anchorIndex);\n\t\t\ttargetUrl.delete(anchorIndex, targetUrl.length());\n\t\t}\n\n\t\t// If there aren't already some parameters, we need a \"?\".\n\t\tboolean first = (getUrl().indexOf('?') < 0);\n\t\tfor (Map.Entry<String, Object> entry : queryProperties(model).entrySet()) {\n\t\t\tObject rawValue = entry.getValue();\n\t\t\tIterator valueIter = null;\n\t\t\tif (rawValue != null && rawValue.getClass().isArray()) {\n\t\t\t\tvalueIter = Arrays.asList(ObjectUtils.toObjectArray(rawValue)).iterator();\n\t\t\t}\n\t\t\telse if (rawValue instanceof Collection) {\n\t\t\t\tvalueIter = ((Collection) rawValue).iterator();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalueIter = Collections.singleton(rawValue).iterator();\n\t\t\t}\n\t\t\twhile (valueIter.hasNext()) {\n\t\t\t\tObject value = valueIter.next();\n\t\t\t\tif (first) {\n\t\t\t\t\ttargetUrl.append('?');\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttargetUrl.append('&');\n\t\t\t\t}\n\t\t\t\tString encodedKey = urlEncode(entry.getKey(), encodingScheme);\n\t\t\t\tString encodedValue = (value != null ? urlEncode(value.toString(), encodingScheme) : \"\");\n\t\t\t\ttargetUrl.append(encodedKey).append('=').append(encodedValue);\n\t\t\t}\n\t\t}\n\n\t\t// Append anchor fragment, if any, to end of URL.\n\t\tif (fragment != null) {\n\t\t\ttargetUrl.append(fragment);\n\t\t}\n\t}","commit_id":"d0f13b5bebe548232bd4d2658db81bc2e7203c5f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Determines the status code to use for HTTP 1.1 compatible requests.\n\t * <p>The default implemenetation returns the {@link #setStatusCode(HttpStatus) statusCode}\n\t * property if set, or the value of the {@link #RESPONSE_STATUS_ATTRIBUTE} attribute.\n\t * If neither are set, it defaults to {@link HttpStatus#SEE_OTHER} (303).\n\t * @param request the request to inspect\n\t * @param response the servlet response\n\t * @param targetUrl the target URL\n\t * @return the response status\n\t */\n\tprotected HttpStatus getHttp11StatusCode(\n\t\t\tHttpServletRequest request, HttpServletResponse response, String targetUrl) {\n\n\t\tif (this.statusCode != null) {\n\t\t\treturn this.statusCode;\n\t\t}\n\t\tHttpStatus attributeStatusCode = (HttpStatus) request.getAttribute(View.RESPONSE_STATUS_ATTRIBUTE);\n\t\tif (attributeStatusCode != null) {\n\t\t\treturn attributeStatusCode;\n\t\t}\n\t\treturn HttpStatus.SEE_OTHER;\n\t}","id":59577,"modified_method":"/**\n\t * Determines the status code to use for HTTP 1.1 compatible requests.\n\t * <p>The default implemenetation returns the {@link #setStatusCode(HttpStatus) statusCode}\n\t * property if set, or the value of the {@link #RESPONSE_STATUS_ATTRIBUTE} attribute. If neither are\n\t * set, it defaults to {@link HttpStatus#SEE_OTHER} (303).\n\t * @param request the request to inspect\n\t * @return the response\n\t */\n\tprotected HttpStatus getHttp11StatusCode(HttpServletRequest request, HttpServletResponse response, String targetUrl) {\n\t\tif (statusCode != null) {\n\t\t\treturn statusCode;\n\t\t}\n\t\tHttpStatus attributeStatusCode = (HttpStatus) request.getAttribute(View.RESPONSE_STATUS_ATTRIBUTE);\n\t\tif (attributeStatusCode != null) {\n\t\t\treturn attributeStatusCode;\n\t\t}\n\t\treturn HttpStatus.SEE_OTHER;\n\t}","commit_id":"d0f13b5bebe548232bd4d2658db81bc2e7203c5f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void setEditor(final EditorWithProviderComposite editor, final boolean focusEditor) {\n    if (editor != null) {\n      if (myTabbedPane == null) {\n        myPanel.removeAll ();\n        myPanel.add (new TCompForTablessMode(this, editor), BorderLayout.CENTER);\n        myPanel.revalidate ();\n        return;\n      }\n\n      final int index = findEditorIndex(editor);\n      if (index != -1) {\n        setSelectedEditor(editor, focusEditor);\n      }\n      else {\n        Integer initialIndex = editor.getFile().getUserData(INITIAL_INDEX_KEY);\n        final int indexToInsert = initialIndex == null ? myTabbedPane.getSelectedIndex() + 1 : initialIndex;\n        final VirtualFile file = editor.getFile();\n        final Icon template = IconLoader.getIcon(\"/fileTypes/text.png\");\n        myTabbedPane.insertTab(file, new EmptyIcon(template.getIconWidth(), template.getIconHeight()), new TComp(this, editor), null, indexToInsert);\n        trimToSize(UISettings.getInstance().EDITOR_TAB_LIMIT, file, false);\n        setSelectedEditor(editor, focusEditor);\n        myOwner.updateFileIcon(file);\n        myOwner.updateFileColor(file);\n      }\n      myOwner.setCurrentWindow(this, false);\n    }\n    myPanel.revalidate();\n  }","id":59578,"modified_method":"public void setEditor(final EditorWithProviderComposite editor, final boolean focusEditor) {\n    if (editor != null) {\n      if (myTabbedPane == null) {\n        myPanel.removeAll ();\n        myPanel.add (new TCompForTablessMode(this, editor), BorderLayout.CENTER);\n        myPanel.revalidate ();\n        return;\n      }\n\n      final int index = findEditorIndex(editor);\n      if (index != -1) {\n        setSelectedEditor(editor, focusEditor);\n      }\n      else {\n        Integer initialIndex = editor.getFile().getUserData(INITIAL_INDEX_KEY);\n        int indexToInsert = 0;\n        if (initialIndex == null) {\n          int selectedIndex = myTabbedPane.getSelectedIndex();\n          if (selectedIndex >= 0) {\n            indexToInsert = UISettings.getInstance().ACTIVATE_RIGHT_EDITOR_ON_CLOSE ? selectedIndex : selectedIndex + 1; \n          }\n        } else {\n          indexToInsert = initialIndex;\n        }\n        \n        final VirtualFile file = editor.getFile();\n        final Icon template = IconLoader.getIcon(\"/fileTypes/text.png\");\n        myTabbedPane.insertTab(file, new EmptyIcon(template.getIconWidth(), template.getIconHeight()), new TComp(this, editor), null, indexToInsert);\n        trimToSize(UISettings.getInstance().EDITOR_TAB_LIMIT, file, false);\n        setSelectedEditor(editor, focusEditor);\n        myOwner.updateFileIcon(file);\n        myOwner.updateFileColor(file);\n      }\n      myOwner.setCurrentWindow(this, false);\n    }\n    myPanel.revalidate();\n  }","commit_id":"b3b9dd99aa8f2ad5c768cd41f2998ec9eca57168","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int calcIndexToSelect(VirtualFile fileBeingClosed, final int fileIndex) {\n    if (myTabbedPane.getSelectedIndex() != fileIndex) {\n      // if the file being closed is not currently selected, keep the currently selected file open\n      return -1;\n    }\n    // try to open last visited file\n    final VirtualFile[] histFiles = EditorHistoryManager.getInstance(getManager ().myProject).getFiles();\n    for (int idx = 0; idx < histFiles.length; idx++) {\n      final VirtualFile histFile = histFiles[idx];\n      if (histFile.equals(fileBeingClosed)) {\n        continue;\n      }\n      final EditorWithProviderComposite editor = findFileComposite(histFile);\n      if (editor == null) {\n        continue; // ????\n      }\n      final int histFileIndex = findComponentIndex(editor.getComponent());\n      if (histFileIndex >= 0) {\n        return histFileIndex;\n      }\n    }\n    // by default select previous neighbour\n    if (fileIndex > 0) {\n      return fileIndex - 1;\n    }\n    // do nothing\n    return -1;\n  }","id":59579,"modified_method":"private int calcIndexToSelect(VirtualFile fileBeingClosed, final int fileIndex) {\n    final int currentlySelectedIndex = myTabbedPane.getSelectedIndex();\n    if (currentlySelectedIndex != fileIndex) {\n      // if the file being closed is not currently selected, keep the currently selected file open\n      return (fileIndex < currentlySelectedIndex)? currentlySelectedIndex - 1 : -1;\n    }\n    // try to open last visited file\n    final VirtualFile[] histFiles = EditorHistoryManager.getInstance(getManager ().myProject).getFiles();\n    for (int idx = histFiles.length - 1; idx >= 0; idx--) {\n      final VirtualFile histFile = histFiles[idx];\n      if (histFile.equals(fileBeingClosed)) {\n        continue;\n      }\n      final EditorWithProviderComposite editor = findFileComposite(histFile);\n      if (editor == null) {\n        continue; // ????\n      }\n      final int histFileIndex = findComponentIndex(editor.getComponent());\n      if (histFileIndex >= 0) {\n        return histFileIndex;\n      }\n    }\n    // by default select previous neighbour\n    if (fileIndex > 0) {\n      return fileIndex - 1;\n    }\n    // do nothing\n    return -1;\n  }","commit_id":"6d819dd52c206ca3131a02a8d468ae39ada5aa5c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void updateDesignationComboBox() {\n\t\tif (frame.currentSelectedBugLeaf == null)\n\t\t\tupdateCommentsFromNonLeafInformationFromSwingThread(frame.currentSelectedBugAspects);\n\t\telse\n\t\t\tsetDesignationComboBox(designationKeys.get(designationComboBox\n\t\t\t\t\t.getSelectedIndex()));\n\t}","id":59580,"modified_method":"protected void updateDesignationComboBox() {\n\t\tif (frame.currentSelectedBugLeaf == null)\n\t\t\tupdateCommentsFromNonLeafInformationFromSwingThread(frame.currentSelectedBugAspects);\n\t\telse {\n\t\t\tint selectedIndex = designationComboBox\n\t\t\t\t\t\t\t\t.getSelectedIndex();\n\t\t\tif (selectedIndex >= 0) setDesignationComboBox(designationKeys.get(selectedIndex));\n\t\t\telse\n\t\t\t\tDebug.println(\"Couldn't find selected index in designationComboBox: \" + designationComboBox.getSelectedItem());\n\t\t}\n\t}","commit_id":"3edf945ae7bd54810cd90d6805007b34f87dc90d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public String getHelpTopic() {\n    if (myTabbedPane == null || myEditors.isEmpty()) {\n      return null;\n    }\n    final ModuleConfigurationEditor moduleElementsEditor = myEditors.get(myTabbedPane.getSelectedIndex());\n    return moduleElementsEditor.getHelpTopic();\n  }","id":59581,"modified_method":"@Nullable\n  public String getHelpTopic() {\n    if (myTabbedPane == null || myEditors.isEmpty()) {\n      return null;\n    }\n    final int selectedIdx = myTabbedPane.getSelectedIndex();\n    if (selectedIdx == -1) {\n      return null;\n    }\n    final ModuleConfigurationEditor moduleElementsEditor = myEditors.get(selectedIdx);\n    return moduleElementsEditor.getHelpTopic();\n  }","commit_id":"d47007e639fb3444790c531594f3996e75b3969a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void scrollSelectionToVisible(final int direction) {\n    final int firstIndex = myFirstIndex;\n    while (!myList.get(myModel.getSelectedIndex()).isShowing()) {\n      myFirstIndex = myModel.getIndexByMode(myFirstIndex + direction);\n      rebuildComponent();\n      if (firstIndex == myFirstIndex) break; //to be sure not to hang\n    }\n    setSize(getPreferredSize());  //not to miss right button && font corrections\n    repaint();\n  }","id":59582,"modified_method":"private void scrollSelectionToVisible(final int direction) {\n    final int selectedIndex = myModel.getSelectedIndex();\n    if (selectedIndex == -1) return;\n    final int firstIndex = myFirstIndex;\n    while (!myList.get(selectedIndex).isShowing()) {\n      myFirstIndex = myModel.getIndexByMode(myFirstIndex + direction);\n      rebuildComponent();\n      if (firstIndex == myFirstIndex) break; //to be sure not to hang\n    }\n    setSize(getPreferredSize());  //not to miss right button && font corrections\n    repaint();\n  }","commit_id":"fdc81fca05c32c231aa226d329255c64eeed10e1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void rightClick(final int index) {\n    final ActionManager actionManager = ActionManager.getInstance();\n    final ActionGroup group = (ActionGroup)CustomizableActionsSchemas.getInstance().getCorrectedAction(IdeActions.GROUP_NAVBAR_POPUP);\n    final ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.NAVIGATION_BAR, group);\n    final MyCompositeLabel item = getItem(index);\n    if (item != null) {\n      popupMenu.getComponent().show(this, item.getX(), item.getY() + item.getHeight());\n    }\n  }","id":59583,"modified_method":"private void rightClick(final int index) {\n    final ActionManager actionManager = ActionManager.getInstance();\n    final ActionGroup group = (ActionGroup)CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_NAVBAR_POPUP);\n    final ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.NAVIGATION_BAR, group);\n    final MyCompositeLabel item = getItem(index);\n    if (item != null) {\n      popupMenu.getComponent().show(this, item.getX(), item.getY() + item.getHeight());\n    }\n  }","commit_id":"fdc81fca05c32c231aa226d329255c64eeed10e1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Default constructor with hard-coded values for the RestaurantServiceAT endpoint details (wsdl url, service name & port\n     * name)\n     * \n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = System.getProperty(\"node0\", \"127.0.0.1\");\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSATTestCase.DEPLOYMENT_NAME + \"/RestaurantServiceAT?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsat/Restaurant\",\n                \"RestaurantServiceATService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsat/Restaurant\", \"RestaurantServiceAT\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        restaurant = service.getPort(portName, RestaurantServiceAT.class);\n\n        /*\n         * Add client handler chain\n         */\n        BindingProvider bindingProvider = (BindingProvider) restaurant;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","id":59584,"modified_method":"/**\n     * Default constructor with hard-coded values for the RestaurantServiceAT endpoint details (wsdl url, service name & port\n     * name)\n     *\n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = TestSuiteEnvironment.getServerAddress();\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSATTestCase.DEPLOYMENT_NAME + \"/RestaurantServiceAT?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsat/Restaurant\",\n                \"RestaurantServiceATService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsat/Restaurant\", \"RestaurantServiceAT\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        restaurant = service.getPort(portName, RestaurantServiceAT.class);\n\n        /*\n         * Add client handler chain\n         */\n        BindingProvider bindingProvider = (BindingProvider) restaurant;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Default constructor with hard-coded values for the SetService endpoint details (wsdl url, service name & port name)\n     * \n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = System.getProperty(\"node0\", \"127.0.0.1\");\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSBAParticipantCompletionTestCase.DEPLOYMENT_NAME + \"/SetServiceBA?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/participantcompletion\",\n                \"SetServiceBAService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/participantcompletion\",\n                \"SetServiceBA\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        set = service.getPort(portName, SetServiceBA.class);\n\n        /*\n         * Add client handler chain so that XTS can add the transaction context to the SOAP messages.\n         */\n        BindingProvider bindingProvider = (BindingProvider) set;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","id":59585,"modified_method":"/**\n     * Default constructor with hard-coded values for the SetService endpoint details (wsdl url, service name & port name)\n     *\n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = TestSuiteEnvironment.getServerAddress();\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSBAParticipantCompletionTestCase.DEPLOYMENT_NAME + \"/SetServiceBA?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/participantcompletion\",\n                \"SetServiceBAService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/participantcompletion\",\n                \"SetServiceBA\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        set = service.getPort(portName, SetServiceBA.class);\n\n        /*\n         * Add client handler chain so that XTS can add the transaction context to the SOAP messages.\n         */\n        BindingProvider bindingProvider = (BindingProvider) set;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Default constructor with hard-coded values for the SetService endpoint details (wsdl url, service name & port name)\n     * \n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = System.getProperty(\"node0\", \"127.0.0.1\");\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSBACoordinatorCompletionTestCase.DEPLOYMENT_NAME + \"/SetServiceBA?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/coordinatorcompletion\",\n                \"SetServiceBAService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/coordinatorcompletion\",\n                \"SetServiceBA\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        set = service.getPort(portName, SetServiceBA.class);\n\n        /*\n         * Add client handler chain so that XTS can add the transaction context to the SOAP messages.\n         */\n        BindingProvider bindingProvider = (BindingProvider) set;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","id":59586,"modified_method":"/**\n     * Default constructor with hard-coded values for the SetService endpoint details (wsdl url, service name & port name)\n     *\n     * @throws java.net.MalformedURLException if the WSDL url is malformed.\n     */\n    public Client() throws MalformedURLException {\n        String node0 = TestSuiteEnvironment.getServerAddress();\n\n        URL wsdlLocation = new URL(\"http://\" + node0 + \":8080/\" + WSBACoordinatorCompletionTestCase.DEPLOYMENT_NAME + \"/SetServiceBA?wsdl\");\n        QName serviceName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/coordinatorcompletion\",\n                \"SetServiceBAService\");\n        QName portName = new QName(\"http://www.jboss.com/jbossas/test/xts/simple/wsba/coordinatorcompletion\",\n                \"SetServiceBA\");\n\n        Service service = Service.create(wsdlLocation, serviceName);\n        set = service.getPort(portName, SetServiceBA.class);\n\n        /*\n         * Add client handler chain so that XTS can add the transaction context to the SOAP messages.\n         */\n        BindingProvider bindingProvider = (BindingProvider) set;\n        List<Handler> handlers = new ArrayList<Handler>(1);\n        handlers.add(new JaxWSHeaderContextProcessor());\n        bindingProvider.getBinding().setHandlerChain(handlers);\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsat\")\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"), \"MANIFEST.MF\");\n    }","id":59587,"modified_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsat\")\n                .addClass(TestSuiteEnvironment.class)\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"), \"MANIFEST.MF\");\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(false, \"org.jboss.as.test.xts.simple.wsba\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsba.coordinatorcompletion\")\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"),\"MANIFEST.MF\");\n    }","id":59588,"modified_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(false, \"org.jboss.as.test.xts.simple.wsba\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsba.coordinatorcompletion\")\n                .addClass(TestSuiteEnvironment.class)\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"),\"MANIFEST.MF\");\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(false, \"org.jboss.as.test.xts.simple.wsba\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsba.participantcompletion\")\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"),\"MANIFEST.MF\");\n    }","id":59589,"modified_method":"@Deployment\n    public static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, DEPLOYMENT_NAME + \".war\")\n                .addPackages(false, \"org.jboss.as.test.xts.simple.wsba\")\n                .addPackages(true, \"org.jboss.as.test.xts.simple.wsba.participantcompletion\")\n                .addClass(TestSuiteEnvironment.class)\n                .addAsResource(\"context-handlers.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.xts,org.jboss.jts\\n\"),\"MANIFEST.MF\");\n    }","commit_id":"3b2dce581e5c58ddb3d48114b72b228f178cb23c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void init() {\r\n\t\thostValue = getParameter(\"IP\");\r\n\t\tString port = getParameter(\"PORT\");\r\n\t\tif (port != null) portValue = Integer.parseInt(port);\r\n\t\troomValue = getParameter(\"ROOM\");\r\n\t\tcWidthValue = Integer.parseInt(getParameter(\"CAPTURE_WIDTH\"));\r\n\t\tcHeightValue = Integer.parseInt(getParameter(\"CAPTURE_HEIGHT\"));\t\t\t\t\r\n\t\txValue = Integer.parseInt(getParameter(\"X\"));\r\n\t\tyValue = Integer.parseInt(getParameter(\"Y\"));\r\n\t\t\r\n\t\tString scaleWidth = getParameter(\"SCALE_WIDTH\");\r\n\t\tif (scaleWidth != null) sWidthValue = Integer.parseInt(scaleWidth);\r\n\t\tString scaleHeight = getParameter(\"SCALE_HEIGHT\");\r\n\t\tif (scaleHeight != null) sHeightValue = Integer.parseInt(scaleHeight);\r\n\t\t\r\n\t\tString qualityCapture = getParameter(\"SCALE_WITH_QUALITY\");\r\n\t\tif (qualityCapture != null) qualityValue = Boolean.parseBoolean(qualityCapture);\r\n\t\t\r\n\t\tString tunnel = getParameter(\"HTTP_TUNNEL\");\r\n\t\tif (tunnel != null) tunnelValue = Boolean.parseBoolean(tunnel);\r\n\t\ticon = getImage(getCodeBase(), \"bbb.gif\");\r\n\t}","id":59590,"modified_method":"public void init() {\r\n\t\thostValue = getParameter(\"IP\");\r\n\t\tString port = getParameter(\"PORT\");\r\n\t\tif (port != null) portValue = Integer.parseInt(port);\r\n\t\troomValue = getParameter(\"ROOM\");\r\n\t\tcWidthValue = Integer.parseInt(getParameter(\"CAPTURE_WIDTH\"));\r\n\t\tcHeightValue = Integer.parseInt(getParameter(\"CAPTURE_HEIGHT\"));\t\t\t\t\r\n\t\txValue = Integer.parseInt(getParameter(\"X\"));\r\n\t\tyValue = Integer.parseInt(getParameter(\"Y\"));\r\n\t\t\r\n\t\tString scaleWidth = getParameter(\"SCALE_WIDTH\");\r\n\t\tif (scaleWidth != null) sWidthValue = Integer.parseInt(scaleWidth);\r\n\t\tString scaleHeight = getParameter(\"SCALE_HEIGHT\");\r\n\t\tif (scaleHeight != null) sHeightValue = Integer.parseInt(scaleHeight);\r\n\t\t\r\n\t\tString qualityCapture = getParameter(\"SCALE_WITH_QUALITY\");\r\n\t\tif (qualityCapture != null) qualityValue = Boolean.parseBoolean(qualityCapture);\r\n\t\t\r\n\t\tString aspectRatio = getParameter(\"MAINTAIN_ASPECT_RATIO\");\r\n\t\tif (aspectRatio != null) aspectRatioValue = Boolean.parseBoolean(aspectRatio);\r\n\t\t\r\n\t\tString tunnel = getParameter(\"HTTP_TUNNEL\");\r\n\t\tif (tunnel != null) tunnelValue = Boolean.parseBoolean(tunnel);\r\n\t\ticon = getImage(getCodeBase(), \"bbb.gif\");\r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void start() {\t\t \r\n\t\tSystem.out.println(\"Start\");\t\r\n\t\tclient = new DeskshareClient.Builder().host(hostValue).port(portValue)\r\n\t\t\t\t\t\t\t.room(roomValue).captureWidth(cWidthValue)\r\n\t\t\t\t\t\t\t.captureHeight(cHeightValue).scaleWidth(sWidthValue).scaleHeight(sHeightValue).quality(qualityValue)\r\n\t\t\t\t\t\t\t.x(xValue).y(yValue)\r\n\t\t\t\t\t\t\t.httpTunnel(tunnelValue).trayIcon(icon).enableTrayIconActions(true).build();\r\n\t\tclient.start();\r\n\t}","id":59591,"modified_method":"public void start() {\t\t \r\n\t\tSystem.out.println(\"Start\");\t\r\n\t\tclient = new DeskshareClient.Builder().host(hostValue).port(portValue)\r\n\t\t\t\t\t\t\t.room(roomValue).captureWidth(cWidthValue)\r\n\t\t\t\t\t\t\t.captureHeight(cHeightValue).scaleWidth(sWidthValue).scaleHeight(sHeightValue)\r\n\t\t\t\t\t\t\t.quality(qualityValue).aspectRatio(aspectRatioValue)\r\n\t\t\t\t\t\t\t.x(xValue).y(yValue)\r\n\t\t\t\t\t\t\t.httpTunnel(tunnelValue).trayIcon(icon).enableTrayIconActions(true).build();\r\n\t\tclient.start();\r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void startCapture() {\r\n\t\tcapture = new ScreenCapture(x, y, captureWidth, captureHeight, scaleWidth, scaleHeight, quality);\r\n\t\tcaptureTaker = new ScreenCaptureTaker(capture);\r\n\t\tmTaker = new MouseLocationTaker();\r\n\t\t\r\n\t\tDimension screenDim = new Dimension(scaleWidth, scaleHeight);\r\n\t\tDimension tileDim = new Dimension(blockWidth, blockHeight);\r\n\t\tblockManager = new BlockManager();\r\n\t\tblockManager.addListener(this);\r\n\t\tblockManager.initialize(screenDim, tileDim);\r\n\t\t\r\n\t\tsender = new NetworkStreamSender(blockManager, host, port, room, screenDim, tileDim, httpTunnel);\r\n\t\tconnected = sender.connect();\r\n\t\tif (connected) {\r\n\t\t\tcaptureTaker.addListener(this);\r\n\t\t\tcaptureTaker.start();\r\n\t\t\t\r\n\t\t\tcaptureTakerThread = new Thread(captureTaker, \"ScreenCaptureTaker\");\r\n\t\t\tcaptureTakerThread.start();\t\r\n\t\t\tsender.start();\r\n\t\t\t\r\n\t\t\tmTaker.start();\r\n\t\t\tmouseLocationTakerThread = new Thread(mTaker, \"MouseLocationTakerThread\");\r\n\t\t\tmTaker.addListener(this);\r\n\t\t\tmouseLocationTakerThread.start();\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tnotifyListener(ExitCode.DESKSHARE_SERVICE_UNAVAILABLE);\r\n\t\t}\r\n\t}","id":59592,"modified_method":"private void startCapture() {\r\n\t\tif (aspectRatio) {\r\n\t\t\trecalculateScaleDimensionsToMaintainAspectRatio();\r\n//\t\t\tSystem.out.println(\"[\" + scaleWidth + \"x\" + scaleHeight + \"]\");\r\n\t\t}\r\n\t\t\r\n\t\tcapture = new ScreenCapture(x, y, captureWidth, captureHeight, scaleWidth, scaleHeight, quality);\r\n\t\tcaptureTaker = new ScreenCaptureTaker(capture);\r\n\t\tmTaker = new MouseLocationTaker(captureWidth, captureHeight, scaleWidth, scaleHeight);\r\n\t\t\r\n\t\t// Use the scaleWidth and scaleHeight as the dimension we pass to the BlockManager.\r\n\t\t// If there is no scaling required, the scaleWidth and scaleHeight will be the same as \r\n\t\t// captureWidth and captureHeight (ritzalam 05/27/2010)\r\n\t\tDimension screenDim = new Dimension(scaleWidth, scaleHeight);\r\n\t\tDimension tileDim = new Dimension(blockWidth, blockHeight);\r\n\t\tblockManager = new BlockManager();\r\n\t\tblockManager.addListener(this);\r\n\t\tblockManager.initialize(screenDim, tileDim);\r\n\t\t\r\n\t\tsender = new NetworkStreamSender(blockManager, host, port, room, screenDim, tileDim, httpTunnel);\r\n\t\tconnected = sender.connect();\r\n\t\tif (connected) {\r\n\t\t\tcaptureTaker.addListener(this);\r\n\t\t\tcaptureTaker.start();\r\n\t\t\t\r\n\t\t\tcaptureTakerThread = new Thread(captureTaker, \"ScreenCaptureTaker\");\r\n\t\t\tcaptureTakerThread.start();\t\r\n\t\t\tsender.start();\r\n\t\t\t\r\n\t\t\tmTaker.start();\r\n\t\t\tmouseLocationTakerThread = new Thread(mTaker, \"MouseLocationTakerThread\");\r\n\t\t\tmTaker.addListener(this);\r\n\t\t\tmouseLocationTakerThread.start();\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tnotifyListener(ExitCode.DESKSHARE_SERVICE_UNAVAILABLE);\r\n\t\t}\r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private DeskshareClient(Builder builder) {\r\n       \troom = builder.room;\r\n       \thost = builder.host;\r\n       \tport = builder.port;\r\n       \tcaptureWidth = builder.captureWidth;  \r\n       \tcaptureHeight = builder.captureHeight;\r\n       \tscaleWidth = builder.scaleWidth;\r\n       \tscaleHeight = builder.scaleHeight;\r\n       \tquality = builder.quality;\r\n       \tx = builder.x;\r\n       \ty = builder.y;\r\n       \thttpTunnel = builder.httpTunnel;\r\n       \tsysTrayIcon = builder.sysTrayIcon;\r\n       \tenableTrayActions = builder.enableTrayActions;\r\n    }","id":59593,"modified_method":"private DeskshareClient(Builder builder) {\r\n       \troom = builder.room;\r\n       \thost = builder.host;\r\n       \tport = builder.port;\r\n       \tcaptureWidth = builder.captureWidth;  \r\n       \tcaptureHeight = builder.captureHeight;\r\n       \tscaleWidth = builder.scaleWidth;\r\n       \tscaleHeight = builder.scaleHeight;\r\n       \tquality = builder.quality;\r\n       \taspectRatio = builder.aspectRatio;\r\n       \tx = builder.x;\r\n       \ty = builder.y;\r\n       \thttpTunnel = builder.httpTunnel;\r\n       \tsysTrayIcon = builder.sysTrayIcon;\r\n       \tenableTrayActions = builder.enableTrayActions;\r\n    }","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public static void main(String[] args) {\r\n\t\tDeskshareMain dsMain = new DeskshareMain();\r\n    \tCmdLineParser parser = new CmdLineParser();\r\n    \tCmdLineParser.Option host = dsMain.addHelp(parser.addStringOption('s', \"server\"),\"The address of Red5 server\");\r\n        CmdLineParser.Option port = dsMain.addHelp(parser.addIntegerOption('p', \"port\"),\"The port the application is listening\");\r\n        CmdLineParser.Option listenPort = dsMain.addHelp(parser.addIntegerOption('l', \"listenPort\"),\"Port to listen for lifeline\");\r\n        CmdLineParser.Option room = dsMain.addHelp(parser.addStringOption('r', \"room\"),\"Room\");        \r\n    \tCmdLineParser.Option cWidth = dsMain.addHelp(parser.addIntegerOption('w', \"captureWidth\"),\"Width of the screen capture\");\r\n    \tCmdLineParser.Option cHeight = dsMain.addHelp(parser.addIntegerOption('t', \"captureHeight\"),\"Height of the screen capture\");\r\n    \tCmdLineParser.Option sWidth = dsMain.addHelp(parser.addIntegerOption('d', \"scaleWidth\"),\"Scale capture width\");\r\n    \tCmdLineParser.Option sHeight = dsMain.addHelp(parser.addIntegerOption('g', \"scaleHeight\"),\"Scale capture height\");    \r\n    \tCmdLineParser.Option quality = dsMain.addHelp(parser.addBooleanOption('q', \"quality\"),\"Scale with better quality instead of speed\");    \tCmdLineParser.Option xCoord = dsMain.addHelp(parser.addIntegerOption('x', \"x\"),\"Upper-left x coordinate of the screen capture\");\r\n    \tCmdLineParser.Option yCoord = dsMain.addHelp(parser.addIntegerOption('y', \"y\"),\"Upper-left y coordinate of the screen capture\");\r\n    \tCmdLineParser.Option tryHttpTunnel = dsMain.addHelp(parser.addBooleanOption('n', \"httptunnel\"),\"Http tunnel if direct connection fails\");\r\n    \tCmdLineParser.Option icon = dsMain.addHelp(parser.addStringOption('i', \"icon\"),\"Path to system tray icon file\");\r\n    \tCmdLineParser.Option help = dsMain.addHelp(parser.addBooleanOption('h', \"help\"),\"Show this help message\");\r\n        \r\n        try {\r\n            parser.parse(args);\r\n        } catch (CmdLineParser.OptionException e) {\r\n            System.err.println(e.getMessage());\r\n            dsMain.printUsage();\r\n            System.exit(2);\r\n        }\r\n\r\n        if (Boolean.TRUE.equals(parser.getOptionValue(help))) {\r\n        \tdsMain.printUsage();\r\n            System.exit(0);\r\n        }\r\n        \r\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\r\n\r\n        // Extract the values entered for the various options -- if the\r\n        // options were not specified, the corresponding values will be\r\n        // the default.\r\n        String hostValue = (String)parser.getOptionValue(host, \"localhost\");\r\n        Integer portValue = (Integer)parser.getOptionValue(port, new Integer(9123));\r\n        Integer listenPortValue = (Integer)parser.getOptionValue(listenPort, new Integer(9125));\r\n        String roomValue = (String)parser.getOptionValue(room, \"85115\");\r\n        Integer cWidthValue = (Integer)parser.getOptionValue(cWidth, new Integer((int)dim.getWidth()));\r\n        Integer cHeightValue = (Integer)parser.getOptionValue(cHeight, new Integer((int)dim.getHeight()));\r\n        Integer sWidthValue = (Integer)parser.getOptionValue(sWidth, new Integer((int)dim.getWidth()));\r\n        Integer sHeightValue = (Integer)parser.getOptionValue(sHeight, new Integer((int)dim.getHeight()));\r\n        Boolean qualityValue = (Boolean)parser.getOptionValue(quality, false);\r\n        Integer xValue = (Integer)parser.getOptionValue(xCoord, new Integer(0));\r\n        Integer yValue = (Integer)parser.getOptionValue(yCoord, new Integer(0));\r\n        Boolean tunnelValue = (Boolean)parser.getOptionValue(tryHttpTunnel, false);\r\n        String iconValue = (String)parser.getOptionValue(icon, \"bbb.gif\");\r\n        \r\n        Image image = Toolkit.getDefaultToolkit().getImage(iconValue);\r\n        \r\n        LifeLine lifeline = new LifeLine(listenPortValue.intValue(), dsMain);\r\n        lifeline.listen();\r\n        \r\n        DeskshareClient client = new DeskshareClient.Builder().host(hostValue).port(portValue)\r\n        \t\t\t\t\t\t.room(roomValue).captureWidth(cWidthValue)\r\n        \t\t\t\t\t\t.captureHeight(cHeightValue).scaleWidth(sWidthValue).scaleHeight(sHeightValue).quality(qualityValue)\r\n        \t\t\t\t\t\t.x(xValue).y(yValue)\r\n        \t\t\t\t\t\t.httpTunnel(tunnelValue).trayIcon(image).enableTrayIconActions(true).build();\r\n        \r\n        client.addClientListeners(dsMain);\r\n        client.start();\r\n        \r\n        try {\r\n\t\t\tExitCode reason = dsMain.exitReasonQ.take();\r\n\t\t\tclient.stop();\r\n\t\t\tlifeline.disconnect();\r\n\t\t\tSystem.exit(reason.getExitCode());\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(500);\r\n\t\t}\r\n        \r\n\t}","id":59594,"modified_method":"public static void main(String[] args) {\r\n\t\tDeskshareMain dsMain = new DeskshareMain();\r\n    \tCmdLineParser parser = new CmdLineParser();\r\n    \tCmdLineParser.Option host = dsMain.addHelp(parser.addStringOption('s', \"server\"),\"The address of Red5 server\");\r\n        CmdLineParser.Option port = dsMain.addHelp(parser.addIntegerOption('p', \"port\"),\"The port the application is listening\");\r\n        CmdLineParser.Option listenPort = dsMain.addHelp(parser.addIntegerOption('l', \"listenPort\"),\"Port to listen for lifeline\");\r\n        CmdLineParser.Option room = dsMain.addHelp(parser.addStringOption('r', \"room\"),\"Room\");        \r\n    \tCmdLineParser.Option cWidth = dsMain.addHelp(parser.addIntegerOption('w', \"captureWidth\"),\"Width of the screen capture\");\r\n    \tCmdLineParser.Option cHeight = dsMain.addHelp(parser.addIntegerOption('t', \"captureHeight\"),\"Height of the screen capture\");\r\n    \tCmdLineParser.Option sWidth = dsMain.addHelp(parser.addIntegerOption('d', \"scaleWidth\"),\"Scale capture width\");\r\n    \tCmdLineParser.Option sHeight = dsMain.addHelp(parser.addIntegerOption('g', \"scaleHeight\"),\"Scale capture height\");    \r\n    \tCmdLineParser.Option quality = dsMain.addHelp(parser.addBooleanOption('q', \"quality\"),\"Scale with better quality instead of speed\");\r\n    \tCmdLineParser.Option aspectRatio = dsMain.addHelp(parser.addBooleanOption('a', \"aspectRatio\"),\"Maintain aspect ratio when scaling\");\r\n    \tCmdLineParser.Option xCoord = dsMain.addHelp(parser.addIntegerOption('x', \"x\"),\"Upper-left x coordinate of the screen capture\");\r\n    \tCmdLineParser.Option yCoord = dsMain.addHelp(parser.addIntegerOption('y', \"y\"),\"Upper-left y coordinate of the screen capture\");\r\n    \tCmdLineParser.Option tryHttpTunnel = dsMain.addHelp(parser.addBooleanOption('n', \"httptunnel\"),\"Http tunnel if direct connection fails\");\r\n    \tCmdLineParser.Option icon = dsMain.addHelp(parser.addStringOption('i', \"icon\"),\"Path to system tray icon file\");\r\n    \tCmdLineParser.Option help = dsMain.addHelp(parser.addBooleanOption('h', \"help\"),\"Show this help message\");\r\n        \r\n        try {\r\n            parser.parse(args);\r\n        } catch (CmdLineParser.OptionException e) {\r\n            System.err.println(e.getMessage());\r\n            dsMain.printUsage();\r\n            System.exit(2);\r\n        }\r\n\r\n        if (Boolean.TRUE.equals(parser.getOptionValue(help))) {\r\n        \tdsMain.printUsage();\r\n            System.exit(0);\r\n        }\r\n        \r\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\r\n\r\n        // Extract the values entered for the various options -- if the\r\n        // options were not specified, the corresponding values will be\r\n        // the default.\r\n        String hostValue = (String)parser.getOptionValue(host, \"localhost\");\r\n        Integer portValue = (Integer)parser.getOptionValue(port, new Integer(9123));\r\n        Integer listenPortValue = (Integer)parser.getOptionValue(listenPort, new Integer(9125));\r\n        String roomValue = (String)parser.getOptionValue(room, \"85115\");\r\n        Integer cWidthValue = (Integer)parser.getOptionValue(cWidth, new Integer((int)dim.getWidth()));\r\n        Integer cHeightValue = (Integer)parser.getOptionValue(cHeight, new Integer((int)dim.getHeight()));\r\n        Integer sWidthValue = (Integer)parser.getOptionValue(sWidth, new Integer((int)dim.getWidth()));\r\n        Integer sHeightValue = (Integer)parser.getOptionValue(sHeight, new Integer((int)dim.getHeight()));\r\n        Boolean qualityValue = (Boolean)parser.getOptionValue(quality, false);\r\n        Boolean aspectValue = (Boolean)parser.getOptionValue(aspectRatio, false);\r\n        Integer xValue = (Integer)parser.getOptionValue(xCoord, new Integer(0));\r\n        Integer yValue = (Integer)parser.getOptionValue(yCoord, new Integer(0));\r\n        Boolean tunnelValue = (Boolean)parser.getOptionValue(tryHttpTunnel, false);\r\n        String iconValue = (String)parser.getOptionValue(icon, \"bbb.gif\");\r\n        \r\n        Image image = Toolkit.getDefaultToolkit().getImage(iconValue);\r\n        \r\n        LifeLine lifeline = new LifeLine(listenPortValue.intValue(), dsMain);\r\n        lifeline.listen();\r\n        \r\n        DeskshareClient client = new DeskshareClient.Builder().host(hostValue).port(portValue)\r\n        \t\t\t\t\t\t.room(roomValue).captureWidth(cWidthValue)\r\n        \t\t\t\t\t\t.captureHeight(cHeightValue).scaleWidth(sWidthValue).scaleHeight(sHeightValue)\r\n        \t\t\t\t\t\t.quality(qualityValue).aspectRatio(aspectValue)\r\n        \t\t\t\t\t\t.x(xValue).y(yValue)\r\n        \t\t\t\t\t\t.httpTunnel(tunnelValue).trayIcon(image).enableTrayIconActions(true).build();\r\n        \r\n        client.addClientListeners(dsMain);\r\n        client.start();\r\n        \r\n        try {\r\n\t\t\tExitCode reason = dsMain.exitReasonQ.take();\r\n\t\t\tclient.stop();\r\n\t\t\tlifeline.disconnect();\r\n\t\t\tSystem.exit(reason.getExitCode());\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(500);\r\n\t\t}\r\n        \r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public Point getMouseLocation() {\r\n\t\tPointerInfo pInfo;\r\n\t\ttry {\r\n\t\t\tpInfo = MouseInfo.getPointerInfo();\r\n\t\t} catch (HeadlessException e) {\r\n\t\t\tpInfo = null;\r\n\t\t} catch (SecurityException e) {\r\n\t\t\tpInfo = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (pInfo == null) return new Point(0,0);\r\n\t\t\r\n\t\treturn pInfo.getLocation();\t\t\r\n\t}","id":59595,"modified_method":"public Point getMouseLocation() {\r\n\t\tPointerInfo pInfo;\r\n\t\tPoint pointerLocation = new Point(0,0);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tpInfo = MouseInfo.getPointerInfo();\r\n\t\t} catch (HeadlessException e) {\r\n\t\t\tpInfo = null;\r\n\t\t} catch (SecurityException e) {\r\n\t\t\tpInfo = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (pInfo == null) return pointerLocation;\r\n\t\t\r\n\t\tif (adjustPointerLocationDueToScaling()) {\t\t\t\r\n\t\t\tpointerLocation = calculatePointerLocation(pInfo.getLocation());\r\n\t\t} else {\r\n\t\t\tpointerLocation = pInfo.getLocation();\r\n\t\t}\r\n\t\treturn pointerLocation;\t\t\r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void run(){\t\t\r\n\t\twhile (startCapture){\r\n//\t\t\tSystem.out.println(\"----- Taking screen capture -----\");\r\n\t\t\tlong start = System.currentTimeMillis();\r\n\t\t\tBufferedImage image = capture.takeSingleSnapshot();\r\n\t\t\tlong end = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(\"Capture took \" + (end - start) + \" millis\");\r\n\t\t\tnotifyListeners(image);\r\n\t\t\ttry{\r\n\t\t\t\tThread.sleep(200);\r\n\t\t\t} catch (Exception e){\r\n\t\t\t\tSystem.out.println(\"Exception sleeping.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"Stopping screen capture.\");\t\t\r\n\t\tlisteners.screenCaptureStopped();\r\n\t}","id":59596,"modified_method":"public void run(){\t\t\r\n\t\twhile (startCapture){\r\n//\t\t\tSystem.out.println(\"----- Taking screen capture -----\");\r\n\t\t\tlong start = System.currentTimeMillis();\r\n\t\t\tBufferedImage image = capture.takeSingleSnapshot();\r\n\t\t\tlong end = System.currentTimeMillis();\r\n//\t\t\tSystem.out.println(\"Capture took \" + (end - start) + \" millis\");\r\n\t\t\tnotifyListeners(image);\r\n\t\t\ttry{\r\n\t\t\t\tThread.sleep(200);\r\n\t\t\t} catch (Exception e){\r\n\t\t\t\tSystem.out.println(\"Exception sleeping.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"Stopping screen capture.\");\t\t\r\n\t\tlisteners.screenCaptureStopped();\r\n\t}","commit_id":"d4ac16977152e3c1dc3d0f9ba33e722439b6e4c9","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void addGroup(RolloutPlanGroup group) {\n        if(group == null) {\n            throw new IllegalArgumentException(\"group is null\");\n        }\n        if(planRef != null) {\n            throw new IllegalStateException(\"Groups can't be added if the plan ref is specified.\");\n        }\n        if(groups == null) {\n            groups = new ArrayList<RolloutPlanGroup>();\n        }\n        groups.add(group);\n        this.lastGroup = group;\n    }","id":59597,"modified_method":"public void addGroup(RolloutPlanGroup group) {\n        if(group == null) {\n            throw new IllegalArgumentException(\"group is null\");\n        }\n        if(planRef != null) {\n            throw new IllegalStateException(\"Groups can't be added if the plan ref is specified.\");\n        }\n        if(groups == null) {\n            groups = new ArrayList<RolloutPlanGroup>();\n        }\n        groups.add(group);\n        this.lastGroup = (SingleRolloutPlanGroup) group;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void addConcurrentGroup(RolloutPlanGroup group) {\n        if(group == null) {\n            throw new IllegalArgumentException(\"group is null\");\n        }\n        if(planRef != null) {\n            throw new IllegalStateException(\"Groups can't be added if the plan ref is specified.\");\n        }\n        int lastIndex = groups == null ? -1 : groups.size() - 1;\n        if(lastIndex < 0) {\n            throw new IllegalStateException(\"There must be a group before a concurrent group can be added.\");\n        }\n        RolloutPlanGroup lastGroup = groups.get(lastIndex);\n        if(lastGroup instanceof ConcurrentRolloutPlanGroup) {\n            ((ConcurrentRolloutPlanGroup)lastGroup).addGroup(group);\n        } else {\n            ConcurrentRolloutPlanGroup concurrent = new ConcurrentRolloutPlanGroup();\n            concurrent.addGroup(lastGroup);\n            concurrent.addGroup(group);\n            groups.set(lastIndex, concurrent);\n        }\n        this.lastGroup = group;\n    }","id":59598,"modified_method":"public void addConcurrentGroup(RolloutPlanGroup group) {\n        if(group == null) {\n            throw new IllegalArgumentException(\"group is null\");\n        }\n        if(planRef != null) {\n            throw new IllegalStateException(\"Groups can't be added if the plan ref is specified.\");\n        }\n        int lastIndex = groups == null ? -1 : groups.size() - 1;\n        if(lastIndex < 0) {\n            throw new IllegalStateException(\"There must be a group before a concurrent group can be added.\");\n        }\n        RolloutPlanGroup lastGroup = groups.get(lastIndex);\n        if(lastGroup instanceof ConcurrentRolloutPlanGroup) {\n            ((ConcurrentRolloutPlanGroup)lastGroup).addGroup(group);\n        } else {\n            ConcurrentRolloutPlanGroup concurrent = new ConcurrentRolloutPlanGroup();\n            concurrent.addGroup(lastGroup);\n            concurrent.addGroup(group);\n            groups.set(lastIndex, concurrent);\n        }\n        this.lastGroup = (SingleRolloutPlanGroup) group;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public RolloutPlanGroup getLastGroup() {\n        return lastGroup;\n    }","id":59599,"modified_method":"public SingleRolloutPlanGroup getLastGroup() {\n        return lastGroup;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n        final ParsedCommandLine parsedCmd = ctx.getParsedCommandLine();\n        final List<ParsedOperationRequestHeader> headers = parsedCmd.getHeaders();\n        if(headers.isEmpty()) {\n            candidates.addAll(Util.getServerGroups(ctx.getModelControllerClient()));\n            return buffer.length();\n        }\n        final ParsedOperationRequestHeader lastHeader = headers.get(headers.size() - 1);\n        if(!(lastHeader instanceof ParsedRolloutPlanHeader)) {\n            throw new IllegalStateException(\"Expected \" + ParsedRolloutPlanHeader.class + \" but got \" + lastHeader);\n        }\n        final ParsedRolloutPlanHeader rollout = (ParsedRolloutPlanHeader) lastHeader;\n\n        final RolloutPlanGroup lastGroup = rollout.getLastGroup();\n        if(lastGroup == null) {\n            return -1;\n        }\n\n        return -1;\n    }","id":59600,"modified_method":"@Override\n    public int complete(CommandContext ctx, String buffer, int cursor, List<String> candidates) {\n        final ParsedCommandLine parsedCmd = ctx.getParsedCommandLine();\n        final List<ParsedOperationRequestHeader> headers = parsedCmd.getHeaders();\n        if(headers.isEmpty()) {\n            candidates.addAll(Util.getServerGroups(ctx.getModelControllerClient()));\n            return buffer.length();\n        }\n        final ParsedOperationRequestHeader lastHeader = headers.get(headers.size() - 1);\n        if(!(lastHeader instanceof ParsedRolloutPlanHeader)) {\n            throw new IllegalStateException(\"Expected \" + ParsedRolloutPlanHeader.class + \" but got \" + lastHeader);\n        }\n        final ParsedRolloutPlanHeader rollout = (ParsedRolloutPlanHeader) lastHeader;\n\n        final SingleRolloutPlanGroup lastGroup = rollout.getLastGroup();\n        if(lastGroup == null) {\n            return -1;\n        }\n\n        if(lastGroup.endsOnPropertyListEnd()) {\n            return buffer.length();\n        }\n\n        if(lastGroup.endsOnPropertyListStart()) {\n            candidates.add(Util.MAX_FAILED_SERVERS);\n            candidates.add(Util.MAX_FAILURE_PERCENTAGE);\n            candidates.add(Util.ROLLING_TO_SERVERS);\n            return buffer.length();\n        }\n\n        if(lastGroup.hasProperties()) {\n            final String propValue = lastGroup.getLastPropertyValue();\n            if(propValue != null) {\n                if(Util.TRUE.startsWith(propValue)) {\n                    candidates.add(Util.TRUE);\n                } else if(Util.FALSE.startsWith(propValue)) {\n                    candidates.add(Util.FALSE);\n                }\n            } else if(lastGroup.endsOnPropertyValueSeparator()) {\n                candidates.add(Util.FALSE);\n                candidates.add(Util.TRUE);\n                return buffer.length();\n            } else if(lastGroup.endsOnPropertySeparator()) {\n                if(!lastGroup.hasProperty(Util.MAX_FAILED_SERVERS)) {\n                    candidates.add(Util.MAX_FAILED_SERVERS);\n                }\n                if(!lastGroup.hasProperty(Util.MAX_FAILURE_PERCENTAGE)) {\n                    candidates.add(Util.MAX_FAILURE_PERCENTAGE);\n                }\n                if(!lastGroup.hasProperty(Util.ROLLING_TO_SERVERS)) {\n                    candidates.add(Util.ROLLING_TO_SERVERS);\n                }\n                return lastGroup.getLastSeparatorIndex() + 1;\n            } else {\n                final String propName = lastGroup.getLastPropertyName();\n                if(Util.MAX_FAILED_SERVERS.startsWith(propName)) {\n                    candidates.add(Util.MAX_FAILED_SERVERS);\n                }\n                if(Util.MAX_FAILURE_PERCENTAGE.startsWith(propName)) {\n                    candidates.add(Util.MAX_FAILURE_PERCENTAGE);\n                } else if(Util.ROLLING_TO_SERVERS.startsWith(propName)) {\n                    candidates.add(Util.ROLLING_TO_SERVERS);\n                }\n            }\n            return lastGroup.getLastChunkIndex();\n        }\n\n        int result = lastGroup.getLastChunkIndex();\n\n        final String groupName = lastGroup.getGroupName();\n        final List<String> serverGroups = Util.getServerGroups(ctx.getModelControllerClient());\n        for(String group : serverGroups) {\n            if(group.startsWith(groupName)) {\n                candidates.add(group);\n            }\n        }\n        if(candidates.size() == 1) {\n            final String group = candidates.get(0);\n            candidates.set(0, group + '(');\n            candidates.add(group + ',');\n            candidates.add(group + '^');\n        }\n\n        return result;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void leavingState(ParsingContext ctx) throws CommandFormatException {\n        final String id = ctx.getState().getId();\n        //System.out.println(\"rollout.leaving \" + id + \" '\" + ctx.getCharacter() + \"'\");\n        if(id.equals(HeaderValueState.ID)) {\n            handler.header(header);\n        } else if(PropertyValueState.ID.equals(id)) {\n            final String value = buffer.length() == 0 ? null : buffer.toString().trim();\n            if(value == null || value.isEmpty()) {\n                throw new CommandFormatException(\"Property '\" + name + \"' is missing value at index \" + ctx.getLocation());\n            }\n\n            if(group == null) {\n                if(\"id\".equals(name)) {\n                    header.setPlanRef(value);\n                } else {\n                    header.addProperty(name, value);\n                }\n            } else {\n                ((SingleRolloutPlanGroup)group).addProperty(name, value, nameValueSep);\n            }\n            nameValueSep = -1;\n        } else if(PropertyState.ID.equals(id)) {\n            if(name == null && buffer.length() > 0) {\n                if(group != null) {\n                    ((SingleRolloutPlanGroup)group).addProperty(buffer.toString().trim(), \"true\", -1);\n                } else {\n                    header.addProperty(buffer.toString().trim(), \"true\");\n                }\n                buffer.setLength(0);\n            } else {\n                name = null;\n                buffer.setLength(0);\n            }\n        } else if(ServerGroupNameState.ID.equals(id)) {\n            final String groupName = buffer.toString().trim();\n            if(groupName.isEmpty()) {\n                throw new CommandFormatException(\"Empty group name at index \" + ctx.getLocation());\n            }\n            ((SingleRolloutPlanGroup)group).setGroupName(groupName);\n        } else if(ServerGroupState.ID.equals(id)) {\n            if(concurrent) {\n                header.addConcurrentGroup(group);\n                concurrent = false;\n            } else {\n                header.addGroup(group);\n            }\n            group = null;\n        }\n    }","id":59601,"modified_method":"@Override\n    public void leavingState(ParsingContext ctx) throws CommandFormatException {\n        final String id = ctx.getState().getId();\n        //System.out.println(\"rollout.leaving \" + id + \" '\" + ctx.getCharacter() + \"'\");\n        if(id.equals(HeaderValueState.ID)) {\n            handler.header(header);\n        } else if(PropertyValueState.ID.equals(id)) {\n            final String value = buffer.length() == 0 ? null : buffer.toString().trim();\n            if(value == null || value.isEmpty()) {\n                throw new CommandFormatException(\"Property '\" + name + \"' is missing value at index \" + ctx.getLocation());\n            }\n\n            if(group == null) {\n                if(\"id\".equals(name)) {\n                    header.setPlanRef(value);\n                } else {\n                    header.addProperty(name, value);\n                }\n            } else {\n                group.addProperty(name, value, lastChunkIndex);\n                if(!ctx.isEndOfContent()) {\n                    group.propertySeparator(ctx.getLocation());\n                }\n            }\n        } else if(PropertyState.ID.equals(id)) {\n            if(name == null && buffer.length() > 0) {\n                if(group != null) {\n                    group.addProperty(buffer.toString().trim(), lastChunkIndex);\n                } else {\n                    header.addProperty(buffer.toString().trim(), \"true\");\n                }\n                buffer.setLength(0);\n            } else {\n                name = null;\n                buffer.setLength(0);\n            }\n        } else if(ServerGroupNameState.ID.equals(id)) {\n            final String groupName = buffer.toString().trim();\n            if(groupName.isEmpty()) {\n                throw new CommandFormatException(\"Empty group name at index \" + ctx.getLocation());\n            }\n            group.setGroupName(groupName, lastChunkIndex);\n        } else if(ServerGroupState.ID.equals(id)) {\n            if(concurrent) {\n                header.addConcurrentGroup(group);\n                concurrent = false;\n            } else {\n                header.addGroup(group);\n            }\n            group = null;\n        } else if(group != null && !ctx.isEndOfContent()) {\n            if(PropertyListState.ID.equals(id)) {\n                group.propertyListEnd(ctx.getLocation());\n            }\n        }\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void enteredState(ParsingContext ctx) throws CommandFormatException {\n        final String id = ctx.getState().getId();\n        //System.out.println(\"rollout.entered \" + id + \" '\" + ctx.getCharacter() + \"'\");\n\n        if(HeaderValueState.ID.equals(id)) {\n            ctx.enterState(RolloutPlanState.INSTANCE);\n        } else if(ServerGroupState.ID.equals(id)) {\n            group = new SingleRolloutPlanGroup();\n        } else if(ConcurrentSignState.ID.equals(id)) {\n            concurrent = true;\n        } else if (\"NAME_VALUE_SEPARATOR\".equals(id)) {\n            name = buffer.length() == 0 ? null : buffer.toString().trim();\n            if(name == null || name.isEmpty()) {\n                throw new CommandFormatException(\"Property is missing name at index \" + ctx.getLocation());\n            }\n            nameValueSep = ctx.getLocation();\n        }\n        buffer.setLength(0);\n    }","id":59602,"modified_method":"@Override\n    public void enteredState(ParsingContext ctx) throws CommandFormatException {\n        final String id = ctx.getState().getId();\n        //System.out.println(\"rollout.entered \" + id + \" '\" + ctx.getCharacter() + \"'\");\n\n        if(HeaderValueState.ID.equals(id)) {\n            ctx.enterState(RolloutPlanState.INSTANCE);\n        } else if(ServerGroupState.ID.equals(id)) {\n            group = new SingleRolloutPlanGroup();\n        } else if(ConcurrentSignState.ID.equals(id)) {\n            concurrent = true;\n        } else if (\"NAME_VALUE_SEPARATOR\".equals(id)) {\n            name = buffer.length() == 0 ? null : buffer.toString().trim();\n            if(name == null || name.isEmpty()) {\n                throw new CommandFormatException(\"Property is missing name at index \" + ctx.getLocation());\n            }\n            if(group != null) {\n                group.addProperty(name, lastChunkIndex);\n                group.propertyValueSeparator(ctx.getLocation());\n            }\n        } else if(group != null) {\n            if(PropertyListState.ID.equals(id)) {\n                group.propertyListStart(ctx.getLocation());\n            }\n        }\n        buffer.setLength(0);\n        lastChunkIndex = ctx.getLocation();\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public boolean hasProperties() {\n        return props != null;\n    }","id":59603,"modified_method":"public boolean hasProperties() {\n        return lastPropertyName != null || props != null;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void addProperty(String name, String value, int nameValueSep) {\n        if(name == null || name.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid property name: \" + name);\n        }\n        if(value == null || value.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid property value: \" + value);\n        }\n        if(props == null) {\n            props = new HashMap<String,String>();\n        }\n        props.put(name, value);\n        lastSeparatorIndex = nameValueSep;\n    }","id":59604,"modified_method":"public void addProperty(String name, String value, int valueIndex) {\n        if(name == null || name.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid property name: \" + name);\n        }\n        if(value == null || value.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid property value: \" + value);\n        }\n        if(props == null) {\n            props = new HashMap<String,String>();\n        }\n        props.put(name, value);\n        this.lastPropertyName = name;\n        this.lastPropertyValue = value;\n        this.lastChunkIndex = valueIndex;\n        separator = -1;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void setGroupName(String groupName) {\n        this.groupName = groupName;\n    }","id":59605,"modified_method":"public void setGroupName(String groupName, int index) {\n        this.groupName = groupName;\n        this.lastChunkIndex = index;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void propertyListEnd(int index) {\n        this.lastSeparatorIndex = index;\n        separator = SEPARATOR_PROPERTY_LIST_END;\n    }","id":59606,"modified_method":"public void propertyListEnd(int index) {\n        this.lastSeparatorIndex = index;\n        separator = SEPARATOR_PROPERTY_LIST_END;\n        this.lastPropertyName = null;\n        this.lastPropertyValue = null;\n    }","commit_id":"92c38b0eaadacf08d1a985bdc75be7780ff769ee","url":"https://github.com/wildfly/wildfly"},{"original_method":"public Pair<Double,String> getSyzyPowFromFile() {\n        String thisLine = null;\n        try {\n            thisLine = syzyFileReader.readLine();\n        } catch(IOException e) {\n            String newErrMsg = \"Ran out of lines in the syzyfile; further output of Syzygy power will be suppressed.\";\n            outOfLinesInSyzyFile=true;\n            logger.warn(newErrMsg + \" \" + e.toString());\n            return new Pair(-1.1, \"Printing Stops Here\");\n        }\n\n        String chromPos = null;\n        StringTokenizer lineTokenizer = new StringTokenizer(thisLine, pfFileDelimiter);\n        try {\n            chromPos = lineTokenizer.nextToken();\n            for(int j = 1; j < colOffset; j++) {\n                lineTokenizer.nextToken();\n            }\n            return new Pair((Double.valueOf(lineTokenizer.nextToken())/100.0),chromPos);\n        } catch (NoSuchElementException e) {\n            String errMsg = \"The given column offset for the pool, \" + colOffset + \" exceeded the number of entries in the file \" + pathToSyzygyFile;\n            throw new StingException(errMsg);\n        }\n    }","id":59607,"modified_method":"public Pair<Double,String> getSyzyPowFromFile() {\n        String thisLine = null;\n        try {\n            thisLine = syzyFileReader.readLine();\n        } catch(IOException e) {\n            String newErrMsg = \"Ran out of lines in the syzyfile; further output of Syzygy power will be suppressed.\";\n            outOfLinesInSyzyFile=true;\n            logger.warn(newErrMsg + \" \" + e.toString());\n            return new Pair(-1.1, \"Printing Stops Here\");\n        }\n\n        String chromPosTar = null;\n        StringTokenizer lineTokenizer = new StringTokenizer(thisLine, pfFileDelimiter);\n        try {\n            chromPosTar = lineTokenizer.nextToken();\n            for(int j = 1; j < colOffset; j++) {\n                lineTokenizer.nextToken();\n            }\n            String chromPos = (new StringTokenizer(chromPosTar, \"\\t\")).nextToken();\n            return new Pair((Double.valueOf(lineTokenizer.nextToken())/100.0),chromPos);\n        } catch (NoSuchElementException e) {\n            String errMsg = \"The given column offset for the pool, \" + colOffset + \" exceeded the number of entries in the file \" + pathToSyzygyFile;\n            throw new StingException(errMsg);\n        }\n    }","commit_id":"93cedf42855df36983da1f3d08ffd5e010c31690","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n    public Pair<Integer,Integer> map(RefMetaDataTracker tracker, ReferenceContext ref, AlignmentContext context)\n    {\n\n        Pair<Pair<List<SAMRecord>, List<SAMRecord>>,Pair<List<Integer>,List<Integer>>> splitReads = PoolUtils.splitReadsByReadDirection(context.getReads(),context.getOffsets());\n        if ( !super.suppress_printing )\n        {\n            Pair<double[],byte[]> powPair = super.calculatePower(splitReads,false,context);\n\n            boolean syzyFileIsReady=true;\n            try {\n                syzyFileIsReady = syzyFileReader.ready();\n            }\n            catch(IOException e) {\n                throw new StingException(\"Input file reader was not ready before an attempt to read from it\", e);\n            }\n\n            if(!syzyFileIsReady) {\n                throw new StingException(\"Input file reader was not ready before an attempt to read from it, but there was no IOException\");\n            } else if(!outOfLinesInSyzyFile) {\n                Pair<Double,String> syzyPow = getSyzyPowFromFile();\n                out.printf(\"%s: %d %d %d %d %d %d %f %f %f %f |%s%n\", context.getLocation(), splitReads.getFirst().getFirst().size(), splitReads.getFirst().getSecond().size(),\n                        context.getReads().size(), powPair.getSecond()[0], powPair.getSecond()[1], powPair.getSecond()[2],\n                        powPair.getFirst()[0], powPair.getFirst()[1], powPair.getFirst()[2], syzyPow.getFirst(), syzyPow.getSecond());\n            } else {\n                out.printf(\"%s: $d %d %d %d %d %d %d %f %f %f%n\", context.getLocation(), splitReads.getFirst().getFirst().size(), splitReads.getFirst().getSecond().size(),\n                        context.getReads().size(), powPair.getSecond()[0], powPair.getSecond()[1], powPair.getSecond()[2],\n                        powPair.getFirst()[0], powPair.getFirst()[1], powPair.getFirst()[2]);\n            }\n        }\n\n        return new Pair(splitReads.getFirst().getFirst().size(), splitReads.getFirst().getFirst().size());\n    }","id":59608,"modified_method":"@Override\n    public Pair<Integer,Integer> map(RefMetaDataTracker tracker, ReferenceContext ref, AlignmentContext rawContext)\n    {\n         AlignmentContext context;\n        if (super.getMinQualityScore() <= 0) {\n            context = rawContext;\n        } else {\n            Pair<List<SAMRecord>,List<Integer>> readsFilteredByQuality = filterByQuality(rawContext.getReads(),rawContext.getOffsets(), super.getMinQualityScore());\n            context = new AlignmentContext(rawContext.getLocation(),readsFilteredByQuality.getFirst(),readsFilteredByQuality.getSecond());\n        }\n\n        Pair<Pair<List<SAMRecord>, List<SAMRecord>>,Pair<List<Integer>,List<Integer>>> splitReads = PoolUtils.splitReadsByReadDirection(context.getReads(),context.getOffsets());\n        if ( !super.suppress_printing )\n        {\n            Pair<double[],byte[]> powPair = super.calculatePower(splitReads,false,context);\n\n\n\n            int tabIndexChrom = getTableChromIndex(context.getLocation().toString());\n            int tabIndexLoc = getTablePosIndex(context.getLocation().toString());\n            double syzyPow = 0;\n            String syzySanity = \"NoLoc\";\n            if(tabIndexChrom >= 0 && tabIndexLoc >= 0) {\n                syzyPow += syzyPowerTable[tabIndexChrom][tabIndexLoc];\n                syzySanity = \"s \" + syzySanityCheckTable[tabIndexChrom][tabIndexLoc];\n\n            }\n            out.printf(\"%s|%s: %d %d %d %d %d %d %f %f %f %f %n\", context.getLocation(), syzySanity, splitReads.getFirst().getFirst().size(), splitReads.getFirst().getSecond().size(),\n                    context.getReads().size(), powPair.getSecond()[0], powPair.getSecond()[1], powPair.getSecond()[2],\n                    powPair.getFirst()[0], powPair.getFirst()[1], powPair.getFirst()[2], syzyPow);\n\n        }\n\n        return new Pair(splitReads.getFirst().getFirst().size(), splitReads.getFirst().getFirst().size());\n    }","commit_id":"93cedf42855df36983da1f3d08ffd5e010c31690","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n    public void initialize()\n    {\n        super.initialize();\n        try {\n            syzyFileReader = new BufferedReader(new FileReader(pathToSyzygyFile));\n            System.out.println(syzyFileReader.readLine());\n        } catch (FileNotFoundException e) {\n            String newErrMsg = \"Syzygy input file \" + pathToSyzygyFile + \" could be incorrect. File not found.\";\n            throw new StingException(newErrMsg,e);\n        } catch (IOException e) {\n            String newErrMsg = \"Syzygy input file error: could not read first line of \"+pathToSyzygyFile;\n            throw new StingException(newErrMsg,e);\n        }\n\n    }","id":59609,"modified_method":"@Override\n    public void initialize()\n    {\n        super.initialize();\n        syzyPowerTable = new double[8][1500000];\n        syzySanityCheckTable = new String[8][1500000];\n        try {\n            syzyFileReader = new BufferedReader(new FileReader(pathToSyzygyFile));\n            logger.error(\"generatePowerTable called\");\n            generatePowerTable(syzyFileReader);\n        } catch (FileNotFoundException e) {\n            String newErrMsg = \"Syzygy input file \" + pathToSyzygyFile + \" could be incorrect. File not found.\";\n            throw new StingException(newErrMsg,e);\n        } catch (IOException e) {\n            String newErrMsg = \"Syzygy input file error: could not read first line of \"+pathToSyzygyFile;\n            throw new StingException(newErrMsg,e);\n        }\n\n    }","commit_id":"93cedf42855df36983da1f3d08ffd5e010c31690","url":"https://github.com/broadgsa/gatk"},{"original_method":"private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context )\n        throws ModelBuildingException\n    {\n        try\n        {\n            return profileSelector.getActiveProfiles( request.getProfiles(), context );\n        }\n        catch ( ProfileActivationException e )\n        {\n            throw new InvalidProfileException( \"Failed to determine activation status of external profile \"\n                + e.getProfile(), e.getProfile(), e );\n        }\n    }","id":59610,"modified_method":"private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context,\n                                                     List<ModelProblem> problems )\n    {\n        try\n        {\n            return profileSelector.getActiveProfiles( request.getProfiles(), context );\n        }\n        catch ( ProfileActivationException e )\n        {\n            problems.add( new ModelProblem( \"Invalid activation condition for external profile \"\n                + e.getProfile().getId() + \": \" + e.getMessage(), \"(external profiles)\", e ) );\n\n            // FIXME: Update profile selector to integrate better with the problem reporting\n            return new ArrayList<Profile>();\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private void configureResolver( ModelResolver modelResolver, Model model )\n        throws ModelBuildingException\n    {\n        if ( modelResolver == null )\n        {\n            return;\n        }\n\n        for ( Repository repository : model.getRepositories() )\n        {\n            try\n            {\n                modelResolver.addRepository( repository );\n            }\n            catch ( InvalidRepositoryException e )\n            {\n                throw new InvalidModelException( \"Failed to validate repository \" + repository.getId() + \" for POM \"\n                    + toSourceHint( model ), e );\n            }\n        }\n    }","id":59611,"modified_method":"private void configureResolver( ModelResolver modelResolver, Model model, List<ModelProblem> problems )\n    {\n        if ( modelResolver == null )\n        {\n            return;\n        }\n\n        for ( Repository repository : model.getRepositories() )\n        {\n            try\n            {\n                modelResolver.addRepository( repository );\n            }\n            catch ( InvalidRepositoryException e )\n            {\n                problems.add( new ModelProblem( \"Invalid repository \" + repository.getId() + \" in POM \"\n                    + toSourceHint( model ) + \": \" + e.getMessage(), toSourceHint( model ), e ) );\n            }\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context )\n        throws ModelBuildingException\n    {\n        try\n        {\n            return profileSelector.getActiveProfiles( model.getProfiles(), context );\n        }\n        catch ( ProfileActivationException e )\n        {\n            throw new InvalidProfileException( \"Failed to determine activation status of project profile \"\n                + e.getProfile() + \" for POM \" + toSourceHint( model ), e.getProfile(), e );\n        }\n    }","id":59612,"modified_method":"private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context,\n                                                    List<ModelProblem> problems )\n        throws ModelBuildingException\n    {\n        try\n        {\n            return profileSelector.getActiveProfiles( model.getProfiles(), context );\n        }\n        catch ( ProfileActivationException e )\n        {\n            problems.add( new ModelProblem( \"Invalid activation condition for project profile \"\n                + e.getProfile().getId() + \" in POM \" + toSourceHint( model ) + \": \" + e.getMessage(),\n                                            toSourceHint( model ), e ) );\n\n            // FIXME: Update profile selector to integrate better with the problem reporting\n            return new ArrayList<Profile>();\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private Model readParentExternally( Model childModel, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        Parent parent = childModel.getParent();\n\n        ModelResolver modelResolver = request.getModelResolver();\n\n        if ( modelResolver == null )\n        {\n            Exception e = new IllegalArgumentException( \"No model resolver provided\" );\n            throw new UnresolvableParentException( \"Failed to resolve parent POM \" + toId( parent ) + \" for POM \"\n                + toSourceHint( childModel ), e );\n        }\n\n        ModelSource modelSource;\n        try\n        {\n            modelSource = modelResolver.resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );\n        }\n        catch ( UnresolvableModelException e )\n        {\n            throw new UnresolvableParentException( \"Failed to resolve parent POM \" + toId( parent ) + \" for POM \"\n                + toSourceHint( childModel ), e );\n        }\n\n        return readModel( modelSource, request );\n    }","id":59613,"modified_method":"private Model readParentExternally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )\n        throws ModelBuildingException\n    {\n        Parent parent = childModel.getParent();\n\n        ModelResolver modelResolver = request.getModelResolver();\n\n        if ( modelResolver == null )\n        {\n            problems.add( new ModelProblem( \"Non-resolvable parent POM \" + toId( parent ) + \" for POM \"\n                + toSourceHint( childModel ) + \": \" + \"No model resolver provided\", toSourceHint( childModel ) ) );\n            throw new ModelBuildingException( problems );\n        }\n\n        ModelSource modelSource;\n        try\n        {\n            modelSource = modelResolver.resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );\n        }\n        catch ( UnresolvableModelException e )\n        {\n            problems.add( new ModelProblem( \"Non-resolvable parent POM \" + toId( parent ) + \" for POM \"\n                + toSourceHint( childModel ) + \": \" + e.getMessage(), toSourceHint( childModel ), e ) );\n            throw new ModelBuildingException( problems );\n        }\n\n        return readModel( modelSource, request, problems );\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private Model interpolateModel( Model model, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        try\n        {\n            Model result = modelInterpolator.interpolateModel( model, model.getProjectDirectory(), request );\n            result.setPomFile( model.getPomFile() );\n            return result;\n        }\n        catch ( ModelInterpolationException e )\n        {\n            throw new ModelBuildingException( \"Failed to interpolate model \" + toSourceHint( model ), e );\n        }\n    }","id":59614,"modified_method":"private Model interpolateModel( Model model, ModelBuildingRequest request, List<ModelProblem> problems )\n    {\n        try\n        {\n            Model result = modelInterpolator.interpolateModel( model, model.getProjectDirectory(), request );\n            result.setPomFile( model.getPomFile() );\n            return result;\n        }\n        catch ( ModelInterpolationException e )\n        {\n            problems.add( new ModelProblem( \"Invalid expression in POM \" + toSourceHint( model ) + \": \"\n                + e.getMessage(), toSourceHint( model ), e ) );\n\n            return model;\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private Model readParent( Model childModel, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        Model parentModel;\n\n        Parent parent = childModel.getParent();\n\n        if ( parent != null )\n        {\n            parentModel = readParentLocally( childModel, request );\n\n            if ( parentModel == null )\n            {\n                parentModel = readParentExternally( childModel, request );\n            }\n        }\n        else\n        {\n            parentModel = null;\n        }\n\n        return parentModel;\n    }","id":59615,"modified_method":"private Model readParent( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )\n        throws ModelBuildingException\n    {\n        Model parentModel;\n\n        Parent parent = childModel.getParent();\n\n        if ( parent != null )\n        {\n            parentModel = readParentLocally( childModel, request, problems );\n\n            if ( parentModel == null )\n            {\n                parentModel = readParentExternally( childModel, request, problems );\n            }\n        }\n        else\n        {\n            parentModel = null;\n        }\n\n        return parentModel;\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private ModelBuildingResult build( ModelSource modelSource, File pomFile, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        DefaultModelBuildingResult result = new DefaultModelBuildingResult();\n\n        ProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext );\n\n        Model model = readModel( modelSource, request );\n        model.setPomFile( pomFile );\n\n        List<Model> rawModels = new ArrayList<Model>();\n        List<Model> resultModels = new ArrayList<Model>();\n\n        for ( Model current = model; current != null; current = readParent( current, request ) )\n        {\n            Model resultModel = current;\n            resultModels.add( resultModel );\n\n            Model rawModel = ModelUtils.cloneModel( current );\n            rawModels.add( rawModel );\n\n            modelNormalizer.mergeDuplicates( resultModel, request );\n\n            List<Profile> activeProjectProfiles = getActiveProjectProfiles( rawModel, profileActivationContext );\n\n            List<Profile> activeProfiles = activeProjectProfiles;\n            if ( current == model )\n            {\n                activeProfiles = new ArrayList<Profile>( activeProjectProfiles.size() + activeExternalProfiles.size() );\n                activeProfiles.addAll( activeProjectProfiles );\n                activeProfiles.addAll( activeExternalProfiles );\n            }\n\n            for ( Profile activeProfile : activeProfiles )\n            {\n                profileInjector.injectProfile( resultModel, activeProfile, request );\n            }\n\n            result.setActiveProfiles( rawModel, activeProfiles );\n\n            configureResolver( request.getModelResolver(), resultModel );\n        }\n\n        Model superModel = getSuperModel();\n        rawModels.add( superModel );\n        resultModels.add( superModel );\n\n        result.setRawModels( rawModels );\n\n        assembleInheritance( resultModels, request );\n\n        Model resultModel = resultModels.get( 0 );\n\n        resultModel = interpolateModel( resultModel, request );\n        resultModels.set( 0, resultModel );\n\n        modelPathTranslator.alignToBaseDirectory( resultModel, resultModel.getProjectDirectory(), request );\n\n        if ( request.isProcessPlugins() )\n        {\n            lifecycleBindingsInjector.injectLifecycleBindings( resultModel );\n        }\n\n        managementInjector.injectManagement( resultModel, request );\n\n        if ( request.isProcessPlugins() )\n        {\n            pluginConfigurationExpander.expandPluginConfiguration( resultModel, request );\n        }\n\n        validateModel( resultModel, false, request );\n\n        result.setEffectiveModel( resultModel );\n\n        return result;\n    }","id":59616,"modified_method":"private ModelBuildingResult build( ModelSource modelSource, File pomFile, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        DefaultModelBuildingResult result = new DefaultModelBuildingResult();\n\n        List<ModelProblem> problems = new ArrayList<ModelProblem>();\n\n        ProfileActivationContext profileActivationContext = getProfileActivationContext( request );\n\n        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext, problems );\n\n        Model model = readModel( modelSource, request, problems );\n        model.setPomFile( pomFile );\n\n        List<Model> rawModels = new ArrayList<Model>();\n        List<Model> resultModels = new ArrayList<Model>();\n\n        for ( Model current = model; current != null; current = readParent( current, request, problems ) )\n        {\n            Model resultModel = current;\n            resultModels.add( resultModel );\n\n            Model rawModel = ModelUtils.cloneModel( current );\n            rawModels.add( rawModel );\n\n            modelNormalizer.mergeDuplicates( resultModel, request );\n\n            List<Profile> activeProjectProfiles =\n                getActiveProjectProfiles( rawModel, profileActivationContext, problems );\n\n            List<Profile> activeProfiles = activeProjectProfiles;\n            if ( current == model )\n            {\n                activeProfiles = new ArrayList<Profile>( activeProjectProfiles.size() + activeExternalProfiles.size() );\n                activeProfiles.addAll( activeProjectProfiles );\n                activeProfiles.addAll( activeExternalProfiles );\n            }\n\n            for ( Profile activeProfile : activeProfiles )\n            {\n                profileInjector.injectProfile( resultModel, activeProfile, request );\n            }\n\n            result.setActiveProfiles( rawModel, activeProfiles );\n\n            configureResolver( request.getModelResolver(), resultModel, problems );\n        }\n\n        Model superModel = getSuperModel();\n        rawModels.add( superModel );\n        resultModels.add( superModel );\n\n        result.setRawModels( rawModels );\n\n        assembleInheritance( resultModels, request );\n\n        Model resultModel = resultModels.get( 0 );\n\n        resultModel = interpolateModel( resultModel, request, problems );\n        resultModels.set( 0, resultModel );\n\n        modelPathTranslator.alignToBaseDirectory( resultModel, resultModel.getProjectDirectory(), request );\n\n        if ( request.isProcessPlugins() )\n        {\n            lifecycleBindingsInjector.injectLifecycleBindings( resultModel );\n        }\n\n        managementInjector.injectManagement( resultModel, request );\n\n        if ( request.isProcessPlugins() )\n        {\n            pluginConfigurationExpander.expandPluginConfiguration( resultModel, request );\n        }\n\n        validateModel( resultModel, false, request, problems );\n\n        if ( !problems.isEmpty() )\n        {\n            throw new ModelBuildingException( problems );\n        }\n\n        result.setEffectiveModel( resultModel );\n\n        return result;\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private Model readParentLocally( Model childModel, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        File projectDirectory = childModel.getProjectDirectory();\n        if ( projectDirectory == null )\n        {\n            return null;\n        }\n\n        Parent parent = childModel.getParent();\n\n        File pomFile = new File( new File( projectDirectory, parent.getRelativePath() ).toURI().normalize() );\n        if ( pomFile.isDirectory() )\n        {\n            pomFile = new File( pomFile, \"pom.xml\" );\n        }\n        if ( !pomFile.isFile() )\n        {\n            return null;\n        }\n\n        Model candidateModel = readModel( new FileModelSource( pomFile ), request );\n        candidateModel.setPomFile( pomFile );\n\n        String groupId = candidateModel.getGroupId();\n        if ( groupId == null && candidateModel.getParent() != null )\n        {\n            groupId = candidateModel.getParent().getGroupId();\n        }\n        String artifactId = candidateModel.getArtifactId();\n        String version = candidateModel.getVersion();\n        if ( version == null && candidateModel.getParent() != null )\n        {\n            version = candidateModel.getParent().getVersion();\n        }\n\n        if ( groupId == null || !groupId.equals( parent.getGroupId() ) )\n        {\n            return null;\n        }\n        if ( artifactId == null || !artifactId.equals( parent.getArtifactId() ) )\n        {\n            return null;\n        }\n        if ( version == null || !version.equals( parent.getVersion() ) )\n        {\n            return null;\n        }\n\n        return candidateModel;\n    }","id":59617,"modified_method":"private Model readParentLocally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )\n        throws ModelBuildingException\n    {\n        File projectDirectory = childModel.getProjectDirectory();\n        if ( projectDirectory == null )\n        {\n            return null;\n        }\n\n        Parent parent = childModel.getParent();\n\n        File pomFile = new File( new File( projectDirectory, parent.getRelativePath() ).toURI().normalize() );\n        if ( pomFile.isDirectory() )\n        {\n            pomFile = new File( pomFile, \"pom.xml\" );\n        }\n        if ( !pomFile.isFile() )\n        {\n            return null;\n        }\n\n        Model candidateModel = readModel( new FileModelSource( pomFile ), request, problems );\n        candidateModel.setPomFile( pomFile );\n\n        String groupId = candidateModel.getGroupId();\n        if ( groupId == null && candidateModel.getParent() != null )\n        {\n            groupId = candidateModel.getParent().getGroupId();\n        }\n        String artifactId = candidateModel.getArtifactId();\n        String version = candidateModel.getVersion();\n        if ( version == null && candidateModel.getParent() != null )\n        {\n            version = candidateModel.getParent().getVersion();\n        }\n\n        if ( groupId == null || !groupId.equals( parent.getGroupId() ) )\n        {\n            return null;\n        }\n        if ( artifactId == null || !artifactId.equals( parent.getArtifactId() ) )\n        {\n            return null;\n        }\n        if ( version == null || !version.equals( parent.getVersion() ) )\n        {\n            return null;\n        }\n\n        return candidateModel;\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private Model readModel( ModelSource modelSource, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        Model model;\n\n        try\n        {\n            Map<String, Object> options =\n                Collections.<String, Object> singletonMap( ModelReader.IS_STRICT,\n                                                           Boolean.valueOf( !request.istLenientValidation() ) );\n            model = modelReader.read( modelSource.getInputStream(), options );\n        }\n        catch ( ModelParseException e )\n        {\n            throw new UnparseableModelException( \"Failed to parse POM \" + modelSource.getLocation() + \": \"\n                + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );\n        }\n        catch ( IOException e )\n        {\n            throw new UnparseableModelException( \"Failed to read POM \" + modelSource.getLocation(), -1, -1, e );\n        }\n\n        validateModel( model, true, request );\n\n        return model;\n    }","id":59618,"modified_method":"private Model readModel( ModelSource modelSource, ModelBuildingRequest request, List<ModelProblem> problems )\n        throws ModelBuildingException\n    {\n        Model model;\n\n        try\n        {\n            Map<String, Object> options =\n                Collections.<String, Object> singletonMap( ModelReader.IS_STRICT,\n                                                           Boolean.valueOf( !request.istLenientValidation() ) );\n            model = modelReader.read( modelSource.getInputStream(), options );\n        }\n        catch ( ModelParseException e )\n        {\n            problems.add( new ModelProblem( \"Non-parseable POM \" + modelSource.getLocation() + \": \" + e.getMessage(),\n                                            modelSource.getLocation(), e ) );\n            throw new ModelBuildingException( problems );\n        }\n        catch ( IOException e )\n        {\n            problems.add( new ModelProblem( \"Non-readable POM \" + modelSource.getLocation() + \": \" + e.getMessage(),\n                                            modelSource.getLocation(), e ) );\n            throw new ModelBuildingException( problems );\n        }\n\n        validateModel( model, true, request, problems );\n\n        return model;\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"private void validateModel( Model model, boolean raw, ModelBuildingRequest request )\n        throws ModelBuildingException\n    {\n        ModelValidationResult result;\n\n        if ( raw )\n        {\n            result = modelValidator.validateRawModel( model, request );\n        }\n        else\n        {\n            result = modelValidator.validateEffectiveModel( model, request );\n        }\n\n        if ( result.getMessageCount() > 0 )\n        {\n            throw new InvalidModelException( \"Failed to validate POM \" + toSourceHint( model ), result );\n        }\n    }","id":59619,"modified_method":"private void validateModel( Model model, boolean raw, ModelBuildingRequest request, List<ModelProblem> problems )\n    {\n        ModelValidationResult result;\n\n        if ( raw )\n        {\n            result = modelValidator.validateRawModel( model, request );\n        }\n        else\n        {\n            result = modelValidator.validateEffectiveModel( model, request );\n        }\n\n        if ( result.getMessageCount() > 0 )\n        {\n            String source = toSourceHint( model );\n\n            for ( int i = 0; i < result.getMessageCount(); i++ )\n            {\n                problems.add( new ModelProblem( \"Invalid POM \" + source + \": \" + result.getMessage( i ), source ) );\n            }\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"/**\n     * Creates a new exception with specified detail message and cause.\n     * \n     * @param message The detail message, may be {@code null}.\n     * @param cause The cause, may be {@code null}.\n     */\n    public ModelBuildingException( String message, Throwable cause )\n    {\n        super( message, cause );\n    }","id":59620,"modified_method":"/**\n     * Creates a new exception with the specified problems.\n     * \n     * @param problems The problems that causes this exception, may be {@code null}.\n     */\n    public ModelBuildingException( List<ModelProblem> problems )\n    {\n        super( toMessage( problems ) );\n\n        this.problems = new ArrayList<ModelProblem>();\n        if ( problems != null )\n        {\n            this.problems.addAll( problems );\n        }\n    }","commit_id":"b5e672f92b3f3d99fe7d00c3be1b4a84392a6e51","url":"https://github.com/apache/maven"},{"original_method":"public Integer map(RefMetaDataTracker tracker, String ref, LocusContext context) {\n        out.println(context.getLocation() + \" (\" + context.getReads().size() + \") => \" + ref);\n        return 1;\n    }","id":59621,"modified_method":"public Integer map(RefMetaDataTracker tracker, String ref, LocusContext context) {\n        List<SAMRecord> reads = context.getReads();\n        ArrayList<SAMRecord> goodReads = new ArrayList<SAMRecord>();\n        long leftmostIndex = context.getLocation().getStart();\n        for ( SAMRecord read : reads ) {\n            if ( read.getReadLength() <= maxReadLength )\n                goodReads.add(read);\n        }\n        clean(goodReads, ref, context.getLocation().getStart());\n\n        return 1;\n    }","commit_id":"7de5da7065db7e3bc90db1b5f2c1bc4f8cffb406","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void initialize() {}","id":59622,"modified_method":"public void initialize() {\n        SAMFileHeader header = getToolkit().getSamReader().getFileHeader();\n        writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(header, false, new File(OUT));\n    }","commit_id":"7de5da7065db7e3bc90db1b5f2c1bc4f8cffb406","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void receive(Collection<SAMRecord> c) {\n\n           //TODO: if read starts/ends with an indel (insertion, actually), we detect this as a \"different\" indel introduced during cleanup.\n            processed_piles++;\n            total_reads_received += c.size();\n\n           IndexedSequence[] seqs = new IndexedSequence[c.size()];\n           int i = 0;\n           int startOnRef = 1000000000;  // absolute start (leftmost) position of the pile of reads on the ref\n           int stopOnRef = 0; // absolute stop (rightmost) position of the pile of reads on the ref (rightmost alignment end)\n           for ( SAMRecord r : c ) {\n                seqs[i++] = new IndexedSequence(r.getReadString(),KmerSize);\n                startOnRef = Math.min(startOnRef, r.getAlignmentStart() );\n                stopOnRef = Math.max(stopOnRef,r.getAlignmentEnd());\n           }\n\n           // part of the reference covered by original alignments:\n           String pileRef = referenceSequence.substring(startOnRef-1,stopOnRef);\n\n           int totalMismatches = 0; // total mismatches across all reads\n           TreeSet< CountedObject<Indel> > all_indels = new TreeSet< CountedObject<Indel> >(\n                   new CountedObjectComparatorAdapter<Indel>(new IntervalComparator()));\n\n           SequencePile originalAligns = null;\n           if ( mVerbosityLevel >= ALIGNMENTS ) originalAligns = new SequencePile(pileRef);\n\n           for ( SAMRecord r : c ) {\n               if ( mVerbosityLevel >= ALIGNMENTS ) {\n                    originalAligns.addAlignedSequence(r.getReadString(), r.getReadNegativeStrandFlag(),\n                           r.getCigar(), r.getAlignmentStart() - startOnRef );\n               }\n               totalMismatches += AlignmentUtils.numMismatches(r,referenceSequence);\n               AlignmentUtils.collectAndCountIndels(r,all_indels);\n           }\n\n           if ( mVerbosityLevel >= ALIGNMENTS ) {\n                System.out.println(\"\\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\n                System.out.println(\"ORIGINAL ALIGNMENT: \\n\");\n                originalAligns.dotprint(true);\n                System.out.println(\"\\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\") ;\n           }\n\n           List<MultipleAlignment> piles = doMultipleAlignment2(seqs);\n\n           if ( piles.size() > 2 ) {\n        \t   System.out.println(\"WARNING: \" + piles.size() + \" piles appear to be disjoint\");\n           }\n\n//           System.out.print(\"Distance between final piles: \"+distance(alignments1, alignments2));\n//           System.out.print(\"; diameter of PILE1: \"+ diameter(alignments1));\n//           System.out.println(\"; diameter of PILE2: \"+ diameter(alignments2));\n\n           SymmetricMatrix d = new SymmetricMatrix(piles.size());\n           for ( int n = 0 ; n < piles.size() ; n++ ) {\n                d.set(n,n,diameter(piles.get(n)));\n                for ( int m = n+1 ; m < piles.size() ; m++ ) {\n                    d.set(n,m,distance(piles.get(n), piles.get(m)));\n                }\n            }\n\n            int new_mismatches = 0 ; // number of mismatches after re-alignment:\n            TreeSet< CountedObject<Indel> > new_indels = new TreeSet< CountedObject<Indel> >(\n                    new CountedObjectComparatorAdapter<Indel>(new IntervalComparator())\n            ); // new indels after realignment\n            int shifted_reads = 0;\n            int smashed_reads = 0;\n\n            List<SAMRecord> as_list = (List<SAMRecord>)c;        // ugly hack; need this to access records by ids\n\n            if ( mVerbosityLevel >= PILESUMMARY ) System.out.println(d.format(\"%8.4g\"));\n\n            for ( int n = 0 ; n < piles.size() ; n++ ) {\n//            SWPairwiseAlignment consToRef = new SWPairwiseAlignment(pileRef,piles.get(n).getConsensus(),2.0,-10.0,-2.0,-1.0);\n                SWPairwiseAlignment consToRef = new SWPairwiseAlignment(pileRef,piles.get(n).getConsensus(),3.0,-1.0,-4.0,-0.5);\n\n                if ( mVerbosityLevel >= ALIGNMENTS ) {\n\n                    System.out.println(\"PILE \" + n + \" to REF (\"+ (consToRef.getCigar().numCigarElements()-1)/2 +\" indels):\");\n                    System.out.println(consToRef.toString());\n                    System.out.println(\"PILE \" + n +\" (READS):\\n\" +piles.get(n).toString(true,true));\n                }\n//            SequencePile pileAligns = new SequencePile(pileRef);\n\n                MultipleAlignment ma = piles.get(n);\n                for ( Integer id : ma ) {\n                    SAMRecord r = as_list.get(id);\n                    int cons_offset = ma.getOffsetWrtConsensus(id); // offset of the read 'id' wrt multiple alignment's full consensus seq\n\n/*\n                System.out.println(\"id=\" + id +\": offset on consensus=\"+cons_offset+\n                        \"; consensus wrt ref chunk=\"+consToRef.getAlignmentStart2wrt1()+\"; chunk start=\"+startOnRef);\n*/\n\n                    int ref_offset = cons_offset + startOnRef + consToRef.getAlignmentStart2wrt1()+indelCorrection(cons_offset,consToRef.getCigar());\n                    if ( ref_offset != r.getAlignmentStart()) shifted_reads++;\n                    Cigar cig = buildCigar(cons_offset, r.getReadLength(), consToRef.getCigar());\n/*\n                if ( id == 9 ) {\n                    System.out.println(\"ref_offset=\"+ref_offset+\"; orig_ref_off=\"+r.getAlignmentStart()+\"; \"+\n                            AlignmentUtils.toString(cig));\n                }\n\n                System.out.println(\"adding \"+id+\" at \"+ (ref_offset - refStarttemp));\n                pileAligns.addAlignedSequence(r.getReadString(), r.getReadNegativeStrandFlag(), cig, ref_offset - refStarttemp);\n*/\n                    if ( cig.numCigarElements() != r.getCigar().numCigarElements() ) smashed_reads++;\n\n                    if ( ref_offset != r.getAlignmentStart() || cig.numCigarElements() != r.getCigar().numCigarElements() ) total_alignments_modified++;\n\n                    SAMRecord rtest = new SAMRecord(r.getHeader());\n                    rtest.setAlignmentStart(ref_offset);\n                    rtest.setReadString(r.getReadString());\n                    rtest.setReadUmappedFlag(r.getReadUnmappedFlag());\n                    rtest.setCigar(cig);\n                    AlignmentUtils.collectAndCountIndels(rtest,new_indels);\n                    new_mismatches += AlignmentUtils.numMismatches(rtest,referenceSequence);\n                }\n //           pileAligns.colorprint(true);\n            }\n\n            boolean pile_improved = false;\n            boolean pile_unmodified = false;\n            boolean pile_failed = false;\n\n            double mmChangePct = Math.abs((new_mismatches - totalMismatches)*100.0/totalMismatches);\n\n            if ( shifted_reads == 0 && smashed_reads == 0 ) pile_unmodified = true;\n            else {\n                if ( new_mismatches < totalMismatches ||\n                     mmChangePct < 10.0 && (  new_indels.size() < all_indels.size() )\n                    ) pile_improved = true;\n                else pile_failed = true;\n            }\n\n            if ( pile_improved ) {\n                total_mismatches_count_in_improved +=totalMismatches;\n                total_improved_mismatches_count += new_mismatches;\n                total_reads_in_improved += c.size() ;\n            }\n\n            if ( pile_failed ) {\n                total_mismatches_count_in_failed += totalMismatches;\n                total_reads_in_failed += c.size();\n            }\n            int discovered_indels = 0;\n            int discovered_support = 0;\n            int existing_indels = 0;\n            int existing_support = 0;\n            int existing_support_new = 0;\n            int discarded_indels = 0;\n            for ( CountedObject<Indel> ind : new_indels ) {\n            //System.out.print(\"new indel: \"+ind.getObject().getStart()+\"+\"+ind.getObject().getStop());\n                if ( ! all_indels.contains(ind) ) {\n                //System.out.println(\" (DISCOVERED)\");\n                    discovered_indels++;\n                    discovered_support += ind.getCount();\n                    if ( pile_improved ) {\n                        indels_added++;\n                        indels_added_cnt += ind.getCount();\n                    }\n                } else {\n                    //System.out.println(\" (EXISTING)\");\n                    existing_indels++;\n                    existing_support_new += ind.getCount();\n                    if ( pile_improved && ( ind.getCount() > all_indels.floor(ind).getCount() ) ) {\n                        if ( ! ind.equals(all_indels.floor(ind))) System.out.println(\"ERROR MATCHING INDELS!!!\") ;\n                        indels_improved++;\n                        indel_improvement_cnt += ( ind.getCount() - all_indels.floor(ind).getCount() );\n                    }\n                }\n            }\n            for ( CountedObject<Indel> ind : all_indels ) {\n            //System.out.print(\"old indel: \"+ind.getObject().getStart()+\"+\"+ind.getObject().getStop());\n                if ( ! new_indels.contains(ind )) {\n                //System.out.println(\" (DISCARDED)\");\n                    discarded_indels++;\n                    if ( pile_improved ) indels_discarded++;\n                } else {\n                //System.out.println(\" (KEPT)\");\n                    existing_support += ind.getCount();\n                }\n            }\n\n        if ( pile_improved ) improved_piles++;\n        if ( pile_unmodified ) unmodified_piles++;\n        if ( pile_failed ) failed_piles++;\n\n        if ( mVerbosityLevel >= PILESUMMARY ) {\n            System.out.print(\"TOTAL MISMATCHES: \"+totalMismatches +\" --> \"+new_mismatches);\n            if ( totalMismatches > new_mismatches ) System.out.print(\"(-\");\n            else System.out.print(\"(+\");\n            System.out.printf(\"%.2f%%)%n\",mmChangePct);\n\n            System.out.println(\"CONFIRMED INDELS: \"+existing_indels);\n            System.out.print(\"CONFIRMED INDEL SUPPORT: \"+existing_support + \" --> \" + existing_support_new );\n            if ( existing_support > existing_support_new ) System.out.print(\"(-\");\n            else System.out.print(\"(+\");\n            System.out.printf(\"%.2f%%)%n\",Math.abs((existing_support- existing_support_new)*100.0/existing_support));\n            System.out.println(\"DROPPED INDELS: \" + discarded_indels);\n            System.out.println(\"DISCOVERED INDELS: \" + discovered_indels) ;\n            System.out.println(\"DISCOVERED INDELS SUPPORT: \"+discovered_support);\n            System.out.println(\"ALIGNMENTS SHIFTED: \"+shifted_reads);\n            System.out.println(\"ALIGNMENTS WITH GAPS CHANGED: \"+smashed_reads);\n\n            if ( pile_improved )  System.out.println(\"OUTCOME: IMPROVED\");\n            if ( pile_unmodified ) System.out.println(\"OUTCOME: UNCHANGED\");\n            if ( pile_failed ) System.out.println(\"OUTCOME: FAILED\");\n\n            System.out.println(\"\\n#############################################################################\\n\");\n        }\n    // finally, writing stuff:\n        for ( int n = 0 ; n < piles.size() ; n++ ) {\n\n            SWPairwiseAlignment consToRef = new SWPairwiseAlignment(pileRef,piles.get(n).getConsensus(),3.0,-1.0,-4.0,-0.5);\n            MultipleAlignment ma = piles.get(n);\n\n            Iterator<Integer> id_iter = ma.sequenceIdByOffsetIterator();\n            while ( id_iter.hasNext() ) {\n\n                int id = id_iter.next();\n\n                SAMRecord r = as_list.get(id);\n                if ( pile_failed || pile_unmodified ) {\n                    failedPileReceiver.receive(r); // nothing to do, send failed piles directly for writing\n                    continue;\n                }\n\n                // we improved stuff!! let's reset the alignment parameters!\n                int cons_offset = ma.getOffsetWrtConsensus(id); // offset of the read 'id' wrt multiple alignment's full consensus seq\n\n                //  offset of the realigned read r on the reference\n                int ref_offset = cons_offset + startOnRef + consToRef.getAlignmentStart2wrt1()+indelCorrection(cons_offset,consToRef.getCigar());\n\n                r.setAlignmentStart(ref_offset);\n\n                Cigar cig = buildCigar(cons_offset, r.getReadLength(), consToRef.getCigar());\n\n                r.setCigar(cig);\n\n                r.setAttribute(\"NM\",new Integer(AlignmentUtils.numMismatches(r,referenceSequence)));\n\n //               System.out.println(\"writing \" + id);\n                samWriter.addAlignment(r);\n                total_reads_written++;\n\n            }\n        }\n\n    }","id":59623,"modified_method":"public void receive(Collection<SAMRecord> c) {\n        int startOnRef = 1000000000;  // absolute start (leftmost) position of the pile of reads on the ref\n        int stopOnRef = 0; // absolute stop (rightmost) position of the pile of reads on the ref (rightmost alignment end)\n        for ( SAMRecord r : c ) {\n             startOnRef = Math.min(startOnRef, r.getAlignmentStart() );\n             stopOnRef = Math.max(stopOnRef,r.getAlignmentEnd());\n        }\n\n        // part of the reference covered by original alignments:\n        String pileRef = referenceSequence.substring(startOnRef-1,stopOnRef);\n        receive(c, pileRef, startOnRef);\n    }","commit_id":"7de5da7065db7e3bc90db1b5f2c1bc4f8cffb406","url":"https://github.com/broadgsa/gatk"},{"original_method":"protected <M, T> T carryWalkerOverInterval(LocusWindowWalker<M, T> walker, Iterator<SAMRecord> readIter, T sum, GenomeLoc interval ) {\n        logger.debug(String.format(\"TraverseByIntervals.carryWalkerOverInterval Genomic interval is %s\", interval));\n\n        // prepare the read filtering read iterator and provide it to a new interval iterator\n        FilteringIterator filterIter = new FilteringIterator(readIter, new locusStreamFilterFunc());\n\n        ArrayList<SAMRecord> reads = new ArrayList<SAMRecord>();\n        ArrayList<Integer> offsets = new ArrayList<Integer>();\n        boolean done = false;\n        while (filterIter.hasNext() && !done) {\n            TraversalStatistics.nRecords++;\n            SAMRecord read = filterIter.next();\n            reads.add(read);\n            offsets.add((int)(read.getAlignmentStart() - interval.getStart()));\n            if (this.maxReads > 0 && TraversalStatistics.nRecords > this.maxReads) {\n                logger.warn(String.format(\"Maximum number of reads encountered, terminating traversal \" + TraversalStatistics.nRecords));\n                done = true;\n            }\n        }\n\n        LocusContext locus = new LocusContext(interval, reads, offsets);\n        if ( DOWNSAMPLE_BY_COVERAGE )\n            locus.downsampleToCoverage(downsamplingCoverage);\n\n        ReferenceIterator refSite = refIter.seekForward(locus.getLocation());\n        locus.setReferenceContig(refSite.getCurrentContig());\n\n        // Iterate forward to get all reference ordered data covering this interval\n        final RefMetaDataTracker tracker = getReferenceOrderedDataAtLocus(locus.getLocation());\n\n        sum = walkAtinterval( walker, sum, locus, refSite, tracker );\n\n        //System.out.format(\"Working at %s\\n\", locus.getLocation().toString());\n\n        printProgress(\"intervals\", locus.getLocation());\n\n        return sum;\n    }","id":59624,"modified_method":"protected <M, T> T carryWalkerOverInterval(LocusWindowWalker<M, T> walker, Iterator<SAMRecord> readIter, T sum, GenomeLoc interval ) {\n        logger.debug(String.format(\"TraverseByIntervals.carryWalkerOverInterval Genomic interval is %s\", interval));\n\n        // prepare the read filtering read iterator and provide it to a new interval iterator\n        FilteringIterator filterIter = new FilteringIterator(readIter, new locusStreamFilterFunc());\n\n        ArrayList<SAMRecord> reads = new ArrayList<SAMRecord>();\n        ArrayList<Integer> offsets = new ArrayList<Integer>();\n        boolean done = false;\n        long leftmostIndex = interval.getStart(),\n                rightmostIndex = interval.getStop();\n        while (filterIter.hasNext() && !done) {\n            TraversalStatistics.nRecords++;\n            SAMRecord read = filterIter.next();\n            reads.add(read);\n            offsets.add((int)(read.getAlignmentStart() - interval.getStart()));\n            if ( read.getAlignmentStart() < leftmostIndex )\n                leftmostIndex = read.getAlignmentStart();\n            if ( read.getAlignmentEnd() > rightmostIndex )\n                rightmostIndex = read.getAlignmentEnd();\n            if ( this.maxReads > 0 && TraversalStatistics.nRecords > this.maxReads ) {\n                logger.warn(String.format(\"Maximum number of reads encountered, terminating traversal \" + TraversalStatistics.nRecords));\n                done = true;\n            }\n        }\n\n        GenomeLoc window = new GenomeLoc(interval.getContig(), leftmostIndex, rightmostIndex);\n        LocusContext locus = new LocusContext(window, reads, offsets);\n        if ( DOWNSAMPLE_BY_COVERAGE )\n            locus.downsampleToCoverage(downsamplingCoverage);\n\n        ReferenceIterator refSite = refIter.seekForward(window);\n        StringBuffer refBases = new StringBuffer(refSite.getBaseAsString());\n        int locusLength = (int)(rightmostIndex - leftmostIndex);\n        for ( int i = 0; i < locusLength; i++ ) {\n            refSite = refSite.next();\n            refBases.append(refSite.getBaseAsChar());\n        }\n        locus.setReferenceContig(refSite.getCurrentContig());\n\n        // Iterate forward to get all reference ordered data covering this interval\n        final RefMetaDataTracker tracker = getReferenceOrderedDataAtLocus(locus.getLocation());\n\n        sum = walkAtinterval( walker, sum, locus, refBases.toString(), tracker );\n\n        //System.out.format(\"Working at %s\\n\", locus.getLocation().toString());\n\n        printProgress(\"intervals\", locus.getLocation());\n\n        return sum;\n    }","commit_id":"7de5da7065db7e3bc90db1b5f2c1bc4f8cffb406","url":"https://github.com/broadgsa/gatk"},{"original_method":"protected <M, T> T walkAtinterval( final LocusWindowWalker<M, T> walker,\n                                       T sum,\n                                       final LocusContext locus,\n                                       final ReferenceIterator refSite,\n                                       final RefMetaDataTracker tracker ) {\n        ReferenceIterator refSiteCopy = refSite;\n        StringBuffer refBases = new StringBuffer(refSiteCopy.getBaseAsString());\n        int locusLength = (int)(locus.getLocation().getStop() - locus.getLocation().getStart());\n        for ( int i = 0; i < locusLength; i++ ) {\n            refSiteCopy = refSiteCopy.next();\n            refBases.append(refSiteCopy.getBaseAsChar());\n        }\n\n        //logger.debug(String.format(\"  Reference: %s:%d %c\", refSite.getCurrentContig().getName(), refSite.getPosition(), refBase));\n\n        //\n        // Execute our contract with the walker.  Call filter, map, and reduce\n        //\n        final boolean keepMeP = walker.filter(tracker, refBases.toString(), locus);\n        if (keepMeP) {\n            M x = walker.map(tracker, refBases.toString(), locus);\n            sum = walker.reduce(x, sum);\n        }\n\n        //printProgress(\"intervals\", interval.getLocation());\n        return sum;\n    }","id":59625,"modified_method":"protected <M, T> T walkAtinterval( final LocusWindowWalker<M, T> walker,\n                                       T sum,\n                                       final LocusContext locus,\n                                       final String refSeq,\n                                       final RefMetaDataTracker tracker ) {\n\n        //logger.debug(String.format(\"  Reference: %s:%d %c\", refSite.getCurrentContig().getName(), refSite.getPosition(), refBase));\n\n        //\n        // Execute our contract with the walker.  Call filter, map, and reduce\n        //\n        final boolean keepMeP = walker.filter(tracker, refSeq, locus);\n        if (keepMeP) {\n            M x = walker.map(tracker, refSeq, locus);\n            sum = walker.reduce(x, sum);\n        }\n\n        //printProgress(\"intervals\", interval.getLocation());\n        return sum;\n    }","commit_id":"7de5da7065db7e3bc90db1b5f2c1bc4f8cffb406","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer reduce(AlleleFrequencyEstimate value, Integer sum) { return 0; }","id":59626,"modified_method":"public String reduce(AlleleFrequencyEstimate alleleFreq, String sum) \n\t{\n        // Print RESULT data for confident calls\n\n       long current_offset = alleleFreq.location.getStart(); //Integer.parseInt(tokens[1]);\n\n        if (inside_confident_ref_interval &&\n                ((alleleFreq.lodVsRef > -5.0) || (current_offset != last_position_considered + 1)) )\n        {\n            // No longer hom-ref, so output a ref line.\n            double lod = confident_ref_interval_LOD_sum / confident_ref_interval_length;\n\n            out.format(\"%s\\tCALLER\\tREFERENCE\\t%d\\t%d\\t%f\\t.\\t.\\tLENGTH %d\\n\",\n                            confident_ref_interval_contig,\n                            confident_ref_interval_start,\n                            last_position_considered,\n                            lod,\n                            (int)(confident_ref_interval_length));\n\n            inside_confident_ref_interval = false;\n        }\n        else if (inside_confident_ref_interval && (alleleFreq.lodVsRef <= -5.0))\n        {\n            // Still hom-ref so increment the counters.\n            confident_ref_interval_LOD_sum += alleleFreq.lodVsRef;\n            confident_ref_interval_length  += 1;\n        }\n        else if ((!inside_confident_ref_interval) && (alleleFreq.lodVsRef > -5.0))\n        {\n            // do nothing.\n        }\n        else if ((!inside_confident_ref_interval) && (alleleFreq.lodVsRef <= -5.0))\n        {\n            // We moved into a hom-ref region so start a new interval.\n            confident_ref_interval_contig  = alleleFreq.location.getContig();\n            confident_ref_interval_start   = alleleFreq.location.getStart();\n            confident_ref_interval_LOD_sum = alleleFreq.lodVsRef;\n            confident_ref_interval_length  = 1;\n            inside_confident_ref_interval  = true;\n        }\n\n        last_position_considered = current_offset;\n        \n        if (alleleFreq.lodVsRef >= 5) {\n            out.print(alleleFreq.asGFFString());\n\n            /*\n            String gtype = genotypeTypeString(alleleFreq.qstar, alleleFreq.N);\n            System.out.print(\"DEBUG \" + gtype + \" \");\n            if (gtype.contentEquals(\"het\")) {\n                System.out.println(alleleFreq.ref + \"\" + alleleFreq.alt);\n            } else if (gtype.contentEquals(\"hom\")) {\n                System.out.println(alleleFreq.ref + \"\" + alleleFreq.ref);\n            } else {\n                System.out.println(alleleFreq.alt + \"\" + alleleFreq.alt);\n            }\n            */\n        }\n\n        return \"\";\n    }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void initialize() { metrics = new AlleleMetrics(metricsFileName, lodThreshold); }","id":59627,"modified_method":"public void initialize() { metrics = new AlleleMetrics(metricsFileName, lodThreshold); sample_name = null; }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"public AlleleFrequencyEstimate map(RefMetaDataTracker tracker, char ref, LocusContext context) {\n        String rodString = getRodString(tracker);\n\n        /*\n        AlleleFrequencyEstimate freq;\n        if (fourBaseMode) {\n            if (retest) {\n                // Compute single quality score genotype likelihoods\n                freq = getOneProbAlleleFrequency(ref, context, rodString);\n\n                if (freq.qhat > 0.1) {\n                    // If we found a putative variant, recompute four-base prob genotype likelihoods\n                    freq = getFourProbAlleleFrequency(ref, context, rodString, tracker);\n                }\n            } else {\n                freq = getFourProbAlleleFrequency(ref, context, rodString, tracker);\n            }\n        } else  {\n            // Compute single quality score genotype likelihoods\n            freq = getOneProbAlleleFrequency(ref, context, rodString);\n        }\n        */\n\n        AlleleFrequencyEstimate freq = getOneProbAlleleFrequency(ref, context, rodString);\n\n        if (printMetrics) {\n            if (freq != null) { metrics.nextPosition(freq, tracker); }\n            metrics.printMetricsAtLocusIntervals(metricsInterval);\n        }\n\n        return freq;\n    }","id":59628,"modified_method":"public AlleleFrequencyEstimate map(RefMetaDataTracker tracker, char ref, LocusContext context) {\n        String rodString = getRodString(tracker);\n\n\t\tif (ref == 'N') { return null; }\n\n        /*\n        AlleleFrequencyEstimate freq;\n        if (fourBaseMode) {\n            if (retest) {\n                // Compute single quality score genotype likelihoods\n                freq = getOneProbAlleleFrequency(ref, context, rodString);\n\n                if (freq.qhat > 0.1) {\n                    // If we found a putative variant, recompute four-base prob genotype likelihoods\n                    freq = getFourProbAlleleFrequency(ref, context, rodString, tracker);\n                }\n            } else {\n                freq = getFourProbAlleleFrequency(ref, context, rodString, tracker);\n            }\n        } else  {\n            // Compute single quality score genotype likelihoods\n            freq = getOneProbAlleleFrequency(ref, context, rodString);\n        }\n        */\n\t\t\n\t\tif (context.getReads().size() != 0)\n\t\t{\n\t\t\tSAMRecord read = context.getReads().get(0);\n\t        String RG = (String)(read.getAttribute(\"RG\"));\n\t\t\tString local_sample_name = read.getHeader().getReadGroup(RG).getSample();\n\t\t\tif (sample_name == null) { sample_name = local_sample_name; }\n\t\t\telse \n\t\t\t{ \n\t\t\t\tif (! sample_name.equals(local_sample_name)) { System.out.printf(\"SAMPLE NAME MIXUP: %s vs. %s\\n\", sample_name, local_sample_name); }\n\t\t\t\tassert(sample_name.equals(local_sample_name)); \n\t\t\t}\n\t\t}\n\n        AlleleFrequencyEstimate freq = getOneProbAlleleFrequency(ref, context, rodString, sample_name);\n\n        if (printMetrics) {\n            if (freq != null) { metrics.nextPosition(freq, tracker); }\n            metrics.printMetricsAtLocusIntervals(metricsInterval);\n        }\n\n        return freq;\n    }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"private AlleleFrequencyEstimate getFourProbAlleleFrequency(char ref, LocusContext context, String rodString, RefMetaDataTracker tracker) {\n        double[][] probs = ReadBackedPileup.probDistPileup(context.getReads(), context.getOffsets());\n        int refBaseIndex = BaseUtils.simpleBaseToBaseIndex(ref);\n        int altBaseIndex = getMostFrequentNonRefBase(getFractionalCounts(probs), refBaseIndex);\n\n        if (refBaseIndex >= 0 && altBaseIndex >= 0) {\n            // Set the priors for the hom-ref, het, and non-hom ref (we don't evaluate the\n            // possibility of a non-ref het).\n            double[] genotypePriors = { 0.999, 1e-3, 1e-5 };\n\n            // I'm not sure what the difference between qhat and qstar is in AlleleMetrics, but\n            // to make my life simpler, I evaluate the non-ref balances in genotypeBalances and\n            // report the balances in reportingBalances.\n            double[] genotypeBalances  = { qHom, qHet, qHomNonRef };\n            double[] reportingBalances = { 0.0, 0.5, 1.0 };\n\n            // Compute the probability of the distribution of second-best bases (should be random)\n            int[] secondaryBaseCounts = getSecondaryBaseCounts(probs);\n            double[] secondaryBaseProbs = new double[4];\n            for (int baseIndex = 0; baseIndex < 4; baseIndex++) {\n                secondaryBaseProbs[baseIndex] = 0.25;\n            }\n            double secondaryBaseDistProb = MathUtils.multinomialProbability(secondaryBaseCounts, secondaryBaseProbs);\n\n            //System.out.printf(\"%d %d %d %d \", secondaryBaseCounts[0], secondaryBaseCounts[1], secondaryBaseCounts[2], secondaryBaseCounts[3]);\n            //System.out.println(secondaryBaseDistProb);\n\n            // Determine the probability distribution of non-ref alleles\n            double[] obsWeights = getObservationWeights(probs, refBaseIndex, altBaseIndex);\n\n            // Convolve them with the binomial sampling probability distribution in order to\n            // marginalize the non-ref allele balance.\n            double[] posteriors = new double[3];\n            double qhat = 0.0, qstar = 0.0, lodVsRef = 0.0, pBest = Double.MIN_VALUE;\n            for (int hypothesis = 0; hypothesis < 3; hypothesis++) {\n                posteriors[hypothesis] = 0.0;\n\n                for (int weightIndex = 0; weightIndex < obsWeights.length; weightIndex++) {\n                    double binomialWeight = MathUtils.binomialProbability(weightIndex, probs.length, genotypeBalances[hypothesis]);\n\n                    // The hom-ref posterior probability distribution may be too weak to\n                    // effectively account for noise.  Just set it to equal weighting for\n                    // the lower quantile of the non-ref balance range.\n                    //if (hypothesis == 0 && weightIndex < obsWeights.length/4) {\n                    //    binomialWeight = 1.0;\n                    //}\n\n                    posteriors[hypothesis] += obsWeights[weightIndex]*binomialWeight;\n                }\n\n                posteriors[hypothesis] *= genotypePriors[hypothesis];\n\n                double refLikelihood = Double.isInfinite(Math.log10(posteriors[0])) ? -10000.0 : Math.log10(posteriors[0]);\n\n                if (posteriors[hypothesis] > pBest) {\n                    qhat = reportingBalances[hypothesis];\n                    qstar = reportingBalances[hypothesis];\n                    lodVsRef = Math.log10(posteriors[hypothesis]) - refLikelihood;\n                    pBest = posteriors[hypothesis];\n                }\n            }\n\n            double pRef = posteriors[0];\n\n            double[] sposteriors = Arrays.copyOf(posteriors, posteriors.length);\n            Arrays.sort(sposteriors);\n            double bestLogPosterior = (Double.isInfinite(Math.log10(sposteriors[2]))) ? -10000.0 : Math.log10(sposteriors[2]);\n            double nextBestLogPosterior = (Double.isInfinite(Math.log10(sposteriors[1]))) ? -10000.0 : Math.log10(sposteriors[1]);\n            double lodVsNextBest = bestLogPosterior - nextBestLogPosterior;\n\n            AlleleFrequencyEstimate freq = new AlleleFrequencyEstimate(context.getLocation(),\n                                                                       ref,\n                                                                       BaseUtils.baseIndexToSimpleBase(altBaseIndex),\n                                                                       2,\n                                                                       qhat,\n                                                                       qstar,\n                                                                       (MathUtils.compareDoubles(qhat, reportingBalances[0]) == 0 ? lodVsNextBest : lodVsRef),\n                                                                       lodVsNextBest,\n                                                                       pBest,\n                                                                       pRef,\n                                                                       probs.length,\n                                                                       ReadBackedPileup.basePileupAsString(context.getReads(), context.getOffsets()),\n                                                                       probs,\n                                                                       posteriors);\n\n            return freq;\n        }\n\n        return null;\n    }","id":59629,"modified_method":"private AlleleFrequencyEstimate getFourProbAlleleFrequency(char ref, LocusContext context, String rodString, RefMetaDataTracker tracker) {\n        double[][] probs = ReadBackedPileup.probDistPileup(context.getReads(), context.getOffsets());\n        int refBaseIndex = BaseUtils.simpleBaseToBaseIndex(ref);\n        int altBaseIndex = getMostFrequentNonRefBase(getFractionalCounts(probs), refBaseIndex);\n\n        if (refBaseIndex >= 0 && altBaseIndex >= 0) {\n            // Set the priors for the hom-ref, het, and non-hom ref (we don't evaluate the\n            // possibility of a non-ref het).\n            double[] genotypePriors = { 0.999, 1e-3, 1e-5 };\n\n            // I'm not sure what the difference between qhat and qstar is in AlleleMetrics, but\n            // to make my life simpler, I evaluate the non-ref balances in genotypeBalances and\n            // report the balances in reportingBalances.\n            double[] genotypeBalances  = { qHom, qHet, qHomNonRef };\n            double[] reportingBalances = { 0.0, 0.5, 1.0 };\n\n            // Compute the probability of the distribution of second-best bases (should be random)\n            int[] secondaryBaseCounts = getSecondaryBaseCounts(probs);\n            double[] secondaryBaseProbs = new double[4];\n            for (int baseIndex = 0; baseIndex < 4; baseIndex++) {\n                secondaryBaseProbs[baseIndex] = 0.25;\n            }\n            double secondaryBaseDistProb = MathUtils.multinomialProbability(secondaryBaseCounts, secondaryBaseProbs);\n\n            //System.out.printf(\"%d %d %d %d \", secondaryBaseCounts[0], secondaryBaseCounts[1], secondaryBaseCounts[2], secondaryBaseCounts[3]);\n            //System.out.println(secondaryBaseDistProb);\n\n            // Determine the probability distribution of non-ref alleles\n            double[] obsWeights = getObservationWeights(probs, refBaseIndex, altBaseIndex);\n\n            // Convolve them with the binomial sampling probability distribution in order to\n            // marginalize the non-ref allele balance.\n            double[] posteriors = new double[3];\n            double qhat = 0.0, qstar = 0.0, lodVsRef = 0.0, pBest = Double.MIN_VALUE;\n            for (int hypothesis = 0; hypothesis < 3; hypothesis++) {\n                posteriors[hypothesis] = 0.0;\n\n                for (int weightIndex = 0; weightIndex < obsWeights.length; weightIndex++) {\n                    double binomialWeight = MathUtils.binomialProbability(weightIndex, probs.length, genotypeBalances[hypothesis]);\n\n                    // The hom-ref posterior probability distribution may be too weak to\n                    // effectively account for noise.  Just set it to equal weighting for\n                    // the lower quantile of the non-ref balance range.\n                    //if (hypothesis == 0 && weightIndex < obsWeights.length/4) {\n                    //    binomialWeight = 1.0;\n                    //}\n\n                    posteriors[hypothesis] += obsWeights[weightIndex]*binomialWeight;\n                }\n\n                posteriors[hypothesis] *= genotypePriors[hypothesis];\n\n                double refLikelihood = Double.isInfinite(Math.log10(posteriors[0])) ? -10000.0 : Math.log10(posteriors[0]);\n\n                if (posteriors[hypothesis] > pBest) {\n                    qhat = reportingBalances[hypothesis];\n                    qstar = reportingBalances[hypothesis];\n                    lodVsRef = Math.log10(posteriors[hypothesis]) - refLikelihood;\n                    pBest = posteriors[hypothesis];\n                }\n            }\n\n            double pRef = posteriors[0];\n\n            double[] sposteriors = Arrays.copyOf(posteriors, posteriors.length);\n            Arrays.sort(sposteriors);\n            double bestLogPosterior = (Double.isInfinite(Math.log10(sposteriors[2]))) ? -10000.0 : Math.log10(sposteriors[2]);\n            double nextBestLogPosterior = (Double.isInfinite(Math.log10(sposteriors[1]))) ? -10000.0 : Math.log10(sposteriors[1]);\n            double lodVsNextBest = bestLogPosterior - nextBestLogPosterior;\n\n            AlleleFrequencyEstimate freq = new AlleleFrequencyEstimate(context.getLocation(),\n                                                                       ref,\n                                                                       BaseUtils.baseIndexToSimpleBase(altBaseIndex),\n                                                                       2,\n                                                                       qhat,\n                                                                       qstar,\n                                                                       (MathUtils.compareDoubles(qhat, reportingBalances[0]) == 0 ? lodVsNextBest : lodVsRef),\n                                                                       lodVsNextBest,\n                                                                       pBest,\n                                                                       pRef,\n                                                                       probs.length,\n                                                                       ReadBackedPileup.basePileupAsString(context.getReads(), context.getOffsets()),\n                                                                       probs,\n                                                                       posteriors,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \"unknown_sample\");\n\n            return freq;\n        }\n\n        return null;\n    }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"private AlleleFrequencyEstimate getOneProbAlleleFrequency(char ref, LocusContext context, String rodString) {\n        ReadBackedPileup pileup = new ReadBackedPileup(ref, context);\n        String bases = pileup.getBases();\n\n        List<SAMRecord> reads = context.getReads();\n        List<Integer> offsets = context.getOffsets();\n        ref = Character.toUpperCase(ref);\n        \n        GenotypeLikelihoods G = new GenotypeLikelihoods();\n        for ( int i = 0; i < reads.size(); i++ )  \n        {\n            SAMRecord read = reads.get(i);\n            int offset = offsets.get(i);\n\n            G.add(ref, read.getReadString().charAt(offset), read.getBaseQualities()[offset]);\n        }\n        G.ApplyPrior(ref, this.allele_frequency_prior);\n\n        if (fourBaseMode) {\n            G.applyFourBaseDistributionPrior(pileup.getBases(), pileup.getSecondaryBasePileup());\n        }\n\n        return G.toAlleleFrequencyEstimate(context.getLocation(), ref, bases.length(), bases, G.likelihoods);\n    }","id":59630,"modified_method":"private AlleleFrequencyEstimate getOneProbAlleleFrequency(char ref, LocusContext context, String rodString, String sample_name) {\n        ReadBackedPileup pileup = new ReadBackedPileup(ref, context);\n        String bases = pileup.getBases();\n\n        List<SAMRecord> reads = context.getReads();\n        List<Integer> offsets = context.getOffsets();\n        ref = Character.toUpperCase(ref);\n\n\t\t// Handle indels.\n\t\tif (call_indels)\n\t\t{\n\t\t\tString[] indels = BasicPileup.indelPileup(reads, offsets);\n\t\t\tIndelCall indel_call = GenotypeLikelihoods.callIndel(indels);\n\t\t\tif (indel_call != null)\n\t\t\t{\n\t\t\t\tif (! indel_call.type.equals(\"ref\"))\n\t\t\t\t{ \n\t\t\t\t\tSystem.out.printf(\"INDEL %s %s\\n\", context.getLocation(), indel_call); \n\t\t\t\t}\n\t\t\t}\n\t\t}\n        \n\t\t// Handle single-base polymorphisms.\n        GenotypeLikelihoods G = new GenotypeLikelihoods();\n        for ( int i = 0; i < reads.size(); i++ )  \n        {\n            SAMRecord read = reads.get(i);\n            int offset = offsets.get(i);\n\n            G.add(ref, read.getReadString().charAt(offset), read.getBaseQualities()[offset]);\n        }\n        G.ApplyPrior(ref, this.allele_frequency_prior);\n\n        if (fourBaseMode) {\n            G.applyFourBaseDistributionPrior(pileup.getBases(), pileup.getSecondaryBasePileup());\n        }\n\n        return G.toAlleleFrequencyEstimate(context.getLocation(), ref, bases.length(), bases, G.likelihoods, sample_name);\n    }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer reduceInit() { return 0; }","id":59631,"modified_method":"public String reduceInit() \n\t{ \n        confident_ref_interval_contig  = \"\";\n        confident_ref_interval_start   = 0;\n        confident_ref_interval_LOD_sum = 0;\n        confident_ref_interval_length  = 0;\n        last_position_considered       = -1;\n        inside_confident_ref_interval  = false;\n        return \"\";\n    }","commit_id":"313a6d0fb5261ff2968b52ed0d1966bae9a30355","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void initialize() \n    { \n        GenomeAnalysisTK toolkit = this.getToolkit();\n        SAMFileHeader header = toolkit.getSamReader().getFileHeader();\n        List<SAMReadGroupRecord> read_groups = header.getReadGroups();\n\n        sample_names    = new ArrayList<String>();\n        deep_callers    = new ArrayList<AlleleFrequencyWalker>();\n        shallow_callers = new ArrayList<AlleleFrequencyWalker>();\n\n        random = new Random(666);\n\n        for (int i = 0; i < read_groups.size(); i++)\n        {\n            String sample_name = read_groups.get(i).getSample();\n            //System.out.println(\"SAMPLE: \" + sample_name);\n\n            AlleleFrequencyWalker deep    = new AlleleFrequencyWalker();\n            AlleleFrequencyWalker shallow = new AlleleFrequencyWalker();\n\n            deep.N = 2;\n            deep.DOWNSAMPLE = 0;\n            deep.GFF_OUTPUT_FILE = \"/dev/null\";\n            deep.initalize();\n\n            shallow.N = 2;\n            shallow.DOWNSAMPLE = 0;\n            shallow.GFF_OUTPUT_FILE = \"/dev/null\";\n            shallow.initalize();\n\n            sample_names.add(sample_name);\n            deep_callers.add(deep);\n            shallow_callers.add(shallow);\n        } \n\n        pooled_caller = new AlleleFrequencyWalker();\n        pooled_caller.N = sample_names.size() * 2;\n        pooled_caller.DOWNSAMPLE = 0;\n        pooled_caller.GFF_OUTPUT_FILE = \"/dev/null\";\n        pooled_caller.initalize();\n        pooled_caller.reduceInit();\n    }","id":59632,"modified_method":"public void initialize() \n    { \n        GenomeAnalysisTK toolkit = this.getToolkit();\n        SAMFileHeader header = toolkit.getSamReader().getFileHeader();\n        List<SAMReadGroupRecord> read_groups = header.getReadGroups();\n\n        sample_names    = new ArrayList<String>();\n        deep_callers    = new ArrayList<AlleleFrequencyWalker>();\n        shallow_callers = new ArrayList<AlleleFrequencyWalker>();\n\n        random = new Random(42);\n\n        for (int i = 0; i < read_groups.size(); i++)\n        {\n            String sample_name = read_groups.get(i).getSample();\n            //System.out.println(\"SAMPLE: \" + sample_name);\n\n            AlleleFrequencyWalker deep    = new AlleleFrequencyWalker();\n            AlleleFrequencyWalker shallow = new AlleleFrequencyWalker();\n\n            deep.N = 2;\n            deep.DOWNSAMPLE = 0;\n            deep.GFF_OUTPUT_FILE = \"/dev/null\";\n            deep.initalize();\n\n            shallow.N = 2;\n            shallow.DOWNSAMPLE = 0;\n            shallow.GFF_OUTPUT_FILE = \"/dev/null\";\n            shallow.initalize();\n\n            sample_names.add(sample_name);\n            deep_callers.add(deep);\n            shallow_callers.add(shallow);\n        } \n\n        pooled_caller = new AlleleFrequencyWalker();\n        pooled_caller.N = sample_names.size() * 2;\n        pooled_caller.DOWNSAMPLE = 0;\n        pooled_caller.GFF_OUTPUT_FILE = \"/dev/null\";\n        pooled_caller.initalize();\n        pooled_caller.reduceInit();\n    }","commit_id":"11c520b283c11d26c3fc913ed901add74f267630","url":"https://github.com/broadgsa/gatk"},{"original_method":"public Integer map(RefMetaDataTracker tracker, char ref, LocusContext context) {\n        //System.out.printf(\"Reads %s:%d %d%n\", context.getContig(), context.getPosition(), context.getReads().size());\n        //for ( SAMRecord read : context.getReads() ) {\n        //    System.out.println(\"  -> \" + read.getReadName());\n        //}\n\n        List<SAMRecord> reads = context.getReads();\n        List<Integer> offsets = context.getOffsets();\n        String bases = \"\";\n        String quals = \"\";\n        //String offsetString = \"\";\n\n        // Look up hapmap and dbsnp priors\n        String rodString = \"\";\n        for ( ReferenceOrderedDatum datum : tracker.getAllRods() ) \n        {\n            if ( datum != null ) \n            {\n                if ( datum instanceof rodDbSNP)\n                {\n                    rodDbSNP dbsnp = (rodDbSNP)datum;\n                    rodString += dbsnp.toMediumString();\n                }\n                else \n                {\n                    rodString += datum.toSimpleString();\n                }\n            }\n        }\n        if ( rodString != \"\" )\n            rodString = \"[ROD: \" + rodString + \"]\";\n\n        // Accumulate genotype likelihoods\n        GenotypeLikelihoods G = new GenotypeLikelihoods(); \n        for ( int i = 0; i < reads.size(); i++ ) \n        {\n            SAMRecord read = reads.get(i);\n            int offset = offsets.get(i);\n            bases += read.getReadString().charAt(offset);\n            quals += read.getBaseQualityString().charAt(offset);\n\n            G.add(ref, read.getReadString().charAt(offset), read.getBaseQualities()[offset]);\n        }\n\n        if ( context.getLocation().getStart() % 1 == 0 ) {\n            //System.out.printf(\"%s: %s %s %s %s%n\", context.getLocation(), ref, bases, quals, rodString);\n            out.printf(\"%s %s %s %s\\n\", ref, bases, G.toString(), rodString);\n        }\n\n        return 1;\n    }","id":59633,"modified_method":"public String toString(char ref)\n        {\n            this.sort();\n            String s = String.format(\"%s %f %f \", this.BestGenotype(), this.LodVsNextBest(), this.LodVsRef(ref));\n            for (int i = 0; i < sorted_genotypes.length; i++)\n            {\n                if (i != 0) { s = s + \" \"; }\n                s = s + sorted_genotypes[i] + \":\" + String.format(\"%.2f\", sorted_likelihoods[i]);\n            }\n            return s;\n        }","commit_id":"11c520b283c11d26c3fc913ed901add74f267630","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tgetMyApplication().applyTheme(this);\n\t\tsuper.onCreate(savedInstanceState);\n\t\tif (getIntent() != null) {\n\t\t\tIntent intent = getIntent();\n\t\t\tif (intent.getExtras() != null && intent.getExtras().containsKey(APP_EXIT_KEY)) {\n\t\t\t\tgetMyApplication().closeApplication(this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (Version.isSherpafy(getMyApplication())) {\n\t\t\tfinal Intent mapIntent = new Intent(this, TourViewActivity.class);\n\t\t\tstartActivity(mapIntent);\n\t\t\tfinish();\n\t\t\treturn;\n\t\t}\n\t\tsetContentView(R.layout.dashboard);\n\n\t\tString textVersion = Version.getFullVersion(getMyApplication());\n\t\tif (textVersion.contains(\"#\")) {\n\t\t\ttextVersion = textVersion.substring(0, textVersion.indexOf(\"#\") + 1);\n\t\t}\n\t\tActionBar actionBar = getSupportActionBar();\n\t\tactionBar.setTitle(textVersion);\n\t\tactionBar.setIcon(android.R.color.transparent);\n\t\tactionBarBackground = new ColorDrawable(Color.argb(180, 0, 0, 0));\n\t\tactionBarBackground.setAlpha(START_ALPHA);\n\t\tactionBar.setBackgroundDrawable(actionBarBackground);\n\t\t((NotifyingScrollView)findViewById(R.id.main_scroll)).setOnScrollChangedListener(onScrollChangedListener);\n\t\t//setting up callback for drawable on actionbar for old android\n\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\t\t\tactionBarBackground.setCallback(mDrawableCallback);\n\t\t}\n\n\t\tboolean firstTime = initApp(this, getMyApplication());\n\t\tif (getMyApplication().getAppCustomization().checkExceptionsOnStart()) {\n\t\t\tcheckPreviousRunsForExceptions(firstTime);\n\t\t}\n\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\t\t\tfabButton = new FloatingActionButton.Builder(this)\n\t\t\t\t\t.withDrawable(getResources().getDrawable(R.drawable.ic_action_map))\n\t\t\t\t\t.withButtonColor(Color.parseColor(\"#ff8f00\"))\n\t\t\t\t\t.withGravity(Gravity.BOTTOM | Gravity.RIGHT)\n\t\t\t\t\t.withMargins(0, 0, 16, 16)\n\t\t\t\t\t.create();\n\t\t\tfabButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tstartMapActivity();\n\t\t\t\t}\n\t\t\t});\n\t\t\tfabButton.hideFloatingActionButton();\n\t\t}\n\n\t\tgetLocationProvider().addCompassListener(this);\n\t\tgetLocationProvider().registerOrUnregisterCompassListener(true);\n\n\t\tdefaultMargin = (int) TypedValue.applyDimension(\n\t\t\t\tTypedValue.COMPLEX_UNIT_DIP,\n\t\t\t\t-40,\n\t\t\t\tgetResources().getDisplayMetrics());\n\t}","id":59634,"modified_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tgetMyApplication().applyTheme(this);\n\t\tsuper.onCreate(savedInstanceState);\n\t\thaveHomeButton = false;\n\t\tif (getIntent() != null) {\n\t\t\tIntent intent = getIntent();\n\t\t\tif (intent.getExtras() != null && intent.getExtras().containsKey(APP_EXIT_KEY)) {\n\t\t\t\tgetMyApplication().closeApplication(this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (Version.isSherpafy(getMyApplication())) {\n\t\t\tfinal Intent mapIntent = new Intent(this, TourViewActivity.class);\n\t\t\tstartActivity(mapIntent);\n\t\t\tfinish();\n\t\t\treturn;\n\t\t}\n\t\tsetContentView(R.layout.dashboard);\n\n\t\tString textVersion = Version.getFullVersion(getMyApplication());\n\t\tif (textVersion.contains(\"#\")) {\n\t\t\ttextVersion = textVersion.substring(0, textVersion.indexOf(\"#\") + 1);\n\t\t}\n\t\tActionBar actionBar = getSupportActionBar();\n\t\tactionBar.setTitle(textVersion);\n\t\tactionBar.setIcon(android.R.color.transparent);\n\t\tactionBarBackground = new ColorDrawable(Color.argb(180, 0, 0, 0));\n\t\tactionBarBackground.setAlpha(START_ALPHA);\n\t\tactionBar.setBackgroundDrawable(actionBarBackground);\n\t\t((NotifyingScrollView)findViewById(R.id.main_scroll)).setOnScrollChangedListener(onScrollChangedListener);\n\t\t//setting up callback for drawable on actionbar for old android\n\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\t\t\tactionBarBackground.setCallback(mDrawableCallback);\n\t\t}\n\n\t\tboolean firstTime = initApp(this, getMyApplication());\n\t\tif (getMyApplication().getAppCustomization().checkExceptionsOnStart()) {\n\t\t\tcheckPreviousRunsForExceptions(firstTime);\n\t\t}\n\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\t\t\tfabButton = new FloatingActionButton.Builder(this)\n\t\t\t\t\t.withDrawable(getResources().getDrawable(R.drawable.ic_action_map))\n\t\t\t\t\t.withButtonColor(Color.parseColor(\"#ff8f00\"))\n\t\t\t\t\t.withGravity(Gravity.BOTTOM | Gravity.RIGHT)\n\t\t\t\t\t.withMargins(0, 0, 16, 16)\n\t\t\t\t\t.create();\n\t\t\tfabButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tstartMapActivity();\n\t\t\t\t}\n\t\t\t});\n\t\t\tfabButton.hideFloatingActionButton();\n\t\t}\n\n\t\tgetLocationProvider().addCompassListener(this);\n\t\tgetLocationProvider().registerOrUnregisterCompassListener(true);\n\n\t\tdefaultMargin = (int) TypedValue.applyDimension(\n\t\t\t\tTypedValue.COMPLEX_UNIT_DIP,\n\t\t\t\t-40,\n\t\t\t\tgetResources().getDisplayMetrics());\n\t}","commit_id":"1aee28df26de15dd2c4c756b626ce2ac1bf08f02","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n    public void setContentView(int layoutResID) {\n        super.setContentView(layoutResID);\n        setupHomeButton();\n    }","id":59635,"modified_method":"@Override\n    public void setContentView(int layoutResID) {\n        super.setContentView(layoutResID);\n\t\tif (haveHomeButton) {\n\t\t\tsetupHomeButton();\n\t\t}\n    }","commit_id":"1aee28df26de15dd2c4c756b626ce2ac1bf08f02","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        super.setContentView(view, params);\n        setupHomeButton();\n    }","id":59636,"modified_method":"@Override\n    public void setContentView(View view, ViewGroup.LayoutParams params) {\n        super.setContentView(view, params);\n\t\tif (haveHomeButton) {\n\t\t\tsetupHomeButton();\n\t\t}\n    }","commit_id":"1aee28df26de15dd2c4c756b626ce2ac1bf08f02","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n    public void setContentView(View view) {\n        super.setContentView(view);\n        setupHomeButton();\n    }","id":59637,"modified_method":"@Override\n    public void setContentView(View view) {\n        super.setContentView(view);\n\t\tif (haveHomeButton) {\n\t\t\tsetupHomeButton();\n\t\t}\n    }","commit_id":"1aee28df26de15dd2c4c756b626ce2ac1bf08f02","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected RichTextArea getTextArea()\n    {\n        return textArea;\n    }","id":59638,"modified_method":"/**\n     * @return {@link #textArea}\n     */\n    protected RichTextArea getTextArea()\n    {\n        return textArea;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected Config getConfig()\n    {\n        return config;\n    }","id":59639,"modified_method":"/**\n     * @return {@link #config}\n     */\n    protected Config getConfig()\n    {\n        return config;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected List<UIExtension> getUIExtensionList()\n    {\n        return uiExtensions;\n    }","id":59640,"modified_method":"/**\n     * @return {@link #uiExtensions}\n     */\n    protected List<UIExtension> getUIExtensionList()\n    {\n        return uiExtensions;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected Wysiwyg getWysiwyg()\n    {\n        return wysiwyg;\n    }","id":59641,"modified_method":"/**\n     * @return {@link #wysiwyg}\n     */\n    protected Wysiwyg getWysiwyg()\n    {\n        return wysiwyg;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#cloneContents()\n     */\n    public DocumentFragment cloneContents()\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","id":59642,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#cloneContents()\n     */\n    public DocumentFragment cloneContents()\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#deleteContents()\n     */\n    public void deleteContents()\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).setHTML(\"\");\n        } else {\n            ControlRange range = (ControlRange) getJSRange();\n            for (int i = 0; i < range.getLength(); i++) {\n                Element element = range.get(i);\n                if (element.getParentNode() != null) {\n                    element.getParentNode().removeChild(element);\n                }\n            }\n        }\n    }","id":59643,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#deleteContents()\n     */\n    public void deleteContents()\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).setHTML(\"\");\n        } else {\n            ControlRange range = (ControlRange) getJSRange();\n            for (int i = 0; i < range.getLength(); i++) {\n                Element element = range.get(i);\n                if (element.getParentNode() != null) {\n                    element.getParentNode().removeChild(element);\n                }\n            }\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#insertNode(Node)\n     */\n    public void insertNode(Node newNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","id":59644,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#insertNode(Node)\n     */\n    public void insertNode(Node newNode)\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStartBefore(Node)\n     */\n    public void setStartBefore(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_START, refNode);\n        } else {\n            collapse(false);\n            setStartBefore(refNode);\n        }\n    }","id":59645,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStartBefore(Node)\n     */\n    public void setStartBefore(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_START, refNode);\n        } else {\n            collapse(false);\n            setStartBefore(refNode);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#cloneRange()\n     */\n    public Range cloneRange()\n    {\n        NativeRange clone;\n        if (getJSRange() instanceof TextRange) {\n            clone = ((TextRange) getJSRange()).duplicate();\n        } else {\n            ControlRange controlRange = (ControlRange) getJSRange();\n            ControlRange controlRangeClone = ControlRange.newInstance(controlRange.getOwnerDocument());\n            for (int i = 0; i < controlRange.getLength(); i++) {\n                controlRangeClone.add(controlRange.get(i));\n            }\n            clone = controlRangeClone;\n        }\n        return IERangeFactory.createRange(clone);\n    }","id":59646,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#cloneRange()\n     */\n    public Range cloneRange()\n    {\n        NativeRange clone;\n        if (getJSRange().isTextRange()) {\n            clone = ((TextRange) getJSRange()).duplicate();\n        } else {\n            ControlRange controlRange = (ControlRange) getJSRange();\n            ControlRange controlRangeClone = ControlRange.newInstance(controlRange.getOwnerDocument());\n            for (int i = 0; i < controlRange.getLength(); i++) {\n                controlRangeClone.add(controlRange.get(i));\n            }\n            clone = controlRangeClone;\n        }\n        return IERangeFactory.createRange(clone);\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractRange#compareBoundaryPoints(RangeCompare, com.google.gwt.core.client.JavaScriptObject)\n     */\n    protected short compareBoundaryPoints(RangeCompare how, NativeRange sourceRange)\n    {\n        if (getJSRange() instanceof TextRange) {\n            TextRange textRange = (TextRange) getJSRange();\n            if (sourceRange instanceof TextRange) {\n                return textRange.compareEndPoints(how, (TextRange) sourceRange);\n            } else {\n                // TODO\n                throw new UnsupportedOperationException();\n            }\n        } else {\n            if (sourceRange instanceof TextRange) {\n                // TODO\n                throw new UnsupportedOperationException();\n            } else {\n                // TODO\n                throw new UnsupportedOperationException();\n            }\n        }\n    }","id":59647,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractRange#compareBoundaryPoints(RangeCompare, com.google.gwt.core.client.JavaScriptObject)\n     */\n    protected short compareBoundaryPoints(RangeCompare how, NativeRange sourceRange)\n    {\n        if (getJSRange().isTextRange()) {\n            TextRange textRange = (TextRange) getJSRange();\n            if (sourceRange.isTextRange()) {\n                return textRange.compareEndPoints(how, (TextRange) sourceRange);\n            } else {\n                // TODO\n                throw new UnsupportedOperationException();\n            }\n        } else {\n            if (sourceRange.isTextRange()) {\n                // TODO\n                throw new UnsupportedOperationException();\n            } else {\n                // TODO\n                throw new UnsupportedOperationException();\n            }\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#toHTML()\n     */\n    public String toHTML()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return ((TextRange) getJSRange()).getHTML();\n        } else {\n            return ((ControlRange) getJSRange()).get(0).getString();\n        }\n    }","id":59648,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#toHTML()\n     */\n    public String toHTML()\n    {\n        if (getJSRange().isTextRange()) {\n            return ((TextRange) getJSRange()).getHTML();\n        } else {\n            return ((ControlRange) getJSRange()).get(0).getString();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#detach()\n     */\n    public void detach()\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","id":59649,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#detach()\n     */\n    public void detach()\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#selectNode(Node)\n     */\n    public void selectNode(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","id":59650,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#selectNode(Node)\n     */\n    public void selectNode(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#surroundContents(Node)\n     */\n    public void surroundContents(Node newParent)\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            setJSRange(TextRange.newInstance((ControlRange) getJSRange()));\n            surroundContents(newParent);\n        }\n    }","id":59651,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#surroundContents(Node)\n     */\n    public void surroundContents(Node newParent)\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            setJSRange(TextRange.newInstance((ControlRange) getJSRange()));\n            surroundContents(newParent);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#isCollapsed()\n     */\n    public boolean isCollapsed()\n    {\n        if (getJSRange() instanceof TextRange) {\n            TextRange textRange = (TextRange) getJSRange();\n            return textRange.getText().length() == 0 && textRange.getHTML().length() == 0;\n        } else {\n            return false;\n        }\n    }","id":59652,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#isCollapsed()\n     */\n    public boolean isCollapsed()\n    {\n        if (getJSRange().isTextRange()) {\n            TextRange textRange = (TextRange) getJSRange();\n            return textRange.getText().length() == 0 && textRange.getHTML().length() == 0;\n        } else {\n            return false;\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getEndOffset()\n     */\n    public int getEndOffset()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return getEndPointOffset(false);\n        } else {\n            // ControlRange\n            return 1 + getStartOffset();\n        }\n    }","id":59653,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getEndOffset()\n     */\n    public int getEndOffset()\n    {\n        if (getJSRange().isTextRange()) {\n            return getEndPointOffset(false);\n        } else {\n            // ControlRange\n            return 1 + getStartOffset();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getEndContainer()\n     */\n    public Node getEndContainer()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return getEndPointContainer(false);\n        } else {\n            // ControlRange\n            return getCommonAncestorContainer();\n        }\n    }","id":59654,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getEndContainer()\n     */\n    public Node getEndContainer()\n    {\n        if (getJSRange().isTextRange()) {\n            return getEndPointContainer(false);\n        } else {\n            // ControlRange\n            return getCommonAncestorContainer();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#toString()\n     */\n    public String toString()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return ((TextRange) getJSRange()).getText();\n        } else {\n            // ControlRange\n            return \"\";\n        }\n    }","id":59655,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#toString()\n     */\n    public String toString()\n    {\n        if (getJSRange().isTextRange()) {\n            return ((TextRange) getJSRange()).getText();\n        } else {\n            // ControlRange\n            return \"\";\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStartAfter(Node)\n     */\n    public void setStartAfter(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.END_TO_START, refNode);\n        } else {\n            collapse(false);\n            setStartAfter(refNode);\n        }\n    }","id":59656,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStartAfter(Node)\n     */\n    public void setStartAfter(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.END_TO_START, refNode);\n        } else {\n            collapse(false);\n            setStartAfter(refNode);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#extractContents()\n     */\n    public DocumentFragment extractContents()\n    {\n        if (getJSRange() instanceof TextRange) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","id":59657,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#extractContents()\n     */\n    public DocumentFragment extractContents()\n    {\n        if (getJSRange().isTextRange()) {\n            // TODO\n            throw new UnsupportedOperationException();\n        } else {\n            // TODO\n            throw new UnsupportedOperationException();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEnd(Node, int)\n     */\n    public void setEnd(Node refNode, int offset)\n    {\n        if (getJSRange() instanceof TextRange) {\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                if (offset < refNode.getChildNodes().getLength()) {\n                    setEndBefore(refNode.getChildNodes().getItem(offset));\n                } else {\n                    setEndAfter(refNode.getLastChild());\n                }\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_END, refNode, offset);\n            }\n        } else {\n            collapse(true);\n            setEnd(refNode, offset);\n        }\n    }","id":59658,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEnd(Node, int)\n     */\n    public void setEnd(Node refNode, int offset)\n    {\n        if (getJSRange().isTextRange()) {\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                if (offset < refNode.getChildNodes().getLength()) {\n                    setEndBefore(refNode.getChildNodes().getItem(offset));\n                } else {\n                    setEndAfter(refNode.getLastChild());\n                }\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_END, refNode, offset);\n            }\n        } else {\n            collapse(true);\n            setEnd(refNode, offset);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getCommonAncestorContainer()\n     */\n    public Node getCommonAncestorContainer()\n    {\n        if (getJSRange() instanceof TextRange) {\n            Node startContainer = getStartContainer();\n            // If the range is within a text node then the common ancestor container is that text node.\n            if (startContainer.getNodeType() == Node.TEXT_NODE\n                && (isCollapsed() || startContainer == getEndContainer())) {\n                return startContainer;\n            } else {\n                return ((TextRange) getJSRange()).getParentElement();\n            }\n        } else {\n            return ((ControlRange) getJSRange()).get(0).getParentNode();\n        }\n    }","id":59659,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getCommonAncestorContainer()\n     */\n    public Node getCommonAncestorContainer()\n    {\n        if (getJSRange().isTextRange()) {\n            Node startContainer = getStartContainer();\n            // If the range is within a text node then the common ancestor container is that text node.\n            if (startContainer.getNodeType() == Node.TEXT_NODE\n                && (isCollapsed() || startContainer == getEndContainer())) {\n                return startContainer;\n            } else {\n                return ((TextRange) getJSRange()).getParentElement();\n            }\n        } else {\n            return ((ControlRange) getJSRange()).get(0).getParentNode();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#selectNodeContents(Node)\n     */\n    public void selectNodeContents(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            TextRange textRange = (TextRange) getJSRange();\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                textRange.moveToElementText(Element.as(refNode));\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                textRange.moveToTextNode(Text.as(refNode));\n            }\n        } else {\n            // ControlRange\n            collapse(true);\n            selectNodeContents(refNode);\n        }\n    }","id":59660,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#selectNodeContents(Node)\n     */\n    public void selectNodeContents(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            TextRange textRange = (TextRange) getJSRange();\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                textRange.moveToElementText(Element.as(refNode));\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                textRange.moveToTextNode(Text.as(refNode));\n            }\n        } else {\n            // ControlRange\n            collapse(true);\n            selectNodeContents(refNode);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEndBefore(Node)\n     */\n    public void setEndBefore(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_END, refNode);\n        } else {\n            collapse(true);\n            setEndBefore(refNode);\n        }\n    }","id":59661,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEndBefore(Node)\n     */\n    public void setEndBefore(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_END, refNode);\n        } else {\n            collapse(true);\n            setEndBefore(refNode);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStart(Node, int)\n     */\n    public void setStart(Node refNode, int offset)\n    {\n        if (getJSRange() instanceof TextRange) {\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                if (offset < refNode.getChildNodes().getLength()) {\n                    setStartBefore(refNode.getChildNodes().getItem(offset));\n                } else {\n                    setStartAfter(refNode.getLastChild());\n                }\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_START, refNode, offset);\n            }\n        } else {\n            collapse(false);\n            setStart(refNode, offset);\n        }\n    }","id":59662,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setStart(Node, int)\n     */\n    public void setStart(Node refNode, int offset)\n    {\n        if (getJSRange().isTextRange()) {\n            if (refNode.getNodeType() == Node.ELEMENT_NODE) {\n                if (offset < refNode.getChildNodes().getLength()) {\n                    setStartBefore(refNode.getChildNodes().getItem(offset));\n                } else {\n                    setStartAfter(refNode.getLastChild());\n                }\n            } else if (refNode.getNodeType() == Node.TEXT_NODE) {\n                ((TextRange) getJSRange()).setEndPoint(RangeCompare.START_TO_START, refNode, offset);\n            }\n        } else {\n            collapse(false);\n            setStart(refNode, offset);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEndAfter(Node)\n     */\n    public void setEndAfter(Node refNode)\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.END_TO_END, refNode);\n        } else {\n            collapse(true);\n            setEndAfter(refNode);\n        }\n    }","id":59663,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#setEndAfter(Node)\n     */\n    public void setEndAfter(Node refNode)\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).setEndPoint(RangeCompare.END_TO_END, refNode);\n        } else {\n            collapse(true);\n            setEndAfter(refNode);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#collapse(boolean)\n     */\n    public void collapse(boolean toStart)\n    {\n        if (getJSRange() instanceof TextRange) {\n            ((TextRange) getJSRange()).collapse(toStart);\n        } else {\n            TextRange textRange = TextRange.newInstance((ControlRange) getJSRange());\n            textRange.collapse(toStart);\n            setJSRange(textRange);\n        }\n    }","id":59664,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#collapse(boolean)\n     */\n    public void collapse(boolean toStart)\n    {\n        if (getJSRange().isTextRange()) {\n            ((TextRange) getJSRange()).collapse(toStart);\n        } else {\n            TextRange textRange = TextRange.newInstance((ControlRange) getJSRange());\n            textRange.collapse(toStart);\n            setJSRange(textRange);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getStartOffset()\n     */\n    public int getStartOffset()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return getEndPointOffset(true);\n        } else {\n            return DOMUtils.getInstance().getNodeIndex(((ControlRange) getJSRange()).get(0));\n        }\n    }","id":59665,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getStartOffset()\n     */\n    public int getStartOffset()\n    {\n        if (getJSRange().isTextRange()) {\n            return getEndPointOffset(true);\n        } else {\n            return DOMUtils.getInstance().getNodeIndex(((ControlRange) getJSRange()).get(0));\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getStartContainer()\n     */\n    public Node getStartContainer()\n    {\n        if (getJSRange() instanceof TextRange) {\n            return getEndPointContainer(true);\n        } else {\n            // ControlRange\n            return getCommonAncestorContainer();\n        }\n    }","id":59666,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Range#getStartContainer()\n     */\n    public Node getStartContainer()\n    {\n        if (getJSRange().isTextRange()) {\n            return getEndPointContainer(true);\n        } else {\n            // ControlRange\n            return getCommonAncestorContainer();\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void onSymbols(boolean show)\n    {\n        if (show) {\n            getSymbolPicker().center();\n        } else {\n            String character = getSymbolPicker().getSymbol();\n            if (character != null) {\n                getTextArea().getCommandManager().execute(Command.INSERT_HTML, character);\n            } else {\n                // We get here if the symbol picker has been closed by clicking the close button.\n                // In this case we return the focus to the text area.\n                getTextArea().setFocus(true);\n            }\n        }\n    }","id":59667,"modified_method":"/**\n     * Either shows the symbol picker dialog or inserts the chosen symbol depending in the given flag.\n     * \n     * @param show whether to show the symbol picker or insert the chosen symbol.\n     */\n    public void onSymbols(boolean show)\n    {\n        if (show) {\n            if (insert.isEnabled()) {\n                // We save the selection because in some browsers, including Internet Explorer, by clicking on the\n                // symbol picker dialog we loose the selection in the rich text area and the symbol gets inserted at the\n                // beginning of the text.\n                saveSelection();\n                getSymbolPicker().center();\n            }\n        } else {\n            // We restore the selection before inserting the symbol to be sure that the chosen symbol is inserted in the\n            // right place.\n            restoreSelection();\n            String character = getSymbolPicker().getSymbol();\n            if (character != null) {\n                getTextArea().getCommandManager().execute(Command.INSERT_HTML, character);\n            } else {\n                // We get here if the symbol picker has been closed by clicking the close button.\n                // In this case we return the focus to the text area.\n                getTextArea().setFocus(true);\n            }\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == symbolButton) {\n            onSymbols(true);\n        }\n    }","id":59668,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == insert) {\n            onSymbols(true);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (symbolButton != null) {\n            symbolButton.removeFromParent();\n            symbolButton.removeClickListener(this);\n            symbolButton = null;\n\n            if (symbolPicker != null) {\n                symbolPicker.hide();\n                symbolPicker.removeFromParent();\n                symbolPicker.removePopupListener(this);\n                symbolPicker = null;\n            }\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","id":59669,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (insert != null) {\n            insert.removeFromParent();\n            insert.removeClickListener(this);\n            insert = null;\n\n            if (picker != null) {\n                picker.hide();\n                picker.removeFromParent();\n                picker.removePopupListener(this);\n                picker = null;\n            }\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            toolBarExtension.clearFeatures();\n        }\n\n        super.destroy();\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        if (getTextArea().getCommandManager().isSupported(Command.INSERT_HTML)) {\n            symbolButton = new PushButton(Images.INSTANCE.charmap().createImage(), this);\n            symbolButton.setTitle(Strings.INSTANCE.charmap());\n\n            toolBarExtension.addFeature(\"symbol\", symbolButton);\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","id":59670,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        if (getTextArea().getCommandManager().isSupported(Command.INSERT_HTML)) {\n            insert = new PushButton(Images.INSTANCE.charmap().createImage(), this);\n            insert.setTitle(Strings.INSTANCE.charmap());\n\n            toolBarExtension.addFeature(\"symbol\", insert);\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getUIExtensionList().add(toolBarExtension);\n        }\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private SymbolPicker getSymbolPicker()\n    {\n        if (symbolPicker == null) {\n            symbolPicker = new SymbolPicker();\n            symbolPicker.addPopupListener(this);\n        }\n        return symbolPicker;\n    }","id":59671,"modified_method":"/**\n     * We use lazy loading in case of the symbol picker to optimize editor loading time because the symbol palette is an\n     * HTML table with many cells and takes a bit of time to be created. In the future we should consider using\n     * innerHTML for creating the palette and widget binding.\n     * \n     * @return the symbol picker to be used for selecting the symbol.\n     */\n    private SymbolPicker getSymbolPicker()\n    {\n        if (picker == null) {\n            picker = new SymbolPicker();\n            picker.addPopupListener(this);\n        }\n        return picker;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private SymbolPluginFactory()\n    {\n        super(\"symbol\");\n    }","id":59672,"modified_method":"/**\n     * Creates a new factory for {@link SymbolPlugin}.\n     */\n    private SymbolPluginFactory()\n    {\n        super(\"symbol\");\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see PluginFactory#newInstance()\n     */\n    public Plugin newInstance()\n    {\n        return new SymbolPlugin();\n    }","id":59673,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPluginFactory#newInstance()\n     */\n    public Plugin newInstance()\n    {\n        return new SymbolPlugin();\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static synchronized SymbolPluginFactory getInstance()\n    {\n        if (instance == null) {\n            instance = new SymbolPluginFactory();\n        }\n        return instance;\n    }","id":59674,"modified_method":"/**\n     * @return the singleton instance.\n     */\n    public static synchronized SymbolPluginFactory getInstance()\n    {\n        if (instance == null) {\n            instance = new SymbolPluginFactory();\n        }\n        return instance;\n    }","commit_id":"7c3a9e5b860c78860bdc3bb7e92b3ff428e51de3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Create new extension descriptor by copying provided one.\n     * \n     * @param repository the repository where this extension comes from\n     * @param extension the extension to copy\n     */\n    public AbstractExtension(ExtensionRepository repository, Extension extension)\n    {\n        this(repository, extension.getId(), extension.getType());\n\n        setDescription(extension.getDescription());\n        setAuthors(extension.getAuthors());\n        setWebsite(extension.getWebSite());\n\n        List< ? extends ExtensionDependency> newDependencies = extension.getDependencies();\n        if (!newDependencies.isEmpty()) {\n            this.dependencies = new ArrayList<ExtensionDependency>(extension.getDependencies());\n        }\n    }","id":59675,"modified_method":"/**\n     * Create new extension descriptor by copying provided one.\n     * \n     * @param repository the repository where this extension comes from\n     * @param extension the extension to copy\n     */\n    public AbstractExtension(ExtensionRepository repository, Extension extension)\n    {\n        this(repository, extension.getId(), extension.getType());\n\n        setFeatures(extension.getFeatures());\n        \n        setDescription(extension.getDescription());\n        setAuthors(extension.getAuthors());\n        setWebsite(extension.getWebSite());\n\n        List< ? extends ExtensionDependency> newDependencies = extension.getDependencies();\n        if (!newDependencies.isEmpty()) {\n            this.dependencies = new ArrayList<ExtensionDependency>(extension.getDependencies());\n        }\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testResolve() throws ResolveException\n    {\n        Extension artifact = this.repositoryManager.resolve(this.extensionId);\n\n        Assert.assertNotNull(artifact);\n        Assert.assertEquals(this.extensionId.getId(), artifact.getId().getId());\n        Assert.assertEquals(this.extensionId.getVersion(), artifact.getId().getVersion());\n        Assert.assertEquals(\"type\", artifact.getType());\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), artifact.getRepository().getId().getId());\n        Assert.assertEquals(\"description\", artifact.getDescription());\n        Assert.assertEquals(\"http://website\", artifact.getWebSite());\n        \n        ExtensionDependency dependency = artifact.getDependencies().get(0);\n        Assert.assertEquals(this.dependencyExtensionId.getId(), dependency.getId());\n        Assert.assertEquals(this.dependencyExtensionId.getVersion(), dependency.getVersion());\n\n        // check that a new resolve of an already resolved extension provide the proper repository\n        artifact = this.repositoryManager.resolve(this.extensionId);\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), artifact.getRepository().getId().getId());\n    }","id":59676,"modified_method":"@Test\n    public void testResolve() throws ResolveException\n    {\n        Extension extension = this.repositoryManager.resolve(this.extensionId);\n\n        Assert.assertNotNull(extension);\n        Assert.assertEquals(this.extensionId.getId(), extension.getId().getId());\n        Assert.assertEquals(this.extensionId.getVersion(), extension.getId().getVersion());\n        Assert.assertEquals(\"type\", extension.getType());\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), extension.getRepository().getId().getId());\n        Assert.assertEquals(\"description\", extension.getDescription());\n        Assert.assertEquals(\"http://website\", extension.getWebSite());\n        Assert.assertEquals(Arrays.asList(\"feature1\", \"feature2\"), new ArrayList<String>(extension.getFeatures()));\n\n        ExtensionDependency dependency = extension.getDependencies().get(0);\n        Assert.assertEquals(this.dependencyExtensionId.getId(), dependency.getId());\n        Assert.assertEquals(this.dependencyExtensionId.getVersion(), dependency.getVersion());\n\n        // check that a new resolve of an already resolved extension provide the proper repository\n        extension = this.repositoryManager.resolve(this.extensionId);\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), extension.getRepository().getId().getId());\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testDownload() throws ExtensionException, IOException\n    {\n        Extension artifact = this.repositoryManager.resolve(this.extensionId);\n\n        File file = new File(\"target/downloaded/\" + this.extensionId.getId() + \".\" + artifact.getType());\n\n        if (file.exists()) {\n            file.delete();\n        }\n\n        artifact.download(file);\n\n        Assert.assertTrue(\"File has not been downloaded\", file.exists());\n\n        Assert.assertEquals(\"content\", FileUtils.readFileToString(file));\n    }","id":59677,"modified_method":"@Test\n    public void testDownload() throws ExtensionException, IOException\n    {\n        Extension extension = this.repositoryManager.resolve(this.extensionId);\n\n        File file = new File(\"target/downloaded/\" + this.extensionId.getId() + \".\" + extension.getType());\n\n        if (file.exists()) {\n            file.delete();\n        }\n\n        extension.download(file);\n\n        Assert.assertTrue(\"File has not been downloaded\", file.exists());\n\n        Assert.assertEquals(\"content\", FileUtils.readFileToString(file));\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AetherExtension(ExtensionId id, Model mavenModel, AetherExtensionRepository repository,\n        PlexusComponentManager mavenComponentManager)\n    {\n        super(repository, id, mavenModel.getPackaging());\n\n        this.plexusComponentManager = mavenComponentManager;\n        this.mavenModel = mavenModel;\n\n        setName(this.mavenModel.getName());\n        setDescription(this.mavenModel.getDescription());\n        for (Developer developer : this.mavenModel.getDevelopers()) {\n            addAuthor(developer.getId());\n        }\n        setWebsite(this.mavenModel.getUrl());\n        \n        // features\n        String featuresString = this.mavenModel.getProperties().getProperty(MPKEY_FEATURES);\n        // TODO: parse features list\n\n        // dependencies\n        for (Dependency mavenDependency : this.mavenModel.getDependencies()) {\n            if (!mavenDependency.isOptional()\n                && (mavenDependency.getScope().equals(\"compile\") || mavenDependency.getScope().equals(\"runtime\") || mavenDependency\n                    .getScope().equals(\"provided\"))) {\n                addDependency(new AetherExtensionDependency(new ExtensionId(mavenDependency.getGroupId() + \":\"\n                    + mavenDependency.getArtifactId(), mavenDependency.getVersion())));\n            }\n        }\n\n        // custom properties\n        putProperty(PKEY_GROUPID, this.mavenModel.getGroupId());\n        putProperty(PKEY_ARTIFACTID, this.mavenModel.getArtifactId());\n    }","id":59678,"modified_method":"public AetherExtension(ExtensionId id, Model mavenModel, AetherExtensionRepository repository,\n        PlexusComponentManager mavenComponentManager, ConverterManager converter)\n    {\n        super(repository, id, mavenModel.getPackaging());\n\n        this.plexusComponentManager = mavenComponentManager;\n        this.mavenModel = mavenModel;\n\n        setName(this.mavenModel.getName());\n        setDescription(this.mavenModel.getDescription());\n        for (Developer developer : this.mavenModel.getDevelopers()) {\n            addAuthor(developer.getId());\n        }\n        setWebsite(this.mavenModel.getUrl());\n\n        // features\n        String featuresString = this.mavenModel.getProperties().getProperty(MPKEY_FEATURES);\n        setFeatures(converter.<Collection<String>> convert(List.class, featuresString));\n\n        // TODO: parse features list\n\n        // dependencies\n        for (Dependency mavenDependency : this.mavenModel.getDependencies()) {\n            if (!mavenDependency.isOptional()\n                && (mavenDependency.getScope().equals(\"compile\") || mavenDependency.getScope().equals(\"runtime\") || mavenDependency\n                    .getScope().equals(\"provided\"))) {\n                addDependency(new AetherExtensionDependency(new ExtensionId(mavenDependency.getGroupId() + \":\"\n                    + mavenDependency.getArtifactId(), mavenDependency.getVersion())));\n            }\n        }\n\n        // custom properties\n        putProperty(PKEY_GROUPID, this.mavenModel.getGroupId());\n        putProperty(PKEY_ARTIFACTID, this.mavenModel.getArtifactId());\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public Extension resolve(ExtensionId extensionId) throws ResolveException\n    {\n        Model model;\n        try {\n            model = loadPom(this.session, extensionId);\n        } catch (Exception e) {\n            throw new ResolveException(\"Failed to resolve extension [\" + extensionId + \"] descriptor\", e);\n        }\n\n        return new AetherExtension(extensionId, model, this, this.plexusComponentManager);\n    }","id":59679,"modified_method":"public Extension resolve(ExtensionId extensionId) throws ResolveException\n    {\n        Model model;\n        try {\n            model = loadPom(this.session, extensionId);\n        } catch (Exception e) {\n            throw new ResolveException(\"Failed to resolve extension [\" + extensionId + \"] descriptor\", e);\n        }\n\n        return new AetherExtension(extensionId, model, this, this.plexusComponentManager, this.converter);\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AetherExtensionRepository(ExtensionRepositoryId repositoryId, RepositorySystemSession session,\n        PlexusComponentManager mavenComponentManager) throws Exception\n    {\n        this.repositoryId = repositoryId;\n\n        this.plexusComponentManager = mavenComponentManager;\n\n        this.session = session;\n\n        this.artifactDescriptorReader = this.plexusComponentManager.getPlexus().lookup(ArtifactDescriptorReader.class);\n\n        this.remoteRepository = new RemoteRepository(repositoryId.getId(), \"default\", repositoryId.getURI().toString());\n\n        // FIXME: not very nice\n        // * use a private method of a library we don't control is not the nicest thing...\n        // * having to parse the pom.xml since we are supposed to support anything supported by aether is not very clean\n        // either\n        this.loadPomMethod =\n            this.artifactDescriptorReader.getClass().getDeclaredMethod(\"loadPom\", RepositorySystemSession.class,\n                ArtifactDescriptorRequest.class, ArtifactDescriptorResult.class);\n        this.loadPomMethod.setAccessible(true);\n    }","id":59680,"modified_method":"public AetherExtensionRepository(ExtensionRepositoryId repositoryId, RepositorySystemSession session,\n        PlexusComponentManager mavenComponentManager, ConverterManager converter) throws Exception\n    {\n        this.repositoryId = repositoryId;\n\n        this.plexusComponentManager = mavenComponentManager;\n\n        this.session = session;\n\n        this.artifactDescriptorReader = this.plexusComponentManager.getPlexus().lookup(ArtifactDescriptorReader.class);\n\n        this.remoteRepository = new RemoteRepository(repositoryId.getId(), \"default\", repositoryId.getURI().toString());\n\n        this.converter = converter;\n\n        // FIXME: not very nice\n        // * use a private method of a library we don't control is not the nicest thing...\n        // * having to parse the pom.xml since we are supposed to support anything supported by aether is not very clean\n        // either\n        this.loadPomMethod =\n            this.artifactDescriptorReader.getClass().getDeclaredMethod(\"loadPom\", RepositorySystemSession.class,\n                ArtifactDescriptorRequest.class, ArtifactDescriptorResult.class);\n        this.loadPomMethod.setAccessible(true);\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public ExtensionRepository createRepository(ExtensionRepositoryId repositoryId) throws ExtensionRepositoryException\n    {\n        try {\n            return new AetherExtensionRepository(repositoryId, this.session, this.aetherComponentManager);\n        } catch (Exception e) {\n            throw new ExtensionRepositoryException(\"Failed to create repository [\" + repositoryId + \"]\", e);\n        }\n    }","id":59681,"modified_method":"public ExtensionRepository createRepository(ExtensionRepositoryId repositoryId) throws ExtensionRepositoryException\n    {\n        try {\n            return new AetherExtensionRepository(repositoryId, this.session, this.aetherComponentManager,\n                this.converterManager);\n        } catch (Exception e) {\n            throw new ExtensionRepositoryException(\"Failed to create repository [\" + repositoryId + \"]\", e);\n        }\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Install provided extension.\n     * \n     * @param localExtension the extension to install\n     * @param namespace the namespace\n     * @throws InstallException error when trying to uninstall extension\n     * @see #installExtension(LocalExtension, String)\n     */\n    private void installLocalExtension(DefaultLocalExtension localExtension, String namespace) throws InstallException\n    {\n        localExtension.setInstalled(false, namespace);\n\n        try {\n            this.storage.saveDescriptor(localExtension);\n        } catch (Exception e) {\n            throw new InstallException(\"Failed to modify extension descriptor\", e);\n        }\n\n        // Update caches\n\n        addInstalledExtension(localExtension, namespace);\n    }","id":59682,"modified_method":"/**\n     * Install provided extension.\n     * \n     * @param localExtension the extension to install\n     * @param namespace the namespace\n     * @throws InstallException error when trying to uninstall extension\n     * @see #installExtension(LocalExtension, String)\n     */\n    private void installLocalExtension(DefaultLocalExtension localExtension, String namespace) throws InstallException\n    {\n        localExtension.setInstalled(true, namespace);\n\n        try {\n            this.storage.saveDescriptor(localExtension);\n        } catch (Exception e) {\n            throw new InstallException(\"Failed to modify extension descriptor\", e);\n        }\n\n        // Update caches\n\n        addInstalledExtension(localExtension, namespace);\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Load local extension descriptor.\n     * \n     * @param repository the repository\n     * @param descriptor the descriptor content\n     * @return the parsed local extension descriptor\n     * @throws InvalidExtensionException error when trying to parse extension descriptor\n     */\n    public DefaultLocalExtension loadDescriptor(DefaultLocalExtensionRepository repository, InputStream descriptor)\n        throws InvalidExtensionException\n    {\n        DocumentBuilder documentBuilder;\n        try {\n            documentBuilder = this.documentBuilderFactory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            throw new InvalidExtensionException(\"Failed to create new DocumentBuilder\", e);\n        }\n\n        Document document;\n        try {\n            document = documentBuilder.parse(descriptor);\n        } catch (Exception e) {\n            throw new InvalidExtensionException(\"Failed to parse descriptor\", e);\n        }\n\n        Element extensionElement = document.getDocumentElement();\n\n        // Mandatory fields\n\n        Node idNode = extensionElement.getElementsByTagName(ELEMENT_ID).item(0);\n        Node versionNode = extensionElement.getElementsByTagName(ELEMENT_VERSION).item(0);\n        Node typeNode = extensionElement.getElementsByTagName(ELEMENT_TYPE).item(0);\n\n        DefaultLocalExtension localExtension =\n            new DefaultLocalExtension(repository,\n                new ExtensionId(idNode.getTextContent(), versionNode.getTextContent()), typeNode.getTextContent());\n\n        // Optional fields\n\n        Node dependencyNode = getNode(extensionElement, ELEMENT_DEPENDENCY);\n        if (dependencyNode != null) {\n            localExtension.setDependency(Boolean.valueOf(dependencyNode.getTextContent()));\n        }\n        Node nameNode = getNode(extensionElement, ELEMENT_NAME);\n        if (nameNode != null) {\n            localExtension.setName(nameNode.getTextContent());\n        }\n        Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION);\n        if (descriptionNode != null) {\n            localExtension.setDescription(descriptionNode.getTextContent());\n        }\n        Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE);\n        if (websiteNode != null) {\n            localExtension.setWebsite(websiteNode.getTextContent());\n        }\n\n        // Authors\n        NodeList authorsNodes = extensionElement.getElementsByTagName(ELEMENT_AUTHORS);\n        if (authorsNodes.getLength() > 0) {\n            NodeList authors = authorsNodes.item(0).getChildNodes();\n            for (int i = 0; i < authors.getLength(); ++i) {\n                Node authorsNode = authors.item(i);\n\n                localExtension.addAuthor(authorsNode.getTextContent());\n            }\n        }\n\n        // Features\n        NodeList featuresNodes = extensionElement.getElementsByTagName(ELEMENT_FEATURES);\n        if (featuresNodes.getLength() > 0) {\n            NodeList features = featuresNodes.item(0).getChildNodes();\n            for (int i = 0; i < features.getLength(); ++i) {\n                Node authorsNode = features.item(i);\n\n                localExtension.addFeature(authorsNode.getTextContent());\n            }\n        }\n\n        // Dependencies\n        NodeList dependenciesNodes = extensionElement.getElementsByTagName(ELEMENT_DEPENDENCIES);\n        if (dependenciesNodes.getLength() > 0) {\n            NodeList dependenciesNodeList = dependenciesNodes.item(0).getChildNodes();\n            for (int i = 0; i < dependenciesNodeList.getLength(); ++i) {\n                Node dependency = dependenciesNodeList.item(i);\n\n                if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) {\n                    Node dependencyIdNode = getNode(dependency, ELEMENT_ID);\n                    Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);\n\n                    localExtension.addDependency(new LocalExtensionDependency(dependencyIdNode.getTextContent(),\n                        dependencyVersionNode.getTextContent()));\n                }\n            }\n        }\n\n        // Install fields\n\n        Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED);\n        if (enabledNode != null) {\n            localExtension.setInstalled(Boolean.valueOf(enabledNode.getTextContent()));\n        }\n\n        // Namespaces\n        NodeList namespacesNodes = extensionElement.getElementsByTagName(ELEMENT_NAMESPACES);\n        if (namespacesNodes.getLength() > 0) {\n            NodeList namespaces = namespacesNodes.item(0).getChildNodes();\n            for (int i = 0; i < namespaces.getLength(); ++i) {\n                Node namespaceNode = namespaces.item(i);\n\n                localExtension.addNamespace(namespaceNode.getTextContent());\n            }\n        }\n\n        return localExtension;\n    }","id":59683,"modified_method":"/**\n     * Load local extension descriptor.\n     * \n     * @param repository the repository\n     * @param descriptor the descriptor content\n     * @return the parsed local extension descriptor\n     * @throws InvalidExtensionException error when trying to parse extension descriptor\n     */\n    public DefaultLocalExtension loadDescriptor(DefaultLocalExtensionRepository repository, InputStream descriptor)\n        throws InvalidExtensionException\n    {\n        DocumentBuilder documentBuilder;\n        try {\n            documentBuilder = this.documentBuilderFactory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            throw new InvalidExtensionException(\"Failed to create new DocumentBuilder\", e);\n        }\n\n        Document document;\n        try {\n            document = documentBuilder.parse(descriptor);\n        } catch (Exception e) {\n            throw new InvalidExtensionException(\"Failed to parse descriptor\", e);\n        }\n\n        Element extensionElement = document.getDocumentElement();\n\n        // Mandatory fields\n\n        Node idNode = extensionElement.getElementsByTagName(ELEMENT_ID).item(0);\n        Node versionNode = extensionElement.getElementsByTagName(ELEMENT_VERSION).item(0);\n        Node typeNode = extensionElement.getElementsByTagName(ELEMENT_TYPE).item(0);\n\n        DefaultLocalExtension localExtension =\n            new DefaultLocalExtension(repository,\n                new ExtensionId(idNode.getTextContent(), versionNode.getTextContent()), typeNode.getTextContent());\n\n        // Optional fields\n\n        Node dependencyNode = getNode(extensionElement, ELEMENT_DEPENDENCY);\n        if (dependencyNode != null) {\n            localExtension.setDependency(Boolean.valueOf(dependencyNode.getTextContent()));\n        }\n        Node nameNode = getNode(extensionElement, ELEMENT_NAME);\n        if (nameNode != null) {\n            localExtension.setName(nameNode.getTextContent());\n        }\n        Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION);\n        if (descriptionNode != null) {\n            localExtension.setDescription(descriptionNode.getTextContent());\n        }\n        Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE);\n        if (websiteNode != null) {\n            localExtension.setWebsite(websiteNode.getTextContent());\n        }\n\n        // Authors\n        NodeList authorsNodes = extensionElement.getElementsByTagName(ELEMENT_AUTHORS);\n        if (authorsNodes.getLength() > 0) {\n            NodeList authors = authorsNodes.item(0).getChildNodes();\n            for (int i = 0; i < authors.getLength(); ++i) {\n                Node authorNode = authors.item(i);\n\n                if (authorNode.getNodeName() == ELEMENT_AAUTHOR) {\n                    localExtension.addAuthor(authorNode.getTextContent());\n                }\n            }\n        }\n\n        // Features\n        NodeList featuresNodes = extensionElement.getElementsByTagName(ELEMENT_FEATURES);\n        if (featuresNodes.getLength() > 0) {\n            NodeList features = featuresNodes.item(0).getChildNodes();\n            for (int i = 0; i < features.getLength(); ++i) {\n                Node featureNode = features.item(i);\n\n                if (featureNode.getNodeName() == ELEMENT_NFEATURE) {\n                    localExtension.addFeature(featureNode.getTextContent().trim());\n                }\n            }\n        }\n\n        // Dependencies\n        NodeList dependenciesNodes = extensionElement.getElementsByTagName(ELEMENT_DEPENDENCIES);\n        if (dependenciesNodes.getLength() > 0) {\n            NodeList dependenciesNodeList = dependenciesNodes.item(0).getChildNodes();\n            for (int i = 0; i < dependenciesNodeList.getLength(); ++i) {\n                Node dependency = dependenciesNodeList.item(i);\n\n                if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) {\n                    Node dependencyIdNode = getNode(dependency, ELEMENT_ID);\n                    Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);\n\n                    localExtension.addDependency(new LocalExtensionDependency(dependencyIdNode.getTextContent(),\n                        dependencyVersionNode.getTextContent()));\n                }\n            }\n        }\n\n        // Install fields\n\n        Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED);\n        if (enabledNode != null) {\n            localExtension.setInstalled(Boolean.valueOf(enabledNode.getTextContent()));\n        }\n\n        // Namespaces\n        NodeList namespacesNodes = extensionElement.getElementsByTagName(ELEMENT_NAMESPACES);\n        if (namespacesNodes.getLength() > 0) {\n            NodeList namespaces = namespacesNodes.item(0).getChildNodes();\n            for (int i = 0; i < namespaces.getLength(); ++i) {\n                Node namespaceNode = namespaces.item(i);\n\n                localExtension.addNamespace(namespaceNode.getTextContent());\n            }\n        }\n\n        return localExtension;\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param previousExtension the previous installed version of the extension to install\n     * @param remoteExtension the new extension to install\n     * @param dependency indicate if the extension is installed as a dependency\n     * @param namespace the namespace where to install the extension\n     * @return the newly installed local extension\n     * @throws ComponentLookupException failed to find proper {@link org.xwiki.extension.handler.ExtensionHandler}\n     * @throws InstallException error when trying to install provided extension\n     * @throws LocalExtensionRepositoryException error when storing extension\n     */\n    private LocalExtension installExtension(LocalExtension previousExtension, Extension remoteExtension,\n        boolean dependency, String namespace) throws ComponentLookupException, InstallException,\n        LocalExtensionRepositoryException\n    {\n        for (ExtensionDependency dependencyDependency : remoteExtension.getDependencies()) {\n            installExtensionDependency(dependencyDependency, namespace);\n        }\n\n        notifyPushLevelProgress(2);\n\n        try {\n            // Store extension in local repository\n            LocalExtension localExtension =\n                this.localExtensionRepository.storeExtension(remoteExtension, previousExtension != null\n                    ? previousExtension.isDependency() : dependency);\n\n            notifyStepPropress();\n\n            if (previousExtension != null) {\n                this.extensionHandlerManager.upgrade(previousExtension, localExtension, namespace);\n\n                try {\n                    this.localExtensionRepository.uninstallExtension(previousExtension, namespace);\n                } catch (UninstallException e) {\n                    this.logger.error(\"Failed to uninstall extension [\" + previousExtension + \"]\", e);\n                }\n\n                this.observationManager.notify(new ExtensionUpgradedEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            } else {\n                this.extensionHandlerManager.install(localExtension, namespace);\n\n                this.observationManager.notify(new ExtensionInstalledEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            }\n\n            this.localExtensionRepository.installExtension(localExtension, namespace);\n\n            return localExtension;\n        } finally {\n            notifyPopLevelProgress();\n        }\n    }","id":59684,"modified_method":"/**\n     * @param previousExtension the previous installed version of the extension to install\n     * @param remoteExtension the new extension to install\n     * @param dependency indicate if the extension is installed as a dependency\n     * @param namespace the namespace where to install the extension\n     * @return the newly installed local extension\n     * @throws ComponentLookupException failed to find proper {@link org.xwiki.extension.handler.ExtensionHandler}\n     * @throws InstallException error when trying to install provided extension\n     * @throws LocalExtensionRepositoryException error when storing extension\n     */\n    private LocalExtension installExtension(LocalExtension previousExtension, Extension remoteExtension,\n        boolean dependency, String namespace) throws ComponentLookupException, InstallException,\n        LocalExtensionRepositoryException\n    {\n        for (ExtensionDependency dependencyDependency : remoteExtension.getDependencies()) {\n            installExtensionDependency(dependencyDependency, namespace);\n        }\n\n        notifyPushLevelProgress(2);\n\n        try {\n            // Store extension in local repository\n            LocalExtension localExtension =\n                this.localExtensionRepository.storeExtension(remoteExtension, previousExtension != null\n                    ? previousExtension.isDependency() : dependency);\n\n            notifyStepPropress();\n\n            if (previousExtension != null) {\n                this.extensionHandlerManager.upgrade(previousExtension, localExtension, namespace);\n\n                try {\n                    this.localExtensionRepository.uninstallExtension(previousExtension, namespace);\n                } catch (UninstallException e) {\n                    this.logger.error(\"Failed to uninstall extension [\" + previousExtension + \"]\", e);\n                }\n\n                this.localExtensionRepository.installExtension(localExtension, namespace);\n                \n                this.observationManager.notify(new ExtensionUpgradedEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            } else {\n                this.extensionHandlerManager.install(localExtension, namespace);\n\n                this.localExtensionRepository.installExtension(localExtension, namespace);\n                \n                this.observationManager.notify(new ExtensionInstalledEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            }\n\n            return localExtension;\n        } finally {\n            notifyPopLevelProgress();\n        }\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testInstallAndUninstallExtension() throws Throwable\n    {\n        // actual test\n        LocalExtension localExtension = install(this.testArtifactId);\n\n        Assert.assertNotNull(localExtension);\n        Assert.assertNotNull(localExtension.getFile());\n        Assert.assertTrue(localExtension.getFile().exists());\n\n        getComponentManager().lookup(TestComponent.class);\n\n        try {\n            install(this.testArtifactId);\n            Assert.fail(\"installExtension should have failed\");\n        } catch (InstallException expected) {\n            // expected\n        }\n\n        uninstall(this.testArtifactId);\n\n        Assert.assertNull(this.localExtensionRepository.getInstalledExtension(this.testArtifactId.getId(), null));\n\n        try {\n            getComponentManager().lookup(TestComponent.class);\n            Assert.fail(\"the extension has not been uninstalled\");\n        } catch (ComponentLookupException expected) {\n            // expected\n        }\n    }","id":59685,"modified_method":"@Test\n    public void testInstallAndUninstallExtension() throws Throwable\n    {\n        // actual test\n        LocalExtension localExtension = install(this.testArtifactId);\n\n        Assert.assertNotNull(localExtension);\n        Assert.assertNotNull(localExtension.getFile());\n        Assert.assertTrue(localExtension.getFile().exists());\n\n        getComponentManager().lookup(TestComponent.class);\n\n        try {\n            install(this.testArtifactId);\n            Assert.fail(\"installExtension should have failed\");\n        } catch (InstallException expected) {\n            // expected\n        }\n\n        Assert.assertNotNull(localExtensionRepository.getInstalledExtension(\"feature\", null));\n\n        uninstall(this.testArtifactId);\n\n        Assert.assertNull(this.localExtensionRepository.getInstalledExtension(this.testArtifactId.getId(), null));\n\n        try {\n            getComponentManager().lookup(TestComponent.class);\n            Assert.fail(\"the extension has not been uninstalled\");\n        } catch (ComponentLookupException expected) {\n            // expected\n        }\n    }","commit_id":"fd86aa2c7d57ec9d34c240f34d8a218788ecd3c4","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Create new extension descriptor by copying provided one.\n     * \n     * @param repository the repository where this extension comes from\n     * @param extension the extension to copy\n     */\n    public AbstractExtension(ExtensionRepository repository, Extension extension)\n    {\n        this(repository, extension.getId(), extension.getType());\n\n        setDescription(extension.getDescription());\n        setAuthors(extension.getAuthors());\n        setWebsite(extension.getWebSite());\n\n        List< ? extends ExtensionDependency> newDependencies = extension.getDependencies();\n        if (!newDependencies.isEmpty()) {\n            this.dependencies = new ArrayList<ExtensionDependency>(extension.getDependencies());\n        }\n    }","id":59686,"modified_method":"/**\n     * Create new extension descriptor by copying provided one.\n     * \n     * @param repository the repository where this extension comes from\n     * @param extension the extension to copy\n     */\n    public AbstractExtension(ExtensionRepository repository, Extension extension)\n    {\n        this(repository, extension.getId(), extension.getType());\n\n        setFeatures(extension.getFeatures());\n        \n        setDescription(extension.getDescription());\n        setAuthors(extension.getAuthors());\n        setWebsite(extension.getWebSite());\n\n        List< ? extends ExtensionDependency> newDependencies = extension.getDependencies();\n        if (!newDependencies.isEmpty()) {\n            this.dependencies = new ArrayList<ExtensionDependency>(extension.getDependencies());\n        }\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testDownload() throws ExtensionException, IOException\n    {\n        Extension artifact = this.repositoryManager.resolve(this.extensionId);\n\n        File file = new File(\"target/downloaded/\" + this.extensionId.getId() + \".\" + artifact.getType());\n\n        if (file.exists()) {\n            file.delete();\n        }\n\n        artifact.download(file);\n\n        Assert.assertTrue(\"File has not been downloaded\", file.exists());\n\n        Assert.assertEquals(\"content\", FileUtils.readFileToString(file));\n    }","id":59687,"modified_method":"@Test\n    public void testDownload() throws ExtensionException, IOException\n    {\n        Extension extension = this.repositoryManager.resolve(this.extensionId);\n\n        File file = new File(\"target/downloaded/\" + this.extensionId.getId() + \".\" + extension.getType());\n\n        if (file.exists()) {\n            file.delete();\n        }\n\n        extension.download(file);\n\n        Assert.assertTrue(\"File has not been downloaded\", file.exists());\n\n        Assert.assertEquals(\"content\", FileUtils.readFileToString(file));\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testResolve() throws ResolveException\n    {\n        Extension artifact = this.repositoryManager.resolve(this.extensionId);\n\n        Assert.assertNotNull(artifact);\n        Assert.assertEquals(this.extensionId.getId(), artifact.getId().getId());\n        Assert.assertEquals(this.extensionId.getVersion(), artifact.getId().getVersion());\n        Assert.assertEquals(\"type\", artifact.getType());\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), artifact.getRepository().getId().getId());\n        Assert.assertEquals(\"description\", artifact.getDescription());\n        Assert.assertEquals(\"http://website\", artifact.getWebSite());\n        \n        ExtensionDependency dependency = artifact.getDependencies().get(0);\n        Assert.assertEquals(this.dependencyExtensionId.getId(), dependency.getId());\n        Assert.assertEquals(this.dependencyExtensionId.getVersion(), dependency.getVersion());\n\n        // check that a new resolve of an already resolved extension provide the proper repository\n        artifact = this.repositoryManager.resolve(this.extensionId);\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), artifact.getRepository().getId().getId());\n    }","id":59688,"modified_method":"@Test\n    public void testResolve() throws ResolveException\n    {\n        Extension extension = this.repositoryManager.resolve(this.extensionId);\n\n        Assert.assertNotNull(extension);\n        Assert.assertEquals(this.extensionId.getId(), extension.getId().getId());\n        Assert.assertEquals(this.extensionId.getVersion(), extension.getId().getVersion());\n        Assert.assertEquals(\"type\", extension.getType());\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), extension.getRepository().getId().getId());\n        Assert.assertEquals(\"description\", extension.getDescription());\n        Assert.assertEquals(\"http://website\", extension.getWebSite());\n        Assert.assertEquals(Arrays.asList(\"feature1\", \"feature2\"), new ArrayList<String>(extension.getFeatures()));\n\n        ExtensionDependency dependency = extension.getDependencies().get(0);\n        Assert.assertEquals(this.dependencyExtensionId.getId(), dependency.getId());\n        Assert.assertEquals(this.dependencyExtensionId.getVersion(), dependency.getVersion());\n\n        // check that a new resolve of an already resolved extension provide the proper repository\n        extension = this.repositoryManager.resolve(this.extensionId);\n        Assert.assertEquals(this.repositoryUtil.getRemoteRepositoryId(), extension.getRepository().getId().getId());\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AetherExtension(ExtensionId id, Model mavenModel, AetherExtensionRepository repository,\n        PlexusComponentManager mavenComponentManager)\n    {\n        super(repository, id, mavenModel.getPackaging());\n\n        this.plexusComponentManager = mavenComponentManager;\n        this.mavenModel = mavenModel;\n\n        setName(this.mavenModel.getName());\n        setDescription(this.mavenModel.getDescription());\n        for (Developer developer : this.mavenModel.getDevelopers()) {\n            addAuthor(developer.getId());\n        }\n        setWebsite(this.mavenModel.getUrl());\n        \n        // features\n        String featuresString = this.mavenModel.getProperties().getProperty(MPKEY_FEATURES);\n        // TODO: parse features list\n\n        // dependencies\n        for (Dependency mavenDependency : this.mavenModel.getDependencies()) {\n            if (!mavenDependency.isOptional()\n                && (mavenDependency.getScope().equals(\"compile\") || mavenDependency.getScope().equals(\"runtime\") || mavenDependency\n                    .getScope().equals(\"provided\"))) {\n                addDependency(new AetherExtensionDependency(new ExtensionId(mavenDependency.getGroupId() + \":\"\n                    + mavenDependency.getArtifactId(), mavenDependency.getVersion())));\n            }\n        }\n\n        // custom properties\n        putProperty(PKEY_GROUPID, this.mavenModel.getGroupId());\n        putProperty(PKEY_ARTIFACTID, this.mavenModel.getArtifactId());\n    }","id":59689,"modified_method":"public AetherExtension(ExtensionId id, Model mavenModel, AetherExtensionRepository repository,\n        PlexusComponentManager mavenComponentManager, ConverterManager converter)\n    {\n        super(repository, id, mavenModel.getPackaging());\n\n        this.plexusComponentManager = mavenComponentManager;\n        this.mavenModel = mavenModel;\n\n        setName(this.mavenModel.getName());\n        setDescription(this.mavenModel.getDescription());\n        for (Developer developer : this.mavenModel.getDevelopers()) {\n            addAuthor(developer.getId());\n        }\n        setWebsite(this.mavenModel.getUrl());\n\n        // features\n        String featuresString = this.mavenModel.getProperties().getProperty(MPKEY_FEATURES);\n        setFeatures(converter.<Collection<String>> convert(List.class, featuresString));\n\n        // TODO: parse features list\n\n        // dependencies\n        for (Dependency mavenDependency : this.mavenModel.getDependencies()) {\n            if (!mavenDependency.isOptional()\n                && (mavenDependency.getScope().equals(\"compile\") || mavenDependency.getScope().equals(\"runtime\") || mavenDependency\n                    .getScope().equals(\"provided\"))) {\n                addDependency(new AetherExtensionDependency(new ExtensionId(mavenDependency.getGroupId() + \":\"\n                    + mavenDependency.getArtifactId(), mavenDependency.getVersion())));\n            }\n        }\n\n        // custom properties\n        putProperty(PKEY_GROUPID, this.mavenModel.getGroupId());\n        putProperty(PKEY_ARTIFACTID, this.mavenModel.getArtifactId());\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public Extension resolve(ExtensionId extensionId) throws ResolveException\n    {\n        Model model;\n        try {\n            model = loadPom(this.session, extensionId);\n        } catch (Exception e) {\n            throw new ResolveException(\"Failed to resolve extension [\" + extensionId + \"] descriptor\", e);\n        }\n\n        return new AetherExtension(extensionId, model, this, this.plexusComponentManager);\n    }","id":59690,"modified_method":"public Extension resolve(ExtensionId extensionId) throws ResolveException\n    {\n        Model model;\n        try {\n            model = loadPom(this.session, extensionId);\n        } catch (Exception e) {\n            throw new ResolveException(\"Failed to resolve extension [\" + extensionId + \"] descriptor\", e);\n        }\n\n        return new AetherExtension(extensionId, model, this, this.plexusComponentManager, this.converter);\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public AetherExtensionRepository(ExtensionRepositoryId repositoryId, RepositorySystemSession session,\n        PlexusComponentManager mavenComponentManager) throws Exception\n    {\n        this.repositoryId = repositoryId;\n\n        this.plexusComponentManager = mavenComponentManager;\n\n        this.session = session;\n\n        this.artifactDescriptorReader = this.plexusComponentManager.getPlexus().lookup(ArtifactDescriptorReader.class);\n\n        this.remoteRepository = new RemoteRepository(repositoryId.getId(), \"default\", repositoryId.getURI().toString());\n\n        // FIXME: not very nice\n        // * use a private method of a library we don't control is not the nicest thing...\n        // * having to parse the pom.xml since we are supposed to support anything supported by aether is not very clean\n        // either\n        this.loadPomMethod =\n            this.artifactDescriptorReader.getClass().getDeclaredMethod(\"loadPom\", RepositorySystemSession.class,\n                ArtifactDescriptorRequest.class, ArtifactDescriptorResult.class);\n        this.loadPomMethod.setAccessible(true);\n    }","id":59691,"modified_method":"public AetherExtensionRepository(ExtensionRepositoryId repositoryId, RepositorySystemSession session,\n        PlexusComponentManager mavenComponentManager, ConverterManager converter) throws Exception\n    {\n        this.repositoryId = repositoryId;\n\n        this.plexusComponentManager = mavenComponentManager;\n\n        this.session = session;\n\n        this.artifactDescriptorReader = this.plexusComponentManager.getPlexus().lookup(ArtifactDescriptorReader.class);\n\n        this.remoteRepository = new RemoteRepository(repositoryId.getId(), \"default\", repositoryId.getURI().toString());\n\n        this.converter = converter;\n\n        // FIXME: not very nice\n        // * use a private method of a library we don't control is not the nicest thing...\n        // * having to parse the pom.xml since we are supposed to support anything supported by aether is not very clean\n        // either\n        this.loadPomMethod =\n            this.artifactDescriptorReader.getClass().getDeclaredMethod(\"loadPom\", RepositorySystemSession.class,\n                ArtifactDescriptorRequest.class, ArtifactDescriptorResult.class);\n        this.loadPomMethod.setAccessible(true);\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public ExtensionRepository createRepository(ExtensionRepositoryId repositoryId) throws ExtensionRepositoryException\n    {\n        try {\n            return new AetherExtensionRepository(repositoryId, this.session, this.aetherComponentManager);\n        } catch (Exception e) {\n            throw new ExtensionRepositoryException(\"Failed to create repository [\" + repositoryId + \"]\", e);\n        }\n    }","id":59692,"modified_method":"public ExtensionRepository createRepository(ExtensionRepositoryId repositoryId) throws ExtensionRepositoryException\n    {\n        try {\n            return new AetherExtensionRepository(repositoryId, this.session, this.aetherComponentManager,\n                this.converterManager);\n        } catch (Exception e) {\n            throw new ExtensionRepositoryException(\"Failed to create repository [\" + repositoryId + \"]\", e);\n        }\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Install provided extension.\n     * \n     * @param localExtension the extension to install\n     * @param namespace the namespace\n     * @throws InstallException error when trying to uninstall extension\n     * @see #installExtension(LocalExtension, String)\n     */\n    private void installLocalExtension(DefaultLocalExtension localExtension, String namespace) throws InstallException\n    {\n        localExtension.setInstalled(false, namespace);\n\n        try {\n            this.storage.saveDescriptor(localExtension);\n        } catch (Exception e) {\n            throw new InstallException(\"Failed to modify extension descriptor\", e);\n        }\n\n        // Update caches\n\n        addInstalledExtension(localExtension, namespace);\n    }","id":59693,"modified_method":"/**\n     * Install provided extension.\n     * \n     * @param localExtension the extension to install\n     * @param namespace the namespace\n     * @throws InstallException error when trying to uninstall extension\n     * @see #installExtension(LocalExtension, String)\n     */\n    private void installLocalExtension(DefaultLocalExtension localExtension, String namespace) throws InstallException\n    {\n        localExtension.setInstalled(true, namespace);\n\n        try {\n            this.storage.saveDescriptor(localExtension);\n        } catch (Exception e) {\n            throw new InstallException(\"Failed to modify extension descriptor\", e);\n        }\n\n        // Update caches\n\n        addInstalledExtension(localExtension, namespace);\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Load local extension descriptor.\n     * \n     * @param repository the repository\n     * @param descriptor the descriptor content\n     * @return the parsed local extension descriptor\n     * @throws InvalidExtensionException error when trying to parse extension descriptor\n     */\n    public DefaultLocalExtension loadDescriptor(DefaultLocalExtensionRepository repository, InputStream descriptor)\n        throws InvalidExtensionException\n    {\n        DocumentBuilder documentBuilder;\n        try {\n            documentBuilder = this.documentBuilderFactory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            throw new InvalidExtensionException(\"Failed to create new DocumentBuilder\", e);\n        }\n\n        Document document;\n        try {\n            document = documentBuilder.parse(descriptor);\n        } catch (Exception e) {\n            throw new InvalidExtensionException(\"Failed to parse descriptor\", e);\n        }\n\n        Element extensionElement = document.getDocumentElement();\n\n        // Mandatory fields\n\n        Node idNode = extensionElement.getElementsByTagName(ELEMENT_ID).item(0);\n        Node versionNode = extensionElement.getElementsByTagName(ELEMENT_VERSION).item(0);\n        Node typeNode = extensionElement.getElementsByTagName(ELEMENT_TYPE).item(0);\n\n        DefaultLocalExtension localExtension =\n            new DefaultLocalExtension(repository,\n                new ExtensionId(idNode.getTextContent(), versionNode.getTextContent()), typeNode.getTextContent());\n\n        // Optional fields\n\n        Node dependencyNode = getNode(extensionElement, ELEMENT_DEPENDENCY);\n        if (dependencyNode != null) {\n            localExtension.setDependency(Boolean.valueOf(dependencyNode.getTextContent()));\n        }\n        Node nameNode = getNode(extensionElement, ELEMENT_NAME);\n        if (nameNode != null) {\n            localExtension.setName(nameNode.getTextContent());\n        }\n        Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION);\n        if (descriptionNode != null) {\n            localExtension.setDescription(descriptionNode.getTextContent());\n        }\n        Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE);\n        if (websiteNode != null) {\n            localExtension.setWebsite(websiteNode.getTextContent());\n        }\n\n        // Authors\n        NodeList authorsNodes = extensionElement.getElementsByTagName(ELEMENT_AUTHORS);\n        if (authorsNodes.getLength() > 0) {\n            NodeList authors = authorsNodes.item(0).getChildNodes();\n            for (int i = 0; i < authors.getLength(); ++i) {\n                Node authorsNode = authors.item(i);\n\n                localExtension.addAuthor(authorsNode.getTextContent());\n            }\n        }\n\n        // Features\n        NodeList featuresNodes = extensionElement.getElementsByTagName(ELEMENT_FEATURES);\n        if (featuresNodes.getLength() > 0) {\n            NodeList features = featuresNodes.item(0).getChildNodes();\n            for (int i = 0; i < features.getLength(); ++i) {\n                Node authorsNode = features.item(i);\n\n                localExtension.addFeature(authorsNode.getTextContent());\n            }\n        }\n\n        // Dependencies\n        NodeList dependenciesNodes = extensionElement.getElementsByTagName(ELEMENT_DEPENDENCIES);\n        if (dependenciesNodes.getLength() > 0) {\n            NodeList dependenciesNodeList = dependenciesNodes.item(0).getChildNodes();\n            for (int i = 0; i < dependenciesNodeList.getLength(); ++i) {\n                Node dependency = dependenciesNodeList.item(i);\n\n                if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) {\n                    Node dependencyIdNode = getNode(dependency, ELEMENT_ID);\n                    Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);\n\n                    localExtension.addDependency(new LocalExtensionDependency(dependencyIdNode.getTextContent(),\n                        dependencyVersionNode.getTextContent()));\n                }\n            }\n        }\n\n        // Install fields\n\n        Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED);\n        if (enabledNode != null) {\n            localExtension.setInstalled(Boolean.valueOf(enabledNode.getTextContent()));\n        }\n\n        // Namespaces\n        NodeList namespacesNodes = extensionElement.getElementsByTagName(ELEMENT_NAMESPACES);\n        if (namespacesNodes.getLength() > 0) {\n            NodeList namespaces = namespacesNodes.item(0).getChildNodes();\n            for (int i = 0; i < namespaces.getLength(); ++i) {\n                Node namespaceNode = namespaces.item(i);\n\n                localExtension.addNamespace(namespaceNode.getTextContent());\n            }\n        }\n\n        return localExtension;\n    }","id":59694,"modified_method":"/**\n     * Load local extension descriptor.\n     * \n     * @param repository the repository\n     * @param descriptor the descriptor content\n     * @return the parsed local extension descriptor\n     * @throws InvalidExtensionException error when trying to parse extension descriptor\n     */\n    public DefaultLocalExtension loadDescriptor(DefaultLocalExtensionRepository repository, InputStream descriptor)\n        throws InvalidExtensionException\n    {\n        DocumentBuilder documentBuilder;\n        try {\n            documentBuilder = this.documentBuilderFactory.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            throw new InvalidExtensionException(\"Failed to create new DocumentBuilder\", e);\n        }\n\n        Document document;\n        try {\n            document = documentBuilder.parse(descriptor);\n        } catch (Exception e) {\n            throw new InvalidExtensionException(\"Failed to parse descriptor\", e);\n        }\n\n        Element extensionElement = document.getDocumentElement();\n\n        // Mandatory fields\n\n        Node idNode = extensionElement.getElementsByTagName(ELEMENT_ID).item(0);\n        Node versionNode = extensionElement.getElementsByTagName(ELEMENT_VERSION).item(0);\n        Node typeNode = extensionElement.getElementsByTagName(ELEMENT_TYPE).item(0);\n\n        DefaultLocalExtension localExtension =\n            new DefaultLocalExtension(repository,\n                new ExtensionId(idNode.getTextContent(), versionNode.getTextContent()), typeNode.getTextContent());\n\n        // Optional fields\n\n        Node dependencyNode = getNode(extensionElement, ELEMENT_DEPENDENCY);\n        if (dependencyNode != null) {\n            localExtension.setDependency(Boolean.valueOf(dependencyNode.getTextContent()));\n        }\n        Node nameNode = getNode(extensionElement, ELEMENT_NAME);\n        if (nameNode != null) {\n            localExtension.setName(nameNode.getTextContent());\n        }\n        Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION);\n        if (descriptionNode != null) {\n            localExtension.setDescription(descriptionNode.getTextContent());\n        }\n        Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE);\n        if (websiteNode != null) {\n            localExtension.setWebsite(websiteNode.getTextContent());\n        }\n\n        // Authors\n        NodeList authorsNodes = extensionElement.getElementsByTagName(ELEMENT_AUTHORS);\n        if (authorsNodes.getLength() > 0) {\n            NodeList authors = authorsNodes.item(0).getChildNodes();\n            for (int i = 0; i < authors.getLength(); ++i) {\n                Node authorNode = authors.item(i);\n\n                if (authorNode.getNodeName() == ELEMENT_AAUTHOR) {\n                    localExtension.addAuthor(authorNode.getTextContent());\n                }\n            }\n        }\n\n        // Features\n        NodeList featuresNodes = extensionElement.getElementsByTagName(ELEMENT_FEATURES);\n        if (featuresNodes.getLength() > 0) {\n            NodeList features = featuresNodes.item(0).getChildNodes();\n            for (int i = 0; i < features.getLength(); ++i) {\n                Node featureNode = features.item(i);\n\n                if (featureNode.getNodeName() == ELEMENT_NFEATURE) {\n                    localExtension.addFeature(featureNode.getTextContent().trim());\n                }\n            }\n        }\n\n        // Dependencies\n        NodeList dependenciesNodes = extensionElement.getElementsByTagName(ELEMENT_DEPENDENCIES);\n        if (dependenciesNodes.getLength() > 0) {\n            NodeList dependenciesNodeList = dependenciesNodes.item(0).getChildNodes();\n            for (int i = 0; i < dependenciesNodeList.getLength(); ++i) {\n                Node dependency = dependenciesNodeList.item(i);\n\n                if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) {\n                    Node dependencyIdNode = getNode(dependency, ELEMENT_ID);\n                    Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);\n\n                    localExtension.addDependency(new LocalExtensionDependency(dependencyIdNode.getTextContent(),\n                        dependencyVersionNode.getTextContent()));\n                }\n            }\n        }\n\n        // Install fields\n\n        Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED);\n        if (enabledNode != null) {\n            localExtension.setInstalled(Boolean.valueOf(enabledNode.getTextContent()));\n        }\n\n        // Namespaces\n        NodeList namespacesNodes = extensionElement.getElementsByTagName(ELEMENT_NAMESPACES);\n        if (namespacesNodes.getLength() > 0) {\n            NodeList namespaces = namespacesNodes.item(0).getChildNodes();\n            for (int i = 0; i < namespaces.getLength(); ++i) {\n                Node namespaceNode = namespaces.item(i);\n\n                localExtension.addNamespace(namespaceNode.getTextContent());\n            }\n        }\n\n        return localExtension;\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param previousExtension the previous installed version of the extension to install\n     * @param remoteExtension the new extension to install\n     * @param dependency indicate if the extension is installed as a dependency\n     * @param namespace the namespace where to install the extension\n     * @return the newly installed local extension\n     * @throws ComponentLookupException failed to find proper {@link org.xwiki.extension.handler.ExtensionHandler}\n     * @throws InstallException error when trying to install provided extension\n     * @throws LocalExtensionRepositoryException error when storing extension\n     */\n    private LocalExtension installExtension(LocalExtension previousExtension, Extension remoteExtension,\n        boolean dependency, String namespace) throws ComponentLookupException, InstallException,\n        LocalExtensionRepositoryException\n    {\n        for (ExtensionDependency dependencyDependency : remoteExtension.getDependencies()) {\n            installExtensionDependency(dependencyDependency, namespace);\n        }\n\n        notifyPushLevelProgress(2);\n\n        try {\n            // Store extension in local repository\n            LocalExtension localExtension =\n                this.localExtensionRepository.storeExtension(remoteExtension, previousExtension != null\n                    ? previousExtension.isDependency() : dependency);\n\n            notifyStepPropress();\n\n            if (previousExtension != null) {\n                this.extensionHandlerManager.upgrade(previousExtension, localExtension, namespace);\n\n                try {\n                    this.localExtensionRepository.uninstallExtension(previousExtension, namespace);\n                } catch (UninstallException e) {\n                    this.logger.error(\"Failed to uninstall extension [\" + previousExtension + \"]\", e);\n                }\n\n                this.observationManager.notify(new ExtensionUpgradedEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            } else {\n                this.extensionHandlerManager.install(localExtension, namespace);\n\n                this.observationManager.notify(new ExtensionInstalledEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            }\n\n            this.localExtensionRepository.installExtension(localExtension, namespace);\n\n            return localExtension;\n        } finally {\n            notifyPopLevelProgress();\n        }\n    }","id":59695,"modified_method":"/**\n     * @param previousExtension the previous installed version of the extension to install\n     * @param remoteExtension the new extension to install\n     * @param dependency indicate if the extension is installed as a dependency\n     * @param namespace the namespace where to install the extension\n     * @return the newly installed local extension\n     * @throws ComponentLookupException failed to find proper {@link org.xwiki.extension.handler.ExtensionHandler}\n     * @throws InstallException error when trying to install provided extension\n     * @throws LocalExtensionRepositoryException error when storing extension\n     */\n    private LocalExtension installExtension(LocalExtension previousExtension, Extension remoteExtension,\n        boolean dependency, String namespace) throws ComponentLookupException, InstallException,\n        LocalExtensionRepositoryException\n    {\n        for (ExtensionDependency dependencyDependency : remoteExtension.getDependencies()) {\n            installExtensionDependency(dependencyDependency, namespace);\n        }\n\n        notifyPushLevelProgress(2);\n\n        try {\n            // Store extension in local repository\n            LocalExtension localExtension =\n                this.localExtensionRepository.storeExtension(remoteExtension, previousExtension != null\n                    ? previousExtension.isDependency() : dependency);\n\n            notifyStepPropress();\n\n            if (previousExtension != null) {\n                this.extensionHandlerManager.upgrade(previousExtension, localExtension, namespace);\n\n                try {\n                    this.localExtensionRepository.uninstallExtension(previousExtension, namespace);\n                } catch (UninstallException e) {\n                    this.logger.error(\"Failed to uninstall extension [\" + previousExtension + \"]\", e);\n                }\n\n                this.localExtensionRepository.installExtension(localExtension, namespace);\n                \n                this.observationManager.notify(new ExtensionUpgradedEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            } else {\n                this.extensionHandlerManager.install(localExtension, namespace);\n\n                this.localExtensionRepository.installExtension(localExtension, namespace);\n                \n                this.observationManager.notify(new ExtensionInstalledEvent(localExtension.getId()), localExtension,\n                    previousExtension);\n            }\n\n            return localExtension;\n        } finally {\n            notifyPopLevelProgress();\n        }\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testInstallAndUninstallExtension() throws Throwable\n    {\n        // actual test\n        LocalExtension localExtension = install(this.testArtifactId);\n\n        Assert.assertNotNull(localExtension);\n        Assert.assertNotNull(localExtension.getFile());\n        Assert.assertTrue(localExtension.getFile().exists());\n\n        getComponentManager().lookup(TestComponent.class);\n\n        try {\n            install(this.testArtifactId);\n            Assert.fail(\"installExtension should have failed\");\n        } catch (InstallException expected) {\n            // expected\n        }\n\n        uninstall(this.testArtifactId);\n\n        Assert.assertNull(this.localExtensionRepository.getInstalledExtension(this.testArtifactId.getId(), null));\n\n        try {\n            getComponentManager().lookup(TestComponent.class);\n            Assert.fail(\"the extension has not been uninstalled\");\n        } catch (ComponentLookupException expected) {\n            // expected\n        }\n    }","id":59696,"modified_method":"@Test\n    public void testInstallAndUninstallExtension() throws Throwable\n    {\n        // actual test\n        LocalExtension localExtension = install(this.testArtifactId);\n\n        Assert.assertNotNull(localExtension);\n        Assert.assertNotNull(localExtension.getFile());\n        Assert.assertTrue(localExtension.getFile().exists());\n\n        getComponentManager().lookup(TestComponent.class);\n\n        try {\n            install(this.testArtifactId);\n            Assert.fail(\"installExtension should have failed\");\n        } catch (InstallException expected) {\n            // expected\n        }\n\n        Assert.assertNotNull(localExtensionRepository.getInstalledExtension(\"feature\", null));\n\n        uninstall(this.testArtifactId);\n\n        Assert.assertNull(this.localExtensionRepository.getInstalledExtension(this.testArtifactId.getId(), null));\n\n        try {\n            getComponentManager().lookup(TestComponent.class);\n            Assert.fail(\"the extension has not been uninstalled\");\n        } catch (ComponentLookupException expected) {\n            // expected\n        }\n    }","commit_id":"434f0e1c4cf836e4d7b39afe7e7d9147d774016c","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Query bulidQuery(PatternRule rule) {\r\n    ArrayList<SpanQuery> list = new ArrayList<SpanQuery>();\r\n    int i = 0;\r\n    for (Element patternElement : rule.getElements()) {\r\n      SpanQuery termQuery = createSpanQuery(patternElement.getString(), \"\",\r\n          patternElement.getNegation(), patternElement.isRegularExpression());\r\n      SpanQuery posQuery = createSpanQuery(patternElement.getPOStag(),\r\n          LanguageToolFilter.POS_PREFIX, patternElement.getPOSNegation(),\r\n          patternElement.isPOStagRegularExpression());\r\n\r\n      if (termQuery != null && posQuery != null) {\r\n        SpanNearQuery q = new SpanNearQuery(new SpanQuery[] { termQuery, posQuery }, 0, false);\r\n        list.add(q);\r\n      } else if (termQuery != null) {\r\n        list.add(termQuery);\r\n      } else if (posQuery != null) {\r\n        list.add(posQuery);\r\n      } else {\r\n        i++;\r\n      }\r\n      i += patternElement.getSkipNext();\r\n\r\n    }\r\n\r\n    SpanNearQuery snq = new SpanNearQuery(list.toArray(new SpanQuery[list.size()]), i, true);\r\n    return snq;\r\n  }","id":59697,"modified_method":"public static Query bulidQuery(PatternRule rule) {\r\n    return next(rule.getElements().iterator());\r\n  }","commit_id":"e4088497d91948c5a4f5a955f2abddff0be29fd6","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"@NotNull\n  public Iterable<PyElement> iterateNames() {\n    return new ArrayIterable<PyElement>(getGlobals());\n  }","id":59698,"modified_method":"@NotNull\n  public Iterable<PyElement> iterateNames() {\n    return Arrays.<PyElement>asList(getGlobals());\n  }","commit_id":"7c6bf8991725ebeb729cbf6be3ccc518552541de","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public Iterable<PyElement> iterateNames() {\n    return new ArrayIterable<PyElement>(PyElement.EMPTY_ARRAY);\n  }","id":59699,"modified_method":"@NotNull\n  public Iterable<PyElement> iterateNames() {\n    return Collections.emptyList();\n  }","commit_id":"7c6bf8991725ebeb729cbf6be3ccc518552541de","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Iterator<PyExpression> iterator() {\n    return new ArrayIterator<PyExpression>(getElements());\n  }","id":59700,"modified_method":"public Iterator<PyExpression> iterator() {\n    return Arrays.<PyExpression>asList(getElements()).iterator();\n  }","commit_id":"7c6bf8991725ebeb729cbf6be3ccc518552541de","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getRecentList(java.lang.String, java.util.Set)\n     */\n    public LinkedHashMap<String, CmsContainerElement> getRecentList(String containerpageUri, Set<String> containerTypes)\n    throws CmsRpcException {\n\n        try {\n            return getListElementsData(getSessionCache().getRecentList(), containerpageUri, containerTypes);\n        } catch (Exception e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n    }","id":59701,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getRecentList(java.lang.String, java.util.Set)\n     */\n    public LinkedHashMap<String, CmsContainerElement> getRecentList(String containerpageUri, Set<String> containerTypes)\n    throws CmsRpcException {\n\n        LinkedHashMap<String, CmsContainerElement> result = null;\n        try {\n            result = getListElementsData(getSessionCache().getRecentList(), containerpageUri, containerTypes);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveFavoriteList(java.util.List)\n     */\n    public void saveFavoriteList(List<String> clientIds) throws CmsRpcException {\n\n        try {\n            OpenCms.getADEManager().saveFavoriteList(getCmsObject(), getCachedElements(clientIds));\n        } catch (CmsException e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59702,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveFavoriteList(java.util.List)\n     */\n    public void saveFavoriteList(List<String> clientIds) throws CmsRpcException {\n\n        try {\n            OpenCms.getADEManager().saveFavoriteList(getCmsObject(), getCachedElements(clientIds));\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getFavoriteList(java.lang.String, java.util.Set)\n     */\n    public LinkedHashMap<String, CmsContainerElement> getFavoriteList(\n        String containerpageUri,\n        Set<String> containerTypes) throws CmsRpcException {\n\n        try {\n            return getListElementsData(\n                OpenCms.getADEManager().getFavoriteList(getCmsObject()),\n                containerpageUri,\n                containerTypes);\n        } catch (Exception e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59703,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getFavoriteList(java.lang.String, java.util.Set)\n     */\n    public LinkedHashMap<String, CmsContainerElement> getFavoriteList(\n        String containerpageUri,\n        Set<String> containerTypes) throws CmsRpcException {\n\n        LinkedHashMap<String, CmsContainerElement> result = null;\n        try {\n            result = getListElementsData(\n                OpenCms.getADEManager().getFavoriteList(getCmsObject()),\n                containerpageUri,\n                containerTypes);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveContainerpage(java.lang.String, java.util.List)\n     */\n    public void saveContainerpage(String containerpageUri, List<CmsContainer> containers) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n\n        Iterator<CmsContainer> it = containers.iterator();\n\n        CmsADESessionCache cache = getSessionCache();\n        List<CmsContainerBean> containerBeans = new ArrayList<CmsContainerBean>();\n        while (it.hasNext()) {\n            CmsContainer container = it.next();\n            List<CmsContainerElementBean> elements = new ArrayList<CmsContainerElementBean>();\n            Iterator<String> elIt = container.getElements().iterator();\n            while (elIt.hasNext()) {\n                try {\n                    String clientId = elIt.next();\n                    CmsContainerElementBean element = cache.getCacheContainerElement(clientId);\n\n                    //TODO: check whether it is necessary to read the resource and the formatter again \n\n                    // make sure resource is readable, \n                    CmsResource resource = cms.readResource(element.getElementId());\n\n                    // check if there is a valid formatter\n                    I_CmsResourceType resType = OpenCms.getResourceManager().getResourceType(resource);\n                    String formatterUri = resType.getFormatterForContainerType(cms, resource, container.getType());\n                    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatterUri)) {\n                        CmsResource formatter = cms.readResource(formatterUri);\n                        elements.add(new CmsContainerElementBean(\n                            element.getElementId(),\n                            formatter.getStructureId(),\n                            element.getProperties()));\n                    }\n                } catch (Exception e) {\n                    log(e.getLocalizedMessage(), e);\n                }\n            }\n            containerBeans.add(new CmsContainerBean(container.getName(), container.getType(), -1, elements));\n        }\n\n        CmsContainerPageBean page = new CmsContainerPageBean(cms.getRequestContext().getLocale(), containerBeans);\n\n        try {\n            cms.lockResourceTemporary(containerpageUri);\n            CmsXmlContainerPage xmlCnt = CmsXmlContainerPageFactory.unmarshal(cms, cms.readFile(containerpageUri));\n            xmlCnt.save(cms, page);\n            cms.unlockResource(containerpageUri);\n        } catch (CmsException e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59704,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveContainerpage(java.lang.String, java.util.List)\n     */\n    public void saveContainerpage(String containerpageUri, List<CmsContainer> containers) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        try {\n            Iterator<CmsContainer> it = containers.iterator();\n\n            CmsADESessionCache cache = getSessionCache();\n            List<CmsContainerBean> containerBeans = new ArrayList<CmsContainerBean>();\n            while (it.hasNext()) {\n                CmsContainer container = it.next();\n                List<CmsContainerElementBean> elements = new ArrayList<CmsContainerElementBean>();\n                Iterator<String> elIt = container.getElements().iterator();\n                while (elIt.hasNext()) {\n                    try {\n                        String clientId = elIt.next();\n                        CmsContainerElementBean element = cache.getCacheContainerElement(clientId);\n\n                        //TODO: check whether it is necessary to read the resource and the formatter again \n\n                        // make sure resource is readable, \n                        CmsResource resource = cms.readResource(element.getElementId());\n\n                        // check if there is a valid formatter\n                        I_CmsResourceType resType = OpenCms.getResourceManager().getResourceType(resource);\n                        String formatterUri = resType.getFormatterForContainerType(cms, resource, container.getType());\n                        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(formatterUri)) {\n                            CmsResource formatter = cms.readResource(formatterUri);\n                            elements.add(new CmsContainerElementBean(\n                                element.getElementId(),\n                                formatter.getStructureId(),\n                                element.getProperties()));\n                        }\n                    } catch (Exception e) {\n                        log(e.getLocalizedMessage(), e);\n                    }\n                }\n                containerBeans.add(new CmsContainerBean(container.getName(), container.getType(), -1, elements));\n            }\n\n            CmsContainerPageBean page = new CmsContainerPageBean(cms.getRequestContext().getLocale(), containerBeans);\n\n            cms.lockResourceTemporary(containerpageUri);\n            CmsXmlContainerPage xmlCnt = CmsXmlContainerPageFactory.unmarshal(cms, cms.readFile(containerpageUri));\n            xmlCnt.save(cms, page);\n            cms.unlockResource(containerpageUri);\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getElementsData(java.lang.String, java.lang.String, java.util.Collection, java.util.Set)\n     */\n    public Map<String, CmsContainerElement> getElementsData(\n        String containerpageUri,\n        String reqParams,\n        Collection<String> clientIds,\n        Set<String> containerTypes) throws CmsRpcException {\n\n        try {\n            return getElements(clientIds, containerpageUri, containerTypes);\n        } catch (Exception e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59705,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#getElementsData(java.lang.String, java.lang.String, java.util.Collection, java.util.Set)\n     */\n    public Map<String, CmsContainerElement> getElementsData(\n        String containerpageUri,\n        String reqParams,\n        Collection<String> clientIds,\n        Set<String> containerTypes) throws CmsRpcException {\n\n        Map<String, CmsContainerElement> result = null;\n        try {\n            result = getElements(clientIds, containerpageUri, containerTypes);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#addToFavoriteList(java.lang.String)\n     */\n    public void addToFavoriteList(String clientId) throws CmsRpcException {\n\n        try {\n            CmsContainerElementBean element = getCachedElement(clientId);\n            List<CmsContainerElementBean> list = OpenCms.getADEManager().getFavoriteList(getCmsObject());\n            if (list.contains(element)) {\n                list.remove(list.indexOf(element));\n            }\n            list.add(0, element);\n            OpenCms.getADEManager().saveFavoriteList(getCmsObject(), list);\n        } catch (Exception e) {\n            log(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59706,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#addToFavoriteList(java.lang.String)\n     */\n    public void addToFavoriteList(String clientId) throws CmsRpcException {\n\n        try {\n            CmsContainerElementBean element = getCachedElement(clientId);\n            List<CmsContainerElementBean> list = OpenCms.getADEManager().getFavoriteList(getCmsObject());\n            if (list.contains(element)) {\n                list.remove(list.indexOf(element));\n            }\n            list.add(0, element);\n            OpenCms.getADEManager().saveFavoriteList(getCmsObject(), list);\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveRecentList(java.util.List)\n     */\n    public void saveRecentList(List<String> clientIds) {\n\n        getSessionCache().setCacheRecentList(getCachedElements(clientIds));\n\n    }","id":59707,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#saveRecentList(java.util.List)\n     */\n    public void saveRecentList(List<String> clientIds) throws CmsRpcException {\n\n        try {\n            getSessionCache().setCacheRecentList(getCachedElements(clientIds));\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#addToRecentList(java.lang.String)\n     */\n    public void addToRecentList(String clientId) {\n\n        CmsContainerElementBean element = getCachedElement(clientId);\n        List<CmsContainerElementBean> list = getSessionCache().getRecentList();\n        if (list.contains(element)) {\n            list.remove(list.indexOf(element));\n        }\n        list.add(0, element);\n    }","id":59708,"modified_method":"/**\n     * @see org.opencms.ade.containerpage.shared.rpc.I_CmsContainerpageService#addToRecentList(java.lang.String)\n     */\n    public void addToRecentList(String clientId) throws CmsRpcException {\n\n        try {\n            CmsContainerElementBean element = getCachedElement(clientId);\n            List<CmsContainerElementBean> list = getSessionCache().getRecentList();\n            if (list.contains(element)) {\n                list.remove(list.indexOf(element));\n            }\n            list.add(0, element);\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.shared.rpc.I_CmsCoreService#unlock(java.lang.String)\n     */\n    public String unlock(String uri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        try {\n            cms.unlockResource(uri);\n        } catch (CmsException e) {\n            return e.getLocalizedMessage(OpenCms.getWorkplaceManager().getWorkplaceLocale(cms));\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n        return null;\n    }","id":59709,"modified_method":"/**\n     * @see org.opencms.gwt.shared.rpc.I_CmsCoreService#unlock(java.lang.String)\n     */\n    public String unlock(String uri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        try {\n            cms.unlockResource(uri);\n        } catch (CmsException e) {\n            return e.getLocalizedMessage(OpenCms.getWorkplaceManager().getWorkplaceLocale(cms));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return null;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.shared.rpc.I_CmsCoreService#lock(java.lang.String)\n     */\n    public String lock(String uri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        try {\n            cms.lockResource(uri);\n        } catch (CmsException e) {\n            return e.getLocalizedMessage(OpenCms.getWorkplaceManager().getWorkplaceLocale(cms));\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n        return null;\n    }","id":59710,"modified_method":"/**\n     * @see org.opencms.gwt.shared.rpc.I_CmsCoreService#lock(java.lang.String)\n     */\n    public String lock(String uri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        try {\n            cms.lockResource(uri);\n        } catch (CmsException e) {\n            return e.getLocalizedMessage(OpenCms.getWorkplaceManager().getWorkplaceLocale(cms));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return null;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getCriteriaLists(java.util.ArrayList)\n     */\n    public CmsGalleryInfoBean getCriteriaLists(ArrayList<String> tabs) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setDialogInfo(buildSearchParamsLists(tabs));\n            return gInfoBean;\n        } catch (Throwable e) {\n            // should never happen\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n    }","id":59711,"modified_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getCriteriaLists(java.util.ArrayList)\n     */\n    public CmsGalleryInfoBean getCriteriaLists(ArrayList<String> tabs) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setDialogInfo(buildSearchParamsLists(tabs));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return gInfoBean;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/** \n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getInitialSearch(org.opencms.ade.galleries.shared.CmsGallerySearchObject)\n     */\n    public CmsGalleryInfoBean getInitialSearch(CmsGallerySearchObject searchObj) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setSearchObject(buildInitialSearch(searchObj));\n            return gInfoBean;\n        } catch (Throwable e) {\n            // should never happen\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n    }","id":59712,"modified_method":"/** \n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getInitialSearch(org.opencms.ade.galleries.shared.CmsGallerySearchObject)\n     */\n    public CmsGalleryInfoBean getInitialSearch(CmsGallerySearchObject searchObj) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setSearchObject(buildInitialSearch(searchObj));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return gInfoBean;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Reads the resource-types for given resource-type-id's.<p>\n     * \n     * @param types the type-names\n     * @return the list of resource-types\n     */\n    // TODO: replace parameter with list\n    private List<I_CmsResourceType> readContentTypes(JSONArray types) {\n\n        List<I_CmsResourceType> result = new ArrayList<I_CmsResourceType>();\n        if ((types == null) || (types.length() == 0)) {\n            return result;\n        }\n        for (int i = 0; i < types.length(); i++) {\n            try {\n                result.add(getResourceManager().getResourceType(types.getString(i)));\n            } catch (CmsLoaderException e) {\n                // TODO: Improve error handling\n                if (LOG.isErrorEnabled()) {\n                    LOG.error(e.getLocalizedMessage(), e);\n                }\n            } catch (JSONException e) {\n                // TODO: Improve error handling\n                if (LOG.isErrorEnabled()) {\n                    LOG.error(e.getLocalizedMessage(), e);\n                }\n            }\n        }\n        return result;\n    }","id":59713,"modified_method":"/**\n     * Reads the resource-types for given resource-type-id's.<p>\n     * \n     * @param types the type-names\n     * @return the list of resource-types\n     */\n    // TODO: replace parameter with list\n    private List<I_CmsResourceType> readContentTypes(JSONArray types) {\n\n        List<I_CmsResourceType> result = new ArrayList<I_CmsResourceType>();\n        if ((types == null) || (types.length() == 0)) {\n            return result;\n        }\n        for (int i = 0; i < types.length(); i++) {\n            try {\n                result.add(getResourceManager().getResourceType(types.getString(i)));\n            } catch (Exception e) {\n                // TODO: Improve error handling\n                logError(e);\n            }\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Generates a list of available galleries for the given gallery-type.<p>\n     * \n     * @param galleryTypeId the gallery-type\n     * @return the list of galleries\n     */\n    private List<CmsResource> getGalleriesByType(int galleryTypeId) {\n\n        List<CmsResource> galleries = new ArrayList<CmsResource>();\n        try {\n            // get the galleries of the current site\n            galleries = getCmsObject().readResources(\n                \"/\",\n                CmsResourceFilter.ONLY_VISIBLE_NO_DELETED.addRequireType(galleryTypeId));\n        } catch (CmsException e) {\n            // error reading resources with filter\n            LOG.error(e.getLocalizedMessage(), e);\n        }\n\n        // if the current site is NOT the root site - add all other galleries from the system path\n        if (!getCmsObject().getRequestContext().getSiteRoot().equals(\"\")) {\n            List<CmsResource> systemGalleries = null;\n            try {\n                // get the galleries in the /system/ folder\n                systemGalleries = getCmsObject().readResources(\n                    CmsWorkplace.VFS_PATH_SYSTEM,\n                    CmsResourceFilter.ONLY_VISIBLE_NO_DELETED.addRequireType(galleryTypeId));\n            } catch (CmsException e) {\n                // error reading resources with filter\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n\n            if ((systemGalleries != null) && (systemGalleries.size() > 0)) {\n                // add the found system galleries to the result\n                galleries.addAll(systemGalleries);\n            }\n        }\n\n        return galleries;\n    }","id":59714,"modified_method":"/**\n     * Generates a list of available galleries for the given gallery-type.<p>\n     * \n     * @param galleryTypeId the gallery-type\n     * @return the list of galleries\n     */\n    private List<CmsResource> getGalleriesByType(int galleryTypeId) {\n\n        List<CmsResource> galleries = new ArrayList<CmsResource>();\n        try {\n            // get the galleries of the current site\n            galleries = getCmsObject().readResources(\n                \"/\",\n                CmsResourceFilter.ONLY_VISIBLE_NO_DELETED.addRequireType(galleryTypeId));\n        } catch (CmsException e) {\n            // error reading resources with filter\n            logError(e);\n        }\n\n        // if the current site is NOT the root site - add all other galleries from the system path\n        if (!getCmsObject().getRequestContext().getSiteRoot().equals(\"\")) {\n            List<CmsResource> systemGalleries = null;\n            try {\n                // get the galleries in the /system/ folder\n                systemGalleries = getCmsObject().readResources(\n                    CmsWorkplace.VFS_PATH_SYSTEM,\n                    CmsResourceFilter.ONLY_VISIBLE_NO_DELETED.addRequireType(galleryTypeId));\n            } catch (CmsException e) {\n                // error reading resources with filter\n                logError(e);\n            }\n\n            if ((systemGalleries != null) && (systemGalleries.size() > 0)) {\n                // add the found system galleries to the result\n                galleries.addAll(systemGalleries);\n            }\n        }\n\n        return galleries;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the available resource type names.<p>\n     * \n     * @return the resource type names\n     */\n    private JSONArray getResourceTypeNames() {\n\n        if (m_resourceTypeNames == null) {\n            try {\n                JSONObject data = CmsGalleryProvider.get().getData(getRequest());\n                String typesString = data.optString(I_CmsGalleryProviderConstants.ReqParam.types.name());\n                String[] typesArray = CmsStringUtil.splitAsArray(typesString, \",\");\n                m_resourceTypeNames = new JSONArray(typesArray);\n            } catch (JSONException e) {\n                // TODO: improve error handling\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n            if ((m_resourceTypeNames == null) || (m_resourceTypeNames.length() == 0)) {\n                // using all available types if typeNames is null or empty\n                m_resourceTypes = getResourceManager().getResourceTypes();\n                m_resourceTypeNames = new JSONArray();\n                for (I_CmsResourceType type : m_resourceTypes) {\n                    m_resourceTypeNames.put(type.getTypeName());\n                }\n            }\n        }\n        return m_resourceTypeNames;\n    }","id":59715,"modified_method":"/**\n     * Returns the available resource type names.<p>\n     * \n     * @return the resource type names\n     */\n    private JSONArray getResourceTypeNames() {\n\n        if (m_resourceTypeNames == null) {\n            try {\n                JSONObject data = CmsGalleryProvider.get().getData(getRequest());\n                String typesString = data.optString(I_CmsGalleryProviderConstants.ReqParam.types.name());\n                String[] typesArray = CmsStringUtil.splitAsArray(typesString, \",\");\n                m_resourceTypeNames = new JSONArray(typesArray);\n            } catch (JSONException e) {\n                // TODO: improve error handling\n                logError(e);\n            }\n            if ((m_resourceTypeNames == null) || (m_resourceTypeNames.length() == 0)) {\n                // using all available types if typeNames is null or empty\n                m_resourceTypes = getResourceManager().getResourceTypes();\n                m_resourceTypeNames = new JSONArray();\n                for (I_CmsResourceType type : m_resourceTypes) {\n                    m_resourceTypeNames.put(type.getTypeName());\n                }\n            }\n        }\n        return m_resourceTypeNames;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the map with given categories.<p>\n     * \n     * The map uses category path as the key and stores the CmsCategoriesListInfoBean as the value.\n     * \n     * @param categories the categories\n     * @return the map with categories\n     */\n    private LinkedHashMap<String, CmsCategoriesListInfoBean> buildCategoriesList(List<CmsCategory> categories) {\n\n        LinkedHashMap<String, CmsCategoriesListInfoBean> map = new LinkedHashMap<String, CmsCategoriesListInfoBean>();\n        if ((categories == null) || (categories.size() == 0)) {\n            return map;\n        }\n        // the next lines sort the categories according to their path \n        Map<String, CmsCategory> sorted = new TreeMap<String, CmsCategory>();\n\n        Iterator<CmsCategory> i = categories.iterator();\n        while (i.hasNext()) {\n            CmsCategory category = i.next();\n            String categoryPath = category.getPath();\n            if (sorted.get(categoryPath) != null) {\n                continue;\n            }\n            sorted.put(categoryPath, category);\n        }\n\n        List<CmsCategory> sortedCategories = new ArrayList<CmsCategory>(sorted.values());\n\n        i = sortedCategories.iterator();\n        while (i.hasNext()) {\n            CmsCategory cat = i.next();\n            CmsCategoriesListInfoBean bean = new CmsCategoriesListInfoBean();\n            try {\n                // 1: category path as id\n                bean.setId(cat.getPath());\n                // 2: category title\n                bean.setTitle(cat.getTitle());\n                // 3: category path\n                bean.setSubTitle(cat.getPath());\n                // 4: category root path\n                bean.setRootPath(cat.getRootPath());\n                // 5: category level                \n                int level = CmsResource.getPathLevel(cat.getPath());\n                bean.setLevel(level);\n                // 6: set icon path \n                String iconPath = CmsWorkplace.getResourceUri(CmsWorkplace.RES_PATH_FILETYPES\n                    + OpenCms.getWorkplaceManager().getExplorerTypeSetting(CmsResourceTypeFolder.RESOURCE_TYPE_NAME).getIcon());\n                bean.setIconResource(iconPath);\n                map.put(cat.getPath(), bean);\n            } catch (Exception e) {\n                // TODO: Improve error handling\n                if (LOG.isErrorEnabled()) {\n                    LOG.error(e.getLocalizedMessage(), e);\n                }\n            }\n        }\n        return map;\n    }","id":59716,"modified_method":"/**\n     * Returns the map with given categories.<p>\n     * \n     * The map uses category path as the key and stores the CmsCategoriesListInfoBean as the value.\n     * \n     * @param categories the categories\n     * @return the map with categories\n     */\n    private LinkedHashMap<String, CmsCategoriesListInfoBean> buildCategoriesList(List<CmsCategory> categories) {\n\n        LinkedHashMap<String, CmsCategoriesListInfoBean> map = new LinkedHashMap<String, CmsCategoriesListInfoBean>();\n        if ((categories == null) || (categories.size() == 0)) {\n            return map;\n        }\n        // the next lines sort the categories according to their path \n        Map<String, CmsCategory> sorted = new TreeMap<String, CmsCategory>();\n\n        Iterator<CmsCategory> i = categories.iterator();\n        while (i.hasNext()) {\n            CmsCategory category = i.next();\n            String categoryPath = category.getPath();\n            if (sorted.get(categoryPath) != null) {\n                continue;\n            }\n            sorted.put(categoryPath, category);\n        }\n\n        List<CmsCategory> sortedCategories = new ArrayList<CmsCategory>(sorted.values());\n\n        i = sortedCategories.iterator();\n        while (i.hasNext()) {\n            CmsCategory cat = i.next();\n            CmsCategoriesListInfoBean bean = new CmsCategoriesListInfoBean();\n            try {\n                // 1: category path as id\n                bean.setId(cat.getPath());\n                // 2: category title\n                bean.setTitle(cat.getTitle());\n                // 3: category path\n                bean.setSubTitle(cat.getPath());\n                // 4: category root path\n                bean.setRootPath(cat.getRootPath());\n                // 5: category level                \n                int level = CmsResource.getPathLevel(cat.getPath());\n                bean.setLevel(level);\n                // 6: set icon path \n                String iconPath = CmsWorkplace.getResourceUri(CmsWorkplace.RES_PATH_FILETYPES\n                    + OpenCms.getWorkplaceManager().getExplorerTypeSetting(CmsResourceTypeFolder.RESOURCE_TYPE_NAME).getIcon());\n                bean.setIconResource(iconPath);\n                map.put(cat.getPath(), bean);\n            } catch (Exception e) {\n                // TODO: Improve error handling\n                logError(e);\n            }\n        }\n        return map;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the search object containing the list with search results and the path to the specified resource.<p>\n     * \n     * @param resourceName the given resource\n     * @param initialSearchObj the initial search object\n     * \n     * @return the gallery search object containing the current search parameter and the search result list\n     */\n    private CmsGallerySearchObject findResourceInGallery(String resourceName, CmsGallerySearchObject initialSearchObj) {\n\n        CmsResource resource = null;\n        CmsProperty locale = CmsProperty.getNullProperty();\n        try {\n            resource = getCmsObject().readResource(resourceName);\n            locale = getCmsObject().readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_LOCALE, true);\n        } catch (CmsException e) {\n            LOG.warn(e.getLocalizedMessage(), e);\n        }\n        CmsGallerySearchObject searchObj = new CmsGallerySearchObject(initialSearchObj);\n        if (resource == null) {\n            return searchObj;\n        }\n\n        // prepare the search object\n        String rootPath = resource.getRootPath();\n        ArrayList<String> types = new ArrayList<String>();\n        types.add(String.valueOf(resource.getTypeId()));\n        searchObj.setTypes(types);\n\n        ArrayList<String> galleries = new ArrayList<String>();\n        galleries.add(CmsResource.getFolderPath(resourceName));\n        searchObj.setGalleries(galleries);\n        searchObj.setSortOrder(CmsGallerySearchParameters.CmsGallerySortParam.DEFAULT.toString());\n        if (!locale.isNullProperty()) {\n            searchObj.setLocale(locale.getValue());\n        }\n        int currentPage = 1;\n        boolean found = false;\n        searchObj.setPage(currentPage);\n        CmsGallerySearchParameters params = prepareSearchParams(searchObj);\n        CmsGallerySearch searchBean = new CmsGallerySearch();\n        searchBean.init(getCmsObject());\n        searchBean.setIndex(ADVANCED_GALLERY_INDEX);\n\n        CmsGallerySearchResultList searchResults = null;\n        while (!found) {\n            params.setResultPage(currentPage);\n            searchResults = searchBean.getResult(params);\n            Iterator<CmsGallerySearchResult> resultsIt = searchResults.listIterator();\n            while (resultsIt.hasNext()) {\n                CmsGallerySearchResult searchResult = resultsIt.next();\n                if (searchResult.getPath().equals(rootPath)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found && (searchResults.getHitCount() / (currentPage * params.getMatchesPerPage()) >= 1)) {\n                currentPage++;\n            } else {\n                break;\n            }\n        }\n        CmsGallerySearchObject searchResultsObj = new CmsGallerySearchObject();\n        if (found && (searchResults != null)) {\n            searchResultsObj.setSortOrder(params.getSortOrder().name());\n            searchResultsObj.setResultCount(searchResults.getHitCount());\n            searchResultsObj.setPage(params.getResultPage());\n            searchResultsObj.setResults(buildSearchResultList(searchResults));\n            searchResultsObj.setPage(currentPage);\n            searchResultsObj.setTabId(I_CmsGalleryProviderConstants.GalleryTabId.cms_tab_results.name());\n        }\n        return searchResultsObj;\n    }","id":59717,"modified_method":"/**\n     * Returns the search object containing the list with search results and the path to the specified resource.<p>\n     * \n     * @param resourceName the given resource\n     * @param initialSearchObj the initial search object\n     * \n     * @return the gallery search object containing the current search parameter and the search result list\n     */\n    private CmsGallerySearchObject findResourceInGallery(String resourceName, CmsGallerySearchObject initialSearchObj) {\n\n        CmsResource resource = null;\n        CmsProperty locale = CmsProperty.getNullProperty();\n        try {\n            resource = getCmsObject().readResource(resourceName);\n            locale = getCmsObject().readPropertyObject(resource, CmsPropertyDefinition.PROPERTY_LOCALE, true);\n        } catch (CmsException e) {\n            logError(e);\n        }\n        CmsGallerySearchObject searchObj = new CmsGallerySearchObject(initialSearchObj);\n        if (resource == null) {\n            return searchObj;\n        }\n\n        // prepare the search object\n        String rootPath = resource.getRootPath();\n        ArrayList<String> types = new ArrayList<String>();\n        types.add(String.valueOf(resource.getTypeId()));\n        searchObj.setTypes(types);\n\n        ArrayList<String> galleries = new ArrayList<String>();\n        galleries.add(CmsResource.getFolderPath(resourceName));\n        searchObj.setGalleries(galleries);\n        searchObj.setSortOrder(CmsGallerySearchParameters.CmsGallerySortParam.DEFAULT.toString());\n        if (!locale.isNullProperty()) {\n            searchObj.setLocale(locale.getValue());\n        }\n        int currentPage = 1;\n        boolean found = false;\n        searchObj.setPage(currentPage);\n        CmsGallerySearchParameters params = prepareSearchParams(searchObj);\n        CmsGallerySearch searchBean = new CmsGallerySearch();\n        searchBean.init(getCmsObject());\n        searchBean.setIndex(ADVANCED_GALLERY_INDEX);\n\n        CmsGallerySearchResultList searchResults = null;\n        while (!found) {\n            params.setResultPage(currentPage);\n            searchResults = searchBean.getResult(params);\n            Iterator<CmsGallerySearchResult> resultsIt = searchResults.listIterator();\n            while (resultsIt.hasNext()) {\n                CmsGallerySearchResult searchResult = resultsIt.next();\n                if (searchResult.getPath().equals(rootPath)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found && (searchResults.getHitCount() / (currentPage * params.getMatchesPerPage()) >= 1)) {\n                currentPage++;\n            } else {\n                break;\n            }\n        }\n        CmsGallerySearchObject searchResultsObj = new CmsGallerySearchObject();\n        if (found && (searchResults != null)) {\n            searchResultsObj.setSortOrder(params.getSortOrder().name());\n            searchResultsObj.setResultCount(searchResults.getHitCount());\n            searchResultsObj.setPage(params.getResultPage());\n            searchResultsObj.setResults(buildSearchResultList(searchResults));\n            searchResultsObj.setPage(currentPage);\n            searchResultsObj.setTabId(I_CmsGalleryProviderConstants.GalleryTabId.cms_tab_results.name());\n        }\n        return searchResultsObj;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Generates a list of all available CmsCategory obejcts.<p>\n     * \n     * @param galleries the galleries\n     * @return a list of categories\n     */\n    private List<CmsCategory> readCategories(List<CmsResource> galleries) {\n\n        CmsCategoryService catService = CmsCategoryService.getInstance();\n        List<String> repositories = new ArrayList<String>();\n        if ((galleries != null) && !galleries.isEmpty()) {\n            Iterator<CmsResource> iGalleries = galleries.iterator();\n\n            while (iGalleries.hasNext()) {\n                CmsResource res = iGalleries.next();\n                repositories.addAll(catService.getCategoryRepositories(getCmsObject(), getCmsObject().getSitePath(res)));\n            }\n        } else {\n            repositories.add(CmsCategoryService.CENTRALIZED_REPOSITORY);\n        }\n        List<CmsCategory> categories = null;\n        try {\n            categories = catService.readCategoriesForRepositories(getCmsObject(), \"\", true, repositories);\n        } catch (CmsException e) {\n            // error reading categories\n            LOG.error(e.getLocalizedMessage(), e);\n        }\n        return categories;\n    }","id":59718,"modified_method":"/**\n     * Generates a list of all available CmsCategory obejcts.<p>\n     * \n     * @param galleries the galleries\n     * @return a list of categories\n     */\n    private List<CmsCategory> readCategories(List<CmsResource> galleries) {\n\n        CmsCategoryService catService = CmsCategoryService.getInstance();\n        List<String> repositories = new ArrayList<String>();\n        if ((galleries != null) && !galleries.isEmpty()) {\n            Iterator<CmsResource> iGalleries = galleries.iterator();\n\n            while (iGalleries.hasNext()) {\n                CmsResource res = iGalleries.next();\n                repositories.addAll(catService.getCategoryRepositories(getCmsObject(), getCmsObject().getSitePath(res)));\n            }\n        } else {\n            repositories.add(CmsCategoryService.CENTRALIZED_REPOSITORY);\n        }\n        List<CmsCategory> categories = null;\n        try {\n            categories = catService.readCategoriesForRepositories(getCmsObject(), \"\", true, repositories);\n        } catch (CmsException e) {\n            // error reading categories\n            logError(e);\n        }\n        return categories;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the map with the available galleries.<p>\n     * \n     * The map uses gallery path as teh key and stores the CmsGalleriesListInfoBean as the value.\n     * \n     * @param galleryTypes the galleries\n     * @return the map with gallery info beans\n     */\n    private LinkedHashMap<String, CmsGalleriesListInfoBean> buildGalleriesList(\n        Map<String, CmsGalleryTypeInfo> galleryTypes) {\n\n        LinkedHashMap<String, CmsGalleriesListInfoBean> map = new LinkedHashMap<String, CmsGalleriesListInfoBean>();\n        if (galleryTypes == null) {\n            return map;\n        }\n        Iterator<Entry<String, CmsGalleryTypeInfo>> iGalleryTypes = galleryTypes.entrySet().iterator();\n        while (iGalleryTypes.hasNext()) {\n            Entry<String, CmsGalleryTypeInfo> ent = iGalleryTypes.next();\n            CmsGalleryTypeInfo tInfo = ent.getValue();\n            String iconPath = CmsWorkplace.getResourceUri(CmsWorkplace.RES_PATH_FILETYPES\n                + OpenCms.getWorkplaceManager().getExplorerTypeSetting(tInfo.getResourceType().getTypeName()).getIcon());\n            ArrayList<String> contentTypes = new ArrayList<String>();\n            Iterator<I_CmsResourceType> it = tInfo.getContentTypes().iterator();\n            while (it.hasNext()) {\n                contentTypes.add(String.valueOf(it.next().getTypeName()));\n            }\n            Iterator<CmsResource> ir = tInfo.getGalleries().iterator();\n            while (ir.hasNext()) {\n                CmsResource res = ir.next();\n                CmsGalleriesListInfoBean bean = new CmsGalleriesListInfoBean();\n                String sitePath = getCmsObject().getSitePath(res);\n                String title = \"\";\n                try {\n                    // read the gallery title\n                    title = getCmsObject().readPropertyObject(sitePath, CmsPropertyDefinition.PROPERTY_TITLE, false).getValue(\n                        \"\");\n                } catch (CmsException e) {\n                    // error reading title property\n                    if (LOG.isErrorEnabled()) {\n                        LOG.error(e.getLocalizedMessage(), e);\n                    }\n                }\n                // 1: sitepath as gallery id \n                bean.setId(sitePath);\n                // TODO: set the resource\n                //CmsFormatterInfoBean formatterInfo = new CmsFormatterInfoBean(tInfo.getResourceType(), false);\n                //formatterInfo.setResource(res);\n                // 2: content types\n                bean.setContentTypes(contentTypes);\n                // 3: title\n                bean.setTitle(title);\n                // 4: gallery path as sub title            \n                bean.setSubTitle(sitePath);\n                // 5: gallery icon\n                bean.setIconResource(iconPath);\n                // 6: gallery type name\n                bean.setGalleryTypeName(tInfo.getResourceType().getTypeName());\n\n                // TODO:: active flag\n                //jsonObj.put(ItemKey.gallerytypeid.toString(), tInfo.getResourceType().getTypeId());\n\n                map.put(sitePath, bean);\n            }\n        }\n        return map;\n    }","id":59719,"modified_method":"/**\n     * Returns the map with the available galleries.<p>\n     * \n     * The map uses gallery path as teh key and stores the CmsGalleriesListInfoBean as the value.\n     * \n     * @param galleryTypes the galleries\n     * @return the map with gallery info beans\n     */\n    private LinkedHashMap<String, CmsGalleriesListInfoBean> buildGalleriesList(\n        Map<String, CmsGalleryTypeInfo> galleryTypes) {\n\n        LinkedHashMap<String, CmsGalleriesListInfoBean> map = new LinkedHashMap<String, CmsGalleriesListInfoBean>();\n        if (galleryTypes == null) {\n            return map;\n        }\n        Iterator<Entry<String, CmsGalleryTypeInfo>> iGalleryTypes = galleryTypes.entrySet().iterator();\n        while (iGalleryTypes.hasNext()) {\n            Entry<String, CmsGalleryTypeInfo> ent = iGalleryTypes.next();\n            CmsGalleryTypeInfo tInfo = ent.getValue();\n            String iconPath = CmsWorkplace.getResourceUri(CmsWorkplace.RES_PATH_FILETYPES\n                + OpenCms.getWorkplaceManager().getExplorerTypeSetting(tInfo.getResourceType().getTypeName()).getIcon());\n            ArrayList<String> contentTypes = new ArrayList<String>();\n            Iterator<I_CmsResourceType> it = tInfo.getContentTypes().iterator();\n            while (it.hasNext()) {\n                contentTypes.add(String.valueOf(it.next().getTypeName()));\n            }\n            Iterator<CmsResource> ir = tInfo.getGalleries().iterator();\n            while (ir.hasNext()) {\n                CmsResource res = ir.next();\n                CmsGalleriesListInfoBean bean = new CmsGalleriesListInfoBean();\n                String sitePath = getCmsObject().getSitePath(res);\n                String title = \"\";\n                try {\n                    // read the gallery title\n                    title = getCmsObject().readPropertyObject(sitePath, CmsPropertyDefinition.PROPERTY_TITLE, false).getValue(\n                        \"\");\n                } catch (CmsException e) {\n                    // error reading title property\n                    logError(e);\n                }\n                // 1: sitepath as gallery id \n                bean.setId(sitePath);\n                // TODO: set the resource\n                //CmsFormatterInfoBean formatterInfo = new CmsFormatterInfoBean(tInfo.getResourceType(), false);\n                //formatterInfo.setResource(res);\n                // 2: content types\n                bean.setContentTypes(contentTypes);\n                // 3: title\n                bean.setTitle(title);\n                // 4: gallery path as sub title            \n                bean.setSubTitle(sitePath);\n                // 5: gallery icon\n                bean.setIconResource(iconPath);\n                // 6: gallery type name\n                bean.setGalleryTypeName(tInfo.getResourceType().getTypeName());\n\n                // TODO:: active flag\n                //jsonObj.put(ItemKey.gallerytypeid.toString(), tInfo.getResourceType().getTypeId());\n\n                map.put(sitePath, bean);\n            }\n        }\n        return map;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the list of beans for the given search results.<p>\n     * \n     * @param searchResult the list of search results\n     * \n     * @return the list with the current search results\n     */\n    private ArrayList<CmsResultsListInfoBean> buildSearchResultList(List<CmsGallerySearchResult> searchResult) {\n\n        ArrayList<CmsResultsListInfoBean> list = new ArrayList<CmsResultsListInfoBean>();\n        if ((searchResult == null) || (searchResult.size() == 0)) {\n            return list;\n        }\n        Iterator<CmsGallerySearchResult> iSearchResult = searchResult.iterator();\n        while (iSearchResult.hasNext()) {\n            try {\n                Locale wpLocale = getWorkplaceLocale();\n                CmsGallerySearchResult sResult = iSearchResult.next();\n                CmsResultsListInfoBean bean = new CmsResultsListInfoBean();\n                String path = sResult.getPath();\n                path = getCmsObject().getRequestContext().removeSiteRoot(path);\n                String fileIcon = getFileIconName(path);\n                String iconPath = CmsWorkplace.RES_PATH_FILETYPES;\n                if (CmsStringUtil.isEmptyOrWhitespaceOnly(fileIcon)) {\n                    iconPath += OpenCms.getWorkplaceManager().getExplorerTypeSetting(sResult.getResourceType()).getIcon();\n                } else {\n                    iconPath += \"mimetype/\" + fileIcon;\n                }\n                iconPath = CmsWorkplace.getResourceUri(iconPath);\n\n                // 1: resource path as id\n                bean.setId(path);\n                // 2: title\n                bean.setTitle(sResult.getTitle());\n                // 3: resource type\n                bean.setResourceType(sResult.getResourceType());\n                // 4: icon path\n                bean.setIconResource(iconPath);\n                // TODO: set following infos if required: date last modified, description, structured id\n\n                // set nice resource type name as subtitle\n                I_CmsResourceType type = OpenCms.getResourceManager().getResourceType(sResult.getResourceType());\n                bean.setSubTitle(CmsWorkplaceMessages.getResourceTypeName(wpLocale, type.getTypeName()));\n\n                // TODO: only add excerpt if not empty\n                // if (!CmsStringUtil.isEmptyOrWhitespaceOnly(sResult.getExcerpt())) {\n                //      formatterInfo.addAdditionalInfo(EXCERPT_FIELD_NAME, OpenCms.getWorkplaceManager().getMessages(\n                //      wpLocale).key(Messages.GUI_LABEL_EXCERPT), sResult.getExcerpt());\n                // }\n                list.add(bean);\n            } catch (Exception e) {\n                // TODO: Improve error handling\n                if (LOG.isErrorEnabled()) {\n                    LOG.error(e.getLocalizedMessage(), e);\n                }\n            }\n        }\n        return list;\n    }","id":59720,"modified_method":"/**\n     * Returns the list of beans for the given search results.<p>\n     * \n     * @param searchResult the list of search results\n     * \n     * @return the list with the current search results\n     */\n    private ArrayList<CmsResultsListInfoBean> buildSearchResultList(List<CmsGallerySearchResult> searchResult) {\n\n        ArrayList<CmsResultsListInfoBean> list = new ArrayList<CmsResultsListInfoBean>();\n        if ((searchResult == null) || (searchResult.size() == 0)) {\n            return list;\n        }\n        Iterator<CmsGallerySearchResult> iSearchResult = searchResult.iterator();\n        while (iSearchResult.hasNext()) {\n            try {\n                Locale wpLocale = getWorkplaceLocale();\n                CmsGallerySearchResult sResult = iSearchResult.next();\n                CmsResultsListInfoBean bean = new CmsResultsListInfoBean();\n                String path = sResult.getPath();\n                path = getCmsObject().getRequestContext().removeSiteRoot(path);\n                String fileIcon = getFileIconName(path);\n                String iconPath = CmsWorkplace.RES_PATH_FILETYPES;\n                if (CmsStringUtil.isEmptyOrWhitespaceOnly(fileIcon)) {\n                    iconPath += OpenCms.getWorkplaceManager().getExplorerTypeSetting(sResult.getResourceType()).getIcon();\n                } else {\n                    iconPath += \"mimetype/\" + fileIcon;\n                }\n                iconPath = CmsWorkplace.getResourceUri(iconPath);\n\n                // 1: resource path as id\n                bean.setId(path);\n                // 2: title\n                bean.setTitle(sResult.getTitle());\n                // 3: resource type\n                bean.setResourceType(sResult.getResourceType());\n                // 4: icon path\n                bean.setIconResource(iconPath);\n                // TODO: set following infos if required: date last modified, description, structured id\n\n                // set nice resource type name as subtitle\n                I_CmsResourceType type = OpenCms.getResourceManager().getResourceType(sResult.getResourceType());\n                bean.setSubTitle(CmsWorkplaceMessages.getResourceTypeName(wpLocale, type.getTypeName()));\n\n                // TODO: only add excerpt if not empty\n                // if (!CmsStringUtil.isEmptyOrWhitespaceOnly(sResult.getExcerpt())) {\n                //      formatterInfo.addAdditionalInfo(EXCERPT_FIELD_NAME, OpenCms.getWorkplaceManager().getMessages(\n                //      wpLocale).key(Messages.GUI_LABEL_EXCERPT), sResult.getExcerpt());\n                // }\n                list.add(bean);\n            } catch (Exception e) {\n                // TODO: Improve error handling\n                logError(e);\n            }\n        }\n        return list;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the current search object containing the initial search results.<p>\n     * \n     * These could be the list of search results specified by the provided search object or \n     * a list of search results containing a specific resource, which was previously selected. \n     * The path to the selected resource is provided by the search object.\n     * \n     * @param initialSearch the search object with parameters for the initial search\n     * @return the search object containing the results of the initial search\n     */\n    private CmsGallerySearchObject buildInitialSearch(CmsGallerySearchObject initialSearch) {\n\n        CmsGallerySearchObject searchObj = new CmsGallerySearchObject();\n        try {\n            String resourcePath = initialSearch.getResourcePath();\n            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(resourcePath)) {\n                CmsSitemapEntry entry = OpenCms.getSitemapManager().getEntryForUri(getCmsObject(), resourcePath);\n                if (entry.isSitemap()) {\n                    //TODO: put the sitemap parameter in results\n                    //result.put(ResponseKey.sitemap.name(), buildJSONForSitemap(resourcePath, null, null, true));\n                } else {\n                    // get search results given resource path\n                    searchObj = findResourceInGallery(resourcePath, initialSearch);\n                }\n            } else {\n                // search with the initial search\n                searchObj = search(initialSearch);\n            }\n            return searchObj;\n        } catch (Exception e) {\n            // TODO: improve error handling\n            LOG.error(e.getLocalizedMessage(), e);\n        }\n        return searchObj;\n    }","id":59721,"modified_method":"/**\n     * Returns the current search object containing the initial search results.<p>\n     * \n     * These could be the list of search results specified by the provided search object or \n     * a list of search results containing a specific resource, which was previously selected. \n     * The path to the selected resource is provided by the search object.\n     * \n     * @param initialSearch the search object with parameters for the initial search\n     * @return the search object containing the results of the initial search\n     */\n    private CmsGallerySearchObject buildInitialSearch(CmsGallerySearchObject initialSearch) {\n\n        CmsGallerySearchObject searchObj = new CmsGallerySearchObject();\n        try {\n            String resourcePath = initialSearch.getResourcePath();\n            if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(resourcePath)) {\n                CmsSitemapEntry entry = OpenCms.getSitemapManager().getEntryForUri(getCmsObject(), resourcePath);\n                if (entry.isSitemap()) {\n                    //TODO: put the sitemap parameter in results\n                    //result.put(ResponseKey.sitemap.name(), buildJSONForSitemap(resourcePath, null, null, true));\n                } else {\n                    // get search results given resource path\n                    searchObj = findResourceInGallery(resourcePath, initialSearch);\n                }\n            } else {\n                // search with the initial search\n                searchObj = search(initialSearch);\n            }\n            return searchObj;\n        } catch (Exception e) {\n            // TODO: improve error handling\n            logError(e);\n        }\n        return searchObj;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getInitialSettings(ArrayList, CmsGallerySearchObject, String)\n     */\n    public CmsGalleryInfoBean getInitialSettings(\n        ArrayList<String> tabs,\n        CmsGallerySearchObject searchObj,\n        String dialogMode) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setDialogInfo(buildSearchParamsLists(tabs));\n            gInfoBean.setSearchObject(buildInitialSearch(searchObj));\n            gInfoBean.setDialogMode(dialogMode);\n            return gInfoBean;\n        } catch (Throwable e) {\n            // should never happen\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n\n    }","id":59722,"modified_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getInitialSettings(ArrayList, CmsGallerySearchObject, String)\n     */\n    public CmsGalleryInfoBean getInitialSettings(\n        ArrayList<String> tabs,\n        CmsGallerySearchObject searchObj,\n        String dialogMode) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setDialogInfo(buildSearchParamsLists(tabs));\n            gInfoBean.setSearchObject(buildInitialSearch(searchObj));\n            gInfoBean.setDialogMode(dialogMode);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return gInfoBean;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getSearch(CmsGallerySearchObject)\n     */\n    public CmsGalleryInfoBean getSearch(CmsGallerySearchObject searchObj) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setSearchObject(search(searchObj));\n            return gInfoBean;\n        } catch (Throwable e) {\n            // should never happen\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(e.getLocalizedMessage());\n        }\n    }","id":59723,"modified_method":"/**\n     * @see org.opencms.ade.galleries.shared.rpc.I_CmsGalleryService#getSearch(CmsGallerySearchObject)\n     */\n    public CmsGalleryInfoBean getSearch(CmsGallerySearchObject searchObj) throws CmsRpcException {\n\n        CmsGalleryInfoBean gInfoBean = new CmsGalleryInfoBean();\n        try {\n            gInfoBean.setSearchObject(search(searchObj));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return gInfoBean;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * \n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#publishResources(java.util.List, java.util.List, boolean)\n     */\n    public List<CmsPublishResource> publishResources(List<CmsUUID> toPublish, List<CmsUUID> toRemove, boolean force)\n    throws CmsRpcException {\n\n        try {\n            CmsObject cms = getCmsObject();\n            CmsPublish pub = new CmsPublish(cms, getCachedOptions());\n            List<CmsResource> publishResources = idsToResources(cms, toPublish);\n            List<CmsPublishResource> brokenLinkBeans = pub.getBrokenResources(publishResources);\n            if (brokenLinkBeans.size() == 0) {\n                pub.publishResources(publishResources);\n                pub.removeResourcesFromPublishList(toRemove);\n            }\n            return brokenLinkBeans;\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(CmsException.getStackTraceAsString(e));\n        }\n    }","id":59724,"modified_method":"/**\n     * \n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#publishResources(java.util.List, java.util.List, boolean)\n     */\n    public List<CmsPublishResource> publishResources(List<CmsUUID> toPublish, List<CmsUUID> toRemove, boolean force)\n    throws CmsRpcException {\n\n        List<CmsPublishResource> brokenLinkBeans = null;\n        try {\n            CmsObject cms = getCmsObject();\n            CmsPublish pub = new CmsPublish(cms, getCachedOptions());\n            List<CmsResource> publishResources = idsToResources(cms, toPublish);\n            brokenLinkBeans = pub.getBrokenResources(publishResources);\n            if (brokenLinkBeans.size() == 0) {\n                pub.publishResources(publishResources);\n                pub.removeResourcesFromPublishList(toRemove);\n            }\n        } catch (Throwable e) {\n            error(e);\n        }\n        return brokenLinkBeans;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Converts a list of IDs to resources.<p>\n     * \n     * @param cms the CmObject used for reading the resources \n     * @param ids the list of IDs\n     * \n     * @return a list of resources \n     */\n    private List<CmsResource> idsToResources(CmsObject cms, List<CmsUUID> ids) {\n\n        List<CmsResource> result = new ArrayList<CmsResource>();\n        for (CmsUUID id : ids) {\n            try {\n                CmsResource resource = cms.readResource(id, CmsResourceFilter.ALL);\n                result.add(resource);\n            } catch (CmsException e) {\n                // should never happen\n                LOG.error(e.getLocalizedMessage(), e);\n            }\n        }\n        return result;\n    }","id":59725,"modified_method":"/**\n     * Converts a list of IDs to resources.<p>\n     * \n     * @param cms the CmObject used for reading the resources \n     * @param ids the list of IDs\n     * \n     * @return a list of resources \n     */\n    private List<CmsResource> idsToResources(CmsObject cms, List<CmsUUID> ids) {\n\n        List<CmsResource> result = new ArrayList<CmsResource>();\n        for (CmsUUID id : ids) {\n            try {\n                CmsResource resource = cms.readResource(id, CmsResourceFilter.ALL);\n                result.add(resource);\n            } catch (CmsException e) {\n                // should never happen\n                logError(e);\n            }\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getPublishGroups(org.opencms.ade.publish.shared.CmsPublishOptions)\n     */\n    public List<CmsPublishGroup> getPublishGroups(CmsPublishOptions options) throws CmsRpcException {\n\n        try {\n            CmsPublish pub = new CmsPublish(getCmsObject(), options);\n            setCachedOptions(options);\n            return pub.getPublishGroups();\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(CmsException.getStackTraceAsString(e));\n        }\n    }","id":59726,"modified_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getPublishGroups(org.opencms.ade.publish.shared.CmsPublishOptions)\n     */\n    public List<CmsPublishGroup> getPublishGroups(CmsPublishOptions options) throws CmsRpcException {\n\n        List<CmsPublishGroup> results = null;\n        try {\n            CmsPublish pub = new CmsPublish(getCmsObject(), options);\n            setCachedOptions(options);\n            results = pub.getPublishGroups();\n        } catch (Throwable e) {\n            error(e);\n        }\n        return results;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getInitData()\n     */\n    public CmsPublishData getInitData() throws CmsRpcException {\n\n        try {\n            CmsPublishOptions options = getCachedOptions();\n            return new CmsPublishData(options, getProjects(), getPublishGroups(options));\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(CmsException.getStackTraceAsString(e));\n        }\n    }","id":59727,"modified_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getInitData()\n     */\n    public CmsPublishData getInitData() throws CmsRpcException {\n\n        CmsPublishData result = null;\n        try {\n            CmsPublishOptions options = getCachedOptions();\n            result = new CmsPublishData(options, getProjects(), getPublishGroups(options));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getProjects()\n     */\n    public List<CmsProjectBean> getProjects() throws CmsRpcException {\n\n        try {\n            return new CmsPublish(getCmsObject()).getManageableProjects();\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(CmsException.getStackTraceAsString(e));\n        }\n    }","id":59728,"modified_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getProjects()\n     */\n    public List<CmsProjectBean> getProjects() throws CmsRpcException {\n\n        List<CmsProjectBean> result = null;\n        try {\n            result = new CmsPublish(getCmsObject()).getManageableProjects();\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getPublishOptions()\n     */\n    public CmsPublishOptions getPublishOptions() throws CmsRpcException {\n\n        try {\n            return getCachedOptions();\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            throw new CmsRpcException(CmsException.getStackTraceAsString(e));\n        }\n    }","id":59729,"modified_method":"/**\n     * @see org.opencms.ade.publish.shared.rpc.I_CmsPublishService#getPublishOptions()\n     */\n    public CmsPublishOptions getPublishOptions() throws CmsRpcException {\n\n        CmsPublishOptions result = null;\n        try {\n            result = getCachedOptions();\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"54a7436d34bfb0871f2805a3f88a650ed739dd1a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates metrics for given {@link ColumnFamilyStore}.\n     *\n     * @param ks Keyspace to measure metrics\n     */\n    public KeyspaceMetrics(final Keyspace ks)\n    {\n        factory = new KeyspaceMetricNameFactory(ks);\n\n        memtableColumnsCount = Metrics.newGauge(factory.createMetricName(\"MemtableColumnsCount\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableColumnsCount.value();\n                }\n                return total;\n            }\n        });\n        memtableDataSize = Metrics.newGauge(factory.createMetricName(\"MemtableDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableDataSize.value();\n                }\n                return total;\n            }\n        });\n        allMemtablesDataSize = Metrics.newGauge(factory.createMetricName(\"AllMemtablesDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.allMemtablesDataSize.value();\n                }\n                return total;\n            }\n        });\n        memtableSwitchCount = Metrics.newGauge(factory.createMetricName(\"MemtableSwitchCount\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                    sum += cf.metric.memtableSwitchCount.count();\n                return sum;\n            }\n        });\n        pendingCompactions = Metrics.newGauge(factory.createMetricName(\"PendingCompactions\"), new Gauge<Integer>()\n        {\n            public Integer value()\n            {\n                int sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.pendingCompactions.value();\n                }\n                return sum;\n            }\n        });\n        pendingTasks = Metrics.newGauge(factory.createMetricName(\"PendingTasks\"), new Gauge<Integer>()\n        {\n            public Integer value()\n            {\n                return Keyspace.switchLock.getQueueLength();\n            }\n        });\n        liveDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"LiveDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.liveDiskSpaceUsed.count();\n                }\n                return sum;\n            }\n        });\n        totalDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"TotalDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.totalDiskSpaceUsed.count();\n                }\n                return sum;\n            }\n        });\n        bloomFilterDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"BloomFilterDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                    total += cf.metric.bloomFilterDiskSpaceUsed.value();\n                return total;\n            }\n        });\n    }","id":59730,"modified_method":"/**\n     * Creates metrics for given {@link ColumnFamilyStore}.\n     *\n     * @param ks Keyspace to measure metrics\n     */\n    public KeyspaceMetrics(final Keyspace ks)\n    {\n        factory = new KeyspaceMetricNameFactory(ks);\n\n        memtableColumnsCount = Metrics.newGauge(factory.createMetricName(\"MemtableColumnsCount\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableColumnsCount.value();\n                }\n                return total;\n            }\n        });\n        memtableLiveDataSize = Metrics.newGauge(factory.createMetricName(\"MemtableLiveDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableLiveDataSize.value();\n                }\n                return total;\n            }\n        });\n        memtableOnHeapDataSize = Metrics.newGauge(factory.createMetricName(\"MemtableOnHeapDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableOnHeapSize.value();\n                }\n                return total;\n            }\n        });\n        memtableOffHeapDataSize = Metrics.newGauge(factory.createMetricName(\"MemtableiOffHeapDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.memtableOffHeapSize.value();\n                }\n                return total;\n            }\n        });\n        allMemtablesLiveDataSize = Metrics.newGauge(factory.createMetricName(\"AllMemtablesLiveDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.allMemtablesLiveDataSize.value();\n                }\n                return total;\n            }\n        });\n        allMemtablesOnHeapDataSize = Metrics.newGauge(factory.createMetricName(\"AllMemtablesOnHeapDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.allMemtablesOnHeapSize.value();\n                }\n                return total;\n            }\n        });\n        allMemtablesOffHeapDataSize = Metrics.newGauge(factory.createMetricName(\"AllMemtablesOffHeapDataSize\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    total += cf.metric.allMemtablesOffHeapSize.value();\n                }\n                return total;\n            }\n        });\n        memtableSwitchCount = Metrics.newGauge(factory.createMetricName(\"MemtableSwitchCount\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                    sum += cf.metric.memtableSwitchCount.count();\n                return sum;\n            }\n        });\n        pendingCompactions = Metrics.newGauge(factory.createMetricName(\"PendingCompactions\"), new Gauge<Integer>()\n        {\n            public Integer value()\n            {\n                int sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.pendingCompactions.value();\n                }\n                return sum;\n            }\n        });\n        pendingFlushes = Metrics.newGauge(factory.createMetricName(\"PendingFlushes\"), new Gauge<Integer>()\n        {\n            public Integer value()\n            {\n                int sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.pendingFlushes.count();\n                }\n                return sum;\n            }\n        });\n        liveDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"LiveDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.liveDiskSpaceUsed.count();\n                }\n                return sum;\n            }\n        });\n        totalDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"TotalDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long sum = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                {\n                    sum += cf.metric.totalDiskSpaceUsed.count();\n                }\n                return sum;\n            }\n        });\n        bloomFilterDiskSpaceUsed = Metrics.newGauge(factory.createMetricName(\"BloomFilterDiskSpaceUsed\"), new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (ColumnFamilyStore cf : ks.getColumnFamilyStores())\n                    total += cf.metric.bloomFilterDiskSpaceUsed.value();\n                return total;\n            }\n        });\n    }","commit_id":"9baae7b80767b077403a75cd1c1e2589ae38b0ba","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Release all associated metrics.\n     */\n    public void release()\n    {\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"AllMemtablesDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableSwitchCount\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"PendingTasks\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"LiveDiskSpaceUsed\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"TotalDiskSpaceUsed\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"BloomFilterDiskSpaceUsed\"));\n    }","id":59731,"modified_method":"/**\n     * Release all associated metrics.\n     */\n    public void release()\n    {\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"AllMemtablesLiveDateSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"AllMemtablesOnHeapDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"AllMemtablesOffHeapDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableLiveDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableOnHeapDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableOffHeapDataSize\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"MemtableSwitchCount\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"PendingFlushes\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"PendingCompactions\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"LiveDiskSpaceUsed\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"TotalDiskSpaceUsed\"));\n        Metrics.defaultRegistry().removeMetric(factory.createMetricName(\"BloomFilterDiskSpaceUsed\"));\n    }","commit_id":"9baae7b80767b077403a75cd1c1e2589ae38b0ba","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n   public GetProjectTransUnitListsResult execute(GetProjectTransUnitLists action, ExecutionContext context) throws ActionException\n   {\n      ZanataIdentity.instance().checkLoggedIn();\n      log.info(\"Searching all targets for workspace {0}\", action.getWorkspaceId().toString());\n\n      HashMap<Long, List<TransUnit>> matchingTUs = new HashMap<Long, List<TransUnit>>();\n      HashMap<Long, String> docPaths = new HashMap<Long, String>();\n      if ((action.getSearchString() == null || action.getSearchString().isEmpty()))\n      {\n         // TODO empty searches shouldn't be requested, consider replacing this\n         // with an error, or making behaviour return all targets for the\n         // project (consider performance).\n         return new GetProjectTransUnitListsResult(action, docPaths, matchingTUs);\n      }\n\n      FilterConstraints filterConstraints = FilterConstraints.filterBy(action.getSearchString()).excludeNew().caseSensitive(action.isCaseSensitive());\n      if (!action.isSearchInSource())\n      {\n         filterConstraints.ignoreSource();\n      }\n      if (!action.isSearchInTarget())\n      {\n         filterConstraints.ignoreTarget();\n      }\n      // TODO handle exception thrown by search service\n      List<HTextFlow> matchingFlows = textFlowSearchServiceImpl.findTextFlows(action.getWorkspaceId(), action.getDocumentPaths(), filterConstraints);\n      log.info(\"Returned {0} results for search\", matchingFlows.size());\n\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(action.getWorkspaceId().getLocaleId(), action.getWorkspaceId().getProjectIterationId().getProjectSlug(), action.getWorkspaceId().getProjectIterationId().getIterationSlug());\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ActionException(e);\n      }\n\n      //FIXME remove when analyzer handles leading & trailing whitespace\n      boolean needsWhitespaceCheck = !action.getSearchString().equals(action.getSearchString().trim());\n      String searchString = action.getSearchString();\n      if (!action.isCaseSensitive())\n      {\n         searchString = foldCase(searchString);\n      }\n\n\n      for (HTextFlow textFlow : matchingFlows)\n      {\n         // FIXME temporary check for leading and trailing whitespace to compensate\n         // for NGramAnalyzer trimming strings before tokenization. This should\n         // be removed when updating to a lucene version with the whitespace\n         // issue resolved.\n         if (needsWhitespaceCheck)\n         {\n            boolean whitespaceMatch = false;\n            if (action.isSearchInSource())\n            {\n               for (String content : textFlow.getContents())\n               {\n                  String contentStr = content;\n                  if (!action.isCaseSensitive())\n                  {\n                     contentStr = foldCase(contentStr);\n                  }\n                  if (contentStr.contains(searchString))\n                  {\n                     whitespaceMatch = true;\n                     break;\n                  }\n               }\n            }\n            if (!whitespaceMatch && action.isSearchInTarget())\n            {\n               List<String> targetContents = textFlow.getTargets().get(hLocale.getId()).getContents();\n               for (String content : targetContents)\n               {\n                  String contentStr = content;\n                  if (!action.isCaseSensitive())\n                  {\n                     contentStr = foldCase(contentStr);\n                  }\n                  if (contentStr.contains(searchString))\n                  {\n                     whitespaceMatch = true;\n                     break;\n                  }\n               }\n            }\n            if (!whitespaceMatch)\n            {\n               continue;\n            }\n         }\n\n         List<TransUnit> listForDoc = matchingTUs.get(textFlow.getDocument().getId());\n         if (listForDoc == null)\n         {\n            listForDoc = new ArrayList<TransUnit>();\n         }\n\n         TransUnit transUnit = transUnitTransformer.transform(textFlow, hLocale);\n         listForDoc.add(transUnit);\n         matchingTUs.put(textFlow.getDocument().getId(), listForDoc);\n         docPaths.put(textFlow.getDocument().getId(), textFlow.getDocument().getDocId());\n      }\n\n      return new GetProjectTransUnitListsResult(action, docPaths, matchingTUs);\n   }","id":59732,"modified_method":"@Override\n   public GetProjectTransUnitListsResult execute(GetProjectTransUnitLists action, ExecutionContext context) throws ActionException\n   {\n      identity.checkLoggedIn();\n      log.info(\"Searching all targets for workspace {}\", action.getWorkspaceId());\n\n      HashMap<Long, List<TransUnit>> matchingTUs = new HashMap<Long, List<TransUnit>>();\n      HashMap<Long, String> docPaths = new HashMap<Long, String>();\n      if (Strings.isNullOrEmpty(action.getSearchString()))\n      {\n         // TODO empty searches shouldn't be requested, consider replacing this\n         // with an error, or making behaviour return all targets for the\n         // project (consider performance).\n         return new GetProjectTransUnitListsResult(action, docPaths, matchingTUs);\n      }\n\n      FilterConstraints filterConstraints = FilterConstraints.filterBy(action.getSearchString()).excludeNew().caseSensitive(action.isCaseSensitive());\n      if (!action.isSearchInSource())\n      {\n         filterConstraints.ignoreSource();\n      }\n      if (!action.isSearchInTarget())\n      {\n         filterConstraints.ignoreTarget();\n      }\n      // TODO handle exception thrown by search service\n      List<HTextFlow> matchingFlows = textFlowSearchServiceImpl.findTextFlows(action.getWorkspaceId(), action.getDocumentPaths(), filterConstraints);\n      log.info(\"Returned {} results for search\", matchingFlows.size());\n\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(action.getWorkspaceId().getLocaleId(), action.getWorkspaceId().getProjectIterationId().getProjectSlug(), action.getWorkspaceId().getProjectIterationId().getIterationSlug());\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ActionException(e);\n      }\n\n      //FIXME remove when analyzer handles leading & trailing whitespace\n      boolean needsWhitespaceCheck = !action.getSearchString().equals(action.getSearchString().trim());\n      String searchString = action.getSearchString();\n      if (!action.isCaseSensitive())\n      {\n         searchString = foldCase(searchString);\n      }\n\n\n      for (HTextFlow textFlow : matchingFlows)\n      {\n         // FIXME temporary check for leading and trailing whitespace to compensate\n         // for NGramAnalyzer trimming strings before tokenization. This should\n         // be removed when updating to a lucene version with the whitespace\n         // issue resolved.\n         if (needsWhitespaceCheck)\n         {\n            boolean whitespaceMatch = false;\n            if (action.isSearchInSource())\n            {\n               for (String content : textFlow.getContents())\n               {\n                  String contentStr = content;\n                  if (!action.isCaseSensitive())\n                  {\n                     contentStr = foldCase(contentStr);\n                  }\n                  if (contentStr.contains(searchString))\n                  {\n                     whitespaceMatch = true;\n                     break;\n                  }\n               }\n            }\n            if (!whitespaceMatch && action.isSearchInTarget())\n            {\n               // FIXME hibernate n + 1 select happening here\n               List<String> targetContents = textFlow.getTargets().get(hLocale.getId()).getContents();\n               for (String content : targetContents)\n               {\n                  String contentStr = content;\n                  if (!action.isCaseSensitive())\n                  {\n                     contentStr = foldCase(contentStr);\n                  }\n                  if (contentStr.contains(searchString))\n                  {\n                     whitespaceMatch = true;\n                     break;\n                  }\n               }\n            }\n            if (!whitespaceMatch)\n            {\n               continue;\n            }\n         }\n\n         List<TransUnit> listForDoc = matchingTUs.get(textFlow.getDocument().getId());\n         if (listForDoc == null)\n         {\n            listForDoc = new ArrayList<TransUnit>();\n         }\n\n         TransUnit transUnit = transUnitTransformer.transform(textFlow, hLocale);\n         listForDoc.add(transUnit);\n         matchingTUs.put(textFlow.getDocument().getId(), listForDoc);\n         docPaths.put(textFlow.getDocument().getId(), textFlow.getDocument().getDocId());\n      }\n\n      return new GetProjectTransUnitListsResult(action, docPaths, matchingTUs);\n   }","commit_id":"156b4d49ec9ef56dd023257851458a1be006d7c9","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public GetProjectTransUnitListsResult execute(GetProjectTransUnitLists action, ExecutionContext context) throws ActionException\n   {\n      ZanataIdentity.instance().checkLoggedIn();\n      log.info(\"Searching all targets for workspace {0}\", action.getWorkspaceId().toString());\n\n      HashMap<Long, List<TransUnit>> matchingTUs = new HashMap<Long, List<TransUnit>>();\n      HashMap<Long, String> docPaths = new HashMap<Long, String>();\n      if ((action.getSearchString() == null || action.getSearchString().isEmpty()))\n      {\n         //TODO empty searches shouldn't be requested, consider replacing this with an error.\n         return new GetProjectTransUnitListsResult(docPaths, matchingTUs);\n      }\n\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(action.getWorkspaceId().getLocaleId(), action.getWorkspaceId().getProjectIterationId().getProjectSlug(), action.getWorkspaceId().getProjectIterationId().getIterationSlug());\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ActionException(e.getMessage());\n      }\n\n      List<HDocument> documents = documentDAO.getAllByProjectIteration(action.getWorkspaceId().getProjectIterationId().getProjectSlug(), action.getWorkspaceId().getProjectIterationId().getIterationSlug());\n\n      boolean includeTranslated = true;\n      boolean includeFuzzy = true;\n      boolean includeNew = false;\n      TextFlowFilter filter = new TextFlowFilterImpl(action.getSearchString(), includeTranslated, includeFuzzy, includeNew);\n\n      List<HTextFlow> result;\n      for (HDocument doc : documents)\n      {\n         log.info(\"Fetch TransUnits:\" + action.getSearchString());\n         result = textFlowDAO.getTransUnitList(doc.getId());\n\n         List<TransUnit> units = new ArrayList<TransUnit>();\n         for (HTextFlow textFlow : result)\n         {\n            if (!filter.isFilterOut(textFlow, hLocale))\n            {\n               units.add(initTransUnit(textFlow, hLocale));\n            }\n         }\n         if (!units.isEmpty())\n         {\n            matchingTUs.put(doc.getId(), units);\n            docPaths.put(doc.getId(), doc.getDocId());\n         }\n      }\n\n      return new GetProjectTransUnitListsResult(docPaths, matchingTUs);\n   }","id":59733,"modified_method":"@Override\n   public GetProjectTransUnitListsResult execute(GetProjectTransUnitLists action, ExecutionContext context) throws ActionException\n   {\n      ZanataIdentity.instance().checkLoggedIn();\n      log.info(\"Searching all targets for workspace {0}\", action.getWorkspaceId().toString());\n\n      HashMap<Long, List<TransUnit>> matchingTUs = new HashMap<Long, List<TransUnit>>();\n      HashMap<Long, String> docPaths = new HashMap<Long, String>();\n      if ((action.getSearchString() == null || action.getSearchString().isEmpty()))\n      {\n         //TODO empty searches shouldn't be requested, consider replacing this with an error.\n         return new GetProjectTransUnitListsResult(docPaths, matchingTUs);\n      }\n\n      //TODO handle exception thrown by search service\n      List<HTextFlow> matchingFlows = textFlowSearchServiceImpl.findTextFlows(action.getWorkspaceId(), FilterConstraints.filterBy(action.getSearchString()).ignoreSource().excludeNew());\n\n\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(action.getWorkspaceId().getLocaleId(), action.getWorkspaceId().getProjectIterationId().getProjectSlug(), action.getWorkspaceId().getProjectIterationId().getIterationSlug());\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ActionException(e.getMessage());\n      }\n\n      for (HTextFlow htf : matchingFlows)\n      {\n         List<TransUnit> listForDoc = matchingTUs.get(htf.getDocument().getId());\n         if (listForDoc == null)\n         {\n            listForDoc = new ArrayList<TransUnit>();\n         }\n         listForDoc.add(initTransUnit(htf, hLocale));\n         matchingTUs.put(htf.getDocument().getId(), listForDoc);\n         docPaths.put(htf.getDocument().getId(), htf.getDocument().getDocId());\n      }\n\n      return new GetProjectTransUnitListsResult(docPaths, matchingTUs);\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"public TextFlowFilterImpl(String phrase, boolean filterTranslated, boolean filterNeedReview, boolean filterUntranslated)\n   {\n      this.filterTranslated = filterTranslated;\n      this.filterNeedReview = filterNeedReview;\n      this.filterUntranslated = filterUntranslated;\n      if (phrase != null && !phrase.isEmpty())\n      {\n         this.phrase = phrase.toLowerCase();\n      }\n      acceptAll = false;\n   }","id":59734,"modified_method":"public TextFlowFilterImpl(String phrase, boolean filterTranslated, boolean filterNeedReview, boolean filterUntranslated)\n   {\n      this.includeTranslated = filterTranslated;\n      this.includeNeedReview = filterNeedReview;\n      this.includeUntranslated = filterUntranslated;\n      if (phrase == null)\n      {\n         this.phrase = \"\";\n      }\n      else\n      {\n         this.phrase = phrase.toLowerCase();\n      }\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"private boolean isMatchSearch(HTextFlow textFlow, HTextFlowTarget target)\n   {\n      if (phrase != null && !phrase.isEmpty())\n      {\n         if (target != null)\n         {\n            return textFlow.getContent().toLowerCase().contains(phrase) || target.getContent().toLowerCase().contains(phrase);\n         }\n         else\n         {\n            return textFlow.getContent().toLowerCase().contains(phrase);\n         }\n      }\n      return true;\n   }","id":59735,"modified_method":"private boolean isMatchSearch(HTextFlow textFlow, HTextFlowTarget target)\n   {\n      if (phrase == null || phrase.isEmpty())\n      {\n         return true;\n      }\n\n      //TODO check filter constraints for whether to check source and target\n      boolean phraseInSource = false;\n      for (String source : textFlow.getContents())\n      {\n         if (source.toLowerCase().contains(phrase))\n         {\n            phraseInSource = true;\n            break;\n         }\n      }\n\n      boolean phraseInTarget = false;\n      if (target != null)\n      {\n         for (String targ : target.getContents())\n         {\n            if (targ.toLowerCase().contains(phrase))\n            {\n               phraseInTarget = true;\n               break;\n            }\n         }\n      }\n\n      return phraseInSource || phraseInTarget;\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * Filter out according to target state\n    * \n    * @param target\n    * @return\n    */\n   @Override\n   public boolean isFilterOut(HTextFlow textFlow, HLocale locale)\n   {\n      if (acceptAll)\n      {\n         return false;\n      }\n\n      HTextFlowTarget target = textFlow.getTargets().get(locale);\n      if (isMatchSearch(textFlow, target))\n      {\n         if ((filterTranslated == filterNeedReview) && (filterNeedReview == filterUntranslated) && (filterUntranslated == filterTranslated))\n         {\n            return false;\n         }\n\n         if (target == null)\n         {\n            if (filterUntranslated)\n            {\n               return false;\n            }\n         }\n         else\n         {\n            ContentState state = target.getState();\n            if (state == ContentState.Approved && filterTranslated)\n            {\n               return false;\n            }\n            if (state == ContentState.NeedReview && filterNeedReview)\n            {\n               return false;\n            }\n            if (state == ContentState.New && filterUntranslated)\n            {\n               return false;\n            }\n         }\n      }\n      return true;\n   }","id":59736,"modified_method":"/**\n    * Filter out according to target state\n    * \n    * @param target\n    * @return\n    */\n   @Override\n   public boolean isFilterOut(HTextFlow textFlow, HLocale locale)\n   {\n      if (isAcceptAll())\n      {\n         return false;\n      }\n\n      \n      HTextFlowTarget target = textFlow.getTargets().get(locale);\n      if (isMatchSearch(textFlow, target))\n      {\n         if ((includeTranslated == includeNeedReview) && (includeNeedReview == includeUntranslated) && (includeUntranslated == includeTranslated))\n         {\n            return false;\n         }\n\n         if (target == null)\n         {\n            if (includeUntranslated)\n            {\n               return false;\n            }\n         }\n         else\n         {\n            ContentState state = target.getState();\n            if (state == ContentState.Approved && includeTranslated)\n            {\n               return false;\n            }\n            if (state == ContentState.NeedReview && includeNeedReview)\n            {\n               return false;\n            }\n            if (state == ContentState.New && includeUntranslated)\n            {\n               return false;\n            }\n         }\n      }\n      return true;\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"public TextFlowFilterImpl()\n   {\n      acceptAll = true;\n   }","id":59737,"modified_method":"public TextFlowFilterImpl()\n   {\n      includeTranslated = true;\n      includeNeedReview = true;\n      includeUntranslated = true;\n      phrase = \"\";\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public List<HTextFlow> findTextFlows(WorkspaceId workspace, String searchTerm, FilterConstraints constraints)\n   {\n      LocaleId localeId = workspace.getLocaleId();\n      String projectSlug = workspace.getProjectIterationId().getProjectSlug();\n      String iterationSlug = workspace.getProjectIterationId().getIterationSlug();\n\n      //TODO decide whether null or empty searchTerm is valid.\n      //allowing it to get all may simplify jobs, but may be clearer\n      //to use a different class for gets vs. filters.\n      //On the other hand, this service could use a getter service\n      //for its pre-filter retrieval, although it will likely be\n      //doing its own querying eventually...\n\n      //check that locale is valid for the workspace\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(localeId, projectSlug, iterationSlug);\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ZanataServiceException(\"Failed to validate locale\", e);\n      }\n\n      List<HDocument> documents = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n\n      TextFlowFilter filter = new TextFlowFilterImpl(constraints);\n\n      List<HTextFlow> allMatchingResults = new ArrayList<HTextFlow>();\n\n      for (HDocument doc : documents)\n      {\n         log.warn(\"Inefficient fetch TransUnits:\" + searchTerm);\n         List<HTextFlow> result = textFlowDAO.getTransUnitList(doc.getId());\n\n         for (HTextFlow textFlow : result)\n         {\n            if (!filter.isFilterOut(textFlow, hLocale))\n            {\n               allMatchingResults.add(textFlow);\n            }\n         }\n      }\n\n      return allMatchingResults;\n   }","id":59738,"modified_method":"@Override\n   public List<HTextFlow> findTextFlows(WorkspaceId workspace, FilterConstraints constraints)\n   {\n      LocaleId localeId = workspace.getLocaleId();\n      String projectSlug = workspace.getProjectIterationId().getProjectSlug();\n      String iterationSlug = workspace.getProjectIterationId().getIterationSlug();\n\n      //TODO decide whether null or empty searchTerm is valid.\n      //allowing it to get all may simplify jobs, but may be clearer\n      //to use a different class for gets vs. filters.\n      //On the other hand, this service could use a getter service\n      //for its pre-filter retrieval, although it will likely be\n      //doing its own querying eventually...\n\n      //check that locale is valid for the workspace\n      HLocale hLocale;\n      try\n      {\n         hLocale = localeServiceImpl.validateLocaleByProjectIteration(localeId, projectSlug, iterationSlug);\n      }\n      catch (ZanataServiceException e)\n      {\n         throw new ZanataServiceException(\"Failed to validate locale\", e);\n      }\n\n      List<HDocument> documents = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n\n      TextFlowFilter filter = new TextFlowFilterImpl(constraints);\n\n      List<HTextFlow> allMatchingResults = new ArrayList<HTextFlow>();\n\n      for (HDocument doc : documents)\n      {\n         log.warn(\"Inefficient fetch TransUnits:\" + constraints.getSearchString());\n         List<HTextFlow> result = textFlowDAO.getTransUnitList(doc.getId());\n\n         for (HTextFlow textFlow : result)\n         {\n            if (!filter.isFilterOut(textFlow, hLocale))\n            {\n               allMatchingResults.add(textFlow);\n            }\n         }\n      }\n\n      return allMatchingResults;\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public List<HTextFlow> findTextFlows(WorkspaceId workspace, DocumentId doc, String searchTerm, FilterConstraints constraints)\n   {\n      // TODO Auto-generated method stub\n      return null;\n   }","id":59739,"modified_method":"@Override\n   public List<HTextFlow> findTextFlows(WorkspaceId workspace, DocumentId doc, FilterConstraints constraints)\n   {\n      // TODO Auto-generated method stub\n      return null;\n   }","commit_id":"fc9df3ab3df0fd2dd191b208ab03f1964a849dad","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n   public void testExecuteForSearch() throws Exception\n   {\n      // Given: we want to search for file (mixed case) in fuzzy and untranslated text flows\n      GetTransUnitList action = GetTransUnitList.newAction(new GetTransUnitActionContext(documentId)\n            .changeFindMessage(\"FiLe\").changeFilterUntranslated(true).changeFilterNeedReview(true));\n      prepareActionAndMockLocaleService(action);\n\n      // When:\n      GetTransUnitListResult result = handler.execute(action, null);\n\n      // Then:\n      log.info(\"result: {}\", result);\n      assertThat(result.getDocumentId(), Matchers.equalTo(documentId));\n      assertThat(result.getGotoRow(), Matchers.equalTo(0));\n      assertThat(TestFixture.asIds(result.getUnits()), Matchers.contains(3, 5, 6, 8));\n   }","id":59740,"modified_method":"@Test\n   public void testExecuteWithSearchOnly() throws Exception\n   {\n      // Given: we want to search for file (mixed case) and we change page size to 10 and start from index 2\n      GetTransUnitList action = GetTransUnitList.newAction(new GetTransUnitActionContext(documentId).changeFindMessage(\"FiLe\").changeCount(10).changeOffset(1));\n      prepareActionAndMockLocaleService(action);\n\n      // When:\n      GetTransUnitListResult result = handler.execute(action, null);\n\n      // Then:\n      log.info(\"result: {}\", result);\n      assertThat(result.getDocumentId(), Matchers.equalTo(documentId));\n      assertThat(result.getGotoRow(), Matchers.equalTo(0));\n      assertThat(TestFixture.asIds(result.getUnits()), Matchers.contains(2, 3, 4, 5, 6, 8));\n   }","commit_id":"77d788681014d43b56e075d2ee21501aa8589eab","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * for a given locale, we can filter it by content state or search in source and target.\n    *\n    *\n    * @param documentId document id (NOT the String type docId)\n    * @param hLocale locale\n    * @param constraints filter constraints\n    * @param firstResult start index\n    * @param maxResult max result\n    * @return a list of HTextFlow that matches the constraint.\n    */\n   public List<HTextFlow> getTextFlowByDocumentIdWithConstraint(DocumentId documentId, HLocale hLocale, FilterConstraints constraints, int firstResult, int maxResult)\n   {\n      boolean hasSearch = !Strings.isNullOrEmpty(constraints.getSearchString());\n      boolean includeAllState = constraints.isIncludeAllState();\n\n      // @formatter:off\n      StringBuilder queryBuilder = new StringBuilder(\"select distinct tf from HTextFlow tf left join tf.targets tfts with index(tfts) = :locale \");\n      queryBuilder.append(\" where tf.obsolete = 0 and tf.document.id = :docId \");\n\n      if (hasSearch)\n      {\n         queryBuilder.append(\" and (\").append(buildSearchConditionForHQL(constraints.getSearchString(), \"tf\")); // search in source\n         // search in target\n         queryBuilder.append(\" or exists (\")\n               .append(\"from HTextFlowTarget where textFlow = tf and locale = :locale\")\n               .append(\" and \").append(buildSearchConditionForHQL(constraints.getSearchString(), \"\"))\n               .append(\")\");\n         // end search in target\n         queryBuilder.append(\")\"); // end search\n      }\n      if (!includeAllState)\n      {\n         // content state restriction\n         queryBuilder.append(\" and (exists (from HTextFlowTarget where textFlow = tf and locale = :locale and state in (:contentStateList))\");\n         if (constraints.isIncludeNew())\n         {\n            queryBuilder.append(\" or (:locale not in indices(tf.targets)\"); // null target\n            if (hasSearch)\n            {\n               queryBuilder.append(\" and \").append(buildSearchConditionForHQL(constraints.getSearchString(), \"tf\"));\n            }\n            queryBuilder.append(\")\"); // end null target condition\n         }\n         queryBuilder.append(\")\"); // content state sub query end\n      }\n\n      queryBuilder.append(\" order by tf.pos\");\n      // @formatter:on\n      log.debug(\"\\n\\n query : {}\\n\\n\", queryBuilder);\n\n      Query textFlowQuery = getSession().createQuery(queryBuilder.toString());\n      textFlowQuery.setParameter(\"docId\", documentId.getId());\n      textFlowQuery.setParameter(\"locale\", hLocale.getId());\n      textFlowQuery.setParameterList(\"contentStateList\", constraints.getContentStateAsList());\n      textFlowQuery.setFirstResult(firstResult).setMaxResults(maxResult);\n      textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getTextFlowByDocumentIdWithConstraint\");\n\n      @SuppressWarnings(\"unchecked\")\n      List<HTextFlow> result = textFlowQuery.list();\n      log.debug(\"{} textFlow for locale {} filter by {}\", new Object[] { result.size(), hLocale.getLocaleId(), constraints });\n      return result;\n   }","id":59741,"modified_method":"/**\n    * for a given locale, we can filter it by content state or search in source and target.\n    *\n    *\n    * @param documentId document id (NOT the String type docId)\n    * @param hLocale locale\n    * @param constraints filter constraints\n    * @param firstResult start index\n    * @param maxResult max result\n    * @return a list of HTextFlow that matches the constraint.\n    */\n   public List<HTextFlow> getTextFlowByDocumentIdWithConstraint(DocumentId documentId, HLocale hLocale, FilterConstraints constraints, int firstResult, int maxResult)\n   {\n      boolean hasSearch = !Strings.isNullOrEmpty(constraints.getSearchString());\n      boolean includeAllState = constraints.isIncludeAllState();\n\n      // @formatter:off\n      StringBuilder queryBuilder = new StringBuilder(\"select distinct tf from HTextFlow tf left join tf.targets tfts with index(tfts) = :locale \");\n      queryBuilder.append(\" where tf.obsolete = 0 and tf.document.id = :docId \");\n\n      String searchStringNamedParam = \"searchString\";\n      if (hasSearch)\n      {\n         queryBuilder.append(\" and (\").append(buildSearchConditionForHQL(searchStringNamedParam, \"tf\")); // search in source\n         // search in target\n         queryBuilder.append(\" or exists (\")\n               .append(\"from HTextFlowTarget where textFlow = tf and locale = :locale\")\n               .append(\" and \").append(buildSearchConditionForHQL(searchStringNamedParam, \"\"))\n               .append(\")\");\n         // end search in target\n         queryBuilder.append(\")\"); // end search\n      }\n      if (!includeAllState)\n      {\n         // content state restriction\n         queryBuilder.append(\" and (exists (from HTextFlowTarget where textFlow = tf and locale = :locale and state in (:contentStateList))\");\n         if (constraints.isIncludeNew())\n         {\n            queryBuilder.append(\" or (:locale not in indices(tf.targets)\"); // null target\n            if (hasSearch)\n            {\n               queryBuilder.append(\" and \").append(buildSearchConditionForHQL(searchStringNamedParam, \"tf\"));\n            }\n            queryBuilder.append(\")\"); // end null target condition\n         }\n         queryBuilder.append(\")\"); // content state sub query end\n      }\n\n      queryBuilder.append(\" order by tf.pos\");\n      // @formatter:on\n      log.debug(\"\\n\\n query : {}\\n\\n\", queryBuilder);\n\n      Query textFlowQuery = getSession().createQuery(queryBuilder.toString());\n      textFlowQuery.setParameter(\"docId\", documentId.getId());\n      textFlowQuery.setParameter(\"locale\", hLocale.getId());\n      if (!includeAllState)\n      {\n         textFlowQuery.setParameterList(\"contentStateList\", constraints.getContentStateAsList());\n      }\n      if (hasSearch)\n      {\n         textFlowQuery.setParameter(searchStringNamedParam, \"%\" + constraints.getSearchString().toLowerCase() + \"%\");\n      }\n      textFlowQuery.setFirstResult(firstResult).setMaxResults(maxResult);\n      textFlowQuery.setCacheable(true).setComment(\"TextFlowDAO.getTextFlowByDocumentIdWithConstraint\");\n\n      @SuppressWarnings(\"unchecked\")\n      List<HTextFlow> result = textFlowQuery.list();\n      log.debug(\"{} textFlow for locale {} filter by {}\", new Object[] { result.size(), hLocale.getLocaleId(), constraints });\n      return result;\n   }","commit_id":"77d788681014d43b56e075d2ee21501aa8589eab","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * This will build a HQL query condition in where clause.\n    * It can be used to search string in content0, content1 ... content5 in HTextFlow or HTextFlowTarget.\n    *\n    * @param searchString search term\n    * @param alias table name alias\n    * @return a HQL condition clause with contentX like '%searchString%' in parentheses '()' joined by 'or'\n    */\n   protected static String buildSearchConditionForHQL(String searchString, String alias)\n   {\n      String columnNameInLower = Strings.isNullOrEmpty(alias) ? \"lower(content\" : \"lower(\" + alias + \".content\";\n      String searchStringInLowerCase = searchString.toLowerCase();\n\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"(\");\n      List<String> conditions = Lists.newArrayList();\n      for (int i = 0; i < 6; i++)\n      {\n         conditions.add(columnNameInLower + i + \") LIKE '%\" + searchStringInLowerCase + \"%'\");\n      }\n      Joiner joiner = Joiner.on(\" or \");\n      joiner.appendTo(builder, conditions);\n      builder.append(\")\");\n      return builder.toString();\n   }","id":59742,"modified_method":"/**\n    * This will build a HQL query condition in where clause.\n    * It can be used to search string in content0, content1 ... content5 in HTextFlow or HTextFlowTarget.\n    *\n    * @param searchString named parameter\n    * @param alias table name alias\n    * @return a HQL condition clause with contentX like '%searchString%' in parentheses '()' joined by 'or'\n    */\n   protected static String buildSearchConditionForHQL(String searchString, String alias)\n   {\n      String columnNameInLower = Strings.isNullOrEmpty(alias) ? \"lower(content\" : \"lower(\" + alias + \".content\";\n\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"(\");\n      List<String> conditions = Lists.newArrayList();\n      for (int i = 0; i < 6; i++)\n      {\n         conditions.add(columnNameInLower + i + \") LIKE :\" + searchString);\n      }\n      Joiner joiner = Joiner.on(\" or \");\n      joiner.appendTo(builder, conditions);\n      builder.append(\")\");\n      return builder.toString();\n   }","commit_id":"77d788681014d43b56e075d2ee21501aa8589eab","url":"https://github.com/zanata/zanata-server"},{"original_method":"public void visitAnnotation(PsiAnnotation annotation) {\n      super.visitAnnotation(annotation);\n      if (!JCiPUtil.isGuardedByAnnotation(annotation)) {\n        return;\n      }\n      final String guardValue = JCiPUtil.getGuardValue(annotation);\n      if (guardValue == null || \"this\".equals(guardValue)) {\n        return;\n      }\n      final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class);\n      if (containingClass == null) {\n        return;\n      }\n      final PsiField guardField = containingClass.findFieldByName(guardValue, true);\n      if (guardField != null) {\n        return;\n      }\n      final PsiAnnotationMemberValue member = annotation.findAttributeValue(\"value\");\n      if (member == null) {\n        return;\n      }\n      myHolder.registerProblem(member, \"Unknown @GuardedBy field #ref #loc\");\n    }","id":59743,"modified_method":"public void visitAnnotation(PsiAnnotation annotation) {\n      super.visitAnnotation(annotation);\n      if (!JCiPUtil.isGuardedByAnnotation(annotation)) {\n        return;\n      }\n      final String guardValue = JCiPUtil.getGuardValue(annotation);\n      if (guardValue == null || \"this\".equals(guardValue) || \"itself\".equals(guardValue)) {\n        return;\n      }\n      final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class);\n      if (containingClass == null) {\n        return;\n      }\n\n      //field-name\n      if (containingClass.findFieldByName(guardValue, true) != null) {\n        return;\n      }\n\n      //method-name\n      if (guardValue.endsWith(\"()\")) {\n        final PsiMethod[] methods = containingClass.findMethodsByName(StringUtil.trimEnd(guardValue, \"()\"), true);\n        for (PsiMethod method : methods) {\n          if (method.getParameterList().getParameters().length == 0) {\n            return;\n          }\n        }\n      }\n\n      //class-name.class\n      final Project project = containingClass.getProject();\n      final JavaPsiFacade facade = JavaPsiFacade.getInstance(project);\n      if (guardValue.endsWith(\".class\") &&\n          facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) {\n        return;\n      }\n\n      //class-name.field-name\n      final String classFQName = StringUtil.getPackageName(guardValue);\n      final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project));\n      if (gClass != null) {\n        final String fieldName = StringUtil.getShortName(guardValue);\n        if (gClass.findFieldByName(fieldName, true) != null) {\n          return;\n        }\n      }\n      final PsiAnnotationMemberValue member = annotation.findAttributeValue(\"value\");\n      if (member == null) {\n        return;\n      }\n      myHolder.registerProblem(member, \"Unknown @GuardedBy field #ref #loc\");\n    }","commit_id":"a7dda86367b3e0226695a91a66bf6a9af5b3feae","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static PsiAnnotation findAnnotation(final Class<?> annotationClass, PsiMember... members) {\n    for (PsiMember member : members) {\n      if (member != null) {\n        final PsiModifierList modifierList = member.getModifierList();\n        if (modifierList != null) {\n          final PsiAnnotation annotation = modifierList.findAnnotation(annotationClass.getName());\n          if (annotation != null) {\n            return annotation;\n          }\n        }\n      }\n    }\n    return null;\n  }","id":59744,"modified_method":"@Nullable\n  static PsiAnnotation findAnnotation(final Class<?> annotationClass, PsiMember... members) {\n    for (PsiMember member : members) {\n      if (member != null) {\n        final PsiModifierList modifierList = member.getModifierList();\n        if (modifierList != null) {\n          final PsiAnnotation annotation = modifierList.findAnnotation(annotationClass.getName());\n          if (annotation != null) {\n            return annotation;\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void registerField(final DomExtensionsRegistrar registrar, @NotNull final PsiField field, With withElement) {\n    final PsiMethod getter = PropertyUtils.findGetterForField(field);\n    final PsiMethod setter = PropertyUtils.findSetterForField(field);\n    if (!field.hasModifierProperty(PsiModifier.PUBLIC) && (getter == null || setter == null)) {\n      return;\n    }\n\n    final String fieldName = field.getName();\n    final PsiConstantEvaluationHelper evalHelper = JavaPsiFacade.getInstance(field.getProject()).getConstantEvaluationHelper();\n    final PsiAnnotation attrAnno = findAnnotation(Attribute.class, field, getter, setter);\n    if (attrAnno != null) {\n      final String attrName = getStringAttribute(attrAnno, \"value\", evalHelper);\n      if (attrName != null) {\n        boolean isClass = withElement != null || fieldName.endsWith(\"Class\");\n        final DomExtension extension =\n          registrar.registerGenericAttributeValueChildExtension(new XmlName(attrName), isClass ? PsiClass.class : String.class).setDeclaringElement(field);\n        markAsClass(extension, fieldName, withElement);\n      }\n      return;\n    }\n    final PsiAnnotation tagAnno = findAnnotation(Tag.class, field, getter, setter);\n    final PsiAnnotation propAnno = findAnnotation(Property.class, field, getter, setter);\n    final PsiAnnotation absColAnno = findAnnotation(AbstractCollection.class, field, getter, setter);\n    //final PsiAnnotation colAnno = modifierList.findAnnotation(Collection.class.getName()); // todo\n    final String tagName = tagAnno != null? getStringAttribute(tagAnno, \"value\", evalHelper) :\n                           propAnno != null && getBooleanAttribute(propAnno, \"surroundWithTag\", evalHelper)? Constants.OPTION : null;\n    if (tagName != null) {\n      if (absColAnno == null) {\n        final DomExtension extension =\n          registrar.registerFixedNumberChildExtension(new XmlName(tagName), SimpleTagValue.class).setDeclaringElement(field);\n        markAsClass(extension, fieldName, withElement);\n      }\n      else {\n        registrar.registerFixedNumberChildExtension(new XmlName(tagName), DomElement.class).addExtender(new DomExtender() {\n          @Override\n          public void registerExtensions(@NotNull DomElement domElement, @NotNull DomExtensionsRegistrar registrar) {\n            registerCollectionBinding(field.getType(), registrar, absColAnno, evalHelper);\n          }\n        });\n      }\n    }\n    else if (absColAnno != null) {\n      registerCollectionBinding(field.getType(), registrar, absColAnno, evalHelper);\n    }\n  }","id":59745,"modified_method":"private static void registerField(final DomExtensionsRegistrar registrar, @NotNull final PsiField field, With withElement) {\n    final PsiMethod getter = PropertyUtils.findGetterForField(field);\n    final PsiMethod setter = PropertyUtils.findSetterForField(field);\n    if (!field.hasModifierProperty(PsiModifier.PUBLIC) && (getter == null || setter == null)) {\n      return;\n    }\n\n    final String fieldName = field.getName();\n    final PsiConstantEvaluationHelper evalHelper = JavaPsiFacade.getInstance(field.getProject()).getConstantEvaluationHelper();\n    final PsiAnnotation attrAnno = findAnnotation(Attribute.class, field, getter, setter);\n    if (attrAnno != null) {\n      final String attrName = getStringAttribute(attrAnno, \"value\", evalHelper);\n      if (attrName != null) {\n        boolean isClass = withElement != null || isClassField(fieldName);\n        final DomExtension extension =\n          registrar.registerGenericAttributeValueChildExtension(new XmlName(attrName), isClass ? PsiClass.class : String.class).setDeclaringElement(field);\n        markAsClass(extension, fieldName, withElement);\n      }\n      return;\n    }\n    final PsiAnnotation tagAnno = findAnnotation(Tag.class, field, getter, setter);\n    final PsiAnnotation propAnno = findAnnotation(Property.class, field, getter, setter);\n    final PsiAnnotation absColAnno = findAnnotation(AbstractCollection.class, field, getter, setter);\n    //final PsiAnnotation colAnno = modifierList.findAnnotation(Collection.class.getName()); // todo\n    final String tagName = tagAnno != null? getStringAttribute(tagAnno, \"value\", evalHelper) :\n                           propAnno != null && getBooleanAttribute(propAnno, \"surroundWithTag\", evalHelper)? Constants.OPTION : null;\n    if (tagName != null) {\n      if (absColAnno == null) {\n        final DomExtension extension =\n          registrar.registerFixedNumberChildExtension(new XmlName(tagName), SimpleTagValue.class).setDeclaringElement(field);\n        markAsClass(extension, fieldName, withElement);\n      }\n      else {\n        registrar.registerFixedNumberChildExtension(new XmlName(tagName), DomElement.class).addExtender(new DomExtender() {\n          @Override\n          public void registerExtensions(@NotNull DomElement domElement, @NotNull DomExtensionsRegistrar registrar) {\n            registerCollectionBinding(field.getType(), registrar, absColAnno, evalHelper);\n          }\n        });\n      }\n    }\n    else if (absColAnno != null) {\n      registerCollectionBinding(field.getType(), registrar, absColAnno, evalHelper);\n    }\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void markAsClass(DomExtension extension, String fieldName, @Nullable With withElement) {\n    if (withElement != null) {\n      final String withClassName = withElement.getImplements().getStringValue();\n      extension.addCustomAnnotation(new ExtendClassImpl() {\n        @Override\n        public String value() {\n          return withClassName;\n        }\n      });\n    }\n    if (fieldName.endsWith(\"Class\") || withElement != null) {\n      extension.setConverter(CLASS_CONVERTER);\n    }\n  }","id":59746,"modified_method":"private static void markAsClass(DomExtension extension, String fieldName, @Nullable With withElement) {\n    if (withElement != null) {\n      final String withClassName = withElement.getImplements().getStringValue();\n      extension.addCustomAnnotation(new ExtendClassImpl() {\n        @Override\n        public String value() {\n          return withClassName;\n        }\n      });\n    }\n    if (isClassField(fieldName) || withElement != null) {\n      extension.setConverter(CLASS_CONVERTER);\n    }\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static With findWithElement(List<With> elements, PsiField field) {\n    for (With element : elements) {\n      if (field.getName().equals(element.getAttribute().getStringValue())) {\n        return element;\n      }\n    }\n    return null;\n  }","id":59747,"modified_method":"@Nullable\n  public static With findWithElement(List<With> elements, PsiField field) {\n    for (With element : elements) {\n      if (field.getName().equals(element.getAttribute().getStringValue())) {\n        return element;\n      }\n    }\n    return null;\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static String getStringAttribute(final PsiAnnotation annotation,\n                                           final String name,\n                                           final PsiConstantEvaluationHelper evalHelper) {\n    String value = getAttributeValue(annotation, name);\n    if (value != null) return value;\n    final Object o = evalHelper.computeConstantExpression(annotation.findAttributeValue(name), false);\n    return o instanceof String && StringUtil.isNotEmpty((String)o)? (String)o : null;\n  }","id":59748,"modified_method":"@Nullable\n  static String getStringAttribute(final PsiAnnotation annotation,\n                                   final String name,\n                                   final PsiConstantEvaluationHelper evalHelper) {\n    String value = getAttributeValue(annotation, name);\n    if (value != null) return value;\n    final Object o = evalHelper.computeConstantExpression(annotation.findAttributeValue(name), false);\n    return o instanceof String && StringUtil.isNotEmpty((String)o)? (String)o : null;\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  @Override\n  public PsiField fromString(@Nullable @NonNls String s, ConvertContext context) {\n    PsiClass value = getEPBeanClass(context);\n    if (value == null) return null;\n    return value.findFieldByName(s, true);\n  }","id":59749,"modified_method":"@Nullable\n  @Override\n  public PsiField fromString(@Nullable @NonNls String s, ConvertContext context) {\n    if (s == null) return null;\n    PsiClass value = getEPBeanClass(context);\n    if (value == null) return null;\n    PsiField field = value.findFieldByName(s, true);\n    if (field != null) {\n      return field;\n    }\n    return findFieldByAttributeValue(value, s);\n  }","commit_id":"aa54cd2a2631db4d8c66cd160f510c10a9daccfa","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void init(@NotNull CodeStyleSchemes schemesManager) {\n    LOG.assertTrue(myCodeStyleSettings == null, \"Already initialized\");\n    init(myParentSchemeName == null ? null : schemesManager.findSchemeByName(myParentSchemeName), myRootElement);\n    myParentSchemeName = null;\n    myRootElement = null;\n  }","id":59750,"modified_method":"void init(@NotNull SchemesManager<CodeStyleScheme, CodeStyleSchemeImpl> schemesManager) {\n    LOG.assertTrue(myCodeStyleSettings == null, \"Already initialized\");\n    init(myParentSchemeName == null ? null : schemesManager.findSchemeByName(myParentSchemeName), myRootElement);\n    myParentSchemeName = null;\n    myRootElement = null;\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public abstract CodeStyleScheme findSchemeByName(@NotNull String name);","id":59751,"modified_method":"@Nullable\n  protected abstract CodeStyleScheme findSchemeByName(@NotNull String name);","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public SchemesManager<CodeStyleScheme, CodeStyleSchemeImpl> getSchemeManager() {\n    return mySchemesManager;\n  }","id":59752,"modified_method":"@NotNull\n  public static SchemesManager<CodeStyleScheme, CodeStyleSchemeImpl> getSchemeManager() {\n    return ((CodeStyleSchemesImpl)CodeStyleSchemes.getInstance()).mySchemeManager;\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void addScheme(@NotNull CodeStyleScheme scheme) {\n    mySchemesManager.addScheme(scheme);\n  }","id":59753,"modified_method":"@Override\n  public void addScheme(@NotNull CodeStyleScheme scheme) {\n    mySchemeManager.addScheme(scheme);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings(\"ForLoopThatDoesntUseLoopVariable\")\n  @Override\n  public CodeStyleScheme createNewScheme(String preferredName, CodeStyleScheme parentScheme) {\n    String name;\n    if (preferredName == null) {\n      if (parentScheme == null) throw new IllegalArgumentException(\"parentScheme must not be null\");\n      // Generate using parent name\n      name = null;\n      for (int i = 1; name == null; i++) {\n        String currName = parentScheme.getName() + \" (\" + i + \")\";\n        if (findSchemeByName(currName) == null) {\n          name = currName;\n        }\n      }\n    }\n    else {\n      name = null;\n      for (int i = 0; name == null; i++) {\n        String currName = i == 0 ? preferredName : preferredName + \" (\" + i + \")\";\n        if (findSchemeByName(currName) == null) {\n          name = currName;\n        }\n      }\n    }\n    return new CodeStyleSchemeImpl(name, false, parentScheme);\n  }","id":59754,"modified_method":"@SuppressWarnings(\"ForLoopThatDoesntUseLoopVariable\")\n  @Override\n  public CodeStyleScheme createNewScheme(String preferredName, CodeStyleScheme parentScheme) {\n    String name;\n    if (preferredName == null) {\n      if (parentScheme == null) throw new IllegalArgumentException(\"parentScheme must not be null\");\n      // Generate using parent name\n      name = null;\n      for (int i = 1; name == null; i++) {\n        String currName = parentScheme.getName() + \" (\" + i + \")\";\n        if (mySchemeManager.findSchemeByName(currName) == null) {\n          name = currName;\n        }\n      }\n    }\n    else {\n      name = null;\n      for (int i = 0; name == null; i++) {\n        String currName = i == 0 ? preferredName : preferredName + \" (\" + i + \")\";\n        if (mySchemeManager.findSchemeByName(currName) == null) {\n          name = currName;\n        }\n      }\n    }\n    return new CodeStyleSchemeImpl(name, false, parentScheme);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public CodeStyleScheme getDefaultScheme() {\n    return findSchemeByName(DEFAULT_SCHEME_NAME);\n  }","id":59755,"modified_method":"@Override\n  public CodeStyleScheme getDefaultScheme() {\n    return mySchemeManager.findSchemeByName(DEFAULT_SCHEME_NAME);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CodeStyleSchemesImpl(@NotNull SchemesManagerFactory schemesManagerFactory) {\n    mySchemesManager = schemesManagerFactory.create(CODE_STYLES_DIR_PATH, new SchemeProcessor<CodeStyleSchemeImpl>() {\n      @NotNull\n      @Override\n      public CodeStyleSchemeImpl readScheme(@NotNull Element element) {\n        return new CodeStyleSchemeImpl(element.getAttributeValue(\"name\"), element.getAttributeValue(\"parent\"), element);\n      }\n\n      @Override\n      public Element writeScheme(@NotNull CodeStyleSchemeImpl scheme) throws WriteExternalException {\n        Element newElement = new Element(\"code_scheme\");\n        newElement.setAttribute(\"name\", scheme.getName());\n        scheme.writeExternal(newElement);\n        return newElement;\n      }\n\n      @NotNull\n      @Override\n      public State getState(@NotNull CodeStyleSchemeImpl scheme) {\n        return scheme.isDefault() ? State.NON_PERSISTENT : State.POSSIBLY_CHANGED;\n      }\n\n      @Override\n      public void initScheme(@NotNull CodeStyleSchemeImpl scheme) {\n        scheme.init(CodeStyleSchemesImpl.this);\n      }\n    });\n\n    mySchemesManager.loadSchemes();\n    addScheme(new CodeStyleSchemeImpl(DEFAULT_SCHEME_NAME, true, null));\n    setCurrentScheme(getDefaultScheme());\n  }","id":59756,"modified_method":"public CodeStyleSchemesImpl(@NotNull SchemesManagerFactory schemesManagerFactory) {\n    mySchemeManager = schemesManagerFactory.create(CODE_STYLES_DIR_PATH, new SchemeProcessor<CodeStyleSchemeImpl>() {\n      @NotNull\n      @Override\n      public CodeStyleSchemeImpl readScheme(@NotNull Element element) {\n        return new CodeStyleSchemeImpl(element.getAttributeValue(\"name\"), element.getAttributeValue(\"parent\"), element);\n      }\n\n      @Override\n      public Element writeScheme(@NotNull CodeStyleSchemeImpl scheme) throws WriteExternalException {\n        Element newElement = new Element(\"code_scheme\");\n        newElement.setAttribute(\"name\", scheme.getName());\n        scheme.writeExternal(newElement);\n        return newElement;\n      }\n\n      @NotNull\n      @Override\n      public State getState(@NotNull CodeStyleSchemeImpl scheme) {\n        return scheme.isDefault() ? State.NON_PERSISTENT : State.POSSIBLY_CHANGED;\n      }\n\n      @Override\n      public void initScheme(@NotNull CodeStyleSchemeImpl scheme) {\n        scheme.init(mySchemeManager);\n      }\n    });\n\n    mySchemeManager.loadSchemes();\n    addScheme(new CodeStyleSchemeImpl(DEFAULT_SCHEME_NAME, true, null));\n    setCurrentScheme(getDefaultScheme());\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public CodeStyleScheme getCurrentScheme() {\n    return mySchemesManager.getCurrentScheme();\n  }","id":59757,"modified_method":"@Override\n  public CodeStyleScheme getCurrentScheme() {\n    return mySchemeManager.getCurrentScheme();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void setCurrentScheme(CodeStyleScheme scheme) {\n    mySchemesManager.setCurrent(scheme);\n  }","id":59758,"modified_method":"@Override\n  public void setCurrentScheme(CodeStyleScheme scheme) {\n    mySchemeManager.setCurrent(scheme);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  @Override\n  public CodeStyleScheme findSchemeByName(@NotNull String name) {\n    return mySchemesManager.findSchemeByName(name);\n  }","id":59759,"modified_method":"@Nullable\n  @Override\n  public CodeStyleScheme findSchemeByName(@NotNull String name) {\n    return mySchemeManager.findSchemeByName(name);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void deleteScheme(CodeStyleScheme scheme) {\n    if (scheme.isDefault()) {\n      throw new IllegalArgumentException(\"Unable to delete default scheme!\");\n    }\n    CodeStyleSchemeImpl currScheme = (CodeStyleSchemeImpl)getCurrentScheme();\n    if (currScheme == scheme) {\n      CodeStyleScheme newCurrentScheme = getDefaultScheme();\n      if (newCurrentScheme == null) {\n        throw new IllegalStateException(\"Unable to load default scheme!\");\n      }\n      setCurrentScheme(newCurrentScheme);\n    }\n    mySchemesManager.removeScheme(scheme);\n  }","id":59760,"modified_method":"@Override\n  public void deleteScheme(CodeStyleScheme scheme) {\n    if (scheme.isDefault()) {\n      throw new IllegalArgumentException(\"Unable to delete default scheme!\");\n    }\n    CodeStyleSchemeImpl currScheme = (CodeStyleSchemeImpl)getCurrentScheme();\n    if (currScheme == scheme) {\n      CodeStyleScheme newCurrentScheme = getDefaultScheme();\n      if (newCurrentScheme == null) {\n        throw new IllegalStateException(\"Unable to load default scheme!\");\n      }\n      setCurrentScheme(newCurrentScheme);\n    }\n    mySchemeManager.removeScheme(scheme);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public List<CodeStyleScheme> getAllSortedSchemes() {\n    List<CodeStyleScheme> schemes = new ArrayList<CodeStyleScheme>();\n    schemes.addAll(getSchemes());\n    schemes.add(myProjectScheme);\n    Collections.sort(schemes, new Comparator<CodeStyleScheme>() {\n      @Override\n      public int compare(CodeStyleScheme s1, CodeStyleScheme s2) {\n        if (isProjectScheme(s1)) return -1;\n        if (isProjectScheme(s2)) return 1;\n        if (s1.isDefault()) return -1;\n        if (s2.isDefault()) return 1;\n        return s1.getName().compareToIgnoreCase(s2.getName());\n      }\n    });\n    return schemes;\n  }","id":59761,"modified_method":"public List<CodeStyleScheme> getAllSortedSchemes() {\n    List<CodeStyleScheme> schemes = new ArrayList<CodeStyleScheme>();\n    schemes.addAll(getSchemes());\n    schemes.add(myProjectScheme);\n    Collections.sort(schemes, (s1, s2) -> {\n      if (isProjectScheme(s1)) return -1;\n      if (isProjectScheme(s2)) return 1;\n      if (s1.isDefault()) return -1;\n      if (s2.isDefault()) return 1;\n      return s1.getName().compareToIgnoreCase(s2.getName());\n    });\n    return schemes;\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isSchemeListModified() {\n    CodeStyleSchemes schemes = CodeStyleSchemes.getInstance();\n    if (getProjectSettings().USE_PER_PROJECT_SETTINGS != myUsePerProjectSettings) return true;\n    if (!myUsePerProjectSettings &&\n        getSelectedScheme() != schemes.findPreferredScheme(getProjectSettings().PREFERRED_PROJECT_CODE_STYLE)) {\n      return true;\n    }\n    Set<CodeStyleScheme> configuredSchemesSet = new HashSet<CodeStyleScheme>(getSchemes());\n    Set<CodeStyleScheme> savedSchemesSet = new HashSet<CodeStyleScheme>(Arrays.asList(schemes.getSchemes()));\n    return !configuredSchemesSet.equals(savedSchemesSet);\n  }","id":59762,"modified_method":"public boolean isSchemeListModified() {\n    CodeStyleSchemes schemes = CodeStyleSchemes.getInstance();\n    if (getProjectSettings().USE_PER_PROJECT_SETTINGS != myUsePerProjectSettings) return true;\n    if (!myUsePerProjectSettings &&\n        getSelectedScheme() != schemes.findPreferredScheme(getProjectSettings().PREFERRED_PROJECT_CODE_STYLE)) {\n      return true;\n    }\n    Set<CodeStyleScheme> configuredSchemesSet = new HashSet<CodeStyleScheme>(getSchemes());\n    return !configuredSchemesSet.equals(new THashSet<>(CodeStyleSchemesImpl.getSchemeManager().getAllSchemes()));\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void reset() {\n    myUsePerProjectSettings = getProjectSettings().USE_PER_PROJECT_SETTINGS;\n\n    CodeStyleScheme[] allSchemes = CodeStyleSchemes.getInstance().getSchemes();\n    mySettingsToClone.clear();\n    mySchemes.clear();\n    ContainerUtil.addAll(mySchemes, allSchemes);\n    myGlobalSelected = CodeStyleSchemes.getInstance().findPreferredScheme(getProjectSettings().PREFERRED_PROJECT_CODE_STYLE);\n\n    CodeStyleSettings perProjectSettings = getProjectSettings().PER_PROJECT_SETTINGS;\n    if (perProjectSettings != null) {\n      myProjectScheme.setCodeStyleSettings(perProjectSettings);\n    }\n\n\n    myDispatcher.getMulticaster().schemeListChanged();\n    myDispatcher.getMulticaster().currentSchemeChanged(this);\n\n  }","id":59763,"modified_method":"public void reset() {\n    myUsePerProjectSettings = getProjectSettings().USE_PER_PROJECT_SETTINGS;\n\n    mySettingsToClone.clear();\n    mySchemes.clear();\n    ContainerUtil.addAll(mySchemes, CodeStyleSchemesImpl.getSchemeManager().getAllSchemes());\n    myGlobalSelected = CodeStyleSchemes.getInstance().findPreferredScheme(getProjectSettings().PREFERRED_PROJECT_CODE_STYLE);\n\n    CodeStyleSettings perProjectSettings = getProjectSettings().PER_PROJECT_SETTINGS;\n    if (perProjectSettings != null) {\n      myProjectScheme.setCodeStyleSettings(perProjectSettings);\n    }\n\n\n    myDispatcher.getMulticaster().schemeListChanged();\n    myDispatcher.getMulticaster().currentSchemeChanged(this);\n\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void apply() {\n    CodeStyleSettingsManager projectSettingsManager = getProjectSettings();\n    projectSettingsManager.USE_PER_PROJECT_SETTINGS = myUsePerProjectSettings;\n    projectSettingsManager.PREFERRED_PROJECT_CODE_STYLE =\n      myUsePerProjectSettings || myGlobalSelected == null ? null : myGlobalSelected.getName();\n    projectSettingsManager.PER_PROJECT_SETTINGS = myProjectScheme.getCodeStyleSettings();\n\n    ((CodeStyleSchemesImpl)CodeStyleSchemes.getInstance()).getSchemeManager().setSchemes(mySchemes, myGlobalSelected, null);\n\n    // We want to avoid the situation when 'real code style' differs from the copy stored here (e.g. when 'real code style' changes\n    // are 'committed' by pressing 'Apply' button). So, we reset the copies here assuming that this method is called on 'Apply'\n    // button processing\n    mySettingsToClone.clear();\n  }","id":59764,"modified_method":"public void apply() {\n    CodeStyleSettingsManager projectSettingsManager = getProjectSettings();\n    projectSettingsManager.USE_PER_PROJECT_SETTINGS = myUsePerProjectSettings;\n    projectSettingsManager.PREFERRED_PROJECT_CODE_STYLE =\n      myUsePerProjectSettings || myGlobalSelected == null ? null : myGlobalSelected.getName();\n    projectSettingsManager.PER_PROJECT_SETTINGS = myProjectScheme.getCodeStyleSettings();\n\n    CodeStyleSchemesImpl.getSchemeManager().setSchemes(mySchemes, myGlobalSelected, null);\n\n    // We want to avoid the situation when 'real code style' differs from the copy stored here (e.g. when 'real code style' changes\n    // are 'committed' by pressing 'Apply' button). So, we reset the copies here assuming that this method is called on 'Apply'\n    // button processing\n    mySettingsToClone.clear();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void reportResult(final ValuesExtractionResult forSelection, final Project project,\n                           final CodeStyleSettings cloneSettings, final PsiFile file, final Map<Value, Object> backup) {\n    final Balloon balloon = JBPopupFactory.getInstance()\n        .createHtmlTextBalloonBuilder(\n            \"Formatting Options were extracted<br/><a href=\\\"apply\\\">Apply<\/a> <a href=\\\"details\\\">Details...<\/a>\",\n            MessageType.INFO,\n            new HyperlinkListener() {\n              @Override\n              public void hyperlinkUpdate(HyperlinkEvent e) {\n                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n                  boolean apply = \"apply\".equals(e.getDescription());\n                  ExtractedSettingsDialog myDialog = null;\n                  if (!apply) {\n                    final List<Value> values = forSelection.getValues();\n                    final LanguageCodeStyleSettingsProvider[] providers = Extensions.getExtensions(\n                      LanguageCodeStyleSettingsProvider.EP_NAME);\n                    Language language = file.getLanguage();\n                    CodeStyleSettingsNameProvider nameProvider = new CodeStyleSettingsNameProvider();\n                    for (final LanguageCodeStyleSettingsProvider provider : providers) {\n                      Language target = provider.getLanguage();\n                      if (target.equals(language)) {\n                        //this is our language\n                        nameProvider.addSettings(provider);\n                        myDialog = new ExtractedSettingsDialog(project, nameProvider, values);\n                        apply = myDialog.showAndGet();\n                        break;\n                      }\n                    }\n                    }\n                    if (apply && myDialog != null) {\n                      //create new settings named after the file\n                      final ExtractedSettingsDialog finalMyDialog = myDialog;\n                      forSelection.applyConditioned(new Condition<Value>() {\n                        @Override\n                        public boolean value(Value value) {\n                          return finalMyDialog.valueIsSelectedInTree(value);\n                        }\n                      }, backup);\n                      CodeStyleScheme derivedScheme = CodeStyleSchemes.getInstance().createNewScheme(\"Derived from \" + file.getName(), null);\n                      derivedScheme.getCodeStyleSettings().copyFrom(cloneSettings);\n                      CodeStyleSchemes.getInstance().addScheme(derivedScheme);\n                      ((CodeStyleSchemesImpl) CodeStyleSchemes.getInstance()).getSchemeManager().setCurrent(derivedScheme);\n                      CodeStyleSettingsManager.getInstance(project).PREFERRED_PROJECT_CODE_STYLE = derivedScheme.getName();\n                    }\n                  }\n\n                }\n              }\n              ).setDisposable(ApplicationManager.getApplication()).setShowCallout(false).setFadeoutTime(0).\n              setShowCallout(false).setAnimationCycle(0).setHideOnClickOutside(false).setHideOnKeyOutside(false).\n              setCloseButtonEnabled(true).setHideOnLinkClick(true).createBalloon();\n\n              ApplicationManager.getApplication().\n\n              invokeLater(new Runnable() {\n                @Override\n                public void run () {\n                  Window window = WindowManager.getInstance().getFrame(project);\n                  if (window == null) {\n                    window = JOptionPane.getRootFrame();\n                  }\n                  if (window instanceof IdeFrame) {\n                    BalloonLayout layout = ((IdeFrame) window).getBalloonLayout();\n                    if (layout != null) {\n                      layout.add(balloon);\n                    }\n                  }\n                }\n              }\n\n              );\n            }","id":59765,"modified_method":"public void reportResult(final ValuesExtractionResult forSelection, final Project project,\n                           final CodeStyleSettings cloneSettings, final PsiFile file, final Map<Value, Object> backup) {\n    final Balloon balloon = JBPopupFactory.getInstance()\n        .createHtmlTextBalloonBuilder(\n            \"Formatting Options were extracted<br/><a href=\\\"apply\\\">Apply<\/a> <a href=\\\"details\\\">Details...<\/a>\",\n            MessageType.INFO,\n            new HyperlinkListener() {\n              @Override\n              public void hyperlinkUpdate(HyperlinkEvent e) {\n                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n                  boolean apply = \"apply\".equals(e.getDescription());\n                  ExtractedSettingsDialog myDialog = null;\n                  if (!apply) {\n                    final List<Value> values = forSelection.getValues();\n                    final LanguageCodeStyleSettingsProvider[] providers = Extensions.getExtensions(\n                      LanguageCodeStyleSettingsProvider.EP_NAME);\n                    Language language = file.getLanguage();\n                    CodeStyleSettingsNameProvider nameProvider = new CodeStyleSettingsNameProvider();\n                    for (final LanguageCodeStyleSettingsProvider provider : providers) {\n                      Language target = provider.getLanguage();\n                      if (target.equals(language)) {\n                        //this is our language\n                        nameProvider.addSettings(provider);\n                        myDialog = new ExtractedSettingsDialog(project, nameProvider, values);\n                        apply = myDialog.showAndGet();\n                        break;\n                      }\n                    }\n                    }\n                    if (apply && myDialog != null) {\n                      //create new settings named after the file\n                      final ExtractedSettingsDialog finalMyDialog = myDialog;\n                      forSelection.applyConditioned(new Condition<Value>() {\n                        @Override\n                        public boolean value(Value value) {\n                          return finalMyDialog.valueIsSelectedInTree(value);\n                        }\n                      }, backup);\n                      CodeStyleScheme derivedScheme = CodeStyleSchemes.getInstance().createNewScheme(\"Derived from \" + file.getName(), null);\n                      derivedScheme.getCodeStyleSettings().copyFrom(cloneSettings);\n                      CodeStyleSchemes.getInstance().addScheme(derivedScheme);\n                      CodeStyleSchemesImpl.getSchemeManager().setCurrent(derivedScheme);\n                      CodeStyleSettingsManager.getInstance(project).PREFERRED_PROJECT_CODE_STYLE = derivedScheme.getName();\n                    }\n                  }\n\n                }\n              }\n              ).setDisposable(ApplicationManager.getApplication()).setShowCallout(false).setFadeoutTime(0).\n              setShowCallout(false).setAnimationCycle(0).setHideOnClickOutside(false).setHideOnKeyOutside(false).\n              setCloseButtonEnabled(true).setHideOnLinkClick(true).createBalloon();\n\n              ApplicationManager.getApplication().\n\n              invokeLater(new Runnable() {\n                @Override\n                public void run () {\n                  Window window = WindowManager.getInstance().getFrame(project);\n                  if (window == null) {\n                    window = JOptionPane.getRootFrame();\n                  }\n                  if (window instanceof IdeFrame) {\n                    BalloonLayout layout = ((IdeFrame) window).getBalloonLayout();\n                    if (layout != null) {\n                      layout.add(balloon);\n                    }\n                  }\n                }\n              }\n\n              );\n            }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void exportSelectedScheme() {\n    new CodeStyleSchemeExporterUI(myExportButton, getSelectedScheme(), new CodeStyleSchemeExporterUI.StatusCallback() {\n      @Override\n      public void showMessage(@NotNull String message, @NotNull MessageType messageType) {\n        showStatus(myExportButton, message, messageType);\n      }\n    }).export();\n  }","id":59766,"modified_method":"private void exportSelectedScheme() {\n    new CodeStyleSchemeExporterUI(myExportButton, getSelectedScheme(),\n                                  (message, messageType) -> showStatus(myExportButton, message, messageType)).export();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected ManageCodeStyleSchemesDialog(final Component parent, CodeStyleSchemesModel schemesModel) {\n    super(parent, true);\n    myParent = parent;\n    myModel = schemesModel;\n    setTitle(\"Code Style Schemes\");\n    mySchemesTableModel = new MySchemesTableModel(schemesModel);\n    mySchemesTable.setModel(mySchemesTableModel);\n    mySchemesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    mySchemesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(@NotNull ListSelectionEvent e) {\n        updateActions();\n      }\n    });\n    setDefaultSelection();\n\n\n    myDeleteButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        deleteSelected();\n      }\n    });\n    mySaveAsButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        onSaveAs();\n      }\n    });\n    myCopyToProjectButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        onCopyToProject();\n      }\n    });\n    myCloseButton.addActionListener(new ActionListener(){\n      @Override\n      public void actionPerformed(@NotNull ActionEvent e) {\n        doCancelAction();\n      }\n    });\n\n    myExportButton.setVisible(false);\n\n    if (SchemeImporterEP.getExtensions(CodeStyleScheme.class).isEmpty()) {\n      myImportButton.setVisible(false);\n    }\n    else {\n      myImportButton.setVisible(true);\n      myImportButton.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(@NotNull final ActionEvent e) {\n          chooseAndImport();\n        }\n      });\n    }\n\n    if (SchemeExporterEP.getExtensions(CodeStyleScheme.class).isEmpty()) {\n      myExportButton.setVisible(false);\n    }\n    else {\n      myExportButton.setVisible(true);\n      myExportButton.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          exportSelectedScheme();\n        }\n      });\n    }\n\n    init();\n  }","id":59767,"modified_method":"protected ManageCodeStyleSchemesDialog(final Component parent, CodeStyleSchemesModel schemesModel) {\n    super(parent, true);\n    myParent = parent;\n    myModel = schemesModel;\n    setTitle(\"Code Style Schemes\");\n    mySchemesTableModel = new MySchemesTableModel(schemesModel);\n    mySchemesTable.setModel(mySchemesTableModel);\n    mySchemesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    mySchemesTable.getSelectionModel().addListSelectionListener(e -> updateActions());\n    setDefaultSelection();\n\n\n    myDeleteButton.addActionListener(e -> deleteSelected());\n    mySaveAsButton.addActionListener(e -> onSaveAs());\n    myCopyToProjectButton.addActionListener(e -> onCopyToProject());\n    myCloseButton.addActionListener(e -> doCancelAction());\n\n    myExportButton.setVisible(false);\n\n    if (SchemeImporterEP.getExtensions(CodeStyleScheme.class).isEmpty()) {\n      myImportButton.setVisible(false);\n    }\n    else {\n      myImportButton.setVisible(true);\n      myImportButton.addActionListener(e -> chooseAndImport());\n    }\n\n    if (SchemeExporterEP.getExtensions(CodeStyleScheme.class).isEmpty()) {\n      myExportButton.setVisible(false);\n    }\n    else {\n      myExportButton.setVisible(true);\n      myExportButton.addActionListener(e -> exportSelectedScheme());\n    }\n\n    init();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void onSaveAs() {\n    if (mySchemesTableModel.isProjectScheme(getSelectedScheme())) {\n      int rowToSelect = mySchemesTableModel.exportProjectScheme();\n      if (rowToSelect > 0) {\n        mySchemesTable.getSelectionModel().setSelectionInterval(rowToSelect, rowToSelect);\n      }\n    }\n    else {\n      CodeStyleScheme[] schemes = CodeStyleSchemes.getInstance().getSchemes();\n      ArrayList<String> names = new ArrayList<String>();\n      for (CodeStyleScheme scheme : schemes) {\n        names.add(scheme.getName());\n      }\n      String selectedName = getSelectedScheme().getName();\n      SaveSchemeDialog saveDialog =\n        new SaveSchemeDialog(myParent, ApplicationBundle.message(\"title.save.code.style.scheme.as\"), names, selectedName);\n      if (saveDialog.showAndGet()) {\n        int row = mySchemesTableModel.createNewScheme(getSelectedScheme(), saveDialog.getSchemeName());\n        mySchemesTable.getSelectionModel().setSelectionInterval(row, row);\n      }\n    }\n  }","id":59768,"modified_method":"private void onSaveAs() {\n    if (mySchemesTableModel.isProjectScheme(getSelectedScheme())) {\n      int rowToSelect = mySchemesTableModel.exportProjectScheme();\n      if (rowToSelect > 0) {\n        mySchemesTable.getSelectionModel().setSelectionInterval(rowToSelect, rowToSelect);\n      }\n    }\n    else {\n      Collection<String> names = CodeStyleSchemesImpl.getSchemeManager().getAllSchemeNames();\n      String selectedName = getSelectedScheme().getName();\n      SaveSchemeDialog saveDialog =\n        new SaveSchemeDialog(myParent, ApplicationBundle.message(\"title.save.code.style.scheme.as\"), names, selectedName);\n      if (saveDialog.showAndGet()) {\n        int row = mySchemesTableModel.createNewScheme(getSelectedScheme(), saveDialog.getSchemeName());\n        mySchemesTable.getSelectionModel().setSelectionInterval(row, row);\n      }\n    }\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void showStatus(final JComponent component, final String message, MessageType messageType) {\n    BalloonBuilder balloonBuilder = JBPopupFactory.getInstance()\n      .createHtmlTextBalloonBuilder(message, messageType.getDefaultIcon(),\n                                    messageType.getPopupBackground(), null);\n    balloonBuilder.setFadeoutTime(5000);\n    final Balloon balloon = balloonBuilder.createBalloon();\n    final Rectangle rect = component.getBounds();\n    final Point p = new Point(rect.x, rect.y + rect.height);\n    balloon.showInCenterOf(component);\n    Disposer.register(ProjectManager.getInstance().getDefaultProject(), balloon);\n  }","id":59769,"modified_method":"private static void showStatus(final JComponent component, final String message, MessageType messageType) {\n    BalloonBuilder balloonBuilder = JBPopupFactory.getInstance()\n      .createHtmlTextBalloonBuilder(message, messageType.getDefaultIcon(),\n                                    messageType.getPopupBackground(), null);\n    balloonBuilder.setFadeoutTime(5000);\n    final Balloon balloon = balloonBuilder.createBalloon();\n    balloon.showInCenterOf(component);\n    Disposer.register(ProjectManager.getInstance().getDefaultProject(), balloon);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void loadState(Element state) {\n    XmlSerializer.deserializeInto(this, state);\n    CodeStyleScheme current = CURRENT_SCHEME_NAME == null ? null : findSchemeByName(CURRENT_SCHEME_NAME);\n    setCurrentScheme(current == null ? getDefaultScheme() : current);\n  }","id":59770,"modified_method":"@Override\n  public void loadState(Element state) {\n    XmlSerializer.deserializeInto(this, state);\n    CodeStyleScheme current = CURRENT_SCHEME_NAME == null ? null : mySchemeManager.findSchemeByName(CURRENT_SCHEME_NAME);\n    setCurrentScheme(current == null ? getDefaultScheme() : current);\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected boolean isEnabled() {\n    return CodeStyleSchemes.getInstance().getSchemes().length > 1;\n  }","id":59771,"modified_method":"@Override\n  protected boolean isEnabled() {\n    return !CodeStyleSchemesImpl.getSchemeManager().getAllSchemes().isEmpty();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void fillActions(Project project, @NotNull DefaultActionGroup group, @NotNull DataContext dataContext) {\n    final CodeStyleSettingsManager manager = CodeStyleSettingsManager.getInstance(project);\n    if (manager.PER_PROJECT_SETTINGS != null) {\n      //noinspection HardCodedStringLiteral\n      group.add(new AnAction(\"<project>\", \"\",\n                             manager.USE_PER_PROJECT_SETTINGS ? ourCurrentAction : ourNotCurrentAction) {\n        @Override\n        public void actionPerformed(@NotNull AnActionEvent e) {\n          manager.USE_PER_PROJECT_SETTINGS = true;\n        }\n      });\n    }\n\n    CodeStyleScheme currentScheme = CodeStyleSchemes.getInstance().getCurrentScheme();\n    for (CodeStyleScheme scheme : CodeStyleSchemes.getInstance().getSchemes()) {\n      addScheme(group, manager, currentScheme, scheme, false);\n    }\n  }","id":59772,"modified_method":"@Override\n  protected void fillActions(Project project, @NotNull DefaultActionGroup group, @NotNull DataContext dataContext) {\n    final CodeStyleSettingsManager manager = CodeStyleSettingsManager.getInstance(project);\n    if (manager.PER_PROJECT_SETTINGS != null) {\n      //noinspection HardCodedStringLiteral\n      group.add(new AnAction(\"<project>\", \"\",\n                             manager.USE_PER_PROJECT_SETTINGS ? ourCurrentAction : ourNotCurrentAction) {\n        @Override\n        public void actionPerformed(@NotNull AnActionEvent e) {\n          manager.USE_PER_PROJECT_SETTINGS = true;\n        }\n      });\n    }\n\n    CodeStyleScheme currentScheme = CodeStyleSchemes.getInstance().getCurrentScheme();\n    for (CodeStyleScheme scheme : CodeStyleSchemesImpl.getSchemeManager().getAllSchemes()) {\n      addScheme(group, manager, currentScheme, scheme, false);\n    }\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SaveSchemeDialog(@NotNull Component parent, String title, @NotNull List<String> existingNames, @NotNull String selectedName) {\n    super(parent, false);\n    myExistingNames = existingNames;\n    setTitle(title);\n    mySchemeName.setText(UniqueNameGenerator.generateUniqueName(selectedName + \" copy\", existingNames));\n    init();\n  }","id":59773,"modified_method":"public SaveSchemeDialog(@NotNull Component parent, String title, @NotNull Collection<String> existingNames, @NotNull String selectedName) {\n    super(parent, false);\n    myExistingNames = existingNames;\n    setTitle(title);\n    mySchemeName.setText(UniqueNameGenerator.generateUniqueName(selectedName + \" copy\", existingNames));\n    init();\n  }","commit_id":"a6a7eebd0b668b38e4f46fb963abc5f68501907f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Messages({\"CaseInformationPanel.caseDetails.header=Case Details\",\n        \"CaseInformationPanel.ingestJobInfo.header=Ingest Job Information\",\n        \"CaseInformationPanel.loadMetadataFail.message=Failed to load case metadata.\",\n        \"CaseInformationPanel.loadMetadataFail.title=Metadata load failure\",})\n    private void customizeComponents() {\n        try {\n            Case currentCase = Case.getCurrentCase();\n            String crDate = currentCase.getCreatedDate();\n            String caseDir = currentCase.getCaseDirectory();\n\n            // put the image paths information into hashmap\n            Map<Long, String> imgPaths = Case.getImagePaths(currentCase.getSleuthkitCase());\n            CasePropertiesForm cpf = new CasePropertiesForm(currentCase, crDate, caseDir, imgPaths);\n            cpf.setSize(cpf.getPreferredSize());\n            this.tabbedPane.addTab(Bundle.CaseInformationPanel_caseDetails_header(), cpf);\n            this.tabbedPane.addTab(Bundle.CaseInformationPanel_ingestJobInfo_header(), new IngestJobInfoPanel());\n            this.tabbedPane.addChangeListener(new ChangeListener() {\n                @Override\n                public void stateChanged(ChangeEvent e) {\n                    tabbedPane.getSelectedComponent().setSize(tabbedPane.getSelectedComponent().getPreferredSize());\n                }\n            });\n        } catch (CaseMetadata.CaseMetadataException ex) {\n            logger.log(Level.SEVERE, \"Failed to load case metadata.\", ex);\n            JOptionPane.showMessageDialog(null, Bundle.IngestJobInfoPanel_loadIngestJob_error_text(), Bundle.IngestJobInfoPanel_loadIngestJob_error_title(), JOptionPane.ERROR_MESSAGE);\n        }\n    }","id":59774,"modified_method":"@Messages({\"CaseInformationPanel.caseDetails.header=Case Details\",\n        \"CaseInformationPanel.ingestJobInfo.header=Ingest History\",\n        \"CaseInformationPanel.loadMetadataFail.message=Failed to load case metadata.\",\n        \"CaseInformationPanel.loadMetadataFail.title=Metadata load failure\",})\n    private void customizeComponents() {\n        try {\n            Case currentCase = Case.getCurrentCase();\n            String crDate = currentCase.getCreatedDate();\n            String caseDir = currentCase.getCaseDirectory();\n\n            // put the image paths information into hashmap\n            Map<Long, String> imgPaths = Case.getImagePaths(currentCase.getSleuthkitCase());\n            CasePropertiesForm cpf = new CasePropertiesForm(currentCase, crDate, caseDir, imgPaths);\n            cpf.setSize(cpf.getPreferredSize());\n            this.tabbedPane.addTab(Bundle.CaseInformationPanel_caseDetails_header(), cpf);\n            this.tabbedPane.addTab(Bundle.CaseInformationPanel_ingestJobInfo_header(), new IngestJobInfoPanel());\n            this.tabbedPane.addChangeListener((ChangeEvent e) -> {\n                tabbedPane.getSelectedComponent().setSize(tabbedPane.getSelectedComponent().getPreferredSize());\n            });\n        } catch (CaseMetadata.CaseMetadataException ex) {\n            logger.log(Level.SEVERE, \"Failed to load case metadata.\", ex);\n            JOptionPane.showMessageDialog(null, Bundle.IngestJobInfoPanel_loadIngestJob_error_text(), Bundle.IngestJobInfoPanel_loadIngestJob_error_title(), JOptionPane.ERROR_MESSAGE);\n        }\n    }","commit_id":"578a98d5ff525c54bca044067f023aaa8fcf4c80","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        ingestJobTable = new javax.swing.JTable();\n        jButton1 = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        ingestModuleTable = new javax.swing.JTable();\n\n        jScrollPane1.setBorder(null);\n\n        ingestJobTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Content\", \"Start Time\", \"End Time\", \"Ingest Status\"\n            }\n        ) {\n            Class[] types = new Class [] {\n                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class\n            };\n            boolean[] canEdit = new boolean [] {\n                false, false, false, false\n            };\n\n            public Class getColumnClass(int columnIndex) {\n                return types [columnIndex];\n            }\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit [columnIndex];\n            }\n        });\n        ingestJobTable.setPreferredSize(null);\n        ingestJobTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(ingestJobTable);\n        ingestJobTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n        if (ingestJobTable.getColumnModel().getColumnCount() > 0) {\n            ingestJobTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestJobTable.columnModel.title0\")); // NOI18N\n            ingestJobTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestJobTable.columnModel.title1\")); // NOI18N\n            ingestJobTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestJobTable.columnModel.title2\")); // NOI18N\n            ingestJobTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestJobTable.columnModel.title3\")); // NOI18N\n        }\n\n        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.jButton1.text\")); // NOI18N\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.jLabel1.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.jLabel2.text\")); // NOI18N\n\n        ingestModuleTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n                {null, null},\n                {null, null},\n                {null, null},\n                {null, null}\n            },\n            new String [] {\n                \"Module Name\", \"Module Version\"\n            }\n        ) {\n            Class[] types = new Class [] {\n                java.lang.String.class, java.lang.String.class\n            };\n            boolean[] canEdit = new boolean [] {\n                false, false\n            };\n\n            public Class getColumnClass(int columnIndex) {\n                return types [columnIndex];\n            }\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit [columnIndex];\n            }\n        });\n        jScrollPane2.setViewportView(ingestModuleTable);\n        if (ingestModuleTable.getColumnModel().getColumnCount() > 0) {\n            ingestModuleTable.getColumnModel().getColumn(0).setPreferredWidth(100);\n            ingestModuleTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestModuleTable.columnModel.title0\")); // NOI18N\n            ingestModuleTable.getColumnModel().getColumn(1).setPreferredWidth(50);\n            ingestModuleTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.ingestModuleTable.columnModel.title1\")); // NOI18N\n        }\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(15, 15, 15)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel2)\n                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel1)\n                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jButton1)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(8, 8, 8)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel1)\n                    .addComponent(jLabel2))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jButton1)\n                .addGap(6, 6, 6))\n        );\n    }","id":59775,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        ingestJobTable = new javax.swing.JTable();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        ingestModuleTable = new javax.swing.JTable();\n\n        jScrollPane1.setBorder(null);\n\n        ingestJobTable.setModel(ingestJobTableModel);\n        ingestJobTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(ingestJobTable);\n        ingestJobTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.jLabel1.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(IngestJobInfoPanel.class, \"IngestJobInfoPanel.jLabel2.text\")); // NOI18N\n\n        ingestModuleTable.setModel(ingestModuleTableModel);\n        jScrollPane2.setViewportView(ingestModuleTable);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(15, 15, 15)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel2)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE))\n                .addGap(8, 8, 8)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel1))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(8, 8, 8)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel1)\n                    .addComponent(jLabel2))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\n                .addGap(10, 10, 10))\n        );\n    }","commit_id":"578a98d5ff525c54bca044067f023aaa8fcf4c80","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Messages({\"IngestJobInfoPanel.loadIngestJob.error.text=Failed to load ingest jobs.\",\n        \"IngestJobInfoPanel.loadIngestJob.error.title=Load Failure\"})\n    private void customizeComponents() {\n        SleuthkitCase skCase = Case.getCurrentCase().getSleuthkitCase();\n        DateFormat datetimeFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        DefaultTableModel model = (DefaultTableModel) this.ingestJobTable.getModel();\n        this.ingestJobTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n            @Override\n            public void valueChanged(ListSelectionEvent e) {\n                int selectedIndex = ingestJobTable.getSelectedRow();\n                DefaultTableModel ingestModuleModel = (DefaultTableModel) ingestModuleTable.getModel();\n                if (selectedIndex != -1) {\n                    IngestJobInfo selectedJob = ingestJobs.get(selectedIndex);\n                    List<IngestModuleInfo> ingestModules = selectedJob.getIngestModuleInfo();\n                    for (int i = 0; i < ingestModuleModel.getRowCount(); i++) {\n                        ingestModuleModel.removeRow(0);\n                    }\n                    for (IngestModuleInfo ingestModule : ingestModules) {\n                        Object[] row = new Object[2];\n                        row[0] = ingestModule.getDisplayName();\n                        row[1] = ingestModule.getVersion();\n                        ingestModuleModel.addRow(row);\n                    }\n                } else {\n                    for (int i = 0; i < ingestModuleModel.getRowCount(); i++) {\n                        ingestModuleModel.removeRow(0);\n                    }\n                }\n            }\n        });\n\n        try {\n            List<IngestJobInfo> ingestJobs = skCase.getIngestJobs();\n            this.ingestJobs = ingestJobs;\n            for (IngestJobInfo ingestJob : ingestJobs) {\n                Object[] row = new Object[5];\n                row[0] = skCase.getContentById(ingestJob.getObjectId()).getName();\n                row[1] = datetimeFormat.format(ingestJob.getStartDateTime());\n                row[2] = datetimeFormat.format(ingestJob.getEndDateTime());\n                row[3] = ingestJob.getStatus().getDisplayName();\n                String ingestModules = \"\";\n                for (IngestModuleInfo ingestModule : ingestJob.getIngestModuleInfo()) {\n                    ingestModules += ingestModule.getDisplayName() + \", \";\n                }\n                if (ingestModules.length() > 2) {\n                    ingestModules = ingestModules.substring(0, ingestModules.length() - 2);\n                }\n                row[4] = ingestModules;\n\n                model.addRow(row);\n            }\n\n        } catch (TskCoreException ex) {\n            logger.log(Level.SEVERE, \"Failed to load ingest jobs.\", ex);\n            JOptionPane.showMessageDialog(null, Bundle.IngestJobInfoPanel_loadIngestJob_error_text(), Bundle.IngestJobInfoPanel_loadIngestJob_error_title(), JOptionPane.ERROR_MESSAGE);\n        }\n    }","id":59776,"modified_method":"@Messages({\"IngestJobInfoPanel.loadIngestJob.error.text=Failed to load ingest jobs.\",\n        \"IngestJobInfoPanel.loadIngestJob.error.title=Load Failure\"})\n    private void customizeComponents() {\n        refresh();\n        this.ingestJobTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {\n            this.ingestModuleTableModel = new IngestModuleTableModel(this.ingestJobs.get(ingestJobTable.getSelectedRow()));\n            this.ingestModuleTable.setModel(this.ingestModuleTableModel);\n        });\n\n        IngestManager.getInstance().addIngestJobEventListener((PropertyChangeEvent evt) -> {\n            if (evt.getPropertyName().equals(IngestManager.IngestJobEvent.STARTED.toString())\n                    || evt.getPropertyName().equals(IngestManager.IngestJobEvent.CANCELLED.toString())\n                    || evt.getPropertyName().equals(IngestManager.IngestJobEvent.COMPLETED.toString())) {\n                refresh();\n            }\n        });\n    }","commit_id":"578a98d5ff525c54bca044067f023aaa8fcf4c80","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Messages({\"IngestJobSettingsPanel.noPerRunSettings=The selected module has no per-run settings.\"})\n    private void customizeComponents() {\n        modulesTable.setModel(tableModel);\n        modulesTable.setTableHeader(null);\n        modulesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n        // Set the column widths in the table model and add a custom cell \n        // renderer that will display module descriptions from the module models \n        // as tooltips.\n        IngestModulesTableRenderer renderer = new IngestModulesTableRenderer();\n        int width = modulesScrollPane.getPreferredSize().width;\n        for (int i = 0; i < modulesTable.getColumnCount(); ++i) {\n            TableColumn column = modulesTable.getColumnModel().getColumn(i);\n            if (0 == i) {\n                column.setPreferredWidth(((int) (width * 0.15)));\n            } else {\n                column.setCellRenderer(renderer);\n                column.setPreferredWidth(((int) (width * 0.84)));\n            }\n        }\n\n        // Add a selection listener to the table model that will display the  \n        // ingest job options panel of the currently selected module model and \n        // enable or disable the resources configuration panel invocation button.\n        modulesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n            @Override\n            public void valueChanged(ListSelectionEvent e) {\n                ListSelectionModel listSelectionModel = (ListSelectionModel) e.getSource();\n                if (!listSelectionModel.isSelectionEmpty()) {\n                    int index = listSelectionModel.getMinSelectionIndex();\n                    selectedModule = modules.get(index);\n                    ingestSettingsPanel.removeAll();\n                    if (null != selectedModule.getModuleSettingsPanel()) {\n                        ingestSettingsPanel.add(selectedModule.getModuleSettingsPanel());\n                    } else {\n                        ingestSettingsPanel.add(new JLabel(Bundle.IngestJobSettingsPanel_noPerRunSettings()));\n                    }\n                    ingestSettingsPanel.revalidate();\n                    ingestSettingsPanel.repaint();\n                    globalSettingsButton.setEnabled(null != selectedModule.getGlobalSettingsPanel());\n                    descriptionLabel.setText(selectedModule.getDescription());\n                    descriptionLabel.setToolTipText(selectedModule.getDescription());\n                }\n            }\n        });\n        modulesTable.setRowSelectionInterval(0, 0);\n        processUnallocCheckbox.setSelected(this.settings.getProcessUnallocatedSpace());\n        this.modulesTable.getColumnModel().getColumn(0).setMaxWidth(22);\n        this.modulesTable.getColumnModel().getColumn(1).setMaxWidth(20);\n        this.modulesTable.getColumnModel().getColumn(1).setMinWidth(20);\n        modulesTable.setRowHeight(20);\n    }","id":59777,"modified_method":"@Messages({\"IngestJobSettingsPanel.noPerRunSettings=The selected module has no per-run settings.\"})\n    private void customizeComponents() {\n        modulesTable.setModel(tableModel);\n        modulesTable.setTableHeader(null);\n        modulesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n        // Set the column widths in the table model and add a custom cell \n        // renderer that will display module descriptions from the module models \n        // as tooltips.\n        IngestModulesTableRenderer renderer = new IngestModulesTableRenderer();\n        int width = modulesScrollPane.getPreferredSize().width;\n        for (int i = 0; i < modulesTable.getColumnCount(); ++i) {\n            TableColumn column = modulesTable.getColumnModel().getColumn(i);\n            if (0 == i) {\n                column.setPreferredWidth(((int) (width * 0.15)));\n            } else {\n                column.setCellRenderer(renderer);\n                column.setPreferredWidth(((int) (width * 0.84)));\n            }\n        }\n\n        // Add a selection listener to the table model that will display the  \n        // ingest job options panel of the currently selected module model and \n        // enable or disable the resources configuration panel invocation button.\n        modulesTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {\n            ListSelectionModel listSelectionModel = (ListSelectionModel) e.getSource();\n            if (!listSelectionModel.isSelectionEmpty()) {\n                int index = listSelectionModel.getMinSelectionIndex();\n                selectedModule = modules.get(index);\n                ingestSettingsPanel.removeAll();\n                if (null != selectedModule.getModuleSettingsPanel()) {\n                    ingestSettingsPanel.add(selectedModule.getModuleSettingsPanel());\n                } else {\n                    ingestSettingsPanel.add(new JLabel(Bundle.IngestJobSettingsPanel_noPerRunSettings()));\n                }\n                ingestSettingsPanel.revalidate();\n                ingestSettingsPanel.repaint();\n                globalSettingsButton.setEnabled(null != selectedModule.getGlobalSettingsPanel());\n                descriptionLabel.setText(selectedModule.getDescription());\n                descriptionLabel.setToolTipText(selectedModule.getDescription());\n            }\n        });\n        modulesTable.setRowSelectionInterval(0, 0);\n        processUnallocCheckbox.setSelected(this.settings.getProcessUnallocatedSpace());\n        this.modulesTable.getColumnModel().getColumn(0).setMaxWidth(22);\n        this.modulesTable.getColumnModel().getColumn(1).setMaxWidth(20);\n        this.modulesTable.getColumnModel().getColumn(1).setMinWidth(20);\n        modulesTable.setRowHeight(20);\n    }","commit_id":"b296e751e40590dbb4152b440af8bee55d5174c1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"private void globalSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_globalSettingsButtonActionPerformed\n        final AdvancedConfigurationDialog dialog = new AdvancedConfigurationDialog(true);\n\n        dialog.addApplyButtonListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (selectedModule.hasGlobalSettingsPanel()) {\n                    selectedModule.saveResourcesConfig();\n                }\n                dialog.close();\n            }\n        });\n\n        dialog.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                dialog.close();\n            }\n        });\n\n        dialog.display(selectedModule.getGlobalSettingsPanel());\n    }","id":59778,"modified_method":"private void globalSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_globalSettingsButtonActionPerformed\n        final AdvancedConfigurationDialog dialog = new AdvancedConfigurationDialog(true);\n\n        dialog.addApplyButtonListener((ActionEvent e) -> {\n            if (selectedModule.hasGlobalSettingsPanel()) {\n                selectedModule.saveResourcesConfig();\n            }\n            dialog.close();\n        });\n\n        dialog.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                dialog.close();\n            }\n        });\n\n        dialog.display(selectedModule.getGlobalSettingsPanel());\n    }","commit_id":"b296e751e40590dbb4152b440af8bee55d5174c1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n            if (2 == column) {\n                setIcon(null);\n                setToolTipText(tooltips.get(row));\n            } else if (1 == column) {\n                setIcon((Icon) value);\n                setText(\"\");\n                if (tableModel.warningIcon.equals(value)) {\n                    setToolTipText(Bundle.IngestJobSettingsPanel_IngestModulesTableRenderer_warning_message());\n                } else if (tableModel.infoIcon.equals(value)) {\n                    setToolTipText(Bundle.IngestJobSettingsPanel_IngestModulesTableRenderer_info_message());\n                }\n            }\n            return this;\n        }","id":59779,"modified_method":"@Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n            if (2 == column) {\n                setIcon(null);\n                setToolTipText(tooltips.get(row));\n            } else if (1 == column) {\n                setIcon((Icon) value);\n                setText(\"\");\n                if (warningIcon.equals(value)) {\n                    setToolTipText(Bundle.IngestJobSettingsPanel_IngestModulesTableRenderer_warning_message());\n                } else if (infoIcon.equals(value)) {\n                    setToolTipText(Bundle.IngestJobSettingsPanel_IngestModulesTableRenderer_info_message());\n                }\n            }\n            return this;\n        }","commit_id":"b296e751e40590dbb4152b440af8bee55d5174c1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            IngestModuleModel module = modules.get(rowIndex);\n            if (columnIndex == 0) {\n                return module.isEnabled();\n            } else if (columnIndex == 1) {\n                return getIcon(module);\n            } else {\n                return module.getName();\n            }\n        }","id":59780,"modified_method":"@Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            IngestModuleModel module = modules.get(rowIndex);\n            switch (columnIndex) {\n                case 0:\n                    return module.isEnabled();\n                case 1:\n                    return getIcon(module);\n                default:\n                    return module.getName();\n            }\n        }","commit_id":"b296e751e40590dbb4152b440af8bee55d5174c1","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public ArrayChunk(@NotNull PyDebugValue value,\n                    String slicePresentation,\n                    int rows,\n                    int columns,\n                    String max,\n                    String min,\n                    String format,\n                    String type,\n                    @Nullable Object[][] data) {\n    myValue = value;\n    mySlicePresentation = slicePresentation;\n    myRows = rows;\n    myColumns = columns;\n    myMax = max;\n    myMin = min;\n    myFormat = format;\n    myType = type;\n    myData = data;\n  }","id":59781,"modified_method":"public ArrayChunk(@NotNull PyDebugValue value,\n                    String slicePresentation,\n                    int rows,\n                    int columns,\n                    String max,\n                    String min,\n                    String format,\n                    String type,\n                    @Nullable Object[][] data, List<String> labels, List<ColHeader> headers) {\n    myValue = value;\n    mySlicePresentation = slicePresentation;\n    myRows = rows;\n    myColumns = columns;\n    myMax = max;\n    myMin = min;\n    myFormat = format;\n    myType = type;\n    myData = data;\n    myRowLabels = labels;\n    myColHeaders = headers;\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Component getTableCellRendererComponent(JTable table, Object value,\n                                                 boolean isSelected, boolean hasFocus, int row, int col) {\n    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);\n    if (value != null) {\n      setText(value.toString());\n    }\n\n    if (hasFocus) {\n      this.setBorder(new LineBorder(JBColor.BLUE, 2));\n    }\n\n    if (myMax != myMin) {\n      if (myColored && value != null) {\n        try {\n          double rangedValue = NumpyArrayTable.getRangedValue(value.toString(), myType, myMin, myMax, myComplexMax, myComplexMin);\n          //noinspection UseJBColor\n          this.setBackground(new Color((int)Math.round(255 * rangedValue), 0, (int)Math.round(255 * (1 - rangedValue)), 130));\n        }\n        catch (NumberFormatException ignored) {\n        }\n      }\n      else {\n        this.setBackground(UIUtil.getBgFillColor(table));\n      }\n    }\n\n    return this;\n  }","id":59782,"modified_method":"public Component getTableCellRendererComponent(JTable table, Object value,\n                                                 boolean isSelected, boolean hasFocus, int row, int col) {\n    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);\n    if (value != null) {\n      setText(value.toString());\n    }\n\n    if (hasFocus) {\n      this.setBorder(new LineBorder(JBColor.BLUE, 2));\n    }\n\n    if (myMax != myMin) {\n      if (myColored && value != null) {\n        try {\n          double rangedValue = PyNumericViewUtil.getRangedValue(value.toString(), myType, myMin, myMax, myComplexMax, myComplexMin);\n          this.setBackground(PyNumericViewUtil.rangedValueToColor(rangedValue));\n        }\n        catch (NumberFormatException ignored) {\n        }\n      }\n      else {\n        this.setBackground(UIUtil.getBgFillColor(table));\n      }\n    }\n\n    return this;\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public AsyncArrayTableModel(int rows, int columns, NumpyArrayTable provider) {\n    myRows = rows;\n    myColumns = columns;\n    myProvider = provider;\n  }","id":59783,"modified_method":"public AsyncArrayTableModel(int rows, int columns, TableChunkDatasource provider) {\n    myRows = rows;\n    myColumns = columns;\n    myProvider = provider;\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addToCache(final ArrayChunk chunk) {\n    Object[][] data = chunk.getData();\n    int cols = data.length;\n    int rows = data[0].length;\n    for (int roffset = 0; roffset < rows / CHUNK_ROW_SIZE; roffset++) {\n      for (int coffset = 0; coffset < cols / CHUNK_COL_SIZE; coffset++) {\n        Pair<Integer, Integer> key = itemToChunkKey(roffset * CHUNK_ROW_SIZE, coffset * CHUNK_COL_SIZE);\n        final Object[][] chunkData = new Object[CHUNK_ROW_SIZE][CHUNK_COL_SIZE];\n        for (int r = 0; r < CHUNK_ROW_SIZE; r++) {\n          for (int c = 0; c < CHUNK_COL_SIZE; c++) {\n            chunkData[r][c] = data[roffset * CHUNK_ROW_SIZE + r][coffset * CHUNK_COL_SIZE + c];\n          }\n        }\n        myChunkCache.put(key, new ListenableFuture<ArrayChunk>() {\n          @Override\n          public void addListener(Runnable listener, Executor executor) {\n\n          }\n\n          @Override\n          public boolean cancel(boolean mayInterruptIfRunning) {\n            return false;\n          }\n\n          @Override\n          public boolean isCancelled() {\n            return false;\n          }\n\n          @Override\n          public boolean isDone() {\n            return true;\n          }\n\n          @Override\n          public ArrayChunk get() throws InterruptedException, ExecutionException {\n            return new ArrayChunk(chunk.getValue(), null, 0, 0, null, null, null, null, chunkData);\n          }\n\n          @Override\n          public ArrayChunk get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n            return new ArrayChunk(chunk.getValue(), null, 0, 0, null, null, null, null, chunkData);\n          }\n        });\n      }\n    }\n  }","id":59784,"modified_method":"public void addToCache(final ArrayChunk chunk) {\n    Object[][] data = chunk.getData();\n    int cols = data.length;\n    int rows = data[0].length;\n    for (int roffset = 0; roffset < rows / CHUNK_ROW_SIZE; roffset++) {\n      for (int coffset = 0; coffset < cols / CHUNK_COL_SIZE; coffset++) {\n        Pair<Integer, Integer> key = itemToChunkKey(roffset * CHUNK_ROW_SIZE, coffset * CHUNK_COL_SIZE);\n        final Object[][] chunkData = new Object[CHUNK_ROW_SIZE][CHUNK_COL_SIZE];\n        for (int r = 0; r < CHUNK_ROW_SIZE; r++) {\n          System.arraycopy(data[roffset * CHUNK_ROW_SIZE + r], coffset * 30, chunkData[r], 0, CHUNK_COL_SIZE);\n        }\n        myChunkCache.put(key, new ListenableFuture<ArrayChunk>() {\n          @Override\n          public void addListener(@NotNull Runnable listener, @NotNull Executor executor) {\n\n          }\n\n          @Override\n          public boolean cancel(boolean mayInterruptIfRunning) {\n            return false;\n          }\n\n          @Override\n          public boolean isCancelled() {\n            return false;\n          }\n\n          @Override\n          public boolean isDone() {\n            return true;\n          }\n\n          @Override\n          public ArrayChunk get() throws InterruptedException, ExecutionException {\n            return new ArrayChunkBuilder().setValue(chunk.getValue()).setSlicePresentation(null).setRows(0).setColumns(0).setMax(null)\n              .setMin(null).setFormat(null).setType(null).setData(chunkData).createArrayChunk();\n          }\n\n          @Override\n          public ArrayChunk get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n            return new ArrayChunkBuilder().setValue(chunk.getValue()).setSlicePresentation(null).setRows(0).setColumns(0).setMax(null)\n              .setMin(null).setFormat(null).setType(null).setData(chunkData).createArrayChunk();\n          }\n        });\n      }\n    }\n    handleChunkAdded(0, 0, chunk);\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void propertyChange(PropertyChangeEvent e) {\n      if (\"selectionModel\".equals(e.getPropertyName())) {\n        setSelectionModel(myMainTable.getSelectionModel());\n      }\n\n      if (\"rowHeight\".equals(e.getPropertyName())) {\n        repaint();\n      }\n\n      if (\"model\".equals(e.getPropertyName())) {\n        myMainTable.getModel().addTableModelListener(this);\n        revalidate();\n      }\n    }","id":59785,"modified_method":"public void propertyChange(PropertyChangeEvent e) {\n      if (\"selectionModel\".equals(e.getPropertyName())) {\n        setSelectionModel(myMainTable.getSelectionModel());\n      }\n\n      if (\"rowHeight\".equals(e.getPropertyName())) {\n        repaint();\n      }\n\n      if (\"model\".equals(e.getPropertyName())) {\n        revalidate();\n      }\n    }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public RowHeaderTable(JTable table) {\n      myMainTable = table;\n      myMainTable.getModel().addTableModelListener(this);\n\n      setFocusable(false);\n      setAutoCreateColumnsFromModel(false);\n      setSelectionModel(myMainTable.getSelectionModel());\n      setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n      TableColumn column = new TableColumn();\n      column.setHeaderValue(\" \");\n      addColumn(column);\n      column.setCellRenderer(new RowNumberRenderer());\n\n      getColumnModel().getColumn(0).setPreferredWidth(50);\n      setPreferredScrollableViewportSize(getPreferredSize());\n      setRowHeight(myMainTable.getRowHeight());\n      MouseListener[] listeners = getMouseListeners();\n      for (MouseListener l : listeners) {\n        removeMouseListener(l);\n      }\n    }","id":59786,"modified_method":"public RowHeaderTable(JTable table) {\n      myMainTable = table;\n      setFocusable(false);\n      setSelectionModel(myMainTable.getSelectionModel());\n      setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n      setRowHeight(myMainTable.getRowHeight());\n      MouseListener[] listeners = getMouseListeners();\n      for (MouseListener l : listeners) {\n        removeMouseListener(l);\n      }\n    }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public JBTableWithRowHeaders() {\n    setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);\n    setRowSelectionAllowed(false);\n    setMaxItemsForSizeCalculation(50);\n    setTableHeader(new CustomTableHeader(this));\n    getTableHeader().setDefaultRenderer(new ArrayTableForm.ColumnHeaderRenderer());\n    getTableHeader().setReorderingAllowed(false);\n\n    myScrollPane = new JBScrollPane(this);\n    JBTableWithRowHeaders.RowHeaderTable rowTable = new JBTableWithRowHeaders.RowHeaderTable(this);\n    myScrollPane.setRowHeaderView(rowTable);\n    myScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER,\n                           rowTable.getTableHeader());\n\n    setRowHeaderTable(rowTable);\n  }","id":59787,"modified_method":"public JBTableWithRowHeaders() {\n    setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);\n    setRowSelectionAllowed(false);\n    setMaxItemsForSizeCalculation(50);\n    setTableHeader(new CustomTableHeader(this));\n    getTableHeader().setDefaultRenderer(new ColumnHeaderRenderer());\n    getTableHeader().setReorderingAllowed(false);\n\n    myScrollPane = new JBScrollPane(this);\n    myRowHeaderTable = new JBTableWithRowHeaders.RowHeaderTable(this);\n    myScrollPane.setRowHeaderView(myRowHeaderTable);\n    myScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER,\n                           myRowHeaderTable.getTableHeader());\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CustomTableHeader(JTable table) {\n      super();\n      setColumnModel(table.getColumnModel());\n      table.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n        @Override\n        public void valueChanged(ListSelectionEvent e) {\n          repaint();\n        }\n      });\n    }","id":59788,"modified_method":"public CustomTableHeader(JTable table) {\n      super();\n      setColumnModel(table.getColumnModel());\n      table.getColumnModel().getSelectionModel().addListSelectionListener(e -> repaint());\n    }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String getTitlePresentation(String slice) {\n    return \"Array View: \" + slice;\n  }","id":59789,"modified_method":"@Override\n  protected final String getTitlePresentation(String slice) {\n    return \"Array View: \" + slice;\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public NumpyArrayTable(@NotNull Project project,\n                         @NotNull PyViewArrayAction.ViewArrayDialog dialog, @NotNull PyDebugValue value) {\n    myValue = value;\n    myDialog = dialog;\n    myComponent = new ArrayTableForm(project, new KeyAdapter() {\n      @Override\n      public void keyPressed(KeyEvent e) {\n        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n          doReslice();\n        }\n      }\n    }, new KeyAdapter() {\n      @Override\n      public void keyPressed(KeyEvent e) {\n        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n          doApplyFormat();\n        }\n      }\n    });\n    myTable = myComponent.getTable();\n    myProject = project;\n    myEvaluator = new PyDebuggerEvaluator(project, getDebugValue().getFrameAccessor());\n  }","id":59790,"modified_method":"public NumpyArrayTable(@NotNull Project project,\n                         @NotNull ViewNumericContainerDialog dialog, @NotNull PyDebugValue value) {\n    super(project, dialog, value);\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void fillColorRange(String minValue, String maxValue) {\n    double min;\n    double max;\n    if (\"c\".equals(myDtypeKind)) {\n      min = 0;\n      max = 1;\n      myTableCellRenderer.setComplexMin(minValue);\n      myTableCellRenderer.setComplexMax(maxValue);\n    }\n    else if (\"b\".equals(myDtypeKind)) {\n      min = minValue.equals(\"True\") ? 1 : 0;\n      max = maxValue.equals(\"True\") ? 1 : 0;\n    }\n    else {\n      min = Double.parseDouble(minValue);\n      max = Double.parseDouble(maxValue);\n    }\n\n    myTableCellRenderer.setMin(min);\n    myTableCellRenderer.setMax(max);\n  }","id":59791,"modified_method":"private void fillColorRange(String minValue, String maxValue) {\n    double min;\n    double max;\n    if (\"c\".equals(myDtypeKind)) {\n      min = 0;\n      max = 1;\n      myArrayTableCellRenderer.setComplexMin(minValue);\n      myArrayTableCellRenderer.setComplexMax(maxValue);\n    }\n    else if (\"b\".equals(myDtypeKind)) {\n      min = minValue.equals(\"True\") ? 1 : 0;\n      max = maxValue.equals(\"True\") ? 1 : 0;\n    }\n    else {\n      min = Double.parseDouble(minValue);\n      max = Double.parseDouble(maxValue);\n    }\n\n    myArrayTableCellRenderer.setMin(min);\n    myArrayTableCellRenderer.setMax(max);\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ArrayChunk parseArrayValues(final String text, final PyFrameAccessor frameAccessor) throws PyDebuggerException {\n    final XppReader reader = openReader(text, false);\n    ArrayChunk result = null;\n    if (reader.hasMoreChildren()) {\n      reader.moveDown();\n      if (!\"array\".equals(reader.getNodeName())) {\n        throw new PyDebuggerException(\"Expected <array> at first node, found \" + reader.getNodeName());\n      }\n      String slice = readString(reader, \"slice\", null);\n      int rows = readInt(reader, \"rows\", null);\n      int cols = readInt(reader, \"cols\", null);\n      String format = \"%\" + readString(reader, \"format\", null);\n      String type = readString(reader, \"type\", null);\n      String max = readString(reader, \"max\", null);\n      String min = readString(reader, \"min\", null);\n      result =\n        new ArrayChunk(new PyDebugValue(slice, null, null, null, false, false, false, frameAccessor), slice, rows, cols, max, min, format,\n                       type, null);\n      reader.moveUp();\n    }\n\n    Object[][] data = parseArrayValues(reader, frameAccessor);\n    return new ArrayChunk(result.getValue(), result.getSlicePresentation(), result.getRows(), result.getColumns(), result.getMax(),\n                          result.getMin(), result.getFormat(), result.getType(), data);\n  }","id":59792,"modified_method":"public static ArrayChunk parseArrayValues(final String text, final PyFrameAccessor frameAccessor) throws PyDebuggerException {\n    final XppReader reader = openReader(text, false);\n    ArrayChunkBuilder result = new ArrayChunkBuilder();\n    if (reader.hasMoreChildren()) {\n      reader.moveDown();\n      if (!\"array\".equals(reader.getNodeName())) {\n        throw new PyDebuggerException(\"Expected <array> at first node, found \" + reader.getNodeName());\n      }\n      String slice = readString(reader, \"slice\", null);\n      result.setSlicePresentation(slice);\n      result.setRows(readInt(reader, \"rows\", null));\n      result.setColumns(readInt(reader, \"cols\", null));\n      result.setFormat(\"%\" + readString(reader, \"format\", null));\n      result.setType(readString(reader, \"type\", null));\n      result.setMax(readString(reader, \"max\", null));\n      result.setMin(readString(reader, \"min\", null));\n      result.setValue(new PyDebugValue(slice, null, null, null, false, false, false, frameAccessor));\n      reader.moveUp();\n    }\n    if (\"headerdata\".equals(reader.peekNextChild())) {\n      parseArrayHeaderData(reader, result);\n    }\n\n    Object[][] data = parseArrayValues(reader, frameAccessor);\n    result.setData(data);\n    return result.createArrayChunk();\n  }","commit_id":"bc8f2ee3639390165406f89854577bdb782c6334","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"boolean containsWrites()\n        {\n            return addCount+removeCount > 0;\n        }","id":59793,"modified_method":"boolean containsWrites()\n        {\n            return containsWrites;\n        }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"void clear()\n        {\n            commands.clear();\n            addCount = 0;\n            removeCount = 0;\n        }","id":59794,"modified_method":"void clear()\n        {\n            commands.clear();\n            containsWrites = false;\n        }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command instanceof AddCommand )\n            {\n                this.addCount++;\n            }\n            else if ( command instanceof RemoveCommand )\n            {\n                this.removeCount++;\n            }\n        }","id":59795,"modified_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command.isConsideredNormalWriteCommand() )\n            {\n                containsWrites = true;\n            }\n        }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) ).addCount++;\n    }","id":59796,"modified_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) );\n    }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        return commands;\n    }","id":59797,"modified_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        commands.incCounter( command );\n        return commands;\n    }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) ).removeCount++;\n    }","id":59798,"modified_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) );\n    }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath()\n        } ).waitFor();\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","id":59799,"modified_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        assertEquals( 0, Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath() } ).waitFor() );\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","commit_id":"916aa5a4911636815fab5f33ed1b4c294e8ee2a7","url":"https://github.com/neo4j/neo4j"},{"original_method":"void clear()\n        {\n            commands.clear();\n            addCount = 0;\n            removeCount = 0;\n        }","id":59800,"modified_method":"void clear()\n        {\n            commands.clear();\n            containsWrites = false;\n        }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"boolean containsWrites()\n        {\n            return addCount+removeCount > 0;\n        }","id":59801,"modified_method":"boolean containsWrites()\n        {\n            return containsWrites;\n        }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) ).addCount++;\n    }","id":59802,"modified_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) );\n    }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) ).removeCount++;\n    }","id":59803,"modified_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) );\n    }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        return commands;\n    }","id":59804,"modified_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        commands.incCounter( command );\n        return commands;\n    }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command instanceof AddCommand )\n            {\n                this.addCount++;\n            }\n            else if ( command instanceof RemoveCommand )\n            {\n                this.removeCount++;\n            }\n        }","id":59805,"modified_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command.isConsideredNormalWriteCommand() )\n            {\n                containsWrites = true;\n            }\n        }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath()\n        } ).waitFor();\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","id":59806,"modified_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        assertEquals( 0, Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath() } ).waitFor() );\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","commit_id":"094dd2a5067ae8afad5969c0eb2c46318f403bbb","url":"https://github.com/neo4j/neo4j"},{"original_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        return commands;\n    }","id":59807,"modified_method":"private CommandList queueCommand( LuceneCommand command )\n    {\n        IndexIdentifier indexId = command.indexId;\n        CommandList commands = commandMap.get( indexId );\n        if ( commands == null )\n        {\n            commands = new CommandList();\n            commandMap.put( indexId, commands );\n        }\n        if ( command instanceof DeleteCommand )\n        {\n            commands.clear();\n        }\n        commands.add( command );\n        commands.incCounter( command );\n        return commands;\n    }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command instanceof AddCommand )\n            {\n                this.addCount++;\n            }\n            else if ( command instanceof RemoveCommand )\n            {\n                this.removeCount++;\n            }\n        }","id":59808,"modified_method":"void incCounter( LuceneCommand command )\n        {\n            if ( command.isConsideredNormalWriteCommand() )\n            {\n                containsWrites = true;\n            }\n        }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"boolean containsWrites()\n        {\n            return addCount+removeCount > 0;\n        }","id":59809,"modified_method":"boolean containsWrites()\n        {\n            return containsWrites;\n        }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) ).removeCount++;\n    }","id":59810,"modified_method":"<T extends PropertyContainer> void remove( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.removed( true ), data.added( false ) );\n        queueCommand( index.newRemoveCommand( entity, key, value ) );\n    }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) ).addCount++;\n    }","id":59811,"modified_method":"<T extends PropertyContainer> void add( LuceneIndex<T> index, T entity,\n            String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        TxDataBoth data = getTxData( index, true );\n        insert( index, entity, key, value, data.added( true ), data.removed( false ) );\n        queueCommand( index.newAddCommand( entity, key, value ) );\n    }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"void clear()\n        {\n            commands.clear();\n            addCount = 0;\n            removeCount = 0;\n        }","id":59812,"modified_method":"void clear()\n        {\n            commands.clear();\n            containsWrites = false;\n        }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath()\n        } ).waitFor();\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","id":59813,"modified_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n        \n        assertEquals( 0, Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath() } ).waitFor() );\n        \n        new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n        db.shutdown();\n    }","commit_id":"62392394374afa32f14238b4f9b3408aef17d962","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * @deprecated Make private, use resolveReportPluginVersion(..) or resolvePluginVersion(..) instead.\n     */\n    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,\n                                         ArtifactRepository localRepository, boolean resolveAsReportPlugin )\n        throws PluginVersionResolutionException\n    {\n        // first pass...if the plugin is specified in the pom, try to retrieve the version from there.\n        String version = getVersionFromPluginConfig( groupId, artifactId, project, resolveAsReportPlugin );\n\n        // we're NEVER going to persist POM-derived plugin versions.\n        String updatedVersion = null;\n\n        // we're not going to prompt the user to accept a plugin update until we find one.\n        boolean promptToPersist = false;\n\n        RuntimeInfo settingsRTInfo = settings.getRuntimeInfo();\n\n        // determine the behavior WRT prompting the user and installing plugin updates.\n        Boolean pluginUpdateOverride = settingsRTInfo.getPluginUpdateOverride();\n\n        // second pass...if we're using the plugin registry, and the plugin is listed in the plugin-registry.xml, use\n        // the version from <useVersion/>.\n        if ( StringUtils.isEmpty( version ) && settings.isUsePluginRegistry() )\n        {\n            // resolve existing useVersion.\n            version = resolveExistingFromPluginRegistry( groupId, artifactId );\n\n            if ( StringUtils.isNotEmpty( version ) )\n            {\n                // 2. check for updates. Determine whether this is the right time to attempt to update the version.\n                // Only check for plugin updates if:\n                //\n                //  a. the CLI switch to force plugin updates is set, OR BOTH OF THE FOLLOWING:\n                //  b. the CLI switch to suppress plugin updates is NOT set, AND\n                //  c. the update interval for the plugin has triggered an update check.\n                if ( Boolean.TRUE.equals( pluginUpdateOverride ) ||\n                    ( !Boolean.FALSE.equals( pluginUpdateOverride ) && shouldCheckForUpdates( groupId, artifactId ) ) )\n                {\n                    updatedVersion = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(),\n                                                         localRepository,\n                                                         ReleaseArtifactTransformation.RELEASE_VERSION );\n\n                    if ( StringUtils.isNotEmpty( updatedVersion ) && !updatedVersion.equals( version ) )\n                    {\n                        // see if this version we've resolved is on our previously rejected list.\n                        boolean isRejected = checkForRejectedStatus( groupId, artifactId, updatedVersion );\n\n                        // we should only prompt to use this version if the user has not previously rejected it.\n                        promptToPersist = !isRejected;\n\n                        // if we've rejected this version previously, forget about updating.\n                        if ( isRejected )\n                        {\n                            updatedVersion = null;\n                        }\n                        else\n                        {\n                            getLogger().info(\n                                \"Plugin \\'\" + constructPluginKey( groupId, artifactId ) + \"\\' has updates.\" );\n                        }\n                    }\n                }\n            }\n        }\n\n        boolean forcePersist = false;\n\n        // are we using the LATEST metadata to resolve plugin version?\n        Boolean rtCheckLatest = settingsRTInfo.getCheckLatestPluginVersion();\n\n        boolean checkLatestMetadata = Boolean.TRUE.equals( rtCheckLatest ) || (\n            !Boolean.FALSE.equals( rtCheckLatest ) &&\n                Boolean.valueOf( getPluginRegistry( groupId, artifactId ).getCheckLatest() )\n                    .booleanValue() );\n\n        // third pass...if we're checking for latest install/deploy, retrieve the version for LATEST metadata and also\n        // set that resolved version as the <useVersion/> in settings.xml.\n        if ( StringUtils.isEmpty( version ) && checkLatestMetadata )\n        {\n            // 1. resolve the version to be used\n            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,\n                                          Artifact.LATEST_VERSION );\n\n            if ( version != null )\n            {\n                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.\n                updatedVersion = version;\n\n                // 3. Persist this version without prompting.\n                forcePersist = true;\n                promptToPersist = false;\n            }\n        }\n\n        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>\n        // in settings.xml.\n        if ( StringUtils.isEmpty( version ) )\n        {\n            // 1. resolve the version to be used\n            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,\n                                          ReleaseArtifactTransformation.RELEASE_VERSION );\n\n            if ( version != null )\n            {\n                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.\n                updatedVersion = version;\n\n                // 3. Persist this version without prompting.\n                forcePersist = true;\n                promptToPersist = false;\n            }\n        }\n\n        // if we still haven't found a version, then fail early before we get into the update goop.\n        if ( StringUtils.isEmpty( version ) )\n        {\n            throw new PluginVersionResolutionException( groupId, artifactId,\n                                                        \"Failed to resolve a valid version for this plugin\" );\n        }\n\n        // if the plugin registry is inactive, then the rest of this goop is useless...\n        if ( settings.isUsePluginRegistry() )\n        {\n            // determine whether this build is running in interactive mode\n            // If it's not, then we'll defer to the autoUpdate setting from the registry\n            // for a decision on updating the plugin in the registry...rather than prompting\n            // the user.\n            boolean inInteractiveMode = settings.isInteractiveMode();\n\n            // determines what should be done if we're in non-interactive mode.\n            // if true, then just update the registry with the new versions.\n            String s = getPluginRegistry( groupId, artifactId ).getAutoUpdate();\n            boolean autoUpdate = true;\n            if ( s != null )\n            {\n                autoUpdate = Boolean.valueOf( s ).booleanValue();\n            }\n\n            // We should persist by default if:\n            //\n            // 0. RELEASE or LATEST was used to resolve the plugin version (it's not in the registry)\n            //\n            // -OR-\n            //\n            // 1. we detected a change in the plugin version from what was in the registry, or\n            //      a. the plugin is not registered\n            // 2. the pluginUpdateOverride flag has NOT been set to Boolean.FALSE (suppression mode)\n            // 3. we're in interactive mode, or\n            //      a. the registry is declared to be in autoUpdate mode\n            //\n            // NOTE: This is only the default value; it may be changed as the result of prompting the user.\n            boolean persistUpdate = forcePersist || ( promptToPersist &&\n                !Boolean.FALSE.equals( pluginUpdateOverride ) && ( inInteractiveMode || autoUpdate ) );\n\n            // retrieve the apply-to-all flag, if it's been set previously.\n            Boolean applyToAll = settings.getRuntimeInfo().getApplyToAllPluginUpdates();\n\n            // Incorporate interactive-mode CLI overrides, and previous decisions on apply-to-all, if appropriate.\n            //\n            // don't prompt if RELEASE or LATEST was used to resolve the plugin version\n            // don't prompt if not in interactive mode.\n            // don't prompt if the CLI pluginUpdateOverride is set (either suppression or force mode will stop prompting)\n            // don't prompt if the user has selected ALL/NONE previously in this session\n            //\n            // NOTE: We're incorporating here, to make the usages of this check more consistent and \n            // resistant to change.\n            promptToPersist = promptToPersist && pluginUpdateOverride == null && applyToAll == null &&\n                inInteractiveMode;\n\n            if ( promptToPersist )\n            {\n                persistUpdate = promptToPersistPluginUpdate( version, updatedVersion, groupId, artifactId, settings );\n            }\n\n            // if it is determined that we should use this version, persist it as useVersion.\n            // cases where this version will be persisted:\n            // 1. the user is prompted and answers yes or all\n            // 2. the user has previously answered all in this session\n            // 3. the build is running in non-interactive mode, and the registry setting is for auto-update\n            if ( !Boolean.FALSE.equals( applyToAll ) && persistUpdate )\n            {\n                updatePluginVersionInRegistry( groupId, artifactId, updatedVersion );\n\n                // we're using the updated version of the plugin in this session as well.\n                version = updatedVersion;\n            }\n            // otherwise, if we prompted the user to update, we should treat this as a rejectedVersion, and\n            // persist it iff the plugin pre-exists and is in the user-level registry.\n            else if ( promptToPersist )\n            {\n                addNewVersionToRejectedListInExisting( groupId, artifactId, updatedVersion );\n            }\n        }\n\n        return version;\n    }","id":59814,"modified_method":"/**\n     * @deprecated Make private, use resolveReportPluginVersion(..) or resolvePluginVersion(..) instead.\n     */\n    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,\n                                        ArtifactRepository localRepository, boolean resolveAsReportPlugin )\n        throws PluginVersionResolutionException\n    {\n        // first pass...if the plugin is specified in the pom, try to retrieve the version from there.\n        String version = getVersionFromPluginConfig( groupId, artifactId, project, resolveAsReportPlugin );\n\n        // we're NEVER going to persist POM-derived plugin versions.\n        String updatedVersion = null;\n\n        // we're not going to prompt the user to accept a plugin update until we find one.\n        boolean promptToPersist = false;\n\n        RuntimeInfo settingsRTInfo = settings.getRuntimeInfo();\n\n        // determine the behavior WRT prompting the user and installing plugin updates.\n        Boolean pluginUpdateOverride = settingsRTInfo.getPluginUpdateOverride();\n\n        // second pass...if we're using the plugin registry, and the plugin is listed in the plugin-registry.xml, use\n        // the version from <useVersion/>.\n        if ( StringUtils.isEmpty( version ) && settings.isUsePluginRegistry() )\n        {\n            // resolve existing useVersion.\n            version = resolveExistingFromPluginRegistry( groupId, artifactId );\n\n            if ( StringUtils.isNotEmpty( version ) )\n            {\n                // 2. check for updates. Determine whether this is the right time to attempt to update the version.\n                // Only check for plugin updates if:\n                //\n                //  a. the CLI switch to force plugin updates is set, OR BOTH OF THE FOLLOWING:\n                //  b. the CLI switch to suppress plugin updates is NOT set, AND\n                //  c. the update interval for the plugin has triggered an update check.\n                if ( Boolean.TRUE.equals( pluginUpdateOverride ) ||\n                    ( !Boolean.FALSE.equals( pluginUpdateOverride ) && shouldCheckForUpdates( groupId, artifactId ) ) )\n                {\n                    updatedVersion = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(),\n                                                         localRepository, Artifact.RELEASE_VERSION );\n\n                    if ( StringUtils.isNotEmpty( updatedVersion ) && !updatedVersion.equals( version ) )\n                    {\n                        // see if this version we've resolved is on our previously rejected list.\n                        boolean isRejected = checkForRejectedStatus( groupId, artifactId, updatedVersion );\n\n                        // we should only prompt to use this version if the user has not previously rejected it.\n                        promptToPersist = !isRejected;\n\n                        // if we've rejected this version previously, forget about updating.\n                        if ( isRejected )\n                        {\n                            updatedVersion = null;\n                        }\n                        else\n                        {\n                            getLogger().info(\n                                \"Plugin \\'\" + constructPluginKey( groupId, artifactId ) + \"\\' has updates.\" );\n                        }\n                    }\n                }\n            }\n        }\n\n        boolean forcePersist = false;\n\n        // are we using the LATEST metadata to resolve plugin version?\n        Boolean rtCheckLatest = settingsRTInfo.getCheckLatestPluginVersion();\n\n        boolean checkLatestMetadata = Boolean.TRUE.equals( rtCheckLatest ) || (\n            !Boolean.FALSE.equals( rtCheckLatest ) &&\n                Boolean.valueOf( getPluginRegistry( groupId, artifactId ).getCheckLatest() )\n                    .booleanValue() );\n\n        // third pass...if we're checking for latest install/deploy, retrieve the version for LATEST metadata and also\n        // set that resolved version as the <useVersion/> in settings.xml.\n        if ( StringUtils.isEmpty( version ) && checkLatestMetadata )\n        {\n            // 1. resolve the version to be used\n            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,\n                                          Artifact.LATEST_VERSION );\n\n            if ( version != null )\n            {\n                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.\n                updatedVersion = version;\n\n                // 3. Persist this version without prompting.\n                forcePersist = true;\n                promptToPersist = false;\n            }\n        }\n\n        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>\n        // in settings.xml.\n        if ( StringUtils.isEmpty( version ) )\n        {\n            // 1. resolve the version to be used\n            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,\n                                          Artifact.RELEASE_VERSION );\n\n            if ( version != null )\n            {\n                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.\n                updatedVersion = version;\n\n                // 3. Persist this version without prompting.\n                forcePersist = true;\n                promptToPersist = false;\n            }\n        }\n\n        // if we still haven't found a version, then fail early before we get into the update goop.\n        if ( StringUtils.isEmpty( version ) )\n        {\n            throw new PluginVersionResolutionException( groupId, artifactId,\n                                                        \"Failed to resolve a valid version for this plugin\" );\n        }\n\n        // if the plugin registry is inactive, then the rest of this goop is useless...\n        if ( settings.isUsePluginRegistry() )\n        {\n            // determine whether this build is running in interactive mode\n            // If it's not, then we'll defer to the autoUpdate setting from the registry\n            // for a decision on updating the plugin in the registry...rather than prompting\n            // the user.\n            boolean inInteractiveMode = settings.isInteractiveMode();\n\n            // determines what should be done if we're in non-interactive mode.\n            // if true, then just update the registry with the new versions.\n            String s = getPluginRegistry( groupId, artifactId ).getAutoUpdate();\n            boolean autoUpdate = true;\n            if ( s != null )\n            {\n                autoUpdate = Boolean.valueOf( s ).booleanValue();\n            }\n\n            // We should persist by default if:\n            //\n            // 0. RELEASE or LATEST was used to resolve the plugin version (it's not in the registry)\n            //\n            // -OR-\n            //\n            // 1. we detected a change in the plugin version from what was in the registry, or\n            //      a. the plugin is not registered\n            // 2. the pluginUpdateOverride flag has NOT been set to Boolean.FALSE (suppression mode)\n            // 3. we're in interactive mode, or\n            //      a. the registry is declared to be in autoUpdate mode\n            //\n            // NOTE: This is only the default value; it may be changed as the result of prompting the user.\n            boolean persistUpdate = forcePersist || ( promptToPersist &&\n                !Boolean.FALSE.equals( pluginUpdateOverride ) && ( inInteractiveMode || autoUpdate ) );\n\n            // retrieve the apply-to-all flag, if it's been set previously.\n            Boolean applyToAll = settings.getRuntimeInfo().getApplyToAllPluginUpdates();\n\n            // Incorporate interactive-mode CLI overrides, and previous decisions on apply-to-all, if appropriate.\n            //\n            // don't prompt if RELEASE or LATEST was used to resolve the plugin version\n            // don't prompt if not in interactive mode.\n            // don't prompt if the CLI pluginUpdateOverride is set (either suppression or force mode will stop prompting)\n            // don't prompt if the user has selected ALL/NONE previously in this session\n            //\n            // NOTE: We're incorporating here, to make the usages of this check more consistent and \n            // resistant to change.\n            promptToPersist = promptToPersist && pluginUpdateOverride == null && applyToAll == null &&\n                inInteractiveMode;\n\n            if ( promptToPersist )\n            {\n                persistUpdate = promptToPersistPluginUpdate( version, updatedVersion, groupId, artifactId, settings );\n            }\n\n            // if it is determined that we should use this version, persist it as useVersion.\n            // cases where this version will be persisted:\n            // 1. the user is prompted and answers yes or all\n            // 2. the user has previously answered all in this session\n            // 3. the build is running in non-interactive mode, and the registry setting is for auto-update\n            if ( !Boolean.FALSE.equals( applyToAll ) && persistUpdate )\n            {\n                updatePluginVersionInRegistry( groupId, artifactId, updatedVersion );\n\n                // we're using the updated version of the plugin in this session as well.\n                version = updatedVersion;\n            }\n            // otherwise, if we prompted the user to update, we should treat this as a rejectedVersion, and\n            // persist it iff the plugin pre-exists and is in the user-level registry.\n            else if ( promptToPersist )\n            {\n                addNewVersionToRejectedListInExisting( groupId, artifactId, updatedVersion );\n            }\n        }\n\n        return version;\n    }","commit_id":"826f3e2a86262c620ecbb7380dd11320cf4f0711","url":"https://github.com/apache/maven"},{"original_method":"public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )\n        throws ArtifactMetadataRetrievalException\n    {\n        if ( Artifact.LATEST_VERSION.equals( artifact.getVersion() ) )\n        {\n            String version = resolveVersion( artifact, localRepository, remoteRepositories );\n            if ( version != null && !version.equals( artifact.getVersion() ) )\n            {\n                artifact.setBaseVersion( version );\n                artifact.updateVersion( version, localRepository );\n            }\n        }\n    }","id":59815,"modified_method":"public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )\n        throws ArtifactMetadataRetrievalException\n    {\n        if ( Artifact.LATEST_VERSION.equals( artifact.getVersion() ) )\n        {\n            String version = resolveVersion( artifact, localRepository, remoteRepositories );\n            if ( Artifact.LATEST_VERSION.equals( version ) )\n            {\n                throw new ArtifactMetadataRetrievalException(\n                    \"Unable to determine the latest version for artifact \" + artifact );\n            }\n\n            artifact.setBaseVersion( version );\n            artifact.updateVersion( version, localRepository );\n        }\n    }","commit_id":"826f3e2a86262c620ecbb7380dd11320cf4f0711","url":"https://github.com/apache/maven"},{"original_method":"public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )\n        throws ArtifactMetadataRetrievalException\n    {\n        if ( RELEASE_VERSION.equals( artifact.getVersion() ) )\n        {\n            String version = resolveVersion( artifact, localRepository, remoteRepositories );\n\n            if ( version != null && !version.equals( artifact.getVersion() ) )\n            {\n                artifact.setBaseVersion( version );\n                artifact.updateVersion( version, localRepository );\n            }\n        }\n    }","id":59816,"modified_method":"public void transformForResolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )\n        throws ArtifactMetadataRetrievalException\n    {\n        if ( Artifact.RELEASE_VERSION.equals( artifact.getVersion() ) )\n        {\n            String version = resolveVersion( artifact, localRepository, remoteRepositories );\n\n            if ( Artifact.RELEASE_VERSION.equals( version ) )\n            {\n                throw new ArtifactMetadataRetrievalException(\n                    \"Unable to determine the release version for artifact \" + artifact );\n            }\n\n            artifact.setBaseVersion( version );\n            artifact.updateVersion( version, localRepository );\n        }\n    }","commit_id":"826f3e2a86262c620ecbb7380dd11320cf4f0711","url":"https://github.com/apache/maven"},{"original_method":"private void innerCreate(Create create, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(create.uid())) {\n            HashedBytesRef versionKey = versionKey(create.uid());\n            final long currentVersion;\n            final VersionValue versionValue;\n            if (optimizeAutoGenerateId && create.autoGeneratedId() && !create.canHaveDuplicates()) {\n                currentVersion = Versions.NOT_FOUND;\n                versionValue = null;\n            } else {\n                versionValue = versionMap.get(versionKey);\n                if (versionValue == null) {\n                    currentVersion = loadCurrentVersionFromIndex(create.uid());\n                } else {\n                    if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                        currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                    } else {\n                        currentVersion = versionValue.version();\n                    }\n                }\n            }\n\n            // same logic as index\n            long updatedVersion;\n            long expectedVersion = create.version();\n            if (create.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (create.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, create.type(), create.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = create.versionType().updateVersion(currentVersion, expectedVersion);\n\n            // if the doc does not exists or it exists but not delete\n            if (versionValue != null) {\n                if (!versionValue.delete()) {\n                    if (create.origin() == Operation.Origin.RECOVERY) {\n                        return;\n                    } else {\n                        throw new DocumentAlreadyExistsException(shardId, create.type(), create.id());\n                    }\n                }\n            } else if (currentVersion != Versions.NOT_FOUND) {\n                // its not deleted, its already there\n                if (create.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new DocumentAlreadyExistsException(shardId, create.type(), create.id());\n                }\n            }\n\n            create.updateVersion(updatedVersion);\n\n            if (create.docs().size() > 1) {\n                writer.addDocuments(create.docs(), create.analyzer());\n            } else {\n                writer.addDocument(create.docs().get(0), create.analyzer());\n            }\n            Translog.Location translogLocation = translog.add(new Translog.Create(create));\n\n            versionMap.put(versionKey, new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis(), translogLocation));\n\n            indexingService.postCreateUnderLock(create);\n        }\n    }","id":59817,"modified_method":"private void innerCreate(Create create, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(create.uid())) {\n            final long currentVersion;\n            final VersionValue versionValue;\n            if (optimizeAutoGenerateId && create.autoGeneratedId() && !create.canHaveDuplicates()) {\n                currentVersion = Versions.NOT_FOUND;\n                versionValue = null;\n            } else {\n                versionValue = versionMap.getUnderLock(create.uid().bytes());\n                if (versionValue == null) {\n                    currentVersion = loadCurrentVersionFromIndex(create.uid());\n                } else {\n                    if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                        currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                    } else {\n                        currentVersion = versionValue.version();\n                    }\n                }\n            }\n\n            // same logic as index\n            long updatedVersion;\n            long expectedVersion = create.version();\n            if (create.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (create.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, create.type(), create.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = create.versionType().updateVersion(currentVersion, expectedVersion);\n\n            // if the doc does not exist or it exists but is not deleted\n            if (versionValue != null) {\n                if (!versionValue.delete()) {\n                    if (create.origin() == Operation.Origin.RECOVERY) {\n                        return;\n                    } else {\n                        throw new DocumentAlreadyExistsException(shardId, create.type(), create.id());\n                    }\n                }\n            } else if (currentVersion != Versions.NOT_FOUND) {\n                // its not deleted, its already there\n                if (create.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new DocumentAlreadyExistsException(shardId, create.type(), create.id());\n                }\n            }\n\n            create.updateVersion(updatedVersion);\n\n            if (create.docs().size() > 1) {\n                writer.addDocuments(create.docs(), create.analyzer());\n            } else {\n                writer.addDocument(create.docs().get(0), create.analyzer());\n            }\n            Translog.Location translogLocation = translog.add(new Translog.Create(create));\n\n            versionMap.putUnderLock(create.uid().bytes(), new VersionValue(updatedVersion, translogLocation));\n\n            indexingService.postCreateUnderLock(create);\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void flush(Flush flush) throws EngineException {\n        ensureOpen();\n        if (flush.type() == Flush.Type.NEW_WRITER || flush.type() == Flush.Type.COMMIT_TRANSLOG) {\n            // check outside the lock as well so we can check without blocking on the write lock\n            if (onGoingRecoveries.get() > 0) {\n                throw new FlushNotAllowedEngineException(shardId, \"recovery is in progress, flush [\" + flush.type() + \"] is not allowed\");\n            }\n        }\n        int currentFlushing = flushing.incrementAndGet();\n        if (currentFlushing > 1 && !flush.waitIfOngoing()) {\n            flushing.decrementAndGet();\n            throw new FlushNotAllowedEngineException(shardId, \"already flushing...\");\n        }\n\n        flushLock.lock();\n        try {\n            if (flush.type() == Flush.Type.NEW_WRITER) {\n                try (InternalLock _ = writeLock.acquire()) {\n                    if (onGoingRecoveries.get() > 0) {\n                        throw new FlushNotAllowedEngineException(shardId, \"Recovery is in progress, flush is not allowed\");\n                    }\n                    // disable refreshing, not dirty\n                    dirty = false;\n                    try {\n                        // that's ok if the index writer failed and is in inconsistent state\n                        // we will get an exception on a dirty operation, and will cause the shard\n                        // to be allocated to a different node\n                        currentIndexWriter().close(false);\n                        indexWriter = createWriter();\n                        mergeScheduler.removeListener(this.throttle);\n                        this.throttle = new IndexThrottle(mergeScheduler.getMaxMerges(), this.logger);\n                        mergeScheduler.addListener(throttle);\n                        // commit on a just opened writer will commit even if there are no changes done to it\n                        // we rely on that for the commit data translog id key\n                        if (flushNeeded || flush.force()) {\n                            flushNeeded = false;\n                            long translogId = translogIdGenerator.incrementAndGet();\n                            indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                            indexWriter.commit();\n                            translog.newTranslog(translogId);\n                        }\n\n                        SearcherManager current = this.searcherManager;\n                        this.searcherManager = buildSearchManager(indexWriter);\n                        try {\n                            IOUtils.close(current);\n                        } catch (Throwable t) {\n                            logger.warn(\"Failed to close current SearcherManager\", t);\n                        }\n                        refreshVersioningTable(threadPool.estimatedTimeInMillis());\n                    } catch (Throwable t) {\n                        throw new FlushFailedEngineException(shardId, t);\n                    }\n                }\n            } else if (flush.type() == Flush.Type.COMMIT_TRANSLOG) {\n                try (InternalLock _ = readLock.acquire()) {\n                    final IndexWriter indexWriter = currentIndexWriter();\n                    if (onGoingRecoveries.get() > 0) {\n                        throw new FlushNotAllowedEngineException(shardId, \"Recovery is in progress, flush is not allowed\");\n                    }\n\n                    if (flushNeeded || flush.force()) {\n                        flushNeeded = false;\n                        try {\n                            long translogId = translogIdGenerator.incrementAndGet();\n                            translog.newTransientTranslog(translogId);\n                            indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                            indexWriter.commit();\n                            refreshVersioningTable(threadPool.estimatedTimeInMillis());\n                            // we need to move transient to current only after we refresh\n                            // so items added to current will still be around for realtime get\n                            // when tans overrides it\n                            translog.makeTransientCurrent();\n                        } catch (Throwable e) {\n                            translog.revertTransient();\n                            throw new FlushFailedEngineException(shardId, e);\n                        }\n                    }\n                }\n            } else if (flush.type() == Flush.Type.COMMIT) {\n                // note, its ok to just commit without cleaning the translog, its perfectly fine to replay a\n                // translog on an index that was opened on a committed point in time that is \"in the future\"\n                // of that translog\n                try (InternalLock _ = readLock.acquire()) {\n                    final IndexWriter indexWriter = currentIndexWriter();\n                    // we allow to *just* commit if there is an ongoing recovery happening...\n                    // its ok to use this, only a flush will cause a new translogId, and we are locked here from\n                    // other flushes use flushLock\n                    try {\n                        long translogId = translog.currentId();\n                        indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                        indexWriter.commit();\n                    } catch (Throwable e) {\n                        throw new FlushFailedEngineException(shardId, e);\n                    }\n                }\n            } else {\n                throw new ElasticsearchIllegalStateException(\"flush type [\" + flush.type() + \"] not supported\");\n            }\n\n            // reread the last committed segment infos\n            try (InternalLock _ = readLock.acquire()) {\n                ensureOpen();\n                readLastCommittedSegmentsInfo();\n            } catch (Throwable e) {\n                if (!closed) {\n                    logger.warn(\"failed to read latest segment infos on flush\", e);\n                }\n            }\n\n        } catch (FlushFailedEngineException ex) {\n            maybeFailEngine(ex.getCause());\n            throw ex;\n        } finally {\n            flushLock.unlock();\n            flushing.decrementAndGet();\n        }\n    }","id":59818,"modified_method":"@Override\n    public void flush(Flush flush) throws EngineException {\n        ensureOpen();\n        if (flush.type() == Flush.Type.NEW_WRITER || flush.type() == Flush.Type.COMMIT_TRANSLOG) {\n            // check outside the lock as well so we can check without blocking on the write lock\n            if (onGoingRecoveries.get() > 0) {\n                throw new FlushNotAllowedEngineException(shardId, \"recovery is in progress, flush [\" + flush.type() + \"] is not allowed\");\n            }\n        }\n        int currentFlushing = flushing.incrementAndGet();\n        if (currentFlushing > 1 && !flush.waitIfOngoing()) {\n            flushing.decrementAndGet();\n            throw new FlushNotAllowedEngineException(shardId, \"already flushing...\");\n        }\n\n        flushLock.lock();\n        try {\n            if (flush.type() == Flush.Type.NEW_WRITER) {\n                try (InternalLock _ = writeLock.acquire()) {\n                    if (onGoingRecoveries.get() > 0) {\n                        throw new FlushNotAllowedEngineException(shardId, \"Recovery is in progress, flush is not allowed\");\n                    }\n                    // disable refreshing, not dirty\n                    dirty = false;\n                    try {\n                        // that's ok if the index writer failed and is in inconsistent state\n                        // we will get an exception on a dirty operation, and will cause the shard\n                        // to be allocated to a different node\n                        currentIndexWriter().close(false);\n                        indexWriter = createWriter();\n                        mergeScheduler.removeListener(this.throttle);\n                        this.throttle = new IndexThrottle(mergeScheduler.getMaxMerges(), this.logger);\n                        mergeScheduler.addListener(throttle);\n                        // commit on a just opened writer will commit even if there are no changes done to it\n                        // we rely on that for the commit data translog id key\n                        if (flushNeeded || flush.force()) {\n                            flushNeeded = false;\n                            long translogId = translogIdGenerator.incrementAndGet();\n                            indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                            indexWriter.commit();\n                            translog.newTranslog(translogId);\n                        }\n\n                        SearcherManager current = this.searcherManager;\n                        this.searcherManager = buildSearchManager(indexWriter);\n                        versionMap.setManager(searcherManager);\n\n                        try {\n                            IOUtils.close(current);\n                        } catch (Throwable t) {\n                            logger.warn(\"Failed to close current SearcherManager\", t);\n                        }\n                        pruneDeletedVersions(threadPool.estimatedTimeInMillis());\n                    } catch (Throwable t) {\n                        throw new FlushFailedEngineException(shardId, t);\n                    }\n                }\n            } else if (flush.type() == Flush.Type.COMMIT_TRANSLOG) {\n                try (InternalLock _ = readLock.acquire()) {\n                    final IndexWriter indexWriter = currentIndexWriter();\n                    if (onGoingRecoveries.get() > 0) {\n                        throw new FlushNotAllowedEngineException(shardId, \"Recovery is in progress, flush is not allowed\");\n                    }\n\n                    if (flushNeeded || flush.force()) {\n                        flushNeeded = false;\n                        try {\n                            long translogId = translogIdGenerator.incrementAndGet();\n                            translog.newTransientTranslog(translogId);\n                            indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                            indexWriter.commit();\n                            pruneDeletedVersions(threadPool.estimatedTimeInMillis());\n                            // we need to move transient to current only after we refresh\n                            // so items added to current will still be around for realtime get\n                            // when tans overrides it\n                            translog.makeTransientCurrent();\n                        } catch (Throwable e) {\n                            translog.revertTransient();\n                            throw new FlushFailedEngineException(shardId, e);\n                        }\n                    }\n                }\n            } else if (flush.type() == Flush.Type.COMMIT) {\n                // note, its ok to just commit without cleaning the translog, its perfectly fine to replay a\n                // translog on an index that was opened on a committed point in time that is \"in the future\"\n                // of that translog\n                try (InternalLock _ = readLock.acquire()) {\n                    final IndexWriter indexWriter = currentIndexWriter();\n                    // we allow to *just* commit if there is an ongoing recovery happening...\n                    // its ok to use this, only a flush will cause a new translogId, and we are locked here from\n                    // other flushes use flushLock\n                    try {\n                        long translogId = translog.currentId();\n                        indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogId)).map());\n                        indexWriter.commit();\n                    } catch (Throwable e) {\n                        throw new FlushFailedEngineException(shardId, e);\n                    }\n                }\n            } else {\n                throw new ElasticsearchIllegalStateException(\"flush type [\" + flush.type() + \"] not supported\");\n            }\n\n            // reread the last committed segment infos\n            try (InternalLock _ = readLock.acquire()) {\n                ensureOpen();\n                readLastCommittedSegmentsInfo();\n            } catch (Throwable e) {\n                if (!closed) {\n                    logger.warn(\"failed to read latest segment infos on flush\", e);\n                }\n            }\n\n        } catch (FlushFailedEngineException ex) {\n            maybeFailEngine(ex.getCause());\n            throw ex;\n        } finally {\n            flushLock.unlock();\n            flushing.decrementAndGet();\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void start() throws EngineException {\n        try (InternalLock _ = writeLock.acquire()) {\n            if (indexWriter != null) {\n                throw new EngineAlreadyStartedException(shardId);\n            }\n            if (closed) {\n                throw new EngineClosedException(shardId);\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"starting engine\");\n            }\n            try {\n                this.indexWriter = createWriter();\n                mergeScheduler.removeListener(this.throttle);\n                this.throttle = new IndexThrottle(mergeScheduler.getMaxMerges(), logger);\n                mergeScheduler.addListener(throttle);\n            } catch (IOException e) {\n                throw new EngineCreationFailureException(shardId, \"failed to create engine\", e);\n            }\n\n            try {\n                // commit on a just opened writer will commit even if there are no changes done to it\n                // we rely on that for the commit data translog id key\n                if (Lucene.indexExists(store.directory())) {\n                    Map<String, String> commitUserData = Lucene.readSegmentInfos(store.directory()).getUserData();\n                    if (commitUserData.containsKey(Translog.TRANSLOG_ID_KEY)) {\n                        translogIdGenerator.set(Long.parseLong(commitUserData.get(Translog.TRANSLOG_ID_KEY)));\n                    } else {\n                        translogIdGenerator.set(System.currentTimeMillis());\n                        indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogIdGenerator.get())).map());\n                        indexWriter.commit();\n                    }\n                } else {\n                    translogIdGenerator.set(System.currentTimeMillis());\n                    indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogIdGenerator.get())).map());\n                    indexWriter.commit();\n                }\n                translog.newTranslog(translogIdGenerator.get());\n                this.searcherManager = buildSearchManager(indexWriter);\n                readLastCommittedSegmentsInfo();\n            } catch (IOException e) {\n                try {\n                    indexWriter.rollback();\n                } catch (IOException e1) {\n                    // ignore\n                } finally {\n                    IOUtils.closeWhileHandlingException(indexWriter);\n                }\n                throw new EngineCreationFailureException(shardId, \"failed to open reader on writer\", e);\n            }\n        }\n    }","id":59819,"modified_method":"@Override\n    public void start() throws EngineException {\n        try (InternalLock _ = writeLock.acquire()) {\n            if (indexWriter != null) {\n                throw new EngineAlreadyStartedException(shardId);\n            }\n            if (closed) {\n                throw new EngineClosedException(shardId);\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"starting engine\");\n            }\n            try {\n                this.indexWriter = createWriter();\n                mergeScheduler.removeListener(this.throttle);\n                this.throttle = new IndexThrottle(mergeScheduler.getMaxMerges(), logger);\n                mergeScheduler.addListener(throttle);\n            } catch (IOException e) {\n                throw new EngineCreationFailureException(shardId, \"failed to create engine\", e);\n            }\n\n            try {\n                // commit on a just opened writer will commit even if there are no changes done to it\n                // we rely on that for the commit data translog id key\n                if (Lucene.indexExists(store.directory())) {\n                    Map<String, String> commitUserData = Lucene.readSegmentInfos(store.directory()).getUserData();\n                    if (commitUserData.containsKey(Translog.TRANSLOG_ID_KEY)) {\n                        translogIdGenerator.set(Long.parseLong(commitUserData.get(Translog.TRANSLOG_ID_KEY)));\n                    } else {\n                        translogIdGenerator.set(System.currentTimeMillis());\n                        indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogIdGenerator.get())).map());\n                        indexWriter.commit();\n                    }\n                } else {\n                    translogIdGenerator.set(System.currentTimeMillis());\n                    indexWriter.setCommitData(MapBuilder.<String, String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY, Long.toString(translogIdGenerator.get())).map());\n                    indexWriter.commit();\n                }\n                translog.newTranslog(translogIdGenerator.get());\n                this.searcherManager = buildSearchManager(indexWriter);\n                versionMap.setManager(searcherManager);\n                readLastCommittedSegmentsInfo();\n            } catch (IOException e) {\n                try {\n                    indexWriter.rollback();\n                } catch (IOException e1) {\n                    // ignore\n                } finally {\n                    IOUtils.closeWhileHandlingException(indexWriter);\n                }\n                throw new EngineCreationFailureException(shardId, \"failed to open reader on writer\", e);\n            }\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public GetResult get(Get get) throws EngineException {\n        try (InternalLock _ = readLock.acquire()) {\n            if (get.realtime()) {\n                VersionValue versionValue = versionMap.get(versionKey(get.uid()));\n                if (versionValue != null) {\n                    if (versionValue.delete()) {\n                        return GetResult.NOT_EXISTS;\n                    }\n                    if (get.versionType().isVersionConflictForReads(versionValue.version(), get.version())) {\n                        Uid uid = Uid.createUid(get.uid().text());\n                        throw new VersionConflictEngineException(shardId, uid.type(), uid.id(), versionValue.version(), get.version());\n                    }\n                    if (!get.loadSource()) {\n                        return new GetResult(true, versionValue.version(), null);\n                    }\n                    byte[] data = translog.read(versionValue.translogLocation());\n                    if (data != null) {\n                        try {\n                            Translog.Source source = TranslogStreams.readSource(data);\n                            return new GetResult(true, versionValue.version(), source);\n                        } catch (IOException e) {\n                            // switched on us, read it from the reader\n                        }\n                    }\n                }\n            }\n\n            // no version, get the version from the index, we know that we refresh on flush\n            Searcher searcher = acquireSearcher(\"get\");\n            final Versions.DocIdAndVersion docIdAndVersion;\n            try {\n                docIdAndVersion = Versions.loadDocIdAndVersion(searcher.reader(), get.uid());\n            } catch (Throwable e) {\n                Releasables.closeWhileHandlingException(searcher);\n                //TODO: A better exception goes here\n                throw new EngineException(shardId(), \"Couldn't resolve version\", e);\n            }\n\n            if (docIdAndVersion != null) {\n                if (get.versionType().isVersionConflictForReads(docIdAndVersion.version, get.version())) {\n                    Releasables.close(searcher);\n                    Uid uid = Uid.createUid(get.uid().text());\n                    throw new VersionConflictEngineException(shardId, uid.type(), uid.id(), docIdAndVersion.version, get.version());\n                }\n            }\n\n            if (docIdAndVersion != null) {\n                // don't release the searcher on this path, it is the responsability of the caller to call GetResult.release\n                return new GetResult(searcher, docIdAndVersion);\n            } else {\n                Releasables.close(searcher);\n                return GetResult.NOT_EXISTS;\n            }\n        }\n    }","id":59820,"modified_method":"public GetResult get(Get get) throws EngineException {\n        try (InternalLock _ = readLock.acquire()) {\n            if (get.realtime()) {\n                VersionValue versionValue = versionMap.getUnderLock(get.uid().bytes());\n                if (versionValue != null) {\n                    if (versionValue.delete()) {\n                        return GetResult.NOT_EXISTS;\n                    }\n                    if (get.versionType().isVersionConflictForReads(versionValue.version(), get.version())) {\n                        Uid uid = Uid.createUid(get.uid().text());\n                        throw new VersionConflictEngineException(shardId, uid.type(), uid.id(), versionValue.version(), get.version());\n                    }\n                    if (!get.loadSource()) {\n                        return new GetResult(true, versionValue.version(), null);\n                    }\n                    byte[] data = translog.read(versionValue.translogLocation());\n                    if (data != null) {\n                        try {\n                            Translog.Source source = TranslogStreams.readSource(data);\n                            return new GetResult(true, versionValue.version(), source);\n                        } catch (IOException e) {\n                            // switched on us, read it from the reader\n                        }\n                    }\n                }\n            }\n\n            // no version, get the version from the index, we know that we refresh on flush\n            Searcher searcher = acquireSearcher(\"get\");\n            final Versions.DocIdAndVersion docIdAndVersion;\n            try {\n                docIdAndVersion = Versions.loadDocIdAndVersion(searcher.reader(), get.uid());\n            } catch (Throwable e) {\n                Releasables.closeWhileHandlingException(searcher);\n                //TODO: A better exception goes here\n                throw new EngineException(shardId(), \"Couldn't resolve version\", e);\n            }\n\n            if (docIdAndVersion != null) {\n                if (get.versionType().isVersionConflictForReads(docIdAndVersion.version, get.version())) {\n                    Releasables.close(searcher);\n                    Uid uid = Uid.createUid(get.uid().text());\n                    throw new VersionConflictEngineException(shardId, uid.type(), uid.id(), docIdAndVersion.version, get.version());\n                }\n            }\n\n            if (docIdAndVersion != null) {\n                // don't release the searcher on this path, it is the responsability of the caller to call GetResult.release\n                return new GetResult(searcher, docIdAndVersion);\n            } else {\n                Releasables.close(searcher);\n                return GetResult.NOT_EXISTS;\n            }\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void delete(DeleteByQuery delete) throws EngineException {\n        try (InternalLock _ = readLock.acquire()) {\n            IndexWriter writer = this.indexWriter;\n            if (writer == null) {\n                throw new EngineClosedException(shardId);\n            }\n\n            Query query;\n            if (delete.nested() && delete.aliasFilter() != null) {\n                query = new IncludeNestedDocsQuery(new XFilteredQuery(delete.query(), delete.aliasFilter()), delete.parentFilter());\n            } else if (delete.nested()) {\n                query = new IncludeNestedDocsQuery(delete.query(), delete.parentFilter());\n            } else if (delete.aliasFilter() != null) {\n                query = new XFilteredQuery(delete.query(), delete.aliasFilter());\n            } else {\n                query = delete.query();\n            }\n\n            writer.deleteDocuments(query);\n            translog.add(new Translog.DeleteByQuery(delete));\n            dirty = true;\n            possibleMergeNeeded = true;\n            flushNeeded = true;\n        } catch (Throwable t) {\n            maybeFailEngine(t);\n            throw new DeleteByQueryFailedEngineException(shardId, delete, t);\n        }\n        //TODO: This is heavy, since we refresh, but we really have to...\n        refreshVersioningTable(System.currentTimeMillis());\n    }","id":59821,"modified_method":"@Override\n    public void delete(DeleteByQuery delete) throws EngineException {\n        try (InternalLock _ = readLock.acquire()) {\n            IndexWriter writer = this.indexWriter;\n            if (writer == null) {\n                throw new EngineClosedException(shardId);\n            }\n\n            Query query;\n            if (delete.nested() && delete.aliasFilter() != null) {\n                query = new IncludeNestedDocsQuery(new XFilteredQuery(delete.query(), delete.aliasFilter()), delete.parentFilter());\n            } else if (delete.nested()) {\n                query = new IncludeNestedDocsQuery(delete.query(), delete.parentFilter());\n            } else if (delete.aliasFilter() != null) {\n                query = new XFilteredQuery(delete.query(), delete.aliasFilter());\n            } else {\n                query = delete.query();\n            }\n\n            writer.deleteDocuments(query);\n            translog.add(new Translog.DeleteByQuery(delete));\n            dirty = true;\n            possibleMergeNeeded = true;\n            flushNeeded = true;\n        } catch (Throwable t) {\n            maybeFailEngine(t);\n            throw new DeleteByQueryFailedEngineException(shardId, delete, t);\n        }\n        //TODO: This is heavy, since we refresh, but we really have to...\n        pruneDeletedVersions(System.currentTimeMillis());\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public InternalEngine(ShardId shardId, @IndexSettings Settings indexSettings, ThreadPool threadPool,\n                          IndexSettingsService indexSettingsService, ShardIndexingService indexingService, @Nullable IndicesWarmer warmer,\n                          Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog,\n                          MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler,\n                          AnalysisService analysisService, SimilarityService similarityService, CodecService codecService) throws EngineException {\n        super(shardId, indexSettings);\n        Preconditions.checkNotNull(store, \"Store must be provided to the engine\");\n        Preconditions.checkNotNull(deletionPolicy, \"Snapshot deletion policy must be provided to the engine\");\n        Preconditions.checkNotNull(translog, \"Translog must be provided to the engine\");\n\n        this.gcDeletesInMillis = indexSettings.getAsTime(INDEX_GC_DELETES, TimeValue.timeValueSeconds(60)).millis();\n        this.indexingBufferSize = componentSettings.getAsBytesSize(\"index_buffer_size\", new ByteSizeValue(64, ByteSizeUnit.MB)); // not really important, as it is set by the IndexingMemory manager\n        this.codecName = indexSettings.get(INDEX_CODEC, \"default\");\n\n        this.threadPool = threadPool;\n        this.indexSettingsService = indexSettingsService;\n        this.indexingService = indexingService;\n        this.warmer = (InternalIndicesWarmer) warmer;\n        this.store = store;\n        this.deletionPolicy = deletionPolicy;\n        this.translog = translog;\n        this.mergePolicyProvider = mergePolicyProvider;\n        this.mergeScheduler = mergeScheduler;\n        this.analysisService = analysisService;\n        this.similarityService = similarityService;\n        this.codecService = codecService;\n        this.compoundOnFlush = indexSettings.getAsBoolean(INDEX_COMPOUND_ON_FLUSH, this.compoundOnFlush);\n        this.indexConcurrency = indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY, Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, (int) (EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));\n        this.versionMap = ConcurrentCollections.newConcurrentMapWithAggressiveConcurrency();\n        this.dirtyLocks = new Object[indexConcurrency * 50]; // we multiply it to have enough...\n        for (int i = 0; i < dirtyLocks.length; i++) {\n            dirtyLocks[i] = new Object();\n        }\n        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(\"index.optimize_auto_generated_id\", true);\n\n        this.indexSettingsService.addListener(applySettings);\n\n        this.failOnMergeFailure = indexSettings.getAsBoolean(INDEX_FAIL_ON_MERGE_FAILURE, true);\n        if (failOnMergeFailure) {\n            this.mergeScheduler.addFailureListener(new FailEngineOnMergeFailure());\n        }\n        store.incRef();\n    }","id":59822,"modified_method":"@Inject\n    public InternalEngine(ShardId shardId, @IndexSettings Settings indexSettings, ThreadPool threadPool,\n                          IndexSettingsService indexSettingsService, ShardIndexingService indexingService, @Nullable IndicesWarmer warmer,\n                          Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog,\n                          MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler,\n                          AnalysisService analysisService, SimilarityService similarityService, CodecService codecService) throws EngineException {\n        super(shardId, indexSettings);\n        Preconditions.checkNotNull(store, \"Store must be provided to the engine\");\n        Preconditions.checkNotNull(deletionPolicy, \"Snapshot deletion policy must be provided to the engine\");\n        Preconditions.checkNotNull(translog, \"Translog must be provided to the engine\");\n\n        this.gcDeletesInMillis = indexSettings.getAsTime(INDEX_GC_DELETES, TimeValue.timeValueSeconds(60)).millis();\n        this.indexingBufferSize = componentSettings.getAsBytesSize(\"index_buffer_size\", new ByteSizeValue(64, ByteSizeUnit.MB)); // not really important, as it is set by the IndexingMemory manager\n        this.codecName = indexSettings.get(INDEX_CODEC, \"default\");\n\n        this.threadPool = threadPool;\n        this.indexSettingsService = indexSettingsService;\n        this.indexingService = indexingService;\n        this.warmer = (InternalIndicesWarmer) warmer;\n        this.store = store;\n        this.deletionPolicy = deletionPolicy;\n        this.translog = translog;\n        this.mergePolicyProvider = mergePolicyProvider;\n        this.mergeScheduler = mergeScheduler;\n        this.analysisService = analysisService;\n        this.similarityService = similarityService;\n        this.codecService = codecService;\n        this.compoundOnFlush = indexSettings.getAsBoolean(INDEX_COMPOUND_ON_FLUSH, this.compoundOnFlush);\n        this.indexConcurrency = indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY, Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, (int) (EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));\n        this.versionMap = new LiveVersionMap();\n        this.dirtyLocks = new Object[indexConcurrency * 50]; // we multiply it to have enough...\n        for (int i = 0; i < dirtyLocks.length; i++) {\n            dirtyLocks[i] = new Object();\n        }\n        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(\"index.optimize_auto_generated_id\", true);\n\n        this.indexSettingsService.addListener(applySettings);\n\n        this.failOnMergeFailure = indexSettings.getAsBoolean(INDEX_FAIL_ON_MERGE_FAILURE, true);\n        if (failOnMergeFailure) {\n            this.mergeScheduler.addFailureListener(new FailEngineOnMergeFailure());\n        }\n        store.incRef();\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void innerDelete(Delete delete, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(delete.uid())) {\n            final long currentVersion;\n            HashedBytesRef versionKey = versionKey(delete.uid());\n            VersionValue versionValue = versionMap.get(versionKey);\n            if (versionValue == null) {\n                currentVersion = loadCurrentVersionFromIndex(delete.uid());\n            } else {\n                if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                    currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                } else {\n                    currentVersion = versionValue.version();\n                }\n            }\n\n            long updatedVersion;\n            long expectedVersion = delete.version();\n            if (delete.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (delete.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, delete.type(), delete.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = delete.versionType().updateVersion(currentVersion, expectedVersion);\n\n            if (currentVersion == Versions.NOT_FOUND) {\n                // doc does not exists and no prior deletes\n                delete.updateVersion(updatedVersion, false);\n                Translog.Location translogLocation = translog.add(new Translog.Delete(delete));\n                versionMap.put(versionKey, new VersionValue(updatedVersion, true, threadPool.estimatedTimeInMillis(), translogLocation));\n            } else if (versionValue != null && versionValue.delete()) {\n                // a \"delete on delete\", in this case, we still increment the version, log it, and return that version\n                delete.updateVersion(updatedVersion, false);\n                Translog.Location translogLocation = translog.add(new Translog.Delete(delete));\n                versionMap.put(versionKey, new VersionValue(updatedVersion, true, threadPool.estimatedTimeInMillis(), translogLocation));\n            } else {\n                delete.updateVersion(updatedVersion, true);\n                writer.deleteDocuments(delete.uid());\n                Translog.Location translogLocation = translog.add(new Translog.Delete(delete));\n                versionMap.put(versionKey, new VersionValue(updatedVersion, true, threadPool.estimatedTimeInMillis(), translogLocation));\n            }\n\n            indexingService.postDeleteUnderLock(delete);\n        }\n    }","id":59823,"modified_method":"private void innerDelete(Delete delete, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(delete.uid())) {\n            final long currentVersion;\n            VersionValue versionValue = versionMap.getUnderLock(delete.uid().bytes());\n            if (versionValue == null) {\n                currentVersion = loadCurrentVersionFromIndex(delete.uid());\n            } else {\n                if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                    currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                } else {\n                    currentVersion = versionValue.version();\n                }\n            }\n\n            long updatedVersion;\n            long expectedVersion = delete.version();\n            if (delete.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (delete.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, delete.type(), delete.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = delete.versionType().updateVersion(currentVersion, expectedVersion);\n\n            final boolean found;\n            if (currentVersion == Versions.NOT_FOUND) {\n                // doc does not exist and no prior deletes\n                found = false;\n            } else if (versionValue != null && versionValue.delete()) {\n                // a \"delete on delete\", in this case, we still increment the version, log it, and return that version\n                found = false;\n            } else {\n                // we deleted a currently existing document\n                writer.deleteDocuments(delete.uid());\n                found = true;\n            }\n\n            delete.updateVersion(updatedVersion, found);\n            Translog.Location translogLocation = translog.add(new Translog.Delete(delete));\n            versionMap.putDeleteUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, threadPool.estimatedTimeInMillis(), translogLocation));\n\n            indexingService.postDeleteUnderLock(delete);\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void innerIndex(Index index, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(index.uid())) {\n            HashedBytesRef versionKey = versionKey(index.uid());\n            final long currentVersion;\n            VersionValue versionValue = versionMap.get(versionKey);\n            if (versionValue == null) {\n                currentVersion = loadCurrentVersionFromIndex(index.uid());\n            } else {\n                if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                    currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                } else {\n                    currentVersion = versionValue.version();\n                }\n            }\n\n            long updatedVersion;\n            long expectedVersion = index.version();\n            if (index.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (index.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, index.type(), index.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = index.versionType().updateVersion(currentVersion, expectedVersion);\n\n\n            index.updateVersion(updatedVersion);\n            if (currentVersion == Versions.NOT_FOUND) {\n                // document does not exists, we can optimize for create\n                index.created(true);\n                if (index.docs().size() > 1) {\n                    writer.addDocuments(index.docs(), index.analyzer());\n                } else {\n                    writer.addDocument(index.docs().get(0), index.analyzer());\n                }\n            } else {\n                if (versionValue != null) {\n                    index.created(versionValue.delete()); // we have a delete which is not GC'ed...\n                }\n                if (index.docs().size() > 1) {\n                    writer.updateDocuments(index.uid(), index.docs(), index.analyzer());\n                } else {\n                    writer.updateDocument(index.uid(), index.docs().get(0), index.analyzer());\n                }\n            }\n            Translog.Location translogLocation = translog.add(new Translog.Index(index));\n\n            versionMap.put(versionKey, new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis(), translogLocation));\n\n            indexingService.postIndexUnderLock(index);\n        }\n    }","id":59824,"modified_method":"private void innerIndex(Index index, IndexWriter writer) throws IOException {\n        synchronized (dirtyLock(index.uid())) {\n            final long currentVersion;\n            VersionValue versionValue = versionMap.getUnderLock(index.uid().bytes());\n            if (versionValue == null) {\n                currentVersion = loadCurrentVersionFromIndex(index.uid());\n            } else {\n                if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {\n                    currentVersion = Versions.NOT_FOUND; // deleted, and GC\n                } else {\n                    currentVersion = versionValue.version();\n                }\n            }\n\n            long updatedVersion;\n            long expectedVersion = index.version();\n            if (index.versionType().isVersionConflictForWrites(currentVersion, expectedVersion)) {\n                if (index.origin() == Operation.Origin.RECOVERY) {\n                    return;\n                } else {\n                    throw new VersionConflictEngineException(shardId, index.type(), index.id(), currentVersion, expectedVersion);\n                }\n            }\n            updatedVersion = index.versionType().updateVersion(currentVersion, expectedVersion);\n\n\n            index.updateVersion(updatedVersion);\n            if (currentVersion == Versions.NOT_FOUND) {\n                // document does not exists, we can optimize for create\n                index.created(true);\n                if (index.docs().size() > 1) {\n                    writer.addDocuments(index.docs(), index.analyzer());\n                } else {\n                    writer.addDocument(index.docs().get(0), index.analyzer());\n                }\n            } else {\n                if (versionValue != null) {\n                    index.created(versionValue.delete()); // we have a delete which is not GC'ed...\n                }\n                if (index.docs().size() > 1) {\n                    writer.updateDocuments(index.uid(), index.docs(), index.analyzer());\n                } else {\n                    writer.updateDocument(index.uid(), index.docs().get(0), index.analyzer());\n                }\n            }\n            Translog.Location translogLocation = translog.add(new Translog.Index(index));\n\n            versionMap.putUnderLock(index.uid().bytes(), new VersionValue(updatedVersion, translogLocation));\n\n            indexingService.postIndexUnderLock(index);\n        }\n    }","commit_id":"50e42265ef3584cf7e55c803cd43ebc88a879e7a","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","id":59825,"modified_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.scopeProvider = new ScopeProvider(resolveSession);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        resolveSession.setAnnotationResolve(annotationResolver);\n        resolveSession.setDescriptorResolver(descriptorResolver);\n        resolveSession.setJetImportFactory(jetImportsFactory);\n        resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        resolveSession.setScopeProvider(scopeProvider);\n        resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        resolveSession.setTypeResolver(typeResolver);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","commit_id":"d15ff6da45b537d2f73619dfceb30e01f3e10a0a","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static void generateProductionInjector() throws IOException {\n        DependencyInjectorGenerator generator = new DependencyInjectorGenerator(false);\n\n        // Fields\n        generator.addPublicField(TopDownAnalyzer.class);\n        generator.addPublicField(BodyResolver.class);\n        generator.addPublicField(ControlFlowAnalyzer.class);\n        generator.addPublicField(DeclarationsChecker.class);\n        generator.addPublicField(DescriptorResolver.class);\n        generator.addPublicField(ExpressionTypingServices.class);\n\n        // Parameters\n        generator.addPublicParameter(Project.class);\n        generator.addParameter(TopDownAnalysisContext.class);\n        generator.addParameter(ModuleConfiguration.class);\n        generator.addParameter(JetControlFlowDataTraceFactory.class);\n        generator.addParameter(false, boolean.class, \"analyzingBootstrapLibrary\");\n\n        generator.generate(\"compiler/frontend/src\", \"org.jetbrains.jet.di\", \"InjectorForTopDownAnalyzer\");\n    }","id":59826,"modified_method":"private static void generateProductionInjector() throws IOException {\n        DependencyInjectorGenerator generator = new DependencyInjectorGenerator(false);\n\n        // Fields\n        generator.addPublicField(TopDownAnalyzer.class);\n        generator.addPublicField(BodyResolver.class);\n        generator.addPublicField(ControlFlowAnalyzer.class);\n        generator.addPublicField(DeclarationsChecker.class);\n        generator.addPublicField(DescriptorResolver.class);\n\n        // Parameters\n        generator.addPublicParameter(Project.class);\n        generator.addParameter(TopDownAnalysisContext.class);\n        generator.addParameter(ModuleConfiguration.class);\n        generator.addParameter(JetControlFlowDataTraceFactory.class);\n\n        generator.generate(\"compiler/frontend/src\", \"org.jetbrains.jet.di\", \"InjectorForTopDownAnalyzer\");\n    }","commit_id":"ee2976d380b1fa3d7e78b38e3212b83f41e2aafd","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzer(\n        Project project,\n        TopDownAnalysisContext topDownAnalysisContext,\n        ModuleConfiguration moduleConfiguration,\n        JetControlFlowDataTraceFactory jetControlFlowDataTraceFactory,\n        boolean analyzingBootstrapLibrary\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.expressionTypingServices = new ExpressionTypingServices();\n        this.project = project;\n        DeclarationResolver declarationResolver = new DeclarationResolver();\n        AnnotationResolver annotationResolver = new AnnotationResolver();\n        CallResolver callResolver = new CallResolver();\n        OverloadingConflictResolver overloadingConflictResolver = new OverloadingConflictResolver();\n        TypeResolver typeResolver = new TypeResolver();\n        ImportsResolver importsResolver = new ImportsResolver();\n        DelegationResolver delegationResolver = new DelegationResolver();\n        OverloadResolver overloadResolver = new OverloadResolver();\n        OverrideResolver overrideResolver = new OverrideResolver();\n        TypeHierarchyResolver typeHierarchyResolver = new TypeHierarchyResolver();\n\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setDelegationResolver(delegationResolver);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setDescriptorResolver(descriptorResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        this.controlFlowAnalyzer.setContext(topDownAnalysisContext);\n        this.controlFlowAnalyzer.setFlowDataTraceFactory(jetControlFlowDataTraceFactory);\n\n        this.declarationsChecker.setContext(topDownAnalysisContext);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        this.expressionTypingServices.setCallResolver(callResolver);\n        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        this.expressionTypingServices.setProject(project);\n        this.expressionTypingServices.setTypeResolver(typeResolver);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setDescriptorResolver(descriptorResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setOverloadingConflictResolver(overloadingConflictResolver);\n        callResolver.setTypeResolver(typeResolver);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setDescriptorResolver(descriptorResolver);\n\n        importsResolver.setConfiguration(moduleConfiguration);\n        importsResolver.setContext(topDownAnalysisContext);\n\n        delegationResolver.setContext(topDownAnalysisContext);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n\n        typeHierarchyResolver.setConfiguration(moduleConfiguration);\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n\n    }","id":59827,"modified_method":"public InjectorForTopDownAnalyzer(\n        Project project,\n        TopDownAnalysisContext topDownAnalysisContext,\n        ModuleConfiguration moduleConfiguration,\n        JetControlFlowDataTraceFactory jetControlFlowDataTraceFactory\n    ) {\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.descriptorResolver = new DescriptorResolver();\n        this.project = project;\n        DeclarationResolver declarationResolver = new DeclarationResolver();\n        AnnotationResolver annotationResolver = new AnnotationResolver();\n        CallResolver callResolver = new CallResolver();\n        ExpressionTypingServices expressionTypingServices = new ExpressionTypingServices();\n        TypeResolver typeResolver = new TypeResolver();\n        OverloadingConflictResolver overloadingConflictResolver = new OverloadingConflictResolver();\n        ImportsResolver importsResolver = new ImportsResolver();\n        DelegationResolver delegationResolver = new DelegationResolver();\n        OverloadResolver overloadResolver = new OverloadResolver();\n        OverrideResolver overrideResolver = new OverrideResolver();\n        TypeHierarchyResolver typeHierarchyResolver = new TypeHierarchyResolver();\n\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setDelegationResolver(delegationResolver);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        this.bodyResolver.setCallResolver(callResolver);\n        this.bodyResolver.setContext(topDownAnalysisContext);\n        this.bodyResolver.setDescriptorResolver(descriptorResolver);\n        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        this.controlFlowAnalyzer.setContext(topDownAnalysisContext);\n        this.controlFlowAnalyzer.setFlowDataTraceFactory(jetControlFlowDataTraceFactory);\n\n        this.declarationsChecker.setContext(topDownAnalysisContext);\n\n        this.descriptorResolver.setAnnotationResolver(annotationResolver);\n        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        this.descriptorResolver.setTypeResolver(typeResolver);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setContext(topDownAnalysisContext);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setExpressionTypingServices(expressionTypingServices);\n\n        callResolver.setDescriptorResolver(descriptorResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setOverloadingConflictResolver(overloadingConflictResolver);\n        callResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        typeResolver.setAnnotationResolver(annotationResolver);\n        typeResolver.setDescriptorResolver(descriptorResolver);\n\n        importsResolver.setConfiguration(moduleConfiguration);\n        importsResolver.setContext(topDownAnalysisContext);\n\n        delegationResolver.setContext(topDownAnalysisContext);\n\n        overloadResolver.setContext(topDownAnalysisContext);\n\n        overrideResolver.setContext(topDownAnalysisContext);\n\n        typeHierarchyResolver.setConfiguration(moduleConfiguration);\n        typeHierarchyResolver.setContext(topDownAnalysisContext);\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n\n    }","commit_id":"ee2976d380b1fa3d7e78b38e3212b83f41e2aafd","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public TopDownAnalysisContext(\n            final Project project,\n            final BindingTrace trace,\n            Predicate<PsiFile> analyzeCompletely,\n            @NotNull final ModuleConfiguration configuration,\n            boolean declaredLocally,\n            boolean analyzingBootstrapLibrary,\n            @Nullable final JetControlFlowDataTraceFactory jetControlFlowDataTraceFactory) {\n\n        if (analyzingBootstrapLibrary == (jetControlFlowDataTraceFactory != null)) {\n            throw new IllegalStateException(\n                    \"jetControlFlowDataTraceFactory must not be passed when analyzingBootstrapLibrary and vice versa\");\n        }\n\n        this.injector = new InjectorForTopDownAnalyzer(project, this, configuration, jetControlFlowDataTraceFactory, analyzingBootstrapLibrary);\n\n        this.trace = new ObservableBindingTrace(trace);\n        this.analyzeCompletely = analyzeCompletely;\n        this.declaredLocally = declaredLocally;\n        this.analyzingBootstrapLibrary = analyzingBootstrapLibrary;\n    }","id":59828,"modified_method":"public TopDownAnalysisContext(\n            final Project project,\n            final BindingTrace trace,\n            Predicate<PsiFile> analyzeCompletely,\n            @NotNull final ModuleConfiguration configuration,\n            boolean declaredLocally,\n            boolean analyzingBootstrapLibrary,\n            @Nullable final JetControlFlowDataTraceFactory jetControlFlowDataTraceFactory) {\n\n        if (analyzingBootstrapLibrary == (jetControlFlowDataTraceFactory != null)) {\n            throw new IllegalStateException(\n                    \"jetControlFlowDataTraceFactory must not be passed when analyzingBootstrapLibrary and vice versa\");\n        }\n\n        this.injector = new InjectorForTopDownAnalyzer(project, this, configuration, jetControlFlowDataTraceFactory);\n\n        this.trace = new ObservableBindingTrace(trace);\n        this.analyzeCompletely = analyzeCompletely;\n        this.declaredLocally = declaredLocally;\n        this.analyzingBootstrapLibrary = analyzingBootstrapLibrary;\n    }","commit_id":"ee2976d380b1fa3d7e78b38e3212b83f41e2aafd","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptor moduleDescriptor\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(getModuleDescriptor());\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(getModuleDescriptor());\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, getModuleDescriptor(), flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.topDownAnalyzer.setAdditionalCheckerProvider(additionalCheckerProvider);\n        this.topDownAnalyzer.setBodyResolver(bodyResolver);\n        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.topDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.topDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        this.topDownAnalyzer.setProject(project);\n        this.topDownAnalyzer.setTrace(bindingTrace);\n        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","id":59829,"modified_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n    }","commit_id":"53b699d74533a31985af4515e46a49e61b7d623d","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public TopDownAnalyzer getTopDownAnalyzer() {\n        return this.topDownAnalyzer;\n    }","id":59830,"modified_method":"public LazyTopDownAnalyzer getLazyTopDownAnalyzer() {\n        return this.lazyTopDownAnalyzer;\n    }","commit_id":"53b699d74533a31985af4515e46a49e61b7d623d","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static AnalysisResult analyzeFilesWithGivenTrace(\n            @NotNull Collection<JetFile> files,\n            @NotNull BindingTrace trace,\n            @NotNull ModuleDescriptorImpl module,\n            @NotNull Predicate<PsiFile> filesToAnalyzeCompletely,\n            @NotNull Config config\n    ) {\n        Project project = config.getProject();\n\n        Predicate<PsiFile> completely = Predicates.and(notLibFiles(config.getLibFiles()), filesToAnalyzeCompletely);\n\n        GlobalContextImpl globalContext = ContextPackage.GlobalContext();\n        TopDownAnalysisParameters topDownAnalysisParameters = TopDownAnalysisParameters.create(\n                globalContext.getStorageManager(), globalContext.getExceptionTracker(), completely, false, false);\n\n        InjectorForTopDownAnalyzerForJs injector = new InjectorForTopDownAnalyzerForJs(project, topDownAnalysisParameters, trace, module);\n        try {\n            Collection<JetFile> allFiles = config.getLibraryModule() != null ?\n                                           files :\n                                           Config.withJsLibAdded(files, config);\n            injector.getTopDownAnalyzer().analyzeFiles(topDownAnalysisParameters, allFiles);\n            return AnalysisResult.success(trace.getBindingContext(), module);\n        }\n        finally {\n            injector.destroy();\n        }\n    }","id":59831,"modified_method":"@NotNull\n    public static AnalysisResult analyzeFilesWithGivenTrace(\n            @NotNull Collection<JetFile> files,\n            @NotNull BindingTrace trace,\n            @NotNull ModuleDescriptorImpl module,\n            @NotNull Predicate<PsiFile> filesToAnalyzeCompletely,\n            @NotNull Config config\n    ) {\n        Project project = config.getProject();\n\n        Predicate<PsiFile> completely = Predicates.and(notLibFiles(config.getLibFiles()), filesToAnalyzeCompletely);\n\n        GlobalContextImpl globalContext = ContextPackage.GlobalContext();\n        TopDownAnalysisParameters topDownAnalysisParameters = TopDownAnalysisParameters.create(\n                globalContext.getStorageManager(), globalContext.getExceptionTracker(), completely, false, false);\n\n        Collection<JetFile> allFiles = config.getLibraryModule() != null ?\n                                       files :\n                                       Config.withJsLibAdded(files, config);\n        \n        InjectorForTopDownAnalyzerForJs injector = new InjectorForTopDownAnalyzerForJs(\n                project, topDownAnalysisParameters, trace, module,\n                new FileBasedDeclarationProviderFactory(topDownAnalysisParameters.getStorageManager(), allFiles));\n        try {\n            injector.getLazyTopDownAnalyzer().analyzeFiles(topDownAnalysisParameters, allFiles, \n                                                           Collections.<PackageFragmentProvider>emptyList());\n            return AnalysisResult.success(trace.getBindingContext(), module);\n        }\n        finally {\n            injector.destroy();\n        }\n    }","commit_id":"53b699d74533a31985af4515e46a49e61b7d623d","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForLazyResolveWithJava(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull GlobalSearchScope moduleContentScope,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull DeclarationProviderFactory declarationProviderFactory,\n        @NotNull ModuleClassResolver moduleClassResolver\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.moduleContentScope = moduleContentScope;\n        this.bindingTrace = bindingTrace;\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.moduleClassResolver = moduleClassResolver;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinderFactory.SERVICE.getInstance(project).create(moduleContentScope);\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver(traceBasedErrorReporter);\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.lazyResolveBasedCache = new LazyResolveBasedCache();\n        this.javaPropertyInitializerEvaluator = new JavaPropertyInitializerEvaluatorImpl();\n        this.samConversionResolver = SamConversionResolverImpl.INSTANCE$;\n        this.javaSourceElementFactory = new JavaSourceElementFactoryImpl();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, lazyResolveBasedCache, javaPropertyInitializerEvaluator, samConversionResolver, javaSourceElementFactory, moduleClassResolver);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, module);\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, module);\n        this.javaFlexibleTypeCapabilitiesProvider = new JavaFlexibleTypeCapabilitiesProvider();\n        this.lazyResolveToken = new LazyResolveToken();\n        this.javaLazyAnalyzerPostConstruct = new JavaLazyAnalyzerPostConstruct();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, javaFlexibleTypeCapabilitiesProvider, storageManager, lazyResolveToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.javaClassDataFinder = new JavaClassDataFinder(virtualFileFinder, deserializedDescriptorResolver);\n        this.binaryClassAnnotationAndConstantLoader = new BinaryClassAnnotationAndConstantLoaderImpl(module, storageManager, virtualFileFinder, traceBasedErrorReporter);\n        this.deserializationComponentsForJava = new DeserializationComponentsForJava(storageManager, module, javaClassDataFinder, binaryClassAnnotationAndConstantLoader, lazyJavaPackageFragmentProvider);\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        javaClassFinder.setComponentPostConstruct(javaLazyAnalyzerPostConstruct);\n        javaClassFinder.setProject(project);\n        javaClassFinder.setScope(moduleContentScope);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setProject(project);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        lazyResolveBasedCache.setSession(resolveSession);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        javaLazyAnalyzerPostConstruct.setCodeAnalyzer(resolveSession);\n        javaLazyAnalyzerPostConstruct.setProject(project);\n        javaLazyAnalyzerPostConstruct.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);\n\n        javaClassFinder.initialize();\n\n        javaLazyAnalyzerPostConstruct.postCreate();\n\n    }","id":59832,"modified_method":"public InjectorForLazyResolveWithJava(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory,\n        @NotNull GlobalSearchScope moduleContentScope,\n        @NotNull ModuleClassResolver moduleClassResolver\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.moduleContentScope = moduleContentScope;\n        this.moduleClassResolver = moduleClassResolver;\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinderFactory.SERVICE.getInstance(project).create(moduleContentScope);\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver(traceBasedErrorReporter);\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.lazyResolveBasedCache = new LazyResolveBasedCache();\n        this.javaPropertyInitializerEvaluator = new JavaPropertyInitializerEvaluatorImpl();\n        this.samConversionResolver = SamConversionResolverImpl.INSTANCE$;\n        this.javaSourceElementFactory = new JavaSourceElementFactoryImpl();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, lazyResolveBasedCache, javaPropertyInitializerEvaluator, samConversionResolver, javaSourceElementFactory, moduleClassResolver);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, module);\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, module);\n        this.javaFlexibleTypeCapabilitiesProvider = new JavaFlexibleTypeCapabilitiesProvider();\n        this.lazyResolveToken = new LazyResolveToken();\n        this.javaLazyAnalyzerPostConstruct = new JavaLazyAnalyzerPostConstruct();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, javaFlexibleTypeCapabilitiesProvider, storageManager, lazyResolveToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.javaClassDataFinder = new JavaClassDataFinder(virtualFileFinder, deserializedDescriptorResolver);\n        this.binaryClassAnnotationAndConstantLoader = new BinaryClassAnnotationAndConstantLoaderImpl(module, storageManager, virtualFileFinder, traceBasedErrorReporter);\n        this.deserializationComponentsForJava = new DeserializationComponentsForJava(storageManager, module, javaClassDataFinder, binaryClassAnnotationAndConstantLoader, lazyJavaPackageFragmentProvider);\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        javaClassFinder.setComponentPostConstruct(javaLazyAnalyzerPostConstruct);\n        javaClassFinder.setProject(project);\n        javaClassFinder.setScope(moduleContentScope);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setProject(project);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        lazyResolveBasedCache.setSession(resolveSession);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        javaLazyAnalyzerPostConstruct.setCodeAnalyzer(resolveSession);\n        javaLazyAnalyzerPostConstruct.setProject(project);\n        javaLazyAnalyzerPostConstruct.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);\n\n        javaClassFinder.initialize();\n\n        javaLazyAnalyzerPostConstruct.postCreate();\n\n    }","commit_id":"434274019524d7e6a1a5a5da173c52506f2bcfe1","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForLazyTopDownAnalyzerBasic(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl moduleDescriptor,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.moduleDescriptor = moduleDescriptor;\n        this.platformToKotlinClassMap = moduleDescriptor.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, moduleDescriptor, declarationProviderFactory, bindingTrace);\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(moduleDescriptor);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, moduleDescriptor, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(moduleDescriptor);\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(moduleDescriptor);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(moduleDescriptor);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","id":59833,"modified_method":"public InjectorForLazyTopDownAnalyzerBasic(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","commit_id":"434274019524d7e6a1a5a5da173c52506f2bcfe1","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.scopeProvider = new ScopeProvider(resolveSession);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        resolveSession.setAnnotationResolve(annotationResolver);\n        resolveSession.setDescriptorResolver(descriptorResolver);\n        resolveSession.setJetImportFactory(jetImportsFactory);\n        resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        resolveSession.setScopeProvider(scopeProvider);\n        resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        resolveSession.setTypeResolver(typeResolver);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","id":59834,"modified_method":"public InjectorForTopDownAnalyzerForJs(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.flexibleTypeCapabilitiesProvider = new FlexibleTypeCapabilitiesProvider();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, flexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n    }","commit_id":"434274019524d7e6a1a5a5da173c52506f2bcfe1","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull GlobalSearchScope moduleContentScope,\n        @NotNull DeclarationProviderFactory declarationProviderFactory\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.moduleContentScope = moduleContentScope;\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinderFactory.SERVICE.getInstance(project).create(moduleContentScope);\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver(traceBasedErrorReporter);\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.lazyResolveBasedCache = new LazyResolveBasedCache();\n        this.javaPropertyInitializerEvaluator = new JavaPropertyInitializerEvaluatorImpl();\n        this.samConversionResolver = SamConversionResolverImpl.INSTANCE$;\n        this.javaSourceElementFactory = new JavaSourceElementFactoryImpl();\n        this.singleModuleClassResolver = new SingleModuleClassResolver();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, lazyResolveBasedCache, javaPropertyInitializerEvaluator, samConversionResolver, javaSourceElementFactory, singleModuleClassResolver);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, module);\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, module);\n        this.javaClassDataFinder = new JavaClassDataFinder(virtualFileFinder, deserializedDescriptorResolver);\n        this.binaryClassAnnotationAndConstantLoader = new BinaryClassAnnotationAndConstantLoaderImpl(module, storageManager, virtualFileFinder, traceBasedErrorReporter);\n        this.deserializationComponentsForJava = new DeserializationComponentsForJava(storageManager, module, javaClassDataFinder, binaryClassAnnotationAndConstantLoader, lazyJavaPackageFragmentProvider);\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.javaLazyAnalyzerPostConstruct = new JavaLazyAnalyzerPostConstruct();\n        this.javaFlexibleTypeCapabilitiesProvider = new JavaFlexibleTypeCapabilitiesProvider();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;\n        this.bodyResolver = new BodyResolver();\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, javaFlexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.jetImportsFactory = new JetImportsFactory();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        javaClassFinder.setComponentPostConstruct(javaLazyAnalyzerPostConstruct);\n        javaClassFinder.setProject(project);\n        javaClassFinder.setScope(moduleContentScope);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setProject(project);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        lazyResolveBasedCache.setSession(resolveSession);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        singleModuleClassResolver.setResolver(javaDescriptorResolver);\n\n        javaLazyAnalyzerPostConstruct.setCodeAnalyzer(resolveSession);\n        javaLazyAnalyzerPostConstruct.setProject(project);\n        javaLazyAnalyzerPostConstruct.setTrace(bindingTrace);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        jetImportsFactory.setProject(project);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);\n\n        javaClassFinder.initialize();\n\n        javaLazyAnalyzerPostConstruct.postCreate();\n\n    }","id":59835,"modified_method":"public InjectorForTopDownAnalyzerForJvm(\n        @NotNull Project project,\n        @NotNull GlobalContext globalContext,\n        @NotNull BindingTrace bindingTrace,\n        @NotNull ModuleDescriptorImpl module,\n        @NotNull DeclarationProviderFactory declarationProviderFactory,\n        @NotNull GlobalSearchScope moduleContentScope\n    ) {\n        this.project = project;\n        this.globalContext = globalContext;\n        this.storageManager = globalContext.getStorageManager();\n        this.bindingTrace = bindingTrace;\n        this.module = module;\n        this.platformToKotlinClassMap = module.getPlatformToKotlinClassMap();\n        this.declarationProviderFactory = declarationProviderFactory;\n        this.resolveSession = new ResolveSession(project, globalContext, module, declarationProviderFactory, bindingTrace);\n        this.moduleContentScope = moduleContentScope;\n        this.lazyTopDownAnalyzer = new LazyTopDownAnalyzer();\n        this.javaClassFinder = new JavaClassFinderImpl();\n        this.virtualFileFinder = org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinderFactory.SERVICE.getInstance(project).create(moduleContentScope);\n        this.traceBasedErrorReporter = new TraceBasedErrorReporter();\n        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver(traceBasedErrorReporter);\n        this.psiBasedExternalAnnotationResolver = new PsiBasedExternalAnnotationResolver();\n        this.traceBasedExternalSignatureResolver = new TraceBasedExternalSignatureResolver();\n        this.psiBasedMethodSignatureChecker = new PsiBasedMethodSignatureChecker();\n        this.lazyResolveBasedCache = new LazyResolveBasedCache();\n        this.javaPropertyInitializerEvaluator = new JavaPropertyInitializerEvaluatorImpl();\n        this.samConversionResolver = SamConversionResolverImpl.INSTANCE$;\n        this.javaSourceElementFactory = new JavaSourceElementFactoryImpl();\n        this.singleModuleClassResolver = new SingleModuleClassResolver();\n        this.globalJavaResolverContext = new GlobalJavaResolverContext(storageManager, javaClassFinder, virtualFileFinder, deserializedDescriptorResolver, psiBasedExternalAnnotationResolver, traceBasedExternalSignatureResolver, traceBasedErrorReporter, psiBasedMethodSignatureChecker, lazyResolveBasedCache, javaPropertyInitializerEvaluator, samConversionResolver, javaSourceElementFactory, singleModuleClassResolver);\n        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, module);\n        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, module);\n        this.javaClassDataFinder = new JavaClassDataFinder(virtualFileFinder, deserializedDescriptorResolver);\n        this.binaryClassAnnotationAndConstantLoader = new BinaryClassAnnotationAndConstantLoaderImpl(module, storageManager, virtualFileFinder, traceBasedErrorReporter);\n        this.deserializationComponentsForJava = new DeserializationComponentsForJava(storageManager, module, javaClassDataFinder, binaryClassAnnotationAndConstantLoader, lazyJavaPackageFragmentProvider);\n        this.mutablePackageFragmentProvider = new MutablePackageFragmentProvider(module);\n        this.javaLazyAnalyzerPostConstruct = new JavaLazyAnalyzerPostConstruct();\n        this.javaFlexibleTypeCapabilitiesProvider = new JavaFlexibleTypeCapabilitiesProvider();\n        this.additionalCheckerProvider = org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;\n        this.annotationResolver = new AnnotationResolver();\n        this.callResolver = new CallResolver();\n        this.argumentTypeResolver = new ArgumentTypeResolver();\n        this.expressionTypingComponents = new ExpressionTypingComponents();\n        this.expressionTypingServices = new ExpressionTypingServices(expressionTypingComponents);\n        this.controlStructureTypingUtils = new ControlStructureTypingUtils(expressionTypingServices);\n        this.expressionTypingUtils = new ExpressionTypingUtils(expressionTypingServices, callResolver);\n        this.forLoopConventionsChecker = new ForLoopConventionsChecker();\n        this.reflectionTypes = new ReflectionTypes(module);\n        this.callExpressionResolver = new CallExpressionResolver();\n        this.descriptorResolver = new DescriptorResolver();\n        this.delegatedPropertyResolver = new DelegatedPropertyResolver();\n        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();\n        this.lazinessToken = new LazinessToken();\n        this.typeResolver = new TypeResolver(annotationResolver, qualifiedExpressionResolver, module, javaFlexibleTypeCapabilitiesProvider, storageManager, lazinessToken);\n        this.callResolverExtensionProvider = new CallResolverExtensionProvider();\n        this.partialBodyResolveProvider = new PartialBodyResolveProvider();\n        this.candidateResolver = new CandidateResolver();\n        this.callCompleter = new CallCompleter(argumentTypeResolver, candidateResolver);\n        this.taskPrioritizer = new TaskPrioritizer(storageManager);\n        this.jetImportsFactory = new JetImportsFactory();\n        this.scopeProvider = new ScopeProvider(getResolveSession());\n        this.scriptBodyResolver = new ScriptBodyResolver();\n        this.bodyResolver = new BodyResolver();\n        this.controlFlowAnalyzer = new ControlFlowAnalyzer();\n        this.declarationsChecker = new DeclarationsChecker();\n        this.modifiersChecker = new ModifiersChecker(bindingTrace, additionalCheckerProvider);\n        this.functionAnalyzerExtension = new FunctionAnalyzerExtension();\n        this.declarationResolver = new DeclarationResolver();\n        this.importsResolver = new ImportsResolver();\n        this.overloadResolver = new OverloadResolver();\n        this.overrideResolver = new OverrideResolver();\n        this.topDownAnalyzer = new TopDownAnalyzer();\n        this.typeHierarchyResolver = new TypeHierarchyResolver();\n        this.scriptHeaderResolver = new ScriptHeaderResolver();\n\n        this.resolveSession.setAnnotationResolve(annotationResolver);\n        this.resolveSession.setDescriptorResolver(descriptorResolver);\n        this.resolveSession.setJetImportFactory(jetImportsFactory);\n        this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        this.resolveSession.setScopeProvider(scopeProvider);\n        this.resolveSession.setScriptBodyResolver(scriptBodyResolver);\n        this.resolveSession.setTypeResolver(typeResolver);\n\n        this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);\n        this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);\n        this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);\n        this.lazyTopDownAnalyzer.setModuleDescriptor(module);\n        this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);\n        this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);\n        this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);\n        this.lazyTopDownAnalyzer.setTrace(bindingTrace);\n\n        javaClassFinder.setComponentPostConstruct(javaLazyAnalyzerPostConstruct);\n        javaClassFinder.setProject(project);\n        javaClassFinder.setScope(moduleContentScope);\n\n        traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        traceBasedExternalSignatureResolver.setProject(project);\n        traceBasedExternalSignatureResolver.setTrace(bindingTrace);\n\n        lazyResolveBasedCache.setSession(resolveSession);\n\n        traceBasedErrorReporter.setTrace(bindingTrace);\n\n        psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);\n        psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);\n\n        singleModuleClassResolver.setResolver(javaDescriptorResolver);\n\n        javaLazyAnalyzerPostConstruct.setCodeAnalyzer(resolveSession);\n        javaLazyAnalyzerPostConstruct.setProject(project);\n        javaLazyAnalyzerPostConstruct.setTrace(bindingTrace);\n\n        annotationResolver.setCallResolver(callResolver);\n        annotationResolver.setStorageManager(storageManager);\n        annotationResolver.setTypeResolver(typeResolver);\n\n        callResolver.setArgumentTypeResolver(argumentTypeResolver);\n        callResolver.setCallCompleter(callCompleter);\n        callResolver.setCandidateResolver(candidateResolver);\n        callResolver.setExpressionTypingServices(expressionTypingServices);\n        callResolver.setTaskPrioritizer(taskPrioritizer);\n        callResolver.setTypeResolver(typeResolver);\n\n        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);\n        argumentTypeResolver.setTypeResolver(typeResolver);\n\n        expressionTypingServices.setAnnotationResolver(annotationResolver);\n        expressionTypingServices.setCallExpressionResolver(callExpressionResolver);\n        expressionTypingServices.setCallResolver(callResolver);\n        expressionTypingServices.setDescriptorResolver(descriptorResolver);\n        expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);\n        expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);\n        expressionTypingServices.setProject(project);\n        expressionTypingServices.setTypeResolver(typeResolver);\n\n        expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);\n        expressionTypingComponents.setCallResolver(callResolver);\n        expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);\n        expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);\n        expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);\n        expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);\n        expressionTypingComponents.setGlobalContext(globalContext);\n        expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);\n        expressionTypingComponents.setReflectionTypes(reflectionTypes);\n\n        forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);\n        forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);\n        forLoopConventionsChecker.setProject(project);\n\n        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);\n\n        descriptorResolver.setAnnotationResolver(annotationResolver);\n        descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        descriptorResolver.setExpressionTypingServices(expressionTypingServices);\n        descriptorResolver.setStorageManager(storageManager);\n        descriptorResolver.setTypeResolver(typeResolver);\n\n        delegatedPropertyResolver.setCallResolver(callResolver);\n        delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);\n\n        jetImportsFactory.setProject(project);\n\n        scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);\n\n        bodyResolver.setAnnotationResolver(annotationResolver);\n        bodyResolver.setCallResolver(callResolver);\n        bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);\n        bodyResolver.setDeclarationsChecker(declarationsChecker);\n        bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);\n        bodyResolver.setExpressionTypingServices(expressionTypingServices);\n        bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);\n        bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);\n        bodyResolver.setTrace(bindingTrace);\n\n        controlFlowAnalyzer.setTrace(bindingTrace);\n\n        declarationsChecker.setDescriptorResolver(descriptorResolver);\n        declarationsChecker.setModifiersChecker(modifiersChecker);\n        declarationsChecker.setTrace(bindingTrace);\n\n        functionAnalyzerExtension.setTrace(bindingTrace);\n\n        declarationResolver.setAnnotationResolver(annotationResolver);\n        declarationResolver.setDescriptorResolver(descriptorResolver);\n        declarationResolver.setImportsResolver(importsResolver);\n        declarationResolver.setTrace(bindingTrace);\n\n        importsResolver.setImportsFactory(jetImportsFactory);\n        importsResolver.setModuleDescriptor(module);\n        importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);\n        importsResolver.setTrace(bindingTrace);\n\n        overloadResolver.setTrace(bindingTrace);\n\n        overrideResolver.setTrace(bindingTrace);\n\n        topDownAnalyzer.setBodyResolver(bodyResolver);\n        topDownAnalyzer.setDeclarationResolver(declarationResolver);\n        topDownAnalyzer.setModuleDescriptor(module);\n        topDownAnalyzer.setOverloadResolver(overloadResolver);\n        topDownAnalyzer.setOverrideResolver(overrideResolver);\n        topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);\n\n        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);\n        typeHierarchyResolver.setImportsResolver(importsResolver);\n        typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);\n        typeHierarchyResolver.setTrace(bindingTrace);\n\n        scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);\n        scriptHeaderResolver.setTrace(bindingTrace);\n\n        deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);\n\n        javaClassFinder.initialize();\n\n        javaLazyAnalyzerPostConstruct.postCreate();\n\n    }","commit_id":"434274019524d7e6a1a5a5da173c52506f2bcfe1","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public ReplInterpreter(@NotNull Disposable disposable, @NotNull CompilerConfiguration configuration) {\n        JetCoreEnvironment environment = JetCoreEnvironment.createForProduction(disposable, configuration);\n        Project project = environment.getProject();\n        this.psiFileFactory = (PsiFileFactoryImpl) PsiFileFactory.getInstance(project);\n        this.trace = new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();\n        this.module = TopDownAnalyzerFacadeForJVM.createJavaModule(\"<repl>\");\n\n        GlobalContextImpl context = ContextPackage.GlobalContext();\n\n        TopDownAnalysisParameters topDownAnalysisParameters = TopDownAnalysisParameters.create(\n                context.getStorageManager(),\n                context.getExceptionTracker(),\n                Predicates.<PsiFile>alwaysTrue(),\n                false,\n                true\n        );\n\n        scriptDeclarationFactory = new ScriptMutableDeclarationProviderFactory();\n\n        InjectorForTopDownAnalyzerForJvm injector = new InjectorForTopDownAnalyzerForJvm(\n                project,\n                context,\n                trace,\n                module,\n                ProjectScope.getAllScope(project),\n                scriptDeclarationFactory\n                );\n\n        this.topDownAnalysisContext = new TopDownAnalysisContext(topDownAnalysisParameters);\n        this.topDownAnalyzer = injector.getLazyTopDownAnalyzer();\n\n        this.topDownAnalyzer.getCodeAnalyzer().getScopeProvider().setAdditionalFileScopesProvider(new Function1<JetFile, JetScope>() {\n            @Override\n            public JetScope invoke(JetFile file) {\n                return lastLineScope;\n            }\n        });\n\n        module.initialize(new CompositePackageFragmentProvider(\n                Arrays.asList(\n                        injector.getResolveSession().getPackageFragmentProvider(),\n                        injector.getJavaDescriptorResolver().getPackageFragmentProvider()\n                )\n        ));\n        module.addDependencyOnModule(module);\n        module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());\n        module.seal();\n\n        List<URL> classpath = Lists.newArrayList();\n        for (File file : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {\n            try {\n                classpath.add(file.toURI().toURL());\n            }\n            catch (MalformedURLException e) {\n                throw UtilsPackage.rethrow(e);\n            }\n        }\n\n        this.classLoader = new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()])));\n    }","id":59836,"modified_method":"public ReplInterpreter(@NotNull Disposable disposable, @NotNull CompilerConfiguration configuration) {\n        JetCoreEnvironment environment = JetCoreEnvironment.createForProduction(disposable, configuration);\n        Project project = environment.getProject();\n        this.psiFileFactory = (PsiFileFactoryImpl) PsiFileFactory.getInstance(project);\n        this.trace = new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();\n        this.module = TopDownAnalyzerFacadeForJVM.createJavaModule(\"<repl>\");\n\n        GlobalContextImpl context = ContextPackage.GlobalContext();\n\n        TopDownAnalysisParameters topDownAnalysisParameters = TopDownAnalysisParameters.create(\n                context.getStorageManager(),\n                context.getExceptionTracker(),\n                Predicates.<PsiFile>alwaysTrue(),\n                false,\n                true\n        );\n\n        scriptDeclarationFactory = new ScriptMutableDeclarationProviderFactory();\n\n        InjectorForTopDownAnalyzerForJvm injector = new InjectorForTopDownAnalyzerForJvm(\n                project,\n                context,\n                trace,\n                module,\n                scriptDeclarationFactory,\n                ProjectScope.getAllScope(project)\n        );\n\n        this.topDownAnalysisContext = new TopDownAnalysisContext(topDownAnalysisParameters);\n        this.topDownAnalyzer = injector.getLazyTopDownAnalyzer();\n\n        this.topDownAnalyzer.getCodeAnalyzer().getScopeProvider().setAdditionalFileScopesProvider(new Function1<JetFile, JetScope>() {\n            @Override\n            public JetScope invoke(JetFile file) {\n                return lastLineScope;\n            }\n        });\n\n        module.initialize(new CompositePackageFragmentProvider(\n                Arrays.asList(\n                        injector.getResolveSession().getPackageFragmentProvider(),\n                        injector.getJavaDescriptorResolver().getPackageFragmentProvider()\n                )\n        ));\n        module.addDependencyOnModule(module);\n        module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());\n        module.seal();\n\n        List<URL> classpath = Lists.newArrayList();\n        for (File file : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {\n            try {\n                classpath.add(file.toURI().toURL());\n            }\n            catch (MalformedURLException e) {\n                throw UtilsPackage.rethrow(e);\n            }\n        }\n\n        this.classLoader = new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()])));\n    }","commit_id":"434274019524d7e6a1a5a5da173c52506f2bcfe1","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    Properties options = StringUtils.argsToProperties(args, argOptionDefs);\n    if(!options.containsKey(\"\") || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    boolean retainNER = PropertiesUtils.getBool(options, \"ner\", false);\n\n    final File treeFile = new File(options.getProperty(\"\"));\n    TwoDimensionalCounter<String,String> labelTerm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> termLabel =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> labelPreterm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> pretermLabel =\n      new TwoDimensionalCounter<String,String>();\n\n    TwoDimensionalCounter<String,String> unigramTagger =\n      new TwoDimensionalCounter<String,String>();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      for(Tree t; (t = tr.readTree()) != null;) {\n        countMWEStatistics(t, unigramTagger,\n                           labelPreterm, pretermLabel, labelTerm, termLabel);\n      }\n      tr.close(); //Closes the underlying reader\n\n      System.out.println(\"Resolving DUMMY tags\");\n      resolveDummyTags(treeFile, pretermLabel, unigramTagger, retainNER);\n\n      System.out.println(\"#Unknown Word Types: \" + ManualUWModel.nUnknownWordTypes);\n      System.out.println(\"#Missing POS: \" + nMissingPOS);\n      System.out.println(\"#Missing Phrasal: \" + nMissingPhrasal);\n\n      System.out.println(\"Done!\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59837,"modified_method":"/**\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    Properties options = StringUtils.argsToProperties(args, argOptionDefs);\n    if(!options.containsKey(\"\") || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    boolean retainNER = PropertiesUtils.getBool(options, \"ner\", false);\n    boolean normalize = PropertiesUtils.getBool(options, \"normalize\", true);\n\n    final File treeFile = new File(options.getProperty(\"\"));\n    TwoDimensionalCounter<String,String> labelTerm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> termLabel =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> labelPreterm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> pretermLabel =\n      new TwoDimensionalCounter<String,String>();\n\n    TwoDimensionalCounter<String,String> unigramTagger =\n      new TwoDimensionalCounter<String,String>();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      for(Tree t; (t = tr.readTree()) != null;) {\n        countMWEStatistics(t, unigramTagger,\n                           labelPreterm, pretermLabel, labelTerm, termLabel);\n      }\n      tr.close(); //Closes the underlying reader\n\n      System.out.println(\"Resolving DUMMY tags\");\n      resolveDummyTags(treeFile, pretermLabel, unigramTagger, retainNER,\n                       normalize ? new SpanishTreeNormalizer(true, false, false) : null);\n\n      System.out.println(\"#Unknown Word Types: \" + ManualUWModel.nUnknownWordTypes);\n      System.out.println(String.format(\"#Missing POS: %d (fixed: %d, %.2f%%)\",\n                                       nMissingPOS, nFixedPOS,\n                                       (double) nFixedPOS / nMissingPOS * 100));\n      System.out.println(String.format(\"#Missing Phrasal: %d (fixed: %d, %.2f%%)\",\n                                       nMissingPhrasal, nFixedPhrasal,\n                                       (double) nFixedPhrasal / nMissingPhrasal * 100));\n\n      System.out.println(\"Done!\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static String getTag(String word) {\n      // Exact matches\n      if (word.equals(\"%\"))\n        return \"ft\";\n      else if (word.equals(\"+\"))\n        return \"fz\";\n      else if (word.equals(\"&\") || word.equals(\"@\"))\n        return \"f0\";\n\n      if(digit.matcher(word).find())\n        return \"z0\";\n      else if(commonNouns.contains(word))\n        return \"ncms000\";\n      else if(commonPluralNouns.contains(word))\n        return \"ncmp000\";\n      else if(adjectives.contains(word))\n        return \"aq0000\";\n      else if(preps.contains(word))\n        return \"sp000\";\n\n      // Fallbacks\n      if (participle.matcher(word).find())\n        return \"aq0000\";\n\n      System.err.println(\"No POS tag for \" + word);\n\n      return Character.isUpperCase(word.codePointAt(0))\n        ? \"np00000\" : \"ncms000\";\n    }","id":59838,"modified_method":"public static String getTag(String word, String containingPhrase) {\n      // Exact matches\n      if (word.equals(\"%\"))\n        return \"ft\";\n      else if (word.equals(\"+\"))\n        return \"fz\";\n      else if (word.equals(\"&\") || word.equals(\"@\"))\n        return \"f0\";\n\n      if(digit.matcher(word).find())\n        return \"z0\";\n      else if (posMap.containsKey(word))\n        return posMap.get(word);\n\n      // Fallbacks\n      if (participle.matcher(word).find())\n        return \"aq0000\";\n\n      // One last hint: is the phrase one which we have designated to\n      // contain mostly common nouns?\n      if (commonPattern.matcher(word).matches())\n        return \"ncms000\";\n\n      // Now make an educated guess.\n      System.err.println(\"No POS tag for \" + word);\n      return \"np00000\";\n    }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void traverseAndFix(Tree t,\n                                    TwoDimensionalCounter<String, String> pretermLabel,\n                                    TwoDimensionalCounter<String, String> unigramTagger,\n                                    boolean retainNER) {\n    if(t.isPreTerminal()) {\n      if(t.value().equals(SpanishTreeNormalizer.MW_TAG)) {\n        nMissingPOS++;\n        String word = t.firstChild().value();\n        String tag = (unigramTagger.firstKeySet().contains(word)) ?\n          Counters.argmax(unigramTagger.getCounter(word)) : ManualUWModel.getTag(word);\n        t.setValue(tag);\n      }\n\n      return;\n    }\n\n    for(Tree kid : t.children())\n      traverseAndFix(kid, pretermLabel, unigramTagger, retainNER);\n\n    // Post-order visit\n    if(t.value().startsWith(SpanishTreeNormalizer.MW_PHRASE_TAG)) {\n      nMissingPhrasal++;\n\n      String phrasalCat = inferPhrasalCategory(t, pretermLabel, retainNER);\n      if (phrasalCat != null)\n        t.setValue(phrasalCat);\n    }\n  }","id":59839,"modified_method":"public static void traverseAndFix(Tree t,\n                                    Tree parent,\n                                    TwoDimensionalCounter<String, String> pretermLabel,\n                                    TwoDimensionalCounter<String, String> unigramTagger,\n                                    boolean retainNER) {\n    if(t.isPreTerminal()) {\n      if(t.value().equals(SpanishTreeNormalizer.MW_TAG)) {\n        nMissingPOS++;\n\n        String pos = inferPOS(t, parent, unigramTagger);\n        if (pos != null) {\n          t.setValue(pos);\n          nFixedPOS++;\n        }\n      }\n\n      return;\n    }\n\n    for(Tree kid : t.children())\n      traverseAndFix(kid, t, pretermLabel, unigramTagger, retainNER);\n\n    // Post-order visit\n    //\n    // TODO merge unnecessarily deep trees (maybe the job for a separate\n    // tree normalizer?)\n    if(t.value().startsWith(SpanishTreeNormalizer.MW_PHRASE_TAG)) {\n      nMissingPhrasal++;\n\n      String phrasalCat = inferPhrasalCategory(t, pretermLabel, retainNER);\n      if (phrasalCat != null) {\n        t.setValue(phrasalCat);\n        nFixedPhrasal++;\n      }\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    sb.append(String.format(\"Usage: java %s [OPTIONS] treebank-file%n\",\n                            MultiWordPreprocessor.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -ner: Retain NER information in tree constituents\").append(nl);\n    return sb.toString();\n  }","id":59840,"modified_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    sb.append(String.format(\"Usage: java %s [OPTIONS] treebank-file%n\",\n                            MultiWordPreprocessor.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -ner: Retain NER information in tree constituents (pre-pre-terminal nodes)\").append(nl);\n    sb.append(\"   -normalize {true, false}: Run the Spanish tree normalizer (non-aggressive) on the output of the main routine (true by default)\").append(nl);\n    return sb.toString();\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static void resolveDummyTags(File treeFile,\n                                       TwoDimensionalCounter<String, String> pretermLabel,\n                                       TwoDimensionalCounter<String, String> unigramTagger,\n                                       boolean retainNER) {\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      PrintWriter pw = new PrintWriter(new PrintStream(new FileOutputStream(new File(treeFile + \".fixed\")),false,\"UTF-8\"));\n\n      int nTrees = 0;\n      for(Tree t; (t = tr.readTree()) != null;nTrees++) {\n        traverseAndFix(t, pretermLabel, unigramTagger, retainNER);\n        pw.println(t.toString());\n      }\n      pw.close();\n      tr.close();\n\n      System.out.println(\"Processed \" +nTrees+ \" trees\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59841,"modified_method":"private static void resolveDummyTags(File treeFile,\n                                       TwoDimensionalCounter<String, String> pretermLabel,\n                                       TwoDimensionalCounter<String, String> unigramTagger,\n                                       boolean retainNER, TreeNormalizer tn) {\n    TreeFactory tf = new LabeledScoredTreeFactory();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      PrintWriter pw = new PrintWriter(new PrintStream(new FileOutputStream(new File(treeFile + \".fixed\")),false,\"UTF-8\"));\n\n      int nTrees = 0;\n      for(Tree t; (t = tr.readTree()) != null;nTrees++) {\n        traverseAndFix(t, null, pretermLabel, unigramTagger, retainNER);\n\n        if (tn != null)\n          t = tn.normalizeWholeTree(t, tf);\n\n        pw.println(t.toString());\n      }\n\n      pw.close();\n      tr.close();\n\n      System.out.println(\"Processed \" +nTrees+ \" trees\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Attempt to infer the phrasal category of the given node, which\n   * heads words which were expanded from a multi-word token.\n   */\n  private static String inferPhrasalCategory(Tree t,\n                                             TwoDimensionalCounter<String, String> pretermLabel,\n                                             boolean retainNER) {\n    String phraseValue = t.value();\n\n    // Retrieve the part-of-speech assigned to the original multi-word\n    // token\n    String originalPos = phraseValue.substring(phraseValue.lastIndexOf('_') + 1);\n    // TODO account for CLI flag\n    if (originalPos.length() > 0 && originalPos.charAt(0) == 'n') {\n      // TODO may lead to some funky trees if a child somehow gets an\n      // incorrect tag -- e.g. we may have a `grup.nom` head a `vmis000`\n\n      if (!retainNER)\n        return \"grup.nom\";\n\n      char nerTag = phraseValue.charAt(phraseValue.length() - 1);\n      switch (nerTag) {\n      case 'l':\n        return \"grup.nom.lug\";\n      case 'o':\n        return \"grup.nom.org\";\n      case 'p':\n        return \"grup.nom.pers\";\n      case '0':\n        return \"grup.nom.otros\";\n      default:\n        return \"grup.nom\";\n      }\n    }\n\n    // Fallback: try to infer based on part-of-speech sequence formed by\n    // constituents\n    StringBuilder sb = new StringBuilder();\n    for(Tree kid : t.children())\n      sb.append(kid.value()).append(\" \");\n\n    String posSequence = sb.toString().trim();\n    if(pretermLabel.firstKeySet().contains(posSequence))\n      return Counters.argmax(pretermLabel.getCounter(posSequence));\n    else\n      System.err.println(\"No phrasal cat for: \" + posSequence);\n\n    // Give up.\n    return null;\n  }","id":59842,"modified_method":"/**\n   * Attempt to infer the phrasal category of the given node, which\n   * heads words which were expanded from a multi-word token.\n   */\n  private static String inferPhrasalCategory(Tree t,\n                                             TwoDimensionalCounter<String, String> pretermLabel,\n                                             boolean retainNER) {\n    String phraseValue = t.value();\n\n    // Retrieve the part-of-speech assigned to the original multi-word\n    // token\n    String originalPos = phraseValue.substring(phraseValue.lastIndexOf('_') + 1);\n\n    if (phrasalCategoryMap.containsKey(originalPos)) {\n      return phrasalCategoryMap.get(originalPos);\n    } else if (originalPos.length() > 0 && originalPos.charAt(0) == 'n') {\n      // TODO may lead to some funky trees if a child somehow gets an\n      // incorrect tag -- e.g. we may have a `grup.nom` head a `vmis000`\n\n      if (!retainNER)\n        return \"grup.nom\";\n\n      char nerTag = phraseValue.charAt(phraseValue.length() - 1);\n      switch (nerTag) {\n      case 'l':\n        return \"grup.nom.lug\";\n      case 'o':\n        return \"grup.nom.org\";\n      case 'p':\n        return \"grup.nom.pers\";\n      case '0':\n        return \"grup.nom.otros\";\n      default:\n        return \"grup.nom\";\n      }\n    }\n\n    // Fallback: try to infer based on part-of-speech sequence formed by\n    // constituents\n    StringBuilder sb = new StringBuilder();\n    for(Tree kid : t.children())\n      sb.append(kid.value()).append(\" \");\n\n    String posSequence = sb.toString().trim();\n    if(pretermLabel.firstKeySet().contains(posSequence))\n      return Counters.argmax(pretermLabel.getCounter(posSequence));\n    else\n      System.err.println(\"No phrasal cat for: \" + posSequence);\n\n    // Give up.\n    return null;\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n  public Tree normalizeWholeTree(Tree tree, TreeFactory tf) {\n    // Counter for part-of-speech statistics\n    TwoDimensionalCounter<String, String> unigramTagger =\n      new TwoDimensionalCounter<String, String>();\n\n    for (Tree t : tree) {\n      if (simplifiedTagset && t.isPreTerminal()) {\n        // This is a part of speech tag. Remove extra morphological\n        // information.\n        CoreLabel label = (CoreLabel) t.label();\n        String pos = label.value();\n\n        pos = simplifyPOSTag(pos).intern();\n        label.setValue(pos);\n        label.setTag(pos);\n      } else if (aggressiveNormalization && isMultiWordCandidate(t)) {\n        // Expand multi-word token if necessary\n        normalizeForMultiWord(t, tf);\n      }\n    }\n\n    return tree;\n  }","id":59843,"modified_method":"@Override\n  public Tree normalizeWholeTree(Tree tree, TreeFactory tf) {\n    // First filter out nodes we don't like\n    tree = tree.prune(emptyFilter);\n\n    // Counter for part-of-speech statistics\n    TwoDimensionalCounter<String, String> unigramTagger =\n      new TwoDimensionalCounter<String, String>();\n\n    for (Tree t : tree) {\n      if (simplifiedTagset && t.isPreTerminal()) {\n        // This is a part of speech tag. Remove extra morphological\n        // information.\n        CoreLabel label = (CoreLabel) t.label();\n        String pos = label.value();\n\n        pos = simplifyPOSTag(pos).intern();\n        label.setValue(pos);\n        label.setTag(pos);\n      } else if (aggressiveNormalization && isMultiWordCandidate(t)) {\n        // Expand multi-word token if necessary\n        normalizeForMultiWord(t, tf);\n      }\n    }\n\n    // Now attack elisions: 'al' and 'del'\n    expandElisions(tree, tf);\n\n    return tree;\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Return a \"simplified\" version of an original AnCora part-of-speech\n   * tag, with much morphological annotation information removed.\n   */\n  private String simplifyPOSTag(String pos) {\n    if (pos.length() == 0)\n      return pos;\n\n    switch (pos.charAt(0)) {\n    case 'd':\n      // determinant (d)\n      //   retain category, type\n      //   drop person, gender, number, possessor\n      return pos.substring(0, 2) + \"0000\";\n    case 's':\n      // preposition (s)\n      //   retain category, type\n      //   drop form, gender, number\n      return pos.substring(0, 2) + \"000\";\n    case 'p':\n      // pronoun (p)\n      //   retain category, type\n      //   drop person, gender, number, case, possessor, politeness\n      return pos.substring(0, 2) + \"000000\";\n    case 'a':\n      // adjective\n      //   retain category, type, grade\n      //   drop gender, number, function\n      return pos.substring(0, 3) + \"000\";\n    case 'n':\n      // noun\n      //   retain category, type, number, NER label\n      //   drop type, gender, classification\n\n      // Some tags are randomly missing the NER label..\n      char ner = pos.length() == 7 ? pos.charAt(6) : '0';\n      return pos.substring(0, 2) + '0' + pos.charAt(3) + \"00\" + ner;\n    case 'v':\n      // verb\n      //   retain category, type, mood, tense\n      //   drop person, number, gender\n      return pos.substring(0, 4) + \"000\";\n    default:\n      // adverb\n      //   retain all\n      // punctuation\n      //   retain all\n      // numerals\n      //   retain all\n      // date and time\n      //   retain all\n      // conjunction\n      //   retain all\n      return pos;\n    }\n  }","id":59844,"modified_method":"/**\n   * Return a \"simplified\" version of an original AnCora part-of-speech\n   * tag, with much morphological annotation information removed.\n   */\n  private String simplifyPOSTag(String pos) {\n    if (pos.length() == 0)\n      return pos;\n\n    switch (pos.charAt(0)) {\n    case 'd':\n      // determinant (d)\n      //   retain category, type\n      //   drop person, gender, number, possessor\n      return pos.substring(0, 2) + \"0000\";\n    case 's':\n      // preposition (s)\n      //   retain category, type\n      //   drop form, gender, number\n      return pos.substring(0, 2) + \"000\";\n    case 'p':\n      // pronoun (p)\n      //   retain category, type\n      //   drop person, gender, number, case, possessor, politeness\n      return pos.substring(0, 2) + \"000000\";\n    case 'a':\n      // adjective\n      //   retain category, type, grade\n      //   drop gender, number, function\n      return pos.substring(0, 3) + \"000\";\n    case 'n':\n      // noun\n      //   retain category, type, number, NER label\n      //   drop type, gender, classification\n\n      char ner = retainNER && pos.length() == 7 ? pos.charAt(6) : '0';\n      return pos.substring(0, 2) + '0' + pos.charAt(3) + \"00\" + ner;\n    case 'v':\n      // verb\n      //   retain category, type, mood, tense\n      //   drop person, number, gender\n      return pos.substring(0, 4) + \"000\";\n    default:\n      // adverb\n      //   retain all\n      // punctuation\n      //   retain all\n      // numerals\n      //   retain all\n      // date and time\n      //   retain all\n      // conjunction\n      //   retain all\n      return pos;\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new pre-terminal nodes for\n      // each of its constituent words\n      List<Tree> newPreterminals = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = words[j];\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newPreterminal = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newPreterminal.label() instanceof HasTag)\n          ((HasTag) newPreterminal.label()).setTag(MW_TAG);\n\n        newPreterminals.add(newPreterminal);\n      }\n\n      // Now create a dummy phrase containing the new preterminals.\n      // Maintain the value of the old preterminal in its label value.\n      String phraseType = MW_PHRASE_TAG + \"_\" + preterminals[i].value();\n      Tree newPrePreTerminal = tf.newTreeNode(phraseType, newPreterminals);\n      t.setChild(i, newPrePreTerminal);\n    }\n  }","id":59845,"modified_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new nodes for each of its\n      // constituent words\n      List<Tree> newNodes = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = words[j];\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newNode = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newNode.label() instanceof HasTag)\n          ((HasTag) newNode.label()).setTag(MW_TAG);\n\n        newNodes.add(newNode);\n      }\n\n      // Value of the phrase which should head these preterminals. Mark\n      // that this was created from a multiword token, and also retain\n      // the original parts of speech.\n      String phraseValue = MW_PHRASE_TAG + \"_\"\n        + simplifyPOSTag(preterminals[i].value());\n\n      // Should we insert these new nodes as children of the parent `t`\n      // (i.e., \"merge\" the multi-word token phrase into its parent), or\n      // head them with a new node and set that as a child of the\n      // parent?\n      boolean shouldMerge = preterminals.length == 1\n        && mergeWithConstituentWhenPossible.contains(t.value());\n\n      if (shouldMerge) {\n        t.setChildren(newNodes);\n        t.setValue(phraseValue);\n      } else {\n        Tree newHead = tf.newTreeNode(phraseValue, newNodes);\n        t.setChild(i, newHead);\n      }\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public SpanishTreeNormalizer(boolean simplifiedTagset,\n                               boolean aggressiveNormalization) {\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n  }","id":59846,"modified_method":"public SpanishTreeNormalizer(boolean simplifiedTagset,\n                               boolean aggressiveNormalization,\n                               boolean retainNER) {\n    if (retainNER && !simplifiedTagset)\n      throw new IllegalArgumentException(\"retainNER argument only valid when \" +\n                                         \"simplified tagset is used\");\n\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n    this.retainNER = retainNER;\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Return the (single or multiple) words which make up the given\n   * token.\n   */\n  private String[] getMultiWords(String token) {\n    Matcher quoteMatcher = pQuoted.matcher(token);\n    if (quoteMatcher.matches()) {\n      String[] ret = new String[3];\n      ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(1);\n      ret[2] = \"\\\"\";\n\n      return ret;\n    }\n\n    return token.split(\"_\");\n  }","id":59847,"modified_method":"/**\n   * Return the (single or multiple) words which make up the given\n   * token.\n   */\n  private String[] getMultiWords(String token) {\n    Matcher quoteMatcher = pQuoted.matcher(token);\n    if (quoteMatcher.matches()) {\n      String[] ret = new String[3];\n      ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(1);\n      ret[2] = \"\\\"\";\n\n      return ret;\n    }\n\n    // Confusing: we are using a tokenizer to split a token into its\n    // constituent words\n    StringTokenizer splitter = new StringTokenizer(token, WORD_SEPARATORS,\n                                                   true);\n    int remainingTokens = splitter.countTokens();\n\n    List<String> words = new ArrayList<String>();\n\n    while (splitter.hasMoreTokens()) {\n      String word = splitter.nextToken();\n      remainingTokens--;\n\n      if (word.length() == 1\n          && WORD_SEPARATORS_DROP.indexOf(word.charAt(0)) != -1)\n        // This is a delimiter that we should drop\n        continue;\n\n      if (remainingTokens >= 2 && hyphenBoundMorphemes.contains(word)) {\n        String hyphen = splitter.nextToken();\n        remainingTokens--;\n\n        if (!hyphen.equals(\"-\")) {\n          // Ouch. We expected a hyphen here. Clean things up and keep\n          // moving.\n          words.add(word);\n          words.add(hyphen);\n          continue;\n        }\n\n        String freeMorpheme = splitter.nextToken();\n        remainingTokens--;\n\n        words.add(word + hyphen + freeMorpheme);\n        continue;\n      }\n\n      // Otherwise..\n      words.add(word);\n    }\n\n    return words.toArray(new String[words.size()]);\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void setUp() {\n    tf = new LabeledScoredTreeFactory();\n    tn = new SpanishTreeNormalizer(true, true);\n  }","id":59848,"modified_method":"public void setUp() {\n    tf = new LabeledScoredTreeFactory();\n    tn = new SpanishTreeNormalizer(true, true, true);\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public TreeReader newTreeReader(Reader in) {\n    return new PennTreeReader(in, new LabeledScoredTreeFactory(),\n                              new SpanishTreeNormalizer(false, false),\n                              new PennTreebankTokenizer(in));\n  }","id":59849,"modified_method":"public TreeReader newTreeReader(Reader in) {\n    return new PennTreeReader(in, new LabeledScoredTreeFactory(),\n                              new SpanishTreeNormalizer(false, false, false),\n                              new PennTreebankTokenizer(in));\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Read parse trees from a Reader.\n   *\n   * @param in The <code>Reader<\/code>\n   * @param simplifiedTagset If `true`, convert part-of-speech labels to a\n   *          simplified version of the EAGLES tagset, where the tags do not\n   *          include extensive morphological analysis\n   * @param aggressiveNormalization Perform aggressive \"normalization\"\n   *          on the trees read from the provided corpus documents:\n   *          split multi-word tokens into their constituent words (and\n   *          infer parts of speech of the constituent words).\n   */\n  public SpanishXMLTreeReader(Reader in, boolean simplifiedTagset,\n                              boolean aggressiveNormalization) {\n    TreebankLanguagePack tlp = new SpanishTreebankLanguagePack();\n\n    this.simplifiedTagset = simplifiedTagset;\n\n    stream = new ReaderInputStream(in, tlp.getEncoding());\n    treeFactory = new LabeledScoredTreeFactory();\n    treeNormalizer = new SpanishTreeNormalizer(simplifiedTagset,\n                                               aggressiveNormalization);\n\n    DocumentBuilder parser = XMLUtils.getXmlParser();\n    try {\n      final Document xml = parser.parse(stream);\n      final Element root = xml.getDocumentElement();\n      sentences = root.getElementsByTagName(NODE_SENT);\n      sentIdx = 0;\n\n    } catch (SAXException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59850,"modified_method":"/**\n   * Read parse trees from a Reader.\n   *\n   * @param in The <code>Reader<\/code>\n   * @param simplifiedTagset If `true`, convert part-of-speech labels to a\n   *          simplified version of the EAGLES tagset, where the tags do not\n   *          include extensive morphological analysis\n   * @param aggressiveNormalization Perform aggressive \"normalization\"\n   *          on the trees read from the provided corpus documents:\n   *          split multi-word tokens into their constituent words (and\n   *          infer parts of speech of the constituent words).\n   */\n  public SpanishXMLTreeReader(Reader in, boolean simplifiedTagset,\n                              boolean aggressiveNormalization) {\n    TreebankLanguagePack tlp = new SpanishTreebankLanguagePack();\n\n    this.simplifiedTagset = simplifiedTagset;\n\n    stream = new ReaderInputStream(in, tlp.getEncoding());\n    treeFactory = new LabeledScoredTreeFactory();\n    treeNormalizer =\n      new SpanishTreeNormalizer(simplifiedTagset,\n                                aggressiveNormalization,\n                                true // retain NER information in\n                                     // preterminals\n                                );\n\n    DocumentBuilder parser = XMLUtils.getXmlParser();\n    try {\n      final Document xml = parser.parse(stream);\n      final Element root = xml.getDocumentElement();\n      sentences = root.getElementsByTagName(NODE_SENT);\n      sentIdx = 0;\n\n    } catch (SAXException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * For debugging.\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    final Properties options = StringUtils.argsToProperties(args, argOptionDefs());\n    if(args.length < 1 || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    Pattern posPattern = options.containsKey(\"searchPos\")\n      ? Pattern.compile(options.getProperty(\"searchPos\")) : null;\n    Pattern wordPattern = options.containsKey(\"searchWord\")\n      ? Pattern.compile(options.getProperty(\"searchWord\")) : null;\n    boolean plainPrint = PropertiesUtils.getBool(options, \"plain\", false);\n\n    String[] remainingArgs = options.getProperty(\"\").split(\" \");\n    List<File> fileList = new ArrayList<File>();\n    for(int i = 0; i < remainingArgs.length; i++)\n      fileList.add(new File(remainingArgs[i]));\n\n    TreeReaderFactory trf = new SpanishXMLTreeReaderFactory(true, true);\n    int totalTrees = 0;\n    Set<String> morphAnalyses = Generics.newHashSet();\n    try {\n      for(File file : fileList) {\n        TreeReader tr = trf.newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\")));\n\n        Tree t;\n        int numTrees;\n        String canonicalFileName = file.getName().substring(0, file.getName().lastIndexOf('.'));\n\n        for(numTrees = 0; (t = tr.readTree()) != null; numTrees++) {\n          if (!shouldPrintTree(t, posPattern, wordPattern))\n            continue;\n\n          String ftbID = ((CoreLabel) t.label()).get(CoreAnnotations.SentenceIDAnnotation.class);\n          String output = toString(t, plainPrint);\n\n          System.out.printf(\"%s-%s\\t%s%n\", canonicalFileName, ftbID, output);\n          List<Label> leaves = t.yield();\n          for(Label label : leaves) {\n            if(label instanceof CoreLabel)\n              morphAnalyses.add(((CoreLabel) label).originalText());\n          }\n        }\n\n        tr.close();\n        System.err.printf(\"%s: %d trees%n\",file.getName(),numTrees);\n        totalTrees += numTrees;\n      }\n\n//wsg2011: Print out the observed morphological analyses\n//      for(String analysis : morphAnalyses)\n//        System.err.println(analysis);\n\n      System.err.printf(\"%nRead %d trees%n\",totalTrees);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59851,"modified_method":"public static void main(String[] args) {\n    final Properties options = StringUtils.argsToProperties(args, argOptionDefs());\n    if(args.length < 1 || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    final Pattern posPattern = options.containsKey(\"searchPos\")\n      ? Pattern.compile(options.getProperty(\"searchPos\")) : null;\n    final Pattern wordPattern = options.containsKey(\"searchWord\")\n      ? Pattern.compile(options.getProperty(\"searchWord\")) : null;\n    final boolean plainPrint = PropertiesUtils.getBool(options, \"plain\", false);\n\n    String[] remainingArgs = options.getProperty(\"\").split(\" \");\n    List<File> fileList = new ArrayList<File>();\n    for(int i = 0; i < remainingArgs.length; i++)\n      fileList.add(new File(remainingArgs[i]));\n\n    final TreeReaderFactory trf = new SpanishXMLTreeReaderFactory(true, true);\n    ExecutorService pool =\n      Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n\n    for (final File file : fileList) {\n      pool.execute(new Runnable() {\n          public void run() {\n            try {\n              TreeReader tr = trf.newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\")));\n              process(file, tr, posPattern, wordPattern, plainPrint);\n              tr.close();\n            } catch (FileNotFoundException e) {\n              e.printStackTrace();\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n        });\n    }\n\n    pool.shutdown();\n    try {\n      pool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Build a parse tree node corresponding to an elliptic node in the parse XML.\n   */\n  private Tree buildEllipticNode(Node root) {\n    Element eRoot = (Element) root;\n    String constituentStr = eRoot.getNodeName();\n\n    List<Tree> kids = new ArrayList<Tree>();\n    Tree leafNode = treeFactory.newLeaf(EMPTY_LEAF);\n    if (leafNode.label() instanceof HasWord)\n      ((HasWord) leafNode.label()).setWord(EMPTY_LEAF);\n\n    kids.add(leafNode);\n    Tree t = treeFactory.newTreeNode(constituentStr, kids);\n\n    return t;\n  }","id":59852,"modified_method":"/**\n   * Build a parse tree node corresponding to an elliptic node in the parse XML.\n   */\n  private Tree buildEllipticNode(Node root) {\n    Element eRoot = (Element) root;\n    String constituentStr = eRoot.getNodeName();\n\n    List<Tree> kids = new ArrayList<Tree>();\n    Tree leafNode = treeFactory.newLeaf(SpanishTreeNormalizer.EMPTY_LEAF_VALUE);\n    if (leafNode.label() instanceof HasWord)\n      ((HasWord) leafNode.label()).setWord(SpanishTreeNormalizer.EMPTY_LEAF_VALUE);\n\n    kids.add(leafNode);\n    Tree t = treeFactory.newTreeNode(constituentStr, kids);\n\n    return t;\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private String getWord(Element node) {\n    String word = node.getAttribute(ATTR_WORD);\n    if (word.equals(\"\"))\n      return EMPTY_LEAF;\n\n    return word.trim();\n  }","id":59853,"modified_method":"private String getWord(Element node) {\n    String word = node.getAttribute(ATTR_WORD);\n    if (word.equals(\"\"))\n      return SpanishTreeNormalizer.EMPTY_LEAF_VALUE;\n\n    return word.trim();\n  }","commit_id":"55018c8abeeef94ebdd7f4b6931d4ff8e76bafa1","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    sb.append(String.format(\"Usage: java %s [OPTIONS] treebank-file%n\",\n                            MultiWordPreprocessor.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -ner: Retain NER information in tree constituents (pre-pre-terminal nodes)\").append(nl);\n    sb.append(\"   -normalize {true, false}: Run the Spanish tree normalizer (non-aggressive) on the output of the main routine (true by default)\").append(nl);\n    return sb.toString();\n  }","id":59854,"modified_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    sb.append(String.format(\"Usage: java %s [OPTIONS] treebank-file%n\",\n                            MultiWordPreprocessor.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -ner: Retain NER information in tree constituents\").append(nl);\n    return sb.toString();\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static String getTag(String word, String containingPhrase) {\n      // Exact matches\n      if (word.equals(\"%\"))\n        return \"ft\";\n      else if (word.equals(\"+\"))\n        return \"fz\";\n      else if (word.equals(\"&\") || word.equals(\"@\"))\n        return \"f0\";\n\n      if(digit.matcher(word).find())\n        return \"z0\";\n      else if (posMap.containsKey(word))\n        return posMap.get(word);\n\n      // Fallbacks\n      if (participle.matcher(word).find())\n        return \"aq0000\";\n\n      // One last hint: is the phrase one which we have designated to\n      // contain mostly common nouns?\n      if (commonPattern.matcher(word).matches())\n        return \"ncms000\";\n\n      // Now make an educated guess.\n      System.err.println(\"No POS tag for \" + word);\n      return \"np00000\";\n    }","id":59855,"modified_method":"public static String getTag(String word) {\n      // Exact matches\n      if (word.equals(\"%\"))\n        return \"ft\";\n      else if (word.equals(\"+\"))\n        return \"fz\";\n      else if (word.equals(\"&\") || word.equals(\"@\"))\n        return \"f0\";\n\n      if(digit.matcher(word).find())\n        return \"z0\";\n      else if(commonNouns.contains(word))\n        return \"ncms000\";\n      else if(commonPluralNouns.contains(word))\n        return \"ncmp000\";\n      else if(adjectives.contains(word))\n        return \"aq0000\";\n      else if(preps.contains(word))\n        return \"sp000\";\n\n      // Fallbacks\n      if (participle.matcher(word).find())\n        return \"aq0000\";\n\n      System.err.println(\"No POS tag for \" + word);\n\n      return Character.isUpperCase(word.codePointAt(0))\n        ? \"np00000\" : \"ncms000\";\n    }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void traverseAndFix(Tree t,\n                                    Tree parent,\n                                    TwoDimensionalCounter<String, String> pretermLabel,\n                                    TwoDimensionalCounter<String, String> unigramTagger,\n                                    boolean retainNER) {\n    if(t.isPreTerminal()) {\n      if(t.value().equals(SpanishTreeNormalizer.MW_TAG)) {\n        nMissingPOS++;\n\n        String pos = inferPOS(t, parent, unigramTagger);\n        if (pos != null) {\n          t.setValue(pos);\n          nFixedPOS++;\n        }\n      }\n\n      return;\n    }\n\n    for(Tree kid : t.children())\n      traverseAndFix(kid, t, pretermLabel, unigramTagger, retainNER);\n\n    // Post-order visit\n    if(t.value().startsWith(SpanishTreeNormalizer.MW_PHRASE_TAG)) {\n      nMissingPhrasal++;\n\n      String phrasalCat = inferPhrasalCategory(t, pretermLabel, retainNER);\n      if (phrasalCat != null) {\n        t.setValue(phrasalCat);\n        nFixedPhrasal++;\n      }\n    }\n  }","id":59856,"modified_method":"public static void traverseAndFix(Tree t,\n                                    TwoDimensionalCounter<String, String> pretermLabel,\n                                    TwoDimensionalCounter<String, String> unigramTagger,\n                                    boolean retainNER) {\n    if(t.isPreTerminal()) {\n      if(t.value().equals(SpanishTreeNormalizer.MW_TAG)) {\n        nMissingPOS++;\n        String word = t.firstChild().value();\n        String tag = (unigramTagger.firstKeySet().contains(word)) ?\n          Counters.argmax(unigramTagger.getCounter(word)) : ManualUWModel.getTag(word);\n        t.setValue(tag);\n      }\n\n      return;\n    }\n\n    for(Tree kid : t.children())\n      traverseAndFix(kid, pretermLabel, unigramTagger, retainNER);\n\n    // Post-order visit\n    if(t.value().startsWith(SpanishTreeNormalizer.MW_PHRASE_TAG)) {\n      nMissingPhrasal++;\n\n      String phrasalCat = inferPhrasalCategory(t, pretermLabel, retainNER);\n      if (phrasalCat != null)\n        t.setValue(phrasalCat);\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    Properties options = StringUtils.argsToProperties(args, argOptionDefs);\n    if(!options.containsKey(\"\") || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    boolean retainNER = PropertiesUtils.getBool(options, \"ner\", false);\n    boolean normalize = PropertiesUtils.getBool(options, \"normalize\", true);\n\n    final File treeFile = new File(options.getProperty(\"\"));\n    TwoDimensionalCounter<String,String> labelTerm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> termLabel =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> labelPreterm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> pretermLabel =\n      new TwoDimensionalCounter<String,String>();\n\n    TwoDimensionalCounter<String,String> unigramTagger =\n      new TwoDimensionalCounter<String,String>();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      for(Tree t; (t = tr.readTree()) != null;) {\n        countMWEStatistics(t, unigramTagger,\n                           labelPreterm, pretermLabel, labelTerm, termLabel);\n      }\n      tr.close(); //Closes the underlying reader\n\n      System.out.println(\"Resolving DUMMY tags\");\n      resolveDummyTags(treeFile, pretermLabel, unigramTagger, retainNER,\n                       normalize ? new SpanishTreeNormalizer(true, false, false) : null);\n\n      System.out.println(\"#Unknown Word Types: \" + ManualUWModel.nUnknownWordTypes);\n      System.out.println(String.format(\"#Missing POS: %d (fixed: %d, %.2f%%)\",\n                                       nMissingPOS, nFixedPOS,\n                                       (double) nFixedPOS / nMissingPOS * 100));\n      System.out.println(String.format(\"#Missing Phrasal: %d (fixed: %d, %.2f%%)\",\n                                       nMissingPhrasal, nFixedPhrasal,\n                                       (double) nFixedPhrasal / nMissingPhrasal * 100));\n\n      System.out.println(\"Done!\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59857,"modified_method":"/**\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    Properties options = StringUtils.argsToProperties(args, argOptionDefs);\n    if(!options.containsKey(\"\") || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    boolean retainNER = PropertiesUtils.getBool(options, \"ner\", false);\n\n    final File treeFile = new File(options.getProperty(\"\"));\n    TwoDimensionalCounter<String,String> labelTerm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> termLabel =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> labelPreterm =\n      new TwoDimensionalCounter<String,String>();\n    TwoDimensionalCounter<String,String> pretermLabel =\n      new TwoDimensionalCounter<String,String>();\n\n    TwoDimensionalCounter<String,String> unigramTagger =\n      new TwoDimensionalCounter<String,String>();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      for(Tree t; (t = tr.readTree()) != null;) {\n        countMWEStatistics(t, unigramTagger,\n                           labelPreterm, pretermLabel, labelTerm, termLabel);\n      }\n      tr.close(); //Closes the underlying reader\n\n      System.out.println(\"Resolving DUMMY tags\");\n      resolveDummyTags(treeFile, pretermLabel, unigramTagger, retainNER);\n\n      System.out.println(\"#Unknown Word Types: \" + ManualUWModel.nUnknownWordTypes);\n      System.out.println(\"#Missing POS: \" + nMissingPOS);\n      System.out.println(\"#Missing Phrasal: \" + nMissingPhrasal);\n\n      System.out.println(\"Done!\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Attempt to infer the phrasal category of the given node, which\n   * heads words which were expanded from a multi-word token.\n   */\n  private static String inferPhrasalCategory(Tree t,\n                                             TwoDimensionalCounter<String, String> pretermLabel,\n                                             boolean retainNER) {\n    String phraseValue = t.value();\n\n    // Retrieve the part-of-speech assigned to the original multi-word\n    // token\n    String originalPos = phraseValue.substring(phraseValue.lastIndexOf('_') + 1);\n\n    if (phrasalCategoryMap.containsKey(originalPos)) {\n      return phrasalCategoryMap.get(originalPos);\n    } else if (originalPos.length() > 0 && originalPos.charAt(0) == 'n') {\n      // TODO may lead to some funky trees if a child somehow gets an\n      // incorrect tag -- e.g. we may have a `grup.nom` head a `vmis000`\n\n      if (!retainNER)\n        return \"grup.nom\";\n\n      char nerTag = phraseValue.charAt(phraseValue.length() - 1);\n      switch (nerTag) {\n      case 'l':\n        return \"grup.nom.lug\";\n      case 'o':\n        return \"grup.nom.org\";\n      case 'p':\n        return \"grup.nom.pers\";\n      case '0':\n        return \"grup.nom.otros\";\n      default:\n        return \"grup.nom\";\n      }\n    }\n\n    // Fallback: try to infer based on part-of-speech sequence formed by\n    // constituents\n    StringBuilder sb = new StringBuilder();\n    for(Tree kid : t.children())\n      sb.append(kid.value()).append(\" \");\n\n    String posSequence = sb.toString().trim();\n    if(pretermLabel.firstKeySet().contains(posSequence))\n      return Counters.argmax(pretermLabel.getCounter(posSequence));\n    else\n      System.err.println(\"No phrasal cat for: \" + posSequence);\n\n    // Give up.\n    return null;\n  }","id":59858,"modified_method":"/**\n   * Attempt to infer the phrasal category of the given node, which\n   * heads words which were expanded from a multi-word token.\n   */\n  private static String inferPhrasalCategory(Tree t,\n                                             TwoDimensionalCounter<String, String> pretermLabel,\n                                             boolean retainNER) {\n    String phraseValue = t.value();\n\n    // Retrieve the part-of-speech assigned to the original multi-word\n    // token\n    String originalPos = phraseValue.substring(phraseValue.lastIndexOf('_') + 1);\n    // TODO account for CLI flag\n    if (originalPos.length() > 0 && originalPos.charAt(0) == 'n') {\n      // TODO may lead to some funky trees if a child somehow gets an\n      // incorrect tag -- e.g. we may have a `grup.nom` head a `vmis000`\n\n      if (!retainNER)\n        return \"grup.nom\";\n\n      char nerTag = phraseValue.charAt(phraseValue.length() - 1);\n      switch (nerTag) {\n      case 'l':\n        return \"grup.nom.lug\";\n      case 'o':\n        return \"grup.nom.org\";\n      case 'p':\n        return \"grup.nom.pers\";\n      case '0':\n        return \"grup.nom.otros\";\n      default:\n        return \"grup.nom\";\n      }\n    }\n\n    // Fallback: try to infer based on part-of-speech sequence formed by\n    // constituents\n    StringBuilder sb = new StringBuilder();\n    for(Tree kid : t.children())\n      sb.append(kid.value()).append(\" \");\n\n    String posSequence = sb.toString().trim();\n    if(pretermLabel.firstKeySet().contains(posSequence))\n      return Counters.argmax(pretermLabel.getCounter(posSequence));\n    else\n      System.err.println(\"No phrasal cat for: \" + posSequence);\n\n    // Give up.\n    return null;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static void resolveDummyTags(File treeFile,\n                                       TwoDimensionalCounter<String, String> pretermLabel,\n                                       TwoDimensionalCounter<String, String> unigramTagger,\n                                       boolean retainNER, TreeNormalizer tn) {\n    TreeFactory tf = new LabeledScoredTreeFactory();\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      PrintWriter pw = new PrintWriter(new PrintStream(new FileOutputStream(new File(treeFile + \".fixed\")),false,\"UTF-8\"));\n\n      int nTrees = 0;\n      for(Tree t; (t = tr.readTree()) != null;nTrees++) {\n        traverseAndFix(t, null, pretermLabel, unigramTagger, retainNER);\n\n        if (tn != null)\n          t = tn.normalizeWholeTree(t, tf);\n\n        pw.println(t.toString());\n      }\n\n      pw.close();\n      tr.close();\n\n      System.out.println(\"Processed \" +nTrees+ \" trees\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59859,"modified_method":"private static void resolveDummyTags(File treeFile,\n                                       TwoDimensionalCounter<String, String> pretermLabel,\n                                       TwoDimensionalCounter<String, String> unigramTagger,\n                                       boolean retainNER) {\n\n    try {\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(treeFile), \"UTF-8\"));\n      TreeReaderFactory trf = new SpanishTreeReaderFactory();\n      TreeReader tr = trf.newTreeReader(br);\n\n      PrintWriter pw = new PrintWriter(new PrintStream(new FileOutputStream(new File(treeFile + \".fixed\")),false,\"UTF-8\"));\n\n      int nTrees = 0;\n      for(Tree t; (t = tr.readTree()) != null;nTrees++) {\n        traverseAndFix(t, pretermLabel, unigramTagger, retainNER);\n        pw.println(t.toString());\n      }\n      pw.close();\n      tr.close();\n\n      System.out.println(\"Processed \" +nTrees+ \" trees\");\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Return the (single or multiple) words which make up the given\n   * token.\n   */\n  private String[] getMultiWords(String token) {\n    Matcher quoteMatcher = pQuoted.matcher(token);\n    if (quoteMatcher.matches()) {\n      String[] ret = new String[3];\n      ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(1);\n      ret[2] = \"\\\"\";\n\n      return ret;\n    }\n\n    // Confusing: we are using a tokenizer to split a token into its\n    // constituent words\n    StringTokenizer splitter = new StringTokenizer(token, WORD_SEPARATORS,\n                                                   true);\n    int remainingTokens = splitter.countTokens();\n\n    List<String> words = new ArrayList<String>();\n\n    while (splitter.hasMoreTokens()) {\n      String word = splitter.nextToken();\n      remainingTokens--;\n\n      if (word.length() == 1\n          && WORD_SEPARATORS_DROP.indexOf(word.charAt(0)) != -1)\n        // This is a delimiter that we should drop\n        continue;\n\n      if (remainingTokens >= 2 && hyphenBoundMorphemes.contains(word)) {\n        String hyphen = splitter.nextToken();\n        remainingTokens--;\n\n        if (!hyphen.equals(\"-\")) {\n          // Ouch. We expected a hyphen here. Clean things up and keep\n          // moving.\n          words.add(word);\n          words.add(hyphen);\n          continue;\n        }\n\n        String freeMorpheme = splitter.nextToken();\n        remainingTokens--;\n\n        words.add(word + hyphen + freeMorpheme);\n        continue;\n      }\n\n      // Otherwise..\n      words.add(word);\n    }\n\n    return words.toArray(new String[words.size()]);\n  }","id":59860,"modified_method":"/**\n   * Return the (single or multiple) words which make up the given\n   * token.\n   */\n  private String[] getMultiWords(String token) {\n    Matcher quoteMatcher = pQuoted.matcher(token);\n    if (quoteMatcher.matches()) {\n      String[] ret = new String[3];\n      ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(1);\n      ret[2] = \"\\\"\";\n\n      return ret;\n    }\n\n    return token.split(\"_\");\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new nodes for each of its\n      // constituent words\n      List<Tree> newNodes = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = normalizeTerminal(words[j]);\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newNode = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newNode.label() instanceof HasTag)\n          ((HasTag) newNode.label()).setTag(MW_TAG);\n\n        newNodes.add(newNode);\n      }\n\n      // Value of the phrase which should head these preterminals. Mark\n      // that this was created from a multiword token, and also retain\n      // the original parts of speech.\n      String phraseValue = MW_PHRASE_TAG + \"_\"\n        + simplifyPOSTag(preterminals[i].value());\n\n      // Should we insert these new nodes as children of the parent `t`\n      // (i.e., \"merge\" the multi-word token phrase into its parent), or\n      // head them with a new node and set that as a child of the\n      // parent?\n      boolean shouldMerge = preterminals.length == 1\n        && mergeWithConstituentWhenPossible.contains(t.value());\n\n      if (shouldMerge) {\n        t.setChildren(newNodes);\n        t.setValue(phraseValue);\n      } else {\n        Tree newHead = tf.newTreeNode(phraseValue, newNodes);\n        t.setChild(i, newHead);\n      }\n    }\n  }","id":59861,"modified_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new pre-terminal nodes for\n      // each of its constituent words\n      List<Tree> newPreterminals = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = words[j];\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newPreterminal = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newPreterminal.label() instanceof HasTag)\n          ((HasTag) newPreterminal.label()).setTag(MW_TAG);\n\n        newPreterminals.add(newPreterminal);\n      }\n\n      // Now create a dummy phrase containing the new preterminals.\n      // Maintain the value of the old preterminal in its label value.\n      String phraseType = MW_PHRASE_TAG + \"_\" + preterminals[i].value();\n      Tree newPrePreTerminal = tf.newTreeNode(phraseType, newPreterminals);\n      t.setChild(i, newPrePreTerminal);\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public SpanishTreeNormalizer(boolean simplifiedTagset,\n                               boolean aggressiveNormalization,\n                               boolean retainNER) {\n    if (retainNER && !simplifiedTagset)\n      throw new IllegalArgumentException(\"retainNER argument only valid when \" +\n                                         \"simplified tagset is used\");\n\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n    this.retainNER = retainNER;\n  }","id":59862,"modified_method":"public SpanishTreeNormalizer(boolean simplifiedTagset,\n                               boolean aggressiveNormalization) {\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Return a \"simplified\" version of an original AnCora part-of-speech\n   * tag, with much morphological annotation information removed.\n   */\n  private String simplifyPOSTag(String pos) {\n    if (pos.length() == 0)\n      return pos;\n\n    switch (pos.charAt(0)) {\n    case 'd':\n      // determinant (d)\n      //   retain category, type\n      //   drop person, gender, number, possessor\n      return pos.substring(0, 2) + \"0000\";\n    case 's':\n      // preposition (s)\n      //   retain category, type\n      //   drop form, gender, number\n      return pos.substring(0, 2) + \"000\";\n    case 'p':\n      // pronoun (p)\n      //   retain category, type\n      //   drop person, gender, number, case, possessor, politeness\n      return pos.substring(0, 2) + \"000000\";\n    case 'a':\n      // adjective\n      //   retain category, type, grade\n      //   drop gender, number, function\n      return pos.substring(0, 3) + \"000\";\n    case 'n':\n      // noun\n      //   retain category, type, number, NER label\n      //   drop type, gender, classification\n\n      char ner = retainNER && pos.length() == 7 ? pos.charAt(6) : '0';\n      return pos.substring(0, 2) + '0' + pos.charAt(3) + \"00\" + ner;\n    case 'v':\n      // verb\n      //   retain category, type, mood, tense\n      //   drop person, number, gender\n      return pos.substring(0, 4) + \"000\";\n    default:\n      // adverb\n      //   retain all\n      // punctuation\n      //   retain all\n      // numerals\n      //   retain all\n      // date and time\n      //   retain all\n      // conjunction\n      //   retain all\n      return pos;\n    }\n  }","id":59863,"modified_method":"/**\n   * Return a \"simplified\" version of an original AnCora part-of-speech\n   * tag, with much morphological annotation information removed.\n   */\n  private String simplifyPOSTag(String pos) {\n    if (pos.length() == 0)\n      return pos;\n\n    switch (pos.charAt(0)) {\n    case 'd':\n      // determinant (d)\n      //   retain category, type\n      //   drop person, gender, number, possessor\n      return pos.substring(0, 2) + \"0000\";\n    case 's':\n      // preposition (s)\n      //   retain category, type\n      //   drop form, gender, number\n      return pos.substring(0, 2) + \"000\";\n    case 'p':\n      // pronoun (p)\n      //   retain category, type\n      //   drop person, gender, number, case, possessor, politeness\n      return pos.substring(0, 2) + \"000000\";\n    case 'a':\n      // adjective\n      //   retain category, type, grade\n      //   drop gender, number, function\n      return pos.substring(0, 3) + \"000\";\n    case 'n':\n      // noun\n      //   retain category, type, number, NER label\n      //   drop type, gender, classification\n\n      // Some tags are randomly missing the NER label..\n      char ner = pos.length() == 7 ? pos.charAt(6) : '0';\n      return pos.substring(0, 2) + '0' + pos.charAt(3) + \"00\" + ner;\n    case 'v':\n      // verb\n      //   retain category, type, mood, tense\n      //   drop person, number, gender\n      return pos.substring(0, 4) + \"000\";\n    default:\n      // adverb\n      //   retain all\n      // punctuation\n      //   retain all\n      // numerals\n      //   retain all\n      // date and time\n      //   retain all\n      // conjunction\n      //   retain all\n      return pos;\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n  public Tree normalizeWholeTree(Tree tree, TreeFactory tf) {\n    // First filter out nodes we don't like\n    tree = tree.prune(emptyFilter);\n\n    // Find all named entities which are not multi-word tokens and nest\n    // them within named entity NP groups\n    if (retainNER)\n      markSimpleNamedEntities(tree);\n\n    // Counter for part-of-speech statistics\n    TwoDimensionalCounter<String, String> unigramTagger =\n      new TwoDimensionalCounter<String, String>();\n\n    for (Tree t : tree) {\n      if (simplifiedTagset && t.isPreTerminal()) {\n        // This is a part of speech tag. Remove extra morphological\n        // information.\n        CoreLabel label = (CoreLabel) t.label();\n        String pos = label.value();\n\n        pos = simplifyPOSTag(pos).intern();\n        label.setValue(pos);\n        label.setTag(pos);\n      } else if (aggressiveNormalization && isMultiWordCandidate(t)) {\n        // Expand multi-word token if necessary\n        normalizeForMultiWord(t, tf);\n      }\n    }\n\n    // Now attack elisions: 'al' and 'del'\n    expandElisions(tree, tf);\n\n    return tree;\n  }","id":59864,"modified_method":"@Override\n  public Tree normalizeWholeTree(Tree tree, TreeFactory tf) {\n    // Counter for part-of-speech statistics\n    TwoDimensionalCounter<String, String> unigramTagger =\n      new TwoDimensionalCounter<String, String>();\n\n    for (Tree t : tree) {\n      if (simplifiedTagset && t.isPreTerminal()) {\n        // This is a part of speech tag. Remove extra morphological\n        // information.\n        CoreLabel label = (CoreLabel) t.label();\n        String pos = label.value();\n\n        pos = simplifyPOSTag(pos).intern();\n        label.setValue(pos);\n        label.setTag(pos);\n      } else if (aggressiveNormalization && isMultiWordCandidate(t)) {\n        // Expand multi-word token if necessary\n        normalizeForMultiWord(t, tf);\n      }\n    }\n\n    return tree;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void setUp() {\n    tf = new LabeledScoredTreeFactory();\n    tn = new SpanishTreeNormalizer(true, true, true);\n  }","id":59865,"modified_method":"public void setUp() {\n    tf = new LabeledScoredTreeFactory();\n    tn = new SpanishTreeNormalizer(true, true);\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public TreeReader newTreeReader(Reader in) {\n    return new PennTreeReader(in, new LabeledScoredTreeFactory(),\n                              new SpanishTreeNormalizer(false, false, false),\n                              new PennTreebankTokenizer(in));\n  }","id":59866,"modified_method":"public TreeReader newTreeReader(Reader in) {\n    return new PennTreeReader(in, new LabeledScoredTreeFactory(),\n                              new SpanishTreeNormalizer(false, false),\n                              new PennTreebankTokenizer(in));\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Remove attached pronouns from a strippable Spanish verb form. (Use\n   * {@link #isStrippable(String)} to determine if a word is a\n   * strippable verb.)\n   *\n   * Converts e.g.\n   *\n   *   - decírmelo -> decir\n   *   - mudarse -> mudar\n   *   - contándolos -> contando\n   *   - hazlo -> haz\n   */\n  public static String stripVerb(String verb) {\n    // Remove pronouns\n    String stripped = pAttachedPronouns.matcher(verb).replaceAll(\"\");\n\n    // Remove accent\n    for (Pair<Pattern, String> accentFix : accentFixes)\n      stripped = accentFix.first().matcher(stripped)\n        .replaceAll(accentFix.second());\n\n    return stripped;\n  }","id":59867,"modified_method":"/**\n   * Remove attached pronouns from a strippable Spanish verb form. (Use\n   * {@link #isStrippable(String)} to determine if a word is a\n   * strippable verb.)\n   *\n   * Converts e.g.\n   *\n   *   - decírmelo -> decir\n   *   - mudarse -> mudar\n   *   - contándolos -> contando\n   *   - hazlo -> haz\n   */\n  public static String stripVerb(String verb) {\n    String stripped = stripSuffix(verb, pOneAttachedPronoun);\n    if(stripped == null || (!isVerb(stripped) && !isVerb(stripped + \"d\"))) {\n      System.out.println(stripped);\n      stripped = stripSuffix(verb, pTwoAttachedPronouns);\n      if(stripped == null || (!isVerb(stripped) && !isVerb(stripped + \"d\"))) {\n        System.out.println(stripped);\n        return null;\n      }\n    }\n    return stripped;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Determine if the given word is a verb which needs to be stripped.\n   */\n  public static boolean isStrippable(String word) {\n    return pStrippable.matcher(word).find();\n  }","id":59868,"modified_method":"/**\n   * Determine if the given word is a verb which needs to be stripped.\n   */\n  public static boolean isStrippable(String word) {\n    return (pStrippable.matcher(word).find() || pIrregulars.matcher(word).find());\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void testStrippable() {\n    assertTrue(SpanishVerbStripper.isStrippable(\"decirme\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"decirnos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugarles\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"mandarlos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"leerlo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugarla\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugárselos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"decírmelo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"contándolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"yéndole\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"viviéndolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"leyéndolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"buscándome\"));\n  }","id":59869,"modified_method":"public static void testStrippable() {\n    assertTrue(SpanishVerbStripper.isStrippable(\"decirme\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"decirnos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugarles\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"mandarlos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"leerlo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugarla\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"jugárselos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"decírmelo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"contándolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"yéndole\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"viviéndolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"leyéndolo\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"buscándome\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"sentaos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"vestíos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"cómprelos\"));\n    assertTrue(SpanishVerbStripper.isStrippable(\"házmelo\"));\n    \n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public void testStripVerb() {\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decirme\"));\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decirnos\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugarles\"));\n    assertEquals(\"mandar\", SpanishVerbStripper.stripVerb(\"mandarlos\"));\n    assertEquals(\"leer\", SpanishVerbStripper.stripVerb(\"leerlo\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugarla\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugárselos\"));\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decírmelo\"));\n    assertEquals(\"contando\", SpanishVerbStripper.stripVerb(\"contándolo\"));\n    assertEquals(\"yendo\", SpanishVerbStripper.stripVerb(\"yéndole\"));\n    assertEquals(\"viviendo\", SpanishVerbStripper.stripVerb(\"viviéndolo\"));\n    assertEquals(\"leyendo\", SpanishVerbStripper.stripVerb(\"leyéndolo\"));\n    assertEquals(\"buscando\", SpanishVerbStripper.stripVerb(\"buscándome\"));\n  }","id":59870,"modified_method":"public static void testStripVerb() {\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decirme\"));\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decirnos\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugarles\"));\n    assertEquals(\"mandar\", SpanishVerbStripper.stripVerb(\"mandarlos\"));\n    assertEquals(\"leer\", SpanishVerbStripper.stripVerb(\"leerlo\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugarla\"));\n    assertEquals(\"jugar\", SpanishVerbStripper.stripVerb(\"jugárselos\"));\n    assertEquals(\"decir\", SpanishVerbStripper.stripVerb(\"decírmelo\"));\n    assertEquals(\"contando\", SpanishVerbStripper.stripVerb(\"contándolo\"));\n    assertEquals(\"yendo\", SpanishVerbStripper.stripVerb(\"yéndole\"));\n    assertEquals(\"viviendo\", SpanishVerbStripper.stripVerb(\"viviéndolo\"));\n    assertEquals(\"leyendo\", SpanishVerbStripper.stripVerb(\"leyéndolo\"));\n    assertEquals(\"buscando\", SpanishVerbStripper.stripVerb(\"buscándome\"));\n    assertEquals(\"senta\", SpanishVerbStripper.stripVerb(\"sentaos\"));\n    assertEquals(\"vesti\", SpanishVerbStripper.stripVerb(\"vestíos\"));\n    assertEquals(\"compre\", SpanishVerbStripper.stripVerb(\"cómprelos\"));\n    assertEquals(\"haz\", SpanishVerbStripper.stripVerb(\"házmelo\"));\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n\n    sb.append(String.format(\"Usage: java %s [OPTIONS] file(s)%n%n\", SpanishXMLTreeReader.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -ner: Add NER-specific information to trees\").append(nl);\n    sb.append(\"   -plain: Output corpus in plaintext rather than as trees\").append(nl);\n    sb.append(\"   -searchPos posRegex: Only print sentences which contain a token whose part of speech matches the given regular expression\").append(nl);\n    sb.append(\"   -searchWord wordRegex: Only print sentences which contain a token which matches the given regular expression\").append(nl);\n\n    return sb.toString();\n  }","id":59871,"modified_method":"private static String usage() {\n    StringBuilder sb = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    sb.append(String.format(\"Usage: java %s [OPTIONS] file(s)%n%n\", SpanishXMLTreeReader.class.getName()));\n    sb.append(\"Options:\").append(nl);\n    sb.append(\"   -help: Print this message\").append(nl);\n    sb.append(\"   -plain: Output corpus in plaintext rather than as trees\").append(nl);\n    sb.append(\"   -searchPos posRegex: Only print sentences which contain a token whose part of speech matches the given regular expression\").append(nl);\n    sb.append(\"   -searchWord wordRegex: Only print sentences which contain a token which matches the given regular expression\").append(nl);\n    return sb.toString();\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private static Map<String, Integer> argOptionDefs() {\n    Map<String, Integer> argOptionDefs = Generics.newHashMap();\n    argOptionDefs.put(\"help\", 0);\n    argOptionDefs.put(\"ner\", 0);\n    argOptionDefs.put(\"plain\", 0);\n    argOptionDefs.put(\"searchPos\", 1);\n    argOptionDefs.put(\"searchWord\", 1);\n    return argOptionDefs;\n  }","id":59872,"modified_method":"private static Map<String, Integer> argOptionDefs() {\n    Map<String, Integer> argOptionDefs = Generics.newHashMap();\n    argOptionDefs.put(\"help\", 0);\n    argOptionDefs.put(\"plain\", 0);\n    argOptionDefs.put(\"searchPos\", 1);\n    argOptionDefs.put(\"searchWord\", 1);\n    return argOptionDefs;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public static void main(String[] args) {\n    final Properties options = StringUtils.argsToProperties(args, argOptionDefs());\n    if(args.length < 1 || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    final Pattern posPattern = options.containsKey(\"searchPos\")\n      ? Pattern.compile(options.getProperty(\"searchPos\")) : null;\n    final Pattern wordPattern = options.containsKey(\"searchWord\")\n      ? Pattern.compile(options.getProperty(\"searchWord\")) : null;\n    final boolean plainPrint = PropertiesUtils.getBool(options, \"plain\", false);\n    final boolean ner = PropertiesUtils.getBool(options, \"ner\", false);\n\n    String[] remainingArgs = options.getProperty(\"\").split(\" \");\n    List<File> fileList = new ArrayList<File>();\n    for(int i = 0; i < remainingArgs.length; i++)\n      fileList.add(new File(remainingArgs[i]));\n\n    final TreeReaderFactory trf = new SpanishXMLTreeReaderFactory(true, true, ner);\n    ExecutorService pool =\n      Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n\n    for (final File file : fileList) {\n      pool.execute(new Runnable() {\n          public void run() {\n            try {\n              TreeReader tr = trf.newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\")));\n              process(file, tr, posPattern, wordPattern, plainPrint);\n              tr.close();\n            } catch (FileNotFoundException e) {\n              e.printStackTrace();\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n        });\n    }\n\n    pool.shutdown();\n    try {\n      pool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }","id":59873,"modified_method":"/**\n   * For debugging.\n   *\n   * @param args\n   */\n  public static void main(String[] args) {\n    final Properties options = StringUtils.argsToProperties(args, argOptionDefs());\n    if(args.length < 1 || options.containsKey(\"help\")) {\n      System.err.println(usage());\n      return;\n    }\n\n    Pattern posPattern = options.containsKey(\"searchPos\")\n      ? Pattern.compile(options.getProperty(\"searchPos\")) : null;\n    Pattern wordPattern = options.containsKey(\"searchWord\")\n      ? Pattern.compile(options.getProperty(\"searchWord\")) : null;\n    boolean plainPrint = PropertiesUtils.getBool(options, \"plain\", false);\n\n    String[] remainingArgs = options.getProperty(\"\").split(\" \");\n    List<File> fileList = new ArrayList<File>();\n    for(int i = 0; i < remainingArgs.length; i++)\n      fileList.add(new File(remainingArgs[i]));\n\n    TreeReaderFactory trf = new SpanishXMLTreeReaderFactory(true, true);\n    int totalTrees = 0;\n    Set<String> morphAnalyses = Generics.newHashSet();\n    try {\n      for(File file : fileList) {\n        TreeReader tr = trf.newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\")));\n\n        Tree t;\n        int numTrees;\n        String canonicalFileName = file.getName().substring(0, file.getName().lastIndexOf('.'));\n\n        for(numTrees = 0; (t = tr.readTree()) != null; numTrees++) {\n          if (!shouldPrintTree(t, posPattern, wordPattern))\n            continue;\n\n          String ftbID = ((CoreLabel) t.label()).get(CoreAnnotations.SentenceIDAnnotation.class);\n          String output = toString(t, plainPrint);\n\n          System.out.printf(\"%s-%s\\t%s%n\", canonicalFileName, ftbID, output);\n          List<Label> leaves = t.yield();\n          for(Label label : leaves) {\n            if(label instanceof CoreLabel)\n              morphAnalyses.add(((CoreLabel) label).originalText());\n          }\n        }\n\n        tr.close();\n        System.err.printf(\"%s: %d trees%n\",file.getName(),numTrees);\n        totalTrees += numTrees;\n      }\n\n//wsg2011: Print out the observed morphological analyses\n//      for(String analysis : morphAnalyses)\n//        System.err.println(analysis);\n\n      System.err.printf(\"%nRead %d trees%n\",totalTrees);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Build a parse tree node corresponding to an elliptic node in the parse XML.\n   */\n  private Tree buildEllipticNode(Node root) {\n    Element eRoot = (Element) root;\n    String constituentStr = eRoot.getNodeName();\n\n    List<Tree> kids = new ArrayList<Tree>();\n    Tree leafNode = treeFactory.newLeaf(SpanishTreeNormalizer.EMPTY_LEAF_VALUE);\n    if (leafNode.label() instanceof HasWord)\n      ((HasWord) leafNode.label()).setWord(SpanishTreeNormalizer.EMPTY_LEAF_VALUE);\n\n    kids.add(leafNode);\n    Tree t = treeFactory.newTreeNode(constituentStr, kids);\n\n    return t;\n  }","id":59874,"modified_method":"/**\n   * Build a parse tree node corresponding to an elliptic node in the parse XML.\n   */\n  private Tree buildEllipticNode(Node root) {\n    Element eRoot = (Element) root;\n    String constituentStr = eRoot.getNodeName();\n\n    List<Tree> kids = new ArrayList<Tree>();\n    Tree leafNode = treeFactory.newLeaf(EMPTY_LEAF);\n    if (leafNode.label() instanceof HasWord)\n      ((HasWord) leafNode.label()).setWord(EMPTY_LEAF);\n\n    kids.add(leafNode);\n    Tree t = treeFactory.newTreeNode(constituentStr, kids);\n\n    return t;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private String getWord(Element node) {\n    String word = node.getAttribute(ATTR_WORD);\n    if (word.equals(\"\"))\n      return SpanishTreeNormalizer.EMPTY_LEAF_VALUE;\n\n    return word.trim();\n  }","id":59875,"modified_method":"private String getWord(Element node) {\n    String word = node.getAttribute(ATTR_WORD);\n    if (word.equals(\"\"))\n      return EMPTY_LEAF;\n\n    return word.trim();\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Determine the part of speech of the given leaf node.\n   *\n   * Use some heuristics to make up for missing part-of-speech labels.\n   */\n  private String getPOS(Element node) {\n    String pos = node.getAttribute(ATTR_POS);\n\n    String namedAttribute = node.getAttribute(ATTR_NAMED_ENTITY);\n    if (pos.startsWith(\"np\") && pos.length() == 7\n        && pos.charAt(pos.length() - 1) == '0') {\n      // Some nouns are missing a named entity annotation in the final\n      // character of their POS tags, but still have a proper named\n      // entity annotation in the `ne` attribute. Fix this:\n      char annotation = '0';\n      if (namedAttribute.equals(\"location\")) {\n        annotation = 'l';\n      } else if (namedAttribute.equals(\"person\")) {\n        annotation = 'p';\n      } else if (namedAttribute.equals(\"organization\")) {\n        annotation = 'o';\n      }\n\n      pos = pos.substring(0, 6) + annotation;\n    } else if (pos.equals(\"\")) {\n      // Make up for some missing part-of-speech tags\n      if (namedAttribute.equals(\"date\")) {\n        return \"w\";\n      } else if (namedAttribute.equals(\"number\")) {\n        return \"z0\";\n      }\n\n      String tagName = node.getTagName();\n      if (tagName.equals(\"i\")) {\n        return \"i\";\n      } else if (tagName.equals(\"r\")) {\n        return \"rg\";\n      } else if (tagName.equals(\"z\")) {\n        return \"z0\";\n      }\n\n      // Handle icky issues related to \"que\"\n      String posType = node.getAttribute(ATTR_POSTYPE);\n      String word = getWord(node);\n      if (tagName.equals(\"c\") && posType.equals(\"subordinating\")) {\n        return \"cs\";\n      } else if (tagName.equals(\"p\") && posType.equals(\"relative\")\n                 && word.equalsIgnoreCase(\"que\")) {\n        return \"pr0cn000\";\n      }\n\n      if (simplifiedTagset) {\n        // If we are using the simplfied tagset, we can make some more\n        // broad inferences\n        if (tagName.equals(\"a\")) {\n          return \"aq0000\";\n        } else if (posType.equals(\"proper\")) {\n          return \"np00000\";\n        } else if (posType.equals(\"common\")) {\n          return \"nc0s000\";\n        }\n      }\n\n      if (node.hasAttribute(ATTR_PUNCT)) {\n        return \"f\";\n      }\n    }\n\n    return pos;\n  }","id":59876,"modified_method":"/**\n   * Determine the part of speech of the given leaf node.\n   *\n   * Use some heuristics to make up for missing part-of-speech labels.\n   */\n  private String getPOS(Element node) {\n    String pos = node.getAttribute(ATTR_POS);\n\n    // Make up for some missing part-of-speech tags\n    if (pos.equals(\"\")) {\n      String namedAttribute = node.getAttribute(ATTR_NAMED_ENTITY);\n      if (namedAttribute.equals(\"date\")) {\n        return \"w\";\n      } else if (namedAttribute.equals(\"number\")) {\n        return \"z0\";\n      }\n\n      String tagName = node.getTagName();\n      if (tagName.equals(\"i\")) {\n        return \"i\";\n      } else if (tagName.equals(\"r\")) {\n        return \"rg\";\n      } else if (tagName.equals(\"z\")) {\n        return \"z0\";\n      }\n\n      // Handle icky issues related to \"que\"\n      String posType = node.getAttribute(ATTR_POSTYPE);\n      String word = getWord(node);\n      if (tagName.equals(\"c\") && posType.equals(\"subordinating\")) {\n        return \"cs\";\n      } else if (tagName.equals(\"p\") && posType.equals(\"relative\")\n                 && word.equalsIgnoreCase(\"que\")) {\n        return \"pr0cn000\";\n      }\n\n      if (simplifiedTagset) {\n        // If we are using the simplfied tagset, we can make some more\n        // broad inferences\n        if (tagName.equals(\"a\")) {\n          return \"aq0000\";\n        }\n      }\n\n      if (node.hasAttribute(ATTR_PUNCT)) {\n        return \"f\";\n      }\n    }\n\n    return pos;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Read parse trees from a Reader.\n   *\n   * @param in The <code>Reader<\/code>\n   * @param simplifiedTagset If `true`, convert part-of-speech labels to a\n   *          simplified version of the EAGLES tagset, where the tags do not\n   *          include extensive morphological analysis\n   * @param aggressiveNormalization Perform aggressive \"normalization\"\n   *          on the trees read from the provided corpus documents:\n   *          split multi-word tokens into their constituent words (and\n   *          infer parts of speech of the constituent words).\n   * @param retainNER Retain NER information in preterminals (for later\n   *          use in `MultiWordPreprocessor) and add NER-specific\n   *          parents to single-word NE tokens\n   */\n  public SpanishXMLTreeReader(Reader in, boolean simplifiedTagset,\n                              boolean aggressiveNormalization,\n                              boolean retainNER) {\n    TreebankLanguagePack tlp = new SpanishTreebankLanguagePack();\n\n    this.simplifiedTagset = simplifiedTagset;\n\n    stream = new ReaderInputStream(in, tlp.getEncoding());\n    treeFactory = new LabeledScoredTreeFactory();\n    treeNormalizer =\n      new SpanishTreeNormalizer(simplifiedTagset,\n                                aggressiveNormalization,\n                                retainNER);\n\n    DocumentBuilder parser = XMLUtils.getXmlParser();\n    try {\n      final Document xml = parser.parse(stream);\n      final Element root = xml.getDocumentElement();\n      sentences = root.getElementsByTagName(NODE_SENT);\n      sentIdx = 0;\n\n    } catch (SAXException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":59877,"modified_method":"/**\n   * Read parse trees from a Reader.\n   *\n   * @param in The <code>Reader<\/code>\n   * @param simplifiedTagset If `true`, convert part-of-speech labels to a\n   *          simplified version of the EAGLES tagset, where the tags do not\n   *          include extensive morphological analysis\n   * @param aggressiveNormalization Perform aggressive \"normalization\"\n   *          on the trees read from the provided corpus documents:\n   *          split multi-word tokens into their constituent words (and\n   *          infer parts of speech of the constituent words).\n   */\n  public SpanishXMLTreeReader(Reader in, boolean simplifiedTagset,\n                              boolean aggressiveNormalization) {\n    TreebankLanguagePack tlp = new SpanishTreebankLanguagePack();\n\n    this.simplifiedTagset = simplifiedTagset;\n\n    stream = new ReaderInputStream(in, tlp.getEncoding());\n    treeFactory = new LabeledScoredTreeFactory();\n    treeNormalizer = new SpanishTreeNormalizer(simplifiedTagset,\n                                               aggressiveNormalization);\n\n    DocumentBuilder parser = XMLUtils.getXmlParser();\n    try {\n      final Document xml = parser.parse(stream);\n      final Element root = xml.getDocumentElement();\n      sentences = root.getElementsByTagName(NODE_SENT);\n      sentIdx = 0;\n\n    } catch (SAXException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public TreeReader newTreeReader(Reader in) {\n    return new SpanishXMLTreeReader(in, simplifiedTagset, aggressiveNormalization,\n                                    retainNER);\n  }","id":59878,"modified_method":"public TreeReader newTreeReader(Reader in) {\n    return new SpanishXMLTreeReader(in, simplifiedTagset, aggressiveNormalization);\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public SpanishXMLTreeReaderFactory(boolean simplifiedTagset,\n                                     boolean aggressiveNormalization,\n                                     boolean retainNER) {\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n    this.retainNER = retainNER;\n  }","id":59879,"modified_method":"public SpanishXMLTreeReaderFactory(boolean simplifiedTagset,\n                                     boolean aggressiveNormalization) {\n    this.simplifiedTagset = simplifiedTagset;\n    this.aggressiveNormalization = aggressiveNormalization;\n  }","commit_id":"fae08b1260424644f73c01345ee9941e7f984d20","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new pre-terminal nodes for\n      // each of its constituent words\n      List<Tree> newPreterminals = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = words[j];\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newPreterminal = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newPreterminal.label() instanceof HasTag)\n          ((HasTag) newPreterminal.label()).setTag(MW_TAG);\n\n        newPreterminals.add(newPreterminal);\n      }\n\n      // Now create a dummy phrase containing the new preterminals.\n      // Maintain the value of the old preterminal in its label value.\n      String phraseValue = MW_PHRASE_TAG + \"_\"\n        + simplifyPOSTag(preterminals[i].value());\n      Tree newPrePreTerminal = tf.newTreeNode(phraseValue, newPreterminals);\n      t.setChild(i, newPrePreTerminal);\n    }\n  }","id":59880,"modified_method":"/**\n   * Normalize a pre-pre-terminal tree node by accounting for multi-word\n   * tokens.\n   *\n   * Detects multi-word tokens in leaves below this pre-pre-terminal and\n   * expands their constituent words into separate leaves.\n   */\n  void normalizeForMultiWord(Tree t, TreeFactory tf) {\n    Tree[] preterminals = t.children();\n\n    for (int i = 0; i < preterminals.length; i++) {\n      // This particular child is not actually a preterminal --- skip\n      if (!preterminals[i].isPreTerminal())\n        continue;\n\n      Tree leaf = preterminals[i].firstChild();\n      String leafValue = ((CoreLabel) leaf.label()).value();\n\n      String[] words = getMultiWords(leafValue);\n      if (words.length == 1)\n        continue;\n\n      // Leaf is a multi-word token; build new nodes for each of its\n      // constituent words\n      List<Tree> newNodes = new ArrayList<Tree>(words.length);\n      for (int j = 0; j < words.length; j++) {\n        String word = words[j];\n\n        Tree newLeaf = tf.newLeaf(word);\n        if (newLeaf.label() instanceof HasWord)\n          ((HasWord) newLeaf.label()).setWord(word);\n\n        Tree newNode = tf.newTreeNode(MW_TAG, Arrays.asList(newLeaf));\n        if (newNode.label() instanceof HasTag)\n          ((HasTag) newNode.label()).setTag(MW_TAG);\n\n        newNodes.add(newNode);\n      }\n\n      // Value of the phrase which should head these preterminals. Mark\n      // that this was created from a multiword token, and also retain\n      // the original parts of speech.\n      String phraseValue = MW_PHRASE_TAG + \"_\"\n        + simplifyPOSTag(preterminals[i].value());\n\n      // Should we insert these new nodes as children of the parent `t`\n      // (i.e., \"merge\" the multi-word token phrase into its parent), or\n      // head them with a new node and set that as a child of the\n      // parent?\n      boolean shouldMerge = preterminals.length == 1\n        && mergeWithConstituentWhenPossible.contains(t.value());\n\n      if (shouldMerge) {\n        t.setChildren(newNodes);\n        t.setValue(phraseValue);\n      } else {\n        Tree newHead = tf.newTreeNode(phraseValue, newNodes);\n        t.setChild(i, newHead);\n      }\n    }\n  }","commit_id":"db47ccaba939580daef7bfb9f7d72a78b9f48967","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"/**\n   * Overridden to return the negated value of {@link #disableBindVariables()}.\n   */\n  @Override\n  public boolean useBindVariables() {\n    return !disableBindVariables();\n  }","id":59881,"modified_method":"/**\n     * Overriddden to return the negated value of {@link #disableBindVariables()}.\n     */\n    public boolean useBindVariables() {\n        return !disableBindVariables();\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overrides the parent implementation to:\n   * <ul>\n   * <li>add typecasts after the value, i.e. '2'::char,\n   * which is required with certain PostgreSQL versions (<=7.4.x) for the correct query processing, \n   * particularly with index usage. \n   * <li>quotes values if bind variables are disabled on this attribute. \n   * <\/ul>\n   * NULL values are excluded from casting. <br/>\n   * You can set the System default <code>com.webobjects.jdbcadaptor.PostgresqlExpression.disableTypeCasting<\/code>\n   * to true to disable both fixes (the former you might want to disable when PG says it can't cast a certain value and\n   * the second when you have values with a greater resolution already in the DB).\n   * @param value the value\n   * @param keyPath the keypath associated with the value\n   */\n  @Override\n  public String sqlStringForValue(Object value, String keyPath) {\n    if (disableTypeCasting()) {\n      return super.sqlStringForValue(value,keyPath);\n    }\n    EOAttribute attribute;\n    int lastDotIdx = keyPath.lastIndexOf(\".\");\n    if (lastDotIdx == -1) {\n      attribute = entity().attributeNamed(keyPath);\n    } else {\n      EOEntity kpEntity = entityForKeyPath(keyPath);\n      attribute = kpEntity.attributeNamed(keyPath.substring(lastDotIdx+1));\n    }\n    if (attribute != null && value != null && value != NSKeyValueCoding.NullValue) {\n      String columnType = columnTypeStringForAttribute(attribute);\n      return super.sqlStringForValue(value, keyPath) + \"::\" + columnType;\n    } \n\n    return super.sqlStringForValue(value, keyPath);\n  }","id":59882,"modified_method":"/**\n     * Overrides the parent implementation to:\n     * <ul>\n     * <li>add typecasts after the value, i.e. '2'::char,\n     * which is required with certain PostgreSQL versions (<=7.4.x) for the correct query processing, \n     * particularly with index usage. \n     * <li>quotes values if bind variables are disabled on this attribute. \n     * <\/ul>\n     * NULL values are excluded from casting. <br/>\n     * You can set the System default <code>com.webobjects.jdbcadaptor.PostgresqlExpression.disableTypeCasting<\/code>\n     * to true to disable both fixes (the former you might want to disable when PG says it can't cast a certain value and\n     * the second when you have values with a greater resolution already in the DB).\n     * @param v the value\n     * @param kp    the keypath associated with the value\n     */\n    public String sqlStringForValue(Object v, String kp) {\n        if(disableTypeCasting()) {\n            return super.sqlStringForValue(v,kp);\n        }\n        EOAttribute attribute;\n        int lastDotIdx = kp.lastIndexOf(\".\");\n        if (lastDotIdx == -1) {\n        \tattribute = entity().attributeNamed(kp);\n        } else {\n        \tEOEntity kpEntity = entityForKeyPath(kp);\n        \tattribute = kpEntity.attributeNamed(kp.substring(lastDotIdx+1));\n        }\n        if(attribute != null && v != null && v != NSKeyValueCoding.NullValue) {\n        \tString s = columnTypeStringForAttribute(attribute);\n        \treturn super.sqlStringForValue(v, kp) + \"::\" + s;\n        } \n        \n        return super.sqlStringForValue(v,kp);\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overridden to fix an issue with NStimestamp classes and \"T\" value-typed attributes. \n   */\n  @Override\n  public NSMutableDictionary bindVariableDictionaryForAttribute(EOAttribute eoattribute, Object obj) {\n    NSMutableDictionary<String, Object> result =  super.bindVariableDictionaryForAttribute(eoattribute, obj);\n    if ((obj instanceof NSTimestamp) && (isTimestampAttribute(eoattribute))) {\n      NSTimestamp nstimestamp = (NSTimestamp)obj;\n      long millis = nstimestamp.getTime();\n      // AK: since NSTimestamp places fractional millis in the getTime,\n      // the driver is getting very confused and refuses to update the columns as \n      // they get translated to 0 as the fractional values.\n      Timestamp timestamp = new Timestamp(millis);\n      timestamp.setNanos(timestamp.getNanos() + nstimestamp.getNanos());\n      result.setObjectForKey(timestamp, \"BindVariableValue\");\n    }\n    return result;\n  }","id":59883,"modified_method":"/**\n     * Overridden to fix an issue with NStimestamp classes and \"T\" value-typed attributes. \n     */\n    public NSMutableDictionary bindVariableDictionaryForAttribute(EOAttribute eoattribute, Object obj) {\n        NSMutableDictionary result =  super.bindVariableDictionaryForAttribute(eoattribute, obj);\n        if((obj instanceof NSTimestamp) && (isTimestampAttribute(eoattribute))) {\n            NSTimestamp nstimestamp = (NSTimestamp)obj;\n            long millis = nstimestamp.getTime();\n            // AK: since NSTimestamp places fractional millis in the getTime,\n            // the driver is getting very confused and refuses to update the columns as \n            // they get translated to 0 as the fractional values.\n            Timestamp timestamp = new Timestamp(millis);\n            timestamp.setNanos(timestamp.getNanos()+nstimestamp.getNanos());\n            result.setObjectForKey(timestamp, \"BindVariableValue\");\n         }\n        return result;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overrides the parent implementation to add an <code>INITIALLY DEFERRED<\/code> to the generated statement.\n   * Useful you want to generate the schema-building SQL from a pure java environment.\n   * \n   * cug: Also handles identifier quoting now\n   * \n   * @param relationship  the relationship\n   * @param sourceColumns the source columns for the constraints\n   * @param destinationColumns    the destination columns for the constraints\n   */\n  @Override\n  public void prepareConstraintStatementForRelationship(EORelationship relationship, NSArray sourceColumns, NSArray destinationColumns) {\n\n    EOEntity entity = relationship.entity();\n    String tableName = entity.externalName();\n\n    int lastDot = tableName.lastIndexOf('.');\n\n    if (lastDot >= 0) {\n      tableName = tableName.substring(lastDot + 1);\n    }\n\n    String constraintName = _NSStringUtilities.concat(tableName, \"_\", relationship.name(), \"_fk\");\n\n    // quotes the identifier in the array\n\n    String sourceKeyList = this.quoteArrayContents(sourceColumns).componentsJoinedByString(\", \");\n    String destinationKeyList = this.quoteArrayContents(destinationColumns).componentsJoinedByString(\", \");\n\n    EOModel sourceModel = entity.model();\n    EOModel destModel = relationship.destinationEntity().model();\n    if (sourceModel != destModel && !sourceModel.connectionDictionary().equals(destModel.connectionDictionary())) {\n      throw new IllegalArgumentException((new StringBuilder()).append(\"prepareConstraintStatementForRelationship unable to create a constraint for \").append(relationship.name()).append(\" because the source and destination entities reside in different databases\").toString());\n    }\n    setStatement((new StringBuilder())\n        .append(\"ALTER TABLE \")\n        .append(sqlStringForSchemaObjectName(entity.externalName()))\n        .append(\" ADD CONSTRAINT \")\n        .append(quoteIdentifier(constraintName))\n        .append(\" FOREIGN KEY (\")\n        .append(sourceKeyList)\n        .append(\") REFERENCES \")\n        .append(sqlStringForSchemaObjectName(relationship.destinationEntity().externalName()))\n        .append(\" (\")\n        .append(destinationKeyList)\n        .append(\") INITIALLY DEFERRED\")\n        .toString());\n  }","id":59884,"modified_method":"/**\n     * Overrides the parent implementation to add an <code>INITIALLY DEFERRED<\/code> to the generated statement.\n     * Useful you want to generate the schema-building SQL from a pure java environment.\n     * \n     * cug: Also handles identifier quoting now\n     * \n     * @param relationship  the relationship\n     * @param sourceColumns the source columns for the constraints\n     * @param destinationColumns    the destination columns for the constraints\n     */\n    @SuppressWarnings(\"unchecked\")\n\tpublic void prepareConstraintStatementForRelationship(EORelationship relationship, NSArray sourceColumns, NSArray destinationColumns) {\n\t\t\n    \tEOEntity entity = relationship.entity();\n\t\tString tableName = entity.externalName();\n\t\t\n\t\tint lastDot = tableName.lastIndexOf('.');\n\t\t\n\t\tif (lastDot >= 0) {\n\t\t\ttableName = tableName.substring(lastDot + 1);\n\t\t}\n\t\t\n\t\tString constraintName = _NSStringUtilities.concat(tableName, \"_\", relationship.name(), \"_fk\");\n\t\t\n\t\t// quotes the identifier in the array\n\t\t\n\t\tString sourceKeyList = this.quoteArrayContents(sourceColumns).componentsJoinedByString(\", \");\n\t\tString destinationKeyList = this.quoteArrayContents(destinationColumns).componentsJoinedByString(\", \");\n\t\t\n\t\tEOModel sourceModel = entity.model();\n\t\tEOModel destModel = relationship.destinationEntity().model();\n\t\tif (sourceModel != destModel && !sourceModel.connectionDictionary().equals(destModel.connectionDictionary())) {\n\t\t\tthrow new IllegalArgumentException((new StringBuilder()).append(\"prepareConstraintStatementForRelationship unable to create a constraint for \").append(relationship.name()).append(\" because the source and destination entities reside in different databases\").toString());\n\t\t} \n\t\telse {\n\t\t\tsetStatement((new StringBuilder())\n\t\t\t\t\t.append(\"ALTER TABLE \")\n\t\t\t\t\t.append(sqlStringForSchemaObjectName(entity.externalName()))\n\t\t\t\t\t.append(\" ADD CONSTRAINT \")\n\t\t\t\t\t.append(quoteIdentifier(constraintName))\n\t\t\t\t\t.append(\" FOREIGN KEY (\")\n\t\t\t\t\t.append(sourceKeyList)\n\t\t\t\t\t.append(\") REFERENCES \")\n\t\t\t\t\t.append(sqlStringForSchemaObjectName(relationship.destinationEntity().externalName()))\n\t\t\t\t\t.append(\" (\")\n\t\t\t\t\t.append(destinationKeyList)\n\t\t\t\t\t.append(\") INITIALLY DEFERRED\")\n\t\t\t\t\t.toString());\n\t\t}\n\t}","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public void addCreateClauseForAttribute(EOAttribute attribute) {\n    NSDictionary<String, Object> userInfo = attribute.userInfo();\n    Object defaultValue = null;\n    if (userInfo != null) {\n      defaultValue = userInfo.valueForKey(\"er.extensions.eoattribute.default\");\n    }\n    String allowsNullClauseForConstraint = allowsNullClauseForConstraint(shouldAllowNull(attribute));\n    String sql;\n    if (defaultValue == null) {\n      sql = _NSStringUtilities.concat(this.quoteIdentifier(attribute.columnName()), \" \",\n          columnTypeStringForAttribute(attribute), \" \", allowsNullClauseForConstraint);\n    } else {\n      sql = _NSStringUtilities.concat(this.quoteIdentifier(attribute.columnName()), \" \",\n          columnTypeStringForAttribute(attribute), \" DEFAULT \", formatValueForAttribute(defaultValue, attribute), \" \", allowsNullClauseForConstraint);\n    }\n    appendItemToListString(sql, _listString());\n  }","id":59885,"modified_method":"public void addCreateClauseForAttribute(EOAttribute attribute) {\n      NSDictionary userInfo = attribute.userInfo();\n      Object defaultValue = null;\n      if (userInfo != null) {\n        defaultValue = userInfo.valueForKey(\"er.extensions.eoattribute.default\");\n      }\n      String allowsNullClauseForConstraint = allowsNullClauseForConstraint(shouldAllowNull(attribute));\n      String sql;\n      if (defaultValue == null) {\n          sql = _NSStringUtilities.concat(this.quoteIdentifier(attribute.columnName()), \" \", columnTypeStringForAttribute(attribute), \" \", allowsNullClauseForConstraint);\n      }\n      else {\n          sql = _NSStringUtilities.concat(this.quoteIdentifier(attribute.columnName()), \" \", columnTypeStringForAttribute(attribute), \" DEFAULT \", formatValueForAttribute(defaultValue, attribute), \" \", allowsNullClauseForConstraint);\n      }\n      appendItemToListString(sql, _listString());\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overriden to contruct a valid SQL92 JOIN clause as opposed to\n   * the Oracle-like SQL the superclass produces.\n   *\n   * @param leftName  the table name on the left side of the clause\n   * @param rightName the table name on the right side of the clause\n   * @param semantic  the join semantic\n   * @return  the join clause\n   */\n  @Override\n  public String assembleJoinClause(String leftName,\n      String rightName,\n      int semantic) {\n    if (!useAliases()) {\n      return super.assembleJoinClause(leftName, rightName, semantic);\n    }\n\n    String leftAlias = leftName.substring(0, leftName.indexOf(\".\"));\n    String rightAlias = rightName.substring(0, rightName.indexOf(\".\"));\n\n    NSArray<String> keys;\n    EOEntity rightEntity;\n    EOEntity leftEntity;\n    String relationshipKey = null;\n    EORelationship rel;\n\n\n    if (leftAlias.equals(\"t0\")) {\n      leftEntity = entity();\n    } else {\n      keys = aliasesByRelationshipPath().allKeysForObject(leftAlias);\n      relationshipKey = keys.count() > 0 ? keys.lastObject() : \"\";\n      leftEntity = entityForKeyPath(relationshipKey);\n    }\n\n    if (rightAlias.equals(\"t0\")) {\n      rightEntity = entity();\n    } else {\n      keys = aliasesByRelationshipPath().allKeysForObject(rightAlias);\n      relationshipKey = keys.count() > 0? keys.lastObject() : \"\";\n      rightEntity = entityForKeyPath(relationshipKey);\n    }\n    int dotIndex = relationshipKey.indexOf(\".\");\n    relationshipKey = dotIndex == -1\n    ? relationshipKey\n        : relationshipKey.substring(relationshipKey.lastIndexOf(\".\") + 1);\n    rel = rightEntity.anyRelationshipNamed( relationshipKey );\n    // fix from Michael M�ller for the case Foo.fooBars.bar has a Bar.foo relationship (instead of Bar.foos)\n    if (rel == null || rel.destinationEntity() != leftEntity) {\n      rel = leftEntity.anyRelationshipNamed(relationshipKey);\n    }\n    //timc 2006-02-26 IMPORTANT or quotes are ignored and mixed case field names won't work\n    String rightTable;\n    String leftTable; \n    if (enableIdentifierQuoting()) {\n      rightTable = rightEntity.valueForSQLExpression(this);\n      leftTable = leftEntity.valueForSQLExpression(this);\n    } else {\n      rightTable = rightEntity.externalName(); \n      leftTable = leftEntity.externalName(); \n    }\n    JoinClause jc = new JoinClause();\n\n    jc.table1 = leftTable + \" \" + leftAlias;\n\n    switch (semantic) {\n    case EORelationship.LeftOuterJoin:\n      jc.op = \" LEFT OUTER JOIN \";\n      break;\n    case EORelationship.RightOuterJoin:\n      jc.op = \" RIGHT OUTER JOIN \";\n      break;\n    case EORelationship.FullOuterJoin:\n      jc.op = \" FULL OUTER JOIN \";\n      break;\n    case EORelationship.InnerJoin:\n      jc.op = \" INNER JOIN \";\n      break;\n    }\n\n    jc.table2 = rightTable + \" \" + rightAlias;\n    NSArray<EOJoin> joins = rel.joins();\n    NSMutableArray<String> joinStrings = new NSMutableArray<String>(joins.count());\n    for (EOJoin currentJoin : joins) {\n      String left;\n      String right;\n      if(enableIdentifierQuoting()) {\n        left = leftAlias + \".\" + sqlStringForSchemaObjectName(currentJoin.sourceAttribute().columnName());\n        right = rightAlias + \".\" + sqlStringForSchemaObjectName(currentJoin.destinationAttribute().columnName());\n      } else {\n        left = leftAlias + \".\" + currentJoin.sourceAttribute().columnName();\n        right = rightAlias + \".\" + currentJoin.destinationAttribute().columnName();\n      }\n      joinStrings.addObject(left + \" = \" + right);\n    }\n    jc.joinCondition = \" ON \" + joinStrings.componentsJoinedByString(\" AND \");\n    if (!_alreadyJoined.containsObject(jc)) {\n      _alreadyJoined.insertObjectAtIndex(jc, 0);\n      return jc.toString();\n    }\n    return null;\n  }","id":59886,"modified_method":"/**\n     * Overriden to contruct a valid SQL92 JOIN clause as opposed to\n     * the Oracle-like SQL the superclass produces.\n     *\n     * @param leftName  the table name on the left side of the clause\n     * @param rightName the table name on the right side of the clause\n     * @param semantic  the join semantic\n     * @return  the join clause\n     */\n    public String assembleJoinClause(String leftName,\n                                     String rightName,\n                                     int semantic) {\n        if (!useAliases()) {\n            return super.assembleJoinClause(leftName, rightName, semantic);\n        }\n        \n        String leftAlias = leftName.substring(0, leftName.indexOf(\".\"));\n        String rightAlias = rightName.substring(0, rightName.indexOf(\".\"));\n        \n        NSArray k;\n        EOEntity rightEntity;\n        EOEntity leftEntity;\n        String relationshipKey = null;\n        EORelationship r;\n        \n        \n        if (leftAlias.equals(\"t0\")) {\n            leftEntity = entity();\n        } else {\n            k = aliasesByRelationshipPath().allKeysForObject(leftAlias);\n            relationshipKey = k.count()>0? (String)k.lastObject() : \"\";\n            leftEntity = entityForKeyPath(relationshipKey);\n        }\n        \n        if (rightAlias.equals(\"t0\")) {\n            rightEntity = entity();\n        } else {\n            k = aliasesByRelationshipPath().allKeysForObject(rightAlias);\n            relationshipKey = k.count()>0? (String)k.lastObject() : \"\";\n            rightEntity = entityForKeyPath(relationshipKey);\n        }\n        int dotIndex = relationshipKey.indexOf( \".\" );\n        relationshipKey = dotIndex == -1\n            ? relationshipKey\n            : relationshipKey.substring( relationshipKey.lastIndexOf( \".\" ) + 1 );\n        r = rightEntity.anyRelationshipNamed( relationshipKey );\n        // fix from Michael M�ller for the case Foo.fooBars.bar has a Bar.foo relationship (instead of Bar.foos)\n        if( r == null || r.destinationEntity() != leftEntity ) {\n            r = leftEntity.anyRelationshipNamed( relationshipKey );\n        }\n        //timc 2006-02-26 IMPORTANT or quotes are ignored and mixed case field names won't work\n        String rightTable;\n        String leftTable; \n        if(enableIdentifierQuoting()) {\n            rightTable = rightEntity.valueForSQLExpression(this);\n            leftTable = leftEntity.valueForSQLExpression(this);\n        } else {\n            rightTable = rightEntity.externalName(); \n            leftTable = leftEntity.externalName(); \n        }\n        JoinClause jc = new JoinClause();\n        \n        jc.table1 = leftTable + \" \" + leftAlias;\n        \n        switch (semantic) {\n            case EORelationship.LeftOuterJoin:\n                jc.op = \" LEFT OUTER JOIN \";\n                break;\n            case EORelationship.RightOuterJoin:\n                jc.op = \" RIGHT OUTER JOIN \";\n                break;\n            case EORelationship.FullOuterJoin:\n                jc.op = \" FULL OUTER JOIN \";\n                break;\n            case EORelationship.InnerJoin:\n                jc.op = \" INNER JOIN \";\n                break;\n        }\n        \n        jc.table2 = rightTable + \" \" + rightAlias;\n        NSArray joins = r.joins();\n        int joinsCount = joins.count();\n        NSMutableArray joinStrings = new NSMutableArray( joinsCount );\n        for( int i = 0; i < joinsCount; i++ ) {\n            EOJoin currentJoin = (EOJoin)joins.objectAtIndex(i);\n            String left;\n            String right;\n            if(enableIdentifierQuoting()) {\n                left = leftAlias +\".\"+ sqlStringForSchemaObjectName(currentJoin.sourceAttribute().columnName());\n                right =  rightAlias +\".\"+ sqlStringForSchemaObjectName(currentJoin.destinationAttribute().columnName());\n            } else {\n                left = leftAlias +\".\"+currentJoin.sourceAttribute().columnName();\n                right = rightAlias +\".\"+currentJoin.destinationAttribute().columnName();\n            }\n            joinStrings.addObject( left + \" = \" + right);\n        }\n        jc.joinCondition = \" ON \" + joinStrings.componentsJoinedByString( \" AND \" );\n        if( !_alreadyJoined.containsObject( jc ) ) {\n            _alreadyJoined.insertObjectAtIndex(jc, 0);\n            return jc.toString();\n        }\n        return null;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Takes an array of strings and quotes every single string, if set to do so\n   * \n   * @param a - array of strings\n   * \n   * @return array of quoted or unquoted strings, depends on enableIdentifierQuoting\n   */\n  private NSArray quoteArrayContents (NSArray<String> array) {\n    NSMutableArray<String> result = new NSMutableArray<String>(array.count());\n    for (String identifier : array) {\n      String quotedString = this.quoteIdentifier(identifier);\n      result.add(quotedString);\n    }\n    return result;\n  }","id":59887,"modified_method":"/**\n     * Takes an array of strings and quotes every single string, if set to do so\n     * \n     * @param a - array of strings\n     * \n     * @return array of quoted or unquoted strings, depends on enableIdentifierQuoting\n     */\n    @SuppressWarnings(\"unchecked\")\n\tprivate NSArray quoteArrayContents (NSArray a) {\n    \tEnumeration enumeration = a.objectEnumerator();\n    \tNSMutableArray result = new NSMutableArray();\n    \twhile (enumeration.hasMoreElements()) {\n    \t\tString identifier = (String) enumeration.nextElement();\n    \t\tString quotedString = this.quoteIdentifier(identifier);\n    \t\tresult.addObject(quotedString);\n    \t}\n    \treturn result;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overriden to handle correct placements of join conditions and \n   * to handle DISTINCT fetches with compareCaseInsensitiveA(De)scending sort orders.\n   *\n   * @param attributes    the attributes to select\n   * @param lock  flag for locking rows in the database\n   * @param qualifier the qualifier to restrict the selection\n   * @param fetchOrder    specifies the fetch order\n   * @param columnList    the SQL columns to be fetched\n   * @param tableList the the SQL tables to be fetched\n   * @param whereClause   the SQL where clause\n   * @param joinClause    the SQL join clause\n   * @param orderByClause the SQL sort order clause\n   * @param lockClause    the SQL lock clause\n   * @return  the select statement\n   */\n  @Override\n  public String assembleSelectStatementWithAttributes(NSArray attributes,\n      boolean lock,\n      EOQualifier qualifier,\n      NSArray fetchOrder,\n      String selectString,\n      String columnList,\n      String tableList,\n      String whereClause,\n      String joinClause,\n      String orderByClause,\n      String lockClause) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(selectString);\n    sb.append(columnList);\n    // AK: using DISTINCT with ORDER BY UPPER(foo) is an error if it is not also present in the columns list...\n    // This implementation sucks, but should be good enough for the normal case\n    if (selectString.indexOf(\" DISTINCT\") != -1) {\n      String[] columns = orderByClause.split(\",\");\n      for (int i = 0; i < columns.length; i++) {\n        String column = columns[i].replaceFirst(\"\\\\s+(ASC|DESC)\\\\s*\", \"\");\n        if (columnList.indexOf(column) == -1) {\n          sb.append(\", \");\n          sb.append(column);\n        }\n      }\n    }\n    sb.append(\" FROM \");\n    String fieldString;\n    if (_alreadyJoined.count() > 0) {\n      fieldString = joinClauseString();\n    } else {\n      fieldString = tableList;\n    }\n    sb.append(fieldString);\n    if ((whereClause != null && whereClause.length() > 0) ||\n        (joinClause != null && joinClause.length() > 0)) {\n      sb.append(\" WHERE \");\n      if (joinClause != null && joinClause.length() > 0) {\n        sb.append(joinClause);\n        if (whereClause != null && whereClause.length() > 0)\n          sb.append(\" AND \");\n      }\n\n      if (whereClause != null && whereClause.length() > 0) {\n        sb.append(whereClause);\n      }\n    }\n    if (orderByClause != null && orderByClause.length() > 0) {\n      sb.append(\" ORDER BY \");\n      sb.append(orderByClause);\n    }\n    if (lockClause != null && lockClause.length() > 0) {\n      sb.append(\" \");\n      sb.append(lockClause);\n    }\n    if (_fetchLimit != 0) {\n      sb.append(\" LIMIT \");\n      sb.append(_fetchLimit);\n    }        \n    return sb.toString();\n  }","id":59888,"modified_method":"/**\n     * Overriden to handle correct placements of join conditions and \n     * to handle DISTINCT fetches with compareCaseInsensitiveA(De)scending sort orders.\n     *\n     * @param attributes    the attributes to select\n     * @param lock  flag for locking rows in the database\n     * @param qualifier the qualifier to restrict the selection\n     * @param fetchOrder    specifies the fetch order\n     * @param columnList    the SQL columns to be fetched\n     * @param tableList the the SQL tables to be fetched\n     * @param whereClause   the SQL where clause\n     * @param joinClause    the SQL join clause\n     * @param orderByClause the SQL sort order clause\n     * @param lockClause    the SQL lock clause\n     * @return  the select statement\n     */\n    public String assembleSelectStatementWithAttributes(NSArray attributes,\n                                                        boolean lock,\n                                                        EOQualifier qualifier,\n                                                        NSArray fetchOrder,\n                                                        String selectString,\n                                                        String columnList,\n                                                        String tableList,\n                                                        String whereClause,\n                                                        String joinClause,\n                                                        String orderByClause,\n                                                        String lockClause) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(selectString);\n        sb.append(columnList);\n        // AK: using DISTINCT with ORDER BY UPPER(foo) is an error if it is not also present in the columns list...\n        // This implementation sucks, but should be good enough for the normal case\n        if(selectString.indexOf(\" DISTINCT\") != -1) {\n            String [] columns = orderByClause.split(\",\");\n            for(int i = 0; i < columns.length; i++) {\n                String column = columns[i].replaceFirst(\"\\\\s+(ASC|DESC)\\\\s*\", \"\");\n                if(columnList.indexOf(column) == -1) {\n                    sb.append(\", \");\n                    sb.append(column);\n                }\n            }\n        }\n        sb.append(\" FROM \");\n        String fieldString;\n        if (_alreadyJoined.count() > 0) {\n            fieldString = joinClauseString();\n        } else {\n            fieldString = tableList;\n        }\n        sb.append(fieldString);\n        if ((whereClause != null && whereClause.length() > 0) ||\n            (joinClause != null && joinClause.length() > 0)) {\n            sb.append(\" WHERE \");\n            if (joinClause != null && joinClause.length() > 0) {\n                sb.append(joinClause);\n                if (whereClause != null && whereClause.length() > 0)\n                    sb.append(\" AND \");\n            }\n            \n            if (whereClause != null && whereClause.length() > 0) {\n                sb.append(whereClause);\n            }\n        }\n        if (orderByClause != null && orderByClause.length() > 0) {\n            sb.append(\" ORDER BY \");\n            sb.append(orderByClause);\n        }\n        if (lockClause != null && lockClause.length() > 0) {\n            sb.append(\" \");\n            sb.append(lockClause);\n        }\n        if (_fetchLimit != 0) {\n            sb.append(\" LIMIT \");\n            sb.append(_fetchLimit);\n        }        \n        return sb.toString();\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * cug: Quick hack for bug in WebObjects 5.4 where the \"not null\" statement is added without a space, \n   * and \"addCreateClauseForAttribute\" is not called anymore. Will probably change.\n   */\n  @Override\n  public String allowsNullClauseForConstraint(boolean allowsNull) {\n    if (allowsNull) {\n      return \"\";\n    }\n    Object value = jdbcInfo().objectForKey(\"NON_NULLABLE_COLUMNS\");\n    if (value != null && value.equals(\"T\")) {\n      return \" NOT NULL\";\n    }\n    return \"\";\n  }","id":59889,"modified_method":"/**\n     * cug: Quick hack for bug in WebObjects 5.4 where the \"not null\" statement is added without a space, \n     * and \"addCreateClauseForAttribute\" is not called anymore. Will probably change.\n     */\n    public String allowsNullClauseForConstraint(boolean allowsNull)\n    {\n        if(allowsNull)\n            return \"\";\n        Object value = jdbcInfo().objectForKey(\"NON_NULLABLE_COLUMNS\");\n        if(value != null && value.equals(\"T\"))\n            return \" NOT NULL\";\n        else\n            return \"\";\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Utility that traverses a key path to find the last destination entity\n   *\n   * @param keyPath the key path\n   * @return the entity at the end of the keypath\n   */\n  private EOEntity entityForKeyPath(String keyPath) {\n    NSArray<String> keys = NSArray.componentsSeparatedByString(keyPath, \".\");\n    EOEntity entity = entity();\n\n    for (String key : keys) {\n      EORelationship rel = entity.anyRelationshipNamed(key);\n      if (rel == null) {\n        // it may be an attribute \n        if (entity.anyAttributeNamed(key) != null) {\n          break;\n        }\n        throw new IllegalArgumentException(\"relationship \" + keyPath + \" generated null\");\n      }\n      entity = rel.destinationEntity();\n    }\n    return entity;\n  }","id":59890,"modified_method":"/**\n     * Utility that traverses a key path to find the last destination entity\n     *\n     * @param keyPath   the key path\n     * @return  the entity at the end of the keypath\n     */\n    private EOEntity entityForKeyPath(String keyPath) {\n        NSArray keys = NSArray.componentsSeparatedByString(keyPath, \".\");\n        EOEntity ent = entity();\n        \n        for (int i = 0; i < keys.count(); i++) {\n            String k = (String)keys.objectAtIndex(i);\n            EORelationship rel = ent.anyRelationshipNamed(k);\n            if (rel == null) {\n                // it may be an attribute \n                if (ent.anyAttributeNamed(k) != null) {\n                    break;\n                }\n                throw new IllegalArgumentException(\"relationship \" + keyPath + \" generated null\");\n            }\n            ent = rel.destinationEntity();\n        }\n        return ent;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overrides the parent implementation to compose the final string\n   * expression for the join clauses.\n   */\n  @Override\n  public String joinClauseString() {\n    NSMutableSet<String> seenIt = new NSMutableSet<String>();\n    StringBuilder sb = new StringBuilder();\n    JoinClause jc;\n    EOSortOrdering.sortArrayUsingKeyOrderArray(_alreadyJoined,\n        new NSArray<EOSortOrdering>(EOSortOrdering.sortOrderingWithKey(\"sortKey\", EOSortOrdering.CompareCaseInsensitiveAscending)));\n    if (_alreadyJoined.count() > 0) {\n      jc = _alreadyJoined.objectAtIndex(0);\n\n      sb.append(jc);\n      seenIt.add(jc.table1);\n      seenIt.add(jc.table2);\n    }\n\n    for (int i = 1; i < _alreadyJoined.count(); i++) {\n      jc = _alreadyJoined.objectAtIndex(i);\n\n      sb.append(jc.op);\n      if (!seenIt.contains(jc.table1)) {\n        sb.append(jc.table1);\n        seenIt.add(jc.table1);\n      } else if (!seenIt.contains(jc.table2)) {\n        sb.append(jc.table2);\n        seenIt.add(jc.table2);\n      }\n      sb.append(jc.joinCondition);\n    }\n    return sb.toString();\n  }","id":59891,"modified_method":"/**\n     * Overrides the parent implementation to compose the final string\n     * expression for the join clauses.\n     */\n    public String joinClauseString() {\n        NSMutableDictionary seenIt = new NSMutableDictionary();\n        StringBuffer sb = new StringBuffer();\n        JoinClause jc;\n        EOSortOrdering.sortArrayUsingKeyOrderArray\n            ( _alreadyJoined, new NSArray( EOSortOrdering.sortOrderingWithKey( \"sortKey\", EOSortOrdering.CompareCaseInsensitiveAscending ) ) );\n        if (_alreadyJoined.count() > 0) {\n            jc = (JoinClause)_alreadyJoined.objectAtIndex(0);\n            \n            sb.append(jc);\n            seenIt.setObjectForKey(Boolean.TRUE, jc.table1);\n            seenIt.setObjectForKey(Boolean.TRUE, jc.table2);\n        }\n        \n        for (int i = 1; i < _alreadyJoined.count(); i++) {\n            jc = (JoinClause)_alreadyJoined.objectAtIndex(i);\n            \n            sb.append(jc.op);\n            if (seenIt.objectForKey(jc.table1) == null) {\n                sb.append(jc.table1);\n                seenIt.setObjectForKey(Boolean.TRUE, jc.table1);\n            }\n            else if (seenIt.objectForKey(jc.table2) == null) {\n                sb.append(jc.table2);\n                seenIt.setObjectForKey(Boolean.TRUE, jc.table2);\n            }\n            sb.append(jc.joinCondition);\n        }\n        return sb.toString();\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Overridden so we can get the fetch limit from the fetchSpec.\n   *\n   * @param nsarray   the array of attributes\n   * @param flag  locking flag\n   * @param eofetchspecification  the fetch specification\n   */\n  @Override\n  public void prepareSelectExpressionWithAttributes(NSArray<EOAttribute> attributes, boolean lock, EOFetchSpecification fetchSpec) {\n    if (!fetchSpec.promptsAfterFetchLimit()) {\n      _fetchLimit = fetchSpec.fetchLimit();\n    }\n    super.prepareSelectExpressionWithAttributes(attributes, lock, fetchSpec);\n  }","id":59892,"modified_method":"/**\n     * Overridden so we can get the fetch limit from the fetchSpec.\n     *\n     * @param nsarray   the array of attributes\n     * @param flag  locking flag\n     * @param eofetchspecification  the fetch specification\n     */\n    public void prepareSelectExpressionWithAttributes(NSArray nsarray, boolean flag, EOFetchSpecification eofetchspecification) {\n        if(!eofetchspecification.promptsAfterFetchLimit()) {\n            _fetchLimit = eofetchspecification.fetchLimit();\n        }\n        super.prepareSelectExpressionWithAttributes(nsarray, flag, eofetchspecification);\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Replaces a given string by another string in a string.\n   * @param old string to be replaced\n   * @param newString to be inserted\n   * @param buffer string to have the replacement done on it\n   * @return string after having all of the replacement done.\n   */\n  public static String replaceStringByStringInString(String old, String newString, String buffer) {\n    int begin, end;\n    int oldLength = old.length();\n    int length = buffer.length();\n    StringBuilder convertedString = new StringBuilder(length + 100);\n\n    begin = 0;\n    while (begin < length) {\n      end = buffer.indexOf(old, begin);\n      if (end == -1) {\n        convertedString.append(buffer.substring(begin));\n        break;\n      }\n      if (end == 0) {\n        convertedString.append(newString);\n      } else {\n        convertedString.append(buffer.substring(begin, end));\n        convertedString.append(newString);\n      }\n      begin = end + oldLength;\n    }\n    return convertedString.toString();\n  }","id":59893,"modified_method":"/**\n     * Replaces a given string by another string in a string.\n     * @param old string to be replaced\n     * @param newString to be inserted\n     * @param buffer string to have the replacement done on it\n     * @return string after having all of the replacement done.\n     */\n    public static String replaceStringByStringInString(String old, String newString, String buffer) {\n        int begin, end;\n        int oldLength = old.length();\n        int length = buffer.length();\n        StringBuffer convertedString = new StringBuffer(length + 100);\n\n        begin = 0;\n        while(begin < length)\n        {\n            end = buffer.indexOf(old, begin);\n            if(end == -1)\n            {\n                convertedString.append(buffer.substring(begin));\n                break;\n            }\n            if(end == 0)\n                convertedString.append(newString);\n            else {\n                convertedString.append(buffer.substring(begin, end));\n                convertedString.append(newString);\n            }\n            begin = end+oldLength;\n        }\n        return convertedString.toString();\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Checks whether primary key generation can be supported for <code>entity<\/code>\n   *\n   * @param entity    the entity to be checked\n   * @return  yes/no\n   */\n  private boolean isPrimaryKeyGenerationNotSupported(EOEntity entity) {\n    return entity.primaryKeyAttributes().count() > 1 || (entity.primaryKeyAttributes().lastObject()).adaptorValueType() != EOAttribute.AdaptorNumberType;\n  }","id":59894,"modified_method":"/**\n   * Checks whether primary key generation can be supported for <code>entity<\/code>\n   *\n   * @param entity    the entity to be checked\n   * @return  yes/no\n   */\n  private boolean isPrimaryKeyGenerationNotSupported(EOEntity entity) {\n    return entity.primaryKeyAttributes().count() > 1 || ((EOAttribute) entity.primaryKeyAttributes().lastObject()).adaptorValueType() != EOAttribute.AdaptorNumberType;\n  }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/** \n   * Overrides the parent implementation to provide a more efficient mechanism for generating primary keys,\n   * while generating the primary key support on the fly.\n   *\n   * @param count the batch size\n   * @param entity the entity requesting primary keys\n   * @param channel open JDBCChannel\n   * @return NSArray of NSDictionary where each dictionary corresponds to a unique  primary key value\n   */\n  @Override\n  public NSArray newPrimaryKeys(int count, EOEntity entity, JDBCChannel channel) {\n    if (isPrimaryKeyGenerationNotSupported(entity)) {\n      return null;\n    }\n\n    EOAttribute attribute = entity.primaryKeyAttributes().lastObject();\n    String attrName = attribute.name();\n    boolean isIntType = \"i\".equals(attribute.valueType());\n\n    NSMutableArray<NSDictionary<String, Number>> results = new NSMutableArray<NSDictionary<String, Number>>(count);\n    String sequenceName = _sequenceNameForEntity(entity);\n    PostgresqlExpression expression = new PostgresqlExpression(entity);\n\n    // MS: The original implementation of this did something like select setval('seq', nextval('seq') + count)\n    // which apparently is not an atomic operation, which causes terrible problems under load with multiple\n    // instances.  The new implementation does batch requests for keys.\n    int keysPerBatch = 20;\n    boolean succeeded = false;\n    for (int tries = 0; !succeeded && tries < 2; tries++) {\n      while (results.count() < count) {\n        try {\n          StringBuilder sql = new StringBuilder();\n          sql.append(\"SELECT \");\n          for (int keyBatchNum = Math.min(keysPerBatch, count - results.count()) - 1; keyBatchNum >= 0; keyBatchNum --) {\n            sql.append(\"NEXTVAL('\" + sequenceName + \"') AS KEY\" + keyBatchNum);\n            if (keyBatchNum > 0) {\n              sql.append(\", \");\n            }\n          }\n          expression.setStatement(sql.toString());\n          channel.evaluateExpression(expression);\n          try {\n            NSDictionary<String, Object> row;\n            while ((row = channel.fetchRow()) != null) {\n              for (Object obj : row.allValues()) {\n                Number pkObj = (Number)obj;\n                Number pk;\n                if (isIntType) {\n                  pk = Integer.valueOf(pkObj.intValue());\n                }\n                else {\n                  pk = Long.valueOf(pkObj.longValue());\n                }\n                results.addObject(new NSDictionary<String, Number>(pk, attrName));\n              }            \n            }\n          }\n          finally {\n            channel.cancelFetch();\n          }\n          succeeded = true;\n        }\n        catch (JDBCAdaptorException ex) {\n          //timc 2006-11-06 Check if sequence name contains schema name\n          int dotIndex = sequenceName.indexOf(\".\");\n          if (dotIndex == -1) {\n            expression.setStatement(\"select count(*) from pg_class where relname = '\" + sequenceName.toLowerCase() + \"' and relkind = 'S'\");\n          }\n          else {\n            String schemaName = sequenceName.substring(0, dotIndex);\n            String sequenceNameOnly = sequenceName.toLowerCase().substring(dotIndex + 1);\n            expression.setStatement(\"select count(c.*) from pg_catalog.pg_class c, pg_catalog.pg_namespace n where c.relnamespace=n.oid AND c.relkind = 'S' AND c.relname='\" + sequenceNameOnly + \"' AND n.nspname='\" + schemaName + \"'\");\n          }\n          channel.evaluateExpression(expression);\n          NSDictionary<String, Object> row;\n          try {\n            row = channel.fetchRow();\n          }\n          finally {\n            channel.cancelFetch();\n          }\n          // timc 2006-11-06 row.objectForKey(\"COUNT\") returns BigDecimal not Long\n          //if( new Long( 0 ).equals( row.objectForKey( \"COUNT\" ) ) ) {\n          Number numCount = (Number) row.objectForKey(\"COUNT\");\n          if (numCount != null && numCount.longValue() == 0L) {\n            EOSynchronizationFactory f = createSynchronizationFactory();\n            NSArray<EOSQLExpression> statements = f.primaryKeySupportStatementsForEntityGroup(new NSArray<EOEntity>(entity));\n            for (EOSQLExpression statement : statements) {\n              channel.evaluateExpression(statement);\n            }\n          }\n          else if (numCount == null) {\n            throw new IllegalStateException(\"Couldn't call sequence \" + sequenceName + \" and couldn't get sequence information from pg_class: \" + ex);\n          }\n          else {\n            throw new IllegalStateException(\"Caught exception, but sequence did already exist: \" + ex);\n          }\n        }\n      }\n    }\n\n    if (results.count() != count) {\n      throw new IllegalStateException(\"Unable to generate primary keys from the sequence for \" + entity + \".\");\n    }\n\n    return results;\n  }","id":59895,"modified_method":"/** \n   * Overrides the parent implementation to provide a more efficient mechanism for generating primary keys,\n   * while generating the primary key support on the fly.\n   *\n   * @param count the batch size\n   * @param entity the entity requesting primary keys\n   * @param channel open JDBCChannel\n   * @return NSArray of NSDictionary where each dictionary corresponds to a unique  primary key value\n   */\n  public NSArray newPrimaryKeys(int count, EOEntity entity, JDBCChannel channel) {\n    if (isPrimaryKeyGenerationNotSupported(entity)) {\n      return null;\n    }\n    \n    EOAttribute attribute = (EOAttribute) entity.primaryKeyAttributes().lastObject();\n    String attrName = attribute.name();\n    boolean isIntType = \"i\".equals(attribute.valueType());\n\n    NSMutableArray results = new NSMutableArray(count);\n    String sequenceName = _sequenceNameForEntity(entity);\n    PostgresqlExpression expression = new PostgresqlExpression(entity);\n    \n    // MS: The original implementation of this did something like select setval('seq', nextval('seq') + count)\n    // which apparently is not an atomic operation, which causes terrible problems under load with multiple\n    // instances.  The new implementation does batch requests for keys.\n    int keysPerBatch = 20;\n    boolean succeeded = false;\n    for (int tries = 0; !succeeded && tries < 2; tries++) {\n      while (results.count() < count) {\n        try {\n          StringBuffer sql = new StringBuffer();\n          sql.append(\"SELECT \");\n          for (int keyBatchNum = Math.min(keysPerBatch, count - results.count()) - 1; keyBatchNum >= 0; keyBatchNum --) {\n            sql.append(\"NEXTVAL('\" + sequenceName + \"') AS KEY\" + keyBatchNum);\n            if (keyBatchNum > 0) {\n              sql.append(\", \");\n            }\n          }\n          expression.setStatement(sql.toString());\n          channel.evaluateExpression(expression);\n          try {\n            NSDictionary row;\n            while ((row = channel.fetchRow()) != null) {\n              Enumeration pksEnum = row.allValues().objectEnumerator();\n              while (pksEnum.hasMoreElements()) {\n                Number pkObj = (Number)pksEnum.nextElement();\n                Number pk;\n                if (isIntType) {\n                  pk = new Integer(pkObj.intValue());\n                }\n                else {\n                  pk = new Long(pkObj.longValue());\n                }\n                results.addObject(new NSDictionary(pk, attrName));\n              }            \n            }\n          }\n          finally {\n            channel.cancelFetch();\n          }\n          succeeded = true;\n        }\n        catch (JDBCAdaptorException ex) {\n          //timc 2006-11-06 Check if sequence name contains schema name\n          int dotIndex = sequenceName.indexOf(\".\");\n          if (dotIndex == -1) {\n            expression.setStatement(\"select count(*) from pg_class where relname = '\" + sequenceName.toLowerCase() + \"' and relkind = 'S'\");\n          }\n          else {\n            String schemaName = sequenceName.substring(0, dotIndex);\n            String sequenceNameOnly = sequenceName.toLowerCase().substring(dotIndex + 1);\n            expression.setStatement(\"select count(c.*) from pg_catalog.pg_class c, pg_catalog.pg_namespace n where c.relnamespace=n.oid AND c.relkind = 'S' AND c.relname='\" + sequenceNameOnly + \"' AND n.nspname='\" + schemaName + \"'\");\n          }\n          channel.evaluateExpression(expression);\n          NSDictionary row;\n          try {\n            row = channel.fetchRow();\n          }\n          finally {\n            channel.cancelFetch();\n          }\n          // timc 2006-11-06 row.objectForKey(\"COUNT\") returns BigDecimal not Long\n          //if( new Long( 0 ).equals( row.objectForKey( \"COUNT\" ) ) ) {\n          Number numCount = (Number) row.objectForKey(\"COUNT\");\n          if (numCount != null && numCount.longValue() == 0L) {\n            EOSynchronizationFactory f = createSynchronizationFactory();\n            NSArray statements = f.primaryKeySupportStatementsForEntityGroup(new NSArray(entity));\n            int stmCount = statements.count();\n            for (int i = 0; i < stmCount; i++) {\n              channel.evaluateExpression((EOSQLExpression) statements.objectAtIndex(i));\n            }\n          }\n          else if (numCount == null) {\n            throw new IllegalStateException(\"Couldn't call sequence \" + sequenceName + \" and couldn't get sequence information from pg_class: \" + ex);\n          }\n          else {\n            throw new IllegalStateException(\"Caught exception, but sequence did already exist: \" + ex);\n          }\n        }\n      }\n    }\n    \n    if (results.count() != count) {\n      throw new IllegalStateException(\"Unable to generate primary keys from the sequence for \" + entity + \".\");\n    }\n    \n    return results;\n  }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * <P>This is usually extracted from the the database using\n   * JDBC, but this is really inconvenient for users who are\n   * trying to generate SQL at some.  A specific version of the\n   * data has been written into the property list of the\n   * framework and this can be used as a hard-coded equivalent.\n   * <\/P> \n   */\n  @Override\n  public NSDictionary jdbcInfo() {\n    // you can swap this code out to write the property list out in order\n    // to get a fresh copy of the JDBCInfo.plist.\n    //    try {\n    //      String jdbcInfoS = NSPropertyListSerialization.stringFromPropertyList(super.jdbcInfo());\n    //      FileOutputStream fos = new FileOutputStream(\"/tmp/JDBCInfo.plist\");\n    //      fos.write(jdbcInfoS.getBytes());\n    //      fos.close();\n    //    }\n    //    catch(Exception e) {\n    //      throw new IllegalStateException(\"problem writing JDBCInfo.plist\",e);\n    //    }\n\n    NSDictionary jdbcInfo;\n    // have a look at the JDBC connection URL to see if the flag has been set to\n    // specify that the hard-coded jdbcInfo information should be used.\n    if (shouldUseBundledJdbcInfo()) {\n      if(NSLog.debugLoggingAllowedForLevel(NSLog.DebugLevelDetailed)) {\n        NSLog.debug.appendln(\"Loading jdbcInfo from JDBCInfo.plist as opposed to using the JDBCPlugIn default implementation.\");\n      }\n\n      InputStream jdbcInfoStream = NSBundle.bundleForClass(getClass()).inputStreamForResourcePath(\"JDBCInfo.plist\");\n      if (jdbcInfoStream == null) {\n        throw new IllegalStateException(\"Unable to find 'JDBCInfo.plist' in this plugin jar.\");\n      }\n\n      try {\n        jdbcInfo = (NSDictionary) NSPropertyListSerialization.propertyListFromData(new NSData(jdbcInfoStream, 2048), \"US-ASCII\");\n      }\n      catch (IOException e) {\n        throw new RuntimeException(\"Failed to load 'JDBCInfo.plist' from this plugin jar.\", e);\n      } finally {\n        try {\n          jdbcInfoStream.close();\n        } catch (IOException e) {\n          throw new RuntimeException(\"Failed to close input stream for 'JDBCInfo.plist'.\", e);\n        }\n      }\n    }\n    else {\n      jdbcInfo = super.jdbcInfo();\n    }\n    return jdbcInfo;\n  }","id":59896,"modified_method":"/**\n   * <P>This is usually extracted from the the database using\n   * JDBC, but this is really inconvenient for users who are\n   * trying to generate SQL at some.  A specific version of the\n   * data has been written into the property list of the\n   * framework and this can be used as a hard-coded equivalent.\n   * <\/P> \n   */\n  public NSDictionary jdbcInfo() {\n    // you can swap this code out to write the property list out in order\n    // to get a fresh copy of the JDBCInfo.plist.\n//    try {\n//      String jdbcInfoS = NSPropertyListSerialization.stringFromPropertyList(super.jdbcInfo());\n//      FileOutputStream fos = new FileOutputStream(\"/tmp/JDBCInfo.plist\");\n//      fos.write(jdbcInfoS.getBytes());\n//      fos.close();\n//    }\n//    catch(Exception e) {\n//      throw new IllegalStateException(\"problem writing JDBCInfo.plist\",e);\n//    }\n\n    NSDictionary jdbcInfo;\n    // have a look at the JDBC connection URL to see if the flag has been set to\n    // specify that the hard-coded jdbcInfo information should be used.\n    if(shouldUseBundledJdbcInfo()) {\n      if(NSLog.debugLoggingAllowedForLevel(NSLog.DebugLevelDetailed)) {\n        NSLog.debug.appendln(\"Loading jdbcInfo from JDBCInfo.plist as opposed to using the JDBCPlugIn default implementation.\");\n      }\n      \n      InputStream jdbcInfoStream = NSBundle.bundleForClass(getClass()).inputStreamForResourcePath(\"JDBCInfo.plist\");\n      if (jdbcInfoStream == null) {\n        throw new IllegalStateException(\"Unable to find 'JDBCInfo.plist' in this plugin jar.\");\n      }\n\n      try {\n        jdbcInfo = (NSDictionary) NSPropertyListSerialization.propertyListFromData(new NSData(jdbcInfoStream, 2048), \"US-ASCII\");\n      }\n      catch (IOException e) {\n        throw new RuntimeException(\"Failed to load 'JDBCInfo.plist' from this plugin jar.\", e);\n      }\n    }\n    else {\n      jdbcInfo = super.jdbcInfo();\n    }\n    return jdbcInfo;\n  }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToRenameTableNamed(String tableName, String newName, NSDictionary options) {\n    return new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n        + \" rename to \" + formatTableName(newName)));\n  }","id":59897,"modified_method":"@Override\n    public NSArray statementsToRenameTableNamed(String tableName, String newName, NSDictionary options) {\n    \treturn new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" rename to \" + formatTableName(newName)));\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Replaces a given string by another string in a string.\n   * \n   * @param old\n   *            string to be replaced\n   * @param newString\n   *            to be inserted\n   * @param buffer\n   *            string to have the replacement done on it\n   * @return string after having all of the replacement done.\n   */\n  public static String replaceStringByStringInString(String old, String newString, String buffer) {\n    int begin, end;\n    int oldLength = old.length();\n    int length = buffer.length();\n    StringBuilder convertedString = new StringBuilder(length + 100);\n\n    begin = 0;\n    while (begin < length) {\n      end = buffer.indexOf(old, begin);\n      if (end == -1) {\n        convertedString.append(buffer.substring(begin));\n        break;\n      }\n      if (end == 0) {\n        convertedString.append(newString);\n      } else {\n        convertedString.append(buffer.substring(begin, end));\n        convertedString.append(newString);\n      }\n      begin = end + oldLength;\n    }\n    return convertedString.toString();\n  }","id":59898,"modified_method":"/**\n\t * Replaces a given string by another string in a string.\n\t * \n\t * @param old\n\t *            string to be replaced\n\t * @param newString\n\t *            to be inserted\n\t * @param buffer\n\t *            string to have the replacement done on it\n\t * @return string after having all of the replacement done.\n\t */\n    public static String replaceStringByStringInString(String old, String newString, String buffer) {\n        int begin, end;\n        int oldLength = old.length();\n        int length = buffer.length();\n        StringBuffer convertedString = new StringBuffer(length + 100);\n\n        begin = 0;\n        while (begin < length) {\n            end = buffer.indexOf(old, begin);\n            if (end == -1) {\n                convertedString.append(buffer.substring(begin));\n                break;\n            }\n            if (end == 0)\n                convertedString.append(newString);\n            else {\n                convertedString.append(buffer.substring(begin, end));\n                convertedString.append(newString);\n            }\n            begin = end + oldLength;\n        }\n        return convertedString.toString();\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Generates the PostgreSQL-specific SQL statements to drop the primary key\n   * support.\n   * \n   * @param entityGroup\n   *            an array of <code>EOEntity<\/code> objects\n   * @return the array of SQL statements\n   */\n  @Override\n  public NSArray dropPrimaryKeySupportStatementsForEntityGroup(NSArray<EOEntity> entityGroup) {\n    NSMutableSet<String> sequenceNames = new NSMutableSet<String>();\n    NSMutableArray<PostgresqlExpression> results = new NSMutableArray<PostgresqlExpression>();\n    for (EOEntity entity : entityGroup) {\n      String sequenceName = PostgresqlPlugIn._sequenceNameForEntity(entity);\n      if (!sequenceNames.containsObject(sequenceName)) {\n        sequenceNames.addObject(sequenceName);\n        String sql = \"DROP SEQUENCE \" + sequenceName + \" CASCADE\";\n        results.addObject(createExpression(entity, sql));\n      }\n    }\n    return results;\n  }","id":59899,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to drop the primary key\n     * support.\n     * \n     * @param entityGroup\n     *            an array of <code>EOEntity<\/code> objects\n     * @return the array of SQL statements\n     */\n    public NSArray dropPrimaryKeySupportStatementsForEntityGroup(NSArray entityGroup) {\n        NSMutableSet sequenceNames = new NSMutableSet();\n        NSMutableArray results = new NSMutableArray();\n        int count = entityGroup.count();\n        for (int i = 0; i < count; i++) {\n            EOEntity entity = (EOEntity) entityGroup.objectAtIndex(i);\n            String sequenceName = PostgresqlPlugIn._sequenceNameForEntity(entity);\n            if (!sequenceNames.containsObject(sequenceName)) {\n                sequenceNames.addObject(sequenceName);\n                String sql = \"DROP SEQUENCE \" + sequenceName + \" CASCADE\";\n                results.addObject(createExpression(entity, sql));\n            }\n        }\n        return results;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Generates the PostgreSQL-specific SQL statements to enforce primary key\n   * constraints.\n   * \n   * @param entityGroup\n   *            an array of <code>EOEntity<\/code> objects\n   * @return the array of SQL statements\n   */\n  @Override\n  public NSArray primaryKeyConstraintStatementsForEntityGroup(NSArray<EOEntity> entityGroup) {\n    NSMutableArray<PostgresqlExpression> results = new NSMutableArray<PostgresqlExpression>();\n    NSArray<EOAttribute> priKeyAttributes;\n    EOAttribute priKeyAttribute;\n\n    for (EOEntity entity : entityGroup) {\n      if (!entityUsesSeparateTable(entity)) {\n        continue;\n      }\n      // timc 2006-11-06 create result here so we can check for\n      // enableIdentifierQuoting while building the statement\n      PostgresqlExpression result = new PostgresqlExpression(entity);\n      String constraintName = result.sqlStringForSchemaObjectName(externalNameForEntityWithoutSchema(entity) + \"_pk\");\n      String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n\n      StringBuilder statement = new StringBuilder(\"ALTER TABLE \");\n      statement.append(tableName);\n      statement.append(\" ADD CONSTRAINT \");\n      statement.append(constraintName);\n      statement.append(\" PRIMARY KEY (\");\n      priKeyAttributes = entity.primaryKeyAttributes();\n      int priKeyAttributeCount = priKeyAttributes.count();\n      for (int j = 0; j < priKeyAttributeCount; j++) {\n        priKeyAttribute = priKeyAttributes.objectAtIndex(j);\n        String attributeName = result.sqlStringForAttribute(priKeyAttribute);\n        statement.append(attributeName);\n        if (j < priKeyAttributeCount - 1) {\n          statement.append(\", \");\n        } else {\n          statement.append(\")\");\n        }\n      }\n      result.setStatement(statement.toString());\n      results.addObject(result);\n    }\n    return results;\n  }","id":59900,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to enforce primary key\n     * constraints.\n     * \n     * @param entityGroup\n     *            an array of <code>EOEntity<\/code> objects\n     * @return the array of SQL statements\n     */\n    public NSArray primaryKeyConstraintStatementsForEntityGroup(NSArray entityGroup) {\n        EOEntity entity;\n        int count;\n        int i;\n        NSMutableArray results;\n        NSArray priKeyAttributes;\n        EOAttribute priKeyAttribute;\n        int priKeyAttributeCount;\n        int j;\n\n        results = new NSMutableArray();\n        count = entityGroup.count();\n        for (i = 0; i < count; i++) {\n            entity = (EOEntity) entityGroup.objectAtIndex(i);\n            if (!entityUsesSeparateTable(entity))\n                continue;\n            // timc 2006-11-06 create result here so we can check for\n            // enableIdentifierQuoting while building the statement\n            PostgresqlExpression result = new PostgresqlExpression(entity);\n            String constraintName = result.sqlStringForSchemaObjectName(externalNameForEntityWithoutSchema(entity) + \"_pk\");\n            String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n\n            StringBuffer statement = new StringBuffer(\"ALTER TABLE \");\n            statement.append(tableName);\n            statement.append(\" ADD CONSTRAINT \");\n            statement.append(constraintName);\n            statement.append(\" PRIMARY KEY (\");\n            priKeyAttributes = entity.primaryKeyAttributes();\n            priKeyAttributeCount = priKeyAttributes.count();\n            for (j = 0; j < priKeyAttributeCount; j++) {\n                priKeyAttribute = (EOAttribute) priKeyAttributes.objectAtIndex(j);\n                String attributeName = result.sqlStringForAttribute(priKeyAttribute);\n                statement.append(attributeName);\n                if (j < priKeyAttributeCount - 1) {\n                    statement.append(\", \");\n                } else {\n                    statement.append(\")\");\n                }\n            }\n            result.setStatement(statement.toString());\n            results.addObject(result);\n        }\n        return results;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Generates the PostgreSQL-specific SQL statements to drop tables.\n   * \n   * @param entityGroup\n   *            an array of <code>EOEntity<\/code> objects\n   * @return the array of SQL statements\n   */\n  @Override\n  public NSArray dropTableStatementsForEntityGroup(NSArray<EOEntity> entityGroup) {\n    NSMutableArray<PostgresqlExpression> results = new NSMutableArray<PostgresqlExpression>();\n    for (EOEntity entity : entityGroup) {\n      // timc 2006-11-06 create result here so we can check for\n      // enableIdentifierQuoting while building the statement\n      PostgresqlExpression result = new PostgresqlExpression(entity);\n      String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n      if (entityUsesSeparateTable(entity)) {\n        result.setStatement(\"DROP TABLE \" + tableName + \" CASCADE\");\n        results.addObject(result);\n      }\n    }\n    return results;\n  }","id":59901,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to drop tables.\n     * \n     * @param entityGroup\n     *            an array of <code>EOEntity<\/code> objects\n     * @return the array of SQL statements\n     */\n    public NSArray dropTableStatementsForEntityGroup(NSArray entityGroup) {\n        NSMutableArray results = new NSMutableArray();\n        int count = entityGroup.count();\n        for (int i = 0; i < count; i++) {\n            EOEntity entity = (EOEntity) entityGroup.objectAtIndex(i);\n            // timc 2006-11-06 create result here so we can check for\n            // enableIdentifierQuoting while building the statement\n            PostgresqlExpression result = new PostgresqlExpression(entity);\n            String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n            if(entityUsesSeparateTable(entity)) {\n                result.setStatement(\"DROP TABLE \" + tableName + \" CASCADE\");\n                results.addObject(result);\n            }\n        }\n        return results;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Generates the PostgreSQL-specific SQL statements to create the primary\n   * key support.\n   * \n   * @param entityGroup\n   *            an array of <code>EOEntity<\/code> objects\n   * @return the array of SQL statements\n   */\n  @Override\n  public NSArray primaryKeySupportStatementsForEntityGroup(NSArray<EOEntity> entityGroup) {\n    NSMutableArray<PostgresqlExpression> results = new NSMutableArray<PostgresqlExpression>();\n    NSArray<EOAttribute> priKeyAttributes;\n    EOAttribute priKeyAttribute;\n    String sequenceName;\n\n    NSMutableSet<String> sequenceNames = new NSMutableSet<String>();\n    for (EOEntity entity : entityGroup) {\n      priKeyAttributes = entity.primaryKeyAttributes();\n      if (priKeyAttributes.count() == 1) {\n        priKeyAttribute = priKeyAttributes.objectAtIndex(0);\n\n        // Q: Don't create a sequence for non number primary keys\n        if (priKeyAttribute.adaptorValueType() != EOAttribute.AdaptorNumberType) {\n          continue;\n        }\n        String sql;\n\n        sequenceName = PostgresqlPlugIn._sequenceNameForEntity(entity);\n        if (!sequenceNames.containsObject(sequenceName)) {\n          sequenceNames.addObject(sequenceName);\n          // timc 2006-11-06 create result here so we can check for\n          // enableIdentifierQuoting while building the statement\n          PostgresqlExpression result = new PostgresqlExpression(entity);\n          String attributeName = result.sqlStringForAttribute(priKeyAttribute);\n          String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n\n          sql = \"CREATE SEQUENCE \" + sequenceName;\n          results.addObject(createExpression(entity, sql));\n\n          sql = \"CREATE TEMP TABLE EOF_TMP_TABLE AS SELECT SETVAL('\" + sequenceName + \"', (SELECT MAX(\" + attributeName + \") FROM \" + tableName + \"))\";\n          results.addObject(createExpression(entity, sql));\n\n          // In Entity Modeler, we want to skip over the drop statement\n          if (!isInEntityModeler(entity.model())) {\n            sql = \"DROP TABLE EOF_TMP_TABLE\";\n            results.addObject(createExpression(entity, sql));\n          }\n\n          sql = \"ALTER TABLE \" + tableName + \" ALTER COLUMN \" + attributeName + \" SET DEFAULT nextval( '\" + sequenceName + \"' )\";\n          results.addObject(createExpression(entity, sql));\n        }\n      }\n    }\n    return results;\n  }","id":59902,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to create the primary\n     * key support.\n     * \n     * @param entityGroup\n     *            an array of <code>EOEntity<\/code> objects\n     * @return the array of SQL statements\n     */\n    public NSArray primaryKeySupportStatementsForEntityGroup(NSArray entityGroup) {\n        EOEntity entity;\n        int count;\n        int i;\n        NSMutableArray results;\n        NSArray priKeyAttributes;\n        EOAttribute priKeyAttribute;\n        String sequenceName;\n\n        NSMutableSet sequenceNames = new NSMutableSet();\n        results = new NSMutableArray();\n        count = entityGroup.count();\n        for (i = 0; i < count; i++) {\n            entity = (EOEntity) entityGroup.objectAtIndex(i);\n            priKeyAttributes = entity.primaryKeyAttributes();\n            if (priKeyAttributes.count() == 1) {\n                priKeyAttribute = (EOAttribute) priKeyAttributes.objectAtIndex(0);\n                \n                // Q: Don't create a sequence for non number primary keys\n                if (priKeyAttribute.adaptorValueType() != EOAttribute.AdaptorNumberType) {\n                \tcontinue;\n                }\n                String sql;\n\n                sequenceName = PostgresqlPlugIn._sequenceNameForEntity(entity);\n                if (!sequenceNames.containsObject(sequenceName)) {\n                    sequenceNames.addObject(sequenceName);\n                    // timc 2006-11-06 create result here so we can check for\n                    // enableIdentifierQuoting while building the statement\n                    PostgresqlExpression result = new PostgresqlExpression(entity);\n                    String attributeName = result.sqlStringForAttribute(priKeyAttribute);\n                    String tableName = result.sqlStringForSchemaObjectName(entity.externalName());\n\n                    sql = \"CREATE SEQUENCE \" + sequenceName;\n                    results.addObject(createExpression(entity, sql));\n\n                    sql = \"CREATE TEMP TABLE EOF_TMP_TABLE AS SELECT SETVAL('\" + sequenceName + \"', (SELECT MAX(\" + attributeName + \") FROM \" + tableName + \"))\";\n                    results.addObject(createExpression(entity, sql));\n                    \n                    // In Entity Modeler, we want to skip over the drop statement\n                    if (!isInEntityModeler(entity.model())) {\n                      sql = \"DROP TABLE EOF_TMP_TABLE\";\n                      results.addObject(createExpression(entity, sql));\n                    }\n\n                    sql = \"ALTER TABLE \" + tableName + \" ALTER COLUMN \" + attributeName + \" SET DEFAULT nextval( '\" + sequenceName + \"' )\";\n                    results.addObject(createExpression(entity, sql));\n                }\n            }\n        }\n        return results;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToRenameColumnNamed(String columnName, String tableName, String newName, NSDictionary nsdictionary) {\n    return new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n        + \" rename column \" + formatColumnName(columnName) + \" to \" + formatColumnName(newName)));\n  }","id":59903,"modified_method":"public NSArray statementsToRenameColumnNamed(String columnName, String tableName, String newName, NSDictionary nsdictionary) {\n      return new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" rename column \" + formatColumnName(columnName) + \" to \" + formatColumnName(newName)));\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToDeleteColumnNamed(String columnName, String tableName, NSDictionary options) {\n    return new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n        + \" drop column \" + formatTableName(columnName) + \" cascade\"));\n  }","id":59904,"modified_method":"@Override\n    public NSArray statementsToDeleteColumnNamed(String columnName, String tableName, NSDictionary options) {\n    \treturn new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" drop column \" + formatTableName(columnName) + \" cascade\"));\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Quote table name if necessary\n   */\n  @Override\n  public NSArray createTableStatementsForEntityGroup(NSArray<EOEntity> entityGroup) {\n    NSMutableSet<String> columnNames = new NSMutableSet<String>();\n    StringBuffer aStatement = new StringBuffer(128);\n    if (entityGroup != null && entityGroup.count() > 0) {\n      EOSQLExpression sqlExpr = _expressionForEntity(entityGroup.objectAtIndex(0));\n      for (EOEntity entity : entityGroup) {\n        for (EOAttribute attribute : entity.attributes()) {\n          String columnName = attribute.columnName();\n          if (!attribute.isDerived() && !attribute.isFlattened() && columnName != null && columnName.length() > 0 && !columnNames.contains(columnName)) {\n            sqlExpr.appendItemToListString(_columnCreationClauseForAttribute(attribute), aStatement);\n            columnNames.addObject(columnName);\n          }\n        }\n      }\n      return new NSArray(_expressionForString((new StringBuilder()).append(\"CREATE TABLE \").append(this.formatTableName((entityGroup.objectAtIndex(0))\n          .externalName())).append(\" (\").append(aStatement.toString()).append(\")\").toString()));\n    }\n    return NSArray.EmptyArray;\n  }","id":59905,"modified_method":"/**\n     * Quote table name if necessary\n     */\n    public NSArray createTableStatementsForEntityGroup(NSArray entityGroup) {\n\t\tNSMutableSet columnNames = new NSMutableSet();\n\t\tStringBuffer aStatement = new StringBuffer(128);\n\t\tif (entityGroup != null && entityGroup.count() > 0) {\n\t\t\tEOSQLExpression sqlExpr = _expressionForEntity((EOEntity) entityGroup.objectAtIndex(0));\n\t\t\tfor (Iterator entityIterator = entityGroup.iterator(); entityIterator.hasNext();) {\n\t\t\t\tEOEntity entity = (EOEntity) entityIterator.next();\n\t\t\t\tIterator attributeIterator = entity.attributes().iterator();\n\t\t\t\twhile (attributeIterator.hasNext()) {\n\t\t\t\t\tEOAttribute attribute = (EOAttribute) attributeIterator.next();\n\t\t\t\t\tString columnName = attribute.columnName();\n\t\t\t\t\tif (!attribute.isDerived() && !attribute.isFlattened() && columnName != null && columnName.length() > 0 && !columnNames.contains(columnName)) {\n\t\t\t\t\t\tsqlExpr.appendItemToListString(_columnCreationClauseForAttribute(attribute), aStatement);\n\t\t\t\t\t\tcolumnNames.addObject(columnName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new NSArray(_expressionForString((new StringBuilder()).append(\"CREATE TABLE \").append(this.formatTableName(((EOEntity) entityGroup.objectAtIndex(0)).externalName())).append(\" (\").append(aStatement.toString()).append(\")\").toString()));\n\t\t}\n\t\treturn new NSArray();\n\t}","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToModifyColumnNullRule(String columnName, String tableName, boolean allowsNull, NSDictionary nsdictionary) {\n    NSArray<EOSQLExpression> statements;\n    if (allowsNull) {\n      statements = new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n          + \" alter column \" + formatColumnName(columnName) + \" drop not null\"));\n    } else {\n      statements = new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n          + \" alter column \" + formatColumnName(columnName) + \" set not null\"));\n    }\n    return statements;\n  }","id":59906,"modified_method":"public NSArray statementsToModifyColumnNullRule(String columnName, String tableName, boolean allowsNull, NSDictionary nsdictionary) {\n      NSArray statements;\n      if (allowsNull) {\n        statements = new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" alter column \" + formatColumnName(columnName) + \" drop not null\"));\n      } else {\n        statements = new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" alter column \" + formatColumnName(columnName) + \" set not null\"));\n      }\n      return statements;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToInsertColumnForAttribute(EOAttribute attribute, NSDictionary options) {\n    String clause = _columnCreationClauseForAttribute(attribute);\n    return new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(attribute.entity().externalName())\n        + \" add \" + clause));\n  }","id":59907,"modified_method":"@Override\n    public NSArray statementsToInsertColumnForAttribute(EOAttribute attribute, NSDictionary options) {\n      String clause = _columnCreationClauseForAttribute(attribute);\n      return new NSArray(_expressionForString(\"alter table \" + formatTableName(attribute.entity().externalName()) + \" add \" + clause));\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"/**\n   * Generates the PostgreSQL-specific SQL statements to enforce the foreign\n   * key constraints for <code>relationship<\/code>.\n   * \n   * @param relationship\n   *            the relationship, as represented by EOF\n   * @return the array of SQL statements\n   */\n  @Override\n  public NSArray foreignKeyConstraintStatementsForRelationship(EORelationship relationship) {\n    NSArray<EOSQLExpression> superResults = super.foreignKeyConstraintStatementsForRelationship(relationship);\n    NSMutableArray<PostgresqlExpression> results = new NSMutableArray<PostgresqlExpression>();\n\n    for (EOSQLExpression expression : superResults) {\n      String s = expression.statement();\n      s = replaceStringByStringInString(\") INITIALLY DEFERRED\", \") DEFERRABLE INITIALLY DEFERRED\", s);\n      expression.setStatement(s);\n      results.addObject(expression);\n      // timc 2006-11-06 check for enableIdentifierQuoting\n      String tableNameWithoutSchemaName = externalNameForEntityWithoutSchema(relationship.entity());\n      String tableName = expression.sqlStringForSchemaObjectName(expression.entity().externalName());\n      s = replaceStringByStringInString(\"ALTER TABLE \" + tableNameWithoutSchemaName, \"ALTER TABLE \" + tableName, s);\n      expression.setStatement(s);\n      NSArray<String> columnNames = ((NSArray<String>) relationship.sourceAttributes().valueForKey(\"columnName\"));\n      StringBuilder sbColumnNames = new StringBuilder();\n      for (int j = 0; j < columnNames.count(); j++) {\n        sbColumnNames.append((j == 0 ? \"\" : \", \") + expression.sqlStringForSchemaObjectName(columnNames.objectAtIndex(j)));\n      }\n      String indexName = externalNameForEntityWithoutSchema(relationship.entity()) + \"_\" + columnNames.componentsJoinedByString(\"_\") + \"_idx\";\n      results.addObject(createExpression(expression.entity(), \"CREATE INDEX \" + indexName + \" ON \" + tableName + \"( \" + sbColumnNames.toString() + \" )\"));\n    }\n    return results;\n  }","id":59908,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to enforce the foreign\n     * key constraints for <code>relationship<\/code>.\n     * \n     * @param relationship\n     *            the relationship, as represented by EOF\n     * @return the array of SQL statements\n     */\n    public NSArray foreignKeyConstraintStatementsForRelationship(EORelationship relationship) {\n        NSArray superResults;\n        NSMutableArray results;\n        int count;\n        int i;\n        EOSQLExpression expression;\n\n        results = new NSMutableArray();\n        superResults = super.foreignKeyConstraintStatementsForRelationship(relationship);\n\n        count = superResults.count();\n        for (i = 0; i < count; i++) {\n            expression = (EOSQLExpression) superResults.objectAtIndex(i);\n            String s = expression.statement();\n            s = replaceStringByStringInString(\") INITIALLY DEFERRED\", \") DEFERRABLE INITIALLY DEFERRED\", s);\n            expression.setStatement(s);\n            results.addObject(expression);\n            // timc 2006-11-06 check for enableIdentifierQuoting\n            String tableNameWithoutSchemaName = externalNameForEntityWithoutSchema(relationship.entity());\n            String tableName = expression.sqlStringForSchemaObjectName(expression.entity().externalName());\n            s = replaceStringByStringInString(\"ALTER TABLE \" + tableNameWithoutSchemaName, \"ALTER TABLE \" + tableName, s);\n            expression.setStatement(s);\n            NSArray columnNames = ((NSArray) relationship.sourceAttributes().valueForKey(\"columnName\"));\n            StringBuffer sbColumnNames = new StringBuffer();\n            for (int j = 0; j < columnNames.count(); j++) {\n                sbColumnNames.append((j == 0 ? \"\" : \", \") + expression.sqlStringForSchemaObjectName((String) columnNames.objectAtIndex(j)));\n            }\n            String indexName = externalNameForEntityWithoutSchema(relationship.entity()) + \"_\" + columnNames.componentsJoinedByString(\"_\") + \"_idx\";\n            results.addObject(createExpression(expression.entity(), \"CREATE INDEX \" + indexName + \" ON \" + tableName + \"( \" + sbColumnNames.toString() + \" )\"));\n        }\n        return results;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  protected String formatTableName(String name) {\n    if (!enableIdentifierQuoting()) {\n      return name;\n    }\n    //Needs to replicate functionality of EOSQLExpression.sqlStringForSchemaObjectName(String name).  For example MySchema.MyTable needs to be quoted \"MySchema\".\"MyTable\"\n    NSArray<String> components = NSArray.componentsSeparatedByString(name, \".\");\n    return \"\\\"\" + components.componentsJoinedByString(\"\\\".\\\"\") + \"\\\"\";\n  }","id":59909,"modified_method":"protected String formatTableName(String name) {\n        if (!enableIdentifierQuoting()) {\n            return name;\n        }\n    \t//Needs to replicate functionality of EOSQLExpression.sqlStringForSchemaObjectName(String name).  For example MySchema.MyTable needs to be quoted \"MySchema\".\"MyTable\"\n        NSArray components = NSArray.componentsSeparatedByString(name, \".\");\n        return \"\\\"\" + components.componentsJoinedByString(\"\\\".\\\"\") + \"\\\"\";\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray<EOSQLExpression> schemaCreationStatementsForEntities(NSArray<EOEntity> allEntities, NSDictionary<String, String> options) {\n    NSMutableArray<EOSQLExpression> result = new NSMutableArray<EOSQLExpression>();\n    if (allEntities == null || allEntities.count() == 0) {\n      return result;\n    }\n    if (options == null) {\n      options = NSDictionary.EmptyDictionary;\n    }\n    NSDictionary connectionDictionary = allEntities.lastObject().model().connectionDictionary();\n    boolean createDatabase = _NSDictionaryUtilities.boolValueForKeyDefault(options, \"createDatabase\", false);\n    boolean dropDatabase = _NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropDatabase\", false);\n    if (createDatabase || dropDatabase) {\n      boolean adminCommentsNeeded = false;\n      NSArray<EOSQLExpression> dropDatabaseStatements = null;\n      NSArray<EOSQLExpression> createDatabaseStatements = null;\n      if (dropDatabase) {\n        dropDatabaseStatements = dropDatabaseStatementsForConnectionDictionary(connectionDictionary, null);\n        if (dropDatabaseStatements == null) {\n          dropDatabaseStatements = new NSArray<EOSQLExpression>(_expressionForString(\"/* The 'Drop Database' option is unavailable. */\"));\n        } else {\n          adminCommentsNeeded = true;\n        }\n      }\n      if (createDatabase) {\n        createDatabaseStatements = createDatabaseStatementsForConnectionDictionary(connectionDictionary, null);\n        if (createDatabaseStatements == null) {\n          createDatabaseStatements = new NSArray<EOSQLExpression>(_expressionForString(\"/* The 'Create Database' option is unavailable. */\"));\n        } else {\n          adminCommentsNeeded = true;\n        }\n      }\n      if (adminCommentsNeeded) {\n        result.addObject(_expressionForString(\"/* connect as an administrator */\"));\n      }\n      if (dropDatabaseStatements != null) {\n        result.addObjectsFromArray(dropDatabaseStatements);\n      }\n      if (createDatabaseStatements != null) {\n        result.addObjectsFromArray(createDatabaseStatements);\n      }\n      if (adminCommentsNeeded) {\n        result.addObject(_expressionForString(\"/* connect as the user from the connection dictionary */\"));\n      }\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropPrimaryKeySupport\", true)) {\n      NSArray<NSArray<EOEntity>> entityGroups = primaryKeyEntityGroupsForEntities(allEntities);\n      result.addObjectsFromArray(dropPrimaryKeySupportStatementsForEntityGroups(entityGroups));\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropTables\", true)) {\n      NSArray<NSArray<EOEntity>> entityGroups = tableEntityGroupsForEntities(allEntities);\n      result.addObjectsFromArray(dropTableStatementsForEntityGroups(entityGroups));\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"createTables\", true)) {\n      NSArray<NSArray<EOEntity>> entityGroups = tableEntityGroupsForEntities(allEntities);\n      result.addObjectsFromArray(createTableStatementsForEntityGroups(entityGroups));\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"createPrimaryKeySupport\", true)) {\n      NSArray<NSArray<EOEntity>> entityGroups = primaryKeyEntityGroupsForEntities(allEntities);\n      result.addObjectsFromArray(primaryKeySupportStatementsForEntityGroups(entityGroups));\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"primaryKeyConstraints\", true)) {\n      NSArray<NSArray<EOEntity>> entityGroups = tableEntityGroupsForEntities(allEntities);\n      result.addObjectsFromArray(primaryKeyConstraintStatementsForEntityGroups(entityGroups));\n    }\n    if (_NSDictionaryUtilities.boolValueForKeyDefault(options, \"foreignKeyConstraints\", false)) {\n      NSArray<NSArray<EOEntity>> entityGroups = tableEntityGroupsForEntities(allEntities);\n      for (NSArray<EOEntity> entityGroup : entityGroups) {\n        result.addObjectsFromArray(_foreignKeyConstraintStatementsForEntityGroup(entityGroup));\n      }\n    }\n    return result;\n  }","id":59910,"modified_method":"public NSArray schemaCreationStatementsForEntities(NSArray allEntities, NSDictionary options)\n    {\n/* 879*/        NSMutableArray result = new NSMutableArray();\n/* 880*/        if(allEntities == null || allEntities.count() == 0)\n/* 881*/            return result;\n/* 883*/        if(options == null)\n/* 884*/            options = NSDictionary.EmptyDictionary;\n/* 889*/        NSDictionary connectionDictionary = ((EOEntity)allEntities.lastObject()).model().connectionDictionary();\n/* 892*/        boolean createDatabase = _NSDictionaryUtilities.boolValueForKeyDefault(options, \"createDatabase\", false);\n/* 893*/        boolean dropDatabase = _NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropDatabase\", false);\n/* 895*/        if(createDatabase || dropDatabase)\n        {\n/* 896*/            boolean adminCommentsNeeded = false;\n/* 897*/            NSArray dropDatabaseStatements = null;\n/* 898*/            NSArray createDatabaseStatements = null;\n/* 900*/            if(dropDatabase)\n            {\n/* 901*/                dropDatabaseStatements = dropDatabaseStatementsForConnectionDictionary(connectionDictionary, null);\n/* 903*/                if(dropDatabaseStatements == null)\n/* 904*/                    dropDatabaseStatements = new NSArray(_expressionForString(\"/* The 'Drop Database' option is unavailable. */\"));\n/* 907*/                else\n/* 907*/                    adminCommentsNeeded = true;\n            }\n/* 911*/            if(createDatabase)\n            {\n/* 912*/                createDatabaseStatements = createDatabaseStatementsForConnectionDictionary(connectionDictionary, null);\n/* 914*/                if(createDatabaseStatements == null)\n/* 915*/                    createDatabaseStatements = new NSArray(_expressionForString(\"/* The 'Create Database' option is unavailable. */\"));\n/* 918*/                else\n/* 918*/                    adminCommentsNeeded = true;\n            }\n/* 922*/            if(adminCommentsNeeded)\n/* 923*/                result.addObject(_expressionForString(\"/* connect as an administrator */\"));\n/* 926*/            if(dropDatabaseStatements != null)\n/* 927*/                result.addObjectsFromArray(dropDatabaseStatements);\n/* 930*/            if(createDatabaseStatements != null)\n/* 931*/                result.addObjectsFromArray(createDatabaseStatements);\n/* 934*/            if(adminCommentsNeeded)\n/* 935*/                result.addObject(_expressionForString(\"/* connect as the user from the connection dictionary */\"));\n        }\n/* 939*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropPrimaryKeySupport\", true))\n        {\n/* 940*/            NSArray entityGroups = primaryKeyEntityGroupsForEntities(allEntities);\n/* 941*/            result.addObjectsFromArray(dropPrimaryKeySupportStatementsForEntityGroups(entityGroups));\n        }\n/* 944*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"dropTables\", true))\n        {\n/* 945*/            NSArray entityGroups = tableEntityGroupsForEntities(allEntities);\n/* 946*/            result.addObjectsFromArray(dropTableStatementsForEntityGroups(entityGroups));\n        }\n/* 949*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"createTables\", true))\n        {\n/* 950*/            NSArray entityGroups = tableEntityGroupsForEntities(allEntities);\n/* 951*/            result.addObjectsFromArray(createTableStatementsForEntityGroups(entityGroups));\n        }\n/* 954*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"createPrimaryKeySupport\", true))\n        {\n/* 955*/            NSArray entityGroups = primaryKeyEntityGroupsForEntities(allEntities);\n/* 956*/            result.addObjectsFromArray(primaryKeySupportStatementsForEntityGroups(entityGroups));\n                }\n/* 959*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"primaryKeyConstraints\", true))\n                {\n/* 960*/            NSArray entityGroups = tableEntityGroupsForEntities(allEntities);\n/* 961*/            result.addObjectsFromArray(primaryKeyConstraintStatementsForEntityGroups(entityGroups));\n                }\n/* 964*/        if(_NSDictionaryUtilities.boolValueForKeyDefault(options, \"foreignKeyConstraints\", false))\n                {\n/* 965*/            NSArray entityGroups = tableEntityGroupsForEntities(allEntities);\n/* 966*/            int i = 0;\n/* 966*/            for(int iCount = entityGroups.count(); i < iCount; i++)\n/* 967*/                result.addObjectsFromArray(_foreignKeyConstraintStatementsForEntityGroup((NSArray)entityGroups.objectAtIndex(i)));\n\n                }\n/* 970*/        return result;\n            }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public String schemaCreationScriptForEntities(NSArray<EOEntity> allEntities, NSDictionary<String, String> options) {\n    StringBuffer result = new StringBuffer();\n    if (options == null) {\n      options = NSDictionary.EmptyDictionary;\n    }\n    NSArray<EOSQLExpression> statements = schemaCreationStatementsForEntities(allEntities, options);\n    for (EOSQLExpression statement : statements) {\n      appendExpressionToScript(statement, result);\n    }\n\n    return result.toString();\n  }","id":59911,"modified_method":"public String schemaCreationScriptForEntities(NSArray allEntities, NSDictionary options)\n    {\n/* 741*/        StringBuffer result = new StringBuffer();\n/* 744*/        if(options == null)\n/* 745*/            options = NSDictionary.EmptyDictionary;\n/* 747*/        NSArray statements = schemaCreationStatementsForEntities(allEntities, options);\n/* 748*/        int i = 0;\n/* 748*/        for(int count = statements.count(); i < count; i++)\n/* 749*/            appendExpressionToScript((EOSQLExpression)statements.objectAtIndex(i), result);\n\n/* 751*/        return new String(result);\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray _foreignKeyConstraintStatementsForEntityGroup(NSArray<EOEntity> group) {\n    if (group == null)\n      return NSArray.EmptyArray;\n    NSMutableArray<PostgresqlExpression> result = new NSMutableArray<PostgresqlExpression>();\n    NSMutableSet<NSArray<String>> generatedStatements = new NSMutableSet<NSArray<String>>();\n    for (EOEntity currentEntity : group) {\n      if (currentEntity.externalName() != null) {\n        NSArray<EORelationship> relationships = currentEntity.relationships();\n        for (EORelationship currentRelationship : relationships) {\n          if (_shouldGenerateForeignKeyConstraints(currentRelationship)) {\n            NSArray<PostgresqlExpression> statements = foreignKeyConstraintStatementsForRelationship(currentRelationship);\n            if (!generatedStatements.containsObject(statements.valueForKey(\"statement\"))) {\n              result.addObjectsFromArray(statements);\n              generatedStatements.addObject(statements.valueForKey(\"statement\"));\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }","id":59912,"modified_method":"public NSArray _foreignKeyConstraintStatementsForEntityGroup(NSArray group) {\n        if (group == null)\n            return NSArray.EmptyArray;\n        NSMutableArray result = new NSMutableArray();\n        NSMutableSet generatedStatements = new NSMutableSet();\n        int i = 0;\n        for (int groupCount = group.count(); i < groupCount; i++) {\n            EOEntity currentEntity = (EOEntity) group.objectAtIndex(i);\n            if (currentEntity.externalName() != null) {\n                NSArray relationships = currentEntity.relationships();\n                int relCount = relationships.count();\n                for (int j = 0; j < relCount; j++) {\n                    EORelationship currentRelationship = ((EORelationship) relationships.objectAtIndex(j));\n                    if (_shouldGenerateForeignKeyConstraints(currentRelationship)) {\n                        NSArray statements = foreignKeyConstraintStatementsForRelationship(currentRelationship);\n                        if (!generatedStatements.containsObject(statements.valueForKey(\"statement\"))) {\n                            result.addObjectsFromArray(statements);\n                            generatedStatements.addObject(statements.valueForKey(\"statement\"));\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public NSArray statementsToConvertColumnType(String columnName, String tableName, ColumnTypes oldType, ColumnTypes newType, NSDictionary options) {\n    EOAttribute attr = new EOAttribute();\n    attr.setName(columnName);\n    attr.setColumnName(columnName);\n    attr.setExternalType(newType.name());\n    attr.setScale(newType.scale());\n    attr.setPrecision(newType.precision());\n    attr.setWidth(newType.width());\n\n    String usingClause = \"\";\n    String columnTypeString = columnTypeStringForAttribute(attr);\n    if (options != null) {\n      String usingExpression = (String) options.objectForKey(PostgresqlSynchronizationFactory.USING_KEY);\n      if (usingExpression != null) {\n        usingClause = \" USING \" + usingExpression;\n      }\n    }\n    NSArray<EOSQLExpression> statements = new NSArray<EOSQLExpression>(_expressionForString(\"alter table \" + formatTableName(tableName)\n        + \" alter column \" + formatColumnName(columnName) + \" type \" + columnTypeString + usingClause));\n    return statements;\n  }","id":59913,"modified_method":"@Override\n    public NSArray statementsToConvertColumnType(String columnName, String tableName, ColumnTypes oldType, ColumnTypes newType, NSDictionary options) {\n      EOAttribute attr = new EOAttribute();\n      attr.setName(columnName);\n      attr.setColumnName(columnName);\n      attr.setExternalType(newType.name());\n      attr.setScale(newType.scale());\n      attr.setPrecision(newType.precision());\n      attr.setWidth(newType.width());\n\n      String usingClause = \"\";\n      String columnTypeString = columnTypeStringForAttribute(attr);\n      if (options != null) {\n        String usingExpression = (String) options.objectForKey(PostgresqlSynchronizationFactory.USING_KEY);\n        if (usingExpression != null) {\n          usingClause = \" USING \" + usingExpression;\n        }\n      }\n      NSArray statements = new NSArray(_expressionForString(\"alter table \" + formatTableName(tableName) + \" alter column \" + formatColumnName(columnName) + \" type \" + columnTypeString + usingClause));\n      return statements;\n    }","commit_id":"4043f82b8bce7831f025b3f3b86d9eebe0cd0103","url":"https://github.com/wocommunity/wonder"},{"original_method":"public Collection getItemsForCategories(List categories) {\n\t\tCollection rv = new ArrayList();\n\t\t// create the Set of selected archive items\n\t\tSet selectedCategories = new HashSet();\n\t\tfor(Iterator iter = categories.iterator();iter.hasNext();) {\n\t\t\tselectedCategories.add(((ImportMetadata)iter.next()).getLegacyTool());\n\t\t}\n\t\t\n\t\tImportable item;\n\t\tfor(Iterator iter = items.iterator(); iter.hasNext();) {\n\t\t\titem = (Importable)iter.next();\n\t\t\tif(selectedCategories.contains(item.getLegacyGroup())) {\n\t\t\t\trv.add(item);\n\t\t\t}\n\t\t}\n\t\treturn rv;\n\t}","id":59914,"modified_method":"public Collection getItemsForCategories(List categories) {\n\t\tCollection rv = new ArrayList();\n\t\t// create the Set of selected archive items\n\t\tSet selectedCategories = new HashSet();\n\t\tfor(Iterator iter = categories.iterator();iter.hasNext();) {\n\t\t\tselectedCategories.add(((ImportMetadata)iter.next()).getLegacyTool());\n\t\t}\n\t\t\n\t\tImportable item;\n\t\tfor(Iterator iter = items.iterator(); iter.hasNext();) {\n\t\t\titem = (Importable)iter.next();\n\t\t\tif(\"\".equals(item.getLegacyGroup()) || selectedCategories.contains(item.getLegacyGroup())) {\n\t\t\t\trv.add(item);\n\t\t\t}\n\t\t}\n\t\treturn rv;\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public CommonCartridgeFileParser() {\n\t\t// add resource translators here\n\t\taddResourceTranslator(new CCAssessmentTranslator());\n\t\tresourceHelper = new CCResourceHelper();\n\t\titemHelper = new CCItemHelper();\n\t\tfileHelper = new CCFileHelper();\n\t\tmanifestHelper = new CCManifestHelper();\n\t}","id":59915,"modified_method":"public CommonCartridgeFileParser() {\n\t\t// add resource translators here\n\t\taddResourceTranslator(new CCAssessmentTranslator());\n\t\taddResourceTranslator(new CCWebLinkTranslator());\n\t\t// addResourceTranslator(new  CCWebContentTranslator());\n\t\tresourceHelper = new CCResourceHelper();\n\t\titemHelper = new CCItemHelper();\n\t\tfileHelper = new CCFileHelper();\n\t\tmanifestHelper = new CCManifestHelper();\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public String getFilePathForNode(Node node) {\n\t\t\treturn XPathHelper.getNodeValue(\"./@href\", node);\n\t\t}","id":59916,"modified_method":"public String getFilePathForNode(Node node, String basePath) {\n\t\t\treturn XPathHelper.getNodeValue(\"./@href\", node);\n\t\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public String getTitle(Node itemNode) {\n\t\t\treturn XPathHelper.getNodeValue(\"./@title\",itemNode);\n\t\t}","id":59917,"modified_method":"public String getTitle(Node itemNode) {\n\t\t\treturn XPathHelper.getNodeValue(\"./title\",itemNode);\n\t\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected Collection getCategoriesFromArchive(String pathToData) {\n\t\tCollection categories = new ArrayList();\n\t\tImportMetadata im;\n\t\tNode topLevelItem;\n\t\tList topLevelItems = manifestHelper.getTopLevelItemNodes(this.archiveManifest);\n\t\tfor(Iterator i = topLevelItems.iterator(); i.hasNext(); ) {\n\t\t\ttopLevelItem = (Node)i.next();\n\t\t\tim = new BasicImportMetadata();\n\t\t\tim.setId(itemHelper.getId(topLevelItem));\n\t\t\tim.setLegacyTool(itemHelper.getTitle(topLevelItem));\n\t\t\tim.setMandatory(false);\n\t\t\tim.setSakaiServiceName(\"ContentHostingService\");\n\t\t\tim.setSakaiTool(\"Resources\");\n\t\t\tcategories.add(im);\n\t\t}\n\t\treturn categories;\n\t}","id":59918,"modified_method":"protected Collection getCategoriesFromArchive(String pathToData) {\n\t\tCollection categories = new ArrayList();\n\t\tImportMetadata im;\n//\t\tif(XPathHelper.getNodeValue(\"//resource[@type='webcontent']\", this.archiveManifest) != null) {\n//\t\t\tim = new BasicImportMetadata();\n//\t\t\tim.setId(\"webcontent\");\n//\t\t\tim.setLegacyTool(\"Web Content\");\n//\t\t\tim.setMandatory(false);\n//\t\t\tim.setFileName(\".xml\");\n//\t\t\tim.setSakaiServiceName(\"ContentHostingService\");\n//\t\t\tim.setSakaiTool(\"Resources\");\n//\t\t\tcategories.add(im);\n//\t\t}\n//\t\tif(XPathHelper.getNodeValue(\"//resource[@type='imsqti_xmlv1p2/imscc_xmlv1p0/assessment']\", this.archiveManifest) != null) {\n//\t\t\tim = new BasicImportMetadata();\n//\t\t\tim.setId(\"assessments\");\n//\t\t\tim.setLegacyTool(\"Assessments\");\n//\t\t\tim.setMandatory(false);\n//\t\t\tim.setFileName(\".xml\");\n//\t\t\tim.setSakaiServiceName(\"Samigo\");\n//\t\t\tim.setSakaiTool(\"Tests and Quizzes\");\n//\t\t\tcategories.add(im);\n//\t\t}\n\t\tNode topLevelItem;\n\t\tList topLevelItems = manifestHelper.getTopLevelItemNodes(this.archiveManifest);\n\t\tfor(Iterator i = topLevelItems.iterator(); i.hasNext(); ) {\n\t\t\ttopLevelItem = (Node)i.next();\n\t\t\tim = new BasicImportMetadata();\n\t\t\tim.setId(itemHelper.getId(topLevelItem));\n\t\t\tim.setLegacyTool(itemHelper.getTitle(topLevelItem));\n\t\t\tim.setMandatory(false);\n\t\t\tim.setFileName(\".xml\");\n\t\t\tim.setSakaiServiceName(\"ContentHostingService\");\n\t\t\tim.setSakaiTool(\"Resources\");\n\t\t\tcategories.add(im);\n\t\t}\n\t\treturn categories;\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List getTopLevelItemNodes(Document manifest) {\n\t\t\treturn XPathHelper.selectNodes(\"//organization/item/item/item\", manifest);\n\t\t}","id":59919,"modified_method":"public List getTopLevelItemNodes(Document manifest) {\n\t\t\tList items = XPathHelper.selectNodes(\"//organization/item\", manifest);\n\t\t\tif (items != null && items.size() > 1) return items;\n\t\t\t\n\t\t\titems = XPathHelper.selectNodes(\"//organization/item/item\", manifest);\n\t\t\tif (items != null && items.size() > 1) return items;\n\t\t\t\n\t\t\treturn XPathHelper.selectNodes(\"//organization/item/item/item\", manifest);\n\t\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testCanGetQti() {\n\t\tImportDataSource ids = parser.parse(archiveData, \"/Users/zach/Desktop/psychology\");\n\t\tCollection importables = ids.getItemsForCategories(ids.getItemCategories());\n\t\tint numberOfAssessments = 0;\n\t\tfor (Iterator i = importables.iterator();i.hasNext();) {\n\t\t\tif(i.next() instanceof Assessment) numberOfAssessments++;\n\t\t}\n\t\tSystem.out.println(ids.getItemCategories().size() + \" top-level items\");\n\t\tSystem.out.println(importables.size() + \" importables\");\n\t\tSystem.out.println(numberOfAssessments + \" assessments\");\n\t\tassertTrue(\"Why no assessments?\", numberOfAssessments > 0);\n\t}","id":59920,"modified_method":"public void testCanGetQti() {\n\t\tImportDataSource ids = parser.parse(archiveData, \"/Users/zach/Desktop/psychology\");\n\t\tCollection importables = ids.getItemsForCategories(ids.getItemCategories());\n\t\tint numberOfAssessments = 0;\n\t\tint numberOfWebContent = 0;\n\t\tfor (Iterator i = importables.iterator();i.hasNext();) {\n\t\t\tObject x = i.next();\n\t\t\tif(x instanceof Assessment) {\n\t\t\t\tnumberOfAssessments++;\n\t\t\t} else if(x instanceof HtmlDocument) {\n\t\t\t\tnumberOfWebContent++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ids.getItemCategories().size() + \" top-level items\");\n\t\tSystem.out.println(importables.size() + \" importables\");\n\t\tSystem.out.println(numberOfAssessments + \" assessments\");\n\t\tSystem.out.println(numberOfWebContent + \" webcontent\");\n\t\tassertTrue(\"Why no assessments?\", numberOfAssessments > 0);\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public byte[] getFileBytesForNode(Node node) throws IOException {\n\t\t\tString filePath = getFilePathForNode(node);\n\t\t\treturn getBytesFromFile(new File(pathToData + \"/\" + filePath));\n\t\t}","id":59921,"modified_method":"public byte[] getFileBytesForNode(Node node, String contextPath) throws IOException {\n\t\t\tString filePath = getFilePathForNode(node, contextPath);\n\t\t\treturn getBytesFromFile(new File(pathToData + \"/\" + filePath));\n\t\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected Collection translateFromNodeToImportables(Node node, String contextPath, Importable parent) {\n\t\tCollection branchOfImportables = new ArrayList();\n\t\tString tag = node.getNodeName();\n\t\tString itemResourceId = itemHelper.getResourceId(node);\n\t\tDocument resourceDescriptor = resourceHelper.getDescriptor(manifestHelper.getResourceForId(itemResourceId, this.archiveManifest));\n\t\tif (resourceHelper.isFolder(resourceDescriptor) || \n\t  \t\t    (\"item\".equals(tag) && (XPathHelper.selectNodes(\"./item\", node).size() > 0)) ||\n\t  \t\t    ( \"item\".equals(tag) && \n\t  \t          isCompoundDocument(manifestHelper.getResourceForId(itemResourceId, archiveManifest),resourceDescriptor)\n\t  \t\t    )) {\n\t\t\tString folderTitle = getTitleForNode(node);\n\t\t\tFolder folder = new Folder();\n\t\t\tfolder.setPath(contextPath);\n\t\t\tfolder.setTitle(folderTitle);\n\t\t\tfolder.setDescription(getDescriptionForNode(node));\n\t\t\tif (parent != null) {\n  \t\t\t\tfolder.setParent(parent);\n  \t\t\t\tfolder.setLegacyGroup(parent.getLegacyGroup());\n  \t\t\t} else folder.setLegacyGroup(folderTitle);\n\t\t\t// now we take care of the folder's child Nodes\n\t\t\t// construct a new path and make sure we replace any forward slashes from the resource title\n\t\t\tString folderPath = contextPath + folderTitle.replaceAll(\"/\", \"_\") + \"/\";\n\t\t\tif (isCompoundDocument(manifestHelper.getResourceForId(itemResourceId, archiveManifest),resourceDescriptor)) {\n\t\t\t\tbranchOfImportables.addAll(translateFromNodeToImportables(manifestHelper.getResourceForId(itemResourceId, archiveManifest), folderPath,folder));\n\t\t\t} else {\n\t  \t\t\tList children = XPathHelper.selectNodes(\"./item\", node);\n\t  \t\t\tfor (Iterator i = children.iterator(); i.hasNext();) {\n\t  \t\t\t\tbranchOfImportables.addAll(\n\t  \t\t\t\t\t\ttranslateFromNodeToImportables((Node)i.next(),folderPath, folder));\n\t  \t\t\t}\n\t\t\t}\n  \t\t\tresourceMap.remove(itemResourceId);\n  \t\t\tbranchOfImportables.add(folder);\n\t\t} // node is folder\n\t\t\n\t\telse if(\"item\".equals(tag)) {\n\t\t\t// this item is a leaf, so we handle the resource associated with it\n\t\t\tNode resourceNode = manifestHelper.getResourceForId(itemResourceId, this.archiveManifest);\n  \t\t\tif (resourceNode != null) {\n  \t\t\t\tbranchOfImportables.addAll(\n  \t\t\t\t\t\ttranslateFromNodeToImportables(resourceNode,contextPath, parent));\n  \t\t\t}\n\t\t} else if(\"file\".equals(tag)) {\n\t\t\tFileResource file = new FileResource();\n\t\t\ttry {\n\t\t\t\tString fileName = fileHelper.getFilenameForNode(node);\n\t\t\t\tfile.setFileName(fileName);\n\t\t\t\t// If \n\t\t\t\tif (node.getParentNode().getChildNodes().getLength() > 1) {\n\t\t\t\t\tfile.setDescription(\"\");\n\t\t\t\t} else file.setDescription(resourceHelper.getDescription(node.getParentNode()));\n\t\t\t\tfile.setFileBytes(fileHelper.getFileBytesForNode(node));\n\t\t\t\tfile.setDestinationResourcePath(contextPath + fileName);\n\t\t\t\tfile.setContentType(this.mimeTypes.getContentType(fileName));\n\t\t\t\tfile.setTitle(fileHelper.getTitle(node));\n\t\t\t\tif(parent != null) {\n\t\t\t\t\tfile.setParent(parent);\n\t\t\t\t\tfile.setLegacyGroup(parent.getLegacyGroup());\n\t\t\t\t} else file.setLegacyGroup(fileHelper.getTitle(node));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn branchOfImportables;\n\t\t\t}\n\t\t\tbranchOfImportables.add(file);\n\t\t\tresourceMap.remove(resourceHelper.getId(node.getParentNode()));\n\t\t\treturn branchOfImportables;\n\t\t} else if(\"resource\".equals(tag)) {\n\t\t\t// TODO handle a resource node\n\t\t\tImportable resource = null;\n\t\t\tIMSResourceTranslator translator = (IMSResourceTranslator)translatorMap.get(resourceHelper.getType(node));\n\t\t\tif (translator != null) {\n\t\t\t\tresource = translator.translate(node, resourceHelper.getDescriptor(node), contextPath, this.pathToData);\n\t\t\t}\n\t\t\tif (resource != null) {\n\t\t\t\tif (parent != null) {\n\t\t\t\t\tresource.setParent(parent);\n\t\t\t\t\tresource.setLegacyGroup(parent.getLegacyGroup());\n\t\t\t\t} else resource.setLegacyGroup(resourceHelper.getTitle(node));\n\t\t\t\tbranchOfImportables.add(resource);\n\t\t\t\tparent = resource;\n\t\t\t}\n\t\t\tNodeList children = node.getChildNodes();\n\t  \t\tfor (int i = 0;i < children.getLength();i++) {\n\t  \t\t\tbranchOfImportables.addAll(translateFromNodeToImportables(children.item(i), contextPath, parent));\n\t  \t\t\t}\n\t\t\tresourceMap.remove(itemResourceId);\n\t\t}\n\t\treturn branchOfImportables;\n\t}","id":59922,"modified_method":"protected Collection translateFromNodeToImportables(Node node, String contextPath, Importable parent) {\n\t\tCollection branchOfImportables = new ArrayList();\n\t\tString tag = node.getNodeName();\n\t\tString itemResourceId = null;\n\t\tif (\"item\".equals(tag)) {\n\t\t\titemResourceId = itemHelper.getResourceId(node);\n\t\t} else if (\"resource\".equals(tag)) {\n\t\t\titemResourceId = resourceHelper.getId(node);\n\t\t} else if (\"file\".equals(tag)) {\n\t\t\titemResourceId = resourceHelper.getId(node.getParentNode());\n\t\t}\n\t\tDocument resourceDescriptor = resourceHelper.getDescriptor(manifestHelper.getResourceForId(itemResourceId, this.archiveManifest));\n\t\tif (resourceHelper.isFolder(resourceDescriptor) || \n\t  \t\t    (\"item\".equals(tag) && (XPathHelper.selectNodes(\"./item\", node).size() > 0)) ||\n\t  \t\t    ( \"item\".equals(tag) && \n\t  \t          isCompoundDocument(manifestHelper.getResourceForId(itemResourceId, archiveManifest),resourceDescriptor)\n\t  \t\t    )) {\n\t\t\tString folderTitle = getTitleForNode(node);\n\t\t\tFolder folder = new Folder();\n\t\t\tfolder.setPath(contextPath);\n\t\t\tfolder.setTitle(folderTitle);\n\t\t\tfolder.setDescription(getDescriptionForNode(node));\n\t\t\tif (parent != null) {\n  \t\t\t\tfolder.setParent(parent);\n  \t\t\t\tfolder.setLegacyGroup(parent.getLegacyGroup());\n  \t\t\t} else folder.setLegacyGroup(folderTitle);\n\t\t\t// now we take care of the folder's child Nodes\n\t\t\t// construct a new path and make sure we replace any forward slashes from the resource title\n\t\t\tString folderPath = contextPath + folderTitle.replaceAll(\"/\", \"_\") + \"/\";\n\t\t\tif (isCompoundDocument(manifestHelper.getResourceForId(itemResourceId, archiveManifest),resourceDescriptor)) {\n\t\t\t\tbranchOfImportables.addAll(translateFromNodeToImportables(manifestHelper.getResourceForId(itemResourceId, archiveManifest), folderPath,folder));\n\t\t\t} else {\n\t  \t\t\tList children = XPathHelper.selectNodes(\"./item\", node);\n\t  \t\t\tfor (Iterator i = children.iterator(); i.hasNext();) {\n\t  \t\t\t\tbranchOfImportables.addAll(\n\t  \t\t\t\t\t\ttranslateFromNodeToImportables((Node)i.next(),folderPath, folder));\n\t  \t\t\t}\n\t\t\t}\n  \t\t\tresourceMap.remove(itemResourceId);\n  \t\t\tbranchOfImportables.add(folder);\n\t\t} // node is folder\n\t\t\n\t\telse if(\"item\".equals(tag)) {\n\t\t\t// this item is a leaf, so we handle the resource associated with it\n\t\t\tNode resourceNode = manifestHelper.getResourceForId(itemResourceId, this.archiveManifest);\n  \t\t\tif (resourceNode != null) {\n  \t\t\t\tif (parent == null) {\n  \t\t\t\t\tparent = new Folder();\n  \t\t\t\t\tparent.setLegacyGroup(itemHelper.getTitle(node));\n  \t\t\t\t}\n  \t\t\t\tbranchOfImportables.addAll(\n  \t\t\t\t\t\ttranslateFromNodeToImportables(resourceNode,contextPath, parent));\n  \t\t\t}\n\t\t} else if(\"file\".equals(tag)) {\n\t\t\tFileResource file = new FileResource();\n\t\t\ttry {\n\t\t\t\tString fileName = fileHelper.getFilenameForNode(node);\n \t\t\t\tfile.setFileName(fileName);\n\t\t\t\t// If \n\t\t\t\tif (node.getParentNode().getChildNodes().getLength() > 1) {\n\t\t\t\t\tfile.setDescription(\"\");\n\t\t\t\t} else file.setDescription(resourceHelper.getDescription(node.getParentNode()));\n\t\t\t\tfile.setFileBytes(fileHelper.getFileBytesForNode(node, contextPath));\n\t\t\t\tfile.setDestinationResourcePath(fileHelper.getFilePathForNode(node, contextPath));\n\t\t\t\tfile.setContentType(this.mimeTypes.getContentType(fileName));\n\t\t\t\tfile.setTitle(fileHelper.getTitle(node));\n\t\t\t\tif(parent != null) {\n\t\t\t\t\tfile.setParent(parent);\n\t\t\t\t\tfile.setLegacyGroup(parent.getLegacyGroup());\n\t\t\t\t} else file.setLegacyGroup(\"\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tresourceMap.remove(resourceHelper.getId(node.getParentNode()));\n\t\t\t\treturn branchOfImportables;\n\t\t\t}\n\t\t\tbranchOfImportables.add(file);\n\t\t\tresourceMap.remove(resourceHelper.getId(node.getParentNode()));\n\t\t\treturn branchOfImportables;\n\t\t} else if(\"resource\".equals(tag)) {\n\t\t\t// TODO handle a resource node\n\t\t\tImportable resource = null;\n\t\t\tboolean processResourceChildren = true;\n\t\t\tIMSResourceTranslator translator = (IMSResourceTranslator)translatorMap.get(resourceHelper.getType(node));\n\t\t\tif (translator != null) {\n\t\t\t\tresource = translator.translate(node, resourceHelper.getDescriptor(node), contextPath, this.pathToData);\n\t\t\t\tprocessResourceChildren = translator.processResourceChildren();\n\t\t\t}\n\t\t\tif (resource != null) {\n\t\t\t\tif (parent != null) {\n\t\t\t\t\tresource.setParent(parent);\n\t\t\t\t\tresource.setLegacyGroup(parent.getLegacyGroup());\n\t\t\t\t} else resource.setLegacyGroup(resourceHelper.getTitle(node));\n\t\t\t\tbranchOfImportables.add(resource);\n\t\t\t\tparent = resource;\n\t\t\t}\n\t\t\t// processing the child nodes implies that their files can wind up in the Resources tool.\n\t\t\t// this is not always desireable, such as the QTI files from assessments.\n\t\t\tif (processResourceChildren) {\n\t\t\t\tNodeList children = node.getChildNodes();\n\t\t  \t\tfor (int i = 0;i < children.getLength();i++) {\n\t\t  \t\t\tbranchOfImportables.addAll(translateFromNodeToImportables(children.item(i), contextPath, parent));\n\t\t  \t\t\t}\n\t\t\t}\n\t\t\tresourceMap.remove(itemResourceId);\n\t\t}\n\t\treturn branchOfImportables;\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void addContentCollection(String path, Map properties) {\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tString enclosingDirectory = path.substring(0, path.lastIndexOf('/', path.length() - 2) + 1);\n\t\t\t\tif(!existsDirectory(enclosingDirectory)) {\n\t\t\t\t\taddContentCollection(enclosingDirectory, new HashMap());\n\t\t\t\t}\n\t\t\t\tContentHostingService.addCollection(path, resourceProps);\n\t\t\t} catch (IdUsedException e) {\n\t\t\t\t// if this thing already exists (which it probably does), \n\t\t\t\t// we'll do an update on the properties rather than creating the folder\n\t            try {\n\t                ContentHostingService.addProperty\n\t                    (path, ResourceProperties.PROP_DISPLAY_NAME, (String)properties.get(ResourceProperties.PROP_DISPLAY_NAME));\n\t                ContentHostingService.addProperty\n                    (path, ResourceProperties.PROP_COPYRIGHT, (String)properties.get(ResourceProperties.PROP_COPYRIGHT));\n                ContentHostingService.addProperty\n\t                (path, ResourceProperties.PROP_DESCRIPTION, (String)properties.get(ResourceProperties.PROP_DESCRIPTION));\n\t            } catch (PermissionException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (IdUnusedException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (TypeException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (InUseException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (ServerOverloadException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            }\n\t\t\t} catch (IdInvalidException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (PermissionException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InconsistentException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}","id":59923,"modified_method":"protected void addContentCollection(String path, Map properties) {\n//\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n//\t\t\tSet keys = properties.keySet();\n//\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n//\t\t\t\tString key = (String)i.next();\n//\t\t\t\tString value = (String)properties.get(key);\n//\t\t\t\tresourceProps.addProperty(key, value);\n//\t\t\t}\n\t\t\ttry {\n//\t\t\t\tString enclosingDirectory = path.substring(0, path.lastIndexOf('/', path.length() - 2) + 1);\n//\t\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\t\tContentCollectionEdit coll = ContentHostingService.addCollection(enclosingDirectory);\n//\t\t\t\t\tContentHostingService.commitCollection(coll);\n//\t\t\t\t}\n\t\t\t\tContentCollectionEdit coll = ContentHostingService.addCollection(path);\n\t\t\t\tContentHostingService.commitCollection(coll);\n\t\t\t} catch (IdUsedException e) {\n\t\t\t\t// if this thing already exists (which it probably does), \n\t\t\t\t// we'll do an update on the properties rather than creating the folder\n\t            try {\n\t                ContentHostingService.addProperty\n\t                    (path, ResourceProperties.PROP_DISPLAY_NAME, (String)properties.get(ResourceProperties.PROP_DISPLAY_NAME));\n\t                ContentHostingService.addProperty\n                    (path, ResourceProperties.PROP_COPYRIGHT, (String)properties.get(ResourceProperties.PROP_COPYRIGHT));\n                ContentHostingService.addProperty\n\t                (path, ResourceProperties.PROP_DESCRIPTION, (String)properties.get(ResourceProperties.PROP_DESCRIPTION));\n\t            } catch (PermissionException e1) {\n\t            \tm_log.error(\"ResourcesHandler.addContentCollection: \" + e.toString());\n\t            } catch (IdUnusedException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (TypeException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (InUseException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (ServerOverloadException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            }\n\t\t\t} catch (IdInvalidException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (PermissionException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InconsistentException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void handle(Importable thing, String siteId) {\n\t\tif(canHandleType(thing.getTypeName())){\n\t\t\tString id = null;\n\t\t\tString contentType = null;\n\t\t\tbyte[] contents = null;\n\t\t\tint notifyOption = NotificationService.NOTI_NONE;\n\t\t\tString title = null;\n\t\t\tString description = null;\n\t\t\tMap resourceProps = new HashMap();\n\t\t\tif (\"sakai-file-resource\".equals(thing.getTypeName())) {\n\t\t\t\t//title = ((FileResource)thing).getTitle();\n\t\t\t\tdescription = ((FileResource)thing).getDescription();\n\t\t\t\tString fileName = ((FileResource)thing).getFileName();\n\t\t\t\tid = \"/group/\" + siteId + \"/\" + ((FileResource)thing).getDestinationResourcePath();\n\t\t\t\tcontentType = new MimetypesFileTypeMap().getContentType(fileName);\n\t\t\t\tcontents = ((FileResource)thing).getFileBytes();\n//\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n//\t\t\t\t\ttitle = fileName;\n//\t\t\t\t}\n\t\t\t\ttitle = fileName;\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()) {\n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add file entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-web-link\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((WebLink)thing).getTitle();\n\t\t\t\tdescription = ((WebLink)thing).getDescription();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = ResourceProperties.TYPE_URL;\n\t\t\t\tString absoluteUrl = \"\";\n\t\t\t\tif (((WebLink)thing).isAbsolute()) {\n\t\t\t\t\tabsoluteUrl = ((WebLink)thing).getUrl();\n\t\t\t\t} else {\n\t\t\t\t\tabsoluteUrl = ServerConfigurationService.getServerUrl() + \"/access/content/group/\" + siteId + \"/\" + ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tcontents = absoluteUrl.getBytes();\n\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n\t\t\t\t\ttitle = ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add web link entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-html-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((HtmlDocument)thing).getTitle();\n\t\t\t\tcontents = ((HtmlDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/html\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add html document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-text-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((TextDocument)thing).getTitle();\n\t\t\t\tcontents = ((TextDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/plain\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add text document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-folder\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((Folder)thing).getTitle();\n\t\t\t\tdescription = ((Folder)thing).getDescription();\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t  \t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t  \t\t\tresourceProps.put(ResourceProperties.PROP_COPYRIGHT, COPYRIGHT);\n\t  \t\t\t/*\n\t  \t\t\t * Added title to the end of the path. Otherwise, we're setting the props on the \n\t  \t\t\t * containing folder rather than the folder itself.\n\t  \t\t\t */\n\t  \t\t\tString path = \"/group/\" + siteId + \"/\" + ((Folder)thing).getPath()+ title + \"/\" ;\n\t  \t\t\taddContentCollection(path,resourceProps);\n\t  \t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}","id":59924,"modified_method":"public void handle(Importable thing, String siteId) {\n\t\tif(canHandleType(thing.getTypeName())){\n\t\t\tString currentUser = SessionManager.getCurrentSessionUserId();\n\t\t\tSessionManager.getCurrentSession().setUserId(\"admin\");\n\t\t\tString id = null;\n\t\t\tString contentType = null;\n\t\t\tbyte[] contents = null;\n\t\t\tint notifyOption = NotificationService.NOTI_NONE;\n\t\t\tString title = null;\n\t\t\tString description = null;\n\t\t\tMap resourceProps = new HashMap();\n\t\t\tif (\"sakai-file-resource\".equals(thing.getTypeName())) {\n\t\t\t\t//title = ((FileResource)thing).getTitle();\n\t\t\t\tdescription = ((FileResource)thing).getDescription();\n\t\t\t\tString fileName = ((FileResource)thing).getFileName();\n\t\t\t\tid = \"/group/\" + siteId + \"/\" + ((FileResource)thing).getDestinationResourcePath();\n\t\t\t\tcontentType = new MimetypesFileTypeMap().getContentType(fileName);\n\t\t\t\tcontents = ((FileResource)thing).getFileBytes();\n//\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n//\t\t\t\t\ttitle = fileName;\n//\t\t\t\t}\n\t\t\t\ttitle = fileName;\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()) {\n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add file entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-web-link\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((WebLink)thing).getTitle();\n\t\t\t\tdescription = ((WebLink)thing).getDescription();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = ResourceProperties.TYPE_URL;\n\t\t\t\tString absoluteUrl = \"\";\n\t\t\t\tif (((WebLink)thing).isAbsolute()) {\n\t\t\t\t\tabsoluteUrl = ((WebLink)thing).getUrl();\n\t\t\t\t} else {\n\t\t\t\t\tabsoluteUrl = ServerConfigurationService.getServerUrl() + \"/access/content/group/\" + siteId + \"/\" + ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tcontents = absoluteUrl.getBytes();\n\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n\t\t\t\t\ttitle = ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add web link entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-html-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((HtmlDocument)thing).getTitle();\n\t\t\t\tcontents = ((HtmlDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/html\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add html document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-text-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((TextDocument)thing).getTitle();\n\t\t\t\tcontents = ((TextDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/plain\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add text document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t\t} // else if (\"sakai-folder\".equals(thing.getTypeName())) {\n//\t\t\t\ttitle = ((Folder)thing).getTitle();\n//\t\t\t\tdescription = ((Folder)thing).getDescription();\n//\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n//\t  \t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n//\t  \t\t\tresourceProps.put(ResourceProperties.PROP_COPYRIGHT, COPYRIGHT);\n//\t  \t\t\t/*\n//\t  \t\t\t * Added title to the end of the path. Otherwise, we're setting the props on the \n//\t  \t\t\t * containing folder rather than the folder itself.\n//\t  \t\t\t */\n//\t  \t\t\tString path = \"/group/\" + siteId + \"/\" + ((Folder)thing).getPath()+ title;\n//\t  \t\t\taddContentCollection(path,resourceProps);\n//\t  \t\t\t\n//\t\t\t}\n\t\t\tSessionManager.getCurrentSession().setUserId(currentUser);\n\t\t}\n\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected boolean existsDirectory(String path) {\n\t\ttry {\n\t\t\tContentHostingService.getCollection(path);\n\t\t} catch (IdUnusedException e) {\n\t\t\treturn false;\n\t\t} catch (TypeException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (PermissionException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn true;\n\t}","id":59925,"modified_method":"protected boolean existsDirectory(String path) {\n\t\ttry {\n\t\t\tContentHostingService.getCollection(path);\n\t\t} catch (IdUnusedException e) {\n\t\t\treturn false;\n\t\t} catch (TypeException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (PermissionException e) {\n\t\t\tm_log.error(\"ResourcesHandler.existsDirectory: \" + e.toString());\n\t\t}\n\t\treturn true;\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void addContentResource(String id, String contentType, byte[] contents, Map properties, int notifyOption) {\n\t\ttry {\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n\t\t\tString enclosingDirectory = id.substring(0, id.lastIndexOf('/', id.length() - 2) + 1);\n\t\t\tif(!existsDirectory(enclosingDirectory)) {\n\t\t\t\taddContentCollection(enclosingDirectory, new HashMap());\n\t\t\t}\n\t\t\tContentHostingService.addResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t} catch (PermissionException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (IdUsedException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (IdInvalidException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (InconsistentException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (OverQuotaException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (ServerOverloadException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t}\n\t\t\n\t}","id":59926,"modified_method":"protected void addContentResource(String id, String contentType, byte[] contents, Map properties, int notifyOption) {\n\t\ttry {\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n//\t\t\tString enclosingDirectory = id.substring(0, id.lastIndexOf('/', id.length() - 2) + 1);\n//\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\tMap props = new HashMap();\n//\t\t\t\tprops.put(ResourceProperties.PROP_DISPLAY_NAME, enclosingDirectory.substring(enclosingDirectory.lastIndexOf('/') + 1, enclosingDirectory.length()));\n//\t\t\t\taddContentCollection(enclosingDirectory, props);\n//\t\t\t}\n\t\t\tContentHostingService.addResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t} catch (PermissionException e) {\n\t\t\tm_log.error(\"ResourcesHandler.addContentResource: \" + e.toString());\n\t\t} catch (IdUsedException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (IdInvalidException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (InconsistentException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (OverQuotaException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (ServerOverloadException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t}\n\t\t\n\t}","commit_id":"70503e8fb866b072f8417522744c6542bd81051a","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n      * Manage the Get requests (GetFolders, GetFoldersAndFiles, CreateFolder).<br>\n      *\n      * The servlet accepts commands sent in the following format:<br>\n      * connector?Command=CommandName&Type=ResourceType&CurrentFolder=FolderPath<br><br>\n      * It executes the command and then return the results to the client in XML format.\n      *\n      * Valid values for Type are: Image, File, Flash and Link \n      *\n      */\n     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n          \n          response.setContentType(\"text/xml; charset=UTF-8\");\n          response.setHeader(\"Cache-Control\",\"no-cache\");\n          PrintWriter out = response.getWriter();\n          \n          String commandStr = request.getParameter(\"Command\");\n          String type = request.getParameter(\"Type\");\n          String currentFolder = request.getParameter(\"CurrentFolder\");\n\n          Document document = null;\n          try \n          {\n               DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n               DocumentBuilder builder = factory.newDocumentBuilder();\n               document = builder.newDocument();\n          } \n          catch (ParserConfigurationException pce) \n          {\n               pce.printStackTrace();\n          }\n          \n          Node root = CreateCommonXml(document, commandStr, type, currentFolder, \"/access/content\"+currentFolder);\n          \n          if(\"GetFolders\".equals(commandStr)) \n          {\n               getFolders(currentFolder, root, document);\n          }\n          else if (\"GetFoldersAndFiles\".equals(commandStr)) \n          {\n               getFolders(currentFolder, root, document);\n               getFiles(currentFolder, root, document, type);\n          }\n          else if (\"CreateFolder\".equals(commandStr)) \n          {\n               String newFolderStr = request.getParameter(\"NewFolderName\");\n               String status = \"110\";\n               \n               try \n               {\n                    ResourcePropertiesEdit resourceProperties = ContentHostingService.newResourceProperties();\n                    resourceProperties.addProperty (ResourceProperties.PROP_DISPLAY_NAME, newFolderStr);\n\n                    ContentHostingService.addCollection(currentFolder + Validator.escapeResourceName(newFolderStr) + \n                             \"/\", resourceProperties);\n                    status=\"0\";\n               }\n               catch (IdUsedException iue) \n               {\n                    status = \"101\";\n               }\n               catch(PermissionException sex) \n               {\n                    System.out.println(sex);\n                    status = \"103\";                    \n               }               \n               catch (Exception e) \n               {\n                    status = \"102\";               \n               }\n               setCreateFolderResponse(status, root, document);\n          }          \n          \n          document.getDocumentElement().normalize();\n          try \n          {\n               TransformerFactory tFactory = TransformerFactory.newInstance();\n               Transformer transformer = tFactory.newTransformer();\n               \n               DOMSource source = new DOMSource(document);\n     \n               StreamResult result = new StreamResult(out);\n               transformer.transform(source, result);\n\n          } \n          catch (Exception ex) \n          {\n               ex.printStackTrace();\n          }\n          \n          out.flush();\n          out.close();\n     }","id":59927,"modified_method":"/**\n      * Manage the Get requests (GetFolders, GetFoldersAndFiles, CreateFolder).<br>\n      *\n      * The servlet accepts commands sent in the following format:<br>\n      * connector?Command=CommandName&Type=ResourceType&CurrentFolder=FolderPath<br><br>\n      * It executes the command and then return the results to the client in XML format.\n      *\n      * Valid values for Type are: Image, File, Flash and Link \n      *\n      */\n     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n          \n          response.setContentType(\"text/xml; charset=UTF-8\");\n          response.setHeader(\"Cache-Control\",\"no-cache\");\n          PrintWriter out = response.getWriter();\n          \n          String commandStr = request.getParameter(\"Command\");\n          String type = request.getParameter(\"Type\");\n          String currentFolder = request.getParameter(\"CurrentFolder\");\n\n          Document document = null;\n          try \n          {\n               DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n               DocumentBuilder builder = factory.newDocumentBuilder();\n               document = builder.newDocument();\n          } \n          catch (ParserConfigurationException pce) \n          {\n               pce.printStackTrace();\n          }\n          \n          Node root = CreateCommonXml(document, commandStr, type, currentFolder, \"/access/content\"+currentFolder);\n          \n          if(\"GetFolders\".equals(commandStr)) \n          {\n               getFolders(currentFolder, root, document);\n          }\n          else if (\"GetFoldersAndFiles\".equals(commandStr)) \n          {\n               getFolders(currentFolder, root, document);\n               getFiles(currentFolder, root, document, type);\n          }\n          else if (\"CreateFolder\".equals(commandStr)) \n          {\n               String newFolderStr = request.getParameter(\"NewFolderName\");\n               String status = \"110\";\n               \n               try \n               {\n            \t    ContentCollectionEdit edit = ContentHostingService.addCollection(currentFolder + Validator.escapeResourceName(newFolderStr) + Entity.SEPARATOR);\n                    ResourcePropertiesEdit resourceProperties = edit.getPropertiesEdit();\n                    resourceProperties.addProperty (ResourceProperties.PROP_DISPLAY_NAME, newFolderStr);\n                    ContentHostingService.commitCollection(edit);\n                    \n                    status=\"0\";\n               }\n               catch (IdUsedException iue) \n               {\n                    status = \"101\";\n               }\n               catch(PermissionException sex) \n               {\n                    System.out.println(sex);\n                    status = \"103\";                    \n               }               \n               catch (Exception e) \n               {\n                    status = \"102\";               \n               }\n               setCreateFolderResponse(status, root, document);\n          }          \n          \n          document.getDocumentElement().normalize();\n          try \n          {\n               TransformerFactory tFactory = TransformerFactory.newInstance();\n               Transformer transformer = tFactory.newTransformer();\n               \n               DOMSource source = new DOMSource(document);\n     \n               StreamResult result = new StreamResult(out);\n               transformer.transform(source, result);\n\n          } \n          catch (Exception ex) \n          {\n               ex.printStackTrace();\n          }\n          \n          out.flush();\n          out.close();\n     }","commit_id":"fd2f14858771825d22c02967c8d1a1a2c8748f45","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void handle(Importable thing, String siteId) {\n\t\tif(canHandleType(thing.getTypeName())){\n\t\t\tString currentUser = SessionManager.getCurrentSessionUserId();\n\t\t\tSessionManager.getCurrentSession().setUserId(\"admin\");\n\t\t\tString id = null;\n\t\t\tString contentType = null;\n\t\t\tbyte[] contents = null;\n\t\t\tint notifyOption = NotificationService.NOTI_NONE;\n\t\t\tString title = null;\n\t\t\tString description = null;\n\t\t\tMap resourceProps = new HashMap();\n\t\t\tif (\"sakai-file-resource\".equals(thing.getTypeName())) {\n\t\t\t\t//title = ((FileResource)thing).getTitle();\n\t\t\t\tdescription = ((FileResource)thing).getDescription();\n\t\t\t\tString fileName = ((FileResource)thing).getFileName();\n\t\t\t\tid = \"/group/\" + siteId + \"/\" + ((FileResource)thing).getDestinationResourcePath();\n\t\t\t\tcontentType = new MimetypesFileTypeMap().getContentType(fileName);\n\t\t\t\tcontents = ((FileResource)thing).getFileBytes();\n//\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n//\t\t\t\t\ttitle = fileName;\n//\t\t\t\t}\n\t\t\t\ttitle = fileName;\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()) {\n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add file entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-web-link\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((WebLink)thing).getTitle();\n\t\t\t\tdescription = ((WebLink)thing).getDescription();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = ResourceProperties.TYPE_URL;\n\t\t\t\tString absoluteUrl = \"\";\n\t\t\t\tif (((WebLink)thing).isAbsolute()) {\n\t\t\t\t\tabsoluteUrl = ((WebLink)thing).getUrl();\n\t\t\t\t} else {\n\t\t\t\t\tabsoluteUrl = ServerConfigurationService.getServerUrl() + \"/access/content/group/\" + siteId + \"/\" + ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tcontents = absoluteUrl.getBytes();\n\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n\t\t\t\t\ttitle = ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add web link entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-html-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((HtmlDocument)thing).getTitle();\n\t\t\t\tcontents = ((HtmlDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/html\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add html document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-text-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((TextDocument)thing).getTitle();\n\t\t\t\tcontents = ((TextDocument)thing).getContent().getBytes();\n\t\t\t\tid = \"/group/\" + siteId + \"/\"+ thing.getContextPath();\n\t\t\t\tcontentType = \"text/plain\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add text document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t\t} // else if (\"sakai-folder\".equals(thing.getTypeName())) {\n//\t\t\t\ttitle = ((Folder)thing).getTitle();\n//\t\t\t\tdescription = ((Folder)thing).getDescription();\n//\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n//\t  \t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n//\t  \t\t\tresourceProps.put(ResourceProperties.PROP_COPYRIGHT, COPYRIGHT);\n//\t  \t\t\t/*\n//\t  \t\t\t * Added title to the end of the path. Otherwise, we're setting the props on the \n//\t  \t\t\t * containing folder rather than the folder itself.\n//\t  \t\t\t */\n//\t  \t\t\tString path = \"/group/\" + siteId + \"/\" + ((Folder)thing).getPath()+ title;\n//\t  \t\t\taddContentCollection(path,resourceProps);\n//\t  \t\t\t\n//\t\t\t}\n\t\t\tSessionManager.getCurrentSession().setUserId(currentUser);\n\t\t}\n\n\t}","id":59928,"modified_method":"public void handle(Importable thing, String siteId) {\n\t\tif(canHandleType(thing.getTypeName())){\n\t\t\tString currentUser = SessionManager.getCurrentSessionUserId();\n\t\t\tSessionManager.getCurrentSession().setUserId(\"admin\");\n\t\t\tString id = null;\n\t\t\tString contentType = null;\n\t\t\tbyte[] contents = null;\n\t\t\tint notifyOption = NotificationService.NOTI_NONE;\n\t\t\tString title = null;\n\t\t\tString description = null;\n\t\t\tMap resourceProps = new HashMap();\n\t\t\tif (\"sakai-file-resource\".equals(thing.getTypeName())) {\n\t\t\t\t//title = ((FileResource)thing).getTitle();\n\t\t\t\tdescription = ((FileResource)thing).getDescription();\n\t\t\t\tString fileName = ((FileResource)thing).getFileName();\n\t\t\t\tid = ContentHostingService.getSiteCollection(siteId) + ((FileResource)thing).getDestinationResourcePath();\n\t\t\t\tcontentType = new MimetypesFileTypeMap().getContentType(fileName);\n\t\t\t\tcontents = ((FileResource)thing).getFileBytes();\n//\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n//\t\t\t\t\ttitle = fileName;\n//\t\t\t\t}\n\t\t\t\ttitle = fileName;\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\n\t\t\t\t\n\t\t\t\tif (title.endsWith(\".zip\")) {\n\t\t\t\t\t\n\t\t\t\t\t//create a folder with the name of the zip, minus the .zip\n\t\t\t\t\tString container = title.substring(0, title.length() - 4);\n\t\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, container);\n\n\t\t\t\t\t//get the full path to the current folder\n\t\t\t\t\tString path = id.substring(0, id.length() - title.length());\n\n\t\t\t\t\taddContentCollection(path + container, resourceProps);\n\t\t  \t\t\taddAllResources(contents, path + container, notifyOption);\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(m_log.isDebugEnabled()) {\n\t\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add file entitled '\" + title + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t\t}\t\t\t\t\n\t  \t\t\t\n\t\t\t} else if (\"sakai-web-link\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((WebLink)thing).getTitle();\n\t\t\t\tdescription = ((WebLink)thing).getDescription();\n\t\t\t\tid = ContentHostingService.getSiteCollection(siteId) + thing.getContextPath();\n\t\t\t\tcontentType = ResourceProperties.TYPE_URL;\n\t\t\t\tString absoluteUrl = \"\";\n\t\t\t\tif (((WebLink)thing).isAbsolute()) {\n\t\t\t\t\tabsoluteUrl = ((WebLink)thing).getUrl();\n\t\t\t\t} else {\n\t\t\t\t\tabsoluteUrl = ServerConfigurationService.getServerUrl() + \"/access/content\" + \n\t\t\t\t\t\tContentHostingService.getSiteCollection(siteId) + ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tcontents = absoluteUrl.getBytes();\n\t\t\t\tif((title == null) || (title.equals(\"\"))) {\n\t\t\t\t\ttitle = ((WebLink)thing).getUrl();\n\t\t\t\t}\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add web link entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-html-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((HtmlDocument)thing).getTitle();\n\t\t\t\tcontents = ((HtmlDocument)thing).getContent().getBytes();\n\t\t\t\tid = ContentHostingService.getSiteCollection(siteId) + thing.getContextPath();\n\t\t\t\tcontentType = \"text/html\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add html document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} else if (\"sakai-text-document\".equals(thing.getTypeName())) {\n\t\t\t\ttitle = ((TextDocument)thing).getTitle();\n\t\t\t\tcontents = ((TextDocument)thing).getContent().getBytes();\n\t\t\t\tid = ContentHostingService.getSiteCollection(siteId) + thing.getContextPath();\n\t\t\t\tcontentType = \"text/plain\";\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t\t\t\tif(m_log.isDebugEnabled()){ \n\t\t\t\t\tm_log.debug(\"import ResourcesHandler about to add text document entitled '\" + title + \"'\");\n\t\t\t\t}\n\t\t\t\taddContentResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t\t} \n\t\t    else if (\"sakai-folder\".equals(thing.getTypeName())) {\n\t\t    \ttitle = ((Folder)thing).getTitle();\n\t\t\t\tdescription = ((Folder)thing).getDescription();\n\t\t\t\tresourceProps.put(ResourceProperties.PROP_DISPLAY_NAME, title);\n\t  \t\t\tresourceProps.put(ResourceProperties.PROP_DESCRIPTION, description);\n\t  \t\t\tresourceProps.put(ResourceProperties.PROP_COPYRIGHT, COPYRIGHT);\n\t  \t\t\t/*\n\t  \t\t\t * Added title to the end of the path. Otherwise, we're setting the props on the \n\t  \t\t\t * containing folder rather than the folder itself.\n\t  \t\t\t */\n\t  \t\t\tString path = ContentHostingService.getSiteCollection(siteId) + ((Folder)thing).getPath();\n\t    \t\taddContentCollection(path,resourceProps);\n\n\t\t\t}\n\t\t\tSessionManager.getCurrentSession().setUserId(currentUser);\n\t\t}\n\n\t}","commit_id":"a963731479ef2c8b05a2067da12a5e0ed2de2a73","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean canHandleType(String typeName) {\n\t\treturn ((\"sakai-file-resource\".equals(typeName) || (\"sakai-folder\".equals(typeName)) || (\"sakai-text-document\".equals(typeName)) || (\"sakai-html-document\".equals(typeName)) || (\"sakai-web-link\".equals(typeName))));\n\t}","id":59929,"modified_method":"public boolean canHandleType(String typeName) {\n\t\treturn ((\"sakai-file-resource\".equals(typeName) || (\"sakai-folder\".equals(typeName)) || \n\t\t\t\t(\"sakai-text-document\".equals(typeName)) || (\"sakai-html-document\".equals(typeName)) || \n\t\t\t\t(\"sakai-web-link\".equals(typeName)) || (\"sakai-learning-module\".equals(typeName))));\n\t}","commit_id":"a963731479ef2c8b05a2067da12a5e0ed2de2a73","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void addContentCollection(String path, Map properties) {\n//\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n//\t\t\tSet keys = properties.keySet();\n//\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n//\t\t\t\tString key = (String)i.next();\n//\t\t\t\tString value = (String)properties.get(key);\n//\t\t\t\tresourceProps.addProperty(key, value);\n//\t\t\t}\n\t\t\ttry {\n//\t\t\t\tString enclosingDirectory = path.substring(0, path.lastIndexOf('/', path.length() - 2) + 1);\n//\t\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\t\tContentCollectionEdit coll = ContentHostingService.addCollection(enclosingDirectory);\n//\t\t\t\t\tContentHostingService.commitCollection(coll);\n//\t\t\t\t}\n\t\t\t\tContentCollectionEdit coll = ContentHostingService.addCollection(path);\n\t\t\t\tContentHostingService.commitCollection(coll);\n\t\t\t} catch (IdUsedException e) {\n\t\t\t\t// if this thing already exists (which it probably does), \n\t\t\t\t// we'll do an update on the properties rather than creating the folder\n\t            try {\n\t                ContentHostingService.addProperty\n\t                    (path, ResourceProperties.PROP_DISPLAY_NAME, (String)properties.get(ResourceProperties.PROP_DISPLAY_NAME));\n\t                ContentHostingService.addProperty\n                    (path, ResourceProperties.PROP_COPYRIGHT, (String)properties.get(ResourceProperties.PROP_COPYRIGHT));\n                ContentHostingService.addProperty\n\t                (path, ResourceProperties.PROP_DESCRIPTION, (String)properties.get(ResourceProperties.PROP_DESCRIPTION));\n\t            } catch (PermissionException e1) {\n\t            \tm_log.error(\"ResourcesHandler.addContentCollection: \" + e.toString());\n\t            } catch (IdUnusedException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (TypeException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (InUseException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            } catch (ServerOverloadException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t            }\n\t\t\t} catch (IdInvalidException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (PermissionException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InconsistentException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}","id":59930,"modified_method":"protected void addContentCollection(String path, Map properties) {\n\t\t\tpath = makeIdClean(path);\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n//\t\t\tContentCollectionEdit coll = null;\n\t\t\ttry {\n//\t\t\t\tString enclosingDirectory = path.substring(0, path.lastIndexOf('/', path.length() - 2) + 1);\n//\t\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\t\tResourcePropertiesEdit enclosingProps = ContentHostingService.newResourceProperties();\n//\t\t\t\t\tenclosingProps.addProperty(ResourceProperties.PROP_DISPLAY_NAME, );\n//\t\t\t\t\tContentHostingService.addCollection(enclosingDirectory, enclosingProps);\n//\n//\t\t\t\t}\n\n\t\t\t\tContentHostingService.addCollection(path, resourceProps);\n\t\t\t\t//coll = ContentHostingService.addCollection(path);\n                //ContentHostingService.commitCollection(coll);\n\t\t\t\t\n\t\t\t} catch (IdUsedException e) {\n                // if this thing already exists (which it probably does), \n                // we'll do an update on the properties rather than creating the folder\n//\t\t\t\ttry {\n//\t\t\t\t\tContentHostingService.addProperty\n//\t\t\t\t\t\t(path, ResourceProperties.PROP_DISPLAY_NAME, (String)properties.get(ResourceProperties.PROP_DISPLAY_NAME));\n//\t\t\t\t\tContentHostingService.addProperty\n//\t\t\t\t\t\t(path, ResourceProperties.PROP_COPYRIGHT, (String)properties.get(ResourceProperties.PROP_COPYRIGHT));\n//\t\t\t\t\tContentHostingService.addProperty\n//\t\t\t\t\t\t(path, ResourceProperties.PROP_DESCRIPTION, (String)properties.get(ResourceProperties.PROP_DESCRIPTION));\n//\t\t\t\t} catch (PermissionException e1) {\n//\t\t\t\t\tm_log.error(\"ResourcesHandler.addContentCollection: \" + e.toString());\n//\t\t\t\t} catch (IdUnusedException e1) {\n//\t\t           // TODO Auto-generated catch block\n//\t\t           e1.printStackTrace();\n//\t\t\t\t} catch (TypeException e1) {\n//\t\t           // TODO Auto-generated catch block\n//\t\t           e1.printStackTrace();\n//\t\t\t\t} catch (InUseException e1) {\n//\t\t           // TODO Auto-generated catch block\n//\t\t           e1.printStackTrace();\n//\t\t\t\t} catch (ServerOverloadException e1) {\n//\t\t           // TODO Auto-generated catch block\n//\t\t           e1.printStackTrace();\n//\t\t\t\t}\n\n\t\t\t} catch (IdInvalidException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (PermissionException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InconsistentException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} \n\t}","commit_id":"a963731479ef2c8b05a2067da12a5e0ed2de2a73","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void addContentResource(String id, String contentType, byte[] contents, Map properties, int notifyOption) {\n\t\ttry {\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n//\t\t\tString enclosingDirectory = id.substring(0, id.lastIndexOf('/', id.length() - 2) + 1);\n//\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\tMap props = new HashMap();\n//\t\t\t\tprops.put(ResourceProperties.PROP_DISPLAY_NAME, enclosingDirectory.substring(enclosingDirectory.lastIndexOf('/') + 1, enclosingDirectory.length()));\n//\t\t\t\taddContentCollection(enclosingDirectory, props);\n//\t\t\t}\n\t\t\tContentHostingService.addResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t} catch (PermissionException e) {\n\t\t\tm_log.error(\"ResourcesHandler.addContentResource: \" + e.toString());\n\t\t} catch (IdUsedException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (IdInvalidException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (InconsistentException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (OverQuotaException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (ServerOverloadException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t}\n\t\t\n\t}","id":59931,"modified_method":"protected void addContentResource(String id, String contentType, byte[] contents, Map properties, int notifyOption) {\n\t\ttry {\n\t\t\tid = makeIdClean(id);\n\t\t\tResourcePropertiesEdit resourceProps = ContentHostingService.newResourceProperties();\n\t\t\tSet keys = properties.keySet();\n\t\t\tfor (Iterator i = keys.iterator();i.hasNext();) {\n\t\t\t\tString key = (String)i.next();\n\t\t\t\tString value = (String)properties.get(key);\n\t\t\t\tresourceProps.addProperty(key, value);\n\t\t\t}\n//\t\t\tString enclosingDirectory = id.substring(0, id.lastIndexOf('/', id.length() - 2) + 1);\n//\t\t\tif(!existsDirectory(enclosingDirectory)) {\n//\t\t\t\tMap props = new HashMap();\n//\t\t\t\tprops.put(ResourceProperties.PROP_DISPLAY_NAME, enclosingDirectory.substring(enclosingDirectory.lastIndexOf('/') + 1, enclosingDirectory.length()));\n//\t\t\t\taddContentCollection(enclosingDirectory, props);\n//\t\t\t}\n\t\t\tContentHostingService.addResource(id, contentType, contents, resourceProps, notifyOption);\n\t\t} catch (PermissionException e) {\n\t\t\tm_log.error(\"ResourcesHandler.addContentResource: \" + e.toString());\n\t\t} catch (IdUsedException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (IdInvalidException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (InconsistentException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (OverQuotaException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t} catch (ServerOverloadException e) {\n//\t\t\tTODO Auto-generated catch block\n            e.printStackTrace();\n\t\t}\n\t\t\n\t}","commit_id":"a963731479ef2c8b05a2067da12a5e0ed2de2a73","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void makeTransparent() {\n\t\tthis.addComponentListener(this);\n\t\tsetOpaque(false);\n\t    cardGrid.setOpaque(false);\n\t    jScrollPane1.setOpaque(false);\n\t    jScrollPane1.getViewport().setOpaque(false);\n\t\tcbSortBy.setModel(new DefaultComboBoxModel(SortBy.values()));\n\t}","id":59932,"modified_method":"public void makeTransparent() {\n\t\tthis.addComponentListener(this);\n\t\tsetOpaque(false);\n\t    cardGrid.setOpaque(false);\n\t    jScrollPane1.setOpaque(false);\n\t    jScrollPane1.getViewport().setOpaque(false);\n\t\tcbSortBy.setModel(new DefaultComboBoxModel(SortBy.values()));\n        jTextFieldSearch.addActionListener(searchAction);\n\t}","commit_id":"be7f01b0badc86640f8f77291bf00f833f10e585","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean match(Card card) {\n\t\tif (!super.match(card))\n\t\t\treturn notFilter;\n\n\t\tif (ownerId.size() > 0 && ownerId.contains(card.getOwnerId()) == notOwner)\n\t\t\treturn notFilter;\n\n\t\tif (expansionSetCode.size() > 0 && expansionSetCode.contains(card.getExpansionSetCode()) == notExpansionSetCode)\n\t\t\treturn notFilter;\n\n\t\tif (text.length() > 0) {\n\t\t\t// first check in card name\n\t\t\tboolean filterOut = !card.getName().toLowerCase().contains(text.toLowerCase());\n\t\t\t// if couldn't find\n\t\t\tif (filterOut) {\n\t\t\t\t// then try to find in rules\n\t\t\t\tfor (String rule : card.getRules()) {\n\t\t\t\t\tif (rule.toLowerCase().contains(text.toLowerCase())) {\n\t\t\t\t\t\tfilterOut = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                if (filterOut) {\n\t\t\t\t    for (String subType : card.getSubtype()) {\n                        if (subType.equalsIgnoreCase(text)) {\n                            filterOut = false;\n                            break;\n                        }\n                    }\n                }\n\n\t\t\t\tif (filterOut)\n\t\t\t\t\treturn notFilter;\n\t\t\t}\n\n\t\t}\n\t\t\n\t\treturn !notFilter;\n\t}","id":59933,"modified_method":"@Override\n\tpublic boolean match(Card card) {\n\t\tif (!super.match(card))\n\t\t\treturn notFilter;\n\n\t\tif (ownerId.size() > 0 && ownerId.contains(card.getOwnerId()) == notOwner)\n\t\t\treturn notFilter;\n\n\t\tif (expansionSetCode.size() > 0 && expansionSetCode.contains(card.getExpansionSetCode()) == notExpansionSetCode)\n\t\t\treturn notFilter;\n\n\t\tif (text.length() > 0) {\n\t\t\t// first check in card name\n\t\t\tboolean filterOut = !card.getName().toLowerCase().contains(text.toLowerCase());\n\t\t\t// if couldn't find\n\t\t\tif (filterOut) {\n                //separate by spaces\n                String[] tokens = text.toLowerCase().split(\" \");\n                int count = 0;\n                int found = 0;\n                for (String token : tokens) {\n                    if (!token.isEmpty()) {\n                        count++;\n                        // then try to find in rules\n                        for (String rule : card.getRules()) {\n                            if (rule.toLowerCase().contains(token)) {\n                                found++;\n                                break;\n                            }\n                        }\n\n                        if (filterOut) {\n                            for (String subType : card.getSubtype()) {\n                                if (subType.equalsIgnoreCase(token)) {\n                                    found++;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n\t\t\t\tif (found < count)\n\t\t\t\t\treturn notFilter;\n\t\t\t}\n\n\t\t}\n\t\t\n\t\treturn !notFilter;\n\t}","commit_id":"be7f01b0badc86640f8f77291bf00f833f10e585","url":"https://github.com/magefree/mage"},{"original_method":"private void dataToModel() {\n        while (model.getRowCount() > 0) {\n            model.removeRow(0);\n        }\n        for (String prefKey : data.keySet()) {\n            String prefValue = data.get(prefKey);\n            if (prefKey.contains(txtFilter.getText()) ||\n                    prefValue.contains(txtFilter.getText())) {\n                model.addRow(new String[] {prefKey, prefValue});\n            }\n        }\n    }","id":59934,"modified_method":"private void dataToModel() {\n        while (model.getRowCount() > 0) {\n            model.removeRow(0);\n        }\n        for (String prefKey : data.keySet()) {\n            String prefValue = data.get(prefKey);\n            String input[] = txtFilter.getText().split(\"\\\\s+\");\n            boolean canHas = true;\n\n            // Make 'wmsplugin cache' search for e.g. 'cache.wmsplugin'\n            for (String bit : input) {\n                if (!prefKey.contains(bit) && !prefValue.contains(bit))\n                    canHas = false;\n            }\n\n            if (canHas) {\n                model.addRow(new String[] {prefKey, prefValue});\n            }\n        }\n    }","commit_id":"5d47abc9f50b80f43b96748925bfc12bc8b5ec28","url":"https://github.com/openstreetmap/josm"},{"original_method":"public boolean hasAllele(Allele allele, boolean ignoreRefState) {\n        if ( allele == REF || allele == ALT ) // optimization for cached cases\n            return true;\n\n        for ( Allele a : getAlleles() ) {\n            if ( a.equals(allele, ignoreRefState) )\n                return true;\n        }\n\n        return false;\n    }","id":59935,"modified_method":"public boolean hasAllele(final Allele allele, final boolean ignoreRefState) {\n        return hasAllele(allele, ignoreRefState, getAlleles());\n    }","commit_id":"74ad0081630ab7b58bb3e97d77d853fd0da2e388","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * @return True if this context contains Allele allele, or false otherwise\n     */\n    public boolean hasAllele(Allele allele) {\n        return hasAllele(allele, false);\n    }","id":59936,"modified_method":"/**\n     * @return True if this context contains Allele allele, or false otherwise\n     */\n    public boolean hasAllele(final Allele allele) {\n        return hasAllele(allele, false, getAlleles());\n    }","commit_id":"74ad0081630ab7b58bb3e97d77d853fd0da2e388","url":"https://github.com/broadgsa/gatk"},{"original_method":"public static boolean isViolation(VariantContext vc, Genotype momG, Genotype dadG, Genotype childG ) {\n        //VariantContext momVC = vc.subContextFromGenotypes(momG);\n        //VariantContext dadVC = vc.subContextFromGenotypes(dadG);\n        int i = 0;\n        for ( Allele momAllele : momG.getAlleles() ) {\n            for ( Allele dadAllele : dadG.getAlleles() ) {\n                if ( momAllele.isCalled() && dadAllele.isCalled() ) {\n                    Genotype possibleChild = new Genotype(\"possibleGenotype\" + i, Arrays.asList(momAllele, dadAllele));\n                    if ( childG.sameGenotype(possibleChild, false) ) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }","id":59937,"modified_method":"public static boolean isViolation(VariantContext vc, Genotype momG, Genotype dadG, Genotype childG ) {\n        return isViolation(vc, momG.getAlleles(), dadG.getAlleles(), childG.getAlleles());\n    }","commit_id":"7b17bcd0af2c4609a5dd3e83b007d3f383cf7ae9","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\r\n  public void mouseDragged(final MouseEvent e) {\r\n    mouseX = e.getX();\r\n    mouseY = e.getY();\r\n    final int h = getHeight();\r\n    final int w = getWidth();\r\n    final int th = 5;\r\n    final int lb = MARGINLEFT - th;\r\n    final int rb = w - MARGINRIGHT + th;\r\n    final int tb = MARGINTOP - th;\r\n    final int bb = h - MARGINBOTTOM + th;\r\n    if(!(mouseY > tb && mouseY < bb && mouseX > lb && mouseX < rb))\r\n      return;\r\n      \r\n    if(!dragging) {\r\n      dragging = true;\r\n      selectionBox.setStart(mouseX, mouseY);\r\n      focusedItem = -1;\r\n    }\r\n    selectionBox.setEnd(mouseX, mouseY);\r\n    mark();\r\n    repaint();\r\n  }","id":59938,"modified_method":"@Override\r\n  public void mouseDragged(final MouseEvent e) {\r\n    mouseX = e.getX();\r\n    mouseY = e.getY();\r\n    final int h = getHeight();\r\n    final int w = getWidth();\r\n    final int th = 5;\r\n    final int lb = MARGINLEFT - th;\r\n    final int rb = w - MARGINRIGHT + th;\r\n    final int tb = MARGINTOP - th;\r\n    final int bb = h - MARGINBOTTOM + th;\r\n    boolean inBox = false;\r\n    if(mouseY > tb && mouseY < bb && mouseX > lb && mouseX < rb)\r\n      inBox = true;\r\n    if(!dragging && !inBox)\r\n      return;\r\n    if(!dragging) {\r\n      dragging = true;\r\n      selectionBox.setStart(mouseX, mouseY);\r\n      focusedItem = -1;\r\n    }\r\n    \r\n    if(!inBox) {\r\n      if(mouseX < lb) {\r\n        if(mouseY > bb) {\r\n          selectionBox.setEnd(lb, bb);\r\n        } else if(mouseY < tb) {\r\n          selectionBox.setEnd(lb, tb);\r\n        } else {\r\n          selectionBox.setEnd(lb, mouseY);\r\n        }\r\n      } else if(mouseX > rb) {\r\n        if(mouseY > bb) {\r\n          selectionBox.setEnd(rb, bb);\r\n        } else if(mouseY < tb) {\r\n          selectionBox.setEnd(rb, tb);\r\n        } else {\r\n          selectionBox.setEnd(rb, mouseY);\r\n        }\r\n      } else if(mouseY < tb) {\r\n        selectionBox.setEnd(mouseX, tb);\r\n      } else\r\n        selectionBox.setEnd(mouseX, bb);\r\n      \r\n    } else {\r\n      selectionBox.setEnd(mouseX, mouseY);\r\n    }\r\n      \r\n    mark();\r\n    repaint();\r\n  }","commit_id":"b5df53a66c29037683b91a856e909af91185f3eb","url":"https://github.com/BaseXdb/basex"},{"original_method":"protected AssetEntryQuery getAssetEntryQuery(\n\t\t\tLayout layout, long companyId, long[] groupIds,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tAssetEntryQuery assetEntryQuery = AssetPublisherUtil.getAssetEntryQuery(\n\t\t\tportletPreferences, groupIds, null, null);\n\n\t\tlong[] classNameIds = AssetPublisherUtil.getClassNameIds(\n\t\t\tportletPreferences,\n\t\t\tAssetRendererFactoryRegistryUtil.getClassNameIds(companyId, true));\n\n\t\tassetEntryQuery.setClassNameIds(classNameIds);\n\n\t\tlong[] classTypeIds = GetterUtil.getLongValues(\n\t\t\tportletPreferences.getValues(\"classTypeIds\", null));\n\n\t\tassetEntryQuery.setClassTypeIds(classTypeIds);\n\n\t\tassetEntryQuery.setEnablePermissions(false);\n\t\tassetEntryQuery.setExcludeZeroViewCount(false);\n\t\tassetEntryQuery.setGroupIds(groupIds);\n\n\t\tboolean showOnlyLayoutAssets = GetterUtil.getBoolean(\n\t\t\tportletPreferences.getValue(\"showOnlyLayoutAssets\", null));\n\n\t\tif (showOnlyLayoutAssets) {\n\t\t\tassetEntryQuery.setLayout(layout);\n\t\t}\n\n\t\tString orderByCol1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn1\", \"modifiedDate\"));\n\n\t\tassetEntryQuery.setOrderByCol1(orderByCol1);\n\n\t\tString orderByCol2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn2\", \"title\"));\n\n\t\tassetEntryQuery.setOrderByCol2(orderByCol2);\n\n\t\tString orderByType1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType1\", \"DESC\"));\n\n\t\tassetEntryQuery.setOrderByType1(orderByType1);\n\n\t\tString orderByType2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType2\", \"ASC\"));\n\n\t\tassetEntryQuery.setOrderByType2(orderByType2);\n\n\t\tint end = AssetPublisherWebConfigurationValues.DYNAMIC_EXPORT_LIMIT;\n\t\tint start = 0;\n\n\t\tif (end == 0) {\n\t\t\tstart = QueryUtil.ALL_POS;\n\t\t\tend = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setEnd(end);\n\t\tassetEntryQuery.setStart(start);\n\n\t\treturn assetEntryQuery;\n\t}","id":59939,"modified_method":"protected AssetEntryQuery getAssetEntryQuery(\n\t\t\tLayout layout, long companyId, long[] groupIds,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tAssetEntryQuery assetEntryQuery = AssetPublisherUtil.getAssetEntryQuery(\n\t\t\tportletPreferences, groupIds, null, null);\n\n\t\tlong[] classNameIds = AssetPublisherUtil.getClassNameIds(\n\t\t\tportletPreferences,\n\t\t\tAssetRendererFactoryRegistryUtil.getClassNameIds(companyId, true));\n\n\t\tassetEntryQuery.setClassNameIds(classNameIds);\n\n\t\tlong[] classTypeIds = GetterUtil.getLongValues(\n\t\t\tportletPreferences.getValues(\"classTypeIds\", null));\n\n\t\tassetEntryQuery.setClassTypeIds(classTypeIds);\n\n\t\tassetEntryQuery.setEnablePermissions(false);\n\n\t\tint end = AssetPublisherWebConfigurationValues.DYNAMIC_EXPORT_LIMIT;\n\n\t\tif (end == 0) {\n\t\t\tend = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setEnd(end);\n\n\t\tassetEntryQuery.setExcludeZeroViewCount(false);\n\t\tassetEntryQuery.setGroupIds(groupIds);\n\n\t\tboolean showOnlyLayoutAssets = GetterUtil.getBoolean(\n\t\t\tportletPreferences.getValue(\"showOnlyLayoutAssets\", null));\n\n\t\tif (showOnlyLayoutAssets) {\n\t\t\tassetEntryQuery.setLayout(layout);\n\t\t}\n\n\t\tString orderByCol1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn1\", \"modifiedDate\"));\n\n\t\tassetEntryQuery.setOrderByCol1(orderByCol1);\n\n\t\tString orderByCol2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn2\", \"title\"));\n\n\t\tassetEntryQuery.setOrderByCol2(orderByCol2);\n\n\t\tString orderByType1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType1\", \"DESC\"));\n\n\t\tassetEntryQuery.setOrderByType1(orderByType1);\n\n\t\tString orderByType2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType2\", \"ASC\"));\n\n\t\tassetEntryQuery.setOrderByType2(orderByType2);\n\n\t\tint start = 0;\n\n\t\tif (end == 0) {\n\t\t\tstart = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setStart(start);\n\n\t\treturn assetEntryQuery;\n\t}","commit_id":"dbc35ee98c21a08b9c38abd677d3ec6a9ca3fc7b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected AssetEntryQuery getAssetEntryQuery(\n\t\t\tLayout layout, long companyId, long[] groupIds,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tAssetEntryQuery assetEntryQuery = AssetPublisherUtil.getAssetEntryQuery(\n\t\t\tportletPreferences, groupIds, null, null);\n\n\t\tlong[] classNameIds = AssetPublisherUtil.getClassNameIds(\n\t\t\tportletPreferences,\n\t\t\tAssetRendererFactoryRegistryUtil.getClassNameIds(companyId, true));\n\n\t\tassetEntryQuery.setClassNameIds(classNameIds);\n\n\t\tlong[] classTypeIds = GetterUtil.getLongValues(\n\t\t\tportletPreferences.getValues(\"classTypeIds\", null));\n\n\t\tassetEntryQuery.setClassTypeIds(classTypeIds);\n\n\t\tassetEntryQuery.setEnablePermissions(false);\n\t\tassetEntryQuery.setExcludeZeroViewCount(false);\n\t\tassetEntryQuery.setGroupIds(groupIds);\n\n\t\tboolean showOnlyLayoutAssets = GetterUtil.getBoolean(\n\t\t\tportletPreferences.getValue(\"showOnlyLayoutAssets\", null));\n\n\t\tif (showOnlyLayoutAssets) {\n\t\t\tassetEntryQuery.setLayout(layout);\n\t\t}\n\n\t\tString orderByCol1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn1\", \"modifiedDate\"));\n\n\t\tassetEntryQuery.setOrderByCol1(orderByCol1);\n\n\t\tString orderByCol2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn2\", \"title\"));\n\n\t\tassetEntryQuery.setOrderByCol2(orderByCol2);\n\n\t\tString orderByType1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType1\", \"DESC\"));\n\n\t\tassetEntryQuery.setOrderByType1(orderByType1);\n\n\t\tString orderByType2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType2\", \"ASC\"));\n\n\t\tassetEntryQuery.setOrderByType2(orderByType2);\n\n\t\tint end = AssetPublisherWebConfigurationValues.DYNAMIC_EXPORT_LIMIT;\n\t\tint start = 0;\n\n\t\tif (end == 0) {\n\t\t\tstart = QueryUtil.ALL_POS;\n\t\t\tend = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setEnd(end);\n\t\tassetEntryQuery.setStart(start);\n\n\t\treturn assetEntryQuery;\n\t}","id":59940,"modified_method":"protected AssetEntryQuery getAssetEntryQuery(\n\t\t\tLayout layout, long companyId, long[] groupIds,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tAssetEntryQuery assetEntryQuery = AssetPublisherUtil.getAssetEntryQuery(\n\t\t\tportletPreferences, groupIds, null, null);\n\n\t\tlong[] classNameIds = AssetPublisherUtil.getClassNameIds(\n\t\t\tportletPreferences,\n\t\t\tAssetRendererFactoryRegistryUtil.getClassNameIds(companyId, true));\n\n\t\tassetEntryQuery.setClassNameIds(classNameIds);\n\n\t\tlong[] classTypeIds = GetterUtil.getLongValues(\n\t\t\tportletPreferences.getValues(\"classTypeIds\", null));\n\n\t\tassetEntryQuery.setClassTypeIds(classTypeIds);\n\n\t\tassetEntryQuery.setEnablePermissions(false);\n\n\t\tint end = AssetPublisherWebConfigurationValues.DYNAMIC_EXPORT_LIMIT;\n\n\t\tif (end == 0) {\n\t\t\tend = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setEnd(end);\n\n\t\tassetEntryQuery.setExcludeZeroViewCount(false);\n\t\tassetEntryQuery.setGroupIds(groupIds);\n\n\t\tboolean showOnlyLayoutAssets = GetterUtil.getBoolean(\n\t\t\tportletPreferences.getValue(\"showOnlyLayoutAssets\", null));\n\n\t\tif (showOnlyLayoutAssets) {\n\t\t\tassetEntryQuery.setLayout(layout);\n\t\t}\n\n\t\tString orderByCol1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn1\", \"modifiedDate\"));\n\n\t\tassetEntryQuery.setOrderByCol1(orderByCol1);\n\n\t\tString orderByCol2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByColumn2\", \"title\"));\n\n\t\tassetEntryQuery.setOrderByCol2(orderByCol2);\n\n\t\tString orderByType1 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType1\", \"DESC\"));\n\n\t\tassetEntryQuery.setOrderByType1(orderByType1);\n\n\t\tString orderByType2 = GetterUtil.getString(\n\t\t\tportletPreferences.getValue(\"orderByType2\", \"ASC\"));\n\n\t\tassetEntryQuery.setOrderByType2(orderByType2);\n\n\t\tint start = 0;\n\n\t\tif (end == 0) {\n\t\t\tstart = QueryUtil.ALL_POS;\n\t\t}\n\n\t\tassetEntryQuery.setStart(start);\n\n\t\treturn assetEntryQuery;\n\t}","commit_id":"bb097364271245f0674704cdaf82c9ec5d53facc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void childAdded(SModelChildEvent event) {\n      if (event.getParent().getAdapter() instanceof Classifier) {\n        if (!((event.getChild().getAdapter() instanceof BaseMethodDeclaration))) {\n          return;\n        }\n      }\n      if (event.getParent().getAdapter() instanceof BaseMethodDeclaration) {\n        String role = event.getChildRole();\n        if (!(BaseMethodDeclaration.PARAMETER.equals(role))) {\n          return;\n        }\n      }\n      super.childAdded(event);\n    }","id":59941,"modified_method":"public void childAdded(SModelChildEvent event) {\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n        if (!(event.getChild().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\"))) {\n          return;\n        }\n      }\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\")) {\n        String role = event.getChildRole();\n        if (!(BaseMethodDeclaration.PARAMETER.equals(role))) {\n          return;\n        }\n      }\n      super.childAdded(event);\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void childRemoved(SModelChildEvent event) {\n      if (event.getParent().getAdapter() instanceof Classifier) {\n        if (!((event.getChild().getAdapter() instanceof BaseMethodDeclaration))) {\n          return;\n        }\n      }\n      if (event.getParent().getAdapter() instanceof BaseMethodDeclaration) {\n        String role = event.getChildRole();\n        if (!(BaseMethodDeclaration.PARAMETER.equals(role))) {\n          return;\n        }\n      }\n      super.childRemoved(event);\n    }","id":59942,"modified_method":"public void childRemoved(SModelChildEvent event) {\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n        if (!(event.getChild().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\"))) {\n          return;\n        }\n      }\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\")) {\n        String role = event.getChildRole();\n        if (!(BaseMethodDeclaration.PARAMETER.equals(role))) {\n          return;\n        }\n      }\n      super.childRemoved(event);\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void propertyChanged(SModelPropertyEvent event) {\n      BaseAdapter node = event.getNode().getAdapter();\n      if (BaseVariableDeclaration.NAME.equals(event.getPropertyName()) && (node instanceof FieldDeclaration || node instanceof StaticFieldDeclaration)) {\n        super.propertyChanged(event);\n      }\n    }","id":59943,"modified_method":"public void propertyChanged(SModelPropertyEvent event) {\n      SNode node = event.getNode();\n      if (BaseVariableDeclaration.NAME.equals(event.getPropertyName()) && (SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") || SNodeOperations.isInstanceOf(node, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\"))) {\n        super.propertyChanged(event);\n      }\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void childRemoved(SModelChildEvent event) {\n      if (event.getParent().getAdapter() instanceof Classifier) {\n        BaseAdapter child = event.getChild().getAdapter();\n        if (!((child instanceof FieldDeclaration || child instanceof StaticFieldDeclaration))) {\n          return;\n        }\n      }\n      if (event.getParent().getAdapter() instanceof VariableDeclaration) {\n        return;\n      }\n      super.childRemoved(event);\n    }","id":59944,"modified_method":"public void childRemoved(SModelChildEvent event) {\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n        SNode child = event.getChild();\n        if (!((SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") || SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\")))) {\n          return;\n        }\n      }\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\")) {\n        return;\n      }\n      super.childRemoved(event);\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void propertyChanged(SModelPropertyEvent event) {\n      if (BaseMethodDeclaration.NAME.equals(event.getPropertyName()) && event.getNode().getAdapter() instanceof BaseMethodDeclaration) {\n        super.propertyChanged(event);\n      }\n    }","id":59945,"modified_method":"public void propertyChanged(SModelPropertyEvent event) {\n      if (BaseMethodDeclaration.NAME.equals(event.getPropertyName()) && event.getNode().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\")) {\n        super.propertyChanged(event);\n      }\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void childAdded(SModelChildEvent event) {\n      if (event.getParent().getAdapter() instanceof Classifier) {\n        BaseAdapter child = event.getChild().getAdapter();\n        if (!((child instanceof FieldDeclaration || child instanceof StaticFieldDeclaration))) {\n          return;\n        }\n      }\n      if (event.getParent().getAdapter() instanceof VariableDeclaration) {\n        return;\n      }\n      super.childAdded(event);\n    }","id":59946,"modified_method":"public void childAdded(SModelChildEvent event) {\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.Classifier\")) {\n        SNode child = event.getChild();\n        if (!((SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\") || SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration\")))) {\n          return;\n        }\n      }\n      if (event.getParent().isInstanceOfConcept(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\")) {\n        return;\n      }\n      super.childAdded(event);\n    }","commit_id":"c94b441352c97742a9b38c9e525a7cbfe2d413c6","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * This method is called whenever we receive a notice.\n     * \n     * @param sourceNick The nick of the user that sent the notice.\n     * @param sourceLogin The login of the user that sent the notice.\n     * @param sourceHostname The host name of the user that sent the notice.\n     * @param target The target of the notice, be it our nick or a channel name.\n     * @param notice The notice message.\n     */\n    protected void onNotice(String sourceNick,\n                            String sourceLogin,\n                            String sourceHostname,\n                            String target,\n                            String notice)\n    {\n        logger.trace(\"NOTICE on \" + target + \": Received from \"\n                + sourceNick + \" \" + sourceLogin + \"@\" + sourceHostname\n                + \" the message: \" + notice);\n\n        MessageIrcImpl message\n            = new MessageIrcImpl(   notice,\n                                    MessageIrcImpl.DEFAULT_MIME_TYPE,\n                                    MessageIrcImpl.DEFAULT_MIME_ENCODING,\n                                    null);\n\n        // We consider that the target is always a chat room.\n        ChatRoomIrcImpl chatRoom = ircMUCOpSet.getChatRoom(target);\n\n        if(chatRoom == null || !chatRoom.isJoined())\n            chatRoom = (ChatRoomIrcImpl) ircMUCOpSet.findSystemRoom();\n\n        ChatRoomMember sourceMember = chatRoom.getChatRoomMember(sourceNick);\n\n        if (sourceMember == null)\n            return;\n\n        chatRoom.fireMessageReceivedEvent(\n                message,\n                sourceMember,\n                new Date(System.currentTimeMillis()),\n                ChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED);\n    }","id":59947,"modified_method":"/**\n     * This method is called whenever we receive a notice.\n     * \n     * @param sourceNick The nick of the user that sent the notice.\n     * @param sourceLogin The login of the user that sent the notice.\n     * @param sourceHostname The host name of the user that sent the notice.\n     * @param target The target of the notice, be it our nick or a channel name.\n     * @param notice The notice message.\n     */\n    protected void onNotice(String sourceNick,\n                            String sourceLogin,\n                            String sourceHostname,\n                            String target,\n                            String notice)\n    {\n        logger.trace(\"NOTICE on \" + target + \": Received from \"\n                + sourceNick + \" \" + sourceLogin + \"@\" + sourceHostname\n                + \" the message: \" + notice);\n\n        MessageIrcImpl message\n            = new MessageIrcImpl(   notice,\n                                    MessageIrcImpl.DEFAULT_MIME_TYPE,\n                                    MessageIrcImpl.DEFAULT_MIME_ENCODING,\n                                    null);\n\n        ChatRoomIrcImpl chatRoom = ircMUCOpSet.getChatRoom(target);\n\n        ChatRoomMember sourceMember = null;\n\n        if(chatRoom == null || !chatRoom.isJoined())\n        {\n            chatRoom = (ChatRoomIrcImpl) ircMUCOpSet.findSystemRoom();\n\n            sourceMember = ircMUCOpSet.findSystemMember();\n        }\n        else\n        {\n            sourceMember = chatRoom.getChatRoomMember(sourceNick);\n        }\n\n        if (sourceMember == null)\n            return;\n\n        chatRoom.fireMessageReceivedEvent(\n                message,\n                sourceMember,\n                new Date(System.currentTimeMillis()),\n                ChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED);\n    }","commit_id":"edaddea17b9375297c8b3c69b7838f6d7f34c509","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Called when we are invited to a channel by a user.\n     * \n     * @param targetNick The nick of the user being invited - should be us!\n     * @param sourceNick The nick of the user that sent the invitation.\n     * @param sourceLogin The login of the user that sent the invitation.\n     * @param sourceHostname The host name of the user that sent the invitation.\n     * @param channel The channel that we're being invited to.\n     */\n    protected void onInvite(String targetNick,\n                            String sourceNick,\n                            String sourceLogin,\n                            String sourceHostname,\n                            String channel)\n    {\n        if (logger.isDebugEnabled())\n            logger.debug(\"INVITE on \" + channel + \": Received from \"\n                + sourceNick + \" \" + sourceLogin + \"@\" + sourceHostname);\n\n        ChatRoom targetChatRoom = ircMUCOpSet.findRoom(channel);\n\n        ircMUCOpSet.fireInvitationEvent(targetChatRoom, \n                                        sourceNick,\n                                        \"\",\n                                        null);\n    }","id":59948,"modified_method":"/**\n     * Called when we are invited to a channel by a user.\n     * \n     * @param targetNick The nick of the user being invited - should be us!\n     * @param sourceNick The nick of the user that sent the invitation.\n     * @param sourceLogin The login of the user that sent the invitation.\n     * @param sourceHostname The host name of the user that sent the invitation.\n     * @param channel The channel that we're being invited to.\n     */\n    protected void onInvite(String targetNick,\n                            String sourceNick,\n                            String sourceLogin,\n                            String sourceHostname,\n                            String channel)\n    {\n        logger.trace(\"INVITE on \" + channel + \": Received from \"\n                + sourceNick + \" \" + sourceLogin + \"@\" + sourceHostname);\n\n        ChatRoom targetChatRoom = ircMUCOpSet.findRoom(channel);\n\n        ircMUCOpSet.fireInvitationEvent(targetChatRoom, \n                                        sourceNick,\n                                        \"\",\n                                        null);\n    }","commit_id":"edaddea17b9375297c8b3c69b7838f6d7f34c509","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * This method sends a command to the server which can also be an action or\n     * a notice.\n     * \n     * @param chatRoom the chat room corresponding to the command\n     * @param command the command we want to send\n     */\n    protected void sendCommand(ChatRoomIrcImpl chatRoom, String command)\n    {\n        if (command.startsWith(\"/me\"))\n        {\n            this.sendAction(chatRoom.getName(), command.substring(3));\n        }\n        else if (command.startsWith(\"/notice\"))\n        {\n            this.sendNotice(chatRoom.getName(), command.substring(7));\n        }\n        else if (command.startsWith(\"/msg\"))\n        {\n            StringTokenizer tokenizer = new StringTokenizer(command);\n\n            String target = null;\n            String messageContent = null;\n\n            // We don't need the /msg command text.\n            tokenizer.nextToken();\n\n            if(tokenizer.hasMoreTokens())\n                target = tokenizer.nextToken();\n\n            if(tokenizer.hasMoreTokens())\n                messageContent = tokenizer.nextToken();\n\n            this.sendMessage(target, messageContent);\n        }\n        else if (command.startsWith(\"/query\"))\n        {\n            StringTokenizer tokenizer = new StringTokenizer(command);\n\n            String target = null;\n\n            tokenizer.nextToken();\n\n            if(tokenizer.hasMoreTokens())\n                target = tokenizer.nextToken();\n\n            ChatRoomIrcImpl privateChatRoom\n                = ircMUCOpSet.findPrivateChatRoom(target);\n\n            if(privateChatRoom == null)\n                return;\n\n            ChatRoomMember sourceMember = privateChatRoom.getChatRoomMember(\n                parentProvider.getAccountID().getService());\n\n            if (sourceMember == null)\n                sourceMember\n                    = new ChatRoomMemberIrcImpl(\n                            parentProvider,\n                            privateChatRoom,\n                            parentProvider.getAccountID().getService(),\n                            \"\",\n                            \"\",\n                            ChatRoomMemberRole.GUEST);\n\n            MessageIrcImpl queryMessage\n                = new MessageIrcImpl(   \"Private conversation initiated.\",\n                                        MessageIrcImpl.DEFAULT_MIME_TYPE,\n                                        MessageIrcImpl.DEFAULT_MIME_ENCODING,\n                                        null);\n\n            privateChatRoom.fireMessageReceivedEvent(\n                queryMessage,\n                sourceMember,\n                new Date(System.currentTimeMillis()),\n                ChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);\n        }\n        else\n        {\n            this.sendRawLine(command.substring(1));\n        }\n    }","id":59949,"modified_method":"/**\n     * This method sends a command to the server which can also be an action or\n     * a notice.\n     * \n     * @param chatRoom the chat room corresponding to the command\n     * @param command the command we want to send\n     */\n    protected void sendCommand(ChatRoomIrcImpl chatRoom, String command)\n    {\n        if (command.startsWith(\"/me\"))\n        {\n            this.sendAction(chatRoom.getName(), command.substring(3));\n        }\n        else if (command.startsWith(\"/notice\"))\n        {\n            this.sendNotice(chatRoom.getName(), command.substring(7));\n        }\n        else if (command.startsWith(\"/msg\"))\n        {\n            StringTokenizer tokenizer = new StringTokenizer(command);\n\n            String target = \"\";\n            String messageContent = \"\";\n\n            // We don't need the /msg command text.\n            tokenizer.nextToken();\n\n            if(tokenizer.hasMoreTokens())\n                target = tokenizer.nextToken();\n\n            while(tokenizer.hasMoreTokens())\n            {\n                messageContent += tokenizer.nextToken() + \" \";\n            }\n\n            this.sendMessage(target, messageContent);\n        }\n        else if (command.startsWith(\"/query\"))\n        {\n            StringTokenizer tokenizer = new StringTokenizer(command);\n\n            String target = null;\n\n            tokenizer.nextToken();\n\n            if(tokenizer.hasMoreTokens())\n                target = tokenizer.nextToken();\n\n            this.createPrivateChatRoom(target);\n        }\n        else\n        {\n            this.sendRawLine(command.substring(1));\n        }\n    }","commit_id":"edaddea17b9375297c8b3c69b7838f6d7f34c509","url":"https://github.com/jitsi/jitsi"},{"original_method":"private static void _send(Session session, Message msg)\n\t\tthrows MessagingException {\n\n\t\ttry {\n\t\t\tboolean smtpAuth = GetterUtil.getBoolean(\n\t\t\t\tsession.getProperty(\"mail.smtp.auth\"), false);\n\t\t\tString smtpHost = session.getProperty(\"mail.smtp.host\");\n\t\t\tString user = session.getProperty(\"mail.smtp.user\");\n\t\t\tString password = session.getProperty(\"mail.smtp.password\");\n\n\t\t\tif (smtpAuth && Validator.isNotNull(user) &&\n\t\t\t\tValidator.isNotNull(password)) {\n\n\t\t\t\tTransport transport = session.getTransport(\"smtp\");\n\n\t\t\t\ttransport.connect(smtpHost, user, password);\n\n\t\t\t\ttransport.sendMessage(msg, msg.getAllRecipients());\n\n\t\t\t\ttransport.close();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tTransport.send(msg);\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tif (me.getNextException() instanceof SocketException) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Failed to connect to a valid mail server. Please \" +\n\t\t\t\t\t\t\t\"make sure one is properly configured. \" +\n\t\t\t\t\t\t\t\tme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":59950,"modified_method":"private static void _send(\n\t\t\tSession session, Message msg, InternetAddress[] listAddresses)\n\t\tthrows MessagingException {\n\n\t\ttry {\n\t\t\tboolean smtpAuth = GetterUtil.getBoolean(\n\t\t\t\tsession.getProperty(\"mail.smtp.auth\"), false);\n\t\t\tString smtpHost = session.getProperty(\"mail.smtp.host\");\n\t\t\tString user = session.getProperty(\"mail.smtp.user\");\n\t\t\tString password = session.getProperty(\"mail.smtp.password\");\n\n\t\t\tif (smtpAuth && Validator.isNotNull(user) &&\n\t\t\t\tValidator.isNotNull(password)) {\n\n\t\t\t\tTransport transport = session.getTransport(\"smtp\");\n\n\t\t\t\ttransport.connect(smtpHost, user, password);\n\n\t\t\t\tif (listAddresses != null && listAddresses.length > 0) {\n\t\t\t\t\ttransport.sendMessage(msg, listAddresses);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttransport.sendMessage(msg, msg.getAllRecipients());\n\t\t\t\t}\n\n\t\t\t\ttransport.close();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (listAddresses != null && listAddresses.length > 0) {\n\t\t\t\t\tTransport.send(msg, listAddresses);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tTransport.send(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tif (me.getNextException() instanceof SocketException) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Failed to connect to a valid mail server. Please \" +\n\t\t\t\t\t\t\t\"make sure one is properly configured. \" +\n\t\t\t\t\t\t\t\tme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void send(MailMessage mailMessage)\n\t\tthrows MailEngineException {\n\n\t\tsend(\n\t\t\tmailMessage.getFrom(), mailMessage.getTo(), mailMessage.getCC(),\n\t\t\tmailMessage.getBCC(), mailMessage.getSubject(),\n\t\t\tmailMessage.getBody(), mailMessage.isHTMLFormat(),\n\t\t\tmailMessage.getReplyTo(), mailMessage.getMessageId(),\n\t\t\tmailMessage.getInReplyTo(), mailMessage.getAttachments());\n\t}","id":59951,"modified_method":"public static void send(MailMessage mailMessage)\n\t\tthrows MailEngineException {\n\n\t\tsend(\n\t\t\tmailMessage.getFrom(), mailMessage.getTo(), mailMessage.getCC(),\n\t\t\tmailMessage.getBCC(), mailMessage.getListAddresses(),\n\t\t\tmailMessage.getSubject(), mailMessage.getBody(),\n\t\t\tmailMessage.isHTMLFormat(), mailMessage.getReplyTo(),\n\t\t\tmailMessage.getMessageId(), mailMessage.getInReplyTo(),\n\t\t\tmailMessage.getAttachments());\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void send(\n\t\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\t\tInternetAddress[] bcc, String subject, String body,\n\t\t\tboolean htmlFormat, InternetAddress[] replyTo, String messageId,\n\t\t\tString inReplyTo)\n\t\tthrows MailEngineException {\n\n\t\tsend(\n\t\t\tfrom, to, cc, bcc, subject, body, htmlFormat, replyTo, messageId,\n\t\t\tinReplyTo, null);\n\t}","id":59952,"modified_method":"public static void send(\n\t\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\t\tInternetAddress[] bcc, String subject, String body,\n\t\t\tboolean htmlFormat, InternetAddress[] replyTo, String messageId,\n\t\t\tString inReplyTo)\n\t\tthrows MailEngineException {\n\n\t\tsend(\n\t\t\tfrom, to, cc, bcc, null, subject, body, htmlFormat, replyTo,\n\t\t\tmessageId, inReplyTo, null);\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void send(byte[] msgByteArray) throws MailEngineException {\n\t\ttry {\n\t\t\tSession session = getSession();\n\n\t\t\tMessage msg = new MimeMessage(\n\t\t\t\tsession, new ByteArrayInputStream(msgByteArray));\n\n\t\t\t_send(session, msg);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailEngineException(e);\n\t\t}\n\t}","id":59953,"modified_method":"public static void send(byte[] msgByteArray) throws MailEngineException {\n\t\ttry {\n\t\t\tSession session = getSession();\n\n\t\t\tMessage msg = new MimeMessage(\n\t\t\t\tsession, new ByteArrayInputStream(msgByteArray));\n\n\t\t\t_send(session, msg, null);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailEngineException(e);\n\t\t}\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void send(\n\t\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\t\tInternetAddress[] bcc, String subject, String body,\n\t\t\tboolean htmlFormat, InternetAddress[] replyTo, String messageId,\n\t\t\tString inReplyTo, File[] attachments)\n\t\tthrows MailEngineException {\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\n\t\t\t_log.debug(\"From: \" + from);\n\t\t\t_log.debug(\"To: \" + to);\n\t\t\t_log.debug(\"CC: \" + cc);\n\t\t\t_log.debug(\"BCC: \" + bcc);\n\t\t\t_log.debug(\"Subject: \" + subject);\n\t\t\t_log.debug(\"Body: \" + body);\n\t\t\t_log.debug(\"HTML Format: \" + htmlFormat);\n\t\t\t_log.debug(\"Reply to: \" + replyTo);\n\t\t\t_log.debug(\"Message ID: \" + messageId);\n\t\t\t_log.debug(\"In Reply To: \" + inReplyTo);\n\n\t\t\tif (attachments != null) {\n\t\t\t\tfor (int i = 0; i < attachments.length; i++) {\n\t\t\t\t\tFile attachment = attachments[i];\n\n\t\t\t\t\tif (attachment != null) {\n\t\t\t\t\t\tString path = attachment.getAbsolutePath();\n\n\t\t\t\t\t\t_log.debug(\"Attachment #\" + (i + 1) + \": \" + path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tSession session = getSession();\n\n\t\t\tMessage msg = new LiferayMimeMessage(session);\n\n\t\t\tmsg.setFrom(from);\n\t\t\tmsg.setRecipients(Message.RecipientType.TO, to);\n\n\t\t\tif (cc != null) {\n\t\t\t\tmsg.setRecipients(Message.RecipientType.CC, cc);\n\t\t\t}\n\n\t\t\tif (bcc != null) {\n\t\t\t\tmsg.setRecipients(Message.RecipientType.BCC, bcc);\n\t\t\t}\n\n\t\t\tmsg.setSubject(subject);\n\n\t\t\tif ((attachments != null) && (attachments.length > 0)) {\n\t\t\t\tMimeMultipart rootMultipart = new MimeMultipart(\n\t\t\t\t\t_MULTIPART_TYPE_MIXED);\n\n\t\t\t\tMimeMultipart messageMultipart = new MimeMultipart(\n\t\t\t\t\t_MULTIPART_TYPE_ALTERNATIVE);\n\n\t\t\t\tMimeBodyPart messageBodyPart = new MimeBodyPart();\n\n\t\t\t\tmessageBodyPart.setContent(messageMultipart);\n\n\t\t\t\trootMultipart.addBodyPart(messageBodyPart);\n\n\t\t\t\tif (htmlFormat) {\n\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\tbodyPart.setContent(body, _TEXT_HTML);\n\n\t\t\t\t\tmessageMultipart.addBodyPart(bodyPart);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\tbodyPart.setText(body);\n\n\t\t\t\t\tmessageMultipart.addBodyPart(bodyPart);\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0; i < attachments.length; i++) {\n\t\t\t\t\tFile attachment = attachments[i];\n\n\t\t\t\t\tif (attachment != null) {\n\t\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\t\tDataSource source = new FileDataSource(attachment);\n\n\t\t\t\t\t\tbodyPart.setDisposition(Part.ATTACHMENT);\n\t\t\t\t\t\tbodyPart.setDataHandler(new DataHandler(source));\n\t\t\t\t\t\tbodyPart.setFileName(attachment.getName());\n\n\t\t\t\t\t\trootMultipart.addBodyPart(bodyPart);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.setContent(rootMultipart);\n\n\t\t\t\tmsg.saveChanges();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (htmlFormat) {\n\t\t\t\t\tmsg.setContent(body, _TEXT_HTML);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmsg.setContent(body, _TEXT_PLAIN);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmsg.setSentDate(new Date());\n\n\t\t\tif (replyTo != null) {\n\t\t\t\tmsg.setReplyTo(replyTo);\n\t\t\t}\n\n\t\t\tif (messageId != null) {\n\t\t\t\tmsg.setHeader(\"Message-ID\", messageId);\n\t\t\t}\n\n\t\t\tif (inReplyTo!= null) {\n\t\t\t\tmsg.setHeader(\"In-Reply-To\", inReplyTo);\n\t\t\t\tmsg.setHeader(\"References\", inReplyTo);\n\t\t\t}\n\n\t\t\t_send(session, msg);\n\t\t}\n\t\tcatch (SendFailedException sfe) {\n\t\t\t_log.error(sfe);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailEngineException(e);\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Sending mail takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\t}","id":59954,"modified_method":"public static void send(\n\t\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\t\tInternetAddress[] bcc, InternetAddress[] listAddresses,\n\t\t\tString subject, String body, boolean htmlFormat,\n\t\t\tInternetAddress[] replyTo, String messageId, String inReplyTo,\n\t\t\tFile[] attachments)\n\t\tthrows MailEngineException {\n\n\t\tStopWatch stopWatch = null;\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\tstopWatch = new StopWatch();\n\n\t\t\tstopWatch.start();\n\n\t\t\t_log.debug(\"From: \" + from);\n\t\t\t_log.debug(\"To: \" + to);\n\t\t\t_log.debug(\"CC: \" + cc);\n\t\t\t_log.debug(\"BCC: \" + bcc);\n\t\t\t_log.debug(\"List Addresses: \" + listAddresses);\n\t\t\t_log.debug(\"Subject: \" + subject);\n\t\t\t_log.debug(\"Body: \" + body);\n\t\t\t_log.debug(\"HTML Format: \" + htmlFormat);\n\t\t\t_log.debug(\"Reply to: \" + replyTo);\n\t\t\t_log.debug(\"Message ID: \" + messageId);\n\t\t\t_log.debug(\"In Reply To: \" + inReplyTo);\n\n\t\t\tif (attachments != null) {\n\t\t\t\tfor (int i = 0; i < attachments.length; i++) {\n\t\t\t\t\tFile attachment = attachments[i];\n\n\t\t\t\t\tif (attachment != null) {\n\t\t\t\t\t\tString path = attachment.getAbsolutePath();\n\n\t\t\t\t\t\t_log.debug(\"Attachment #\" + (i + 1) + \": \" + path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tSession session = getSession();\n\n\t\t\tMessage msg = new LiferayMimeMessage(session);\n\n\t\t\tmsg.setFrom(from);\n\t\t\tmsg.setRecipients(Message.RecipientType.TO, to);\n\n\t\t\tif (cc != null) {\n\t\t\t\tmsg.setRecipients(Message.RecipientType.CC, cc);\n\t\t\t}\n\n\t\t\tif (bcc != null) {\n\t\t\t\tmsg.setRecipients(Message.RecipientType.BCC, bcc);\n\t\t\t}\n\n\t\t\tmsg.setSubject(subject);\n\n\t\t\tif ((attachments != null) && (attachments.length > 0)) {\n\t\t\t\tMimeMultipart rootMultipart = new MimeMultipart(\n\t\t\t\t\t_MULTIPART_TYPE_MIXED);\n\n\t\t\t\tMimeMultipart messageMultipart = new MimeMultipart(\n\t\t\t\t\t_MULTIPART_TYPE_ALTERNATIVE);\n\n\t\t\t\tMimeBodyPart messageBodyPart = new MimeBodyPart();\n\n\t\t\t\tmessageBodyPart.setContent(messageMultipart);\n\n\t\t\t\trootMultipart.addBodyPart(messageBodyPart);\n\n\t\t\t\tif (htmlFormat) {\n\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\tbodyPart.setContent(body, _TEXT_HTML);\n\n\t\t\t\t\tmessageMultipart.addBodyPart(bodyPart);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\tbodyPart.setText(body);\n\n\t\t\t\t\tmessageMultipart.addBodyPart(bodyPart);\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0; i < attachments.length; i++) {\n\t\t\t\t\tFile attachment = attachments[i];\n\n\t\t\t\t\tif (attachment != null) {\n\t\t\t\t\t\tMimeBodyPart bodyPart = new MimeBodyPart();\n\n\t\t\t\t\t\tDataSource source = new FileDataSource(attachment);\n\n\t\t\t\t\t\tbodyPart.setDisposition(Part.ATTACHMENT);\n\t\t\t\t\t\tbodyPart.setDataHandler(new DataHandler(source));\n\t\t\t\t\t\tbodyPart.setFileName(attachment.getName());\n\n\t\t\t\t\t\trootMultipart.addBodyPart(bodyPart);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.setContent(rootMultipart);\n\n\t\t\t\tmsg.saveChanges();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (htmlFormat) {\n\t\t\t\t\tmsg.setContent(body, _TEXT_HTML);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmsg.setContent(body, _TEXT_PLAIN);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmsg.setSentDate(new Date());\n\n\t\t\tif (replyTo != null) {\n\t\t\t\tmsg.setReplyTo(replyTo);\n\t\t\t}\n\n\t\t\tif (messageId != null) {\n\t\t\t\tmsg.setHeader(\"Message-ID\", messageId);\n\t\t\t}\n\n\t\t\tif (inReplyTo!= null) {\n\t\t\t\tmsg.setHeader(\"In-Reply-To\", inReplyTo);\n\t\t\t\tmsg.setHeader(\"References\", inReplyTo);\n\t\t\t}\n\n\t\t\t_send(session, msg, listAddresses);\n\t\t}\n\t\tcatch (SendFailedException sfe) {\n\t\t\t_log.error(sfe);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MailEngineException(e);\n\t\t}\n\n\t\tif (_log.isDebugEnabled()) {\n\t\t\t_log.debug(\"Sending mail takes \" + stopWatch.getTime() + \" ms\");\n\t\t}\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress to, String subject, String body,\n\t\tboolean htmlFormat) {\n\n\t\tthis(\n\t\t\tfrom, new InternetAddress[] {to}, null, null, subject, body,\n\t\t\thtmlFormat);\n\t}","id":59955,"modified_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress to, String subject, String body,\n\t\tboolean htmlFormat) {\n\n\t\tthis(\n\t\t\tfrom, new InternetAddress[] {to}, null, null, null, subject, body,\n\t\t\thtmlFormat);\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\tInternetAddress[] bcc, String subject, String body,\n\t\tboolean htmlFormat) {\n\n\t\t_from = from;\n\t\t_to = to;\n\t\t_cc = cc;\n\t\t_bcc = bcc;\n\t\t_subject = subject;\n\t\t_body = body;\n\t\t_htmlFormat = htmlFormat;\n\t\t_attachments = new ArrayList<File>();\n\t}","id":59956,"modified_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\tInternetAddress[] bcc, InternetAddress[] listAddresses, String subject,\n\t\tString body, boolean htmlFormat) {\n\n\t\t_from = from;\n\t\t_to = to;\n\t\t_cc = cc;\n\t\t_bcc = bcc;\n\t\t_listAddresses = listAddresses;\n\t\t_subject = subject;\n\t\t_body = body;\n\t\t_htmlFormat = htmlFormat;\n\t\t_attachments = new ArrayList<File>();\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\tInternetAddress[] bcc, String subject, String body) {\n\n\t\tthis(from, to, cc, bcc, subject, body, false);\n\t}","id":59957,"modified_method":"public MailMessage(\n\t\tInternetAddress from, InternetAddress[] to, InternetAddress[] cc,\n\t\tInternetAddress[] bcc, String subject, String body) {\n\n\t\tthis(from, to, cc, bcc, null, subject, body, false);\n\t}","commit_id":"d322ddbf0611ca3766d8a5ae1d72d5a51dd6276c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Answer createVolume(VolumeInfo volume) throws StorageUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating volume: \" + volume);\n        }\n\n        CreateObjectCommand cmd = new CreateObjectCommand(volume.getTO());\n        EndPoint ep = epSelector.select(volume);\n        Answer answer = ep.sendMessage(cmd);\n        return answer;\n    }","id":59958,"modified_method":"public Answer createVolume(VolumeInfo volume) throws StorageUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Creating volume: \" + volume);\n        }\n\n        CreateObjectCommand cmd = new CreateObjectCommand(volume.getTO());\n        EndPoint ep = epSelector.select(volume);\n        Answer answer = null;\n        if ( ep == null ){\n            String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n            s_logger.error(errMsg);\n            answer = new Answer(cmd, false, errMsg);\n        } else{\n            answer = ep.sendMessage(cmd);\n        }\n        return answer;\n    }","commit_id":"fea7d21dcda9793419894736281567f2183dda3c","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(data);\n            Answer answer = ep.sendMessage(cmd);\n            if (answer != null && !answer.getResult()) {\n                result.setResult(answer.getDetails());\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }","id":59959,"modified_method":"@Override\n    public void deleteAsync(DataStore dataStore, DataObject data, AsyncCompletionCallback<CommandResult> callback) {\n        DeleteCommand cmd = new DeleteCommand(data.getTO());\n\n        CommandResult result = new CommandResult();\n        try {\n            EndPoint ep = epSelector.select(data);\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                result.setResult(errMsg);\n            } else {\n                Answer answer = ep.sendMessage(cmd);\n                if (answer != null && !answer.getResult()) {\n                    result.setResult(answer.getDetails());\n                }\n            }\n        } catch (Exception ex) {\n            s_logger.debug(\"Unable to destoy volume\" + data.getId(), ex);\n            result.setResult(ex.toString());\n        }\n        callback.complete(result);\n    }","commit_id":"fea7d21dcda9793419894736281567f2183dda3c","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public void takeSnapshot(SnapshotInfo snapshot, AsyncCompletionCallback<CreateCmdResult> callback) {\n        CreateCmdResult result = null;\n        try {\n            DataTO snapshotTO = snapshot.getTO();\n\n\n            CreateObjectCommand cmd = new CreateObjectCommand(snapshotTO);\n            EndPoint ep = this.epSelector.select(snapshot);\n            Answer answer = ep.sendMessage(cmd);\n\n            result = new CreateCmdResult(null, answer);\n            if (answer != null && !answer.getResult()) {\n                result.setResult(answer.getDetails());\n            }\n\n            callback.complete(result);\n            return;\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to take snapshot: \" + snapshot.getId(), e);\n            result = new CreateCmdResult(null, null);\n            result.setResult(e.toString());\n        }\n        callback.complete(result);\n    }","id":59960,"modified_method":"@Override\n    public void takeSnapshot(SnapshotInfo snapshot, AsyncCompletionCallback<CreateCmdResult> callback) {\n        CreateCmdResult result = null;\n        try {\n            DataTO snapshotTO = snapshot.getTO();\n\n\n            CreateObjectCommand cmd = new CreateObjectCommand(snapshotTO);\n            EndPoint ep = this.epSelector.select(snapshot);\n            Answer answer = null;\n            if ( ep == null ){\n                String errMsg = \"No remote endpoint to send DeleteCommand, check if host or ssvm is down?\";\n                s_logger.error(errMsg);\n                answer = new Answer(cmd, false, errMsg);\n            } else{\n                answer = ep.sendMessage(cmd);\n            }\n\n            result = new CreateCmdResult(null, answer);\n            if (answer != null && !answer.getResult()) {\n                result.setResult(answer.getDetails());\n            }\n\n            callback.complete(result);\n            return;\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to take snapshot: \" + snapshot.getId(), e);\n            result = new CreateCmdResult(null, null);\n            result.setResult(e.toString());\n        }\n        callback.complete(result);\n    }","commit_id":"fea7d21dcda9793419894736281567f2183dda3c","url":"https://github.com/apache/cloudstack"},{"original_method":"private void doSnoopTest(RequestDescriptor desc) throws Exception {\n\n        Map<String, String> requestInfo = desc.getRequestInfo();\n        Map<String, String> contextInitParameters = desc.getContextInitParameters();\n        Map<String, String> contextAttributes = desc.getContextAttributes();\n        Map<String, String> headers = desc.getHeaders();\n        Map<String, String> attributes = desc.getAttributes();\n        Map<String, String> params = desc.getParams();\n\n        Tomcat tomcat = getTomcatInstance();\n\n        // No file system docBase required\n        Context ctx = tomcat.addContext(\"\", null);\n\n        Tomcat.addServlet(ctx, \"snoop\", new SnoopServlet());\n        ctx.addServletMapping(\"/\", \"snoop\");\n\n        SimpleAjpClient ajpClient = new SimpleAjpClient();\n\n        if (requestInfo.get(\"REQUEST-QUERY-STRING\") != null &&\n            params.size() > 0) {\n            throw(new IllegalArgumentException(\"Request setting \" +\n                \"'REQUEST-QUERY-STRING' and explicit params not allowed \" +\n                \"together\"));\n        }\n\n        String value;\n        Map<String, String> savedRequestInfo = new HashMap<>();\n        for (String name: requestInfo.keySet()) {\n            value = requestInfo.get(name);\n            switch (name) {\n                case \"REQUEST-METHOD\":\n                    ajpClient.setMethod(value);\n                    break;\n                case \"REQUEST-PROTOCOL\":\n                    ajpClient.setProtocol(value);\n                    break;\n                case \"REQUEST-URI\":\n                    ajpClient.setUri(value);\n                    break;\n                case \"REQUEST-REMOTE-HOST\":\n                    /* request.getRemoteHost() will default to\n                     * request.getRemoteAddr() unless enableLookups is set. */\n                    tomcat.getConnector().setEnableLookups(true);\n                    ajpClient.setRemoteHost(value);\n                    break;\n                case \"REQUEST-REMOTE-ADDR\":\n                    ajpClient.setRemoteAddr(value);\n                    break;\n                case \"REQUEST-SERVER-NAME\":\n                    ajpClient.setServerName(value);\n                    break;\n                case \"REQUEST-SERVER-PORT\":\n                    ajpClient.setServerPort(Integer.valueOf(value).intValue());\n                    break;\n                case \"REQUEST-IS-SECURE\":\n                    ajpClient.setSsl(Boolean.parseBoolean(value));\n                    break;\n                case \"REQUEST-LOCAL-ADDR\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-REMOTE-PORT\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-REMOTE-USER\":\n                case \"REQUEST-ROUTE\":\n                case \"REQUEST-SECRET\":\n                case \"REQUEST-AUTH-TYPE\":\n                case \"REQUEST-QUERY-STRING\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-CONTENT-LENGTH\":\n                    headers.put(\"CONTENT-LENGTH\", value);\n                    break;\n                case \"REQUEST-CONTENT-TYPE\":\n                    headers.put(\"CONTENT-TYPE\", value);\n                    break;\n                /* Not yet implemented or not (easily) possible to implement */\n                case \"REQUEST-LOCAL-NAME\":          //request.getLocalName()\n                case \"REQUEST-LOCAL-PORT\":          //request.getLocalPort()\n                case \"REQUEST-SCHEME\":              //request.getScheme()\n                case \"REQUEST-URL\":                 //request.getRequestURL()\n                case \"REQUEST-CONTEXT-PATH\":        //request.getContextPath()\n                case \"REQUEST-SERVLET-PATH\":        //request.getServletPath()\n                case \"REQUEST-PATH-INFO\":           //request.getPathInfo()\n                case \"REQUEST-PATH-TRANSLATED\":     //request.getPathTranslated()\n                case \"REQUEST-USER-PRINCIPAL\":      //request.getUserPrincipal()\n                case \"REQUEST-CHARACTER-ENCODING\":  //request.getCharacterEncoding()\n                case \"REQUEST-LOCALE\":              //request.getLocale()\n                case \"SESSION-REQUESTED-ID\":        //request.getRequestedSessionId()\n                case \"SESSION-REQUESTED-ID-COOKIE\": //request.isRequestedSessionIdFromCookie()\n                case \"SESSION-REQUESTED-ID-URL\":    //request.isRequestedSessionIdFromUrl()\n                case \"SESSION-REQUESTED-ID-VALID\":  //request.isRequestedSessionIdValid()\n                default:\n                    throw(new IllegalArgumentException(\"Request setting '\" + name + \"' not supported\"));\n            }\n        }\n\n        ServletContext sc = ctx.getServletContext();\n        for (String name: contextInitParameters.keySet()) {\n            sc.setInitParameter(name, contextInitParameters.get(name));\n        }\n        for (String name: contextAttributes.keySet()) {\n            sc.setAttribute(name, contextAttributes.get(name));\n        }\n\n        /* Basic request properties must be set before this call */\n        TesterAjpMessage forwardMessage = ajpClient.createForwardMessage();\n\n        for (String name: savedRequestInfo.keySet()) {\n            value = savedRequestInfo.get(name);\n            switch (name) {\n                case \"REQUEST-LOCAL-ADDR\":\n                    forwardMessage.addAttribute(\"AJP_LOCAL_ADDR\", value);\n                    break;\n                case \"REQUEST-REMOTE-PORT\":\n                    forwardMessage.addAttribute(\"AJP_REMOTE_PORT\", value);\n                    break;\n                case \"REQUEST-REMOTE-USER\":\n                    /* request.getRemoteUser() will not trust the AJP\n                     * info if tomcatAuthentication is set. */\n                    tomcat.getConnector().setProperty(\"tomcatAuthentication\", \"false\");\n                    forwardMessage.addAttribute(0x03, value);\n                    break;\n                case \"REQUEST-AUTH-TYPE\":\n                    /* request.getAuthType() will not trust the AJP\n                     * info if tomcatAuthentication is set. */\n                    tomcat.getConnector().setProperty(\"tomcatAuthentication\", \"false\");\n                    forwardMessage.addAttribute(0x04, value);\n                    break;\n                case \"REQUEST-QUERY-STRING\":\n                    forwardMessage.addAttribute(0x05, value);\n                    break;\n                case \"REQUEST-ROUTE\":\n                    forwardMessage.addAttribute(0x06, value);\n                    break;\n                case \"REQUEST-SECRET\":\n                    forwardMessage.addAttribute(0x0C, value);\n                    break;\n                default:\n                    throw(new IllegalArgumentException(\"Request setting '\" + name + \"' not supported\"));\n            }\n        }\n\n        if (params.size() > 0) {\n            StringBuilder query = new StringBuilder();\n            boolean sep = false;\n            for (String name: params.keySet()) {\n                if (sep) {\n                    query.append(\"&\");\n                } else {\n                    sep = true;\n                }\n                query.append(name);\n                query.append(\"=\");\n                query.append(params.get(name));\n            }\n            forwardMessage.addAttribute(0x05, query.toString());\n        }\n\n        for (String name: headers.keySet()) {\n            value = headers.get(name);\n            name = name.toUpperCase(Locale.ENGLISH);\n            switch (name) {\n                case \"ACCEPT\":\n                    forwardMessage.addHeader(0xA001, value);\n                    break;\n                case \"ACCEPT-CHARSET\":\n                    forwardMessage.addHeader(0xA002, value);\n                    break;\n                case \"ACCEPT-ENCODING\":\n                    forwardMessage.addHeader(0xA003, value);\n                    break;\n                case \"ACCEPT-LANGUAGE\":\n                    forwardMessage.addHeader(0xA004, value);\n                    break;\n                case \"AUTHORIZATION\":\n                    forwardMessage.addHeader(0xA005, value);\n                    break;\n                case \"CONNECTION\":\n                    forwardMessage.addHeader(0xA006, value);\n                    break;\n                case \"CONTENT-TYPE\":\n                    forwardMessage.addHeader(0xA007, value);\n                    break;\n                case \"CONTENT-LENGTH\":\n                    forwardMessage.addHeader(0xA008, value);\n                    break;\n                case \"COOKIE\":\n                    forwardMessage.addHeader(0xA009, value);\n                    break;\n                case \"COOKIE2\":\n                    forwardMessage.addHeader(0xA00A, value);\n                    break;\n                case \"HOST\":\n                    forwardMessage.addHeader(0xA00B, value);\n                    break;\n                case \"PRAGMA\":\n                    forwardMessage.addHeader(0xA00C, value);\n                    break;\n                case \"REFERER\":\n                    forwardMessage.addHeader(0xA00D, value);\n                    break;\n                case \"USER-AGENT\":\n                    forwardMessage.addHeader(0xA00E, value);\n                    break;\n                default:\n                    forwardMessage.addHeader(name, value);\n                    break;\n            }\n        }\n        for (String name: attributes.keySet()) {\n            value = attributes.get(name);\n            forwardMessage.addAttribute(name, value);\n        }\n        // Complete the message\n        forwardMessage.end();\n\n        tomcat.start();\n        ajpClient.setPort(getPort());\n        ajpClient.connect();\n\n        // Expect 3 packets: headers, body, end\n        TesterAjpMessage responseHeaders = ajpClient.sendMessage(forwardMessage);\n        validateResponseHeaders(responseHeaders, 200, \"OK\");\n\n        String body = extractResponseBody(ajpClient.readMessage());\n        RequestDescriptor result = SnoopResult.parse(body);\n\n        /* AJP attributes result in Coyote Request attributes, which are\n         * not listed by request.getAttributeNames(), so SnoopServlet\n         * does not see them. Delete attributes before result comparison. */\n        desc.getAttributes().clear();\n\n        result.compare(desc);\n\n        validateResponseEnd(ajpClient.readMessage(), true);\n    }","id":59961,"modified_method":"private void doSnoopTest(RequestDescriptor desc) throws Exception {\n\n        final int ajpPacketSize = 16000;\n\n        Map<String, String> requestInfo = desc.getRequestInfo();\n        Map<String, String> contextInitParameters = desc.getContextInitParameters();\n        Map<String, String> contextAttributes = desc.getContextAttributes();\n        Map<String, String> headers = desc.getHeaders();\n        Map<String, String> attributes = desc.getAttributes();\n        Map<String, String> params = desc.getParams();\n\n        Tomcat tomcat = getTomcatInstance();\n        tomcat.getConnector().setProperty(\"packetSize\", Integer.toString(ajpPacketSize));\n\n        // No file system docBase required\n        Context ctx = tomcat.addContext(\"\", null);\n\n        Tomcat.addServlet(ctx, \"snoop\", new SnoopServlet());\n        ctx.addServletMapping(\"/\", \"snoop\");\n\n        SimpleAjpClient ajpClient = new SimpleAjpClient(ajpPacketSize);\n\n        if (requestInfo.get(\"REQUEST-QUERY-STRING\") != null &&\n            params.size() > 0) {\n            throw(new IllegalArgumentException(\"Request setting \" +\n                \"'REQUEST-QUERY-STRING' and explicit params not allowed \" +\n                \"together\"));\n        }\n\n        String value;\n        int bodySize = 0;\n        Map<String, String> savedRequestInfo = new HashMap<>();\n        for (String name: requestInfo.keySet()) {\n            value = requestInfo.get(name);\n            switch (name) {\n                case \"REQUEST-METHOD\":\n                    ajpClient.setMethod(value);\n                    break;\n                case \"REQUEST-PROTOCOL\":\n                    ajpClient.setProtocol(value);\n                    break;\n                case \"REQUEST-URI\":\n                    ajpClient.setUri(value);\n                    break;\n                case \"REQUEST-REMOTE-HOST\":\n                    /* request.getRemoteHost() will default to\n                     * request.getRemoteAddr() unless enableLookups is set. */\n                    tomcat.getConnector().setEnableLookups(true);\n                    ajpClient.setRemoteHost(value);\n                    break;\n                case \"REQUEST-REMOTE-ADDR\":\n                    ajpClient.setRemoteAddr(value);\n                    break;\n                case \"REQUEST-SERVER-NAME\":\n                    ajpClient.setServerName(value);\n                    break;\n                case \"REQUEST-SERVER-PORT\":\n                    ajpClient.setServerPort(Integer.valueOf(value).intValue());\n                    break;\n                case \"REQUEST-IS-SECURE\":\n                    ajpClient.setSsl(Boolean.parseBoolean(value));\n                    break;\n                case \"REQUEST-LOCAL-ADDR\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-REMOTE-PORT\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-REMOTE-USER\":\n                case \"REQUEST-ROUTE\":\n                case \"REQUEST-SECRET\":\n                case \"REQUEST-AUTH-TYPE\":\n                case \"REQUEST-QUERY-STRING\":\n                    savedRequestInfo.put(name, value);\n                    break;\n                case \"REQUEST-CONTENT-LENGTH\":\n                    headers.put(\"CONTENT-LENGTH\", value);\n                    break;\n                case \"REQUEST-BODY-SIZE\":\n                    savedRequestInfo.put(name, value);\n                    bodySize = Integer.parseInt(value);\n                    break;\n                case \"REQUEST-CONTENT-TYPE\":\n                    headers.put(\"CONTENT-TYPE\", value);\n                    break;\n                /* Not yet implemented or not (easily) possible to implement */\n                case \"REQUEST-LOCAL-NAME\":          //request.getLocalName()\n                case \"REQUEST-LOCAL-PORT\":          //request.getLocalPort()\n                case \"REQUEST-SCHEME\":              //request.getScheme()\n                case \"REQUEST-URL\":                 //request.getRequestURL()\n                case \"REQUEST-CONTEXT-PATH\":        //request.getContextPath()\n                case \"REQUEST-SERVLET-PATH\":        //request.getServletPath()\n                case \"REQUEST-PATH-INFO\":           //request.getPathInfo()\n                case \"REQUEST-PATH-TRANSLATED\":     //request.getPathTranslated()\n                case \"REQUEST-USER-PRINCIPAL\":      //request.getUserPrincipal()\n                case \"REQUEST-CHARACTER-ENCODING\":  //request.getCharacterEncoding()\n                case \"REQUEST-LOCALE\":              //request.getLocale()\n                case \"SESSION-REQUESTED-ID\":        //request.getRequestedSessionId()\n                case \"SESSION-REQUESTED-ID-COOKIE\": //request.isRequestedSessionIdFromCookie()\n                case \"SESSION-REQUESTED-ID-URL\":    //request.isRequestedSessionIdFromUrl()\n                case \"SESSION-REQUESTED-ID-VALID\":  //request.isRequestedSessionIdValid()\n                default:\n                    throw(new IllegalArgumentException(\"Request setting '\" + name + \"' not supported\"));\n            }\n        }\n\n        ServletContext sc = ctx.getServletContext();\n        for (String name: contextInitParameters.keySet()) {\n            sc.setInitParameter(name, contextInitParameters.get(name));\n        }\n        for (String name: contextAttributes.keySet()) {\n            sc.setAttribute(name, contextAttributes.get(name));\n        }\n\n        /* Basic request properties must be set before this call */\n        TesterAjpMessage forwardMessage = ajpClient.createForwardMessage();\n\n        for (String name: savedRequestInfo.keySet()) {\n            value = savedRequestInfo.get(name);\n            switch (name) {\n                case \"REQUEST-LOCAL-ADDR\":\n                    forwardMessage.addAttribute(\"AJP_LOCAL_ADDR\", value);\n                    break;\n                case \"REQUEST-REMOTE-PORT\":\n                    forwardMessage.addAttribute(\"AJP_REMOTE_PORT\", value);\n                    break;\n                case \"REQUEST-REMOTE-USER\":\n                    /* request.getRemoteUser() will not trust the AJP\n                     * info if tomcatAuthentication is set. */\n                    tomcat.getConnector().setProperty(\"tomcatAuthentication\", \"false\");\n                    forwardMessage.addAttribute(0x03, value);\n                    break;\n                case \"REQUEST-AUTH-TYPE\":\n                    /* request.getAuthType() will not trust the AJP\n                     * info if tomcatAuthentication is set. */\n                    tomcat.getConnector().setProperty(\"tomcatAuthentication\", \"false\");\n                    forwardMessage.addAttribute(0x04, value);\n                    break;\n                case \"REQUEST-QUERY-STRING\":\n                    forwardMessage.addAttribute(0x05, value);\n                    break;\n                case \"REQUEST-ROUTE\":\n                    forwardMessage.addAttribute(0x06, value);\n                    break;\n                case \"REQUEST-SECRET\":\n                    forwardMessage.addAttribute(0x0C, value);\n                    break;\n                case \"REQUEST-BODY-SIZE\":\n                    break;\n                default:\n                    throw(new IllegalArgumentException(\"Request setting '\" + name + \"' not supported\"));\n            }\n        }\n\n        if (params.size() > 0) {\n            StringBuilder query = new StringBuilder();\n            boolean sep = false;\n            for (String name: params.keySet()) {\n                if (sep) {\n                    query.append(\"&\");\n                } else {\n                    sep = true;\n                }\n                query.append(name);\n                query.append(\"=\");\n                query.append(params.get(name));\n            }\n            forwardMessage.addAttribute(0x05, query.toString());\n        }\n\n        for (String name: headers.keySet()) {\n            value = headers.get(name);\n            name = name.toUpperCase(Locale.ENGLISH);\n            switch (name) {\n                case \"ACCEPT\":\n                    forwardMessage.addHeader(0xA001, value);\n                    break;\n                case \"ACCEPT-CHARSET\":\n                    forwardMessage.addHeader(0xA002, value);\n                    break;\n                case \"ACCEPT-ENCODING\":\n                    forwardMessage.addHeader(0xA003, value);\n                    break;\n                case \"ACCEPT-LANGUAGE\":\n                    forwardMessage.addHeader(0xA004, value);\n                    break;\n                case \"AUTHORIZATION\":\n                    forwardMessage.addHeader(0xA005, value);\n                    break;\n                case \"CONNECTION\":\n                    forwardMessage.addHeader(0xA006, value);\n                    break;\n                case \"CONTENT-TYPE\":\n                    forwardMessage.addHeader(0xA007, value);\n                    break;\n                case \"CONTENT-LENGTH\":\n                    forwardMessage.addHeader(0xA008, value);\n                    break;\n                case \"COOKIE\":\n                    forwardMessage.addHeader(0xA009, value);\n                    break;\n                case \"COOKIE2\":\n                    forwardMessage.addHeader(0xA00A, value);\n                    break;\n                case \"HOST\":\n                    forwardMessage.addHeader(0xA00B, value);\n                    break;\n                case \"PRAGMA\":\n                    forwardMessage.addHeader(0xA00C, value);\n                    break;\n                case \"REFERER\":\n                    forwardMessage.addHeader(0xA00D, value);\n                    break;\n                case \"USER-AGENT\":\n                    forwardMessage.addHeader(0xA00E, value);\n                    break;\n                default:\n                    forwardMessage.addHeader(name, value);\n                    break;\n            }\n        }\n        for (String name: attributes.keySet()) {\n            value = attributes.get(name);\n            forwardMessage.addAttribute(name, value);\n        }\n        // Complete the message\n        forwardMessage.end();\n\n        tomcat.start();\n        ajpClient.setPort(getPort());\n        ajpClient.connect();\n\n        TesterAjpMessage responseHeaders = null;\n        if (bodySize == 0) {\n            responseHeaders = ajpClient.sendMessage(forwardMessage);\n        } else {\n            TesterAjpMessage bodyMessage = ajpClient.createBodyMessage(new byte[bodySize]);\n            responseHeaders = ajpClient.sendMessage(forwardMessage, bodyMessage);\n            // Expect back a request for more data (which will be emty and\n            // trigger end of stream in Servlet)\n            validateGetBody(responseHeaders);\n            bodyMessage = ajpClient.createBodyMessage(new byte[0]);\n            responseHeaders = ajpClient.sendMessage(bodyMessage);\n        }\n\n        // Expect 3 packets: headers, body, end\n        validateResponseHeaders(responseHeaders, 200, \"OK\");\n\n        String body = extractResponseBody(ajpClient.readMessage());\n        RequestDescriptor result = SnoopResult.parse(body);\n\n        /* AJP attributes result in Coyote Request attributes, which are\n         * not listed by request.getAttributeNames(), so SnoopServlet\n         * does not see them. Delete attributes before result comparison. */\n        desc.getAttributes().clear();\n\n        result.compare(desc);\n\n        validateResponseEnd(ajpClient.readMessage(), true);\n    }","commit_id":"24fb6fafa5f4df811b879ecda5294c78a187ed58","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\r\n  public boolean deleteResource(final String resource) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        if(!cs.execute(new DropDB(resource))) notFound(cs.info());\r\n      }\r\n    });\r\n    return true;\r\n  }","id":59962,"modified_method":"@Override\r\n  public void deleteResource(final String resource) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        if(!cs.execute(new DropDB(resource)))\r\n          throw JAXRXException.notFound(cs.info());\r\n      }\r\n    });\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public Set<EURLParameter> getAvailableParams() {\r\n    final Set<EURLParameter> p = new HashSet<EURLParameter>();\r\n    p.add(EURLParameter.COMMAND);\r\n    p.add(EURLParameter.COUNT);\r\n    p.add(EURLParameter.OUTPUT);\r\n    p.add(EURLParameter.QUERY);\r\n    p.add(EURLParameter.START);\r\n    p.add(EURLParameter.WRAP);\r\n    return p;\r\n  }","id":59963,"modified_method":"@Override\r\n  public Set<EURLParameter> getAvailableParams() {\r\n    final Set<EURLParameter> p = new HashSet<EURLParameter>();\r\n    p.add(EURLParameter.COMMAND);\r\n    p.add(EURLParameter.QUERY);\r\n    p.add(EURLParameter.RUN);\r\n    p.add(EURLParameter.COUNT);\r\n    p.add(EURLParameter.OUTPUT);\r\n    p.add(EURLParameter.START);\r\n    p.add(EURLParameter.WRAP);\r\n    /* currently not supported:\r\n    p.add(EURLParameter.XSL);\r\n    p.add(EURLParameter.REVISION);\r\n    */\r\n    return p;\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public void postResource(final String resource, final InputStream in) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        // open database\r\n        if(!cs.execute(new Open(resource))) notFound(cs.info());\r\n        // add cached file to the database\r\n        final File file = cache(in);\r\n        final boolean ok = cs.execute(new Add(file.toString()));\r\n        file.delete();\r\n        // return exception if process failed\r\n        if(!ok) badRequest(cs.info());\r\n      }\r\n    });\r\n  }","id":59964,"modified_method":"@Override\r\n  public void postResource(final String resource, final InputStream in) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        // open database\r\n        if(!cs.execute(new Open(resource))) \r\n          throw JAXRXException.notFound(cs.info());\r\n\r\n        // add cached file to the database\r\n        final File file = cache(in);\r\n        final boolean ok = cs.execute(new Add(file.toString()));\r\n        file.delete();\r\n\r\n        // return exception if process failed\r\n        if(!ok) throw JAXRXException.badRequest(cs.info());\r\n      }\r\n    });\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public StreamingOutput postResource(final String resource,\r\n      final Map<EURLParameter, String> queryParams) {\r\n    return query(resource, queryParams);\r\n  }","id":59965,"modified_method":"@Override\r\n  public StreamingOutput postQuery(final String resource,\r\n      final Map<EURLParameter, String> queryParams) {\r\n    return query(resource, queryParams);\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  public boolean createResource(final String resource, final InputStream in) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        // create database from cached file\r\n        final File file = cache(in);\r\n        final boolean ok = cs.execute(new CreateDB(file.toString(), resource));\r\n        file.delete();\r\n        // return exception if process failed\r\n        if(!ok) badRequest(cs.info());\r\n      }\r\n    });\r\n    return true;\r\n  }","id":59966,"modified_method":"@Override\r\n  public void putResource(final String resource, final InputStream in) {\r\n    final ClientSession cs = session();\r\n    run(cs, new Code() {\r\n      @Override\r\n      public void run() throws IOException {\r\n        // create database from cached file\r\n        final File file = cache(in);\r\n        final boolean ok = cs.execute(new CreateDB(file.toString(), resource));\r\n        file.delete();\r\n        // return exception if process failed\r\n        if(!ok) throw JAXRXException.badRequest(cs.info());\r\n      }\r\n    });\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Runs the specified code and closes the specified session.\r\n   * A server exception is thrown if I/O errors occur.\r\n   * @param cs client session.\r\n   * @param code code to be run\r\n   */\r\n  static void run(final ClientSession cs, final Code code) {\r\n    try {\r\n      code.run();\r\n    } catch(final IOException ex) {\r\n      error(ex);\r\n    } finally {\r\n      try { if(cs != null) cs.close(); } catch(final Exception ex) { }\r\n    }\r\n  }","id":59967,"modified_method":"/**\r\n   * Runs the specified code and closes the specified session.\r\n   * A server exception is thrown if I/O errors occur.\r\n   * @param cs client session.\r\n   * @param code code to be run\r\n   */\r\n  static void run(final ClientSession cs, final Code code) {\r\n    try {\r\n      code.run();\r\n    } catch(final IOException ex) {\r\n      throw JAXRXException.serverError(ex);\r\n    } finally {\r\n      try { if(cs != null) cs.close(); } catch(final Exception ex) { }\r\n    }\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Runs a database command.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void command(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // perform command and serialize output\r\n    final CachedOutput co = new CachedOutput();\r\n    final String cmd = par.get(EURLParameter.COMMAND);\r\n    if(!cs.execute(cmd, co)) badRequest(cs.info());\r\n\r\n    final XMLSerializer xml =\r\n      new XMLSerializer(out, new SerializerProp(params(par)));\r\n    xml.text(delete(co.finish(), '\\r'));\r\n    xml.close();\r\n  }","id":59968,"modified_method":"/**\r\n   * Runs a database command.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void command(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // perform command and serialize output\r\n    final CachedOutput co = new CachedOutput();\r\n    final String cmd = par.get(EURLParameter.COMMAND);\r\n    if(!cs.execute(cmd, co)) throw JAXRXException.badRequest(cs.info());\r\n\r\n    final XMLSerializer xml =\r\n      new XMLSerializer(out, new SerializerProp(params(par)));\r\n    xml.text(delete(co.finish(), '\\r'));\r\n    xml.close();\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Lists all databases.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par serialization parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void list(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // retrieve list of databases\r\n    final CachedOutput co = new CachedOutput();\r\n    if(!cs.execute(new List(), co)) badRequest(cs.info());\r\n    final Table table = new Table(co.toString());\r\n\r\n    final XMLSerializer xml =\r\n      new XMLSerializer(out, new SerializerProp(params(par)));\r\n    for(final TokenList l : table.contents) {\r\n      xml.emptyElement(token(JAXRX + \":\" + \"resource\"),\r\n          token(\"name\"), l.get(0), token(\"documents\"), l.get(1),\r\n          token(\"size\"), l.get(2));\r\n    }\r\n    xml.close();\r\n  }","id":59969,"modified_method":"/**\r\n   * Lists all databases.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par serialization parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void list(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // retrieve list of databases\r\n    final CachedOutput co = new CachedOutput();\r\n    if(!cs.execute(new List(), co)) throw JAXRXException.badRequest(cs.info());\r\n    final Table table = new Table(co.toString());\r\n\r\n    final XMLSerializer xml =\r\n      new XMLSerializer(out, new SerializerProp(params(par)));\r\n    for(final TokenList l : table.contents) {\r\n      xml.emptyElement(token(JAXRX + \":\" + \"resource\"),\r\n          token(\"name\"), l.get(0), token(\"documents\"), l.get(1),\r\n          token(\"size\"), l.get(2));\r\n    }\r\n    xml.close();\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Runs a query.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void query(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // wrap start and counter around query expression\r\n    final String query = par.get(EURLParameter.QUERY);\r\n    final String start = par.get(EURLParameter.START);\r\n    final String count = par.get(EURLParameter.COUNT);\r\n    final int s = start != null ? Integer.valueOf(start) : 1;\r\n    final int m = count != null ? Integer.valueOf(count) :\r\n      Integer.MAX_VALUE - s;\r\n    final String xquery = \"(\" + (query != null ? query : \".\") +\r\n      \")[position() = \" + s + \" to \" + (s + m - 1) + \"]\";\r\n    if(!cs.execute(new XQuery(xquery), out)) badRequest(cs.info());\r\n  }","id":59970,"modified_method":"/**\r\n   * Runs a query.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   * @throws IOException I/O exception\r\n   */\r\n  static void query(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) throws IOException {\r\n\r\n    // wrap start and counter around query expression\r\n    final String query = par.get(EURLParameter.QUERY);\r\n    final String start = par.get(EURLParameter.START);\r\n    final String count = par.get(EURLParameter.COUNT);\r\n    final int s = start != null ? Integer.valueOf(start) : 1;\r\n    final int m = count != null ? Integer.valueOf(count) :\r\n      Integer.MAX_VALUE - s;\r\n    final String xquery = \"(\" + (query != null ? query : \".\") +\r\n      \")[position() = \" + s + \" to \" + (s + m - 1) + \"]\";\r\n\r\n    if(!cs.execute(new XQuery(xquery), out)) \r\n      throw JAXRXException.badRequest(cs.info());\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Runs a query file.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   */\r\n  static void file(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) {\r\n\r\n    // wrap start and counter around query expression\r\n    final String root = System.getProperty(\"org.jaxrx.webpath\") + \"/\";\r\n    String file = root + par.get(EURLParameter.RUN);\r\n    if(!file.endsWith(\".xq\")) file += \".xq\";\r\n\r\n    final IO io = IO.get(file);\r\n    if(!io.exists()) notFound(\"Not found: \" + file);\r\n\r\n    try {\r\n      final String query = new XMLInput(io).content().toString().trim();\r\n      par.put(EURLParameter.QUERY, query);\r\n      query(cs, out, par);\r\n    } catch(final IOException ex) {\r\n      badRequest(ex.getMessage());\r\n    }\r\n  }","id":59971,"modified_method":"/**\r\n   * Runs a query file.\r\n   * @param cs client session\r\n   * @param out output stream\r\n   * @param par query parameters\r\n   */\r\n  static void file(final ClientSession cs, final OutputStream out,\r\n      final Map<EURLParameter, String> par) {\r\n\r\n    // wrap start and counter around query expression\r\n    final String root = System.getProperty(\"org.jaxrx.webpath\") + \"/\";\r\n    String file = root + par.get(EURLParameter.RUN);\r\n    if(!file.endsWith(\".xq\")) file += \".xq\";\r\n\r\n    final IO io = IO.get(file);\r\n    if(!io.exists()) throw JAXRXException.notFound(\r\n        \"Not found: \" + par.get(EURLParameter.RUN));\r\n\r\n    try {\r\n      final String query = new XMLInput(io).content().toString().trim();\r\n      par.put(EURLParameter.QUERY, query);\r\n      query(cs, out, par);\r\n    } catch(final IOException ex) {\r\n      throw JAXRXException.badRequest(ex.getMessage());\r\n    }\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Caches the input stream contents to a temporary file on disk.\r\n   * @param in input stream\r\n   * @return file reference\r\n   * @throws IOException I/O exception\r\n   */\r\n  static File cache(final InputStream in) throws IOException {\r\n    // use current number of milliseconds as filename\r\n    final File file = new File(Prop.TMP + System.currentTimeMillis());\r\n    final BufferedInputStream bis = new BufferedInputStream(in);\r\n    final BufferedOutputStream bos = new BufferedOutputStream(\r\n        new FileOutputStream(file));\r\n\r\n    try {\r\n      while(true) {\r\n        final int b = bis.read();\r\n        if(b == -1) break;\r\n        bos.write(b);\r\n      }\r\n      bos.close();\r\n      return file;\r\n    } catch(final IOException ex) {\r\n      // try to delete temporary file before returning the exception\r\n      try { bos.close(); } catch(final Exception e) { }\r\n      file.delete();\r\n      throw ex;\r\n    }\r\n  }","id":59972,"modified_method":"/**\r\n   * Caches the input stream contents to a temporary file on disk.\r\n   * @param in input stream\r\n   * @return file reference\r\n   * @throws IOException I/O exception\r\n   */\r\n  static File cache(final InputStream in) throws IOException {\r\n    // use current number of milliseconds as filename\r\n    final File file = new File(Prop.TMP + System.currentTimeMillis());\r\n    final BufferedInputStream bis = new BufferedInputStream(in);\r\n    final BufferedOutputStream bos = new BufferedOutputStream(\r\n        new FileOutputStream(file));\r\n\r\n    try {\r\n      while(true) {\r\n        final int b = bis.read();\r\n        if(b == -1) break;\r\n        bos.write(b);\r\n      }\r\n      bos.close();\r\n\r\n      if(file.length() == 0)\r\n        throw JAXRXException.badRequest(\"XML input missing.\");\r\n      \r\n      return file;\r\n    } catch(final IOException ex) {\r\n      // try to delete temporary file before returning the exception\r\n      try { bos.close(); } catch(final Exception e) { }\r\n      file.delete();\r\n      throw ex;\r\n    }\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Creates a client session or throws a server exception.\r\n   * @return client session\r\n   */\r\n  static ClientSession session() {\r\n    try {\r\n      return new ClientSession(\"localhost\",\r\n          Integer.parseInt(System.getProperty(\"org.jaxrx.serverport\")),\r\n          System.getProperty(\"org.jaxrx.user\"),\r\n          System.getProperty(\"org.jaxrx.password\"));\r\n    } catch(final IOException ex) {\r\n      error(ex);\r\n      return null;\r\n    }\r\n  }","id":59973,"modified_method":"/**\r\n   * Creates a client session or throws a server exception.\r\n   * @return client session\r\n   */\r\n  static ClientSession session() {\r\n    try {\r\n      return new ClientSession(\"localhost\",\r\n          Integer.parseInt(System.getProperty(\"org.jaxrx.serverport\")),\r\n          System.getProperty(\"org.jaxrx.user\"),\r\n          System.getProperty(\"org.jaxrx.password\"));\r\n    } catch(final IOException ex) {\r\n      throw JAXRXException.serverError(ex);\r\n    }\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * This method runs a query or command on the database.\r\n   * @param db An optional database reference\r\n   * @param p parameters\r\n   * @return streaming output reference\r\n   */\r\n  static StreamingOutput query(final String db,\r\n      final Map<EURLParameter, String> p) {\r\n\r\n    return new StreamingOutput() {\r\n      @Override\r\n      public void write(final OutputStream out) {\r\n        final ClientSession cs = session();\r\n        run(cs, new Code() {\r\n          @Override\r\n          public void run() throws IOException {\r\n            // open database\r\n            if(db != null && !cs.execute(new Open(db))) notFound(cs.info());\r\n\r\n            // set serialization parameters\r\n            final String par = params(p);\r\n            if(!cs.execute(new Set(Prop.SERIALIZER, par)))\r\n              badRequest(cs.info());\r\n\r\n            // run command, query or show databases\r\n            if(p.get(EURLParameter.COMMAND) != null) {\r\n              command(cs, out, p);\r\n            } else if(p.get(EURLParameter.RUN) != null) {\r\n              file(cs, out, p);\r\n            } else if(p.get(EURLParameter.QUERY) != null || db != null) {\r\n              query(cs, out, p);\r\n            } else {\r\n              list(cs, out, p);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }","id":59974,"modified_method":"/**\r\n   * This method runs a query or command on the database.\r\n   * @param db An optional database reference\r\n   * @param p parameters\r\n   * @return streaming output reference\r\n   */\r\n  static StreamingOutput query(final String db,\r\n      final Map<EURLParameter, String> p) {\r\n\r\n    return new StreamingOutput() {\r\n      @Override\r\n      public void write(final OutputStream out) {\r\n        final ClientSession cs = session();\r\n        run(cs, new Code() {\r\n          @Override\r\n          public void run() throws IOException {\r\n            // open database\r\n            if(db != null && !cs.execute(new Open(db))) \r\n              throw JAXRXException.notFound(cs.info());\r\n\r\n            // set serialization parameters\r\n            final String par = params(p);\r\n            if(!cs.execute(new Set(Prop.SERIALIZER, par)))\r\n              throw JAXRXException.badRequest(cs.info());\r\n\r\n            // run command, query or show databases\r\n            if(p.get(EURLParameter.COMMAND) != null) {\r\n              command(cs, out, p);\r\n            } else if(p.get(EURLParameter.RUN) != null) {\r\n              file(cs, out, p);\r\n            } else if(p.get(EURLParameter.QUERY) != null || db != null) {\r\n              query(cs, out, p);\r\n            } else {\r\n              list(cs, out, p);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns serialization parameters, specified in the map, in a string.\r\n   * @param p map with parameters\r\n   * @return string with serialization parameters\r\n   */\r\n  static String params(final Map<EURLParameter, String> p) {\r\n    String ser = p.get(EURLParameter.OUTPUT);\r\n    if(ser == null) ser = \"\";\r\n\r\n    final String wrap = p.get(EURLParameter.WRAP);\r\n    // wrap results by default\r\n    if(wrap == null || wrap.equals(DataText.YES)) {\r\n      ser += \",\" + SerializerProp.S_WRAP_PRE[0] + \"=\" + JAXRX +\r\n             \",\" + SerializerProp.S_WRAP_URI[0] + \"=\" + URL;\r\n    } else if(!wrap.equals(DataText.NO)) {\r\n      badRequest(SerializerProp.error(EURLParameter.WRAP.toString(),\r\n          DataText.YES, DataText.NO));\r\n    }\r\n    return ser;\r\n  }","id":59975,"modified_method":"/**\r\n   * Returns serialization parameters, specified in the map, as a string.\r\n   * @param p map with parameters\r\n   * @return string with serialization parameters\r\n   */\r\n  static String params(final Map<EURLParameter, String> p) {\r\n    String ser = p.get(EURLParameter.OUTPUT);\r\n    if(ser == null) ser = \"\";\r\n\r\n    final String wrap = p.get(EURLParameter.WRAP);\r\n    // wrap results by default\r\n    if(wrap == null || wrap.equals(DataText.YES)) {\r\n      ser += \",\" + SerializerProp.S_WRAP_PRE[0] + \"=\" + JAXRX +\r\n             \",\" + SerializerProp.S_WRAP_URI[0] + \"=\" + URL;\r\n    } else if(!wrap.equals(DataText.NO)) {\r\n      throw JAXRXException.badRequest(SerializerProp.error(\r\n          EURLParameter.WRAP.toString(), DataText.YES, DataText.NO));\r\n    }\r\n    return ser;\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * This main method starts the JAXRX implementation.\r\n   * @param args (ignored) command-line parameters.\r\n   */\r\n  public static void main(final String[] args) {\r\n    // start database server (if not done yet)\r\n    final BaseXServer server = new BaseXServer();\r\n    final Prop prop = server.context.prop;\r\n\r\n    // database user\r\n    System.setProperty(\"org.jaxrx.user\", \"admin\");\r\n    // database password\r\n    System.setProperty(\"org.jaxrx.password\", \"admin\");\r\n\r\n    // database server port\r\n    System.setProperty(\"org.jaxrx.serverport\",\r\n        Integer.toString(prop.num(Prop.SERVERPORT)));\r\n    // port of web server\r\n    System.setProperty(\"org.jaxrx.webport\",\r\n        Integer.toString(prop.num(Prop.WEBPORT)));\r\n    // path to web directory\r\n    System.setProperty(\"org.jaxrx.webpath\", prop.get(Prop.WEBPATH));\r\n\r\n    // name of implementation\r\n    System.setProperty(\"org.jaxrx.systemName\", Text.NAMELC);\r\n    // path to implementation package\r\n    System.setProperty(\"org.jaxrx.implementation\", \r\n        StartJAXRX.class.getPackage().getName());\r\n\r\n    // start Jetty web server\r\n    StartJettyServer.main(null);\r\n  }","id":59976,"modified_method":"/**\r\n   * This main method starts the JAXRX implementation.\r\n   * @param args (ignored) command-line parameters.\r\n   */\r\n  public static void main(final String[] args) {\r\n    // start database server (if not done yet)\r\n    final BaseXServer server = new BaseXServer();\r\n    final Prop prop = server.context.prop;\r\n\r\n    // database user\r\n    System.setProperty(\"org.jaxrx.user\", \"admin\");\r\n    // database password\r\n    System.setProperty(\"org.jaxrx.password\", \"admin\");\r\n\r\n    // database server port\r\n    System.setProperty(\"org.jaxrx.serverport\",\r\n        Integer.toString(prop.num(Prop.SERVERPORT)));\r\n    // path to web directory (needed by the 'run' parameter)\r\n    System.setProperty(\"org.jaxrx.webpath\", prop.get(Prop.WEBPATH));\r\n\r\n    // name of implementation(s)\r\n    System.setProperty(\"org.jaxrx.systemName\", Text.NAMELC);\r\n    // path to implementation package(s)\r\n    System.setProperty(\"org.jaxrx.implementation\", \r\n        StartJAXRX.class.getPackage().getName());\r\n\r\n    // start Jetty web server\r\n    new StartJetty(prop.num(Prop.WEBPORT));\r\n  }","commit_id":"7695d07e4d4ce17f2713ae1c646e9cc773097568","url":"https://github.com/BaseXdb/basex"},{"original_method":"public ReservationIdInfo getReservationId() {\n    return reservationId;\n  }","id":59977,"modified_method":"public String getReservationId() {\n    return reservationId;\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"public ReservationInfo() {\n    acceptanceTime = 0;\n    user = \"\";\n\n    reservationDefinition = new ReservationDefinitionInfo();\n    reservationId = new ReservationIdInfo();\n  }","id":59978,"modified_method":"public ReservationInfo() {\n    acceptanceTime = 0;\n    user = \"\";\n\n    reservationDefinition = new ReservationDefinitionInfo();\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"public ReservationInfo(ReservationAllocationState allocation, boolean\n        includeResourceAllocations) throws\n        Exception {\n    acceptanceTime = allocation.getAcceptanceTime();\n    user = allocation.getUser();\n\n    if (includeResourceAllocations) {\n      List<ResourceAllocationRequest> requests = allocation\n              .getResourceAllocationRequests();\n      for (ResourceAllocationRequest request : requests) {\n        resourceAllocations.add(new ResourceAllocationInfo(new\n                ReservationInterval(request.getStartTime(), request\n                .getEndTime()), request.getCapability()));\n      }\n    }\n\n    reservationId = new ReservationIdInfo(allocation.getReservationId());\n    reservationDefinition = new ReservationDefinitionInfo(\n            allocation.getReservationDefinition());\n  }","id":59979,"modified_method":"public ReservationInfo(ReservationAllocationState allocation, boolean\n        includeResourceAllocations) throws\n        Exception {\n    acceptanceTime = allocation.getAcceptanceTime();\n    user = allocation.getUser();\n\n    if (includeResourceAllocations) {\n      List<ResourceAllocationRequest> requests = allocation\n              .getResourceAllocationRequests();\n      for (ResourceAllocationRequest request : requests) {\n        resourceAllocations.add(new ResourceAllocationInfo(new\n                ReservationInterval(request.getStartTime(), request\n                .getEndTime()), request.getCapability()));\n      }\n    }\n\n    reservationId = allocation.getReservationId().toString();\n    reservationDefinition = new ReservationDefinitionInfo(\n            allocation.getReservationDefinition());\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testReservationIdRequestListReservation() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n    testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_2\", 2);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"true\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    long reservationId = reservations.getJSONObject(\"reservation-id\")\n            .getLong(\"reservation-id\");\n    assertEquals(id1.getId(), reservationId);\n\n    rm.stop();\n  }","id":59980,"modified_method":"@Test\n  public void testReservationIdRequestListReservation() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n    testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_2\", 2);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"true\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    String reservationId = reservations.getString(\"reservation-id\");\n    assertEquals(id1.toString(), reservationId);\n\n    rm.stop();\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testIncludeResourceAllocations() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"true\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    long reservationId = reservations.getJSONObject(\"reservation-id\")\n            .getLong(\"reservation-id\");\n    assertEquals(id1.getId(), reservationId);\n\n    assertTrue(reservations.has(\"resource-allocations\"));\n\n    rm.stop();\n  }","id":59981,"modified_method":"@Test\n  public void testIncludeResourceAllocations() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"true\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    String reservationId = reservations.getString(\"reservation-id\");\n    assertEquals(id1.toString(), reservationId);\n\n    assertTrue(reservations.has(\"resource-allocations\"));\n\n    rm.stop();\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testExcludeResourceAllocations() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"false\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    long reservationId = reservations.getJSONObject(\"reservation-id\")\n            .getLong(\"reservation-id\");\n    assertEquals(id1.getId(), reservationId);\n\n    assertTrue(!reservations.has(\"resource-allocations\"));\n\n    rm.stop();\n  }","id":59982,"modified_method":"@Test\n  public void testExcludeResourceAllocations() throws Exception {\n    rm.start();\n    setupCluster(100);\n\n    ReservationId id1 = testSubmissionReservationHelper(\"reservation/submit\",\n            MediaType.APPLICATION_JSON, clock.getTime(), \"res_1\", 1);\n\n    WebResource resource = constructWebResource(LIST_RESERVATION_PATH)\n            .queryParam(\"include-resource-allocations\", \"false\")\n            .queryParam(\"queue\", DEFAULT_QUEUE);\n\n    if (id1 != null) {\n      resource = resource.queryParam(\"reservation-id\", id1.toString());\n    }\n\n    JSONObject json = testListReservationHelper(resource);\n\n    if (!this.isAuthenticationEnabled() && json == null) {\n      return;\n    }\n\n    JSONObject reservations = json.getJSONObject(\"reservations\");\n\n    testRDLHelper(reservations);\n\n    String reservationId = reservations.getString(\"reservation-id\");\n    assertEquals(id1.toString(), reservationId);\n\n    assertTrue(!reservations.has(\"resource-allocations\"));\n\n    rm.stop();\n  }","commit_id":"00bebb7e58ba6899904e1619d151aa1b2f5b6acd","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n     * Controls if the loggers will be silenced or not.\n     * @param silent    <code>true<\/code> sets the log level to WARN for the\n     *                  loggers that log information on Tomcat start up. This\n     *                  prevents the usual startup information being logged.\n     *                  <code>false<\/code> sets the log level to the default\n     *                  level of INFO.\n     */\n    public void setSilent(boolean silent) {\n        for (String s : silences) {\n            Logger logger = Logger.getLogger(s);\n            pinnedLoggers.put(s, logger);\n            if (silent) {\n                logger.setLevel(Level.WARNING);\n            } else {\n                logger.setLevel(Level.INFO);\n            }\n        }\n    }","id":59983,"modified_method":"/**\n     * Controls if the loggers will be silenced or not.\n     * @param silent    <code>true<\/code> sets the log level to WARN for the\n     *                  loggers that log information on Tomcat start up. This\n     *                  prevents the usual startup information being logged.\n     *                  <code>false<\/code> sets the log level to the default\n     *                  level of INFO.\n     */\n    public void setSilent(boolean silent) {\n        this.silent = silent;\n        for (String s : silences) {\n            Logger logger = Logger.getLogger(s);\n            pinnedLoggers.put(s, logger);\n            if (silent) {\n                logger.setLevel(Level.WARNING);\n            } else {\n                logger.setLevel(Level.INFO);\n            }\n        }\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * @param host The host in which the context will be deployed\n     * @param contextPath The context mapping to use, \"\" for root context.\n     * @param contextName The context name\n     * @param dir Base directory for the context, for static files.\n     *  Must exist, relative to the server home\n     * @return the deployed context\n     * @see #addContext(String, String)\n     */\n    public Context addContext(Host host, String contextPath, String contextName,\n            String dir) {\n        silence(host, contextPath);\n        Context ctx = createContext(host, contextPath);\n        ctx.setName(contextName);\n        ctx.setPath(contextPath);\n        ctx.setDocBase(dir);\n        ctx.addLifecycleListener(new FixContextListener());\n\n        if (host == null) {\n            getHost().addChild(ctx);\n        } else {\n            host.addChild(ctx);\n        }\n        return ctx;\n    }","id":59984,"modified_method":"/**\n     * @param host The host in which the context will be deployed\n     * @param contextPath The context mapping to use, \"\" for root context.\n     * @param contextName The context name\n     * @param dir Base directory for the context, for static files.\n     *  Must exist, relative to the server home\n     * @return the deployed context\n     * @see #addContext(String, String)\n     */\n    public Context addContext(Host host, String contextPath, String contextName,\n            String dir) {\n        silence(host, contextName);\n        Context ctx = createContext(host, contextPath);\n        ctx.setName(contextName);\n        ctx.setPath(contextPath);\n        ctx.setDocBase(dir);\n        ctx.addLifecycleListener(new FixContextListener());\n\n        if (host == null) {\n            getHost().addChild(ctx);\n        } else {\n            host.addChild(ctx);\n        }\n        return ctx;\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"private URL getWebappConfigFileFromJar(File docBase, String url) {\n        URL result = null;\n        try (JarFile jar = new JarFile(docBase)) {\n            JarEntry entry = jar.getJarEntry(Constants.ApplicationContextXml);\n            if (entry != null) {\n                result = new URL(\"jar:\" + docBase.toURI().toString() + \"!/\"\n                        + Constants.ApplicationContextXml);\n            }\n        } catch (IOException e) {\n            Logger.getLogger(getLoggerName(getHost(), url)).log(Level.WARNING,\n                    \"Unable to determine web application context.xml \" + docBase, e);\n        }\n        return result;\n    }","id":59985,"modified_method":"private URL getWebappConfigFileFromJar(File docBase, String contextName) {\n        URL result = null;\n        try (JarFile jar = new JarFile(docBase)) {\n            JarEntry entry = jar.getJarEntry(Constants.ApplicationContextXml);\n            if (entry != null) {\n                result = new URL(\"jar:\" + docBase.toURI().toString() + \"!/\"\n                        + Constants.ApplicationContextXml);\n            }\n        } catch (IOException e) {\n            Logger.getLogger(getLoggerName(getHost(), contextName)).log(Level.WARNING,\n                    \"Unable to determine web application context.xml \" + docBase, e);\n        }\n        return result;\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"private String getLoggerName(Host host, String ctx) {\n        String loggerName = \"org.apache.catalina.core.ContainerBase.[default].[\";\n        if (host == null) {\n            loggerName += getHost().getName();\n        } else {\n            loggerName += host.getName();\n        }\n        loggerName += \"].[\";\n        loggerName += ctx;\n        loggerName += \"]\";\n        return loggerName;\n    }","id":59986,"modified_method":"private String getLoggerName(Host host, String contextName) {\n        if (host == null) {\n            host = getHost();\n        }\n        StringBuilder loggerName = new StringBuilder();\n        loggerName.append(ContainerBase.class.getName());\n        loggerName.append(\".[\");\n        // Engine name\n        loggerName.append(host.getParent().getName());\n        loggerName.append(\"].[\");\n        // Host name\n        loggerName.append(host.getName());\n        loggerName.append(\"].[\");\n        // Context name\n        if (contextName == null || contextName.equals(\"\")) {\n            loggerName.append(\"/\");\n        } else if (contextName.startsWith(\"##\")) {\n            loggerName.append(\"/\");\n            loggerName.append(contextName);\n        }\n        loggerName.append(']');\n\n        return loggerName.toString();\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"private void silence(Host host, String ctx) {\n        String loggerName = getLoggerName(host, ctx);\n        Logger logger = Logger.getLogger(loggerName);\n        pinnedLoggers.put(loggerName, logger);\n        logger.setLevel(Level.WARNING);\n    }","id":59987,"modified_method":"private void silence(Host host, String contextPath) {\n        String loggerName = getLoggerName(host, contextPath);\n        Logger logger = Logger.getLogger(loggerName);\n        pinnedLoggers.put(loggerName, logger);\n        if (silent) {\n            logger.setLevel(Level.WARNING);\n        } else {\n            logger.setLevel(Level.INFO);\n        }\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"protected URL getWebappConfigFile(String path, String url) {\n        File docBase = new File(path);\n        if (docBase.isDirectory()) {\n            return getWebappConfigFileFromDirectory(docBase, url);\n        } else {\n            return getWebappConfigFileFromJar(docBase, url);\n        }\n    }","id":59988,"modified_method":"protected URL getWebappConfigFile(String path, String contextName) {\n        File docBase = new File(path);\n        if (docBase.isDirectory()) {\n            return getWebappConfigFileFromDirectory(docBase, contextName);\n        } else {\n            return getWebappConfigFileFromJar(docBase, contextName);\n        }\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"private URL getWebappConfigFileFromDirectory(File docBase, String url) {\n        URL result = null;\n        File webAppContextXml = new File(docBase, Constants.ApplicationContextXml);\n        if (webAppContextXml.exists()) {\n            try {\n                result = webAppContextXml.toURI().toURL();\n            } catch (MalformedURLException e) {\n                Logger.getLogger(getLoggerName(getHost(), url)).log(Level.WARNING,\n                        \"Unable to determine web application context.xml \" + docBase, e);\n            }\n        }\n        return result;\n    }","id":59989,"modified_method":"private URL getWebappConfigFileFromDirectory(File docBase, String contextName) {\n        URL result = null;\n        File webAppContextXml = new File(docBase, Constants.ApplicationContextXml);\n        if (webAppContextXml.exists()) {\n            try {\n                result = webAppContextXml.toURI().toURL();\n            } catch (MalformedURLException e) {\n                Logger.getLogger(getLoggerName(getHost(), contextName)).log(Level.WARNING,\n                        \"Unable to determine web application context.xml \" + docBase, e);\n            }\n        }\n        return result;\n    }","commit_id":"4ab6674b97156d6d39755290957b36ef484a369d","url":"https://github.com/apache/tomcat"},{"original_method":"public AutopsyExceptionHandler() {\n        super();\n        // Only display messages for SEVERE level and above, that come from an uncaught exception.\n        this.setLevel(Level.SEVERE);\n        this.setFilter(new ExceptionFilter());\n        this.setFormatter(new SimpleFormatter());\n    }","id":59990,"modified_method":"public AutopsyExceptionHandler() {\n        super();\n        \n        if (buildType == Version.Type.DEVELOPMENT)\n            //for dev builds, show dialogs for WARNING and above\n            this.setLevel(Level.WARNING);\n        else \n            //for production builds, show dialogs for SEVERE and above (TODO in future consider not show any, explicit dialogs should be in place)\n            this.setLevel(Level.SEVERE);\n            \n        \n        this.setFilter(new ExceptionFilter());\n        this.setFormatter(new SimpleFormatter());\n    }","commit_id":"c9bb5199621059c9746edd837f40927ba4184139","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"LogConfig(LogWriterProvider logWriterProvider, final String pattern, Set<String> categories, Level logLevel,\n            String logWriterName, final boolean isAdditiv, String configPid, LoggerContext loggerContext) {\n        this.logWriterProvider = logWriterProvider;\n        this.configPid = configPid;\n        this.pattern = pattern;\n        this.categories = Collections.unmodifiableSet(categories);\n        this.logLevel = logLevel;\n        this.logWriterName = logWriterName;\n        this.loggerContext = loggerContext;\n        this.isAdditiv = isAdditiv;\n    }","id":59991,"modified_method":"LogConfig(LogWriterProvider logWriterProvider, final String pattern, Set<String> categories, Level logLevel,\n              String logWriterName, final boolean isAdditiv, String configPid, LoggerContext loggerContext, boolean resetToDefault) {\n        this.logWriterProvider = logWriterProvider;\n        this.configPid = configPid;\n        this.pattern = pattern;\n        this.categories = Collections.unmodifiableSet(categories);\n        this.logLevel = logLevel;\n        this.logWriterName = logWriterName;\n        this.loggerContext = loggerContext;\n        this.isAdditiv = isAdditiv;\n        this.resetToDefault = resetToDefault;\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"/**\n     * Returns the <code>logFileName<\/code> argument converted into an absolute\n     * path name. If <code>logFileName<\/code> is already absolute it is returned\n     * unmodified. Otherwise it is made absolute by resolving it relative to the\n     * root directory set on this instance by the {@link #setRoot(String)}\n     * method.\n     *\n     * @throws NullPointerException if <code>logFileName<\/code> is\n     *             <code>null<\/code>.\n     */\n    private String getAbsoluteFilePath(String logFileName) {\n        // ensure proper separator in the path (esp. for systems, which do\n        // not use \"slash\" as a separator, e.g Windows)\n        logFileName = logFileName.replace('/', File.separatorChar);\n\n        // create a file instance and check whether this is absolute. If not\n        // create a new absolute file instance with the root dir and get\n        // the absolute path name from that\n        File logFile = new File(logFileName);\n        if (!logFile.isAbsolute()) {\n            logFile = new File(rootDir, logFileName);\n            logFileName = logFile.getAbsolutePath();\n        }\n\n        // return the correct log file name\n        return logFileName;\n    }","id":59992,"modified_method":"/**\n     * Returns the <code>logFileName<\/code> argument converted into an absolute\n     * path name. If <code>logFileName<\/code> is already absolute it is returned\n     * unmodified. Otherwise it is made absolute by resolving it relative to the\n     * root directory set on this instance.\n     * method.\n     *\n     * @throws NullPointerException if <code>logFileName<\/code> is\n     *             <code>null<\/code>.\n     */\n    private String getAbsoluteFilePath(String logFileName) {\n        // ensure proper separator in the path (esp. for systems, which do\n        // not use \"slash\" as a separator, e.g Windows)\n        logFileName = logFileName.replace('/', File.separatorChar);\n\n        // create a file instance and check whether this is absolute. If not\n        // create a new absolute file instance with the root dir and get\n        // the absolute path name from that\n        File logFile = new File(logFileName);\n        if (!logFile.isAbsolute()) {\n            logFile = new File(rootDir, logFileName);\n            logFileName = logFile.getAbsolutePath();\n        }\n\n        // return the correct log file name\n        return logFileName;\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"/**\n     * Updates or removes the logger configuration indicated by the given\n     * <code>pid<\/code>. If the case of modified categories or removal of the\n     * logger configuration, existing loggers will be modified to reflect the\n     * correct logger configurations available.\n     * <p>\n     * The configuration object is expected to contain the following properties:\n     * <dl>\n     * <dt>{@link LogConfigManager#LOG_PATTERN}<\/dt>\n     * <dd>The <code>MessageFormat<\/code> pattern to apply to format the log\n     * message before writing it to the log writer. If this property is missing\n     * or the empty string the default pattern\n     * {@link LogConfigManager#LOG_PATTERN_DEFAULT} is used.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_LEVEL}<\/dt>\n     * <dd>The log level to use for log message limitation. The supported values\n     * are <code>off<\/code>, <code>trace<\/code>, <code>debug<\/code>, <code>info<\/code>,\n     * <code>warn<\/code> and <code>error<\/code>. Case does not matter. If this\n     * property is missing a <code>ConfigurationException<\/code> is thrown and\n     * this logger configuration is not used.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_LOGGERS}<\/dt>\n     * <dd>The logger names to which this configuration applies. As logger names\n     * form a hierarchy like Java packages, the listed names also apply to\n     * \"child names\" unless more specific configuration applies for such\n     * children. This property may be a single string, an array of strings or a\n     * collection of strings. Each string may itself be a comma-separated list\n     * of logger names. If this property is missing a\n     * <code>ConfigurationException<\/code> is thrown.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_FILE}<\/dt>\n     * <dd>The name of the log writer to use. This may be the name of a log file\n     * configured for any log writer or it may be the configuration PID of such\n     * a writer. If this property is missing or empty or does not refer to an\n     * existing log writer configuration, the default log writer is used.<\/dd>\n     *\n     * @param pid The name of the configuration to update or remove.\n     * @param configuration The configuration object.\n     * @throws ConfigurationException If the log level and logger names\n     *             properties are not configured for the given configuration.\n     */\n    public void updateLoggerConfiguration(final String pid, final Dictionary<?, ?> configuration, final boolean performRefresh)\n    throws ConfigurationException {\n\n        if (configuration != null) {\n\n            String pattern = (String) configuration.get(LogConfigManager.LOG_PATTERN);\n            final String level = (String) configuration.get(LogConfigManager.LOG_LEVEL);\n            String fileName = (String) configuration.get(LogConfigManager.LOG_FILE);\n            final Set<String> categories = toCategoryList(configuration.get(LogConfigManager.LOG_LOGGERS));\n            final boolean additiv;\n            if ( configuration.get(LogConfigManager.LOG_ADDITIV) != null ) {\n                additiv = Boolean.valueOf(configuration.get(LogConfigManager.LOG_ADDITIV).toString());\n            } else {\n                // If an appender is explicitly defined then set additive to false\n                // to be compatible with earlier Sling Logging behavior\n                additiv = false;\n            }\n\n            // verify categories\n            if (categories == null) {\n                throw new ConfigurationException(LogConfigManager.LOG_LOGGERS, \"Missing categories in configuration \"\n                    + pid);\n            }\n\n            // verify no other configuration has any of the categories\n            for (final String cat : categories) {\n                final LogConfig cfg = configByCategory.get(cat);\n                if (cfg != null && !pid.equals(cfg.getConfigPid())) {\n                    throw new ConfigurationException(LogConfigManager.LOG_LOGGERS, \"Category \" + cat\n                        + \" already defined by configuration \" + pid);\n                }\n            }\n\n            // verify log level\n            if (level == null) {\n                throw new ConfigurationException(LogConfigManager.LOG_LEVEL, \"Value required\");\n            }\n            // TODO: support numeric levels !\n            final Level logLevel = Level.toLevel(level);\n            if (logLevel == null) {\n                throw new ConfigurationException(LogConfigManager.LOG_LEVEL, \"Unsupported value: \" + level);\n            }\n\n            // verify pattern\n            if (pattern == null || pattern.length() == 0) {\n                pattern = LogConfigManager.LOG_PATTERN_DEFAULT;\n            }\n\n            // FileName being just null means that we want to change the\n            // LogLevel\n            if (fileName != null && !isConsole(fileName)) {\n                fileName = getAbsoluteFilePath(fileName);\n            }\n\n            // create or modify existing configuration object\n            final LogConfig newConfig = new LogConfig(this, pattern, categories, logLevel, fileName, additiv, pid, loggerContext);\n            LogConfig oldConfig = configByPid.get(pid);\n            if (oldConfig != null) {\n                configByCategory.keySet().removeAll(oldConfig.getCategories());\n            }\n\n            // relink categories\n            for (String cat : categories) {\n                configByCategory.put(cat, newConfig);\n            }\n\n            configByPid.put(pid, newConfig);\n\n        } else {\n\n            // configuration deleted if null\n\n            // remove configuration from pid list\n            LogConfig config = configByPid.remove(pid);\n\n            if (config != null) {\n                // remove all configured categories\n                configByCategory.keySet().removeAll(config.getCategories());\n            }\n\n        }\n\n        if (performRefresh) {\n            logbackManager.configChanged();\n        }\n    }","id":59993,"modified_method":"/**\n     * Updates or removes the logger configuration indicated by the given\n     * <code>pid<\/code>. If the case of modified categories or removal of the\n     * logger configuration, existing loggers will be modified to reflect the\n     * correct logger configurations available.\n     * <p>\n     * The configuration object is expected to contain the following properties:\n     * <dl>\n     * <dt>{@link LogConfigManager#LOG_PATTERN}<\/dt>\n     * <dd>The <code>MessageFormat<\/code> pattern to apply to format the log\n     * message before writing it to the log writer. If this property is missing\n     * or the empty string the default pattern\n     * {@link LogConfigManager#LOG_PATTERN_DEFAULT} is used.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_LEVEL}<\/dt>\n     * <dd>The log level to use for log message limitation. The supported values\n     * are <code>off<\/code>, <code>trace<\/code>, <code>debug<\/code>, <code>info<\/code>,\n     * <code>warn<\/code> and <code>error<\/code>. Case does not matter. If this\n     * property is missing a <code>ConfigurationException<\/code> is thrown and\n     * this logger configuration is not used.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_LOGGERS}<\/dt>\n     * <dd>The logger names to which this configuration applies. As logger names\n     * form a hierarchy like Java packages, the listed names also apply to\n     * \"child names\" unless more specific configuration applies for such\n     * children. This property may be a single string, an array of strings or a\n     * collection of strings. Each string may itself be a comma-separated list\n     * of logger names. If this property is missing a\n     * <code>ConfigurationException<\/code> is thrown.<\/dd>\n     * <dt>{@link LogConfigManager#LOG_FILE}<\/dt>\n     * <dd>The name of the log writer to use. This may be the name of a log file\n     * configured for any log writer or it may be the configuration PID of such\n     * a writer. If this property is missing or empty or does not refer to an\n     * existing log writer configuration, the default log writer is used.<\/dd>\n     *\n     * @param pid The name of the configuration to update or remove.\n     * @param configuration The configuration object.\n     * @throws ConfigurationException If the log level and logger names\n     *             properties are not configured for the given configuration.\n     */\n    public void updateLoggerConfiguration(final String pid, final Dictionary<?, ?> configuration, final boolean performRefresh)\n    throws ConfigurationException {\n\n        if (configuration != null) {\n\n            String pattern = (String) configuration.get(LogConfigManager.LOG_PATTERN);\n            final String level = (String) configuration.get(LogConfigManager.LOG_LEVEL);\n            String fileName = (String) configuration.get(LogConfigManager.LOG_FILE);\n            final Set<String> categories = toCategoryList(configuration.get(LogConfigManager.LOG_LOGGERS));\n            final boolean additiv;\n            if ( configuration.get(LogConfigManager.LOG_ADDITIV) != null ) {\n                additiv = Boolean.valueOf(configuration.get(LogConfigManager.LOG_ADDITIV).toString());\n            } else {\n                // If an appender is explicitly defined then set additive to false\n                // to be compatible with earlier Sling Logging behavior\n                additiv = false;\n            }\n\n            // verify categories\n            if (categories == null) {\n                throw new ConfigurationException(LogConfigManager.LOG_LOGGERS, \"Missing categories in configuration \"\n                    + pid);\n            }\n\n            // verify no other configuration has any of the categories\n            for (final String cat : categories) {\n                final LogConfig cfg = configByCategory.get(cat);\n                if (cfg != null && !pid.equals(cfg.getConfigPid())) {\n                    throw new ConfigurationException(LogConfigManager.LOG_LOGGERS, \"Category \" + cat\n                        + \" already defined by configuration \" + pid);\n                }\n            }\n\n            // verify log level\n            if (level == null) {\n                throw new ConfigurationException(LogConfigManager.LOG_LEVEL, \"Value required\");\n            }\n\n            final Level logLevel;\n            final boolean resetToDefault;\n            if (LOG_LEVEL_RESET_TO_DEFAULT.equalsIgnoreCase(level)){\n                resetToDefault = true;\n                logLevel = null;\n            } else {\n                logLevel = Level.toLevel(level);\n                resetToDefault = false;\n            }\n\n            // verify pattern\n            if (pattern == null || pattern.length() == 0) {\n                pattern = LogConfigManager.LOG_PATTERN_DEFAULT;\n            }\n\n            // FileName being just null means that we want to change the\n            // LogLevel\n            if (fileName != null && !isConsole(fileName)) {\n                fileName = getAbsoluteFilePath(fileName);\n            }\n\n            // create or modify existing configuration object\n            final LogConfig newConfig = new LogConfig(this, pattern, categories, logLevel, fileName, additiv,\n                    pid, loggerContext, resetToDefault);\n            LogConfig oldConfig = configByPid.get(pid);\n            if (oldConfig != null) {\n                configByCategory.keySet().removeAll(oldConfig.getCategories());\n            }\n\n            // relink categories\n            for (String cat : categories) {\n                configByCategory.put(cat, newConfig);\n            }\n\n            configByPid.put(pid, newConfig);\n\n        } else {\n\n            // configuration deleted if null\n\n            // remove configuration from pid list\n            LogConfig config = configByPid.remove(pid);\n\n            if (config != null) {\n                // remove all configured categories\n                configByCategory.keySet().removeAll(config.getCategories());\n            }\n\n        }\n\n        if (performRefresh) {\n            logbackManager.configChanged();\n        }\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    public void onResetComplete(LoggerContext context) {\n        //The OSGi config based appenders are attached on reset complete as by that time Logback config\n        // would have been parsed and various appenders and logger configured. Now we use the OSGi config\n        // 1. If an appender with same name as one defined by OSGi config is found then it takes precedence\n        // 2. If no existing appender is found then we create one use that\n        Map<String, Appender<ILoggingEvent>> appendersByName = new HashMap<String, Appender<ILoggingEvent>>();\n\n        Map<String, Appender<ILoggingEvent>> configuredAppenders =\n                (Map<String, Appender<ILoggingEvent>>) context.getObject(ActionConst.APPENDER_BAG);\n\n        if(configuredAppenders == null){\n            configuredAppenders = Collections.emptyMap();\n        }\n\n        Map<Appender, LoggerSpecificEncoder> encoders = new HashMap<Appender, LoggerSpecificEncoder>();\n\n        for (LogConfig config : getLogConfigs()) {\n            Appender<ILoggingEvent> appender = null;\n            if (config.isAppenderDefined()) {\n                LogWriter lw = config.getLogWriter();\n\n                final String appenderName = lw.getAppenderName();\n                appender = appendersByName.get(appenderName);\n\n                if(appender == null){\n                    appender = configuredAppenders.get(appenderName);\n                    if(appender != null){\n                        contextUtil.addInfo(\"Found overriding configuration for appender \"+ appenderName\n                                + \" in Logback config. OSGi config would be ignored\");\n                    }\n                }\n\n                if (appender == null) {\n                    LoggerSpecificEncoder encoder = new LoggerSpecificEncoder(getDefaultLayout());\n                    appender = lw.createAppender(loggerContext, encoder);\n                    encoders.put(appender, encoder);\n                    appendersByName.put(appenderName, appender);\n                }\n\n                if(encoders.containsKey(appender)){\n                    encoders.get(appender).addLogConfig(config);\n                }\n            }\n\n            for (String category : config.getCategories()) {\n                ch.qos.logback.classic.Logger logger = loggerContext.getLogger(category);\n                logger.setLevel(config.getLogLevel());\n                if (appender != null) {\n                    logger.setAdditive(config.isAdditive());\n                    logger.addAppender(appender);\n                    contextUtil.addInfo(\"Registering appender \"+appender.getName()+ \"(\"+appender.getClass()+\n                            \") with logger \"+logger.getName());\n                }\n            }\n        }\n    }","id":59994,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Override\n    public void onResetComplete(LoggerContext context) {\n        //The OSGi config based appenders are attached on reset complete as by that time Logback config\n        // would have been parsed and various appenders and logger configured. Now we use the OSGi config\n        // 1. If an appender with same name as one defined by OSGi config is found then it takes precedence\n        // 2. If no existing appender is found then we create one use that\n        Map<String, Appender<ILoggingEvent>> appendersByName = new HashMap<String, Appender<ILoggingEvent>>();\n\n        Map<String, Appender<ILoggingEvent>> configuredAppenders =\n                (Map<String, Appender<ILoggingEvent>>) context.getObject(ActionConst.APPENDER_BAG);\n\n        if(configuredAppenders == null){\n            configuredAppenders = Collections.emptyMap();\n        }\n\n        Map<Appender, LoggerSpecificEncoder> encoders = new HashMap<Appender, LoggerSpecificEncoder>();\n\n        for (LogConfig config : getLogConfigs()) {\n            Appender<ILoggingEvent> appender = null;\n            if (config.isAppenderDefined()) {\n                LogWriter lw = config.getLogWriter();\n\n                final String appenderName = lw.getAppenderName();\n                appender = appendersByName.get(appenderName);\n\n                if(appender == null){\n                    appender = configuredAppenders.get(appenderName);\n                    if(appender != null){\n                        contextUtil.addInfo(\"Found overriding configuration for appender \"+ appenderName\n                                + \" in Logback config. OSGi config would be ignored\");\n                    }\n                }\n\n                if (appender == null) {\n                    LoggerSpecificEncoder encoder = new LoggerSpecificEncoder(getDefaultLayout());\n                    appender = lw.createAppender(loggerContext, encoder);\n                    encoders.put(appender, encoder);\n                    appendersByName.put(appenderName, appender);\n                }\n\n                if(encoders.containsKey(appender)){\n                    encoders.get(appender).addLogConfig(config);\n                }\n            }\n\n            for (String category : config.getCategories()) {\n                ch.qos.logback.classic.Logger logger = loggerContext.getLogger(category);\n                if (config.isResetToDefault()){\n                    logger.setLevel(null);\n                    logger.setAdditive(true); //Reset additivity\n                } else {\n                    logger.setLevel(config.getLogLevel());\n                    if (appender != null) {\n                        logger.setAdditive(config.isAdditive());\n                        logger.addAppender(appender);\n                        contextUtil.addInfo(\"Registering appender \" + appender.getName() + \"(\" + appender.getClass() +\n                                \") with logger \" + logger.getName());\n                    }\n                }\n            }\n        }\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"private void appendOsgiConfiguredLoggerData(final PrintWriter pw, final String consoleAppRoot) {\n        pw.println(\"<div class='table'>\");\n\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>Logger (Configured via OSGi Config)<\/div>\");\n\n        pw.println(\"<form method='POST'><table id=\\\"loggerConfig\\\" class='tablesorter nicetable ui-widget'>\");\n\n        pw.println(\"<thead class='ui-widget-header'>\");\n        pw.println(\"<tr>\");\n        pw.println(\"<th>Log Level<\/th>\");\n        pw.println(\"<th>Log File<\/th>\");\n        pw.println(\"<th>Logger<\/th>\");\n        pw.print(\"<th width=\\\"20%\\\">\");\n        pw.print(getConfigColTitle(consoleAppRoot)); // no need to escape\n        pw.println(\"<\/th>\");\n        pw.println(\"<\/tr>\");\n        pw.println(\"<\/thead>\");\n        pw.println(\"<tbody class='ui-widget-content'>\");\n\n        final LogConfigManager configManager = logbackManager.getLogConfigManager();\n        final String rootPath = logbackManager.getRootDir();\n        final boolean shortenPaths = areAllLogfilesInSameFolder(configManager.getLogWriters(), rootPath);\n        for (final LogConfig logConfig : configManager.getLogConfigs()) {\n            pw.print(\"<tr id=\\\"\");\n            pw.print( XmlUtil.escapeXml(logConfig.getConfigPid()) );\n            pw.println(\"\\\">\");\n            pw.print(\"<td><span class=\\\"logLevels\\\" data-currentloglevel=\\\"\");\n            pw.print(logConfig.getLogLevel().levelStr);\n            pw.print(\"\\\">\");\n            pw.print(logConfig.getLogLevel().levelStr);\n            pw.println(\"<\/span><\/td>\");\n            pw.print(\"<td><span class=\\\"logFile\\\">\");\n            pw.print( XmlUtil.escapeXml(getPath(logConfig.getLogWriterName(), rootPath, shortenPaths)));\n            pw.println(\"<\/span><\/td>\");\n\n            pw.println(\"<td><span class=\\\"loggers\\\">\");\n            String sep = \"\";\n            for (final String cat : logConfig.getCategories()) {\n                pw.print(sep);\n                pw.print(\"<span class=\\\"logger\\\">\");\n                pw.print( XmlUtil.escapeXml(cat));\n                pw.println(\"<\/span>\");\n                sep = \"<br />\";\n            }\n            pw.println(\"<\/td>\");\n\n            final String pid = logConfig.getConfigPid();\n            String url = createUrl(consoleAppRoot, \"configMgr\", pid, true);\n            if (logConfig.getCategories().contains(Logger.ROOT_LOGGER_NAME)) {\n                url = createUrl(consoleAppRoot, \"configMgr\", pid, false);\n            }\n            pw.print(\"<td>\");\n            pw.print(url);\n            pw.println(\"<\/td>\");\n            pw.println(\"<\/tr>\");\n        }\n\n        pw.println(\"<\/tbody><tfoot>\");\n        pw.println(\"<tr id=\\\"newlogger\\\">\");\n        pw.println(\"<td><span id=\\\"allLogLevels\\\" class=\\\"logLevels\\\" data-loglevels=\\\"\");\n        String sep = \"\";\n        for (final String levelName : LEVEL_NAMES) {\n            pw.print(sep);\n            pw.print(XmlUtil.escapeXml(levelName));\n            sep = \",\";\n        }\n\n        pw.println(\"\\\"><\/span><\/td>\");\n        pw.print(\"<td><span id=\\\"defaultLogfile\\\" data-defaultlogfile=\\\"\");\n        pw.print( XmlUtil.escapeXml(getPath(configManager.getDefaultWriter().getFileName(), rootPath, shortenPaths)));\n        pw.println(\"\\\" class=\\\"logFile\\\"><\/span><\/td>\");\n        pw.println(\"<td><span class=\\\"loggers\\\"><\/span><\/td>\");\n        pw.println(\"<td><input type='submit' class=\\\"configureLink\\\" value='Add new Logger' /><\/td><\/tr><\/tfoot>\");\n\n        pw.println(\"<\/table><\/form>\");\n        pw.println(\"<\/div>\");\n    }","id":59995,"modified_method":"private void appendOsgiConfiguredLoggerData(final PrintWriter pw, final String consoleAppRoot) {\n        pw.println(\"<div class='table'>\");\n\n        pw.println(\"<div class='ui-widget-header ui-corner-top buttonGroup'>Logger (Configured via OSGi Config)<\/div>\");\n\n        pw.println(\"<form method='POST'><table id=\\\"loggerConfig\\\" class='tablesorter nicetable ui-widget'>\");\n\n        pw.println(\"<thead class='ui-widget-header'>\");\n        pw.println(\"<tr>\");\n        pw.println(\"<th>Log Level<\/th>\");\n        pw.println(\"<th>Log File<\/th>\");\n        pw.println(\"<th>Logger<\/th>\");\n        pw.print(\"<th width=\\\"20%\\\">\");\n        pw.print(getConfigColTitle(consoleAppRoot)); // no need to escape\n        pw.println(\"<\/th>\");\n        pw.println(\"<\/tr>\");\n        pw.println(\"<\/thead>\");\n        pw.println(\"<tbody class='ui-widget-content'>\");\n\n        final LogConfigManager configManager = logbackManager.getLogConfigManager();\n        final String rootPath = logbackManager.getRootDir();\n        final boolean shortenPaths = areAllLogfilesInSameFolder(configManager.getLogWriters(), rootPath);\n        for (final LogConfig logConfig : configManager.getLogConfigs()) {\n            pw.print(\"<tr id=\\\"\");\n            pw.print( XmlUtil.escapeXml(logConfig.getConfigPid()) );\n            pw.println(\"\\\">\");\n            pw.print(\"<td><span class=\\\"logLevels\\\" data-currentloglevel=\\\"\");\n            pw.print(getLevelStr(logConfig));\n            pw.print(\"\\\">\");\n            pw.print(getLevelStr(logConfig));\n            pw.println(\"<\/span><\/td>\");\n            pw.print(\"<td><span class=\\\"logFile\\\">\");\n            pw.print( XmlUtil.escapeXml(getPath(logConfig.getLogWriterName(), rootPath, shortenPaths)));\n            pw.println(\"<\/span><\/td>\");\n\n            pw.println(\"<td><span class=\\\"loggers\\\">\");\n            String sep = \"\";\n            for (final String cat : logConfig.getCategories()) {\n                pw.print(sep);\n                pw.print(\"<span class=\\\"logger\\\">\");\n                pw.print( XmlUtil.escapeXml(cat));\n                pw.println(\"<\/span>\");\n                sep = \"<br />\";\n            }\n            pw.println(\"<\/td>\");\n\n            final String pid = logConfig.getConfigPid();\n            String url = createUrl(consoleAppRoot, \"configMgr\", pid, true);\n            if (logConfig.getCategories().contains(Logger.ROOT_LOGGER_NAME)) {\n                url = createUrl(consoleAppRoot, \"configMgr\", pid, false);\n            }\n            pw.print(\"<td>\");\n            pw.print(url);\n            pw.println(\"<\/td>\");\n            pw.println(\"<\/tr>\");\n        }\n\n        pw.println(\"<\/tbody><tfoot>\");\n        pw.println(\"<tr id=\\\"newlogger\\\">\");\n        pw.println(\"<td><span id=\\\"allLogLevels\\\" class=\\\"logLevels\\\" data-loglevels=\\\"\");\n        String sep = \"\";\n        for (final String levelName : LEVEL_NAMES) {\n            pw.print(sep);\n            pw.print(XmlUtil.escapeXml(levelName));\n            sep = \",\";\n        }\n\n        pw.println(\"\\\"><\/span><\/td>\");\n        pw.print(\"<td><span id=\\\"defaultLogfile\\\" data-defaultlogfile=\\\"\");\n        pw.print( XmlUtil.escapeXml(getPath(configManager.getDefaultWriter().getFileName(), rootPath, shortenPaths)));\n        pw.println(\"\\\" class=\\\"logFile\\\"><\/span><\/td>\");\n        pw.println(\"<td><span class=\\\"loggers\\\"><\/span><\/td>\");\n        pw.println(\"<td><input type='submit' class=\\\"configureLink\\\" value='Add new Logger' /><\/td><\/tr><\/tfoot>\");\n\n        pw.println(\"<\/table><\/form>\");\n        pw.println(\"<\/div>\");\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"private LogConfig createConfig(String pattern) {\n        return new LogConfig(new DummyLogWriterProvider(), pattern, Collections.<String> emptySet(), Level.DEBUG,\n            \"test\", false, null, (LoggerContext) LoggerFactory.getILoggerFactory());\n    }","id":59996,"modified_method":"private LogConfig createConfig(String pattern) {\n        return new LogConfig(new DummyLogWriterProvider(), pattern, Collections.<String> emptySet(), Level.DEBUG,\n            \"test\", false, null, (LoggerContext) LoggerFactory.getILoggerFactory(), false);\n    }","commit_id":"6272ddbb584ac6cf756ff71e94647719d516f05c","url":"https://github.com/apache/sling"},{"original_method":"private synchronized static boolean lockSystemFolders(String[] args) {\n    if (ourLock == null) {\n      ourLock = new SocketLock();\n    }\n\n    SocketLock.ActivateStatus activateStatus = ourLock.lock(PathManager.getConfigPath(false), true, args);\n    if (activateStatus == SocketLock.ActivateStatus.NO_INSTANCE) {\n      activateStatus = ourLock.lock(PathManager.getSystemPath(), false);\n    }\n\n    if (activateStatus != SocketLock.ActivateStatus.NO_INSTANCE) {\n      if (isHeadless()) { //team server inspections\n        System.out.println(\"Only one instance of \" + ApplicationNamesInfo.getInstance().getFullProductName() + \" can be run at a time.\");\n        return false;\n      }\n      if (activateStatus == SocketLock.ActivateStatus.CANNOT_ACTIVATE) {\n        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),\n                                      \"Only one instance of \" + ApplicationNamesInfo.getInstance().getFullProductName() +\n                                      \" can be run at a time.\",\n                                      \"Error\",\n                                      JOptionPane.INFORMATION_MESSAGE);\n      }\n      return false;\n    }\n\n    return true;\n  }","id":59997,"modified_method":"private synchronized static boolean lockSystemFolders(String[] args) {\n    if (ourLock == null) {\n      ourLock = new SocketLock();\n    }\n\n    SocketLock.ActivateStatus activateStatus = ourLock.lock(PathManager.getConfigPath(false), true, args);\n    if (activateStatus == SocketLock.ActivateStatus.NO_INSTANCE) {\n      activateStatus = ourLock.lock(PathManager.getSystemPath(), false);\n    }\n\n    if (activateStatus != SocketLock.ActivateStatus.NO_INSTANCE) {\n      if (isHeadless() || activateStatus == SocketLock.ActivateStatus.CANNOT_ACTIVATE) {\n        showError(\"Error\", \"Only one instance of \" + ApplicationNamesInfo.getInstance().getFullProductName() + \" can be run at a time.\");\n      }\n      return false;\n    }\n\n    return true;\n  }","commit_id":"4e07e688651c2975b91eabc9a96d471785bf4f8d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void run(@NotNull final Task task) {\n    if (task.isHeadless()) {\n      new TaskRunnable(task, new EmptyProgressIndicator()).run();\n      return;\n    }\n\n    if (task.isModal()) {\n      runProcessWithProgressSynchronously(task.asModal(), null);\n    }\n    else {\n      final Task.Backgroundable backgroundable = task.asBackgroundable();\n      if (backgroundable.isConditionalModal() && !backgroundable.shouldStartInBackground()) {\n        runProcessWithProgressSynchronously(task, null);\n      }\n      else {\n        runProcessWithProgressAsynchronously(backgroundable);\n      }\n    }\n  }","id":59998,"modified_method":"@Override\n  public void run(@NotNull final Task task) {\n    if (task.isHeadless()) {\n      runProcessWithProgressSynchronously(task, null);\n    }\n    else if (task.isModal()) {\n      runProcessWithProgressSynchronously(task.asModal(), null);\n    }\n    else {\n      final Task.Backgroundable backgroundable = task.asBackgroundable();\n      if (backgroundable.isConditionalModal() && !backgroundable.shouldStartInBackground()) {\n        runProcessWithProgressSynchronously(task, null);\n      }\n      else {\n        runProcessWithProgressAsynchronously(backgroundable);\n      }\n    }\n  }","commit_id":"1c5c34ef020437fc51ce4a317fda0fa3b8f3e99e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void loadSingleConfig(final boolean defaultProject, final ComponentConfig config, final PluginDescriptor descriptor) {\n    if (defaultProject) {\n      if (config.skipForDefaultProject || !config.loadForDefaultProject)\n        return;\n    }\n    if (!myComponentManager.isComponentSuitable(config.options)) return;\n\n    myComponentManager.registerComponent(config, descriptor);\n  }","id":59999,"modified_method":"private void loadSingleConfig(final boolean defaultProject, final ComponentConfig config, final PluginDescriptor descriptor) {\n    if (defaultProject) {\n      if (config.skipForDefaultProject || !config.isLoadForDefaultProject())\n        return;\n    }\n    if (!myComponentManager.isComponentSuitable(config.options)) return;\n\n    myComponentManager.registerComponent(config, descriptor);\n  }","commit_id":"974d8097c9ef04eb65bbb46b6f41b6f517470239","url":"https://github.com/JetBrains/intellij-community"}]