[{"original_method":"public boolean isAllowedViewResults(Poll poll, String userId) {\n\t\tif (securityService.isSuperUser())\n\t\t\treturn true;\n\n\t\tif (poll.getDisplayResult().equals(\"open\"))\n\t\t\treturn true;\n\n\t\tif (poll.getOwner().equals(userId))\n\t\t\treturn true;\n\n\t\tif (poll.getDisplayResult().equals(\"afterVoting\")) {\n\t\t\t\n\t\t\tSearch search = new Search();\n\t        search.addRestriction(new Restriction(\"pollId\", poll.getPollId()));\n\t        search.addRestriction(new Restriction(\"userId\", userId));\n\t        \n\t        List<Vote> votes = dao.findBySearch(Vote.class, search);\t\t\n\t        //System.out.println(\"got \" + pollCollection.size() + \"votes for this poll\");\n\t        if (votes.size() > 0)\n\t        \treturn true;\n\t\t}\n\n\t\tif ((poll.getDisplayResult().equals(\"afterClosing\") || poll.getDisplayResult().equals(\"afterVoting\") )&& poll.getVoteClose().before(new Date()))\n\t\t\treturn true;\n\n\t\t//the owner can view the results\n\t\tif(poll.getOwner().equals(userId))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}","id":94000,"modified_method":"public boolean isAllowedViewResults(Poll poll, String userId) {\n\t\tif (externalLogic.isUserAdmin())\n\t\t\treturn true;\n\n\t\tif (poll.getDisplayResult().equals(\"open\"))\n\t\t\treturn true;\n\n\t\tif (poll.getOwner().equals(userId))\n\t\t\treturn true;\n\n\t\tif (poll.getDisplayResult().equals(\"afterVoting\")) {\n\t\t\t\n\t\t\tSearch search = new Search();\n\t        search.addRestriction(new Restriction(\"pollId\", poll.getPollId()));\n\t        search.addRestriction(new Restriction(\"userId\", userId));\n\t        \n\t        List<Vote> votes = dao.findBySearch(Vote.class, search);\t\t\n\t        //System.out.println(\"got \" + pollCollection.size() + \"votes for this poll\");\n\t        if (votes.size() > 0)\n\t        \treturn true;\n\t\t}\n\n\t\tif ((poll.getDisplayResult().equals(\"afterClosing\") || poll.getDisplayResult().equals(\"afterVoting\") )&& poll.getVoteClose().before(new Date()))\n\t\t\treturn true;\n\n\t\t//the owner can view the results\n\t\tif(poll.getOwner().equals(userId))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}","commit_id":"9a502b93319ae0b6be2f81bc963bd3bda7e3a4f7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private boolean isSiteOwner() {\n        if (securityService.isSuperUser())\n            return true;\n        else if (securityService.unlock(\"site.upd\", \"/site/\"\n                + toolManager.getCurrentPlacement().getContext()))\n            return true;\n        else\n            return false;\n    }","id":94001,"modified_method":"private boolean isSiteOwner() {\n        if (externalLogic.isUserAdmin())\n            return true;\n        else if (externalLogic.isAllowedInLocation(\"site.upd\", externalLogic.getCurrentLocationReference()))\n        \treturn true;\n        else\n        \treturn false;\n    }","commit_id":"9a502b93319ae0b6be2f81bc963bd3bda7e3a4f7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void onSetUpInTransaction() {\n\t\tPollDao dao = (PollDao) applicationContext.getBean(\"org.sakaiproject.poll.dao.impl.PollDaoTarget\");\n\t\tif (dao == null) {\n\t\t\tlog.error(\"onSetUpInTransaction: DAO could not be retrieved from spring context\");\n\t\t\t\n\t\t}\n\t\t\n\t\tpollListManager = new PollListManagerImpl();\n\t\tpollListManager.setDao(dao);\n\t\tpollListManager.setEventTrackingService(new EventTrackingServiceStub());\n\t\t\n\t\t\n\t\t// preload testData\n\t\ttdp.preloadTestData(dao);\n\t}","id":94002,"modified_method":"protected void onSetUpInTransaction() {\n\t\tPollDao dao = (PollDao) applicationContext.getBean(\"org.sakaiproject.poll.dao.impl.PollDaoTarget\");\n\t\tif (dao == null) {\n\t\t\tlog.error(\"onSetUpInTransaction: DAO could not be retrieved from spring context\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpollListManager = new PollListManagerImpl();\n\t\tpollListManager.setDao(dao);\n\t\tpollListManager.setExternalLogic(new ExternalLogicStubb());\n\t\t\n\t\t// preload testData\n\t\ttdp.preloadTestData(dao);\n\t}","commit_id":"9a502b93319ae0b6be2f81bc963bd3bda7e3a4f7","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t      ComponentChecker checker) {\n\t\t  \n\t\t\n\t    User currentuser = userDirectoryService.getCurrentUser();\n\t    String currentuserid = currentuser.getId();\n\t\t   \n\t    PollViewParameters ecvp = (PollViewParameters) viewparams;\n\t    Poll poll = null;\n\t    boolean isNew = true;\n\t    \n\t    UIForm newPoll = UIForm.make(tofill, \"add-poll-form\");\n\t    \n\t    m_log.debug(\"Poll of id: \" + ecvp.id);\n\t    if (ecvp.id == null || \"New 0\".equals(ecvp.id)) {\n\t\t\tUIMessage.make(tofill,\"new_poll_title\",\"new_poll_title\");\n\t\t\t//build an empty poll \n\t\t\tm_log.debug(\"this is a new poll\");\n\t\t\tpoll = new Poll();\n\t    } else { \n\t    \tUIMessage.make(tofill,\"new_poll_title\",\"new_poll_title_edit\");  \n\t\t\t\n\t\t\tString strId = ecvp.id;\n\t\t\tm_log.debug(\"got id of \" + strId);\n\t\t\tpoll = pollListManager.getPollById(Long.valueOf(strId));\n\t\t\tvoteBean.setPoll(poll);\n\t\t\tnewPoll.parameters.add(new UIELBinding(\"#{poll.pollId}\",\n\t\t\t           poll.getPollId()));\n\n\t\t\tisNew = false;\n\t\t}\n\t    \n\t    \n\t    //only display for exisiting polls\n\t    if (!isNew) {\n\t\t\t//fill the options list\n\t    \tUIBranchContainer actionBlock = UIBranchContainer.make(newPoll, \"option-headers:\");\n\t    \tUIMessage.make(actionBlock,\"options-title\",\"new_poll_option_title\");\n\t\t\tUIInternalLink.make(actionBlock,\"option-add\",UIMessage.make(\"new_poll_option_add\"),\n\t\t\t\t\tnew OptionViewParameters(PollOptionProducer.VIEW_ID, null, poll.getPollId().toString()));\n\n\t\t\tList votes = pollVoteManager.getAllVotesForPoll(poll);\n\t\t\tif (votes != null && votes.size() > 0 ) {\n\t\t\t\tm_log.debug(\"Poll has \" + votes.size() + \" votes\");\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", \"0\");\n\t\t\t\tUIMessage.make(errorRow,\"error\", \"warn_poll_has_votes\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tList options = poll.getPollOptions();\n\t\t\tfor (int i = 0; i < options.size(); i++){\n\t\t\t\tOption o = (Option)options.get(i);\n\t\t\t\tUIBranchContainer oRow = UIBranchContainer.make(actionBlock,\"options-row:\",o.getOptionId().toString());\n\t\t\t\tUIVerbatim.make(oRow,\"options-name\",o.getOptionText());\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUIInternalLink editOption = UIInternalLink.make(oRow,\"option-edit\",UIMessage.make(\"new_poll_option_edit\"),\n\t\t\t\t\t\t\tnew OptionViewParameters(PollOptionProducer.VIEW_ID, o.getOptionId().toString()));\n\t\n\t\t\t\t\teditOption.decorators = new DecoratorList(new UITooltipDecorator(messageLocator.getMessage(\"new_poll_option_edit\") +\":\" + FormattedText.convertFormattedTextToPlaintext(o.getOptionText())));\n\t\t\t\t\t\n\t\t\t\t\tUIInternalLink deleteOption = UIInternalLink.make(oRow,\"option-delete\",UIMessage.make(\"new_poll_option_delete\"),\n\t\t\t\t\t\t\tnew OptionViewParameters(PollOptionDeleteProducer.VIEW_ID,o.getOptionId().toString()));\n\n\t\t\t\t\tdeleteOption.decorators = new DecoratorList(new UITooltipDecorator(messageLocator.getMessage(\"new_poll_option_delete\") +\":\" + FormattedText.convertFormattedTextToPlaintext(o.getOptionText())));\n\t\t\t\t\n\t\t\t}\n\t    }\n\t    \n\t      UIMessage.make(tofill, \"new-poll-descr\", \"new_poll_title\");\n\t      UIMessage pollText = UIMessage.make(tofill, \"new-poll-question-label\", \"new_poll_question_label\");\n\t      UIMessage pollDescr = UIMessage.make(tofill, \"new-poll-descr-label\", \"new_poll_descr_label\"); \n\t      UIMessage.make(tofill, \"new-poll-descr-label2\", \"new_poll_descr_label2\");\n\t     \n\t      UIMessage.make(tofill, \"new-poll-open-label\", \"new_poll_open_label\");\n\t      UIMessage.make(tofill, \"new-poll-close-label\", \"new_poll_close_label\");\n\t      \n\t      UIMessage.make(tofill, \"new-poll-limits\", \"new_poll_limits\");\n\t      UIMessage pollMin = UIMessage.make(tofill, \"new-poll-min-limits\", \"new_poll_min_limits\");\n\t      UIMessage pollMax =  UIMessage.make(tofill, \"new-poll-max-limits\", \"new_poll_max_limits\");\n\t\t  \n\t\t  \n\t\t  //the form fields\n\t\t  \n\t\t  UIInput pollTextIn = UIInput.make(newPoll, \"new-poll-text\", \"#{poll.text}\",poll.getText());\n\t\t  UILabelTargetDecorator.targetLabel(pollText, pollTextIn);\n\t\t \n\t\t  UIInput itemDescr = UIInput.make(newPoll, \"newpolldescr:\", \"#{poll.details}\", poll.getDetails()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t  //itemDescr.decorators = new DecoratorList(new UITextDimensionsDecorator(4, 4));\n\t\t  richTextEvolver.evolveTextInput(itemDescr);\n\t\t  UILabelTargetDecorator.targetLabel(pollDescr, itemDescr);\n\t\t  \n\t\t  UIInput voteOpen = UIInput.make(newPoll, \"openDate:\", \"poll.voteOpen\");\n\t\t  UIInput voteClose = UIInput.make(newPoll, \"closeDate:\", \"poll.voteClose\");\n\t\t  dateevolver.setStyle(FormatAwareDateInputEvolver.DATE_TIME_INPUT);\n\t\t  dateevolver.evolveDateInput(voteOpen, poll.getVoteOpen());\n\t\t  dateevolver.evolveDateInput(voteClose, poll.getVoteClose());\n\t\t  //UILabelTargetDecorator.targetLabel(pollOpen, voteOpen);\n\t\t  //UILabelTargetDecorator.targetLabel(pollClose, voteClose);\n\t\t  \n\t\t  \n\t\t  String[] minVotes = new String[]{\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"};\n\t\t  String[] maxVotes = new String[]{\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"};\n\t\t  UISelect min = UISelect.make(newPoll,\"min-votes\",minVotes,\"#{poll.minOptions}\",Integer.toString(poll.getMinOptions()));\n\t\t  UISelect max = UISelect.make(newPoll,\"max-votes\",maxVotes,\"#{poll.maxOptions}\",Integer.toString(poll.getMaxOptions()));\n\t\t  UILabelTargetDecorator.targetLabel(pollMin, min);\n\t\t  UILabelTargetDecorator.targetLabel(pollMax, max);\n\t\t  \n\t\t  \n\t\t  /*\n\t\t\t * \topen - can be viewd at any time\n\t\t\t * \tnever - not diplayed\n\t\t\t * \tafterVoting - after user has voted\n\t\t\t * \tafterClosing\n\t\t\t * \n\t\t\t */\n\t\t  \n\t\t  \n\t\t  \n\t\t \n\t\t  \n\t\t    String[] values = new String[] { \"open\", \"afterVoting\", \"afterClosing\",\"never\"};\n\t\t    String[] labels = new String[] {\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_open\"), \n\t\t    \t\tmessageLocator.getMessage(\"new_poll_aftervoting\"),\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_afterClosing\"),\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_never\")\n\t\t    \t\t};\n\t\t    \n\t\t    \n\n\t\t    UISelect radioselect = UISelect.make(newPoll, \"release-select\", values,\n\t\t        \"#{poll.displayResult}\", poll.getDisplayResult());\n\t\t    \n\t\t    radioselect.optionnames = UIOutputMany.make(labels);\n\t\t    \n\t\t    \n\t\t    String selectID = radioselect.getFullID();\n\t\t    //StringList optList = new StringList();\n\t\t    UIMessage.make(newPoll,\"add_results_label\",\"new_poll_results_label\");\n\t\t    for (int i = 0; i < values.length; ++i) {\n\t\t    \t\n\t\t      UIBranchContainer radiobranch = UIBranchContainer.make(newPoll,\n\t\t          \"releaserow:\", Integer.toString(i));\n\t\t      UISelectChoice choice = UISelectChoice.make(radiobranch, \"release\", selectID, i);\n\t\t      UISelectLabel lb = UISelectLabel.make(radiobranch, \"releaseLabel\", selectID, i);\n\t\t      UILabelTargetDecorator.targetLabel(lb, choice);\n\t\t    }\n\t\t    \n\t\t    \n\t\t    \n\t\t    m_log.debug(\"About to close the form\");\n\t\t    newPoll.parameters.add(new UIELBinding(\"#{poll.owner}\",\n\t\t    \t\tcurrentuserid));\n\t\t    String siteId = toolManager.getCurrentPlacement().getContext();\n\t\t    newPoll.parameters.add(new UIELBinding(\"#{poll.siteId}\",siteId));\n\t\t  \n\t\t    if (isNew || poll.getPollOptions() == null || poll.getPollOptions().size() == 0)\t {\n\t\t    \tUICommand.make(newPoll, \"submit-new-poll\", UIMessage.make(\"new_poll_saveoption\"),\n\t\t    \t\"#{pollToolBean.processActionAdd}\");\n\t\t    } else {\n\t\t    \tUICommand.make(newPoll, \"submit-new-poll\", UIMessage.make(\"new_poll_submit\"),\n\t\t    \t\"#{pollToolBean.processActionAdd}\");\t\t  \n\t\t    }\n\t\t  \n\t\t    UICommand cancel = UICommand.make(newPoll, \"cancel\",UIMessage.make(\"new_poll_cancel\"),\"#{pollToolBean.cancel}\");\n\t\t    cancel.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"cancel\"));\n\t\t    m_log.debug(\"Finished generating view\");\n\t  }","id":94003,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t      ComponentChecker checker) {\n\t\t  \n\t\t\n\t    \n\t    String currentuserid = externalLogic.getCurrentUserId();\n\t\t   \n\t    PollViewParameters ecvp = (PollViewParameters) viewparams;\n\t    Poll poll = null;\n\t    boolean isNew = true;\n\t    \n\t    UIForm newPoll = UIForm.make(tofill, \"add-poll-form\");\n\t    \n\t    m_log.debug(\"Poll of id: \" + ecvp.id);\n\t    if (ecvp.id == null || \"New 0\".equals(ecvp.id)) {\n\t\t\tUIMessage.make(tofill,\"new_poll_title\",\"new_poll_title\");\n\t\t\t//build an empty poll \n\t\t\tm_log.debug(\"this is a new poll\");\n\t\t\tpoll = new Poll();\n\t    } else { \n\t    \tUIMessage.make(tofill,\"new_poll_title\",\"new_poll_title_edit\");  \n\t\t\t\n\t\t\tString strId = ecvp.id;\n\t\t\tm_log.debug(\"got id of \" + strId);\n\t\t\tpoll = pollListManager.getPollById(Long.valueOf(strId));\n\t\t\tvoteBean.setPoll(poll);\n\t\t\tnewPoll.parameters.add(new UIELBinding(\"#{poll.pollId}\",\n\t\t\t           poll.getPollId()));\n\n\t\t\tisNew = false;\n\t\t}\n\t    \n\t    \n\t    //only display for exisiting polls\n\t    if (!isNew) {\n\t\t\t//fill the options list\n\t    \tUIBranchContainer actionBlock = UIBranchContainer.make(newPoll, \"option-headers:\");\n\t    \tUIMessage.make(actionBlock,\"options-title\",\"new_poll_option_title\");\n\t\t\tUIInternalLink.make(actionBlock,\"option-add\",UIMessage.make(\"new_poll_option_add\"),\n\t\t\t\t\tnew OptionViewParameters(PollOptionProducer.VIEW_ID, null, poll.getPollId().toString()));\n\n\t\t\tList<Vote> votes = pollVoteManager.getAllVotesForPoll(poll);\n\t\t\tif (votes != null && votes.size() > 0 ) {\n\t\t\t\tm_log.debug(\"Poll has \" + votes.size() + \" votes\");\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\", \"0\");\n\t\t\t\tUIMessage.make(errorRow,\"error\", \"warn_poll_has_votes\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tList<Option> options = poll.getPollOptions();\n\t\t\tfor (int i = 0; i < options.size(); i++){\n\t\t\t\tOption o = (Option)options.get(i);\n\t\t\t\tUIBranchContainer oRow = UIBranchContainer.make(actionBlock,\"options-row:\",o.getOptionId().toString());\n\t\t\t\tUIVerbatim.make(oRow,\"options-name\",o.getOptionText());\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUIInternalLink editOption = UIInternalLink.make(oRow,\"option-edit\",UIMessage.make(\"new_poll_option_edit\"),\n\t\t\t\t\t\t\tnew OptionViewParameters(PollOptionProducer.VIEW_ID, o.getOptionId().toString()));\n\t\n\t\t\t\t\teditOption.decorators = new DecoratorList(new UITooltipDecorator(messageLocator.getMessage(\"new_poll_option_edit\") +\":\" + FormattedText.convertFormattedTextToPlaintext(o.getOptionText())));\n\t\t\t\t\t\n\t\t\t\t\tUIInternalLink deleteOption = UIInternalLink.make(oRow,\"option-delete\",UIMessage.make(\"new_poll_option_delete\"),\n\t\t\t\t\t\t\tnew OptionViewParameters(PollOptionDeleteProducer.VIEW_ID,o.getOptionId().toString()));\n\n\t\t\t\t\tdeleteOption.decorators = new DecoratorList(new UITooltipDecorator(messageLocator.getMessage(\"new_poll_option_delete\") +\":\" + FormattedText.convertFormattedTextToPlaintext(o.getOptionText())));\n\t\t\t\t\n\t\t\t}\n\t    }\n\t    \n\t      UIMessage.make(tofill, \"new-poll-descr\", \"new_poll_title\");\n\t      UIMessage pollText = UIMessage.make(tofill, \"new-poll-question-label\", \"new_poll_question_label\");\n\t      UIMessage pollDescr = UIMessage.make(tofill, \"new-poll-descr-label\", \"new_poll_descr_label\"); \n\t      UIMessage.make(tofill, \"new-poll-descr-label2\", \"new_poll_descr_label2\");\n\t     \n\t      UIMessage.make(tofill, \"new-poll-open-label\", \"new_poll_open_label\");\n\t      UIMessage.make(tofill, \"new-poll-close-label\", \"new_poll_close_label\");\n\t      \n\t      UIMessage.make(tofill, \"new-poll-limits\", \"new_poll_limits\");\n\t      UIMessage pollMin = UIMessage.make(tofill, \"new-poll-min-limits\", \"new_poll_min_limits\");\n\t      UIMessage pollMax =  UIMessage.make(tofill, \"new-poll-max-limits\", \"new_poll_max_limits\");\n\t\t  \n\t\t  \n\t\t  //the form fields\n\t\t  \n\t\t  UIInput pollTextIn = UIInput.make(newPoll, \"new-poll-text\", \"#{poll.text}\",poll.getText());\n\t\t  UILabelTargetDecorator.targetLabel(pollText, pollTextIn);\n\t\t \n\t\t  UIInput itemDescr = UIInput.make(newPoll, \"newpolldescr:\", \"#{poll.details}\", poll.getDetails()); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t  //itemDescr.decorators = new DecoratorList(new UITextDimensionsDecorator(4, 4));\n\t\t  richTextEvolver.evolveTextInput(itemDescr);\n\t\t  UILabelTargetDecorator.targetLabel(pollDescr, itemDescr);\n\t\t  \n\t\t  UIInput voteOpen = UIInput.make(newPoll, \"openDate:\", \"poll.voteOpen\");\n\t\t  UIInput voteClose = UIInput.make(newPoll, \"closeDate:\", \"poll.voteClose\");\n\t\t  dateevolver.setStyle(FormatAwareDateInputEvolver.DATE_TIME_INPUT);\n\t\t  dateevolver.evolveDateInput(voteOpen, poll.getVoteOpen());\n\t\t  dateevolver.evolveDateInput(voteClose, poll.getVoteClose());\n\t\t  //UILabelTargetDecorator.targetLabel(pollOpen, voteOpen);\n\t\t  //UILabelTargetDecorator.targetLabel(pollClose, voteClose);\n\t\t  \n\t\t  \n\t\t  String[] minVotes = new String[]{\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"};\n\t\t  String[] maxVotes = new String[]{\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"};\n\t\t  UISelect min = UISelect.make(newPoll,\"min-votes\",minVotes,\"#{poll.minOptions}\",Integer.toString(poll.getMinOptions()));\n\t\t  UISelect max = UISelect.make(newPoll,\"max-votes\",maxVotes,\"#{poll.maxOptions}\",Integer.toString(poll.getMaxOptions()));\n\t\t  UILabelTargetDecorator.targetLabel(pollMin, min);\n\t\t  UILabelTargetDecorator.targetLabel(pollMax, max);\n\t\t  \n\t\t  \n\t\t  /*\n\t\t\t * \topen - can be viewd at any time\n\t\t\t * \tnever - not diplayed\n\t\t\t * \tafterVoting - after user has voted\n\t\t\t * \tafterClosing\n\t\t\t * \n\t\t\t */\n\t\t  \n\t\t  \n\t\t  \n\t\t \n\t\t  \n\t\t    String[] values = new String[] { \"open\", \"afterVoting\", \"afterClosing\",\"never\"};\n\t\t    String[] labels = new String[] {\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_open\"), \n\t\t    \t\tmessageLocator.getMessage(\"new_poll_aftervoting\"),\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_afterClosing\"),\n\t\t    \t\tmessageLocator.getMessage(\"new_poll_never\")\n\t\t    \t\t};\n\t\t    \n\t\t    \n\n\t\t    UISelect radioselect = UISelect.make(newPoll, \"release-select\", values,\n\t\t        \"#{poll.displayResult}\", poll.getDisplayResult());\n\t\t    \n\t\t    radioselect.optionnames = UIOutputMany.make(labels);\n\t\t    \n\t\t    \n\t\t    String selectID = radioselect.getFullID();\n\t\t    //StringList optList = new StringList();\n\t\t    UIMessage.make(newPoll,\"add_results_label\",\"new_poll_results_label\");\n\t\t    for (int i = 0; i < values.length; ++i) {\n\t\t    \t\n\t\t      UIBranchContainer radiobranch = UIBranchContainer.make(newPoll,\n\t\t          \"releaserow:\", Integer.toString(i));\n\t\t      UISelectChoice choice = UISelectChoice.make(radiobranch, \"release\", selectID, i);\n\t\t      UISelectLabel lb = UISelectLabel.make(radiobranch, \"releaseLabel\", selectID, i);\n\t\t      UILabelTargetDecorator.targetLabel(lb, choice);\n\t\t    }\n\t\t    \n\t\t    \n\t\t    \n\t\t    m_log.debug(\"About to close the form\");\n\t\t    newPoll.parameters.add(new UIELBinding(\"#{poll.owner}\",\n\t\t    \t\tcurrentuserid));\n\t\t    String siteId = externalLogic.getCurrentLocationId();\n\t\t    newPoll.parameters.add(new UIELBinding(\"#{poll.siteId}\",siteId));\n\t\t  \n\t\t    if (isNew || poll.getPollOptions() == null || poll.getPollOptions().size() == 0)\t {\n\t\t    \tUICommand.make(newPoll, \"submit-new-poll\", UIMessage.make(\"new_poll_saveoption\"),\n\t\t    \t\"#{pollToolBean.processActionAdd}\");\n\t\t    } else {\n\t\t    \tUICommand.make(newPoll, \"submit-new-poll\", UIMessage.make(\"new_poll_submit\"),\n\t\t    \t\"#{pollToolBean.processActionAdd}\");\t\t  \n\t\t    }\n\t\t  \n\t\t    UICommand cancel = UICommand.make(newPoll, \"cancel\",UIMessage.make(\"new_poll_cancel\"),\"#{pollToolBean.cancel}\");\n\t\t    cancel.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"cancel\"));\n\t\t    m_log.debug(\"Finished generating view\");\n\t  }","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List reportNavigationCases() {\n\t\t    List togo = new ArrayList(); // Always navigate back to this view.\n\t\t    togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"added\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"option\", new OptionViewParameters(PollOptionProducer.VIEW_ID, null, null)));\n\t\t    togo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    return togo;\n\t\t  }","id":94004,"modified_method":"public List<NavigationCase> reportNavigationCases() {\n\t\t    List<NavigationCase> togo = new ArrayList<NavigationCase>(); // Always navigate back to this view.\n\t\t    togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"added\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"option\", new OptionViewParameters(PollOptionProducer.VIEW_ID, null, null)));\n\t\t    togo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    return togo;\n\t\t  }","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void setRoleperms(Map perms)\n\t\t{\n\t\t\tthis.perms = perms;\n\t\t}","id":94005,"modified_method":"public void setRoleperms(Map<String, String> perms)\n\t\t{\n\t\t\tthis.perms = perms;\n\t\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List reportNavigationCases() {\n\t\t    List togo = new ArrayList(); // Always navigate back to this view.\n\t\t    togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"Success\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    return togo;\n\t\t  }","id":94006,"modified_method":"public List<NavigationCase> reportNavigationCases() {\n\t\t    List<NavigationCase> togo = new ArrayList<NavigationCase>(); // Always navigate back to this view.\n\t\t    togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"Success\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    togo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\t    return togo;\n\t\t  }","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void interceptActionResult(ARIResult result,\n\t\t\t  ViewParameters incoming, Object actionReturn) {\n\t\t  m_log.debug(\"intercepting action results!\");\n\t\t  Poll poll = null;\n\n\t\t  if (actionReturn != null && actionReturn instanceof Poll) {\n\t\t\t  poll = (Poll) actionReturn;\n\t\t\t  m_log.debug(\"return is poll: \" + poll.getPollId());\n\t\t\t  result.resultingView = new PollViewParameters(AddPollProducer.VIEW_ID,poll.getPollId().toString());\n\t\t  }\n\t\t  \n\t\t  if (result.resultingView instanceof OptionViewParameters) {\n\t\t\t\tOptionViewParameters optvp = (OptionViewParameters) result.resultingView;\n\t\t\t\t\n\t\t\t\tString retVal = (String) actionReturn;\n\t\t\t\t\n\t\t\t\tString viewId = AddPollProducer.VIEW_ID;\n\t\t\t\t\n\t\t\t\tif (optvp.pollId != null) {\n\t\t\t\t\t\n\t\t\t\t\tif (! \"option\".equals(retVal)) {\n\t\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, optvp.pollId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tm_log.debug(\"New option for poll: \" + optvp.pollId);\n\t\t\t\t\t\tresult.resultingView = new OptionViewParameters(this.VIEW_ID, optvp.id , optvp.pollId);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tOption option = pollListManager.getOptionById(Long.valueOf(optvp.id));\n\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, option.getPollId().toString());\n\t\t\t\t}\n\t\t\t}\n\n\t  }","id":94007,"modified_method":"public void interceptActionResult(ARIResult result,\n\t\t\t  ViewParameters incoming, Object actionReturn) {\n\t\t  m_log.debug(\"intercepting action results!\");\n\t\t  Poll poll = null;\n\n\t\t  if (actionReturn != null && actionReturn instanceof Poll) {\n\t\t\t  poll = (Poll) actionReturn;\n\t\t\t  m_log.debug(\"return is poll: \" + poll.getPollId());\n\t\t\t  result.resultingView = new PollViewParameters(AddPollProducer.VIEW_ID,poll.getPollId().toString());\n\t\t  }\n\t\t  \n\t\t  if (result.resultingView instanceof OptionViewParameters) {\n\t\t\t\tOptionViewParameters optvp = (OptionViewParameters) result.resultingView;\n\t\t\t\t\n\t\t\t\tString retVal = (String) actionReturn;\n\t\t\t\t\n\t\t\t\tString viewId = AddPollProducer.VIEW_ID;\n\t\t\t\t\n\t\t\t\tif (optvp.pollId != null) {\n\t\t\t\t\t\n\t\t\t\t\tif (! \"option\".equals(retVal)) {\n\t\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, optvp.pollId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tm_log.debug(\"New option for poll: \" + optvp.pollId);\n\t\t\t\t\t\tresult.resultingView = new OptionViewParameters(VIEW_ID, optvp.id , optvp.pollId);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tOption option = pollListManager.getOptionById(Long.valueOf(optvp.id));\n\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, option.getPollId().toString());\n\t\t\t\t}\n\t\t\t}\n\n\t  }","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void interceptActionResult(ARIResult result, ViewParameters incoming, Object actionReturn) {\n\t\tm_log.debug(\"checking IntercetpActionResult(\");\n\n\t\tif (result.resultingView instanceof OptionViewParameters) {\n\t\t\tOptionViewParameters optvp = (OptionViewParameters) result.resultingView;\n\t\t\tm_log.debug(\"OptionViewParams: \"  + optvp.id + \" : \" + optvp.pollId);\n\t\t\tString retVal = (String) actionReturn;\n\t\t\tm_log.debug(\"retval is \" + retVal);\n\t\t\tString viewId = AddPollProducer.VIEW_ID;\n\t\t\tif (optvp.pollId != null) {\n\t\t\t\tif (! \"option\".equals(retVal)) {\n\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, optvp.pollId);\n\t\t\t\t} else {\n\t\t\t\t\tm_log.debug(\"New option for poll: \" + optvp.pollId);\n\t\t\t\t\tresult.resultingView = new OptionViewParameters(this.VIEW_ID, optvp.id , optvp.pollId);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tOption option = pollListManager.getOptionById(Long.valueOf(optvp.id));\n\t\t\t\tresult.resultingView = new PollViewParameters(viewId, option.getPollId().toString());\n\t\t\t}\n\t\t}\n\t}","id":94008,"modified_method":"public void interceptActionResult(ARIResult result, ViewParameters incoming, Object actionReturn) {\n\t\tm_log.debug(\"checking IntercetpActionResult(\");\n\n\t\tif (result.resultingView instanceof OptionViewParameters) {\n\t\t\tOptionViewParameters optvp = (OptionViewParameters) result.resultingView;\n\t\t\tm_log.debug(\"OptionViewParams: \"  + optvp.id + \" : \" + optvp.pollId);\n\t\t\tString retVal = (String) actionReturn;\n\t\t\tm_log.debug(\"retval is \" + retVal);\n\t\t\tString viewId = AddPollProducer.VIEW_ID;\n\t\t\tif (optvp.pollId != null) {\n\t\t\t\tif (! \"option\".equals(retVal)) {\n\t\t\t\t\tresult.resultingView = new PollViewParameters(viewId, optvp.pollId);\n\t\t\t\t} else {\n\t\t\t\t\tm_log.debug(\"New option for poll: \" + optvp.pollId);\n\t\t\t\t\tresult.resultingView = new OptionViewParameters(VIEW_ID, optvp.id , optvp.pollId);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tOption option = pollListManager.getOptionById(Long.valueOf(optvp.id));\n\t\t\t\tresult.resultingView = new PollViewParameters(viewId, option.getPollId().toString());\n\t\t\t}\n\t\t}\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List reportNavigationCases() {\n\t\tList togo = new ArrayList();\n\t\ttogo.add(new NavigationCase(\"save\", new PollViewParameters(AddPollProducer.VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", null));\n\t\treturn togo;\n\t}","id":94009,"modified_method":"public List<NavigationCase> reportNavigationCases() {\n\t\tList<NavigationCase> togo = new ArrayList<NavigationCase>();\n\t\ttogo.add(new NavigationCase(\"save\", new PollViewParameters(AddPollProducer.VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", null));\n\t\treturn togo;\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List reportNavigationCases() {\n\t\tList togo = new ArrayList(); // Always navigate back to this view.\n\t\t//togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"Error\", new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"Success\", new VoteCollectionViewParameters(ConfirmProducer.VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\treturn togo;\n\t}","id":94010,"modified_method":"public List<NavigationCase> reportNavigationCases() {\n\t\tList<NavigationCase> togo = new ArrayList<NavigationCase>(); // Always navigate back to this view.\n\t\t//togo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"Error\", new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"Success\", new VoteCollectionViewParameters(ConfirmProducer.VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\treturn togo;\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams, ComponentChecker checker) {\n\n\n\n\t\tif (tml.size() > 0) {\n\t\t\tfor (int i = 0; i < tml.size(); i ++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\");\n\t\t\t\tString output;\n\t\t\t\tif (tml.messageAt(i).args != null ) {\t    \t\t\n\t\t\t\t\toutput = messageLocator.getMessage(tml.messageAt(i).acquireMessageCode(),tml.messageAt(i).args[0]);\n\t\t\t\t} else {\n\t\t\t\t\toutput = messageLocator.getMessage(tml.messageAt(i).acquireMessageCode());\n\t\t\t\t}\n\t\t\t\tUIOutput.make(errorRow,\"error\", output);\n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\t\tUIOutput.make(tofill, \"poll-vote-title\", messageLocator.getMessage(\"poll_vote_title\"));\n\n\n\n\n\t\ttry {\n\n\t\t\tPollViewParameters ecvp = (PollViewParameters) viewparams;\n\n\n\t\t\tString strId = ecvp.id;\n\t\t\tm_log.debug(\"got id of \" + strId);\n\t\t\tPoll poll = pollListManager.getPollById(Long.valueOf(strId));\n\n\t\t\tm_log.debug(\"got poll \" + poll.getText());\n\n\n\t\t\t//check if they can vote\n\t\t\tif (poll.getLimitVoting() && pollVoteManager.userHasVoted(poll.getPollId())) {\n\t\t\t\tm_log.warn(\"This user has already voted!\");\n\t\t\t\tUIOutput.make(tofill, \"hasErrors\",messageLocator.getMessage(\"vote_hasvoted\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tUIOutput.make(tofill,\"poll-text\",poll.getText());\n\t\t\tif (poll.getDetails() != null)\n\t\t\t{\n\t\t\t\tUIVerbatim.make(tofill,\"poll-description\",poll.getDetails());\n\t\t\t}\n\n\t\t\tm_log.debug(\"this poll has \" + poll.getPollOptions().size()+ \" options\");\n\n\t\t\tUIForm voteForm = UIForm.make(tofill,\"options-form\",\"\"); \n\n\t\t\tList pollOptions = poll.getPollOptions();\n\t\t\t//build the options + label lists\n\t\t\tString[] values= new String[pollOptions.size()];\n\t\t\tfor (int i = 0;i <pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tvalues[i]= po.getOptionId().toString();\n\t\t\t}\n\n\n\t\t\tString[] labels = new String[pollOptions.size()];\n\t\t\tfor (int i = 0;i<  pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tif (po.getOptionText() != null ) {\n\t\t\t\t\tlabels[i]= po.getOptionText();\n\t\t\t\t} else {\n\t\t\t\t\tm_log.warn(\"Option text is null!\");\n\t\t\t\t\tlabels[i]=\"null option!\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//we need to deside is this a single or multiple?\n\t\t\t//poll.getMaxOptions()\n\t\t\tboolean isMultiple = false;\n\t\t\tif (poll.getMaxOptions()>1)\n\t\t\t\tisMultiple = true;\n\n\n\t\t\tUISelect radio;\n\t\t\tif (isMultiple)\n\t\t\t\tradio = UISelect.makeMultiple(voteForm,\"optionform\",values,\"#{voteCollection.optionsSelected}\",new String[]{});\n\t\t\telse\n\t\t\t\tradio = UISelect.make(voteForm,\"optionform\",values,\"#{voteCollection.option}\",\"\");\n\n\t\t\tradio.optionnames = UIOutputMany.make(labels);\n\t\t\tString selectID = radio.getFullID();\n\t\t\tfor (int i = 0;i < pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tm_log.debug(\"got option \" + po.getOptionText() + \" with id of  \" + po.getId());\n\t\t\t\tUIBranchContainer radioRow = UIBranchContainer.make(voteForm,\n\t\t\t\t\t\tisMultiple ? \"option:select\"\n\t\t\t\t\t\t\t\t: \"option:radio\"\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t,Integer.toString(i));\n\t\t\t\tUISelectChoice.make(radioRow,\"option-radio\",selectID,i);\n\t\t\t\t//UISelectLabel.make(radioRow,\"option-label\",selectID,i);\n\t\t\t\tUIVerbatim.make(radioRow,\"option-label\",labels[i]);\n\t\t\t}\n\t\t\t//bind some parameters\n\t\t\tvoteForm.parameters.add(new UIELBinding(\"#{voteCollection.pollId}\", poll.getPollId()));\n\n\t\t\tUICommand sub = UICommand.make(voteForm, \"submit-new-vote\",messageLocator.getMessage(\"vote_vote\"),\n\t\t\t\"#{pollToolBean.processActionVote}\");\n\t\t\tsub.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"sub\"));\n\t\t\tUICommand cancel = UICommand.make(voteForm, \"cancel\",messageLocator.getMessage(\"vote_cancel\"),\"#{pollToolBean.cancel}\");\n\t\t\tcancel.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"cancel\"));\n\n\t\t\t//o9nly show reset in !(min=max=1)\n\t\t\tif(!(poll.getMaxOptions()==1 && poll.getMinOptions()==1))\n\t\t\t\tUIOutput.make(voteForm, \"reset\", messageLocator.getMessage(\"vote_reset\"));\n\n\t\t} \n\t\tcatch (Exception e)\n\t\t{\n\t\t\tm_log.error(\"Error: \" + e);\n\t\t\te.printStackTrace();\n\t\t}\n\t}","id":94011,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams, ComponentChecker checker) {\n\n\n\n\t\tif (tml.size() > 0) {\n\t\t\tfor (int i = 0; i < tml.size(); i ++ ) {\n\t\t\t\tUIBranchContainer errorRow = UIBranchContainer.make(tofill,\"error-row:\");\n\t\t\t\tString output;\n\t\t\t\tif (tml.messageAt(i).args != null ) {\t    \t\t\n\t\t\t\t\toutput = messageLocator.getMessage(tml.messageAt(i).acquireMessageCode(),tml.messageAt(i).args[0]);\n\t\t\t\t} else {\n\t\t\t\t\toutput = messageLocator.getMessage(tml.messageAt(i).acquireMessageCode());\n\t\t\t\t}\n\t\t\t\tUIOutput.make(errorRow,\"error\", output);\n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\t\tUIOutput.make(tofill, \"poll-vote-title\", messageLocator.getMessage(\"poll_vote_title\"));\n\n\n\n\n\t\ttry {\n\n\t\t\tPollViewParameters ecvp = (PollViewParameters) viewparams;\n\n\n\t\t\tString strId = ecvp.id;\n\t\t\tm_log.debug(\"got id of \" + strId);\n\t\t\tPoll poll = pollListManager.getPollById(Long.valueOf(strId));\n\n\t\t\tm_log.debug(\"got poll \" + poll.getText());\n\n\n\t\t\t//check if they can vote\n\t\t\tif (poll.getLimitVoting() && pollVoteManager.userHasVoted(poll.getPollId())) {\n\t\t\t\tm_log.warn(\"This user has already voted!\");\n\t\t\t\tUIOutput.make(tofill, \"hasErrors\",messageLocator.getMessage(\"vote_hasvoted\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tUIOutput.make(tofill,\"poll-text\",poll.getText());\n\t\t\tif (poll.getDetails() != null)\n\t\t\t{\n\t\t\t\tUIVerbatim.make(tofill,\"poll-description\",poll.getDetails());\n\t\t\t}\n\n\t\t\tm_log.debug(\"this poll has \" + poll.getPollOptions().size()+ \" options\");\n\n\t\t\tUIForm voteForm = UIForm.make(tofill,\"options-form\",\"\"); \n\n\t\t\tList<Option> pollOptions = poll.getPollOptions();\n\t\t\t//build the options + label lists\n\t\t\tString[] values= new String[pollOptions.size()];\n\t\t\tfor (int i = 0;i <pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tvalues[i]= po.getOptionId().toString();\n\t\t\t}\n\n\n\t\t\tString[] labels = new String[pollOptions.size()];\n\t\t\tfor (int i = 0;i<  pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tif (po.getOptionText() != null ) {\n\t\t\t\t\tlabels[i]= po.getOptionText();\n\t\t\t\t} else {\n\t\t\t\t\tm_log.warn(\"Option text is null!\");\n\t\t\t\t\tlabels[i]=\"null option!\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//we need to deside is this a single or multiple?\n\t\t\t//poll.getMaxOptions()\n\t\t\tboolean isMultiple = false;\n\t\t\tif (poll.getMaxOptions()>1)\n\t\t\t\tisMultiple = true;\n\n\n\t\t\tUISelect radio;\n\t\t\tif (isMultiple)\n\t\t\t\tradio = UISelect.makeMultiple(voteForm,\"optionform\",values,\"#{voteCollection.optionsSelected}\",new String[]{});\n\t\t\telse\n\t\t\t\tradio = UISelect.make(voteForm,\"optionform\",values,\"#{voteCollection.option}\",\"\");\n\n\t\t\tradio.optionnames = UIOutputMany.make(labels);\n\t\t\tString selectID = radio.getFullID();\n\t\t\tfor (int i = 0;i < pollOptions.size(); i++ ) {\n\t\t\t\tOption po = (Option)pollOptions.get(i);\n\t\t\t\tm_log.debug(\"got option \" + po.getOptionText() + \" with id of  \" + po.getId());\n\t\t\t\tUIBranchContainer radioRow = UIBranchContainer.make(voteForm,\n\t\t\t\t\t\tisMultiple ? \"option:select\"\n\t\t\t\t\t\t\t\t: \"option:radio\"\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t,Integer.toString(i));\n\t\t\t\tUISelectChoice.make(radioRow,\"option-radio\",selectID,i);\n\t\t\t\t//UISelectLabel.make(radioRow,\"option-label\",selectID,i);\n\t\t\t\tUIVerbatim.make(radioRow,\"option-label\",labels[i]);\n\t\t\t}\n\t\t\t//bind some parameters\n\t\t\tvoteForm.parameters.add(new UIELBinding(\"#{voteCollection.pollId}\", poll.getPollId()));\n\n\t\t\tUICommand sub = UICommand.make(voteForm, \"submit-new-vote\",messageLocator.getMessage(\"vote_vote\"),\n\t\t\t\"#{pollToolBean.processActionVote}\");\n\t\t\tsub.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"sub\"));\n\t\t\tUICommand cancel = UICommand.make(voteForm, \"cancel\",messageLocator.getMessage(\"vote_cancel\"),\"#{pollToolBean.cancel}\");\n\t\t\tcancel.parameters.add(new UIELBinding(\"#{voteCollection.submissionStatus}\", \"cancel\"));\n\n\t\t\t//o9nly show reset in !(min=max=1)\n\t\t\tif(!(poll.getMaxOptions()==1 && poll.getMinOptions()==1))\n\t\t\t\tUIOutput.make(voteForm, \"reset\", messageLocator.getMessage(\"vote_reset\"));\n\n\t\t} \n\t\tcatch (Exception e)\n\t\t{\n\t\t\tm_log.error(\"Error: \" + e);\n\t\t\te.printStackTrace();\n\t\t}\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public List reportNavigationCases() {\n\t\t\n\t\tList togo = new ArrayList(); // Always navigate back to this view.\n\t\ttogo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\treturn togo;\n\t}","id":94012,"modified_method":"public List<NavigationCase> reportNavigationCases() {\n\t\t\n\t\tList<NavigationCase> togo = new ArrayList<NavigationCase>(); // Always navigate back to this view.\n\t\ttogo.add(new NavigationCase(null, new SimpleViewParameters(VIEW_ID)));\n\t\ttogo.add(new NavigationCase(\"cancel\", new SimpleViewParameters(PollToolProducer.VIEW_ID)));\n\t\treturn togo;\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t\tComponentChecker checker) {\n\n\t\tPollViewParameters ecvp = (PollViewParameters) viewparams;\n\n\t\tString strId = ecvp.id;\n\t\tm_log.debug(\"got id of \" + strId);\n\t\tPoll poll = pollListManager.getPollById(Long.valueOf(strId));\n\n\n\t\t//get the number of votes\n\t\tint voters = pollVoteManager.getDisctinctVotersForPoll(poll);\n\t\t//Object[] args = new Object[] { Integer.valueOf(voters).toString()};\n\t\tif (poll.getMaxOptions()>1)\n\t\t\tUIOutput.make(tofill,\"poll-size\",messageLocator.getMessage(\"results_poll_size\",Integer.valueOf(voters).toString()));\n\n\t\tm_log.debug(voters + \" have voted on this poll\");\n\n\t\tUIOutput.make(tofill,\"question\",poll.getText());\n\t\tm_log.debug(\"got poll \" + poll.getText());\n\t\tList pollOptions = poll.getPollOptions();\n\n\t\tm_log.debug(\"got a list of \" + pollOptions.size() + \" options\");\n\t\t//appeng an option for no votes\n\t\tif (poll.getMinOptions()==0) {\n\t\t\tOption noVote = new Option(Long.valueOf(0));\n\t\t\tnoVote.setOptionText(messageLocator.getMessage(\"result_novote\"));\n\t\t\tnoVote.setPollId(poll.getPollId());\n\t\t\tpollOptions.add(noVote);\n\t\t}\n\n\t\tList votes = pollVoteManager.getAllVotesForPoll(poll);\n\t\tint totalVotes= votes.size();\n\t\tm_log.debug(\"got \" + totalVotes + \" votes\");\n\t\tList collation = new ArrayList();\n\n\t\tfor (int i=0; i <pollOptions.size(); i++ ) {\n\t\t\tCollatedVote collatedVote = new CollatedVote();\n\t\t\tOption option = (Option) pollOptions.get(i);\n\t\t\tm_log.debug(\"collating option \" + option.getOptionId());\n\t\t\tcollatedVote.setoptionId(option.getOptionId());\n\t\t\tcollatedVote.setOptionText(option.getOptionText());\n\t\t\tfor (int q=0; q <votes.size(); q++ ) {\n\t\t\t\tVote vote = (Vote)votes.get(q);\n\t\t\t\tif (vote.getPollOption().equals(option.getOptionId())){\n\t\t\t\t\tm_log.debug(\"got a vote for option \" + option.getOptionId());\n\t\t\t\t\tcollatedVote.incrementVotes();\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tcollation.add(collatedVote);\n\n\t\t}\n\n\t\tUILink.make(tofill,\"answers-title\",messageLocator.getMessage(\"results_answers_title\"), \"#\");\n\t\tUILink.make(tofill,\"answers-count\",messageLocator.getMessage(\"results_answers_numbering\"), \"#\");\n\n\t\t//output the votes\n\t\tfor (int i=0; i <collation.size(); i++ ) {\n\t\t\tCollatedVote cv = (CollatedVote)collation.get(i);\n\t\t\tUIBranchContainer resultRow = UIBranchContainer.make(tofill,\"answer-row:\",cv.getoptionId().toString());\n\t\t\tUIVerbatim.make(resultRow,\"answer-option\",cv.getOptionText());\n\t\t\tUIOutput.make(resultRow,\"answer-count\", Integer.valueOf(i+1).toString());\n\t\t\tUIOutput.make(resultRow,\"answer-numVotes\",Long.valueOf(cv.getVotes()).toString());\n\t\t\tm_log.debug(\"about to do the calc: (\" + cv.getVotes()+\"/\"+ totalVotes +\")*100\");\n\t\t\tdouble percent = (double)0;\n\t\t\tif (totalVotes>0  && poll.getMaxOptions() == 1)\n\t\t\t\tpercent = ((double)cv.getVotes()/(double)totalVotes); //*(double)100;\n\t\t\telse if (totalVotes>0  && poll.getMaxOptions() > 1)\n\t\t\t\tpercent = ((double)cv.getVotes()/(double)voters); //*(double)100;\n\t\t\telse\n\t\t\t\tpercent = (double) 0;\n\n\n\t\t\tm_log.debug(\"result is \"+ percent);\n\t\t\tNumberFormat nf = NumberFormat.getPercentInstance(localegetter.get());\n\t\t\tUIOutput.make(resultRow,\"answer-percVotes\", nf.format(percent));\n\n\t\t}\n\t\tUIOutput.make(tofill,\"votes-total\",Integer.valueOf(totalVotes).toString());\n\t\tif (totalVotes > 0 && poll.getMaxOptions() == 1)\n\t\t\tUIOutput.make(tofill,\"total-percent\",\"100%\");\n\n\t\t//the cancel button\n\t\tUIForm form = UIForm.make(tofill,\"actform\");\n\t\tUICommand.make(form,\"cancel\",messageLocator.getMessage(\"results_cancel\"),\"#{pollToolBean.cancel}\"); \n\t\teventTrackingService.post(eventTrackingService.newEvent(\"poll.viewResult\", \"poll/site/\" + toolManager.getCurrentPlacement().getContext() +\"/poll/\" +  poll.getPollId(), false));\n\n\t}","id":94013,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewparams,\n\t\t\tComponentChecker checker) {\n\n\t\tPollViewParameters ecvp = (PollViewParameters) viewparams;\n\n\t\tString strId = ecvp.id;\n\t\tm_log.debug(\"got id of \" + strId);\n\t\tPoll poll = pollListManager.getPollById(Long.valueOf(strId));\n\n\n\t\t//get the number of votes\n\t\tint voters = pollVoteManager.getDisctinctVotersForPoll(poll);\n\t\t//Object[] args = new Object[] { Integer.valueOf(voters).toString()};\n\t\tif (poll.getMaxOptions()>1)\n\t\t\tUIOutput.make(tofill,\"poll-size\",messageLocator.getMessage(\"results_poll_size\",Integer.valueOf(voters).toString()));\n\n\t\tm_log.debug(voters + \" have voted on this poll\");\n\n\t\tUIOutput.make(tofill,\"question\",poll.getText());\n\t\tm_log.debug(\"got poll \" + poll.getText());\n\t\tList<Option> pollOptions = poll.getPollOptions();\n\n\t\tm_log.debug(\"got a list of \" + pollOptions.size() + \" options\");\n\t\t//appeng an option for no votes\n\t\tif (poll.getMinOptions()==0) {\n\t\t\tOption noVote = new Option(Long.valueOf(0));\n\t\t\tnoVote.setOptionText(messageLocator.getMessage(\"result_novote\"));\n\t\t\tnoVote.setPollId(poll.getPollId());\n\t\t\tpollOptions.add(noVote);\n\t\t}\n\n\t\tList<Vote> votes = pollVoteManager.getAllVotesForPoll(poll);\n\t\tint totalVotes= votes.size();\n\t\tm_log.debug(\"got \" + totalVotes + \" votes\");\n\t\tList<CollatedVote> collation = new ArrayList<CollatedVote>();\n\n\t\tfor (int i=0; i <pollOptions.size(); i++ ) {\n\t\t\tCollatedVote collatedVote = new CollatedVote();\n\t\t\tOption option = (Option) pollOptions.get(i);\n\t\t\tm_log.debug(\"collating option \" + option.getOptionId());\n\t\t\tcollatedVote.setoptionId(option.getOptionId());\n\t\t\tcollatedVote.setOptionText(option.getOptionText());\n\t\t\tfor (int q=0; q <votes.size(); q++ ) {\n\t\t\t\tVote vote = (Vote)votes.get(q);\n\t\t\t\tif (vote.getPollOption().equals(option.getOptionId())){\n\t\t\t\t\tm_log.debug(\"got a vote for option \" + option.getOptionId());\n\t\t\t\t\tcollatedVote.incrementVotes();\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tcollation.add(collatedVote);\n\n\t\t}\n\n\t\tUILink.make(tofill,\"answers-title\",messageLocator.getMessage(\"results_answers_title\"), \"#\");\n\t\tUILink.make(tofill,\"answers-count\",messageLocator.getMessage(\"results_answers_numbering\"), \"#\");\n\n\t\t//output the votes\n\t\tfor (int i=0; i <collation.size(); i++ ) {\n\t\t\tCollatedVote cv = (CollatedVote)collation.get(i);\n\t\t\tUIBranchContainer resultRow = UIBranchContainer.make(tofill,\"answer-row:\",cv.getoptionId().toString());\n\t\t\tUIVerbatim.make(resultRow,\"answer-option\",cv.getOptionText());\n\t\t\tUIOutput.make(resultRow,\"answer-count\", Integer.valueOf(i+1).toString());\n\t\t\tUIOutput.make(resultRow,\"answer-numVotes\",Long.valueOf(cv.getVotes()).toString());\n\t\t\tm_log.debug(\"about to do the calc: (\" + cv.getVotes()+\"/\"+ totalVotes +\")*100\");\n\t\t\tdouble percent = (double)0;\n\t\t\tif (totalVotes>0  && poll.getMaxOptions() == 1)\n\t\t\t\tpercent = ((double)cv.getVotes()/(double)totalVotes); //*(double)100;\n\t\t\telse if (totalVotes>0  && poll.getMaxOptions() > 1)\n\t\t\t\tpercent = ((double)cv.getVotes()/(double)voters); //*(double)100;\n\t\t\telse\n\t\t\t\tpercent = (double) 0;\n\n\n\t\t\tm_log.debug(\"result is \"+ percent);\n\t\t\tNumberFormat nf = NumberFormat.getPercentInstance(localegetter.get());\n\t\t\tUIOutput.make(resultRow,\"answer-percVotes\", nf.format(percent));\n\n\t\t}\n\t\tUIOutput.make(tofill,\"votes-total\",Integer.valueOf(totalVotes).toString());\n\t\tif (totalVotes > 0 && poll.getMaxOptions() == 1)\n\t\t\tUIOutput.make(tofill,\"total-percent\",\"100%\");\n\n\t\t//the cancel button\n\t\tUIForm form = UIForm.make(tofill,\"actform\");\n\t\tUICommand.make(form,\"cancel\",messageLocator.getMessage(\"results_cancel\"),\"#{pollToolBean.cancel}\"); \n\t\texternalLogic.postEvent(\"poll.viewResult\", \"poll/site/\" + externalLogic.getCurrentLocationId() +\"/poll/\" +  poll.getPollId(), false);\n\n\n\t}","commit_id":"4ded7934727488b386bec981fcdc3839b4797971","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@NotNull\n  @Override\n  public PsiClass[] getClasses(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) {\n    final List<VirtualFile> classRoots = getClassRoots();\n    if (classRoots.isEmpty()) {\n      return PsiClass.EMPTY_ARRAY;\n    }\n\n    List<PsiClass> result = new ArrayList<PsiClass>();\n    for (final VirtualFile classRoot : classRoots) {\n      if (scope.contains(classRoot)) {\n        final String pkgName = psiPackage.getName();\n        final VirtualFile dir = pkgName != null ? classRoot.findFileByRelativePath(pkgName.replace('.', '/')) : classRoot;\n        if (dir != null && dir.isDirectory()) {\n          for (final VirtualFile file : dir.getChildren()) {\n            if (!file.isDirectory()) {\n              final PsiFile psi = PsiManager.getInstance(myProject).findFile(file);\n              if (psi instanceof PsiClassOwner) {\n                result.addAll(Arrays.asList(((PsiClassOwner)psi).getClasses()));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toArray(new PsiClass[result.size()]);\n  }","id":94014,"modified_method":"@NotNull\n  @Override\n  public PsiClass[] getClasses(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) {\n    final List<VirtualFile> classRoots = getClassRoots();\n    if (classRoots.isEmpty()) {\n      return PsiClass.EMPTY_ARRAY;\n    }\n\n    List<PsiClass> result = new ArrayList<PsiClass>();\n    for (final VirtualFile classRoot : classRoots) {\n      if (scope.contains(classRoot)) {\n        final String pkgName = psiPackage.getQualifiedName();\n        final VirtualFile dir = classRoot.findFileByRelativePath(pkgName.replace('.', '/'));\n        if (dir != null && dir.isDirectory()) {\n          for (final VirtualFile file : dir.getChildren()) {\n            if (!file.isDirectory()) {\n              final PsiFile psi = PsiManager.getInstance(myProject).findFile(file);\n              if (psi instanceof PsiClassOwner) {\n                result.addAll(Arrays.asList(((PsiClassOwner)psi).getClasses()));\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toArray(new PsiClass[result.size()]);\n  }","commit_id":"213320384d480eafea2d892f94c19b5afd3d207a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) {\n    final List<VirtualFile> classRoots = getClassRoots();\n    if (classRoots.isEmpty()) {\n      return super.getSubPackages(psiPackage, scope);\n    }\n\n    List<PsiPackage> result = new ArrayList<PsiPackage>();\n    for (final VirtualFile classRoot : classRoots) {\n      if (scope.contains(classRoot)) {\n        final String pkgName = psiPackage.getName();\n        final VirtualFile dir = pkgName != null ? classRoot.findFileByRelativePath(pkgName.replace('.', '/')) : classRoot;\n        if (dir != null && dir.isDirectory()) {\n          for (final VirtualFile file : dir.getChildren()) {\n            if (file.isDirectory()) {\n              result.add(createPackage(pkgName + \".\" + file.getName()));\n            }\n          }\n        }\n      }\n    }\n    return result.toArray(new PsiPackage[result.size()]);\n  }","id":94015,"modified_method":"@NotNull\n  @Override\n  public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) {\n    final List<VirtualFile> classRoots = getClassRoots();\n    if (classRoots.isEmpty()) {\n      return super.getSubPackages(psiPackage, scope);\n    }\n\n    List<PsiPackage> result = new ArrayList<PsiPackage>();\n    for (final VirtualFile classRoot : classRoots) {\n      if (scope.contains(classRoot)) {\n        final String pkgName = psiPackage.getQualifiedName();\n        final VirtualFile dir = classRoot.findFileByRelativePath(pkgName.replace('.', '/'));\n        if (dir != null && dir.isDirectory()) {\n          for (final VirtualFile file : dir.getChildren()) {\n            if (file.isDirectory()) {\n              result.add(createPackage(pkgName + \".\" + file.getName()));\n            }\n          }\n        }\n      }\n    }\n    return result.toArray(new PsiPackage[result.size()]);\n  }","commit_id":"213320384d480eafea2d892f94c19b5afd3d207a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static VirtualFile getHelpFile(AntDomElement antElement, final VirtualFile documentationRoot) {\n    final XmlTag xmlTag = antElement.getXmlTag();\n    if (xmlTag == null) {\n      return null;\n    }\n    @NonNls final String helpFileShortName = \"/\" + xmlTag.getName() + \".html\";\n\n    VirtualFile candidateHelpFile = documentationRoot.findFileByRelativePath(CORE_TASKS_FOLDER_NAME + helpFileShortName);\n    if (candidateHelpFile != null) {\n      return candidateHelpFile;\n    }\n\n    candidateHelpFile = documentationRoot.findFileByRelativePath(OPTIONAL_TASKS_FOLDER_NAME + helpFileShortName);\n    if (candidateHelpFile != null) {\n      return candidateHelpFile;\n    }\n\n    candidateHelpFile = documentationRoot.findFileByRelativePath(CORE_TYPES_FOLDER_NAME + helpFileShortName);\n    if (candidateHelpFile != null) {\n      return candidateHelpFile;\n    }\n\n    candidateHelpFile = documentationRoot.findFileByRelativePath(OPTIONAL_TYPES_FOLDER_NAME + helpFileShortName);\n    if (candidateHelpFile != null) {\n      return candidateHelpFile;\n    }\n\n    if(antElement instanceof AntDomTarget|| antElement instanceof AntDomProject) {\n      candidateHelpFile = documentationRoot.findFileByRelativePath(\"using.html\");\n      if (candidateHelpFile != null) {\n        return candidateHelpFile;\n      }\n    }\n\n    return null;\n  }","id":94016,"modified_method":"@Nullable\n  private static VirtualFile getHelpFile(AntDomElement antElement, final VirtualFile documentationRoot) {\n    final XmlTag xmlTag = antElement.getXmlTag();\n    if (xmlTag == null) {\n      return null;\n    }\n    @NonNls final String helpFileShortName = \"/\" + xmlTag.getName() + \".html\";\n\n    for (String folderName : DOC_FOLDER_NAMES) {\n      final VirtualFile candidateHelpFile = documentationRoot.findFileByRelativePath(folderName + helpFileShortName);\n      if (candidateHelpFile != null) {\n        return candidateHelpFile;\n      }\n    }\n\n    if(antElement instanceof AntDomTarget|| antElement instanceof AntDomProject) {\n      final VirtualFile candidateHelpFile = documentationRoot.findFileByRelativePath(\"using.html\");\n      if (candidateHelpFile != null) {\n        return candidateHelpFile;\n      }\n    }\n\n    return null;\n  }","commit_id":"bc347a812da38f36fe0c24ad931ce1dd2891a0be","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void execute(ActionContext context) {\n    SNode node = context.get(SNode.class);\n    if (!(node instanceof ConceptDeclaration)) return;\n\n    final String editorName = node.getName() + \"_Editor\";\n    MPSProject project = context.get(MPSProject.class);\n    SModel languageStructure = node.getModel();\n    Language language = project.getLanguageByStructureModel(languageStructure);\n    if (language == null) {\n      JOptionPane.showMessageDialog(null, \"Couldn't find Language for structure model \" + languageStructure.getUID());\n      return;\n    }\n    SModel languageEditor = language.getEditorModel();\n    if (languageEditor != null) {\n      Iterator<SNode> iterator = languageEditor.roots();\n      while (iterator.hasNext()) {\n        SNode root = iterator.next();\n        if (editorName.equals(root.getName())) {\n          AbstractEditorComponent editor = context.get(IdeMain.class).getEditorsPane().openEditor(root, context.get(OperationContext.class));\n          editor.selectNode(root);\n          return;\n        }\n      }\n      JOptionPane.showMessageDialog(null, \"The \" + editorName + \" wasn't found in \" + languageEditor.getUID());\n    } else {\n      JOptionPane.showMessageDialog(null, \"Editor model for \\\"\" + node.getModel().getUID() + \"\\\" is not in the project\");\n    }\n  }","id":94017,"modified_method":"public void execute(ActionContext context) {\n    final IdeMain ide = context.get(IdeMain.class);\n    SNode node = context.get(SNode.class);\n    if (!(node instanceof ConceptDeclaration)) return;\n\n    final String editorName = node.getName() + \"_Editor\";\n    MPSProject project = context.get(MPSProject.class);\n    SModel languageStructure = node.getModel();\n    Language language = project.getLanguageByStructureModel(languageStructure);\n    if (language == null) {\n      JOptionPane.showMessageDialog(null, \"Couldn't find Language for structure model \" + languageStructure.getUID());\n      return;\n    }\n    final SModel languageEditor = language.getEditorModel();\n    if (languageEditor != null) {\n      Iterator<SNode> iterator = languageEditor.roots();\n      while (iterator.hasNext()) {\n        SNode root = iterator.next();\n        if (editorName.equals(root.getName())) {\n          AbstractEditorComponent editor = context.get(IdeMain.class).getEditorsPane().openEditor(root, context.get(OperationContext.class));\n          editor.selectNode(root);\n          return;\n        }\n      }\n   \n      int option = JOptionPane.showConfirmDialog(\n              null, \"The \" + editorName + \" wasn't found in \" + languageEditor.getUID() + \"\\nDo you want to create such an editor?\",\n              \"Editor not found\",\n              JOptionPane.YES_NO_OPTION,\n              JOptionPane.QUESTION_MESSAGE);\n\n      if (option == JOptionPane.YES_OPTION) {\n                final ConceptEditorDeclaration[] editorDeclaration = new ConceptEditorDeclaration[1];\n                final ConceptDeclaration conceptDeclaration = (ConceptDeclaration) node;\n                CommandProcessor.instance().executeCommand(new Runnable() {\n                  public void run() {\n                    editorDeclaration[0] = new ConceptEditorDeclaration(languageEditor);\n                    editorDeclaration[0].setConceptDeclaration(conceptDeclaration);\n                    editorDeclaration[0].getModel().addRoot(editorDeclaration[0]);\n                  }\n                });\n\n                ide.getProjectPane().selectNode(editorDeclaration[0]);\n                ide.getProjectPane().openEditor(context.get(OperationContext.class));\n                JOptionPane.showMessageDialog(null, \"Editor \" + editorName + \" created\");\n      }\n\n    } else {\n      JOptionPane.showMessageDialog(null, \"Editor model for \\\"\" + node.getModel().getUID() + \"\\\" is not in the project\");\n    }\n  }","commit_id":"2a20b1fa04f2b1e9726d30f479f11bf587cb39ab","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void actionPerformed(ActionEvent event) {\n\t\tCollection<OsmPrimitive> selection = Main.ds.getSelected();\n\t\tLinkedList<Way> selectedWays = new LinkedList<Way>();\n\t\t\n\t\tfor (OsmPrimitive osm : selection)\n\t\t\tif (osm instanceof Way)\n\t\t\t\tselectedWays.add((Way)osm);\n\n\t\tif (selectedWays.size() < 2) {\n\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select at least two ways to combine.\"));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Check whether all ways have identical relationship membership. More \n\t\t// specifically: If one of the selected ways is a member of relation X\n\t\t// in role Y, then all selected ways must be members of X in role Y.\n\t\t\n\t\t// FIXME: In a later revision, we should display some sort of conflict \n\t\t// dialog like we do for tags, to let the user choose which relations\n\t\t// should be kept.\n\t\t\n\t\t// Step 1, iterate over all relations and figure out which of our\n\t\t// selected ways are members of a relation.\n\t\tHashMap<RelationRolePair, HashSet<Way>> backlinks =\n\t\t\tnew HashMap<RelationRolePair, HashSet<Way>>();\n\t\tHashSet<Relation> relationsUsingWays = new HashSet<Relation>();\n\t\tfor (Relation r : Main.ds.relations) {\n\t\t\tif (r.deleted || r.incomplete) continue;\n\t\t\tfor (RelationMember rm : r.members) {\n\t\t\t\tif (rm.member instanceof Way) {\n\t\t\t\t\tfor(Way w : selectedWays) {\n\t\t\t\t\t\tif (rm.member == w) {\n\t\t\t\t\t\t\tRelationRolePair pair = new RelationRolePair(r, rm.role);\n\t\t\t\t\t\t\tHashSet<Way> waylinks = new HashSet<Way>();\n\t\t\t\t\t\t\tif (backlinks.containsKey(pair)) {\n\t\t\t\t\t\t\t\twaylinks = backlinks.get(pair);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twaylinks = new HashSet<Way>();\n\t\t\t\t\t\t\t\tbacklinks.put(pair, waylinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twaylinks.add(w);\n\n\t\t\t\t\t\t\t// this is just a cache for later use\n\t\t\t\t\t\t\trelationsUsingWays.add(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Step 2, all values of the backlinks HashMap must now equal the size\n\t\t// of the selection.\n\t\tfor (HashSet<Way> waylinks : backlinks.values()) {\n\t\t\tif (!selectedWays.equals(waylinks)) {\n\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"The selected ways cannot be combined as they have differing relation memberships.\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// collect properties for later conflict resolving\n\t\tMap<String, Set<String>> props = new TreeMap<String, Set<String>>();\n\t\tfor (Way w : selectedWays) {\n\t\t\tfor (Entry<String,String> e : w.entrySet()) {\n\t\t\t\tif (!props.containsKey(e.getKey()))\n\t\t\t\t\tprops.put(e.getKey(), new TreeSet<String>());\n\t\t\t\tprops.get(e.getKey()).add(e.getValue());\n\t\t\t}\n\t\t}\n\n\t\tList<Node> nodeList = null;\n\t\tObject firstTry = actuallyCombineWays(selectedWays, false);\n\t\tif (firstTry instanceof List) {\n\t\t\tnodeList = (List<Node>) firstTry;\n\t\t} else {\n\t\t\tObject secondTry = actuallyCombineWays(selectedWays, true);\n\t\t\tif (secondTry instanceof List) {\n\t\t\t\tint option = JOptionPane.showConfirmDialog(Main.parent,\n\t\t\t\t\ttr(\"The ways can not be combined in their current directions.  \"\n\t\t\t\t\t+ \"Do you want to reverse some of them?\"), tr(\"Change directions?\"),\n\t\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t\t\t\tif (option != JOptionPane.YES_OPTION) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tnodeList = (List<Node>) secondTry;\n\t\t\t} else {\n\t\t\t\tJOptionPane.showMessageDialog(Main.parent, (String) secondTry);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tWay newWay = new Way(selectedWays.get(0));\n\t\tnewWay.nodes.clear();\n\t\tnewWay.nodes.addAll(nodeList);\n\t\t\n\t\t// display conflict dialog\n\t\tMap<String, JComboBox> components = new HashMap<String, JComboBox>();\n\t\tJPanel p = new JPanel(new GridBagLayout());\n\t\tfor (Entry<String, Set<String>> e : props.entrySet()) {\n\t\t\tif (e.getValue().size() > 1) {\n\t\t\t\tJComboBox c = new JComboBox(e.getValue().toArray());\n\t\t\t\tc.setEditable(true);\n\t\t\t\tp.add(new JLabel(e.getKey()), GBC.std());\n\t\t\t\tp.add(Box.createHorizontalStrut(10), GBC.std());\n\t\t\t\tp.add(c, GBC.eol());\n\t\t\t\tcomponents.put(e.getKey(), c);\n\t\t\t} else\n\t\t\t\tnewWay.put(e.getKey(), e.getValue().iterator().next());\n\t\t}\n\t\t\n\t\tif (!components.isEmpty()) {\n\t\t\tint answer = JOptionPane.showConfirmDialog(Main.parent, p, tr(\"Enter values for all conflicts.\"), JOptionPane.OK_CANCEL_OPTION);\n\t\t\tif (answer != JOptionPane.OK_OPTION)\n\t\t\t\treturn;\n\t\t\tfor (Entry<String, JComboBox> e : components.entrySet())\n\t\t\t\tnewWay.put(e.getKey(), e.getValue().getEditor().getItem().toString());\n\t\t}\n\n\t\tLinkedList<Command> cmds = new LinkedList<Command>();\n\t\tcmds.add(new DeleteCommand(selectedWays.subList(1, selectedWays.size())));\n\t\tcmds.add(new ChangeCommand(selectedWays.peek(), newWay));\n\t\t\n\t\t// modify all relations containing the now-deleted ways\n\t\tfor (Relation r : relationsUsingWays) {\n\t\t\tRelation newRel = new Relation(r);\n\t\t\tnewRel.members.clear();\n\t\t\tfor (RelationMember rm : r.members) {\n\t\t\t\t// only copy member if it is either the first of all the selected\n\t\t\t\t// ways (indexOf==0) or not one if the selected ways (indexOf==-1)\n\t\t\t\tif (selectedWays.indexOf(rm.member) < 1) {\n\t\t\t\t\tnewRel.members.add(new RelationMember(rm));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcmds.add(new ChangeCommand(r, newRel));\n\t\t}\n\t\tMain.main.undoRedo.add(new SequenceCommand(tr(\"Combine {0} ways\", selectedWays.size()), cmds));\n\t\tMain.ds.setSelected(selectedWays.peek());\n\t}","id":94018,"modified_method":"public void actionPerformed(ActionEvent event) {\n\t\tCollection<OsmPrimitive> selection = Main.ds.getSelected();\n\t\tLinkedList<Way> selectedWays = new LinkedList<Way>();\n\n\t\tfor (OsmPrimitive osm : selection)\n\t\t\tif (osm instanceof Way)\n\t\t\t\tselectedWays.add((Way)osm);\n\n\t\tif (selectedWays.size() < 2) {\n\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Please select at least two ways to combine.\"));\n\t\t\treturn;\n\t\t}\n\n\t\t// Check whether all ways have identical relationship membership. More\n\t\t// specifically: If one of the selected ways is a member of relation X\n\t\t// in role Y, then all selected ways must be members of X in role Y.\n\n\t\t// FIXME: In a later revision, we should display some sort of conflict\n\t\t// dialog like we do for tags, to let the user choose which relations\n\t\t// should be kept.\n\n\t\t// Step 1, iterate over all relations and figure out which of our\n\t\t// selected ways are members of a relation.\n\t\tHashMap<RelationRolePair, HashSet<Way>> backlinks =\n\t\t\tnew HashMap<RelationRolePair, HashSet<Way>>();\n\t\tHashSet<Relation> relationsUsingWays = new HashSet<Relation>();\n\t\tfor (Relation r : Main.ds.relations) {\n\t\t\tif (r.deleted || r.incomplete) continue;\n\t\t\tfor (RelationMember rm : r.members) {\n\t\t\t\tif (rm.member instanceof Way) {\n\t\t\t\t\tfor(Way w : selectedWays) {\n\t\t\t\t\t\tif (rm.member == w) {\n\t\t\t\t\t\t\tRelationRolePair pair = new RelationRolePair(r, rm.role);\n\t\t\t\t\t\t\tHashSet<Way> waylinks = new HashSet<Way>();\n\t\t\t\t\t\t\tif (backlinks.containsKey(pair)) {\n\t\t\t\t\t\t\t\twaylinks = backlinks.get(pair);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twaylinks = new HashSet<Way>();\n\t\t\t\t\t\t\t\tbacklinks.put(pair, waylinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twaylinks.add(w);\n\n\t\t\t\t\t\t\t// this is just a cache for later use\n\t\t\t\t\t\t\trelationsUsingWays.add(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Complain to the user if the ways don't have equal memberships.\n\t\tfor (HashSet<Way> waylinks : backlinks.values()) {\n\t\t\tif (!waylinks.containsAll(selectedWays)) {\n\t\t\t\tint option = JOptionPane.showConfirmDialog(Main.parent,\n\t\t\t\t\ttr(\"The selected ways have differing relation memberships.  \"\n\t\t\t\t\t\t+ \"Do you still want to combine them?\"),\n\t\t\t\t\ttr(\"Combine ways with different memberships?\"),\n\t\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t\t\t\tif (option == JOptionPane.YES_OPTION) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// collect properties for later conflict resolving\n\t\tMap<String, Set<String>> props = new TreeMap<String, Set<String>>();\n\t\tfor (Way w : selectedWays) {\n\t\t\tfor (Entry<String,String> e : w.entrySet()) {\n\t\t\t\tif (!props.containsKey(e.getKey()))\n\t\t\t\t\tprops.put(e.getKey(), new TreeSet<String>());\n\t\t\t\tprops.get(e.getKey()).add(e.getValue());\n\t\t\t}\n\t\t}\n\n\t\tList<Node> nodeList = null;\n\t\tObject firstTry = actuallyCombineWays(selectedWays, false);\n\t\tif (firstTry instanceof List) {\n\t\t\tnodeList = (List<Node>) firstTry;\n\t\t} else {\n\t\t\tObject secondTry = actuallyCombineWays(selectedWays, true);\n\t\t\tif (secondTry instanceof List) {\n\t\t\t\tint option = JOptionPane.showConfirmDialog(Main.parent,\n\t\t\t\t\ttr(\"The ways can not be combined in their current directions.  \"\n\t\t\t\t\t+ \"Do you want to reverse some of them?\"), tr(\"Change directions?\"),\n\t\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t\t\t\tif (option != JOptionPane.YES_OPTION) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tnodeList = (List<Node>) secondTry;\n\t\t\t} else {\n\t\t\t\tJOptionPane.showMessageDialog(Main.parent, (String) secondTry);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tWay newWay = new Way(selectedWays.get(0));\n\t\tnewWay.nodes.clear();\n\t\tnewWay.nodes.addAll(nodeList);\n\n\t\t// display conflict dialog\n\t\tMap<String, JComboBox> components = new HashMap<String, JComboBox>();\n\t\tJPanel p = new JPanel(new GridBagLayout());\n\t\tfor (Entry<String, Set<String>> e : props.entrySet()) {\n\t\t\tif (e.getValue().size() > 1) {\n\t\t\t\tJComboBox c = new JComboBox(e.getValue().toArray());\n\t\t\t\tc.setEditable(true);\n\t\t\t\tp.add(new JLabel(e.getKey()), GBC.std());\n\t\t\t\tp.add(Box.createHorizontalStrut(10), GBC.std());\n\t\t\t\tp.add(c, GBC.eol());\n\t\t\t\tcomponents.put(e.getKey(), c);\n\t\t\t} else\n\t\t\t\tnewWay.put(e.getKey(), e.getValue().iterator().next());\n\t\t}\n\n\t\tif (!components.isEmpty()) {\n\t\t\tint answer = JOptionPane.showConfirmDialog(Main.parent, p, tr(\"Enter values for all conflicts.\"), JOptionPane.OK_CANCEL_OPTION);\n\t\t\tif (answer != JOptionPane.OK_OPTION)\n\t\t\t\treturn;\n\t\t\tfor (Entry<String, JComboBox> e : components.entrySet())\n\t\t\t\tnewWay.put(e.getKey(), e.getValue().getEditor().getItem().toString());\n\t\t}\n\n\t\tLinkedList<Command> cmds = new LinkedList<Command>();\n\t\tcmds.add(new DeleteCommand(selectedWays.subList(1, selectedWays.size())));\n\t\tcmds.add(new ChangeCommand(selectedWays.peek(), newWay));\n\n\t\t// modify all relations containing the now-deleted ways\n\t\tfor (Relation r : relationsUsingWays) {\n\t\t\tRelation newRel = new Relation(r);\n\t\t\tnewRel.members.clear();\n\t\t\tHashSet<String> rolesToReAdd = new HashSet<String>();\n\t\t\tfor (RelationMember rm : r.members) {\n\t\t\t\t// Don't copy the member if it to one of our ways, just keep a\n\t\t\t\t// note to re-add it later on.\n\t\t\t\tif (selectedWays.contains(rm.member)) {\n\t\t\t\t\trolesToReAdd.add(rm.role);\n\t\t\t\t} else {\n\t\t\t\t\tnewRel.members.add(rm);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (String role : rolesToReAdd) {\n\t\t\t\tnewRel.members.add(new RelationMember(role, selectedWays.peek()));\n\t\t\t}\n\t\t\tcmds.add(new ChangeCommand(r, newRel));\n\t\t}\n\t\tMain.main.undoRedo.add(new SequenceCommand(tr(\"Combine {0} ways\", selectedWays.size()), cmds));\n\t\tMain.ds.setSelected(selectedWays.peek());\n\t}","commit_id":"37db4f91886d369bf4d953303074148d4103d65a","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\r\n\t * Load all plugins specified in preferences. If the parameter is <code>true<\/code>, all\r\n\t * early plugins are loaded (before constructor).\r\n\t */\r\n\tpublic static void loadPlugins(boolean early) {\r\n\t\tList<String> plugins = new LinkedList<String>();\r\n\t\tif (Main.pref.hasKey(\"plugins\"))\r\n\t\t\tplugins.addAll(Arrays.asList(Main.pref.get(\"plugins\").split(\",\")));\r\n\t\tif (System.getProperty(\"josm.plugins\") != null)\r\n\t\t\tplugins.addAll(Arrays.asList(System.getProperty(\"josm.plugins\").split(\",\")));\n\t\t\n\t\t// we remove mappaint from the preferences on startup but this is just\n\t\t// in case it crept in through the properties:\n\t\tif (plugins.contains(\"mappaint\")) {\n\t\t\tplugins.remove(\"mappaint\");\n\t\t\tSystem.out.println(\"Warning - loading of mappaint plugin was requested. This JOSM version has built-in mappaint support. The plugin is not required.\");\n\t\t}\n\t\t\r\n\t\tif (plugins.isEmpty())\r\n\t\t\treturn;\r\n\t\tSortedMap<Integer, Collection<PluginInformation>> p = new TreeMap<Integer, Collection<PluginInformation>>();\r\n\t\tfor (String pluginName : plugins) {\r\n\t\t\tPluginInformation info = PluginInformation.findPlugin(pluginName);\r\n\t\t\tif (info != null) {\r\n\t\t\t\tif (info.early != early)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (!p.containsKey(info.stage))\r\n\t\t\t\t\tp.put(info.stage, new LinkedList<PluginInformation>());\r\n\t\t\t\tp.get(info.stage).add(info);\r\n\t\t\t} else {\r\n\t\t\t\tif (early)\r\n\t\t\t\t\tSystem.out.println(\"Plugin not found: \"+pluginName); // do not translate\r\n\t\t\t\telse\t\r\n\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Plugin not found: {0}.\", pluginName));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// iterate all plugins and collect all libraries of all plugins:\r\n\t\tList<URL> allPluginLibraries = new ArrayList<URL>();\r\n\t\tfor (Collection<PluginInformation> c : p.values())\r\n\t\t\tfor (PluginInformation info : c)\r\n\t\t\t\tallPluginLibraries.addAll(info.libraries);\r\n\t\t// create a classloader for all plugins:\r\n\t\tURL[] jarUrls = new URL[allPluginLibraries.size()];\r\n\t\tjarUrls = allPluginLibraries.toArray(jarUrls);\r\n\t\tURLClassLoader pluginClassLoader = new URLClassLoader(jarUrls, Main.class.getClassLoader());\r\n\t\tImageProvider.sources.add(0, pluginClassLoader);\r\n\r\n\t\tfor (Collection<PluginInformation> c : p.values()) {\r\n\t\t\tfor (PluginInformation info : c) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tClass<?> klass = info.loadClass(pluginClassLoader);\r\n\t\t\t\t\tif (klass != null) {\r\n\t\t\t\t\t\tSystem.out.println(\"loading \"+info.name);\r\n\t\t\t\t\t\tMain.plugins.add(info.load(klass));\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\tif (early)\r\n\t\t\t\t\t\tSystem.out.println(\"Could not load plugin: \"+info.name+\" - deleted from preferences\"); // do not translate\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Could not load plugin {0}. Deleted from preferences.\", info.name));\n\t\t\t\t\tplugins.remove(info.name);\n\t\t\t\t\tString plist = null;\n\t\t\t\t\tfor (String pn : plugins) { \n\t\t\t\t\t\tif (plist==null) plist=\"\"; else plist=plist+\",\";\n\t\t\t\t\t\tplist=plist+pn;\n\t\t\t\t\t}\n\t\t\t\t\tMain.pref.put(\"plugins\", plist);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":94019,"modified_method":"/**\r\n\t * Load all plugins specified in preferences. If the parameter is <code>true<\/code>, all\r\n\t * early plugins are loaded (before constructor).\r\n\t */\r\n\tpublic static void loadPlugins(boolean early) {\r\n\t\tList<String> plugins = new LinkedList<String>();\r\n\t\tif (Main.pref.hasKey(\"plugins\"))\r\n\t\t\tplugins.addAll(Arrays.asList(Main.pref.get(\"plugins\").split(\",\")));\r\n\t\tif (System.getProperty(\"josm.plugins\") != null)\r\n\t\t\tplugins.addAll(Arrays.asList(System.getProperty(\"josm.plugins\").split(\",\")));\n\t\t\n\t\t// we remove mappaint from the preferences on startup but this is just\n\t\t// in case it crept in through the properties:\n\t\tif (plugins.contains(\"mappaint\")) {\n\t\t\tplugins.remove(\"mappaint\");\n\t\t\tSystem.out.println(\"Warning - loading of mappaint plugin was requested. This JOSM version has built-in mappaint support. The plugin is not required.\");\n\t\t}\n\t\t\r\n\t\tif (plugins.isEmpty())\r\n\t\t\treturn;\r\n\t\tSortedMap<Integer, Collection<PluginInformation>> p = new TreeMap<Integer, Collection<PluginInformation>>();\r\n\t\tfor (String pluginName : plugins) {\r\n\t\t\tPluginInformation info = PluginInformation.findPlugin(pluginName);\r\n\t\t\tif (info != null) {\r\n\t\t\t\tif (info.early != early)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (!p.containsKey(info.stage))\r\n\t\t\t\t\tp.put(info.stage, new LinkedList<PluginInformation>());\r\n\t\t\t\tp.get(info.stage).add(info);\r\n\t\t\t} else {\r\n\t\t\t\tif (early)\r\n\t\t\t\t\tSystem.out.println(\"Plugin not found: \"+pluginName); // do not translate\r\n\t\t\t\telse\t\r\n\t\t\t\t\tJOptionPane.showMessageDialog(Main.parent, tr(\"Plugin not found: {0}.\", pluginName));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// iterate all plugins and collect all libraries of all plugins:\r\n\t\tList<URL> allPluginLibraries = new ArrayList<URL>();\r\n\t\tfor (Collection<PluginInformation> c : p.values())\r\n\t\t\tfor (PluginInformation info : c)\r\n\t\t\t\tallPluginLibraries.addAll(info.libraries);\r\n\t\t// create a classloader for all plugins:\r\n\t\tURL[] jarUrls = new URL[allPluginLibraries.size()];\r\n\t\tjarUrls = allPluginLibraries.toArray(jarUrls);\r\n\t\tURLClassLoader pluginClassLoader = new URLClassLoader(jarUrls, Main.class.getClassLoader());\r\n\t\tImageProvider.sources.add(0, pluginClassLoader);\r\n\r\n\t\tfor (Collection<PluginInformation> c : p.values()) {\r\n\t\t\tfor (PluginInformation info : c) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tClass<?> klass = info.loadClass(pluginClassLoader);\r\n\t\t\t\t\tif (klass != null) {\r\n\t\t\t\t\t\tSystem.out.println(\"loading \"+info.name);\r\n\t\t\t\t\t\tMain.plugins.add(info.load(klass));\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\tboolean remove = true;\n\t\t\t\t\tif (early)\r\n\t\t\t\t\t\tSystem.out.println(\"Could not load plugin: \"+info.name+\" - deleted from preferences\"); // do not translate\r\n\t\t\t\t\telse {\n\t\t\t\t\t\tint answer = JOptionPane.showConfirmDialog(Main.parent,\n\t\t\t\t\t\t\ttr(\"Could not load plugin {0}. Delete from preferences?\", info.name,\n\t\t\t\t\t\t\tJOptionPane.YES_NO_OPTION));\n\t\t\t\t\t\tif (answer != JOptionPane.OK_OPTION) {\n\t\t\t\t\t\t\tremove = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (remove) {\n\t\t\t\t\t\tplugins.remove(info.name);\n\t\t\t\t\t\tString plist = null;\n\t\t\t\t\t\tfor (String pn : plugins) { \n\t\t\t\t\t\t\tif (plist==null) plist=\"\"; else plist=plist+\",\";\n\t\t\t\t\t\t\tplist=plist+pn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tMain.pref.put(\"plugins\", plist);\r\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"c5f619a031ed8e07bcca04ba66fc2b3a3118d2d8","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override\n    public List<? extends ResourceTag> listTags(ListTagsCmd cmd) {\n        Account caller = UserContext.current().getCaller();\n        List<Long> permittedAccounts = new ArrayList<Long>();\n        String key = cmd.getKey();\n        String value = cmd.getValue();\n        String resourceId = cmd.getResourceId();\n        String resourceType = cmd.getResourceType();\n        String customerName = cmd.getCustomer();\n        boolean listAll = cmd.listAll();\n\n        Ternary<Long, Boolean, ListProjectResourcesCriteria> domainIdRecursiveListProject = \n                new Ternary<Long, Boolean, ListProjectResourcesCriteria>(cmd.getDomainId(), cmd.isRecursive(), null);\n       _accountMgr.buildACLSearchParameters(caller, null, cmd.getAccountName(), \n               cmd.getProjectId(), permittedAccounts, domainIdRecursiveListProject, listAll, false);\n           Long domainId = domainIdRecursiveListProject.first();\n       Boolean isRecursive = domainIdRecursiveListProject.second();\n       ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n       Filter searchFilter = new Filter(ResourceTagVO.class, \"resourceType\", false, cmd.getStartIndex(), cmd.getPageSizeVal());\n       \n       SearchBuilder<ResourceTagVO> sb = _resourceTagDao.createSearchBuilder();\n       _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n\n       sb.and(\"key\", sb.entity().getKey(), SearchCriteria.Op.EQ);\n       sb.and(\"value\", sb.entity().getValue(), SearchCriteria.Op.EQ);\n       sb.and().op(\"resourceId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n       sb.or(\"resourceUuid\", sb.entity().getResourceUuid(), SearchCriteria.Op.EQ);\n       sb.cp();\n       sb.and(\"resourceType\", sb.entity().getResourceType(), SearchCriteria.Op.EQ);\n       sb.and(\"customer\", sb.entity().getCustomer(), SearchCriteria.Op.EQ);\n       \n       // now set the SC criteria...\n       SearchCriteria<ResourceTagVO> sc = sb.create();\n       _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n       \n       if (key != null) {\n           sc.setParameters(\"key\", key);\n       }\n       \n       if (value != null) {\n           sc.setParameters(\"value\", value);\n       }\n       \n       if (resourceId != null) {\n           sc.setParameters(\"resourceId\", resourceId);\n           sc.setParameters(\"resourceUuid\", resourceId);\n       }\n       \n       if (resourceType != null) {\n           sc.setParameters(\"resourceType\", resourceType);\n       }\n       \n       if (customerName != null) {\n           sc.setParameters(\"customer\", customerName);\n       }\n       \n       return _resourceTagDao.search(sc, searchFilter);\n    }","id":94020,"modified_method":"@Override\n    public List<? extends ResourceTag> listTags(ListTagsCmd cmd) {\n        Account caller = UserContext.current().getCaller();\n        List<Long> permittedAccounts = new ArrayList<Long>();\n        String key = cmd.getKey();\n        String value = cmd.getValue();\n        String resourceId = cmd.getResourceId();\n        String resourceType = cmd.getResourceType();\n        String customerName = cmd.getCustomer();\n        boolean listAll = cmd.listAll();\n\n        Ternary<Long, Boolean, ListProjectResourcesCriteria> domainIdRecursiveListProject = \n                new Ternary<Long, Boolean, ListProjectResourcesCriteria>(cmd.getDomainId(), cmd.isRecursive(), null);\n       _accountMgr.buildACLSearchParameters(caller, null, cmd.getAccountName(), \n               cmd.getProjectId(), permittedAccounts, domainIdRecursiveListProject, listAll, false);\n           Long domainId = domainIdRecursiveListProject.first();\n       Boolean isRecursive = domainIdRecursiveListProject.second();\n       ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n       Filter searchFilter = new Filter(ResourceTagVO.class, \"resourceType\", false, cmd.getStartIndex(), cmd.getPageSizeVal());\n       \n       SearchBuilder<ResourceTagVO> sb = _resourceTagDao.createSearchBuilder();\n       _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n\n       sb.and(\"key\", sb.entity().getKey(), SearchCriteria.Op.EQ);\n       sb.and(\"value\", sb.entity().getValue(), SearchCriteria.Op.EQ);\n       \n       if (resourceId != null) {\n           sb.and().op(\"resourceId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n           sb.or(\"resourceUuid\", sb.entity().getResourceUuid(), SearchCriteria.Op.EQ);\n           sb.cp();  \n       }\n       \n       sb.and(\"resourceType\", sb.entity().getResourceType(), SearchCriteria.Op.EQ);\n       sb.and(\"customer\", sb.entity().getCustomer(), SearchCriteria.Op.EQ);\n       \n       // now set the SC criteria...\n       SearchCriteria<ResourceTagVO> sc = sb.create();\n       _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n       \n       if (key != null) {\n           sc.setParameters(\"key\", key);\n       }\n       \n       if (value != null) {\n           sc.setParameters(\"value\", value);\n       }\n       \n       if (resourceId != null) {\n           sc.setParameters(\"resourceId\", resourceId);\n           sc.setParameters(\"resourceUuid\", resourceId);\n       }\n       \n       if (resourceType != null) {\n           sc.setParameters(\"resourceType\", resourceType);\n       }\n       \n       if (customerName != null) {\n           sc.setParameters(\"customer\", customerName);\n       }\n       \n       return _resourceTagDao.search(sc, searchFilter);\n    }","commit_id":"ab2669b01d083dcb15fed94da27b534a779f1adc","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * @param entries Entries.\n     */\n    private void map(Iterable<GridDhtCacheEntry> entries) {\n        if (!mapped.compareAndSet(false, true)) {\n            if (log.isDebugEnabled())\n                log.debug(\"Will not map DHT lock future (other thread is mapping): \" + this);\n\n            return;\n        }\n\n        try {\n            if (log.isDebugEnabled())\n                log.debug(\"Mapping entry for DHT lock future: \" + this);\n\n            boolean hasRmtNodes = false;\n\n            // Assign keys to primary nodes.\n            for (GridDhtCacheEntry entry : entries) {\n                try {\n                    while (true) {\n                        try {\n                            hasRmtNodes = cctx.dhtMap(nearNodeId, topVer, entry, log, dhtMap, null);\n\n                            GridCacheMvccCandidate cand = entry.mappings(lockVer);\n\n                            // Possible in case of lock cancellation.\n                            if (cand == null) {\n                                onFailed(false);\n\n                                // Will mark initialized in finally block.\n                                return;\n                            }\n\n                            break;\n                        }\n                        catch (GridCacheEntryRemovedException ignore) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"Got removed entry when mapping DHT lock future (will retry): \" + entry);\n\n                            entry = cctx.dht().entryExx(entry.key(), topVer);\n                        }\n                    }\n                }\n                catch (GridDhtInvalidPartitionException e) {\n                    assert false : \"DHT lock should never get invalid partition [err=\" + e + \", fut=\" + this + ']';\n                }\n            }\n\n            if (tx != null)\n                tx.needsCompletedVersions(hasRmtNodes);\n\n            if (isDone()) {\n                if (log.isDebugEnabled())\n                    log.debug(\"Mapping won't proceed because future is done: \" + this);\n\n                return;\n            }\n\n            if (log.isDebugEnabled())\n                log.debug(\"Mapped DHT lock future [dhtMap=\" + F.nodeIds(dhtMap.keySet()) + \", dhtLockFut=\" + this + ']');\n\n            // Create mini futures.\n            for (Map.Entry<ClusterNode, List<GridDhtCacheEntry>> mapped : dhtMap.entrySet()) {\n                ClusterNode n = mapped.getKey();\n\n                List<GridDhtCacheEntry> dhtMapping = mapped.getValue();\n\n                int cnt = F.size(dhtMapping);\n\n                if (cnt > 0) {\n                    assert !n.id().equals(cctx.localNodeId());\n\n                    MiniFuture fut = new MiniFuture(n, dhtMapping);\n\n                    GridDhtLockRequest req = new GridDhtLockRequest(\n                        cctx.cacheId(),\n                        nearNodeId,\n                        inTx() ? tx.nearXidVersion() : null,\n                        threadId,\n                        futId,\n                        fut.futureId(),\n                        lockVer,\n                        topVer,\n                        inTx(),\n                        read,\n                        isolation(),\n                        isInvalidate(),\n                        timeout,\n                        cnt,\n                        0,\n                        inTx() ? tx.size() : cnt,\n                        inTx() ? tx.groupLockKey() : null,\n                        inTx() && tx.partitionLock(),\n                        inTx() ? tx.subjectId() : null,\n                        inTx() ? tx.taskNameHash() : 0,\n                        read ? accessTtl : -1L);\n\n                    try {\n                        for (ListIterator<GridDhtCacheEntry> it = dhtMapping.listIterator(); it.hasNext();) {\n                            GridDhtCacheEntry e = it.next();\n\n                            // Must unswap entry so that isNewLocked returns correct value.\n                            e.unswap(false);\n\n                            boolean needVal = false;\n\n                            try {\n                                needVal = e.isNewLocked();\n\n                                if (needVal) {\n                                    List<ClusterNode> owners = cctx.topology().owners(e.partition(),\n                                        tx != null ? tx.topologyVersion() : cctx.affinity().affinityTopologyVersion());\n\n                                    // Do not preload if local node is partition owner.\n                                    if (owners.contains(cctx.localNode()))\n                                        needVal = false;\n                                }\n                            }\n                            catch (GridCacheEntryRemovedException ex) {\n                                assert false : \"Entry cannot become obsolete when DHT local candidate is added \" +\n                                    \"[e=\" + e + \", ex=\" + ex + ']';\n                            }\n\n                            // Skip entry if it is not new and is not present in updated mapping.\n                            if (tx != null && !needVal)\n                                continue;\n\n                            boolean invalidateRdr = e.readerId(n.id()) != null;\n\n                            req.addDhtKey(\n                                e.key(),\n                                invalidateRdr,\n                                cctx);\n\n                            if (needVal)\n                                // Mark last added key as needed to be preloaded.\n                                req.markLastKeyForPreload();\n\n                            it.set(addOwned(req, e));\n                        }\n\n                        add(fut); // Append new future.\n\n                        if (log.isDebugEnabled())\n                            log.debug(\"Sending DHT lock request to DHT node [node=\" + n.id() + \", req=\" + req + ']');\n\n                        cctx.io().send(n, req, cctx.ioPolicy());\n                    }\n                    catch (IgniteCheckedException e) {\n                        // Fail the whole thing.\n                        if (e instanceof ClusterTopologyCheckedException)\n                            fut.onResult((ClusterTopologyCheckedException)e);\n                        else\n                            fut.onResult(e);\n                    }\n                }\n            }\n        }\n        finally {\n            markInitialized();\n        }\n    }","id":94021,"modified_method":"/**\n     * @param entries Entries.\n     */\n    private void map(Iterable<GridDhtCacheEntry> entries) {\n        if (!mapped.compareAndSet(false, true)) {\n            if (log.isDebugEnabled())\n                log.debug(\"Will not map DHT lock future (other thread is mapping): \" + this);\n\n            return;\n        }\n\n        try {\n            if (log.isDebugEnabled())\n                log.debug(\"Mapping entry for DHT lock future: \" + this);\n\n            boolean hasRmtNodes = false;\n\n            // Assign keys to primary nodes.\n            for (GridDhtCacheEntry entry : entries) {\n                try {\n                    while (true) {\n                        try {\n                            hasRmtNodes = cctx.dhtMap(nearNodeId, topVer, entry, log, dhtMap, null);\n\n                            GridCacheMvccCandidate cand = entry.mappings(lockVer);\n\n                            // Possible in case of lock cancellation.\n                            if (cand == null) {\n                                onFailed(false);\n\n                                // Will mark initialized in finally block.\n                                return;\n                            }\n\n                            break;\n                        }\n                        catch (GridCacheEntryRemovedException ignore) {\n                            if (log.isDebugEnabled())\n                                log.debug(\"Got removed entry when mapping DHT lock future (will retry): \" + entry);\n\n                            entry = cctx.dht().entryExx(entry.key(), topVer);\n                        }\n                    }\n                }\n                catch (GridDhtInvalidPartitionException e) {\n                    assert false : \"DHT lock should never get invalid partition [err=\" + e + \", fut=\" + this + ']';\n                }\n            }\n\n            if (tx != null)\n                tx.needsCompletedVersions(hasRmtNodes);\n\n            if (isDone()) {\n                if (log.isDebugEnabled())\n                    log.debug(\"Mapping won't proceed because future is done: \" + this);\n\n                return;\n            }\n\n            if (log.isDebugEnabled())\n                log.debug(\"Mapped DHT lock future [dhtMap=\" + F.nodeIds(dhtMap.keySet()) + \", dhtLockFut=\" + this + ']');\n\n            // Create mini futures.\n            for (Map.Entry<ClusterNode, List<GridDhtCacheEntry>> mapped : dhtMap.entrySet()) {\n                ClusterNode n = mapped.getKey();\n\n                List<GridDhtCacheEntry> dhtMapping = mapped.getValue();\n\n                int cnt = F.size(dhtMapping);\n\n                if (cnt > 0) {\n                    assert !n.id().equals(cctx.localNodeId());\n\n                    MiniFuture fut = new MiniFuture(n, dhtMapping);\n\n                    GridDhtLockRequest req = new GridDhtLockRequest(\n                        cctx.cacheId(),\n                        nearNodeId,\n                        inTx() ? tx.nearXidVersion() : null,\n                        threadId,\n                        futId,\n                        fut.futureId(),\n                        lockVer,\n                        topVer,\n                        inTx(),\n                        read,\n                        isolation(),\n                        isInvalidate(),\n                        timeout,\n                        cnt,\n                        0,\n                        inTx() ? tx.size() : cnt,\n                        inTx() ? tx.groupLockKey() : null,\n                        inTx() && tx.partitionLock(),\n                        inTx() ? tx.subjectId() : null,\n                        inTx() ? tx.taskNameHash() : 0,\n                        read ? accessTtl : -1L);\n\n                    try {\n                        for (ListIterator<GridDhtCacheEntry> it = dhtMapping.listIterator(); it.hasNext();) {\n                            GridDhtCacheEntry e = it.next();\n\n                            // Must unswap entry so that isNewLocked returns correct value.\n                            e.unswap(false);\n\n                            boolean needVal = false;\n\n                            try {\n                                needVal = e.isNewLocked();\n\n                                if (needVal) {\n                                    List<ClusterNode> owners = cctx.topology().owners(e.partition(),\n                                        tx != null ? tx.topologyVersion() : cctx.affinity().affinityTopologyVersion());\n\n                                    // Do not preload if local node is partition owner.\n                                    if (owners.contains(cctx.localNode()))\n                                        needVal = false;\n                                }\n                            }\n                            catch (GridCacheEntryRemovedException ex) {\n                                assert false : \"Entry cannot become obsolete when DHT local candidate is added \" +\n                                    \"[e=\" + e + \", ex=\" + ex + ']';\n                            }\n\n                            // Skip entry if it is not new and is not present in updated mapping.\n                            if (tx != null && !needVal)\n                                continue;\n\n                            boolean invalidateRdr = e.readerId(n.id()) != null;\n\n                            req.addDhtKey(\n                                e.key(),\n                                invalidateRdr,\n                                cctx);\n\n                            if (needVal) {\n                                // Mark last added key as needed to be preloaded.\n                                req.markLastKeyForPreload();\n\n                                if (tx != null) {\n                                    IgniteTxEntry txEntry = tx.entry(e.txKey());\n\n                                    // NOOP entries will be sent to backups on prepare step.\n                                    txEntry.op(GridCacheOperation.NOOP);\n                                }\n                            }\n\n                            it.set(addOwned(req, e));\n                        }\n\n                        add(fut); // Append new future.\n\n                        if (log.isDebugEnabled())\n                            log.debug(\"Sending DHT lock request to DHT node [node=\" + n.id() + \", req=\" + req + ']');\n\n                        cctx.io().send(n, req, cctx.ioPolicy());\n                    }\n                    catch (IgniteCheckedException e) {\n                        // Fail the whole thing.\n                        if (e instanceof ClusterTopologyCheckedException)\n                            fut.onResult((ClusterTopologyCheckedException)e);\n                        else\n                            fut.onResult(e);\n                    }\n                }\n            }\n        }\n        finally {\n            markInitialized();\n        }\n    }","commit_id":"92a7aad4ccf673d0161ce0f6d4d6b7025f67dd08","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @param msgId Message ID.\n     * @param e Entry to add.\n     * @return Future for active transactions for the time when reader was added.\n     * @throws IgniteCheckedException If failed.\n     */\n    @Nullable public IgniteInternalFuture<Boolean> addEntry(long msgId, IgniteTxEntry e) throws IgniteCheckedException {\n        init();\n\n        TransactionState state = state();\n\n        assert state == PREPARING : \"Invalid tx state for \" +\n            \"adding entry [msgId=\" + msgId + \", e=\" + e + \", tx=\" + this + ']';\n\n        e.unmarshal(cctx, false, cctx.deploy().globalLoader());\n\n        checkInternal(e.txKey());\n\n        GridCacheContext cacheCtx = e.context();\n\n        GridDhtCacheAdapter dhtCache = cacheCtx.isNear() ? cacheCtx.near().dht() : cacheCtx.dht();\n\n        try {\n            IgniteTxEntry entry = txMap.get(e.txKey());\n\n            if (entry != null) {\n                entry.op(e.op()); // Absolutely must set operation, as default is DELETE.\n                entry.value(e.value(), e.hasWriteValue(), e.hasReadValue());\n                entry.entryProcessors(e.entryProcessors());\n                entry.ttl(e.ttl());\n                entry.filters(e.filters());\n                entry.expiry(e.expiry());\n\n                entry.conflictExpireTime(e.conflictExpireTime());\n                entry.conflictVersion(e.conflictVersion());\n            }\n            else {\n                entry = e;\n\n                addActiveCache(dhtCache.context());\n\n                GridDhtCacheEntry cached = dhtCache.entryExx(entry.key(), topologyVersion());\n\n                entry.cached(cached);\n\n                GridCacheVersion explicit = entry.explicitVersion();\n\n                if (explicit != null) {\n                    GridCacheVersion dhtVer = cctx.mvcc().mappedVersion(explicit);\n\n                    if (dhtVer == null)\n                        throw new IgniteCheckedException(\"Failed to find dht mapping for explicit entry version: \" + entry);\n\n                    entry.explicitVersion(dhtVer);\n                }\n\n                txMap.put(entry.txKey(), entry);\n\n                if (log.isDebugEnabled())\n                    log.debug(\"Added entry to transaction: \" + entry);\n            }\n\n            return addReader(msgId, dhtCache.entryExx(entry.key()), entry, topologyVersion());\n        }\n        catch (GridDhtInvalidPartitionException ex) {\n            addInvalidPartition(cacheCtx, ex.partition());\n\n            return new GridFinishedFuture<>(true);\n        }\n    }","id":94022,"modified_method":"/**\n     * @param msgId Message ID.\n     * @param e Entry to add.\n     * @return Future for active transactions for the time when reader was added.\n     * @throws IgniteCheckedException If failed.\n     */\n    @Nullable public IgniteInternalFuture<Boolean> addEntry(long msgId, IgniteTxEntry e) throws IgniteCheckedException {\n        init();\n\n        TransactionState state = state();\n\n        assert state == PREPARING : \"Invalid tx state for \" +\n            \"adding entry [msgId=\" + msgId + \", e=\" + e + \", tx=\" + this + ']';\n\n        e.unmarshal(cctx, false, cctx.deploy().globalLoader());\n\n        checkInternal(e.txKey());\n\n        GridCacheContext cacheCtx = e.context();\n\n        GridDhtCacheAdapter dhtCache = cacheCtx.isNear() ? cacheCtx.near().dht() : cacheCtx.dht();\n\n        try {\n            IgniteTxEntry existing = txMap.get(e.txKey());\n\n            if (existing != null) {\n                // Must keep NOOP operation if received READ because it means that the lock was sent to a backup node.\n                if (e.op() == READ) {\n                    if (existing.op() != NOOP)\n                        existing.op(e.op());\n                }\n                else\n                    existing.op(e.op()); // Absolutely must set operation, as default is DELETE.\n\n                existing.value(e.value(), e.hasWriteValue(), e.hasReadValue());\n                existing.entryProcessors(e.entryProcessors());\n                existing.ttl(e.ttl());\n                existing.filters(e.filters());\n                existing.expiry(e.expiry());\n\n                existing.conflictExpireTime(e.conflictExpireTime());\n                existing.conflictVersion(e.conflictVersion());\n            }\n            else {\n                existing = e;\n\n                addActiveCache(dhtCache.context());\n\n                GridDhtCacheEntry cached = dhtCache.entryExx(existing.key(), topologyVersion());\n\n                existing.cached(cached);\n\n                GridCacheVersion explicit = existing.explicitVersion();\n\n                if (explicit != null) {\n                    GridCacheVersion dhtVer = cctx.mvcc().mappedVersion(explicit);\n\n                    if (dhtVer == null)\n                        throw new IgniteCheckedException(\"Failed to find dht mapping for explicit entry version: \" + existing);\n\n                    existing.explicitVersion(dhtVer);\n                }\n\n                txMap.put(existing.txKey(), existing);\n\n                if (log.isDebugEnabled())\n                    log.debug(\"Added entry to transaction: \" + existing);\n            }\n\n            return addReader(msgId, dhtCache.entryExx(existing.key()), existing, topologyVersion());\n        }\n        catch (GridDhtInvalidPartitionException ex) {\n            addInvalidPartition(cacheCtx, ex.partition());\n\n            return new GridFinishedFuture<>(true);\n        }\n    }","commit_id":"92a7aad4ccf673d0161ce0f6d4d6b7025f67dd08","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * @return IgniteCache test suite.\n     * @throws Exception Thrown in case of the failure.\n     */\n    public static TestSuite suite() throws Exception {\n        TestSuite suite = new TestSuite(\"IgniteCache Test Suite\");\n\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicReplicatedTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicLocalTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxReplicatedTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxLocalTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerEagerTtlDisabledTest.class);\n\n        suite.addTestSuite(IgniteClientAffinityAssignmentSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderWithStoreInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalWithStoreInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalInvokeTest.class);\n        suite.addTestSuite(IgniteCrossCacheTxStoreSelfTest.class);\n\n        suite.addTestSuite(IgnitePutAllLargeBatchSelfTest.class);\n        suite.addTestSuite(IgnitePutAllUpdateNonPreloadedPartitionSelfTest.class);\n\n        // User's class loader tests.\n        suite.addTestSuite(IgniteCacheAtomicExecutionContextTest.class);\n        suite.addTestSuite(IgniteCachePartitionedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheReplicatedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheTxExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheContinuousExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheIsolatedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheP2PDisableExecutionContextTest.class);\n        suite.addTestSuite(IgniteCachePrivateExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheSharedExecutionContextTest.class);\n\n        // Affinity tests.\n        suite.addTestSuite(GridFairAffinityFunctionNodesSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityBackupsSelfTest.class);\n        suite.addTestSuite(IgniteCacheAffinitySelfTest.class);\n\n        // Swap tests.\n        suite.addTestSuite(GridCacheSwapPreloadSelfTest.class);\n        suite.addTestSuite(GridCacheSwapReloadSelfTest.class);\n\n        // Common tests.\n        suite.addTestSuite(GridCacheConcurrentMapSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityMapperSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityRoutingSelfTest.class);\n        suite.addTestSuite(GridCacheMvccSelfTest.class);\n        suite.addTestSuite(GridCacheMvccPartitionedSelfTest.class);\n        suite.addTestSuite(GridCacheMvccManagerSelfTest.class);\n//        suite.addTestSuite(GridCacheP2PUndeploySelfTest.class); TODO uncomment in DR branch.\n        suite.addTestSuite(GridCacheConfigurationValidationSelfTest.class);\n        suite.addTestSuite(GridCacheConfigurationConsistencySelfTest.class);\n        suite.addTestSuite(GridCacheJdbcBlobStoreSelfTest.class);\n        suite.addTestSuite(GridCacheJdbcBlobStoreMultithreadedSelfTest.class);\n        suite.addTestSuite(CacheJdbcPojoStoreTest.class);\n        suite.addTestSuite(CacheJdbcPojoStoreMultitreadedSelfTest.class);\n        suite.addTestSuite(GridCacheBalancingStoreSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityApiSelfTest.class);\n        suite.addTestSuite(GridCacheStoreValueBytesSelfTest.class);\n        suite.addTestSuite(DataStreamProcessorSelfTest.class);\n        suite.addTestSuite(DataStreamerImplSelfTest.class);\n        suite.addTestSuite(GridCacheEntryMemorySizeSelfTest.class);\n        suite.addTestSuite(GridCacheClearAllSelfTest.class);\n        suite.addTestSuite(GridCacheObjectToStringSelfTest.class);\n        suite.addTestSuite(GridCacheLoadOnlyStoreAdapterSelfTest.class);\n        suite.addTestSuite(GridCacheGetStoreErrorSelfTest.class);\n        suite.addTestSuite(GridCacheAsyncOperationsLimitSelfTest.class);\n        suite.addTestSuite(GridCacheTtlManagerSelfTest.class);\n        suite.addTestSuite(GridCacheLifecycleAwareSelfTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStopBusySelfTest.class);\n        // suite.addTestSuite(IgniteCacheTransactionalStopBusySelfTest.class); TODO Ignite-257.\n        suite.addTestSuite(GridCacheAtomicNearCacheSelfTest.class);\n        suite.addTestSuite(CacheAtomicNearUpdateTopologyChangeTest.class);\n        suite.addTestSuite(CacheTxNearUpdateTopologyChangeTest.class);\n        suite.addTestSuite(GridCacheStorePutxSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapMultiThreadedUpdateSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapAtomicMultiThreadedUpdateSelfTest.class);\n        suite.addTestSuite(GridCacheColocatedTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheNearTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheMissingCommitVersionSelfTest.class);\n        suite.addTestSuite(GridCacheEntrySetIterationPreloadingSelfTest.class);\n        suite.addTestSuite(GridCacheMixedPartitionExchangeSelfTest.class);\n        suite.addTestSuite(GridCacheAtomicTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredEvictionAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredEvictionSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredSelfTest.class);\n        suite.addTestSuite(GridCacheGlobalLoadTest.class);\n        suite.addTestSuite(GridCachePartitionedLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOffHeapLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCacheTxPartitionedLocalStoreSelfTest.class);\n        suite.addTestSuite(IgniteCacheSystemTransactionsSelfTest.class);\n\n        // Heuristic exception handling. TODO IGNITE-257\n//        suite.addTestSuite(GridCacheColocatedTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheReplicatedTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheLocalTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheNearTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheStopSelfTest.class); TODO IGNITE-257\n\n        // Local cache.\n        suite.addTestSuite(GridCacheLocalBasicApiSelfTest.class);\n        suite.addTestSuite(GridCacheLocalBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalAtomicBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalAtomicGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalLoadAllSelfTest.class);\n        suite.addTestSuite(GridCacheLocalLockSelfTest.class);\n        suite.addTestSuite(GridCacheLocalMultithreadedSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxSingleThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheLocalEventSelfTest.class);\n        suite.addTestSuite(GridCacheLocalEvictionEventSelfTest.class);\n        suite.addTestSuite(GridCacheVariableTopologySelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxMultiThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheTransformEventSelfTest.class);\n\n        // Partitioned cache.\n        suite.addTestSuite(GridCachePartitionedGetSelfTest.class);\n        suite.addTest(new TestSuite(GridCachePartitionedBasicApiTest.class));\n        suite.addTest(new TestSuite(GridCacheNearMultiGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearJobExecutionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearOneNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinitySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheRendezvousAffinityFunctionExcludeNeighborsSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheRendezvousAffinityClientSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedProjectionAffinitySelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicOpSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedGetAndTransformStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAtomicGetAndTransformStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicStoreMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedNearDisabledBasicStoreMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedLockSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiNodeLockSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiThreadedPutGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedNodeFailureSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedExplicitLockNodeFailureSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedTxSingleThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedTxSingleThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedTxTimeoutSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheFinishPartitionsSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEntrySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtInternalEntrySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtMappingSelfTest.class));\n//        suite.addTest(new TestSuite(GridCachePartitionedTxMultiThreadedSelfTest.class)); TODO-gg-4066\n        suite.addTest(new TestSuite(GridCacheDhtPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadOffHeapSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadBigDataSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadPutGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadDisabledSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadMultiThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedPreloadRestartSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearPreloadRestartSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadStartStopSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadUnloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinityFilterSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedPreloadLifecycleSelfTest.class));\n//        suite.addTest(new TestSuite(GridCacheLoadingConcurrentGridStartTest.class));  TODO-ignite-500\n        suite.addTest(new TestSuite(GridCacheDhtPreloadDelayedSelfTest.class));\n        suite.addTest(new TestSuite(GridPartitionedBackupLoadSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedLoadCacheSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionNotLoadedEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionsDisabledSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearEvictionEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearEvictionEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheReplicatedEvictionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtAtomicEvictionNearReadersSelfTest.class));\n//        suite.addTest(new TestSuite(GridCachePartitionedTopologyChangeSelfTest.class)); TODO-gg-5489\n        suite.addTest(new TestSuite(GridCachePartitionedPreloadEventsSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedUnloadEventsSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinityHashIdResolverSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedOptimisticTransactionSelfTest.class));\n        suite.addTestSuite(GridCacheAtomicMessageCountSelfTest.class);\n        suite.addTest(new TestSuite(GridCacheNearPartitionedClearSelfTest.class));\n\n        suite.addTest(new TestSuite(GridCacheDhtExpiredEntriesPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearExpiredEntriesPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicExpiredEntriesPreloadSelfTest.class));\n\n        suite.addTest(new TestSuite(GridCacheOffheapUpdateSelfTest.class));\n\n        // TODO: GG-7242, GG-7243: Enabled when fixed.\n//        suite.addTest(new TestSuite(GridCacheDhtRemoveFailureTest.class));\n//        suite.addTest(new TestSuite(GridCacheNearRemoveFailureTest.class));\n        // TODO: GG-7201: Enable when fixed.\n        //suite.addTest(new TestSuite(GridCacheDhtAtomicRemoveFailureTest.class));\n\n        suite.addTest(new TestSuite(GridCacheNearPrimarySyncSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedPrimarySyncSelfTest.class));\n\n        // Value consistency tests.\n        suite.addTestSuite(GridCacheValueConsistencyAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicPrimaryWriteOrderSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicPrimaryWriteOrderNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyTransactionalSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyTransactionalNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueBytesPreloadingSelfTest.class);\n\n        // Replicated cache.\n        suite.addTestSuite(GridCacheReplicatedBasicApiTest.class);\n        suite.addTestSuite(GridCacheReplicatedBasicOpSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedAtomicGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedEventSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedSynchronousCommitTest.class);\n\n        // TODO: GG-7437.\n        // suite.addTestSuite(GridCacheReplicatedInvalidateSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedLockSelfTest.class);\n        // TODO: enable when GG-7437 is fixed.\n        //suite.addTestSuite(GridCacheReplicatedMultiNodeLockSelfTest.class);\n        //suite.addTestSuite(GridCacheReplicatedMultiNodeSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedNodeFailureSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxSingleThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadOffHeapSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadLifecycleSelfTest.class);\n        suite.addTestSuite(GridCacheSyncReplicatedPreloadSelfTest.class);\n\n        suite.addTestSuite(GridCacheDeploymentSelfTest.class);\n        suite.addTestSuite(GridCacheDeploymentOffHeapSelfTest.class);\n\n        suite.addTestSuite(GridCachePutArrayValueSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedUnswapAdvancedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedEvictionEventSelfTest.class);\n        // TODO: GG-7569.\n        // suite.addTestSuite(GridCacheReplicatedTxMultiThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadEventsSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadStartStopEventsSelfTest.class);\n        // TODO: GG-7434\n        // suite.addTestSuite(GridReplicatedTxPreloadTest.class);\n\n        suite.addTestSuite(IgniteTxReentryNearSelfTest.class);\n        suite.addTestSuite(IgniteTxReentryColocatedSelfTest.class);\n\n        suite.addTestSuite(GridCacheOrderedPreloadingSelfTest.class);\n\n        // Test for byte array value special case.\n//        suite.addTestSuite(GridCacheLocalByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheNearPartitionedP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheNearPartitionedP2PDisabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOnlyP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOnlyP2PDisabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedP2PDisabledByteArrayValuesSelfTest.class);\n\n        // Near-only cache.\n        suite.addTest(IgniteCacheNearOnlySelfTestSuite.suite());\n\n        // Test cache with daemon nodes.\n        suite.addTestSuite(GridCacheDaemonNodeLocalSelfTest.class);\n        suite.addTestSuite(GridCacheDaemonNodePartitionedSelfTest.class);\n        suite.addTestSuite(GridCacheDaemonNodeReplicatedSelfTest.class);\n\n        // Write-behind.\n        suite.addTest(IgniteCacheWriteBehindTestSuite.suite());\n\n        // Transform.\n        suite.addTestSuite(GridCachePartitionedTransformWriteThroughBatchUpdateSelfTest.class);\n\n        suite.addTestSuite(GridCacheEntryVersionSelfTest.class);\n        suite.addTestSuite(GridCacheVersionSelfTest.class);\n\n        // Memory leak tests.\n        suite.addTestSuite(GridCacheReferenceCleanupSelfTest.class);\n        suite.addTestSuite(GridCacheReloadSelfTest.class);\n\n        suite.addTestSuite(GridCacheMixedModeSelfTest.class);\n\n        // Cache metrics.\n        suite.addTest(IgniteCacheMetricsSelfTestSuite.suite());\n\n        // Eviction.\n        suite.addTest(IgniteCacheEvictionSelfTestSuite.suite());\n\n        // Iterators.\n        suite.addTest(IgniteCacheIteratorsSelfTestSuite.suite());\n\n        // Add tx recovery test suite.\n        suite.addTest(IgniteCacheTxRecoverySelfTestSuite.suite());\n\n        // Cache interceptor tests.\n        suite.addTest(IgniteCacheInterceptorSelfTestSuite.suite());\n\n        // Multi node update.\n        suite.addTestSuite(GridCacheMultinodeUpdateSelfTest.class);\n        // TODO: GG-5353.\n        // suite.addTestSuite(GridCacheMultinodeUpdateNearEnabledSelfTest.class);\n        // suite.addTestSuite(GridCacheMultinodeUpdateNearEnabledNoBackupsSelfTest.class);\n        suite.addTestSuite(GridCacheMultinodeUpdateAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheMultinodeUpdateAtomicNearEnabledSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheTxLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalLoadAllTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLoaderWriterTest.class);\n        suite.addTestSuite(IgniteCacheTxLoaderWriterTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicStoreSessionTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreSessionTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStoreSessionWriteBehindTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreSessionWriteBehindTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoReadThroughTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoLoadPreviousValueTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoWriteThroughTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicReplicatedPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxNearPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxReplicatedPeekModesTest.class);\n\n        // TODO: IGNITE-114.\n        // suite.addTestSuite(IgniteCacheInvokeReadThroughTest.class);\n        // suite.addTestSuite(GridCacheVersionMultinodeTest.class);\n\n        suite.addTestSuite(IgniteCacheNearReadCommittedTest.class);\n        suite.addTestSuite(IgniteCacheAtomicCopyOnReadDisabledTest.class);\n        suite.addTestSuite(IgniteCacheTxCopyOnReadDisabledTest.class);\n\n        // TODO: IGNITE-477.\n        // suite.addTestSuite(IgniteCacheTxPreloadNoWriteTest.class);\n\n        suite.addTestSuite(IgniteDynamicCacheStartSelfTest.class);\n        suite.addTestSuite(IgniteCacheDynamicStopSelfTest.class);\n\n        suite.addTestSuite(GridCacheTxLoadFromStoreOnLockSelfTest.class);\n\n        suite.addTestSuite(GridCacheMarshallingNodeJoinSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheJdbcBlobStoreNodeRestartTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLocalStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderNearEnabledStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledStoreValueTest.class);\n\n        return suite;\n    }","id":94023,"modified_method":"/**\n     * @return IgniteCache test suite.\n     * @throws Exception Thrown in case of the failure.\n     */\n    public static TestSuite suite() throws Exception {\n        TestSuite suite = new TestSuite(\"IgniteCache Test Suite\");\n\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicReplicatedTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerAtomicLocalTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxReplicatedTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerTxLocalTest.class);\n        suite.addTestSuite(IgniteCacheEntryListenerEagerTtlDisabledTest.class);\n\n        suite.addTestSuite(IgniteClientAffinityAssignmentSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderWithStoreInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalInvokeTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalWithStoreInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledInvokeTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalInvokeTest.class);\n        suite.addTestSuite(IgniteCrossCacheTxStoreSelfTest.class);\n\n        suite.addTestSuite(IgnitePutAllLargeBatchSelfTest.class);\n        suite.addTestSuite(IgnitePutAllUpdateNonPreloadedPartitionSelfTest.class);\n\n        // User's class loader tests.\n        suite.addTestSuite(IgniteCacheAtomicExecutionContextTest.class);\n        suite.addTestSuite(IgniteCachePartitionedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheReplicatedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheTxExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheContinuousExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheIsolatedExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheP2PDisableExecutionContextTest.class);\n        suite.addTestSuite(IgniteCachePrivateExecutionContextTest.class);\n        suite.addTestSuite(IgniteCacheSharedExecutionContextTest.class);\n\n        // Affinity tests.\n        suite.addTestSuite(GridFairAffinityFunctionNodesSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityBackupsSelfTest.class);\n        suite.addTestSuite(IgniteCacheAffinitySelfTest.class);\n\n        // Swap tests.\n        suite.addTestSuite(GridCacheSwapPreloadSelfTest.class);\n        suite.addTestSuite(GridCacheSwapReloadSelfTest.class);\n\n        // Common tests.\n        suite.addTestSuite(GridCacheConcurrentMapSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityMapperSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityRoutingSelfTest.class);\n        suite.addTestSuite(GridCacheMvccSelfTest.class);\n        suite.addTestSuite(GridCacheMvccPartitionedSelfTest.class);\n        suite.addTestSuite(GridCacheMvccManagerSelfTest.class);\n//        suite.addTestSuite(GridCacheP2PUndeploySelfTest.class); TODO uncomment in DR branch.\n        suite.addTestSuite(GridCacheConfigurationValidationSelfTest.class);\n        suite.addTestSuite(GridCacheConfigurationConsistencySelfTest.class);\n        suite.addTestSuite(GridCacheJdbcBlobStoreSelfTest.class);\n        suite.addTestSuite(GridCacheJdbcBlobStoreMultithreadedSelfTest.class);\n        suite.addTestSuite(CacheJdbcPojoStoreTest.class);\n        suite.addTestSuite(CacheJdbcPojoStoreMultitreadedSelfTest.class);\n        suite.addTestSuite(GridCacheBalancingStoreSelfTest.class);\n        suite.addTestSuite(GridCacheAffinityApiSelfTest.class);\n        suite.addTestSuite(GridCacheStoreValueBytesSelfTest.class);\n        suite.addTestSuite(DataStreamProcessorSelfTest.class);\n        suite.addTestSuite(DataStreamerImplSelfTest.class);\n        suite.addTestSuite(GridCacheEntryMemorySizeSelfTest.class);\n        suite.addTestSuite(GridCacheClearAllSelfTest.class);\n        suite.addTestSuite(GridCacheObjectToStringSelfTest.class);\n        suite.addTestSuite(GridCacheLoadOnlyStoreAdapterSelfTest.class);\n        suite.addTestSuite(GridCacheGetStoreErrorSelfTest.class);\n        suite.addTestSuite(GridCacheAsyncOperationsLimitSelfTest.class);\n        suite.addTestSuite(GridCacheTtlManagerSelfTest.class);\n        suite.addTestSuite(GridCacheLifecycleAwareSelfTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStopBusySelfTest.class);\n        // suite.addTestSuite(IgniteCacheTransactionalStopBusySelfTest.class); TODO Ignite-257.\n        suite.addTestSuite(GridCacheAtomicNearCacheSelfTest.class);\n        suite.addTestSuite(CacheAtomicNearUpdateTopologyChangeTest.class);\n        suite.addTestSuite(CacheTxNearUpdateTopologyChangeTest.class);\n        suite.addTestSuite(GridCacheStorePutxSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapMultiThreadedUpdateSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapAtomicMultiThreadedUpdateSelfTest.class);\n        suite.addTestSuite(GridCacheColocatedTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheNearTxStoreExceptionSelfTest.class);\n        suite.addTestSuite(GridCacheMissingCommitVersionSelfTest.class);\n        suite.addTestSuite(GridCacheEntrySetIterationPreloadingSelfTest.class);\n        suite.addTestSuite(GridCacheMixedPartitionExchangeSelfTest.class);\n        suite.addTestSuite(GridCacheAtomicTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredEvictionAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredEvictionSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheOffHeapTieredSelfTest.class);\n        suite.addTestSuite(GridCacheGlobalLoadTest.class);\n        suite.addTestSuite(GridCachePartitionedLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOffHeapLocalStoreSelfTest.class);\n        suite.addTestSuite(GridCacheTxPartitionedLocalStoreSelfTest.class);\n        suite.addTestSuite(IgniteCacheSystemTransactionsSelfTest.class);\n\n        // Heuristic exception handling. TODO IGNITE-257\n//        suite.addTestSuite(GridCacheColocatedTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheReplicatedTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheLocalTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheNearTxExceptionSelfTest.class);\n//        suite.addTestSuite(GridCacheStopSelfTest.class); TODO IGNITE-257\n\n        // Local cache.\n        suite.addTestSuite(GridCacheLocalBasicApiSelfTest.class);\n        suite.addTestSuite(GridCacheLocalBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalAtomicBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalAtomicGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheLocalLoadAllSelfTest.class);\n        suite.addTestSuite(GridCacheLocalLockSelfTest.class);\n        suite.addTestSuite(GridCacheLocalMultithreadedSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxSingleThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheLocalEventSelfTest.class);\n        suite.addTestSuite(GridCacheLocalEvictionEventSelfTest.class);\n        suite.addTestSuite(GridCacheVariableTopologySelfTest.class);\n        suite.addTestSuite(GridCacheLocalTxMultiThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheTransformEventSelfTest.class);\n\n        // Partitioned cache.\n        suite.addTestSuite(GridCachePartitionedGetSelfTest.class);\n        suite.addTest(new TestSuite(GridCachePartitionedBasicApiTest.class));\n        suite.addTest(new TestSuite(GridCacheNearMultiGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearJobExecutionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearOneNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinitySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheRendezvousAffinityFunctionExcludeNeighborsSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheRendezvousAffinityClientSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedProjectionAffinitySelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicOpSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedGetAndTransformStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAtomicGetAndTransformStoreSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedBasicStoreMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedNearDisabledBasicStoreMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedLockSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiNodeLockSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiNodeSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedMultiThreadedPutGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedNodeFailureSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedExplicitLockNodeFailureSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedTxSingleThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedTxSingleThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedTxTimeoutSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheFinishPartitionsSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEntrySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtInternalEntrySelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtMappingSelfTest.class));\n//        suite.addTest(new TestSuite(GridCachePartitionedTxMultiThreadedSelfTest.class)); TODO-gg-4066\n        suite.addTest(new TestSuite(GridCacheDhtPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadOffHeapSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadBigDataSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadPutGetSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadDisabledSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadMultiThreadedSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedPreloadRestartSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearPreloadRestartSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadStartStopSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtPreloadUnloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinityFilterSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedPreloadLifecycleSelfTest.class));\n//        suite.addTest(new TestSuite(GridCacheLoadingConcurrentGridStartTest.class));  TODO-ignite-500\n        suite.addTest(new TestSuite(GridCacheDhtPreloadDelayedSelfTest.class));\n        suite.addTest(new TestSuite(GridPartitionedBackupLoadSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedLoadCacheSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionNotLoadedEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionsDisabledSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearEvictionEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicNearEvictionEventSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheReplicatedEvictionSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtEvictionNearReadersSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheDhtAtomicEvictionNearReadersSelfTest.class));\n//        suite.addTest(new TestSuite(GridCachePartitionedTopologyChangeSelfTest.class)); TODO-gg-5489\n        suite.addTest(new TestSuite(GridCachePartitionedPreloadEventsSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedUnloadEventsSelfTest.class));\n        suite.addTest(new TestSuite(GridCachePartitionedAffinityHashIdResolverSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedOptimisticTransactionSelfTest.class));\n        suite.addTestSuite(GridCacheAtomicMessageCountSelfTest.class);\n        suite.addTest(new TestSuite(GridCacheNearPartitionedClearSelfTest.class));\n\n        suite.addTest(new TestSuite(GridCacheDhtExpiredEntriesPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheNearExpiredEntriesPreloadSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheAtomicExpiredEntriesPreloadSelfTest.class));\n\n        suite.addTest(new TestSuite(GridCacheOffheapUpdateSelfTest.class));\n\n        // TODO: GG-7242, GG-7243: Enabled when fixed.\n//        suite.addTest(new TestSuite(GridCacheDhtRemoveFailureTest.class));\n//        suite.addTest(new TestSuite(GridCacheNearRemoveFailureTest.class));\n        // TODO: GG-7201: Enable when fixed.\n        //suite.addTest(new TestSuite(GridCacheDhtAtomicRemoveFailureTest.class));\n\n        suite.addTest(new TestSuite(GridCacheNearPrimarySyncSelfTest.class));\n        suite.addTest(new TestSuite(GridCacheColocatedPrimarySyncSelfTest.class));\n\n        // Value consistency tests.\n        suite.addTestSuite(GridCacheValueConsistencyAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicPrimaryWriteOrderSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyAtomicPrimaryWriteOrderNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyTransactionalSelfTest.class);\n        suite.addTestSuite(GridCacheValueConsistencyTransactionalNearEnabledSelfTest.class);\n        suite.addTestSuite(GridCacheValueBytesPreloadingSelfTest.class);\n\n        // Replicated cache.\n        suite.addTestSuite(GridCacheReplicatedBasicApiTest.class);\n        suite.addTestSuite(GridCacheReplicatedBasicOpSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedBasicStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedAtomicGetAndTransformStoreSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedEventSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedSynchronousCommitTest.class);\n\n        // TODO: GG-7437.\n        // suite.addTestSuite(GridCacheReplicatedInvalidateSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedLockSelfTest.class);\n        // TODO: enable when GG-7437 is fixed.\n        //suite.addTestSuite(GridCacheReplicatedMultiNodeLockSelfTest.class);\n        //suite.addTestSuite(GridCacheReplicatedMultiNodeSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedNodeFailureSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxSingleThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedTxTimeoutSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadOffHeapSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadLifecycleSelfTest.class);\n        suite.addTestSuite(GridCacheSyncReplicatedPreloadSelfTest.class);\n\n        suite.addTestSuite(GridCacheDeploymentSelfTest.class);\n        suite.addTestSuite(GridCacheDeploymentOffHeapSelfTest.class);\n\n        suite.addTestSuite(GridCachePutArrayValueSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedUnswapAdvancedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedEvictionEventSelfTest.class);\n        // TODO: GG-7569.\n        // suite.addTestSuite(GridCacheReplicatedTxMultiThreadedSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadEventsSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedPreloadStartStopEventsSelfTest.class);\n        // TODO: GG-7434\n        // suite.addTestSuite(GridReplicatedTxPreloadTest.class);\n\n        suite.addTestSuite(IgniteTxReentryNearSelfTest.class);\n        suite.addTestSuite(IgniteTxReentryColocatedSelfTest.class);\n\n        suite.addTestSuite(GridCacheOrderedPreloadingSelfTest.class);\n\n        // Test for byte array value special case.\n//        suite.addTestSuite(GridCacheLocalByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheNearPartitionedP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheNearPartitionedP2PDisabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOnlyP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCachePartitionedOnlyP2PDisabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedP2PEnabledByteArrayValuesSelfTest.class);\n        suite.addTestSuite(GridCacheReplicatedP2PDisabledByteArrayValuesSelfTest.class);\n\n        // Near-only cache.\n        suite.addTest(IgniteCacheNearOnlySelfTestSuite.suite());\n\n        // Test cache with daemon nodes.\n        suite.addTestSuite(GridCacheDaemonNodeLocalSelfTest.class);\n        suite.addTestSuite(GridCacheDaemonNodePartitionedSelfTest.class);\n        suite.addTestSuite(GridCacheDaemonNodeReplicatedSelfTest.class);\n\n        // Write-behind.\n        suite.addTest(IgniteCacheWriteBehindTestSuite.suite());\n\n        // Transform.\n        suite.addTestSuite(GridCachePartitionedTransformWriteThroughBatchUpdateSelfTest.class);\n\n        suite.addTestSuite(GridCacheEntryVersionSelfTest.class);\n        suite.addTestSuite(GridCacheVersionSelfTest.class);\n\n        // Memory leak tests.\n        suite.addTestSuite(GridCacheReferenceCleanupSelfTest.class);\n        suite.addTestSuite(GridCacheReloadSelfTest.class);\n\n        suite.addTestSuite(GridCacheMixedModeSelfTest.class);\n\n        // Cache metrics.\n        suite.addTest(IgniteCacheMetricsSelfTestSuite.suite());\n\n        // Eviction.\n        suite.addTest(IgniteCacheEvictionSelfTestSuite.suite());\n\n        // Iterators.\n        suite.addTest(IgniteCacheIteratorsSelfTestSuite.suite());\n\n        // Add tx recovery test suite.\n        suite.addTest(IgniteCacheTxRecoverySelfTestSuite.suite());\n\n        // Cache interceptor tests.\n        suite.addTest(IgniteCacheInterceptorSelfTestSuite.suite());\n\n        // Multi node update.\n        suite.addTestSuite(GridCacheMultinodeUpdateSelfTest.class);\n        // TODO: GG-5353.\n        // suite.addTestSuite(GridCacheMultinodeUpdateNearEnabledSelfTest.class);\n        // suite.addTestSuite(GridCacheMultinodeUpdateNearEnabledNoBackupsSelfTest.class);\n        suite.addTestSuite(GridCacheMultinodeUpdateAtomicSelfTest.class);\n        suite.addTestSuite(GridCacheMultinodeUpdateAtomicNearEnabledSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheTxLoadAllTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalLoadAllTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLoaderWriterTest.class);\n        suite.addTestSuite(IgniteCacheTxLoaderWriterTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicStoreSessionTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreSessionTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStoreSessionWriteBehindTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreSessionWriteBehindTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoReadThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoReadThroughTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoLoadPreviousValueTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoLoadPreviousValueTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledNoWriteThroughTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalNoWriteThroughTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicReplicatedPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheAtomicLocalPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxNearPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalPeekModesTest.class);\n        suite.addTestSuite(IgniteCacheTxReplicatedPeekModesTest.class);\n\n        // TODO: IGNITE-114.\n        // suite.addTestSuite(IgniteCacheInvokeReadThroughTest.class);\n        // suite.addTestSuite(GridCacheVersionMultinodeTest.class);\n\n        suite.addTestSuite(IgniteCacheNearReadCommittedTest.class);\n        suite.addTestSuite(IgniteCacheAtomicCopyOnReadDisabledTest.class);\n        suite.addTestSuite(IgniteCacheTxCopyOnReadDisabledTest.class);\n\n        suite.addTestSuite(IgniteCacheTxPreloadNoWriteTest.class);\n\n        suite.addTestSuite(IgniteDynamicCacheStartSelfTest.class);\n        suite.addTestSuite(IgniteCacheDynamicStopSelfTest.class);\n\n        suite.addTestSuite(GridCacheTxLoadFromStoreOnLockSelfTest.class);\n\n        suite.addTestSuite(GridCacheMarshallingNodeJoinSelfTest.class);\n\n        suite.addTestSuite(IgniteCacheJdbcBlobStoreNodeRestartTest.class);\n\n        suite.addTestSuite(IgniteCacheAtomicLocalStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicNearEnabledStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheAtomicPrimaryWriteOrderNearEnabledStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxLocalStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxStoreValueTest.class);\n        suite.addTestSuite(IgniteCacheTxNearEnabledStoreValueTest.class);\n\n        return suite;\n    }","commit_id":"92a7aad4ccf673d0161ce0f6d4d6b7025f67dd08","url":"https://github.com/apache/ignite"},{"original_method":"@Override\n    public List<? extends ResourceTag> listTags(ListTagsCmd cmd) {\n        Account caller = UserContext.current().getCaller();\n        List<Long> permittedAccounts = new ArrayList<Long>();\n        String key = cmd.getKey();\n        String value = cmd.getValue();\n        String resourceId = cmd.getResourceId();\n        String resourceType = cmd.getResourceType();\n        String customerName = cmd.getCustomer();\n        boolean listAll = cmd.listAll();\n\n        Ternary<Long, Boolean, ListProjectResourcesCriteria> domainIdRecursiveListProject = \n                new Ternary<Long, Boolean, ListProjectResourcesCriteria>(cmd.getDomainId(), cmd.isRecursive(), null);\n       _accountMgr.buildACLSearchParameters(caller, null, cmd.getAccountName(), \n               cmd.getProjectId(), permittedAccounts, domainIdRecursiveListProject, listAll, false);\n           Long domainId = domainIdRecursiveListProject.first();\n       Boolean isRecursive = domainIdRecursiveListProject.second();\n       ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n       Filter searchFilter = new Filter(ResourceTagVO.class, \"resourceType\", false, cmd.getStartIndex(), cmd.getPageSizeVal());\n       \n       SearchBuilder<ResourceTagVO> sb = _resourceTagDao.createSearchBuilder();\n       _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n\n       sb.and(\"key\", sb.entity().getKey(), SearchCriteria.Op.EQ);\n       sb.and(\"value\", sb.entity().getValue(), SearchCriteria.Op.EQ);\n       sb.and().op(\"resourceId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n       sb.or(\"resourceUuid\", sb.entity().getResourceUuid(), SearchCriteria.Op.EQ);\n       sb.cp();\n       sb.and(\"resourceType\", sb.entity().getResourceType(), SearchCriteria.Op.EQ);\n       sb.and(\"customer\", sb.entity().getCustomer(), SearchCriteria.Op.EQ);\n       \n       // now set the SC criteria...\n       SearchCriteria<ResourceTagVO> sc = sb.create();\n       _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n       \n       if (key != null) {\n           sc.setParameters(\"key\", key);\n       }\n       \n       if (value != null) {\n           sc.setParameters(\"value\", value);\n       }\n       \n       if (resourceId != null) {\n           sc.setParameters(\"resourceId\", resourceId);\n           sc.setParameters(\"resourceUuid\", resourceId);\n       }\n       \n       if (resourceType != null) {\n           sc.setParameters(\"resourceType\", resourceType);\n       }\n       \n       if (customerName != null) {\n           sc.setParameters(\"customer\", customerName);\n       }\n       \n       return _resourceTagDao.search(sc, searchFilter);\n    }","id":94024,"modified_method":"@Override\n    public List<? extends ResourceTag> listTags(ListTagsCmd cmd) {\n        Account caller = UserContext.current().getCaller();\n        List<Long> permittedAccounts = new ArrayList<Long>();\n        String key = cmd.getKey();\n        String value = cmd.getValue();\n        String resourceId = cmd.getResourceId();\n        String resourceType = cmd.getResourceType();\n        String customerName = cmd.getCustomer();\n        boolean listAll = cmd.listAll();\n\n        Ternary<Long, Boolean, ListProjectResourcesCriteria> domainIdRecursiveListProject = \n                new Ternary<Long, Boolean, ListProjectResourcesCriteria>(cmd.getDomainId(), cmd.isRecursive(), null);\n       _accountMgr.buildACLSearchParameters(caller, null, cmd.getAccountName(), \n               cmd.getProjectId(), permittedAccounts, domainIdRecursiveListProject, listAll, false);\n           Long domainId = domainIdRecursiveListProject.first();\n       Boolean isRecursive = domainIdRecursiveListProject.second();\n       ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n       Filter searchFilter = new Filter(ResourceTagVO.class, \"resourceType\", false, cmd.getStartIndex(), cmd.getPageSizeVal());\n       \n       SearchBuilder<ResourceTagVO> sb = _resourceTagDao.createSearchBuilder();\n       _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n\n       sb.and(\"key\", sb.entity().getKey(), SearchCriteria.Op.EQ);\n       sb.and(\"value\", sb.entity().getValue(), SearchCriteria.Op.EQ);\n       \n       if (resourceId != null) {\n           sb.and().op(\"resourceId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n           sb.or(\"resourceUuid\", sb.entity().getResourceUuid(), SearchCriteria.Op.EQ);\n           sb.cp();  \n       }\n       \n       sb.and(\"resourceType\", sb.entity().getResourceType(), SearchCriteria.Op.EQ);\n       sb.and(\"customer\", sb.entity().getCustomer(), SearchCriteria.Op.EQ);\n       \n       // now set the SC criteria...\n       SearchCriteria<ResourceTagVO> sc = sb.create();\n       _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n       \n       if (key != null) {\n           sc.setParameters(\"key\", key);\n       }\n       \n       if (value != null) {\n           sc.setParameters(\"value\", value);\n       }\n       \n       if (resourceId != null) {\n           sc.setParameters(\"resourceId\", resourceId);\n           sc.setParameters(\"resourceUuid\", resourceId);\n       }\n       \n       if (resourceType != null) {\n           sc.setParameters(\"resourceType\", resourceType);\n       }\n       \n       if (customerName != null) {\n           sc.setParameters(\"customer\", customerName);\n       }\n       \n       return _resourceTagDao.search(sc, searchFilter);\n    }","commit_id":"84cdf2c28de5ca19626f780e9638ee1d53287334","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to enforce\n     * primary key constraints.\n     *\n     * @param entityGroup   an array of <code>EOEntity<\/code> objects\n     * @return  the array of SQL statements\n     */        \n    public NSArray primaryKeyConstraintStatementsForEntityGroup(NSArray entityGroup) {\n        EOEntity entity;\n        int count;\n        int i;\n        NSMutableArray results;\n        String statement;\n        NSArray priKeyAttributes;\n        EOAttribute priKeyAttribute;\n        int priKeyAttributeCount;\n        int j;\n\n        results = new NSMutableArray();\n        count = entityGroup.count();\n        for ( i = 0 ; i < count ; i++ ) {\n            entity = (EOEntity)entityGroup.objectAtIndex(i);\n            statement = \"ALTER TABLE \" + entity.externalName() + \" ADD CONSTRAINT \" + entity.externalName() + \"_PK PRIMARY KEY (\";\n            priKeyAttributes = entity.primaryKeyAttributes();\n            priKeyAttributeCount = priKeyAttributes.count();\n            for ( j = 0 ; j < priKeyAttributeCount ; j++ ) {\n                priKeyAttribute = (EOAttribute)priKeyAttributes.objectAtIndex(j);\n                statement += priKeyAttribute.columnName();\n                if ( j < priKeyAttributeCount - 1 ) {\n                    statement += \", \";\n                } else {\n                    statement += \")\";\n                }\n            }\n            results.addObject( createExpression( entity, statement) );\n        }\n        return results;\n    }","id":94025,"modified_method":"/**\n     * Generates the PostgreSQL-specific SQL statements to enforce\n     * primary key constraints.\n     *\n     * @param entityGroup   an array of <code>EOEntity<\/code> objects\n     * @return  the array of SQL statements\n     */        \n    public NSArray primaryKeyConstraintStatementsForEntityGroup(NSArray entityGroup) {\n        EOEntity entity;\n        int count;\n        int i;\n        NSMutableArray results;\n        NSArray priKeyAttributes;\n        EOAttribute priKeyAttribute;\n        int priKeyAttributeCount;\n        int j;\n\n        results = new NSMutableArray();\n        count = entityGroup.count();\n        for ( i = 0 ; i < count ; i++ ) {\n            entity = (EOEntity)entityGroup.objectAtIndex(i);\n            StringBuffer statement = new StringBuffer(\"ALTER TABLE \");\n            statement.append(entity.externalName());\n            statement.append(\" ADD CONSTRAINT \");\n            statement.append(entity.externalName());\n            statement.append(\"_PK PRIMARY KEY (\");\n            priKeyAttributes = entity.primaryKeyAttributes();\n            priKeyAttributeCount = priKeyAttributes.count();\n            for ( j = 0 ; j < priKeyAttributeCount ; j++ ) {\n                priKeyAttribute = (EOAttribute)priKeyAttributes.objectAtIndex(j);\n                statement.append(priKeyAttribute.columnName());\n                if ( j < priKeyAttributeCount - 1 ) {\n                    statement.append(\", \");\n                } else {\n                    statement.append(\")\");\n                }\n            }\n            results.addObject(createExpression(entity, statement.toString()));\n        }\n        return results;\n    }","commit_id":"b0072a33bb37b44ff56abfdddc5fdfbb5b7bb62e","url":"https://github.com/wocommunity/wonder"},{"original_method":"@NotNull\n  public Properties getDefaultProperties() {\n    @NonNls Properties props = new Properties();\n\n    Date date = new Date();\n    props.setProperty(\"DATE\", DateFormat.getDateInstance().format(date));\n    props.setProperty(\"TIME\", DateFormat.getTimeInstance().format(date));\n    Calendar calendar = Calendar.getInstance();\n    props.setProperty(\"YEAR\", Integer.toString(calendar.get(Calendar.YEAR)));\n    props.setProperty(\"MONTH\", Integer.toString(calendar.get(Calendar.MONTH) + 1)); //to correct Calendar bias to 0\n    props.setProperty(\"DAY\", Integer.toString(calendar.get(Calendar.DAY_OF_MONTH)));\n    props.setProperty(\"HOUR\", Integer.toString(calendar.get(Calendar.HOUR_OF_DAY)));\n    props.setProperty(\"MINUTE\", Integer.toString(calendar.get(Calendar.MINUTE)));\n\n    props.setProperty(\"USER\", SystemProperties.getUserName());\n\n    return props;\n  }","id":94026,"modified_method":"@NotNull\n  public Properties getDefaultProperties() {\n    @NonNls Properties props = new Properties();\n\n    Date date = new Date();\n    props.setProperty(\"DATE\", DateFormat.getDateInstance().format(date));\n    props.setProperty(\"TIME\", DateFormat.getTimeInstance().format(date));\n    Calendar calendar = Calendar.getInstance();\n    props.setProperty(\"YEAR\", Integer.toString(calendar.get(Calendar.YEAR)));\n    props.setProperty(\"MONTH\", getCalendarValue(calendar, Calendar.MONTH));\n    props.setProperty(\"DAY\", getCalendarValue(calendar, Calendar.DAY_OF_MONTH));\n    props.setProperty(\"HOUR\", getCalendarValue(calendar, Calendar.HOUR_OF_DAY));\n    props.setProperty(\"MINUTE\", getCalendarValue(calendar, Calendar.MINUTE));\n\n    props.setProperty(\"USER\", SystemProperties.getUserName());\n\n    return props;\n  }","commit_id":"31172ebc41a4c4b731bb5eb3298dd3d55e82e79d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public RuleActivationResult createActiveRule(QualityProfileDto qualityProfile, Rule rule, String severity, UserSession userSession) {\n    checkPermission(userSession);\n    SqlSession session = myBatis.openSession();\n    try {\n      ActiveRuleDto activeRule = new ActiveRuleDto()\n        .setProfileId(qualityProfile.getId())\n        .setRuleId(rule.getId())\n        .setSeverity(Severity.ordinal(severity));\n      activeRuleDao.insert(activeRule, session);\n\n      List<RuleParamDto> ruleParams = ruleDao.selectParameters(rule.getId(), session);\n      List<ActiveRuleParamDto> activeRuleParams = Lists.newArrayList();\n      for (RuleParamDto ruleParam : ruleParams) {\n        ActiveRuleParamDto activeRuleParam = new ActiveRuleParamDto()\n          .setActiveRuleId(activeRule.getId())\n          .setRulesParameterId(ruleParam.getId())\n          .setKey(ruleParam.getName())\n          .setValue(ruleParam.getDefaultValue());\n        activeRuleParams.add(activeRuleParam);\n        activeRuleDao.insert(activeRuleParam, session);\n      }\n      session.commit();\n\n      ruleRegistry.save(activeRule, activeRuleParams);\n\n      RuleInheritanceActions actions = profilesManager.activated(qualityProfile.getId(), activeRule.getId(), userSession.name());\n      reindexInheritanceResult(actions, session);\n\n      return new RuleActivationResult(QProfile.from(qualityProfile), profileRules.getFromActiveRuleId(activeRule.getId()));\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":94027,"modified_method":"public RuleActivationResult createActiveRule(QualityProfileDto qualityProfile, Rule rule, String severity, UserSession userSession) {\n    checkPermission(userSession);\n    SqlSession session = myBatis.openSession();\n    try {\n      ActiveRuleDto activeRule = new ActiveRuleDto()\n        .setProfileId(qualityProfile.getId())\n        .setRuleId(rule.getId())\n        .setSeverity(Severity.ordinal(severity));\n      activeRuleDao.insert(activeRule, session);\n\n      List<RuleParamDto> ruleParams = ruleDao.selectParameters(rule.getId(), session);\n      List<ActiveRuleParamDto> activeRuleParams = Lists.newArrayList();\n      for (RuleParamDto ruleParam : ruleParams) {\n        ActiveRuleParamDto activeRuleParam = new ActiveRuleParamDto()\n          .setActiveRuleId(activeRule.getId())\n          .setRulesParameterId(ruleParam.getId())\n          .setKey(ruleParam.getName())\n          .setValue(ruleParam.getDefaultValue());\n        activeRuleParams.add(activeRuleParam);\n        activeRuleDao.insert(activeRuleParam, session);\n      }\n      session.commit();\n\n      RuleInheritanceActions actions = profilesManager.activated(qualityProfile.getId(), activeRule.getId(), userSession.name());\n      reindexInheritanceResult(actions, session);\n\n      return new RuleActivationResult(QProfile.from(qualityProfile), profileRules.getFromActiveRuleId(activeRule.getId()));\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"8c4159e5f0287f90d2c866c7547b07959b249db7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public RuleActivationResult deactivateRule(QualityProfileDto qualityProfile, Rule rule, UserSession userSession) {\n    checkPermission(userSession);\n\n    SqlSession session = myBatis.openSession();\n    try {\n      ActiveRuleDto activeRule = validate(qualityProfile, rule);\n      profilesManager.deactivated(activeRule.getProfileId(), activeRule.getId(), userSession.name());\n\n      activeRuleDao.delete(activeRule.getId(), session);\n      activeRuleDao.deleteParameters(activeRule.getId(), session);\n      session.commit();\n\n      return new RuleActivationResult(QProfile.from(qualityProfile), profileRules.getFromRuleId(rule.getId()));\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":94028,"modified_method":"public RuleActivationResult deactivateRule(QualityProfileDto qualityProfile, Rule rule, UserSession userSession) {\n    checkPermission(userSession);\n\n    SqlSession session = myBatis.openSession();\n    try {\n      ActiveRuleDto activeRule = validate(qualityProfile, rule);\n      RuleInheritanceActions actions = profilesManager.deactivated(activeRule.getProfileId(), activeRule.getId(), userSession.name());\n\n      activeRuleDao.delete(activeRule.getId(), session);\n      activeRuleDao.deleteParameters(activeRule.getId(), session);\n      actions.addToDelete(activeRule.getId());\n      session.commit();\n\n      reindexInheritanceResult(actions, session);\n\n      return new RuleActivationResult(QProfile.from(qualityProfile), profileRules.getFromRuleId(rule.getId()));\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"8c4159e5f0287f90d2c866c7547b07959b249db7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deactivate_rule() throws Exception {\n    QualityProfileDto qualityProfile = new QualityProfileDto().setId(1).setName(\"My profile\").setLanguage(\"java\");\n    Rule rule = Rule.create().setRepositoryKey(\"squid\").setKey(\"AvoidCycle\");\n    rule.setId(10);\n    ActiveRuleDto activeRule = new ActiveRuleDto().setId(5).setProfileId(1).setRuleId(10).setSeverity(1);\n    when(activeRuleDao.selectByProfileAndRule(1, 10)).thenReturn(activeRule);\n    when(profileRules.getFromRuleId(anyInt())).thenReturn(mock(QProfileRule.class));\n\n    RuleActivationResult result = operations.deactivateRule(qualityProfile, rule, MockUserSession.create().setName(\"nicolas\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN));\n    assertThat(result.profile()).isNotNull();\n    assertThat(result.rule()).isNotNull();\n\n    verify(activeRuleDao).delete(eq(5), eq(session));\n    verify(activeRuleDao).deleteParameters(eq(5), eq(session));\n    verify(session).commit();\n    verify(profileRules).getFromRuleId(anyInt());\n    verify(profilesManager).deactivated(eq(1), anyInt(), eq(\"nicolas\"));\n  }","id":94029,"modified_method":"@Test\n  public void deactivate_rule() throws Exception {\n    QualityProfileDto qualityProfile = new QualityProfileDto().setId(1).setName(\"My profile\").setLanguage(\"java\");\n    Rule rule = Rule.create().setRepositoryKey(\"squid\").setKey(\"AvoidCycle\");\n    rule.setId(10);\n    ActiveRuleDto activeRule = new ActiveRuleDto().setId(5).setProfileId(1).setRuleId(10).setSeverity(1);\n    when(activeRuleDao.selectByProfileAndRule(1, 10)).thenReturn(activeRule);\n    when(profileRules.getFromRuleId(anyInt())).thenReturn(mock(QProfileRule.class));\n    when(profilesManager.deactivated(eq(1), anyInt(), eq(\"nicolas\"))).thenReturn(new RuleInheritanceActions());\n\n    RuleActivationResult result = operations.deactivateRule(qualityProfile, rule, MockUserSession.create().setName(\"nicolas\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN));\n    assertThat(result.profile()).isNotNull();\n    assertThat(result.rule()).isNotNull();\n\n    verify(activeRuleDao).delete(eq(5), eq(session));\n    verify(activeRuleDao).deleteParameters(eq(5), eq(session));\n    verify(session).commit();\n    verify(profileRules).getFromRuleId(anyInt());\n    verify(profilesManager).deactivated(eq(1), anyInt(), eq(\"nicolas\"));\n  }","commit_id":"8c4159e5f0287f90d2c866c7547b07959b249db7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void activate_rule() throws Exception {\n    QualityProfileDto qualityProfile = new QualityProfileDto().setId(1).setName(\"My profile\").setLanguage(\"java\");\n    Rule rule = Rule.create().setRepositoryKey(\"squid\").setKey(\"AvoidCycle\");\n    rule.setId(10);\n    when(ruleDao.selectParameters(eq(10), eq(session))).thenReturn(newArrayList(new RuleParamDto().setId(20).setName(\"max\").setDefaultValue(\"10\")));\n    when(profileRules.getFromActiveRuleId(anyInt())).thenReturn(mock(QProfileRule.class));\n    final int idActiveRuleToUpdate = 42;\n    final int idActiveRuleToDelete = 24;\n    RuleInheritanceActions inheritanceActions = new RuleInheritanceActions().addToIndex(idActiveRuleToUpdate).addToDelete(idActiveRuleToDelete);\n    when(profilesManager.activated(eq(1), anyInt(), eq(\"nicolas\"))).thenReturn(inheritanceActions);\n\n    RuleActivationResult result = operations.createActiveRule(qualityProfile, rule, Severity.CRITICAL, MockUserSession.create().setName(\"nicolas\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN));\n    assertThat(result.profile()).isNotNull();\n    assertThat(result.rule()).isNotNull();\n    assertThat(result.rule().activeRuleId()).isNotNull();\n\n    ArgumentCaptor<ActiveRuleDto> activeRuleArgument = ArgumentCaptor.forClass(ActiveRuleDto.class);\n    verify(activeRuleDao).insert(activeRuleArgument.capture(), eq(session));\n    assertThat(activeRuleArgument.getValue().getRulId()).isEqualTo(10);\n    assertThat(activeRuleArgument.getValue().getSeverity()).isEqualTo(3);\n\n    ArgumentCaptor<ActiveRuleParamDto> activeRuleParamArgument = ArgumentCaptor.forClass(ActiveRuleParamDto.class);\n    verify(activeRuleDao).insert(activeRuleParamArgument.capture(), eq(session));\n    assertThat(activeRuleParamArgument.getValue().getKey()).isEqualTo(\"max\");\n    assertThat(activeRuleParamArgument.getValue().getValue()).isEqualTo(\"10\");\n\n    verify(session).commit();\n    verify(ruleRegistry).save(activeRuleArgument.capture(), (Collection<ActiveRuleParamDto>) anyCollection());\n    verify(profileRules).getFromActiveRuleId(anyInt());\n    verify(profilesManager).activated(eq(1), anyInt(), eq(\"nicolas\"));\n  }","id":94030,"modified_method":"@Test\n  public void activate_rule() throws Exception {\n    QualityProfileDto qualityProfile = new QualityProfileDto().setId(1).setName(\"My profile\").setLanguage(\"java\");\n    Rule rule = Rule.create().setRepositoryKey(\"squid\").setKey(\"AvoidCycle\");\n    rule.setId(10);\n    when(ruleDao.selectParameters(eq(10), eq(session))).thenReturn(newArrayList(new RuleParamDto().setId(20).setName(\"max\").setDefaultValue(\"10\")));\n    when(profileRules.getFromActiveRuleId(anyInt())).thenReturn(mock(QProfileRule.class));\n    final int idActiveRuleToUpdate = 42;\n    final int idActiveRuleToDelete = 24;\n    RuleInheritanceActions inheritanceActions = new RuleInheritanceActions().addToIndex(idActiveRuleToUpdate).addToDelete(idActiveRuleToDelete);\n    when(profilesManager.activated(eq(1), anyInt(), eq(\"nicolas\"))).thenReturn(inheritanceActions);\n\n    RuleActivationResult result = operations.createActiveRule(qualityProfile, rule, Severity.CRITICAL, MockUserSession.create().setName(\"nicolas\").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN));\n    assertThat(result.profile()).isNotNull();\n    assertThat(result.rule()).isNotNull();\n    assertThat(result.rule().activeRuleId()).isNotNull();\n\n    ArgumentCaptor<ActiveRuleDto> activeRuleArgument = ArgumentCaptor.forClass(ActiveRuleDto.class);\n    verify(activeRuleDao).insert(activeRuleArgument.capture(), eq(session));\n    assertThat(activeRuleArgument.getValue().getRulId()).isEqualTo(10);\n    assertThat(activeRuleArgument.getValue().getSeverity()).isEqualTo(3);\n\n    ArgumentCaptor<ActiveRuleParamDto> activeRuleParamArgument = ArgumentCaptor.forClass(ActiveRuleParamDto.class);\n    verify(activeRuleDao).insert(activeRuleParamArgument.capture(), eq(session));\n    assertThat(activeRuleParamArgument.getValue().getKey()).isEqualTo(\"max\");\n    assertThat(activeRuleParamArgument.getValue().getValue()).isEqualTo(\"10\");\n\n    verify(session).commit();\n    verify(profileRules).getFromActiveRuleId(anyInt());\n    verify(profilesManager).activated(eq(1), anyInt(), eq(\"nicolas\"));\n  }","commit_id":"8c4159e5f0287f90d2c866c7547b07959b249db7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void bulkIndexActiveRules(List<ActiveRuleDto> activeRules, Multimap<Integer, ActiveRuleParamDto> paramsByActiveRule) {\n    try {\n      int size = activeRules.size();\n      String[] ids = new String[size];\n      BytesStream[] docs = new BytesStream[size];\n      String[] parentIds = new String[size];\n      int index = 0;\n      for (ActiveRuleDto activeRule : activeRules) {\n        ids[index] = activeRule.getId().toString();\n        docs[index] = activeRuleDocument(activeRule, paramsByActiveRule.get(activeRule.getId()));\n        parentIds[index] = activeRule.getRulId().toString();\n        index++;\n      }\n      searchIndex.bulkIndex(INDEX_RULES, TYPE_ACTIVE_RULE, ids, docs, parentIds);\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Unable to index active rules\", e);\n    }\n  }","id":94031,"modified_method":"public void bulkIndexActiveRules(List<ActiveRuleDto> activeRules, Multimap<Integer, ActiveRuleParamDto> paramsByActiveRule) {\n    try {\n      int size = activeRules.size();\n      String[] ids = new String[size];\n      BytesStream[] docs = new BytesStream[size];\n      String[] parentIds = new String[size];\n      int index = 0;\n      for (ActiveRuleDto activeRule : activeRules) {\n        ids[index] = activeRule.getId().toString();\n        docs[index] = activeRuleDocument(activeRule, paramsByActiveRule.get(activeRule.getId()));\n        parentIds[index] = activeRule.getRulId().toString();\n        index++;\n      }\n      if (! activeRules.isEmpty()) {\n        searchIndex.bulkIndex(INDEX_RULES, TYPE_ACTIVE_RULE, ids, docs, parentIds);\n      }\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Unable to index active rules\", e);\n    }\n  }","commit_id":"8c4159e5f0287f90d2c866c7547b07959b249db7","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void putAllTags(Collection<RuleTagDto> tags) {\n    String[] ids = new String[tags.size()];\n    BytesStream[] sources = new BytesStream[tags.size()];\n    int tagCounter = 0;\n    try {\n      for (RuleTagDto tag: tags) {\n        ids[tagCounter] = tag.getTag();\n        sources[tagCounter] = XContentFactory.jsonBuilder()\n          .startObject()\n          .field(RuleTagDocument.FIELD_VALUE, tag.getTag())\n          .endObject();\n        tagCounter ++;\n      }\n      index.bulkIndex(RuleRegistry.INDEX_RULES, TYPE_TAG, ids, sources);\n      index.client().prepareDeleteByQuery(RuleRegistry.INDEX_RULES).setTypes(TYPE_TAG)\n      .setQuery(\n        QueryBuilders.filteredQuery(\n          QueryBuilders.matchAllQuery(),\n          FilterBuilders.notFilter(\n            FilterBuilders.termsFilter(RuleTagDocument.FIELD_VALUE, ids))))\n            .execute().actionGet();\n    } catch(IOException ioException) {\n      throw new IllegalStateException(\"Unable to index tags\", ioException);\n    }\n  }","id":94032,"modified_method":"public void putAllTags(Collection<RuleTagDto> tags) {\n    String[] ids = new String[tags.size()];\n    try {\n      if (!tags.isEmpty()) {\n        BytesStream[] sources = new BytesStream[tags.size()];\n        int tagCounter = 0;\n        for (RuleTagDto tag: tags) {\n          ids[tagCounter] = tag.getTag();\n          sources[tagCounter] = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(RuleTagDocument.FIELD_VALUE, tag.getTag())\n            .endObject();\n          tagCounter ++;\n        }\n        index.bulkIndex(RuleRegistry.INDEX_RULES, TYPE_TAG, ids, sources);\n      }\n      index.client().prepareDeleteByQuery(RuleRegistry.INDEX_RULES).setTypes(TYPE_TAG)\n      .setQuery(\n          QueryBuilders.filteredQuery(\n              QueryBuilders.matchAllQuery(),\n              FilterBuilders.notFilter(\n                  FilterBuilders.termsFilter(RuleTagDocument.FIELD_VALUE, ids))))\n                  .execute().actionGet();\n    } catch(IOException ioException) {\n      throw new IllegalStateException(\"Unable to index tags\", ioException);\n    }\n  }","commit_id":"b0440de99de8bf93ea9dc7d940f5bf7593ccd9c6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_register_new_tags() throws Exception {\n    ruleTags.putAllTags(ImmutableList.of(\n      new RuleTagDto().setTag(\"tag1\"),\n      new RuleTagDto().setTag(\"tag2\"),\n      new RuleTagDto().setTag(\"tag3\"),\n      new RuleTagDto().setTag(\"tag4\"),\n      new RuleTagDto().setTag(\"tag5\")\n    ));\n\n    assertThat(esSetup.client().prepareCount(\"rules\").setTypes(ESRuleTags.TYPE_TAG).execute().actionGet().getCount()).isEqualTo(5L);\n  }","id":94033,"modified_method":"@Test\n  public void should_register_new_tags() throws Exception {\n    ruleTags.putAllTags(ImmutableList.of(\n      newRuleTagDto(\"tag1\"),\n      newRuleTagDto(\"tag2\"),\n      newRuleTagDto(\"tag3\"),\n      newRuleTagDto(\"tag4\"),\n      newRuleTagDto(\"tag5\")\n    ));\n\n    checkTagCount(5L);\n  }","commit_id":"b0440de99de8bf93ea9dc7d940f5bf7593ccd9c6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_remove_unused_tags() throws Exception {\n\n    esSetup.execute(\n      EsSetup.index(RuleRegistry.INDEX_RULES, ESRuleTags.TYPE_TAG).withSource(\"{\\\"value\\\":\\\"tag5\\\"}\"),\n      EsSetup.index(RuleRegistry.INDEX_RULES, ESRuleTags.TYPE_TAG).withSource(\"{\\\"value\\\":\\\"tag6\\\"}\"),\n      EsSetup.index(RuleRegistry.INDEX_RULES, ESRuleTags.TYPE_TAG).withSource(\"{\\\"value\\\":\\\"tag7\\\"}\"));\n\n    ruleTags.putAllTags(ImmutableList.of(\n      new RuleTagDto().setTag(\"tag1\"),\n      new RuleTagDto().setTag(\"tag2\"),\n      new RuleTagDto().setTag(\"tag3\"),\n      new RuleTagDto().setTag(\"tag4\"),\n      new RuleTagDto().setTag(\"tag5\")\n    ));\n\n    assertThat(esSetup.client().prepareCount(\"rules\").setTypes(ESRuleTags.TYPE_TAG).execute().actionGet().getCount()).isEqualTo(5L);\n  }","id":94034,"modified_method":"@Test\n  public void should_remove_unused_tags() throws Exception {\n\n    esSetup.execute(\n      indexTagDocument(\"tag4\"),\n      indexTagDocument(\"tag5\"),\n      indexTagDocument(\"tag6\"),\n      indexTagDocument(\"tag7\"));\n\n    ruleTags.putAllTags(ImmutableList.of(\n      newRuleTagDto(\"tag1\"),\n      newRuleTagDto(\"tag2\"),\n      newRuleTagDto(\"tag3\"),\n      newRuleTagDto(\"tag4\"),\n      newRuleTagDto(\"tag5\")\n    ));\n\n    checkTagCount(5L);\n  }","commit_id":"b0440de99de8bf93ea9dc7d940f5bf7593ccd9c6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void bulkIndex(List<RuleDto> rules, Multimap<Long, RuleParamDto> paramsByRule) throws IOException {\n    String[] ids = new String[rules.size()];\n    BytesStream[] docs = new BytesStream[rules.size()];\n    int index = 0;\n    TimeProfiler profiler = new TimeProfiler();\n    profiler.start(\"Build rules documents\");\n    for (RuleDto rule: rules) {\n      ids[index] = rule.getId().toString();\n      docs[index] = ruleDocument(rule, paramsByRule.get(rule.getId()));\n      index ++;\n    }\n    profiler.stop();\n    profiler.start(\"Index rules\");\n    searchIndex.bulkIndex(INDEX_RULES, TYPE_RULE, ids, docs);\n    profiler.stop();\n\n    List<String> indexIds = searchIndex.findDocumentIds(SearchQuery.create().index(INDEX_RULES).type(TYPE_RULE));\n    indexIds.removeAll(Arrays.asList(ids));\n    if (! indexIds.isEmpty()) {\n      profiler.start(\"Remove deleted rule documents\");\n      searchIndex.bulkDelete(INDEX_RULES, TYPE_RULE, indexIds.toArray(new String[0]));\n      profiler.stop();\n    }\n  }","id":94035,"modified_method":"private void bulkIndex(List<RuleDto> rules, Multimap<Long, RuleParamDto> paramsByRule) throws IOException {\n    String[] ids = new String[rules.size()];\n    BytesStream[] docs = new BytesStream[rules.size()];\n    int index = 0;\n    TimeProfiler profiler = new TimeProfiler();\n    profiler.start(\"Build rules documents\");\n    for (RuleDto rule: rules) {\n      ids[index] = rule.getId().toString();\n      docs[index] = ruleDocument(rule, paramsByRule.get(rule.getId()));\n      index ++;\n    }\n    profiler.stop();\n\n    if (! rules.isEmpty()) {\n      profiler.start(\"Index rules\");\n      searchIndex.bulkIndex(INDEX_RULES, TYPE_RULE, ids, docs);\n      profiler.stop();\n    }\n\n    List<String> indexIds = searchIndex.findDocumentIds(SearchQuery.create().index(INDEX_RULES).type(TYPE_RULE));\n    indexIds.removeAll(Arrays.asList(ids));\n    if (! indexIds.isEmpty()) {\n      profiler.start(\"Remove deleted rule documents\");\n      searchIndex.bulkDelete(INDEX_RULES, TYPE_RULE, indexIds.toArray(new String[0]));\n      profiler.stop();\n    }\n  }","commit_id":"f9eb8abfdfe567b602f388fc414a4814068ff513","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static void collectImplementedAndExtended(AbstractConceptDeclaration cd, Set<AbstractConceptDeclaration> result) {\n    if (cd == null) return;\n    if (result.contains(cd)) return;\n    result.add(cd);\n\n    if (cd instanceof InterfaceConceptDeclaration) {\n      InterfaceConceptDeclaration icd = (InterfaceConceptDeclaration) cd;\n      for (InterfaceConceptReference i : icd.getExtendses()) {\n        if (i.getIntfc() != null) {\n          collectImplementedAndExtended(i.getIntfc(), result);\n        }\n      }\n    }\n\n    if (cd instanceof ConceptDeclaration) {\n      ConceptDeclaration c = (ConceptDeclaration) cd;\n      if (c.getExtends() != null) {\n        collectImplementedAndExtended(c.getExtends(), result);\n      }\n\n      for (InterfaceConceptReference i : c.getImplementses()) {\n        if (i.getIntfc() != null) {\n          collectImplementedAndExtended(i.getIntfc(), result);\n        }\n      }\n    }\n  }","id":94036,"modified_method":"private static void collectImplementedAndExtended(AbstractConceptDeclaration top, Set<AbstractConceptDeclaration> result) {\n    Set<AbstractConceptDeclaration> frontier = new LinkedHashSet<AbstractConceptDeclaration>();\n    Set<AbstractConceptDeclaration> newFrontier = new LinkedHashSet<AbstractConceptDeclaration>();\n    frontier.add(top);\n    result.add(top);\n    while (!frontier.isEmpty()) {\n      for (AbstractConceptDeclaration cd : frontier) {\n        if (cd instanceof InterfaceConceptDeclaration) {\n          InterfaceConceptDeclaration icd = (InterfaceConceptDeclaration) cd;\n          for (InterfaceConceptReference i : icd.getExtendses()) {\n            InterfaceConceptDeclaration intfc = i.getIntfc();\n            if (intfc != null && !result.contains(intfc)) {\n              newFrontier.add(intfc);\n              result.add(intfc);\n            }\n          }\n        }\n\n        if (cd instanceof ConceptDeclaration) {\n          ConceptDeclaration c = (ConceptDeclaration) cd;\n          ConceptDeclaration anExtends = c.getExtends();\n          if (anExtends != null && !result.contains(anExtends)) {\n            newFrontier.add(anExtends);\n            result.add(anExtends);\n          }\n\n          for (InterfaceConceptReference i : c.getImplementses()) {\n            InterfaceConceptDeclaration intfc = i.getIntfc();\n            if (intfc != null) {\n              newFrontier.add(intfc);\n              result.add(intfc);\n            }\n          }\n        }\n      }\n      frontier = newFrontier;\n      newFrontier = new LinkedHashSet<AbstractConceptDeclaration>();\n    }\n  }","commit_id":"68c307cb43f05830b16ed61cc18fcbeadc37ed57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void install(DataFlowManager manager) {\n    manager.register(\"jetbrains.mps.baseLanguage.structure.IfStatement\", new IfStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.WhileStatement\", new WhileStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.Statement\", new Statement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.Expression\", new Expression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", new ExpressionStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BlockStatement\", new BlockStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StatementList\", new StatementList_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AssignmentExpression\", new AssignmentExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CastExpression\", new CastExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BinaryOperation\", new BinaryOperation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ReturnStatement\", new ReturnStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ForStatement\", new ForStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ForeachStatement\", new ForeachStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DoWhileStatement\", new DoWhileStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AssertStatement\", new AssertStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ThrowStatement\", new ThrowStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BreakStatement\", new BreakStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ContinueStatement\", new ContinueStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ElsifClause\", new ElsifClause_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", new VariableDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\", new TernaryOperatorExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SynchronizedStatement\", new SynchronizedStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TryStatement\", new TryStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TryCatchStatement\", new TryCatchStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", new ParenthesizedExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DotExpression\", new DotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.IMethodCall\", new IMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression\", new ArrayAccessExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayLiteral\", new ArrayLiteral_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DimensionExpression\", new DimensionExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceOfExpression\", new InstanceOfExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\", new LocalVariableDeclarationStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", new LocalVariableDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", new BaseMethodDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", new StaticMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.NotExpression\", new NotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CatchClause\", new CatchClause_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", new InstanceMethodCallOperation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayCreator\", new ArrayCreator_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer\", new ArrayCreatorWithInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceInitializer\", new InstanceInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SwitchStatement\", new SwitchStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SwitchCase\", new SwitchCase_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", new GenericNewExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.RemarkStatement\", new RemarkStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator\", new AnonymousClassCreator_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", new BaseAssignmentExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", new BaseMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", new ParameterDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StaticInitializer\", new StaticInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", new ConceptFunction_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", new LocalVariableReference_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", new ParameterReference_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.Closure\", new Closure_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SubstringExpression\", new SubstringExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression\", new BitwiseNotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", new CommentedStatementsBlock_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation\", new SuperConstructorInvocation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TupleExpression\", new TupleExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", new AbstractUnaryNumberOperation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement\", new ConstructorInvocationStatement_DataFlow());\n  }","id":94037,"modified_method":"public void install(DataFlowManager manager) {\n    manager.register(\"jetbrains.mps.baseLanguage.structure.IfStatement\", new IfStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.WhileStatement\", new WhileStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.Expression\", new Expression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", new ExpressionStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BlockStatement\", new BlockStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StatementList\", new StatementList_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AssignmentExpression\", new AssignmentExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CastExpression\", new CastExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BinaryOperation\", new BinaryOperation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ReturnStatement\", new ReturnStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ForStatement\", new ForStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ForeachStatement\", new ForeachStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DoWhileStatement\", new DoWhileStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AssertStatement\", new AssertStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ThrowStatement\", new ThrowStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BreakStatement\", new BreakStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ContinueStatement\", new ContinueStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ElsifClause\", new ElsifClause_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.VariableDeclaration\", new VariableDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression\", new TernaryOperatorExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SynchronizedStatement\", new SynchronizedStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TryStatement\", new TryStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TryCatchStatement\", new TryCatchStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", new ParenthesizedExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DotExpression\", new DotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.IMethodCall\", new IMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression\", new ArrayAccessExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayLiteral\", new ArrayLiteral_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.DimensionExpression\", new DimensionExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceOfExpression\", new InstanceOfExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\", new LocalVariableDeclarationStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\", new LocalVariableDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", new BaseMethodDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", new StaticMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.NotExpression\", new NotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CatchClause\", new CatchClause_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", new InstanceMethodCallOperation_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayCreator\", new ArrayCreator_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer\", new ArrayCreatorWithInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.InstanceInitializer\", new InstanceInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SwitchStatement\", new SwitchStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SwitchCase\", new SwitchCase_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", new GenericNewExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.RemarkStatement\", new RemarkStatement_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator\", new AnonymousClassCreator_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression\", new BaseAssignmentExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BaseMethodCall\", new BaseMethodCall_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\", new ParameterDeclaration_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.StaticInitializer\", new StaticInitializer_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ConceptFunction\", new ConceptFunction_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", new LocalVariableReference_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", new ParameterReference_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.Closure\", new Closure_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.SubstringExpression\", new SubstringExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression\", new BitwiseNotExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock\", new CommentedStatementsBlock_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.TupleExpression\", new TupleExpression_DataFlow());\n    manager.register(\"jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation\", new AbstractUnaryNumberOperation_DataFlow());\n  }","commit_id":"68c307cb43f05830b16ed61cc18fcbeadc37ed57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(BaseLanguageModelActionsInternal_ActionGroup.ID, ModelActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(RefactoringAddition_ActionGroup.ID, NodeRefactoring_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageEditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageEditorPopupInternal_ActionGroup.ID, EditorInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageNodeActionsInternal_ActionGroup.ID, NodeActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageToolsAddition_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(AnalyzersActions_ActionGroup.ID, DFAActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup.ID, Code_ActionGroup.ID, Code_ActionGroup.LABEL_ID_overrideImplement);\n    insertGroupIntoAnother(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, Code_ActionGroup.ID, Code_ActionGroup.LABEL_ID_comments);\n    insertGroupIntoAnother(PrintNodePosition_ActionGroup.ID, EditorInternal_ActionGroup.ID, EditorInternal_ActionGroup.LABEL_ID_printNodePosition);\n  }","id":94038,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(BaseLanguageEditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageEditorPopupInternal_ActionGroup.ID, EditorInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageModelActionsInternal_ActionGroup.ID, ModelActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageNodeActionsInternal_ActionGroup.ID, NodeActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageToolsAddition_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(RefactoringAddition_ActionGroup.ID, NodeRefactoring_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup.ID, Code_ActionGroup.ID, Code_ActionGroup.LABEL_ID_overrideImplement);\n    insertGroupIntoAnother(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, Code_ActionGroup.ID, Code_ActionGroup.LABEL_ID_comments);\n    insertGroupIntoAnother(AnalyzersActions_ActionGroup.ID, DFAActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(PrintNodePosition_ActionGroup.ID, EditorInternal_ActionGroup.ID, EditorInternal_ActionGroup.LABEL_ID_printNodePosition);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(EditorActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(EditorActions_ActionGroup.ID, Edit_ActionGroup.ID, Edit_ActionGroup.LABEL_ID_custom);\n  }","id":94039,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(EditorActions_ActionGroup.ID, Edit_ActionGroup.ID, Edit_ActionGroup.LABEL_ID_custom);\n    insertGroupIntoAnother(EditorActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(GlobalMake_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ToolbarMake_ActionGroup.ID, \"MPSToolbarRunGroup\", null);\n    insertGroupIntoAnother(ProjectMake_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_make);\n  }","id":94040,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ToolbarMake_ActionGroup.ID, \"MPSToolbarRunGroup\", null);\n    insertGroupIntoAnother(ProjectMake_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(GlobalMake_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_make);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(FindInstancesByConditionGroup_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_find_instances);\n    insertGroupIntoAnother(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_find_instances);\n    insertGroupIntoAnother(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_find_instances);\n  }","id":94041,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(FindInstancesByConditionGroup_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_find_instances);\n    insertGroupIntoAnother(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_find_instances);\n    insertGroupIntoAnother(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_find_instances);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(NodeRefactoring_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(NodeRefactoring_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(ModelRefactorings_ActionGroup.ID, ModelRefactoring_ActionGroup.ID, null);\n  }","id":94042,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(NodeRefactoring_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(NodeRefactoring_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(ModelRefactorings_ActionGroup.ID, ModelRefactoring_ActionGroup.ID, null);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsGlobally_ActionGroup.ID, Tools_ActionGroup.ID, null);\n  }","id":94043,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsGlobally_ActionGroup.ID, Tools_ActionGroup.ID, null);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(Structure_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_structure);\n    insertGroupIntoAnother(Structure_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_structure);\n    insertGroupIntoAnother(ShowHelp_ActionGroup.ID, Structure_ActionGroup.ID, Structure_ActionGroup.LABEL_ID_showHelp);\n    insertGroupIntoAnother(ShowHelp_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_showHelp);\n  }","id":94044,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(Structure_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_structure);\n    insertGroupIntoAnother(Structure_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_structure);\n    insertGroupIntoAnother(ShowHelp_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_showHelp);\n    insertGroupIntoAnother(ShowHelp_ActionGroup.ID, Structure_ActionGroup.ID, Structure_ActionGroup.LABEL_ID_showHelp);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(TypesystemActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(TypesystemNodeActions_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(TypesystemEditorPopupInternal_ActionGroup.ID, EditorInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(GoToTypeErrorGroup_ActionGroup.ID, TypesystemActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(GoToTypeErrorGroup_ActionGroup.ID, TypesystemNodeActions_ActionGroup.ID, null);\n  }","id":94045,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(GoToTypeErrorGroup_ActionGroup.ID, TypesystemActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(GoToTypeErrorGroup_ActionGroup.ID, TypesystemNodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(TypesystemActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(TypesystemNodeActions_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(TypesystemEditorPopupInternal_ActionGroup.ID, EditorInternal_ActionGroup.ID, null);\n  }","commit_id":"4f3298e31b23a9c2980e0f8078124f2838b09324","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        String whatToCheck = CheckModule_Action.this.moduleType;\n        if (((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")).size() > 1) {\n          whatToCheck = ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")).size() + \" Modules\";\n        }\n        event.getPresentation().setText(\"Check \" + whatToCheck);\n        event.getPresentation().setDescription(\"Check \" + whatToCheck.toLowerCase() + \" for structure and typesystem rules\");\n      }\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action doUpdate method failed. Action:\" + \"CheckModule\", t);\n      }\n      this.disable(event.getPresentation());\n    }\n  }","id":94046,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        String whatToCheck = ((IModule) MapSequence.fromMap(_params).get(\"module\")).getClass().getSimpleName();\n        if (((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")).size() > 1) {\n          whatToCheck = ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")).size() + \" Modules\";\n        }\n        event.getPresentation().setText(\"Check \" + whatToCheck);\n        event.getPresentation().setDescription(\"Check \" + whatToCheck.toLowerCase() + \" for structure and typesystem rules\");\n      }\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action doUpdate method failed. Action:\" + \"CheckModule\", t);\n      }\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public CheckModule_Action(String moduleType_par) {\n    super(\"Check [Module]\", \"Check [module] for structure and typesystem rules\", ICON);\n    this.moduleType = moduleType_par;\n    this.setIsAlwaysVisible(false);\n    this.setExecuteOutsideCommand(true);\n  }","id":94047,"modified_method":"public CheckModule_Action() {\n    super(\"Check [Module]\", \"Check [module] for structure and typesystem rules\", ICON);\n    this.setIsAlwaysVisible(false);\n    this.setExecuteOutsideCommand(true);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustInterfaceGroups() {\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_ideavcs);\n    insertInterfaceGroupIntoAnother(\"NavbarPopupMenu\", AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_ideaActions);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", EditorPopup_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", EditorTabActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", JUnitTestCaseActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", JUnitTestMethodActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", LanguageActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", ModelActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", NodeActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_runConfig);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", SolutionActions_ActionGroup.ID, null);\n  }","id":94048,"modified_method":"public void adjustInterfaceGroups() {\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_vcs);\n    insertInterfaceGroupIntoAnother(\"VcsGroup\", ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_ideavcs);\n    insertInterfaceGroupIntoAnother(\"NavbarPopupMenu\", AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_ideaActions);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", EditorPopup_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", EditorTabActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", JUnitTestCaseActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", JUnitTestMethodActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", LanguageActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", ModelActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", NodeActions_ActionGroup.ID, null);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_runConfig);\n    insertInterfaceGroupIntoAnother(\"RunContextGroup\", SolutionActions_ActionGroup.ID, null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(FavoritesPopup_ActionGroup.ID, FavoritesPopupWrapper_ActionGroup.ID, null);\n    insertGroupIntoAnother(Bookmarks_ActionGroup.ID, \"EditMenu\", null);\n    insertGroupIntoAnother(Build_ActionGroup.ID, \"BuildMenu\", null);\n    insertGroupIntoAnother(Edit_ActionGroup.ID, \"EditMenu\", null);\n    insertGroupIntoAnother(Folding_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_folding);\n    insertGroupIntoAnother(Goto_ActionGroup.ID, \"GoToMenu\", null);\n    insertGroupIntoAnother(GoToEditorPopupAddition_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_goto);\n    insertGroupIntoAnother(GoByReference_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.LABEL_ID_refs);\n    insertGroupIntoAnother(NodeActionsInternal_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(EditorInternal_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(ToolsInternal_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_internal);\n    insertGroupIntoAnother(DebugActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_debug);\n    insertGroupIntoAnother(DebugActions_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_debug);\n    insertGroupIntoAnother(ProjectNewActions_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_projectNew);\n    insertGroupIntoAnother(SolutionNewActions_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n    insertGroupIntoAnother(GeneratorNewActions_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_generatorNew);\n    insertGroupIntoAnother(LanguageNewActions_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_newGroup);\n    insertGroupIntoAnother(ModelNewActions_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_newActions);\n    insertGroupIntoAnother(FileSystemNewActions_ActionGroup.ID, AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_new);\n    insertGroupIntoAnother(PackageNewActions_ActionGroup.ID, PackageActions_ActionGroup.ID, PackageActions_ActionGroup.LABEL_ID_newActions);\n    insertGroupIntoAnother(ModelRefactoring_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(SolutionRefactoring_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(CreateRootNode_ActionGroup.ID, ModelNewActions_ActionGroup.ID, ModelNewActions_ActionGroup.LABEL_ID_newRoot);\n    insertGroupIntoAnother(CreateRootNode_ActionGroup.ID, PackageNewActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(Tools_ActionGroup.ID, \"ToolsMenu\", null);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, FileActions_ActionGroup.ID, FileActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, FolderActions_ActionGroup.ID, FolderActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, ModuleActions_ActionGroup.ID, ModuleActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(NamespaceInternalActions_ActionGroup.ID, NamespaceActions_ActionGroup.ID, NamespaceActions_ActionGroup.LABEL_ID_namespaceInternal);\n    insertGroupIntoAnother(FindUsages_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_find);\n    insertGroupIntoAnother(FindUsages_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_find);\n    insertGroupIntoAnother(AddToFavoritesGroup_ActionGroup.ID, FavoritesPopup_ActionGroup.ID, FavoritesPopup_ActionGroup.LABEL_ID_addToFavorites);\n    insertGroupIntoAnother(Search_ActionGroup.ID, \"SearchMenu\", null);\n    insertGroupIntoAnother(Code_ActionGroup.ID, \"CodeMenu\", null);\n    insertGroupIntoAnother(FavoritesPopupWrapper_ActionGroup.ID, Favorites_ActionGroup.ID, Favorites_ActionGroup.LABEL_ID_popup);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(View_ActionGroup.ID, \"ViewMenu\", null);\n  }","id":94049,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(FavoritesPopup_ActionGroup.ID, FavoritesPopupWrapper_ActionGroup.ID, null);\n    insertGroupIntoAnother(Bookmarks_ActionGroup.ID, \"EditMenu\", null);\n    insertGroupIntoAnother(Build_ActionGroup.ID, \"BuildMenu\", null);\n    insertGroupIntoAnother(Edit_ActionGroup.ID, \"EditMenu\", null);\n    insertGroupIntoAnother(Folding_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_folding);\n    insertGroupIntoAnother(Goto_ActionGroup.ID, \"GoToMenu\", null);\n    insertGroupIntoAnother(GoToEditorPopupAddition_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_goto);\n    insertGroupIntoAnother(GoByReference_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.LABEL_ID_refs);\n    insertGroupIntoAnother(NodeActionsInternal_ActionGroup.ID, NodeActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(EditorInternal_ActionGroup.ID, EditorPopup_ActionGroup.ID, null);\n    insertGroupIntoAnother(ToolsInternal_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_internal);\n    insertGroupIntoAnother(DebugActions_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_debug);\n    insertGroupIntoAnother(DebugActions_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_debug);\n    insertGroupIntoAnother(ProjectNewActions_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_projectNew);\n    insertGroupIntoAnother(SolutionNewActions_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n    insertGroupIntoAnother(GeneratorNewActions_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_generatorNew);\n    insertGroupIntoAnother(LanguageNewActions_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_newGroup);\n    insertGroupIntoAnother(ModelNewActions_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_newActions);\n    insertGroupIntoAnother(FileSystemNewActions_ActionGroup.ID, AbstractFileActions_ActionGroup.ID, AbstractFileActions_ActionGroup.LABEL_ID_new);\n    insertGroupIntoAnother(PackageNewActions_ActionGroup.ID, PackageActions_ActionGroup.ID, PackageActions_ActionGroup.LABEL_ID_newActions);\n    insertGroupIntoAnother(ModelRefactoring_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(SolutionRefactoring_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(CreateRootNode_ActionGroup.ID, ModelNewActions_ActionGroup.ID, ModelNewActions_ActionGroup.LABEL_ID_newRoot);\n    insertGroupIntoAnother(CreateRootNode_ActionGroup.ID, PackageNewActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(Tools_ActionGroup.ID, \"ToolsMenu\", null);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, FileActions_ActionGroup.ID, FileActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, FolderActions_ActionGroup.ID, FolderActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(AbstractFileActions_ActionGroup.ID, ModuleActions_ActionGroup.ID, ModuleActions_ActionGroup.LABEL_ID_abstractFileActions);\n    insertGroupIntoAnother(NamespaceInternalActions_ActionGroup.ID, NamespaceActions_ActionGroup.ID, NamespaceActions_ActionGroup.LABEL_ID_namespaceInternal);\n    insertGroupIntoAnother(FindUsages_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_find);\n    insertGroupIntoAnother(FindUsages_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_find);\n    insertGroupIntoAnother(AddToFavoritesGroup_ActionGroup.ID, FavoritesPopup_ActionGroup.ID, FavoritesPopup_ActionGroup.LABEL_ID_addToFavorites);\n    insertGroupIntoAnother(CommonModuleActions_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_commonModule);\n    insertGroupIntoAnother(CommonModuleActions_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_commonModule);\n    insertGroupIntoAnother(Search_ActionGroup.ID, \"SearchMenu\", null);\n    insertGroupIntoAnother(Code_ActionGroup.ID, \"CodeMenu\", null);\n    insertGroupIntoAnother(FavoritesPopupWrapper_ActionGroup.ID, Favorites_ActionGroup.ID, Favorites_ActionGroup.LABEL_ID_popup);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(Favorites_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_favorites);\n    insertGroupIntoAnother(View_ActionGroup.ID, \"ViewMenu\", null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new AddLanguageImport_Action());\n    addAction(new AddMissingImports_Action());\n    addAction(new AddModelImportByRoot_Action());\n    addAction(new AddModelImport_Action());\n    addAction(new AddModuleToProject_Action());\n    addAction(new AddToNewFavoritesList_Action());\n    addAction(new AnalyzeClasspath_Action());\n    addAction(new CloneModel_Action());\n    addAction(new CloneRoot_Action());\n    addAction(new CollapseAll_Action());\n    addAction(new Collapse_Action());\n    addAction(new CopyModelName_Action());\n    addAction(new CopyModuleName_Action());\n    addAction(new CopyNodeName_Action());\n    addAction(new CopyNodeReference_Action());\n    addAction(new CopyNode_Action());\n    addAction(new CreateAspect_Action());\n    addAction(new CutNode_Action());\n    addAction(new DeleteFavoritesList_Action());\n    addAction(new DeleteModels_Action());\n    addAction(new DeleteModules_Action());\n    addAction(new DeleteNode_Action());\n    addAction(new DeletePropertyAction_Action());\n    addAction(new DeleteReferenceAction_Action());\n    addAction(new EditNode_Action());\n    addAction(new ExpandAll_Action());\n    addAction(new ExpandNode_Action());\n    addAction(new Expand_Action());\n    addAction(new FastFindNodeUsages_Action());\n    addAction(new FindNext_Action());\n    addAction(new FindPrevious_Action());\n    addAction(new FindSpecificNodeUsages_Action());\n    addAction(new Find_Action());\n    addAction(new FoldSelection_Action());\n    addAction(new GoByCurrentReference_Action());\n    addAction(new GoToNodeById_Action());\n    addAction(new GoToNode_Action());\n    addAction(new GoToRule_Action());\n    addAction(new HighlightInstances_Action());\n    addAction(new HighlightUsages_Action());\n    addAction(new MPSProjectPaths_Action());\n    addAction(new ModelProperties_Action());\n    addAction(new ModuleProperties_Action());\n    addAction(new MoveFileOrDirectory_Action());\n    addAction(new NewDirectory_Action());\n    addAction(new NewFile_Action());\n    addAction(new NewModel_Action());\n    addAction(new NewRuntimeModule_Action());\n    addAction(new NewSubModel_Action());\n    addAction(new NewSubTestModel_Action());\n    addAction(new OptimizeModelImports_Action());\n    addAction(new OptimizeModuleImports_Action());\n    addAction(new OptimizeProjectImports_Action());\n    addAction(new PasteNode_Action());\n    addAction(new QuickCreate_Action());\n    addAction(new RemoveAllBookmarks_Action());\n    addAction(new RemoveFromFavorites_Action());\n    addAction(new RemoveModuleFromProject_Action());\n    addAction(new RemoveTransientModels_Action());\n    addAction(new RenameFavoritesList_Action());\n    addAction(new RenameFileOrDirectory_Action());\n    addAction(new RenameModel_Action());\n    addAction(new RenameNamespace_Action());\n    addAction(new RenamePackage_Action());\n    addAction(new RenameSolution_Action());\n    addAction(new RevertMemoryChanges_Action());\n    addAction(new SetBookmarkNoNumber_Action());\n    addAction(new SetModuleFolder_Action());\n    addAction(new SetNodePackage_Action());\n    addAction(new ShowBookmarksDialog_Action());\n    addAction(new ShowBookmarks_Action());\n    addAction(new ShowClassInHierarchy_Action());\n    addAction(new ShowConceptInHierarchy_Action());\n    addAction(new ShowErrorMessage_Action());\n    addAction(new ShowImplementations_Action());\n    addAction(new ShowInProject_Action());\n    addAction(new ShowModuleDependencies_Action());\n    addAction(new ShowNodeInInspector_Action());\n    addAction(new ShowNodeInfo_Action());\n    addAction(new ShowParameters_Action());\n    addAction(new ShowStructure_Action());\n    // groups \n    addGroup(new AbstractFileActions_ActionGroup());\n    addGroup(new AddToFavoritesGroup_ActionGroup());\n    addGroup(new Bookmarks_ActionGroup());\n    addGroup(new Build_ActionGroup());\n    addGroup(new Code_ActionGroup());\n    addGroup(new CreateRootNode_ActionGroup());\n    addGroup(new DebugActions_ActionGroup());\n    addGroup(new DevkitActions_ActionGroup());\n    addGroup(new Edit_ActionGroup());\n    addGroup(new EditorInternal_ActionGroup());\n    addGroup(new EditorLeftPanelMenu_ActionGroup());\n    addGroup(new EditorPopup_ActionGroup());\n    addGroup(new EditorTabActions_ActionGroup());\n    addGroup(new FavoritesPopupWrapper_ActionGroup());\n    addGroup(new FavoritesPopup_ActionGroup());\n    addGroup(new Favorites_ActionGroup());\n    addGroup(new FileActions_ActionGroup());\n    addGroup(new FileSystemNewActions_ActionGroup());\n    addGroup(new FindUsages_ActionGroup());\n    addGroup(new FolderActions_ActionGroup());\n    addGroup(new Folding_ActionGroup());\n    addGroup(new GeneratorActions_ActionGroup());\n    addGroup(new GeneratorNewActions_ActionGroup());\n    addGroup(new GoByReference_ActionGroup());\n    addGroup(new GoToEditorPopupAddition_ActionGroup());\n    addGroup(new Goto_ActionGroup());\n    addGroup(new JUnitTestCaseActions_ActionGroup());\n    addGroup(new JUnitTestMethodActions_ActionGroup());\n    addGroup(new LanguageActions_ActionGroup());\n    addGroup(new LanguageNewActions_ActionGroup());\n    addGroup(new LibraryActions_ActionGroup());\n    addGroup(new ModelActionsInternal_ActionGroup());\n    addGroup(new ModelActions_ActionGroup());\n    addGroup(new ModelNewActions_ActionGroup());\n    addGroup(new ModelRefactoring_ActionGroup());\n    addGroup(new ModuleActions_ActionGroup());\n    addGroup(new NamespaceActions_ActionGroup());\n    addGroup(new NamespaceInternalActions_ActionGroup());\n    addGroup(new NamespaceMakeActions_ActionGroup());\n    addGroup(new NodeActionsInternal_ActionGroup());\n    addGroup(new NodeActions_ActionGroup());\n    addGroup(new PackageActions_ActionGroup());\n    addGroup(new PackageNewActions_ActionGroup());\n    addGroup(new ProjectActions_ActionGroup());\n    addGroup(new ProjectNewActions_ActionGroup());\n    addGroup(new PropertyNodeActions_ActionGroup());\n    addGroup(new ReferenceNodeActions_ActionGroup());\n    addGroup(new RuntimeFolderActions_ActionGroup());\n    addGroup(new Search_ActionGroup());\n    addGroup(new SolutionActions_ActionGroup());\n    addGroup(new SolutionNewActions_ActionGroup());\n    addGroup(new SolutionRefactoring_ActionGroup());\n    addGroup(new ToolsInternal_ActionGroup());\n    addGroup(new Tools_ActionGroup());\n    addGroup(new TransientModulesActions_ActionGroup());\n    addGroup(new View_ActionGroup());\n  }","id":94050,"modified_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new AddLanguageImport_Action());\n    addAction(new AddMissingImports_Action());\n    addAction(new AddModelImportByRoot_Action());\n    addAction(new AddModelImport_Action());\n    addAction(new AddModuleToProject_Action());\n    addAction(new AddToNewFavoritesList_Action());\n    addAction(new AnalyzeClasspath_Action());\n    addAction(new CloneModel_Action());\n    addAction(new CloneRoot_Action());\n    addAction(new CollapseAll_Action());\n    addAction(new Collapse_Action());\n    addAction(new CopyModelName_Action());\n    addAction(new CopyModuleName_Action());\n    addAction(new CopyNodeName_Action());\n    addAction(new CopyNodeReference_Action());\n    addAction(new CopyNode_Action());\n    addAction(new CreateAspect_Action());\n    addAction(new CutNode_Action());\n    addAction(new DeleteFavoritesList_Action());\n    addAction(new DeleteModels_Action());\n    addAction(new DeleteModules_Action());\n    addAction(new DeleteNode_Action());\n    addAction(new DeletePropertyAction_Action());\n    addAction(new DeleteReferenceAction_Action());\n    addAction(new EditNode_Action());\n    addAction(new ExpandAll_Action());\n    addAction(new ExpandNode_Action());\n    addAction(new Expand_Action());\n    addAction(new FastFindNodeUsages_Action());\n    addAction(new FindNext_Action());\n    addAction(new FindPrevious_Action());\n    addAction(new FindSpecificNodeUsages_Action());\n    addAction(new Find_Action());\n    addAction(new FoldSelection_Action());\n    addAction(new GoByCurrentReference_Action());\n    addAction(new GoToNodeById_Action());\n    addAction(new GoToNode_Action());\n    addAction(new GoToRule_Action());\n    addAction(new HighlightInstances_Action());\n    addAction(new HighlightUsages_Action());\n    addAction(new MPSProjectPaths_Action());\n    addAction(new ModelProperties_Action());\n    addAction(new ModuleProperties_Action());\n    addAction(new MoveFileOrDirectory_Action());\n    addAction(new NewDirectory_Action());\n    addAction(new NewFile_Action());\n    addAction(new NewModel_Action());\n    addAction(new NewRuntimeModule_Action());\n    addAction(new NewSubModel_Action());\n    addAction(new NewSubTestModel_Action());\n    addAction(new OptimizeModelImports_Action());\n    addAction(new OptimizeModuleImports_Action());\n    addAction(new OptimizeProjectImports_Action());\n    addAction(new PasteNode_Action());\n    addAction(new QuickCreate_Action());\n    addAction(new RemoveAllBookmarks_Action());\n    addAction(new RemoveFromFavorites_Action());\n    addAction(new RemoveModuleFromProject_Action());\n    addAction(new RemoveTransientModels_Action());\n    addAction(new RenameFavoritesList_Action());\n    addAction(new RenameFileOrDirectory_Action());\n    addAction(new RenameModel_Action());\n    addAction(new RenameNamespace_Action());\n    addAction(new RenamePackage_Action());\n    addAction(new RenameSolution_Action());\n    addAction(new RevertMemoryChanges_Action());\n    addAction(new SetBookmarkNoNumber_Action());\n    addAction(new SetModuleFolder_Action());\n    addAction(new SetNodePackage_Action());\n    addAction(new ShowBookmarksDialog_Action());\n    addAction(new ShowBookmarks_Action());\n    addAction(new ShowClassInHierarchy_Action());\n    addAction(new ShowConceptInHierarchy_Action());\n    addAction(new ShowErrorMessage_Action());\n    addAction(new ShowImplementations_Action());\n    addAction(new ShowInProject_Action());\n    addAction(new ShowModuleDependencies_Action());\n    addAction(new ShowNodeInInspector_Action());\n    addAction(new ShowNodeInfo_Action());\n    addAction(new ShowParameters_Action());\n    addAction(new ShowStructure_Action());\n    // groups \n    addGroup(new AbstractFileActions_ActionGroup());\n    addGroup(new AddToFavoritesGroup_ActionGroup());\n    addGroup(new Bookmarks_ActionGroup());\n    addGroup(new Build_ActionGroup());\n    addGroup(new Code_ActionGroup());\n    addGroup(new CommonModuleActions_ActionGroup());\n    addGroup(new CreateRootNode_ActionGroup());\n    addGroup(new DebugActions_ActionGroup());\n    addGroup(new DevkitActions_ActionGroup());\n    addGroup(new Edit_ActionGroup());\n    addGroup(new EditorInternal_ActionGroup());\n    addGroup(new EditorLeftPanelMenu_ActionGroup());\n    addGroup(new EditorPopup_ActionGroup());\n    addGroup(new EditorTabActions_ActionGroup());\n    addGroup(new FavoritesPopupWrapper_ActionGroup());\n    addGroup(new FavoritesPopup_ActionGroup());\n    addGroup(new Favorites_ActionGroup());\n    addGroup(new FileActions_ActionGroup());\n    addGroup(new FileSystemNewActions_ActionGroup());\n    addGroup(new FindUsages_ActionGroup());\n    addGroup(new FolderActions_ActionGroup());\n    addGroup(new Folding_ActionGroup());\n    addGroup(new GeneratorActions_ActionGroup());\n    addGroup(new GeneratorNewActions_ActionGroup());\n    addGroup(new GoByReference_ActionGroup());\n    addGroup(new GoToEditorPopupAddition_ActionGroup());\n    addGroup(new Goto_ActionGroup());\n    addGroup(new JUnitTestCaseActions_ActionGroup());\n    addGroup(new JUnitTestMethodActions_ActionGroup());\n    addGroup(new LanguageActions_ActionGroup());\n    addGroup(new LanguageNewActions_ActionGroup());\n    addGroup(new LibraryActions_ActionGroup());\n    addGroup(new ModelActionsInternal_ActionGroup());\n    addGroup(new ModelActions_ActionGroup());\n    addGroup(new ModelNewActions_ActionGroup());\n    addGroup(new ModelRefactoring_ActionGroup());\n    addGroup(new ModuleActions_ActionGroup());\n    addGroup(new NamespaceActions_ActionGroup());\n    addGroup(new NamespaceInternalActions_ActionGroup());\n    addGroup(new NamespaceMakeActions_ActionGroup());\n    addGroup(new NodeActionsInternal_ActionGroup());\n    addGroup(new NodeActions_ActionGroup());\n    addGroup(new PackageActions_ActionGroup());\n    addGroup(new PackageNewActions_ActionGroup());\n    addGroup(new ProjectActions_ActionGroup());\n    addGroup(new ProjectNewActions_ActionGroup());\n    addGroup(new PropertyNodeActions_ActionGroup());\n    addGroup(new ReferenceNodeActions_ActionGroup());\n    addGroup(new RuntimeFolderActions_ActionGroup());\n    addGroup(new Search_ActionGroup());\n    addGroup(new SolutionActions_ActionGroup());\n    addGroup(new SolutionNewActions_ActionGroup());\n    addGroup(new SolutionRefactoring_ActionGroup());\n    addGroup(new ToolsInternal_ActionGroup());\n    addGroup(new Tools_ActionGroup());\n    addGroup(new TransientModulesActions_ActionGroup());\n    addGroup(new View_ActionGroup());\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public LanguageActions_ActionGroup() {\n    super(\"LanguageActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_newGroup);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_make);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_generateModule);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_check);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\");\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_compileJava);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\");\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_usages);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_instances);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_refactoring);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_favorites);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_vcs);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_scripts);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_javastub_usages);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_ex);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModuleProperties_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94051,"modified_method":"public LanguageActions_ActionGroup() {\n    super(\"LanguageActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_newGroup);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_commonModule);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_usages);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_instances);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_find_javastub_usages);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(LanguageActions_ActionGroup.LABEL_ID_ex);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        LanguageActions_ActionGroup.this.addAction(action);\n      }\n      LanguageActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModuleProperties_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ProjectCompileActions_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_compileJava);\n    insertGroupIntoAnother(JavaModuleActions_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_compileJava);\n    insertGroupIntoAnother(JavaModuleActions_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_compileJava);\n    insertGroupIntoAnother(GenerateOptions_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_options);\n    insertGroupIntoAnother(SaveTransientModels_ActionGroup.ID, GenerateOptions_ActionGroup.ID, GenerateOptions_ActionGroup.LABEL_ID_saveTransientModels);\n    insertGroupIntoAnother(Make_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ProjectMake_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(GlobalMake_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(TextPreviewGroup_ActionGroup.ID, Make_ActionGroup.ID, Make_ActionGroup.LABEL_ID_preview);\n    insertGroupIntoAnother(NamespaceMake_ActionGroup.ID, NamespaceMakeActions_ActionGroup.ID, NamespaceMakeActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ToolbarMake_ActionGroup.ID, \"MPSToolbarRunGroup\", null);\n  }","id":94052,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ProjectCompileActions_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_compileJava);\n    insertGroupIntoAnother(JavaModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_compileJava);\n    insertGroupIntoAnother(GenerateOptions_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_options);\n    insertGroupIntoAnother(SaveTransientModels_ActionGroup.ID, GenerateOptions_ActionGroup.ID, GenerateOptions_ActionGroup.LABEL_ID_saveTransientModels);\n    insertGroupIntoAnother(Make_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ProjectMake_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(GlobalMake_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(TextPreviewGroup_ActionGroup.ID, Make_ActionGroup.ID, Make_ActionGroup.LABEL_ID_preview);\n    insertGroupIntoAnother(NamespaceMake_ActionGroup.ID, NamespaceMakeActions_ActionGroup.ID, NamespaceMakeActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ToolbarMake_ActionGroup.ID, \"MPSToolbarRunGroup\", null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new CheckModel_Action());\n    addAction(new CheckProject_Action());\n    addAction(new FindAllAdapterUsages_Action());\n    addAction(new FindlAllBrokenReferences_Action());\n    addAction(new ShowModelChecker_Action());\n    // groups \n    addGroup(new CheckModel_ActionGroup());\n    addGroup(new CheckModuleGenerator_ActionGroup());\n    addGroup(new CheckModuleLanguage_ActionGroup());\n    addGroup(new CheckModuleSolution_ActionGroup());\n    addGroup(new CheckProject_ActionGroup());\n    addGroup(new ShowModelCheckerTool_ActionGroup());\n    addGroup(new ToolsInternalEx_ActionGroup());\n  }","id":94053,"modified_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new CheckModel_Action());\n    addAction(new CheckModule_Action());\n    addAction(new CheckProject_Action());\n    addAction(new FindAllAdapterUsages_Action());\n    addAction(new FindlAllBrokenReferences_Action());\n    addAction(new ShowModelChecker_Action());\n    // groups \n    addGroup(new CheckModel_ActionGroup());\n    addGroup(new CheckModule_ActionGroup());\n    addGroup(new CheckProject_ActionGroup());\n    addGroup(new ShowModelCheckerTool_ActionGroup());\n    addGroup(new ToolsInternalEx_ActionGroup());\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ShowModelCheckerTool_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(CheckProject_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModuleSolution_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModuleLanguage_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModuleGenerator_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModel_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(ToolsInternalEx_ActionGroup.ID, ToolsInternal_ActionGroup.ID, null);\n  }","id":94054,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ShowModelCheckerTool_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(CheckProject_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModule_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModule_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(CheckModel_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_check);\n    insertGroupIntoAnother(ToolsInternalEx_ActionGroup.ID, ToolsInternal_ActionGroup.ID, null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(GenerateGeneratorPopup_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_generate);\n    insertGroupIntoAnother(GenerateEditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_goto);\n    insertGroupIntoAnother(ProjectNewActionsEx_ActionGroup.ID, ProjectNewActions_ActionGroup.ID, ProjectNewActions_ActionGroup.LABEL_ID_end);\n    insertGroupIntoAnother(LanguageRefactoring_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(RepositoryToolsGroup_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(GenerationTraceActions_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(LanguageNewGenerator_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newSubModule);\n    insertGroupIntoAnother(LanguageNewActionsEx_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newModel);\n    insertGroupIntoAnother(GeneratorActions_Delete_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_delete);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, EditorTabActions_ActionGroup.ID, EditorTabActions_ActionGroup.LABEL_ID_gotoConceptAspects);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.LABEL_ID_other);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, Goto_ActionGroup.ID, Goto_ActionGroup.LABEL_ID_gotoConceptAspects);\n    insertGroupIntoAnother(LanguageActionsEx_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_ex);\n    insertGroupIntoAnother(DevKitTools_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_devkitTools);\n    insertGroupIntoAnother(EditorInternalEx_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(LanguageNewCustomPartActions_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newAspect);\n    insertGroupIntoAnother(TraceActions_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n  }","id":94055,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(GenerateGeneratorPopup_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_generate);\n    insertGroupIntoAnother(GenerateEditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_goto);\n    insertGroupIntoAnother(ProjectNewActionsEx_ActionGroup.ID, ProjectNewActions_ActionGroup.ID, ProjectNewActions_ActionGroup.LABEL_ID_end);\n    insertGroupIntoAnother(LanguageRefactoring_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_refactoring);\n    insertGroupIntoAnother(RepositoryToolsGroup_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(GenerationTraceActions_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(LanguageNewGenerator_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newSubModule);\n    insertGroupIntoAnother(LanguageNewActionsEx_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newModel);\n    insertGroupIntoAnother(GeneratorActions_Delete_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_delete);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, EditorTabActions_ActionGroup.ID, EditorTabActions_ActionGroup.LABEL_ID_gotoConceptAspects);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.ID, GoToEditorPopupAddition_ActionGroup.LABEL_ID_other);\n    insertGroupIntoAnother(GotoConceptAspect_ActionGroup.ID, Goto_ActionGroup.ID, Goto_ActionGroup.LABEL_ID_gotoConceptAspects);\n    insertGroupIntoAnother(LanguageActionsEx_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_ex);\n    insertGroupIntoAnother(DevKitTools_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_devkitTools);\n    insertGroupIntoAnother(EditorInternalEx_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(LanguageNewCustomPartActions_ActionGroup.ID, LanguageNewActions_ActionGroup.ID, LanguageNewActions_ActionGroup.LABEL_ID_newAspect);\n    insertGroupIntoAnother(TraceActions_ActionGroup.ID, DebugActions_ActionGroup.ID, null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsGlobally_ActionGroup.ID, Tools_ActionGroup.ID, null);\n  }","id":94056,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, GeneratorActions_ActionGroup.ID, GeneratorActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsForSelection_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_scripts);\n    insertGroupIntoAnother(ScriptsGlobally_ActionGroup.ID, Tools_ActionGroup.ID, null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SolutionActions_ActionGroup() {\n    super(\"SolutionActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_make);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_generateModule);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_check);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.OptimizeModuleImports_Action\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AnalyzeClasspath_Action\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowModuleDependencies_Action\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddModuleToProject_Action\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.RemoveModuleFromProject_Action\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.DeleteModules_Action\");\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.CopyModuleName_Action\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_contents);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_compileJava);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.SetModuleFolder_Action\");\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_refactoring);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_favorites);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_vcs);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_scripts);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModuleProperties_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94057,"modified_method":"public SolutionActions_ActionGroup() {\n    super(\"SolutionActions\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_solutionNew);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_commonModule);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(SolutionActions_ActionGroup.LABEL_ID_contents);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        SolutionActions_ActionGroup.this.addAction(action);\n      }\n      SolutionActions_ActionGroup.this.addSeparator();\n      SolutionActions_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ModuleProperties_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(GoToVCS_ActionGroup.ID, Goto_ActionGroup.ID, Goto_ActionGroup.LABEL_ID_gotoVCS);\n    insertGroupIntoAnother(VCSModelActions_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_mpsvcs);\n    insertGroupIntoAnother(ShowDiffWithCurrRev_ActionGroup.ID, EditorTabActions_ActionGroup.ID, EditorTabActions_ActionGroup.LABEL_ID_diff);\n    insertGroupIntoAnother(ShowDiffWithCurrRev_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_diff);\n    insertGroupIntoAnother(VCS_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_vcs);\n    insertGroupIntoAnother(VCS_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_vcs);\n    insertGroupIntoAnother(AnnotateGroup_ActionGroup.ID, EditorLeftPanelMenu_ActionGroup.ID, null);\n    insertGroupIntoAnother(InstallVcsAddons_ActionGroup.ID, \"VcsGlobalGroup\", null);\n  }","id":94058,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(GoToVCS_ActionGroup.ID, Goto_ActionGroup.ID, Goto_ActionGroup.LABEL_ID_gotoVCS);\n    insertGroupIntoAnother(VCSModelActions_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_mpsvcs);\n    insertGroupIntoAnother(ShowDiffWithCurrRev_ActionGroup.ID, EditorTabActions_ActionGroup.ID, EditorTabActions_ActionGroup.LABEL_ID_diff);\n    insertGroupIntoAnother(ShowDiffWithCurrRev_ActionGroup.ID, NodeActions_ActionGroup.ID, NodeActions_ActionGroup.LABEL_ID_diff);\n    insertGroupIntoAnother(VCS_ActionGroup.ID, CommonModuleActions_ActionGroup.ID, CommonModuleActions_ActionGroup.LABEL_ID_vcs);\n    insertGroupIntoAnother(AnnotateGroup_ActionGroup.ID, EditorLeftPanelMenu_ActionGroup.ID, null);\n    insertGroupIntoAnother(InstallVcsAddons_ActionGroup.ID, \"VcsGlobalGroup\", null);\n  }","commit_id":"b73218b8d8060c8dea18672012dc6d1b6937b2e0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(Make_ActionGroup.ID, Generate_ActionGroup.ID, Generate_ActionGroup.LABEL_ID_generateModel);\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_generateActions);\n    insertGroupIntoAnother(Make_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_generateModule);\n    insertGroupIntoAnother(Make_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_generateModule);\n  }","id":94059,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(Make_ActionGroup.ID, ModelActions_ActionGroup.ID, ModelActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, LanguageActions_ActionGroup.ID, LanguageActions_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(Make_ActionGroup.ID, EditorPopup_ActionGroup.ID, EditorPopup_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(GlobalMake_ActionGroup.ID, Build_ActionGroup.ID, Build_ActionGroup.LABEL_ID_make);\n    insertGroupIntoAnother(ToolbarMake_ActionGroup.ID, \"MPSToolbarRunGroup\", null);\n    insertGroupIntoAnother(ProjectMake_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_make);\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    // actions w/o parameters \n    // groups \n    addGroup(new Make_ActionGroup());\n  }","id":94060,"modified_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new MakeProject_Action());\n    addAction(new MakeSelectedModels_Action());\n    addAction(new MakeSelectedModules_Action());\n    addAction(new RebuildProject_Action());\n    addAction(new RebuildSelectedModels_Action());\n    addAction(new RebuildSelectedModules_Action());\n    // groups \n    addGroup(new GlobalMake_ActionGroup());\n    addGroup(new Make_ActionGroup());\n    addGroup(new ProjectMake_ActionGroup());\n    addGroup(new ToolbarMake_ActionGroup());\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public GlobalMake_ActionGroup() {\n    super(\"GlobalMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94061,"modified_method":"public GlobalMake_ActionGroup() {\n    super(\"GlobalMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.MakeProject_Action\");\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.MakeSelectedModules_Action\");\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.RebuildSelectedModules_Action\");\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.MakeSelectedModels_Action\");\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.RebuildSelectedModels_Action\");\n      GlobalMake_ActionGroup.this.addSeparator();\n      GlobalMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.RebuildProject_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94062,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((MPSProject) MapSequence.fromMap(_params).get(\"mpsProject\")).getModules(), null), false).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"MakeProject\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    return true;\n  }","id":94063,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"mpsProject\", event.getData(MPSDataKeys.MPS_PROJECT));\n    if (MapSequence.fromMap(_params).get(\"mpsProject\") == null) {\n      return false;\n    }\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      this.enable(event.getPresentation());\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeProject\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94064,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      this.enable(event.getPresentation());\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeProject\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    return false;\n  }","id":94065,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), null, null).actionText(false);\n    if (text != null) {\n      event.getPresentation().setText(text);\n      return true;\n    }\n    return false;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94066,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), null, null), false).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"MakeSelectedModels\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelectedModels\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94067,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event, _params);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelectedModels\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n    if (this.context == null) {\n      return false;\n    }\n    this.models = event.getData(MPSDataKeys.MODELS);\n    this.cmodel = event.getData(MPSDataKeys.CONTEXT_MODEL);\n    return true;\n  }","id":94068,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"models\", event.getData(MPSDataKeys.MODELS));\n    MapSequence.fromMap(_params).put(\"cmodel\", event.getData(MPSDataKeys.CONTEXT_MODEL));\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    return false;\n\n  }","id":94069,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))).actionText(false);\n    if (text != null) {\n      event.getPresentation().setText(text);\n      return true;\n    }\n    return false;\n\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelectedModules\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94070,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event, _params);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelectedModules\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    return true;\n  }","id":94071,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"modules\", event.getData(MPSDataKeys.MODULES));\n    MapSequence.fromMap(_params).put(\"cmodule\", event.getData(MPSDataKeys.CONTEXT_MODULE));\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94072,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))), false).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"MakeSelectedModules\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public String getActionId() {\n    StringBuilder res = new StringBuilder(500);\n    res.append(MakeSelection_Action.class.getName());\n    res.append(\"#\");\n    res.append(((Object) this.cleanMake).toString());\n    res.append(\"!\");\n    return res.toString();\n  }","id":94073,"modified_method":"@NotNull\n  public String getActionId() {\n    StringBuilder res = new StringBuilder();\n    res.append(super.getActionId());\n    res.append(\"#\");\n    res.append(((Object) this.cleanMake).toString());\n    res.append(\"!\");\n    return res.toString();\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelection\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94074,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event, _params);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"MakeSelection\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    this.context = event.getData(MPSDataKeys.OPERATION_CONTEXT);\n    if (this.context == null) {\n      return false;\n    }\n    this.models = event.getData(MPSDataKeys.MODELS);\n    this.cmodel = event.getData(MPSDataKeys.CONTEXT_MODEL);\n    this.modules = event.getData(MPSDataKeys.MODULES);\n    this.cmodule = event.getData(MPSDataKeys.CONTEXT_MODULE);\n    return true;\n  }","id":94075,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"models\", event.getData(MPSDataKeys.MODELS));\n    MapSequence.fromMap(_params).put(\"cmodel\", event.getData(MPSDataKeys.CONTEXT_MODEL));\n    MapSequence.fromMap(_params).put(\"modules\", event.getData(MPSDataKeys.MODULES));\n    MapSequence.fromMap(_params).put(\"cmodule\", event.getData(MPSDataKeys.CONTEXT_MODULE));\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    return false;\n  }","id":94076,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))).actionText(MakeSelection_Action.this.cleanMake);\n    if (text != null) {\n      event.getPresentation().setText(text);\n      return true;\n    }\n    return false;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94077,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))), MakeSelection_Action.this.cleanMake).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"MakeSelection\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Make_ActionGroup() {\n    super(\"Make\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      Make_ActionGroup.this.addParameterizedAction(new MakeOrBuild_Action(true), PluginId.getId(\"jetbrains.mps.make.facet\"), true);\n      Make_ActionGroup.this.addParameterizedAction(new MakeOrBuild_Action(false), PluginId.getId(\"jetbrains.mps.make.facet\"), false);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94078,"modified_method":"public Make_ActionGroup() {\n    super(\"Make\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      Make_ActionGroup.this.addParameterizedAction(new MakeSelection_Action(false), PluginId.getId(\"jetbrains.mps.make.facet\"), false);\n      Make_ActionGroup.this.addParameterizedAction(new MakeSelection_Action(true), PluginId.getId(\"jetbrains.mps.make.facet\"), true);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ProjectMake_ActionGroup() {\n    super(\"ProjectMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94079,"modified_method":"public ProjectMake_ActionGroup() {\n    super(\"ProjectMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      ProjectMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.MakeProject_Action\");\n      ProjectMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.RebuildProject_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94080,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((MPSProject) MapSequence.fromMap(_params).get(\"mpsProject\")).getModules(), null), true).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"RebuildProject\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    return true;\n  }","id":94081,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"mpsProject\", event.getData(MPSDataKeys.MPS_PROJECT));\n    if (MapSequence.fromMap(_params).get(\"mpsProject\") == null) {\n      return false;\n    }\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      this.enable(event.getPresentation());\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildProject\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94082,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      this.enable(event.getPresentation());\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildProject\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94083,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), null, null), true).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"RebuildSelectedModels\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildSelectedModels\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94084,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event, _params);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildSelectedModels\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    return true;\n  }","id":94085,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"models\", event.getData(MPSDataKeys.MODELS));\n    MapSequence.fromMap(_params).put(\"cmodel\", event.getData(MPSDataKeys.CONTEXT_MODEL));\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    return false;\n\n  }","id":94086,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), ((List<SModelDescriptor>) MapSequence.fromMap(_params).get(\"models\")), ((SModelDescriptor) MapSequence.fromMap(_params).get(\"cmodel\")), null, null).actionText(true);\n    if (text != null) {\n      event.getPresentation().setText(text);\n      return true;\n    }\n    return false;\n\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void doExecute(AnActionEvent e, Map<String, Object> params) {\n\n  }","id":94087,"modified_method":"public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))), true).executeAction();\n    } catch (Throwable t) {\n      LOG.error(\"User's action execute method failed. Action:\" + \"RebuildSelectedModules\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected boolean collectActionData(AnActionEvent event) {\n    return true;\n  }","id":94088,"modified_method":"protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {\n    if (!(super.collectActionData(event, _params))) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"context\", event.getData(MPSDataKeys.OPERATION_CONTEXT));\n    if (MapSequence.fromMap(_params).get(\"context\") == null) {\n      return false;\n    }\n    MapSequence.fromMap(_params).put(\"modules\", event.getData(MPSDataKeys.MODULES));\n    MapSequence.fromMap(_params).put(\"cmodule\", event.getData(MPSDataKeys.CONTEXT_MODULE));\n    return true;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildSelectedModules\", t);\n      this.disable(event.getPresentation());\n    }\n  }","id":94089,"modified_method":"public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {\n    try {\n      {\n        boolean enabled = this.isApplicable(event, _params);\n        this.setEnabledState(event.getPresentation(), enabled);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User's action doUpdate method failed. Action:\" + \"RebuildSelectedModules\", t);\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    return false;\n  }","id":94090,"modified_method":"public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {\n    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get(\"context\")), null, null, ((List<IModule>) MapSequence.fromMap(_params).get(\"modules\")), ((IModule) MapSequence.fromMap(_params).get(\"cmodule\"))).actionText(true);\n    if (text != null) {\n      event.getPresentation().setText(text);\n      return true;\n    }\n    return false;\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ToolbarMake_ActionGroup() {\n    super(\"ToolbarMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":94091,"modified_method":"public ToolbarMake_ActionGroup() {\n    super(\"ToolbarMake\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      ToolbarMake_ActionGroup.this.addAction(\"jetbrains.mps.make.facet.plugin.MakeProject_Action\");\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"8f434efb6a984dfe6a1c854a9909a3a09d35df9c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void resolveAndAssignFields(Object obj, Properties props) throws Exception {\n        //traverse class hierarchy and find all annotated fields\n        for(Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            Field[] fields=clazz.getDeclaredFields();\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Property annotation=field.getAnnotation(Property.class);\n                    String propertyName=field.getName();\n                    if(props.containsKey(annotation.name())) {\n                        propertyName=annotation.name();\n                        boolean isDeprecated=annotation.deprecatedMessage().length() > 0;\n                        if(isDeprecated && log.isWarnEnabled()) {\n                            log.warn(annotation.deprecatedMessage());\n                        }\n                    }\n                    String propertyValue=props.getProperty(propertyName);\n                    if(propertyValue != null || !annotation.converter().equals(PropertyConverters.Default.class)){\n                        PropertyConverter propertyConverter=(PropertyConverter)annotation.converter().newInstance();\n                        if(propertyConverter == null) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Could not find property converter for field \" + propertyName\n                                    + \" in \" + name);\n                        }\n                        Object converted=null;\n                        try {\n                            converted=propertyConverter.convert(field.getType(), props, propertyValue);\n                            setField(field, obj, converted);\n                        }\n                        catch(Exception e) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Property assignment of \" + propertyName + \" in \"\n                                    + name + \" with original property value \" + propertyValue + \" and converted to \" + converted \n                                    + \" could not be assigned. Exception is \" +e, e);\n                        }\n                        finally {\n                            props.remove(propertyName);\n                        }\n                    }\n                }\n            }\n        }\n    }","id":94092,"modified_method":"public static void resolveAndAssignFields(Object obj, Properties props) throws Exception {\n        //traverse class hierarchy and find all annotated fields\n        for(Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            Field[] fields=clazz.getDeclaredFields();\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Property annotation=field.getAnnotation(Property.class);\n                    String propertyName=field.getName();\n                    if(props.containsKey(annotation.name())) {\n                        propertyName=annotation.name();\n                        boolean isDeprecated=annotation.deprecatedMessage().length() > 0;\n                        if(isDeprecated && log.isWarnEnabled()) {\n                            log.warn(annotation.deprecatedMessage());\n                        }\n                    }\n                    String propertyValue=props.getProperty(propertyName);\n                    if(propertyValue != null || !annotation.converter().equals(PropertyConverters.Default.class)){\n                        PropertyConverter propertyConverter=(PropertyConverter)annotation.converter().newInstance();\n                        if(propertyConverter == null) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Could not find property converter for field \" + propertyName\n                                    + \" in \" + name);\n                        }\n                        Object converted=null;\n                        try {\n                            converted=propertyConverter.convert(field.getType(), props, propertyValue);\n                            if(converted != null)\n                                setField(field, obj, converted);\n                        }\n                        catch(Exception e) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Property assignment of \" + propertyName + \" in \"\n                                    + name + \" with original property value \" + propertyValue + \" and converted to \" + converted \n                                    + \" could not be assigned. Exception is \" +e, e);\n                        }\n                        finally {\n                            props.remove(propertyName);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"046c598149f79c0b07a206be92a19c87191fb17b","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object convert(Class<?> propertyFieldType, Properties props, String propertyValue) throws Exception {\n            long tmp [] = Util.parseCommaDelimitedLongs(propertyValue);\n            if(tmp != null && tmp.length > 0){\n                return tmp;\n            }else{\n                throw new Exception (\"Invalid long array specified in \" + propertyValue);\n            }\n        }","id":94093,"modified_method":"public Object convert(Class<?> propertyFieldType, Properties props, String propertyValue) throws Exception {\n            long tmp [] = Util.parseCommaDelimitedLongs(propertyValue);\n            if(tmp != null && tmp.length > 0){\n                return tmp;\n            }else{\n                // throw new Exception (\"Invalid long array specified in \" + propertyValue);\n                return null;\n            }\n        }","commit_id":"046c598149f79c0b07a206be92a19c87191fb17b","url":"https://github.com/belaban/JGroups"},{"original_method":"public static void resolveAndAssignFields(Object obj, Properties props) throws Exception {\n        //traverse class hierarchy and find all annotated fields\n        for(Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            Field[] fields=clazz.getDeclaredFields();\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Property annotation=field.getAnnotation(Property.class);\n                    String propertyName=field.getName();\n                    if(props.containsKey(annotation.name())) {\n                        propertyName=annotation.name();\n                        boolean isDeprecated=annotation.deprecatedMessage().length() > 0;\n                        if(isDeprecated && log.isWarnEnabled()) {\n                            log.warn(annotation.deprecatedMessage());\n                        }\n                    }\n                    String propertyValue=props.getProperty(propertyName);\n                    if(propertyValue != null || !annotation.converter().equals(PropertyConverters.Default.class)){\n                        PropertyConverter propertyConverter=(PropertyConverter)annotation.converter().newInstance();\n                        if(propertyConverter == null) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Could not find property converter for field \" + propertyName\n                                    + \" in \" + name);\n                        }\n                        Object converted=null;\n                        try {\n                            converted=propertyConverter.convert(field.getType(), props, propertyValue);\n                            setField(field, obj, converted);\n                        }\n                        catch(Exception e) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Property assignment of \" + propertyName + \" in \"\n                                    + name + \" with original property value \" + propertyValue + \" and converted to \" + converted \n                                    + \" could not be assigned. Exception is \" +e, e);\n                        }\n                        finally {\n                            props.remove(propertyName);\n                        }\n                    }\n                }\n            }\n        }\n    }","id":94094,"modified_method":"public static void resolveAndAssignFields(Object obj, Properties props) throws Exception {\n        //traverse class hierarchy and find all annotated fields\n        for(Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {\n            Field[] fields=clazz.getDeclaredFields();\n            for(Field field: fields) {\n                if(field.isAnnotationPresent(Property.class)) {\n                    Property annotation=field.getAnnotation(Property.class);\n                    String propertyName=field.getName();\n                    if(props.containsKey(annotation.name())) {\n                        propertyName=annotation.name();\n                        boolean isDeprecated=annotation.deprecatedMessage().length() > 0;\n                        if(isDeprecated && log.isWarnEnabled()) {\n                            log.warn(annotation.deprecatedMessage());\n                        }\n                    }\n                    String propertyValue=props.getProperty(propertyName);\n                    if(propertyValue != null || !annotation.converter().equals(PropertyConverters.Default.class)){\n                        PropertyConverter propertyConverter=(PropertyConverter)annotation.converter().newInstance();\n                        if(propertyConverter == null) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Could not find property converter for field \" + propertyName\n                                    + \" in \" + name);\n                        }\n                        Object converted=null;\n                        try {\n                            converted=propertyConverter.convert(field.getType(), props, propertyValue);\n                            if(converted != null)\n                                setField(field, obj, converted);\n                        }\n                        catch(Exception e) {\n                            String name=obj instanceof Protocol? ((Protocol)obj).getName() : obj.getClass().getName();\n                            throw new Exception(\"Property assignment of \" + propertyName + \" in \"\n                                    + name + \" with original property value \" + propertyValue + \" and converted to \" + converted \n                                    + \" could not be assigned. Exception is \" +e, e);\n                        }\n                        finally {\n                            props.remove(propertyName);\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"359b22712321e5b6d2e639952db52fd88db28a10","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object convert(Class<?> propertyFieldType, Properties props, String propertyValue) throws Exception {\n            long tmp [] = Util.parseCommaDelimitedLongs(propertyValue);\n            if(tmp != null && tmp.length > 0){\n                return tmp;\n            }else{\n                throw new Exception (\"Invalid long array specified in \" + propertyValue);\n            }\n        }","id":94095,"modified_method":"public Object convert(Class<?> propertyFieldType, Properties props, String propertyValue) throws Exception {\n            long tmp [] = Util.parseCommaDelimitedLongs(propertyValue);\n            if(tmp != null && tmp.length > 0){\n                return tmp;\n            }else{\n                // throw new Exception (\"Invalid long array specified in \" + propertyValue);\n                return null;\n            }\n        }","commit_id":"359b22712321e5b6d2e639952db52fd88db28a10","url":"https://github.com/belaban/JGroups"},{"original_method":"public URIMetadataNode(final Properties prop, String collection) throws MalformedURLException {\n        // generates an plasmaLURLEntry using the properties from the argument\n        // the property names must correspond to the one from toString\n        //System.out.println(\"DEBUG-ENTRY: prop=\" + prop.toString());\n        super();\n        final String urlRaw = crypt.simpleDecode(prop.getProperty(\"url\", \"\"));\n        url = new DigestURL(urlRaw);\n        String descr = crypt.simpleDecode(prop.getProperty(\"descr\", \"\")); if (descr == null) descr = \"\";\n        String dc_creator = crypt.simpleDecode(prop.getProperty(\"author\", \"\")); if (dc_creator == null) dc_creator = \"\";\n        String tags = crypt.simpleDecode(prop.getProperty(\"tags\", \"\")); if (tags == null) tags = \"\";\n        this.keywords = Tagging.cleanTagFromAutotagging(tags);\n        String dc_publisher = crypt.simpleDecode(prop.getProperty(\"publisher\", \"\")); if (dc_publisher == null) dc_publisher = \"\";\n        String lons = crypt.simpleDecode(prop.getProperty(\"lon\"));\n        String lats = crypt.simpleDecode(prop.getProperty(\"lat\"));\n        \n        this.setField(CollectionSchema.title.name(), descr);\n        this.setField(CollectionSchema.author.name(), dc_creator);\n        this.setField(CollectionSchema.publisher_t.name(), dc_publisher);\n        this.lon = (lons == null) ? 0.0d : Double.parseDouble(lons);\n        this.lat = (lats == null) ? 0.0d : Double.parseDouble(lats);\n\n        // create new formatters to make concurrency possible\n        final GenericFormatter formatter = new GenericFormatter(GenericFormatter.FORMAT_SHORT_DAY, GenericFormatter.time_minute);\n\n        try {\n            this.setField(CollectionSchema.last_modified.name(), formatter.parse(prop.getProperty(\"mod\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.last_modified.name(), new Date());\n        }\n        try {\n            this.setField(CollectionSchema.load_date_dt.name(), formatter.parse(prop.getProperty(\"load\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.load_date_dt.name(), new Date());\n        }\n        try {\n            this.setField(CollectionSchema.fresh_date_dt.name(), formatter.parse(prop.getProperty(\"fresh\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.fresh_date_dt.name(), new Date());\n        }\n        this.setField(CollectionSchema.referrer_id_s.name(), prop.getProperty(\"referrer\", \"\"));\n        this.setField(CollectionSchema.md5_s.name(), prop.getProperty(\"md5\", \"\"));\n        this.setField(CollectionSchema.size_i.name(), Integer.parseInt(prop.getProperty(\"size\", \"0\")));\n        this.setField(CollectionSchema.wordcount_i.name(), Integer.parseInt(prop.getProperty(\"wc\", \"0\")));\n        final String dt = prop.getProperty(\"dt\", \"t\");\n        String[] mime = Response.doctype2mime(null,dt.charAt(0));\n        this.setField(CollectionSchema.content_type.name(), mime);\n        final String flagsp = prop.getProperty(\"flags\", \"AAAAAA\");\n        this.flags = (flagsp.length() > 6) ? QueryParams.empty_constraint : (new Bitfield(4, flagsp));\n        this.setField(CollectionSchema.language_s.name(), prop.getProperty(\"lang\", \"\"));\n        this.setField(CollectionSchema.inboundlinkscount_i.name(), Integer.parseInt(prop.getProperty(\"llocal\", \"0\")));\n        this.setField(CollectionSchema.outboundlinkscount_i.name(), Integer.parseInt(prop.getProperty(\"lother\", \"0\")));\n        this.imagec = Integer.parseInt(prop.getProperty(\"limage\", \"0\"));\n        this.audioc = Integer.parseInt(prop.getProperty(\"laudio\", \"0\"));\n        this.videoc = Integer.parseInt(prop.getProperty(\"lvideo\", \"0\"));\n        this.appc = Integer.parseInt(prop.getProperty(\"lapp\", \"0\"));\n        this.snippet = crypt.simpleDecode(prop.getProperty(\"snippet\", \"\"));\n        this.score = Float.parseFloat(prop.getProperty(\"score\", \"0.0\"));\n        List<String> cs = new ArrayList<String>();\n        cs.add(collection);\n        this.setField(CollectionSchema.collection_sxt.name(), cs);\n        this.word = null;\n        if (prop.containsKey(\"wi\")) {\n            this.word = new WordReferenceVars(new WordReferenceRow(Base64Order.enhancedCoder.decodeString(prop.getProperty(\"wi\", \"\"))), false);\n        }\n    }","id":94096,"modified_method":"public URIMetadataNode(final Properties prop, String collection) throws MalformedURLException {\n        // generates an plasmaLURLEntry using the properties from the argument\n        // the property names must correspond to the one from toString\n        //System.out.println(\"DEBUG-ENTRY: prop=\" + prop.toString());\n        super();\n        final String urlRaw = crypt.simpleDecode(prop.getProperty(\"url\", \"\"));\n        url = new DigestURL(urlRaw);\n        String descr = crypt.simpleDecode(prop.getProperty(\"descr\", \"\")); if (descr == null) descr = \"\";\n        String dc_creator = crypt.simpleDecode(prop.getProperty(\"author\", \"\")); if (dc_creator == null) dc_creator = \"\";\n        String tags = crypt.simpleDecode(prop.getProperty(\"tags\", \"\")); if (tags == null) tags = \"\";\n        this.keywords = Tagging.cleanTagFromAutotagging(tags);\n        String dc_publisher = crypt.simpleDecode(prop.getProperty(\"publisher\", \"\")); if (dc_publisher == null) dc_publisher = \"\";\n        String lons = crypt.simpleDecode(prop.getProperty(\"lon\"));\n        String lats = crypt.simpleDecode(prop.getProperty(\"lat\"));\n        \n        this.setField(CollectionSchema.title.name(), descr);\n        this.setField(CollectionSchema.author.name(), dc_creator);\n        this.setField(CollectionSchema.publisher_t.name(), dc_publisher);\n        this.lon = (lons == null) ? 0.0d : Double.parseDouble(lons);\n        this.lat = (lats == null) ? 0.0d : Double.parseDouble(lats);\n\n        // create new formatters to make concurrency possible\n        final GenericFormatter formatter = new GenericFormatter(GenericFormatter.FORMAT_SHORT_DAY, GenericFormatter.time_minute);\n\n        try {\n            this.setField(CollectionSchema.last_modified.name(), formatter.parse(prop.getProperty(\"mod\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.last_modified.name(), new Date());\n        }\n        try {\n            this.setField(CollectionSchema.load_date_dt.name(), formatter.parse(prop.getProperty(\"load\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.load_date_dt.name(), new Date());\n        }\n        try {\n            this.setField(CollectionSchema.fresh_date_dt.name(), formatter.parse(prop.getProperty(\"fresh\", \"20000101\"), 0).getTime());\n        } catch (final ParseException e) {\n            this.setField(CollectionSchema.fresh_date_dt.name(), new Date());\n        }\n        this.setField(CollectionSchema.referrer_id_s.name(), prop.getProperty(\"referrer\", \"\"));\n        this.setField(CollectionSchema.md5_s.name(), prop.getProperty(\"md5\", \"\"));\n        this.setField(CollectionSchema.size_i.name(), Integer.parseInt(prop.getProperty(\"size\", \"0\")));\n        this.setField(CollectionSchema.wordcount_i.name(), Integer.parseInt(prop.getProperty(\"wc\", \"0\")));\n        final String dt = prop.getProperty(\"dt\", \"t\");\n        final String mime = crypt.simpleDecode(prop.getProperty(\"mime\")); // optional included if it is not equal to doctype2mime()\n        if (mime != null && !mime.isEmpty() && Response.docType(mime) == dt.charAt(0)) { // use supplied mime (if docType(mime) is equal it's a known valid mime)\n            this.setField(CollectionSchema.content_type.name(), mime);\n        } else {\n            final String[] mimes = Response.doctype2mime(null, dt.charAt(0));\n            this.setField(CollectionSchema.content_type.name(), mimes);\n        }\n        final String flagsp = prop.getProperty(\"flags\", \"AAAAAA\");\n        this.flags = (flagsp.length() > 6) ? QueryParams.empty_constraint : (new Bitfield(4, flagsp));\n        this.setField(CollectionSchema.language_s.name(), prop.getProperty(\"lang\", \"\"));\n        this.setField(CollectionSchema.inboundlinkscount_i.name(), Integer.parseInt(prop.getProperty(\"llocal\", \"0\")));\n        this.setField(CollectionSchema.outboundlinkscount_i.name(), Integer.parseInt(prop.getProperty(\"lother\", \"0\")));\n        this.imagec = Integer.parseInt(prop.getProperty(\"limage\", \"0\"));\n        this.audioc = Integer.parseInt(prop.getProperty(\"laudio\", \"0\"));\n        this.videoc = Integer.parseInt(prop.getProperty(\"lvideo\", \"0\"));\n        this.appc = Integer.parseInt(prop.getProperty(\"lapp\", \"0\"));\n        this.snippet = crypt.simpleDecode(prop.getProperty(\"snippet\", \"\"));\n        this.score = Float.parseFloat(prop.getProperty(\"score\", \"0.0\"));\n        List<String> cs = new ArrayList<String>();\n        cs.add(collection);\n        this.setField(CollectionSchema.collection_sxt.name(), cs);\n        this.word = null;\n        if (prop.containsKey(\"wi\")) {\n            this.word = new WordReferenceVars(new WordReferenceRow(Base64Order.enhancedCoder.decodeString(prop.getProperty(\"wi\", \"\"))), false);\n        }\n    }","commit_id":"3f2b8ab5e512ec841a61f983a767e38fab8d148e","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"protected StringBuilder corePropList() {\n        // generate a parseable string; this is a simple property-list\n        final StringBuilder s = new StringBuilder(300);\n\n        // create new formatters to make concurrency possible\n        final GenericFormatter formatter = new GenericFormatter(GenericFormatter.FORMAT_SHORT_DAY, GenericFormatter.time_minute);\n\n        try {\n            s.append(\"hash=\").append(ASCII.String(this.hash()));\n            s.append(\",url=\").append(crypt.simpleEncode(this.url().toNormalform(true)));\n            s.append(\",descr=\").append(crypt.simpleEncode(this.dc_title()));\n            s.append(\",author=\").append(crypt.simpleEncode(this.dc_creator()));\n            s.append(\",tags=\").append(crypt.simpleEncode(Tagging.cleanTagFromAutotagging(this.dc_subject())));\n            s.append(\",publisher=\").append(crypt.simpleEncode(this.dc_publisher()));\n            s.append(\",lat=\").append(this.lat());\n            s.append(\",lon=\").append(this.lon());\n            s.append(\",mod=\").append(formatter.format(this.moddate()));\n            s.append(\",load=\").append(formatter.format(this.loaddate()));\n            s.append(\",fresh=\").append(formatter.format(this.freshdate()));\n            s.append(\",referrer=\").append(this.referrerHash() == null ? \"\" : ASCII.String(this.referrerHash()));\n            s.append(\",md5=\").append(this.md5());\n            s.append(\",size=\").append(this.filesize());\n            s.append(\",wc=\").append(this.wordCount());\n            s.append(\",dt=\").append(this.doctype());\n            s.append(\",flags=\").append(this.flags().exportB64());\n            s.append(\",lang=\").append(this.language());\n            s.append(\",llocal=\").append(this.llocal());\n            s.append(\",lother=\").append(this.lother());\n            s.append(\",limage=\").append(this.limage());\n            s.append(\",laudio=\").append(this.laudio());\n            s.append(\",lvideo=\").append(this.lvideo());\n            s.append(\",lapp=\").append(this.lapp());\n            s.append(\",score=\").append(Float.toString(this.score()));\n            if (this.word() != null) {\n                // append also word properties\n                final String wprop = this.word().toPropertyForm();\n                s.append(\",wi=\").append(Base64Order.enhancedCoder.encodeString(wprop));\n            }\n            return s;\n        } catch (final Throwable e) {\n            ConcurrentLog.logException(e);\n            return null;\n        }\n    }","id":94097,"modified_method":"protected StringBuilder corePropList() {\n        // generate a parseable string; this is a simple property-list\n        final StringBuilder s = new StringBuilder(300);\n\n        // create new formatters to make concurrency possible\n        final GenericFormatter formatter = new GenericFormatter(GenericFormatter.FORMAT_SHORT_DAY, GenericFormatter.time_minute);\n\n        try {\n            s.append(\"hash=\").append(ASCII.String(this.hash()));\n            s.append(\",url=\").append(crypt.simpleEncode(this.url().toNormalform(true)));\n            s.append(\",descr=\").append(crypt.simpleEncode(this.dc_title()));\n            s.append(\",author=\").append(crypt.simpleEncode(this.dc_creator()));\n            s.append(\",tags=\").append(crypt.simpleEncode(Tagging.cleanTagFromAutotagging(this.dc_subject())));\n            s.append(\",publisher=\").append(crypt.simpleEncode(this.dc_publisher()));\n            s.append(\",lat=\").append(this.lat());\n            s.append(\",lon=\").append(this.lon());\n            s.append(\",mod=\").append(formatter.format(this.moddate()));\n            s.append(\",load=\").append(formatter.format(this.loaddate()));\n            s.append(\",fresh=\").append(formatter.format(this.freshdate()));\n            s.append(\",referrer=\").append(this.referrerHash() == null ? \"\" : ASCII.String(this.referrerHash()));\n            s.append(\",md5=\").append(this.md5());\n            s.append(\",size=\").append(this.filesize());\n            s.append(\",wc=\").append(this.wordCount());\n            final char dt = this.doctype();\n            s.append(\",dt=\").append(dt);\n            // if default revert from doctype to mime doesn't match actual mime,\n            // include mime in the properties\n            final String mime = this.mime();\n            if (mime != null) {\n                final String[] mimex = Response.doctype2mime(null,dt);\n                if (!mime.equals(mimex[0])) { // include mime if not equal to recalc by dt (to make sure correct mime is recorded)\n                    s.append(\",mime=\").append(crypt.simpleEncode(mime));\n                }\n            }\n            s.append(\",flags=\").append(this.flags().exportB64());\n            s.append(\",lang=\").append(this.language());\n            s.append(\",llocal=\").append(this.llocal());\n            s.append(\",lother=\").append(this.lother());\n            s.append(\",limage=\").append(this.limage());\n            s.append(\",laudio=\").append(this.laudio());\n            s.append(\",lvideo=\").append(this.lvideo());\n            s.append(\",lapp=\").append(this.lapp());\n            s.append(\",score=\").append(Float.toString(this.score()));\n            if (this.word() != null) {\n                // append also word properties\n                final String wprop = this.word().toPropertyForm();\n                s.append(\",wi=\").append(Base64Order.enhancedCoder.encodeString(wprop));\n            }\n            return s;\n        } catch (final Throwable e) {\n            ConcurrentLog.logException(e);\n            return null;\n        }\n    }","commit_id":"3f2b8ab5e512ec841a61f983a767e38fab8d148e","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public synchronized void release() {\n    try {\n      if (!myIsInitialized) return;\n      LOG.assertTrue(!myIsReleased);\n\n      removeHighlighters(new ArrayList<Range>());\n      myDocument.removeDocumentListener(myDocumentListener);\n    }\n    finally {\n      myIsReleased = true;\n    }\n  }","id":94098,"modified_method":"public synchronized void release() {\n    try {\n      if (!myIsInitialized) return;\n      LOG.assertTrue(!myIsReleased);\n\n      removeHighlighters(new ArrayList<Range>());\n      if (myDocumentListener != null) {\n        myDocument.removeDocumentListener(myDocumentListener);\n        myDocumentListener = null;\n      }\n    }\n    finally {\n      myIsReleased = true;\n    }\n  }","commit_id":"48f3b495b77df61588fe81aa7b98fd9c3e1263d4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void finish() {\n    final TemplateState templateState = TemplateManagerImpl.getTemplateState(myEditor);\n    if (templateState != null) {\n      myEditor.putUserData(ACTIVE_INTRODUCE, null);\n    }\n    myEditor.getDocument().removeDocumentListener(myDocumentAdapter);\n    if (myBalloon == null) {\n      releaseIfNotRestart();\n    }\n    super.finish();\n    PsiDocumentManager.getInstance(myProject).commitAllDocuments();\n    final V variable = getVariable();\n    if (variable == null) {\n      return;\n    }\n    restoreState(variable);\n  }","id":94099,"modified_method":"@Override\n  public void finish() {\n    final TemplateState templateState = TemplateManagerImpl.getTemplateState(myEditor);\n    if (templateState != null) {\n      myEditor.putUserData(ACTIVE_INTRODUCE, null);\n    }\n    if (myDocumentAdapter != null) {\n      myEditor.getDocument().removeDocumentListener(myDocumentAdapter);\n    }\n    if (myBalloon == null) {\n      releaseIfNotRestart();\n    }\n    super.finish();\n    PsiDocumentManager.getInstance(myProject).commitAllDocuments();\n    final V variable = getVariable();\n    if (variable == null) {\n      return;\n    }\n    restoreState(variable);\n  }","commit_id":"9cf4d0ff25af6d5220f8371c349fa208543ab256","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Begins the in-place refactoring operation.\n   *\n   * @return true if the in-place refactoring was successfully started, false if it failed to start and a dialog should be shown instead.\n   */\n  public boolean startInplaceIntroduceTemplate() {\n    final boolean replaceAllOccurrences = isReplaceAllOccurrences();\n    final Ref<Boolean> result = new Ref<Boolean>();\n    CommandProcessor.getInstance().executeCommand(myProject, new Runnable() {\n      public void run() {\n        final String[] names = suggestNames(replaceAllOccurrences, getLocalVariable());\n        RangeMarker r;\n        if (myLocalMarker != null) {\n          final PsiReference reference = myExpr != null ? myExpr.getReference() : null;\n          if (reference != null && reference.resolve() == myLocalVariable) {\n            r = myExprMarker;\n          } else {\n            r = myLocalMarker;\n          }\n        }\n        else {\n          r = myExprMarker;\n        }\n        final V variable = createFieldToStartTemplateOn(replaceAllOccurrences, names);\n        boolean started = false;\n        if (variable != null) {\n          myEditor.getCaretModel().moveToOffset(r.getStartOffset());\n          myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);\n\n          final LinkedHashSet<String> nameSuggestions = new LinkedHashSet<String>();\n          nameSuggestions.add(variable.getName());\n          nameSuggestions.addAll(Arrays.asList(names));\n          initOccurrencesMarkers();\n          setElementToRename(variable);\n          started = AbstractInplaceIntroducer.super.performInplaceRename(false, nameSuggestions);\n          myDocumentAdapter = new DocumentAdapter() {\n            @Override\n            public void documentChanged(DocumentEvent e) {\n              final TemplateState templateState = TemplateManagerImpl.getTemplateState(myEditor);\n              if (templateState != null) {\n                final String variableValue =\n                  templateState.getVariableValue(VariableInplaceRenamer.PRIMARY_VARIABLE_NAME).getText();\n                updateTitle(getVariable(), variableValue);\n              }\n            }\n          };\n          myEditor.getDocument().addDocumentListener(myDocumentAdapter);\n          updateTitle(getVariable());\n          if (TemplateManagerImpl.getTemplateState(myEditor) != null) {\n            myEditor.putUserData(ACTIVE_INTRODUCE, AbstractInplaceIntroducer.this);\n          }\n        }\n        result.set(started);\n        if (!started && variable != null) {\n          ApplicationManager.getApplication().runWriteAction(new Runnable() {\n            @Override\n            public void run() {\n              variable.delete();\n            }\n          });\n        }\n      }\n\n    }, getCommandName(), getCommandName());\n    return result.get();\n  }","id":94100,"modified_method":"/**\n   * Begins the in-place refactoring operation.\n   *\n   * @return true if the in-place refactoring was successfully started, false if it failed to start and a dialog should be shown instead.\n   */\n  public boolean startInplaceIntroduceTemplate() {\n    final boolean replaceAllOccurrences = isReplaceAllOccurrences();\n    final Ref<Boolean> result = new Ref<Boolean>();\n    CommandProcessor.getInstance().executeCommand(myProject, new Runnable() {\n      public void run() {\n        final String[] names = suggestNames(replaceAllOccurrences, getLocalVariable());\n        RangeMarker r;\n        if (myLocalMarker != null) {\n          final PsiReference reference = myExpr != null ? myExpr.getReference() : null;\n          if (reference != null && reference.resolve() == myLocalVariable) {\n            r = myExprMarker;\n          } else {\n            r = myLocalMarker;\n          }\n        }\n        else {\n          r = myExprMarker;\n        }\n        final V variable = createFieldToStartTemplateOn(replaceAllOccurrences, names);\n        boolean started = false;\n        if (variable != null) {\n          myEditor.getCaretModel().moveToOffset(r.getStartOffset());\n          myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);\n\n          final LinkedHashSet<String> nameSuggestions = new LinkedHashSet<String>();\n          nameSuggestions.add(variable.getName());\n          nameSuggestions.addAll(Arrays.asList(names));\n          initOccurrencesMarkers();\n          setElementToRename(variable);\n          started = AbstractInplaceIntroducer.super.performInplaceRename(false, nameSuggestions);\n          if (started) {\n            myDocumentAdapter = new DocumentAdapter() {\n              @Override\n              public void documentChanged(DocumentEvent e) {\n                final TemplateState templateState = TemplateManagerImpl.getTemplateState(myEditor);\n                if (templateState != null) {\n                  final TextResult value = templateState.getVariableValue(VariableInplaceRenamer.PRIMARY_VARIABLE_NAME);\n                  if (value != null) {\n                    updateTitle(getVariable(), value.getText());\n                  }\n                }\n              }\n            };\n            myEditor.getDocument().addDocumentListener(myDocumentAdapter);\n            updateTitle(getVariable());\n            if (TemplateManagerImpl.getTemplateState(myEditor) != null) {\n              myEditor.putUserData(ACTIVE_INTRODUCE, AbstractInplaceIntroducer.this);\n            }\n          }\n        }\n        result.set(started);\n        if (!started && variable != null) {\n          ApplicationManager.getApplication().runWriteAction(new Runnable() {\n            @Override\n            public void run() {\n              variable.delete();\n            }\n          });\n        }\n      }\n\n    }, getCommandName(), getCommandName());\n    return result.get();\n  }","commit_id":"9cf4d0ff25af6d5220f8371c349fa208543ab256","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void removeNotify() {\n    super.removeNotify();\n\n    myEditor.getDocument().removeDocumentListener(myDocumentListener);\n    myConnection.disconnect();\n  }","id":94101,"modified_method":"public void removeNotify() {\n    super.removeNotify();\n\n    if (myDocumentListener != null) {\n      myEditor.getDocument().removeDocumentListener(myDocumentListener);\n      myDocumentListener = null;\n    }\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public EditorSearchComponent(final Editor editor, final Project project) {\n    super(new BorderLayout(0, 0));\n\n    GRADIENT_C1 = getBackground();\n    GRADIENT_C2 = new Color(GRADIENT_C1.getRed() - 0x18, GRADIENT_C1.getGreen() - 0x18, GRADIENT_C1.getBlue() - 0x18);\n    \n    myProject = project;\n    myEditor = editor;\n\n    JPanel leadPanel = new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT, 5, 0));\n    add(leadPanel, BorderLayout.WEST);\n\n    mySearchField = new JTextField();\n    mySearchField.putClientProperty(\"AuxEditorComponent\", Boolean.TRUE);\n    leadPanel.add(mySearchField);\n\n    myDefaultBackground = mySearchField.getBackground();\n    mySearchField.setColumns(25);\n\n    setSmallerFont(mySearchField);\n\n    DefaultActionGroup group = new DefaultActionGroup(\"search bar\", false);\n    group.add(new ShowHistoryAction());\n    group.add(new PrevOccurenceAction());\n    group.add(new NextOccurenceAction());\n\n    final ActionToolbar tb = ActionManager.getInstance().createActionToolbar(\"SearchBar\", group, true);\n    tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);\n    myToolbarComponent = tb.getComponent();\n    myToolbarComponent.setBorder(null);\n    myToolbarComponent.setOpaque(false);\n    leadPanel.add(myToolbarComponent);\n\n    final JCheckBox cbMatchCase = new NonFocusableCheckBox(\"Case sensitive\");\n    final JCheckBox cbWholeWords = new NonFocusableCheckBox(\"Match whole words only\");\n    final JCheckBox cbRegexp = new NonFocusableCheckBox(\"Regex\");\n\n    leadPanel.add(cbMatchCase);\n    leadPanel.add(cbWholeWords);\n    leadPanel.add(cbRegexp);\n\n    cbMatchCase.setSelected(isCaseSensitive());\n    cbWholeWords.setSelected(isWholeWords());\n    cbRegexp.setSelected(isRegexp());\n\n    cbMatchCase.setMnemonic('C');\n    cbWholeWords.setMnemonic('M');\n    cbRegexp.setMnemonic('R');\n\n    setSmallerFontAndOpaque(cbWholeWords);\n    setSmallerFontAndOpaque(cbMatchCase);\n    setSmallerFontAndOpaque(cbRegexp);\n\n    cbMatchCase.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbMatchCase.isSelected();\n        FindManager.getInstance(myProject).getFindInFileModel().setCaseSensitive(b);\n        FindSettings.getInstance().setLocalCaseSensitive(b);\n        updateResults(true);\n      }\n    });\n\n    cbWholeWords.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbWholeWords.isSelected();\n        FindManager.getInstance(myProject).getFindInFileModel().setWholeWordsOnly(b);\n        FindSettings.getInstance().setLocalWholeWordsOnly(b);\n        updateResults(true);\n      }\n    });\n\n    cbRegexp.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbRegexp.isSelected();\n        cbWholeWords.setEnabled(!b);\n        FindManager.getInstance(myProject).getFindInFileModel().setRegularExpressions(b);\n        updateResults(true);\n      }\n    });\n\n    JPanel tailPanel = new NonOpaquePanel(new BorderLayout(5, 0));\n    JPanel tailContainer = new NonOpaquePanel(new BorderLayout(5, 0));\n    tailContainer.add(tailPanel, BorderLayout.EAST);\n    add(tailContainer, BorderLayout.CENTER);\n\n    myMatchInfoLabel = new JLabel();\n    setSmallerFontAndOpaque(myMatchInfoLabel);\n\n    JLabel closeLabel = new JLabel(\" \", IconLoader.getIcon(\"/actions/cross.png\"), JLabel.RIGHT);\n    closeLabel.addMouseListener(new MouseAdapter() {\n      public void mousePressed(final MouseEvent e) {\n        close();\n      }\n    });\n\n    closeLabel.setToolTipText(\"Close search bar (Escape)\");\n\n    tailPanel.add(myMatchInfoLabel, BorderLayout.CENTER);\n    tailPanel.add(closeLabel, BorderLayout.EAST);\n\n    mySearchField.getDocument().addDocumentListener(new DocumentAdapter() {\n      protected void textChanged(final DocumentEvent e) {\n        updateResults(true);\n      }\n    });\n\n    mySearchField.registerKeyboardAction(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        close();\n      }\n    }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_FOCUSED);\n\n    mySearchField.registerKeyboardAction(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        if (\"\".equals(mySearchField.getText())) {\n          close();\n        }\n        else {\n          myEditor.getContentComponent().requestFocus();\n          addCurrentTextToRecents();\n        }\n      }\n    }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK), JComponent.WHEN_FOCUSED);\n\n    final String initialText = myEditor.getSelectionModel().getSelectedText();\n\n    SwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        mySearchField.setText(initialText != null && initialText.indexOf('\\n') < 0 ? initialText : \"\");\n      }\n    });\n\n    new VariantsCompletionAction(); // It registers a shortcut set automatically on construction\n\n    myDocumentListener = new com.intellij.openapi.editor.event.DocumentAdapter() {\n      public void documentChanged(final com.intellij.openapi.editor.event.DocumentEvent e) {\n        updateResults(false);\n      }\n    };\n\n    myEditor.getDocument().addDocumentListener(myDocumentListener);\n\n    myConnection = project.getMessageBus().connect();\n    myConnection.subscribe(FindManager.FIND_MODEL_TOPIC, new FindModelListener() {\n      public void findNextModelChanged() {\n        final FindModel model = FindManager.getInstance(project).getFindNextModel();\n        if (model != null) {\n          final String text = model.getStringToFind();\n          if (!Comparing.equal(text, mySearchField.getText())) {\n            mySearchField.setText(text);\n          }\n        }\n      }\n    });\n  }","id":94102,"modified_method":"public EditorSearchComponent(final Editor editor, final Project project) {\n    super(new BorderLayout(0, 0));\n\n    GRADIENT_C1 = getBackground();\n    GRADIENT_C2 = new Color(GRADIENT_C1.getRed() - 0x18, GRADIENT_C1.getGreen() - 0x18, GRADIENT_C1.getBlue() - 0x18);\n    \n    myProject = project;\n    myEditor = editor;\n\n    JPanel leadPanel = new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT, 5, 0));\n    add(leadPanel, BorderLayout.WEST);\n\n    mySearchField = new JTextField();\n    mySearchField.putClientProperty(\"AuxEditorComponent\", Boolean.TRUE);\n    leadPanel.add(mySearchField);\n\n    myDefaultBackground = mySearchField.getBackground();\n    mySearchField.setColumns(25);\n\n    setSmallerFont(mySearchField);\n\n    DefaultActionGroup group = new DefaultActionGroup(\"search bar\", false);\n    group.add(new ShowHistoryAction());\n    group.add(new PrevOccurenceAction());\n    group.add(new NextOccurenceAction());\n\n    final ActionToolbar tb = ActionManager.getInstance().createActionToolbar(\"SearchBar\", group, true);\n    tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);\n    myToolbarComponent = tb.getComponent();\n    myToolbarComponent.setBorder(null);\n    myToolbarComponent.setOpaque(false);\n    leadPanel.add(myToolbarComponent);\n\n    final JCheckBox cbMatchCase = new NonFocusableCheckBox(\"Case sensitive\");\n    final JCheckBox cbWholeWords = new NonFocusableCheckBox(\"Match whole words only\");\n    final JCheckBox cbRegexp = new NonFocusableCheckBox(\"Regex\");\n\n    leadPanel.add(cbMatchCase);\n    leadPanel.add(cbWholeWords);\n    leadPanel.add(cbRegexp);\n\n    cbMatchCase.setSelected(isCaseSensitive());\n    cbWholeWords.setSelected(isWholeWords());\n    cbRegexp.setSelected(isRegexp());\n\n    cbMatchCase.setMnemonic('C');\n    cbWholeWords.setMnemonic('M');\n    cbRegexp.setMnemonic('R');\n\n    setSmallerFontAndOpaque(cbWholeWords);\n    setSmallerFontAndOpaque(cbMatchCase);\n    setSmallerFontAndOpaque(cbRegexp);\n\n    cbMatchCase.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbMatchCase.isSelected();\n        FindManager.getInstance(myProject).getFindInFileModel().setCaseSensitive(b);\n        FindSettings.getInstance().setLocalCaseSensitive(b);\n        updateResults(true);\n      }\n    });\n\n    cbWholeWords.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbWholeWords.isSelected();\n        FindManager.getInstance(myProject).getFindInFileModel().setWholeWordsOnly(b);\n        FindSettings.getInstance().setLocalWholeWordsOnly(b);\n        updateResults(true);\n      }\n    });\n\n    cbRegexp.addActionListener(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        final boolean b = cbRegexp.isSelected();\n        cbWholeWords.setEnabled(!b);\n        FindManager.getInstance(myProject).getFindInFileModel().setRegularExpressions(b);\n        updateResults(true);\n      }\n    });\n\n    JPanel tailPanel = new NonOpaquePanel(new BorderLayout(5, 0));\n    JPanel tailContainer = new NonOpaquePanel(new BorderLayout(5, 0));\n    tailContainer.add(tailPanel, BorderLayout.EAST);\n    add(tailContainer, BorderLayout.CENTER);\n\n    myMatchInfoLabel = new JLabel();\n    setSmallerFontAndOpaque(myMatchInfoLabel);\n\n    JLabel closeLabel = new JLabel(\" \", IconLoader.getIcon(\"/actions/cross.png\"), JLabel.RIGHT);\n    closeLabel.addMouseListener(new MouseAdapter() {\n      public void mousePressed(final MouseEvent e) {\n        close();\n      }\n    });\n\n    closeLabel.setToolTipText(\"Close search bar (Escape)\");\n\n    tailPanel.add(myMatchInfoLabel, BorderLayout.CENTER);\n    tailPanel.add(closeLabel, BorderLayout.EAST);\n\n    mySearchField.getDocument().addDocumentListener(new DocumentAdapter() {\n      protected void textChanged(final DocumentEvent e) {\n        updateResults(true);\n      }\n    });\n\n    mySearchField.registerKeyboardAction(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        close();\n      }\n    }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_FOCUSED);\n\n    mySearchField.registerKeyboardAction(new ActionListener() {\n      public void actionPerformed(final ActionEvent e) {\n        if (\"\".equals(mySearchField.getText())) {\n          close();\n        }\n        else {\n          myEditor.getContentComponent().requestFocus();\n          addCurrentTextToRecents();\n        }\n      }\n    }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK), JComponent.WHEN_FOCUSED);\n\n    final String initialText = myEditor.getSelectionModel().getSelectedText();\n\n    SwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        mySearchField.setText(initialText != null && initialText.indexOf('\\n') < 0 ? initialText : \"\");\n      }\n    });\n\n    new VariantsCompletionAction(); // It registers a shortcut set automatically on construction\n\n    myDocumentListener = new com.intellij.openapi.editor.event.DocumentAdapter() {\n      public void documentChanged(final com.intellij.openapi.editor.event.DocumentEvent e) {\n        updateResults(false);\n      }\n    };\n\n    myEditor.getDocument().addDocumentListener(myDocumentListener);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean findNextUsageInEditor(FileEditor fileEditor) {\n    LOG.assertTrue(fileEditor != null);\n\n    if (fileEditor instanceof TextEditor) {\n      TextEditor textEditor = (TextEditor)fileEditor;\n      Editor editor = textEditor.getEditor();\n\n      FindModel model = getFindNextModel();\n      if (model != null && model.searchHighlighters()) {\n        RangeHighlighter[] highlighters = ((HighlightManagerImpl)HighlightManager.getInstance(myProject)).getHighlighters(editor);\n        if (highlighters.length > 0) {\n          return highlightNextHighlighter(highlighters, editor, editor.getCaretModel().getOffset(), true, false);\n        }\n      }\n    }\n\n    return myFindUsagesManager.findNextUsageInFile(fileEditor);\n  }","id":94103,"modified_method":"public boolean findNextUsageInEditor(FileEditor fileEditor) {\n    LOG.assertTrue(fileEditor != null);\n\n    if (fileEditor instanceof TextEditor) {\n      TextEditor textEditor = (TextEditor)fileEditor;\n      Editor editor = textEditor.getEditor();\n\n      FindModel model = getFindNextModel(editor);\n      if (model != null && model.searchHighlighters()) {\n        RangeHighlighter[] highlighters = ((HighlightManagerImpl)HighlightManager.getInstance(myProject)).getHighlighters(editor);\n        if (highlighters.length > 0) {\n          return highlightNextHighlighter(highlighters, editor, editor.getCaretModel().getOffset(), true, false);\n        }\n      }\n    }\n\n    return myFindUsagesManager.findNextUsageInFile(fileEditor);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean findPreviousUsageInEditor(FileEditor fileEditor) {\n    LOG.assertTrue(fileEditor != null);\n\n    if (fileEditor instanceof TextEditor) {\n      TextEditor textEditor = (TextEditor)fileEditor;\n      Editor editor = textEditor.getEditor();\n\n      FindModel model = getFindNextModel();\n      if (model != null && model.searchHighlighters()) {\n        RangeHighlighter[] highlighters = ((HighlightManagerImpl)HighlightManager.getInstance(myProject)).getHighlighters(editor);\n        if (highlighters.length > 0) {\n          return highlightNextHighlighter(highlighters, editor, editor.getCaretModel().getOffset(), false, false);\n        }\n      }\n    }\n\n    return myFindUsagesManager.findPreviousUsageInFile(fileEditor);\n  }","id":94104,"modified_method":"public boolean findPreviousUsageInEditor(FileEditor fileEditor) {\n    LOG.assertTrue(fileEditor != null);\n\n    if (fileEditor instanceof TextEditor) {\n      TextEditor textEditor = (TextEditor)fileEditor;\n      Editor editor = textEditor.getEditor();\n\n      FindModel model = getFindNextModel(editor);\n      if (model != null && model.searchHighlighters()) {\n        RangeHighlighter[] highlighters = ((HighlightManagerImpl)HighlightManager.getInstance(myProject)).getHighlighters(editor);\n        if (highlighters.length > 0) {\n          return highlightNextHighlighter(highlighters, editor, editor.getCaretModel().getOffset(), false, false);\n        }\n      }\n    }\n\n    return myFindUsagesManager.findPreviousUsageInFile(fileEditor);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void processNotFound(final Editor editor, String stringToFind, FindModel model, Project project) {\n\n    String message = FindBundle.message(\"find.search.string.not.found.message\", stringToFind);\n\n    if (model.isGlobal()) {\n      final FindModel newModel = (FindModel)model.clone();\n      FindManager findManager = FindManager.getInstance(project);\n      Document document = editor.getDocument();\n      FindResult result;\n      if (newModel.isForward()) {\n        result = findManager.findString(document.getCharsSequence(), 0, model);\n      }\n      else {\n        result = findManager.findString(document.getCharsSequence(), document.getTextLength(), model);\n      }\n      if (!result.isStringFound()) {\n        result = null;\n      }\n\n      FindModel modelForNextSearch = findManager.getFindNextModel();\n      if (modelForNextSearch == null) {\n        modelForNextSearch = findManager.getFindInFileModel();\n      }\n\n      if (result != null) {\n        if (newModel.isForward()) {\n          AnAction action = ActionManager.getInstance().getAction(\n            modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_NEXT : IdeActions.ACTION_FIND_PREVIOUS);\n          String shortcutsText = KeymapUtil.getFirstKeyboardShortcutText(action);\n          if (shortcutsText.length() > 0) {\n            message = FindBundle.message(\"find.search.again.from.top.hotkey.message\", message, shortcutsText);\n          }\n          else {\n            message = FindBundle.message(\"find.search.again.from.top.action.message\", message);\n          }\n          editor.putUserData(KEY, Direction.DOWN);\n        }\n        else {\n          AnAction action = ActionManager.getInstance().getAction(\n            modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_PREVIOUS : IdeActions.ACTION_FIND_NEXT);\n          String shortcutsText = KeymapUtil.getFirstKeyboardShortcutText(action);\n          if (shortcutsText.length() > 0) {\n            message = FindBundle.message(\"find.search.again.from.bottom.hotkey.message\", message, shortcutsText);\n          }\n          else {\n            message = FindBundle.message(\"find.search.again.from.bottom.action.message\", message);\n          }\n          editor.putUserData(KEY, Direction.UP);\n        }\n      }\n      CaretListener listener = new CaretListener() {\n        public void caretPositionChanged(CaretEvent e) {\n          editor.putUserData(KEY, null);\n          editor.getCaretModel().removeCaretListener(this);\n        }\n      };\n      editor.getCaretModel().addCaretListener(listener);\n    }\n    HintManager hintManager = HintManager.getInstance();\n    JComponent component = HintUtil.createInformationLabel(message);\n    final LightweightHint hint = new LightweightHint(component);\n    hintManager.showEditorHint(hint, editor, HintManager.UNDER,\n                               HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE |\n                               HintManager.HIDE_BY_SCROLLING,\n                               0, false);\n  }","id":94105,"modified_method":"private static void processNotFound(final Editor editor, String stringToFind, FindModel model, Project project) {\n\n    String message = FindBundle.message(\"find.search.string.not.found.message\", stringToFind);\n\n    if (model.isGlobal()) {\n      final FindModel newModel = (FindModel)model.clone();\n      FindManager findManager = FindManager.getInstance(project);\n      Document document = editor.getDocument();\n      FindResult result;\n      if (newModel.isForward()) {\n        result = findManager.findString(document.getCharsSequence(), 0, model);\n      }\n      else {\n        result = findManager.findString(document.getCharsSequence(), document.getTextLength(), model);\n      }\n      if (!result.isStringFound()) {\n        result = null;\n      }\n\n      FindModel modelForNextSearch = findManager.getFindNextModel(editor);\n      if (modelForNextSearch == null) {\n        modelForNextSearch = findManager.getFindInFileModel();\n      }\n\n      if (result != null) {\n        if (newModel.isForward()) {\n          AnAction action = ActionManager.getInstance().getAction(\n            modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_NEXT : IdeActions.ACTION_FIND_PREVIOUS);\n          String shortcutsText = KeymapUtil.getFirstKeyboardShortcutText(action);\n          if (shortcutsText.length() > 0) {\n            message = FindBundle.message(\"find.search.again.from.top.hotkey.message\", message, shortcutsText);\n          }\n          else {\n            message = FindBundle.message(\"find.search.again.from.top.action.message\", message);\n          }\n          editor.putUserData(KEY, Direction.DOWN);\n        }\n        else {\n          AnAction action = ActionManager.getInstance().getAction(\n            modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_PREVIOUS : IdeActions.ACTION_FIND_NEXT);\n          String shortcutsText = KeymapUtil.getFirstKeyboardShortcutText(action);\n          if (shortcutsText.length() > 0) {\n            message = FindBundle.message(\"find.search.again.from.bottom.hotkey.message\", message, shortcutsText);\n          }\n          else {\n            message = FindBundle.message(\"find.search.again.from.bottom.action.message\", message);\n          }\n          editor.putUserData(KEY, Direction.UP);\n        }\n      }\n      CaretListener listener = new CaretListener() {\n        public void caretPositionChanged(CaretEvent e) {\n          editor.putUserData(KEY, null);\n          editor.getCaretModel().removeCaretListener(this);\n        }\n      };\n      editor.getCaretModel().addCaretListener(listener);\n    }\n    HintManager hintManager = HintManager.getInstance();\n    JComponent component = HintUtil.createInformationLabel(message);\n    final LightweightHint hint = new LightweightHint(component);\n    hintManager.showEditorHint(hint, editor, HintManager.UNDER,\n                               HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE |\n                               HintManager.HIDE_BY_SCROLLING,\n                               0, false);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void searchBack(final Project project, final Editor editor) {\n    FindManager findManager = FindManager.getInstance(project);\n    if (!findManager.findWasPerformed()) {\n      find(project, editor);\n      return;\n    }\n\n    FindModel model = findManager.getFindNextModel();\n    if (model == null) {\n      model = findManager.getFindInFileModel();\n    }\n    model = (FindModel)model.clone();\n    model.setForward(!model.isForward());\n    if (!model.isGlobal() && !editor.getSelectionModel().hasSelection()) {\n      model.setGlobal(true);\n    }\n\n    int offset;\n    if (Direction.UP.equals(editor.getUserData(KEY)) && !model.isForward()) {\n      offset = editor.getDocument().getTextLength();\n    }\n    else if (Direction.DOWN.equals(editor.getUserData(KEY)) && model.isForward()) {\n      offset = 0;\n    }\n    else {\n      editor.putUserData(KEY, null);\n      offset = editor.getCaretModel().getOffset();\n      if (!model.isForward() && offset > 0) {\n        offset--;\n      }\n    }\n    searchAgain(project, editor, offset, model);\n  }","id":94106,"modified_method":"public static void searchBack(final Project project, final Editor editor) {\n    FindManager findManager = FindManager.getInstance(project);\n    if (!findManager.findWasPerformed()) {\n      find(project, editor);\n      return;\n    }\n\n    FindModel model = findManager.getFindNextModel(editor);\n    if (model == null) {\n      model = findManager.getFindInFileModel();\n    }\n    model = (FindModel)model.clone();\n    model.setForward(!model.isForward());\n    if (!model.isGlobal() && !editor.getSelectionModel().hasSelection()) {\n      model.setGlobal(true);\n    }\n\n    int offset;\n    if (Direction.UP.equals(editor.getUserData(KEY)) && !model.isForward()) {\n      offset = editor.getDocument().getTextLength();\n    }\n    else if (Direction.DOWN.equals(editor.getUserData(KEY)) && model.isForward()) {\n      offset = 0;\n    }\n    else {\n      editor.putUserData(KEY, null);\n      offset = editor.getCaretModel().getOffset();\n      if (!model.isForward() && offset > 0) {\n        offset--;\n      }\n    }\n    searchAgain(project, editor, offset, model);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void findWordAtCaret(Project project, Editor editor) {\n    int caretOffset = editor.getCaretModel().getOffset();\n    Document document = editor.getDocument();\n    CharSequence text = document.getCharsSequence();\n    int start = 0;\n    int end = document.getTextLength();\n    if (!editor.getSelectionModel().hasSelection()) {\n      for (int i = caretOffset - 1; i >= 0; i--) {\n        char c = text.charAt(i);\n        if (!Character.isJavaIdentifierPart(c)) {\n          start = i + 1;\n          break;\n        }\n      }\n      for (int i = caretOffset; i < document.getTextLength(); i++) {\n        char c = text.charAt(i);\n        if (!Character.isJavaIdentifierPart(c)) {\n          end = i;\n          break;\n        }\n      }\n    }\n    else {\n      start = editor.getSelectionModel().getSelectionStart();\n      end = editor.getSelectionModel().getSelectionEnd();\n    }\n    if (start >= end) {\n      return;\n    }\n    FindManager findManager = FindManager.getInstance(project);\n    String s = text.subSequence(start, end).toString();\n    FindSettings.getInstance().addStringToFind(s);\n    findManager.getFindInFileModel().setStringToFind(s);\n    findManager.setFindWasPerformed();\n    FindModel model = new FindModel();\n    model.setStringToFind(s);\n    model.setCaseSensitive(true);\n    model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection());\n    findManager.setFindNextModel(model);\n    doSearch(project, editor, caretOffset, true, model, true);\n  }","id":94107,"modified_method":"public static void findWordAtCaret(Project project, Editor editor) {\n    int caretOffset = editor.getCaretModel().getOffset();\n    Document document = editor.getDocument();\n    CharSequence text = document.getCharsSequence();\n    int start = 0;\n    int end = document.getTextLength();\n    if (!editor.getSelectionModel().hasSelection()) {\n      for (int i = caretOffset - 1; i >= 0; i--) {\n        char c = text.charAt(i);\n        if (!Character.isJavaIdentifierPart(c)) {\n          start = i + 1;\n          break;\n        }\n      }\n      for (int i = caretOffset; i < document.getTextLength(); i++) {\n        char c = text.charAt(i);\n        if (!Character.isJavaIdentifierPart(c)) {\n          end = i;\n          break;\n        }\n      }\n    }\n    else {\n      start = editor.getSelectionModel().getSelectionStart();\n      end = editor.getSelectionModel().getSelectionEnd();\n    }\n    if (start >= end) {\n      return;\n    }\n    FindManager findManager = FindManager.getInstance(project);\n    String s = text.subSequence(start, end).toString();\n    FindSettings.getInstance().addStringToFind(s);\n    findManager.getFindInFileModel().setStringToFind(s);\n    findManager.setFindWasPerformed();\n    FindModel model = new FindModel();\n    model.setStringToFind(s);\n    model.setCaseSensitive(true);\n    model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection());\n\n    final JComponent header = editor.getHeaderComponent();\n    if (header instanceof EditorSearchComponent) {\n      final EditorSearchComponent searchComponent = (EditorSearchComponent)header;\n      searchComponent.setTextInField(model.getStringToFind());\n    }\n\n    findManager.setFindNextModel(model);\n    doSearch(project, editor, caretOffset, true, model, true);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean searchAgain(final Project project, final Editor editor) {\n    FindManager findManager = FindManager.getInstance(project);\n    if (!findManager.findWasPerformed()) {\n      find(project, editor);\n      return false;\n    }\n\n    FindModel model = findManager.getFindNextModel();\n    if (model == null) {\n      model = findManager.getFindInFileModel();\n    }\n    model = (FindModel)model.clone();\n\n    int offset;\n    if (Direction.DOWN.equals(editor.getUserData(KEY)) && model.isForward()) {\n      offset = 0;\n    }\n    else if (Direction.UP.equals(editor.getUserData(KEY)) && !model.isForward()) {\n      offset = editor.getDocument().getTextLength();\n    }\n    else {\n      editor.putUserData(KEY, null);\n      offset = editor.getCaretModel().getOffset();\n      if (!model.isForward() && offset > 0 ) {\n        offset--;\n      }\n    }\n    return searchAgain(project, editor, offset, model);\n  }","id":94108,"modified_method":"public static boolean searchAgain(final Project project, final Editor editor) {\n    FindManager findManager = FindManager.getInstance(project);\n    if (!findManager.findWasPerformed()) {\n      find(project, editor);\n      return false;\n    }\n\n    FindModel model = findManager.getFindNextModel(editor);\n    if (model == null) {\n      model = findManager.getFindInFileModel();\n    }\n    model = (FindModel)model.clone();\n\n    int offset;\n    if (Direction.DOWN.equals(editor.getUserData(KEY)) && model.isForward()) {\n      offset = 0;\n    }\n    else if (Direction.UP.equals(editor.getUserData(KEY)) && !model.isForward()) {\n      offset = editor.getDocument().getTextLength();\n    }\n    else {\n      editor.putUserData(KEY, null);\n      offset = editor.getCaretModel().getOffset();\n      if (!model.isForward() && offset > 0 ) {\n        offset--;\n      }\n    }\n    return searchAgain(project, editor, offset, model);\n  }","commit_id":"a2c7bc91c662f13c705902cfe908f9bc57853fed","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void generateDispatchMethod(JvmOperation dispatchOperation, Collection<JvmOperation> collection,\n\t\t\tIAppendable a) {\n\t\ta.openScope();\n\t\ta.append(\"\\n\\npublic \");\n\t\ta.append(resolveMultiType(dispatchOperation.getReturnType())).append(\" \");\n\t\ta.append(dispatchOperation.getSimpleName()).append(\"(\");\n\t\tdeclareParameters(dispatchOperation.getParameters(), a);\n\t\ta.append(\") {\");\n\t\ta.increaseIndentation();\n\t\ta.append(\"\\n\");\n\t\tfor (JvmOperation operation : dispatchingSupport.sort(collection)) {\n\t\t\ta.append(\"if (\");\n\t\t\ta.increaseIndentation().increaseIndentation();\n\t\t\tIterator<JvmFormalParameter> iter1 = dispatchOperation.getParameters().iterator();\n\t\t\tfor (Iterator<JvmFormalParameter> iter2 = operation.getParameters().iterator(); iter2.hasNext();) {\n\t\t\t\tJvmFormalParameter p1 = iter1.next();\n\t\t\t\tJvmFormalParameter p2 = iter2.next();\n\t\t\t\tfinal JvmTypeReference type = p2.getParameterType();\n\t\t\t\tif (this.typeRefs.is(type, Void.class)) {\n\t\t\t\t\ta.append(\"(\").append(p1.getName()).append(\" == null)\");\n\t\t\t\t} else {\n\t\t\t\t\ta.append(\"(\").append(p1.getName()).append(\" instanceof \");\n\t\t\t\t\ta.append(primitives.asWrapperTypeIfPrimitive(type).getType()).append(\")\");\n\t\t\t\t}\n\t\t\t\tif (iter2.hasNext()) {\n\t\t\t\t\ta.append(\"\\n && \");\n\t\t\t\t}\n\t\t\t}\n\t\t\ta.decreaseIndentation().decreaseIndentation();\n\t\t\ta.append(\") {\").increaseIndentation();\n\t\t\ta.append(\"\\n\");\n\t\t\tfinal boolean isCurrentVoid = typeRefs.is(operation.getReturnType(), Void.TYPE);\n\t\t\tfinal boolean isDispatchVoid = typeRefs.is(dispatchOperation.getReturnType(), Void.TYPE);\n\t\t\tif (isDispatchVoid) {\n\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\ta.append(\";\");\n\t\t\t} else {\n\t\t\t\tif (isCurrentVoid) {\n\t\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\t\ta.append(\";\\nreturn null\");\n\t\t\t\t} else {\n\t\t\t\t\ta.append(\"return \");\n\t\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\t}\n\t\t\t\ta.append(\";\");\n\t\t\t}\n\t\t\ta.decreaseIndentation().append(\"\\n} else \");\n\t\t}\n\t\ta.append(\"{\").increaseIndentation();\n\t\ta.append(\"\\nthrow new IllegalArgumentException();\");\n\t\ta.decreaseIndentation().append(\"\\n}\");\n\t\ta.decreaseIndentation().append(\"\\n}\");\n\t\ta.closeScope();\n\t}","id":94109,"modified_method":"protected void generateDispatchMethod(JvmOperation dispatchOperation, Collection<JvmOperation> collection,\n\t\t\tIAppendable a) {\n\t\ta.openScope();\n\t\ta.append(\"\\n\\npublic \");\n\t\tserialize(dispatchOperation.getReturnType(), dispatchOperation, a);\n\t\ta.append(\" \");\n\t\ta.append(dispatchOperation.getSimpleName()).append(\"(\");\n\t\tdeclareParameters(dispatchOperation.getParameters(), a);\n\t\ta.append(\") {\");\n\t\ta.increaseIndentation();\n\t\ta.append(\"\\n\");\n\t\tfor (JvmOperation operation : dispatchingSupport.sort(collection)) {\n\t\t\ta.append(\"if (\");\n\t\t\ta.increaseIndentation().increaseIndentation();\n\t\t\tIterator<JvmFormalParameter> iter1 = dispatchOperation.getParameters().iterator();\n\t\t\tfor (Iterator<JvmFormalParameter> iter2 = operation.getParameters().iterator(); iter2.hasNext();) {\n\t\t\t\tJvmFormalParameter p1 = iter1.next();\n\t\t\t\tJvmFormalParameter p2 = iter2.next();\n\t\t\t\tfinal JvmTypeReference type = p2.getParameterType();\n\t\t\t\tif (this.typeRefs.is(type, Void.class)) {\n\t\t\t\t\ta.append(\"(\").append(p1.getName()).append(\" == null)\");\n\t\t\t\t} else {\n\t\t\t\t\ta.append(\"(\").append(p1.getName()).append(\" instanceof \");\n\t\t\t\t\ta.append(primitives.asWrapperTypeIfPrimitive(type).getType()).append(\")\");\n\t\t\t\t}\n\t\t\t\tif (iter2.hasNext()) {\n\t\t\t\t\ta.append(\"\\n && \");\n\t\t\t\t}\n\t\t\t}\n\t\t\ta.decreaseIndentation().decreaseIndentation();\n\t\t\ta.append(\") {\").increaseIndentation();\n\t\t\ta.append(\"\\n\");\n\t\t\tfinal boolean isCurrentVoid = typeRefs.is(operation.getReturnType(), Void.TYPE);\n\t\t\tfinal boolean isDispatchVoid = typeRefs.is(dispatchOperation.getReturnType(), Void.TYPE);\n\t\t\tif (isDispatchVoid) {\n\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\ta.append(\";\");\n\t\t\t} else {\n\t\t\t\tif (isCurrentVoid) {\n\t\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\t\ta.append(\";\\nreturn null\");\n\t\t\t\t} else {\n\t\t\t\t\ta.append(\"return \");\n\t\t\t\t\tgenerateActualDispatchCall(dispatchOperation, operation, a);\n\t\t\t\t}\n\t\t\t\ta.append(\";\");\n\t\t\t}\n\t\t\ta.decreaseIndentation().append(\"\\n} else \");\n\t\t}\n\t\ta.append(\"{\").increaseIndentation();\n\t\ta.append(\"\\nthrow new IllegalArgumentException();\");\n\t\ta.decreaseIndentation().append(\"\\n}\");\n\t\ta.decreaseIndentation().append(\"\\n}\");\n\t\ta.closeScope();\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void compile(XtendFunction obj, IAppendable appendable) {\n\t\tif (obj.getCreateExtensionInfo()!=null) {\n\t\t\tdeclareCreateExtensionCache(obj, appendable);\n\t\t}\n\t\t\n\t\tappendable.openScope();\n\t\tJvmTypeReference returnType = associations.getDirectlyInferredOperation(obj).getReturnType();\n\t\tString name = obj.getName();\n\t\tif (obj.isDispatch()) {\n\t\t\tname = \"_\" + name;\n\t\t}\n\t\tappendable.append(\"\\n\\n\").append(\"public \");\n\t\tappendTypeParameterDeclaration(obj.getTypeParameters(), appendable);\n\t\tappendable.append(resolveMultiType(returnType)).append(\" \").append(name).append(\"(\");\n\t\tfinal EList<JvmFormalParameter> parameters = obj.getParameters();\n\t\tdeclareParameters(parameters, appendable);\n\t\tappendable.append(\") \");\n\t\tList<JvmTypeReference> checkedExceptions = getCheckedExceptions(obj);\n\t\tif (!checkedExceptions.isEmpty()) {\n\t\t\tappendable.append(\"throws \");\n\t\t\tfor (Iterator<JvmTypeReference> iterator = checkedExceptions.iterator(); iterator.hasNext();) {\n\t\t\t\tJvmTypeReference jvmTypeReference = iterator.next();\n\t\t\t\tappendable.append(jvmTypeReference);\n\t\t\t\tif (iterator.hasNext())\n\t\t\t\t\tappendable.append(\", \");\n\t\t\t}\n\t\t}\n\t\tappendable.append(\"{\");\n\t\tappendable.increaseIndentation();\n\t\tif (obj.getCreateExtensionInfo()!=null) {\n\t\t\tcompileCreateExtensionBody(obj, appendable);\n\t\t} else {\n\t\t\tcompile(obj.getExpression(), appendable, returnType);\n\t\t}\n\t\tappendable.decreaseIndentation();\n\t\tappendable.append(\"\\n}\").closeScope();\n\t}","id":94110,"modified_method":"protected void compile(XtendFunction obj, IAppendable appendable) {\n\t\tif (obj.getCreateExtensionInfo()!=null) {\n\t\t\tdeclareCreateExtensionCache(obj, appendable);\n\t\t}\n\t\t\n\t\tappendable.openScope();\n\t\tJvmTypeReference returnType = associations.getDirectlyInferredOperation(obj).getReturnType();\n\t\tString name = obj.getName();\n\t\tif (obj.isDispatch()) {\n\t\t\tname = \"_\" + name;\n\t\t}\n\t\tappendable.append(\"\\n\\n\").append(\"public \");\n\t\tappendTypeParameterDeclaration(obj.getTypeParameters(), appendable);\n\t\tserialize(resolveMultiType(returnType), obj, appendable);\n\t\tappendable.append(\" \").append(name).append(\"(\");\n\t\tfinal EList<JvmFormalParameter> parameters = obj.getParameters();\n\t\tdeclareParameters(parameters, appendable);\n\t\tappendable.append(\") \");\n\t\tList<JvmTypeReference> checkedExceptions = getCheckedExceptions(obj);\n\t\tif (!checkedExceptions.isEmpty()) {\n\t\t\tappendable.append(\"throws \");\n\t\t\tfor (Iterator<JvmTypeReference> iterator = checkedExceptions.iterator(); iterator.hasNext();) {\n\t\t\t\tJvmTypeReference jvmTypeReference = iterator.next();\n\t\t\t\tserialize(jvmTypeReference, obj, appendable);\n\t\t\t\tif (iterator.hasNext())\n\t\t\t\t\tappendable.append(\", \");\n\t\t\t}\n\t\t}\n\t\tappendable.append(\"{\");\n\t\tappendable.increaseIndentation();\n\t\tif (obj.getCreateExtensionInfo()!=null) {\n\t\t\tcompileCreateExtensionBody(obj, appendable);\n\t\t} else {\n\t\t\tcompile(obj.getExpression(), appendable, returnType);\n\t\t}\n\t\tappendable.decreaseIndentation();\n\t\tappendable.append(\"\\n}\").closeScope();\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void appendTypeParameterDeclaration(EList<JvmTypeParameter> typeParameters, IAppendable appendable) {\n\t\tif (!typeParameters.isEmpty()) {\n\t\t\tappendable.append(\"<\");\n\t\t\tfor (Iterator<JvmTypeParameter> iterator = typeParameters.iterator(); iterator.hasNext();) {\n\t\t\t\tJvmTypeParameter tp = iterator.next();\n\t\t\t\tappendable.append(tp);\n\t\t\t\tfinal Iterable<JvmUpperBound> constraints = filter(tp.getConstraints(), JvmUpperBound.class);\n\t\t\t\tIterator<JvmUpperBound> iter2 = constraints.iterator();\n\t\t\t\tif (iter2.hasNext()) {\n\t\t\t\t\tappendable.append(\" extends \");\n\t\t\t\t\twhile (iter2.hasNext()) {\n\t\t\t\t\t\tJvmUpperBound constraint = iter2.next();\n\t\t\t\t\t\tappendable.append(constraint.getTypeReference());\n\t\t\t\t\t\tif (iter2.hasNext())\n\t\t\t\t\t\t\tappendable.append(\",\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (iterator.hasNext())\n\t\t\t\t\tappendable.append(\",\");\n\t\t\t}\n\t\t\tappendable.append(\"> \");\n\t\t}\n\t}","id":94111,"modified_method":"protected void appendTypeParameterDeclaration(EList<JvmTypeParameter> typeParameters, IAppendable appendable) {\n\t\tif (!typeParameters.isEmpty()) {\n\t\t\tappendable.append(\"<\");\n\t\t\tfor (Iterator<JvmTypeParameter> iterator = typeParameters.iterator(); iterator.hasNext();) {\n\t\t\t\tJvmTypeParameter tp = iterator.next();\n\t\t\t\tappendable.append(tp);\n\t\t\t\tfinal Iterable<JvmUpperBound> constraints = filter(tp.getConstraints(), JvmUpperBound.class);\n\t\t\t\tIterator<JvmUpperBound> iter2 = constraints.iterator();\n\t\t\t\tif (iter2.hasNext()) {\n\t\t\t\t\tappendable.append(\" extends \");\n\t\t\t\t\twhile (iter2.hasNext()) {\n\t\t\t\t\t\tJvmUpperBound constraint = iter2.next();\n\t\t\t\t\t\tserialize(constraint.getTypeReference(), tp, appendable);\n\t\t\t\t\t\tif (iter2.hasNext())\n\t\t\t\t\t\t\tappendable.append(\",\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (iterator.hasNext())\n\t\t\t\t\tappendable.append(\",\");\n\t\t\t}\n\t\t\tappendable.append(\"> \");\n\t\t}\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void declareParameters(final EList<JvmFormalParameter> parameters, IAppendable appendable) {\n\t\tfinal int numParams = parameters.size();\n\t\tfor (int i = 0; i < numParams; i++) {\n\t\t\tJvmFormalParameter p = parameters.get(i);\n\t\t\tString varName = declareNameInVariableScope(p, appendable);\n\t\t\tappendable.append(\"final \").append(p.getParameterType()).append(\" \").append(varName);\n\t\t\tif (i != numParams - 1)\n\t\t\t\tappendable.append(\", \");\n\t\t}\n\t}","id":94112,"modified_method":"protected void declareParameters(final EList<JvmFormalParameter> parameters, IAppendable appendable) {\n\t\tfinal int numParams = parameters.size();\n\t\tfor (int i = 0; i < numParams; i++) {\n\t\t\tJvmFormalParameter p = parameters.get(i);\n\t\t\tString varName = declareNameInVariableScope(p, appendable);\n\t\t\tappendable.append(\"final \");\n\t\t\tserialize(p.getParameterType(),p,appendable);\n\t\t\tappendable.append(\" \").append(varName);\n\t\t\tif (i != numParams - 1)\n\t\t\t\tappendable.append(\", \");\n\t\t}\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void generateActualDispatchCall(JvmOperation dispatchOperation, JvmOperation actualOperationToCall,\n\t\t\tIAppendable a) {\n\t\tIterator<JvmFormalParameter> iter1;\n\t\ta.append(actualOperationToCall.getSimpleName()).append(\"(\");\n\t\titer1 = dispatchOperation.getParameters().iterator();\n\t\tfor (Iterator<JvmFormalParameter> iter2 = actualOperationToCall.getParameters().iterator(); iter2.hasNext();) {\n\t\t\tJvmFormalParameter p1 = iter1.next();\n\t\t\tJvmFormalParameter p2 = iter2.next();\n\t\t\ta.append(\"(\").append(primitives.asWrapperTypeIfPrimitive(p2.getParameterType())).append(\")\");\n\t\t\tif (typeRefs.is(p2.getParameterType(), Void.class)) {\n\t\t\t\ta.append(\"null\");\n\t\t\t} else {\n\t\t\t\ta.append(p1.getName());\n\t\t\t}\n\t\t\tif (iter2.hasNext()) {\n\t\t\t\ta.append(\", \");\n\t\t\t}\n\t\t}\n\t\ta.append(\")\");\n\t}","id":94113,"modified_method":"protected void generateActualDispatchCall(JvmOperation dispatchOperation, JvmOperation actualOperationToCall,\n\t\t\tIAppendable a) {\n\t\tIterator<JvmFormalParameter> iter1;\n\t\ta.append(actualOperationToCall.getSimpleName()).append(\"(\");\n\t\titer1 = dispatchOperation.getParameters().iterator();\n\t\tfor (Iterator<JvmFormalParameter> iter2 = actualOperationToCall.getParameters().iterator(); iter2.hasNext();) {\n\t\t\tJvmFormalParameter p1 = iter1.next();\n\t\t\tJvmFormalParameter p2 = iter2.next();\n\t\t\ta.append(\"(\");\n\t\t\tserialize(primitives.asWrapperTypeIfPrimitive(p2.getParameterType()), dispatchOperation, a);\n\t\t\ta.append(\")\");\n\t\t\tif (typeRefs.is(p2.getParameterType(), Void.class)) {\n\t\t\t\ta.append(\"null\");\n\t\t\t} else {\n\t\t\t\ta.append(p1.getName());\n\t\t\t}\n\t\t\tif (iter2.hasNext()) {\n\t\t\t\ta.append(\", \");\n\t\t\t}\n\t\t}\n\t\ta.append(\")\");\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void compile(DeclaredDependency dependency, IAppendable appendable) {\n\t\tappendable.append(\"\\n@com.google.inject.Inject private \");\n\t\tappendable.append(dependency.getType()).append(\" \");\n\t\tappendable.append(appendable.declareVariable(dependency, dependency.getSimpleName())).append(\";\");\n\t}","id":94114,"modified_method":"protected void compile(DeclaredDependency dependency, IAppendable appendable) {\n\t\tJvmTypeReference inject = getTypeReferences().getTypeForName(Inject.class, dependency);\n\t\tappendable.append(\"\\n@\");\n\t\tserialize(inject, dependency, appendable);\n\t\tappendable.append(\" private \");\n\t\tserialize(dependency.getType(), dependency, appendable);\n\t\tappendable.append(\" \");\n\t\tappendable.append(appendable.declareVariable(dependency, dependency.getSimpleName())).append(\";\");\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"public void _toJavaStatement(RichString richString, IAppendable b, boolean isReferenced) {\n\t\t// declare variable\n\t\tJvmTypeReference type = getTypeProvider().getType(richString);\n\t\tString variableName = makeJavaIdentifier(b.declareVariable(Tuples.pair(richString, \"result\"), \"builder\"));\n\t\tb.append(\"\\n\");\n\t\tb.append(type);\n\t\tb.append(\" \");\n\t\tb.append(variableName);\n\t\tb.append(\" = new \");\n\t\tb.append(type);\n\t\tb.append(\"();\");\n\t\tRichStringPrepareCompiler compiler = new RichStringPrepareCompiler(b, variableName);\n\t\trichStringProcessor.process(richString, compiler, indentationHandler.get());\n\t}","id":94115,"modified_method":"public void _toJavaStatement(RichString richString, IAppendable b, boolean isReferenced) {\n\t\t// declare variable\n\t\tJvmTypeReference type = getTypeProvider().getType(richString);\n\t\tString variableName = makeJavaIdentifier(b.declareVariable(Tuples.pair(richString, \"result\"), \"builder\"));\n\t\tb.append(\"\\n\");\n\t\tserialize(type, richString, b);\n\t\tb.append(\" \");\n\t\tb.append(variableName);\n\t\tb.append(\" = new \");\n\t\tserialize(type, richString, b);\n\t\tb.append(\"();\");\n\t\tRichStringPrepareCompiler compiler = new RichStringPrepareCompiler(b, variableName);\n\t\trichStringProcessor.process(richString, compiler, indentationHandler.get());\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void declareCreateExtensionCache(XtendFunction obj, IAppendable appendable) {\n\t\tfinal CreateExtensionInfo info = obj.getCreateExtensionInfo();\n\t\tJvmTypeReference returnType = getTypeProvider().getType(info.getCreateExpression());\n\t\tJvmTypeReference list = getTypeReferences().getTypeForName(ArrayList.class, obj);\n\t\tJvmTypeReference map = getTypeReferences().getTypeForName(HashMap.class, obj, list, returnType);\n\t\tappendable.append(\"\\n\\nprivate final \");\n\t\tserialize(map, info.getCreateExpression(), appendable, false, true);\n\t\tappendable.append(\" \");\n\t\tString cacheName = appendable.declareVariable(cacheVarKey(info), \"_createCache_\"+obj.getName());\n\t\tappendable.append(cacheName);\n\t\tappendable.append(\" = new \");\n\t\tserialize(map, info.getCreateExpression(), appendable, false, true);\n\t\tappendable.append(\"();\");\n\t}","id":94116,"modified_method":"protected void declareCreateExtensionCache(XtendFunction obj, IAppendable appendable) {\n\t\tfinal CreateExtensionInfo info = obj.getCreateExtensionInfo();\n\t\tJvmTypeReference returnType = getTypeProvider().getType(info.getCreateExpression());\n\t\tJvmTypeReference list = getTypeReferences().getTypeForName(ArrayList.class, obj);\n\t\tJvmTypeReference map = getTypeReferences().getTypeForName(HashMap.class, obj, list, returnType);\n\t\tappendable.append(\"\\n\\nprivate final \");\n\t\tserialize(map, info.getCreateExpression(), appendable);\n\t\tappendable.append(\" \");\n\t\tString cacheName = appendable.declareVariable(cacheVarKey(info), \"_createCache_\"+obj.getName());\n\t\tappendable.append(cacheName);\n\t\tappendable.append(\" = new \");\n\t\tserialize(map, info.getCreateExpression(), appendable);\n\t\tappendable.append(\"();\");\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void compile(XtendClass obj, IAppendable appendable) {\n\t\t//TODO abstract, final\n\t\tappendable.append(\"\\n@SuppressWarnings(\\\"all\\\")\");\n\t\tappendable.append(\"\\npublic class \").append(obj.getName());\n\t\tappendTypeParameterDeclaration(obj.getTypeParameters(), appendable);\n\t\tif (obj.getExtends() != null)\n\t\t\tappendable.append(\" extends \").append(obj.getExtends());\n\t\tif (!obj.getImplements().isEmpty()) {\n\t\t\tappendable.append(\" implements \").append(obj.getImplements().get(0));\n\t\t\tfor (int i = 1; i < obj.getImplements().size(); ++i)\n\t\t\t\tappendable.append(\", \").append(obj.getImplements().get(i));\n\t\t}\n\t\tappendable.append(\" {\");\n\t\tappendable.increaseIndentation();\n\t\tdeclareThis(obj, appendable);\n\t\tfor (XtendMember member : obj.getMembers()) {\n\t\t\tif (member instanceof XtendFunction) {\n\t\t\t\tcompile((XtendFunction) member, appendable);\n\t\t\t} else if (member instanceof DeclaredDependency) {\n\t\t\t\tcompile((DeclaredDependency) member, appendable);\n\t\t\t}\n\t\t}\n\t\tgenerateDispatchMethods(obj, appendable);\n\t\tappendable.decreaseIndentation();\n\t\tappendable.append(\"\\n}\");\n\t}","id":94117,"modified_method":"protected void compile(XtendClass obj, IAppendable appendable) {\n\t\t//TODO abstract, final\n\t\tappendable.append(\"\\n@SuppressWarnings(\\\"all\\\")\");\n\t\tappendable.append(\"\\npublic class \").append(obj.getName());\n\t\tappendTypeParameterDeclaration(obj.getTypeParameters(), appendable);\n\t\tif (obj.getExtends() != null) {\n\t\t\tappendable.append(\" extends \");\n\t\t\tserialize(obj.getExtends(), obj, appendable);\n\t\t}\n\t\tif (!obj.getImplements().isEmpty()) {\n\t\t\tappendable.append(\" implements \");\n\t\t\tserialize(obj.getImplements().get(0), obj, appendable);\n\t\t\tfor (int i = 1; i < obj.getImplements().size(); ++i) {\n\t\t\t\tappendable.append(\", \");\n\t\t\t\tserialize(obj.getImplements().get(i), obj, appendable);\n\t\t\t}\n\t\t}\n\t\tappendable.append(\" {\");\n\t\tappendable.increaseIndentation();\n\t\tdeclareThis(obj, appendable);\n\t\tfor (XtendMember member : obj.getMembers()) {\n\t\t\tif (member instanceof XtendFunction) {\n\t\t\t\tcompile((XtendFunction) member, appendable);\n\t\t\t} else if (member instanceof DeclaredDependency) {\n\t\t\t\tcompile((DeclaredDependency) member, appendable);\n\t\t\t}\n\t\t}\n\t\tgenerateDispatchMethods(obj, appendable);\n\t\tappendable.decreaseIndentation();\n\t\tappendable.append(\"\\n}\");\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void compileCreateExtensionBody(XtendFunction obj, IAppendable appendable) {\n\t\tCreateExtensionInfo info = obj.getCreateExtensionInfo();\n\t\tJvmTypeReference listType = getTypeReferences().getTypeForName(ArrayList.class, obj);\n\t\tJvmTypeReference collectonLiterals = getTypeReferences().getTypeForName(CollectionLiterals.class, obj);\n\t\tString cacheVarName = appendable.getName(cacheVarKey(info));\n\t\tString cacheKeyVarName = appendable.declareVariable(\"CacheKey\", \"_cacheKey\");\n\t\tappendable.append(\"\\nfinal \");\n\t\tserialize(listType, info.getCreateExpression(), appendable, false, true);\n\t\tappendable.append(cacheKeyVarName).append(\" = \");\n\t\tserialize(collectonLiterals, info.getCreateExpression(), appendable, false, true);\n\t\tappendable.append(\".newArrayList(\");\n\t\tEList<JvmFormalParameter> list = obj.getParameters();\n\t\tfor (Iterator<JvmFormalParameter> iterator = list.iterator(); iterator.hasNext();) {\n\t\t\tJvmFormalParameter jvmFormalParameter = iterator.next();\n\t\t\tappendable.append(appendable.getName(jvmFormalParameter));\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tappendable.append(\", \");\n\t\t\t}\n\t\t}\n\t\tappendable.append(\");\");\n\t\t// if the cache contains the key return the previously created object.\n\t\tappendable.append(\"\\nif (\").append(cacheVarName).append(\".containsKey(\").append(cacheKeyVarName).append(\")) {\");\n\t\tappendable.increaseIndentation();\n\t\tappendable.append(\"\\nreturn \").append(cacheVarName).append(\".get(\").append(cacheKeyVarName).append(\");\");\n\t\tappendable.decreaseIndentation().append(\"\\n}\");\n\t\t\n\t\t// execute the creation\n\t\tJvmTypeReference returnType = getTypeProvider().getType(info.getCreateExpression());\n\t\tinternalToJavaStatement(info.getCreateExpression(), appendable, true);\n\t\tappendable.append(\"\\n\");\n\t\tserialize(returnType,info.getCreateExpression(),appendable,false,true);\n\t\tString varName = declareNameInVariableScope(info, appendable);\n\t\tappendable.append(\" \").append(varName).append(\" = \");\n\t\tinternalToJavaExpression(info.getCreateExpression(), appendable);\n\t\tappendable.append(\";\");\n\t\t\n\t\t// store the newly created object in the cache\n\t\tappendable.append(\"\\n\").append(cacheVarName).append(\".put(\").append(cacheKeyVarName).append(\", \").append(varName).append(\");\");\n\t\t\n\t\t// execute the initialization\n\t\tJvmTypeReference primitiveVoid = getTypeReferences().getTypeForName(Void.TYPE, obj);\n\t\tcompile(obj.getExpression(), appendable, primitiveVoid);\n\t\t\n\t\t// return the result\n\t\tappendable.append(\"\\nreturn \");\n\t\tappendable.append(varName).append(\";\");\n\t}","id":94118,"modified_method":"protected void compileCreateExtensionBody(XtendFunction obj, IAppendable appendable) {\n\t\tCreateExtensionInfo info = obj.getCreateExtensionInfo();\n\t\tJvmTypeReference listType = getTypeReferences().getTypeForName(ArrayList.class, obj);\n\t\tJvmTypeReference collectonLiterals = getTypeReferences().getTypeForName(CollectionLiterals.class, obj);\n\t\tString cacheVarName = appendable.getName(cacheVarKey(info));\n\t\tString cacheKeyVarName = appendable.declareVariable(\"CacheKey\", \"_cacheKey\");\n\t\tappendable.append(\"\\nfinal \");\n\t\tserialize(listType, info.getCreateExpression(), appendable);\n\t\tappendable.append(cacheKeyVarName).append(\" = \");\n\t\tserialize(collectonLiterals, info.getCreateExpression(), appendable);\n\t\tappendable.append(\".newArrayList(\");\n\t\tEList<JvmFormalParameter> list = obj.getParameters();\n\t\tfor (Iterator<JvmFormalParameter> iterator = list.iterator(); iterator.hasNext();) {\n\t\t\tJvmFormalParameter jvmFormalParameter = iterator.next();\n\t\t\tappendable.append(appendable.getName(jvmFormalParameter));\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\tappendable.append(\", \");\n\t\t\t}\n\t\t}\n\t\tappendable.append(\");\");\n\t\t// if the cache contains the key return the previously created object.\n\t\tappendable.append(\"\\nif (\").append(cacheVarName).append(\".containsKey(\").append(cacheKeyVarName).append(\")) {\");\n\t\tappendable.increaseIndentation();\n\t\tappendable.append(\"\\nreturn \").append(cacheVarName).append(\".get(\").append(cacheKeyVarName).append(\");\");\n\t\tappendable.decreaseIndentation().append(\"\\n}\");\n\t\t\n\t\t// execute the creation\n\t\tJvmTypeReference returnType = getTypeProvider().getType(info.getCreateExpression());\n\t\tinternalToJavaStatement(info.getCreateExpression(), appendable, true);\n\t\tappendable.append(\"\\n\");\n\t\tserialize(returnType,info.getCreateExpression(),appendable);\n\t\tString varName = declareNameInVariableScope(info, appendable);\n\t\tappendable.append(\" \").append(varName).append(\" = \");\n\t\tinternalToJavaExpression(info.getCreateExpression(), appendable);\n\t\tappendable.append(\";\");\n\t\t\n\t\t// store the newly created object in the cache\n\t\tappendable.append(\"\\n\").append(cacheVarName).append(\".put(\").append(cacheKeyVarName).append(\", \").append(varName).append(\");\");\n\t\t\n\t\t// execute the initialization\n\t\tJvmTypeReference primitiveVoid = getTypeReferences().getTypeForName(Void.TYPE, obj);\n\t\tcompile(obj.getExpression(), appendable, primitiveVoid);\n\t\t\n\t\t// return the result\n\t\tappendable.append(\"\\nreturn \");\n\t\tappendable.append(varName).append(\";\");\n\t}","commit_id":"00d3e4ec1d8de4cdc31fefea9599148315e3788f","url":"https://github.com/eclipse/xtext"},{"original_method":"public ShowImplementationComponent(List<SNode> nodes, IOperationContext context) {\n    this.myNodes = nodes;\n    this.myEditor = new EmbeddableEditor(context, new ModelOwner() {}, SNodeOperations.copyNode(nodes.get(0)), false);\n    for (SNode node : this.myNodes) {\n      String item = node.getPresentation();\n      this.myItemToNode.put(item, node);\n    }\n    this.init();\n    updateControls();\n  }","id":94119,"modified_method":"public ShowImplementationComponent(List<SNode> nodes, IOperationContext context) {\n    this.myNodes = nodes;\n    this.myEditor = new EmbeddableEditor(context, new ModelOwner() {}, SNodeOperations.copyNode(nodes.get(0)), false);\n    this.myEditor.setBackground(new Color(255, 255, 215));\n    for (SNode node : this.myNodes) {\n      String item = node.getPresentation();\n      this.myItemToNode.put(item, node);\n    }\n    this.init();\n    updateControls();\n  }","commit_id":"22cee66faa1e40c655c14addb625cb2deef14e95","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void updateControls() {\n    String selectedItem = (String) myNodeChooser.getSelectedItem();\n    SNode selectedNode = myItemToNode.get(selectedItem);\n    IModule module = selectedNode.getModel().getModelDescriptor().getModule();\n    myLocationLabel.setText(module.getModuleFqName());\n    int index = myNodes.indexOf(selectedNode) + 1;\n    myCountLanel.setText(index + \" of \" + myNodes.size());\n    updateUI();\n  }","id":94120,"modified_method":"private void updateControls() {\n    String selectedItem = (String) myNodeChooser.getSelectedItem();\n    SNode selectedNode = myItemToNode.get(selectedItem);\n    IModule module = selectedNode.getModel().getModelDescriptor().getModule();\n    myLocationLabel.setText(module.getModuleFqName());\n    myLocationLabel.setIcon(IconManager.getIconFor(module));\n    int index = myNodes.indexOf(selectedNode) + 1;\n    myCountLanel.setText(index + \" of \" + myNodes.size());\n    myEditor.setNode(myNodes.get(index));\n    myEditorPanel.repaint();\n  }","commit_id":"22cee66faa1e40c655c14addb625cb2deef14e95","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void init() {\n    this.setLayout(new BorderLayout());\n    this.add(this.myEditor.getComponenet(), BorderLayout.CENTER);\n    JPanel northPanel = new JPanel(new BorderLayout());\n    this.add(northPanel, BorderLayout.PAGE_START);\n    JPanel toolbarPanel = new JPanel(new FlowLayout());\n    toolbarPanel.add(this.getActionsPanel());\n    this.myNodeChooser = new JComboBox(this.myItemToNode.keySet().toArray());\n    this.myNodeChooser.setRenderer(new DefaultListCellRenderer() {\n      @Override\n      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n        ModelAccess.instance().runReadAction(new Runnable() {\n          public void run() {\n            updateControls();\n          }\n        });\n        return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\n      }\n    });\n    toolbarPanel.add(this.myNodeChooser);\n    toolbarPanel.add(this.myCountLanel);\n    northPanel.add(toolbarPanel, BorderLayout.LINE_START);\n    northPanel.add(this.myLocationLabel, BorderLayout.LINE_END);\n\n    this.setPreferredSize(new Dimension(600, 400));\n  }","id":94121,"modified_method":"private void init() {\n    this.setLayout(new BorderLayout());\n    myEditorPanel = myEditor.getComponenet();\n    this.add(myEditorPanel, BorderLayout.CENTER);\n    JPanel northPanel = new JPanel(new BorderLayout());\n    this.add(northPanel, BorderLayout.PAGE_START);\n    JPanel toolbarPanel = new JPanel(new FlowLayout());\n    toolbarPanel.add(this.getActionsPanel());\n    this.myNodeChooser = new JComboBox(this.myItemToNode.keySet().toArray());\n    this.myNodeChooser.setRenderer(new DefaultListCellRenderer() {\n      @Override\n      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n        ModelAccess.instance().runReadAction(new Runnable() {\n          public void run() {\n            updateControls();\n          }\n        });\n        return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\n      }\n    });\n    toolbarPanel.add(this.myNodeChooser);\n    toolbarPanel.add(this.myCountLanel);\n    northPanel.add(toolbarPanel, BorderLayout.LINE_START);\n    northPanel.add(this.myLocationLabel, BorderLayout.LINE_END);\n\n    this.setPreferredSize(new Dimension(600, 400));\n  }","commit_id":"22cee66faa1e40c655c14addb625cb2deef14e95","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      List<SNode> nodes = new ArrayList<SNode>();\n      ListSequence.fromList(nodes).addElement(ShowImplementations_Action.this.node);\n      ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(((Classifier) SNodeOperations.getAdapter(ShowImplementations_Action.this.node)), IClassifiersSearchScope.CLASSIFFIER);\n      ListSequence.fromList(nodes).addSequence(ListSequence.fromList(scope.getNodes()));\n      String title = \"Definition of \" + ShowImplementations_Action.this.node.getPresentation();\n      ShowImplementationComponent component = new ShowImplementationComponent(nodes, ShowImplementations_Action.this.context);\n      JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(component, component.getPrefferedFocusableComponent()).setProject(ShowImplementations_Action.this.project).setMovable(true).setResizable(true).setTitle(title).createPopup();\n      popup.show(new RelativePoint(ShowImplementations_Action.this.cell.getEditor(), new Point(ShowImplementations_Action.this.cell.getX(), ShowImplementations_Action.this.cell.getY())));\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"ShowImplementations\", t);\n      }\n    }\n  }","id":94122,"modified_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      final List<SNode> nodes = new ArrayList<SNode>();\n      ListSequence.fromList(nodes).addElement(ShowImplementations_Action.this.node);\n      SearchResults<SNode> searchResults = new DerivedClasses_Finder().find(new SearchQuery(ShowImplementations_Action.this.node, GlobalScope.getInstance()), new EmptyProgressIndicator());\n      for (SearchResult<SNode> searchResult : searchResults.getSearchResults()) {\n        SNode searchNode = searchResult.getObject();\n        if ((searchNode != null)) {\n          ListSequence.fromList(nodes).addElement(searchNode);\n        }\n      }\n      ModelAccess.instance().runWriteActionInCommandAsync(new Runnable() {\n        public void run() {\n          String title = \"Definition of \" + ShowImplementations_Action.this.node.getPresentation();\n          ShowImplementationComponent component = new ShowImplementationComponent(nodes, ShowImplementations_Action.this.context);\n          JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(component, component.getPrefferedFocusableComponent()).setProject(ShowImplementations_Action.this.project).setMovable(true).setResizable(true).setTitle(title).createPopup();\n          popup.show(new RelativePoint(ShowImplementations_Action.this.cell.getEditor(), new Point(ShowImplementations_Action.this.cell.getX(), ShowImplementations_Action.this.cell.getY())));\n          component.getPrefferedFocusableComponent().setRequestFocusEnabled(true);\n        }\n      });\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"ShowImplementations\", t);\n      }\n    }\n  }","commit_id":"22cee66faa1e40c655c14addb625cb2deef14e95","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SModel> getModelsByName(SearchScope moduleScope, String name) {\n    List<SModel> models = ListSequence.fromList(new ArrayList<SModel>());\n\n    // THINK maybe we should put those models together, not use if-else \n\n    SModel model = moduleScope.resolve(SModelReference.fromString(name));\n    if (model != null) {\n      ListSequence.fromList(models).addElement(model);\n    } else {\n      // FIXME it's wrong: deprecated and ignores module scope \n      ListSequence.fromList(models).addSequence(ListSequence.fromList(SModelRepository.getInstance().getModelDescriptorsByModelName(name)));\n    }\n    return models;\n  }","id":94123,"modified_method":"public static Iterable<SModel> getModelsByName(SearchScope moduleScope, String name) {\n    List<SModel> models = ListSequence.fromList(new ArrayList<SModel>());\n\n    for (SModel candidate : Sequence.fromIterable(moduleScope.getModels())) {\n      if (candidate.getReference().getLongName().equals(name)) {\n        ListSequence.fromList(models).addElement(candidate);\n      }\n    }\n\n    return models;\n  }","commit_id":"99b6e14d23096744e52a8e86a466e9024af6b284","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    //     parameters declared in enclosing method\n    List<SNode> methods = SNodeOperations.getAncestors(_context.getEnclosingNode(), \"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration\", true);\n    List<SNode> params = ListSequence.<SNode>fromArray();\n    for(SNode bmd : methods) {\n      ListSequence.fromList(params).addSequence(ListSequence.fromList(SLinkOperations.getTargets(bmd, \"parameter\", true)));\n    }\n    return params;\n  }","id":94124,"modified_method":"public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {\n    //     parameters declared in enclosing method\n    List<SNode> methods = SNodeOperations.getAncestors(_context.getEnclosingNode(), \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", true);\n    List<SNode> params = ListSequence.<SNode>fromArray();\n    for(SNode bmd : methods) {\n      for(SNode child : SNodeOperations.getChildren(bmd)) {\n        if (SNodeOperations.isInstanceOf(child, \"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\")) {\n          ListSequence.fromList(params).addElement(SNodeOperations.cast(child, \"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\"));\n        }\n      }\n    }\n    return params;\n  }","commit_id":"67d863507d6e4af62a536338b6e191123565ab77","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, objectExpression.getType()), pexp);\n        }\n    }","id":94125,"modified_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, getType(objectExpression)).toString(false), pexp);\n        }\n    }","commit_id":"3411450779e2d5ccbff7e5801663c8a140448c28","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, objectExpression.getType()), pexp);\n        }\n    }","id":94126,"modified_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, getType(objectExpression)).toString(false), pexp);\n        }\n    }","commit_id":"862b84b64bf97903c438912db7464c39e7fb79e4","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, objectExpression.getType()), pexp);\n        }\n    }","id":94127,"modified_method":"@Override\n    public void visitPropertyExpression(final PropertyExpression pexp) {\n        super.visitPropertyExpression(pexp);\n        if (!existsProperty(pexp, true)) {\n            Expression objectExpression = pexp.getObjectExpression();\n            addStaticTypeError(\"No such property: \" + pexp.getPropertyAsString() +\n                    \" for class: \" + findCurrentInstanceOfClass(objectExpression, getType(objectExpression)).toString(false), pexp);\n        }\n    }","commit_id":"72c02581e1774e765062d19ff70430e26f9a3918","url":"https://github.com/apache/groovy"},{"original_method":"/**\n   * Session is NOT committed. Profiles marked as \"default\" for a language can't be deleted,\n   * except if the parameter <code>force<\/code> is true.\n   */\n  public void delete(DbSession session, String key, boolean force) {\n    QualityProfileDto profile = db.qualityProfileDao().selectOrFailByKey(session, key);\n    List<QualityProfileDto> descendants = db.qualityProfileDao().selectDescendants(session, key);\n    if (!force) {\n      checkNotDefault(profile);\n      for (QualityProfileDto descendant : descendants) {\n        checkNotDefault(descendant);\n      }\n    }\n    // delete bottom-up\n    for (QualityProfileDto descendant : Lists.reverse(descendants)) {\n      doDelete(session, descendant);\n    }\n    doDelete(session, profile);\n  }","id":94128,"modified_method":"/**\n   * Session is NOT committed. Profiles marked as \"default\" for a language can't be deleted,\n   * except if the parameter <code>force<\/code> is true.\n   */\n  public List<ActiveRuleChange> delete(DbSession session, String key, boolean force) {\n    QualityProfileDto profile = db.qualityProfileDao().selectOrFailByKey(session, key);\n    List<QualityProfileDto> descendants = db.qualityProfileDao().selectDescendants(session, key);\n    if (!force) {\n      checkNotDefault(profile);\n      for (QualityProfileDto descendant : descendants) {\n        checkNotDefault(descendant);\n      }\n    }\n    // delete bottom-up\n    List<ActiveRuleChange> changes = new ArrayList<>();\n    for (QualityProfileDto descendant : Lists.reverse(descendants)) {\n      changes.addAll(doDelete(session, descendant));\n    }\n    changes.addAll(doDelete(session, profile));\n    return changes;\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void doDelete(DbSession session, QualityProfileDto profile) {\n    db.qualityProfileDao().deleteAllProjectProfileAssociation(profile.getKey(), session);\n    db.activeRuleDao().deleteByProfileKey(session, profile.getKey());\n    db.qualityProfileDao().delete(session, profile);\n  }","id":94129,"modified_method":"private List<ActiveRuleChange> doDelete(DbSession session, QualityProfileDto profile) {\n    db.qualityProfileDao().deleteAllProjectProfileAssociation(profile.getKey(), session);\n    List<ActiveRuleChange> changes = new ArrayList<>();\n    for (ActiveRuleDto activeRule : db.activeRuleDao().selectByProfileKey(session, profile.getKey())) {\n      db.activeRuleDao().delete(session, activeRule.getKey());\n      changes.add(ActiveRuleChange.createFor(DEACTIVATED, activeRule.getKey()));\n    }\n    db.qualityProfileDao().delete(session, profile);\n    return changes;\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void initRules() {\n    // create pre-defined rules\n    RuleDto xooRule1 = RuleTesting.newXooX1();\n    RuleDto xooRule2 = RuleTesting.newXooX2();\n    db.deprecatedRuleDao().insert(dbSession, xooRule1, xooRule2);\n    db.deprecatedRuleDao().insertRuleParam(dbSession, xooRule1, RuleParamDto.createFor(xooRule1)\n      .setName(\"max\").setDefaultValue(\"10\").setType(RuleParamType.INTEGER.type()));\n    dbSession.commit();\n    dbSession.clearCache();\n  }","id":94130,"modified_method":"private void initRules() {\n    // create pre-defined rules\n    RuleDto xooRule1 = RuleTesting.newXooX1();\n    RuleDto xooRule2 = RuleTesting.newXooX2();\n    db.ruleDao().insert(dbSession, xooRule1);\n    db.ruleDao().insert(dbSession, xooRule2);\n    db.ruleDao().insertRuleParam(dbSession, xooRule1, RuleParamDto.createFor(xooRule1)\n      .setName(\"max\").setDefaultValue(\"10\").setType(RuleParamType.INTEGER.type()));\n    dbSession.commit();\n    dbSession.clearCache();\n    ruleIndexer.index();\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void delete_descendants() {\n    initRules();\n\n    // create parent and child profiles\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1(), QProfileTesting.newXooP2(), QProfileTesting.newXooP3());\n    tester.get(RuleActivator.class).setParent(dbSession, XOO_P2_KEY, XOO_P1_KEY);\n    tester.get(RuleActivator.class).setParent(dbSession, XOO_P3_KEY, XOO_P1_KEY);\n    tester.get(RuleActivator.class).activate(dbSession, new RuleActivation(RuleTesting.XOO_X1), XOO_P1_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(3);\n    assertThat(db.deprecatedActiveRuleDao().selectAll(dbSession)).hasSize(3);\n\n    factory.delete(XOO_P1_KEY);\n\n    dbSession.clearCache();\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.deprecatedActiveRuleDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.deprecatedActiveRuleDao().selectAllParams(dbSession)).isEmpty();\n    assertThat(index.get(ActiveRuleIndex.class).findByProfile(XOO_P1_KEY)).isEmpty();\n    assertThat(index.get(ActiveRuleIndex.class).findByProfile(XOO_P2_KEY)).isEmpty();\n    assertThat(index.get(ActiveRuleIndex.class).findByProfile(XOO_P3_KEY)).isEmpty();\n  }","id":94131,"modified_method":"@Test\n  public void delete_descendants() {\n    initRules();\n\n    // create parent and child profiles\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1(), QProfileTesting.newXooP2(), QProfileTesting.newXooP3());\n    List<ActiveRuleChange> changes = tester.get(RuleActivator.class).setParent(dbSession, XOO_P2_KEY, XOO_P1_KEY);\n    changes.addAll(tester.get(RuleActivator.class).setParent(dbSession, XOO_P3_KEY, XOO_P1_KEY));\n    changes.addAll(tester.get(RuleActivator.class).activate(dbSession, new RuleActivation(RuleTesting.XOO_X1), XOO_P1_KEY));\n    dbSession.commit();\n    dbSession.clearCache();\n    activeRuleIndexer.index(changes);\n\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(3);\n    assertThat(db.activeRuleDao().selectAll(dbSession)).hasSize(3);\n\n    changes = factory.delete(dbSession, XOO_P1_KEY, false);\n    dbSession.commit();\n    activeRuleIndexer.index(changes);\n\n    dbSession.clearCache();\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.activeRuleDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.activeRuleDao().selectAllParams(dbSession)).isEmpty();\n    assertThat(activeRuleIndex.findByProfile(XOO_P1_KEY)).isEmpty();\n    assertThat(activeRuleIndex.findByProfile(XOO_P2_KEY)).isEmpty();\n    assertThat(activeRuleIndex.findByProfile(XOO_P3_KEY)).isEmpty();\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_if_unknown_profile_to_be_deleted() {\n    thrown.expect(RowNotFoundException.class);\n    thrown.expectMessage(\"Quality profile not found: XOO_P1\");\n\n    factory.delete(XOO_P1_KEY);\n  }","id":94132,"modified_method":"@Test\n  public void fail_if_unknown_profile_to_be_deleted() {\n    thrown.expect(RowNotFoundException.class);\n    thrown.expectMessage(\"Quality profile not found: XOO_P1\");\n\n    List<ActiveRuleChange> changes = factory.delete(dbSession, XOO_P1_KEY, false);\n    dbSession.commit();\n    activeRuleIndexer.index(changes);\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void delete() {\n    initRules();\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    tester.get(RuleActivator.class).activate(dbSession, new RuleActivation(RuleTesting.XOO_X1), XOO_P1_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n\n    factory.delete(XOO_P1_KEY);\n\n    dbSession.clearCache();\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.deprecatedActiveRuleDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.deprecatedActiveRuleDao().selectAllParams(dbSession)).isEmpty();\n    assertThat(index.get(ActiveRuleIndex.class).findByProfile(XOO_P1_KEY)).isEmpty();\n  }","id":94133,"modified_method":"@Test\n  public void delete() {\n    initRules();\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    tester.get(RuleActivator.class).activate(dbSession, new RuleActivation(RuleTesting.XOO_X1), XOO_P1_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n\n    List<ActiveRuleChange> changes = factory.delete(dbSession, XOO_P1_KEY, false);\n    dbSession.commit();\n    activeRuleIndexer.index(changes);\n\n    dbSession.clearCache();\n    assertThat(db.qualityProfileDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.activeRuleDao().selectAll(dbSession)).isEmpty();\n    assertThat(db.activeRuleDao().selectAllParams(dbSession)).isEmpty();\n    assertThat(activeRuleIndex.findByProfile(XOO_P1_KEY)).isEmpty();\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before() {\n    tester.clearDbAndIndexes();\n    db = tester.get(DbClient.class);\n    dbSession = db.openSession(false);\n    index = tester.get(IndexClient.class);\n    factory = tester.get(QProfileFactory.class);\n  }","id":94134,"modified_method":"@Before\n  public void before() {\n    tester.clearDbAndIndexes();\n    db = tester.get(DbClient.class);\n    dbSession = db.openSession(false);\n    factory = tester.get(QProfileFactory.class);\n    activeRuleIndex = tester.get(ActiveRuleIndex2.class);\n    activeRuleIndexer = tester.get(ActiveRuleIndexer.class);\n    activeRuleIndexer.setEnabled(true);\n    ruleIndexer = tester.get(RuleIndexer.class);\n    ruleIndexer.setEnabled(true);\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_delete_default_profile() {\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    factory.setDefault(dbSession, XOO_P1_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n\n    try {\n      factory.delete(XOO_P1_KEY);\n      fail();\n    } catch (BadRequestException e) {\n      assertThat(e).hasMessage(\"The profile marked as default can not be deleted: XOO_P1\");\n      assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(1);\n    }\n  }","id":94135,"modified_method":"@Test\n  public void do_not_delete_default_profile() {\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    factory.setDefault(dbSession, XOO_P1_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n\n    try {\n      List<ActiveRuleChange> changes = factory.delete(dbSession, XOO_P1_KEY, false);\n      dbSession.commit();\n      activeRuleIndexer.index(changes);\n      fail();\n    } catch (BadRequestException e) {\n      assertThat(e).hasMessage(\"The profile marked as default can not be deleted: XOO_P1\");\n      assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(1);\n    }\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_delete_if_default_descendant() {\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1(), QProfileTesting.newXooP2(), QProfileTesting.newXooP3());\n    tester.get(RuleActivator.class).setParent(dbSession, XOO_P2_KEY, XOO_P1_KEY);\n    tester.get(RuleActivator.class).setParent(dbSession, XOO_P3_KEY, XOO_P1_KEY);\n    factory.setDefault(dbSession, XOO_P3_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n\n    try {\n      factory.delete(XOO_P1_KEY);\n      fail();\n    } catch (BadRequestException e) {\n      assertThat(e).hasMessage(\"The profile marked as default can not be deleted: XOO_P3\");\n      assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(3);\n    }\n  }","id":94136,"modified_method":"@Test\n  public void do_not_delete_if_default_descendant() {\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1(), QProfileTesting.newXooP2(), QProfileTesting.newXooP3());\n\n    List<ActiveRuleChange> changes = tester.get(RuleActivator.class).setParent(dbSession, XOO_P2_KEY, XOO_P1_KEY);\n    changes.addAll(tester.get(RuleActivator.class).setParent(dbSession, XOO_P3_KEY, XOO_P1_KEY));\n    factory.setDefault(dbSession, XOO_P3_KEY);\n    dbSession.commit();\n    dbSession.clearCache();\n    activeRuleIndexer.index(changes);\n\n    try {\n      changes = factory.delete(dbSession, XOO_P1_KEY, false);\n      dbSession.commit();\n      activeRuleIndexer.index(changes);\n      fail();\n    } catch (BadRequestException e) {\n      assertThat(e).hasMessage(\"The profile marked as default can not be deleted: XOO_P3\");\n      assertThat(db.qualityProfileDao().selectAll(dbSession)).hasSize(3);\n    }\n  }","commit_id":"08af1c65e533b2a778d535513bb815f639839dee","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void setRole(Object role) {\n    myLinkDeclaration = getSNode().getLinkDeclaration(role.toString());\n\n    if (myLinkDeclaration == null) {\n      LOG.error(\"Can't find a link declaration \" + role.toString() + \" in \" + getSNode());\n      getSNode().getLinkDeclaration(role.toString());\n    }\n\n    myGenuineLinkDeclaration = SModelUtil_new.getGenuineLinkDeclaration(myLinkDeclaration);\n\n    if (myGenuineLinkDeclaration == null) {\n      LOG.error(\"Can't find a link declaration for \" + myLinkDeclaration);\n      SModelUtil_new.getGenuineLinkDeclaration(myLinkDeclaration);\n    }\n\n    myGenuineRole = myGenuineLinkDeclaration.getRole();\n\n    myIsAggregation = myGenuineLinkDeclaration.getMetaClass() == LinkMetaclass.aggregation;\n    Cardinality sourceCardinality = myGenuineLinkDeclaration.getSourceCardinality();\n    myIsCardinality0 = (sourceCardinality == Cardinality._0__1 || sourceCardinality == Cardinality._0__n);\n    myIsCardinality1 = (sourceCardinality == Cardinality._1 || sourceCardinality == Cardinality._1__n);\n  }","id":94137,"modified_method":"public void setRole(Object role) {\n    myLinkDeclaration = getSNode().getLinkDeclaration(role.toString());\n    if (myLinkDeclaration == null) {\n      myErrorText = \"?\" + role.toString() + \"?\";\n      LOG.error(\"can't find a link declaration \" + role.toString() + \" in \" + getSNode(), getSNode());\n      return;\n    }\n\n    myGenuineLinkDeclaration = SModelUtil_new.getGenuineLinkDeclaration(myLinkDeclaration);\n    myGenuineRole = myGenuineLinkDeclaration.getRole();\n    myIsAggregation = myGenuineLinkDeclaration.getMetaClass() == LinkMetaclass.aggregation;\n    Cardinality sourceCardinality = myGenuineLinkDeclaration.getSourceCardinality();\n    myIsCardinality0 = (sourceCardinality == Cardinality._0__1 || sourceCardinality == Cardinality._0__n);\n    myIsCardinality1 = (sourceCardinality == Cardinality._1 || sourceCardinality == Cardinality._1__n);\n  }","commit_id":"f5a379187055d35922135b6aeade6b8d288d84f0","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected EditorCell createCell_internal(EditorContext context) {\n    SNode node = getSNode();\n    SNode referencedNode = myIsAggregation ? node.getChild(myGenuineRole) : node.getReferent(myGenuineRole);\n    SReference reference = node.getReference(myGenuineRole);\n\n    if (!myIsAggregation) {\n      if (reference != null && (reference.getTargetNode() == null || context.getScope().getModelDescriptor(reference.getTargetModelUID()) == null)) {\n        EditorCell_Error noRefCell = new EditorCell_Error(context, node, null);\n        noRefCell.setText(reference.getResolveInfo());\n        noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n        return noRefCell;\n      }\n    }\n\n    if (referencedNode == null) {\n      EditorCell_Label noRefCell = myIsCardinality1 ?\n              new EditorCell_Error(context, node, myNoTargetText) :\n              new EditorCell_Constant(context, node, \"\");\n      noRefCell.setText(\"\");\n      noRefCell.setEditable(true);\n      noRefCell.setDefaultText(myNoTargetText);\n      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n      return noRefCell;\n    }\n\n    return createRefCell(context, referencedNode, node);\n  }","id":94138,"modified_method":"protected EditorCell createCell_internal(EditorContext context) {\n    SNode node = getSNode();\n    if (myErrorText != null) {\n      return createErrorCell(myErrorText, node, context);\n    }\n    SNode referentNode = null;\n    if (myIsAggregation) {\n      referentNode = node.getChild(myGenuineRole);\n    } else {\n      SReference reference = node.getReference(myGenuineRole);\n      if (reference != null) {\n        referentNode = reference.getTargetNode();\n        if (referentNode == null) {\n          String rinfo = reference.getResolveInfo();\n          myErrorText = rinfo != null ? rinfo : \"?\" + myLinkDeclaration.getRole() + \"?\";\n          return createErrorCell(myErrorText, node, context);\n        }\n      }\n    }\n\n    if (referentNode == null) {\n      EditorCell_Label noRefCell = myIsCardinality1 ?\n        new EditorCell_Error(context, node, myNoTargetText) :\n        new EditorCell_Constant(context, node, \"\");\n      noRefCell.setText(\"\");\n      noRefCell.setEditable(true);\n      noRefCell.setDefaultText(myNoTargetText);\n      noRefCell.setAction(EditorCellAction.DELETE, new CellAction_Empty());\n      return noRefCell;\n    }\n\n    return createRefCell(context, referentNode, node);\n  }","commit_id":"f5a379187055d35922135b6aeade6b8d288d84f0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNodeId convert(SNode sourceNode, String role, String extResolveInfo) {\n    try {\n      if (NewEriByOldEriMap.instance().containsKey(extResolveInfo)) {\n        extResolveInfo = NewEriByOldEriMap.instance().get(extResolveInfo);\n      }\n      String nodeId = IdByEriMap.instance().get(extResolveInfo);\n      if (nodeId != null) {\n        return SNodeId.fromString(nodeId);\n      }\n\n      String memType = ExternalResolveInfoParser.getMemberType(extResolveInfo);\n      if (ExternalResolver.CLASSIFIER.equals(memType)) {\n        String className = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n        return SNodeId.fromString(\"~\" + className);\n      }\n\n      if (ExternalResolver.ENUM_CONST.equals(memType) ||\n              ExternalResolver.FIELD.equals(memType) ||\n              ExternalResolver.STATIC_FIELD.equals(memType)) {\n        String clsResolveInfo = ExternalResolveInfoParser.getMembersClassifierResolveInfo(extResolveInfo, memType);\n        String className = ExternalResolver.getHumanFriendlyString(clsResolveInfo);\n        String memberName = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n        return SNodeId.fromString(\"~\" + className + \".\" + memberName);\n      }\n    } catch (Exception e) {\n      //\n    }\n//    LOG.error(\"couldn't convert reference '\" + role + \"' ERI=\" + extResolveInfo, sourceNode);\n    return null;\n  }","id":94139,"modified_method":"public static SNodeId convert(SNode sourceNode, String role, String extResolveInfo) {\n    try {\n      if (NewEriByOldEriMap.instance().containsKey(extResolveInfo)) {\n        extResolveInfo = NewEriByOldEriMap.instance().get(extResolveInfo);\n      }\n      String nodeId = IdByEriMap.instance().get(extResolveInfo);\n      if (nodeId != null) {\n        return SNodeId.fromString(nodeId);\n      }\n\n      String memType = ExternalResolveInfoParser.getMemberType(extResolveInfo);\n      if (ExternalResolver.CLASSIFIER.equals(memType)) {\n        String className = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n        return SNodeId.fromString(\"~\" + className);\n      }\n\n      if (ExternalResolver.ENUM_CONST.equals(memType) ||\n              ExternalResolver.FIELD.equals(memType) ||\n              ExternalResolver.STATIC_FIELD.equals(memType)) {\n        String clsResolveInfo = ExternalResolveInfoParser.getMembersClassifierResolveInfo(extResolveInfo, memType);\n        String className = ExternalResolver.getHumanFriendlyString(clsResolveInfo);\n        String memberName = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n        return SNodeId.fromString(\"~\" + className + \".\" + memberName);\n      }\n    } catch (Exception e) {\n      //\n    }\n    LOG.error(\"couldn't convert reference '\" + role + \"' ERI=\" + extResolveInfo, sourceNode);\n    return null;\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  public static SModel readModel(@NotNull File file) {\n    LOG.debug(\"ModelPersistence readModel from :\" + file.getAbsolutePath());\n\n    // the model FQ name ...\n    String fileName = file.getName();\n    int index = fileName.indexOf('.');\n    String rawModelName = (index >= 0) ? fileName.substring(0, index) : fileName;\n    String modelName = rawModelName;\n    int index1 = rawModelName.indexOf(\"@\");\n    String modelStereotype = \"\";\n    if (index1 >= 0) {\n      modelName = rawModelName.substring(0, index1);\n      modelStereotype = rawModelName.substring(index1 + 1);\n    }\n\n    Document document = loadModelDocument(file);\n    int modelPersistenceVersion = getModelPersistenceVersion(document);\n    SModel model = modelReaders.get(modelPersistenceVersion).readModel(document, modelName, modelStereotype);\n    if (modelPersistenceVersion < currentPersistenceVersion) {\n      model = upgradeModelPersistence(model, modelPersistenceVersion);\n    }\n    return model;\n  }","id":94140,"modified_method":"@NotNull\n  public static SModel readModel(@NotNull File file) {\n    LOG.debug(\"ModelPersistence readModel from :\" + file.getAbsolutePath());\n\n    // the model FQ name ...\n    String fileName = file.getName();\n    int index = fileName.indexOf('.');\n    String rawModelName = (index >= 0) ? fileName.substring(0, index) : fileName;\n    String modelName = rawModelName;\n    int index1 = rawModelName.indexOf(\"@\");\n    String modelStereotype = \"\";\n    if (index1 >= 0) {\n      modelName = rawModelName.substring(0, index1);\n      modelStereotype = rawModelName.substring(index1 + 1);\n    }\n\n    Document document = loadModelDocument(file);\n    int modelPersistenceVersion = getModelPersistenceVersion(document);\n    SModel model = modelReaders.get(modelPersistenceVersion).readModel(document, modelName, modelStereotype);\n    if (modelPersistenceVersion < currentPersistenceVersion) {\n      model = upgradeModelPersistence(model, modelPersistenceVersion);\n      document = saveModel(model, false);\n      try {\n        JDOMUtil.writeDocument(document, file);\n      } catch (IOException e) {\n        LOG.error(\"error while saving model after persistence upgrade \" + model.getUID(), e);\n      }\n    }\n    return model;\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  private SNode readNode(\n          Element nodeElement,\n          SModel model,\n          List<ReferencePersister1> referenceDescriptors,\n          boolean useUIDs\n  ) {\n    // todo: save 'conceptFqName' (i.e. <namespace>.structure.<name>)\n    String oldStructureClassName = nodeElement.getAttributeValue(ModelPersistence.TYPE);\n    String conceptName = NameUtil.shortNameFromLongName(oldStructureClassName);\n    String languageNamespace = NameUtil.namespaceFromLongName(oldStructureClassName);\n    String conceptFqName = languageNamespace + \".structure.\" + conceptName;\n    SNode node = new SNode(model, conceptFqName);\n\n    String idValue = nodeElement.getAttributeValue(ModelPersistence.ID);\n    if (idValue != null) {\n      node.setId(SNodeId.fromString(idValue));\n    }\n\n    String cachedExtResolveInfo = nodeElement.getAttributeValue(ModelPersistence.EXT_RESOLVE_INFO);\n    if (!ExternalResolver.isEmptyExtResolveInfo(cachedExtResolveInfo)) {\n      model.loadCachedNodeExtResolveInfo(node, cachedExtResolveInfo);\n    }\n\n    List properties = nodeElement.getChildren(ModelPersistence.PROPERTY);\n    for (Object property : properties) {\n      Element propertyElement = (Element) property;\n      String propertyName = propertyElement.getAttributeValue(ModelPersistence.NAME);\n      String propertyValue = propertyElement.getAttributeValue(ModelPersistence.VALUE);\n      if (propertyValue != null) {\n        node.setProperty(propertyName, propertyValue);\n      }\n    }\n\n    List links = nodeElement.getChildren(ModelPersistence.LINK);\n    for (Object link : links) {\n      Element linkElement = (Element) link;\n      referenceDescriptors.add(ReferencePersister1.readReferencePersister(linkElement, node, useUIDs));\n    }\n\n    List childNodes = nodeElement.getChildren(ModelPersistence.NODE);\n    for (Object childNode1 : childNodes) {\n      Element childNodeElement = (Element) childNode1;\n      String role = childNodeElement.getAttributeValue(ModelPersistence.ROLE);\n      SNode childNode = readNode(childNodeElement, model, referenceDescriptors, useUIDs);\n      if (role == null || childNode == null) {\n        LOG.errorWithTrace(\"Error reading child node in node \" + node.getDebugText());\n      } else {\n        node.addChild(role, childNode);\n      }\n    }\n\n    return node;\n  }","id":94141,"modified_method":"@Nullable\n  private SNode readNode(\n          Element nodeElement,\n          SModel model,\n          List<ReferencePersister1> referenceDescriptors,\n          boolean useUIDs\n  ) {\n    // todo: save 'conceptFqName' (i.e. <namespace>.structure.<name>)\n//    String oldStructureClassName = nodeElement.getAttributeValue(ModelPersistence.TYPE);\n//    String conceptName = NameUtil.shortNameFromLongName(oldStructureClassName);\n//    String languageNamespace = NameUtil.namespaceFromLongName(oldStructureClassName);\n//    String conceptFqName = languageNamespace + \".structure.\" + conceptName;\n    String conceptFqName = nodeElement.getAttributeValue(ModelPersistence.TYPE);\n    SNode node = new SNode(model, conceptFqName);\n\n    String idValue = nodeElement.getAttributeValue(ModelPersistence.ID);\n    if (idValue != null) {\n      node.setId(SNodeId.fromString(idValue));\n    }\n\n    String cachedExtResolveInfo = nodeElement.getAttributeValue(ModelPersistence.EXT_RESOLVE_INFO);\n    if (!ExternalResolver.isEmptyExtResolveInfo(cachedExtResolveInfo)) {\n      model.loadCachedNodeExtResolveInfo(node, cachedExtResolveInfo);\n    }\n\n    List properties = nodeElement.getChildren(ModelPersistence.PROPERTY);\n    for (Object property : properties) {\n      Element propertyElement = (Element) property;\n      String propertyName = propertyElement.getAttributeValue(ModelPersistence.NAME);\n      String propertyValue = propertyElement.getAttributeValue(ModelPersistence.VALUE);\n      if (propertyValue != null) {\n        node.setProperty(propertyName, propertyValue);\n      }\n    }\n\n    List links = nodeElement.getChildren(ModelPersistence.LINK);\n    for (Object link : links) {\n      Element linkElement = (Element) link;\n      referenceDescriptors.add(ReferencePersister1.readReferencePersister(linkElement, node, useUIDs));\n    }\n\n    List childNodes = nodeElement.getChildren(ModelPersistence.NODE);\n    for (Object childNode1 : childNodes) {\n      Element childNodeElement = (Element) childNode1;\n      String role = childNodeElement.getAttributeValue(ModelPersistence.ROLE);\n      SNode childNode = readNode(childNodeElement, model, referenceDescriptors, useUIDs);\n      if (role == null || childNode == null) {\n        LOG.errorWithTrace(\"Error reading child node in node \" + node.getDebugText());\n      } else {\n        node.addChild(role, childNode);\n      }\n    }\n\n    return node;\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void saveNode(Element parentElement, String elementName, SNode node, boolean useUIDs, VisibleModelElements visibleModelElements) {\n    String theElementName = elementName;\n    if (theElementName == null) {\n      theElementName = ModelPersistence.NODE;\n    }\n    Element element = new Element(theElementName);\n    DocUtil.setNotNullAttribute(element, ModelPersistence.ROLE, node.getRole_());\n    // todo: save node's concept fQName\n    String oldStructureClassName = NameUtil.removeStructureFromFqName(node.getConceptFqName());\n    element.setAttribute(ModelPersistence.TYPE, oldStructureClassName);\n    element.setAttribute(ModelPersistence.ID, node.getId());\n\n    // properties ...\n    Map<String, String> properties = node.getProperties();\n    Set<String> keys = properties.keySet();\n    for (String propertyName : keys) {\n      Element propertyElement = new Element(ModelPersistence.PROPERTY);\n      element.addContent(propertyElement);\n      propertyElement.setAttribute(ModelPersistence.NAME, propertyName);\n      DocUtil.setNotNullAttribute(propertyElement, ModelPersistence.VALUE, node.getPersistentProperty(propertyName));\n    }\n\n    // references ...\n    List<SReference> references = node.getReferences();\n    for (SReference reference : references) {\n      ReferencePersister1.saveReference(element, reference, useUIDs, visibleModelElements);\n    }\n\n    // children ...\n    List<SNode> children = node.getChildren();\n    for (SNode childNode : children) {\n      saveNode(element, null, childNode, useUIDs, visibleModelElements);\n    }\n\n    parentElement.addContent(element);\n  }","id":94142,"modified_method":"private void saveNode(Element parentElement, String elementName, SNode node, boolean useUIDs, VisibleModelElements visibleModelElements) {\n    String theElementName = elementName;\n    if (theElementName == null) {\n      theElementName = ModelPersistence.NODE;\n    }\n    Element element = new Element(theElementName);\n    DocUtil.setNotNullAttribute(element, ModelPersistence.ROLE, node.getRole_());\n//    // todo: save node's concept fQName\n//    String oldStructureClassName = NameUtil.removeStructureFromFqName(node.getConceptFqName());\n//    element.setAttribute(ModelPersistence.TYPE, oldStructureClassName);\n    element.setAttribute(ModelPersistence.TYPE, node.getConceptFqName());\n    element.setAttribute(ModelPersistence.ID, node.getId());\n\n    // properties ...\n    Map<String, String> properties = node.getProperties();\n    Set<String> keys = properties.keySet();\n    for (String propertyName : keys) {\n      Element propertyElement = new Element(ModelPersistence.PROPERTY);\n      element.addContent(propertyElement);\n      propertyElement.setAttribute(ModelPersistence.NAME, propertyName);\n      DocUtil.setNotNullAttribute(propertyElement, ModelPersistence.VALUE, node.getPersistentProperty(propertyName));\n    }\n\n    // references ...\n    List<SReference> references = node.getReferences();\n    for (SReference reference : references) {\n      ReferencePersister1.saveReference(element, reference, useUIDs, visibleModelElements);\n    }\n\n    // children ...\n    List<SNode> children = node.getChildren();\n    for (SNode childNode : children) {\n      saveNode(element, null, childNode, useUIDs, visibleModelElements);\n    }\n\n    parentElement.addContent(element);\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Document saveModel(SModel sourceModel, boolean validate) {\n    Element rootElement = new Element(ModelPersistence.MODEL);\n    rootElement.setAttribute(ModelPersistence.NAME, sourceModel.getLongName());\n    Element persistenceElement = new Element(ModelPersistence.PERSISTENCE);\n    persistenceElement.setAttribute(ModelPersistence.PERSISTENCE_VERSION, \"1\");\n\n    if (validate) {\n      sourceModel.validateLanguagesAndImports();\n    }\n\n    // languages\n    for (String languageNamespace : sourceModel.getExplicitlyImportedLanguages()) {\n      Element languageElem = new Element(ModelPersistence.LANGUAGE);\n      languageElem.setAttribute(ModelPersistence.NAMESPACE, languageNamespace);\n      Language l = GlobalScope.getInstance().getLanguage(languageNamespace);\n      if (l != null) {\n        sourceModel.addAspectModelVersions(languageNamespace, l);\n        for (SModelDescriptor sModelDescriptor : l.getAspectModelDescriptors()) {\n          Element aspectModelElement = new Element(ModelPersistence.LANGUAGE_ASPECT);\n          SModelUID uid = sModelDescriptor.getModelUID();\n          aspectModelElement.setAttribute(ModelPersistence.MODEL_UID, uid.toString());\n          aspectModelElement.setAttribute(ModelPersistence.VERSION, \"\" + sourceModel.getLanguageAspectModelVersion(uid));\n        }\n      }\n      rootElement.addContent(languageElem);\n    }\n\n    // languages engaged on generation\n    for (String languageNamespace : sourceModel.getEngagedOnGenerationLanguages()) {\n      Element languageElem = new Element(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);\n      languageElem.setAttribute(ModelPersistence.NAMESPACE, languageNamespace);\n      rootElement.addContent(languageElem);\n    }\n\n    //devkits\n    for (String devkitNamespace : sourceModel.getDevKitNamespaces()) {\n      Element devkitElem = new Element(ModelPersistence.DEVKIT);\n      devkitElem.setAttribute(ModelPersistence.NAMESPACE, devkitNamespace);\n      rootElement.addContent(devkitElem);\n    }\n\n    // imports\n    Element maxRefID = new Element(ModelPersistence.MAX_IMPORT_INDEX);\n    maxRefID.setAttribute(ModelPersistence.VALUE, \"\" + sourceModel.getMaxImportIndex());\n    rootElement.addContent(maxRefID);\n\n    Iterator<ImportElement> imports = sourceModel.importElements();\n    while (imports.hasNext()) {\n      ImportElement importElement = imports.next();\n      Element importElem = new Element(ModelPersistence.IMPORT_ELEMENT);\n      importElem.setAttribute(ModelPersistence.MODEL_IMPORT_INDEX, \"\" + importElement.getReferenceID());\n      SModelUID modelUID = importElement.getModelUID();\n      importElem.setAttribute(ModelPersistence.MODEL_UID, modelUID.toString());\n      importElem.setAttribute(ModelPersistence.VERSION, \"\" + importElement.getUsedVersion());\n\n      int version = -1;\n      SModelDescriptor importedModelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID);\n      if (importedModelDescriptor != null) {\n        version = importedModelDescriptor.getVersion();\n      }\n      if (version > -1) {\n        importElem.setAttribute(ModelPersistence.VERSION, version + \"\");\n      }\n      rootElement.addContent(importElem);\n    }\n\n    VisibleModelElements visibleModelElements = new VisibleModelElements(rootElement);\n    SNode log = sourceModel.getLog();\n    if (log != null) {\n      saveNode(rootElement, ModelPersistence.REFACTORING_LOG, log, false, visibleModelElements);\n    }\n\n    Iterator<SNode> iterator = sourceModel.roots();\n    while (iterator.hasNext()) {\n      SNode semanticNode = iterator.next();\n      saveNode(rootElement, semanticNode, visibleModelElements);\n    }\n\n    Document document = new Document();\n    document.setRootElement(rootElement);\n    return document;\n  }","id":94143,"modified_method":"public Document saveModel(SModel sourceModel, boolean validate) {\n    Element rootElement = new Element(ModelPersistence.MODEL);\n    rootElement.setAttribute(ModelPersistence.NAME, sourceModel.getLongName());\n    Element persistenceElement = new Element(ModelPersistence.PERSISTENCE);\n    persistenceElement.setAttribute(ModelPersistence.PERSISTENCE_VERSION, \"1\");\n    rootElement.addContent(persistenceElement);\n\n    if (validate) {\n      sourceModel.validateLanguagesAndImports();\n    }\n\n    // languages\n    for (String languageNamespace : sourceModel.getExplicitlyImportedLanguages()) {\n      Element languageElem = new Element(ModelPersistence.LANGUAGE);\n      languageElem.setAttribute(ModelPersistence.NAMESPACE, languageNamespace);\n      Language l = GlobalScope.getInstance().getLanguage(languageNamespace);\n      if (l != null) {\n        sourceModel.addAspectModelVersions(languageNamespace, l);\n        for (SModelDescriptor sModelDescriptor : l.getAspectModelDescriptors()) {\n          Element aspectModelElement = new Element(ModelPersistence.LANGUAGE_ASPECT);\n          SModelUID uid = sModelDescriptor.getModelUID();\n          aspectModelElement.setAttribute(ModelPersistence.MODEL_UID, uid.toString());\n          aspectModelElement.setAttribute(ModelPersistence.VERSION, \"\" + sourceModel.getLanguageAspectModelVersion(uid));\n        }\n      }\n      rootElement.addContent(languageElem);\n    }\n\n    // languages engaged on generation\n    for (String languageNamespace : sourceModel.getEngagedOnGenerationLanguages()) {\n      Element languageElem = new Element(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);\n      languageElem.setAttribute(ModelPersistence.NAMESPACE, languageNamespace);\n      rootElement.addContent(languageElem);\n    }\n\n    //devkits\n    for (String devkitNamespace : sourceModel.getDevKitNamespaces()) {\n      Element devkitElem = new Element(ModelPersistence.DEVKIT);\n      devkitElem.setAttribute(ModelPersistence.NAMESPACE, devkitNamespace);\n      rootElement.addContent(devkitElem);\n    }\n\n    // imports\n    Element maxRefID = new Element(ModelPersistence.MAX_IMPORT_INDEX);\n    maxRefID.setAttribute(ModelPersistence.VALUE, \"\" + sourceModel.getMaxImportIndex());\n    rootElement.addContent(maxRefID);\n\n    Iterator<ImportElement> imports = sourceModel.importElements();\n    while (imports.hasNext()) {\n      ImportElement importElement = imports.next();\n      Element importElem = new Element(ModelPersistence.IMPORT_ELEMENT);\n      importElem.setAttribute(ModelPersistence.MODEL_IMPORT_INDEX, \"\" + importElement.getReferenceID());\n      SModelUID modelUID = importElement.getModelUID();\n      importElem.setAttribute(ModelPersistence.MODEL_UID, modelUID.toString());\n      importElem.setAttribute(ModelPersistence.VERSION, \"\" + importElement.getUsedVersion());\n\n      int version = -1;\n      SModelDescriptor importedModelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID);\n      if (importedModelDescriptor != null) {\n        version = importedModelDescriptor.getVersion();\n      }\n      if (version > -1) {\n        importElem.setAttribute(ModelPersistence.VERSION, version + \"\");\n      }\n      rootElement.addContent(importElem);\n    }\n\n    VisibleModelElements visibleModelElements = new VisibleModelElements(rootElement);\n    SNode log = sourceModel.getLog();\n    if (log != null) {\n      saveNode(rootElement, ModelPersistence.REFACTORING_LOG, log, false, visibleModelElements);\n    }\n\n    Iterator<SNode> iterator = sourceModel.roots();\n    while (iterator.hasNext()) {\n      SNode semanticNode = iterator.next();\n      saveNode(rootElement, semanticNode, visibleModelElements);\n    }\n\n    Document document = new Document();\n    document.setRootElement(rootElement);\n    return document;\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"Couldn't create reference from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getExtResolveInfo() == null) {\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              SNodeId.fromString(this.getTargetId()),\n              this.getResolveInfo());\n    }\n\n    String extResolveInfo = this.getExtResolveInfo();\n    SNodeId targetId = ERI2IDConverter.convert(this.getSourceNode(), this.getRole(), extResolveInfo);\n    if (targetId != null) {\n      String resolveInfo = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              targetId,\n              resolveInfo);\n    }\n\n    // couldn't convert \n    return SReference.newInstance(this.getRole(),\n            this.getSourceNode(),\n            this.getTargetId(),\n            this.getExtResolveInfo(),\n            importedModelUID,\n            this.getResolveInfo()\n    );\n  }","id":94144,"modified_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"Couldn't create reference from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getExtResolveInfo() == null) {\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              SNodeId.fromString(this.getTargetId()),\n              this.getResolveInfo());\n    }\n\n    String extResolveInfo = this.getExtResolveInfo();\n    String resolveInfo = ExternalResolver.getHumanFriendlyString(extResolveInfo);\n    SNodeId targetId = ERI2IDConverter.convert(this.getSourceNode(), this.getRole(), extResolveInfo);\n    if (targetId != null) {\n      return SReference.create(this.getRole(),\n              this.getSourceNode(),\n              importedModelUID,\n              targetId,\n              resolveInfo);\n    }\n\n    // couldn't convert\n    if (resolveInfo == null) {\n      resolveInfo = this.getResolveInfo();\n    }\n    return SReference.create(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            null,\n            resolveInfo);\n\n//    return SReference.newInstance(this.getRole(),\n//            this.getSourceNode(),\n//            this.getTargetId(),\n//            this.getExtResolveInfo(),\n//            importedModelUID,\n//            this.getResolveInfo()\n//    );\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"Couldn't create reference from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    return SReference.create(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            SNodeId.fromString(this.getTargetId()),\n            this.getResolveInfo());\n  }","id":94145,"modified_method":"SReference createReferenceInModelDoNotAddToSourceNode(SModel model, VisibleModelElements visibleModelElements) {\n    SModelUID importedModelUID = model.getUID();\n    if (myUseUIDs) {\n      if (!myImportedModelInfo.equals(\"-1\")) {\n        importedModelUID = SModelUID.fromString(myImportedModelInfo);\n      }\n    } else if (getImportIndex() > -1) {\n      if (myNotImported) {\n        importedModelUID = visibleModelElements.getModelUID(getImportIndex());\n      } else {\n        importedModelUID = model.getImportedModelUID(getImportIndex());\n      }\n      if (importedModelUID == null) {\n        LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : import for index [\" + getImportIndex() + \"] not found\");\n        return null;\n      }\n    }\n\n    if (this.getTargetId() == null) {\n      LOG.error(\"couldn't create reference '\" + this.getRole() + \"' from \" + this.getSourceNode().getDebugText() + \" : target node id is null\");\n      return null;\n    }\n\n    return SReference.create(this.getRole(),\n            this.getSourceNode(),\n            importedModelUID,\n            SNodeId.fromString(this.getTargetId()),\n            this.getResolveInfo());\n  }","commit_id":"0d27502cf0b3c177fd8e7403b25217e6455a0862","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SNode findCopiedOutputNodeForInputNode(SNode inputNode) {\n    SNode outputNode = myMappings.findCopiedOutputNodeForInputNode(inputNode);\n    if (outputNode == null) {\n      outputNode = findOutputNodeById(inputNode.getSNodeId());\n    }\n    return outputNode;\n  }","id":94146,"modified_method":"@Override\n  public SNode findCopiedOutputNodeForInputNode(SNode inputNode) {\n    if(inputNode == null) return null;\n\n    SNode outputNode = myMappings.findCopiedOutputNodeForInputNode(inputNode);\n    if (outputNode == null) {\n      outputNode = findOutputNodeById(inputNode.getSNodeId());\n    }\n    return outputNode;\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * test postponed references\n   */\n  public abstract SNode doResolve_Straightforward(TemplateGenerator generator);","id":94147,"modified_method":"public abstract SNode doResolve_Straightforward(TemplateGenerator generator);","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * @param role             should be interned\n   * @param outputSourceNode reference source in output model\n   * @param inputNode        node from input mode (ofter refernce source in input model)\n   * @param inputTargetNode  reference target in input model\n   */\n  public ReferenceInfo_CopiedInputNode(String role, SNode outputSourceNode, SNode inputNode, SNode inputTargetNode) {\n    super(outputSourceNode, role, inputNode);\n    myReferenceRole = role;\n    myInputNode = inputNode;\n    myInputTargetNode = inputTargetNode;\n  }","id":94148,"modified_method":"/**\n   * @param role             should be interned\n   * @param outputSourceNode reference source in output model\n   * @param inputNode        node from input mode (ofter refernce source in input model)\n   * @param inputTargetNode  reference target in input model\n   */\n  public ReferenceInfo_CopiedInputNode(String role, SNode outputSourceNode, SNode inputNode, SNode inputTargetNode) {\n    super(outputSourceNode, role, inputNode);\n    myInputNode = inputNode;\n    myInputTargetNode = inputTargetNode;\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode doResolve_Straightforward(TemplateGenerator generator) {\n    // output target node might has been copied (reduced) from the input target node\n    // here accept only one-to-one copying\n    return generator.findCopiedOutputNodeForInputNode_unique(myInputTargetNode);\n  }","id":94149,"modified_method":"public SNode doResolve_Straightforward(TemplateGenerator generator) {\n    // output target node might has been copied (reduced) from the input target node\n    // here accept only one-to-one copying\n    return myInputTargetNode == null ? null : generator.findCopiedOutputNodeForInputNode_unique(myInputTargetNode);\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getResolveInfoForDynamicResolve() {\n    return myInputTargetNode.getResolveInfo();\n  }","id":94150,"modified_method":"public String getResolveInfoForDynamicResolve() {\n    return myInputTargetNode == null ? null : myInputTargetNode.getResolveInfo();\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode doResolve_Tricky(TemplateGenerator generator) {\n    // if input was copied - return one of its copies\n    // this can easy produce incorrect references\n    return generator.findCopiedOutputNodeForInputNode(myInputTargetNode);\n  }","id":94151,"modified_method":"public SNode doResolve_Tricky(TemplateGenerator generator) {\n    // if input was copied - return one of its copies\n    // this can easy produce incorrect references\n    return myInputTargetNode == null ? null : generator.findCopiedOutputNodeForInputNode(myInputTargetNode);\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getResolveInfoForNothing() {\n    return myInputTargetNode.getResolveInfo();\n  }","id":94152,"modified_method":"public String getResolveInfoForNothing() {\n    return myInputTargetNode == null ? null : myInputTargetNode.getResolveInfo();\n  }","commit_id":"f26a5971f5b923d590b7858c82ee97ec09a30118","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void processReferencesOut(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences, Set<SReference> referencesRequireResolve) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newSourceNode.addSReference(SReference.newInstance(sourceReference.getRole(), newSourceNode, newTargetNode));\n      } else {//otherwise it points out of our node's subtree\n        //internal resolve info has a higher priority\n        if (sourceReference.getResolveInfo() != null) {\n          SReference unresolvedReference = SReference.create(sourceReference.getRole(), newSourceNode, null, null, sourceReference.getResolveInfo());\n          referencesRequireResolve.add(unresolvedReference);\n          newSourceNode.addSReference(unresolvedReference);\n        } else if (oldTargetNode != null) {\n          newSourceNode.addSReference(SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode));\n        } else {\n          continue; // don't create reference\n        }\n      }\n    }\n  }","id":94153,"modified_method":"private static void processReferencesOut(Map<SNode, SNode> sourceNodesToNewNodes, Set<SReference> allReferences, Set<SReference> referencesRequireResolve) {\n    for (SReference sourceReference : allReferences) {\n      SNode oldSourceNode = sourceReference.getSourceNode();\n      SNode newSourceNode = sourceNodesToNewNodes.get(oldSourceNode);\n\n      SNode oldTargetNode = sourceReference.getTargetNode();\n      SNode newTargetNode = sourceNodesToNewNodes.get(oldTargetNode);\n      if (newTargetNode != null) {//if our reference points inside our node's subtree\n        newSourceNode.addSReference(SReference.newInstance(sourceReference.getRole(), newSourceNode, newTargetNode));\n      } else {//otherwise it points out of our node's subtree\n        // prefer resolveInfo over direct reference\n        String resolveInfo = oldTargetNode == null ? sourceReference.getResolveInfo() : oldTargetNode.getName(); // todo: getRefName()\n        if (resolveInfo != null) {\n          SReference unresolvedReference = SReference.create(sourceReference.getRole(), newSourceNode, null, null, resolveInfo);\n          referencesRequireResolve.add(unresolvedReference);\n          newSourceNode.addSReference(unresolvedReference);\n        } else if (oldTargetNode != null) {\n          newSourceNode.addSReference(SReference.create(sourceReference.getRole(), newSourceNode, oldTargetNode));\n        }\n      }\n    }\n  }","commit_id":"0a01ee6b4b5bce5a9012bb8587fdb3aac92f555c","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception {\n    PsiFile file = directory.createFile(getName(newName));\n\n    final FileTemplate fileTemplate = FileTemplateManager.getInstance().getInternalTemplate(myTemplateName);\n    VfsUtil.saveText(file.getVirtualFile(), fileTemplate.getText(FileTemplateManager.getInstance().getDefaultProperties()));\n\n    FileEditorManager.getInstance(directory.getProject()).openFile(file.getVirtualFile(), true);\n    return new PsiElement[]{file};\n\n  }","id":94154,"modified_method":"@NotNull\n  protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception {\n    final FileTemplate template = FileTemplateManager.getInstance().getInternalTemplate(myTemplateName);\n\n    PsiElement element;\n    try {\n      element = FileTemplateUtil\n        .createFromTemplate(template, getName(newName), FileTemplateManager.getInstance().getDefaultProperties(), directory);\n      final PsiFile psiFile = element.getContainingFile();\n\n      final VirtualFile virtualFile = psiFile.getVirtualFile();\n      if (virtualFile != null) {\n        FileEditorManager.getInstance(directory.getProject()).openFile(virtualFile, true);\n        return new PsiElement[]{psiFile};\n      }\n    }\n    catch (IncorrectOperationException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      LOG.error(e);\n    }\n\n    return new PsiElement[0];\n  }","commit_id":"0792c20f911db0dfd1ea09f64cce687bbb42838e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent event) {\n    Presentation presentation = event.getPresentation();\n    Project project = PlatformDataKeys.PROJECT.getData(event.getDataContext());\n    presentation.setEnabled(project != null);\n  }","id":94155,"modified_method":"public void update(AnActionEvent event) {\n    Presentation presentation = event.getPresentation();\n    Project project = PlatformDataKeys.PROJECT.getData(event.getDataContext());\n    presentation.setEnabled(project != null ||\n                            PlatformProjectOpenProcessor.getInstanceIfItExists() != null);\n  }","commit_id":"fe93012f856bd34169ff27d0b5941ded1c08014c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = PlatformDataKeys.PROJECT.getData(e.getDataContext());\n    if (project == null) return;\n\n    String lastFilePath = getLastFilePath(project);\n    //TODO String path = lastFilePath != null ? lastFilePath : RecentProjectsManager.getInstance().getLastProjectPath();\n    JFileChooser fileChooser = new JFileChooser(lastFilePath);\n    FileView fileView = new FileView() {\n      public Icon getIcon(File f) {\n        if (f.isDirectory()) return super.getIcon(f);\n        FileType fileType = FileTypeManager.getInstance().getFileTypeByFileName(f.getName());\n        return fileType.getIcon();\n      }\n    };\n    fileChooser.setFileView(fileView);\n    fileChooser.setMultiSelectionEnabled(true);\n    fileChooser.setAcceptAllFileFilterUsed(false);\n    fileChooser.setDialogTitle(IdeBundle.message(\"title.open.file\"));\n\n    FileFilter allFilesFilter = new FileFilter() {\n      public boolean accept(File f) {\n        return true;\n      }\n\n      public String getDescription() {\n        return IdeBundle.message(\"filter.all.file.types\");\n      }\n    };\n\n    final FileTypeManager fileTypeManager = FileTypeManager.getInstance();\n    ArrayList<FileType> list = new ArrayList<FileType>();\n    for(FileType ft: fileTypeManager.getRegisteredFileTypes()) {\n      if (fileTypeManager.getAssociatedExtensions(ft).length > 0 &&\n          (ft instanceof ProjectFileType || !ft.isReadOnly())) {\n        list.add(ft);\n      }\n    }\n    Collections.sort(list, new Comparator<FileType>() {\n      public int compare(final FileType o1, final FileType o2) {\n        return o1.getName().compareTo(o2.getName());\n      }\n    });\n    for(FileType ft: list) {\n      fileChooser.addChoosableFileFilter(new FileTypeFilter(ft));\n    }\n    fileChooser.addChoosableFileFilter(allFilesFilter);\n\n    fileChooser.setFileFilter(allFilesFilter);\n\n    if (fileChooser.showOpenDialog(WindowManager.getInstance().suggestParentWindow(project)) !=\n        JFileChooser.APPROVE_OPTION) {\n      return;\n    }\n    File [] files = fileChooser.getSelectedFiles();\n    if (files == null) return;\n\n    for (File file : files) {\n      setLastFilePath(project, file.getParent());\n      if (isProjectFile(file)) {\n        int answer = Messages.showYesNoDialog(project,\n                                              IdeBundle.message(\"message.open.file.is.project\", file.getName(),\n                                                                ApplicationNamesInfo.getInstance().getProductName()),\n                                              IdeBundle.message(\"title.open.project\"),\n                                              Messages.getQuestionIcon());\n        if (answer == 0) {\n          ProjectUtil.openProject(file.getAbsolutePath(), project, false);\n          return;\n        }\n      }\n\n      FileType type = FileTypeChooser.getKnownFileTypeOrAssociate(file.getName());\n      if (type == null) return;\n\n      String absolutePath = file.getAbsolutePath();\n      openFile(absolutePath, project);\n    }\n  }","id":94156,"modified_method":"public void actionPerformed(AnActionEvent e) {\n    @Nullable Project project = PlatformDataKeys.PROJECT.getData(e.getDataContext());\n    if (project == null &&\n        PlatformProjectOpenProcessor.getInstanceIfItExists() == null) {\n      return;\n    }\n\n    String lastFilePath = project != null ? getLastFilePath(project):\"\";\n    //TODO String path = lastFilePath != null ? lastFilePath : RecentProjectsManager.getInstance().getLastProjectPath();\n    JFileChooser fileChooser = new JFileChooser(lastFilePath);\n    FileView fileView = new FileView() {\n      public Icon getIcon(File f) {\n        if (f.isDirectory()) return super.getIcon(f);\n        FileType fileType = FileTypeManager.getInstance().getFileTypeByFileName(f.getName());\n        return fileType.getIcon();\n      }\n    };\n    fileChooser.setFileView(fileView);\n    fileChooser.setMultiSelectionEnabled(true);\n    fileChooser.setAcceptAllFileFilterUsed(false);\n    fileChooser.setDialogTitle(IdeBundle.message(\"title.open.file\"));\n\n    FileFilter allFilesFilter = new FileFilter() {\n      public boolean accept(File f) {\n        return true;\n      }\n\n      public String getDescription() {\n        return IdeBundle.message(\"filter.all.file.types\");\n      }\n    };\n\n    final FileTypeManager fileTypeManager = FileTypeManager.getInstance();\n    ArrayList<FileType> list = new ArrayList<FileType>();\n    for(FileType ft: fileTypeManager.getRegisteredFileTypes()) {\n      if (fileTypeManager.getAssociatedExtensions(ft).length > 0 &&\n          (ft instanceof ProjectFileType || !ft.isReadOnly())) {\n        list.add(ft);\n      }\n    }\n    Collections.sort(list, new Comparator<FileType>() {\n      public int compare(final FileType o1, final FileType o2) {\n        return o1.getName().compareTo(o2.getName());\n      }\n    });\n    for(FileType ft: list) {\n      fileChooser.addChoosableFileFilter(new FileTypeFilter(ft));\n    }\n    fileChooser.addChoosableFileFilter(allFilesFilter);\n\n    fileChooser.setFileFilter(allFilesFilter);\n\n    if (fileChooser.showOpenDialog(WindowManager.getInstance().suggestParentWindow(project)) !=\n        JFileChooser.APPROVE_OPTION) {\n      return;\n    }\n    File [] files = fileChooser.getSelectedFiles();\n    if (files == null) return;\n\n    for (File file : files) {\n      if (project != null) setLastFilePath(project, file.getParent());\n      if (isProjectFile(file)) {\n        int answer = Messages.showYesNoDialog(project,\n                                              IdeBundle.message(\"message.open.file.is.project\", file.getName(),\n                                                                ApplicationNamesInfo.getInstance().getProductName()),\n                                              IdeBundle.message(\"title.open.project\"),\n                                              Messages.getQuestionIcon());\n        if (answer == 0) {\n          ProjectUtil.openProject(file.getAbsolutePath(), project, false);\n          return;\n        }\n      }\n\n      FileType type = FileTypeChooser.getKnownFileTypeOrAssociate(file.getName());\n      if (type == null) return;\n\n      String absolutePath = file.getAbsolutePath();\n\n      if (project != null) {\n        openFile(absolutePath, project);\n      } else {\n        VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(file);\n        if (vfile != null) {\n          PlatformProjectOpenProcessor.getInstance().doOpenProject(vfile, null, false);\n        }\n      }\n    }\n  }","commit_id":"fe93012f856bd34169ff27d0b5941ded1c08014c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static PlatformProjectOpenProcessor getInstance() {\n    ProjectOpenProcessor[] processors = Extensions.getExtensions(EXTENSION_POINT_NAME);\n    for(ProjectOpenProcessor processor: processors) {\n      if (processor instanceof PlatformProjectOpenProcessor) {\n        return (PlatformProjectOpenProcessor) processor;\n      }\n    }\n    assert false;\n    return null;\n  }","id":94157,"modified_method":"public static PlatformProjectOpenProcessor getInstance() {\n    PlatformProjectOpenProcessor projectOpenProcessor = getInstanceIfItExists();\n    assert projectOpenProcessor != null;\n    return projectOpenProcessor;\n  }","commit_id":"fe93012f856bd34169ff27d0b5941ded1c08014c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"PyStudyTestRunner(@NotNull final Task task, @NotNull final VirtualFile taskfile) {\n    super(task, taskfile);\n  }","id":94158,"modified_method":"PyStudyTestRunner(@NotNull final Task task, @NotNull final VirtualFile taskDir) {\n    super(task, taskDir);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Process createCheckProcess(Project project, String executablePath) throws ExecutionException {\n    Sdk sdk = PythonSdkType.findPythonSdk(ModuleManager.getInstance(project).getModules()[0]);\n    File testRunner = new File(myTaskDir.getPath(), myTask.getTestFile());\n    GeneralCommandLine commandLine = new GeneralCommandLine();\n    commandLine.withWorkDirectory(myTaskDir.getPath());\n    final Map<String, String> env = commandLine.getEnvironment();\n\n    final VirtualFile courseDir = project.getBaseDir();\n    if (courseDir != null) {\n      env.put(PYTHONPATH, courseDir.getPath());\n    }\n    if (sdk != null) {\n      String pythonPath = sdk.getHomePath();\n      if (pythonPath != null) {\n        commandLine.setExePath(pythonPath);\n        commandLine.addParameter(testRunner.getPath());\n        final Course course = StudyTaskManager.getInstance(project).getCourse();\n        assert course != null;\n        File resourceFile = new File(course.getCourseDirectory());\n        commandLine.addParameter(resourceFile.getPath());\n        commandLine.addParameter(FileUtil.toSystemDependentName(executablePath));\n        return commandLine.createProcess();\n      }\n    }\n    return null;\n  }","id":94159,"modified_method":"public Process createCheckProcess(@NotNull final Project project, @NotNull final String executablePath) throws ExecutionException {\n    final Sdk sdk = PythonSdkType.findPythonSdk(ModuleManager.getInstance(project).getModules()[0]);\n    final File testRunner = new File(myTaskDir.getPath(), myTask.getTestFile());\n    final GeneralCommandLine commandLine = new GeneralCommandLine();\n    commandLine.withWorkDirectory(myTaskDir.getPath());\n    final Map<String, String> env = commandLine.getEnvironment();\n\n    final VirtualFile courseDir = project.getBaseDir();\n    if (courseDir != null) {\n      env.put(PYTHONPATH, courseDir.getPath());\n    }\n    if (sdk != null) {\n      String pythonPath = sdk.getHomePath();\n      if (pythonPath != null) {\n        commandLine.setExePath(pythonPath);\n        commandLine.addParameter(testRunner.getPath());\n        final Course course = StudyTaskManager.getInstance(project).getCourse();\n        assert course != null;\n        File resourceFile = new File(course.getCourseDirectory());\n        commandLine.addParameter(resourceFile.getPath());\n        commandLine.addParameter(FileUtil.toSystemDependentName(executablePath));\n        return commandLine.createProcess();\n      }\n    }\n    return null;\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void navigateToFailedTaskWindow(@NotNull final StudyState studyState,\n                                                 @NotNull final Task task,\n                                                 @NotNull final VirtualFile taskDir,\n                                                 @NotNull final Project project) {\n    TaskFile selectedTaskFile = studyState.getTaskFile();\n    Editor editor = studyState.getEditor();\n    TaskFile taskFileToNavigate = selectedTaskFile;\n    VirtualFile fileToNavigate = studyState.getVirtualFile();\n    if (!selectedTaskFile.hasFailedTaskWindows()) {\n      for (Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) {\n        String name = entry.getKey();\n        TaskFile taskFile = entry.getValue();\n        if (taskFile.hasFailedTaskWindows()) {\n          taskFileToNavigate = taskFile;\n          VirtualFile virtualFile = taskDir.findChild(name);\n          if (virtualFile == null) {\n            continue;\n          }\n          FileEditor fileEditor = FileEditorManager.getInstance(project).getSelectedEditor(virtualFile);\n          if (fileEditor instanceof StudyEditor) {\n            StudyEditor studyEditor = (StudyEditor)fileEditor;\n            editor = studyEditor.getEditor();\n          }\n          fileToNavigate = virtualFile;\n          break;\n        }\n      }\n    }\n    FileEditorManager.getInstance(project).openFile(fileToNavigate, true);\n    final Editor editorToNavigate = editor;\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        IdeFocusManager.getInstance(project).requestFocus(editorToNavigate.getContentComponent(), true);\n      }\n    });\n    taskFileToNavigate.navigateToFirstFailedTaskWindow(editor);\n  }","id":94160,"modified_method":"private static void navigateToFailedTaskWindow(@NotNull final StudyState studyState,\n                                                 @NotNull final Task task,\n                                                 @NotNull final VirtualFile taskDir,\n                                                 @NotNull final Project project) {\n    TaskFile selectedTaskFile = studyState.getTaskFile();\n    Editor editor = studyState.getEditor();\n    TaskFile taskFileToNavigate = selectedTaskFile;\n    VirtualFile fileToNavigate = studyState.getVirtualFile();\n    if (!selectedTaskFile.hasFailedTaskWindows()) {\n      for (Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) {\n        String name = entry.getKey();\n        TaskFile taskFile = entry.getValue();\n        if (taskFile.hasFailedTaskWindows()) {\n          taskFileToNavigate = taskFile;\n          VirtualFile virtualFile = taskDir.findChild(name);\n          if (virtualFile == null) {\n            continue;\n          }\n          FileEditor fileEditor = FileEditorManager.getInstance(project).getSelectedEditor(virtualFile);\n          if (fileEditor instanceof StudyEditor) {\n            StudyEditor studyEditor = (StudyEditor)fileEditor;\n            editor = studyEditor.getEditor();\n          }\n          fileToNavigate = virtualFile;\n          break;\n        }\n      }\n    }\n    if (fileToNavigate != null) {\n      FileEditorManager.getInstance(project).openFile(fileToNavigate, true);\n    }\n    final Editor editorToNavigate = editor;\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        IdeFocusManager.getInstance(project).requestFocus(editorToNavigate.getContentComponent(), true);\n      }\n    });\n    taskFileToNavigate.navigateToFirstFailedTaskWindow(editor);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void check(@NotNull final Project project) {\n    ApplicationManager.getApplication().runWriteAction(new Runnable() {\n      @Override\n      public void run() {\n        CommandProcessor.getInstance().runUndoTransparentAction(new Runnable() {\n          @Override\n          public void run() {\n            final StudyEditor selectedEditor = StudyEditor.getSelectedStudyEditor(project);\n            if (selectedEditor == null) return;\n            final StudyState studyState = new StudyState(selectedEditor);\n            if (!studyState.isValid()) {\n              LOG.error(\"StudyCheckAction was invokes outside study editor\");\n              return;\n            }\n            final IdeFrame frame = ((WindowManagerEx)WindowManager.getInstance()).findFrameFor(project);\n            final StatusBarEx statusBar = frame == null ? null : (StatusBarEx)frame.getStatusBar();\n            if (statusBar != null) {\n              final List<Pair<TaskInfo, ProgressIndicator>> processes = statusBar.getBackgroundProcesses();\n              if (!processes.isEmpty()) return;\n            }\n\n            final Task task = studyState.getTask();\n            final VirtualFile taskDir = studyState.getTaskDir();\n            flushWindows(task, taskDir);\n            final Sdk sdk = StudyUtils.findSdk(project);\n            if (sdk == null) {\n              createNoPythonInterpreterPopUp(project);\n              return;\n            }\n            final StudyRunAction runAction = (StudyRunAction)ActionManager.getInstance().getAction(StudyRunAction.ACTION_ID);\n            if (runAction == null) {\n              return;\n            }\n            runAction.run(project, sdk);\n            ApplicationManager.getApplication().invokeLater(new Runnable() {\n              @Override\n              public void run() {\n                IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(), true);\n              }\n            });\n\n            final StudyTestRunner testRunner = StudyUtils.getTestRunner(task, taskDir);\n            Process testProcess = null;\n            try {\n              final VirtualFile executablePath = getTaskVirtualFile(studyState, task, taskDir);\n\n              testProcess = testRunner.createCheckProcess(project, executablePath.getPath());\n            }\n            catch (ExecutionException e) {\n              LOG.error(e);\n            }\n            if (testProcess == null) {\n              return;\n            }\n            selectedEditor.getCheckButton().setEnabled(false);\n            ProgressManager.getInstance().run(getCheckTask(studyState, testRunner, testProcess, project, selectedEditor));\n          }\n        });\n      }\n\n      private VirtualFile getTaskVirtualFile(@NotNull final StudyState studyState,\n                                             @NotNull final Task task,\n                                             @NotNull final VirtualFile taskDir) {\n        VirtualFile taskVirtualFile = studyState.getVirtualFile();\n        for (Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) {\n          String name = entry.getKey();\n          TaskFile taskFile = entry.getValue();\n          VirtualFile virtualFile = taskDir.findChild(name);\n          if (virtualFile != null) {\n            if (!taskFile.getTaskWindows().isEmpty()) {\n              taskVirtualFile = virtualFile;\n            }\n          }\n        }\n        return taskVirtualFile;\n      }\n    });\n  }","id":94161,"modified_method":"public void check(@NotNull final Project project) {\n    ApplicationManager.getApplication().runWriteAction(new Runnable() {\n      @Override\n      public void run() {\n        CommandProcessor.getInstance().runUndoTransparentAction(new Runnable() {\n          @Override\n          public void run() {\n            final StudyEditor selectedEditor = StudyEditor.getSelectedStudyEditor(project);\n            if (selectedEditor == null) return;\n            final StudyState studyState = new StudyState(selectedEditor);\n            if (!studyState.isValid()) {\n              LOG.error(\"StudyCheckAction was invokes outside study editor\");\n              return;\n            }\n            final IdeFrame frame = ((WindowManagerEx)WindowManager.getInstance()).findFrameFor(project);\n            final StatusBarEx statusBar = frame == null ? null : (StatusBarEx)frame.getStatusBar();\n            if (statusBar != null) {\n              final List<Pair<TaskInfo, ProgressIndicator>> processes = statusBar.getBackgroundProcesses();\n              if (!processes.isEmpty()) return;\n            }\n\n            final Task task = studyState.getTask();\n            final VirtualFile taskDir = studyState.getTaskDir();\n            flushWindows(task, taskDir);\n            final StudyRunAction runAction = (StudyRunAction)ActionManager.getInstance().getAction(StudyRunAction.ACTION_ID);\n            if (runAction == null) {\n              return;\n            }\n            runAction.run(project);\n            ApplicationManager.getApplication().invokeLater(new Runnable() {\n              @Override\n              public void run() {\n                IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(), true);\n              }\n            });\n\n            final StudyTestRunner testRunner = StudyUtils.getTestRunner(task, taskDir);\n            Process testProcess = null;\n            try {\n              final VirtualFile executablePath = getTaskVirtualFile(studyState, task, taskDir);\n              if (executablePath != null) {\n                testProcess = testRunner.createCheckProcess(project, executablePath.getPath());\n              }\n            }\n            catch (ExecutionException e) {\n              LOG.error(e);\n            }\n            if (testProcess == null) {\n              return;\n            }\n            selectedEditor.getCheckButton().setEnabled(false);\n            ProgressManager.getInstance().run(getCheckTask(studyState, testRunner, testProcess, project, selectedEditor));\n          }\n        });\n      }\n\n      @Nullable\n      private VirtualFile getTaskVirtualFile(@NotNull final StudyState studyState,\n                                             @NotNull final Task task,\n                                             @NotNull final VirtualFile taskDir) {\n        VirtualFile taskVirtualFile = studyState.getVirtualFile();\n        for (Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) {\n          String name = entry.getKey();\n          TaskFile taskFile = entry.getValue();\n          VirtualFile virtualFile = taskDir.findChild(name);\n          if (virtualFile != null) {\n            if (!taskFile.getTaskWindows().isEmpty()) {\n              taskVirtualFile = virtualFile;\n            }\n          }\n        }\n        return taskVirtualFile;\n      }\n    });\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void showTestResultPopUp(final String text, Color color, @NotNull final Project project) {\n    BalloonBuilder balloonBuilder =\n      JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text, null, color, null);\n    final Balloon balloon = balloonBuilder.createBalloon();\n    showCheckPopUp(project, balloon);\n  }","id":94162,"modified_method":"private static void showTestResultPopUp(final String text, Color color, @NotNull final Project project) {\n    BalloonBuilder balloonBuilder =\n      JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text, null, color, null);\n    final Balloon balloon = balloonBuilder.createBalloon();\n    StudyUtils.showCheckPopUp(project, balloon);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void initializeButtons(@NotNull final JPanel taskActionsPanel, @NotNull final TaskFile taskFile) {\n    myCheckButton = addButton(taskActionsPanel, StudyCheckAction.ACTION_ID, InteractiveLearningIcons.Resolve, StudyCheckAction.SHORTCUT);\n    myPrevTaskButton = addButton(taskActionsPanel, StudyPreviousStudyTaskAction.ACTION_ID, InteractiveLearningIcons.Prev, StudyPreviousStudyTaskAction.SHORTCUT);\n    myNextTaskButton = addButton(taskActionsPanel, StudyNextStudyTaskAction.ACTION_ID, AllIcons.Actions.Forward, StudyNextStudyTaskAction.SHORTCUT);\n    myRefreshButton = addButton(taskActionsPanel, StudyRefreshTaskFileAction.ACTION_ID, AllIcons.Actions.Refresh, StudyRefreshTaskFileAction.SHORTCUT);\n    JButton myShowHintButton = addButton(taskActionsPanel, StudyShowHintAction.ACTION_ID, InteractiveLearningIcons.ShowHint, StudyShowHintAction.SHORTCUT);\n    if (!taskFile.getTask().getUserTests().isEmpty()) {\n      final Sdk sdk = StudyUtils.findSdk(myProject);\n      if (sdk != null) {\n        JButton runButton = addButton(taskActionsPanel, StudyRunAction.ACTION_ID, AllIcons.General.Run, null);\n        runButton.addActionListener(new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            StudyRunAction studyRunAction = (StudyRunAction)ActionManager.getInstance().getAction(\"StudyRunAction\");\n            studyRunAction.run(myProject, sdk);\n          }\n        });\n        JButton watchInputButton = addButton(taskActionsPanel, \"WatchInputAction\", InteractiveLearningIcons.WatchInput, null);\n        watchInputButton.addActionListener(new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            StudyEditInputAction studyEditInputAction =\n              (StudyEditInputAction)ActionManager.getInstance().getAction(\"WatchInputAction\");\n            studyEditInputAction.showInput(myProject);\n          }\n        });\n      }\n    }\n    myCheckButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyCheckAction studyCheckAction = (StudyCheckAction)ActionManager.getInstance().getAction(\"CheckAction\");\n        studyCheckAction.check(myProject);\n      }\n    });\n\n    myNextTaskButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyNextStudyTaskAction studyNextTaskAction =\n          (StudyNextStudyTaskAction)ActionManager.getInstance().getAction(\"NextTaskAction\");\n        studyNextTaskAction.navigateTask(myProject);\n      }\n    });\n    myPrevTaskButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyPreviousStudyTaskAction\n          prevTaskAction = (StudyPreviousStudyTaskAction)ActionManager.getInstance().getAction(\"PreviousTaskAction\");\n        prevTaskAction.navigateTask(myProject);\n      }\n    });\n    myRefreshButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyRefreshTaskFileAction.refresh(myProject);\n      }\n    });\n\n    myShowHintButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyShowHintAction.showHint(myProject);\n      }\n    });\n  }","id":94163,"modified_method":"private void initializeButtons(@NotNull final JPanel taskActionsPanel, @NotNull final TaskFile taskFile) {\n    myCheckButton = addButton(taskActionsPanel, StudyCheckAction.ACTION_ID, InteractiveLearningIcons.Resolve, StudyCheckAction.SHORTCUT);\n    myPrevTaskButton = addButton(taskActionsPanel, StudyPreviousStudyTaskAction.ACTION_ID, InteractiveLearningIcons.Prev, StudyPreviousStudyTaskAction.SHORTCUT);\n    myNextTaskButton = addButton(taskActionsPanel, StudyNextStudyTaskAction.ACTION_ID, AllIcons.Actions.Forward, StudyNextStudyTaskAction.SHORTCUT);\n    myRefreshButton = addButton(taskActionsPanel, StudyRefreshTaskFileAction.ACTION_ID, AllIcons.Actions.Refresh, StudyRefreshTaskFileAction.SHORTCUT);\n    JButton myShowHintButton = addButton(taskActionsPanel, StudyShowHintAction.ACTION_ID, InteractiveLearningIcons.ShowHint, StudyShowHintAction.SHORTCUT);\n    if (!taskFile.getTask().getUserTests().isEmpty()) {\n      JButton runButton = addButton(taskActionsPanel, StudyRunAction.ACTION_ID, AllIcons.General.Run, null);\n      runButton.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          StudyRunAction studyRunAction = (StudyRunAction)ActionManager.getInstance().getAction(\"StudyRunAction\");\n          studyRunAction.run(myProject);\n        }\n      });\n      JButton watchInputButton = addButton(taskActionsPanel, \"WatchInputAction\", InteractiveLearningIcons.WatchInput, null);\n      watchInputButton.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          StudyEditInputAction studyEditInputAction =\n            (StudyEditInputAction)ActionManager.getInstance().getAction(\"WatchInputAction\");\n          studyEditInputAction.showInput(myProject);\n      }\n        });\n    }\n    myCheckButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyCheckAction studyCheckAction = (StudyCheckAction)ActionManager.getInstance().getAction(\"CheckAction\");\n        studyCheckAction.check(myProject);\n      }\n    });\n\n    myNextTaskButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyNextStudyTaskAction studyNextTaskAction =\n          (StudyNextStudyTaskAction)ActionManager.getInstance().getAction(\"NextTaskAction\");\n        studyNextTaskAction.navigateTask(myProject);\n      }\n    });\n    myPrevTaskButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyPreviousStudyTaskAction\n          prevTaskAction = (StudyPreviousStudyTaskAction)ActionManager.getInstance().getAction(\"PreviousTaskAction\");\n        prevTaskAction.navigateTask(myProject);\n      }\n    });\n    myRefreshButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyRefreshTaskFileAction.refresh(myProject);\n      }\n    });\n\n    myShowHintButton.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        StudyShowHintAction.showHint(myProject);\n      }\n    });\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(@NotNull AnActionEvent e) {\n    Project project = e.getProject();\n    if (project == null) {\n      return;\n    }\n    Sdk sdk = StudyUtils.findSdk(project);\n    if (sdk == null) {\n      return;\n    }\n    run(project, sdk);\n  }","id":94164,"modified_method":"public void actionPerformed(@NotNull AnActionEvent e) {\n    final Project project = e.getProject();\n    if (project != null) {\n      run(project);\n    }\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void executeFile(@NotNull final Project project, @NotNull final Sdk sdk,\n                           @NotNull final VirtualFile openedFile, @NotNull final String filePath) {\n    StudyTaskManager taskManager = StudyTaskManager.getInstance(project);\n    GeneralCommandLine cmd = new GeneralCommandLine();\n    cmd.withWorkDirectory(openedFile.getParent().getCanonicalPath());\n    String sdkHomePath = sdk.getHomePath();\n    if (sdkHomePath != null) {\n      cmd.setExePath(sdkHomePath);\n      TaskFile selectedTaskFile = taskManager.getTaskFile(openedFile);\n      assert selectedTaskFile != null;\n      Task currentTask = selectedTaskFile.getTask();\n      Process process;\n      StudyUtils.setCommandLineParameters(cmd, project, filePath, sdkHomePath, currentTask);\n\n      try {\n        process = cmd.createProcess();\n      }\n      catch (ExecutionException e) {\n        LOG.error(e);\n        return;\n      }\n      myHandler = new OSProcessHandler(process);\n      final RunContentExecutor executor = StudyUtils.getExecutor(project, myHandler);\n      if (executor != null) {\n        Disposer.register(project, executor);\n        executor.run();\n      }\n    }\n  }","id":94165,"modified_method":"private void executeFile(@NotNull final Project project,\n                           @NotNull final VirtualFile openedFile, @NotNull final String filePath) {\n    StudyTaskManager taskManager = StudyTaskManager.getInstance(project);\n    GeneralCommandLine cmd = new GeneralCommandLine();\n    cmd.withWorkDirectory(openedFile.getParent().getCanonicalPath());\n\n    TaskFile selectedTaskFile = taskManager.getTaskFile(openedFile);\n    assert selectedTaskFile != null;\n    final Task currentTask = selectedTaskFile.getTask();\n    final Sdk sdk = StudyUtils.findSdk(currentTask, project);\n    if (sdk == null) {\n      StudyUtils.showNoSdkNotification(currentTask, project);\n      return;\n    }\n    String sdkHomePath = sdk.getHomePath();\n    if (sdkHomePath != null) {\n      cmd.setExePath(sdkHomePath);\n      Process process;\n      StudyUtils.setCommandLineParameters(cmd, project, filePath, sdkHomePath, currentTask);\n\n      try {\n        process = cmd.createProcess();\n      }\n      catch (ExecutionException e) {\n        LOG.error(e);\n        return;\n      }\n      myHandler = new OSProcessHandler(process);\n      final RunContentExecutor executor = StudyUtils.getExecutor(project, currentTask, myHandler);\n      if (executor != null) {\n        Disposer.register(project, executor);\n        executor.run();\n      }\n    }\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void run(@NotNull final Project project, @NotNull final Sdk sdk) {\n    if (myHandler != null && !myHandler.isProcessTerminated()) return;\n    Editor selectedEditor = StudyEditor.getSelectedEditor(project);\n    FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n    assert selectedEditor != null;\n    VirtualFile openedFile = fileDocumentManager.getFile(selectedEditor.getDocument());\n\n    if (openedFile != null && openedFile.getCanonicalPath() != null) {\n      String filePath = openedFile.getCanonicalPath();\n      executeFile(project, sdk, openedFile, filePath);\n    }\n  }","id":94166,"modified_method":"public void run(@NotNull final Project project) {\n    if (myHandler != null && !myHandler.isProcessTerminated()) return;\n    Editor selectedEditor = StudyEditor.getSelectedEditor(project);\n    FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n    assert selectedEditor != null;\n    VirtualFile openedFile = fileDocumentManager.getFile(selectedEditor.getDocument());\n\n    if (openedFile != null && openedFile.getCanonicalPath() != null) {\n      String filePath = openedFile.getCanonicalPath();\n      executeFile(project, openedFile, filePath);\n    }\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static Course getCourse(@NotNull final CourseInfo info) {\n    final Course course = new Course();\n    course.author = info.getAuthor();\n    course.description = info.getDescription();\n    course.name = info.getName();\n    course.lessons = new ArrayList<Lesson>();\n\n    if (info.equals(ourTestCourseInfo)) {   // TODO: to be removed\n      try {\n        course.lessons.addAll(getLessons(0));\n      }\n      catch (IOException e) {\n        LOG.error(\"IOException \" + e.getMessage());\n      }\n      return course;\n    }\n\n    try {\n      for (Integer section : info.sections) {\n        course.lessons.addAll(getLessons(section));\n      }\n      return course;\n    }\n    catch (IOException e) {\n      LOG.error(\"IOException \" + e.getMessage());\n    }\n    return null;\n  }","id":94167,"modified_method":"public static Course getCourse(@NotNull final CourseInfo info) {\n    final Course course = new Course();\n    course.setAuthor(info.getAuthor());\n    course.setDescription(info.getDescription());\n    course.setName(info.getName());\n    course.lessons = new ArrayList<Lesson>();\n    course.setLanguage(Language.findLanguageByID(\"Python\"));  // TODO: get from stepic\n\n    if (info.equals(ourTestCourseInfo)) {   // TODO: to be removed\n      try {\n        course.lessons.addAll(getLessons(0));\n      }\n      catch (IOException e) {\n        LOG.error(\"IOException \" + e.getMessage());\n      }\n      return course;\n    }\n\n    try {\n      for (Integer section : info.sections) {\n        course.lessons.addAll(getLessons(section));\n      }\n      return course;\n    }\n    catch (IOException e) {\n      LOG.error(\"IOException \" + e.getMessage());\n    }\n    return null;\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static RunContentExecutor getExecutor(@NotNull final Project project, @NotNull final ProcessHandler handler) {\n    final StudyUtilsExtensionPoint[] extensions =\n      ApplicationManager.getApplication().getExtensions(StudyUtilsExtensionPoint.EP_NAME);\n    if (extensions.length > 0) {\n      return extensions[0].getExecutor(project, handler);\n    }\n    return null;\n  }","id":94168,"modified_method":"public static RunContentExecutor getExecutor(@NotNull final Project project, Task currentTask, @NotNull final ProcessHandler handler) {\n    final Language language = currentTask.getLesson().getCourse().getLanguage();\n    return StudyExecutor.INSTANCE.forLanguage(language).getExecutor(project, handler);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void setCommandLineParameters(@NotNull final GeneralCommandLine cmd,\n                                               @NotNull final Project project,\n                                               @NotNull final String filePath,\n                                               @NotNull final String sdkPath,\n                                               @NotNull final Task currentTask) {\n  final StudyUtilsExtensionPoint[] extensions =\n      ApplicationManager.getApplication().getExtensions(StudyUtilsExtensionPoint.EP_NAME);\n    if (extensions.length > 0) {\n      extensions[0].setCommandLineParameters(cmd, project, filePath, sdkPath, currentTask);\n    }\n  }","id":94169,"modified_method":"public static void setCommandLineParameters(@NotNull final GeneralCommandLine cmd,\n                                              @NotNull final Project project,\n                                              @NotNull final String filePath,\n                                              @NotNull final String sdkPath,\n                                              @NotNull final Task currentTask) {\n    final Language language = currentTask.getLesson().getCourse().getLanguage();\n    StudyExecutor.INSTANCE.forLanguage(language).setCommandLineParameters(cmd, project, filePath, sdkPath, currentTask);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static Sdk findSdk(@NotNull final Project project) {\n    final StudyUtilsExtensionPoint[] extensions =\n      ApplicationManager.getApplication().getExtensions(StudyUtilsExtensionPoint.EP_NAME);\n    if (extensions.length > 0) {\n      return extensions[0].findSdk(project);\n    }\n    return null;\n  }","id":94170,"modified_method":"@Nullable\n  public static Sdk findSdk(Task task, @NotNull final Project project) {\n    final Language language = task.getLesson().getCourse().getLanguage();\n    return StudyExecutor.INSTANCE.forLanguage(language).findSdk(project);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static StudyTestRunner getTestRunner(@NotNull final Task task, @NotNull final VirtualFile taskDir) {\n    final StudyUtilsExtensionPoint[] extensions =\n      ApplicationManager.getApplication().getExtensions(StudyUtilsExtensionPoint.EP_NAME);\n    if (extensions.length > 0) {\n      return extensions[0].getTestRunner(task, taskDir);\n    }\n    return null;\n  }","id":94171,"modified_method":"@NotNull\n  public static StudyTestRunner getTestRunner(@NotNull final Task task, @NotNull final VirtualFile taskDir) {\n    final Language language = task.getLesson().getCourse().getLanguage();\n    return StudyExecutor.INSTANCE.forLanguage(language).getTestRunner(task, taskDir);\n  }","commit_id":"425c95c5d51094099054b3333961ed0e2f78719f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createComponent() {\n    setLayout(new BorderLayout());\n    myRepositoryTree = new JTree();\n    myRepositoryTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    myRepositoryTree.setRootVisible(false);\n    myRepositoryTree.setShowsRootHandles(true);\n    JScrollPane scrollPane = new JScrollPane(myRepositoryTree,\n                                             JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n    add(scrollPane, BorderLayout.CENTER);\n    myRepositoryTree.setCellRenderer(new SvnRepositoryTreeCellRenderer());\n  }","id":94172,"modified_method":"private void createComponent() {\n    setLayout(new BorderLayout());\n    myRepositoryTree = new JTree();\n    myRepositoryTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    myRepositoryTree.setRootVisible(false);\n    myRepositoryTree.setShowsRootHandles(true);\n    JScrollPane scrollPane = new JScrollPane(myRepositoryTree,\n                                             JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n    add(scrollPane, BorderLayout.CENTER);\n    myRepositoryTree.setCellRenderer(new SvnRepositoryTreeCellRenderer());\n\n    PeerFactory.getInstance().getUIHelper().installEditSourceOnDoubleClick(myRepositoryTree);\n  }","commit_id":"cb26be4b1725ed9e09dd043f68f0ad57a62b1b74","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n      RepositoryTreeNode node = getRepositoryBrowser().getSelectedNode();\n      SVNDirEntry entry = node.getSVNDirEntry();\n      SVNURL url = node.getURL();\n      Project p = e.getData(DataKeys.PROJECT);\n      SVNRevision rev = SVNRevision.create(entry.getRevision());\n      final SvnFileRevision revision = new SvnFileRevision(myVCS, SVNRevision.UNDEFINED, rev, url.toString(),\n              entry.getAuthor(), entry.getDate(), null, null);\n      VirtualFile vcsVF = new VcsVirtualFile(node.getSVNDirEntry().getName(), revision, VcsFileSystem.getInstance());\n      FileEditorManager.getInstance(p).openFile(vcsVF, true);\n    }","id":94173,"modified_method":"public void actionPerformed(AnActionEvent e) {\n      VirtualFile vcsVF = getRepositoryBrowser().getSelectedVcsFile();\n      if (vcsVF != null) {\n        FileEditorManager.getInstance(myVCS.getProject()).openFile(vcsVF, true);\n      }\n    }","commit_id":"cb26be4b1725ed9e09dd043f68f0ad57a62b1b74","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setEnabled(false);\n      if (myVCS == null) {\n        return;\n      }\n      e.getPresentation().setText(\"_Open\", true);\n      RepositoryTreeNode node = getRepositoryBrowser().getSelectedNode();\n      if (node != null) {\n        SVNDirEntry entry = node.getSVNDirEntry();\n        if (entry != null && entry.getKind() == SVNNodeKind.FILE) {\n          String name = entry.getName();\n          FileTypeManager manager = FileTypeManager.getInstance();\n          e.getPresentation().setEnabled(entry.getName().lastIndexOf('.') > 0 && !manager.getFileTypeByFileName(name).isBinary());\n        }\n      }\n    }","id":94174,"modified_method":"public void update(AnActionEvent e) {\n      e.getPresentation().setEnabled(false);\n      if (myVCS == null) {\n        return;\n      }\n      e.getPresentation().setText(\"_Open\", true);\n      e.getPresentation().setEnabled(getRepositoryBrowser().getSelectedVcsFile() != null);\n    }","commit_id":"cb26be4b1725ed9e09dd043f68f0ad57a62b1b74","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @param path the path to get the inode for\n   * @return whether the inode exists\n   */\n  public boolean inodePathExists(AlluxioURI path) {\n    try {\n      TraversalResult traversalResult =\n          traverseToInode(PathUtils.getPathComponents(path.toString()), false, LockMode.READ);\n      return traversalResult.isFound();\n    } catch (InvalidPathException e) {\n      return false;\n    }\n  }","id":94175,"modified_method":"/**\n   * @param path the path to get the inode for\n   * @return whether the inode exists\n   */\n  public boolean inodePathExists(AlluxioURI path) {\n    try {\n      TraversalResult traversalResult =\n          traverseToInode(PathUtils.getPathComponents(path.toString()), LockMode.READ);\n      return traversalResult.isFound();\n    } catch (InvalidPathException e) {\n      return false;\n    }\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Returns an inode of a file given its path.\n   *\n   * @param path the path to get the inode for\n   * @return the inode with the given path\n   * @throws InvalidPathException if the path is invalid\n   * @throws FileDoesNotExistException if the file does not exist or it is a directory\n   */\n  public InodeFile getInodeFileByPath(AlluxioURI path) throws InvalidPathException,\n      FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.toString()), false, LockMode.READ);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    Inode inode = traversalResult.getInode();\n    if (!inode.isFile()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_MUST_BE_FILE.getMessage(path));\n    }\n    return (InodeFile) inode;\n  }","id":94176,"modified_method":"/**\n   * Returns an inode of a file given its path.\n   *\n   * @param path the path to get the inode for\n   * @return the inode with the given path\n   * @throws InvalidPathException if the path is invalid\n   * @throws FileDoesNotExistException if the file does not exist or it is a directory\n   */\n  public InodeFile getInodeFileByPath(AlluxioURI path) throws InvalidPathException,\n      FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.toString()), LockMode.READ);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    Inode inode = traversalResult.getInode();\n    if (!inode.isFile()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_MUST_BE_FILE.getMessage(path));\n    }\n    return (InodeFile) inode;\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @param path the path to get the inode for\n   * @return the inode with the given path\n   * @throws InvalidPathException if the path is invalid\n   * @throws FileDoesNotExistException if the path does not exist\n   */\n  public Inode<?> getInodeByPath(AlluxioURI path)\n      throws InvalidPathException, FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), false, LockMode.READ);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    return traversalResult.getInode();\n  }","id":94177,"modified_method":"/**\n   * @param path the path to get the inode for\n   * @return the inode with the given path\n   * @throws InvalidPathException if the path is invalid\n   * @throws FileDoesNotExistException if the path does not exist\n   */\n  public Inode<?> getInodeByPath(AlluxioURI path)\n      throws InvalidPathException, FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), LockMode.READ);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    return traversalResult.getInode();\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Creates a file or directory at path.\n   *\n   * @param path the path\n   * @param options method options\n   * @return a {@link CreatePathResult} representing the modified inodes and created inodes during\n   *         path creation\n   * @throws FileAlreadyExistsException when there is already a file at path if we want to create a\n   *         directory there\n   * @throws BlockInfoException when blockSizeBytes is invalid\n   * @throws InvalidPathException when path is invalid, for example, (1) when there is nonexistent\n   *         necessary parent directories and recursive is false, (2) when one of the necessary\n   *         parent directories is actually a file\n   * @throws IOException if creating the path fails\n   * @throws FileDoesNotExistException if the parent of the path does not exist and the recursive\n   *         option is false\n   */\n  public CreatePathResult createPath(AlluxioURI path, CreatePathOptions<?> options)\n      throws FileAlreadyExistsException, BlockInfoException, InvalidPathException, IOException,\n      FileDoesNotExistException {\n    if (path.isRoot()) {\n      LOG.info(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n      throw new FileAlreadyExistsException(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n    }\n    if (options instanceof CreateFileOptions) {\n      CreateFileOptions fileOptions = (CreateFileOptions) options;\n      if (fileOptions.getBlockSizeBytes() < 1) {\n        throw new BlockInfoException(\"Invalid block size \" + fileOptions.getBlockSizeBytes());\n      }\n    }\n\n    LOG.debug(\"createPath {}\", FormatUtils.parametersToString(path));\n\n    String[] pathComponents = PathUtils.getPathComponents(path.getPath());\n    String name = path.getName();\n\n    String[] parentPath = new String[pathComponents.length - 1];\n    System.arraycopy(pathComponents, 0, parentPath, 0, parentPath.length);\n\n    // TODO(gpang): lock the last inode(s) with write lock.\n    TraversalResult traversalResult =\n        traverseToInode(parentPath, options.isPersisted(), LockMode.WRITE);\n    InodeLockGroup lockGroup = traversalResult.getInodeLockGroup();\n    // This must be set to true when returning a valid response. Otherwise, all the locked inodes\n    // will be unlocked.\n    boolean valid = false;\n\n    try {\n      // pathIndex is the index into pathComponents where we start filling in the path from the\n      // inode.\n      int pathIndex = parentPath.length;\n      if (!traversalResult.isFound()) {\n        // Then the path component at errorInd k doesn't exist. If it's not recursive, we throw an\n        // exception here. Otherwise we add the remaining path components to the list of components\n        // to create.\n        if (!options.isRecursive()) {\n          final String msg = new StringBuilder().append(\"File \").append(path)\n              .append(\" creation failed. Component \")\n              .append(traversalResult.getNonexistentPathIndex()).append(\"(\")\n              .append(parentPath[traversalResult.getNonexistentPathIndex()])\n              .append(\") does not exist\").toString();\n          LOG.info(\"FileDoesNotExistException: {}\", msg);\n          throw new FileDoesNotExistException(msg);\n        } else {\n          // We will start filling at the index of the non-existing step found by the traversal.\n          pathIndex = traversalResult.getNonexistentPathIndex();\n        }\n      }\n\n      if (!traversalResult.getInode().isDirectory()) {\n        throw new InvalidPathException(\"Could not traverse to parent directory of path \" + path\n            + \". Component \" + pathComponents[pathIndex - 1] + \" is not a directory.\");\n      }\n      InodeDirectory currentInodeDirectory = (InodeDirectory) traversalResult.getInode();\n      List<Inode<?>> createdInodes = Lists.newArrayList();\n      List<Inode<?>> modifiedInodes = Lists.newArrayList();\n      // Directory persistence will not happen until the end of this method.\n      List<Inode<?>> toPersistDirectories = Lists.newArrayList(traversalResult.getNonPersisted());\n      if (pathIndex < parentPath.length || currentInodeDirectory.getChild(name) == null) {\n        // (1) There are components in parent paths that need to be created. Or\n        // (2) The last component of the path needs to be created.\n        // In these two cases, the last traversed Inode will be modified.\n        modifiedInodes.add(currentInodeDirectory);\n      }\n\n      // Fill in the directories that were missing.\n      CreateDirectoryOptions missingDirOptions = CreateDirectoryOptions.defaults()\n          .setMountPoint(false)\n          .setPersisted(options.isPersisted())\n          .setPermissionStatus(options.getPermissionStatus());\n      for (int k = pathIndex; k < parentPath.length; k++) {\n        InodeDirectory dir =\n            InodeDirectory.create(mDirectoryIdGenerator.getNewDirectoryId(),\n                currentInodeDirectory.getId(), pathComponents[k], missingDirOptions);\n        // Lock the newly created inode before subsequent operations, and add it to the lock group.\n//        lockGroup.lockWrite(dir);\n\n        dir.setPinned(currentInodeDirectory.isPinned());\n        currentInodeDirectory.addChild(dir);\n        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n        if (options.isPersisted()) {\n          toPersistDirectories.add(dir);\n        }\n        createdInodes.add(dir);\n        mInodes.add(dir);\n        currentInodeDirectory = dir;\n      }\n\n      // Create the final path component. First we need to make sure that there isn't already a file\n      // here with that name. If there is an existing file that is a directory and we're creating a\n      // directory, update persistence property of the directories if needed, otherwise, throw\n      // FileAlreadyExistsException unless options.allowExists is true.\n      Inode<?> lastInode = currentInodeDirectory.getChild(name);\n      if (lastInode != null) {\n        // Lock the last inode before subsequent operations, and add it to the lock group.\n//        lockGroup.lockWrite(lastInode);\n\n        if (lastInode.isDirectory() && options instanceof CreateDirectoryOptions && !lastInode\n            .isPersisted() && options.isPersisted()) {\n          // The final path component already exists and is not persisted, so it should be added\n          // to the non-persisted Inodes of traversalResult.\n          traversalResult.getNonPersisted().add(lastInode);\n          toPersistDirectories.add(lastInode);\n        } else if (!lastInode.isDirectory() || !(options instanceof CreateDirectoryOptions\n            && ((CreateDirectoryOptions) options).isAllowExists())) {\n          LOG.info(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n          throw new FileAlreadyExistsException(\n              ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n        }\n      } else {\n        if (options instanceof CreateDirectoryOptions) {\n          CreateDirectoryOptions directoryOptions = (CreateDirectoryOptions) options;\n          lastInode = InodeDirectory.create(mDirectoryIdGenerator.getNewDirectoryId(),\n              currentInodeDirectory.getId(), name, directoryOptions);\n          // Lock the created inode before subsequent operations, and add it to the lock group.\n//          lockGroup.lockWrite(lastInode);\n          if (directoryOptions.isPersisted()) {\n            toPersistDirectories.add(lastInode);\n          }\n        }\n        if (options instanceof CreateFileOptions) {\n          CreateFileOptions fileOptions = (CreateFileOptions) options;\n          lastInode = InodeFile.create(mContainerIdGenerator.getNewContainerId(),\n              currentInodeDirectory.getId(), name, fileOptions);\n          // Lock the created inode before subsequent operations, and add it to the lock group.\n//          lockGroup.lockWrite(lastInode);\n          if (currentInodeDirectory.isPinned()) {\n            // Update set of pinned file ids.\n            mPinnedInodeFileIds.add(lastInode.getId());\n          }\n        }\n        lastInode.setPinned(currentInodeDirectory.isPinned());\n\n        createdInodes.add(lastInode);\n        mInodes.add(lastInode);\n        currentInodeDirectory.addChild(lastInode);\n        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n      }\n\n      if (toPersistDirectories.size() > 0) {\n        Inode<?> lastToPersistInode = toPersistDirectories.get(toPersistDirectories.size() - 1);\n        MountTable.Resolution resolution = mMountTable.resolve(getPath(lastToPersistInode));\n        String ufsUri = resolution.getUri().toString();\n        UnderFileSystem ufs = resolution.getUfs();\n        // Persists only the last directory, recursively creating necessary parent directories. Even\n        // if the directory already exists in the ufs, we mark it as persisted.\n        if (ufs.exists(ufsUri) || ufs.mkdirs(ufsUri, true)) {\n          for (Inode<?> inode : toPersistDirectories) {\n            inode.setPersistenceState(PersistenceState.PERSISTED);\n          }\n        }\n      }\n\n      LOG.debug(\"createFile: File Created: {} parent: \", lastInode, currentInodeDirectory);\n      valid = true;\n      return new CreatePathResult(modifiedInodes, createdInodes, traversalResult.getNonPersisted(),\n          lockGroup);\n    } finally {\n      if (!valid) {\n        lockGroup.unlock();\n      }\n    }\n  }","id":94178,"modified_method":"/**\n   * Creates a file or directory at path.\n   *\n   * @param path the path\n   * @param options method options\n   * @return a {@link CreatePathResult} representing the modified inodes and created inodes during\n   *         path creation\n   * @throws FileAlreadyExistsException when there is already a file at path if we want to create a\n   *         directory there\n   * @throws BlockInfoException when blockSizeBytes is invalid\n   * @throws InvalidPathException when path is invalid, for example, (1) when there is nonexistent\n   *         necessary parent directories and recursive is false, (2) when one of the necessary\n   *         parent directories is actually a file\n   * @throws IOException if creating the path fails\n   * @throws FileDoesNotExistException if the parent of the path does not exist and the recursive\n   *         option is false\n   */\n  public CreatePathResult createPath(AlluxioURI path, CreatePathOptions<?> options)\n      throws FileAlreadyExistsException, BlockInfoException, InvalidPathException, IOException,\n      FileDoesNotExistException {\n    if (path.isRoot()) {\n      LOG.info(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n      throw new FileAlreadyExistsException(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n    }\n    if (options instanceof CreateFileOptions) {\n      CreateFileOptions fileOptions = (CreateFileOptions) options;\n      if (fileOptions.getBlockSizeBytes() < 1) {\n        throw new BlockInfoException(\"Invalid block size \" + fileOptions.getBlockSizeBytes());\n      }\n    }\n\n    LOG.debug(\"createPath {}\", FormatUtils.parametersToString(path));\n\n    String[] pathComponents = PathUtils.getPathComponents(path.getPath());\n    String name = path.getName();\n\n    String[] parentPath = new String[pathComponents.length - 1];\n    System.arraycopy(pathComponents, 0, parentPath, 0, parentPath.length);\n\n    // TODO(gpang): lock the last inode(s) with write lock.\n    TraversalResult traversalResult = traverseToInode(parentPath, LockMode.WRITE);\n    InodeLockGroup lockGroup = traversalResult.getInodeLockGroup();\n    // This must be set to true when returning a valid response. Otherwise, all the locked inodes\n    // will be unlocked.\n    boolean valid = false;\n\n    try {\n      // pathIndex is the index into pathComponents where we start filling in the path from the\n      // inode.\n      int pathIndex = parentPath.length;\n      if (!traversalResult.isFound()) {\n        // Then the path component at errorInd k doesn't exist. If it's not recursive, we throw an\n        // exception here. Otherwise we add the remaining path components to the list of components\n        // to create.\n        if (!options.isRecursive()) {\n          final String msg = new StringBuilder().append(\"File \").append(path)\n              .append(\" creation failed. Component \")\n              .append(traversalResult.getNonexistentPathIndex()).append(\"(\")\n              .append(parentPath[traversalResult.getNonexistentPathIndex()])\n              .append(\") does not exist\").toString();\n          LOG.info(\"FileDoesNotExistException: {}\", msg);\n          throw new FileDoesNotExistException(msg);\n        } else {\n          // We will start filling at the index of the non-existing step found by the traversal.\n          pathIndex = traversalResult.getNonexistentPathIndex();\n        }\n      }\n\n      if (!traversalResult.getInode().isDirectory()) {\n        throw new InvalidPathException(\"Could not traverse to parent directory of path \" + path\n            + \". Component \" + pathComponents[pathIndex - 1] + \" is not a directory.\");\n      }\n      InodeDirectory currentInodeDirectory = (InodeDirectory) traversalResult.getInode();\n      List<Inode<?>> createdInodes = Lists.newArrayList();\n      List<Inode<?>> modifiedInodes = Lists.newArrayList();\n      List<Inode<?>> toPersistDirectories = Lists.newArrayList();\n      if (options.isPersisted()) {\n        // Directory persistence will not happen until the end of this method.\n        toPersistDirectories.addAll(traversalResult.getNonPersisted());\n      }\n      if (pathIndex < parentPath.length || currentInodeDirectory.getChild(name) == null) {\n        // (1) There are components in parent paths that need to be created. Or\n        // (2) The last component of the path needs to be created.\n        // In these two cases, the last traversed Inode will be modified.\n        modifiedInodes.add(currentInodeDirectory);\n      }\n\n      // Fill in the directories that were missing.\n      CreateDirectoryOptions missingDirOptions = CreateDirectoryOptions.defaults()\n          .setMountPoint(false)\n          .setPersisted(options.isPersisted())\n          .setPermissionStatus(options.getPermissionStatus());\n      for (int k = pathIndex; k < parentPath.length; k++) {\n        InodeDirectory dir =\n            InodeDirectory.create(mDirectoryIdGenerator.getNewDirectoryId(),\n                currentInodeDirectory.getId(), pathComponents[k], missingDirOptions);\n        // Lock the newly created inode before subsequent operations, and add it to the lock group.\n//        lockGroup.lockWrite(dir);\n\n        dir.setPinned(currentInodeDirectory.isPinned());\n        currentInodeDirectory.addChild(dir);\n        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n        if (options.isPersisted()) {\n          toPersistDirectories.add(dir);\n        }\n        createdInodes.add(dir);\n        mInodes.add(dir);\n        currentInodeDirectory = dir;\n      }\n\n      // Create the final path component. First we need to make sure that there isn't already a file\n      // here with that name. If there is an existing file that is a directory and we're creating a\n      // directory, update persistence property of the directories if needed, otherwise, throw\n      // FileAlreadyExistsException unless options.allowExists is true.\n      Inode<?> lastInode = currentInodeDirectory.getChild(name);\n      if (lastInode != null) {\n        // Lock the last inode before subsequent operations, and add it to the lock group.\n//        lockGroup.lockWrite(lastInode);\n\n        if (lastInode.isDirectory() && options instanceof CreateDirectoryOptions && !lastInode\n            .isPersisted() && options.isPersisted()) {\n          // The final path component already exists and is not persisted, so it should be added\n          // to the non-persisted Inodes of traversalResult.\n          traversalResult.getNonPersisted().add(lastInode);\n          toPersistDirectories.add(lastInode);\n        } else if (!lastInode.isDirectory() || !(options instanceof CreateDirectoryOptions\n            && ((CreateDirectoryOptions) options).isAllowExists())) {\n          LOG.info(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n          throw new FileAlreadyExistsException(\n              ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));\n        }\n      } else {\n        if (options instanceof CreateDirectoryOptions) {\n          CreateDirectoryOptions directoryOptions = (CreateDirectoryOptions) options;\n          lastInode = InodeDirectory.create(mDirectoryIdGenerator.getNewDirectoryId(),\n              currentInodeDirectory.getId(), name, directoryOptions);\n          // Lock the created inode before subsequent operations, and add it to the lock group.\n//          lockGroup.lockWrite(lastInode);\n          if (directoryOptions.isPersisted()) {\n            toPersistDirectories.add(lastInode);\n          }\n        }\n        if (options instanceof CreateFileOptions) {\n          CreateFileOptions fileOptions = (CreateFileOptions) options;\n          lastInode = InodeFile.create(mContainerIdGenerator.getNewContainerId(),\n              currentInodeDirectory.getId(), name, fileOptions);\n          // Lock the created inode before subsequent operations, and add it to the lock group.\n//          lockGroup.lockWrite(lastInode);\n          if (currentInodeDirectory.isPinned()) {\n            // Update set of pinned file ids.\n            mPinnedInodeFileIds.add(lastInode.getId());\n          }\n        }\n        lastInode.setPinned(currentInodeDirectory.isPinned());\n\n        createdInodes.add(lastInode);\n        mInodes.add(lastInode);\n        currentInodeDirectory.addChild(lastInode);\n        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n      }\n\n      if (toPersistDirectories.size() > 0) {\n        Inode<?> lastToPersistInode = toPersistDirectories.get(toPersistDirectories.size() - 1);\n        MountTable.Resolution resolution = mMountTable.resolve(getPath(lastToPersistInode));\n        String ufsUri = resolution.getUri().toString();\n        UnderFileSystem ufs = resolution.getUfs();\n        // Persists only the last directory, recursively creating necessary parent directories. Even\n        // if the directory already exists in the ufs, we mark it as persisted.\n        if (ufs.exists(ufsUri) || ufs.mkdirs(ufsUri, true)) {\n          for (Inode<?> inode : toPersistDirectories) {\n            inode.setPersistenceState(PersistenceState.PERSISTED);\n          }\n        }\n      }\n\n      LOG.debug(\"createFile: File Created: {} parent: \", lastInode, currentInodeDirectory);\n      valid = true;\n      return new CreatePathResult(modifiedInodes, createdInodes, traversalResult.getNonPersisted(),\n          lockGroup);\n    } finally {\n      if (!valid) {\n        lockGroup.unlock();\n      }\n    }\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"private TraversalResult traverseToInode(String[] pathComponents, boolean collectNonPersisted,\n      LockMode lockMode) throws InvalidPathException {\n    List<Inode<?>> nonPersistedInodes = Lists.newArrayList();\n    List<Inode<?>> inodes = Lists.newArrayList();\n    InodeLockGroup lockGroup = new InodeLockGroup();\n\n    // This must be set to true when returning a valid response. Otherwise, all the locked inodes\n    // will be unlocked.\n    boolean valid = false;\n\n    try {\n      if (pathComponents == null) {\n        throw new InvalidPathException(\"passed-in pathComponents is null\");\n      } else if (pathComponents.length == 0) {\n        throw new InvalidPathException(\"passed-in pathComponents is empty\");\n      } else if (pathComponents.length == 1) {\n        if (pathComponents[0].equals(\"\")) {\n//          lockGroup.lockRead(mRoot);\n          inodes.add(mRoot);\n          valid = true;\n          return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n        } else {\n          throw new InvalidPathException(\"File name starts with \" + pathComponents[0]);\n        }\n      }\n\n      Inode<?> current = mRoot;\n//      lockGroup.lockRead(current);\n      inodes.add(current);\n\n      // iterate from 1, because 0 is root and it's already added\n      for (int i = 1; i < pathComponents.length; i++) {\n        Inode<?> next = ((InodeDirectory) current).getChild(pathComponents[i]);\n        if (next == null) {\n          // The user might want to create the nonexistent directories, so return the traversal\n          // result current inode with the last Inode taken, and the index of the first path\n          // component that couldn't be found.\n          valid = true;\n          return TraversalResult.createNotFoundResult(i, nonPersistedInodes, inodes, lockGroup);\n        } else {\n          // Lock the existing inode before proceeding.\n//          lockGroup.lockRead(next);\n          if (next.isFile()) {\n            // The inode can't have any children. If this is the last path component, we're good.\n            // Otherwise, we can't traverse further, so we clean up and throw an exception.\n            if (i == pathComponents.length - 1) {\n              inodes.add(next);\n              valid = true;\n              return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n            } else {\n              throw new InvalidPathException(\n                  \"Traversal failed. Component \" + i + \"(\" + next.getName() + \") is a file\");\n            }\n          } else {\n            inodes.add(next);\n            if (!next.isPersisted() && collectNonPersisted) {\n              // next is a directory and not persisted\n              nonPersistedInodes.add(next);\n            }\n            current = next;\n          }\n        }\n      }\n      valid = true;\n      return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n    } finally {\n      if (!valid) {\n        lockGroup.unlock();\n      }\n    }\n  }","id":94179,"modified_method":"private TraversalResult traverseToInode(String[] pathComponents, LockMode lockMode)\n      throws InvalidPathException {\n    List<Inode<?>> nonPersistedInodes = Lists.newArrayList();\n    List<Inode<?>> inodes = Lists.newArrayList();\n    InodeLockGroup lockGroup = new InodeLockGroup();\n\n    // This must be set to true when returning a valid response. Otherwise, all the locked inodes\n    // will be unlocked.\n    boolean valid = false;\n\n    try {\n      if (pathComponents == null) {\n        throw new InvalidPathException(\"passed-in pathComponents is null\");\n      } else if (pathComponents.length == 0) {\n        throw new InvalidPathException(\"passed-in pathComponents is empty\");\n      } else if (pathComponents.length == 1) {\n        if (pathComponents[0].equals(\"\")) {\n//          lockGroup.lockRead(mRoot);\n          inodes.add(mRoot);\n          valid = true;\n          return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n        } else {\n          throw new InvalidPathException(\"File name starts with \" + pathComponents[0]);\n        }\n      }\n\n      Inode<?> current = mRoot;\n//      lockGroup.lockRead(current);\n      inodes.add(current);\n\n      // iterate from 1, because 0 is root and it's already added\n      for (int i = 1; i < pathComponents.length; i++) {\n        Inode<?> next = ((InodeDirectory) current).getChild(pathComponents[i]);\n        if (next == null) {\n          // The user might want to create the nonexistent directories, so return the traversal\n          // result current inode with the last Inode taken, and the index of the first path\n          // component that couldn't be found.\n          valid = true;\n          return TraversalResult.createNotFoundResult(i, nonPersistedInodes, inodes, lockGroup);\n        } else {\n          // Lock the existing inode before proceeding.\n//          lockGroup.lockRead(next);\n          if (next.isFile()) {\n            // The inode can't have any children. If this is the last path component, we're good.\n            // Otherwise, we can't traverse further, so we clean up and throw an exception.\n            if (i == pathComponents.length - 1) {\n              inodes.add(next);\n              valid = true;\n              return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n            } else {\n              throw new InvalidPathException(\n                  \"Traversal failed. Component \" + i + \"(\" + next.getName() + \") is a file\");\n            }\n          } else {\n            inodes.add(next);\n            if (!next.isPersisted()) {\n              // next is a directory and not persisted\n              nonPersistedInodes.add(next);\n            }\n            current = next;\n          }\n        }\n      }\n      valid = true;\n      return TraversalResult.createFoundResult(nonPersistedInodes, inodes, lockGroup);\n    } finally {\n      if (!valid) {\n        lockGroup.unlock();\n      }\n    }\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"public InodePath lockInodePath(AlluxioURI path, LockMode lockMode) throws InvalidPathException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), false, lockMode);\n    return new InodePath(path, traversalResult.getInodes(), traversalResult.getInodeLockGroup());\n  }","id":94180,"modified_method":"public InodePath lockInodePath(AlluxioURI path, LockMode lockMode) throws InvalidPathException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), lockMode);\n    return new InodePath(path, traversalResult.getInodes(), traversalResult.getInodeLockGroup());\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"public InodePath lockFullInodePath(AlluxioURI path, LockMode lockMode)\n      throws InvalidPathException, FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), false, lockMode);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    return new InodePath(path, traversalResult.getInodes(), traversalResult.getInodeLockGroup());\n  }","id":94181,"modified_method":"public InodePath lockFullInodePath(AlluxioURI path, LockMode lockMode)\n      throws InvalidPathException, FileDoesNotExistException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), lockMode);\n    if (!traversalResult.isFound()) {\n      throw new FileDoesNotExistException(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path));\n    }\n    return new InodePath(path, traversalResult.getInodes(), traversalResult.getInodeLockGroup());\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Returns a list of existing inodes on the given path.\n   *\n   * @param path the path to get the inodes list for\n   * @return the inodes list with the given path\n   * @throws InvalidPathException if the path is invalid\n   */\n  public List<Inode<?>> collectInodes(AlluxioURI path) throws InvalidPathException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), false, LockMode.READ);\n    return traversalResult.getInodes();\n  }","id":94182,"modified_method":"/**\n   * Returns a list of existing inodes on the given path.\n   *\n   * @param path the path to get the inodes list for\n   * @return the inodes list with the given path\n   * @throws InvalidPathException if the path is invalid\n   */\n  public List<Inode<?>> collectInodes(AlluxioURI path) throws InvalidPathException {\n    TraversalResult traversalResult =\n        traverseToInode(PathUtils.getPathComponents(path.getPath()), LockMode.READ);\n    return traversalResult.getInodes();\n  }","commit_id":"f8b1c0a78080a8e1f2f41b3c35f9cc870df6a88e","url":"https://github.com/amplab/tachyon"},{"original_method":"public static List<Host> list( final Predicate<Host> filter ) {\n    return Lists.newArrayList( Iterables.filter( hostMap.values( ), filter ) );\n  }","id":94183,"modified_method":"public static List<Host> list( final Predicate<Host> filter ) {\n    return Lists.newArrayList( Iterables.filter( list( ), filter ) );\n  }","commit_id":"ea4b5f9fa8ce0af97a51993a383a198f24ccffa5","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static List<Host> list( ) {\n    return Lists.newArrayList( hostMap.values( ) );\n  }","id":94184,"modified_method":"public static List<Host> list( ) {\n    List<Host> hosts = Lists.newArrayList( );\n    if ( hostMap != null ) {\n      hosts.addAll( hostMap.values( ) );\n    }\n    return hosts;\n  }","commit_id":"ea4b5f9fa8ce0af97a51993a383a198f24ccffa5","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@NotNull\n    public JetScope getFileScopeForDeclarationResolution(JetFile file) {\n        // package\n        JetNamespaceHeader header = file.getNamespaceHeader();\n        if (header == null) {\n            throw new IllegalArgumentException(\"Scripts are not supported: \" + file.getName());\n        }\n\n        FqName fqName = new FqName(header.getQualifiedName());\n        NamespaceDescriptor packageDescriptor = resolveSession.getPackageDescriptorByFqName(fqName);\n\n        if (packageDescriptor == null) {\n            throw new IllegalStateException(\"Package not found: \" + fqName + \" maybe the file is not in scope of this resolve session: \" + file.getName());\n        }\n\n        WritableScope writableScope = new WritableScopeImpl(\n                JetScope.EMPTY, packageDescriptor, RedeclarationHandler.DO_NOTHING, \"File scope for declaration resolution\");\n        writableScope.importScope(resolveSession.getPackageDescriptorByFqName(FqName.ROOT).getMemberScope());\n        List<JetImportDirective> importDirectives = Lists.newArrayList(file.getImportDirectives());\n        resolveSession.getModuleConfiguration().addDefaultImports(importDirectives);\n        ImportsResolver.processImportsInFile(true, writableScope, importDirectives,\n                                             resolveSession.getPackageDescriptorByFqName(FqName.ROOT).getMemberScope(),\n                                             resolveSession.getModuleConfiguration(), resolveSession.getTrace(),\n                                             resolveSession.getInjector().getQualifiedExpressionResolver());\n        writableScope.importScope(packageDescriptor.getMemberScope());\n\n        // TODO: imports\n\n        writableScope.changeLockLevel(WritableScope.LockLevel.READING);\n        // TODO: Cache\n        return writableScope;\n    }","id":94185,"modified_method":"@NotNull\n    public JetScope getFileScopeForDeclarationResolution(JetFile file) {\n        // package\n        JetNamespaceHeader header = file.getNamespaceHeader();\n        if (header == null) {\n            throw new IllegalArgumentException(\"Scripts are not supported: \" + file.getName());\n        }\n\n        FqName fqName = new FqName(header.getQualifiedName());\n        NamespaceDescriptor packageDescriptor = resolveSession.getPackageDescriptorByFqName(fqName);\n\n        if (packageDescriptor == null) {\n            throw new IllegalStateException(\"Package not found: \" + fqName + \" maybe the file is not in scope of this resolve session: \" + file.getName());\n        }\n\n        WritableScope writableScope = new WritableScopeImpl(\n                JetScope.EMPTY, packageDescriptor, RedeclarationHandler.DO_NOTHING, \"File scope for declaration resolution\");\n        writableScope.importScope(resolveSession.getPackageDescriptorByFqName(FqName.ROOT).getMemberScope());\n        List<JetImportDirective> importDirectives = Lists.newArrayList();\n        resolveSession.getModuleConfiguration().addDefaultImports(importDirectives);\n        importDirectives.addAll(file.getImportDirectives());\n        ImportsResolver.processImportsInFile(true, writableScope, importDirectives,\n                                             resolveSession.getPackageDescriptorByFqName(FqName.ROOT).getMemberScope(),\n                                             resolveSession.getModuleConfiguration(), resolveSession.getTrace(),\n                                             resolveSession.getInjector().getQualifiedExpressionResolver());\n        writableScope.importScope(packageDescriptor.getMemberScope());\n\n        // TODO: imports\n\n        writableScope.changeLockLevel(WritableScope.LockLevel.READING);\n        // TODO: Cache\n        return writableScope;\n    }","commit_id":"c658fbbb51a876a0a4f2ea2e84d44ccc0d1948a3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"protected BlockLocation[] getFileBlockLocations(\n    FileSystem fs, FileStatus stat) throws IOException {\n    return fs.getFileBlockLocations(stat, 0, stat.getLen());\n  }","id":94186,"modified_method":"protected BlockLocation[] getFileBlockLocations(\n    FileSystem fs, FileStatus stat) throws IOException {\n    if (stat instanceof LocatedFileStatus) {\n      return ((LocatedFileStatus) stat).getBlockLocations();\n    }\n    return fs.getFileBlockLocations(stat, 0, stat.getLen());\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n  public List<InputSplit> getSplits(JobContext job) \n    throws IOException {\n    long minSizeNode = 0;\n    long minSizeRack = 0;\n    long maxSize = 0;\n    Configuration conf = job.getConfiguration();\n\n    // the values specified by setxxxSplitSize() takes precedence over the\n    // values that might have been specified in the config\n    if (minSplitSizeNode != 0) {\n      minSizeNode = minSplitSizeNode;\n    } else {\n      minSizeNode = conf.getLong(SPLIT_MINSIZE_PERNODE, 0);\n    }\n    if (minSplitSizeRack != 0) {\n      minSizeRack = minSplitSizeRack;\n    } else {\n      minSizeRack = conf.getLong(SPLIT_MINSIZE_PERRACK, 0);\n    }\n    if (maxSplitSize != 0) {\n      maxSize = maxSplitSize;\n    } else {\n      maxSize = conf.getLong(\"mapreduce.input.fileinputformat.split.maxsize\", 0);\n    }\n    if (minSizeNode != 0 && maxSize != 0 && minSizeNode > maxSize) {\n      throw new IOException(\"Minimum split size pernode \" + minSizeNode +\n                            \" cannot be larger than maximum split size \" +\n                            maxSize);\n    }\n    if (minSizeRack != 0 && maxSize != 0 && minSizeRack > maxSize) {\n      throw new IOException(\"Minimum split size per rack\" + minSizeRack +\n                            \" cannot be larger than maximum split size \" +\n                            maxSize);\n    }\n    if (minSizeRack != 0 && minSizeNode > minSizeRack) {\n      throw new IOException(\"Minimum split size per node\" + minSizeNode +\n                            \" cannot be smaller than minimum split \" +\n                            \"size per rack \" + minSizeRack);\n    }\n\n    // all the files in input set\n    Path[] paths = FileUtil.stat2Paths(\n                     listStatus(job).toArray(new FileStatus[0]));\n    List<InputSplit> splits = new ArrayList<InputSplit>();\n    if (paths.length == 0) {\n      return splits;    \n    }\n\n    // Convert them to Paths first. This is a costly operation and \n    // we should do it first, otherwise we will incur doing it multiple\n    // times, one time each for each pool in the next loop.\n    List<Path> newpaths = new LinkedList<Path>();\n    for (int i = 0; i < paths.length; i++) {\n      FileSystem fs = paths[i].getFileSystem(conf);\n      Path p = fs.makeQualified(paths[i]);\n      newpaths.add(p);\n    }\n\n    // In one single iteration, process all the paths in a single pool.\n    // Processing one pool at a time ensures that a split contains paths\n    // from a single pool only.\n    for (MultiPathFilter onepool : pools) {\n      ArrayList<Path> myPaths = new ArrayList<Path>();\n      \n      // pick one input path. If it matches all the filters in a pool,\n      // add it to the output set\n      for (Iterator<Path> iter = newpaths.iterator(); iter.hasNext();) {\n        Path p = iter.next();\n        if (onepool.accept(p)) {\n          myPaths.add(p); // add it to my output set\n          iter.remove();\n        }\n      }\n      // create splits for all files in this pool.\n      getMoreSplits(job, myPaths.toArray(new Path[myPaths.size()]), \n                    maxSize, minSizeNode, minSizeRack, splits);\n    }\n\n    // create splits for all files that are not in any pool.\n    getMoreSplits(job, newpaths.toArray(new Path[newpaths.size()]), \n                  maxSize, minSizeNode, minSizeRack, splits);\n\n    // free up rackToNodes map\n    rackToNodes.clear();\n    return splits;    \n  }","id":94187,"modified_method":"@Override\n  public List<InputSplit> getSplits(JobContext job) \n    throws IOException {\n    long minSizeNode = 0;\n    long minSizeRack = 0;\n    long maxSize = 0;\n    Configuration conf = job.getConfiguration();\n\n    // the values specified by setxxxSplitSize() takes precedence over the\n    // values that might have been specified in the config\n    if (minSplitSizeNode != 0) {\n      minSizeNode = minSplitSizeNode;\n    } else {\n      minSizeNode = conf.getLong(SPLIT_MINSIZE_PERNODE, 0);\n    }\n    if (minSplitSizeRack != 0) {\n      minSizeRack = minSplitSizeRack;\n    } else {\n      minSizeRack = conf.getLong(SPLIT_MINSIZE_PERRACK, 0);\n    }\n    if (maxSplitSize != 0) {\n      maxSize = maxSplitSize;\n    } else {\n      maxSize = conf.getLong(\"mapreduce.input.fileinputformat.split.maxsize\", 0);\n    }\n    if (minSizeNode != 0 && maxSize != 0 && minSizeNode > maxSize) {\n      throw new IOException(\"Minimum split size pernode \" + minSizeNode +\n                            \" cannot be larger than maximum split size \" +\n                            maxSize);\n    }\n    if (minSizeRack != 0 && maxSize != 0 && minSizeRack > maxSize) {\n      throw new IOException(\"Minimum split size per rack\" + minSizeRack +\n                            \" cannot be larger than maximum split size \" +\n                            maxSize);\n    }\n    if (minSizeRack != 0 && minSizeNode > minSizeRack) {\n      throw new IOException(\"Minimum split size per node\" + minSizeNode +\n                            \" cannot be smaller than minimum split \" +\n                            \"size per rack \" + minSizeRack);\n    }\n\n    // all the files in input set\n    List<FileStatus> stats = listStatus(job);\n    List<InputSplit> splits = new ArrayList<InputSplit>();\n    if (stats.size() == 0) {\n      return splits;    \n    }\n\n    // In one single iteration, process all the paths in a single pool.\n    // Processing one pool at a time ensures that a split contains paths\n    // from a single pool only.\n    for (MultiPathFilter onepool : pools) {\n      ArrayList<FileStatus> myPaths = new ArrayList<FileStatus>();\n      \n      // pick one input path. If it matches all the filters in a pool,\n      // add it to the output set\n      for (Iterator<FileStatus> iter = stats.iterator(); iter.hasNext();) {\n        FileStatus p = iter.next();\n        if (onepool.accept(p.getPath())) {\n          myPaths.add(p); // add it to my output set\n          iter.remove();\n        }\n      }\n      // create splits for all files in this pool.\n      getMoreSplits(job, myPaths, maxSize, minSizeNode, minSizeRack, splits);\n    }\n\n    // create splits for all files that are not in any pool.\n    getMoreSplits(job, stats, maxSize, minSizeNode, minSizeRack, splits);\n\n    // free up rackToNodes map\n    rackToNodes.clear();\n    return splits;    \n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"OneFileInfo(Path path, Configuration conf,\n                boolean isSplitable,\n                HashMap<String, List<OneBlockInfo>> rackToBlocks,\n                HashMap<OneBlockInfo, String[]> blockToNodes,\n                HashMap<String, List<OneBlockInfo>> nodeToBlocks,\n                HashMap<String, Set<String>> rackToNodes,\n                long maxSize)\n                throws IOException {\n      this.fileSize = 0;\n\n      // get block locations from file system\n      FileSystem fs = path.getFileSystem(conf);\n      FileStatus stat = fs.getFileStatus(path);\n      BlockLocation[] locations = fs.getFileBlockLocations(stat, 0, \n                                                           stat.getLen());\n      // create a list of all block and their locations\n      if (locations == null) {\n        blocks = new OneBlockInfo[0];\n      } else {\n\n        if(locations.length == 0) {\n          locations = new BlockLocation[] { new BlockLocation() };\n        }\n\n        if (!isSplitable) {\n          // if the file is not splitable, just create the one block with\n          // full file length\n          blocks = new OneBlockInfo[1];\n          fileSize = stat.getLen();\n          blocks[0] = new OneBlockInfo(path, 0, fileSize, locations[0]\n              .getHosts(), locations[0].getTopologyPaths());\n        } else {\n          ArrayList<OneBlockInfo> blocksList = new ArrayList<OneBlockInfo>(\n              locations.length);\n          for (int i = 0; i < locations.length; i++) {\n            fileSize += locations[i].getLength();\n\n            // each split can be a maximum of maxSize\n            long left = locations[i].getLength();\n            long myOffset = locations[i].getOffset();\n            long myLength = 0;\n            do {\n              if (maxSize == 0) {\n                myLength = left;\n              } else {\n                if (left > maxSize && left < 2 * maxSize) {\n                  // if remainder is between max and 2*max - then\n                  // instead of creating splits of size max, left-max we\n                  // create splits of size left/2 and left/2. This is\n                  // a heuristic to avoid creating really really small\n                  // splits.\n                  myLength = left / 2;\n                } else {\n                  myLength = Math.min(maxSize, left);\n                }\n              }\n              OneBlockInfo oneblock = new OneBlockInfo(path, myOffset,\n                  myLength, locations[i].getHosts(), locations[i]\n                      .getTopologyPaths());\n              left -= myLength;\n              myOffset += myLength;\n\n              blocksList.add(oneblock);\n            } while (left > 0);\n          }\n          blocks = blocksList.toArray(new OneBlockInfo[blocksList.size()]);\n        }\n        \n        populateBlockInfo(blocks, rackToBlocks, blockToNodes, \n                          nodeToBlocks, rackToNodes);\n      }\n    }","id":94188,"modified_method":"OneFileInfo(FileStatus stat, Configuration conf,\n                boolean isSplitable,\n                HashMap<String, List<OneBlockInfo>> rackToBlocks,\n                HashMap<OneBlockInfo, String[]> blockToNodes,\n                HashMap<String, List<OneBlockInfo>> nodeToBlocks,\n                HashMap<String, Set<String>> rackToNodes,\n                long maxSize)\n                throws IOException {\n      this.fileSize = 0;\n\n      // get block locations from file system\n      BlockLocation[] locations;\n      if (stat instanceof LocatedFileStatus) {\n        locations = ((LocatedFileStatus) stat).getBlockLocations();\n      } else {\n        FileSystem fs = stat.getPath().getFileSystem(conf);\n        locations = fs.getFileBlockLocations(stat, 0, stat.getLen());\n      }\n      // create a list of all block and their locations\n      if (locations == null) {\n        blocks = new OneBlockInfo[0];\n      } else {\n\n        if(locations.length == 0) {\n          locations = new BlockLocation[] { new BlockLocation() };\n        }\n\n        if (!isSplitable) {\n          // if the file is not splitable, just create the one block with\n          // full file length\n          blocks = new OneBlockInfo[1];\n          fileSize = stat.getLen();\n          blocks[0] = new OneBlockInfo(stat.getPath(), 0, fileSize,\n              locations[0].getHosts(), locations[0].getTopologyPaths());\n        } else {\n          ArrayList<OneBlockInfo> blocksList = new ArrayList<OneBlockInfo>(\n              locations.length);\n          for (int i = 0; i < locations.length; i++) {\n            fileSize += locations[i].getLength();\n\n            // each split can be a maximum of maxSize\n            long left = locations[i].getLength();\n            long myOffset = locations[i].getOffset();\n            long myLength = 0;\n            do {\n              if (maxSize == 0) {\n                myLength = left;\n              } else {\n                if (left > maxSize && left < 2 * maxSize) {\n                  // if remainder is between max and 2*max - then\n                  // instead of creating splits of size max, left-max we\n                  // create splits of size left/2 and left/2. This is\n                  // a heuristic to avoid creating really really small\n                  // splits.\n                  myLength = left / 2;\n                } else {\n                  myLength = Math.min(maxSize, left);\n                }\n              }\n              OneBlockInfo oneblock = new OneBlockInfo(stat.getPath(),\n                  myOffset, myLength, locations[i].getHosts(),\n                  locations[i].getTopologyPaths());\n              left -= myLength;\n              myOffset += myLength;\n\n              blocksList.add(oneblock);\n            } while (left > 0);\n          }\n          blocks = blocksList.toArray(new OneBlockInfo[blocksList.size()]);\n        }\n        \n        populateBlockInfo(blocks, rackToBlocks, blockToNodes, \n                          nodeToBlocks, rackToNodes);\n      }\n    }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Return all the splits in the specified set of paths\n   */\n  private void getMoreSplits(JobContext job, Path[] paths, \n                             long maxSize, long minSizeNode, long minSizeRack,\n                             List<InputSplit> splits)\n    throws IOException {\n    Configuration conf = job.getConfiguration();\n\n    // all blocks for all the files in input set\n    OneFileInfo[] files;\n  \n    // mapping from a rack name to the list of blocks it has\n    HashMap<String, List<OneBlockInfo>> rackToBlocks = \n                              new HashMap<String, List<OneBlockInfo>>();\n\n    // mapping from a block to the nodes on which it has replicas\n    HashMap<OneBlockInfo, String[]> blockToNodes = \n                              new HashMap<OneBlockInfo, String[]>();\n\n    // mapping from a node to the list of blocks that it contains\n    HashMap<String, List<OneBlockInfo>> nodeToBlocks = \n                              new HashMap<String, List<OneBlockInfo>>();\n    \n    files = new OneFileInfo[paths.length];\n    if (paths.length == 0) {\n      return; \n    }\n\n    // populate all the blocks for all files\n    long totLength = 0;\n    for (int i = 0; i < paths.length; i++) {\n      files[i] = new OneFileInfo(paths[i], conf, isSplitable(job, paths[i]),\n                                 rackToBlocks, blockToNodes, nodeToBlocks,\n                                 rackToNodes, maxSize);\n      totLength += files[i].getLength();\n    }\n    createSplits(nodeToBlocks, blockToNodes, rackToBlocks, totLength, \n                 maxSize, minSizeNode, minSizeRack, splits);\n  }","id":94189,"modified_method":"/**\n   * Return all the splits in the specified set of paths\n   */\n  private void getMoreSplits(JobContext job, List<FileStatus> stats,\n                             long maxSize, long minSizeNode, long minSizeRack,\n                             List<InputSplit> splits)\n    throws IOException {\n    Configuration conf = job.getConfiguration();\n\n    // all blocks for all the files in input set\n    OneFileInfo[] files;\n  \n    // mapping from a rack name to the list of blocks it has\n    HashMap<String, List<OneBlockInfo>> rackToBlocks = \n                              new HashMap<String, List<OneBlockInfo>>();\n\n    // mapping from a block to the nodes on which it has replicas\n    HashMap<OneBlockInfo, String[]> blockToNodes = \n                              new HashMap<OneBlockInfo, String[]>();\n\n    // mapping from a node to the list of blocks that it contains\n    HashMap<String, List<OneBlockInfo>> nodeToBlocks = \n                              new HashMap<String, List<OneBlockInfo>>();\n    \n    files = new OneFileInfo[stats.size()];\n    if (stats.size() == 0) {\n      return; \n    }\n\n    // populate all the blocks for all files\n    long totLength = 0;\n    int i = 0;\n    for (FileStatus stat : stats) {\n      files[i] = new OneFileInfo(stat, conf, isSplitable(job, stat.getPath()),\n                                 rackToBlocks, blockToNodes, nodeToBlocks,\n                                 rackToNodes, maxSize);\n      totLength += files[i].getLength();\n    }\n    createSplits(nodeToBlocks, blockToNodes, rackToBlocks, totLength, \n                 maxSize, minSizeNode, minSizeRack, splits);\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/** List input directories.\n   * Subclasses may override to, e.g., select only files matching a regular\n   * expression. \n   * \n   * @param job the job to list input paths for\n   * @return array of FileStatus objects\n   * @throws IOException if zero items.\n   */\n  protected List<FileStatus> listStatus(JobContext job\n                                        ) throws IOException {\n    List<FileStatus> result = new ArrayList<FileStatus>();\n    Path[] dirs = getInputPaths(job);\n    if (dirs.length == 0) {\n      throw new IOException(\"No input paths specified in job\");\n    }\n    \n    // get tokens for all the required FileSystems..\n    TokenCache.obtainTokensForNamenodes(job.getCredentials(), dirs, \n                                        job.getConfiguration());\n\n    // Whether we need to recursive look into the directory structure\n    boolean recursive = getInputDirRecursive(job);\n    \n    List<IOException> errors = new ArrayList<IOException>();\n    \n    // creates a MultiPathFilter with the hiddenFileFilter and the\n    // user provided one (if any).\n    List<PathFilter> filters = new ArrayList<PathFilter>();\n    filters.add(hiddenFileFilter);\n    PathFilter jobFilter = getInputPathFilter(job);\n    if (jobFilter != null) {\n      filters.add(jobFilter);\n    }\n    PathFilter inputFilter = new MultiPathFilter(filters);\n    \n    for (int i=0; i < dirs.length; ++i) {\n      Path p = dirs[i];\n      FileSystem fs = p.getFileSystem(job.getConfiguration()); \n      FileStatus[] matches = fs.globStatus(p, inputFilter);\n      if (matches == null) {\n        errors.add(new IOException(\"Input path does not exist: \" + p));\n      } else if (matches.length == 0) {\n        errors.add(new IOException(\"Input Pattern \" + p + \" matches 0 files\"));\n      } else {\n        for (FileStatus globStat: matches) {\n          if (globStat.isDirectory()) {\n            for(FileStatus stat: fs.listStatus(globStat.getPath(),\n                inputFilter)) {\n              if (recursive && stat.isDirectory()) {\n                addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n              } else {\n                result.add(stat);\n              }\n            }          \n          } else {\n            result.add(globStat);\n          }\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      throw new InvalidInputException(errors);\n    }\n    LOG.info(\"Total input paths to process : \" + result.size()); \n    return result;\n  }","id":94190,"modified_method":"/** List input directories.\n   * Subclasses may override to, e.g., select only files matching a regular\n   * expression. \n   * \n   * @param job the job to list input paths for\n   * @return array of FileStatus objects\n   * @throws IOException if zero items.\n   */\n  protected List<FileStatus> listStatus(JobContext job\n                                        ) throws IOException {\n    List<FileStatus> result = new ArrayList<FileStatus>();\n    Path[] dirs = getInputPaths(job);\n    if (dirs.length == 0) {\n      throw new IOException(\"No input paths specified in job\");\n    }\n    \n    // get tokens for all the required FileSystems..\n    TokenCache.obtainTokensForNamenodes(job.getCredentials(), dirs, \n                                        job.getConfiguration());\n\n    // Whether we need to recursive look into the directory structure\n    boolean recursive = getInputDirRecursive(job);\n    \n    List<IOException> errors = new ArrayList<IOException>();\n    \n    // creates a MultiPathFilter with the hiddenFileFilter and the\n    // user provided one (if any).\n    List<PathFilter> filters = new ArrayList<PathFilter>();\n    filters.add(hiddenFileFilter);\n    PathFilter jobFilter = getInputPathFilter(job);\n    if (jobFilter != null) {\n      filters.add(jobFilter);\n    }\n    PathFilter inputFilter = new MultiPathFilter(filters);\n    \n    for (int i=0; i < dirs.length; ++i) {\n      Path p = dirs[i];\n      FileSystem fs = p.getFileSystem(job.getConfiguration()); \n      FileStatus[] matches = fs.globStatus(p, inputFilter);\n      if (matches == null) {\n        errors.add(new IOException(\"Input path does not exist: \" + p));\n      } else if (matches.length == 0) {\n        errors.add(new IOException(\"Input Pattern \" + p + \" matches 0 files\"));\n      } else {\n        for (FileStatus globStat: matches) {\n          if (globStat.isDirectory()) {\n            RemoteIterator<LocatedFileStatus> iter =\n                fs.listLocatedStatus(globStat.getPath());\n            while (iter.hasNext()) {\n              LocatedFileStatus stat = iter.next();\n              if (inputFilter.accept(stat.getPath())) {\n                if (recursive && stat.isDirectory()) {\n                  addInputPathRecursively(result, fs, stat.getPath(),\n                      inputFilter);\n                } else {\n                  result.add(stat);\n                }\n              }\n            }\n          } else {\n            result.add(globStat);\n          }\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      throw new InvalidInputException(errors);\n    }\n    LOG.info(\"Total input paths to process : \" + result.size()); \n    return result;\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Add files in the input path recursively into the results.\n   * @param result\n   *          The List to store all files.\n   * @param fs\n   *          The FileSystem.\n   * @param path\n   *          The input path.\n   * @param inputFilter\n   *          The input filter that can be used to filter files/dirs. \n   * @throws IOException\n   */\n  protected void addInputPathRecursively(List<FileStatus> result,\n      FileSystem fs, Path path, PathFilter inputFilter) \n      throws IOException {\n    for(FileStatus stat: fs.listStatus(path, inputFilter)) {\n      if (stat.isDirectory()) {\n        addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n      } else {\n        result.add(stat);\n      }\n    }          \n  }","id":94191,"modified_method":"/**\n   * Add files in the input path recursively into the results.\n   * @param result\n   *          The List to store all files.\n   * @param fs\n   *          The FileSystem.\n   * @param path\n   *          The input path.\n   * @param inputFilter\n   *          The input filter that can be used to filter files/dirs. \n   * @throws IOException\n   */\n  protected void addInputPathRecursively(List<FileStatus> result,\n      FileSystem fs, Path path, PathFilter inputFilter) \n      throws IOException {\n    RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(path);\n    while (iter.hasNext()) {\n      LocatedFileStatus stat = iter.next();\n      if (inputFilter.accept(stat.getPath())) {\n        if (stat.isDirectory()) {\n          addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n        } else {\n          result.add(stat);\n        }\n      }\n    }\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/** \n   * Generate the list of files and make them into FileSplits.\n   * @param job the job context\n   * @throws IOException\n   */\n  public List<InputSplit> getSplits(JobContext job) throws IOException {\n    long minSize = Math.max(getFormatMinSplitSize(), getMinSplitSize(job));\n    long maxSize = getMaxSplitSize(job);\n\n    // generate splits\n    List<InputSplit> splits = new ArrayList<InputSplit>();\n    List<FileStatus> files = listStatus(job);\n    for (FileStatus file: files) {\n      Path path = file.getPath();\n      long length = file.getLen();\n      if (length != 0) {\n        FileSystem fs = path.getFileSystem(job.getConfiguration());\n        BlockLocation[] blkLocations = fs.getFileBlockLocations(file, 0, length);\n        if (isSplitable(job, path)) {\n          long blockSize = file.getBlockSize();\n          long splitSize = computeSplitSize(blockSize, minSize, maxSize);\n\n          long bytesRemaining = length;\n          while (((double) bytesRemaining)/splitSize > SPLIT_SLOP) {\n            int blkIndex = getBlockIndex(blkLocations, length-bytesRemaining);\n            splits.add(makeSplit(path, length-bytesRemaining, splitSize,\n                                     blkLocations[blkIndex].getHosts()));\n            bytesRemaining -= splitSize;\n          }\n\n          if (bytesRemaining != 0) {\n            int blkIndex = getBlockIndex(blkLocations, length-bytesRemaining);\n            splits.add(makeSplit(path, length-bytesRemaining, bytesRemaining,\n                       blkLocations[blkIndex].getHosts()));\n          }\n        } else { // not splitable\n          splits.add(makeSplit(path, 0, length, blkLocations[0].getHosts()));\n        }\n      } else { \n        //Create empty hosts array for zero length files\n        splits.add(makeSplit(path, 0, length, new String[0]));\n      }\n    }\n    // Save the number of input files for metrics/loadgen\n    job.getConfiguration().setLong(NUM_INPUT_FILES, files.size());\n    LOG.debug(\"Total # of splits: \" + splits.size());\n    return splits;\n  }","id":94192,"modified_method":"/** \n   * Generate the list of files and make them into FileSplits.\n   * @param job the job context\n   * @throws IOException\n   */\n  public List<InputSplit> getSplits(JobContext job) throws IOException {\n    long minSize = Math.max(getFormatMinSplitSize(), getMinSplitSize(job));\n    long maxSize = getMaxSplitSize(job);\n\n    // generate splits\n    List<InputSplit> splits = new ArrayList<InputSplit>();\n    List<FileStatus> files = listStatus(job);\n    for (FileStatus file: files) {\n      Path path = file.getPath();\n      long length = file.getLen();\n      if (length != 0) {\n        BlockLocation[] blkLocations;\n        if (file instanceof LocatedFileStatus) {\n          blkLocations = ((LocatedFileStatus) file).getBlockLocations();\n        } else {\n          FileSystem fs = path.getFileSystem(job.getConfiguration());\n          blkLocations = fs.getFileBlockLocations(file, 0, length);\n        }\n        if (isSplitable(job, path)) {\n          long blockSize = file.getBlockSize();\n          long splitSize = computeSplitSize(blockSize, minSize, maxSize);\n\n          long bytesRemaining = length;\n          while (((double) bytesRemaining)/splitSize > SPLIT_SLOP) {\n            int blkIndex = getBlockIndex(blkLocations, length-bytesRemaining);\n            splits.add(makeSplit(path, length-bytesRemaining, splitSize,\n                                     blkLocations[blkIndex].getHosts()));\n            bytesRemaining -= splitSize;\n          }\n\n          if (bytesRemaining != 0) {\n            int blkIndex = getBlockIndex(blkLocations, length-bytesRemaining);\n            splits.add(makeSplit(path, length-bytesRemaining, bytesRemaining,\n                       blkLocations[blkIndex].getHosts()));\n          }\n        } else { // not splitable\n          splits.add(makeSplit(path, 0, length, blkLocations[0].getHosts()));\n        }\n      } else { \n        //Create empty hosts array for zero length files\n        splits.add(makeSplit(path, 0, length, new String[0]));\n      }\n    }\n    // Save the number of input files for metrics/loadgen\n    job.getConfiguration().setLong(NUM_INPUT_FILES, files.size());\n    LOG.debug(\"Total # of splits: \" + splits.size());\n    return splits;\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Add files in the input path recursively into the results.\n   * @param result\n   *          The List to store all files.\n   * @param fs\n   *          The FileSystem.\n   * @param path\n   *          The input path.\n   * @param inputFilter\n   *          The input filter that can be used to filter files/dirs. \n   * @throws IOException\n   */\n  protected void addInputPathRecursively(List<FileStatus> result,\n      FileSystem fs, Path path, PathFilter inputFilter) \n      throws IOException {\n    for(FileStatus stat: fs.listStatus(path, inputFilter)) {\n      if (stat.isDirectory()) {\n        addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n      } else {\n        result.add(stat);\n      }\n    }          \n  }","id":94193,"modified_method":"/**\n   * Add files in the input path recursively into the results.\n   * @param result\n   *          The List to store all files.\n   * @param fs\n   *          The FileSystem.\n   * @param path\n   *          The input path.\n   * @param inputFilter\n   *          The input filter that can be used to filter files/dirs. \n   * @throws IOException\n   */\n  protected void addInputPathRecursively(List<FileStatus> result,\n      FileSystem fs, Path path, PathFilter inputFilter) \n      throws IOException {\n    RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(path);\n    while (iter.hasNext()) {\n      LocatedFileStatus stat = iter.next();\n      if (inputFilter.accept(stat.getPath())) {\n        if (stat.isDirectory()) {\n          addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n        } else {\n          result.add(stat);\n        }\n      }\n    }\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/** List input directories.\n   * Subclasses may override to, e.g., select only files matching a regular\n   * expression. \n   * \n   * @param job the job to list input paths for\n   * @return array of FileStatus objects\n   * @throws IOException if zero items.\n   */\n  protected FileStatus[] listStatus(JobConf job) throws IOException {\n    Path[] dirs = getInputPaths(job);\n    if (dirs.length == 0) {\n      throw new IOException(\"No input paths specified in job\");\n    }\n\n    // get tokens for all the required FileSystems..\n    TokenCache.obtainTokensForNamenodes(job.getCredentials(), dirs, job);\n    \n    // Whether we need to recursive look into the directory structure\n    boolean recursive = job.getBoolean(INPUT_DIR_RECURSIVE, false);\n    \n    List<FileStatus> result = new ArrayList<FileStatus>();\n    List<IOException> errors = new ArrayList<IOException>();\n    \n    // creates a MultiPathFilter with the hiddenFileFilter and the\n    // user provided one (if any).\n    List<PathFilter> filters = new ArrayList<PathFilter>();\n    filters.add(hiddenFileFilter);\n    PathFilter jobFilter = getInputPathFilter(job);\n    if (jobFilter != null) {\n      filters.add(jobFilter);\n    }\n    PathFilter inputFilter = new MultiPathFilter(filters);\n\n    for (Path p: dirs) {\n      FileSystem fs = p.getFileSystem(job); \n      FileStatus[] matches = fs.globStatus(p, inputFilter);\n      if (matches == null) {\n        errors.add(new IOException(\"Input path does not exist: \" + p));\n      } else if (matches.length == 0) {\n        errors.add(new IOException(\"Input Pattern \" + p + \" matches 0 files\"));\n      } else {\n        for (FileStatus globStat: matches) {\n          if (globStat.isDirectory()) {\n            for(FileStatus stat: fs.listStatus(globStat.getPath(),\n                inputFilter)) {\n              if (recursive && stat.isDirectory()) {\n                addInputPathRecursively(result, fs, stat.getPath(), inputFilter);\n              } else {\n                result.add(stat);\n              }\n            }          \n          } else {\n            result.add(globStat);\n          }\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      throw new InvalidInputException(errors);\n    }\n    LOG.info(\"Total input paths to process : \" + result.size()); \n    return result.toArray(new FileStatus[result.size()]);\n  }","id":94194,"modified_method":"/** List input directories.\n   * Subclasses may override to, e.g., select only files matching a regular\n   * expression. \n   * \n   * @param job the job to list input paths for\n   * @return array of FileStatus objects\n   * @throws IOException if zero items.\n   */\n  protected FileStatus[] listStatus(JobConf job) throws IOException {\n    Path[] dirs = getInputPaths(job);\n    if (dirs.length == 0) {\n      throw new IOException(\"No input paths specified in job\");\n    }\n\n    // get tokens for all the required FileSystems..\n    TokenCache.obtainTokensForNamenodes(job.getCredentials(), dirs, job);\n    \n    // Whether we need to recursive look into the directory structure\n    boolean recursive = job.getBoolean(INPUT_DIR_RECURSIVE, false);\n    \n    List<FileStatus> result = new ArrayList<FileStatus>();\n    List<IOException> errors = new ArrayList<IOException>();\n    \n    // creates a MultiPathFilter with the hiddenFileFilter and the\n    // user provided one (if any).\n    List<PathFilter> filters = new ArrayList<PathFilter>();\n    filters.add(hiddenFileFilter);\n    PathFilter jobFilter = getInputPathFilter(job);\n    if (jobFilter != null) {\n      filters.add(jobFilter);\n    }\n    PathFilter inputFilter = new MultiPathFilter(filters);\n\n    for (Path p: dirs) {\n      FileSystem fs = p.getFileSystem(job); \n      FileStatus[] matches = fs.globStatus(p, inputFilter);\n      if (matches == null) {\n        errors.add(new IOException(\"Input path does not exist: \" + p));\n      } else if (matches.length == 0) {\n        errors.add(new IOException(\"Input Pattern \" + p + \" matches 0 files\"));\n      } else {\n        for (FileStatus globStat: matches) {\n          if (globStat.isDirectory()) {\n            RemoteIterator<LocatedFileStatus> iter =\n                fs.listLocatedStatus(globStat.getPath());\n            while (iter.hasNext()) {\n              LocatedFileStatus stat = iter.next();\n              if (inputFilter.accept(stat.getPath())) {\n                if (recursive && stat.isDirectory()) {\n                  addInputPathRecursively(result, fs, stat.getPath(),\n                      inputFilter);\n                } else {\n                  result.add(stat);\n                }\n              }\n            }\n          } else {\n            result.add(globStat);\n          }\n        }\n      }\n    }\n\n    if (!errors.isEmpty()) {\n      throw new InvalidInputException(errors);\n    }\n    LOG.info(\"Total input paths to process : \" + result.size()); \n    return result.toArray(new FileStatus[result.size()]);\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"/** Splits files returned by {@link #listStatus(JobConf)} when\n   * they're too big.*/ \n  @SuppressWarnings(\"deprecation\")\n  public InputSplit[] getSplits(JobConf job, int numSplits)\n    throws IOException {\n    FileStatus[] files = listStatus(job);\n    \n    // Save the number of input files for metrics/loadgen\n    job.setLong(NUM_INPUT_FILES, files.length);\n    long totalSize = 0;                           // compute total size\n    for (FileStatus file: files) {                // check we have valid files\n      if (file.isDirectory()) {\n        throw new IOException(\"Not a file: \"+ file.getPath());\n      }\n      totalSize += file.getLen();\n    }\n\n    long goalSize = totalSize / (numSplits == 0 ? 1 : numSplits);\n    long minSize = Math.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.\n      FileInputFormat.SPLIT_MINSIZE, 1), minSplitSize);\n\n    // generate splits\n    ArrayList<FileSplit> splits = new ArrayList<FileSplit>(numSplits);\n    NetworkTopology clusterMap = new NetworkTopology();\n    for (FileStatus file: files) {\n      Path path = file.getPath();\n      FileSystem fs = path.getFileSystem(job);\n      long length = file.getLen();\n      BlockLocation[] blkLocations = fs.getFileBlockLocations(file, 0, length);\n      if ((length != 0) && isSplitable(fs, path)) { \n        long blockSize = file.getBlockSize();\n        long splitSize = computeSplitSize(goalSize, minSize, blockSize);\n\n        long bytesRemaining = length;\n        while (((double) bytesRemaining)/splitSize > SPLIT_SLOP) {\n          String[] splitHosts = getSplitHosts(blkLocations, \n              length-bytesRemaining, splitSize, clusterMap);\n          splits.add(makeSplit(path, length-bytesRemaining, splitSize, \n                               splitHosts));\n          bytesRemaining -= splitSize;\n        }\n        \n        if (bytesRemaining != 0) {\n          String[] splitHosts = getSplitHosts(blkLocations, length\n              - bytesRemaining, bytesRemaining, clusterMap);\n          splits.add(makeSplit(path, length - bytesRemaining, bytesRemaining,\n              splitHosts));\n        }\n      } else if (length != 0) {\n        String[] splitHosts = getSplitHosts(blkLocations,0,length,clusterMap);\n        splits.add(makeSplit(path, 0, length, splitHosts));\n      } else { \n        //Create empty hosts array for zero length files\n        splits.add(makeSplit(path, 0, length, new String[0]));\n      }\n    }\n    LOG.debug(\"Total # of splits: \" + splits.size());\n    return splits.toArray(new FileSplit[splits.size()]);\n  }","id":94195,"modified_method":"/** Splits files returned by {@link #listStatus(JobConf)} when\n   * they're too big.*/ \n  public InputSplit[] getSplits(JobConf job, int numSplits)\n    throws IOException {\n    FileStatus[] files = listStatus(job);\n    \n    // Save the number of input files for metrics/loadgen\n    job.setLong(NUM_INPUT_FILES, files.length);\n    long totalSize = 0;                           // compute total size\n    for (FileStatus file: files) {                // check we have valid files\n      if (file.isDirectory()) {\n        throw new IOException(\"Not a file: \"+ file.getPath());\n      }\n      totalSize += file.getLen();\n    }\n\n    long goalSize = totalSize / (numSplits == 0 ? 1 : numSplits);\n    long minSize = Math.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.\n      FileInputFormat.SPLIT_MINSIZE, 1), minSplitSize);\n\n    // generate splits\n    ArrayList<FileSplit> splits = new ArrayList<FileSplit>(numSplits);\n    NetworkTopology clusterMap = new NetworkTopology();\n    for (FileStatus file: files) {\n      Path path = file.getPath();\n      long length = file.getLen();\n      if (length != 0) {\n        FileSystem fs = path.getFileSystem(job);\n        BlockLocation[] blkLocations;\n        if (file instanceof LocatedFileStatus) {\n          blkLocations = ((LocatedFileStatus) file).getBlockLocations();\n        } else {\n          blkLocations = fs.getFileBlockLocations(file, 0, length);\n        }\n        if (isSplitable(fs, path)) {\n          long blockSize = file.getBlockSize();\n          long splitSize = computeSplitSize(goalSize, minSize, blockSize);\n\n          long bytesRemaining = length;\n          while (((double) bytesRemaining)/splitSize > SPLIT_SLOP) {\n            String[] splitHosts = getSplitHosts(blkLocations,\n                length-bytesRemaining, splitSize, clusterMap);\n            splits.add(makeSplit(path, length-bytesRemaining, splitSize,\n                splitHosts));\n            bytesRemaining -= splitSize;\n          }\n\n          if (bytesRemaining != 0) {\n            String[] splitHosts = getSplitHosts(blkLocations, length\n                - bytesRemaining, bytesRemaining, clusterMap);\n            splits.add(makeSplit(path, length - bytesRemaining, bytesRemaining,\n                splitHosts));\n          }\n        } else {\n          String[] splitHosts = getSplitHosts(blkLocations,0,length,clusterMap);\n          splits.add(makeSplit(path, 0, length, splitHosts));\n        }\n      } else { \n        //Create empty hosts array for zero length files\n        splits.add(makeSplit(path, 0, length, new String[0]));\n      }\n    }\n    LOG.debug(\"Total # of splits: \" + splits.size());\n    return splits.toArray(new FileSplit[splits.size()]);\n  }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public FileStatus[] listStatus(Path f) throws FileNotFoundException,\n        IOException {\n      if (f.toString().equals(\"test:/a1\")) {\n        return new FileStatus[] {\n            new FileStatus(10, true, 1, 150, 150, new Path(\"test:/a1/a2\")),\n            new FileStatus(10, false, 1, 150, 150, new Path(\"test:/a1/file1\")) };\n      } else if (f.toString().equals(\"test:/a1/a2\")) {\n        return new FileStatus[] {\n            new FileStatus(10, false, 1, 150, 150,\n                new Path(\"test:/a1/a2/file2\")),\n            new FileStatus(10, false, 1, 151, 150,\n                new Path(\"test:/a1/a2/file3\")) };\n      }\n      return new FileStatus[0];\n    }","id":94196,"modified_method":"@Override\n    public FileStatus[] listStatus(Path f) throws FileNotFoundException,\n        IOException {\n      if (f.toString().equals(\"test:/a1\")) {\n        return new FileStatus[] {\n            new FileStatus(0, true, 1, 150, 150, new Path(\"test:/a1/a2\")),\n            new FileStatus(10, false, 1, 150, 150, new Path(\"test:/a1/file1\")) };\n      } else if (f.toString().equals(\"test:/a1/a2\")) {\n        return new FileStatus[] {\n            new FileStatus(10, false, 1, 150, 150,\n                new Path(\"test:/a1/a2/file2\")),\n            new FileStatus(10, false, 1, 151, 150,\n                new Path(\"test:/a1/a2/file3\")) };\n      }\n      return new FileStatus[0];\n    }","commit_id":"ec18984252731089ab5af12b3603dcfc3d4f4593","url":"https://github.com/apache/hadoop"},{"original_method":"@Nullable\n    public static VirtualFile getJsStdLibJar(@NotNull Library library) {\n        return LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.JS_LIB_JAR_NAME);\n    }","id":94197,"modified_method":"@Nullable\n    public static VirtualFile getJsStdLibJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.JS_LIB_JAR_NAME);\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static VirtualFile getJsStdLibSrcJar(@NotNull Library library) {\n        return LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.SOURCES)), PathUtil.JS_LIB_SRC_JAR_NAME);\n    }","id":94198,"modified_method":"@Nullable\n    public static VirtualFile getJsStdLibSrcJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.SOURCES)), PathUtil.JS_LIB_SRC_JAR_NAME);\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static VirtualFile getRuntimeSrcJar(@NotNull Library library) {\n        return getRuntimeSrcJar(Arrays.asList(library.getFiles(OrderRootType.SOURCES)));\n    }","id":94199,"modified_method":"@Nullable\n    public static VirtualFile getRuntimeSrcJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               getRuntimeSrcJar(Arrays.asList(library.getFiles(OrderRootType.SOURCES)));\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static VirtualFile getRuntimeJar(@NotNull Library library) {\n        return JavaRuntimeDetectionUtil.getRuntimeJar(Arrays.asList(library.getFiles(OrderRootType.CLASSES)));\n    }","id":94200,"modified_method":"@Nullable\n    public static VirtualFile getRuntimeJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               JavaRuntimeDetectionUtil.getRuntimeJar(Arrays.asList(library.getFiles(OrderRootType.CLASSES)));\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static VirtualFile getReflectJar(@NotNull Library library) {\n        return LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.KOTLIN_JAVA_REFLECT_JAR);\n    }","id":94201,"modified_method":"@Nullable\n    public static VirtualFile getReflectJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.KOTLIN_JAVA_REFLECT_JAR);\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static VirtualFile getTestJar(@NotNull Library library) {\n        return LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.KOTLIN_TEST_JAR);\n    }","id":94202,"modified_method":"@Nullable\n    public static VirtualFile getTestJar(@NotNull Library library) {\n        return LibraryPresentationProviderUtil.isExternalLibrary(library) ? null :\n               LibraryUtils.getJarFile(Arrays.asList(library.getFiles(OrderRootType.CLASSES)), PathUtil.KOTLIN_TEST_JAR);\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Nullable\n    public static <LP extends LibraryProperties> LP getLibraryProperties(@NotNull LibraryPresentationProvider<LP> provider, @NotNull Library library) {\n        return provider.detect(Arrays.asList(library.getFiles(OrderRootType.CLASSES)));\n    }","id":94203,"modified_method":"@Nullable\n    public static <LP extends LibraryProperties> LP getLibraryProperties(@NotNull LibraryPresentationProvider<LP> provider, @NotNull Library library) {\n        if (isExternalLibrary(library)) return null;\n        return provider.detect(Arrays.asList(library.getFiles(OrderRootType.CLASSES)));\n    }","commit_id":"97837e6315d1129332dc2f27d333565c5e9380fb","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void hideAll(UUID gameId) {\r\n        hidePopup();\r\n        startHideTimeout();\r\n        this.state = false;\r\n        ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.TARGET);\r\n        ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.PAIRED);\r\n        ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.SOURCE);\r\n    }","id":94204,"modified_method":"public void hideAll(UUID gameId) {\r\n        hidePopup();\r\n        startHideTimeout();\r\n        this.state = false;\r\n        if (gameId != null) {\r\n            ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.TARGET);\r\n            ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.PAIRED);\r\n            ArrowBuilder.getBuilder().removeArrowsByType(gameId, ArrowBuilder.Type.SOURCE);\r\n        }\r\n    }","commit_id":"8dab1100605ce210cb19d21b9589cf51a9f16abd","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public void mouseExited(MouseEvent e, final TransferData data) {\r\n        hideAll(data.gameId);\r\n    }","id":94205,"modified_method":"@Override\r\n    public void mouseExited(MouseEvent e, final TransferData data) {\r\n        if (data != null) {\r\n            hideAll(data.gameId);\r\n        } else {\r\n            hideAll(null);\r\n        }\r\n    }","commit_id":"8dab1100605ce210cb19d21b9589cf51a9f16abd","url":"https://github.com/magefree/mage"},{"original_method":"protected void realDecode(SplitfileBlock[] dataBlockStatus, SplitfileBlock[] checkBlockStatus, int blockLength, BucketFactory bf) throws IOException {\n\t\tloadFEC();\n\t\tlogMINOR = Logger.shouldLog(LogLevel.MINOR, this);\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Doing decode: \" + dataBlockStatus.length + \" data blocks, \" + checkBlockStatus.length + \" check blocks, block length \" + blockLength + \" with \" + this, new Exception(\"debug\"));\n\t\tif(dataBlockStatus.length + checkBlockStatus.length != n)\n\t\t\tthrow new IllegalArgumentException();\n\t\tif(dataBlockStatus.length != k)\n\t\t\tthrow new IllegalArgumentException();\n\t\tBuffer[] packets = new Buffer[k];\n\t\tBucket[] buckets = new Bucket[n];\n\t\tDataInputStream[] readers = new DataInputStream[n];\n\t\tOutputStream[] writers = new OutputStream[k];\n\t\tint numberToDecode = 0; // can be less than n-k\n\n\t\ttry {\n\n\t\t\tbyte[] realBuffer = new byte[k * STRIPE_SIZE];\n\n\t\t\tint[] packetIndexes = new int[k];\n\t\t\tfor(int i = 0; i < packetIndexes.length; i++)\n\t\t\t\tpacketIndexes[i] = -1;\n\n\t\t\tint idx = 0;\n\n\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\tpackets[i] = new Buffer(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\tSTRIPE_SIZE);\n\n\t\t\t// Shortcut.\n\t\t\t// Due to the not-fetching-last-block code, we need to check here,\n\t\t\t// rather than relying on numberToDecode (since the last data block won't be part of numberToDecode).\n\t\t\t\n\t\t\tboolean needDecode = false;\n\t\t\tfor(int i = 0; i < dataBlockStatus.length;i++) {\n\t\t\t\tif(dataBlockStatus[i].getData() == null)\n\t\t\t\t\tneedDecode = true;\n\t\t\t}\n\t\t\t\n\t\t\tif(!needDecode) return;\n\t\t\t\n\t\t\tfor(int i = 0; i < dataBlockStatus.length; i++) {\n\t\t\t\tbuckets[i] = dataBlockStatus[i].getData();\n\t\t\t\tif(buckets[i] == null) {\n\t\t\t\t\tbuckets[i] = bf.makeBucket(blockLength);\n\t\t\t\t\twriters[i] = buckets[i].getOutputStream();\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"writers[\" + i + \"] != null\");\n\t\t\t\t\treaders[i] = null;\n\t\t\t\t\tnumberToDecode++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlong sz = buckets[i].size();\n\t\t\t\t\tif(sz < blockLength) {\n\t\t\t\t\t\tif(i != dataBlockStatus.length - 1)\n\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"All buckets must be the full size (caller must pad if needed) but data bucket \" + i + \" of \" + dataBlockStatus.length + \" (\" + dataBlockStatus[i] + \") is \" + sz + \" not \" + blockLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"writers[\" + i + \"] = null (already filled)\");\n\t\t\t\t\t\twriters[i] = null;\n\t\t\t\t\t\treaders[i] = new DataInputStream(buckets[i].getInputStream());\n\t\t\t\t\t\tpacketIndexes[idx++] = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < checkBlockStatus.length; i++) {\n\t\t\t\tbuckets[i + k] = checkBlockStatus[i].getData();\n\t\t\t\tif(buckets[i + k] == null)\n\t\t\t\t\treaders[i + k] = null;\n\t\t\t\telse {\n\t\t\t\t\treaders[i + k] = new DataInputStream(buckets[i + k].getInputStream());\n\t\t\t\t\tif(idx < k)\n\t\t\t\t\t\tpacketIndexes[idx++] = i + k;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(idx < k)\n\t\t\t\tthrow new IllegalArgumentException(\"Must have at least k packets (k=\" + k + \",idx=\" + idx + ')');\n\n\t\t\tif(logMINOR)\n\t\t\t\tfor(int i = 0; i < packetIndexes.length; i++)\n\t\t\t\t\tLogger.minor(this, \"[\" + i + \"] = \" + packetIndexes[i]);\n\n\t\t\tif(numberToDecode > 0)\n\t\t\t\t// Do the (striped) decode\n\t\t\t\t\n\t\t\t\tif(fec instanceof Native8Code) {\n\t\t\t\t\tSystem.out.println(\"Decoding with native code, n = \"+n+\" k = \"+k);\n\t\t\t\t\tSystem.out.flush();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int offset = 0; offset < blockLength; offset += STRIPE_SIZE) {\n\t\t\t\t\t// Read the data in first\n\t\t\t\t\tfor(int i = 0; i < k; i++) {\n\t\t\t\t\t\tint x = packetIndexes[i];\n\t\t\t\t\t\treaders[x].readFully(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\t\t\tSTRIPE_SIZE);\n\t\t\t\t\t}\n\t\t\t\t\t// Do the decode\n\t\t\t\t\t// Not shuffled\n\t\t\t\t\tint[] disposableIndexes = new int[packetIndexes.length];\n\t\t\t\t\tSystem.arraycopy(packetIndexes, 0, disposableIndexes, 0,\n\t\t\t\t\t\tpacketIndexes.length);\n\t\t\t\t\tfec.decode(packets, disposableIndexes);\n\t\t\t\t\t// packets now contains an array of decoded blocks, in order\n\t\t\t\t\t// Write the data out\n\t\t\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\t\t\tif(writers[i] != null)\n\t\t\t\t\t\t\twriters[i].write(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\t\t\t\tSTRIPE_SIZE);\n\t\t\t\t}\n\n\t\t}\n\t\tfinally {\n\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\tCloser.close(writers[i]);\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tCloser.close(readers[i]);\n\t\t}\n\t\t// Set new buckets only after have a successful decode.\n\t\t// Note that the last data bucket will be overwritten padded.\n\t\tfor(int i = 0; i < dataBlockStatus.length; i++) {\n\t\t\tBucket data = buckets[i];\n\t\t\tif(data.size() != blockLength)\n\t\t\t\tthrow new IllegalStateException(\"Block \" + i + \": \" + data + \" : \" + dataBlockStatus[i] + \" length \" + data.size() + \" whereas blockLength=\"+blockLength);\n\t\t\tif(!dataBlockStatus[i].trySetData(data)) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Discarding block \"+i+\" as now unneeded\");\n\t\t\t\tdata.free();\n\t\t\t}\n\t\t}\n\t}","id":94206,"modified_method":"protected void realDecode(SplitfileBlock[] dataBlockStatus, SplitfileBlock[] checkBlockStatus, int blockLength, BucketFactory bf) throws IOException {\n\t\tloadFEC();\n\t\tlogMINOR = Logger.shouldLog(LogLevel.MINOR, this);\n\t\tif(logMINOR)\n\t\t\tLogger.minor(this, \"Doing decode: \" + dataBlockStatus.length + \" data blocks, \" + checkBlockStatus.length + \" check blocks, block length \" + blockLength + \" with \" + this, new Exception(\"debug\"));\n\t\tif(dataBlockStatus.length + checkBlockStatus.length != n)\n\t\t\tthrow new IllegalArgumentException();\n\t\tif(dataBlockStatus.length != k)\n\t\t\tthrow new IllegalArgumentException();\n\t\tBuffer[] packets = new Buffer[k];\n\t\tBucket[] buckets = new Bucket[n];\n\t\tDataInputStream[] readers = new DataInputStream[n];\n\t\tOutputStream[] writers = new OutputStream[k];\n\t\tint numberToDecode = 0; // can be less than n-k\n\n\t\ttry {\n\n\t\t\tbyte[] realBuffer = new byte[k * STRIPE_SIZE];\n\n\t\t\tint[] packetIndexes = new int[k];\n\t\t\tfor(int i = 0; i < packetIndexes.length; i++)\n\t\t\t\tpacketIndexes[i] = -1;\n\n\t\t\tint idx = 0;\n\n\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\tpackets[i] = new Buffer(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\tSTRIPE_SIZE);\n\n\t\t\t// Shortcut.\n\t\t\t// Due to the not-fetching-last-block code, we need to check here,\n\t\t\t// rather than relying on numberToDecode (since the last data block won't be part of numberToDecode).\n\t\t\t\n\t\t\tboolean needDecode = false;\n\t\t\tfor(int i = 0; i < dataBlockStatus.length;i++) {\n\t\t\t\tif(dataBlockStatus[i].getData() == null)\n\t\t\t\t\tneedDecode = true;\n\t\t\t}\n\t\t\t\n\t\t\tif(!needDecode) return;\n\t\t\t\n\t\t\tfor(int i = 0; i < dataBlockStatus.length; i++) {\n\t\t\t\tbuckets[i] = dataBlockStatus[i].getData();\n\t\t\t\tif(buckets[i] == null) {\n\t\t\t\t\tbuckets[i] = bf.makeBucket(blockLength);\n\t\t\t\t\twriters[i] = buckets[i].getOutputStream();\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"writers[\" + i + \"] != null\");\n\t\t\t\t\treaders[i] = null;\n\t\t\t\t\tnumberToDecode++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlong sz = buckets[i].size();\n\t\t\t\t\tif(sz < blockLength) {\n\t\t\t\t\t\tif(i != dataBlockStatus.length - 1)\n\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"All buckets must be the full size (caller must pad if needed) but data bucket \" + i + \" of \" + dataBlockStatus.length + \" (\" + dataBlockStatus[i] + \") is \" + sz + \" not \" + blockLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"writers[\" + i + \"] = null (already filled)\");\n\t\t\t\t\t\twriters[i] = null;\n\t\t\t\t\t\treaders[i] = new DataInputStream(buckets[i].getInputStream());\n\t\t\t\t\t\tpacketIndexes[idx++] = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < checkBlockStatus.length; i++) {\n\t\t\t\tbuckets[i + k] = checkBlockStatus[i].getData();\n\t\t\t\tif(buckets[i + k] == null)\n\t\t\t\t\treaders[i + k] = null;\n\t\t\t\telse {\n\t\t\t\t\treaders[i + k] = new DataInputStream(buckets[i + k].getInputStream());\n\t\t\t\t\tif(idx < k)\n\t\t\t\t\t\tpacketIndexes[idx++] = i + k;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(idx < k)\n\t\t\t\tthrow new IllegalArgumentException(\"Must have at least k packets (k=\" + k + \",idx=\" + idx + ')');\n\n\t\t\tif(logMINOR)\n\t\t\t\tfor(int i = 0; i < packetIndexes.length; i++)\n\t\t\t\t\tLogger.minor(this, \"[\" + i + \"] = \" + packetIndexes[i]);\n\n\t\t\tif(numberToDecode > 0)\n\t\t\t\t// Do the (striped) decode\n\t\t\t\t\n\t\t\t\tif(fec instanceof Native8Code) {\n\t\t\t\t\tSystem.out.println(\"Decoding with native code, n = \"+n+\" k = \"+k);\n\t\t\t\t\tSystem.out.flush();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int offset = 0; offset < blockLength; offset += STRIPE_SIZE) {\n\t\t\t\t\t// Read the data in first\n\t\t\t\t\tfor(int i = 0; i < k; i++) {\n\t\t\t\t\t\tint x = packetIndexes[i];\n\t\t\t\t\t\treaders[x].readFully(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\t\t\tSTRIPE_SIZE);\n\t\t\t\t\t}\n\t\t\t\t\t// Do the decode\n\t\t\t\t\t// Not shuffled\n\t\t\t\t\tint[] disposableIndexes = new int[packetIndexes.length];\n\t\t\t\t\tSystem.arraycopy(packetIndexes, 0, disposableIndexes, 0,\n\t\t\t\t\t\tpacketIndexes.length);\n\t\t\t\t\tfec.decode(packets, disposableIndexes);\n\t\t\t\t\t// packets now contains an array of decoded blocks, in order\n\t\t\t\t\t// Write the data out\n\t\t\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\t\t\tif(writers[i] != null)\n\t\t\t\t\t\t\twriters[i].write(realBuffer, i * STRIPE_SIZE,\n\t\t\t\t\t\t\t\tSTRIPE_SIZE);\n\t\t\t\t}\n\n\t\t}\n\t\tfinally {\n\t\t\tfor(int i = 0; i < k; i++)\n\t\t\t\tCloser.close(writers[i]);\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tCloser.close(readers[i]);\n\t\t}\n\t\t// Set new buckets only after have a successful decode.\n\t\t// Note that the last data bucket will be overwritten padded.\n\t\tfor(int i = 0; i < dataBlockStatus.length; i++) {\n\t\t\tBucket data = buckets[i];\n\t\t\tif(data.size() != blockLength)\n\t\t\t\tthrow new IllegalStateException(\"Block \" + i + \": \" + data + \" : \" + dataBlockStatus[i] + \" length \" + data.size() + \" whereas blockLength=\"+blockLength);\n\t\t\tBucket existingData = dataBlockStatus[i].trySetData(data);\n\t\t\tif(existingData != null && existingData != data) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Discarding block \"+i+\" as now unneeded\");\n\t\t\t\tdata.free();\n\t\t\t}\n\t\t}\n\t}","commit_id":"bb6d7ef0e39e8dbf3c04bb72fd2f0db17df6110c","url":"https://github.com/freenet/fred"},{"original_method":"private void initRunner() {\n\t\trunner = new PrioRunnable() {\n\t\t/**\n\t\t * Runs on each thread.\n\t\t * @author nextgens\n\t\t */\n\t\tpublic void run() {\n\t\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\t\ttry {\n\t\t\t\twhile(true) {\n\t\t\t\t\tfinal FECJob job;\n\t\t\t\t\t// Get a job\n\t\t\t\t\tsynchronized (FECQueue.this) {\n\t\t\t\t\t\tjob = getFECJobBlockingNoDBAccess();\n\t\t\t\t\t\tif(job == null) {\n\t\t\t\t\t\t\t// Too many jobs running.\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjob.running = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\tLogger.minor(this, \"Running job \"+job);\n\t\t\t\t\t// Encode it\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (job.isADecodingJob)\n\t\t\t\t\t\t\tjob.getCodec().realDecode(job.dataBlockStatus, job.checkBlockStatus, job.blockLength,\n\t\t\t\t\t\t\t        job.bucketFactory);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tjob.getCodec().realEncode(job.dataBlocks, job.checkBlocks, job.blockLength, job.bucketFactory);\n\t\t\t\t\t\t\t// Update SplitFileBlocks from buckets if necessary\n\t\t\t\t\t\t\tif ((job.dataBlockStatus != null) || (job.checkBlockStatus != null)) {\n\t\t\t\t\t\t\t\tfor (int i = 0; i < job.dataBlocks.length; i++) {\n\t\t\t\t\t\t\t\t\tif(!job.dataBlockStatus[i].trySetData(job.dataBlocks[i])) {\n\t\t\t\t\t\t\t\t\t\tjob.dataBlocks[i].free();\n\t\t\t\t\t\t\t\t\t\tjob.dataBlocks[i] = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (int i = 0; i < job.checkBlocks.length; i++) {\n\t\t\t\t\t\t\t\t\tif(!job.checkBlockStatus[i].trySetData(job.checkBlocks[i])) {\n\t\t\t\t\t\t\t\t\t\tjob.checkBlocks[i].free();\n\t\t\t\t\t\t\t\t\t\tjob.checkBlocks[i] = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (final Throwable t) {\n\t\t\t\t\t\tLogger.error(this, \"Caught: \"+t, t);\n\t\t\t\t\t\tif(job.persistent) {\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduling callback for \"+job+\"...\");\n\t\t\t\t\t\t\tint prio = job.isADecodingJob ? NativeThread.NORM_PRIORITY+1 : NativeThread.NORM_PRIORITY;\n\t\t\t\t\t\t\t// Run at a fairly high priority so we get the blocks out of memory and onto disk.\n\t\t\t\t\t\t\tdatabaseJobRunner.queue(new DBJob() {\n\n\t\t\t\t\t\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\t\t\t\tjob.storeBlockStatuses(container);\n\t\t\t\t\t\t\t\t\t// Don't activate the job itself.\n\t\t\t\t\t\t\t\t\t// It MUST already be activated, because it is carrying the status blocks.\n\t\t\t\t\t\t\t\t\t// The status blocks have been set on the FEC thread but *not stored* because\n\t\t\t\t\t\t\t\t\t// they can't be stored on the FEC thread.\n\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Activating \"+job.callback+\" is active=\"+container.ext().isActive(job.callback));\n\t\t\t\t\t\t\t\t\tcontainer.activate(job.callback, 1);\n\t\t\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Running callback for \"+job);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tjob.callback.onFailed(t, container, context);\n\t\t\t\t\t\t\t\t\t} catch (Throwable t1) {\n\t\t\t\t\t\t\t\t\t\tLogger.error(this, \"Caught \"+t1+\" in FECQueue callback failure\", t1);\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t// Always delete the job, even if the callback throws.\n\t\t\t\t\t\t\t\t\t\tcontainer.delete(job);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(container.ext().isStored(job.callback))\n\t\t\t\t\t\t\t\t\t\tcontainer.deactivate(job.callback, 1);\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\t\treturn \"FECQueueJobFailedCallback\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, prio, false);\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduled callback for \"+job+\"...\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjob.callback.onFailed(t, null, clientContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue; // Try the next one.\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call the callback\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif(!job.persistent) {\n\t\t\t\t\t\t\tif (job.isADecodingJob)\n\t\t\t\t\t\t\t\tjob.callback.onDecodedSegment(null, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tjob.callback.onEncodedSegment(null, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduling callback for \"+job+\"...\");\n\t\t\t\t\t\t\tint prio = job.isADecodingJob ? NativeThread.NORM_PRIORITY+1 : NativeThread.NORM_PRIORITY;\n\t\t\t\t\t\t\tif(job.priority > RequestStarter.IMMEDIATE_SPLITFILE_PRIORITY_CLASS)\n\t\t\t\t\t\t\t\tprio--;\n\t\t\t\t\t\t\tif(job.priority >= RequestStarter.BULK_SPLITFILE_PRIORITY_CLASS)\n\t\t\t\t\t\t\t\tprio--;\n\t\t\t\t\t\t\tdatabaseJobRunner.queue(new DBJob() {\n\n\t\t\t\t\t\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\t\t\t\tjob.storeBlockStatuses(container);\n\t\t\t\t\t\t\t\t\t// Don't activate the job itself.\n\t\t\t\t\t\t\t\t\t// It MUST already be activated, because it is carrying the status blocks.\n\t\t\t\t\t\t\t\t\t// The status blocks have been set on the FEC thread but *not stored* because\n\t\t\t\t\t\t\t\t\t// they can't be stored on the FEC thread.\n\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Activating \"+job.callback+\" is active=\"+container.ext().isActive(job.callback));\n\t\t\t\t\t\t\t\t\tcontainer.activate(job.callback, 1);\n\t\t\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Running callback for \"+job);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tif(job.isADecodingJob)\n\t\t\t\t\t\t\t\t\t\tjob.callback.onDecodedSegment(container, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tjob.callback.onEncodedSegment(container, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t\t\t\t\t\tLogger.error(this, \"Caught \"+t+\" in FECQueue callback\", t);\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t// Always delete the job, even if the callback throws.\n\t\t\t\t\t\t\t\t\t\tcontainer.delete(job);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(container.ext().isStored(job.callback))\n\t\t\t\t\t\t\t\t\t\tcontainer.deactivate(job.callback, 1);\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\t\treturn \"FECQueueJobCompletedCallback\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, prio, false);\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduled callback for \"+job+\"...\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tLogger.error(this, \"The callback failed!\" + e, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Caught \"+t+\" in \"+this, t);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsynchronized (FECQueue.this) {\n\t\t\t\t\trunningFECThreads--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic int getPriority() {\n\t\t\treturn NativeThread.LOW_PRIORITY;\n\t\t}\n\n\t};\n\t}","id":94207,"modified_method":"private void initRunner() {\n\t\trunner = new PrioRunnable() {\n\t\t/**\n\t\t * Runs on each thread.\n\t\t * @author nextgens\n\t\t */\n\t\tpublic void run() {\n\t\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\t\ttry {\n\t\t\t\twhile(true) {\n\t\t\t\t\tfinal FECJob job;\n\t\t\t\t\t// Get a job\n\t\t\t\t\tsynchronized (FECQueue.this) {\n\t\t\t\t\t\tjob = getFECJobBlockingNoDBAccess();\n\t\t\t\t\t\tif(job == null) {\n\t\t\t\t\t\t\t// Too many jobs running.\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjob.running = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\tLogger.minor(this, \"Running job \"+job);\n\t\t\t\t\t// Encode it\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (job.isADecodingJob)\n\t\t\t\t\t\t\tjob.getCodec().realDecode(job.dataBlockStatus, job.checkBlockStatus, job.blockLength,\n\t\t\t\t\t\t\t        job.bucketFactory);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tjob.getCodec().realEncode(job.dataBlocks, job.checkBlocks, job.blockLength, job.bucketFactory);\n\t\t\t\t\t\t\t// Update SplitFileBlocks from buckets if necessary\n\t\t\t\t\t\t\tif ((job.dataBlockStatus != null) || (job.checkBlockStatus != null)) {\n\t\t\t\t\t\t\t\tfor (int i = 0; i < job.dataBlocks.length; i++) {\n\t\t\t\t\t\t\t\t\tBucket existingData = job.dataBlockStatus[i].trySetData(job.dataBlocks[i]);\n\t\t\t\t\t\t\t\t\tif(existingData != null && existingData != job.dataBlocks[i]) {\n\t\t\t\t\t\t\t\t\t\tjob.dataBlocks[i].free();\n\t\t\t\t\t\t\t\t\t\tjob.dataBlocks[i] = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (int i = 0; i < job.checkBlocks.length; i++) {\n\t\t\t\t\t\t\t\t\tBucket existingData = job.checkBlockStatus[i].trySetData(job.checkBlocks[i]);\n\t\t\t\t\t\t\t\t\tif(existingData != null && existingData != job.checkBlocks[i]) {\n\t\t\t\t\t\t\t\t\t\tjob.checkBlocks[i].free();\n\t\t\t\t\t\t\t\t\t\tjob.checkBlocks[i] = null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (final Throwable t) {\n\t\t\t\t\t\tLogger.error(this, \"Caught: \"+t, t);\n\t\t\t\t\t\tif(job.persistent) {\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduling callback for \"+job+\"...\");\n\t\t\t\t\t\t\tint prio = job.isADecodingJob ? NativeThread.NORM_PRIORITY+1 : NativeThread.NORM_PRIORITY;\n\t\t\t\t\t\t\t// Run at a fairly high priority so we get the blocks out of memory and onto disk.\n\t\t\t\t\t\t\tdatabaseJobRunner.queue(new DBJob() {\n\n\t\t\t\t\t\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\t\t\t\tjob.storeBlockStatuses(container);\n\t\t\t\t\t\t\t\t\t// Don't activate the job itself.\n\t\t\t\t\t\t\t\t\t// It MUST already be activated, because it is carrying the status blocks.\n\t\t\t\t\t\t\t\t\t// The status blocks have been set on the FEC thread but *not stored* because\n\t\t\t\t\t\t\t\t\t// they can't be stored on the FEC thread.\n\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Activating \"+job.callback+\" is active=\"+container.ext().isActive(job.callback));\n\t\t\t\t\t\t\t\t\tcontainer.activate(job.callback, 1);\n\t\t\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Running callback for \"+job);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tjob.callback.onFailed(t, container, context);\n\t\t\t\t\t\t\t\t\t} catch (Throwable t1) {\n\t\t\t\t\t\t\t\t\t\tLogger.error(this, \"Caught \"+t1+\" in FECQueue callback failure\", t1);\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t// Always delete the job, even if the callback throws.\n\t\t\t\t\t\t\t\t\t\tcontainer.delete(job);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(container.ext().isStored(job.callback))\n\t\t\t\t\t\t\t\t\t\tcontainer.deactivate(job.callback, 1);\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\t\treturn \"FECQueueJobFailedCallback\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, prio, false);\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduled callback for \"+job+\"...\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjob.callback.onFailed(t, null, clientContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue; // Try the next one.\n\t\t\t\t\t}\n\n\t\t\t\t\t// Call the callback\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif(!job.persistent) {\n\t\t\t\t\t\t\tif (job.isADecodingJob)\n\t\t\t\t\t\t\t\tjob.callback.onDecodedSegment(null, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tjob.callback.onEncodedSegment(null, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduling callback for \"+job+\"...\");\n\t\t\t\t\t\t\tint prio = job.isADecodingJob ? NativeThread.NORM_PRIORITY+1 : NativeThread.NORM_PRIORITY;\n\t\t\t\t\t\t\tif(job.priority > RequestStarter.IMMEDIATE_SPLITFILE_PRIORITY_CLASS)\n\t\t\t\t\t\t\t\tprio--;\n\t\t\t\t\t\t\tif(job.priority >= RequestStarter.BULK_SPLITFILE_PRIORITY_CLASS)\n\t\t\t\t\t\t\t\tprio--;\n\t\t\t\t\t\t\tdatabaseJobRunner.queue(new DBJob() {\n\n\t\t\t\t\t\t\t\tpublic boolean run(ObjectContainer container, ClientContext context) {\n\t\t\t\t\t\t\t\t\tjob.storeBlockStatuses(container);\n\t\t\t\t\t\t\t\t\t// Don't activate the job itself.\n\t\t\t\t\t\t\t\t\t// It MUST already be activated, because it is carrying the status blocks.\n\t\t\t\t\t\t\t\t\t// The status blocks have been set on the FEC thread but *not stored* because\n\t\t\t\t\t\t\t\t\t// they can't be stored on the FEC thread.\n\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Activating \"+job.callback+\" is active=\"+container.ext().isActive(job.callback));\n\t\t\t\t\t\t\t\t\tcontainer.activate(job.callback, 1);\n\t\t\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\t\t\tLogger.minor(this, \"Running callback for \"+job);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tif(job.isADecodingJob)\n\t\t\t\t\t\t\t\t\t\tjob.callback.onDecodedSegment(container, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tjob.callback.onEncodedSegment(container, clientContext, job, job.dataBlocks, job.checkBlocks, job.dataBlockStatus, job.checkBlockStatus);\n\t\t\t\t\t\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t\t\t\t\t\tLogger.error(this, \"Caught \"+t+\" in FECQueue callback\", t);\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t// Always delete the job, even if the callback throws.\n\t\t\t\t\t\t\t\t\t\tcontainer.delete(job);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(container.ext().isStored(job.callback))\n\t\t\t\t\t\t\t\t\t\tcontainer.deactivate(job.callback, 1);\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\t\treturn \"FECQueueJobCompletedCallback\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, prio, false);\n\t\t\t\t\t\t\tif(Logger.shouldLog(LogLevel.MINOR, this))\n\t\t\t\t\t\t\t\tLogger.minor(this, \"Scheduled callback for \"+job+\"...\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tLogger.error(this, \"The callback failed!\" + e, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Caught \"+t+\" in \"+this, t);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsynchronized (FECQueue.this) {\n\t\t\t\t\trunningFECThreads--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic int getPriority() {\n\t\t\treturn NativeThread.LOW_PRIORITY;\n\t\t}\n\n\t};\n\t}","commit_id":"bb6d7ef0e39e8dbf3c04bb72fd2f0db17df6110c","url":"https://github.com/freenet/fred"},{"original_method":"/** Set the data but only if there is no data already. \n\t * @return True if we set the data to the new bucket. */\n\tpublic synchronized boolean trySetData(Bucket data) {\n\t\tif(this.data == data) return true;\n\t\tif(this.data != null) return false;\n\t\tthis.data = data;\n\t\treturn true;\n\t}","id":94208,"modified_method":"/** Set the data but only if there is no data already. \n\t * @return True if we set the data to the new bucket. */\n\tpublic synchronized Bucket trySetData(Bucket data) {\n\t\tif(this.data != null) return this.data;\n\t\tthis.data = data;\n\t\treturn null;\n\t}","commit_id":"bb6d7ef0e39e8dbf3c04bb72fd2f0db17df6110c","url":"https://github.com/freenet/fred"},{"original_method":"private short onSuccessInner(Bucket data, int blockNo, ObjectContainer container, ClientContext context) {\n\t\tSplitFileFetcherCrossSegment crossSegment = null;\n\t\tshort res = 0;\n\t\tsynchronized(this) {\n\t\t\tboolean dontNotify;\n\t\t\tboolean allFailed = false;\n\t\t\tboolean decodeNow = false;\n\t\t\tboolean wasDataBlock = false;\n\t\t\tif(finished) {\n\t\t\t\t// Happens sometimes, don't complain about it...\n\t\t\t\t// What this means is simply that there were a bunch of requests\n\t\t\t\t// running, one of them completed, the whole segment went into\n\t\t\t\t// decode, and now the extra requests are surplus to requirements.\n\t\t\t\t// It's a slight overhead, but the alternative is worse.\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"onSuccess() when already finished for \"+this);\n\t\t\t\tdata.free();\n\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// We accept blocks after startedDecode. So the FEC code will drop the surplus blocks.\n\t\t\t// This is important for cross-segment encoding:\n\t\t\t// Cross-segment decodes a block. This triggers a decode here, and also an encode on the cross-segment.\n\t\t\t// If we ignore the block here, the cross-segment encode will fail because a block is missing.\n\t\t\tif(blockNo < dataKeys.length) {\n\t\t\t\twasDataBlock = true;\n\t\t\t\tif(dataKeys[blockNo] == null) {\n\t\t\t\t\tif(!startedDecode) {\n\t\t\t\t\t\t// This can happen.\n\t\t\t\t\t\t// We queue a persistent download, we queue a transient.\n\t\t\t\t\t\t// The transient goes through DatastoreChecker first,\n\t\t\t\t\t\t// and feeds the block to us. We don't finish, because\n\t\t\t\t\t\t// we need more blocks. Then the persistent goes through \n\t\t\t\t\t\t// the DatastoreChecker, and calls us again with the same\n\t\t\t\t\t\t// block.\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"Block already finished: \"+blockNo);\n\t\t\t\t\t}\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(dataBuckets[blockNo], 1);\n\t\t\t\tif(!dataBuckets[blockNo].trySetData(data)) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Already have data for data block \"+blockNo);\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tdataRetries[blockNo] = 0; // Prevent healing of successfully fetched block.\n\t\t\t\tif(persistent) {\n\t\t\t\t\tcontainer.activate(dataKeys[blockNo], 5);\n\t\t\t\t\tdataKeys[blockNo].removeFrom(container);\n\t\t\t\t}\n\t\t\t\tdataKeys[blockNo] = null;\n\t\t\t\tif(persistent) {\n\t\t\t\t\tdata.storeTo(container);\n\t\t\t\t\tcontainer.store(dataBuckets[blockNo]);\n\t\t\t\t\tcontainer.store(this); // We could return -1, so we need to store(this) here\n\t\t\t\t}\n\t\t\t\tif(crossCheckBlocks != 0)\n\t\t\t\t\tcrossSegment = crossSegmentsByBlock[blockNo];\n\t\t\t} else if(blockNo < checkKeys.length + dataKeys.length) {\n\t\t\t\tint checkNo = blockNo - dataKeys.length;\n\t\t\t\tif(checkKeys[checkNo] == null) {\n\t\t\t\t\tif(!startedDecode) {\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"Check block already finished: \"+checkNo);\n\t\t\t\t\t}\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tcheckRetries[checkNo] = 0; // Prevent healing of successfully fetched block.\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(checkBuckets[checkNo], 1);\n\t\t\t\tif(!checkBuckets[checkNo].trySetData(data)) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Already have data for check block \"+checkNo);\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(persistent) {\n\t\t\t\t\tcontainer.activate(checkKeys[checkNo], 5);\n\t\t\t\t\tcheckKeys[checkNo].removeFrom(container);\n\t\t\t\t}\n\t\t\t\tcheckKeys[checkNo] = null;\n\t\t\t\tif(persistent) {\n\t\t\t\t\tdata.storeTo(container);\n\t\t\t\t\tcontainer.store(checkBuckets[checkNo]);\n\t\t\t\t\tcontainer.store(this); // We could return -1, so we need to store(this) here\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tLogger.error(this, \"Unrecognized block number: \"+blockNo, new Exception(\"error\"));\n\t\t\tif(startedDecode) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\tboolean tooSmall = data.size() < CHKBlock.DATA_LENGTH;\n\t\t\t\t// Don't count the last data block, since we can't use it in FEC decoding.\n\t\t\t\tif(tooSmall && ((!ignoreLastDataBlock) || (blockNo != dataKeys.length - 1))) {\n\t\t\t\t\tfail(new FetchException(FetchException.INVALID_METADATA, \"Block too small in splitfile: block \"+blockNo+\" of \"+dataKeys.length+\" data keys, \"+checkKeys.length+\" check keys\"), container, context, true);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(!(ignoreLastDataBlock && blockNo == dataKeys.length - 1 && tooSmall))\n\t\t\t\t\tfetchedBlocks++;\n\t\t\t\telse\n\t\t\t\t\t// This block is not going to be fetched, and because of the insertion format. \n\t\t\t\t\t// Thus it is a fatal failure. We need to track it, because it is quite possible\n\t\t\t\t\t// to fetch the last block, not complete because it's the last block, and hang.\n\t\t\t\t\tfatallyFailedBlocks++;\n\t\t\t\t// However, if we manage to get EVERY data block (common on a small splitfile),\n\t\t\t\t// we don't need to FEC decode.\n\t\t\t\tif(wasDataBlock)\n\t\t\t\t\tfetchedDataBlocks++;\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Fetched \"+fetchedBlocks+\" blocks in onSuccess(\"+blockNo+\")\");\n\t\t\t\tboolean haveDataBlocks = fetchedDataBlocks == dataKeys.length;\n\t\t\t\tdecodeNow = (!startedDecode) && (fetchedBlocks >= minFetched || haveDataBlocks);\n\t\t\t\tif(decodeNow) {\n\t\t\t\t\tstartedDecode = true;\n\t\t\t\t\tfinishing = true;\n\t\t\t\t} else {\n\t\t\t\t\t// Avoid hanging when we have n-1 check blocks, we succeed on the last data block,\n\t\t\t\t\t// we don't have the other data blocks, and we have nothing else fetching.\n\t\t\t\t\tallFailed = failedBlocks + fatallyFailedBlocks > (dataKeys.length + checkKeys.length - minFetched);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdontNotify = !scheduled;\n\t\t\tif(dontNotify) res |= ON_SUCCESS_DONT_NOTIFY;\n\t\t\tif(allFailed) res |= ON_SUCCESS_ALL_FAILED;\n\t\t\tif(decodeNow) res |= ON_SUCCESS_DECODE_NOW;\n\t\t}\n\t\tif(persistent) container.store(this);\n\t\tif(crossSegment != null) {\n\t\t\tboolean active = true;\n\t\t\tif(persistent) {\n\t\t\t\tactive = container.ext().isActive(crossSegment);\n\t\t\t\tif(!active) container.activate(crossSegment, 1);\n\t\t\t}\n\t\t\tcrossSegment.onFetched(this, blockNo, container, context);\n\t\t\tif(!active) container.deactivate(crossSegment, 1);\n\t\t}\n\t\treturn res;\n\t}","id":94209,"modified_method":"private short onSuccessInner(Bucket data, int blockNo, ObjectContainer container, ClientContext context) {\n\t\tSplitFileFetcherCrossSegment crossSegment = null;\n\t\tshort res = 0;\n\t\tsynchronized(this) {\n\t\t\tboolean dontNotify;\n\t\t\tboolean allFailed = false;\n\t\t\tboolean decodeNow = false;\n\t\t\tboolean wasDataBlock = false;\n\t\t\tif(finished) {\n\t\t\t\t// Happens sometimes, don't complain about it...\n\t\t\t\t// What this means is simply that there were a bunch of requests\n\t\t\t\t// running, one of them completed, the whole segment went into\n\t\t\t\t// decode, and now the extra requests are surplus to requirements.\n\t\t\t\t// It's a slight overhead, but the alternative is worse.\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"onSuccess() when already finished for \"+this);\n\t\t\t\tdata.free();\n\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// We accept blocks after startedDecode. So the FEC code will drop the surplus blocks.\n\t\t\t// This is important for cross-segment encoding:\n\t\t\t// Cross-segment decodes a block. This triggers a decode here, and also an encode on the cross-segment.\n\t\t\t// If we ignore the block here, the cross-segment encode will fail because a block is missing.\n\t\t\tif(blockNo < dataKeys.length) {\n\t\t\t\twasDataBlock = true;\n\t\t\t\tif(dataKeys[blockNo] == null) {\n\t\t\t\t\tif(!startedDecode) {\n\t\t\t\t\t\t// This can happen.\n\t\t\t\t\t\t// We queue a persistent download, we queue a transient.\n\t\t\t\t\t\t// The transient goes through DatastoreChecker first,\n\t\t\t\t\t\t// and feeds the block to us. We don't finish, because\n\t\t\t\t\t\t// we need more blocks. Then the persistent goes through \n\t\t\t\t\t\t// the DatastoreChecker, and calls us again with the same\n\t\t\t\t\t\t// block.\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"Block already finished: \"+blockNo);\n\t\t\t\t\t}\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(dataBuckets[blockNo], 1);\n\t\t\t\tBucket existingBlock = dataBuckets[blockNo].trySetData(data);\n\t\t\t\tif(existingBlock != null) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Already have data for data block \"+blockNo);\n\t\t\t\t\tif(existingBlock != data) {\n\t\t\t\t\t\tdata.free();\n\t\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tdataRetries[blockNo] = 0; // Prevent healing of successfully fetched block.\n\t\t\t\tif(persistent) {\n\t\t\t\t\tcontainer.activate(dataKeys[blockNo], 5);\n\t\t\t\t\tdataKeys[blockNo].removeFrom(container);\n\t\t\t\t}\n\t\t\t\tdataKeys[blockNo] = null;\n\t\t\t\tif(persistent) {\n\t\t\t\t\tdata.storeTo(container);\n\t\t\t\t\tcontainer.store(dataBuckets[blockNo]);\n\t\t\t\t\tcontainer.store(this); // We could return -1, so we need to store(this) here\n\t\t\t\t}\n\t\t\t\tif(crossCheckBlocks != 0)\n\t\t\t\t\tcrossSegment = crossSegmentsByBlock[blockNo];\n\t\t\t} else if(blockNo < checkKeys.length + dataKeys.length) {\n\t\t\t\tint checkNo = blockNo - dataKeys.length;\n\t\t\t\tif(checkKeys[checkNo] == null) {\n\t\t\t\t\tif(!startedDecode) {\n\t\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\t\tLogger.minor(this, \"Check block already finished: \"+checkNo);\n\t\t\t\t\t}\n\t\t\t\t\tdata.free();\n\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tcheckRetries[checkNo] = 0; // Prevent healing of successfully fetched block.\n\t\t\t\tif(persistent)\n\t\t\t\t\tcontainer.activate(checkBuckets[checkNo], 1);\n\t\t\t\tBucket existingBlock = checkBuckets[checkNo].trySetData(data);\n\t\t\t\tif(existingBlock != null) {\n\t\t\t\t\tif(logMINOR)\n\t\t\t\t\t\tLogger.minor(this, \"Already have data for check block \"+checkNo);\n\t\t\t\t\tif(existingBlock != data) {\n\t\t\t\t\t\tdata.free();\n\t\t\t\t\t\tif(persistent) data.removeFrom(container);\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(persistent) {\n\t\t\t\t\tcontainer.activate(checkKeys[checkNo], 5);\n\t\t\t\t\tcheckKeys[checkNo].removeFrom(container);\n\t\t\t\t}\n\t\t\t\tcheckKeys[checkNo] = null;\n\t\t\t\tif(persistent) {\n\t\t\t\t\tdata.storeTo(container);\n\t\t\t\t\tcontainer.store(checkBuckets[checkNo]);\n\t\t\t\t\tcontainer.store(this); // We could return -1, so we need to store(this) here\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tLogger.error(this, \"Unrecognized block number: \"+blockNo, new Exception(\"error\"));\n\t\t\tif(startedDecode) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\tboolean tooSmall = data.size() < CHKBlock.DATA_LENGTH;\n\t\t\t\t// Don't count the last data block, since we can't use it in FEC decoding.\n\t\t\t\tif(tooSmall && ((!ignoreLastDataBlock) || (blockNo != dataKeys.length - 1))) {\n\t\t\t\t\tfail(new FetchException(FetchException.INVALID_METADATA, \"Block too small in splitfile: block \"+blockNo+\" of \"+dataKeys.length+\" data keys, \"+checkKeys.length+\" check keys\"), container, context, true);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif(!(ignoreLastDataBlock && blockNo == dataKeys.length - 1 && tooSmall))\n\t\t\t\t\tfetchedBlocks++;\n\t\t\t\telse\n\t\t\t\t\t// This block is not going to be fetched, and because of the insertion format. \n\t\t\t\t\t// Thus it is a fatal failure. We need to track it, because it is quite possible\n\t\t\t\t\t// to fetch the last block, not complete because it's the last block, and hang.\n\t\t\t\t\tfatallyFailedBlocks++;\n\t\t\t\t// However, if we manage to get EVERY data block (common on a small splitfile),\n\t\t\t\t// we don't need to FEC decode.\n\t\t\t\tif(wasDataBlock)\n\t\t\t\t\tfetchedDataBlocks++;\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Fetched \"+fetchedBlocks+\" blocks in onSuccess(\"+blockNo+\")\");\n\t\t\t\tboolean haveDataBlocks = fetchedDataBlocks == dataKeys.length;\n\t\t\t\tdecodeNow = (!startedDecode) && (fetchedBlocks >= minFetched || haveDataBlocks);\n\t\t\t\tif(decodeNow) {\n\t\t\t\t\tstartedDecode = true;\n\t\t\t\t\tfinishing = true;\n\t\t\t\t} else {\n\t\t\t\t\t// Avoid hanging when we have n-1 check blocks, we succeed on the last data block,\n\t\t\t\t\t// we don't have the other data blocks, and we have nothing else fetching.\n\t\t\t\t\tallFailed = failedBlocks + fatallyFailedBlocks > (dataKeys.length + checkKeys.length - minFetched);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdontNotify = !scheduled;\n\t\t\tif(dontNotify) res |= ON_SUCCESS_DONT_NOTIFY;\n\t\t\tif(allFailed) res |= ON_SUCCESS_ALL_FAILED;\n\t\t\tif(decodeNow) res |= ON_SUCCESS_DECODE_NOW;\n\t\t}\n\t\tif(persistent) container.store(this);\n\t\tif(crossSegment != null) {\n\t\t\tboolean active = true;\n\t\t\tif(persistent) {\n\t\t\t\tactive = container.ext().isActive(crossSegment);\n\t\t\t\tif(!active) container.activate(crossSegment, 1);\n\t\t\t}\n\t\t\tcrossSegment.onFetched(this, blockNo, container, context);\n\t\t\tif(!active) container.deactivate(crossSegment, 1);\n\t\t}\n\t\treturn res;\n\t}","commit_id":"bb6d7ef0e39e8dbf3c04bb72fd2f0db17df6110c","url":"https://github.com/freenet/fred"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(),  new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n    }","id":94210,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(),  new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to472()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to472()});\n    }","commit_id":"847fde39fde03f10ef0ccacb10412fd04d3a03fd","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(),  new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n    }","id":94211,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n    }","commit_id":"18fb10439bc11eeed308213c87b786388f090fb0","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480()});\n    }","id":94212,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(),new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(),new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n    }","commit_id":"95331aad30d4da2d282e401ac359e3ab6750a00b","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to460()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to460()});\n    }","id":94213,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n    }","commit_id":"3ff92e883ef982eadb86840dff5d6792b54586a2","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public String authenticate(String command, Map<String, Object[]> params, HttpSession session, String remoteAddress, String responseType, StringBuilder auditTrailSb, final HttpServletRequest req, final HttpServletResponse resp) throws ServerApiException {\n        auditTrailSb.append(\"=== SAML List IdPs ===\");\n        ListResponse<IdpResponse> response = new ListResponse<IdpResponse>();\n        List<IdpResponse> idpResponseList = new ArrayList<IdpResponse>();\n        for (SAMLProviderMetadata metadata: _samlAuthManager.getAllIdPMetadata()) {\n            if (metadata == null) {\n                continue;\n            }\n            IdpResponse idpResponse = new IdpResponse();\n            idpResponse.setId(metadata.getEntityId());\n            if (metadata.getOrganizationName() == null || metadata.getOrganizationName().isEmpty()) {\n                idpResponse.setOrgName(metadata.getEntityId());\n            } else {\n                idpResponse.setOrgName(metadata.getOrganizationName());\n            }\n            idpResponse.setOrgUrl(metadata.getOrganizationUrl());\n            idpResponse.setObjectName(\"idp\");\n            idpResponseList.add(idpResponse);\n        }\n        response.setResponses(idpResponseList, idpResponseList.size());\n        response.setResponseName(getCommandName());\n        return ApiResponseSerializer.toSerializedString(response, responseType);\n    }","id":94214,"modified_method":"@Override\n    public String authenticate(String command, Map<String, Object[]> params, HttpSession session, InetAddress remoteAddress, String responseType, StringBuilder auditTrailSb, HttpServletRequest req, HttpServletResponse resp) throws ServerApiException {\n        ListResponse<IdpResponse> response = new ListResponse<IdpResponse>();\n        List<IdpResponse> idpResponseList = new ArrayList<IdpResponse>();\n        for (SAMLProviderMetadata metadata: _samlAuthManager.getAllIdPMetadata()) {\n            if (metadata == null) {\n                continue;\n            }\n            IdpResponse idpResponse = new IdpResponse();\n            idpResponse.setId(metadata.getEntityId());\n            if (metadata.getOrganizationName() == null || metadata.getOrganizationName().isEmpty()) {\n                idpResponse.setOrgName(metadata.getEntityId());\n            } else {\n                idpResponse.setOrgName(metadata.getOrganizationName());\n            }\n            idpResponse.setOrgUrl(metadata.getOrganizationUrl());\n            idpResponse.setObjectName(\"idp\");\n            idpResponseList.add(idpResponse);\n        }\n        response.setResponses(idpResponseList, idpResponseList.size());\n        response.setResponseName(getCommandName());\n        return ApiResponseSerializer.toSerializedString(response, responseType);\n    }","commit_id":"3ff92e883ef982eadb86840dff5d6792b54586a2","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to462()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n    }","id":94215,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade462to463()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462(), new Upgrade462to463()});\n    }","commit_id":"6646c7df6114f70120fe4764a2158bda661f8852","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n    }","id":94216,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to462()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to462()});\n    }","commit_id":"a7b098ff16edbb525c042af575eda0dc321abe54","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.1\", new DbUpgrade[] {new Upgrade481to490()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n    }","id":94217,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.8.1\", new DbUpgrade[] {new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"4.9.0\", new DbUpgrade[] {new Upgrade490to4100()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to4100()});\n    }","commit_id":"546a3f8884398391760b76ddcf02e6bc1f30d642","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n                new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] { new Upgrade441to450() });\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n    }","id":94218,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n                new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n                new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n                new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n        , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n        new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(),\n                new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(),\n                new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n                new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n                new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(),\n                new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to460()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n                new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(),\n                new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(), new Upgrade441to450(),\n                new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n                new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n                new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n                new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430(),\n                new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to450(), new Upgrade450to460()});\n    }","commit_id":"cf5b56d617f8f0f0891d80ddeb84d4b59e2cddb4","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470()});\n    }","id":94219,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(),  new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471()});\n    }","commit_id":"04c759390b88422ccaea97f071d7cee789406a88","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] { new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n                new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] { new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] { new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] { new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n                new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] { new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] { new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] { new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n                new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] { new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] { new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] { new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] { new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n        , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] { new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] { new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.11\", new DbUpgrade[] { new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] { new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] { new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n        \n        \n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] { new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] { new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] { new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420() });\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] { new Upgrade410to420() });\n        \n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] { new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420() });\n        \n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] { new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420() });\n        \n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] { new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420() });\n        \n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] { new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420() });\n        \n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] { new Upgrade307to410(), new Upgrade410to420() });\n        \n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(),  new Upgrade306to307(),new Upgrade307to410(), new Upgrade410to420()});\n        \n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(),  new Upgrade306to307(),new Upgrade307to410(), new Upgrade410to420()});\n    }","id":94220,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] { new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n                new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] { new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] { new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] { new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n                new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] { new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] { new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] { new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n                new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] { new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] { new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] { new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] { new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n        , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] { new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] { new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.11\", new DbUpgrade[] { new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] { new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] { new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        \n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] { new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] { new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] { new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] { new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] { new Upgrade410to420(), new Upgrade420to430() });\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] { new Upgrade420to430() });\n        \n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] { new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] { new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] { new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] { new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] { new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430() });\n        \n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(),  new Upgrade306to307(),new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430()});\n        \n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] { new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(),  new Upgrade306to307(),new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430()});\n    }","commit_id":"0529da136ffe1c1316fca4313dd2106de6f57d6c","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.1\", new DbUpgrade[] {new Upgrade481to490()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n    }","id":94221,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.8.1\", new DbUpgrade[] {new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"4.9.0\", new DbUpgrade[] {new Upgrade490to491()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490(), new Upgrade490to491()});\n    }","commit_id":"b87eda230a84cc90c0459e74768d3d3d30897c14","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(),new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(),new Upgrade480to481()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481()});\n    }","id":94222,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.6.2\", new DbUpgrade[] {new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.0\", new DbUpgrade[] {new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.1\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.7.2\", new DbUpgrade[] {new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.0\", new DbUpgrade[] {new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"4.8.1\", new DbUpgrade[] {new Upgrade481to490()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461(), new Upgrade461to470(), new Upgrade470to471(), new Upgrade471to480(), new Upgrade480to481(), new Upgrade481to490()});\n    }","commit_id":"e1ecfad32213147e991c23ce3e2a31ad5d9bb5cd","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n    }","id":94223,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to470()});\n\n        _upgradeMap.put(\"4.6.1\", new DbUpgrade[] {new Upgrade461to470()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to470()});\n    }","commit_id":"6536992671f37967f1abb764feb7e3a4d9b959fb","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n                new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n                new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n                new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n                , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.11\", new DbUpgrade[] {new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to430()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n                new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to430()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to430()});\n    }","id":94224,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n                new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n                new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n                new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n                new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n                new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n                new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n                new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n                new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n                new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n                , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n                new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n                new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.11\", new DbUpgrade[] {new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n                new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n                new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n                new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n                new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n                new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n                new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n                new Upgrade420to421(), new Upgrade421to430()});\n    }","commit_id":"ac02987db259dabd8685981e35d87a664a40fa4e","url":"https://github.com/apache/cloudstack"},{"original_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460()});\n    }","id":94225,"modified_method":"public DatabaseUpgradeChecker() {\n        _dao = new VersionDaoImpl();\n\n        _upgradeMap.put(\"2.1.7\", new DbUpgrade[] {new Upgrade217to218(), new Upgrade218to22(), new Upgrade221to222(),\n            new UpgradeSnapshot217to224(), new Upgrade222to224(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.1.8\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.1.9\", new DbUpgrade[] {new Upgrade218to22(), new Upgrade221to222(), new UpgradeSnapshot217to224(),\n            new Upgrade222to224(), new Upgrade218to224DomainVlans(), new Upgrade224to225(), new Upgrade225to226(),\n            new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.1\", new DbUpgrade[] {new Upgrade221to222(), new UpgradeSnapshot223to224(), new Upgrade222to224(),\n            new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.2\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.3\", new DbUpgrade[] {new Upgrade222to224(), new UpgradeSnapshot223to224(), new Upgrade224to225(),\n            new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.4\", new DbUpgrade[] {new Upgrade224to225(), new Upgrade225to226(), new Upgrade227to228(),\n            new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.5\", new DbUpgrade[] {new Upgrade225to226(), new Upgrade227to228(), new Upgrade228to229(),\n            new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.6\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(),\n            new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.7\", new DbUpgrade[] {new Upgrade227to228(), new Upgrade228to229(), new Upgrade229to2210(),\n            new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(),\n            new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.8\", new DbUpgrade[] {new Upgrade228to229(), new Upgrade229to2210(), new Upgrade2210to2211(),\n            new Upgrade2211to2212(), new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30()\n            , new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.9\", new DbUpgrade[] {new Upgrade229to2210(), new Upgrade2210to2211(), new Upgrade2211to2212(),\n            new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.10\", new DbUpgrade[] {new Upgrade2210to2211(), new Upgrade2211to2212(), new Upgrade2212to2213(),\n            new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(),\n            new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.12\", new DbUpgrade[] {new Upgrade2212to2213(), new Upgrade2213to2214(), new Upgrade2214to30(),\n            new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.13\", new DbUpgrade[] {new Upgrade2213to2214(), new Upgrade2214to30(), new Upgrade30to301(),\n            new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.14\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.0\", new DbUpgrade[] {new Upgrade30to301(), new Upgrade301to302(), new Upgrade302to40(),\n            new Upgrade40to41(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.1\", new DbUpgrade[] {new Upgrade301to302(), new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.2\", new DbUpgrade[] {new Upgrade302to40(), new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.0\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.1\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.0.2\", new DbUpgrade[] {new Upgrade40to41(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.1.0\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.1.1\", new DbUpgrade[] {new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.2.0\", new DbUpgrade[] {new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.2.1\", new DbUpgrade[] {new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.0\", new DbUpgrade[] {new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.1\", new DbUpgrade[] {new Upgrade431to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.3.2\", new DbUpgrade[] {new Upgrade432to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.0\", new DbUpgrade[] {new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.1\", new DbUpgrade[] {new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461() });\n\n        _upgradeMap.put(\"4.4.2\", new DbUpgrade[] {new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.3\", new DbUpgrade[] {new Upgrade443to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.4.4\", new DbUpgrade[] {new Upgrade444to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.0\", new DbUpgrade[] {new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.1\", new DbUpgrade[] {new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.2\", new DbUpgrade[] {new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.5.3\", new DbUpgrade[] {new Upgrade453to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"4.6.0\", new DbUpgrade[] {new Upgrade460to461()});\n\n        //CP Upgrades\n        _upgradeMap.put(\"3.0.3\", new DbUpgrade[] {new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.4\", new DbUpgrade[] {new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.5\", new DbUpgrade[] {new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(),\n            new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.6\", new DbUpgrade[] {new Upgrade306to307(), new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(),\n            new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"3.0.7\", new DbUpgrade[] {new Upgrade307to410(), new Upgrade410to420(), new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.15\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n\n        _upgradeMap.put(\"2.2.16\", new DbUpgrade[] {new Upgrade2214to30(), new Upgrade30to301(), new Upgrade301to302(),\n            new Upgrade302to303(), new Upgrade303to304(), new Upgrade304to305(), new Upgrade305to306(), new Upgrade306to307(), new Upgrade307to410(),\n            new Upgrade410to420(),\n            new Upgrade420to421(), new Upgrade421to430(), new Upgrade430to440(), new Upgrade440to441(), new Upgrade441to442(), new Upgrade442to450(), new Upgrade450to451(), new Upgrade451to452(), new Upgrade452to460(), new Upgrade460to461()});\n    }","commit_id":"e0ac9df529cb3238142043f9012b3078a2009b7b","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Returns the tree entry with the given path.<p>\n     * \n     * @param entryPath the path to look for\n     * \n     * @return the tree entry with the given path, or <code>null<\/code> if not found\n     */\n    private CmsClientSitemapEntry getEntry(String entryPath) {\n\n        if (!entryPath.startsWith(m_sitemap.getSitePath())) {\n            return null;\n        }\n        String path = entryPath.substring(m_sitemap.getSitePath().length());\n        String[] names = CmsStringUtil.splitAsArray(path, \"/\");\n        CmsClientSitemapEntry result = m_sitemap;\n        for (String name : names) {\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(name)) {\n                // in case of leading slash\n                continue;\n            }\n            boolean found = false;\n            for (CmsClientSitemapEntry child : result.getChildren()) {\n                if (child.getName().equals(name)) {\n                    found = true;\n                    result = child;\n                    break;\n                }\n            }\n            if (!found) {\n                // not found\n                break;\n            }\n        }\n        if (result == m_sitemap) {\n            result = null;\n        }\n        return result;\n    }","id":94226,"modified_method":"/**\n     * Returns the tree entry with the given path.<p>\n     * \n     * @param entryPath the path to look for\n     * \n     * @return the tree entry with the given path, or <code>null<\/code> if not found\n     */\n    protected CmsClientSitemapEntry getEntry(String entryPath) {\n\n        if (!entryPath.startsWith(m_sitemap.getSitePath())) {\n            return null;\n        }\n        String path = entryPath.substring(m_sitemap.getSitePath().length());\n        String[] names = CmsStringUtil.splitAsArray(path, \"/\");\n        CmsClientSitemapEntry result = m_sitemap;\n        for (String name : names) {\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(name)) {\n                // in case of leading slash\n                continue;\n            }\n            boolean found = false;\n            for (CmsClientSitemapEntry child : result.getChildren()) {\n                if (child.getName().equals(name)) {\n                    found = true;\n                    result = child;\n                    break;\n                }\n            }\n            if (!found) {\n                // not found\n                break;\n            }\n        }\n        if (result == m_sitemap) {\n            result = null;\n        }\n        return result;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Will be triggered once the controller is initialized.<p>\n     * \n     * @param roots the sitemap root entries\n     */\n    public void onInit(List<CmsClientSitemapEntry> roots) {\n\n        List<CmsSitemapTreeItem> items = new ArrayList<CmsSitemapTreeItem>();\n        for (CmsClientSitemapEntry root : roots) {\n            CmsSitemapTreeItem rootItem = m_factory.create(root);\n            rootItem.clearChildren();\n            for (CmsClientSitemapEntry entry : root.getChildren()) {\n                rootItem.addChild(m_factory.create(entry));\n            }\n            rootItem.onFinishLoading();\n            rootItem.setOpen(true);\n            items.add(rootItem);\n        }\n        for (CmsSitemapTreeItem item : items) {\n            m_tree.addItem(item);\n        }\n    }","id":94227,"modified_method":"/**\n     * Will be triggered once the controller is initialized.<p>\n     * \n     * @param roots the sitemap root entries\n     */\n    public void onInit(List<CmsClientSitemapEntry> roots) {\n\n        List<CmsSitemapTreeItem> items = new ArrayList<CmsSitemapTreeItem>();\n        for (CmsClientSitemapEntry root : roots) {\n            CmsSitemapTreeItem rootItem = m_factory.create(root);\n            rootItem.clearChildren();\n            for (CmsClientSitemapEntry child : root.getChildren()) {\n                CmsSitemapTreeItem childItem = m_factory.create(child);\n                rootItem.addChild(childItem);\n                childItem.clearChildren();\n                for (CmsClientSitemapEntry grandchild : child.getChildren()) {\n                    childItem.addChild(m_factory.create(grandchild));\n                }\n                childItem.onFinishLoading();\n            }\n            rootItem.onFinishLoading();\n            rootItem.setOpen(true);\n            items.add(rootItem);\n        }\n        for (CmsSitemapTreeItem item : items) {\n            m_tree.addItem(item);\n        }\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Constructor.<p>\n     * \n     * @param handler the handler\n     */\n    public CmsSitemapHoverbar(final CmsSitemapHoverbarHandler handler) {\n\n        ClickHandler clickHandler = new ClickHandler() {\n\n            /**\n             * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n             */\n            public void onClick(ClickEvent event) {\n\n                if (event.getSource().equals(getMoveButton())) {\n                    handler.onMove();\n                } else if (event.getSource().equals(getNewButton())) {\n                    handler.onNew();\n                } else if (event.getSource().equals(getDeleteButton())) {\n                    cancelHover(getDeleteButton().getElement());\n                    CmsDomUtil.ensureMouseOut(getDeleteButton().getElement());\n                    handler.onDelete();\n                } else if (event.getSource().equals(getEditButton())) {\n                    handler.onEdit();\n                } else if (event.getSource().equals(getSubsitemapButton())) {\n                    handler.onSubsitemap();\n                } else if (event.getSource().equals(getGotoButton())) {\n                    handler.onGoto();\n                }\n            }\n\n            /**\n             * Cancels the hover effect from the given element.<p>\n             * \n             * @param element the element to cancel the hover effect for\n             */\n            private void cancelHover(Element element) {\n\n                element = CmsDomUtil.getAncestor(element, I_CmsLayoutBundle.INSTANCE.stateCss().cmsHovering());\n                if (element != null) {\n                    element.removeClassName(I_CmsLayoutBundle.INSTANCE.stateCss().cmsHovering());\n                }\n            }\n        };\n\n        m_moveButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarMove(), false);\n        m_moveButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_MOVE_0));\n        m_moveButton.addClickHandler(clickHandler);\n\n        m_newButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarNew(), false);\n        m_newButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_NEW_0));\n        m_newButton.addClickHandler(clickHandler);\n\n        m_editButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarEdit(), false);\n        m_editButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_EDIT_0));\n        m_editButton.addClickHandler(clickHandler);\n\n        m_deleteButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarDelete(), false);\n        m_deleteButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_DELETE_0));\n        m_deleteButton.addClickHandler(clickHandler);\n\n        m_subsitemapButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarSubsitemap(), false);\n        m_subsitemapButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_SUBSITEMAP_0));\n        m_subsitemapButton.addClickHandler(clickHandler);\n\n        // TODO: this should be a link so it can be opened in a new window or tab by the user\n        m_gotoButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarGoto(), false);\n        m_gotoButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_GOTO_0));\n        m_gotoButton.addClickHandler(clickHandler);\n    }","id":94228,"modified_method":"/**\n     * Constructor.<p>\n     * \n     * @param handler the handler\n     */\n    public CmsSitemapHoverbar(final CmsSitemapHoverbarHandler handler) {\n\n        setStyleName(I_CmsLayoutBundle.INSTANCE.listItemWidgetCss().buttonPanel());\n        ClickHandler clickHandler = new ClickHandler() {\n\n            /**\n             * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)\n             */\n            public void onClick(ClickEvent event) {\n\n                String sitePath = getSitePath();\n                deattach();\n                if (event.getSource().equals(getMoveButton())) {\n                    handler.onMove(sitePath);\n                } else if (event.getSource().equals(getNewButton())) {\n                    handler.onNew(sitePath);\n                } else if (event.getSource().equals(getDeleteButton())) {\n                    CmsDomUtil.ensureMouseOut(getDeleteButton().getElement());\n                    handler.onDelete(sitePath);\n                } else if (event.getSource().equals(getEditButton())) {\n                    handler.onEdit(sitePath);\n                } else if (event.getSource().equals(getSubsitemapButton())) {\n                    handler.onSubsitemap(sitePath);\n                } else if (event.getSource().equals(getGotoButton())) {\n                    handler.onGoto(sitePath);\n                }\n            }\n\n            /**\n             * Returns the site path of the hovered item.<p>\n             * \n             * @return the site path of the hovered item\n             */\n            private String getSitePath() {\n\n                Element anscestor = CmsDomUtil.getAncestor(\n                    getElement(),\n                    I_CmsLayoutBundle.INSTANCE.listItemWidgetCss().itemContent());\n                return anscestor.getAttribute(CmsSitemapTreeItem.ATTR_SITEPATH);\n            }\n        };\n\n        // TODO: this should be a link so it can be opened in a new window or tab by the user\n        m_gotoButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarGoto(), false);\n        m_gotoButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_GOTO_0));\n        m_gotoButton.addClickHandler(clickHandler);\n        add(m_gotoButton);\n\n        m_subsitemapButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarSubsitemap(), false);\n        m_subsitemapButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_SUBSITEMAP_0));\n        m_subsitemapButton.addClickHandler(clickHandler);\n        add(m_subsitemapButton);\n\n        m_deleteButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarDelete(), false);\n        m_deleteButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_DELETE_0));\n        m_deleteButton.addClickHandler(clickHandler);\n        add(m_deleteButton);\n\n        m_editButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarEdit(), false);\n        m_editButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_EDIT_0));\n        m_editButton.addClickHandler(clickHandler);\n        add(m_editButton);\n\n        m_newButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarNew(), false);\n        m_newButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_NEW_0));\n        m_newButton.addClickHandler(clickHandler);\n        add(m_newButton);\n\n        m_moveButton = new CmsImageButton(I_CmsImageBundle.INSTANCE.buttonCss().hoverbarMove(), false);\n        m_moveButton.setTitle(Messages.get().key(Messages.GUI_HOVERBAR_MOVE_0));\n        m_moveButton.addClickHandler(clickHandler);\n        add(m_moveButton);\n\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Triggered when the user click on the delete hover button.<p>\n     */\n    public void onDelete() {\n\n        // TODO: check if the current entry has children and show the dialog only if so\n        CmsConfirmDialog dialog = new CmsConfirmDialog(\n            Messages.get().key(Messages.GUI_DIALOG_DELETE_TITLE_0),\n            Messages.get().key(Messages.GUI_DIALOG_DELETE_TEXT_0));\n        dialog.setHandler(new I_CmsConfirmDialogHandler() {\n\n            /**\n             * @see org.opencms.gwt.client.ui.I_CmsCloseDialogHandler#onClose()\n             */\n            public void onClose() {\n\n                // do nothing\n            }\n\n            /**\n             * @see org.opencms.gwt.client.ui.I_CmsConfirmDialogHandler#onOk()\n             */\n            public void onOk() {\n\n                m_controller.delete(getEntry());\n            }\n        });\n        dialog.center();\n    }","id":94229,"modified_method":"/**\n     * Triggered when the user click on the delete hover button.<p>\n     * \n     * @param sitePath the current sitemap entry's site path\n     */\n    public void onDelete(final String sitePath) {\n\n        // TODO: check if the current entry has children and show the dialog only if so\n        CmsConfirmDialog dialog = new CmsConfirmDialog(\n            Messages.get().key(Messages.GUI_DIALOG_DELETE_TITLE_0),\n            Messages.get().key(Messages.GUI_DIALOG_DELETE_TEXT_0));\n        dialog.setHandler(new I_CmsConfirmDialogHandler() {\n\n            /**\n             * @see org.opencms.gwt.client.ui.I_CmsCloseDialogHandler#onClose()\n             */\n            public void onClose() {\n\n                // do nothing\n            }\n\n            /**\n             * @see org.opencms.gwt.client.ui.I_CmsConfirmDialogHandler#onOk()\n             */\n            public void onOk() {\n\n                m_controller.delete(sitePath);\n            }\n        });\n        dialog.center();\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Triggered when the user click on the go-to hover button.<p>\n     */\n    public void onGoto() {\n\n        Window.Location.replace(CmsCoreProvider.get().link(m_entry.getSitePath()));\n    }","id":94230,"modified_method":"/**\n     * Triggered when the user click on the go-to hover button.<p>\n     * \n     * @param sitePath the current sitemap entry's site path\n     */\n    public void onGoto(final String sitePath) {\n\n        Window.Location.replace(CmsCoreProvider.get().link(sitePath));\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Constructor.<p>\n     * \n     * @param entry the sitemap entry\n     * @param controller the controller\n     */\n    public CmsSitemapHoverbarHandler(CmsClientSitemapEntry entry, CmsSitemapController controller) {\n\n        m_entry = entry;\n        m_controller = controller;\n    }","id":94231,"modified_method":"/**\n     * Constructor.<p>\n     * \n     * @param controller the controller\n     */\n    public CmsSitemapHoverbarHandler(CmsSitemapController controller) {\n\n        m_controller = controller;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Updates the sitemap entry.<p>\n     *\n     * @param entry the sitemap entry to update\n     */\n    public void updateEntry(CmsClientSitemapEntry entry) {\n\n        m_entry.setName(entry.getName());\n        m_entry.setSitePath(entry.getSitePath());\n        m_entry.setTitle(entry.getTitle());\n        m_entry.setVfsPath(entry.getVfsPath());\n        m_entry.setProperties(entry.getProperties());\n        m_entry.setPosition(entry.getPosition());\n    }","id":94232,"modified_method":"/**\n     * Triggered when the user click on the sub-sitemap hover button.<p>\n     * \n     * @param sitePath the current sitemap entry's site path\n     */\n    public void onSubsitemap(String sitePath) {\n\n        // TODO: subsitemap\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Triggered when the user click on the edit hover button.<p>\n     */\n    public void onEdit() {\n\n        executeWhenReady(new Command() {\n\n            /**\n             * @see com.google.gwt.user.client.Command#execute()\n             */\n            public void execute() {\n\n                // TODO: show edit dialog\n            }\n        });\n    }","id":94233,"modified_method":"/**\n     * Triggered when the user click on the edit hover button.<p>\n     * \n     * @param sitePath the current sitemap entry's site path\n     */\n    public void onEdit(String sitePath) {\n\n        executeWhenReady(new Command() {\n\n            /**\n             * @see com.google.gwt.user.client.Command#execute()\n             */\n            public void execute() {\n\n                // TODO: show edit dialog\n            }\n        });\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Triggered when the user click on the move hover button.<p>\n     */\n    public void onMove() {\n\n        // TODO: move\n    }","id":94234,"modified_method":"/**\n     * Triggered when the user click on the move hover button.<p>\n     * \n     * @param sitePath the current sitemap entry's site path\n     */\n    public void onMove(String sitePath) {\n\n        // TODO: move\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getEntry(String)\n     */\n    public CmsClientSitemapEntry getEntry(String root) throws CmsRpcException {\n\n        CmsClientSitemapEntry result = null;\n        try {\n            result = toClientEntry(OpenCms.getSitemapManager().getEntryForUri(getCmsObject(), root), -1);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","id":94235,"modified_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getEntry(String)\n     */\n    public CmsClientSitemapEntry getEntry(String root) throws CmsRpcException {\n\n        CmsClientSitemapEntry result = null;\n        try {\n            result = toClientEntry(OpenCms.getSitemapManager().getEntryForUri(getCmsObject(), root));\n        } catch (Throwable e) {\n            error(e);\n        }\n        return result;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Converts a site entry bean into a JSON object.<p>\n     * \n     * @param entry the entry to convert\n     * @param position the relative position between its siblings\n     * \n     * @return the JSON representation, can be <code>null<\/code> in case of not enough permissions\n     * \n     * @throws CmsException should never happen \n     */\n    private CmsClientSitemapEntry toClientEntry(CmsSitemapEntry entry, int position) throws CmsException {\n\n        CmsClientSitemapEntry clientEntry = new CmsClientSitemapEntry();\n        clientEntry.setId(entry.getId());\n        clientEntry.setName(entry.getName());\n        clientEntry.setTitle(entry.getTitle());\n        String vfsPath = \"---\";\n        if (getCmsObject().existsResource(entry.getResourceId())) {\n            vfsPath = getCmsObject().getSitePath(getCmsObject().readResource(entry.getResourceId()));\n        }\n        clientEntry.setVfsPath(vfsPath);\n        clientEntry.setProperties(new HashMap<String, String>(entry.getProperties()));\n        clientEntry.setSitePath(entry.getSitePath(getCmsObject()));\n        clientEntry.setPosition(position);\n        return clientEntry;\n    }","id":94236,"modified_method":"/**\n     * Converts a site entry bean into a JSON object.<p>\n     * \n     * @param entry the entry to convert\n     * \n     * @return the JSON representation, can be <code>null<\/code> in case of not enough permissions\n     * \n     * @throws CmsException should never happen \n     */\n    private CmsClientSitemapEntry toClientEntry(CmsSitemapEntry entry) throws CmsException {\n\n        CmsClientSitemapEntry clientEntry = new CmsClientSitemapEntry();\n        clientEntry.setId(entry.getId());\n        clientEntry.setName(entry.getName());\n        clientEntry.setTitle(entry.getTitle());\n        String vfsPath = \"---\";\n        if (getCmsObject().existsResource(entry.getResourceId())) {\n            vfsPath = getCmsObject().getSitePath(getCmsObject().readResource(entry.getResourceId()));\n        }\n        clientEntry.setVfsPath(vfsPath);\n        clientEntry.setProperties(new HashMap<String, String>(entry.getProperties()));\n        clientEntry.setSitePath(entry.getSitePath(getCmsObject()));\n        clientEntry.setPosition(entry.getPosition());\n        return clientEntry;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getRoots(java.lang.String)\n     */\n    public List<CmsClientSitemapEntry> getRoots(String sitemapUri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        List<CmsClientSitemapEntry> roots = null;\n        try {\n            // TODO: what's about historical requests?\n            CmsResource sitemap = cms.readResource(sitemapUri);\n            CmsXmlSitemap xml = CmsXmlSitemapFactory.unmarshal(cms, sitemap);\n            String sitePath = cms.getRequestContext().removeSiteRoot(\n                xml.getSitemap(cms, Locale.ENGLISH).getEntryPoint());\n            boolean isSubsitemap = false;\n            if (isSubsitemap) {\n                roots = getChildren(sitePath);\n            } else {\n                roots = new ArrayList<CmsClientSitemapEntry>();\n                CmsClientSitemapEntry entry = getEntry(sitePath);\n                String name = CmsResource.getName(sitePath);\n                if (name.endsWith(\"/\")) {\n                    name = name.substring(0, name.length() - 1);\n                }\n                entry.setName(name);\n                roots.add(entry);\n            }\n            for (CmsClientSitemapEntry root : roots) {\n                root.setChildren(getChildren(root.getSitePath()));\n            }\n        } catch (Throwable e) {\n            error(e);\n        }\n        return roots;\n    }","id":94237,"modified_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getRoots(java.lang.String)\n     */\n    public List<CmsClientSitemapEntry> getRoots(String sitemapUri) throws CmsRpcException {\n\n        CmsObject cms = getCmsObject();\n        List<CmsClientSitemapEntry> roots = null;\n        try {\n            // TODO: what's about historical requests?\n            CmsResource sitemap = cms.readResource(sitemapUri);\n            CmsXmlSitemap xml = CmsXmlSitemapFactory.unmarshal(cms, sitemap);\n            String sitePath = cms.getRequestContext().removeSiteRoot(\n                xml.getSitemap(cms, Locale.ENGLISH).getEntryPoint());\n            boolean isSubsitemap = false;\n            if (isSubsitemap) {\n                roots = getChildren(sitePath);\n            } else {\n                roots = new ArrayList<CmsClientSitemapEntry>();\n                CmsClientSitemapEntry entry = getEntry(sitePath);\n                String name = CmsResource.getName(sitePath);\n                if (name.endsWith(\"/\")) {\n                    name = name.substring(0, name.length() - 1);\n                }\n                entry.setName(name);\n                roots.add(entry);\n            }\n            for (CmsClientSitemapEntry root : roots) {\n                root.setChildren(getChildren(root.getSitePath(), 2));\n            }\n        } catch (Throwable e) {\n            error(e);\n        }\n        return roots;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getChildren(java.lang.String)\n     */\n    public List<CmsClientSitemapEntry> getChildren(String root) throws CmsRpcException {\n\n        List<CmsClientSitemapEntry> children = null;\n        try {\n            CmsSitemapEntry entry = OpenCms.getSitemapManager().getEntryForUri(getCmsObject(), root);\n            List<CmsSitemapEntry> subEntries = entry.getSubEntries();\n            int size = subEntries.size();\n            children = new ArrayList<CmsClientSitemapEntry>(size);\n            for (int i = 0; i < size; i++) {\n                CmsSitemapEntry child = subEntries.get(i);\n                children.add(toClientEntry(child, i));\n            }\n            return children;\n        } catch (Throwable e) {\n            error(e);\n        }\n        return children;\n    }","id":94238,"modified_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#getChildren(java.lang.String)\n     */\n    public List<CmsClientSitemapEntry> getChildren(String root) throws CmsRpcException {\n\n        List<CmsClientSitemapEntry> children = null;\n        try {\n            children = getChildren(root, 1);\n        } catch (Throwable e) {\n            error(e);\n        }\n        return children;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public void exit(List<CmsClientSitemapEntry> recentList) throws CmsRpcException {\n\n        try {\n\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","id":94239,"modified_method":"/**\n     * @see org.opencms.ade.sitemap.shared.rpc.I_CmsSitemapService#exit(java.util.List)\n     */\n    public void exit(List<CmsClientSitemapEntry> recentList) throws CmsRpcException {\n\n        try {\n            if (recentList != null) {\n                setRecentList(recentList);\n            }\n        } catch (Throwable e) {\n            error(e);\n        }\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Default constructor.<p>\n     * \n     * @param widget the widget to use\n     * @param handler the handler\n     */\n    public CmsSitemapTreeItem(CmsListItemWidget widget, CmsSitemapHoverbarHandler handler) {\n\n        super(widget);\n        m_handler = handler;\n    }","id":94240,"modified_method":"/**\n     * Default constructor.<p>\n     * \n     * @param widget the widget to use\n     * @param sitePath the site path\n     */\n    public CmsSitemapTreeItem(CmsListItemWidget widget, String sitePath) {\n\n        super(widget);\n        m_sitePath = sitePath;\n        DOM.setElementAttribute(widget.getContentPanel().getElement(), ATTR_SITEPATH, sitePath);\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Refreshes the displayed data from the given sitemap entry.<p>\n     * \n     * @param entry the sitemap entry to update\n     */\n    public void updateEntry(CmsClientSitemapEntry entry) {\n\n        CmsListItemWidget widget = (CmsListItemWidget)getWidget();\n        widget.setTitleLabel(entry.getTitle());\n        widget.setAdditionalInfoLabel(0, entry.getName());\n        widget.setAdditionalInfoLabel(1, entry.getVfsPath());\n        m_handler.updateEntry(entry);\n    }","id":94241,"modified_method":"/**\n     * Refreshes the displayed data from the given sitemap entry.<p>\n     * \n     * @param entry the sitemap entry to update\n     */\n    public void updateEntry(CmsClientSitemapEntry entry) {\n\n        CmsListItemWidget widget = (CmsListItemWidget)getWidget();\n        widget.setTitleLabel(entry.getTitle());\n        widget.setAdditionalInfoLabel(0, entry.getName());\n        widget.setAdditionalInfoLabel(1, entry.getVfsPath());\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Factory method.<p>\n     * \n     * @param entry the sitemap entry to create the tree item for\n     * \n     * @return a new created sitemap tree item\n     */\n    public CmsSitemapTreeItem create(CmsClientSitemapEntry entry) {\n\n        CmsListInfoBean infoBean = new CmsListInfoBean();\n        infoBean.setTitle(entry.getTitle());\n        infoBean.setSubTitle(entry.getSitePath());\n        infoBean.addAdditionalInfo(Messages.get().key(Messages.GUI_NAME_0), entry.getName());\n        infoBean.addAdditionalInfo(Messages.get().key(Messages.GUI_VFS_PATH_0), entry.getVfsPath());\n        CmsListItemWidget itemWidget = new CmsListItemWidget(infoBean);\n        Image icon = new Image(I_CmsImageBundle.INSTANCE.magnifierIconActive());\n        icon.addStyleName(I_CmsLayoutBundle.INSTANCE.listItemWidgetCss().permaVisible());\n        itemWidget.setIcon(icon);\n        CmsSitemapHoverbarHandler handler = null;\n        if (!CmsSitemapProvider.get().isEditable()) {\n            handler = new CmsSitemapHoverbarHandler(entry, null);\n        } else {\n            handler = new CmsSitemapHoverbarHandler(entry, m_controller);\n        }\n        CmsSitemapHoverbar hoverbar = new CmsSitemapHoverbar(handler);\n        itemWidget.addButton(hoverbar.getGotoButton());\n        itemWidget.addButton(hoverbar.getDeleteButton());\n        itemWidget.addButton(hoverbar.getEditButton());\n        itemWidget.addButton(hoverbar.getNewButton());\n        itemWidget.addButton(hoverbar.getMoveButton());\n\n        CmsSitemapTreeItem treeItem = new CmsSitemapTreeItem(itemWidget, handler);\n        treeItem.setId(entry.getName());\n        return treeItem;\n    }","id":94242,"modified_method":"/**\n     * Factory method.<p>\n     * \n     * @param entry the sitemap entry to create the tree item for\n     * \n     * @return a new created sitemap tree item\n     */\n    public CmsSitemapTreeItem create(CmsClientSitemapEntry entry) {\n\n        CmsListInfoBean infoBean = new CmsListInfoBean();\n        infoBean.setTitle(entry.getTitle());\n        infoBean.setSubTitle(entry.getSitePath());\n        infoBean.addAdditionalInfo(Messages.get().key(Messages.GUI_NAME_0), entry.getName());\n        infoBean.addAdditionalInfo(Messages.get().key(Messages.GUI_VFS_PATH_0), entry.getVfsPath());\n        CmsListItemWidget itemWidget = new CmsListItemWidget(infoBean);\n        Image icon = new Image(I_CmsImageBundle.INSTANCE.magnifierIconActive());\n        icon.addStyleName(I_CmsLayoutBundle.INSTANCE.listItemWidgetCss().permaVisible());\n        itemWidget.setIcon(icon);\n        CmsSitemapTreeItem treeItem = new CmsSitemapTreeItem(itemWidget, entry.getSitePath());\n        treeItem.setId(entry.getName());\n        if (CmsSitemapProvider.get().isEditable()) {\n            if (m_hoverbar == null) {\n                CmsSitemapHoverbarHandler handler = new CmsSitemapHoverbarHandler(m_controller);\n                m_hoverbar = new CmsSitemapHoverbar(handler);\n            }\n            m_hoverbar.installOn(itemWidget);\n        }\n        return treeItem;\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see com.google.gwt.core.client.EntryPoint#onModuleLoad()\n     */\n    @Override\n    public void onModuleLoad() {\n\n        // init\n        super.onModuleLoad();\n        I_CmsLayoutBundle.INSTANCE.rootCss().ensureInjected();\n        I_CmsLayoutBundle.INSTANCE.pageCss().ensureInjected();\n        I_CmsImageBundle.INSTANCE.buttonCss().ensureInjected();\n\n        RootPanel.getBodyElement().addClassName(I_CmsLayoutBundle.INSTANCE.rootCss().root());\n\n        // controller & tree-item-factory & tool-bar\n        final CmsSitemapController controller = new CmsSitemapController();\n        final CmsSitemapTreeItemFactory factory = new CmsSitemapTreeItemFactory(controller);\n        final CmsLazyTree<CmsSitemapTreeItem> tree = new CmsLazyTree<CmsSitemapTreeItem>(\n            new A_CmsDeepLazyOpenHandler<CmsSitemapTreeItem>() {\n\n                /**\n                 * @see org.opencms.gwt.client.ui.tree.I_CmsLazyOpenHandler#load(org.opencms.gwt.client.ui.tree.CmsLazyTreeItem)\n                 */\n                public void load(final CmsSitemapTreeItem target) {\n\n                    controller.getChildren(target.getEntry());\n                }\n            });\n        final CmsSitemapToolbar toolbar = new CmsSitemapToolbar();\n        toolbar.setHandler(new CmsSitemapToolbarHandler(controller));\n        controller.setHandler(new CmsSitemapControllerHandler(toolbar, tree, factory));\n\n        RootPanel.get().add(toolbar);\n        RootPanel.get().add(new CmsToolbarPlaceHolder());\n\n        // title\n        CmsHeader title = new CmsHeader(\n            Messages.get().key(Messages.GUI_EDITOR_TITLE_0),\n            CmsSitemapProvider.get().getUri());\n        title.addStyleName(I_CmsLayoutBundle.INSTANCE.rootCss().pageCenter());\n        RootPanel.get().add(title);\n\n        // content page\n        final CmsPage page = new CmsPage();\n        RootPanel.get().add(page);\n\n        // initial content\n        final Label loadingLabel = new Label(Messages.get().key(Messages.GUI_LOADING_0));\n        page.add(loadingLabel);\n\n        // start\n        controller.initialize(new Command() {\n\n            /**\n             * @see com.google.gwt.user.client.Command#execute()\n             */\n            public void execute() {\n\n                // paint\n                page.remove(loadingLabel);\n                page.add(tree);\n            }\n        });\n    }","id":94243,"modified_method":"/**\n     * @see com.google.gwt.core.client.EntryPoint#onModuleLoad()\n     */\n    @Override\n    public void onModuleLoad() {\n\n        // init\n        super.onModuleLoad();\n        I_CmsLayoutBundle.INSTANCE.rootCss().ensureInjected();\n        I_CmsLayoutBundle.INSTANCE.pageCss().ensureInjected();\n        I_CmsImageBundle.INSTANCE.buttonCss().ensureInjected();\n\n        RootPanel.getBodyElement().addClassName(I_CmsLayoutBundle.INSTANCE.rootCss().root());\n\n        // controller & tree-item-factory & tool-bar\n        final CmsSitemapController controller = new CmsSitemapController();\n        final CmsSitemapTreeItemFactory factory = new CmsSitemapTreeItemFactory(controller);\n        final CmsLazyTree<CmsSitemapTreeItem> tree = new CmsLazyTree<CmsSitemapTreeItem>(\n            new A_CmsDeepLazyOpenHandler<CmsSitemapTreeItem>() {\n\n                /**\n                 * @see org.opencms.gwt.client.ui.tree.I_CmsLazyOpenHandler#load(org.opencms.gwt.client.ui.tree.CmsLazyTreeItem)\n                 */\n                public void load(final CmsSitemapTreeItem target) {\n\n                    controller.getChildren(target.getSitePath());\n                }\n            });\n        final CmsSitemapToolbar toolbar = new CmsSitemapToolbar();\n        toolbar.setHandler(new CmsSitemapToolbarHandler(controller));\n        controller.setHandler(new CmsSitemapControllerHandler(toolbar, tree, factory));\n\n        RootPanel.get().add(toolbar);\n        RootPanel.get().add(new CmsToolbarPlaceHolder());\n\n        // title\n        CmsHeader title = new CmsHeader(\n            Messages.get().key(Messages.GUI_EDITOR_TITLE_0),\n            CmsSitemapProvider.get().getUri());\n        title.addStyleName(I_CmsLayoutBundle.INSTANCE.rootCss().pageCenter());\n        RootPanel.get().add(title);\n\n        // content page\n        final CmsPage page = new CmsPage();\n        RootPanel.get().add(page);\n\n        // initial content\n        final Label loadingLabel = new Label(Messages.get().key(Messages.GUI_LOADING_0));\n        page.add(loadingLabel);\n\n        // starting rendering\n        controller.initialize(new Command() {\n\n            /**\n             * @see com.google.gwt.user.client.Command#execute()\n             */\n            public void execute() {\n\n                // paint\n                page.remove(loadingLabel);\n                page.add(tree);\n            }\n        });\n    }","commit_id":"ddddd3499e99d4f007861b171e5e5ced1f9bd0c8","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private void _initialize(boolean loadSpringXML) {\n\t\tif (_initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalUtil portalUtil = new PortalUtil();\n\n\t\tportalUtil.setPortal(new PortalImpl());\n\n\t\tPortalUUIDUtil portalUUIDUtil = new PortalUUIDUtil();\n\n\t\tportalUUIDUtil.setPortalUUID(new PortalUUIDImpl());\n\n\t\tPropsUtil.setProps(new PropsImpl());\n\n\t\tPortalExecutorManagerUtil portalExecutorManagerUtil =\n\t\t\tnew PortalExecutorManagerUtil();\n\n\t\tportalExecutorManagerUtil.setPortalExecutorManager(\n\t\t\tnew MockPortalExecutorManager());\n\n\t\tif (loadSpringXML) {\n\t\t\tClass<?> clazz = getClass();\n\n\t\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\t\tPortletClassLoaderUtil.setClassLoader(classLoader);\n\n\t\t\tApplicationContext applicationContext =\n\t\t\t\tnew FileSystemXmlApplicationContext(\n\t\t\t\t\t\"portal-impl/test/unit/com/liferay/portal/cluster/\" +\n\t\t\t\t\t\t\"test-spring.xml\");\n\n\t\t\tBeanLocator beanLocator = new BeanLocatorImpl(\n\t\t\t\tclassLoader, applicationContext);\n\n\t\t\tPortalBeanLocatorUtil.setBeanLocator(beanLocator);\n\n\t\t\tPortletBeanLocatorUtil.setBeanLocator(\n\t\t\t\tSERVLET_CONTEXT_NAME, beanLocator);\n\t\t}\n\n\t\tJDKLoggerTestUtil.configureJDKLogger(\n\t\t\tClusterBase.class.getName(), Level.FINE);\n\n\t\t_initialized = true;\n\t}","id":94244,"modified_method":"private void _initialize(boolean loadSpringXML) {\n\t\tif (_initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalUtil portalUtil = new PortalUtil();\n\n\t\tportalUtil.setPortal(new PortalImpl());\n\n\t\tPortalUUIDUtil portalUUIDUtil = new PortalUUIDUtil();\n\n\t\tportalUUIDUtil.setPortalUUID(new PortalUUIDImpl());\n\n\t\tPropsUtil.setProps(new PropsImpl());\n\n\t\tPortalExecutorManagerUtil portalExecutorManagerUtil =\n\t\t\tnew PortalExecutorManagerUtil();\n\n\t\tportalExecutorManagerUtil.setPortalExecutorManager(\n\t\t\tnew MockPortalExecutorManager());\n\n\t\tif (loadSpringXML) {\n\t\t\tClass<?> clazz = getClass();\n\n\t\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\t\tString servletContextName = StringUtil.randomId();\n\n\t\t\tClassLoaderPool.register(servletContextName, classLoader);\n\n\t\t\tPortletClassLoaderUtil.setServletContextName(servletContextName);\n\n\t\t\ttry {\n\t\t\t\tApplicationContext applicationContext =\n\t\t\t\t\tnew FileSystemXmlApplicationContext(\n\t\t\t\t\t\t\"portal-impl/test/unit/com/liferay/portal/cluster/\" +\n\t\t\t\t\t\t\t\"test-spring.xml\");\n\n\t\t\t\tBeanLocator beanLocator = new BeanLocatorImpl(\n\t\t\t\t\tclassLoader, applicationContext);\n\n\t\t\t\tPortalBeanLocatorUtil.setBeanLocator(beanLocator);\n\n\t\t\t\tPortletBeanLocatorUtil.setBeanLocator(\n\t\t\t\t\tSERVLET_CONTEXT_NAME, beanLocator);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\tClassLoaderPool.unregister(servletContextName);\n\t\t\t}\n\t\t}\n\n\t\tJDKLoggerTestUtil.configureJDKLogger(\n\t\t\tClusterBase.class.getName(), Level.FINE);\n\n\t\t_initialized = true;\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doFireDeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tString servletContextName = hotDeployEvent.getServletContextName();\n\n\t\tif (_deployedServletContextNames.contains(servletContextName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tboolean hasDependencies = true;\n\n\t\tfor (String dependentServletContextName :\n\t\t\t\thotDeployEvent.getDependentServletContextNames()) {\n\n\t\t\tif (!_deployedServletContextNames.contains(\n\t\t\t\t\tdependentServletContextName)) {\n\n\t\t\t\thasDependencies = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDependencies) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Deploying \" + servletContextName + \" from queue\");\n\t\t\t}\n\n\t\t\tfor (HotDeployListener hotDeployListener : _hotDeployListeners) {\n\t\t\t\ttry {\n\t\t\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\t\thotDeployListener.invokeDeploy(hotDeployEvent);\n\t\t\t\t}\n\t\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t\t_log.error(hde, hde);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_deployedServletContextNames.add(servletContextName);\n\n\t\t\t_dependentHotDeployEvents.remove(hotDeployEvent);\n\n\t\t\tClassLoader contextClassLoader = getContextClassLoader();\n\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(ClassLoaderUtil.getPortalClassLoader());\n\n\t\t\t\tList<HotDeployEvent> dependentEvents =\n\t\t\t\t\tnew ArrayList<HotDeployEvent>(_dependentHotDeployEvents);\n\n\t\t\t\tfor (HotDeployEvent dependentEvent : dependentEvents) {\n\t\t\t\t\tsetContextClassLoader(\n\t\t\t\t\t\tdependentEvent.getContextClassLoader());\n\n\t\t\t\t\tdoFireDeployEvent(dependentEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetContextClassLoader(contextClassLoader);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!_dependentHotDeployEvents.contains(hotDeployEvent)) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\t\t\tsb.append(\"Queueing \");\n\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\tsb.append(\" for deploy because it is missing \");\n\t\t\t\t\tsb.append(getRequiredServletContextNames(hotDeployEvent));\n\n\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t}\n\n\t\t\t\t_dependentHotDeployEvents.add(hotDeployEvent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tfor (HotDeployEvent dependentHotDeployEvent :\n\t\t\t\t\t\t\t_dependentHotDeployEvents) {\n\n\t\t\t\t\t\tStringBundler sb = new StringBundler(3);\n\n\t\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\t\tsb.append(\" is still in queue because it is missing \");\n\t\t\t\t\t\tsb.append(\n\t\t\t\t\t\t\tgetRequiredServletContextNames(\n\t\t\t\t\t\t\t\tdependentHotDeployEvent));\n\n\t\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":94245,"modified_method":"protected void doFireDeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tString servletContextName = hotDeployEvent.getServletContextName();\n\n\t\tif (_deployedServletContextNames.contains(servletContextName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tboolean hasDependencies = true;\n\n\t\tfor (String dependentServletContextName :\n\t\t\t\thotDeployEvent.getDependentServletContextNames()) {\n\n\t\t\tif (!_deployedServletContextNames.contains(\n\t\t\t\t\tdependentServletContextName)) {\n\n\t\t\t\thasDependencies = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDependencies) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Deploying \" + servletContextName + \" from queue\");\n\t\t\t}\n\n\t\t\tfor (HotDeployListener hotDeployListener : _hotDeployListeners) {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\ttry {\n\t\t\t\t\thotDeployListener.invokeDeploy(hotDeployEvent);\n\t\t\t\t}\n\t\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t\t_log.error(hde, hde);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_deployedServletContextNames.add(servletContextName);\n\n\t\t\t_dependentHotDeployEvents.remove(hotDeployEvent);\n\n\t\t\tClassLoader contextClassLoader = getContextClassLoader();\n\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(ClassLoaderUtil.getPortalClassLoader());\n\n\t\t\t\tList<HotDeployEvent> dependentEvents =\n\t\t\t\t\tnew ArrayList<HotDeployEvent>(_dependentHotDeployEvents);\n\n\t\t\t\tfor (HotDeployEvent dependentEvent : dependentEvents) {\n\t\t\t\t\tsetContextClassLoader(\n\t\t\t\t\t\tdependentEvent.getContextClassLoader());\n\n\t\t\t\t\tdoFireDeployEvent(dependentEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetContextClassLoader(contextClassLoader);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!_dependentHotDeployEvents.contains(hotDeployEvent)) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\t\t\tsb.append(\"Queueing \");\n\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\tsb.append(\" for deploy because it is missing \");\n\t\t\t\t\tsb.append(getRequiredServletContextNames(hotDeployEvent));\n\n\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t}\n\n\t\t\t\t_dependentHotDeployEvents.add(hotDeployEvent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tfor (HotDeployEvent dependentHotDeployEvent :\n\t\t\t\t\t\t\t_dependentHotDeployEvents) {\n\n\t\t\t\t\t\tStringBundler sb = new StringBundler(3);\n\n\t\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\t\tsb.append(\" is still in queue because it is missing \");\n\t\t\t\t\t\tsb.append(\n\t\t\t\t\t\t\tgetRequiredServletContextNames(\n\t\t\t\t\t\t\t\tdependentHotDeployEvent));\n\n\t\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic synchronized void fireUndeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tfor (int i = _hotDeployListeners.size() - 1; i >= 0; i--) {\n\t\t\tHotDeployListener hotDeployListener = _hotDeployListeners.get(i);\n\n\t\t\ttry {\n\t\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\thotDeployListener.invokeUndeploy(hotDeployEvent);\n\t\t\t}\n\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t_log.error(hde, hde);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t}\n\t\t}\n\n\t\t_deployedServletContextNames.remove(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\tClassLoader classLoader = hotDeployEvent.getContextClassLoader();\n\n\t\tTemplateManagerUtil.destroy(classLoader);\n\n\t\t_pacl.unregister(classLoader);\n\n\t\tRequiredPluginsUtil.startCheckingRequiredPlugins();\n\t}","id":94246,"modified_method":"@Override\n\tpublic synchronized void fireUndeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tfor (int i = _hotDeployListeners.size() - 1; i >= 0; i--) {\n\t\t\tHotDeployListener hotDeployListener = _hotDeployListeners.get(i);\n\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\ttry {\n\t\t\t\thotDeployListener.invokeUndeploy(hotDeployEvent);\n\t\t\t}\n\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t_log.error(hde, hde);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t}\n\t\t}\n\n\t\t_deployedServletContextNames.remove(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\tClassLoader classLoader = hotDeployEvent.getContextClassLoader();\n\n\t\tTemplateManagerUtil.destroy(classLoader);\n\n\t\t_pacl.unregister(classLoader);\n\n\t\tRequiredPluginsUtil.startCheckingRequiredPlugins();\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void runBeforeClass(TestContext testContext) {\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tPortalUtil.getServletContextName());\n\n\t\tif (servletContext == null) {\n\t\t\tservletContext = new AutoDeployMockServletContext(\n\t\t\t\tgetResourceBasePath(), new FileSystemResourceLoader());\n\n\t\t\tservletContext.setAttribute(\n\t\t\t\tInvokerFilterHelper.class.getName(), new InvokerFilterHelper());\n\n\t\t\tServletContextPool.put(PortalUtil.getPathContext(), servletContext);\n\t\t}\n\n\t\tHotDeployUtil.reset();\n\n\t\tHotDeployUtil.registerListener(new HookHotDeployListener());\n\n\t\tHotDeployUtil.setCapturePrematureEvents(false);\n\n\t\tPortalLifecycleUtil.flushInits();\n\n\t\tClass<?> clazz = testContext.getClazz();\n\n\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\tMockServletContext mockServletContext = new MockServletContext(\n\t\t\tnew PACLResourceLoader(classLoader));\n\n\t\tmockServletContext.setServletContextName(\"a-test-hook\");\n\n\t\tHotDeployEvent hotDeployEvent = getHotDeployEvent(\n\t\t\tmockServletContext, classLoader);\n\n\t\tHotDeployUtil.fireDeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\tportletContextLoaderListener.contextInitialized(\n\t\t\t\tnew ServletContextEvent(mockServletContext));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\n\t\t_hotDeployEvents.put(clazz, hotDeployEvent);\n\t}","id":94247,"modified_method":"@Override\n\tpublic void runBeforeClass(TestContext testContext) {\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tPortalUtil.getServletContextName());\n\n\t\tif (servletContext == null) {\n\t\t\tservletContext = new AutoDeployMockServletContext(\n\t\t\t\tgetResourceBasePath(), new FileSystemResourceLoader());\n\n\t\t\tservletContext.setAttribute(\n\t\t\t\tInvokerFilterHelper.class.getName(), new InvokerFilterHelper());\n\n\t\t\tServletContextPool.put(PortalUtil.getPathContext(), servletContext);\n\t\t}\n\n\t\tHotDeployUtil.reset();\n\n\t\tHotDeployUtil.registerListener(new HookHotDeployListener());\n\n\t\tHotDeployUtil.setCapturePrematureEvents(false);\n\n\t\tPortalLifecycleUtil.flushInits();\n\n\t\tClass<?> clazz = testContext.getClazz();\n\n\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\tMockServletContext mockServletContext = new MockServletContext(\n\t\t\tnew PACLResourceLoader(classLoader));\n\n\t\tmockServletContext.setServletContextName(\"a-test-hook\");\n\n\t\tHotDeployEvent hotDeployEvent = getHotDeployEvent(\n\t\t\tmockServletContext, classLoader);\n\n\t\tHotDeployUtil.fireDeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\ttry {\n\t\t\tportletContextLoaderListener.contextInitialized(\n\t\t\t\tnew ServletContextEvent(mockServletContext));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\n\t\t_hotDeployEvents.put(clazz, hotDeployEvent);\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void runAfterClass(TestContext testContext) {\n\t\tHotDeployEvent hotDeployEvent = _hotDeployEvents.remove(\n\t\t\ttestContext.getClazz());\n\n\t\tif (hotDeployEvent == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tHotDeployUtil.fireUndeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\tportletContextLoaderListener.contextDestroyed(\n\t\t\t\tnew ServletContextEvent(hotDeployEvent.getServletContext()));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\t}","id":94248,"modified_method":"@Override\n\tpublic void runAfterClass(TestContext testContext) {\n\t\tHotDeployEvent hotDeployEvent = _hotDeployEvents.remove(\n\t\t\ttestContext.getClazz());\n\n\t\tif (hotDeployEvent == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tHotDeployUtil.fireUndeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\ttry {\n\t\t\tportletContextLoaderListener.contextDestroyed(\n\t\t\t\tnew ServletContextEvent(hotDeployEvent.getServletContext()));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static String getServletContextName() {\n\t\treturn _servletContextName;\n\t}","id":94249,"modified_method":"public static String getServletContextName() {\n\t\tString servletContextName = _servletContextName.get();\n\n\t\tif (servletContextName == null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"No servlet context name attached in current context\");\n\t\t}\n\n\t\treturn servletContextName;\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setServletContextName(String servletContextName) {\n\t\tPortalRuntimePermission.checkSetBeanProperty(\n\t\t\tPortletClassLoaderUtil.class);\n\n\t\t_servletContextName = servletContextName;\n\t}","id":94250,"modified_method":"public static void setServletContextName(String servletContextName) {\n\t\tPortalRuntimePermission.checkSetBeanProperty(\n\t\t\tPortletClassLoaderUtil.class);\n\n\t\t_servletContextName.set(servletContextName);\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ClassLoader getClassLoader() {\n\t\tThread currentThread = Thread.currentThread();\n\n\t\treturn _classLoaders.get(currentThread.getId());\n\t}","id":94251,"modified_method":"public static ClassLoader getClassLoader() {\n\t\treturn ClassLoaderPool.getClassLoader(getServletContextName());\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected SessionFactory getSessionFactory() {\n\t\tShardDataSourceTargetSource shardDataSourceTargetSource =\n\t\t\t(ShardDataSourceTargetSource)\n\t\t\t\tInfrastructureUtil.getShardDataSourceTargetSource();\n\n\t\tif (shardDataSourceTargetSource == null) {\n\t\t\treturn getSessionFactoryImplementor();\n\t\t}\n\n\t\tDataSource dataSource = shardDataSourceTargetSource.getDataSource();\n\n\t\tSessionFactory sessionFactory = _sessionFactories.get(dataSource);\n\n\t\tif (sessionFactory != null) {\n\t\t\treturn sessionFactory;\n\t\t}\n\n\t\tClassLoader classLoader = PortletClassLoaderUtil.getClassLoader();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\tgetSessionFactoryClassLoader());\n\n\t\t\tPortletHibernateConfiguration portletHibernateConfiguration =\n\t\t\t\tnew PortletHibernateConfiguration();\n\n\t\t\tportletHibernateConfiguration.setDataSource(dataSource);\n\n\t\t\ttry {\n\t\t\t\tsessionFactory =\n\t\t\t\t\tportletHibernateConfiguration.buildSessionFactory();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_sessionFactories.put(dataSource, sessionFactory);\n\n\t\t\treturn sessionFactory;\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(classLoader);\n\t\t}\n\t}","id":94252,"modified_method":"protected SessionFactory getSessionFactory() {\n\t\tShardDataSourceTargetSource shardDataSourceTargetSource =\n\t\t\t(ShardDataSourceTargetSource)\n\t\t\t\tInfrastructureUtil.getShardDataSourceTargetSource();\n\n\t\tif (shardDataSourceTargetSource == null) {\n\t\t\treturn getSessionFactoryImplementor();\n\t\t}\n\n\t\tDataSource dataSource = shardDataSourceTargetSource.getDataSource();\n\n\t\tSessionFactory sessionFactory = _sessionFactories.get(dataSource);\n\n\t\tif (sessionFactory != null) {\n\t\t\treturn sessionFactory;\n\t\t}\n\n\t\tString servletContextName =\n\t\t\tPortletClassLoaderUtil.getServletContextName();\n\n\t\tClassLoader classLoader = getSessionFactoryClassLoader();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\tClassLoaderPool.getContextName(classLoader));\n\n\t\ttry {\n\t\t\tPortletHibernateConfiguration portletHibernateConfiguration =\n\t\t\t\tnew PortletHibernateConfiguration();\n\n\t\t\tportletHibernateConfiguration.setDataSource(dataSource);\n\n\t\t\ttry {\n\t\t\t\tsessionFactory =\n\t\t\t\t\tportletHibernateConfiguration.buildSessionFactory();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_sessionFactories.put(dataSource, sessionFactory);\n\n\t\t\treturn sessionFactory;\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(servletContextName);\n\t\t}\n\t}","commit_id":"2af65384ee4af51a649b82a2321e4facdc7141b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _initialize(boolean loadSpringXML) {\n\t\tif (_initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalUtil portalUtil = new PortalUtil();\n\n\t\tportalUtil.setPortal(new PortalImpl());\n\n\t\tPortalUUIDUtil portalUUIDUtil = new PortalUUIDUtil();\n\n\t\tportalUUIDUtil.setPortalUUID(new PortalUUIDImpl());\n\n\t\tPropsUtil.setProps(new PropsImpl());\n\n\t\tPortalExecutorManagerUtil portalExecutorManagerUtil =\n\t\t\tnew PortalExecutorManagerUtil();\n\n\t\tportalExecutorManagerUtil.setPortalExecutorManager(\n\t\t\tnew MockPortalExecutorManager());\n\n\t\tif (loadSpringXML) {\n\t\t\tClass<?> clazz = getClass();\n\n\t\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\t\tPortletClassLoaderUtil.setClassLoader(classLoader);\n\n\t\t\tApplicationContext applicationContext =\n\t\t\t\tnew FileSystemXmlApplicationContext(\n\t\t\t\t\t\"portal-impl/test/unit/com/liferay/portal/cluster/\" +\n\t\t\t\t\t\t\"test-spring.xml\");\n\n\t\t\tBeanLocator beanLocator = new BeanLocatorImpl(\n\t\t\t\tclassLoader, applicationContext);\n\n\t\t\tPortalBeanLocatorUtil.setBeanLocator(beanLocator);\n\n\t\t\tPortletBeanLocatorUtil.setBeanLocator(\n\t\t\t\tSERVLET_CONTEXT_NAME, beanLocator);\n\t\t}\n\n\t\tJDKLoggerTestUtil.configureJDKLogger(\n\t\t\tClusterBase.class.getName(), Level.FINE);\n\n\t\t_initialized = true;\n\t}","id":94253,"modified_method":"private void _initialize(boolean loadSpringXML) {\n\t\tif (_initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalUtil portalUtil = new PortalUtil();\n\n\t\tportalUtil.setPortal(new PortalImpl());\n\n\t\tPortalUUIDUtil portalUUIDUtil = new PortalUUIDUtil();\n\n\t\tportalUUIDUtil.setPortalUUID(new PortalUUIDImpl());\n\n\t\tPropsUtil.setProps(new PropsImpl());\n\n\t\tPortalExecutorManagerUtil portalExecutorManagerUtil =\n\t\t\tnew PortalExecutorManagerUtil();\n\n\t\tportalExecutorManagerUtil.setPortalExecutorManager(\n\t\t\tnew MockPortalExecutorManager());\n\n\t\tif (loadSpringXML) {\n\t\t\tClass<?> clazz = getClass();\n\n\t\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\t\tString servletContextName = StringUtil.randomId();\n\n\t\t\tClassLoaderPool.register(servletContextName, classLoader);\n\n\t\t\tPortletClassLoaderUtil.setServletContextName(servletContextName);\n\n\t\t\ttry {\n\t\t\t\tApplicationContext applicationContext =\n\t\t\t\t\tnew FileSystemXmlApplicationContext(\n\t\t\t\t\t\t\"portal-impl/test/unit/com/liferay/portal/cluster/\" +\n\t\t\t\t\t\t\t\"test-spring.xml\");\n\n\t\t\t\tBeanLocator beanLocator = new BeanLocatorImpl(\n\t\t\t\t\tclassLoader, applicationContext);\n\n\t\t\t\tPortalBeanLocatorUtil.setBeanLocator(beanLocator);\n\n\t\t\t\tPortletBeanLocatorUtil.setBeanLocator(\n\t\t\t\t\tSERVLET_CONTEXT_NAME, beanLocator);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\tClassLoaderPool.unregister(servletContextName);\n\t\t\t}\n\t\t}\n\n\t\tJDKLoggerTestUtil.configureJDKLogger(\n\t\t\tClusterBase.class.getName(), Level.FINE);\n\n\t\t_initialized = true;\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doFireDeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tString servletContextName = hotDeployEvent.getServletContextName();\n\n\t\tif (_deployedServletContextNames.contains(servletContextName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tboolean hasDependencies = true;\n\n\t\tfor (String dependentServletContextName :\n\t\t\t\thotDeployEvent.getDependentServletContextNames()) {\n\n\t\t\tif (!_deployedServletContextNames.contains(\n\t\t\t\t\tdependentServletContextName)) {\n\n\t\t\t\thasDependencies = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDependencies) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Deploying \" + servletContextName + \" from queue\");\n\t\t\t}\n\n\t\t\tfor (HotDeployListener hotDeployListener : _hotDeployListeners) {\n\t\t\t\ttry {\n\t\t\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\t\thotDeployListener.invokeDeploy(hotDeployEvent);\n\t\t\t\t}\n\t\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t\t_log.error(hde, hde);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_deployedServletContextNames.add(servletContextName);\n\n\t\t\t_dependentHotDeployEvents.remove(hotDeployEvent);\n\n\t\t\tClassLoader contextClassLoader = getContextClassLoader();\n\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(ClassLoaderUtil.getPortalClassLoader());\n\n\t\t\t\tList<HotDeployEvent> dependentEvents =\n\t\t\t\t\tnew ArrayList<HotDeployEvent>(_dependentHotDeployEvents);\n\n\t\t\t\tfor (HotDeployEvent dependentEvent : dependentEvents) {\n\t\t\t\t\tsetContextClassLoader(\n\t\t\t\t\t\tdependentEvent.getContextClassLoader());\n\n\t\t\t\t\tdoFireDeployEvent(dependentEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetContextClassLoader(contextClassLoader);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!_dependentHotDeployEvents.contains(hotDeployEvent)) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\t\t\tsb.append(\"Queueing \");\n\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\tsb.append(\" for deploy because it is missing \");\n\t\t\t\t\tsb.append(getRequiredServletContextNames(hotDeployEvent));\n\n\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t}\n\n\t\t\t\t_dependentHotDeployEvents.add(hotDeployEvent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tfor (HotDeployEvent dependentHotDeployEvent :\n\t\t\t\t\t\t\t_dependentHotDeployEvents) {\n\n\t\t\t\t\t\tStringBundler sb = new StringBundler(3);\n\n\t\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\t\tsb.append(\" is still in queue because it is missing \");\n\t\t\t\t\t\tsb.append(\n\t\t\t\t\t\t\tgetRequiredServletContextNames(\n\t\t\t\t\t\t\t\tdependentHotDeployEvent));\n\n\t\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":94254,"modified_method":"protected void doFireDeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tString servletContextName = hotDeployEvent.getServletContextName();\n\n\t\tif (_deployedServletContextNames.contains(servletContextName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tboolean hasDependencies = true;\n\n\t\tfor (String dependentServletContextName :\n\t\t\t\thotDeployEvent.getDependentServletContextNames()) {\n\n\t\t\tif (!_deployedServletContextNames.contains(\n\t\t\t\t\tdependentServletContextName)) {\n\n\t\t\t\thasDependencies = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (hasDependencies) {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"Deploying \" + servletContextName + \" from queue\");\n\t\t\t}\n\n\t\t\tfor (HotDeployListener hotDeployListener : _hotDeployListeners) {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\ttry {\n\t\t\t\t\thotDeployListener.invokeDeploy(hotDeployEvent);\n\t\t\t\t}\n\t\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t\t_log.error(hde, hde);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_deployedServletContextNames.add(servletContextName);\n\n\t\t\t_dependentHotDeployEvents.remove(hotDeployEvent);\n\n\t\t\tClassLoader contextClassLoader = getContextClassLoader();\n\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(ClassLoaderUtil.getPortalClassLoader());\n\n\t\t\t\tList<HotDeployEvent> dependentEvents =\n\t\t\t\t\tnew ArrayList<HotDeployEvent>(_dependentHotDeployEvents);\n\n\t\t\t\tfor (HotDeployEvent dependentEvent : dependentEvents) {\n\t\t\t\t\tsetContextClassLoader(\n\t\t\t\t\t\tdependentEvent.getContextClassLoader());\n\n\t\t\t\t\tdoFireDeployEvent(dependentEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetContextClassLoader(contextClassLoader);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!_dependentHotDeployEvents.contains(hotDeployEvent)) {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\t\t\tsb.append(\"Queueing \");\n\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\tsb.append(\" for deploy because it is missing \");\n\t\t\t\t\tsb.append(getRequiredServletContextNames(hotDeployEvent));\n\n\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t}\n\n\t\t\t\t_dependentHotDeployEvents.add(hotDeployEvent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\tfor (HotDeployEvent dependentHotDeployEvent :\n\t\t\t\t\t\t\t_dependentHotDeployEvents) {\n\n\t\t\t\t\t\tStringBundler sb = new StringBundler(3);\n\n\t\t\t\t\t\tsb.append(servletContextName);\n\t\t\t\t\t\tsb.append(\" is still in queue because it is missing \");\n\t\t\t\t\t\tsb.append(\n\t\t\t\t\t\t\tgetRequiredServletContextNames(\n\t\t\t\t\t\t\t\tdependentHotDeployEvent));\n\n\t\t\t\t\t\t_log.info(sb.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic synchronized void fireUndeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tfor (int i = _hotDeployListeners.size() - 1; i >= 0; i--) {\n\t\t\tHotDeployListener hotDeployListener = _hotDeployListeners.get(i);\n\n\t\t\ttry {\n\t\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\t\thotDeployListener.invokeUndeploy(hotDeployEvent);\n\t\t\t}\n\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t_log.error(hde, hde);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t}\n\t\t}\n\n\t\t_deployedServletContextNames.remove(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\tClassLoader classLoader = hotDeployEvent.getContextClassLoader();\n\n\t\tTemplateManagerUtil.destroy(classLoader);\n\n\t\t_pacl.unregister(classLoader);\n\n\t\tRequiredPluginsUtil.startCheckingRequiredPlugins();\n\t}","id":94255,"modified_method":"@Override\n\tpublic synchronized void fireUndeployEvent(HotDeployEvent hotDeployEvent) {\n\t\tfor (int i = _hotDeployListeners.size() - 1; i >= 0; i--) {\n\t\t\tHotDeployListener hotDeployListener = _hotDeployListeners.get(i);\n\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\ttry {\n\t\t\t\thotDeployListener.invokeUndeploy(hotDeployEvent);\n\t\t\t}\n\t\t\tcatch (HotDeployException hde) {\n\t\t\t\t_log.error(hde, hde);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t\t}\n\t\t}\n\n\t\t_deployedServletContextNames.remove(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\tClassLoader classLoader = hotDeployEvent.getContextClassLoader();\n\n\t\tTemplateManagerUtil.destroy(classLoader);\n\n\t\t_pacl.unregister(classLoader);\n\n\t\tRequiredPluginsUtil.startCheckingRequiredPlugins();\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void runAfterClass(TestContext testContext) {\n\t\tHotDeployEvent hotDeployEvent = _hotDeployEvents.remove(\n\t\t\ttestContext.getClazz());\n\n\t\tif (hotDeployEvent == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tHotDeployUtil.fireUndeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\tportletContextLoaderListener.contextDestroyed(\n\t\t\t\tnew ServletContextEvent(hotDeployEvent.getServletContext()));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\t}","id":94256,"modified_method":"@Override\n\tpublic void runAfterClass(TestContext testContext) {\n\t\tHotDeployEvent hotDeployEvent = _hotDeployEvents.remove(\n\t\t\ttestContext.getClazz());\n\n\t\tif (hotDeployEvent == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tHotDeployUtil.fireUndeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\ttry {\n\t\t\tportletContextLoaderListener.contextDestroyed(\n\t\t\t\tnew ServletContextEvent(hotDeployEvent.getServletContext()));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void runBeforeClass(TestContext testContext) {\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tPortalUtil.getServletContextName());\n\n\t\tif (servletContext == null) {\n\t\t\tservletContext = new AutoDeployMockServletContext(\n\t\t\t\tgetResourceBasePath(), new FileSystemResourceLoader());\n\n\t\t\tservletContext.setAttribute(\n\t\t\t\tInvokerFilterHelper.class.getName(), new InvokerFilterHelper());\n\n\t\t\tServletContextPool.put(PortalUtil.getPathContext(), servletContext);\n\t\t}\n\n\t\tHotDeployUtil.reset();\n\n\t\tHotDeployUtil.registerListener(new HookHotDeployListener());\n\n\t\tHotDeployUtil.setCapturePrematureEvents(false);\n\n\t\tPortalLifecycleUtil.flushInits();\n\n\t\tClass<?> clazz = testContext.getClazz();\n\n\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\tMockServletContext mockServletContext = new MockServletContext(\n\t\t\tnew PACLResourceLoader(classLoader));\n\n\t\tmockServletContext.setServletContextName(\"a-test-hook\");\n\n\t\tHotDeployEvent hotDeployEvent = getHotDeployEvent(\n\t\t\tmockServletContext, classLoader);\n\n\t\tHotDeployUtil.fireDeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\thotDeployEvent.getContextClassLoader());\n\t\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\t\thotDeployEvent.getServletContextName());\n\n\t\t\tportletContextLoaderListener.contextInitialized(\n\t\t\t\tnew ServletContextEvent(mockServletContext));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(null);\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\n\t\t_hotDeployEvents.put(clazz, hotDeployEvent);\n\t}","id":94257,"modified_method":"@Override\n\tpublic void runBeforeClass(TestContext testContext) {\n\t\tServletContext servletContext = ServletContextPool.get(\n\t\t\tPortalUtil.getServletContextName());\n\n\t\tif (servletContext == null) {\n\t\t\tservletContext = new AutoDeployMockServletContext(\n\t\t\t\tgetResourceBasePath(), new FileSystemResourceLoader());\n\n\t\t\tservletContext.setAttribute(\n\t\t\t\tInvokerFilterHelper.class.getName(), new InvokerFilterHelper());\n\n\t\t\tServletContextPool.put(PortalUtil.getPathContext(), servletContext);\n\t\t}\n\n\t\tHotDeployUtil.reset();\n\n\t\tHotDeployUtil.registerListener(new HookHotDeployListener());\n\n\t\tHotDeployUtil.setCapturePrematureEvents(false);\n\n\t\tPortalLifecycleUtil.flushInits();\n\n\t\tClass<?> clazz = testContext.getClazz();\n\n\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\tMockServletContext mockServletContext = new MockServletContext(\n\t\t\tnew PACLResourceLoader(classLoader));\n\n\t\tmockServletContext.setServletContextName(\"a-test-hook\");\n\n\t\tHotDeployEvent hotDeployEvent = getHotDeployEvent(\n\t\t\tmockServletContext, classLoader);\n\n\t\tHotDeployUtil.fireDeployEvent(hotDeployEvent);\n\n\t\tPortletContextLoaderListener portletContextLoaderListener =\n\t\t\tnew PortletContextLoaderListener();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\thotDeployEvent.getServletContextName());\n\n\t\ttry {\n\t\t\tportletContextLoaderListener.contextInitialized(\n\t\t\t\tnew ServletContextEvent(mockServletContext));\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(null);\n\t\t}\n\n\t\t_hotDeployEvents.put(clazz, hotDeployEvent);\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setServletContextName(String servletContextName) {\n\t\tPortalRuntimePermission.checkSetBeanProperty(\n\t\t\tPortletClassLoaderUtil.class);\n\n\t\t_servletContextName = servletContextName;\n\t}","id":94258,"modified_method":"public static void setServletContextName(String servletContextName) {\n\t\tPortalRuntimePermission.checkSetBeanProperty(\n\t\t\tPortletClassLoaderUtil.class);\n\n\t\t_servletContextName.set(servletContextName);\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ClassLoader getClassLoader() {\n\t\tThread currentThread = Thread.currentThread();\n\n\t\treturn _classLoaders.get(currentThread.getId());\n\t}","id":94259,"modified_method":"public static ClassLoader getClassLoader() {\n\t\treturn ClassLoaderPool.getClassLoader(getServletContextName());\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static String getServletContextName() {\n\t\treturn _servletContextName;\n\t}","id":94260,"modified_method":"public static String getServletContextName() {\n\t\tString servletContextName = _servletContextName.get();\n\n\t\tif (servletContextName == null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"No servlet context name attached in current context\");\n\t\t}\n\n\t\treturn servletContextName;\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected SessionFactory getSessionFactory() {\n\t\tShardDataSourceTargetSource shardDataSourceTargetSource =\n\t\t\t(ShardDataSourceTargetSource)\n\t\t\t\tInfrastructureUtil.getShardDataSourceTargetSource();\n\n\t\tif (shardDataSourceTargetSource == null) {\n\t\t\treturn getSessionFactoryImplementor();\n\t\t}\n\n\t\tDataSource dataSource = shardDataSourceTargetSource.getDataSource();\n\n\t\tSessionFactory sessionFactory = _sessionFactories.get(dataSource);\n\n\t\tif (sessionFactory != null) {\n\t\t\treturn sessionFactory;\n\t\t}\n\n\t\tClassLoader classLoader = PortletClassLoaderUtil.getClassLoader();\n\n\t\ttry {\n\t\t\tPortletClassLoaderUtil.setClassLoader(\n\t\t\t\tgetSessionFactoryClassLoader());\n\n\t\t\tPortletHibernateConfiguration portletHibernateConfiguration =\n\t\t\t\tnew PortletHibernateConfiguration();\n\n\t\t\tportletHibernateConfiguration.setDataSource(dataSource);\n\n\t\t\ttry {\n\t\t\t\tsessionFactory =\n\t\t\t\t\tportletHibernateConfiguration.buildSessionFactory();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_sessionFactories.put(dataSource, sessionFactory);\n\n\t\t\treturn sessionFactory;\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setClassLoader(classLoader);\n\t\t}\n\t}","id":94261,"modified_method":"protected SessionFactory getSessionFactory() {\n\t\tShardDataSourceTargetSource shardDataSourceTargetSource =\n\t\t\t(ShardDataSourceTargetSource)\n\t\t\t\tInfrastructureUtil.getShardDataSourceTargetSource();\n\n\t\tif (shardDataSourceTargetSource == null) {\n\t\t\treturn getSessionFactoryImplementor();\n\t\t}\n\n\t\tDataSource dataSource = shardDataSourceTargetSource.getDataSource();\n\n\t\tSessionFactory sessionFactory = _sessionFactories.get(dataSource);\n\n\t\tif (sessionFactory != null) {\n\t\t\treturn sessionFactory;\n\t\t}\n\n\t\tString servletContextName =\n\t\t\tPortletClassLoaderUtil.getServletContextName();\n\n\t\tClassLoader classLoader = getSessionFactoryClassLoader();\n\n\t\tPortletClassLoaderUtil.setServletContextName(\n\t\t\tClassLoaderPool.getContextName(classLoader));\n\n\t\ttry {\n\t\t\tPortletHibernateConfiguration portletHibernateConfiguration =\n\t\t\t\tnew PortletHibernateConfiguration();\n\n\t\t\tportletHibernateConfiguration.setDataSource(dataSource);\n\n\t\t\ttry {\n\t\t\t\tsessionFactory =\n\t\t\t\t\tportletHibernateConfiguration.buildSessionFactory();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_sessionFactories.put(dataSource, sessionFactory);\n\n\t\t\treturn sessionFactory;\n\t\t}\n\t\tfinally {\n\t\t\tPortletClassLoaderUtil.setServletContextName(servletContextName);\n\t\t}\n\t}","commit_id":"5e176e68553c4f96fcbed173a9212b263caedb49","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AnalyzeStacktrace_Action action = new AnalyzeStacktrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CommentLine_Action action = new CommentLine_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CommentStatements_Action action = new CommentStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExtractMethod_Action action = new ExtractMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToInheritedClassifier_Action action = new GoToInheritedClassifier_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToOverridenMethod_Action action = new GoToOverridenMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ImplementMethod_Action action = new ImplementMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InlineLocalVariable_Action action = new InlineLocalVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InlineMethod_Action action = new InlineMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceConstant_Action action = new IntroduceConstant_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceField_Action action = new IntroduceField_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceVariable_Action action = new IntroduceVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OverrideMethod_Action action = new OverrideMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintNodePosition_Action action = new PrintNodePosition_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameVariable_Action action = new RenameVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowMembers_Action action = new ShowMembers_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNullDFA_Action action = new ShowNullDFA_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowTodoViewer_Action action = new ShowTodoViewer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UncommentStatements_Action action = new UncommentStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(AnalyzersActions_ActionGroup.ID, new AnalyzersActions_ActionGroup(), myId);\n    manager.registerAction(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, new BaseLangaugeCodeCommentsMenuGroup_ActionGroup(), myId);\n    manager.registerAction(BaseLanguageEditorPopupInternal_ActionGroup.ID, new BaseLanguageEditorPopupInternal_ActionGroup(), myId);\n    manager.registerAction(BaseLanguageEditorPopup_ActionGroup.ID, new BaseLanguageEditorPopup_ActionGroup(), myId);\n    manager.registerAction(BaseLanguageModelActionsInternal_ActionGroup.ID, new BaseLanguageModelActionsInternal_ActionGroup(), myId);\n    manager.registerAction(BaseLanguageNodeActionsInternal_ActionGroup.ID, new BaseLanguageNodeActionsInternal_ActionGroup(), myId);\n    manager.registerAction(BaseLanguageToolsAddition_ActionGroup.ID, new BaseLanguageToolsAddition_ActionGroup(), myId);\n    manager.registerAction(BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup.ID, new BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup(), myId);\n    manager.registerAction(PrintNodePosition_ActionGroup.ID, new PrintNodePosition_ActionGroup(), myId);\n    manager.registerAction(RefactoringAddition_ActionGroup.ID, new RefactoringAddition_ActionGroup(), myId);\n  }","id":94262,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AnalyzeStacktrace_Action action = new AnalyzeStacktrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CommentLine_Action action = new CommentLine_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CommentStatements_Action action = new CommentStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExtractMethod_Action action = new ExtractMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToInheritedClassifier_Action action = new GoToInheritedClassifier_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToOverridenMethod_Action action = new GoToOverridenMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ImplementMethod_Action action = new ImplementMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InlineLocalVariable_Action action = new InlineLocalVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InlineMethod_Action action = new InlineMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceConstant_Action action = new IntroduceConstant_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceField_Action action = new IntroduceField_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IntroduceVariable_Action action = new IntroduceVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OverrideMethod_Action action = new OverrideMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintNodePosition_Action action = new PrintNodePosition_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameVariable_Action action = new RenameVariable_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowMembers_Action action = new ShowMembers_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNullDFA_Action action = new ShowNullDFA_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowTodoViewer_Action action = new ShowTodoViewer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UncommentStatements_Action action = new UncommentStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      AnalyzersActions_ActionGroup group = new AnalyzersActions_ActionGroup();\n      manager.registerAction(AnalyzersActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLangaugeCodeCommentsMenuGroup_ActionGroup group = new BaseLangaugeCodeCommentsMenuGroup_ActionGroup();\n      manager.registerAction(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLanguageEditorPopupInternal_ActionGroup group = new BaseLanguageEditorPopupInternal_ActionGroup();\n      manager.registerAction(BaseLanguageEditorPopupInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLanguageEditorPopup_ActionGroup group = new BaseLanguageEditorPopup_ActionGroup();\n      manager.registerAction(BaseLanguageEditorPopup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLanguageModelActionsInternal_ActionGroup group = new BaseLanguageModelActionsInternal_ActionGroup();\n      manager.registerAction(BaseLanguageModelActionsInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLanguageNodeActionsInternal_ActionGroup group = new BaseLanguageNodeActionsInternal_ActionGroup();\n      manager.registerAction(BaseLanguageNodeActionsInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLanguageToolsAddition_ActionGroup group = new BaseLanguageToolsAddition_ActionGroup();\n      manager.registerAction(BaseLanguageToolsAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup group = new BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup();\n      manager.registerAction(BaseLangugeCodeOverrideImplementMenuGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      PrintNodePosition_ActionGroup group = new PrintNodePosition_ActionGroup();\n      manager.registerAction(PrintNodePosition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      RefactoringAddition_ActionGroup group = new RefactoringAddition_ActionGroup();\n      manager.registerAction(RefactoringAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ImplementBehaviorMethod_Action action = new ImplementBehaviorMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OverrideBehaviorMethod_Action action = new OverrideBehaviorMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(BehaviorCodeOverrideImplementMenuGroup_ActionGroup.ID, new BehaviorCodeOverrideImplementMenuGroup_ActionGroup(), myId);\n    manager.registerAction(BehaviourPopup_ActionGroup.ID, new BehaviourPopup_ActionGroup(), myId);\n  }","id":94263,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ImplementBehaviorMethod_Action action = new ImplementBehaviorMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OverrideBehaviorMethod_Action action = new OverrideBehaviorMethod_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      BehaviorCodeOverrideImplementMenuGroup_ActionGroup group = new BehaviorCodeOverrideImplementMenuGroup_ActionGroup();\n      manager.registerAction(BehaviorCodeOverrideImplementMenuGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      BehaviourPopup_ActionGroup group = new BehaviourPopup_ActionGroup();\n      manager.registerAction(BehaviourPopup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ExecuteCalculator_Action action = new ExecuteCalculator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(NodeActionsAddition_ActionGroup.ID, new NodeActionsAddition_ActionGroup(), myId);\n  }","id":94264,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ExecuteCalculator_Action action = new ExecuteCalculator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      NodeActionsAddition_ActionGroup group = new NodeActionsAddition_ActionGroup();\n      manager.registerAction(NodeActionsAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      FindLanguageConceptsUsages_Action action = new FindLanguageConceptsUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindLanguageUsages_Action action = new FindLanguageUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindModelUsages_Action action = new FindModelUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeMessages_Action action = new ShowNodeMessages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(CoreActions_ActionGroup.ID, new CoreActions_ActionGroup(), myId);\n    manager.registerAction(FindLanguageUsages_ActionGroup.ID, new FindLanguageUsages_ActionGroup(), myId);\n    manager.registerAction(FindModelUsages_ActionGroup.ID, new FindModelUsages_ActionGroup(), myId);\n  }","id":94265,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      FindLanguageConceptsUsages_Action action = new FindLanguageConceptsUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindLanguageUsages_Action action = new FindLanguageUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindModelUsages_Action action = new FindModelUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeMessages_Action action = new ShowNodeMessages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      CoreActions_ActionGroup group = new CoreActions_ActionGroup();\n      manager.registerAction(CoreActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FindLanguageUsages_ActionGroup group = new FindLanguageUsages_ActionGroup();\n      manager.registerAction(FindLanguageUsages_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FindModelUsages_ActionGroup group = new FindModelUsages_ActionGroup();\n      manager.registerAction(FindModelUsages_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GenerateCustomMPSBuildForProjectAction_Action action = new GenerateCustomMPSBuildForProjectAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(ProjectAddition_ActionGroup.ID, new ProjectAddition_ActionGroup(), myId);\n  }","id":94266,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GenerateCustomMPSBuildForProjectAction_Action action = new GenerateCustomMPSBuildForProjectAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      ProjectAddition_ActionGroup group = new ProjectAddition_ActionGroup();\n      manager.registerAction(ProjectAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      PrintDFAResult_Action action = new PrintDFAResult_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintInitializationInformation_Action action = new PrintInitializationInformation_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintReachingDefinintionsInformation_Action action = new PrintReachingDefinintionsInformation_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDFA_Action action = new ShowDFA_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(DFAActions_ActionGroup.ID, new DFAActions_ActionGroup(), myId);\n  }","id":94267,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      PrintDFAResult_Action action = new PrintDFAResult_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintInitializationInformation_Action action = new PrintInitializationInformation_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintReachingDefinintionsInformation_Action action = new PrintReachingDefinintionsInformation_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDFA_Action action = new ShowDFA_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      DFAActions_ActionGroup group = new DFAActions_ActionGroup();\n      manager.registerAction(DFAActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ConvertDateTimeOperations_Action action = new ConvertDateTimeOperations_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(DateLangGroup_ActionGroup.ID, new DateLangGroup_ActionGroup(), myId);\n  }","id":94268,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ConvertDateTimeOperations_Action action = new ConvertDateTimeOperations_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      DateLangGroup_ActionGroup group = new DateLangGroup_ActionGroup();\n      manager.registerAction(DateLangGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CopyThisDown_Action action = new CopyThisDown_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteLine_Action action = new DeleteLine_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExtractComponent_Action action = new ExtractComponent_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(EditorActions_ActionGroup.ID, new EditorActions_ActionGroup(), myId);\n  }","id":94269,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CopyThisDown_Action action = new CopyThisDown_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteLine_Action action = new DeleteLine_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExtractComponent_Action action = new ExtractComponent_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      EditorActions_ActionGroup group = new EditorActions_ActionGroup();\n      manager.registerAction(EditorActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // parameterized actions \n\n    // groups \n    manager.registerAction(Make_ActionGroup.ID, new Make_ActionGroup(), myId);\n  }","id":94270,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // groups \n    {\n      Make_ActionGroup group = new Make_ActionGroup();\n      manager.registerAction(Make_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ImportAntStuff_Action action = new ImportAntStuff_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(ProjectPaneLanguageAddition_ActionGroup.ID, new ProjectPaneLanguageAddition_ActionGroup(), myId);\n  }","id":94271,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ImportAntStuff_Action action = new ImportAntStuff_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      ProjectPaneLanguageAddition_ActionGroup group = new ProjectPaneLanguageAddition_ActionGroup();\n      manager.registerAction(ProjectPaneLanguageAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AddAccessoryModel_Action action = new AddAccessoryModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddGeneralPurposeDevKitToLanguageModels_Action action = new AddGeneralPurposeDevKitToLanguageModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddLanguageDesingDevKitToLanguages_Action action = new AddLanguageDesingDevKitToLanguages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddLanguageImport_Action action = new AddLanguageImport_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddMissingImports_Action action = new AddMissingImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModelImportByRoot_Action action = new AddModelImportByRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModelImport_Action action = new AddModelImport_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModuleToProject_Action action = new AddModuleToProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddToNewFavoritesList_Action action = new AddToNewFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AnalyzeClasspath_Action action = new AnalyzeClasspath_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CellProperties_Action action = new CellProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckModel_Action action = new CheckModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckModelsBeforeGeneration_Action action = new CheckModelsBeforeGeneration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckProject_Action action = new CheckProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanAllModules_Action action = new CleanAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanModule_Action action = new CleanModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanProject_Action action = new CleanProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CloneModel_Action action = new CloneModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CloneRoot_Action action = new CloneRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CollapseAll_Action action = new CollapseAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Collapse_Action action = new Collapse_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyModelName_Action action = new CopyModelName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyModuleName_Action action = new CopyModuleName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNodeName_Action action = new CopyNodeName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNodeReference_Action action = new CopyNodeReference_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNode_Action action = new CopyNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CutNode_Action action = new CutNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteFavoritesList_Action action = new DeleteFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteGenerator_Action action = new DeleteGenerator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteModels_Action action = new DeleteModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteModules_Action action = new DeleteModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteNode_Action action = new DeleteNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeletePropertyAction_Action action = new DeletePropertyAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteReferenceAction_Action action = new DeleteReferenceAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DevkitProperties_Action action = new DevkitProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DumpKeyStrokes_Action action = new DumpKeyStrokes_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EditNodeExplicit_Action action = new EditNodeExplicit_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EditNode_Action action = new EditNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      End_Action action = new End_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EvaluateExpression_Action action = new EvaluateExpression_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExpandAll_Action action = new ExpandAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExpandNode_Action action = new ExpandNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Expand_Action action = new Expand_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExportThreads_Action action = new ExportThreads_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FastFindNodeUsages_Action action = new FastFindNodeUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindNext_Action action = new FindNext_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindPrevious_Action action = new FindPrevious_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindSpecificNodeUsages_Action action = new FindSpecificNodeUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Find_Action action = new Find_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindlAllBrokenReferences_Action action = new FindlAllBrokenReferences_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FixDependenciesEverywhere_Action action = new FixDependenciesEverywhere_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FixVirtualPackges_Action action = new FixVirtualPackges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FoldSelection_Action action = new FoldSelection_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateFiles_Action action = new GenerateFiles_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateTextFromSolution_Action action = new GenerateTextFromSolution_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerationIntentions_Action action = new GenerationIntentions_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GeneratorProperties_Action action = new GeneratorProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GetModelContentsFromSource_Action action = new GetModelContentsFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GetModuleContentsFromSource_Action action = new GetModuleContentsFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoByCurrentReference_Action action = new GoByCurrentReference_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark0_Action action = new GoToBookmark0_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark1_Action action = new GoToBookmark1_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark2_Action action = new GoToBookmark2_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark3_Action action = new GoToBookmark3_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark4_Action action = new GoToBookmark4_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark5_Action action = new GoToBookmark5_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark6_Action action = new GoToBookmark6_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark7_Action action = new GoToBookmark7_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark8_Action action = new GoToBookmark8_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark9_Action action = new GoToBookmark9_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToConceptDeclaration_Action action = new GoToConceptDeclaration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToEditorDeclaration_Action action = new GoToEditorDeclaration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToNodeById_Action action = new GoToNodeById_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToRules_Action action = new GoToRules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToUsageInMappingConfig_Action action = new GoToUsageInMappingConfig_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightCellDependencies_Action action = new HighlightCellDependencies_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightInstances_Action action = new HighlightInstances_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightUsages_Action action = new HighlightUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Home_Action action = new Home_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InstallIDEAPlugin_Action action = new InstallIDEAPlugin_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguageHierarchy_Action action = new LanguageHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguagePaths_Action action = new LanguagePaths_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguageProperties_Action action = new LanguageProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LoadNonStubModels_Action action = new LoadNonStubModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LocalEnd_Action action = new LocalEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LocalHome_Action action = new LocalHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MPSProjectPaths_Action action = new MPSProjectPaths_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeAllModules_Action action = new MakeAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeModule_Action action = new MakeModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeProject_Action action = new MakeProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ModelPropertiesWOShortcut_Action action = new ModelPropertiesWOShortcut_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ModelProperties_Action action = new ModelProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MoveFileOrDirectory_Action action = new MoveFileOrDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewAccessoryModel_Action action = new NewAccessoryModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewDevKit_Action action = new NewDevKit_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewDirectory_Action action = new NewDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewFile_Action action = new NewFile_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewGenerator_Action action = new NewGenerator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewModelFromSource_Action action = new NewModelFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewModel_Action action = new NewModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewRuntimeModule_Action action = new NewRuntimeModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewSubModel_Action action = new NewSubModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewSubTestModel_Action action = new NewSubTestModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeImportsInGlobalScope_Action action = new OptimizeImportsInGlobalScope_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeModelImports_Action action = new OptimizeModelImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeModuleImports_Action action = new OptimizeModuleImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeProjectImports_Action action = new OptimizeProjectImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaClass_Action action = new PasteAsJavaClass_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaMethods_Action action = new PasteAsJavaMethods_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaStatements_Action action = new PasteAsJavaStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteNode_Action action = new PasteNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Pause_Action action = new Pause_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintNodeID_Action action = new PrintNodeID_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      QuickCreate_Action action = new QuickCreate_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildAllModules_Action action = new RebuildAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildModule_Action action = new RebuildModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildProject_Action action = new RebuildProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReloadAll_Action action = new ReloadAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReloadStubs_Action action = new ReloadStubs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveAllBookmarks_Action action = new RemoveAllBookmarks_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveBootstrapLanguagesDevKitFromLanguageModels_Action action = new RemoveBootstrapLanguagesDevKitFromLanguageModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveFromFavorites_Action action = new RemoveFromFavorites_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveLanguageDesignDevKitFromModels_Action action = new RemoveLanguageDesignDevKitFromModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveModuleFromProject_Action action = new RemoveModuleFromProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveTransientModels_Action action = new RemoveTransientModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameAspects_Action action = new RenameAspects_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameFavoritesList_Action action = new RenameFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameFileOrDirectory_Action action = new RenameFileOrDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameLanguage_Action action = new RenameLanguage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameModel_Action action = new RenameModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameNamespace_Action action = new RenameNamespace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenamePackage_Action action = new RenamePackage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameSolution_Action action = new RenameSolution_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Resume_Action action = new Resume_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RevertMemoryChanges_Action action = new RevertMemoryChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RootEnd_Action action = new RootEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RootHome_Action action = new RootHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SaveModel_Action action = new SaveModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectDown_Action action = new SelectDown_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectLocalEnd_Action action = new SelectLocalEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectLocalHome_Action action = new SelectLocalHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectUp_Action action = new SelectUp_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark0_Action action = new SetBookmark0_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark1_Action action = new SetBookmark1_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark2_Action action = new SetBookmark2_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark3_Action action = new SetBookmark3_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark4_Action action = new SetBookmark4_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark5_Action action = new SetBookmark5_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark6_Action action = new SetBookmark6_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark7_Action action = new SetBookmark7_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark8_Action action = new SetBookmark8_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark9_Action action = new SetBookmark9_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmarkNoNumber_Action action = new SetBookmarkNoNumber_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetModuleFolder_Action action = new SetModuleFolder_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetNodePackage_Action action = new SetNodePackage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowBookmarksDialog_Action action = new ShowBookmarksDialog_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowBookmarks_Action action = new ShowBookmarks_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowCellInExplorer_Action action = new ShowCellInExplorer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowClassInHierarchy_Action action = new ShowClassInHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowConceptInHierarchy_Action action = new ShowConceptInHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowErrorMessage_Action action = new ShowErrorMessage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowGenerationTrace_Action action = new ShowGenerationTrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowGenerationTraceback_Action action = new ShowGenerationTraceback_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowImplementations_Action action = new ShowImplementations_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInProject_Action action = new ShowInProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowMappingsPartitioning_Action action = new ShowMappingsPartitioning_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModelChecker_Action action = new ShowModelChecker_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModelRepository_Action action = new ShowModelRepository_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModuleDependencies_Action action = new ShowModuleDependencies_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModuleRepository_Action action = new ShowModuleRepository_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInExplorer_Action action = new ShowNodeInExplorer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInInspector_Action action = new ShowNodeInInspector_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInfo_Action action = new ShowNodeInfo_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowParameters_Action action = new ShowParameters_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowReferencesToMissingStuff_Action action = new ShowReferencesToMissingStuff_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SolutionProperties_Action action = new SolutionProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepInto_Action action = new StepInto_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepOut_Action action = new StepOut_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepOver_Action action = new StepOver_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SurroundWithIntentions_Action action = new SurroundWithIntentions_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      TestNodePath_Action action = new TestNodePath_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ToggleBreakpoint_Action action = new ToggleBreakpoint_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceGlobally_Action action = new UpgradeModelPersistenceGlobally_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInModel_Action action = new UpgradeModelPersistenceInModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInModule_Action action = new UpgradeModelPersistenceInModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInProject_Action action = new UpgradeModelPersistenceInProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModulePersistenceGlobally_Action action = new UpgradeModulePersistenceGlobally_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ViewBreakpoints_Action action = new ViewBreakpoints_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(AbstractFileActions_ActionGroup.ID, new AbstractFileActions_ActionGroup(), myId);\n    manager.registerAction(AccessoriesGroupActions_ActionGroup.ID, new AccessoriesGroupActions_ActionGroup(), myId);\n    manager.registerAction(AddToFavoritesGroup_ActionGroup.ID, new AddToFavoritesGroup_ActionGroup(), myId);\n    manager.registerAction(Bookmarks_ActionGroup.ID, new Bookmarks_ActionGroup(), myId);\n    manager.registerAction(Breakpoints_ActionGroup.ID, new Breakpoints_ActionGroup(), myId);\n    manager.registerAction(Build_ActionGroup.ID, new Build_ActionGroup(), myId);\n    manager.registerAction(Code_ActionGroup.ID, new Code_ActionGroup(), myId);\n    manager.registerAction(CreateRootNode_ActionGroup.ID, new CreateRootNode_ActionGroup(), myId);\n    manager.registerAction(DebugRunMenu_ActionGroup.ID, new DebugRunMenu_ActionGroup(), myId);\n    manager.registerAction(DebugTool_ActionGroup.ID, new DebugTool_ActionGroup(), myId);\n    manager.registerAction(DevkitActions_ActionGroup.ID, new DevkitActions_ActionGroup(), myId);\n    manager.registerAction(Edit_ActionGroup.ID, new Edit_ActionGroup(), myId);\n    manager.registerAction(EditorInternal_ActionGroup.ID, new EditorInternal_ActionGroup(), myId);\n    manager.registerAction(EditorLeftPanelMenu_ActionGroup.ID, new EditorLeftPanelMenu_ActionGroup(), myId);\n    manager.registerAction(EditorPopup_ActionGroup.ID, new EditorPopup_ActionGroup(), myId);\n    manager.registerAction(EditorTabActions_ActionGroup.ID, new EditorTabActions_ActionGroup(), myId);\n    manager.registerAction(FavoritesPopupWrapper_ActionGroup.ID, new FavoritesPopupWrapper_ActionGroup(), myId);\n    manager.registerAction(FavoritesPopup_ActionGroup.ID, new FavoritesPopup_ActionGroup(), myId);\n    manager.registerAction(Favorites_ActionGroup.ID, new Favorites_ActionGroup(), myId);\n    manager.registerAction(FileActions_ActionGroup.ID, new FileActions_ActionGroup(), myId);\n    manager.registerAction(FileSystemNewActions_ActionGroup.ID, new FileSystemNewActions_ActionGroup(), myId);\n    manager.registerAction(FolderActions_ActionGroup.ID, new FolderActions_ActionGroup(), myId);\n    manager.registerAction(Folding_ActionGroup.ID, new Folding_ActionGroup(), myId);\n    manager.registerAction(GenerateFavorites_ActionGroup.ID, new GenerateFavorites_ActionGroup(), myId);\n    manager.registerAction(GenerateModels_ActionGroup.ID, new GenerateModels_ActionGroup(), myId);\n    manager.registerAction(GenerateModule_ActionGroup.ID, new GenerateModule_ActionGroup(), myId);\n    manager.registerAction(Generate_ActionGroup.ID, new Generate_ActionGroup(), myId);\n    manager.registerAction(GeneratorActions_ActionGroup.ID, new GeneratorActions_ActionGroup(), myId);\n    manager.registerAction(GeneratorNewActions_ActionGroup.ID, new GeneratorNewActions_ActionGroup(), myId);\n    manager.registerAction(GoByReference_ActionGroup.ID, new GoByReference_ActionGroup(), myId);\n    manager.registerAction(Goto_ActionGroup.ID, new Goto_ActionGroup(), myId);\n    manager.registerAction(InEditorActions_ActionGroup.ID, new InEditorActions_ActionGroup(), myId);\n    manager.registerAction(JUnitTestCaseActions_ActionGroup.ID, new JUnitTestCaseActions_ActionGroup(), myId);\n    manager.registerAction(JUnitTestMethodActions_ActionGroup.ID, new JUnitTestMethodActions_ActionGroup(), myId);\n    manager.registerAction(LanguageActions_ActionGroup.ID, new LanguageActions_ActionGroup(), myId);\n    manager.registerAction(LanguageNewActions_ActionGroup.ID, new LanguageNewActions_ActionGroup(), myId);\n    manager.registerAction(LanguageNewCustomPartActions_ActionGroup.ID, new LanguageNewCustomPartActions_ActionGroup(), myId);\n    manager.registerAction(LanguageRefactoring_ActionGroup.ID, new LanguageRefactoring_ActionGroup(), myId);\n    manager.registerAction(ModelActionsInternal_ActionGroup.ID, new ModelActionsInternal_ActionGroup(), myId);\n    manager.registerAction(ModelActions_ActionGroup.ID, new ModelActions_ActionGroup(), myId);\n    manager.registerAction(ModelNewActions_ActionGroup.ID, new ModelNewActions_ActionGroup(), myId);\n    manager.registerAction(ModelRefactoring_ActionGroup.ID, new ModelRefactoring_ActionGroup(), myId);\n    manager.registerAction(ModuleActions_ActionGroup.ID, new ModuleActions_ActionGroup(), myId);\n    manager.registerAction(NamespaceActions_ActionGroup.ID, new NamespaceActions_ActionGroup(), myId);\n    manager.registerAction(NamespaceInternalActions_ActionGroup.ID, new NamespaceInternalActions_ActionGroup(), myId);\n    manager.registerAction(NodeActionsInternal_ActionGroup.ID, new NodeActionsInternal_ActionGroup(), myId);\n    manager.registerAction(NodeActions_ActionGroup.ID, new NodeActions_ActionGroup(), myId);\n    manager.registerAction(PackageActions_ActionGroup.ID, new PackageActions_ActionGroup(), myId);\n    manager.registerAction(PackageNewActions_ActionGroup.ID, new PackageNewActions_ActionGroup(), myId);\n    manager.registerAction(ProjectActions_ActionGroup.ID, new ProjectActions_ActionGroup(), myId);\n    manager.registerAction(ProjectNewActions_ActionGroup.ID, new ProjectNewActions_ActionGroup(), myId);\n    manager.registerAction(PropertyNodeActions_ActionGroup.ID, new PropertyNodeActions_ActionGroup(), myId);\n    manager.registerAction(ReferenceNodeActions_ActionGroup.ID, new ReferenceNodeActions_ActionGroup(), myId);\n    manager.registerAction(RuntimeFolderActions_ActionGroup.ID, new RuntimeFolderActions_ActionGroup(), myId);\n    manager.registerAction(SaveTransientModels_ActionGroup.ID, new SaveTransientModels_ActionGroup(), myId);\n    manager.registerAction(Search_ActionGroup.ID, new Search_ActionGroup(), myId);\n    manager.registerAction(SolutionActions_ActionGroup.ID, new SolutionActions_ActionGroup(), myId);\n    manager.registerAction(SolutionNewActions_ActionGroup.ID, new SolutionNewActions_ActionGroup(), myId);\n    manager.registerAction(SolutionRefactoring_ActionGroup.ID, new SolutionRefactoring_ActionGroup(), myId);\n    manager.registerAction(ToolsInternal_ActionGroup.ID, new ToolsInternal_ActionGroup(), myId);\n    manager.registerAction(ToolsUpgrade_ActionGroup.ID, new ToolsUpgrade_ActionGroup(), myId);\n    manager.registerAction(Tools_ActionGroup.ID, new Tools_ActionGroup(), myId);\n    manager.registerAction(TransientModulesActions_ActionGroup.ID, new TransientModulesActions_ActionGroup(), myId);\n  }","id":94272,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AddAccessoryModel_Action action = new AddAccessoryModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddGeneralPurposeDevKitToLanguageModels_Action action = new AddGeneralPurposeDevKitToLanguageModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddLanguageDesingDevKitToLanguages_Action action = new AddLanguageDesingDevKitToLanguages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddLanguageImport_Action action = new AddLanguageImport_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddMissingImports_Action action = new AddMissingImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModelImportByRoot_Action action = new AddModelImportByRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModelImport_Action action = new AddModelImport_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddModuleToProject_Action action = new AddModuleToProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AddToNewFavoritesList_Action action = new AddToNewFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      AnalyzeClasspath_Action action = new AnalyzeClasspath_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CellProperties_Action action = new CellProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckModel_Action action = new CheckModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckModelsBeforeGeneration_Action action = new CheckModelsBeforeGeneration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckProject_Action action = new CheckProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanAllModules_Action action = new CleanAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanModule_Action action = new CleanModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CleanProject_Action action = new CleanProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CloneModel_Action action = new CloneModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CloneRoot_Action action = new CloneRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CollapseAll_Action action = new CollapseAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Collapse_Action action = new Collapse_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyModelName_Action action = new CopyModelName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyModuleName_Action action = new CopyModuleName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNodeName_Action action = new CopyNodeName_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNodeReference_Action action = new CopyNodeReference_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CopyNode_Action action = new CopyNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CutNode_Action action = new CutNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteFavoritesList_Action action = new DeleteFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteGenerator_Action action = new DeleteGenerator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteModels_Action action = new DeleteModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteModules_Action action = new DeleteModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteNode_Action action = new DeleteNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeletePropertyAction_Action action = new DeletePropertyAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DeleteReferenceAction_Action action = new DeleteReferenceAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DevkitProperties_Action action = new DevkitProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DumpKeyStrokes_Action action = new DumpKeyStrokes_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EditNodeExplicit_Action action = new EditNodeExplicit_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EditNode_Action action = new EditNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      End_Action action = new End_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      EvaluateExpression_Action action = new EvaluateExpression_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExpandAll_Action action = new ExpandAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExpandNode_Action action = new ExpandNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Expand_Action action = new Expand_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ExportThreads_Action action = new ExportThreads_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FastFindNodeUsages_Action action = new FastFindNodeUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindNext_Action action = new FindNext_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindPrevious_Action action = new FindPrevious_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindSpecificNodeUsages_Action action = new FindSpecificNodeUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Find_Action action = new Find_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindlAllBrokenReferences_Action action = new FindlAllBrokenReferences_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FixDependenciesEverywhere_Action action = new FixDependenciesEverywhere_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FixVirtualPackges_Action action = new FixVirtualPackges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FoldSelection_Action action = new FoldSelection_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateFiles_Action action = new GenerateFiles_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateTextFromSolution_Action action = new GenerateTextFromSolution_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerationIntentions_Action action = new GenerationIntentions_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GeneratorProperties_Action action = new GeneratorProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GetModelContentsFromSource_Action action = new GetModelContentsFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GetModuleContentsFromSource_Action action = new GetModuleContentsFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoByCurrentReference_Action action = new GoByCurrentReference_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark0_Action action = new GoToBookmark0_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark1_Action action = new GoToBookmark1_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark2_Action action = new GoToBookmark2_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark3_Action action = new GoToBookmark3_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark4_Action action = new GoToBookmark4_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark5_Action action = new GoToBookmark5_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark6_Action action = new GoToBookmark6_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark7_Action action = new GoToBookmark7_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark8_Action action = new GoToBookmark8_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToBookmark9_Action action = new GoToBookmark9_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToConceptDeclaration_Action action = new GoToConceptDeclaration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToEditorDeclaration_Action action = new GoToEditorDeclaration_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToNodeById_Action action = new GoToNodeById_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToRules_Action action = new GoToRules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToUsageInMappingConfig_Action action = new GoToUsageInMappingConfig_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightCellDependencies_Action action = new HighlightCellDependencies_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightInstances_Action action = new HighlightInstances_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      HighlightUsages_Action action = new HighlightUsages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Home_Action action = new Home_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InstallIDEAPlugin_Action action = new InstallIDEAPlugin_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguageHierarchy_Action action = new LanguageHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguagePaths_Action action = new LanguagePaths_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LanguageProperties_Action action = new LanguageProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LoadNonStubModels_Action action = new LoadNonStubModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LocalEnd_Action action = new LocalEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      LocalHome_Action action = new LocalHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MPSProjectPaths_Action action = new MPSProjectPaths_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeAllModules_Action action = new MakeAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeModule_Action action = new MakeModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MakeProject_Action action = new MakeProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ModelPropertiesWOShortcut_Action action = new ModelPropertiesWOShortcut_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ModelProperties_Action action = new ModelProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      MoveFileOrDirectory_Action action = new MoveFileOrDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewAccessoryModel_Action action = new NewAccessoryModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewDevKit_Action action = new NewDevKit_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewDirectory_Action action = new NewDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewFile_Action action = new NewFile_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewGenerator_Action action = new NewGenerator_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewModelFromSource_Action action = new NewModelFromSource_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewModel_Action action = new NewModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewRuntimeModule_Action action = new NewRuntimeModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewSubModel_Action action = new NewSubModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      NewSubTestModel_Action action = new NewSubTestModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeImportsInGlobalScope_Action action = new OptimizeImportsInGlobalScope_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeModelImports_Action action = new OptimizeModelImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeModuleImports_Action action = new OptimizeModuleImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      OptimizeProjectImports_Action action = new OptimizeProjectImports_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaClass_Action action = new PasteAsJavaClass_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaMethods_Action action = new PasteAsJavaMethods_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteAsJavaStatements_Action action = new PasteAsJavaStatements_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PasteNode_Action action = new PasteNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Pause_Action action = new Pause_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      PrintNodeID_Action action = new PrintNodeID_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      QuickCreate_Action action = new QuickCreate_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildAllModules_Action action = new RebuildAllModules_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildModule_Action action = new RebuildModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RebuildProject_Action action = new RebuildProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReloadAll_Action action = new ReloadAll_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReloadStubs_Action action = new ReloadStubs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveAllBookmarks_Action action = new RemoveAllBookmarks_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveBootstrapLanguagesDevKitFromLanguageModels_Action action = new RemoveBootstrapLanguagesDevKitFromLanguageModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveFromFavorites_Action action = new RemoveFromFavorites_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveLanguageDesignDevKitFromModels_Action action = new RemoveLanguageDesignDevKitFromModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveModuleFromProject_Action action = new RemoveModuleFromProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RemoveTransientModels_Action action = new RemoveTransientModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameAspects_Action action = new RenameAspects_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameFavoritesList_Action action = new RenameFavoritesList_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameFileOrDirectory_Action action = new RenameFileOrDirectory_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameLanguage_Action action = new RenameLanguage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameModel_Action action = new RenameModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameNamespace_Action action = new RenameNamespace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenamePackage_Action action = new RenamePackage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RenameSolution_Action action = new RenameSolution_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Resume_Action action = new Resume_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RevertMemoryChanges_Action action = new RevertMemoryChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RootEnd_Action action = new RootEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RootHome_Action action = new RootHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SaveModel_Action action = new SaveModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectDown_Action action = new SelectDown_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectLocalEnd_Action action = new SelectLocalEnd_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectLocalHome_Action action = new SelectLocalHome_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SelectUp_Action action = new SelectUp_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark0_Action action = new SetBookmark0_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark1_Action action = new SetBookmark1_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark2_Action action = new SetBookmark2_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark3_Action action = new SetBookmark3_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark4_Action action = new SetBookmark4_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark5_Action action = new SetBookmark5_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark6_Action action = new SetBookmark6_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark7_Action action = new SetBookmark7_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark8_Action action = new SetBookmark8_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmark9_Action action = new SetBookmark9_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetBookmarkNoNumber_Action action = new SetBookmarkNoNumber_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetModuleFolder_Action action = new SetModuleFolder_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SetNodePackage_Action action = new SetNodePackage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowBookmarksDialog_Action action = new ShowBookmarksDialog_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowBookmarks_Action action = new ShowBookmarks_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowCellInExplorer_Action action = new ShowCellInExplorer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowClassInHierarchy_Action action = new ShowClassInHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowConceptInHierarchy_Action action = new ShowConceptInHierarchy_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowErrorMessage_Action action = new ShowErrorMessage_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowGenerationTrace_Action action = new ShowGenerationTrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowGenerationTraceback_Action action = new ShowGenerationTraceback_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowImplementations_Action action = new ShowImplementations_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInProject_Action action = new ShowInProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowMappingsPartitioning_Action action = new ShowMappingsPartitioning_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModelChecker_Action action = new ShowModelChecker_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModelRepository_Action action = new ShowModelRepository_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModuleDependencies_Action action = new ShowModuleDependencies_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowModuleRepository_Action action = new ShowModuleRepository_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInExplorer_Action action = new ShowNodeInExplorer_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInInspector_Action action = new ShowNodeInInspector_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeInfo_Action action = new ShowNodeInfo_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowParameters_Action action = new ShowParameters_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowReferencesToMissingStuff_Action action = new ShowReferencesToMissingStuff_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SolutionProperties_Action action = new SolutionProperties_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepInto_Action action = new StepInto_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepOut_Action action = new StepOut_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      StepOver_Action action = new StepOver_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      SurroundWithIntentions_Action action = new SurroundWithIntentions_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      TestNodePath_Action action = new TestNodePath_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ToggleBreakpoint_Action action = new ToggleBreakpoint_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceGlobally_Action action = new UpgradeModelPersistenceGlobally_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInModel_Action action = new UpgradeModelPersistenceInModel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInModule_Action action = new UpgradeModelPersistenceInModule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModelPersistenceInProject_Action action = new UpgradeModelPersistenceInProject_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      UpgradeModulePersistenceGlobally_Action action = new UpgradeModulePersistenceGlobally_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ViewBreakpoints_Action action = new ViewBreakpoints_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      AbstractFileActions_ActionGroup group = new AbstractFileActions_ActionGroup();\n      manager.registerAction(AbstractFileActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      AccessoriesGroupActions_ActionGroup group = new AccessoriesGroupActions_ActionGroup();\n      manager.registerAction(AccessoriesGroupActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      AddToFavoritesGroup_ActionGroup group = new AddToFavoritesGroup_ActionGroup();\n      manager.registerAction(AddToFavoritesGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Bookmarks_ActionGroup group = new Bookmarks_ActionGroup();\n      manager.registerAction(Bookmarks_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Breakpoints_ActionGroup group = new Breakpoints_ActionGroup();\n      manager.registerAction(Breakpoints_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Build_ActionGroup group = new Build_ActionGroup();\n      manager.registerAction(Build_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Code_ActionGroup group = new Code_ActionGroup();\n      manager.registerAction(Code_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      CreateRootNode_ActionGroup group = new CreateRootNode_ActionGroup();\n      manager.registerAction(CreateRootNode_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      DebugRunMenu_ActionGroup group = new DebugRunMenu_ActionGroup();\n      manager.registerAction(DebugRunMenu_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      DebugTool_ActionGroup group = new DebugTool_ActionGroup();\n      manager.registerAction(DebugTool_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      DevkitActions_ActionGroup group = new DevkitActions_ActionGroup();\n      manager.registerAction(DevkitActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Edit_ActionGroup group = new Edit_ActionGroup();\n      manager.registerAction(Edit_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      EditorInternal_ActionGroup group = new EditorInternal_ActionGroup();\n      manager.registerAction(EditorInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      EditorLeftPanelMenu_ActionGroup group = new EditorLeftPanelMenu_ActionGroup();\n      manager.registerAction(EditorLeftPanelMenu_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      EditorPopup_ActionGroup group = new EditorPopup_ActionGroup();\n      manager.registerAction(EditorPopup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      EditorTabActions_ActionGroup group = new EditorTabActions_ActionGroup();\n      manager.registerAction(EditorTabActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FavoritesPopupWrapper_ActionGroup group = new FavoritesPopupWrapper_ActionGroup();\n      manager.registerAction(FavoritesPopupWrapper_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FavoritesPopup_ActionGroup group = new FavoritesPopup_ActionGroup();\n      manager.registerAction(FavoritesPopup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Favorites_ActionGroup group = new Favorites_ActionGroup();\n      manager.registerAction(Favorites_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FileActions_ActionGroup group = new FileActions_ActionGroup();\n      manager.registerAction(FileActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FileSystemNewActions_ActionGroup group = new FileSystemNewActions_ActionGroup();\n      manager.registerAction(FileSystemNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FolderActions_ActionGroup group = new FolderActions_ActionGroup();\n      manager.registerAction(FolderActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Folding_ActionGroup group = new Folding_ActionGroup();\n      manager.registerAction(Folding_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GenerateFavorites_ActionGroup group = new GenerateFavorites_ActionGroup();\n      manager.registerAction(GenerateFavorites_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GenerateModels_ActionGroup group = new GenerateModels_ActionGroup();\n      manager.registerAction(GenerateModels_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GenerateModule_ActionGroup group = new GenerateModule_ActionGroup();\n      manager.registerAction(GenerateModule_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Generate_ActionGroup group = new Generate_ActionGroup();\n      manager.registerAction(Generate_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GeneratorActions_ActionGroup group = new GeneratorActions_ActionGroup();\n      manager.registerAction(GeneratorActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GeneratorNewActions_ActionGroup group = new GeneratorNewActions_ActionGroup();\n      manager.registerAction(GeneratorNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GoByReference_ActionGroup group = new GoByReference_ActionGroup();\n      manager.registerAction(GoByReference_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Goto_ActionGroup group = new Goto_ActionGroup();\n      manager.registerAction(Goto_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      InEditorActions_ActionGroup group = new InEditorActions_ActionGroup();\n      manager.registerAction(InEditorActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      JUnitTestCaseActions_ActionGroup group = new JUnitTestCaseActions_ActionGroup();\n      manager.registerAction(JUnitTestCaseActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      JUnitTestMethodActions_ActionGroup group = new JUnitTestMethodActions_ActionGroup();\n      manager.registerAction(JUnitTestMethodActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      LanguageActions_ActionGroup group = new LanguageActions_ActionGroup();\n      manager.registerAction(LanguageActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      LanguageNewActions_ActionGroup group = new LanguageNewActions_ActionGroup();\n      manager.registerAction(LanguageNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      LanguageNewCustomPartActions_ActionGroup group = new LanguageNewCustomPartActions_ActionGroup();\n      manager.registerAction(LanguageNewCustomPartActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      LanguageRefactoring_ActionGroup group = new LanguageRefactoring_ActionGroup();\n      manager.registerAction(LanguageRefactoring_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ModelActionsInternal_ActionGroup group = new ModelActionsInternal_ActionGroup();\n      manager.registerAction(ModelActionsInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ModelActions_ActionGroup group = new ModelActions_ActionGroup();\n      manager.registerAction(ModelActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ModelNewActions_ActionGroup group = new ModelNewActions_ActionGroup();\n      manager.registerAction(ModelNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ModelRefactoring_ActionGroup group = new ModelRefactoring_ActionGroup();\n      manager.registerAction(ModelRefactoring_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ModuleActions_ActionGroup group = new ModuleActions_ActionGroup();\n      manager.registerAction(ModuleActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      NamespaceActions_ActionGroup group = new NamespaceActions_ActionGroup();\n      manager.registerAction(NamespaceActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      NamespaceInternalActions_ActionGroup group = new NamespaceInternalActions_ActionGroup();\n      manager.registerAction(NamespaceInternalActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      NodeActionsInternal_ActionGroup group = new NodeActionsInternal_ActionGroup();\n      manager.registerAction(NodeActionsInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      NodeActions_ActionGroup group = new NodeActions_ActionGroup();\n      manager.registerAction(NodeActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      PackageActions_ActionGroup group = new PackageActions_ActionGroup();\n      manager.registerAction(PackageActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      PackageNewActions_ActionGroup group = new PackageNewActions_ActionGroup();\n      manager.registerAction(PackageNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ProjectActions_ActionGroup group = new ProjectActions_ActionGroup();\n      manager.registerAction(ProjectActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ProjectNewActions_ActionGroup group = new ProjectNewActions_ActionGroup();\n      manager.registerAction(ProjectNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      PropertyNodeActions_ActionGroup group = new PropertyNodeActions_ActionGroup();\n      manager.registerAction(PropertyNodeActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ReferenceNodeActions_ActionGroup group = new ReferenceNodeActions_ActionGroup();\n      manager.registerAction(ReferenceNodeActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      RuntimeFolderActions_ActionGroup group = new RuntimeFolderActions_ActionGroup();\n      manager.registerAction(RuntimeFolderActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      SaveTransientModels_ActionGroup group = new SaveTransientModels_ActionGroup();\n      manager.registerAction(SaveTransientModels_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Search_ActionGroup group = new Search_ActionGroup();\n      manager.registerAction(Search_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      SolutionActions_ActionGroup group = new SolutionActions_ActionGroup();\n      manager.registerAction(SolutionActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      SolutionNewActions_ActionGroup group = new SolutionNewActions_ActionGroup();\n      manager.registerAction(SolutionNewActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      SolutionRefactoring_ActionGroup group = new SolutionRefactoring_ActionGroup();\n      manager.registerAction(SolutionRefactoring_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ToolsInternal_ActionGroup group = new ToolsInternal_ActionGroup();\n      manager.registerAction(ToolsInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ToolsUpgrade_ActionGroup group = new ToolsUpgrade_ActionGroup();\n      manager.registerAction(ToolsUpgrade_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Tools_ActionGroup group = new Tools_ActionGroup();\n      manager.registerAction(Tools_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      TransientModulesActions_ActionGroup group = new TransientModulesActions_ActionGroup();\n      manager.registerAction(TransientModulesActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CheckCoreRuntimeDeps_Action action = new CheckCoreRuntimeDeps_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckIncludedLanguages_Action action = new CheckIncludedLanguages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckSamples_Action action = new CheckSamples_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(InternalChecks_ActionGroup.ID, new InternalChecks_ActionGroup(), myId);\n  }","id":94273,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CheckCoreRuntimeDeps_Action action = new CheckCoreRuntimeDeps_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckIncludedLanguages_Action action = new CheckIncludedLanguages_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      CheckSamples_Action action = new CheckSamples_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      InternalChecks_ActionGroup group = new InternalChecks_ActionGroup();\n      manager.registerAction(InternalChecks_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GenerateBuildAction_Action action = new GenerateBuildAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateBuildForProjectAction_Action action = new GenerateBuildForProjectAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(ProjectPaneModelAddition_ActionGroup.ID, new ProjectPaneModelAddition_ActionGroup(), myId);\n    manager.registerAction(ProjectPaneProjectAddition_ActionGroup.ID, new ProjectPaneProjectAddition_ActionGroup(), myId);\n  }","id":94274,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GenerateBuildAction_Action action = new GenerateBuildAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GenerateBuildForProjectAction_Action action = new GenerateBuildForProjectAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      ProjectPaneModelAddition_ActionGroup group = new ProjectPaneModelAddition_ActionGroup();\n      manager.registerAction(ProjectPaneModelAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ProjectPaneProjectAddition_ActionGroup group = new ProjectPaneProjectAddition_ActionGroup();\n      manager.registerAction(ProjectPaneProjectAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      FindInstancesByConditionAndNode_Action action = new FindInstancesByConditionAndNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindInstancesByCondition_Action action = new FindInstancesByCondition_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReplacementQueryActionWithNode_Action action = new ReplacementQueryActionWithNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReplacementQueryAction_Action action = new ReplacementQueryAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, new FindInstancesByConditionAndNodeGroup_ActionGroup(), myId);\n    manager.registerAction(FindInstancesByConditionGroup_ActionGroup.ID, new FindInstancesByConditionGroup_ActionGroup(), myId);\n  }","id":94275,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      FindInstancesByConditionAndNode_Action action = new FindInstancesByConditionAndNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      FindInstancesByCondition_Action action = new FindInstancesByCondition_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReplacementQueryActionWithNode_Action action = new ReplacementQueryActionWithNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReplacementQueryAction_Action action = new ReplacementQueryAction_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      FindInstancesByConditionAndNodeGroup_ActionGroup group = new FindInstancesByConditionAndNodeGroup_ActionGroup();\n      manager.registerAction(FindInstancesByConditionAndNodeGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      FindInstancesByConditionGroup_ActionGroup group = new FindInstancesByConditionGroup_ActionGroup();\n      manager.registerAction(FindInstancesByConditionGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ShowMetaLevel_Action action = new ShowMetaLevel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(MetaLevelActions_ActionGroup.ID, new MetaLevelActions_ActionGroup(), myId);\n  }","id":94276,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ShowMetaLevel_Action action = new ShowMetaLevel_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      MetaLevelActions_ActionGroup group = new MetaLevelActions_ActionGroup();\n      manager.registerAction(MetaLevelActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // parameterized actions \n\n    // groups \n    manager.registerAction(ModelRefactorings_ActionGroup.ID, new ModelRefactorings_ActionGroup(), myId);\n    manager.registerAction(NodeRefactoring_ActionGroup.ID, new NodeRefactoring_ActionGroup(), myId);\n  }","id":94277,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // groups \n    {\n      ModelRefactorings_ActionGroup group = new ModelRefactorings_ActionGroup();\n      manager.registerAction(ModelRefactorings_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      NodeRefactoring_ActionGroup group = new NodeRefactoring_ActionGroup();\n      manager.registerAction(NodeRefactoring_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // parameterized actions \n\n    // groups \n    manager.registerAction(ScriptsForSelection_ActionGroup.ID, new ScriptsForSelection_ActionGroup(), myId);\n    manager.registerAction(ScriptsGlobally_ActionGroup.ID, new ScriptsGlobally_ActionGroup(), myId);\n  }","id":94278,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    // groups \n    {\n      ScriptsForSelection_ActionGroup group = new ScriptsForSelection_ActionGroup();\n      manager.registerAction(ScriptsForSelection_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ScriptsGlobally_ActionGroup group = new ScriptsGlobally_ActionGroup();\n      manager.registerAction(ScriptsGlobally_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CheckLangForJavaStubModels_Action action = new CheckLangForJavaStubModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(LanguageInternalAddition_ActionGroup.ID, new LanguageInternalAddition_ActionGroup(), myId);\n  }","id":94279,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      CheckLangForJavaStubModels_Action action = new CheckLangForJavaStubModels_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      LanguageInternalAddition_ActionGroup group = new LanguageInternalAddition_ActionGroup();\n      manager.registerAction(LanguageInternalAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ShowConceptStructure_Action action = new ShowConceptStructure_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDefaultHelp_Action action = new ShowDefaultHelp_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForAspect_Action action = new ShowHelpForAspect_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForNode_Action action = new ShowHelpForNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForRoot_Action action = new ShowHelpForRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(ShowHelp_ActionGroup.ID, new ShowHelp_ActionGroup(), myId);\n    manager.registerAction(Structure_ActionGroup.ID, new Structure_ActionGroup(), myId);\n  }","id":94280,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      ShowConceptStructure_Action action = new ShowConceptStructure_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDefaultHelp_Action action = new ShowDefaultHelp_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForAspect_Action action = new ShowHelpForAspect_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForNode_Action action = new ShowHelpForNode_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowHelpForRoot_Action action = new ShowHelpForRoot_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      ShowHelp_ActionGroup group = new ShowHelp_ActionGroup();\n      manager.registerAction(ShowHelp_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      Structure_ActionGroup group = new Structure_ActionGroup();\n      manager.registerAction(Structure_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      RunTestInMPS_Action action = new RunTestInMPS_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(EditorInternalAddition_ActionGroup.ID, new EditorInternalAddition_ActionGroup(), myId);\n  }","id":94281,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      RunTestInMPS_Action action = new RunTestInMPS_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      EditorInternalAddition_ActionGroup group = new EditorInternalAddition_ActionGroup();\n      manager.registerAction(EditorInternalAddition_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GoToTypeErrorRule_Action action = new GoToTypeErrorRule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInequationsForCell_Action action = new ShowInequationsForCell_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInferredNodeType_Action action = new ShowInferredNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeType_Action action = new ShowNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowRulesWhichAffectNodeType_Action action = new ShowRulesWhichAffectNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowTypeSystemTrace_Action action = new ShowTypeSystemTrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(GoToTypeErrorGroup_ActionGroup.ID, new GoToTypeErrorGroup_ActionGroup(), myId);\n    manager.registerAction(TypesystemActions_ActionGroup.ID, new TypesystemActions_ActionGroup(), myId);\n    manager.registerAction(TypesystemEditorPopupInternal_ActionGroup.ID, new TypesystemEditorPopupInternal_ActionGroup(), myId);\n    manager.registerAction(TypesystemNodeActions_ActionGroup.ID, new TypesystemNodeActions_ActionGroup(), myId);\n  }","id":94282,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      GoToTypeErrorRule_Action action = new GoToTypeErrorRule_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInequationsForCell_Action action = new ShowInequationsForCell_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowInferredNodeType_Action action = new ShowInferredNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowNodeType_Action action = new ShowNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowRulesWhichAffectNodeType_Action action = new ShowRulesWhichAffectNodeType_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowTypeSystemTrace_Action action = new ShowTypeSystemTrace_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      GoToTypeErrorGroup_ActionGroup group = new GoToTypeErrorGroup_ActionGroup();\n      manager.registerAction(GoToTypeErrorGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      TypesystemActions_ActionGroup group = new TypesystemActions_ActionGroup();\n      manager.registerAction(TypesystemActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      TypesystemEditorPopupInternal_ActionGroup group = new TypesystemEditorPopupInternal_ActionGroup();\n      manager.registerAction(TypesystemEditorPopupInternal_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      TypesystemNodeActions_ActionGroup group = new TypesystemNodeActions_ActionGroup();\n      manager.registerAction(TypesystemNodeActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AddToVcs_Action action = new AddToVcs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Annotate_Action action = new Annotate_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DumpChangesManager_Action action = new DumpChangesManager_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ForceRefreshModelChanges_Action action = new ForceRefreshModelChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToNextChange_Action action = new GoToNextChange_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToPreviousChange_Action action = new GoToPreviousChange_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IgnoreInVcs_Action action = new IgnoreInVcs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InstallCustomMergeDriver_Action action = new InstallCustomMergeDriver_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReRunMergeFromBackup_Action action = new ReRunMergeFromBackup_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RollbackChanges_Action action = new RollbackChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDifferencesWithModelOnDisk_Action action = new ShowDifferencesWithModelOnDisk_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDiffererenesWithCurrentRevision_Action action = new ShowDiffererenesWithCurrentRevision_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // parameterized actions \n\n    // groups \n    manager.registerAction(AnnotateGroup_ActionGroup.ID, new AnnotateGroup_ActionGroup(), myId);\n    manager.registerAction(ChangesStrip_ActionGroup.ID, new ChangesStrip_ActionGroup(), myId);\n    manager.registerAction(EditorInternalVCS_ActionGroup.ID, new EditorInternalVCS_ActionGroup(), myId);\n    manager.registerAction(GoToVCS_ActionGroup.ID, new GoToVCS_ActionGroup(), myId);\n    manager.registerAction(InstallCustomMergeDriverGroup_ActionGroup.ID, new InstallCustomMergeDriverGroup_ActionGroup(), myId);\n    manager.registerAction(ShowDiffWithCurrRev_ActionGroup.ID, new ShowDiffWithCurrRev_ActionGroup(), myId);\n    manager.registerAction(VCSModelActions_ActionGroup.ID, new VCSModelActions_ActionGroup(), myId);\n    manager.registerAction(VCS_ActionGroup.ID, new VCS_ActionGroup(), myId);\n  }","id":94283,"modified_method":"public void createGroups() {\n    ActionManager manager = ActionManager.getInstance();\n    // actions w/o parameters \n    {\n      AddToVcs_Action action = new AddToVcs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      Annotate_Action action = new Annotate_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      DumpChangesManager_Action action = new DumpChangesManager_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ForceRefreshModelChanges_Action action = new ForceRefreshModelChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToNextChange_Action action = new GoToNextChange_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      GoToPreviousChange_Action action = new GoToPreviousChange_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      IgnoreInVcs_Action action = new IgnoreInVcs_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      InstallCustomMergeDriver_Action action = new InstallCustomMergeDriver_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ReRunMergeFromBackup_Action action = new ReRunMergeFromBackup_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      RollbackChanges_Action action = new RollbackChanges_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDifferencesWithModelOnDisk_Action action = new ShowDifferencesWithModelOnDisk_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    {\n      ShowDiffererenesWithCurrentRevision_Action action = new ShowDiffererenesWithCurrentRevision_Action();\n      manager.registerAction(action.getActionId(), action, myId);\n    }\n    // groups \n    {\n      AnnotateGroup_ActionGroup group = new AnnotateGroup_ActionGroup();\n      manager.registerAction(AnnotateGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ChangesStrip_ActionGroup group = new ChangesStrip_ActionGroup();\n      manager.registerAction(ChangesStrip_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      EditorInternalVCS_ActionGroup group = new EditorInternalVCS_ActionGroup();\n      manager.registerAction(EditorInternalVCS_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      GoToVCS_ActionGroup group = new GoToVCS_ActionGroup();\n      manager.registerAction(GoToVCS_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      InstallCustomMergeDriverGroup_ActionGroup group = new InstallCustomMergeDriverGroup_ActionGroup();\n      manager.registerAction(InstallCustomMergeDriverGroup_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      ShowDiffWithCurrRev_ActionGroup group = new ShowDiffWithCurrRev_ActionGroup();\n      manager.registerAction(ShowDiffWithCurrRev_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      VCSModelActions_ActionGroup group = new VCSModelActions_ActionGroup();\n      manager.registerAction(VCSModelActions_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n    {\n      VCS_ActionGroup group = new VCS_ActionGroup();\n      manager.registerAction(VCS_ActionGroup.ID, group, myId);\n      addGroup(group);\n    }\n  }","commit_id":"0c5a53027b5d280a5aeafe54d65f100270e3efe8","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean isLocationInExpandControl(JTree aTree, TreePath path, int mouseX, int mouseY) {\n    TreeModel treeModel = aTree.getModel();\n\n    final BasicTreeUI basicTreeUI = (BasicTreeUI)aTree.getUI();\n    Icon expandedIcon = basicTreeUI.getExpandedIcon();\n\n    if (path != null && !treeModel.isLeaf(path.getLastPathComponent())) {\n      int boxWidth;\n      Insets i = aTree.getInsets();\n\n      if (expandedIcon != null) {\n        boxWidth = expandedIcon.getIconWidth();\n      }\n      else {\n        boxWidth = 8;\n      }\n\n      int boxLeftX = i != null ? i.left : 0;\n\n      boolean leftToRight = aTree.getComponentOrientation().isLeftToRight();\n      int depthOffset = getDepthOffset(aTree);\n      int totalChildIndent = basicTreeUI.getLeftChildIndent() + basicTreeUI.getRightChildIndent();\n\n      if (leftToRight) {\n        boxLeftX += ((path.getPathCount() + depthOffset - 2) * totalChildIndent + basicTreeUI.getLeftChildIndent()) -\n            boxWidth / 2;\n      }\n      int boxRightX = boxLeftX + boxWidth;\n\n      return mouseX >= boxLeftX && mouseX <= boxRightX;\n    }\n    return false;\n  }","id":94284,"modified_method":"private static boolean isLocationInExpandControl(JTree aTree, TreePath path, int mouseX, int mouseY) {\n    Range<Integer> box = TreeUtil.getExpandControlRange(aTree, path);\n    return box != null && box.isWithin(mouseX);\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void movePageDown(final JTree tree) {\n    final int visible = getVisibleRowCount(tree);\n    if (visible <= 0){\n      moveEnd(tree);\n      return;\n    }\n    final int size = tree.getRowCount();\n    final int increment = visible - 1;\n    final int index = Math.min(getSelectedRow(tree) + increment, size - 1);\n    final int top = getFirstVisibleRow(tree) + increment;\n    final int bottom = top + visible - 1;\n    showAndSelect(tree, top, bottom, index, true);\n  }","id":94285,"modified_method":"private static void movePageDown(final JTree tree) {\n    final int visible = getVisibleRowCount(tree);\n    if (visible <= 0){\n      moveEnd(tree);\n      return;\n    }\n    final int size = tree.getRowCount();\n    final int increment = visible - 1;\n    final int index = Math.min(getSelectedRow(tree) + increment, size - 1);\n    final int top = getFirstVisibleRow(tree) + increment;\n    final int bottom = top + visible - 1;\n    showAndSelect(tree, top, bottom, index, getSelectedRow(tree));\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void moveUp(final JTree tree) {\n    int row = getSelectedRow(tree);\n    if (row > 0) {\n      row--;\n      showAndSelect(tree, row - 2, row, row, true);\n    }\n  }","id":94286,"modified_method":"private static void moveUp(final JTree tree) {\n    int row = getSelectedRow(tree);\n    if (row > 0) {\n      row--;\n      showAndSelect(tree, row - 2, row, row, getSelectedRow(tree));\n    }\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void showRowCentered(final JTree tree, final int row, final boolean centerHorizontally) {\n    final int visible = getVisibleRowCount(tree);\n    final int top = visible > 0 ? row - (visible - 1)/ 2 : row;\n    final int bottom = visible > 0 ? top + visible - 1 : row;\n    showAndSelect(tree, top, bottom, row, centerHorizontally);\n  }","id":94287,"modified_method":"public static void showRowCentered(final JTree tree, final int row, final boolean centerHorizontally) {\n    final int visible = getVisibleRowCount(tree);\n    final int top = visible > 0 ? row - (visible - 1)/ 2 : row;\n    final int bottom = visible > 0 ? top + visible - 1 : row;\n    showAndSelect(tree, top, bottom, row, -1);\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void moveDown(final JTree tree) {\n    final int size = tree.getRowCount();\n    int row = getSelectedRow(tree);\n    if (row < size - 1) {\n      row++;\n      showAndSelect(tree, row, row + 2, row, true);\n    }\n  }","id":94288,"modified_method":"private static void moveDown(final JTree tree) {\n    final int size = tree.getRowCount();\n    int row = getSelectedRow(tree);\n    if (row < size - 1) {\n      row++;\n      showAndSelect(tree, row, row + 2, row, getSelectedRow(tree));\n    }\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void movePageUp(final JTree tree) {\n    final int visible = getVisibleRowCount(tree);\n    if (visible <= 0){\n      moveHome(tree);\n      return;\n    }\n    final int decrement = visible - 1;\n    final int row = Math.max(getSelectedRow(tree) - decrement, 0);\n    final int top = getFirstVisibleRow(tree) - decrement;\n    final int bottom = top + visible - 1;\n    showAndSelect(tree, top, bottom, row, true);\n  }","id":94289,"modified_method":"private static void movePageUp(final JTree tree) {\n    final int visible = getVisibleRowCount(tree);\n    if (visible <= 0){\n      moveHome(tree);\n      return;\n    }\n    final int decrement = visible - 1;\n    final int row = Math.max(getSelectedRow(tree) - decrement, 0);\n    final int top = getFirstVisibleRow(tree) - decrement;\n    final int bottom = top + visible - 1;\n    showAndSelect(tree, top, bottom, row, getSelectedRow(tree));\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void showAndSelect(final JTree tree, int top, int bottom, final int row, final boolean centerHorizontally) {\n    final int size = tree.getRowCount();\n    if (size == 0) {\n      tree.clearSelection();\n      return;\n    }\n    if (top < 0){\n      top = 0;\n    }\n    if (bottom >= size){\n      bottom = size - 1;\n    }\n    final Rectangle rowBounds = tree.getRowBounds(row);\n    if (rowBounds == null) return;\n\n    Rectangle topBounds = tree.getRowBounds(top);\n    if (topBounds == null) {\n      topBounds = rowBounds;\n    }\n\n    Rectangle bottomBounds = tree.getRowBounds(bottom);\n    if (bottomBounds == null) {\n      bottomBounds = rowBounds;\n    }\n\n    Rectangle bounds = topBounds.union(bottomBounds);\n    bounds.x = rowBounds.x;\n    bounds.width = rowBounds.width;\n\n    final Rectangle visible = tree.getVisibleRect();\n    if (visible.contains(bounds)) {\n      bounds = null;\n    } else {\n      final TreePath path = tree.getPathForRow(row);\n      final Component comp =\n        tree.getCellRenderer().getTreeCellRendererComponent(tree, path.getLastPathComponent(), true, true, false, row, false);\n\n      if (comp instanceof SimpleColoredComponent) {\n        final SimpleColoredComponent renderer = ((SimpleColoredComponent)comp);\n        final Dimension scrollableSize = renderer.computePreferredSize(true);\n        bounds.width = scrollableSize.width;\n      }\n    }\n\n\n    if (!tree.isRowSelected(row)) {\n      tree.setSelectionRow(row);\n    }\n\n    if (bounds != null) {\n      tree.scrollRectToVisible(bounds);\n    }\n  }","id":94290,"modified_method":"private static void showAndSelect(final JTree tree, int top, int bottom, final int row, final int previous) {\n    final TreePath path = tree.getPathForRow(row);\n    if (path == null) return;\n\n    final int size = tree.getRowCount();\n    if (size == 0) {\n      tree.clearSelection();\n      return;\n    }\n    if (top < 0){\n      top = 0;\n    }\n    if (bottom >= size){\n      bottom = size - 1;\n    }\n    final Rectangle rowBounds = tree.getRowBounds(row);\n    if (rowBounds == null) return;\n\n    Rectangle topBounds = tree.getRowBounds(top);\n    if (topBounds == null) {\n      topBounds = rowBounds;\n    }\n\n    Rectangle bottomBounds = tree.getRowBounds(bottom);\n    if (bottomBounds == null) {\n      bottomBounds = rowBounds;\n    }\n\n    Rectangle bounds = topBounds.union(bottomBounds);\n    bounds.x = rowBounds.x;\n    bounds.width = rowBounds.width;\n\n    final Rectangle visible = tree.getVisibleRect();\n    if (visible.contains(bounds)) {\n      bounds = null;\n    } else {\n      final Component comp =\n        tree.getCellRenderer().getTreeCellRendererComponent(tree, path.getLastPathComponent(), true, true, false, row, false);\n\n      if (comp instanceof SimpleColoredComponent) {\n        final SimpleColoredComponent renderer = ((SimpleColoredComponent)comp);\n        final Dimension scrollableSize = renderer.computePreferredSize(true);\n        bounds.width = scrollableSize.width;\n      }\n    }\n\n\n    if (!tree.isRowSelected(row)) {\n      tree.setSelectionRow(row);\n    }\n\n    if (bounds != null) {\n      final Range<Integer> range = getExpandControlRange(tree, path);\n      if (range != null) {\n        int delta = bounds.x - range.getFrom().intValue();\n        bounds.x -= delta;\n        bounds.width -= delta;\n      }\n\n      if (visible.width < bounds.width) {\n        bounds.width = visible.width;\n      }\n\n      final boolean siblings = areSiblings(path, tree.getPathForRow(previous));\n      boolean totallyInvisible = !visible.contains(bounds) && !visible.intersects(bounds);\n\n      if (siblings && !totallyInvisible) {\n        bounds.x = visible.x;\n        bounds.width = visible.width;\n      }\n\n      tree.scrollRectToVisible(bounds);\n    }\n  }","commit_id":"a09d68575699f9e7dabb49426e120c25a22b4ae0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Selects the relation <code>relation<\/code> in the list of relations.\n     *\n     * @param relation  the relation\n     */\n    public void selectRelation(Relation relation) {\n        if (relation == null) {\n            model.setSelectedRelations(null);\n        } else {\n            model.setSelectedRelations(Collections.singletonList(relation));\n            Integer i = model.getRelationIndex(relation);\n            if (i == null)\n                throw new AssertionError(); /* the relation list should contain *all* relations */\n            displaylist.scrollRectToVisible(displaylist.getCellBounds(i, i));\n        }\n    }","id":94291,"modified_method":"/**\n     * Selects the relation <code>relation<\/code> in the list of relations.\n     *\n     * @param relation  the relation\n     */\n    public void selectRelation(Relation relation) {\n        if (relation == null) {\n            model.setSelectedRelations(null);\n        } else {\n            model.setSelectedRelations(Collections.singletonList(relation));\n            Integer i = model.getRelationIndex(relation);\n            if (i != null) { // Not all relations have to be in the list (for example when the relation list is hidden, it's not updated with new relations)\n                displaylist.scrollRectToVisible(displaylist.getCellBounds(i, i));\n            }\n        }\n    }","commit_id":"2b219df027f39e272ce510a8a50ab04d542771da","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n   * When the item is selected then we use default tree's selection foreground.\n   * It guaranties readability of selected text in any LAF.\n   */\n  public final void append(@NotNull final String fragment, @NotNull final SimpleTextAttributes attributes) {\n    if(mySelected) {\n      super.append(\n        fragment,\n        new SimpleTextAttributes(\n          attributes.getStyle(), UIUtil.getListSelectionForeground()\n        )\n      );\n    }\n    else if (attributes.getFgColor() == null) {\n      super.append(fragment, new SimpleTextAttributes(attributes.getStyle(), UIUtil.getListForeground()));\n    }\n    else {\n      super.append(fragment, attributes);\n    }\n  }","id":94292,"modified_method":"/**\n   * When the item is selected then we use default tree's selection foreground.\n   * It guaranties readability of selected text in any LAF.\n   */\n  public final void append(@NotNull final String fragment, @NotNull final SimpleTextAttributes attributes, boolean isMainText) {\n    if(mySelected) {\n      super.append(\n        fragment,\n        new SimpleTextAttributes(\n          attributes.getStyle(), UIUtil.getListSelectionForeground()\n        ), isMainText);\n    }\n    else if (attributes.getFgColor() == null) {\n      super.append(fragment, new SimpleTextAttributes(attributes.getStyle(), UIUtil.getListForeground()), isMainText);\n    }\n    else {\n      super.append(fragment, attributes, isMainText);\n    }\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public final Component getTreeCellRendererComponent(\n    JTree tree,\n    Object value,\n    boolean selected,\n    boolean expanded,\n    boolean leaf,\n    int row,\n    boolean hasFocus\n  ){\n    clear();\n\n    mySelected = selected;\n    myFocused = tree.hasFocus();\n\n    // We paint background if and only if tree path is selected and tree has focus.\n    // If path is selected and tree is not focused then we just paint focused border.\n    if (UIUtil.isUnderQuaquaLookAndFeel()) {\n      if (selected) {\n        setBackground(UIUtil.getTreeSelectionBackground());\n      }\n      else {\n        setBackground(null);\n      }\n    }\n    else {\n      if(selected){\n        setPaintFocusBorder(true);\n        if(myFocused){\n          setBackground(UIUtil.getTreeSelectionBackground());\n        }else{\n          setBackground(null);\n        }\n      }else{\n        setBackground(null);\n      }\n    }\n\n    customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);\n\n    return this;\n  }","id":94293,"modified_method":"public final Component getTreeCellRendererComponent(\n    JTree tree,\n    Object value,\n    boolean selected,\n    boolean expanded,\n    boolean leaf,\n    int row,\n    boolean hasFocus\n  ){\n    myTree = tree;\n\n    clear();\n\n    mySelected = selected;\n    myFocused = tree.hasFocus();\n\n    // We paint background if and only if tree path is selected and tree has focus.\n    // If path is selected and tree is not focused then we just paint focused border.\n    if (UIUtil.isUnderQuaquaLookAndFeel()) {\n      if (selected) {\n        setBackground(UIUtil.getTreeSelectionBackground());\n      }\n      else {\n        setBackground(null);\n      }\n    }\n    else {\n      if(selected){\n        setPaintFocusBorder(true);\n        if(myFocused){\n          setBackground(UIUtil.getTreeSelectionBackground());\n        }else{\n          setBackground(null);\n        }\n      }else{\n        setBackground(null);\n      }\n    }\n\n    customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);\n\n    if (getFont() == null) {\n      setFont(tree.getFont());\n    }\n\n    return this;\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * When the item is selected then we use default tree's selection foreground.\n   * It guaranties readability of selected text in any LAF.\n   */\n  public void append(@NotNull @Nls String fragment, @NotNull SimpleTextAttributes attributes){\n    if(mySelected && myFocused){\n      super.append(\n        fragment,\n        new SimpleTextAttributes(\n          attributes.getStyle(), UIUtil.getTreeSelectionForeground()\n        )\n      );\n    }else{\n      super.append(fragment,attributes);\n    }\n  }","id":94294,"modified_method":"/**\n   * When the item is selected then we use default tree's selection foreground.\n   * It guaranties readability of selected text in any LAF.\n   */\n  public void append(@NotNull @Nls String fragment, @NotNull SimpleTextAttributes attributes, boolean isMainText){\n    if(mySelected && myFocused){\n      super.append(\n        fragment,\n        new SimpleTextAttributes(\n          attributes.getStyle(), UIUtil.getTreeSelectionForeground()\n        ), isMainText);\n    }else{\n      super.append(fragment,attributes, isMainText);\n    }\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Appends string fragments to existing ones. Appended string\n   * will have specified <code>attributes<\/code>.\n   */\n  public void append(@NotNull final String fragment, @NotNull final SimpleTextAttributes attributes){\n    myFragments.add(fragment);\n    getAttributes().add(attributes);\n  }","id":94295,"modified_method":"/**\n   * Appends string fragments to existing ones. Appended string\n   * will have specified <code>attributes<\/code>.\n   */\n  public final void append(@NotNull final String fragment, @NotNull final SimpleTextAttributes attributes) {\n    append(fragment, attributes, myMainTextLastIndex < 0);\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Dimension getPreferredSize(){\n    // Calculate width\n    int width=myIpad.left+myIpad.right;\n\n    if(myIcon!=null){\n      width+=myIcon.getIconWidth() + myIconTextGap;\n    }\n\n    final Insets borderInsets=myBorder.getBorderInsets(this);\n    width+=borderInsets.left+borderInsets.right;\n\n    Font font = getFont();\n    LOG.assertTrue(font != null);\n    for (int i = myFragments.size() - 1; i >= 0; i--) {\n      final SimpleTextAttributes attributes = getAttributes().get(i);\n      if (font.getStyle() != attributes.getStyle()) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getStyle());\n      }\n      final FontMetrics metrics = getFontMetrics(font);\n      width += metrics.stringWidth(myFragments.get(i));\n    }\n\n    // Calculate height\n    int height = myIpad.top + myIpad.bottom;\n\n    final FontMetrics metrics = getFontMetrics(font);\n    int textHeight = metrics.getHeight();\n    textHeight += borderInsets.top + borderInsets.bottom;\n\n    if(myIcon!=null){\n      height+=Math.max(myIcon.getIconHeight(),textHeight);\n    }else{\n      height+=textHeight;\n    }\n\n    // Take into accound that the component itself can have a border\n    final Insets insets = getInsets();\n    width+=insets.left+insets.right;\n    height+=insets.top+insets.bottom;\n\n    return new Dimension(width, height);\n  }","id":94296,"modified_method":"public Dimension getPreferredSize() {\n    return computePreferredSize(false);\n\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Clear all special attributes of <code>SimpleColoredComponent<\/code>.\n   * The are icon, text fragments and their attributes, \"paint focus border\".\n   */\n  public void clear(){\n    myIcon=null;\n    myPaintFocusBorder=false;\n    setBorder(null);\n    myFragments.clear();\n    getAttributes().clear();\n  }","id":94297,"modified_method":"/**\n   * Clear all special attributes of <code>SimpleColoredComponent<\/code>.\n   * The are icon, text fragments and their attributes, \"paint focus border\".\n   */\n  public void clear() {\n    myIcon = null;\n    myPaintFocusBorder = false;\n    setBorder(null);\n    myFragments.clear();\n    getAttributes().clear();\n    myMainTextLastIndex = -1;\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void append(String fragment, SimpleTextAttributes attributes) {\n    super.append(fragment, modifyAttributes(attributes));\n  }","id":94298,"modified_method":"public void append(String fragment, SimpleTextAttributes attributes, boolean isMainText) {\n    super.append(fragment, modifyAttributes(attributes), isMainText);\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void append(@NotNull String fragment, @NotNull SimpleTextAttributes attributes) {\n    super.append(fragment, attributes);\n    setName(getName() + fragment);\n  }","id":94299,"modified_method":"public void append(@NotNull String fragment, @NotNull SimpleTextAttributes attributes, boolean isMainText) {\n    super.append(fragment, attributes, isMainText);\n    setName(getName() + fragment);\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void showAndSelect(final JTree tree, int top, int bottom, final int row, final boolean centerHorizontally) {\n    final int size = tree.getRowCount();\n    if (size == 0) {\n      tree.clearSelection();\n      return;\n    }\n    if (top < 0){\n      top = 0;\n    }\n    if (bottom >= size){\n      bottom = size - 1;\n    }\n    final Rectangle topBounds = tree.getRowBounds(top);\n    final Rectangle bottomBounds = tree.getRowBounds(bottom);\n    final Rectangle bounds;\n    if (topBounds == null) {\n      bounds = bottomBounds;\n    }\n    else if (bottomBounds == null) {\n      bounds = topBounds;\n    }\n    else {\n      bounds = topBounds.union(bottomBounds);\n    }\n    if (bounds != null) {\n      final TreePath path = tree.getPathForRow(row);\n      if (path != null && path.getParentPath() != null) {\n        final Rectangle parentBounds = tree.getPathBounds(path.getParentPath());\n        if (parentBounds != null) {\n          bounds.x = parentBounds.x;\n        }\n      }\n      if (!centerHorizontally) {\n        bounds.x = 0;\n        bounds.width = tree.getWidth();\n      } else {\n        bounds.width = Math.min(bounds.width, tree.getVisibleRect().width);\n      }\n      tree.scrollRectToVisible(bounds);\n    }\n    if (!tree.isRowSelected(row)) {\n      tree.setSelectionRow(row);\n    }\n  }","id":94300,"modified_method":"private static void showAndSelect(final JTree tree, int top, int bottom, final int row, final boolean centerHorizontally) {\n    final int size = tree.getRowCount();\n    if (size == 0) {\n      tree.clearSelection();\n      return;\n    }\n    if (top < 0){\n      top = 0;\n    }\n    if (bottom >= size){\n      bottom = size - 1;\n    }\n    final Rectangle rowBounds = tree.getRowBounds(row);\n    if (rowBounds == null) return;\n\n    Rectangle topBounds = tree.getRowBounds(top);\n    if (topBounds == null) {\n      topBounds = rowBounds;\n    }\n\n    Rectangle bottomBounds = tree.getRowBounds(bottom);\n    if (bottomBounds == null) {\n      bottomBounds = rowBounds;\n    }\n\n    Rectangle bounds = topBounds.union(bottomBounds);\n    bounds.x = rowBounds.x;\n    bounds.width = rowBounds.width;\n\n    final Rectangle visible = tree.getVisibleRect();\n    if (visible.contains(bounds)) {\n      bounds = null;\n    } else {\n      final TreePath path = tree.getPathForRow(row);\n      final Component comp =\n        tree.getCellRenderer().getTreeCellRendererComponent(tree, path.getLastPathComponent(), true, true, false, row, false);\n\n      if (comp instanceof SimpleColoredComponent) {\n        final SimpleColoredComponent renderer = ((SimpleColoredComponent)comp);\n        final Dimension scrollableSize = renderer.computePreferredSize(true);\n        bounds.width = scrollableSize.width;\n      }\n    }\n\n\n    if (!tree.isRowSelected(row)) {\n      tree.setSelectionRow(row);\n    }\n\n    if (bounds != null) {\n      tree.scrollRectToVisible(bounds);\n    }\n  }","commit_id":"450b26cb35a9bc06353a73047a28903b3133fcaf","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void migrateFiles(Project module, Map<String, InputFile> deprecatedFileKeyMapper, Map<String, InputFile> deprecatedTestKeyMapper,\n    Map<String, String> deprecatedDirectoryKeyMapper,\n    int moduleId) {\n    // Find all FIL or CLA resources for this module\n    StringBuilder hql = newResourceQuery()\n      .append(\" and scope = '\").append(Scopes.FILE).append(\"' order by qualifier, key\");\n    Map<String, ResourceModel> disabledResourceByKey = loadDisabledResources(moduleId, hql);\n    List<ResourceModel> resources = loadEnabledResources(moduleId, hql);\n    for (ResourceModel resourceModel : resources) {\n      String oldEffectiveKey = resourceModel.getKey();\n      boolean isTest = Qualifiers.UNIT_TEST_FILE.equals(resourceModel.getQualifier());\n      InputFile matchedFile = findInputFile(deprecatedFileKeyMapper, deprecatedTestKeyMapper, oldEffectiveKey, isTest);\n      if (matchedFile != null) {\n        String newEffectiveKey = ((DeprecatedDefaultInputFile) matchedFile).key();\n        // Now compute migration of the parent dir\n        String oldKey = StringUtils.substringAfterLast(oldEffectiveKey, \":\");\n        Resource sonarFile;\n        String parentOldKey;\n        if (\"java\".equals(resourceModel.getLanguageKey())) {\n          parentOldKey = module.getEffectiveKey() + \":\" + DeprecatedKeyUtils.getJavaFileParentDeprecatedKey(oldKey);\n        } else {\n          sonarFile = new File(oldKey);\n          parentOldKey = module.getEffectiveKey() + \":\" + sonarFile.getParent().getDeprecatedKey();\n        }\n        String parentNewKey = module.getEffectiveKey() + \":\" + getParentKey(matchedFile);\n        if (!deprecatedDirectoryKeyMapper.containsKey(parentOldKey)) {\n          deprecatedDirectoryKeyMapper.put(parentOldKey, parentNewKey);\n        } else if (!parentNewKey.equals(deprecatedDirectoryKeyMapper.get(parentOldKey))) {\n          logger.warn(\"Directory with key \" + parentOldKey + \" matches both \" + deprecatedDirectoryKeyMapper.get(parentOldKey) + \" and \"\n            + parentNewKey + \". First match is arbitrary chosen.\");\n        }\n        updateKey(resourceModel, newEffectiveKey, disabledResourceByKey);\n        resourceModel.setDeprecatedKey(oldEffectiveKey);\n        logger.info(COMPONENT_CHANGED_TO, oldEffectiveKey, newEffectiveKey);\n      } else {\n        logger.warn(UNABLE_TO_UPDATE_COMPONENT_NO_MATCH_WAS_FOUND, oldEffectiveKey);\n      }\n    }\n  }","id":94301,"modified_method":"private void migrateFiles(Project module, Map<String, InputFile> deprecatedFileKeyMapper, Map<String, InputFile> deprecatedTestKeyMapper,\n    Map<String, String> deprecatedDirectoryKeyMapper,\n    int moduleId) {\n    // Find all FIL or CLA resources for this module\n    StringBuilder hql = newResourceQuery()\n      .append(\" and scope = '\").append(Scopes.FILE).append(\"' order by qualifier, key\");\n    Map<String, ResourceModel> disabledResourceByKey = loadDisabledResources(moduleId, hql);\n    List<ResourceModel> resources = loadEnabledResources(moduleId, hql);\n    for (ResourceModel resourceModel : resources) {\n      String oldEffectiveKey = resourceModel.getKey();\n      boolean isTest = Qualifiers.UNIT_TEST_FILE.equals(resourceModel.getQualifier());\n      InputFile matchedFile = findInputFile(deprecatedFileKeyMapper, deprecatedTestKeyMapper, oldEffectiveKey, isTest);\n      if (matchedFile != null) {\n        String newEffectiveKey = ((DeprecatedDefaultInputFile) matchedFile).key();\n        // Now compute migration of the parent dir\n        String oldKey = StringUtils.substringAfterLast(oldEffectiveKey, \":\");\n        Resource sonarFile;\n        String parentOldKey;\n        if (\"java\".equals(resourceModel.getLanguageKey())) {\n          parentOldKey = String.format(\"%s:%s\", module.getEffectiveKey(), DeprecatedKeyUtils.getJavaFileParentDeprecatedKey(oldKey));\n        } else {\n          sonarFile = new File(oldKey);\n          parentOldKey = String.format(\"%s:%s\", module.getEffectiveKey(), sonarFile.getParent().getDeprecatedKey());\n        }\n        String parentNewKey = String.format(\"%s:%s\", module.getEffectiveKey(), getParentKey(matchedFile));\n        if (!deprecatedDirectoryKeyMapper.containsKey(parentOldKey)) {\n          deprecatedDirectoryKeyMapper.put(parentOldKey, parentNewKey);\n        } else if (!parentNewKey.equals(deprecatedDirectoryKeyMapper.get(parentOldKey))) {\n          logger.warn(\"Directory with key \" + parentOldKey + \" matches both \" + deprecatedDirectoryKeyMapper.get(parentOldKey) + \" and \"\n            + parentNewKey + \". First match is arbitrary chosen.\");\n        }\n        updateKey(resourceModel, newEffectiveKey, disabledResourceByKey);\n        resourceModel.setDeprecatedKey(oldEffectiveKey);\n        logger.info(COMPONENT_CHANGED_TO, oldEffectiveKey, newEffectiveKey);\n      } else {\n        logger.warn(UNABLE_TO_UPDATE_COMPONENT_NO_MATCH_WAS_FOUND, oldEffectiveKey);\n      }\n    }\n  }","commit_id":"da03d2e8386d74283212a3f66ecf13eaa640367f","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public Component getListCellRendererComponent(\n        JList list,\n        Object value,            // value to display\n        int index,               // cell index\n        boolean isSelected,      // is the cell selected\n        boolean cellHasFocus)    // the list and the cell have the focus\n        {\n            if (value == mMoreLabel)\n                return mMoreLabel;\n            \n            Resource r = (Resource) value;\n            setIcon(r.getIcon(list));\n            if (false)\n                setText(\"<HTML>\" + r.getTitle());\n            else\n                setText(r.getTitle());\n            if (isSelected) {\n                setBackground(list.getSelectionBackground());\n                setForeground(list.getSelectionForeground());\n            } else {\n                setBackground(list.getBackground());\n                setForeground(list.getForeground());\n            }\n            //setEnabled(list.isEnabled());\n            return this;\n        }","id":94302,"modified_method":"public Component getListCellRendererComponent(\n        JList list,\n        Object value,            // value to display\n        int index,               // cell index\n        boolean isSelected,      // is the cell selected\n        boolean cellHasFocus)    // the list and the cell have the focus\n        {\n            if (value == mMoreLabel)\n                return mMoreLabel;\n            else if (value == mLessLabel)\n                return mLessLabel;\n            \n            Resource r = (Resource) value;\n            setIcon(r.getIcon(list));\n            if (false)\n                setText(\"<HTML>\" + r.getTitle());\n            else\n                setText(r.getTitle());\n            if (isSelected) {\n                setBackground(list.getSelectionBackground());\n                setForeground(list.getSelectionForeground());\n            } else {\n                setBackground(list.getBackground());\n                setForeground(list.getForeground());\n            }\n            //setEnabled(list.isEnabled());\n            return this;\n        }","commit_id":"f88cd74731f2bcd71e0f93f845eae71f9b6f8522","url":"https://github.com/VUE/VUE"},{"original_method":"public Object getElementAt(int index) {\n            if (isMasking) {\n                if (index == PreviewItems) {\n                    return mMoreLabel;\n                } else if (index > PreviewItems)\n                    return \"MASKED INDEX \" + index; // should never see this\n            }\n            return super.getElementAt(index);\n        }","id":94303,"modified_method":"public Object getElementAt(int index) {\n            if (isMasking) {\n                if (index == PreviewItems) {\n                    return mMoreLabel;\n                } else if (index > PreviewItems)\n                    return \"MASKED INDEX \" + index; // should never see this\n            } else if (index == size()) {\n                return mLessLabel;\n            }\n            return super.getElementAt(index);\n        }","commit_id":"f88cd74731f2bcd71e0f93f845eae71f9b6f8522","url":"https://github.com/VUE/VUE"},{"original_method":"private Resource getPicked() {\n        return (Resource) getSelectedValue();\n    }","id":94304,"modified_method":"private Resource getPicked() {\n        Object o = getSelectedValue();\n        if (o instanceof Resource)\n            return (Resource) o;\n        else\n            return null;\n        //return (Resource) getSelectedValue();\n    }","commit_id":"f88cd74731f2bcd71e0f93f845eae71f9b6f8522","url":"https://github.com/VUE/VUE"},{"original_method":"public int getSize() {\n            return isMasking ? Math.min(PreviewModelSize, size()) : size();\n        }","id":94305,"modified_method":"public int getSize() {\n            return isMasking ? Math.min(PreviewModelSize, size()) : size() + 1;\n        }","commit_id":"f88cd74731f2bcd71e0f93f845eae71f9b6f8522","url":"https://github.com/VUE/VUE"},{"original_method":"public void valueChanged(ListSelectionEvent e) {\n      if (!myIsEnabled || e.getValueIsAdjusting()) {\n        return;\n      }\n      final JList list = (JList)e.getSource();\n      final StackFrameDescriptorImpl item = (StackFrameDescriptorImpl)list.getSelectedValue();\n      if (item != null) {\n        DebuggerContextUtil.setStackFrame(getContextManager(), item.getFrameProxy());\n      }\n    }","id":94306,"modified_method":"public void valueChanged(ListSelectionEvent e) {\n      if (!myIsEnabled || e.getValueIsAdjusting()) {\n        return;\n      }\n      final JList list = (JList)e.getSource();\n      final Object selected = list.getSelectedValue();\n      if (selected instanceof StackFrameDescriptorImpl) {\n        DebuggerContextUtil.setStackFrame(getContextManager(), ((StackFrameDescriptorImpl)selected).getFrameProxy());\n      }\n    }","commit_id":"8f0d6dd9eefb41dc74030e58aec923e27f2db39c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(ActionEvent e) {\n            MetaContact contact = (MetaContact) getContactList()\n                    .getSelectedValue();\n            SwingUtilities.invokeLater(new RunMessageWindow(contact));\n        }","id":94307,"modified_method":"public void actionPerformed(ActionEvent e) {\n            Object selectedValue = getContactList().getSelectedValue();\n            \n            if(selectedValue instanceof MetaContact) {            \n                MetaContact contact = (MetaContact) selectedValue;\n                \n                SwingUtilities.invokeLater(new RunMessageWindow(contact));\n            }\n            else if (selectedValue instanceof MetaContactGroup) {\n                MetaContactGroup group = (MetaContactGroup) selectedValue;\n                \n                ContactListModel model \n                    = (ContactListModel)contactList.getModel();\n                \n                if (model.isGroupClosed(group)) {\n                    model.openGroup(group);\n                }\n            }\n        }","commit_id":"9282f79fa89c65b0d2cfbeb6edabf4e1dcc1ec7d","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initialize the contact list tree.\n     * \n     * @param contactListService The MetaContactListService which will\n     * be used for a contact list data model.\n     */\n    public void initTree(MetaContactListService contactListService) {\n\n        this.contactList = new ContactList(contactListService);\n\n        this.contactList.addMouseListener(this);\n\n        this.treePanel.add(contactList, BorderLayout.NORTH);\n\n        this.addKeyListener(new CListKeySearchListener(this.contactList));\n\n        this.getRootPane().getActionMap().put(\"runChat\",\n                new RunMessageWindowAction());\n\n        InputMap imap = this.getRootPane().getInputMap(\n                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), \"runChat\");\n    }","id":94308,"modified_method":"/**\n     * Initialize the contact list tree.\n     * \n     * @param contactListService The MetaContactListService which will\n     * be used for a contact list data model.\n     */\n    public void initTree(MetaContactListService contactListService) {\n\n        this.contactList = new ContactList(contactListService);\n\n        this.contactList.addMouseListener(this);\n\n        this.treePanel.add(contactList, BorderLayout.NORTH);\n\n        this.addKeyListener(new CListKeySearchListener(this.contactList));\n\n        this.getRootPane().getActionMap().put(\"runChat\",\n                new RunMessageWindowAction());\n        this.getRootPane().getActionMap().put(\"closeGroup\",\n                new CloseGroupAction());\n        this.getRootPane().getActionMap().put(\"openGroup\",\n                new OpenGroupAction());\n\n        InputMap imap = this.getRootPane().getInputMap(\n                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), \"runChat\");\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), \"closeGroup\");\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_PLUS, 0), \"openGroup\");\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0), \"closeGroup\");\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), \"closeGroup\");\n        imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"openGroup\");\n    }","commit_id":"9282f79fa89c65b0d2cfbeb6edabf4e1dcc1ec7d","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void applyThreadFilter(@NotNull final DebugProcessImpl debugProcess, @Nullable ThreadReference newFilterThread) {\n    final RequestManagerImpl requestManager = debugProcess.getRequestsManager();\n    final ThreadReference oldFilterThread = requestManager.getFilterThread();\n    if (Comparing.equal(newFilterThread, oldFilterThread)) {\n      // the filter already added\n      return;\n    }\n    requestManager.setFilterThread(newFilterThread);\n    if (newFilterThread == null || oldFilterThread != null) {\n      final List<Breakpoint> breakpoints = getBreakpoints();\n      for (Breakpoint breakpoint : breakpoints) {\n        if (LineBreakpoint.CATEGORY.equals(breakpoint.getCategory()) || MethodBreakpoint.CATEGORY.equals(breakpoint.getCategory())) {\n          requestManager.deleteRequest(breakpoint);\n          breakpoint.createRequest(debugProcess);\n        }\n      }\n    }\n    else {\n      // important! need to add filter to _existing_ requests, otherwise Requestor->Request mapping will be lost\n      // and debugger trees will not be restored to original state\n      abstract class FilterSetter <T extends EventRequest> {\n         void applyFilter(@NotNull final List<T> requests, final ThreadReference thread) {\n          for (T request : requests) {\n            try {\n              final boolean wasEnabled = request.isEnabled();\n              if (wasEnabled) {\n                request.disable();\n              }\n              addFilter(request, thread);\n              if (wasEnabled) {\n                request.enable();\n              }\n            }\n            catch (InternalException e) {\n              LOG.info(e);\n            }\n          }\n        }\n        protected abstract void addFilter(final T request, final ThreadReference thread);\n      }\n\n      final EventRequestManager eventRequestManager = requestManager.getVMRequestManager();\n\n      new FilterSetter<BreakpointRequest>() {\n        @Override\n        protected void addFilter(@NotNull final BreakpointRequest request, final ThreadReference thread) {\n          request.addThreadFilter(thread);\n        }\n      }.applyFilter(eventRequestManager.breakpointRequests(), newFilterThread);\n\n      new FilterSetter<MethodEntryRequest>() {\n        @Override\n        protected void addFilter(@NotNull final MethodEntryRequest request, final ThreadReference thread) {\n          request.addThreadFilter(thread);\n        }\n      }.applyFilter(eventRequestManager.methodEntryRequests(), newFilterThread);\n\n      new FilterSetter<MethodExitRequest>() {\n        @Override\n        protected void addFilter(@NotNull final MethodExitRequest request, final ThreadReference thread) {\n          request.addThreadFilter(thread);\n        }\n      }.applyFilter(eventRequestManager.methodExitRequests(), newFilterThread);\n    }\n  }","id":94309,"modified_method":"public void applyThreadFilter(@NotNull final DebugProcessImpl debugProcess, @Nullable ThreadReference newFilterThread) {\n    final RequestManagerImpl requestManager = debugProcess.getRequestsManager();\n    final ThreadReference oldFilterThread = requestManager.getFilterThread();\n    if (Comparing.equal(newFilterThread, oldFilterThread)) {\n      // the filter already added\n      return;\n    }\n    requestManager.setFilterThread(newFilterThread);\n    if (newFilterThread == null || oldFilterThread != null) {\n      final List<Breakpoint> breakpoints = getBreakpoints();\n      for (Breakpoint breakpoint : breakpoints) {\n        if (LineBreakpoint.CATEGORY.equals(breakpoint.getCategory()) || MethodBreakpoint.CATEGORY.equals(breakpoint.getCategory())) {\n          requestManager.deleteRequest(breakpoint);\n          breakpoint.createRequest(debugProcess);\n        }\n      }\n    }\n    else {\n      // important! need to add filter to _existing_ requests, otherwise Requestor->Request mapping will be lost\n      // and debugger trees will not be restored to original state\n      abstract class FilterSetter <T extends EventRequest> {\n         void applyFilter(@NotNull final List<T> requests, final ThreadReference thread) {\n          for (T request : requests) {\n            try {\n              final boolean wasEnabled = request.isEnabled();\n              if (wasEnabled) {\n                request.disable();\n              }\n              addFilter(request, thread);\n              if (wasEnabled) {\n                request.enable();\n              }\n            }\n            catch (InternalException e) {\n              LOG.info(e);\n            }\n          }\n        }\n        protected abstract void addFilter(final T request, final ThreadReference thread);\n      }\n\n      final EventRequestManager eventRequestManager = requestManager.getVMRequestManager();\n      if (eventRequestManager != null) {\n        new FilterSetter<BreakpointRequest>() {\n          @Override\n          protected void addFilter(@NotNull final BreakpointRequest request, final ThreadReference thread) {\n            request.addThreadFilter(thread);\n          }\n        }.applyFilter(eventRequestManager.breakpointRequests(), newFilterThread);\n\n        new FilterSetter<MethodEntryRequest>() {\n          @Override\n          protected void addFilter(@NotNull final MethodEntryRequest request, final ThreadReference thread) {\n            request.addThreadFilter(thread);\n          }\n        }.applyFilter(eventRequestManager.methodEntryRequests(), newFilterThread);\n\n        new FilterSetter<MethodExitRequest>() {\n          @Override\n          protected void addFilter(@NotNull final MethodExitRequest request, final ThreadReference thread) {\n            request.addThreadFilter(thread);\n          }\n        }.applyFilter(eventRequestManager.methodExitRequests(), newFilterThread);\n      }\n    }\n  }","commit_id":"c1e0ceb776dbad86f72ca5d69d2ea5376e676d27","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void dump(Appendable out, String indent) throws IOException\n    {\n        out.append(String.valueOf(this)).append(\"\\n\");\n        AggregateLifeCycle.dump(out,indent,Arrays.asList(new Object[]{_acceptChannel,_acceptChannel.isOpen()?\"OPEN\":\"CLOSED\",_manager}));\n    }","id":94310,"modified_method":"public void dump(Appendable out, String indent) throws IOException\n    {\n        out.append(String.valueOf(this)).append(\"\\n\");\n        ServerSocketChannel channel=_acceptChannel;\n        if (channel==null)\n            AggregateLifeCycle.dump(out,indent,Arrays.asList(new Object[]{null,\"CLOSED\",_manager}));\n        else\n            AggregateLifeCycle.dump(out,indent,Arrays.asList(new Object[]{_acceptChannel,_acceptChannel.isOpen()?\"OPEN\":\"CLOSED\",_manager}));\n    }","commit_id":"40ebdcf23ef836af1112ed90dcb8f46b8d4d46d1","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void dump(Appendable out, String indent) throws IOException\n    {\n        out.append(String.valueOf(this)).append(\"\\n\");\n        AggregateLifeCycle.dump(out,indent,Arrays.asList(_selectSet));\n    }","id":94311,"modified_method":"public void dump(Appendable out, String indent) throws IOException\n    {\n        out.append(String.valueOf(this)).append(\"\\n\");\n        AggregateLifeCycle.dump(out,indent,TypeUtil.asList(_selectSet));\n    }","commit_id":"40ebdcf23ef836af1112ed90dcb8f46b8d4d46d1","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * close the BLOB table\n     */\n    public synchronized void close(boolean writeIDX) {\n        shrinkWithGapsAtEnd();\n        if (file != null) {\n            file.close();\n        }\n        file = null;\n        \n        if (writeIDX && index != null && free != null && (index.size() > 3 || free.size() > 3)) {\n            // now we can create a dump of the index and the gap information\n            // to speed up the next start\n            try {\n                long start = System.currentTimeMillis();\n                String fingerprint = HeapWriter.fingerprintFileHash(this.heapFile);\n                free.dump(HeapWriter.fingerprintGapFile(this.heapFile, fingerprint));\n                free.clear();\n                free = null;\n                index.dump(HeapWriter.fingerprintIndexFile(this.heapFile, fingerprint));\n                Log.logInfo(\"kelondroBLOBHeap\", \"wrote a dump for the \" + this.index.size() +  \" index entries of \" + heapFile.getName()+ \" in \" + (System.currentTimeMillis() - start) + \" milliseconds.\");\n                index.close();\n                index = null;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            // this is small.. just free resources, do not write index\n            free.clear();\n            free = null;\n            index.close();\n            index = null;\n        }\n    }","id":94312,"modified_method":"/**\n     * close the BLOB table\n     */\n    public synchronized void close(boolean writeIDX) {\n        shrinkWithGapsAtEnd();\n        if (file != null) {\n            file.close();\n        }\n        file = null;\n        \n        if (writeIDX && index != null && free != null && (index.size() > 3 || free.size() > 3)) {\n            // now we can create a dump of the index and the gap information\n            // to speed up the next start\n            try {\n                long start = System.currentTimeMillis();\n                String fingerprint = HeapWriter.fingerprintFileHash(this.heapFile);\n                if (fingerprint == null) {\n                    Log.logSevere(\"kelondroBLOBHeap\", \"cannot write a dump for \" + heapFile.getName()+ \": fingerprint is null\");\n                } else {\n                    free.dump(HeapWriter.fingerprintGapFile(this.heapFile, fingerprint));\n                }\n                free.clear();\n                free = null;\n                if (fingerprint != null) {\n                    index.dump(HeapWriter.fingerprintIndexFile(this.heapFile, fingerprint));\n                    Log.logInfo(\"kelondroBLOBHeap\", \"wrote a dump for the \" + this.index.size() +  \" index entries of \" + heapFile.getName()+ \" in \" + (System.currentTimeMillis() - start) + \" milliseconds.\");\n                }\n                index.close();\n                index = null;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            // this is small.. just free resources, do not write index\n            free.clear();\n            free = null;\n            index.close();\n            index = null;\n        }\n    }","commit_id":"876746602d61e2b28b93ece1e668856e198a65d9","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static String fastFingerprintB64(final File file, boolean includeDate) {\n        try {\n            byte[] b = fastFingerprintRaw(file, includeDate);\n            assert b != null : \"file = \" + file.toString();\n            assert b.length != 0 : \"file = \" + file.toString();\n            return Base64Order.enhancedCoder.encode(b);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }","id":94313,"modified_method":"public static String fastFingerprintB64(final File file, boolean includeDate) {\n        try {\n            byte[] b = fastFingerprintRaw(file, includeDate);\n            assert b != null : \"file = \" + file.toString();\n            if (b == null || b.length == 0) return null;\n            assert b.length != 0 : \"file = \" + file.toString();\n            return Base64Order.enhancedCoder.encode(b);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }","commit_id":"876746602d61e2b28b93ece1e668856e198a65d9","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private boolean initIndexReadDump() {\n        // look for an index dump and read it if it exist\n        // if this is successfull, return true; otherwise false\n        String fingerprint = HeapWriter.fingerprintFileHash(this.heapFile);\n        File fif = HeapWriter.fingerprintIndexFile(this.heapFile, fingerprint);\n        if (!fif.exists()) fif = new File(fif.getAbsolutePath() + \".gz\");\n        File fgf = HeapWriter.fingerprintGapFile(this.heapFile, fingerprint);\n        if (!fgf.exists()) fgf = new File(fgf.getAbsolutePath() + \".gz\");\n        if (!fif.exists() || !fgf.exists()) {\n            HeapWriter.deleteAllFingerprints(this.heapFile);\n            return false;\n        }\n        \n        // there is an index and a gap file:\n        // read the index file:\n        try {\n            this.index = new LongHandleIndex(this.keylength, this.ordering, fif, 1000000);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        // an index file is a one-time throw-away object, so just delete it now\n        FileUtils.deletedelete(fif);\n        \n        // read the gap file:\n        try {\n            this.free = new Gap(fgf);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        // same with gap file\n        FileUtils.deletedelete(fgf);\n        \n        // everything is fine now\n        return this.index.size() > 0;\n    }","id":94314,"modified_method":"private boolean initIndexReadDump() {\n        // look for an index dump and read it if it exist\n        // if this is successfull, return true; otherwise false\n        String fingerprint = HeapWriter.fingerprintFileHash(this.heapFile);\n        if (fingerprint == null) {\n            Log.logSevere(\"HeapReader\", \"cannot generate a fingerprint for \" + this.heapFile + \": null\");\n            return false;\n        }\n        File fif = HeapWriter.fingerprintIndexFile(this.heapFile, fingerprint);\n        if (!fif.exists()) fif = new File(fif.getAbsolutePath() + \".gz\");\n        File fgf = HeapWriter.fingerprintGapFile(this.heapFile, fingerprint);\n        if (!fgf.exists()) fgf = new File(fgf.getAbsolutePath() + \".gz\");\n        if (!fif.exists() || !fgf.exists()) {\n            HeapWriter.deleteAllFingerprints(this.heapFile);\n            return false;\n        }\n        \n        // there is an index and a gap file:\n        // read the index file:\n        try {\n            this.index = new LongHandleIndex(this.keylength, this.ordering, fif, 1000000);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        // an index file is a one-time throw-away object, so just delete it now\n        FileUtils.deletedelete(fif);\n        \n        // read the gap file:\n        try {\n            this.free = new Gap(fgf);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        // same with gap file\n        FileUtils.deletedelete(fgf);\n        \n        // everything is fine now\n        return this.index.size() > 0;\n    }","commit_id":"876746602d61e2b28b93ece1e668856e198a65d9","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"protected static String fingerprintFileHash(File f) {\n        assert f != null;\n        assert f.exists() : \"file = \" + f.toString();\n        String fp = Digest.fastFingerprintB64(f, false);\n        assert fp != null : \"file = \" + f.toString();\n        return fp.substring(0, 12);\n    }","id":94315,"modified_method":"protected static String fingerprintFileHash(File f) {\n        assert f != null;\n        assert f.exists() : \"file = \" + f.toString();\n        String fp = Digest.fastFingerprintB64(f, false);\n        assert fp != null : \"file = \" + f.toString();\n        if (fp == null) return null;\n        return fp.substring(0, 12);\n    }","commit_id":"876746602d61e2b28b93ece1e668856e198a65d9","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * close the BLOB table\n     * @throws  \n     */\n    public synchronized void close(boolean writeIDX) throws IOException {\n        // close the file\n        os.flush();\n        os.close();\n        os = null;\n        \n        // rename the file into final name\n        if (this.heapFileREADY.exists()) FileUtils.deletedelete(this.heapFileREADY);\n        boolean renameok = this.heapFileTMP.renameTo(this.heapFileREADY);\n        if (!renameok) throw new IOException(\"cannot rename \" + this.heapFileTMP + \" to \" + this.heapFileREADY);\n        if (!this.heapFileREADY.exists()) throw new IOException(\"renaming of \" + this.heapFileREADY.toString() + \" failed: files still exists\");\n        if (this.heapFileTMP.exists()) throw new IOException(\"renaming to \" + this.heapFileTMP.toString() + \" failed: file does not exist\");\n        \n        // generate index and gap files\n        if (writeIDX && index.size() > 3) {\n            // now we can create a dump of the index and the gap information\n            // to speed up the next start\n            try {\n                long start = System.currentTimeMillis();\n                String fingerprint = HeapWriter.fingerprintFileHash(this.heapFileREADY);\n                new Gap().dump(fingerprintGapFile(this.heapFileREADY, fingerprint));\n                index.dump(fingerprintIndexFile(this.heapFileREADY, fingerprint));\n                Log.logInfo(\"kelondroBLOBHeapWriter\", \"wrote a dump for the \" + this.index.size() +  \" index entries of \" + heapFileREADY.getName()+ \" in \" + (System.currentTimeMillis() - start) + \" milliseconds.\");\n                index.close();\n                index = null;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            // this is small.. just free resources, do not write index\n            index.close();\n            index = null;\n        }\n    }","id":94316,"modified_method":"/**\n     * close the BLOB table\n     * @throws  \n     */\n    public synchronized void close(boolean writeIDX) throws IOException {\n        // close the file\n        os.flush();\n        os.close();\n        os = null;\n        \n        // rename the file into final name\n        if (this.heapFileREADY.exists()) FileUtils.deletedelete(this.heapFileREADY);\n        boolean renameok = this.heapFileTMP.renameTo(this.heapFileREADY);\n        if (!renameok) throw new IOException(\"cannot rename \" + this.heapFileTMP + \" to \" + this.heapFileREADY);\n        if (!this.heapFileREADY.exists()) throw new IOException(\"renaming of \" + this.heapFileREADY.toString() + \" failed: files still exists\");\n        if (this.heapFileTMP.exists()) throw new IOException(\"renaming to \" + this.heapFileTMP.toString() + \" failed: file does not exist\");\n        \n        // generate index and gap files\n        if (writeIDX && index.size() > 3) {\n            // now we can create a dump of the index and the gap information\n            // to speed up the next start\n            try {\n                long start = System.currentTimeMillis();\n                String fingerprint = HeapWriter.fingerprintFileHash(this.heapFileREADY);\n                if (fingerprint == null) {\n                    Log.logSevere(\"kelondroBLOBHeapWriter\", \"cannot write a dump for \" + heapFileREADY.getName()+ \": fingerprint is null\");\n                } else {\n                    new Gap().dump(fingerprintGapFile(this.heapFileREADY, fingerprint));\n                    index.dump(fingerprintIndexFile(this.heapFileREADY, fingerprint));\n                    Log.logInfo(\"kelondroBLOBHeapWriter\", \"wrote a dump for the \" + this.index.size() +  \" index entries of \" + heapFileREADY.getName()+ \" in \" + (System.currentTimeMillis() - start) + \" milliseconds.\");\n                }\n                index.close();\n                index = null;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            // this is small.. just free resources, do not write index\n            index.close();\n            index = null;\n        }\n    }","commit_id":"876746602d61e2b28b93ece1e668856e198a65d9","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Test\n  public void define_rule_with_default_fields() {\n    context.newRepository(\"findbugs\", \"java\").newRule(\"NPE\");\n\n    RuleDefinitions.NewRule rule = context.getRepository(\"findbugs\").getRule(\"NPE\");\n    assertThat(rule.key()).isEqualTo(\"NPE\");\n    assertThat(rule.name()).isEqualTo(\"NPE\");\n    assertThat(rule.defaultSeverity()).isEqualTo(Severity.MAJOR);\n    assertThat(rule.htmlDescription()).isNull();\n    assertThat(rule.getParams()).isEmpty();\n    assertThat(rule.metadata()).isNull();\n    assertThat(rule.tags()).isEmpty();\n  }","id":94317,"modified_method":"@Test\n  public void define_rule_with_default_fields() {\n    RuleDefinitions.NewRepository newFindbugs = context.newRepository(\"findbugs\", \"java\");\n    newFindbugs.newRule(\"NPE\");\n    newFindbugs.done();\n\n    RuleDefinitions.Rule rule = context.repository(\"findbugs\").rule(\"NPE\");\n    assertThat(rule.key()).isEqualTo(\"NPE\");\n    assertThat(rule.name()).isEqualTo(\"NPE\");\n    assertThat(rule.defaultSeverity()).isEqualTo(Severity.MAJOR);\n    assertThat(rule.htmlDescription()).isNull();\n    assertThat(rule.params()).isEmpty();\n    assertThat(rule.metadata()).isNull();\n    assertThat(rule.tags()).isEmpty();\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void define_rules() {\n    RuleDefinitions.NewRepository findbugs = context.newRepository(\"findbugs\", \"java\");\n    findbugs.newRule(\"NPE\")\n        .setName(\"Detect NPE\")\n        .setHtmlDescription(\"Detect <code>java.lang.NullPointerException<\/code>\")\n        .setDefaultSeverity(Severity.BLOCKER)\n        .setMetadata(\"/something\")\n        .setTags(\"valuable\", \"bug\");\n    findbugs.newRule(\"ABC\");\n\n    assertThat(findbugs.getRules()).hasSize(2);\n\n    RuleDefinitions.NewRule npeRule = findbugs.getRule(\"NPE\");\n    assertThat(npeRule.key()).isEqualTo(\"NPE\");\n    assertThat(npeRule.name()).isEqualTo(\"Detect NPE\");\n    assertThat(npeRule.defaultSeverity()).isEqualTo(Severity.BLOCKER);\n    assertThat(npeRule.htmlDescription()).isEqualTo(\"Detect <code>java.lang.NullPointerException<\/code>\");\n    assertThat(npeRule.tags()).containsOnly(\"valuable\", \"bug\");\n    assertThat(npeRule.getParams()).isEmpty();\n    assertThat(npeRule.metadata()).isEqualTo(\"/something\");\n\n    // test equals() and hashCode()\n    RuleDefinitions.NewRule otherRule = findbugs.getRule(\"ABC\");\n    assertThat(npeRule).isEqualTo(npeRule).isNotEqualTo(otherRule).isNotEqualTo(\"NPE\").isNotEqualTo(null);\n    assertThat(npeRule.hashCode()).isEqualTo(npeRule.hashCode());\n  }","id":94318,"modified_method":"@Test\n  public void define_rules() {\n    RuleDefinitions.NewRepository newFindbugs = context.newRepository(\"findbugs\", \"java\");\n    newFindbugs.newRule(\"NPE\")\n      .setName(\"Detect NPE\")\n      .setHtmlDescription(\"Detect <code>java.lang.NullPointerException<\/code>\")\n      .setDefaultSeverity(Severity.BLOCKER)\n      .setMetadata(\"/something\")\n      .setTags(\"one\", \"two\")\n      .addTags(\"two\", \"three\", \"four\");\n    newFindbugs.newRule(\"ABC\");\n    newFindbugs.done();\n\n    RuleDefinitions.Repository findbugs = context.repository(\"findbugs\");\n    assertThat(findbugs.rules()).hasSize(2);\n\n    RuleDefinitions.Rule npeRule = findbugs.rule(\"NPE\");\n    assertThat(npeRule.key()).isEqualTo(\"NPE\");\n    assertThat(npeRule.name()).isEqualTo(\"Detect NPE\");\n    assertThat(npeRule.defaultSeverity()).isEqualTo(Severity.BLOCKER);\n    assertThat(npeRule.htmlDescription()).isEqualTo(\"Detect <code>java.lang.NullPointerException<\/code>\");\n    assertThat(npeRule.tags()).containsOnly(\"one\", \"two\", \"three\", \"four\");\n    assertThat(npeRule.params()).isEmpty();\n    assertThat(npeRule.metadata()).isEqualTo(\"/something\");\n    assertThat(npeRule.toString()).isEqualTo(\"[repository=findbugs, key=NPE]\");\n\n    // test equals() and hashCode()\n    RuleDefinitions.Rule otherRule = findbugs.rule(\"ABC\");\n    assertThat(npeRule).isEqualTo(npeRule).isNotEqualTo(otherRule).isNotEqualTo(\"NPE\").isNotEqualTo(null);\n    assertThat(npeRule.hashCode()).isEqualTo(npeRule.hashCode());\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_if_duplicated_repo_keys() {\n    context.newRepository(\"findbugs\", \"java\");\n    try {\n      context.newRepository(\"findbugs\", \"whatever_the_language\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      assertThat(e).hasMessage(\"The rule repository 'findbugs' is defined several times\");\n    }\n  }","id":94319,"modified_method":"@Test\n  public void fail_if_duplicated_repo_keys() {\n    context.newRepository(\"findbugs\", \"java\").done();\n    try {\n      context.newRepository(\"findbugs\", \"whatever_the_language\").done();\n      fail();\n    } catch (IllegalStateException e) {\n      assertThat(e).hasMessage(\"The rule repository 'findbugs' is defined several times\");\n    }\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void define_rule_parameters() {\n    context.newRepository(\"findbugs\", \"java\")\n        .newRule(\"NPE\")\n        .newParam(\"level\").setDefaultValue(\"LOW\").setName(\"Level\").setDescription(\"The level\")\n        .rule()\n        .newParam(\"effort\");\n\n    RuleDefinitions.NewRule rule = context.getRepository(\"findbugs\").getRule(\"NPE\");\n    assertThat(rule.getParams()).hasSize(2);\n\n    RuleDefinitions.NewParam level = rule.getParam(\"level\");\n    assertThat(level.key()).isEqualTo(\"level\");\n    assertThat(level.name()).isEqualTo(\"Level\");\n    assertThat(level.description()).isEqualTo(\"The level\");\n    assertThat(level.defaultValue()).isEqualTo(\"LOW\");\n\n    RuleDefinitions.NewParam effort = rule.getParam(\"effort\");\n    assertThat(effort.key()).isEqualTo(\"effort\").isEqualTo(effort.name());\n    assertThat(effort.description()).isNull();\n    assertThat(effort.defaultValue()).isNull();\n\n    // test equals() and hashCode()\n    assertThat(level).isEqualTo(level).isNotEqualTo(effort).isNotEqualTo(\"level\").isNotEqualTo(null);\n    assertThat(level.hashCode()).isEqualTo(level.hashCode());\n  }","id":94320,"modified_method":"@Test\n  public void define_rule_parameters() {\n    RuleDefinitions.NewRepository newFindbugs = context.newRepository(\"findbugs\", \"java\");\n    RuleDefinitions.NewRule newNpe = newFindbugs.newRule(\"NPE\");\n    newNpe.newParam(\"level\").setDefaultValue(\"LOW\").setName(\"Level\").setDescription(\"The level\");\n    newNpe.newParam(\"effort\");\n    newFindbugs.done();\n\n    RuleDefinitions.Rule rule = context.repository(\"findbugs\").rule(\"NPE\");\n    assertThat(rule.params()).hasSize(2);\n\n    RuleDefinitions.Param level = rule.param(\"level\");\n    assertThat(level.key()).isEqualTo(\"level\");\n    assertThat(level.name()).isEqualTo(\"Level\");\n    assertThat(level.description()).isEqualTo(\"The level\");\n    assertThat(level.defaultValue()).isEqualTo(\"LOW\");\n\n    RuleDefinitions.Param effort = rule.param(\"effort\");\n    assertThat(effort.key()).isEqualTo(\"effort\").isEqualTo(effort.name());\n    assertThat(effort.description()).isNull();\n    assertThat(effort.defaultValue()).isNull();\n\n    // test equals() and hashCode()\n    assertThat(level).isEqualTo(level).isNotEqualTo(effort).isNotEqualTo(\"level\").isNotEqualTo(null);\n    assertThat(level.hashCode()).isEqualTo(level.hashCode());\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void extend_repository() {\n    assertThat(context.getExtendedRepositories()).isEmpty();\n\n    // for example fb-contrib\n    context.extendRepository(\"findbugs\").newRule(\"NPE\");\n\n    assertThat(context.getRepositories()).isEmpty();\n    assertThat(context.getExtendedRepositories()).hasSize(1);\n    assertThat(context.getExtendedRepositories(\"other\")).isEmpty();\n    assertThat(context.getExtendedRepositories(\"findbugs\")).hasSize(1);\n\n    RuleDefinitions.ExtendedRepository findbugs = context.getExtendedRepositories(\"findbugs\").get(0);\n    assertThat(findbugs.getRule(\"NPE\")).isNotNull();\n  }","id":94321,"modified_method":"@Test\n  public void extend_repository() {\n    assertThat(context.extendedRepositories()).isEmpty();\n\n    // for example fb-contrib\n    RuleDefinitions.NewExtendedRepository newFindbugs = context.extendRepository(\"findbugs\");\n    newFindbugs.newRule(\"NPE\");\n    newFindbugs.done();\n\n    assertThat(context.repositories()).isEmpty();\n    assertThat(context.extendedRepositories()).hasSize(1);\n    assertThat(context.extendedRepositories(\"other\")).isEmpty();\n    assertThat(context.extendedRepositories(\"findbugs\")).hasSize(1);\n\n    RuleDefinitions.ExtendedRepository findbugs = context.extendedRepositories(\"findbugs\").get(0);\n    assertThat(findbugs.rule(\"NPE\")).isNotNull();\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void define_repositories() throws Exception {\n    assertThat(context.getRepositories()).isEmpty();\n\n    RuleDefinitions.NewRepository findbugs = context.newRepository(\"findbugs\", \"java\")\n        .setName(\"Findbugs\");\n    RuleDefinitions.NewRepository checkstyle = context.newRepository(\"checkstyle\", \"java\");\n\n    assertThat(findbugs).isNotNull();\n    assertThat(findbugs.key()).isEqualTo(\"findbugs\");\n    assertThat(findbugs.language()).isEqualTo(\"java\");\n    assertThat(findbugs.name()).isEqualTo(\"Findbugs\");\n    assertThat(findbugs.getRules()).isEmpty();\n\n    assertThat(context.getRepositories()).hasSize(2);\n    assertThat(context.getRepository(\"findbugs\")).isSameAs(findbugs);\n    assertThat(context.getRepository(\"unknown\")).isNull();\n\n    // test equals() and hashCode()\n    assertThat(findbugs).isEqualTo(findbugs).isNotEqualTo(checkstyle).isNotEqualTo(\"findbugs\").isNotEqualTo(null);\n    assertThat(findbugs.hashCode()).isEqualTo(findbugs.hashCode());\n  }","id":94322,"modified_method":"@Test\n  public void define_repositories() throws Exception {\n    assertThat(context.repositories()).isEmpty();\n\n    context.newRepository(\"findbugs\", \"java\").setName(\"Findbugs\").done();\n    context.newRepository(\"checkstyle\", \"java\").done();\n\n    assertThat(context.repositories()).hasSize(2);\n    RuleDefinitions.Repository findbugs = context.repository(\"findbugs\");\n    assertThat(findbugs).isNotNull();\n    assertThat(findbugs.key()).isEqualTo(\"findbugs\");\n    assertThat(findbugs.language()).isEqualTo(\"java\");\n    assertThat(findbugs.name()).isEqualTo(\"Findbugs\");\n    assertThat(findbugs.rules()).isEmpty();\n    RuleDefinitions.Repository checkstyle = context.repository(\"checkstyle\");\n    assertThat(checkstyle).isNotNull();\n    assertThat(checkstyle.key()).isEqualTo(\"checkstyle\");\n    assertThat(checkstyle.language()).isEqualTo(\"java\");\n\n    // default name is key\n    assertThat(checkstyle.name()).isEqualTo(\"checkstyle\");\n    assertThat(checkstyle.rules()).isEmpty();\n    assertThat(context.repository(\"unknown\")).isNull();\n\n    // test equals() and hashCode()\n    assertThat(findbugs).isEqualTo(findbugs).isNotEqualTo(checkstyle).isNotEqualTo(\"findbugs\").isNotEqualTo(null);\n    assertThat(findbugs.hashCode()).isEqualTo(findbugs.hashCode());\n  }","commit_id":"8ee423f728c95b5468df146b013a483616fffa5d","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void setTimeZone(DateTimeZone timeZone) {\n        fields.put(TIMEZONE, timeZone.getID());\n    }","id":94323,"modified_method":"public void setTimeZone(DateTimeZone timeZone) {\n        fields.put(TIMEZONE, timeZone == null ? null : timeZone.getID());\n    }","commit_id":"f531a4d6d50678478dd7b417b597cda26f50e503","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public LanguageFilterAction(final Language language) {\n      super(language.getDisplayName());\n      myLanguageId = language.getID();\n    }","id":94324,"modified_method":"public LanguageFilterAction(final @Nullable Language language) {\n      super(language == null ? \"Language is not specified\" : language.getDisplayName());\n      myLanguageId = language == null ? null : language.getID();\n    }","commit_id":"686bc520d39b0b4dcb7d0e66acedb957dd1b94f8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void tune(InspectionProfileImpl profile, Project project) {\n    addAction(new ResetFilterAction());\n    addSeparator();\n\n    addAction(new ShowEnabledOrDisabledInspectionsAction(true));\n    addAction(new ShowEnabledOrDisabledInspectionsAction(false));\n    addSeparator();\n\n    final SortedSet<HighlightSeverity> severities = LevelChooserAction.getSeverities(mySeverityRegistrar);\n    for (final HighlightSeverity severity : severities) {\n      add(new ShowWithSpecifiedSeverityInspectionsAction(severity));\n    }\n    addSeparator();\n\n    final Set<String> languageIds = new HashSet<String>();\n    for (ScopeToolState state : profile.getDefaultStates(project)) {\n      final String languageId = state.getTool().getLanguage();\n      languageIds.add(languageId);\n    }\n\n    final List<Language> languages = new ArrayList<Language>();\n    for (String id : languageIds) {\n      if (id != null) {\n        final Language language = Language.findLanguageByID(id);\n        if (language != null) {\n          languages.add(language);\n        }\n      }\n    }\n\n    if (!languages.isEmpty()) {\n      Collections.sort(languages, new Comparator<Language>() {\n        @Override\n        public int compare(Language l1, Language l2) {\n          return l1.getDisplayName().compareTo(l2.getDisplayName());\n        }\n      });\n      for (Language language : languages) {\n        add(new LanguageFilterAction(language));\n      }\n      addSeparator();\n    }\n\n    add(new ShowAvailableOnlyOnAnalyzeInspectionsAction());\n    add(new ShowOnlyCleanupInspectionsAction());\n  }","id":94325,"modified_method":"private void tune(InspectionProfileImpl profile, Project project) {\n    addAction(new ResetFilterAction());\n    addSeparator();\n\n    addAction(new ShowEnabledOrDisabledInspectionsAction(true));\n    addAction(new ShowEnabledOrDisabledInspectionsAction(false));\n    addSeparator();\n\n    final SortedSet<HighlightSeverity> severities = LevelChooserAction.getSeverities(mySeverityRegistrar);\n    for (final HighlightSeverity severity : severities) {\n      add(new ShowWithSpecifiedSeverityInspectionsAction(severity));\n    }\n    addSeparator();\n\n    final Set<String> languageIds = new HashSet<String>();\n    for (ScopeToolState state : profile.getDefaultStates(project)) {\n      final String languageId = state.getTool().getLanguage();\n      languageIds.add(languageId);\n    }\n\n    final List<Language> languages = new ArrayList<Language>();\n    for (String id : languageIds) {\n      if (id != null) {\n        final Language language = Language.findLanguageByID(id);\n        if (language != null) {\n          languages.add(language);\n        }\n      }\n    }\n\n    if (!languages.isEmpty()) {\n      Collections.sort(languages, new Comparator<Language>() {\n        @Override\n        public int compare(Language l1, Language l2) {\n          return l1.getDisplayName().compareTo(l2.getDisplayName());\n        }\n      });\n      for (Language language : languages) {\n        add(new LanguageFilterAction(language));\n      }\n      add(new LanguageFilterAction(null));\n      addSeparator();\n    }\n\n    add(new ShowAvailableOnlyOnAnalyzeInspectionsAction());\n    add(new ShowOnlyCleanupInspectionsAction());\n  }","commit_id":"686bc520d39b0b4dcb7d0e66acedb957dd1b94f8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void doFlush(DfaVariableValue varPlain) {\n    DfaVariableValue varNegated = varPlain.createNegated();\n\n    final int idPlain = varPlain.getID();\n    final int idNegated = varNegated.getID();\n\n    int size = myEqClasses.size();\n    int interruptCount = 0;\n    for (int varClassIndex = 0; varClassIndex < size; varClassIndex++) {\n      final SortedIntSet varClass = myEqClasses.get(varClassIndex);\n      if (varClass == null) continue;\n\n      for (int i = 0; i < varClass.size(); i++) {\n        if ((++interruptCount & 0xf) == 0) {\n          ProgressManager.checkCanceled();\n        }\n        int cl = varClass.get(i);\n        DfaValue value = myFactory.getValue(cl);\n        if (mine(idPlain, value) || mine(idNegated, value)) {\n          varClass.remove(i);\n          break;\n        }\n      }\n\n      if (varClass.isEmpty()) {\n        myEqClasses.set(varClassIndex, null);\n        myStateSize--;\n        long[] pairs = myDistinctClasses.toArray();\n        for (long pair : pairs) {\n          if (low(pair) == varClassIndex || high(pair) == varClassIndex) {\n            myDistinctClasses.remove(pair);\n          }\n        }\n      }\n      else if (containsConstantsOnly(varClassIndex)) {\n        for (long pair : myDistinctClasses.toArray()) {\n          if (low(pair) == varClassIndex && containsConstantsOnly(high(pair)) ||\n              high(pair) == varClassIndex && containsConstantsOnly(low(pair))) {\n            myDistinctClasses.remove(pair);\n          }\n        }\n      }\n    }\n\n    myVariableStates.remove(varPlain);\n    myVariableStates.remove(varNegated);\n  }","id":94326,"modified_method":"private void doFlush(DfaVariableValue varPlain) {\n    DfaVariableValue varNegated = varPlain.getNegatedValue();\n\n    final int idPlain = varPlain.getID();\n    final int idNegated = varNegated == null ? -1 : varNegated.getID();\n\n    int size = myEqClasses.size();\n    int interruptCount = 0;\n    for (int varClassIndex = 0; varClassIndex < size; varClassIndex++) {\n      final SortedIntSet varClass = myEqClasses.get(varClassIndex);\n      if (varClass == null) continue;\n\n      for (int i = 0; i < varClass.size(); i++) {\n        if ((++interruptCount & 0xf) == 0) {\n          ProgressManager.checkCanceled();\n        }\n        int cl = varClass.get(i);\n        DfaValue value = myFactory.getValue(cl);\n        if (mine(idPlain, value) || idNegated >= 0 && mine(idNegated, value)) {\n          varClass.remove(i);\n          break;\n        }\n      }\n\n      if (varClass.isEmpty()) {\n        myEqClasses.set(varClassIndex, null);\n        myStateSize--;\n        long[] pairs = myDistinctClasses.toArray();\n        for (long pair : pairs) {\n          if (low(pair) == varClassIndex || high(pair) == varClassIndex) {\n            myDistinctClasses.remove(pair);\n          }\n        }\n      }\n      else if (containsConstantsOnly(varClassIndex)) {\n        for (long pair : myDistinctClasses.toArray()) {\n          if (low(pair) == varClassIndex && containsConstantsOnly(high(pair)) ||\n              high(pair) == varClassIndex && containsConstantsOnly(low(pair))) {\n            myDistinctClasses.remove(pair);\n          }\n        }\n      }\n    }\n\n    myVariableStates.remove(varPlain);\n    if (varNegated != null) {\n      myVariableStates.remove(varNegated);\n    }\n  }","commit_id":"d0469515fa52125d7485b50a4c3c0ffdf7269367","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public Action copy () {\r\n\t\tFadeIn fadeIn = $(duration);\r\n\t\tfadeIn.setInterpolator(interpolator.copy());\r\n\t\treturn fadeIn;\r\n\t}","id":94327,"modified_method":"@Override public Action copy () {\r\n\t\tFadeIn fadeIn = $(duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tfadeIn.setInterpolator(interpolator.copy());\t\t\r\n\t\treturn fadeIn;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tFadeOut fadeOut = $(duration);\r\n\t\tfadeOut.setInterpolator(interpolator.copy());\r\n\t\treturn fadeOut;\r\n\t}","id":94328,"modified_method":"@Override public Action copy () {\r\n\t\tFadeOut fadeOut = $(duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tfadeOut.setInterpolator(interpolator.copy());\r\n\t\treturn fadeOut;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tFadeTo fadeTo = $(toAlpha, duration);\r\n\t\tfadeTo.setInterpolator(interpolator.copy());\r\n\t\treturn fadeTo;\r\n\t}","id":94329,"modified_method":"@Override public Action copy () {\r\n\t\tFadeTo fadeTo = $(toAlpha, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tfadeTo.setInterpolator(interpolator.copy());\r\n\t\treturn fadeTo;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tMoveBy moveBy = $(deltaX, deltaY, duration);\r\n\t\tmoveBy.setInterpolator(interpolator.copy());\r\n\t\treturn moveBy;\r\n\t}","id":94330,"modified_method":"@Override public Action copy () {\r\n\t\tMoveBy moveBy = $(deltaX, deltaY, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tmoveBy.setInterpolator(interpolator.copy());\r\n\t\treturn moveBy;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tMoveTo moveTo = $(x, y, duration);\r\n\t\tmoveTo.setInterpolator(interpolator.copy());\r\n\t\treturn moveTo;\r\n\t}","id":94331,"modified_method":"@Override public Action copy () {\r\n\t\tMoveTo moveTo = $(x, y, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tmoveTo.setInterpolator(interpolator.copy());\r\n\t\treturn moveTo;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tRotateBy rotateBy = $(rotation, duration);\r\n\t\trotateBy.setInterpolator(interpolator.copy());\r\n\t\treturn rotateBy;\r\n\t}","id":94332,"modified_method":"@Override public Action copy () {\r\n\t\tRotateBy rotateBy = $(rotation, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\trotateBy.setInterpolator(interpolator.copy());\r\n\t\treturn rotateBy;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tRotateTo rotateTo = $(rotation, duration);\r\n\t\trotateTo.setInterpolator(interpolator.copy());\r\n\t\treturn rotateTo;\r\n\t}","id":94333,"modified_method":"@Override public Action copy () {\r\n\t\tRotateTo rotateTo = $(rotation, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\trotateTo.setInterpolator(interpolator.copy());\r\n\t\treturn rotateTo;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override public Action copy () {\r\n\t\tScaleTo scaleTo = $(scaleX, scaleY, duration);\r\n\t\tscaleTo.setInterpolator(interpolator.copy());\r\n\t\treturn scaleTo;\r\n\t}","id":94334,"modified_method":"@Override public Action copy () {\r\n\t\tScaleTo scaleTo = $(scaleX, scaleY, duration);\r\n\t\tif(interpolator != null)\r\n\t\t\tscaleTo.setInterpolator(interpolator.copy());\r\n\t\treturn scaleTo;\r\n\t}","commit_id":"c0df149cfcf6972fd4ca45cff38a82a599677018","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\n  public StorageDir getDirCandidate(List<BlockInfo> blockInfoList, StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestSize) {\n    Map<StorageDir, Pair<Long, Long>> dir2LRUBlocks = new HashMap<StorageDir, Pair<Long, Long>>();\n    HashMultimap<StorageDir, Long> dir2BlocksToEvict = HashMultimap.create();\n    Map<StorageDir, Long> sizeToEvict = new HashMap<StorageDir, Long>();\n    while (true) {\n      // Get oldest block in StorageDir candidates\n      Pair<StorageDir, Long> candidate =\n          getLRUBlockCandidate(storageDirs, dir2LRUBlocks, dir2BlocksToEvict, pinList);\n      StorageDir dirCandidate = candidate.getFirst();\n      long blockId = candidate.getSecond();\n      long blockSize = 0;\n      if (dirCandidate == null) {\n        // If there is no more block to evict, return null\n        return null;\n      } else {\n        blockSize = dirCandidate.getBlockSize(blockId);\n      }\n      // Add info of the block to the list\n      blockInfoList.add(new BlockInfo(dirCandidate, blockId, blockSize));\n      dir2BlocksToEvict.put(dirCandidate, blockId);\n      dir2LRUBlocks.remove(dirCandidate);\n      long evictionSize;\n      // Update eviction size for this StorageDir\n      if (sizeToEvict.containsKey(dirCandidate)) {\n        evictionSize = sizeToEvict.get(dirCandidate) + blockSize;\n      } else {\n        evictionSize = blockSize;\n      }\n      sizeToEvict.put(dirCandidate, evictionSize);\n      // Return if eviction size plus free space is larger than request size\n      if (evictionSize + dirCandidate.getAvailable() >= requestSize) {\n        return dirCandidate;\n      }\n    }\n  }","id":94335,"modified_method":"@Override\n  public Pair<StorageDir, List<BlockInfo>> getDirCandidate(StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestSize) {\n    List<BlockInfo> blockInfoList = new ArrayList<BlockInfo>();\n    Map<StorageDir, Pair<Long, Long>> dir2LRUBlocks = new HashMap<StorageDir, Pair<Long, Long>>();\n    HashMultimap<StorageDir, Long> dir2BlocksToEvict = HashMultimap.create();\n    Map<StorageDir, Long> sizeToEvict = new HashMap<StorageDir, Long>();\n    // If no StorageDir has enough space for the request size, continue; if no block can be evicted,\n    // return null; and if eviction size plus free space of some StorageDir is larger than request\n    // size, return the Pair of StorageDir and blockInfoList\n    while (true) {\n      // Get oldest block in StorageDir candidates\n      Pair<StorageDir, Long> candidate =\n          getLRUBlockCandidate(storageDirs, dir2LRUBlocks, dir2BlocksToEvict, pinList);\n      StorageDir dirCandidate = candidate.getFirst();\n      long blockId = candidate.getSecond();\n      long blockSize = 0;\n      if (dirCandidate == null) {\n        return null;\n      } else {\n        blockSize = dirCandidate.getBlockSize(blockId);\n      }\n      // Add info of the block to the list\n      blockInfoList.add(new BlockInfo(dirCandidate, blockId, blockSize));\n      dir2BlocksToEvict.put(dirCandidate, blockId);\n      dir2LRUBlocks.remove(dirCandidate);\n      long evictionSize;\n      // Update eviction size for this StorageDir\n      if (sizeToEvict.containsKey(dirCandidate)) {\n        evictionSize = sizeToEvict.get(dirCandidate) + blockSize;\n      } else {\n        evictionSize = blockSize;\n      }\n      sizeToEvict.put(dirCandidate, evictionSize);\n      if (evictionSize + dirCandidate.getAvailable() >= requestSize) {\n        return new Pair<StorageDir, List<BlockInfo>>(dirCandidate, blockInfoList);\n      }\n    }\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get the oldest block access information in certain StorageDir\n   * \n   * @param curDir\n   *          current StorageDir\n   * @param toEvictBlockIds\n   *          block ids that have been selected to be evicted\n   * @param pinList\n   *          list of pinned files\n   * @return oldest access information of current StorageDir\n   */\n  Pair<Long, Long> getLRUBlock(StorageDir curDir, Collection<Long> toEvictBlockIds,\n      Set<Integer> pinList) {\n    long blockId = -1;\n    long oldestTime = Long.MAX_VALUE;\n    Map<Long, Long> accessTimes = curDir.getLastBlockAccessTime();\n\n    for (Entry<Long, Long> accessTime : accessTimes.entrySet()) {\n      if (toEvictBlockIds.contains(accessTime.getKey())) {\n        continue;\n      }\n      if (accessTime.getValue() < oldestTime && !curDir.isBlockLocked(accessTime.getKey())) {\n        if (blockEvictable(accessTime.getKey(), pinList)) {\n          oldestTime = accessTime.getValue();\n          blockId = accessTime.getKey();\n        }\n      }\n    }\n\n    return new Pair<Long, Long>(blockId, oldestTime);\n  }","id":94336,"modified_method":"/**\n   * Get the oldest block access information in certain StorageDir\n   * \n   * @param curDir\n   *          current StorageDir\n   * @param toEvictBlockIds\n   *          block ids that have been selected to be evicted\n   * @param pinList\n   *          list of pinned files\n   * @return oldest access information of current StorageDir\n   */\n  Pair<Long, Long> getLRUBlock(StorageDir curDir, Collection<Long> toEvictBlockIds,\n      Set<Integer> pinList) {\n    long blockId = -1;\n    long oldestTime = Long.MAX_VALUE;\n    ConcurrentMap<Long, Long> accessTimes = curDir.getLastBlockAccessTime();\n\n    for (Entry<Long, Long> accessTime : accessTimes.entrySet()) {\n      if (toEvictBlockIds.contains(accessTime.getKey())) {\n        continue;\n      }\n      if (accessTime.getValue() < oldestTime && !curDir.isBlockLocked(accessTime.getKey())) {\n        if (blockEvictable(accessTime.getKey(), pinList)) {\n          oldestTime = accessTime.getValue();\n          blockId = accessTime.getKey();\n        }\n      }\n    }\n\n    return new Pair<Long, Long>(blockId, oldestTime);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public StorageDir getDirCandidate(List<BlockInfo> blockInfoList, StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestSize) {\n    Set<StorageDir> ignoredDirs = new HashSet<StorageDir>();\n    StorageDir dirSelected = getDirWithMaxFreeSpace(requestSize, storageDirs, ignoredDirs);\n    while (dirSelected != null) {\n      Set<Long> blockIdSet = new HashSet<Long>();\n      long sizeToEvict = 0;\n      while (sizeToEvict + dirSelected.getAvailable() < requestSize) {\n        Pair<Long, Long> oldestAccess = getLRUBlock(dirSelected, blockIdSet, pinList);\n        if (oldestAccess.getFirst() != -1) {\n          long blockSize = dirSelected.getBlockSize(oldestAccess.getFirst());\n          sizeToEvict += blockSize;\n          blockInfoList.add(new BlockInfo(dirSelected, oldestAccess.getFirst(), blockSize));\n          blockIdSet.add(oldestAccess.getFirst());\n        } else {\n          break;\n        }\n      }\n      if (sizeToEvict + dirSelected.getAvailable() < requestSize) {\n        ignoredDirs.add(dirSelected);\n        blockInfoList.clear();\n        blockIdSet.clear();\n        dirSelected = getDirWithMaxFreeSpace(requestSize, storageDirs, ignoredDirs);\n      } else {\n        return dirSelected;\n      }\n    }\n    return null;\n  }","id":94337,"modified_method":"@Override\n  public Pair<StorageDir, List<BlockInfo>> getDirCandidate(StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestSize) {\n    List<BlockInfo> blockInfoList = new ArrayList<BlockInfo>();\n    Set<StorageDir> ignoredDirs = new HashSet<StorageDir>();\n    StorageDir dirSelected = getDirWithMaxFreeSpace(requestSize, storageDirs, ignoredDirs);\n    while (dirSelected != null) {\n      Set<Long> blockIdSet = new HashSet<Long>();\n      long sizeToEvict = 0;\n      while (sizeToEvict + dirSelected.getAvailable() < requestSize) {\n        Pair<Long, Long> oldestAccess = getLRUBlock(dirSelected, blockIdSet, pinList);\n        if (oldestAccess.getFirst() != -1) {\n          long blockSize = dirSelected.getBlockSize(oldestAccess.getFirst());\n          sizeToEvict += blockSize;\n          blockInfoList.add(new BlockInfo(dirSelected, oldestAccess.getFirst(), blockSize));\n          blockIdSet.add(oldestAccess.getFirst());\n        } else {\n          break;\n        }\n      }\n      if (sizeToEvict + dirSelected.getAvailable() < requestSize) {\n        ignoredDirs.add(dirSelected);\n        blockInfoList.clear();\n        blockIdSet.clear();\n        dirSelected = getDirWithMaxFreeSpace(requestSize, storageDirs, ignoredDirs);\n      } else {\n        return new Pair<StorageDir, List<BlockInfo>>(dirSelected, blockInfoList);\n      }\n    }\n    return null;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get sizes of the blocks on current StorageDir\n   * \n   * @return sizes of the blocks\n   * @throws IOException\n   */\n  public Map<Long, Long> getBlockSizes() {\n    return mBlockSizes;\n  }","id":94338,"modified_method":"/**\n   * Get sizes of the blocks on current StorageDir\n   * \n   * @return sizes of the blocks\n   * @throws IOException\n   */\n  public ConcurrentMap<Long, Long> getBlockSizes() {\n    return mBlockSizes;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Check status of the users, removedUsers can't be modified any more after being passed down from\n   * the caller\n   * \n   * @param removedUsers\n   *          id list of the removed users\n   */\n  public void checkStatus(List<Long> removedUsers) {\n    for (long userId : removedUsers) {\n      synchronized (mUserPerLockedBlock) {\n        Set<Long> blockIds = mLockedBlocksPerUser.get(userId);\n        mLockedBlocksPerUser.removeAll(userId);\n        if (blockIds != null) {\n          for (long blockId : blockIds) {\n            unlockBlock(blockId, userId);\n          }\n        }\n      }\n      synchronized (mUserAllocatedSpace) {\n        mUserAllocatedSpace.remove(userId);\n      }\n    }\n  }","id":94339,"modified_method":"/**\n   * Check status of the users, removedUsers can't be modified any more after being passed down from\n   * the caller\n   * \n   * @param removedUsers\n   *          id list of the removed users\n   */\n  public void checkStatus(List<Long> removedUsers) {\n    for (long userId : removedUsers) {\n      Collection<Long> blockIds = mLockedBlocksPerUser.removeAll(userId);\n      for (long blockId : blockIds) {\n        mUserPerLockedBlock.remove(blockId, userId);\n      }\n      mUserAllocatedSpace.remove(userId);\n    }\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Remove a block from current StorageDir\n   * \n   * @param blockId\n   *          The block to be removed.\n   * @return true if succeed, false otherwise\n   * @throws IOException\n   */\n  public boolean deleteBlock(long blockId) throws IOException {\n    if (mBlockSizes.containsKey(blockId)) {\n      String blockfile = getBlockFilePath(blockId);\n      boolean result = mUfs.delete(blockfile, true);\n      if (result) {\n        deleteBlockId(blockId);\n        LOG.debug(\"Removed block file:\" + blockfile);\n      } else {\n        LOG.error(\"Error during delete block! blockfile:\" + blockfile);\n      }\n      return result;\n    } else {\n      LOG.error(\"Block \" + blockId + \" does not exist in current StorageDir.\");\n      return false;\n    }\n  }","id":94340,"modified_method":"/**\n   * Remove a block from current StorageDir\n   * \n   * @param blockId\n   *          The block to be removed.\n   * @return true if succeed, false otherwise\n   * @throws IOException\n   */\n  public boolean deleteBlock(long blockId) throws IOException {\n    Long accessTime = mLastBlockAccessTimeMS.remove(blockId);\n    if (accessTime != null) {\n      String blockfile = getBlockFilePath(blockId);\n      boolean result = false;\n      try {\n        result = mUfs.delete(blockfile, true);\n      } finally {\n        if (result) {\n          deleteBlockId(blockId);\n          LOG.debug(\"Removed block file:\" + blockfile);\n        } else {\n          mLastBlockAccessTimeMS.put(blockId, accessTime);\n          LOG.error(\"Error during delete block! blockfile:\" + blockfile);\n        }\n      }\n      return result;\n    } else {\n      LOG.error(\"Block \" + blockId + \" does not exist in current StorageDir.\");\n      return false;\n    }\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Allocate space from current StorageDir\n   * \n   * @param userId\n   *          id of the user\n   * @param size\n   *          request size\n   * @return true if success, false otherwise\n   */\n  public boolean requestSpace(long userId, long size) {\n    boolean result = requestSpace(size);\n    if (result) {\n      synchronized (mUserAllocatedSpace) {\n        if (mUserAllocatedSpace.containsKey(userId)) {\n          long current = mUserAllocatedSpace.get(userId);\n          mUserAllocatedSpace.put(userId, current + size);\n        } else {\n          mUserAllocatedSpace.put(userId, size);\n        }\n      }\n    }\n    return result;\n  }","id":94341,"modified_method":"/**\n   * Allocate space from current StorageDir\n   * \n   * @param userId\n   *          id of the user\n   * @param size\n   *          request size\n   * @return true if success, false otherwise\n   */\n  public boolean requestSpace(long userId, long size) {\n    boolean result = requestSpace(size);\n    if (result) {\n      Long used = mUserAllocatedSpace.putIfAbsent(userId, size);\n      if (used != null) {\n        while (!mUserAllocatedSpace.replace(userId, used, used + size)) {\n          used = mUserAllocatedSpace.get(userId);\n          if (used == null) {\n            LOG.error(\"Error during requesting space! unknown user id:\" + userId);\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Return space to current StorageDir by some user\n   * \n   * @param userId\n   *          id of the user\n   * @param size\n   *          size to return\n   */\n  public void returnSpace(long userId, long size) {\n    returnSpace(size);\n    synchronized (mUserAllocatedSpace) {\n      if (mUserAllocatedSpace.containsKey(userId)) {\n        long current = mUserAllocatedSpace.get(userId);\n        mUserAllocatedSpace.put(userId, current - size);\n      } else {\n        LOG.warn(\"Error during returning space: unknown user ID.\");\n      }\n    }\n  }","id":94342,"modified_method":"/**\n   * Return space to current StorageDir by some user\n   * \n   * @param userId\n   *          id of the user\n   * @param size\n   *          size to return\n   */\n  public void returnSpace(long userId, long size) {\n    returnSpace(size);\n    Long used;\n    do {\n      used = mUserAllocatedSpace.get(userId);\n      if (used == null) {\n        LOG.error(\"Error during returning space! unknown user id:\" + userId);\n        break;\n      }\n    } while (!mUserAllocatedSpace.replace(userId, used, used - size));\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get ids of the blocks on current StorageDir\n   * \n   * @return ids of the blocks\n   */\n  public Set<Long> getBlockIds() {\n    return mBlockSizes.keySet();\n  }","id":94343,"modified_method":"/**\n   * Get ids of the blocks on current StorageDir\n   * \n   * @return ids of the blocks\n   */\n  public Set<Long> getBlockIds() {\n    return mLastBlockAccessTimeMS.keySet();\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Move the cached file from user temp directory to data directory\n   * \n   * @param userId\n   *          id of the user\n   * @param blockId\n   *          id of the block\n   * @return true if success, false otherwise\n   * @throws IOException\n   */\n  public boolean cacheBlock(long userId, long blockId) throws IOException {\n    String srcPath = getUserTempFilePath(userId, blockId);\n    String destPath = getBlockFilePath(blockId);\n    boolean result = mUfs.rename(srcPath, destPath);\n    if (result) {\n      addBlockId(blockId, getFileSize(blockId));\n    }\n    return result;\n  }","id":94344,"modified_method":"/**\n   * Move the cached file from user temp directory to data directory\n   * \n   * @param userId\n   *          id of the user\n   * @param blockId\n   *          id of the block\n   * @return true if success, false otherwise\n   * @throws IOException\n   */\n  public boolean cacheBlock(long userId, long blockId) throws IOException {\n    String srcPath = getUserTempFilePath(userId, blockId);\n    String dstPath = getBlockFilePath(blockId);\n    long blockSize = mUfs.getFileSize(srcPath);\n    boolean result = mUfs.rename(srcPath, dstPath);\n    if (result) {\n      addBlockId(blockId, blockSize);\n    }\n    return result;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Add a block id in current StorageDir\n   * \n   * @param blockId\n   *          id of the block\n   * @param size\n   *          size of the block file\n   */\n  private void addBlockId(long blockId, long size) {\n    mLastBlockAccessTimeMS.put(blockId, System.currentTimeMillis());\n    mBlockSizes.put(blockId, size);\n  }","id":94345,"modified_method":"/**\n   * Add a block id in current StorageDir\n   * \n   * @param blockId\n   *          id of the block\n   * @param size\n   *          size of the block file\n   */\n  private void addBlockId(long blockId, long size) {\n    accessBlock(blockId);\n    mBlockSizes.put(blockId, size);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get access time of blocks\n   * \n   * @return access time of blocks\n   */\n  public Map<Long, Long> getLastBlockAccessTime() {\n    return mLastBlockAccessTimeMS;\n  }","id":94346,"modified_method":"/**\n   * Get access time of blocks\n   * \n   * @return access time of blocks\n   */\n  public ConcurrentMap<Long, Long> getLastBlockAccessTime() {\n    return mLastBlockAccessTimeMS;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get list of removed block ids\n   * \n   * @return list of removed block ids\n   */\n  public List<Long> getRemovedBlockList() {\n    List<Long> removedBlockList = new ArrayList<Long>();\n    mRemovedBlockList.drainTo(removedBlockList);\n    return removedBlockList;\n  }","id":94347,"modified_method":"/**\n   * Get list of removed block ids\n   * \n   * @return queue of removed block ids\n   */\n  public BlockingQueue<Long> getRemovedBlockList() {\n    return mRemovedBlockList;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Copy block from current StorageDir to another\n   * \n   * @param blockId\n   *          id of the block\n   * @param dstDir\n   *          destination StorageDir\n   * @return true if success, false otherwise\n   * @throws IOException\n   */\n  public boolean copyBlock(long blockId, StorageDir dstDir) throws IOException {\n    int len = (int) getBlockSize(blockId);\n    boolean copySuccess = false;\n    Closer closer = Closer.create();\n    try {\n      BlockHandler bhSrc = closer.register(getBlockHandler(blockId));\n      BlockHandler bhDst = closer.register(dstDir.getBlockHandler(blockId));\n      ByteBuffer srcBuf = bhSrc.read(0, len);\n      copySuccess = bhDst.append(0, srcBuf) > 0;\n    } finally {\n      closer.close();\n    }\n    if (copySuccess) {\n      dstDir.addBlockId(blockId, len);\n    }\n    return copySuccess;\n  }","id":94348,"modified_method":"/**\n   * Copy block from current StorageDir to another\n   * \n   * @param blockId\n   *          id of the block\n   * @param dstDir\n   *          destination StorageDir\n   * @return true if success, false otherwise\n   * @throws IOException\n   */\n  public boolean copyBlock(long blockId, StorageDir dstDir) throws IOException {\n    long size = getBlockSize(blockId);\n    if (size == -1) {\n      LOG.error(\"Block file doesn't exist! blockId:\" + blockId);\n      return false;\n    }\n    boolean copySuccess = false;\n    Closer closer = Closer.create();\n    try {\n      BlockHandler bhSrc = closer.register(getBlockHandler(blockId));\n      BlockHandler bhDst = closer.register(dstDir.getBlockHandler(blockId));\n      ByteBuffer srcBuf = bhSrc.read(0, (int) size);\n      copySuccess = bhDst.append(0, srcBuf) > 0;\n    } finally {\n      closer.close();\n    }\n    if (copySuccess) {\n      dstDir.addBlockId(blockId, size);\n    }\n    return copySuccess;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Lock block by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @param userId\n   *          id of the user\n   */\n  public void lockBlock(long blockId, long userId) {\n    if (!containsBlock(blockId)) {\n      return;\n    }\n    synchronized (mUserPerLockedBlock) {\n      mUserPerLockedBlock.put(blockId, userId);\n    }\n    synchronized (mLockedBlocksPerUser) {\n      mLockedBlocksPerUser.put(userId, blockId);\n    }\n  }","id":94349,"modified_method":"/**\n   * Lock block by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @param userId\n   *          id of the user\n   */\n  public void lockBlock(long blockId, long userId) {\n    if (!containsBlock(blockId)) {\n      return;\n    }\n    mUserPerLockedBlock.put(blockId, userId);\n    mLockedBlocksPerUser.put(userId, blockId);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Check whether current StorageDir contains certain block\n   * \n   * @param blockId\n   *          id of the block\n   * @return true if StorageDir contains the block, false otherwise\n   */\n  public boolean containsBlock(long blockId) {\n    return mBlockSizes.containsKey(blockId);\n  }","id":94350,"modified_method":"/**\n   * Check whether current StorageDir contains certain block\n   * \n   * @param blockId\n   *          id of the block\n   * @return true if StorageDir contains the block, false otherwise\n   */\n  public boolean containsBlock(long blockId) {\n    return mLastBlockAccessTimeMS.containsKey(blockId);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Initialize current StorageDir\n   * \n   * @throws IOException\n   */\n  public void initailize() throws IOException {\n    if (!mUfs.exists(mDataPath)) {\n      LOG.info(\"Local folder \" + mDataPath + \" does not exist. Creating a new one.\");\n      mUfs.mkdirs(mDataPath, true);\n      mUfs.mkdirs(mUserTempPath, true);\n      mUfs.setPermission(mDataPath, \"775\");\n      mUfs.setPermission(mUserTempPath, \"775\");\n      return;\n    }\n\n    if (mUfs.isFile(mDataPath)) {\n      String msg = \"Data folder \" + mDataPath + \" is not a folder!\";\n      throw new IllegalArgumentException(msg);\n    }\n\n    int cnt = 0;\n    for (String name : mUfs.list(mDataPath)) {\n      String path = CommonUtils.concat(mDataPath, name);\n      if (mUfs.isFile(path)) {\n        cnt ++;\n        long fileSize = mUfs.getFileSize(path);\n        LOG.info(\"File \" + cnt + \": \" + path + \" with size \" + fileSize + \" Bs.\");\n        long blockId = CommonUtils.getBlockIdFromFileName(name);\n        boolean success = requestSpace(fileSize);\n        if (success) {\n          addBlockId(blockId, fileSize);\n        } else {\n          mUfs.delete(path, true);\n          throw new RuntimeException(\"Pre-existing files exceed the local storage capacity.\");\n        }\n      }\n    }\n    return;\n  }","id":94351,"modified_method":"/**\n   * Initialize current StorageDir\n   * \n   * @throws IOException\n   */\n  public void initailize() throws IOException {\n    if (!mUfs.exists(mDataPath)) {\n      LOG.info(\"Local folder \" + mDataPath + \" does not exist. Creating a new one.\");\n      mUfs.mkdirs(mDataPath, true);\n      mUfs.mkdirs(mUserTempPath, true);\n      mUfs.setPermission(mDataPath, \"775\");\n      mUfs.setPermission(mUserTempPath, \"775\");\n      return;\n    }\n    if (mUfs.isFile(mDataPath)) {\n      String msg = \"Data folder \" + mDataPath + \" is not a folder!\";\n      throw new IllegalArgumentException(msg);\n    }\n    int cnt = 0;\n    for (String name : mUfs.list(mDataPath)) {\n      String path = CommonUtils.concat(mDataPath, name);\n      if (mUfs.isFile(path)) {\n        cnt ++;\n        long fileSize = mUfs.getFileSize(path);\n        LOG.debug(\"File \" + cnt + \": \" + path + \" with size \" + fileSize + \" Bs.\");\n        long blockId = CommonUtils.getBlockIdFromFileName(name);\n        boolean success = requestSpace(fileSize);\n        if (success) {\n          addBlockId(blockId, fileSize);\n        } else {\n          mUfs.delete(path, true);\n          throw new RuntimeException(\"Pre-existing files exceed the local storage capacity.\");\n        }\n      }\n    }\n    return;\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Check whether block is locked by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @return true if block is locked, false otherwise\n   */\n  public boolean isBlockLocked(long blockId) {\n    synchronized (mUserPerLockedBlock) {\n      if (mUserPerLockedBlock.containsKey(blockId)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }","id":94352,"modified_method":"/**\n   * Check whether block is locked by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @return true if block is locked, false otherwise\n   */\n  public boolean isBlockLocked(long blockId) {\n    if (mUserPerLockedBlock.containsKey(blockId)) {\n      return true;\n    } else {\n      return false;\n    }\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Unlock block by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @param userId\n   *          id of the user\n   */\n  public void unlockBlock(long blockId, long userId) {\n    if (!containsBlock(blockId)) {\n      return;\n    }\n    synchronized (mUserPerLockedBlock) {\n      mUserPerLockedBlock.removeAll(blockId);\n    }\n    synchronized (mLockedBlocksPerUser) {\n      mLockedBlocksPerUser.remove(userId, blockId);\n    }\n  }","id":94353,"modified_method":"/**\n   * Unlock block by some user\n   * \n   * @param blockId\n   *          id of the block\n   * @param userId\n   *          id of the user\n   */\n  public void unlockBlock(long blockId, long userId) {\n    if (!containsBlock(blockId)) {\n      return;\n    }\n    mUserPerLockedBlock.remove(blockId, userId);\n    mLockedBlocksPerUser.remove(userId, blockId);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Get size of the block\n   * \n   * @param blockId\n   *          id of the block\n   * @return size of the block, -1 if block doesn't exist\n   */\n  public long getBlockSize(long blockId) {\n    if (mBlockSizes.containsKey(blockId)) {\n      return mBlockSizes.get(blockId);\n    } else {\n      return -1;\n    }\n  }","id":94354,"modified_method":"/**\n   * Get size of the block\n   * \n   * @param blockId\n   *          id of the block\n   * @return size of the block, -1 if block doesn't exist\n   */\n  public long getBlockSize(long blockId) {\n    Long size = mBlockSizes.get(blockId);\n    if (size == null) {\n      return -1;\n    } else {\n      return size;\n    }\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Before\n  public final void before() throws IOException, InvalidPathException {\n    String tachyonHome =\n        File.createTempFile(\"Tachyon\", \"\").getAbsoluteFile() + \"U\" + System.currentTimeMillis();\n    String workerDirFolder = tachyonHome + \"/ramdisk\";\n    mSrcDir = new StorageDir(1, workerDirFolder + \"/src\", mCapacity, \"/data\", \"/user\", null);\n    mDstDir = new StorageDir(2, workerDirFolder + \"/dst\", mCapacity, \"/data\", \"/user\", null);\n\n    UnderFileSystem srcUfs = mSrcDir.getUfs();\n    srcUfs.mkdirs(mSrcDir.getDirDataPath(), true);\n    srcUfs.mkdirs(mSrcDir.getUserTempPath(mUserId), true);\n    CommonUtils.changeLocalFileToFullPermission(mSrcDir.getDirDataPath());\n    CommonUtils.changeLocalFileToFullPermission(mSrcDir.getUserTempPath(mUserId));\n\n    UnderFileSystem dstUfs = mDstDir.getUfs();\n    dstUfs.mkdirs(mDstDir.getDirDataPath(), true);\n    dstUfs.mkdirs(mDstDir.getUserTempPath(mUserId), true);\n    CommonUtils.changeLocalFileToFullPermission(mDstDir.getDirDataPath());\n    CommonUtils.changeLocalFileToFullPermission(mDstDir.getUserTempPath(mUserId));\n  }","id":94355,"modified_method":"@Before\n  public final void before() throws IOException, InvalidPathException {\n    String tachyonHome =\n        File.createTempFile(\"Tachyon\", \"\").getAbsoluteFile() + \"U\" + System.currentTimeMillis();\n    String workerDirFolder = tachyonHome + \"/ramdisk\";\n    mSrcDir = new StorageDir(1, workerDirFolder + \"/src\", mCapacity, \"/data\", \"/user\", null);\n    mDstDir = new StorageDir(2, workerDirFolder + \"/dst\", mCapacity, \"/data\", \"/user\", null);\n\n    initializeStorageDir(mSrcDir, mUserId);\n    initializeStorageDir(mDstDir, mUserId);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"private void createBlockFile(StorageDir dir, long blockId, int blockSize) throws IOException {\n    byte[] buf = TestUtils.getIncreasingByteArray(blockSize);\n    BlockHandler bhSrc =\n        BlockHandler.get(CommonUtils.concat(mSrcDir.getUserTempFilePath(mUserId, blockId)));\n    try {\n      bhSrc.append(0, ByteBuffer.wrap(buf));\n    } finally {\n      bhSrc.close();\n    }\n    dir.requestSpace(mUserId, blockSize);\n    dir.cacheBlock(mUserId, blockId);\n  }","id":94356,"modified_method":"private void createBlockFile(StorageDir dir, long blockId, int blockSize) throws IOException {\n    byte[] buf = TestUtils.getIncreasingByteArray(blockSize);\n\n    BlockHandler bhSrc =\n        BlockHandler.get(CommonUtils.concat(dir.getUserTempFilePath(mUserId, blockId)));\n    try {\n      bhSrc.append(0, ByteBuffer.wrap(buf));\n    } finally {\n      bhSrc.close();\n    }\n    dir.requestSpace(mUserId, blockSize);\n    dir.cacheBlock(mUserId, blockId);\n  }","commit_id":"1ebacdf5951589efaad5003d514a3157cc9b20e7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public synchronized StorageDir getStorageDir(StorageDir[] storageDirs, long userId,\n      long requestSizeBytes) {\n    StorageDir availableDir = null;\n    for (int j = 0; j < storageDirs.length; mDirIndex ++, j ++) {\n      if (mDirIndex == storageDirs.length) {\n        mDirIndex = 0;\n      }\n      if (storageDirs[mDirIndex].getAvailableBytes() >= requestSizeBytes) {\n        availableDir = storageDirs[mDirIndex];\n        mDirIndex ++;\n        if (availableDir.requestSpace(userId, requestSizeBytes)) {\n          break;\n        }\n      }\n    }\n    return availableDir;\n  }","id":94357,"modified_method":"@Override\n  public synchronized StorageDir getStorageDir(StorageDir[] storageDirs, long userId,\n      long requestSizeBytes) {\n    StorageDir availableDir = null;\n    for (int j = 0; j < storageDirs.length; mDirIndex ++, j ++) {\n      mDirIndex = mDirIndex % storageDirs.length;\n      if (storageDirs[mDirIndex].getAvailableBytes() >= requestSizeBytes) {\n        availableDir = storageDirs[mDirIndex];\n        mDirIndex ++;\n        if (availableDir.requestSpace(userId, requestSizeBytes)) {\n          break;\n        }\n      }\n    }\n    return availableDir;\n  }","commit_id":"d9774040ae8f46838553e972bb3d99490dc496e7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public StorageDir getStorageDir(StorageDir[] storageDirs, long userId, long requestSizeBytes) {\n    StorageDir availableDir = null;\n    int i = mRandm.nextInt(storageDirs.length);\n    for (int j = 0; j < storageDirs.length; j ++, i ++) {\n      if (i == storageDirs.length) {\n        i = 0;\n      }\n      StorageDir dir = storageDirs[i];\n      if (dir.getAvailableBytes() >= requestSizeBytes) {\n        availableDir = dir;\n        if (availableDir.requestSpace(userId, requestSizeBytes)) {\n          break;\n        }\n      }\n    }\n    return availableDir;\n  }","id":94358,"modified_method":"@Override\n  public StorageDir getStorageDir(StorageDir[] storageDirs, long userId, long requestBytes) {\n    int i = mRandm.nextInt(storageDirs.length);\n    for (int j = 0; j < storageDirs.length; j ++, i ++) {\n      i = i % storageDirs.length;\n      StorageDir dir = storageDirs[i];\n      if (dir.getAvailableBytes() >= requestBytes) {\n        if (dir.requestSpace(userId, requestBytes)) {\n          return dir;\n        }\n      }\n    }\n    return null;\n  }","commit_id":"d9774040ae8f46838553e972bb3d99490dc496e7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public synchronized Pair<StorageDir, List<BlockInfo>> getDirCandidate(StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestBytes) {\n    List<BlockInfo> blockInfoList = new ArrayList<BlockInfo>();\n    Map<StorageDir, Pair<Long, Long>> dir2LRUBlocks = new HashMap<StorageDir, Pair<Long, Long>>();\n    HashMultimap<StorageDir, Long> dir2BlocksToEvict = HashMultimap.create();\n    Map<StorageDir, Long> sizeToEvict = new HashMap<StorageDir, Long>();\n    // If no StorageDir has enough space for the request size, continue; if no block can be evicted,\n    // return null; and if eviction size plus free space of some StorageDir is larger than request\n    // size, return the Pair of StorageDir and blockInfoList\n    while (true) {\n      // Get oldest block in StorageDir candidates\n      Pair<StorageDir, Long> candidate =\n          getLRUBlockCandidate(storageDirs, dir2LRUBlocks, dir2BlocksToEvict, pinList);\n      StorageDir dirCandidate = candidate.getFirst();\n      long blockId = candidate.getSecond();\n      long blockSize = 0;\n      if (dirCandidate == null) {\n        return null;\n      } else {\n        blockSize = dirCandidate.getBlockSize(blockId);\n      }\n      // Add info of the block to the list\n      blockInfoList.add(new BlockInfo(dirCandidate, blockId, blockSize));\n      dir2BlocksToEvict.put(dirCandidate, blockId);\n      dir2LRUBlocks.remove(dirCandidate);\n      long evictionBytes;\n      // Update eviction size for this StorageDir\n      if (sizeToEvict.containsKey(dirCandidate)) {\n        evictionBytes = sizeToEvict.get(dirCandidate) + blockSize;\n      } else {\n        evictionBytes = blockSize;\n      }\n      sizeToEvict.put(dirCandidate, evictionBytes);\n      if (evictionBytes + dirCandidate.getAvailableBytes() >= requestBytes) {\n        return new Pair<StorageDir, List<BlockInfo>>(dirCandidate, blockInfoList);\n      }\n    }\n  }","id":94359,"modified_method":"@Override\n  public synchronized Pair<StorageDir, List<BlockInfo>> getDirCandidate(StorageDir[] storageDirs,\n      Set<Integer> pinList, long requestBytes) {\n    List<BlockInfo> blockInfoList = new ArrayList<BlockInfo>();\n    Map<StorageDir, Pair<Long, Long>> dir2LRUBlocks = new HashMap<StorageDir, Pair<Long, Long>>();\n    HashMultimap<StorageDir, Long> dir2BlocksToEvict = HashMultimap.create();\n    Map<StorageDir, Long> sizeToEvict = new HashMap<StorageDir, Long>();\n    // If no StorageDir has enough space for the request size, continue; if no block can be evicted,\n    // return null; and if eviction size plus free space of some StorageDir is larger than request\n    // size, return the Pair of StorageDir and blockInfoList\n    while (true) {\n      // Get oldest block in StorageDir candidates\n      Pair<StorageDir, Long> candidate =\n          getLRUBlockCandidate(storageDirs, dir2LRUBlocks, dir2BlocksToEvict, pinList);\n      StorageDir dir = candidate.getFirst();\n      if (dir == null) {\n        return null;\n      }\n      long blockId = candidate.getSecond();\n      long blockSize = dir.getBlockSize(blockId);\n      // Add info of the block to the list\n      blockInfoList.add(new BlockInfo(dir, blockId, blockSize));\n      dir2BlocksToEvict.put(dir, blockId);\n      dir2LRUBlocks.remove(dir);\n      long evictBytes;\n      // Update eviction size for this StorageDir\n      if (sizeToEvict.containsKey(dir)) {\n        evictBytes = sizeToEvict.get(dir) + blockSize;\n      } else {\n        evictBytes = blockSize;\n      }\n      sizeToEvict.put(dir, evictBytes);\n      if (evictBytes + dir.getAvailableBytes() >= requestBytes) {\n        return new Pair<StorageDir, List<BlockInfo>>(dir, blockInfoList);\n      }\n    }\n  }","commit_id":"d9774040ae8f46838553e972bb3d99490dc496e7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tries to get an eviction plan to free a certain amount of space in the given location, and\n   * carries out this plan with the best effort.\n   */\n  private void freeSpaceInternal(long userId, long availableBytes, BlockStoreLocation location)\n      throws OutOfSpaceException, IOException, NotFoundException, AlreadyExistsException,\n      InvalidStateException {\n    EvictionPlan plan;\n    mMetadataLock.readLock().lock();\n    try {\n      plan = mEvictor.freeSpaceWithView(availableBytes, location, getUpdatedView());\n      // Absent plan means failed to evict enough space.\n      if (null == plan) {\n        throw new OutOfSpaceException(\"Failed to free space: no eviction plan by evictor\");\n      }\n    } finally {\n      mMetadataLock.readLock().unlock();\n    }\n\n    // 1. remove blocks to make room.\n    for (long blockId : plan.toEvict()) {\n      try {\n        removeBlockInternal(userId, blockId);\n      } catch (NotFoundException nfe) {\n        LOG.info(\"Failed to evict blockId \" + blockId + \", it could be already deleted\");\n        return;\n      }\n      synchronized (mBlockStoreEventListeners) {\n        for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n          listener.onRemoveBlockByWorker(userId, blockId);\n        }\n      }\n    }\n    // 2. transfer blocks among tiers.\n    // 2.1. group blocks move plan by the destination tier.\n    Map<Integer, Set<Pair<Long, BlockStoreLocation>>> blocksGroupedByDestTier =\n        new HashMap<Integer, Set<Pair<Long, BlockStoreLocation>>>();\n    for (Pair<Long, BlockStoreLocation> entry : plan.toMove()) {\n      int alias = entry.getSecond().tierAlias();\n      if (!blocksGroupedByDestTier.containsKey(alias)) {\n        blocksGroupedByDestTier.put(alias, new HashSet<Pair<Long, BlockStoreLocation>>());\n      }\n      blocksGroupedByDestTier.get(alias).add(entry);\n    }\n    // 2.2. sort tiers according in reversed order: bottom tier first and top tier last.\n    List<Integer> dstTierAlias = new ArrayList<Integer>(blocksGroupedByDestTier.keySet());\n    Collections.sort(dstTierAlias, Collections.reverseOrder());\n    // 2.3. move blocks in the order of their dest tiers.\n    for (int alias : dstTierAlias) {\n      Set<Pair<Long, BlockStoreLocation>> toMove = blocksGroupedByDestTier.get(alias);\n      for (Pair<Long, BlockStoreLocation> entry : toMove) {\n        long blockId = entry.getFirst();\n        BlockStoreLocation newLocation = entry.getSecond();\n        Pair<BlockStoreLocation, BlockStoreLocation> locationPair;\n        try {\n          // TODO: this should also specify the src location\n          locationPair = moveBlockInternal(userId, blockId, newLocation);\n        } catch (NotFoundException nfe) {\n          LOG.info(\"Failed to move blockId \" + blockId + \", it could be already deleted\");\n          return;\n        }\n        BlockStoreLocation oldLocation = locationPair.getFirst();\n        synchronized (mBlockStoreEventListeners) {\n          for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n            listener.onMoveBlockByWorker(userId, blockId, oldLocation, newLocation);\n          }\n        }\n      }\n    }\n  }","id":94360,"modified_method":"/**\n   * Tries to get an eviction plan to free a certain amount of space in the given location, and\n   * carries out this plan with the best effort.\n   */\n  private void freeSpaceInternal(long userId, long availableBytes, BlockStoreLocation location)\n      throws OutOfSpaceException, IOException, NotFoundException, AlreadyExistsException,\n      InvalidStateException {\n    EvictionPlan plan;\n    mMetadataLock.readLock().lock();\n    try {\n      plan = mEvictor.freeSpaceWithView(availableBytes, location, getUpdatedView());\n      // Absent plan means failed to evict enough space.\n      if (null == plan) {\n        throw new OutOfSpaceException(\"Failed to free space: no eviction plan by evictor\");\n      }\n    } finally {\n      mMetadataLock.readLock().unlock();\n    }\n\n    // 1. remove blocks to make room.\n    for (long blockId : plan.toEvict()) {\n      try {\n        removeBlockInternal(userId, blockId);\n      } catch (NotFoundException nfe) {\n        LOG.info(\"Failed to evict blockId \" + blockId + \", it could be already deleted\");\n        return;\n      }\n      synchronized (mBlockStoreEventListeners) {\n        for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n          listener.onRemoveBlockByWorker(userId, blockId);\n        }\n      }\n    }\n    // 2. transfer blocks among tiers.\n    // 2.1. group blocks move plan by the destination tier.\n    Map<Integer, Set<Pair<Long, BlockStoreLocation>>> blocksGroupedByDestTier =\n        new HashMap<Integer, Set<Pair<Long, BlockStoreLocation>>>();\n    for (Pair<Long, BlockStoreLocation> entry : plan.toMove()) {\n      int alias = entry.getSecond().tierAlias();\n      if (!blocksGroupedByDestTier.containsKey(alias)) {\n        blocksGroupedByDestTier.put(alias, new HashSet<Pair<Long, BlockStoreLocation>>());\n      }\n      blocksGroupedByDestTier.get(alias).add(entry);\n    }\n    // 2.2. sort tiers according in reversed order: bottom tier first and top tier last.\n    List<Integer> dstTierAlias = new ArrayList<Integer>(blocksGroupedByDestTier.keySet());\n    Collections.sort(dstTierAlias, Collections.reverseOrder());\n    // 2.3. move blocks in the order of their dest tiers.\n    for (int alias : dstTierAlias) {\n      Set<Pair<Long, BlockStoreLocation>> toMove = blocksGroupedByDestTier.get(alias);\n      for (Pair<Long, BlockStoreLocation> entry : toMove) {\n        long blockId = entry.getFirst();\n        BlockStoreLocation newLocation = entry.getSecond();\n        MoveBlockResult moveResult;\n        try {\n          // TODO: this should also specify the src location\n          moveResult = moveBlockInternal(userId, blockId, newLocation);\n        } catch (NotFoundException nfe) {\n          LOG.info(\"Failed to move blockId \" + blockId + \", it could be already deleted\");\n          return;\n        }\n        synchronized (mBlockStoreEventListeners) {\n          for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n            listener.onMoveBlockByWorker(userId, blockId, moveResult.srcLocation(), newLocation);\n          }\n        }\n      }\n    }\n  }","commit_id":"2c92de1001b3be33e3e71cd6381c4a6da2258fb7","url":"https://github.com/amplab/tachyon"},{"original_method":"private void abortBlockInternal(long userId, long blockId) throws NotFoundException,\n      AlreadyExistsException, InvalidStateException, IOException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      String path;\n      mMetadataLock.writeLock().lock();\n      try {\n        checkTempBlockOwnedByUser(userId, blockId);\n        TempBlockMeta tempBlockMeta = mMetaManager.getTempBlockMeta(blockId);\n        path = tempBlockMeta.getPath();\n        mMetaManager.abortTempBlockMeta(tempBlockMeta);\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n\n      FileUtils.delete(new File(path));\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n\n  }","id":94361,"modified_method":"private void abortBlockInternal(long userId, long blockId) throws NotFoundException,\n      AlreadyExistsException, InvalidStateException, IOException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      String path;\n      TempBlockMeta tempBlockMeta;\n      mMetadataLock.readLock().lock();\n      try {\n        checkTempBlockOwnedByUser(userId, blockId);\n        tempBlockMeta = mMetaManager.getTempBlockMeta(blockId);\n        path = tempBlockMeta.getPath();\n      } finally {\n        mMetadataLock.readLock().unlock();\n      }\n\n      FileUtils.delete(new File(path));\n\n      mMetadataLock.writeLock().lock();\n      try {\n        mMetaManager.abortTempBlockMeta(tempBlockMeta);\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n\n  }","commit_id":"2c92de1001b3be33e3e71cd6381c4a6da2258fb7","url":"https://github.com/amplab/tachyon"},{"original_method":"@Override\n  public void moveBlock(long userId, long blockId, BlockStoreLocation newLocation)\n      throws NotFoundException, AlreadyExistsException, InvalidStateException, OutOfSpaceException,\n      IOException {\n    Pair<BlockStoreLocation, BlockStoreLocation> moveResult;\n    BlockStoreLocation srcLocation;\n    BlockStoreLocation dstLocation;\n    for (int i = 0; i < MAX_RETRIES; i ++) {\n      moveResult = moveBlockInternal(userId, blockId, newLocation);\n      if (moveResult != null) {\n        srcLocation = moveResult.getFirst();\n        dstLocation = moveResult.getSecond();\n        synchronized (mBlockStoreEventListeners) {\n          for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n            listener.onMoveBlockByClient(userId, blockId, srcLocation, dstLocation);\n          }\n        }\n        return;\n      }\n      mMetadataLock.readLock().lock();\n      long blockSize = mMetaManager.getBlockMeta(blockId).getBlockSize();\n      mMetadataLock.readLock().unlock();\n      if (i < MAX_RETRIES - 1) {\n        freeSpaceInternal(userId, blockSize, newLocation);\n      }\n    }\n  }","id":94362,"modified_method":"@Override\n  public void moveBlock(long userId, long blockId, BlockStoreLocation newLocation)\n      throws NotFoundException, AlreadyExistsException, InvalidStateException, OutOfSpaceException,\n      IOException {\n    for (int i = 0; i < MAX_RETRIES; i ++) {\n      MoveBlockResult moveResult = moveBlockInternal(userId, blockId, newLocation);\n      if (moveResult.done()) {\n        synchronized (mBlockStoreEventListeners) {\n          for (BlockStoreEventListener listener : mBlockStoreEventListeners) {\n            listener.onMoveBlockByClient(userId, blockId, moveResult.srcLocation(),\n                moveResult.dstLocation());\n          }\n        }\n        return;\n      }\n\n      if (i < MAX_RETRIES - 1) {\n        freeSpaceInternal(userId, moveResult.blockSize(), newLocation);\n      }\n    }\n  }","commit_id":"2c92de1001b3be33e3e71cd6381c4a6da2258fb7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Moves a block to new location only if allocator finds available space in newLocation. This\n   * method will not trigger any eviction. Returns the source and destination location of this move,\n   * or null if this failed.\n   */\n  private Pair<BlockStoreLocation, BlockStoreLocation> moveBlockInternal(long userId, long blockId,\n      BlockStoreLocation newLocation) throws NotFoundException, AlreadyExistsException,\n      InvalidStateException, OutOfSpaceException, IOException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      String srcFilePath;\n      String dstFilePath;\n      BlockMeta srcBlockMeta;\n      BlockMeta dstBlockMeta;\n      BlockStoreLocation srcLocation;\n      BlockStoreLocation dstLocation;\n      mMetadataLock.writeLock().lock();\n      try {\n        if (mMetaManager.hasTempBlockMeta(blockId)) {\n          throw new InvalidStateException(\"Failed to move block \" + blockId\n              + \": block is uncommited\");\n        }\n        srcBlockMeta = mMetaManager.getBlockMeta(blockId);\n        srcLocation = srcBlockMeta.getBlockLocation();\n        srcFilePath = srcBlockMeta.getPath();\n        long blockSize = srcBlockMeta.getBlockSize();\n        TempBlockMeta tempBlock =\n            mAllocator.allocateBlockWithView(userId, blockId, blockSize, newLocation,\n                getUpdatedView());\n        if (tempBlock == null) {\n          // Allocator fails to find a proper place in newLocation to move this block.\n          return null;\n        }\n        try {\n          mMetaManager.moveBlockMeta(srcBlockMeta, tempBlock);\n        } catch (OutOfSpaceException ose) {\n          // If we reach here, allocator is not working properly\n          LOG.error(\"Unexpected failure: \" + blockSize + \" bytes allocated at \" + newLocation\n              + \" by allocator, but moveBlockMeta failed\");\n          throw Throwables.propagate(ose);\n        } catch (AlreadyExistsException aee) {\n          // If we reach here, allocator is not working properly\n          LOG.error(\"Unexpected failure: \" + blockSize + \" bytes allocated at \" + newLocation\n              + \" by allocator, but moveBlockMeta failed\");\n          throw Throwables.propagate(aee);\n        }\n        dstBlockMeta = mMetaManager.getBlockMeta(blockId);\n        dstLocation = dstBlockMeta.getBlockLocation();\n        dstFilePath = dstBlockMeta.getPath();\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n      // Heavy IO operation, still guarded by block lock but not metadata lock.\n      FileUtils.move(new File(srcFilePath), new File(dstFilePath));\n      return new Pair<BlockStoreLocation, BlockStoreLocation>(srcLocation, dstLocation);\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n  }","id":94363,"modified_method":"/**\n   * Moves a block to new location only if allocator finds available space in newLocation. This\n   * method will not trigger any eviction. Returns MoveBlockResult, or null if this failed.\n   */\n  private MoveBlockResult moveBlockInternal(long userId, long blockId,\n      BlockStoreLocation newLocation) throws NotFoundException, AlreadyExistsException,\n      InvalidStateException, OutOfSpaceException, IOException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      long blockSize;\n      String srcFilePath;\n      String dstFilePath;\n      BlockMeta srcBlockMeta;\n      BlockStoreLocation srcLocation;\n      BlockStoreLocation dstLocation;\n\n      mMetadataLock.readLock().lock();\n      try {\n        if (mMetaManager.hasTempBlockMeta(blockId)) {\n          throw new InvalidStateException(\"Failed to move block \" + blockId\n              + \": block is uncommited\");\n        }\n        srcBlockMeta = mMetaManager.getBlockMeta(blockId);\n        srcLocation = srcBlockMeta.getBlockLocation();\n        srcFilePath = srcBlockMeta.getPath();\n        blockSize = srcBlockMeta.getBlockSize();\n      } finally {\n        mMetadataLock.readLock().unlock();\n      }\n\n      TempBlockMeta dstTempBlock = createBlockMetaInternal(userId, blockId, newLocation, blockSize);\n      if (dstTempBlock == null) {\n        return new MoveBlockResult(false, blockSize, null, null);\n      }\n      dstLocation = dstTempBlock.getBlockLocation();\n      dstFilePath = dstTempBlock.getCommitPath();\n\n      // Heavy IO operation, still guarded by block lock but not metadata lock.\n      FileUtils.move(new File(srcFilePath), new File(dstFilePath));\n\n      mMetadataLock.writeLock().lock();\n      try {\n        mMetaManager.moveBlockMeta(srcBlockMeta, dstTempBlock);\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n\n      return new MoveBlockResult(true, blockSize, srcLocation, dstLocation);\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n  }","commit_id":"2c92de1001b3be33e3e71cd6381c4a6da2258fb7","url":"https://github.com/amplab/tachyon"},{"original_method":"private BlockStoreLocation commitBlockInternal(long userId, long blockId)\n      throws AlreadyExistsException, InvalidStateException, NotFoundException, IOException,\n      OutOfSpaceException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      // When committing TempBlockMeta, its BlockMeta calculates the block size according to the\n      // size of the file of this TempBlockMeta. Therefore, commitTempBlockMeta must complete\n      // before moving actual block file to its committed path.\n      BlockStoreLocation loc;\n      String srcPath;\n      String dstPath;\n      mMetadataLock.writeLock().lock();\n      try {\n        checkTempBlockOwnedByUser(userId, blockId);\n        TempBlockMeta tempBlockMeta = mMetaManager.getTempBlockMeta(blockId);\n        srcPath = tempBlockMeta.getPath();\n        dstPath = tempBlockMeta.getCommitPath();\n        loc = tempBlockMeta.getBlockLocation();\n        mMetaManager.commitTempBlockMeta(tempBlockMeta);\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n\n      FileUtils.move(new File(srcPath), new File(dstPath));\n      return loc;\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n  }","id":94364,"modified_method":"private BlockStoreLocation commitBlockInternal(long userId, long blockId)\n      throws AlreadyExistsException, InvalidStateException, NotFoundException, IOException,\n      OutOfSpaceException {\n    long lockId = mLockManager.lockBlock(userId, blockId, BlockLockType.WRITE);\n    try {\n      // When committing TempBlockMeta, its BlockMeta calculates the block size according to the\n      // size of the file of this TempBlockMeta. Therefore, commitTempBlockMeta must complete\n      // before moving actual block file to its committed path.\n      BlockStoreLocation loc;\n      String srcPath;\n      String dstPath;\n      TempBlockMeta tempBlockMeta;\n      mMetadataLock.readLock().lock();\n      try {\n        checkTempBlockOwnedByUser(userId, blockId);\n        tempBlockMeta = mMetaManager.getTempBlockMeta(blockId);\n        srcPath = tempBlockMeta.getPath();\n        dstPath = tempBlockMeta.getCommitPath();\n        loc = tempBlockMeta.getBlockLocation();\n      } finally {\n        mMetadataLock.readLock().unlock();\n      }\n\n      FileUtils.move(new File(srcPath), new File(dstPath));\n\n      mMetadataLock.writeLock().lock();\n      try {\n        mMetaManager.commitTempBlockMeta(tempBlockMeta);\n      } finally {\n        mMetadataLock.writeLock().unlock();\n      }\n      return loc;\n    } finally {\n      mLockManager.unlockBlock(lockId);\n    }\n  }","commit_id":"2c92de1001b3be33e3e71cd6381c4a6da2258fb7","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n     *\n     * @param port\n     * * return True if an error was generated and needs to be returned to the client\n     */\n    final ClientResponseImpl handleRead(ByteBuffer buf, ClientInputHandler handler, Connection ccxn) throws IOException {\n        final long now = System.currentTimeMillis();\n        final FastDeserializer fds = new FastDeserializer(buf);\n        final StoredProcedureInvocation task = fds.readObject(StoredProcedureInvocation.class);\n        ClientResponseImpl error = null;\n\n        // Check for admin mode restrictions before proceeding any further\n        VoltDBInterface instance = VoltDB.instance();\n        if (instance.getMode() == OperationMode.PAUSED && !handler.isAdmin())\n        {\n            return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,\n                    new VoltTable[0], \"Server is currently unavailable; try again later\",\n                    task.clientHandle);\n        }\n\n        // ping just responds as fast as possible to show the connection is alive\n        // nb: ping is not a real procedure, so this is checked before other \"sysprocs\"\n        if (task.procName.equals(\"@Ping\")) {\n            return new ClientResponseImpl(ClientResponseImpl.SUCCESS, new VoltTable[0], \"\", task.clientHandle);\n        }\n\n        // Deserialize the client's request and map to a catalog stored procedure\n        final CatalogContext catalogContext = m_catalogContext.get();\n        AuthSystem.AuthUser user = catalogContext.authSystem.getUser(handler.m_username);\n        final Procedure catProc = catalogContext.procedures.get(task.procName);\n        Config sysProc = SystemProcedureCatalog.listing.get(task.procName);\n\n        // Map @AdHoc... to @AdHoc_RW_MP for validation. In the future if security is\n        // configured differently for @AdHoc... variants this code will have to\n        // change in order to use the proper variant based on whether the work\n        // is single or multi partition and read-only or read-write.\n        if (sysProc == null ) {\n            if( task.procName.equals(\"@AdHoc\") ){\n                sysProc = SystemProcedureCatalog.listing.get(\"@AdHoc_RW_MP\");\n                assert(sysProc != null);\n            }\n            else if( task.procName.equals(\"@Explain\") ){\n                return dispatchAdHoc(task, handler, ccxn, true );\n            }\n            else if(task.procName.equals(\"@ExplainProc\")) {\n                return dispatchExplainProcedure(task, handler, ccxn);\n            }\n            else if (task.procName.equals(\"@SendSentinel\")) {\n                return dispatchSendSentinel(buf, task);\n            }\n        }\n\n        if (user == null) {\n            authLog.info(\"User \" + handler.m_username + \" has been removed from the system via a catalog update\");\n            return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                    new VoltTable[0], \"User \" + handler.m_username +\n                    \" has been removed from the system via a catalog update\",\n                    task.clientHandle);\n        }\n\n        if (catProc == null && sysProc == null) {\n            String errorMessage = \"Procedure \" + task.procName + \" was not found\";\n            authLog.l7dlog( Level.WARN, LogKeys.auth_ClientInterface_ProcedureNotFound.name(), new Object[] { task.procName }, null);\n            return new ClientResponseImpl(\n                    ClientResponseImpl.UNEXPECTED_FAILURE,\n                    new VoltTable[0], errorMessage, task.clientHandle);\n        }\n\n        // Check procedure policies\n        error = checkPolicies(null, user, task, catProc, sysProc);\n        if (error != null) {\n            return error;\n        }\n\n        error = checkPolicies(task.procName, user, task, catProc, sysProc);\n        if (error != null) {\n            return error;\n        }\n\n        if (sysProc != null) {\n            // these have helpers that do all the work...\n            if (task.procName.equals(\"@AdHoc\")) {\n                return dispatchAdHoc(task, handler, ccxn, false);\n            } else if (task.procName.equals(\"@UpdateApplicationCatalog\")) {\n                return dispatchUpdateApplicationCatalog(task, handler, ccxn);\n            } else if (task.procName.equals(\"@LoadSinglepartitionTable\")) {\n                return dispatchLoadSinglepartitionTable(buf, task, handler, ccxn);\n            } else if (task.procName.equals(\"@LoadMultipartitionTable\")) {\n                /*\n                 * For IV2 DR: This will generate a sentinel for each partition,\n                 * but doesn't initiate the invocation. It will fall through to\n                 * the shared dispatch of sysprocs.\n                 */\n                if (VoltDB.instance().isIV2Enabled() &&\n                        task.getType() == ProcedureInvocationType.REPLICATED) {\n                    sendSentinelsToAllPartitions(task.getOriginalTxnId());\n                }\n            } else if (task.procName.equals(\"@SnapshotSave\")) {\n                m_snapshotDaemon.requestUserSnapshot(task, ccxn);\n                return null;\n            } else if (task.procName.equals(\"@Statistics\")) {\n                return dispatchStatistics(sysProc, buf, task, handler, ccxn);\n            } else if (task.procName.equals(\"@Promote\")) {\n                return dispatchPromote(sysProc, buf, task, handler, ccxn);\n            }\n\n            // If you're going to copy and paste something, CnP the pattern\n            // up above.  -rtb.\n\n            // Verify that admin mode sysprocs are called from a client on the\n            // admin port, otherwise return a failure\n            if (task.procName.equals(\"@Pause\") || task.procName.equals(\"@Resume\")) {\n                if (!handler.isAdmin()) {\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0],\n                            \"\" + task.procName + \" is not available to this client\",\n                            task.clientHandle);\n                }\n            }\n            else if (task.procName.equals(\"@SystemInformation\")) {\n                ParameterSet params = task.getParams();\n                // hacky: support old @SystemInformation behavior by\n                // filling in a missing selector to get the overview key/value info\n                if (params.toArray().length == 0) {\n                    task.setParams(\"OVERVIEW\");\n                }\n            }\n\n            // the shared dispatch for sysprocs\n            int[] involvedPartitions = m_allPartitions;\n            createTransaction(handler.connectionId(), handler.m_hostname,\n                    handler.isAdmin(),\n                    task,\n                    sysProc.getReadonly(),\n                    sysProc.getSinglepartition(),\n                    sysProc.getEverysite(),\n                    involvedPartitions, involvedPartitions.length,\n                    ccxn, buf.capacity(),\n                    now,\n                    false);\n\n        }\n\n        // dispatch a user procedure\n        if (catProc != null) {\n            int[] involvedPartitions = null;\n            if (catProc.getSinglepartition() == false) {\n                involvedPartitions = m_allPartitions;\n            }\n            else {\n                // break out the Hashinator and calculate the appropriate partition\n                try {\n                    involvedPartitions = new int[] {\n                                getPartitionForProcedure(\n                                        catProc.getPartitionparameter(),\n                                        catProc.getPartitioncolumn().getType(),\n                                        task)\n                            };\n                }\n                catch (RuntimeException e) {\n                    // unable to hash to a site, return an error\n                    String errorMessage = \"Error sending procedure \"\n                        + task.procName + \" to the correct partition. Make sure parameter values are correct.\";\n                    authLog.l7dlog( Level.WARN,\n                            LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),\n                            new Object[] { task.procName }, null);\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0], errorMessage, task.clientHandle);\n                }\n                catch (Exception e) {\n                    authLog.l7dlog( Level.WARN,\n                            LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),\n                            new Object[] { task.procName }, null);\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0], e.getMessage(), task.clientHandle);\n                }\n            }\n            boolean allowMismatchedResults = catProc.getReadonly() && isProcedureNonDeterministic(catProc);\n            boolean success =\n                createTransaction(handler.connectionId(), handler.m_hostname,\n                        handler.isAdmin(),\n                        task,\n                        catProc.getReadonly(),\n                        catProc.getSinglepartition(),\n                        catProc.getEverysite(),\n                        involvedPartitions, involvedPartitions.length,\n                        ccxn, buf.capacity(),\n                        now,\n                        allowMismatchedResults);\n            if (!success) {\n                // HACK: this return is for the DR agent so that it\n                // will move along on duplicate replicated transactions\n                // reported by the slave cluster.  We report \"SUCCESS\"\n                // to keep the agent from choking.  ENG-2334\n                return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                        new VoltTable[0],\n                        ClientResponseImpl.DUPE_TRANSACTION,\n                        task.clientHandle);\n            }\n        }\n        return null;\n    }","id":94365,"modified_method":"/**\n     *\n     * @param port\n     * * return True if an error was generated and needs to be returned to the client\n     */\n    final ClientResponseImpl handleRead(ByteBuffer buf, ClientInputHandler handler, Connection ccxn) throws IOException {\n        final long now = System.currentTimeMillis();\n        final FastDeserializer fds = new FastDeserializer(buf);\n        final StoredProcedureInvocation task = fds.readObject(StoredProcedureInvocation.class);\n        ClientResponseImpl error = null;\n\n        // Check for admin mode restrictions before proceeding any further\n        VoltDBInterface instance = VoltDB.instance();\n        if (instance.getMode() == OperationMode.PAUSED && !handler.isAdmin())\n        {\n            return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,\n                    new VoltTable[0], \"Server is currently unavailable; try again later\",\n                    task.clientHandle);\n        }\n\n        // ping just responds as fast as possible to show the connection is alive\n        // nb: ping is not a real procedure, so this is checked before other \"sysprocs\"\n        if (task.procName.equals(\"@Ping\")) {\n            return new ClientResponseImpl(ClientResponseImpl.SUCCESS, new VoltTable[0], \"\", task.clientHandle);\n        }\n\n        // Deserialize the client's request and map to a catalog stored procedure\n        final CatalogContext catalogContext = m_catalogContext.get();\n        AuthSystem.AuthUser user = catalogContext.authSystem.getUser(handler.m_username);\n        final Procedure catProc = catalogContext.procedures.get(task.procName);\n        Config sysProc = SystemProcedureCatalog.listing.get(task.procName);\n\n        // Map @AdHoc... to @AdHoc_RW_MP for validation. In the future if security is\n        // configured differently for @AdHoc... variants this code will have to\n        // change in order to use the proper variant based on whether the work\n        // is single or multi partition and read-only or read-write.\n        if (sysProc == null ) {\n            if( task.procName.equals(\"@AdHoc\") ){\n                sysProc = SystemProcedureCatalog.listing.get(\"@AdHoc_RW_MP\");\n                assert(sysProc != null);\n            }\n            else if( task.procName.equals(\"@Explain\") ){\n                return dispatchAdHoc(task, handler, ccxn, true );\n            }\n            else if(task.procName.equals(\"@ExplainProc\")) {\n                return dispatchExplainProcedure(task, handler, ccxn);\n            }\n            else if (task.procName.equals(\"@SendSentinel\")) {\n                return dispatchSendSentinel(buf, task);\n            }\n        }\n\n        if (user == null) {\n            authLog.info(\"User \" + handler.m_username + \" has been removed from the system via a catalog update\");\n            return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                    new VoltTable[0], \"User \" + handler.m_username +\n                    \" has been removed from the system via a catalog update\",\n                    task.clientHandle);\n        }\n\n        if (catProc == null && sysProc == null) {\n            String errorMessage = \"Procedure \" + task.procName + \" was not found\";\n            authLog.l7dlog( Level.WARN, LogKeys.auth_ClientInterface_ProcedureNotFound.name(), new Object[] { task.procName }, null);\n            return new ClientResponseImpl(\n                    ClientResponseImpl.UNEXPECTED_FAILURE,\n                    new VoltTable[0], errorMessage, task.clientHandle);\n        }\n\n        // Check procedure policies\n        error = checkPolicies(null, user, task, catProc, sysProc);\n        if (error != null) {\n            return error;\n        }\n\n        error = checkPolicies(task.procName, user, task, catProc, sysProc);\n        if (error != null) {\n            return error;\n        }\n\n        if (sysProc != null) {\n            // these have helpers that do all the work...\n            if (task.procName.equals(\"@AdHoc\")) {\n                return dispatchAdHoc(task, handler, ccxn, false);\n            } else if (task.procName.equals(\"@UpdateApplicationCatalog\")) {\n                return dispatchUpdateApplicationCatalog(task, handler, ccxn);\n            } else if (task.procName.equals(\"@LoadSinglepartitionTable\")) {\n                return dispatchLoadSinglepartitionTable(buf, task, handler, ccxn);\n            } else if (task.procName.equals(\"@LoadMultipartitionTable\")) {\n                /*\n                 * For IV2 DR: This will generate a sentinel for each partition,\n                 * but doesn't initiate the invocation. It will fall through to\n                 * the shared dispatch of sysprocs.\n                 */\n                if (VoltDB.instance().isIV2Enabled() &&\n                        task.getType() == ProcedureInvocationType.REPLICATED) {\n                    sendSentinelsToAllPartitions(task.getOriginalTxnId());\n                }\n            } else if (task.procName.equals(\"@SnapshotSave\")) {\n                m_snapshotDaemon.requestUserSnapshot(task, ccxn);\n                return null;\n            } else if (task.procName.equals(\"@Statistics\")) {\n                return dispatchStatistics(sysProc, buf, task, handler, ccxn);\n            } else if (task.procName.equals(\"@Promote\")) {\n                return dispatchPromote(sysProc, buf, task, handler, ccxn);\n            }\n\n            // If you're going to copy and paste something, CnP the pattern\n            // up above.  -rtb.\n\n            // Verify that admin mode sysprocs are called from a client on the\n            // admin port, otherwise return a failure\n            if (task.procName.equals(\"@Pause\") || task.procName.equals(\"@Resume\")) {\n                if (!handler.isAdmin()) {\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0],\n                            \"\" + task.procName + \" is not available to this client\",\n                            task.clientHandle);\n                }\n            }\n            else if (task.procName.equals(\"@SystemInformation\")) {\n                ParameterSet params = task.getParams();\n                // hacky: support old @SystemInformation behavior by\n                // filling in a missing selector to get the overview key/value info\n                if (params.toArray().length == 0) {\n                    task.setParams(\"OVERVIEW\");\n                }\n            }\n\n            // the shared dispatch for sysprocs\n            int[] involvedPartitions = m_allPartitions;\n            if (sysProc.getSinglepartition()) {\n                //Fix a bug where SystemCatalog was sent to all partitions\n                //and catalog changes caused result mismatches\n                //Pick a random partition to be the source of the catalog info\n                involvedPartitions = new int[] { new java.util.Random().nextInt(involvedPartitions.length) };\n            }\n\n            createTransaction(handler.connectionId(), handler.m_hostname,\n                    handler.isAdmin(),\n                    task,\n                    sysProc.getReadonly(),\n                    sysProc.getSinglepartition(),\n                    sysProc.getEverysite(),\n                    involvedPartitions, involvedPartitions.length,\n                    ccxn, buf.capacity(),\n                    now,\n                    false);\n\n        }\n\n        // dispatch a user procedure\n        if (catProc != null) {\n            int[] involvedPartitions = null;\n            if (catProc.getSinglepartition() == false) {\n                involvedPartitions = m_allPartitions;\n            }\n            else {\n                // break out the Hashinator and calculate the appropriate partition\n                try {\n                    involvedPartitions = new int[] {\n                                getPartitionForProcedure(\n                                        catProc.getPartitionparameter(),\n                                        catProc.getPartitioncolumn().getType(),\n                                        task)\n                            };\n                }\n                catch (RuntimeException e) {\n                    // unable to hash to a site, return an error\n                    String errorMessage = \"Error sending procedure \"\n                        + task.procName + \" to the correct partition. Make sure parameter values are correct.\";\n                    authLog.l7dlog( Level.WARN,\n                            LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),\n                            new Object[] { task.procName }, null);\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0], errorMessage, task.clientHandle);\n                }\n                catch (Exception e) {\n                    authLog.l7dlog( Level.WARN,\n                            LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),\n                            new Object[] { task.procName }, null);\n                    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                            new VoltTable[0], e.getMessage(), task.clientHandle);\n                }\n            }\n            boolean allowMismatchedResults = catProc.getReadonly() && isProcedureNonDeterministic(catProc);\n            boolean success =\n                createTransaction(handler.connectionId(), handler.m_hostname,\n                        handler.isAdmin(),\n                        task,\n                        catProc.getReadonly(),\n                        catProc.getSinglepartition(),\n                        catProc.getEverysite(),\n                        involvedPartitions, involvedPartitions.length,\n                        ccxn, buf.capacity(),\n                        now,\n                        allowMismatchedResults);\n            if (!success) {\n                // HACK: this return is for the DR agent so that it\n                // will move along on duplicate replicated transactions\n                // reported by the slave cluster.  We report \"SUCCESS\"\n                // to keep the agent from choking.  ENG-2334\n                return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,\n                        new VoltTable[0],\n                        ClientResponseImpl.DUPE_TRANSACTION,\n                        task.clientHandle);\n            }\n        }\n        return null;\n    }","commit_id":"b8607b4b43ead87b15f21feb87a1f75bfadff17d","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n         * Attempt to authenticate the user associated with this socket connection\n         * @param socket\n         * @return AuthUser a set of user permissions or null if authentication fails\n         * @throws IOException\n         */\n        private InputHandler\n        authenticate(final SocketChannel socket) throws IOException\n        {\n            ByteBuffer responseBuffer = ByteBuffer.allocate(6);\n            byte version = (byte)0;\n            responseBuffer.putInt(2);//message length\n            responseBuffer.put(version);//version\n\n            /*\n             * The login message is a length preceded name string followed by a length preceded\n             * SHA-1 single hash of the password.\n             */\n            socket.configureBlocking(true);\n            socket.socket().setTcpNoDelay(true);//Greatly speeds up requests hitting the wire\n            final ByteBuffer lengthBuffer = ByteBuffer.allocate(4);\n\n            /*\n             * Schedule a timeout to close the socket in case there is no response for the timeout\n             * period. This will wake up the current thread that is blocked on reading the login message\n             */\n            ScheduledFuture<?> timeoutFuture = VoltDB.instance().scheduleWork(new Runnable() {\n                                                    @Override\n                                                    public void run() {\n                                                        try {\n                                                            authLog.warn(\"Timing out login attempt from \" +\n                                                                         socket.socket().getRemoteSocketAddress() +\n                                                                         \" after 1600 milliseconds\");\n                                                            socket.close();\n                                                        } catch (IOException e) {\n                                                            //Don't care\n                                                        }\n                                                    }\n                                                }, 1600, 0, TimeUnit.MILLISECONDS);\n\n            while (lengthBuffer.hasRemaining()) {\n                int read = socket.read(lengthBuffer);\n                if (read == -1) {\n                    throw new EOFException();\n                }\n            }\n\n            //Didn't get the value. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.debug(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                              \"): wire protocol violation (timeout reading message length).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            lengthBuffer.flip();\n\n            final int messageLength = lengthBuffer.getInt();\n            if (messageLength < 0) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (message length \" + messageLength + \" is negative).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            if (messageLength > ((1024 * 1024) * 2)) {\n                  authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                               \"): wire protocol violation (message length \" + messageLength + \" is too large).\");\n                  //Send negative response\n                  responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                  socket.write(responseBuffer);\n                  socket.close();\n                  return null;\n              }\n\n            final ByteBuffer message = ByteBuffer.allocate(messageLength);\n            //Do non-blocking I/O to retrieve the login message\n            for (int ii = 0; ii < 4; ii++) {\n                socket.read(message);\n                if (!message.hasRemaining()) {\n                    break;\n                }\n                try {\n                    Thread.sleep(20);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n\n            //Didn't get the whole message. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (timeout reading authentication strings).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            /*\n             * Since we got the login message, cancel the timeout.\n             * If cancellation fails then the socket is dead and the connection lost\n             */\n            if (!timeoutFuture.cancel(false)) {\n                return null;\n            }\n\n            message.flip().position(1);//skip version\n            FastDeserializer fds = new FastDeserializer(message);\n            final String service = fds.readString();\n            final String username = fds.readString();\n            final byte password[] = new byte[20];\n            message.get(password);\n\n            CatalogContext context = m_catalogContext.get();\n\n            /*\n             * Don't use the auth system during recovery. Not safe to use\n             * the node to initiate multi-partition txns during recovery\n             */\n            if (!VoltDB.instance().rejoining()) {\n                /*\n                 * Authenticate the user.\n                 */\n                boolean authenticated = context.authSystem.authenticate(username, password);\n\n                if (!authenticated) {\n                    authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                                 \"): user \" + username + \" failed authentication.\");\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    return null;\n                }\n            } else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                        \"): user \" + username + \" because this node is rejoining.\");\n                //Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE_DUE_TO_REJOIN).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            AuthSystem.AuthUser user = context.authSystem.getUser(username);\n\n            /*\n             * Create an input handler.\n             */\n            InputHandler handler = null;\n            if (service.equalsIgnoreCase(\"database\")) {\n                handler =\n                    new ClientInputHandler(\n                            username,\n                            socket.socket().getInetAddress().getHostName(),\n                            m_isAdmin);\n            }\n            else {\n                String strUser = \"ANONYMOUS\";\n                if ((username != null) && (username.length() > 0)) strUser = username;\n\n                // If no processor can handle this service, null is returned.\n                String connectorClassName = ExportManager.instance().getConnectorForService(service);\n                if (connectorClassName == null) {\n                    //Send negative response\n                    responseBuffer.put(EXPORT_DISABLED_REJECTION).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Rejected user \" + strUser +\n                                 \" attempting to use disabled or unconfigured service \" +\n                                 service + \".\");\n                    return null;\n                }\n                if (!user.authorizeConnector(connectorClassName)) {\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Failure to authorize user \" + strUser + \" for service \" + service + \".\");\n                    return null;\n                }\n\n                handler = ExportManager.instance().createInputHandler(service, m_isAdmin);\n            }\n\n            if (handler != null) {\n                byte buildString[] = VoltDB.instance().getBuildString().getBytes(\"UTF-8\");\n                responseBuffer = ByteBuffer.allocate(34 + buildString.length);\n                responseBuffer.putInt(30 + buildString.length);//message length\n                responseBuffer.put((byte)0);//version\n\n                //Send positive response\n                responseBuffer.put((byte)0);\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getHostId());\n                responseBuffer.putLong(handler.connectionId());\n                responseBuffer.putLong(VoltDB.instance().getHostMessenger().getInstanceId().getTimestamp());\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getInstanceId().getCoord());\n                responseBuffer.putInt(buildString.length);\n                responseBuffer.put(buildString).flip();\n                socket.write(responseBuffer);\n\n            }\n            else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): user \" + username + \" failed authentication.\");\n                // Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n\n            }\n            return handler;\n        }","id":94366,"modified_method":"/**\n         * Attempt to authenticate the user associated with this socket connection\n         * @param socket\n         * @return AuthUser a set of user permissions or null if authentication fails\n         * @throws IOException\n         */\n        private InputHandler\n        authenticate(final SocketChannel socket) throws IOException\n        {\n            ByteBuffer responseBuffer = ByteBuffer.allocate(6);\n            byte version = (byte)0;\n            responseBuffer.putInt(2);//message length\n            responseBuffer.put(version);//version\n\n            /*\n             * The login message is a length preceded name string followed by a length preceded\n             * SHA-1 single hash of the password.\n             */\n            socket.configureBlocking(true);\n            socket.socket().setTcpNoDelay(true);//Greatly speeds up requests hitting the wire\n            final ByteBuffer lengthBuffer = ByteBuffer.allocate(4);\n\n            /*\n             * Schedule a timeout to close the socket in case there is no response for the timeout\n             * period. This will wake up the current thread that is blocked on reading the login message\n             */\n            ScheduledFuture<?> timeoutFuture = VoltDB.instance().scheduleWork(new Runnable() {\n                                                    @Override\n                                                    public void run() {\n                                                        try {\n                                                            socket.close();\n                                                        } catch (IOException e) {\n                                                            //Don't care\n                                                        }\n                                                    }\n                                                }, 1600, 0, TimeUnit.MILLISECONDS);\n\n            try {\n                while (lengthBuffer.hasRemaining()) {\n                    int read = socket.read(lengthBuffer);\n                    if (read == -1) {\n                        socket.close();\n                        timeoutFuture.cancel(false);\n                        return null;\n                    }\n                }\n            } catch (AsynchronousCloseException e) {}//This is the timeout firing and closing the channel\n\n            //Didn't get the value. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.debug(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                              \"): wire protocol violation (timeout reading message length).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            lengthBuffer.flip();\n\n            final int messageLength = lengthBuffer.getInt();\n            if (messageLength < 0) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (message length \" + messageLength + \" is negative).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            if (messageLength > ((1024 * 1024) * 2)) {\n                  authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                               \"): wire protocol violation (message length \" + messageLength + \" is too large).\");\n                  //Send negative response\n                  responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                  socket.write(responseBuffer);\n                  socket.close();\n                  return null;\n              }\n\n            final ByteBuffer message = ByteBuffer.allocate(messageLength);\n\n            try {\n                while (message.hasRemaining()) {\n                    int read = socket.read(message);\n                    if (read == -1) {\n                        socket.close();\n                        timeoutFuture.cancel(false);\n                        return null;\n                    }\n                }\n            } catch (AsynchronousCloseException e) {}//This is the timeout firing and closing the channel\n\n            //Didn't get the whole message. Client isn't going to get anymore time.\n            if (message.hasRemaining()) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (timeout reading authentication strings).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            /*\n             * Since we got the login message, cancel the timeout.\n             * If cancellation fails then the socket is dead and the connection lost\n             */\n            if (!timeoutFuture.cancel(false)) {\n                return null;\n            }\n\n            message.flip().position(1);//skip version\n            FastDeserializer fds = new FastDeserializer(message);\n            final String service = fds.readString();\n            final String username = fds.readString();\n            final byte password[] = new byte[20];\n            message.get(password);\n\n            CatalogContext context = m_catalogContext.get();\n\n            /*\n             * Don't use the auth system during recovery. Not safe to use\n             * the node to initiate multi-partition txns during recovery\n             */\n            if (!VoltDB.instance().rejoining()) {\n                /*\n                 * Authenticate the user.\n                 */\n                boolean authenticated = context.authSystem.authenticate(username, password);\n\n                if (!authenticated) {\n                    authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                                 \"): user \" + username + \" failed authentication.\");\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    return null;\n                }\n            } else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                        \"): user \" + username + \" because this node is rejoining.\");\n                //Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE_DUE_TO_REJOIN).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            AuthSystem.AuthUser user = context.authSystem.getUser(username);\n\n            /*\n             * Create an input handler.\n             */\n            InputHandler handler = null;\n            if (service.equalsIgnoreCase(\"database\")) {\n                handler =\n                    new ClientInputHandler(\n                            username,\n                            socket.socket().getInetAddress().getHostName(),\n                            m_isAdmin);\n            }\n            else {\n                String strUser = \"ANONYMOUS\";\n                if ((username != null) && (username.length() > 0)) strUser = username;\n\n                // If no processor can handle this service, null is returned.\n                String connectorClassName = ExportManager.instance().getConnectorForService(service);\n                if (connectorClassName == null) {\n                    //Send negative response\n                    responseBuffer.put(EXPORT_DISABLED_REJECTION).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Rejected user \" + strUser +\n                                 \" attempting to use disabled or unconfigured service \" +\n                                 service + \".\");\n                    return null;\n                }\n                if (!user.authorizeConnector(connectorClassName)) {\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Failure to authorize user \" + strUser + \" for service \" + service + \".\");\n                    return null;\n                }\n\n                handler = ExportManager.instance().createInputHandler(service, m_isAdmin);\n            }\n\n            if (handler != null) {\n                byte buildString[] = VoltDB.instance().getBuildString().getBytes(\"UTF-8\");\n                responseBuffer = ByteBuffer.allocate(34 + buildString.length);\n                responseBuffer.putInt(30 + buildString.length);//message length\n                responseBuffer.put((byte)0);//version\n\n                //Send positive response\n                responseBuffer.put((byte)0);\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getHostId());\n                responseBuffer.putLong(handler.connectionId());\n                responseBuffer.putLong(VoltDB.instance().getHostMessenger().getInstanceId().getTimestamp());\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getInstanceId().getCoord());\n                responseBuffer.putInt(buildString.length);\n                responseBuffer.put(buildString).flip();\n                socket.write(responseBuffer);\n\n            }\n            else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): user \" + username + \" failed authentication.\");\n                // Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n\n            }\n            return handler;\n        }","commit_id":"b8607b4b43ead87b15f21feb87a1f75bfadff17d","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public XMLEncodable getPacket() throws IOException {\n\t\tif (isConnected()) {\n\t\t\t_mark = 0;\n\t\t\t_readLimit = 0;\n\t\t\tdoReadIn(0);\n\t\t\tif (!isConnected())\n\t\t\t\treturn null;\n\t\t\tWirePacket packet = new WirePacket();\n\t\t\tpacket.decode(this);\n\t\t\treturn packet.getPacket();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tThread.sleep(DOWN_DELAY);\n\t\t\t} catch (InterruptedException e) {}\n\t\t}\n\t\treturn null;\n\t}","id":94367,"modified_method":"/**\n\t * Get the next packet from the network. It could be either an interest or data. If ccnd is\n\t * down this is where we do a sleep to avoid a busy wait. Also since this is supposed to happen\n\t * on packet boundaries, we reset the data buffer to its start here. We go ahead and try to read in\n\t * the initial data here also because if there isn't any we want to find out here, not in the middle\n\t * of thinking we might be able to decode something.\n\t * \n\t * @return a ContentObject, an Interest, or null if there's no data waiting\n\t * @throws IOException\n\t */\n\tpublic XMLEncodable getPacket() throws IOException {\n\t\tif (isConnected()) {\n\t\t\t_mark = 0;\n\t\t\t_readLimit = 0;\n\t\t\tdoReadIn(0);\n\t\t\tif (!isConnected())\n\t\t\t\treturn null;\n\t\t\tWirePacket packet = new WirePacket();\n\t\t\tpacket.decode(this);\n\t\t\treturn packet.getPacket();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tThread.sleep(DOWN_DELAY);\n\t\t\t} catch (InterruptedException e) {}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"05cc297459687696ef5ca4ee7e75c2c49817a5fe","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n\tpublic int read(byte[] b, int off, int len) throws IOException {\n\t\tint ret = 0;\n\t\twhile (len > 0) {\n\t\t\tif (off + len >= b.length) {\n\t\t\t\tif (off >= b.length)\n\t\t\t\t\tbreak;\n\t\t\t\tlen = b.length - off;\n\t\t\t}\n\t\t\tif (_datagram.hasRemaining()) {\n\t\t\t\tint size = _datagram.remaining() > len ? len : _datagram.remaining();\n\t\t\t\t_datagram.get(b, off, size);\n\t\t\t\tret += len;\n\t\t\t\toff += size;\n\t\t\t\tlen -= size;\n\t\t\t} else {\n\t\t\t\tint tmpRet = fill();\n\t\t\t\tif (tmpRet <= 0) {\n\t\t\t\t\tif (ret == 0)\n\t\t\t\t\t\tret = tmpRet;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}","id":94368,"modified_method":"@Override\n\tpublic int read(byte[] b, int off, int len) throws IOException {\n\t\tint ret = 0;\n\t\tif (len > b.length - off) {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t}\n\t\tif (! _datagram.hasRemaining()) {\n\t\t\tint tmpRet = fill();\n\t\t\tif (tmpRet <= 0) {\n\t\t\t\treturn tmpRet;\n\t\t\t}\n\t\t}\n\t\tret = _datagram.remaining() > len ? len : _datagram.remaining();\n\t\t_datagram.get(b, off, ret);\n\t\treturn ret;\n\t}","commit_id":"05cc297459687696ef5ca4ee7e75c2c49817a5fe","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private int doReadIn(int position) throws IOException {\n\t\tint ret = 0;\n\t\tclearSelectedKeys();\n\t\tif (select(SOCKET_TIMEOUT) != 0) {\n\t\t\t_datagram.position(position);\n\t\t\t_datagram.limit(_datagram.capacity() - position);\n\t\t\tif (_ncProto == NetworkProtocol.UDP) {\n\t\t\t\tret = _ncDGrmChannel.read(_datagram);\n\t\t\t} else {\n\t\t\t\tret = _ncSockChannel.read(_datagram);\n\t\t\t}\n\t\t\tif (ret >= 0) {\n\t\t\t\t_datagram.position(position);\n\t\t\t\t_datagram.limit(position + ret);\n\t\t\t\tif (null != _ncTapStreamIn) {\n\t\t\t\t\tbyte [] b = new byte[ret];\n\t\t\t\t\t_datagram.get(b);\n\t\t\t\t\t_ncTapStreamIn.write(b);\n\t\t\t\t\t_datagram.position(position);\n\t\t\t\t\t_datagram.limit(position + ret);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tclose();\n\t\t}\n\t\treturn ret;\n\t}","id":94369,"modified_method":"/**\n\t * Read in data to the buffer starting at the specified position.\n\t * @param position\n\t * @return\n\t * @throws IOException\n\t */\n\tprivate int doReadIn(int position) throws IOException {\n\t\tint ret = 0;\n\t\tclearSelectedKeys();\n\t\tif (select(SOCKET_TIMEOUT) != 0) {\n\t\t\t// Note that we must set limit first before setting position because setting\n\t\t\t// position larger than limit causes an exception.\n\t\t\t_datagram.limit(_datagram.capacity());\n\t\t\t_datagram.position(position);\n\t\t\tif (_ncProto == NetworkProtocol.UDP) {\n\t\t\t\tret = _ncDGrmChannel.read(_datagram);\n\t\t\t} else {\n\t\t\t\tret = _ncSockChannel.read(_datagram);\n\t\t\t}\n\t\t\tif (ret >= 0) {\n\t\t\t\t// The following is the equivalent of doing a flip except we don't\n\t\t\t\t// want to reset the position to 0 as flip would do (because we\n\t\t\t\t// potentially want to preserve a mark). But the read positions\n\t\t\t\t// the buffer to end of the read and we want to position to the start\n\t\t\t\t// of the data just read in.\n\t\t\t\t_datagram.limit(position + ret);\n\t\t\t\t_datagram.position(position);\n\t\t\t\tif (null != _ncTapStreamIn) {\n\t\t\t\t\tbyte [] b = new byte[ret];\n\t\t\t\t\t_datagram.get(b);\n\t\t\t\t\t_ncTapStreamIn.write(b);\n\t\t\t\t\t// Got the data so we have to redo the \"hand flip\" to read from the\n\t\t\t\t\t// correct position.\n\t\t\t\t\t_datagram.limit(position + ret);\n\t\t\t\t\t_datagram.position(position);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tclose();\n\t\t}\n\t\treturn ret;\n\t}","commit_id":"05cc297459687696ef5ca4ee7e75c2c49817a5fe","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private void clearSelectedKeys() {\n\t\t_ncSelector.selectedKeys().clear();\n\t}","id":94370,"modified_method":"/**\n\t * Need to do this after a successful select to allow the next select to happen\n\t */\n\tprivate void clearSelectedKeys() {\n\t\t_ncSelector.selectedKeys().clear();\n\t}","commit_id":"05cc297459687696ef5ca4ee7e75c2c49817a5fe","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n         * Attempt to authenticate the user associated with this socket connection\n         * @param socket\n         * @return AuthUser a set of user permissions or null if authentication fails\n         * @throws IOException\n         */\n        private InputHandler\n        authenticate(final SocketChannel socket) throws IOException\n        {\n            ByteBuffer responseBuffer = ByteBuffer.allocate(6);\n            byte version = (byte)0;\n            responseBuffer.putInt(2);//message length\n            responseBuffer.put(version);//version\n\n            /*\n             * The login message is a length preceded name string followed by a length preceded\n             * SHA-1 single hash of the password.\n             */\n            socket.configureBlocking(false);//Doing NIO allows timeouts via Thread.sleep()\n            socket.socket().setTcpNoDelay(true);//Greatly speeds up requests hitting the wire\n            final ByteBuffer lengthBuffer = ByteBuffer.allocate(4);\n\n            //Do non-blocking I/O to retrieve the length preceding value\n            for (int ii = 0; ii < 4; ii++) {\n                socket.read(lengthBuffer);\n                if (!lengthBuffer.hasRemaining()) {\n                    break;\n                }\n                try {\n                    Thread.sleep(400);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n\n            //Didn't get the value. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.debug(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                              \"): wire protocol violation (timeout reading message length).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            lengthBuffer.flip();\n\n            final int messageLength = lengthBuffer.getInt();\n            if (messageLength < 0) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (message length \" + messageLength + \" is negative).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            if (messageLength > ((1024 * 1024) * 2)) {\n                  authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                               \"): wire protocol violation (message length \" + messageLength + \" is too large).\");\n                  //Send negative response\n                  responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                  socket.write(responseBuffer);\n                  socket.close();\n                  return null;\n              }\n\n            final ByteBuffer message = ByteBuffer.allocate(messageLength);\n            //Do non-blocking I/O to retrieve the login message\n            for (int ii = 0; ii < 4; ii++) {\n                socket.read(message);\n                if (!message.hasRemaining()) {\n                    break;\n                }\n                try {\n                    Thread.sleep(20);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n\n            //Didn't get the whole message. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (timeout reading authentication strings).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            message.flip().position(1);//skip version\n            FastDeserializer fds = new FastDeserializer(message);\n            final String service = fds.readString();\n            final String username = fds.readString();\n            final byte password[] = new byte[20];\n            message.get(password);\n\n            CatalogContext context = m_catalogContext.get();\n\n            /*\n             * Don't use the auth system during recovery. Not safe to use\n             * the node to initiate multi-partition txns during recovery\n             */\n            if (!VoltDB.instance().rejoining()) {\n                /*\n                 * Authenticate the user.\n                 */\n                boolean authenticated = context.authSystem.authenticate(username, password);\n\n                if (!authenticated) {\n                    authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                                 \"): user \" + username + \" failed authentication.\");\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    return null;\n                }\n            } else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                        \"): user \" + username + \" because this node is rejoining.\");\n                //Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE_DUE_TO_REJOIN).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            AuthSystem.AuthUser user = context.authSystem.getUser(username);\n\n            /*\n             * Create an input handler.\n             */\n            InputHandler handler = null;\n            if (service.equalsIgnoreCase(\"database\")) {\n                handler =\n                    new ClientInputHandler(\n                            username,\n                            socket.socket().getInetAddress().getHostName(),\n                            m_isAdmin);\n            }\n            else {\n                String strUser = \"ANONYMOUS\";\n                if ((username != null) && (username.length() > 0)) strUser = username;\n\n                // If no processor can handle this service, null is returned.\n                String connectorClassName = ExportManager.instance().getConnectorForService(service);\n                if (connectorClassName == null) {\n                    //Send negative response\n                    responseBuffer.put(EXPORT_DISABLED_REJECTION).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Rejected user \" + strUser +\n                                 \" attempting to use disabled or unconfigured service \" +\n                                 service + \".\");\n                    return null;\n                }\n                if (!user.authorizeConnector(connectorClassName)) {\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Failure to authorize user \" + strUser + \" for service \" + service + \".\");\n                    return null;\n                }\n\n                handler = ExportManager.instance().createInputHandler(service, m_isAdmin);\n            }\n\n            if (handler != null) {\n                byte buildString[] = VoltDB.instance().getBuildString().getBytes(\"UTF-8\");\n                responseBuffer = ByteBuffer.allocate(34 + buildString.length);\n                responseBuffer.putInt(30 + buildString.length);//message length\n                responseBuffer.put((byte)0);//version\n\n                //Send positive response\n                responseBuffer.put((byte)0);\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getHostId());\n                responseBuffer.putLong(handler.connectionId());\n                responseBuffer.putLong(VoltDB.instance().getHostMessenger().getInstanceId().getTimestamp());\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getInstanceId().getCoord());\n                responseBuffer.putInt(buildString.length);\n                responseBuffer.put(buildString).flip();\n                socket.write(responseBuffer);\n\n            }\n            else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): user \" + username + \" failed authentication.\");\n                // Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n\n            }\n            return handler;\n        }","id":94371,"modified_method":"/**\n         * Attempt to authenticate the user associated with this socket connection\n         * @param socket\n         * @return AuthUser a set of user permissions or null if authentication fails\n         * @throws IOException\n         */\n        private InputHandler\n        authenticate(final SocketChannel socket) throws IOException\n        {\n            ByteBuffer responseBuffer = ByteBuffer.allocate(6);\n            byte version = (byte)0;\n            responseBuffer.putInt(2);//message length\n            responseBuffer.put(version);//version\n\n            /*\n             * The login message is a length preceded name string followed by a length preceded\n             * SHA-1 single hash of the password.\n             */\n            socket.configureBlocking(true);\n            socket.socket().setTcpNoDelay(true);//Greatly speeds up requests hitting the wire\n            final ByteBuffer lengthBuffer = ByteBuffer.allocate(4);\n\n            /*\n             * Schedule a timeout to close the socket in case there is no response for the timeout\n             * period. This will wake up the current thread that is blocked on reading the login message\n             */\n            ScheduledFuture<?> timeoutFuture = VoltDB.instance().scheduleWork(new Runnable() {\n                                                    @Override\n                                                    public void run() {\n                                                        try {\n                                                            authLog.warn(\"Timing out login attempt from \" +\n                                                                         socket.socket().getRemoteSocketAddress() +\n                                                                         \" after 1600 milliseconds\");\n                                                            socket.close();\n                                                        } catch (IOException e) {\n                                                            //Don't care\n                                                        }\n                                                    }\n                                                }, 1600, 0, TimeUnit.MILLISECONDS);\n\n            while (lengthBuffer.hasRemaining()) {\n                int read = socket.read(lengthBuffer);\n                if (read == -1) {\n                    throw new EOFException();\n                }\n            }\n\n            //Didn't get the value. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.debug(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                              \"): wire protocol violation (timeout reading message length).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            lengthBuffer.flip();\n\n            final int messageLength = lengthBuffer.getInt();\n            if (messageLength < 0) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (message length \" + messageLength + \" is negative).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n            if (messageLength > ((1024 * 1024) * 2)) {\n                  authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                               \"): wire protocol violation (message length \" + messageLength + \" is too large).\");\n                  //Send negative response\n                  responseBuffer.put(WIRE_PROTOCOL_FORMAT_ERROR).flip();\n                  socket.write(responseBuffer);\n                  socket.close();\n                  return null;\n              }\n\n            final ByteBuffer message = ByteBuffer.allocate(messageLength);\n            //Do non-blocking I/O to retrieve the login message\n            for (int ii = 0; ii < 4; ii++) {\n                socket.read(message);\n                if (!message.hasRemaining()) {\n                    break;\n                }\n                try {\n                    Thread.sleep(20);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n\n            //Didn't get the whole message. Client isn't going to get anymore time.\n            if (lengthBuffer.hasRemaining()) {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): wire protocol violation (timeout reading authentication strings).\");\n                //Send negative response\n                responseBuffer.put(WIRE_PROTOCOL_TIMEOUT_ERROR).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            /*\n             * Since we got the login message, cancel the timeout.\n             * If cancellation fails then the socket is dead and the connection lost\n             */\n            if (!timeoutFuture.cancel(false)) {\n                return null;\n            }\n\n            message.flip().position(1);//skip version\n            FastDeserializer fds = new FastDeserializer(message);\n            final String service = fds.readString();\n            final String username = fds.readString();\n            final byte password[] = new byte[20];\n            message.get(password);\n\n            CatalogContext context = m_catalogContext.get();\n\n            /*\n             * Don't use the auth system during recovery. Not safe to use\n             * the node to initiate multi-partition txns during recovery\n             */\n            if (!VoltDB.instance().rejoining()) {\n                /*\n                 * Authenticate the user.\n                 */\n                boolean authenticated = context.authSystem.authenticate(username, password);\n\n                if (!authenticated) {\n                    authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                                 \"): user \" + username + \" failed authentication.\");\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    return null;\n                }\n            } else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                        \"): user \" + username + \" because this node is rejoining.\");\n                //Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE_DUE_TO_REJOIN).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n            }\n\n            AuthSystem.AuthUser user = context.authSystem.getUser(username);\n\n            /*\n             * Create an input handler.\n             */\n            InputHandler handler = null;\n            if (service.equalsIgnoreCase(\"database\")) {\n                handler =\n                    new ClientInputHandler(\n                            username,\n                            socket.socket().getInetAddress().getHostName(),\n                            m_isAdmin);\n            }\n            else {\n                String strUser = \"ANONYMOUS\";\n                if ((username != null) && (username.length() > 0)) strUser = username;\n\n                // If no processor can handle this service, null is returned.\n                String connectorClassName = ExportManager.instance().getConnectorForService(service);\n                if (connectorClassName == null) {\n                    //Send negative response\n                    responseBuffer.put(EXPORT_DISABLED_REJECTION).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Rejected user \" + strUser +\n                                 \" attempting to use disabled or unconfigured service \" +\n                                 service + \".\");\n                    return null;\n                }\n                if (!user.authorizeConnector(connectorClassName)) {\n                    //Send negative response\n                    responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                    socket.write(responseBuffer);\n                    socket.close();\n                    authLog.warn(\"Failure to authorize user \" + strUser + \" for service \" + service + \".\");\n                    return null;\n                }\n\n                handler = ExportManager.instance().createInputHandler(service, m_isAdmin);\n            }\n\n            if (handler != null) {\n                byte buildString[] = VoltDB.instance().getBuildString().getBytes(\"UTF-8\");\n                responseBuffer = ByteBuffer.allocate(34 + buildString.length);\n                responseBuffer.putInt(30 + buildString.length);//message length\n                responseBuffer.put((byte)0);//version\n\n                //Send positive response\n                responseBuffer.put((byte)0);\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getHostId());\n                responseBuffer.putLong(handler.connectionId());\n                responseBuffer.putLong(VoltDB.instance().getHostMessenger().getInstanceId().getTimestamp());\n                responseBuffer.putInt(VoltDB.instance().getHostMessenger().getInstanceId().getCoord());\n                responseBuffer.putInt(buildString.length);\n                responseBuffer.put(buildString).flip();\n                socket.write(responseBuffer);\n\n            }\n            else {\n                authLog.warn(\"Failure to authenticate connection(\" + socket.socket().getRemoteSocketAddress() +\n                             \"): user \" + username + \" failed authentication.\");\n                // Send negative response\n                responseBuffer.put(AUTHENTICATION_FAILURE).flip();\n                socket.write(responseBuffer);\n                socket.close();\n                return null;\n\n            }\n            return handler;\n        }","commit_id":"6aabba79e3f8726d7c783533992fb489e11bcc2b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public void run() {\n            try {\n                do {\n                    final SocketChannel socket;\n                    try\n                    {\n                        socket = m_serverSocket.accept();\n                    }\n                    catch (IOException ioe)\n                    {\n                        if (ioe.getMessage() != null &&\n                            ioe.getMessage().contains(\"Too many open files\"))\n                        {\n                            networkLog.warn(\"Rejected accepting new connection due to too many open files\");\n                            continue;\n                        }\n                        else\n                        {\n                            throw ioe;\n                        }\n                    }\n\n                    /*\n                     * Enforce a limit on the maximum number of connections\n                     */\n                    if (m_numConnections.get() == MAX_CONNECTIONS.get()) {\n                        networkLog.warn(\"Rejected connection from \" +\n                                socket.socket().getRemoteSocketAddress() +\n                                \" because the connection limit of \" + MAX_CONNECTIONS + \" has been reached\");\n                        /*\n                         * Send rejection message with reason code\n                         */\n                        final ByteBuffer b = ByteBuffer.allocate(1);\n                        b.put(MAX_CONNECTIONS_LIMIT_ERROR);\n                        b.flip();\n                        socket.configureBlocking(true);\n                        for (int ii = 0; ii < 4 && b.hasRemaining(); ii++) {\n                            socket.write(b);\n                        }\n                        socket.close();\n                        continue;\n                    }\n\n                    /*\n                     * Increment the number of connections even though this one hasn't been authenticated\n                     * so that a flood of connection attempts (with many doomed) will not result in\n                     * successful authentication of connections that would put us over the limit.\n                     */\n                    m_numConnections.incrementAndGet();\n\n                    m_executor.execute(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (socket != null) {\n                                boolean success = false;\n                                try {\n                                    final InputHandler handler = authenticate(socket);\n                                    if (handler != null) {\n                                        socket.configureBlocking(false);\n                                        if (handler instanceof ClientInputHandler) {\n                                            socket.socket().setTcpNoDelay(false);\n                                        }\n                                        socket.socket().setKeepAlive(true);\n\n                                        if (handler instanceof ClientInputHandler) {\n                                            final Connection c = m_network.registerChannel(socket, handler, 0);\n                                            /*\n                                             * If IV2 is enabled the logic initially enabling read is\n                                             * in the started method of the InputHandler\n                                             */\n                                            if (!VoltDB.instance().isIV2Enabled()) {\n                                                m_backpressureLock.lock();\n                                                try {\n                                                    if (!m_hasDTXNBackPressure) {\n                                                        c.enableReadSelection();\n                                                    }\n                                                    m_connections.add(c);\n                                                } finally {\n                                                    m_backpressureLock.unlock();\n                                                }\n                                            }\n                                        } else {\n                                            m_network.registerChannel(socket, handler, SelectionKey.OP_READ);\n                                        }\n                                        success = true;\n                                    }\n                                } catch (IOException e) {\n                                    try {\n                                        socket.close();\n                                    } catch (IOException e1) {\n                                        //Don't care connection is already lost anyways\n                                    }\n                                    if (m_running) {\n                                        hostLog.warn(\"Exception authenticating and registering user in ClientAcceptor\", e);\n                                    }\n                                } finally {\n                                    if (!success) {\n                                        m_numConnections.decrementAndGet();\n                                    }\n                                }\n                            }\n                        }\n                    });\n                } while (m_running);\n            }  catch (IOException e) {\n                if (m_running) {\n                    hostLog.fatal(\"Exception in ClientAcceptor. The acceptor has died\", e);\n                }\n            } finally {\n                try {\n                    m_serverSocket.close();\n                } catch (IOException e) {\n                    hostLog.fatal(null, e);\n                }\n                //Prevent interruption\n                synchronized (this) {\n                    Thread.interrupted();\n                    m_executor.shutdownNow();\n                    try {\n                        m_executor.awaitTermination( 1, TimeUnit.DAYS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n        }","id":94372,"modified_method":"@Override\n        public void run() {\n            try {\n                do {\n                    final SocketChannel socket;\n                    try\n                    {\n                        socket = m_serverSocket.accept();\n                    }\n                    catch (IOException ioe)\n                    {\n                        if (ioe.getMessage() != null &&\n                            ioe.getMessage().contains(\"Too many open files\"))\n                        {\n                            networkLog.warn(\"Rejected accepting new connection due to too many open files\");\n                            continue;\n                        }\n                        else\n                        {\n                            throw ioe;\n                        }\n                    }\n\n                    /*\n                     * Enforce a limit on the maximum number of connections\n                     */\n                    if (m_numConnections.get() == MAX_CONNECTIONS.get()) {\n                        networkLog.warn(\"Rejected connection from \" +\n                                socket.socket().getRemoteSocketAddress() +\n                                \" because the connection limit of \" + MAX_CONNECTIONS + \" has been reached\");\n                        try {\n                            /*\n                             * Send rejection message with reason code\n                             */\n                            final ByteBuffer b = ByteBuffer.allocate(1);\n                            b.put(MAX_CONNECTIONS_LIMIT_ERROR);\n                            b.flip();\n                            socket.configureBlocking(true);\n                            for (int ii = 0; ii < 4 && b.hasRemaining(); ii++) {\n                                socket.write(b);\n                            }\n                            socket.close();\n                        } catch (IOException e) {}//don't care keep running\n                        continue;\n                    }\n\n                    /*\n                     * Increment the number of connections even though this one hasn't been authenticated\n                     * so that a flood of connection attempts (with many doomed) will not result in\n                     * successful authentication of connections that would put us over the limit.\n                     */\n                    m_numConnections.incrementAndGet();\n\n                    m_executor.execute(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (socket != null) {\n                                boolean success = false;\n                                try {\n                                    final InputHandler handler = authenticate(socket);\n                                    if (handler != null) {\n                                        socket.configureBlocking(false);\n                                        if (handler instanceof ClientInputHandler) {\n                                            socket.socket().setTcpNoDelay(false);\n                                        }\n                                        socket.socket().setKeepAlive(true);\n\n                                        if (handler instanceof ClientInputHandler) {\n                                            final Connection c = m_network.registerChannel(socket, handler, 0);\n                                            /*\n                                             * If IV2 is enabled the logic initially enabling read is\n                                             * in the started method of the InputHandler\n                                             */\n                                            if (!VoltDB.instance().isIV2Enabled()) {\n                                                m_backpressureLock.lock();\n                                                try {\n                                                    if (!m_hasDTXNBackPressure) {\n                                                        c.enableReadSelection();\n                                                    }\n                                                    m_connections.add(c);\n                                                } finally {\n                                                    m_backpressureLock.unlock();\n                                                }\n                                            }\n                                        } else {\n                                            m_network.registerChannel(socket, handler, SelectionKey.OP_READ);\n                                        }\n                                        success = true;\n                                    }\n                                } catch (IOException e) {\n                                    try {\n                                        socket.close();\n                                    } catch (IOException e1) {\n                                        //Don't care connection is already lost anyways\n                                    }\n                                    if (m_running) {\n                                        hostLog.warn(\"Exception authenticating and registering user in ClientAcceptor\", e);\n                                    }\n                                } finally {\n                                    if (!success) {\n                                        m_numConnections.decrementAndGet();\n                                    }\n                                }\n                            }\n                        }\n                    });\n                } while (m_running);\n            }  catch (IOException e) {\n                if (m_running) {\n                    hostLog.fatal(\"Exception in ClientAcceptor. The acceptor has died\", e);\n                }\n            } finally {\n                try {\n                    m_serverSocket.close();\n                } catch (IOException e) {\n                    hostLog.fatal(null, e);\n                }\n                //Prevent interruption\n                synchronized (this) {\n                    Thread.interrupted();\n                    m_executor.shutdownNow();\n                    try {\n                        m_executor.awaitTermination( 1, TimeUnit.DAYS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n        }","commit_id":"6aabba79e3f8726d7c783533992fb489e11bcc2b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST)) return new GrListImpl(node);\n    if (elem.equals(MAP)) return new GrMapImpl(node);\n\n    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationTypeDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBodyImplType(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBodyImplType(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBodyImplType(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_BODY)) return new GrMethodBodyImpl(node);\n\n    //members\n    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //expressions\n    if (elem.equals(EXPRESSION_STATEMENT)) return new GrCallExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgsImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExprImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExprImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentsImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":94373,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST)) return new GrListImpl(node);\n    if (elem.equals(MAP)) return new GrMapImpl(node);\n\n    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationTypeDefinitionImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBodyImplType(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBodyImplType(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBodyImplType(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_BODY)) return new GrMethodBodyImpl(node);\n\n    //members\n    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //expressions\n    if (elem.equals(EXPRESSION_STATEMENT)) return new GrCallExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgsImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExprImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExprImpl(node);\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentsImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"98c2090536d86e3d96a8e6cd6baa87b148a6cca5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void cleanAfterError(PsiBuilder builder) {\n    int i = 0;\n    PsiBuilder.Marker em = builder.mark();\n    while (!builder.eof() &&\n            !(mNLS.equals(builder.getTokenType()) ||\n                    mRCURLY.equals(builder.getTokenType()) ||\n                    mSEMI.equals(builder.getTokenType()))\n            ) {\n      builder.advanceLexer();\n      i++;\n    }\n    if (i > 0) {\n      em.error(GroovyBundle.message(\"separator.or.rcurly.expected\"));\n    } else {\n      em.drop();\n    }\n  }","id":94374,"modified_method":"/**\n   * Rolls marker forward after possible errors\n   *\n   * @param builder\n   */\n  private static void cleanAfterError(PsiBuilder builder) {\n    int i = 0;\n    PsiBuilder.Marker em = builder.mark();\n    while (!builder.eof() &&\n            !(mNLS.equals(builder.getTokenType()) ||\n                    mRCURLY.equals(builder.getTokenType()) ||\n                    mSEMI.equals(builder.getTokenType()))\n            ) {\n      builder.advanceLexer();\n      i++;\n    }\n    if (i > 0) {\n      em.error(GroovyBundle.message(\"separator.or.rcurly.expected\"));\n    } else {\n      em.drop();\n    }\n  }","commit_id":"98c2090536d86e3d96a8e6cd6baa87b148a6cca5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    closableBlockParamsOpt(builder);\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(CLOSABLE_BLOCK);\n    return CLOSABLE_BLOCK;\n  }","id":94375,"modified_method":"/**\n   * Parses blocks of both types\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType result = closableBlockParamsOpt(builder);\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    if (!result.equals(WRONGWAY)) {\n      marker.done(CLOSABLE_BLOCK);\n      return CLOSABLE_BLOCK;\n    } else {\n      marker.done(OPEN_BLOCK);\n      return OPEN_BLOCK;\n    }\n  }","commit_id":"98c2090536d86e3d96a8e6cd6baa87b148a6cca5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Any path element parsing\n   *\n   * @param builder\n   * @param marker\n   * @return\n   */\n  private static GroovyElementType pathElementParse(PsiBuilder builder,\n                                                    PsiBuilder.Marker marker) {\n    TokenSet DOTS = TokenSet.create(\n            mSPREAD_DOT,\n            mOPTIONAL_DOT,\n            mMEMBER_POINTER,\n            mDOT\n    );\n    GroovyElementType res;\n\n    // Property reference\n    if (DOTS.contains(builder.getTokenType()) ||\n            ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n      ParserUtils.getToken(builder, mNLS);\n      ParserUtils.getToken(builder, DOTS);\n      ParserUtils.getToken(builder, mNLS);\n      // TODO Add type arguments parsing\n      res = namePartParse(builder);\n      if (!res.equals(WRONGWAY)) {\n        // If method call\n        if (mLPAREN.equals(builder.getTokenType())) {\n          pathElementParse(builder, marker);\n        } else {\n          PsiBuilder.Marker newMarker = marker.precede();\n          marker.done(PATH_PROPERTY_REFERENCE);\n          pathElementParse(builder, newMarker);\n        }\n      } else {\n        builder.error(GroovyBundle.message(\"path.selector.expected\"));\n        marker.drop();\n      }\n    } else if (mLPAREN.equals(builder.getTokenType())) {\n      methodCallArgsParse(builder);\n      PsiBuilder.Marker newMarker = marker.precede();\n      marker.done(PATH_METHOD_CALL);\n      pathElementParse(builder, newMarker);\n    } else {\n\n      // TODO add other cases\n      marker.drop();\n\n    }\n\n    return PATH_EXPRESSION;\n  }","id":94376,"modified_method":"/**\n   * Any path element parsing\n   *\n   * @param builder\n   * @param marker\n   * @return\n   */\n  private static GroovyElementType pathElementParse(PsiBuilder builder,\n                                                    PsiBuilder.Marker marker) {\n    TokenSet DOTS = TokenSet.create(\n            mSPREAD_DOT,\n            mOPTIONAL_DOT,\n            mMEMBER_POINTER,\n            mDOT\n    );\n    GroovyElementType res;\n\n    // Property reference\n    if (DOTS.contains(builder.getTokenType()) ||\n            ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n      ParserUtils.getToken(builder, mNLS);\n      ParserUtils.getToken(builder, DOTS);\n      ParserUtils.getToken(builder, mNLS);\n      // TODO Add type arguments parsing\n      res = namePartParse(builder);\n      if (!res.equals(WRONGWAY)) {\n        // If method call or appended block\n        if (mLPAREN.equals(builder.getTokenType()) ||\n                mLCURLY.equals(builder.getTokenType())) {\n          pathElementParse(builder, marker);\n        } else {\n          PsiBuilder.Marker newMarker = marker.precede();\n          marker.done(PATH_PROPERTY_REFERENCE);\n          pathElementParse(builder, newMarker);\n        }\n      } else {\n        builder.error(GroovyBundle.message(\"path.selector.expected\"));\n        marker.drop();\n      }\n    } else if (mLPAREN.equals(builder.getTokenType())) {\n      methodCallArgsParse(builder);\n      if (mLCURLY.equals(builder.getTokenType())) {\n        pathElementParse(builder, marker);\n      } else {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(PATH_METHOD_CALL);\n        pathElementParse(builder, newMarker);\n      }\n    } else if (mLCURLY.equals(builder.getTokenType())) {\n      appendedBlockParse(builder);\n      PsiBuilder.Marker newMarker = marker.precede();\n      marker.done(PATH_METHOD_CALL);\n      pathElementParse(builder, newMarker);\n    } else if (mLBRACK.equals(builder.getTokenType())) {\n      indexPropertyArgsParse(builder);\n      PsiBuilder.Marker newMarker = marker.precede();\n      marker.done(PATH_INDEX_PROPERTY);\n      pathElementParse(builder, newMarker);\n    } else {\n      marker.drop();\n    }\n    return PATH_EXPRESSION;\n  }","commit_id":"98c2090536d86e3d96a8e6cd6baa87b148a6cca5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Strict parsing. In case of any convergence returns WRONGWAY\n   *\n   * @param builder\n   * @return\n   */\n  // TODO Implement it, please in accordance with javadoc above\n  public static GroovyElementType parseStrict(PsiBuilder builder){\n    PsiBuilder.Marker citMarker = builder.mark();\n    if (!ParserUtils.getToken(builder, mIDENT)) {\n      citMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    citMarker.done(CLASS_INTERFACE_TYPE);\n    return CLASS_INTERFACE_TYPE;\n  }","id":94377,"modified_method":"/**\n   * Strict parsing. In case of any convergence returns WRONGWAY\n   *\n   * @param builder\n   * @return\n   */\n  // TODO Implement it, please in accordance with javadoc above\n  public static GroovyElementType parseStrict(PsiBuilder builder){\n    return parse(builder);\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n//    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION)) return new GrVariableDefinitionsImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationTypeDefinitionImpl(node);\n\n    if (elem.equals(CLASS_INTERFACE_TYPE)) return new GrClassInterfaceTypeImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBodyImplType(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBodyImplType(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBodyImplType(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_BODY)) return new GrMethodBodyImpl(node);\n\n    //members\n    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //expressions\n    if (elem.equals(EXPRESSION_STATEMENT)) return new GrCallExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgsImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExprImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExprImpl(node);\n    if (elem.equals(PARENTHSIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentsImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","id":94378,"modified_method":"/**\n   * Creates Groovy PSI element by given AST node\n   *\n   * @param node Given node\n   * @return Respective PSI element\n   */\n  public static PsiElement createElement(ASTNode node) {\n    IElementType elem = node.getElementType();\n\n    //Identifiers & literal\n    if (elem.equals(IDENTIFIER)) return new GrIdentifierImpl(node);\n    if (elem.equals(LITERAL)) return new GrLiteralImpl(node);\n\n    //Lists, mapetc...\n    if (elem.equals(LIST_OR_MAP)) return new GrListOrMapImpl(node);\n\n//    if (elem.equals(MODIFIER)) return new GrModifierImpl(node);\n    if (elem.equals(MODIFIERS)) return new GrModifiersImpl(node);\n\n    // Imports\n    if (elem.equals(IMPORT_STATEMENT)) return new GrImportStatementImpl(node);\n    if (elem.equals(IMPORT_SELECTOR)) return new GrImportSelectorImpl(node);\n    if (elem.equals(IMPORT_REFERENCE)) return new GrImportReferenceImpl(node);\n\n    // Packaging\n    if (elem.equals(PACKAGE_DEFINITION)) return new GrPackageDefinitionImpl(node);\n\n    //statements\n    if (elem.equals(IF_STATEMENT)) return new GrIfStatementImpl(node);\n    if (elem.equals(FOR_STATEMENT)) return new GrForStatementImpl(node);\n    if (elem.equals(WHILE_STATEMENT)) return new GrWhileStatementImpl(node);\n    if (elem.equals(WITH_STATEMENT)) return new GrWithStatementImpl(node);\n    if (elem.equals(STAR_STATEMENT)) return new GrStarStatementImpl(node);\n    if (elem.equals(VARIABLE_DEFINITION)) return new GrVariableDefinitionsImpl(node);\n\n\n    //type definitions\n    if (elem.equals(CLASS_DEFINITION)) return new GrClassDefinitionImpl(node);\n    if (elem.equals(INTERFACE_DEFINITION)) return new GrInterfaceDefinitionImpl(node);\n    if (elem.equals(ENUM_DEFINITION)) return new GrEnumTypeDefinitionImpl(node);\n    if (elem.equals(ANNOTATION_DEFINITION)) return new GrAnnotationTypeDefinitionImpl(node);\n\n    if (elem.equals(CLASS_INTERFACE_TYPE)) return new GrClassInterfaceTypeImpl(node);\n\n    //clauses\n    if (elem.equals(IMPLEMENTS_CLAUSE)) return new GrImplementsClauseImpl(node);\n    if (elem.equals(EXTENDS_CLAUSE)) return new GrExtendsClauseImpl(node);\n\n    //blocks\n    if (elem.equals(CLASS_BLOCK)) return new GrClassBodyImpl(node);\n    if (elem.equals(INTERFACE_BLOCK)) return new GrInterfaceBodyImplType(node);\n    if (elem.equals(ENUM_BLOCK)) return new GrEnumBodyImplType(node);\n    if (elem.equals(ANNOTATION_BLOCK)) return new GrAnnotationBodyImplType(node);\n    if (elem.equals(CLOSABLE_BLOCK)) return new GrClosableBlockImpl(node);\n    if (elem.equals(OPEN_BLOCK)) return new GrOpenBlockImpl(node);\n    if (elem.equals(CONSTRUCTOR_BODY)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_BODY)) return new GrMethodBodyImpl(node);\n\n    //members\n    if (elem.equals(CLASS_FIELD)) return new GrClassMemberImpl(node);\n    if (elem.equals(INTERFACE_FIELD)) return new GrInterfaceMemberImpl(node);\n    if (elem.equals(ENUM_FIELD)) return new GrEnumMemberImpl(node);\n    if (elem.equals(ANNOTATION_FIELD)) return new GrAnnotationMemberImpl(node);\n\n    if (elem.equals(CONSTRUCTOR_DEFINITION)) return new GrConstructorBodyImpl(node);\n    if (elem.equals(METHOD_DEFINITION)) return new GrMethodDefinitionImpl(node);\n\n    //parameters\n    if (elem.equals(PARAMETERS_LIST)) return new GrParameterListImpl(node);\n    if (elem.equals(PARAMETER)) return new GrParameterImpl(node);\n    if (elem.equals(PARAMETER_MODIFIERS)) return new GrParameterModifiersImpl(node);\n\n    //type parameters\n    if (elem.equals(TYPE_ARGUMENT)) return new GrTypeArgumentImpl(node);\n    if (elem.equals(TYPE_ARGUMENTS)) return new GrTypeArgumentsImpl(node);\n\n    //expressions\n    if (elem.equals(EXPRESSION_STATEMENT)) return new GrCallExpressionImpl(node);\n    if (elem.equals(COMMAND_ARGUMENTS)) return new GrCommandArgsImpl(node);\n    if (elem.equals(CONDITIONAL_EXPRESSION)) return new GrConditionalExprImpl(node);\n    if (elem.equals(ASSIGNMENT_EXPRESSION)) return new GrAssignmentExprImpl(node);\n    if (elem.equals(LOGICAL_OR_EXPRESSION)) return new GrLogicalOrExprImpl(node);\n    if (elem.equals(LOGICAL_AND_EXPRESSION)) return new GrLogicalAndExprImpl(node);\n    if (elem.equals(EXCLUSIVE_OR_EXPRESSION)) return new GrExclusiveOrExprImpl(node);\n    if (elem.equals(INCLUSIVE_OR_EXPRESSION)) return new GrInclusiveOrExprImpl(node);\n    if (elem.equals(AND_EXPRESSION)) return new GrAndExprImpl(node);\n    if (elem.equals(REGEX_EXPRESSION)) return new GrRegexExprImpl(node);\n    if (elem.equals(EQUALITY_EXPRESSION)) return new GrEqualityExprImpl(node);\n    if (elem.equals(RELATIONAL_EXPRESSION)) return new GrRelationalExprImpl(node);\n    if (elem.equals(SHIFT_EXPRESSION)) return new GrShiftExprImpl(node);\n    if (elem.equals(ADDITIVE_EXPRESSION)) return new GrAdditiveExprImpl(node);\n    if (elem.equals(MULTIPLICATIVE_EXPRESSION)) return new GrMultiplicativeExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION)) return new GrPowerExprImpl(node);\n    if (elem.equals(POWER_EXPRESSION_SIMPLE)) return new GrPowerExprImpl(node);\n    if (elem.equals(UNARY_EXPRESSION)) return new GrUnaryExprImpl(node);\n    if (elem.equals(POSTFIX_EXPRESSION)) return new GrPostfixExprImpl(node);\n    if (elem.equals(CAST_EXPRESSION)) return new GrTypeCastExprImpl(node);\n    if (elem.equals(TYPE_CAST)) return new GrTypeCastImpl(node);\n    if (elem.equals(ARRAY_TYPE)) return new GrArrayTypeElementImpl(node);\n    if (elem.equals(BUILT_IN_TYPE)) return new GrBuiltInTypeImpl(node);\n    if (elem.equals(GSTRING)) return new GrStringImpl(node);\n    if (elem.equals(REGEX)) return new GrRegexImpl(node);\n    if (elem.equals(REFERENCE_EXPRESSION)) return new GrReferenceExprImpl(node);\n    if (elem.equals(PARENTHSIZED_EXPRESSION)) return new GrParenthesizedExprImpl(node);\n    if (elem.equals(NEW_EXPRESSION)) return new GrNewExprImpl(node);\n\n\n    //Paths\n    if (elem.equals(PATH_PROPERTY)) return new GrPropertySelectorImpl(node);\n    if (elem.equals(PATH_PROPERTY_REFERENCE)) return new GrPropertySelectionImpl(node);\n    if (elem.equals(PATH_METHOD_CALL)) return new GrMethodCallImpl(node);\n    if (elem.equals(PATH_INDEX_PROPERTY)) return new GrIndexPropertyImpl(node);\n\n    // Arguments\n    if (elem.equals(ARGUMENTS)) return new GrArgumentsImpl(node);\n    if (elem.equals(ARGUMENT)) return new GrArgumentImpl(node);\n    if (elem.equals(ARGUMENT_LABEL)) return new GrArgumentLabelImpl(node);\n\n\n    if (elem.equals(BALANCED_BRACKETS)) return new GrBalancedBracketsImpl(node);\n    if (elem.equals(DECLARATION)) return new GrDeclarationStatementImpl(node);\n\n    return new ASTWrapperPsiElement(node);\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n    if (!ParserUtils.getToken(builder, mIDENT)) {\n      builder.error(GroovyBundle.message(\"identifier.expected\"));\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, mLPAREN)) {\n      builder.error(GroovyBundle.message(\"lparen.expected\"));\n    }\n\n    ParameterDeclarationList.parse(builder);\n\n    if (!ParserUtils.getToken(builder, mRPAREN)) {\n      ParserUtils.waitNextRCurly(builder);\n\n      builder.error(GroovyBundle.message(\"rparen.expected\"));\n    }\n\n    ThrowClause.parse(builder);\n\n    NlsWarn.parse(builder);\n\n    IElementType methodBody = MethodBody.parse(builder);\n\n    if (METHOD_BODY.equals(methodBody)) {\n      return METHOD_DEFINITION;\n    } else if (CONSTRUCTOR_BODY.equals(methodBody)) {\n      return CONSTRUCTOR_DEFINITION;\n    } else {\n      return WRONGWAY;\n    }\n  }","id":94379,"modified_method":"public static IElementType parse(PsiBuilder builder) {\n    if (!ParserUtils.getToken(builder, mIDENT)) {\n      builder.error(GroovyBundle.message(\"identifier.expected\"));\n      return WRONGWAY;\n    }\n\n    if (!ParserUtils.getToken(builder, mLPAREN)) {\n      builder.error(GroovyBundle.message(\"lparen.expected\"));\n    }\n\n    ParameterDeclarationList.parse(builder, mRPAREN);\n\n    if (!ParserUtils.getToken(builder, mRPAREN)) {\n      ParserUtils.waitNextRCurly(builder);\n\n      builder.error(GroovyBundle.message(\"rparen.expected\"));\n    }\n\n    ThrowClause.parse(builder);\n\n    NlsWarn.parse(builder);\n\n    IElementType methodBody = MethodBody.parse(builder);\n\n    if (METHOD_BODY.equals(methodBody)) {\n      return METHOD_DEFINITION;\n    } else if (CONSTRUCTOR_BODY.equals(methodBody)) {\n      return CONSTRUCTOR_DEFINITION;\n    } else {\n      return WRONGWAY;\n    }\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType closableBlockParamsOpt(PsiBuilder builder) {\n/*\n    GroovyElementType result = ParameterDeclarationList.parse(builder);\n    if (!WRONGWAY.equals(result)) {\n      ParserUtils.getToken(builder, mNLS);\n      ParserUtils.getToken(builder, mCLOSABLE_BLOCK_OP, GroovyBundle.message(\"closure.op.expected\"));\n      return PARAMETERS_LIST;\n    }\n*/\n    return WRONGWAY;\n  }","id":94380,"modified_method":"private static GroovyElementType closableBlockParamsOpt(PsiBuilder builder) {\n    ParameterDeclarationList.parse(builder, mCLOSABLE_BLOCK_OP);\n    ParserUtils.getToken(builder, mNLS);\n    if (ParserUtils.getToken(builder, mCLOSABLE_BLOCK_OP)) {\n      return PARAMETERS_LIST;\n    }\n    return WRONGWAY;\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses CLOSABLE blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseClosableBlock(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    closableBlockParamsOpt(builder);\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(CLOSABLE_BLOCK);\n    return CLOSABLE_BLOCK;\n  }","id":94381,"modified_method":"/**\n   * Parses CLOSABLE blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseClosableBlock(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType result = closableBlockParamsOpt(builder);\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    if (!result.equals(WRONGWAY)) {\n      marker.done(CLOSABLE_BLOCK);\n      return CLOSABLE_BLOCK;\n    } else {\n      marker.done(OPEN_BLOCK);\n      return OPEN_BLOCK;\n    }\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker pdMarker = builder.mark();\n\n    if (WRONGWAY.equals(ParameterModifierOptional.parse(builder))) {\n      pdMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker checkMarker = builder.mark();\n\n    GroovyElementType type = TypeSpec.parse(builder);\n    if (!WRONGWAY.equals(type)) { //type was recognized\n      ParserUtils.getToken(builder, mTRIPLE_DOT);\n\n      if (!ParserUtils.getToken(builder, mIDENT)) { //if there is no identifier rollback to begin\n        checkMarker.rollbackTo();\n\n        if (!ParserUtils.getToken(builder, mIDENT)) { //parse identifier because suggestion about type was wrong\n          pdMarker.rollbackTo();\n          return WRONGWAY;\n        }\n\n        VariableInitializer.parse(builder);\n\n        pdMarker.done(PARAMETER);\n        return PARAMETER;\n      } else { //parse typized parameter\n        checkMarker.drop();\n        VariableInitializer.parse(builder);\n\n        pdMarker.done(PARAMETER);\n        return PARAMETER;\n      }\n    } else {\n      checkMarker.rollbackTo();\n\n      if (!ParserUtils.getToken(builder, mIDENT)) { //parse parameter without type\n        pdMarker.rollbackTo();\n        return WRONGWAY;\n      }\n\n      VariableInitializer.parse(builder);\n\n      pdMarker.done(PARAMETER);\n      return PARAMETER;\n    }\n  }","id":94382,"modified_method":"/**\n   * @param builder\n   * @param ending  Given ending: -> or )\n   * @return\n   */\n  public static GroovyElementType parse(PsiBuilder builder, IElementType ending) {\n    PsiBuilder.Marker pdMarker = builder.mark();\n\n    // Parse optional modifier(s)\n    parseOptionalModifier(builder);\n\n    PsiBuilder.Marker rb = builder.mark();\n    TypeSpec.parseStrict(builder);\n    if (!mIDENT.equals(builder.getTokenType())) {\n      rb.rollbackTo();\n    } else {\n      rb.drop();\n    }\n\n    // TODO When does it work? I tried but i failed.\n    // Possible it is a parameter, not statement\n    boolean hasDots = ParserUtils.getToken(builder, mTRIPLE_DOT);\n\n    if (ParserUtils.getToken(builder, mIDENT)) {\n      if (mASSIGN.equals(builder.getTokenType())) {\n        VariableInitializer.parse(builder);\n      }\n      if (ParserUtils.lookAhead(builder, mCOMMA) ||\n              ParserUtils.lookAhead(builder, ending) ||\n              ParserUtils.lookAhead(builder, mNLS, ending)) {\n        pdMarker.done(PARAMETER);\n        return PARAMETER;\n      } else {\n        pdMarker.rollbackTo();\n        return WRONGWAY;\n      }\n    } else {\n      // If has triple dots\n      if (hasDots) {\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        pdMarker.done(PARAMETER);\n        return PARAMETER;\n      } else {\n        pdMarker.rollbackTo();\n        return WRONGWAY;\n      }\n    }\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n//    if (!ParserUtils.lookAhead(builder, kFINAL) && !ParserUtils.lookAhead(builder, kDEF) && !ParserUtils.lookAhead(builder, mAT)) {\n//      builder.error(GroovyBundle.message(\"final.def.or.annotation.definition.expected\"));\n//      return WRONGWAY;\n//    }\n\n    PsiBuilder.Marker pdlMarker = builder.mark();\n\n    if (WRONGWAY.equals(ParameterDeclaration.parse(builder))) {\n      pdlMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    while (ParserUtils.getToken(builder, mCOMMA)) {\n      ParserUtils.getToken(builder, mNLS);\n\n      if (WRONGWAY.equals(ParameterDeclaration.parse(builder))) {\n        pdlMarker.rollbackTo();\n        return WRONGWAY;\n      }\n    }\n\n    pdlMarker.done(PARAMETERS_LIST);\n    return PARAMETERS_LIST;\n  }","id":94383,"modified_method":"/**\n   * @param builder Given builder\n   * @param ending  ending:  -> or ) in various cases\n   * @return PARAMETERS_LIST\n   */\n  public static GroovyElementType parse(PsiBuilder builder, IElementType ending) {\n    PsiBuilder.Marker pdlMarker = builder.mark();\n\n    // TODO Do something with modifiers in variable definitions, not parameters case\n\n    GroovyElementType result = ParameterDeclaration.parse(builder, ending);\n\n    if (!PARAMETER.equals(result)) {\n      pdlMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    while (!builder.eof() &&\n            ParserUtils.getToken(builder, mCOMMA) &&\n            result.equals(PARAMETER)) {\n      ParserUtils.getToken(builder, mNLS);\n      result = ParameterDeclaration.parse(builder, ending);\n    }\n\n    if ((ending.equals(mCLOSABLE_BLOCK_OP) &&\n            mCLOSABLE_BLOCK_OP.equals(builder.getTokenType()))\n            || ending.equals(mRPAREN)) {\n      pdlMarker.done(PARAMETERS_LIST);\n      return PARAMETERS_LIST;\n    } else {\n      pdlMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Property selector parsing\n   *\n   * @param builder\n   * @return\n   */\n  private static GroovyElementType namePartParse(PsiBuilder builder) {\n    ParserUtils.getToken(builder, mAT);\n    if (mIDENT.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    if (mSTRING_LITERAL.equals(builder.getTokenType()) ||\n            mGSTRING_LITERAL.equals(builder.getTokenType()) ||\n            mREGEX_LITERAL.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    if (mGSTRING_SINGLE_BEGIN.equals(builder.getTokenType())) {\n      StringConstructorExpression.parse(builder);\n      return PATH_PROPERTY;\n    }\n    if (mREGEX_BEGIN.equals(builder.getTokenType())) {\n      RegexConstructorExpression.parse(builder);\n      return PATH_PROPERTY;\n    }\n    if (TokenSets.KEYWORD_PROPERTY_NAMES.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    return WRONGWAY;\n  }","id":94384,"modified_method":"/**\n   * Property selector parsing\n   *\n   * @param builder\n   * @return\n   */\n  private static GroovyElementType namePartParse(PsiBuilder builder) {\n    ParserUtils.getToken(builder, mAT);\n    if (mIDENT.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    if (mSTRING_LITERAL.equals(builder.getTokenType()) ||\n            mGSTRING_LITERAL.equals(builder.getTokenType()) ||\n            mREGEX_LITERAL.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    if (mGSTRING_SINGLE_BEGIN.equals(builder.getTokenType())) {\n      StringConstructorExpression.parse(builder);\n      return PATH_PROPERTY;\n    }\n    if (mREGEX_BEGIN.equals(builder.getTokenType())) {\n      RegexConstructorExpression.parse(builder);\n      return PATH_PROPERTY;\n    }\n    if (mLCURLY.equals(builder.getTokenType())){\n      OpenOrClosableBlock.parseOpenBlock(builder);\n      return PATH_PROPERTY;\n    }\n    if (mLPAREN.equals(builder.getTokenType())){\n      PrimaryExpression.parenthesizedExprParse(builder);\n      return PATH_PROPERTY;\n    }\n    if (TokenSets.KEYWORD_PROPERTY_NAMES.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, PATH_PROPERTY);\n      return PATH_PROPERTY;\n    }\n    return WRONGWAY;\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    if (TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, BUILT_IN_TYPE);\n      return PRIMARY_EXPRESSION;\n    }\n    if (kTHIS.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (kSUPER.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mIDENT.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mGSTRING_SINGLE_BEGIN.equals(builder.getTokenType())) {\n      StringConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mREGEX_BEGIN.equals(builder.getTokenType())) {\n      RegexConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mLBRACK.equals(builder.getTokenType())) {\n      ListOrMapConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mLPAREN.equals(builder.getTokenType())) {\n      return parenthesizedExprParse(builder);\n    }\n    if (mLCURLY.equals(builder.getTokenType())) {\n      OpenOrClosableBlock.parseClosableBlock(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (TokenSets.CONSTANTS.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, LITERAL);\n      return PRIMARY_EXPRESSION;\n    }\n    if (TokenSets.WRONG_CONSTANTS.contains(builder.getTokenType())) {\n      PsiBuilder.Marker marker = builder.mark();\n      builder.advanceLexer();\n      builder.error(GroovyBundle.message(\"wrong.string\"));\n      marker.done(LITERAL);\n      return PRIMARY_EXPRESSION;\n    }\n\n    // TODO implement all cases!\n\n    return WRONGWAY;\n  }","id":94385,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    if (TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, BUILT_IN_TYPE);\n      return PRIMARY_EXPRESSION;\n    }\n    if (kTHIS.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (kSUPER.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (kNEW.equals(builder.getTokenType())) {\n      newExprParse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mIDENT.equals(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, REFERENCE_EXPRESSION);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mGSTRING_SINGLE_BEGIN.equals(builder.getTokenType())) {\n      StringConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mREGEX_BEGIN.equals(builder.getTokenType())) {\n      RegexConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mLBRACK.equals(builder.getTokenType())) {\n      ListOrMapConstructorExpression.parse(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (mLPAREN.equals(builder.getTokenType())) {\n      return parenthesizedExprParse(builder);\n    }\n    if (mLCURLY.equals(builder.getTokenType())) {\n      OpenOrClosableBlock.parseClosableBlock(builder);\n      return PRIMARY_EXPRESSION;\n    }\n    if (TokenSets.CONSTANTS.contains(builder.getTokenType())) {\n      ParserUtils.eatElement(builder, LITERAL);\n      return PRIMARY_EXPRESSION;\n    }\n    if (TokenSets.WRONG_CONSTANTS.contains(builder.getTokenType())) {\n      PsiBuilder.Marker marker = builder.mark();\n      builder.advanceLexer();\n      builder.error(GroovyBundle.message(\"wrong.string\"));\n      marker.done(LITERAL);\n      return PRIMARY_EXPRESSION;\n    }\n\n    // TODO implement all cases!\n\n    return WRONGWAY;\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n//    PsiBuilder.Marker vdMarker = builder.mark();\n\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n//      vdMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    if ((ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL)) && ParserUtils.getToken(builder, mLPAREN)) {\n\n      ParameterDeclarationList.parse(builder);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ParserUtils.waitNextRCurly(builder);\n\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      ThrowClause.parse(builder);\n\n      NlsWarn.parse(builder);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n      varMarker.drop();\n//      vdMarker.done(METHOD_DEFINITION);\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n    }\n\n    if (parseVariableDeclarator(builder)) {\n      while (ParserUtils.getToken(builder, mCOMMA)) {\n        ParserUtils.getToken(builder, mNLS);\n\n        parseVariableDeclarator(builder);\n      }\n\n//      vdMarker.done(VARIABLE_DEFINITION);\n      return VARIABLE_DEFINITION;\n    }\n\n\n    builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n//    vdMarker.rollbackTo();\n    return WRONGWAY;\n\n  }","id":94386,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n//    PsiBuilder.Marker vdMarker = builder.mark();\n\n    if (!(ParserUtils.lookAhead(builder, mIDENT) || ParserUtils.lookAhead(builder, mSTRING_LITERAL))) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n//      vdMarker.rollbackTo();\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    if ((ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL)) && ParserUtils.getToken(builder, mLPAREN)) {\n\n      ParameterDeclarationList.parse(builder, mRPAREN);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        ParserUtils.waitNextRCurly(builder);\n\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n\n      ThrowClause.parse(builder);\n\n      NlsWarn.parse(builder);\n\n      OpenOrClosableBlock.parseOpenBlock(builder);\n\n      varMarker.drop();\n//      vdMarker.done(METHOD_DEFINITION);\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n    }\n\n    if (parseVariableDeclarator(builder)) {\n      while (ParserUtils.getToken(builder, mCOMMA)) {\n        ParserUtils.getToken(builder, mNLS);\n\n        parseVariableDeclarator(builder);\n      }\n\n//      vdMarker.done(VARIABLE_DEFINITION);\n      return VARIABLE_DEFINITION;\n    }\n\n\n    builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n//    vdMarker.rollbackTo();\n    return WRONGWAY;\n\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IElementType parse(PsiBuilder builder) {\n    return WRONGWAY;\n  }","id":94387,"modified_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    if (!ParserUtils.getToken(builder,mASSIGN)) {\n      return WRONGWAY;\n    } else {\n      ParserUtils.getToken(builder, mNLS);\n      if (AssignmentExpression.parse(builder).equals(WRONGWAY)) {\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      }\n      return VARIABLE_INITIALIZER;\n    }\n  }","commit_id":"ab1365d977233e9eda7b6f43857d23fa227acb42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses CLOSABLE blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseClosableBlock(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    closableBlockParamsOpt(builder);\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(CLOSABLE_BLOCK);\n    return CLOSABLE_BLOCK;\n  }","id":94388,"modified_method":"/**\n   * Parses CLOSABLE blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseClosableBlock(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType res = closableBlockParamsOpt(builder);\n    if (WRONGWAY.equals(res)){\n      PsiBuilder.Marker listMarker = builder.mark();\n      listMarker.done(PARAMETERS_LIST);\n    }\n    parseBlockBody(builder);\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(CLOSABLE_BLOCK);\n    return CLOSABLE_BLOCK;\n  }","commit_id":"4f4c475316d96a075a0c648b1f615def480576c4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addDestination(String path, OsgiDestination destination) {\n        String p = getTrimmedPath(path);\n        destinations.putIfAbsent(p, destination);\n    }","id":94389,"modified_method":"public void addDestination(String path, AbstractHTTPDestination destination) {\n        String p = getTrimmedPath(path);\n        destinations.putIfAbsent(p, destination);\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"static String getTrimmedPath(String path) {\n        if (path == null) {\n            return \"/\";\n        }\n        final String lh = \"http://localhost/\";\n        final String lhs = \"https://localhost/\";\n\n        if (path.startsWith(lh)) {\n            path = path.substring(lh.length());\n        } else if (path.startsWith(lhs)) {\n            path = path.substring(lhs.length());\n        }\n        if (!path.startsWith(\"/\")) {\n            path = \"/\" + path;\n\n        }\n        return path;\n    }","id":94390,"modified_method":"/**\n     * Remove the transport protocol from the path and make \n     * it starts with /\n     * @param path \n     * @return trimmed path\n     */\n    static String getTrimmedPath(String path) {\n        if (path == null) {\n            return \"/\";\n        }\n        final String lh = \"http://localhost/\";\n        final String lhs = \"https://localhost/\";\n\n        if (path.startsWith(lh)) {\n            path = path.substring(lh.length());\n        } else if (path.startsWith(lhs)) {\n            path = path.substring(lhs.length());\n        }\n        if (!path.startsWith(\"/\")) {\n            path = \"/\" + path;\n\n        }\n        return path;\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public OsgiDestination getDestinationForPath(String path) {\n        // to use the url context match\n        return destinations.get(getTrimmedPath(path));\n    }","id":94391,"modified_method":"public AbstractHTTPDestination getDestinationForPath(String path) {\n        // to use the url context match\n        return destinations.get(getTrimmedPath(path));\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public Collection<OsgiDestination> getDestinations() {\n        return Collections.unmodifiableCollection(destinations.values());\n    }","id":94392,"modified_method":"public Collection<AbstractHTTPDestination> getDestinations() {\n        return Collections.unmodifiableCollection(destinations.values());\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"@Before\n    public void setUp() {\n        control = EasyMock.createNiceControl();\n        bus = control.createMock(Bus.class);\n        registry = control.createMock(OsgiDestinationRegistryIntf.class);\n        observer = control.createMock(MessageObserver.class);\n        endpoint = new EndpointInfo();\n        endpoint.setAddress(ADDRESS);\n    }","id":94393,"modified_method":"@Before\n    public void setUp() {\n        control = EasyMock.createNiceControl();\n        bus = control.createMock(Bus.class);\n        registry = control.createMock(OsgiDestinationRegistryIntf.class);\n        endpoint = new EndpointInfo();\n        endpoint.setAddress(ADDRESS);\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"@After\n    public void tearDown() {\n        bus = null;\n        registry = null;\n        observer = null;\n    }","id":94394,"modified_method":"@After\n    public void tearDown() {\n        bus = null;\n        registry = null;\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public void init(ServletConfig servletConfig) throws ServletException {\n        super.init(servletConfig);\n        controller = new OsgiServletController(this);\n    }","id":94395,"modified_method":"public void init(ServletConfig servletConfig) throws ServletException {\n        super.init(servletConfig);\n        controller = new OsgiServletController(this.getTransport(), this.getServletConfig());\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"private synchronized void updateDests(HttpServletRequest request) {\n        if (disableAddressUpdates) {\n            return;\n        }\n        String base = forcedBaseAddress == null ? getBaseURL(request) : forcedBaseAddress;\n\n               \n        Set<String> paths = servlet.getTransport().getDestinationsPaths();\n        for (String path : paths) {\n            OsgiDestination d2 = servlet.getTransport().getDestinationForPath(path);\n            String ad = d2.getEndpointInfo().getAddress();\n            if (ad.equals(path)) {\n                d2.getEndpointInfo().setAddress(base + path);\n                if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {\n                    d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);\n                }\n            }\n        }\n    }","id":94396,"modified_method":"private synchronized void updateDests(HttpServletRequest request) {\n        if (disableAddressUpdates) {\n            return;\n        }\n        String base = forcedBaseAddress == null ? getBaseURL(request) : forcedBaseAddress;\n\n               \n        Set<String> paths = destinationRegistry.getDestinationsPaths();\n        for (String path : paths) {\n            AbstractHTTPDestination d2 = destinationRegistry.getDestinationForPath(path);\n            String ad = d2.getEndpointInfo().getAddress();\n            if (ad.equals(path)) {\n                d2.getEndpointInfo().setAddress(base + path);\n                if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {\n                    d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);\n                }\n            }\n        }\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"private void writeSOAPEndpoints(HttpServletResponse response, Collection<OsgiDestination> destinations)\n        throws IOException {\n        response.getWriter().write(\"<span class=\\\"heading\\\">Available SOAP services:<\/span><br/>\");\n        response.getWriter().write(\"<table \" + (serviceListStyleSheet == null\n                ? \"cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" border=\\\"1\\\" width=\\\"100%\\\"\" : \"\") + \">\");\n        for (OsgiDestination sd : destinations) {\n            if (null != sd.getEndpointInfo().getName() \n                && null != sd.getEndpointInfo().getInterface()) {\n                response.getWriter().write(\"<tr><td>\");\n                response.getWriter().write(\"<span class=\\\"porttypename\\\">\"\n                        + sd.getEndpointInfo().getInterface().getName().getLocalPart()\n                        + \"<\/span>\");\n                response.getWriter().write(\"<ul>\");\n                for (OperationInfo oi : sd.getEndpointInfo().getInterface().getOperations()) {\n                    response.getWriter().write(\"<li>\" + oi.getName().getLocalPart() + \"<\/li>\");\n                }\n                response.getWriter().write(\"<\/ul>\");\n                response.getWriter().write(\"<\/td><td>\");\n                String address = sd.getEndpointInfo().getAddress();\n                response.getWriter().write(\"<span class=\\\"field\\\">Endpoint address:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" + address + \"<\/span>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">WSDL :<\/span> \"\n                        + \"<a href=\\\"\" + address + \"?wsdl\\\">\"\n                        + sd.getEndpointInfo().getService().getName() + \"<\/a>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">Target namespace:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" \n                        + sd.getEndpointInfo().getService().getTargetNamespace() + \"<\/span>\");\n                response.getWriter().write(\"<\/td><\/tr>\");\n            }    \n        }\n        response.getWriter().write(\"<\/table><br/><br/>\");\n    }","id":94397,"modified_method":"private void writeSOAPEndpoints(HttpServletResponse response, \n                                    Collection<AbstractHTTPDestination> destinations)\n        throws IOException {\n        response.getWriter().write(\"<span class=\\\"heading\\\">Available SOAP services:<\/span><br/>\");\n        response.getWriter().write(\"<table \" + (serviceListStyleSheet == null\n                ? \"cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" border=\\\"1\\\" width=\\\"100%\\\"\" : \"\") + \">\");\n        for (AbstractHTTPDestination sd : destinations) {\n            if (null != sd.getEndpointInfo().getName() \n                && null != sd.getEndpointInfo().getInterface()) {\n                response.getWriter().write(\"<tr><td>\");\n                response.getWriter().write(\"<span class=\\\"porttypename\\\">\"\n                        + sd.getEndpointInfo().getInterface().getName().getLocalPart()\n                        + \"<\/span>\");\n                response.getWriter().write(\"<ul>\");\n                for (OperationInfo oi : sd.getEndpointInfo().getInterface().getOperations()) {\n                    response.getWriter().write(\"<li>\" + oi.getName().getLocalPart() + \"<\/li>\");\n                }\n                response.getWriter().write(\"<\/ul>\");\n                response.getWriter().write(\"<\/td><td>\");\n                String address = sd.getEndpointInfo().getAddress();\n                response.getWriter().write(\"<span class=\\\"field\\\">Endpoint address:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" + address + \"<\/span>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">WSDL :<\/span> \"\n                        + \"<a href=\\\"\" + address + \"?wsdl\\\">\"\n                        + sd.getEndpointInfo().getService().getName() + \"<\/a>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">Target namespace:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" \n                        + sd.getEndpointInfo().getService().getTargetNamespace() + \"<\/span>\");\n                response.getWriter().write(\"<\/td><\/tr>\");\n            }    \n        }\n        response.getWriter().write(\"<\/table><br/><br/>\");\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"protected void generateServiceList(HttpServletRequest request, HttpServletResponse response)\n        throws IOException {        \n        response.setContentType(\"text/html; charset=UTF-8\");        \n        \n        response.getWriter().write(\"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \" \n                + \"\\\"http://www.w3.org/TR/html4/loose.dtd\\\">\");\n        response.getWriter().write(\"<HTML><HEAD>\");\n        if (serviceListStyleSheet != null) {\n            response.getWriter().write(\n                    \"<LINK type=\\\"text/css\\\" rel=\\\"stylesheet\\\" href=\\\"\" \n                    + request.getContextPath() + \"/\" + serviceListStyleSheet + \"\\\">\");\n        } else {\n            response.getWriter().write(\n                                       \"<LINK type=\\\"text/css\\\" rel=\\\"stylesheet\\\" href=\\\"\" \n                                       + request.getRequestURI() + \"/?stylesheet=1\\\">\");            \n        }\n        response.getWriter().write(\"<meta http-equiv=content-type content=\\\"text/html; charset=UTF-8\\\">\");\n        response.getWriter().write(\"<title>CXF - Service list<\/title>\");\n        response.getWriter().write(\"<\/head><body>\");\n        \n        Collection<OsgiDestination> destinations = servlet.getTransport().getDestinations();\n            \n        if (destinations.size() > 0) {\n            writeSOAPEndpoints(response, destinations);\n            writeRESTfulEndpoints(response, destinations);\n        } else {\n            response.getWriter().write(\"<span class=\\\"heading\\\">No services have been found.<\/span>\");\n        }\n        \n        response.getWriter().write(\"<\/body><\/html>\");\n    }","id":94398,"modified_method":"protected void generateServiceList(HttpServletRequest request, HttpServletResponse response)\n        throws IOException {        \n        response.setContentType(\"text/html; charset=UTF-8\");        \n        \n        response.getWriter().write(\"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \" \n                + \"\\\"http://www.w3.org/TR/html4/loose.dtd\\\">\");\n        response.getWriter().write(\"<HTML><HEAD>\");\n        if (serviceListStyleSheet != null) {\n            response.getWriter().write(\n                    \"<LINK type=\\\"text/css\\\" rel=\\\"stylesheet\\\" href=\\\"\" \n                    + request.getContextPath() + \"/\" + serviceListStyleSheet + \"\\\">\");\n        } else {\n            response.getWriter().write(\n                                       \"<LINK type=\\\"text/css\\\" rel=\\\"stylesheet\\\" href=\\\"\" \n                                       + request.getRequestURI() + \"/?stylesheet=1\\\">\");            \n        }\n        response.getWriter().write(\"<meta http-equiv=content-type content=\\\"text/html; charset=UTF-8\\\">\");\n        response.getWriter().write(\"<title>CXF - Service list<\/title>\");\n        response.getWriter().write(\"<\/head><body>\");\n        \n        Collection<AbstractHTTPDestination> destinations = destinationRegistry.getDestinations();\n            \n        if (destinations.size() > 0) {\n            writeSOAPEndpoints(response, destinations);\n            writeRESTfulEndpoints(response, destinations);\n        } else {\n            response.getWriter().write(\"<span class=\\\"heading\\\">No services have been found.<\/span>\");\n        }\n        \n        response.getWriter().write(\"<\/body><\/html>\");\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public OsgiServletController(OsgiServlet servlet) {\n        super(servlet.getServletConfig());\n        this.servlet = servlet;\n    }","id":94399,"modified_method":"public OsgiServletController(OsgiDestinationRegistryIntf destinationRegistry, ServletConfig config) {\n        super(config);\n        this.destinationRegistry = destinationRegistry;\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public void invoke(HttpServletRequest request, HttpServletResponse res) throws ServletException {\n        try {\n            EndpointInfo ei = new EndpointInfo();\n            String address = request.getPathInfo() == null ? \"\" : request.getPathInfo();\n\n            ei.setAddress(address);\n            OsgiDestination d = \n                (OsgiDestination)servlet.getTransport().getDestinationForPath(ei.getAddress());\n\n            if (d == null) {\n                if (!isHideServiceList && (request.getRequestURI().endsWith(serviceListRelativePath)\n                    || request.getRequestURI().endsWith(serviceListRelativePath + \"/\"))\n                    || StringUtils.isEmpty(request.getPathInfo())\n                    || \"/\".equals(request.getPathInfo())) {\n                    updateDests(request);\n                    generateServiceList(request, res);\n                } else {\n                    d = checkRestfulRequest(request);\n                    if (d == null || d.getMessageObserver() == null) {\n                        LOG.warning(\"Can't find the the request for \"\n                                    + request.getRequestURL() + \"'s Observer \");\n                        generateNotFound(request, res);\n                    }  else { // the request should be a restful service request\n                        updateDests(request);\n                        invokeDestination(request, res, d);\n                    }\n                }\n            } else {\n                ei = d.getEndpointInfo();\n                Bus bus = d.getBus();\n                ClassLoader orig = Thread.currentThread().getContextClassLoader();\n                try {\n                    ResourceManager manager = bus.getExtension(ResourceManager.class);\n                    if (manager != null) {\n                        ClassLoader loader = manager.resolveResource(\"\", ClassLoader.class);\n                        if (loader != null) {\n                            //need to set the context classloader to the loader of the bundle\n                            Thread.currentThread().setContextClassLoader(loader);\n                        }\n                    }\n                    \n                    if (null != request.getQueryString()\n                        && request.getQueryString().length() > 0\n                        && bus.getExtension(QueryHandlerRegistry.class) != null) {\n    \n                        String ctxUri = request.getPathInfo();\n                        String baseUri = request.getRequestURL().toString()\n                            + \"?\" + request.getQueryString();\n                        // update the EndPoint Address with request url\n                        if (\"GET\".equals(request.getMethod())) {\n                            updateDests(request);\n                        }\n    \n                        for (QueryHandler qh : bus.getExtension(QueryHandlerRegistry.class).getHandlers()) {\n                            if (qh.isRecognizedQuery(baseUri, ctxUri, ei)) {\n    \n                                res.setContentType(qh.getResponseContentType(baseUri, ctxUri));\n                                OutputStream out = res.getOutputStream();\n                                try {\n                                    qh.writeResponse(baseUri, ctxUri, ei, out);\n                                    out.flush();\n                                    return;\n                                } catch (Exception e) {\n                                    LOG.warning(qh.getClass().getName()\n                                        + \" Exception caught writing response: \"\n                                        + e.getMessage());\n                                    throw new ServletException(e);\n                                }\n                            }\n                        }\n                    } else if (\"/\".equals(address) || address.length() == 0) {\n                        updateDests(request);\n                    }\n                    invokeDestination(request, res, d);\n                } finally {\n                    Thread.currentThread().setContextClassLoader(orig);\n                }\n                \n            }\n        } catch (IOException e) {\n            throw new ServletException(e);\n        }\n    }","id":94400,"modified_method":"public void invoke(HttpServletRequest request, HttpServletResponse res) throws ServletException {\n        try {\n            String address = request.getPathInfo() == null ? \"\" : request.getPathInfo();\n            AbstractHTTPDestination d = destinationRegistry.getDestinationForPath(address);\n\n            if (d == null) {\n                if (!isHideServiceList && (request.getRequestURI().endsWith(serviceListRelativePath)\n                    || request.getRequestURI().endsWith(serviceListRelativePath + \"/\"))\n                    || StringUtils.isEmpty(request.getPathInfo())\n                    || \"/\".equals(request.getPathInfo())) {\n                    updateDests(request);\n                    generateServiceList(request, res);\n                } else {\n                    d = destinationRegistry.checkRestfulRequest(address);\n                    if (d == null || d.getMessageObserver() == null) {\n                        LOG.warning(\"Can't find the the request for \"\n                                    + request.getRequestURL() + \"'s Observer \");\n                        generateNotFound(request, res);\n                    }  else { // the request should be a restful service request\n                        updateDests(request);\n                        invokeDestination(request, res, d);\n                    }\n                }\n            } else {\n                EndpointInfo ei = d.getEndpointInfo();\n                Bus bus = ((OsgiDestination)d).getBus();\n                ClassLoader orig = Thread.currentThread().getContextClassLoader();\n                try {\n                    ResourceManager manager = bus.getExtension(ResourceManager.class);\n                    if (manager != null) {\n                        ClassLoader loader = manager.resolveResource(\"\", ClassLoader.class);\n                        if (loader != null) {\n                            //need to set the context classloader to the loader of the bundle\n                            Thread.currentThread().setContextClassLoader(loader);\n                        }\n                    }\n                    Iterable<QueryHandler> queryHandlers = bus.getExtension(QueryHandlerRegistry.class)\n                        .getHandlers();\n                    if (!StringUtils.isEmpty(request.getQueryString()) && queryHandlers != null) {\n                        \n                        // update the EndPoint Address with request url\n                        if (\"GET\".equals(request.getMethod())) {\n                            updateDests(request);\n                        }\n                        \n                        String ctxUri = request.getPathInfo();\n                        String baseUri = request.getRequestURL().toString()\n                            + \"?\" + request.getQueryString();\n\n                        QueryHandler selectedHandler = findQueryHandler(queryHandlers, ei, ctxUri, baseUri);\n                        \n                        if (selectedHandler != null) {\n                            respondUsingQueryHandler(selectedHandler, res, ei, ctxUri, baseUri);\n                            return;\n                        }\n                    } else if (\"/\".equals(address) || address.length() == 0) {\n                        updateDests(request);\n                    }\n                    invokeDestination(request, res, d);\n                } finally {\n                    Thread.currentThread().setContextClassLoader(orig);\n                }\n                \n            }\n        } catch (IOException e) {\n            throw new ServletException(e);\n        }\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"private void writeRESTfulEndpoints(HttpServletResponse response, Collection<OsgiDestination> destinations)\n        throws IOException {\n        \n        List<OsgiDestination> restfulDests = new ArrayList<OsgiDestination>();\n        for (OsgiDestination sd : destinations) {\n            // use some more reasonable check - though this one seems to be the only option at the moment\n            if (null == sd.getEndpointInfo().getInterface()) {\n                restfulDests.add(sd);\n            }\n        }\n        if (restfulDests.size() == 0) {\n            return;\n        }\n        \n        response.getWriter().write(\"<span class=\\\"heading\\\">Available RESTful services:<\/span><br/>\");\n        response.getWriter().write(\"<table \" + (serviceListStyleSheet == null\n                ? \"cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" border=\\\"1\\\" width=\\\"100%\\\"\" : \"\") + \">\");\n        for (OsgiDestination sd : destinations) {\n            if (null == sd.getEndpointInfo().getInterface()) {\n                response.getWriter().write(\"<tr><td>\");\n                String address = sd.getEndpointInfo().getAddress();\n                response.getWriter().write(\"<span class=\\\"field\\\">Endpoint address:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" + address + \"<\/span>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">WADL :<\/span> \"\n                        + \"<a href=\\\"\" + address + \"?_wadl&_type=xml\\\">\"\n                        + address + \"?_wadl&type=xml\" + \"<\/a>\");\n                response.getWriter().write(\"<\/td><\/tr>\");\n            }    \n        }\n        response.getWriter().write(\"<\/table>\");\n    }","id":94401,"modified_method":"private void writeRESTfulEndpoints(HttpServletResponse response, \n                                       Collection<AbstractHTTPDestination> destinations)\n        throws IOException {\n        \n        List<AbstractHTTPDestination> restfulDests = new ArrayList<AbstractHTTPDestination>();\n        for (AbstractHTTPDestination sd : destinations) {\n            // use some more reasonable check - though this one seems to be the only option at the moment\n            if (null == sd.getEndpointInfo().getInterface()) {\n                restfulDests.add(sd);\n            }\n        }\n        if (restfulDests.size() == 0) {\n            return;\n        }\n        \n        response.getWriter().write(\"<span class=\\\"heading\\\">Available RESTful services:<\/span><br/>\");\n        response.getWriter().write(\"<table \" + (serviceListStyleSheet == null\n                ? \"cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" border=\\\"1\\\" width=\\\"100%\\\"\" : \"\") + \">\");\n        for (AbstractHTTPDestination sd : destinations) {\n            if (null == sd.getEndpointInfo().getInterface()) {\n                response.getWriter().write(\"<tr><td>\");\n                String address = sd.getEndpointInfo().getAddress();\n                response.getWriter().write(\"<span class=\\\"field\\\">Endpoint address:<\/span> \"\n                        + \"<span class=\\\"value\\\">\" + address + \"<\/span>\");\n                response.getWriter().write(\"<br/><span class=\\\"field\\\">WADL :<\/span> \"\n                        + \"<a href=\\\"\" + address + \"?_wadl&_type=xml\\\">\"\n                        + address + \"?_wadl&type=xml\" + \"<\/a>\");\n                response.getWriter().write(\"<\/td><\/tr>\");\n            }    \n        }\n        response.getWriter().write(\"<\/table>\");\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"private OsgiServlet setUpServlet() { \n        OsgiServlet servlet = new OsgiServlet(registry) {\n            public ServletContext getServletContext() {\n                return context;\n            }\n            public ServletConfig getServletConfig() {\n                return config;\n            }\n            protected MessageImpl createInMessage() {\n                return message;\n            }\n            protected ExchangeImpl createExchange() {\n                return exchange;\n            }            \n        };\n        try {\n            servlet.init(config);\n        } catch (ServletException ex) {\n            // ignore\n        }\n        return servlet;\n    }","id":94402,"modified_method":"private OsgiServlet setUpServlet() { \n        OsgiServlet servlet = new OsgiServlet(registry);\n        try {\n            servlet.init(config);\n        } catch (ServletException ex) {\n            // ignore\n        }\n        return servlet;\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"private void setUpRequest(String requestURI,\n                              String path,\n                              int destinationCount) throws Exception {\n        EasyMock.expect(request.getRequestURI()).andReturn(requestURI).anyTimes();\n        StringBuffer url = new StringBuffer(ROOT + requestURI);\n        EasyMock.expect(request.getRequestURL()).andReturn(url).anyTimes();\n        EasyMock.expect(request.getQueryString()).andReturn(QUERY).anyTimes();\n        EasyMock.expect(destination.getEndpointInfo()).andReturn(endpoint).anyTimes();\n        EasyMock.expect(destination.getBus()).andReturn(bus).anyTimes();\n\n        EasyMock.expect(request.getPathInfo()).andReturn(path != null \n                                                ? path\n                                                : ADDRESS).anyTimes();\n        if (path != null) {\n            EasyMock.expect(registry.getDestinationForPath(path)).andReturn(destination);\n        }\n\n        if (destinationCount == -1) {\n            EasyMock.expect(registry.getDestinationsPaths()).andReturn(paths).anyTimes();\n        } else if (destinationCount >= 0) {\n            EasyMock.expect(registry.getDestinationsPaths()).andReturn(paths);\n            List<OsgiDestination> destinations =\n                new ArrayList<OsgiDestination>();\n            for (int i = 0; i < destinationCount; i++) {\n                destinations.add(destination);\n            }\n            EasyMock.expect(registry.getDestinations()).andReturn(destinations);\n        }\n    }","id":94403,"modified_method":"private void setUpRequest(String requestURI,\n                              String path,\n                              int destinationCount) throws Exception {\n        EasyMock.expect(request.getRequestURI()).andReturn(requestURI).anyTimes();\n        StringBuffer url = new StringBuffer(ROOT + requestURI);\n        EasyMock.expect(request.getRequestURL()).andReturn(url).anyTimes();\n        EasyMock.expect(request.getQueryString()).andReturn(QUERY).anyTimes();\n        EasyMock.expect(destination.getEndpointInfo()).andReturn(endpoint).anyTimes();\n        EasyMock.expect(destination.getBus()).andReturn(bus).anyTimes();\n\n        EasyMock.expect(request.getPathInfo()).andReturn(path != null \n                                                ? path\n                                                : ADDRESS).anyTimes();\n        if (path != null) {\n            EasyMock.expect(registry.getDestinationForPath(path)).andReturn(destination);\n        }\n\n        if (destinationCount == -1) {\n            EasyMock.expect(registry.getDestinationsPaths()).andReturn(paths).anyTimes();\n        } else if (destinationCount >= 0) {\n            EasyMock.expect(registry.getDestinationsPaths()).andReturn(paths);\n            List<AbstractHTTPDestination> destinations =\n                new ArrayList<AbstractHTTPDestination>();\n            for (int i = 0; i < destinationCount; i++) {\n                destinations.add(destination);\n            }\n            EasyMock.expect(registry.getDestinations()).andReturn(destinations);\n        }\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public Destination getDestination(EndpointInfo endpointInfo) throws IOException {\n        if (URI.create(endpointInfo.getAddress()).isAbsolute()) {\n            throw new IllegalStateException(\"Endpoint address should be a relative URI \"\n                                             + \"wrt to the servlet address (use '/xxx' for example)\");\n        }\n        OsgiDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n        if (d == null) {\n            String path = OsgiDestinationRegistry.getTrimmedPath(endpointInfo.getAddress());\n            d = new OsgiDestination(getBus(), endpointInfo, registry, path);\n            registry.addDestination(path, d);\n        }\n        return d;\n    }","id":94404,"modified_method":"public Destination getDestination(EndpointInfo endpointInfo) throws IOException {\n        if (URI.create(endpointInfo.getAddress()).isAbsolute()) {\n            throw new IllegalStateException(\"Endpoint address should be a relative URI \"\n                                             + \"wrt to the servlet address (use '/xxx' for example)\");\n        }\n        AbstractHTTPDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n        if (d == null) {\n            String path = OsgiDestinationRegistry.getTrimmedPath(endpointInfo.getAddress());\n            d = new OsgiDestination(getBus(), endpointInfo, registry, path);\n            registry.addDestination(path, d);\n        }\n        return d;\n    }","commit_id":"e2902f8f8f9bd86a4de4312932089fd8530b5bc6","url":"https://github.com/apache/cxf"},{"original_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","id":94405,"modified_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000).setIfDescr(\"ATM0\").setIfType(37);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000).setIfName(\"eth0\").setIfType(6);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","commit_id":"887c313465b608d1679039e5bb2c0b3808d82ea1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> tenInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                tenInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(tenInterfaces, matchedInterfaces);\n    }","id":94406,"modified_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> populatedInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                populatedInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(populatedInterfaces, matchedInterfaces);\n    }","commit_id":"887c313465b608d1679039e5bb2c0b3808d82ea1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.IfDescrSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~(?i:cisco)\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":94407,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"887c313465b608d1679039e5bb2c0b3808d82ea1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","id":94408,"modified_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000).setIfDescr(\"ATM0\").setIfType(37);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000).setIfName(\"eth0\").setIfType(6);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","commit_id":"e80ca91807134611f05f4a3fb97bb07df20cafef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> tenInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                tenInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(tenInterfaces, matchedInterfaces);\n    }","id":94409,"modified_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> populatedInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                populatedInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(populatedInterfaces, matchedInterfaces);\n    }","commit_id":"e80ca91807134611f05f4a3fb97bb07df20cafef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.IfDescrSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~(?i:cisco)\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":94410,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"e80ca91807134611f05f4a3fb97bb07df20cafef","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","id":94411,"modified_method":"public void populateDatabase() {\n        OnmsDistPoller distPoller = getDistPoller(\"localhost\", \"127.0.0.1\");\n        \n        OnmsCategory ac = getCategory(\"DEV_AC\");\n        OnmsCategory mid = getCategory(\"IMP_mid\");\n        OnmsCategory ops = getCategory(\"OPS_Online\");\n        \n        OnmsCategory catRouter = getCategory(\"Routers\");\n        OnmsCategory catSwitches = getCategory(\"Switches\");\n        OnmsCategory catServers = getCategory(\"Servers\");\n        getCategory(\"Production\");\n        getCategory(\"Test\");\n        getCategory(\"Development\");\n        \n        getServiceType(\"ICMP\");\n        getServiceType(\"SNMP\");\n        getServiceType(\"HTTP\");\n        \n        NetworkBuilder builder = new NetworkBuilder(distPoller);\n        \n        setNode1(builder.addNode(\"node1\").setForeignSource(\"imported:\").setForeignId(\"1\").getNode());\n        Assert.assertNotNull(\"newly built node 1 should not be null\", getNode1());\n        builder.addCategory(ac);\n        builder.addCategory(mid);\n        builder.addCategory(ops);\n        builder.addCategory(catRouter); \n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1).addSnmpInterface(\"192.168.1.1\", 1).setIfSpeed(10000000).setIfDescr(\"ATM0\").setIfType(37);\n        //getNodeDao().save(builder.getCurrentNode());\n        //getNodeDao().flush();\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1).addSnmpInterface(\"192.168.1.2\", 2).setIfSpeed(10000000).setIfName(\"eth0\").setIfType(6);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1).addSnmpInterface(\"192.168.1.3\", 3).setIfSpeed(10000000);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node2\").setForeignSource(\"imported:\").setForeignId(\"2\");\n        builder.addCategory(mid);\n        builder.addCategory(catServers);\n        builder.setBuilding(\"HQ\");\n        builder.addInterface(\"192.168.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node3\").setForeignSource(\"imported:\").setForeignId(\"3\");\n        builder.addCategory(ops);\n        builder.addInterface(\"192.168.3.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.3.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.3.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        builder.addNode(\"node4\").setForeignSource(\"imported:\").setForeignId(\"4\");\n        builder.addCategory(ac);\n        builder.addInterface(\"192.168.4.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"192.168.4.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"192.168.4.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n\n        //This node purposely doesn't have a foreignId style assetNumber\n        builder.addNode(\"alternate-node1\").getAssetRecord().setAssetNumber(\"5\");\n        builder.addCategory(ac);\n        builder.addCategory(catSwitches);\n        builder.addInterface(\"10.1.1.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.1.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.1.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        //This node purposely doesn't have a assetNumber and is used by a test to check the category\n        builder.addNode(\"alternate-node2\").getAssetRecord().setDisplayCategory(\"category1\");\n        builder.addCategory(ac);\n        builder.addInterface(\"10.1.2.1\").setIsManaged(\"M\").setIsSnmpPrimary(\"P\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"SNMP\"));\n        builder.addInterface(\"10.1.2.2\").setIsManaged(\"M\").setIsSnmpPrimary(\"S\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        builder.addService(getServiceType(\"HTTP\"));\n        builder.addInterface(\"10.1.2.3\").setIsManaged(\"M\").setIsSnmpPrimary(\"N\").setIpStatus(1);\n        builder.addService(getServiceType(\"ICMP\"));\n        getNodeDao().save(builder.getCurrentNode());\n        getNodeDao().flush();\n        \n        OnmsEvent event = new OnmsEvent();\n        event.setDistPoller(distPoller);\n        event.setEventUei(\"uei.opennms.org/test\");\n        event.setEventTime(new Date());\n        event.setEventSource(\"test\");\n        event.setEventCreateTime(new Date());\n        event.setEventSeverity(1);\n        event.setEventLog(\"Y\");\n        event.setEventDisplay(\"Y\");\n        getEventDao().save(event);\n        getEventDao().flush();\n       \n        OnmsMonitoredService svc = getMonitoredServiceDao().get(1, \"192.168.1.1\", \"SNMP\");\n        OnmsOutage resolved = new OnmsOutage(new Date(), new Date(), event, event, svc, null, null);\n        getOutageDao().save(resolved);\n        getOutageDao().flush();\n        \n        OnmsOutage unresolved = new OnmsOutage(new Date(), event, svc);\n        getOutageDao().save(unresolved);\n        getOutageDao().flush();\n        \n        OnmsCategory category = new OnmsCategory();\n        category.setName(\"some category\");\n        getCategoryDao().save(category);\n        getCategoryDao().flush();\n        \n        OnmsAlarm alarm = new OnmsAlarm();\n        alarm.setDistPoller(getDistPollerDao().load(\"localhost\"));\n        alarm.setUei(event.getEventUei());\n        alarm.setCounter(1);\n        alarm.setSeverity(OnmsSeverity.NORMAL);\n        alarm.setLastEvent(event);\n        getAlarmDao().save(alarm);\n        getAlarmDao().flush();\n    }","commit_id":"b6d862611ff85efceea67b85cbc76b88cf39858c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> tenInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                tenInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(tenInterfaces, matchedInterfaces);\n    }","id":94412,"modified_method":"@Test\n    @Transactional\n    public void testMatchingPolicy() {\n        OnmsIpInterface o = null;\n        \n        MatchingInterfacePolicy p = new MatchingInterfacePolicy();\n        p.setParameter(\"ipaddress\", \"~^10\\\\..*$\");\n\n        List<OnmsIpInterface> populatedInterfaces = new ArrayList<OnmsIpInterface>();\n        List<OnmsIpInterface> matchedInterfaces = new ArrayList<OnmsIpInterface>();\n        \n        for (OnmsIpInterface iface : m_interfaces) {\n            System.err.println(iface);\n            o = p.apply(iface);\n            if (o != null) {\n                matchedInterfaces.add(o);\n            }\n            if (iface.getIpAddress().startsWith(\"10.\")) {\n                populatedInterfaces.add(iface);\n            }\n        }\n        \n        assertEquals(populatedInterfaces, matchedInterfaces);\n    }","commit_id":"b6d862611ff85efceea67b85cbc76b88cf39858c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.IfDescrSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~(?i:cisco)\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":94413,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"nodelabel\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"b6d862611ff85efceea67b85cbc76b88cf39858c","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected List<String> getChildren(DocumentReference documentReference, int offset, int limit) throws Exception\n    {\n        List<String> children = new ArrayList<String>();\n\n        XWikiContext xcontext = this.xcontextProvider.get();\n        XWikiDocument document = xcontext.getWiki().getDocument(documentReference, xcontext);\n        String serializedDocRef = this.defaultEntityReferenceSerializer.serialize(documentReference);\n\n        if (offset == 0) {\n            if (hasTranslations(document, xcontext)) {\n                children.add(\"translations:\" + serializedDocRef);\n            }\n\n            if (hasAttachments(document)) {\n                children.add(\"attachments:\" + serializedDocRef);\n            }\n\n            if (hasClassProperties(document)) {\n                children.add(\"classProperties:\" + serializedDocRef);\n            }\n\n            if (hasObjects(document)) {\n                children.add(\"objects:\" + serializedDocRef);\n            }\n\n            if (showAddDocument(documentReference)) {\n                children.add(\"addDocument:\" + serializedDocRef);\n            }\n        }\n\n        children.addAll(serialize(getChildDocuments(documentReference, offset, limit)));\n\n        return children;\n    }","id":94414,"modified_method":"@Override\n    protected List<String> getChildren(DocumentReference documentReference, int offset, int limit) throws Exception\n    {\n        List<String> children = new ArrayList<String>();\n        String serializedDocRef = this.defaultEntityReferenceSerializer.serialize(documentReference);\n\n        if (offset == 0) {\n            for (Map.Entry<String, TreeNode> entry : this.nonLeafChildNodes.entrySet()) {\n                if (hasChild(entry.getKey(), entry.getValue(), documentReference)) {\n                    children.add(entry.getKey() + ':' + serializedDocRef);\n                }\n            }\n\n            if (showAddDocument(documentReference)) {\n                children.add(\"addDocument:\" + serializedDocRef);\n            }\n        }\n\n        children.addAll(serialize(getChildDocuments(documentReference, offset, limit)));\n\n        return children;\n    }","commit_id":"2d8f1bc5ec75811e0516408fc4732be701a61c6a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected int getChildCount(DocumentReference documentReference) throws Exception\n    {\n        int count = 0;\n        XWikiContext xcontext = this.xcontextProvider.get();\n        XWikiDocument document = xcontext.getWiki().getDocument(documentReference, xcontext);\n\n        if (hasTranslations(document, xcontext)) {\n            count++;\n        }\n\n        if (hasAttachments(document)) {\n            count++;\n        }\n\n        if (hasClassProperties(document)) {\n            count++;\n        }\n\n        if (hasObjects(document)) {\n            count++;\n        }\n\n        if (showAddDocument(documentReference)) {\n            count++;\n        }\n\n        return count + getChildDocumentsCount(documentReference);\n    }","id":94415,"modified_method":"@Override\n    protected int getChildCount(DocumentReference documentReference) throws Exception\n    {\n        int count = 0;\n        for (Map.Entry<String, TreeNode> entry : this.nonLeafChildNodes.entrySet()) {\n            if (hasChild(entry.getKey(), entry.getValue(), documentReference)) {\n                count++;\n            }\n        }\n\n        if (showAddDocument(documentReference)) {\n            count++;\n        }\n\n        return count + getChildDocumentsCount(documentReference);\n    }","commit_id":"2d8f1bc5ec75811e0516408fc4732be701a61c6a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param roleHint the {@link Tree} role hint\n     * @return the {@link Tree} component implementation with the specified hint\n     */\n    public Tree get(String roleHint)\n    {\n        try {\n            return this.contextComponentManagerProvider.get().getInstance(Tree.class, roleHint);\n        } catch (ComponentLookupException e) {\n            return null;\n        }\n    }","id":94416,"modified_method":"/**\n     * @param roleHint the {@link Tree} role hint\n     * @return the {@link Tree} component implementation with the specified hint\n     */\n    public Tree get(String roleHint)\n    {\n        ComponentManager contextComponentManager = this.contextComponentManagerProvider.get();\n        if (contextComponentManager.hasComponent(Tree.class, roleHint)) {\n            try {\n                return contextComponentManager.getInstance(Tree.class, roleHint);\n            } catch (ComponentLookupException e) {\n                this.logger.warn(\"Failed to load the specified tree component. Root cause is [{}]\",\n                    ExceptionUtils.getRootCauseMessage(e));\n            }\n        }\n        return null;\n    }","commit_id":"2d8f1bc5ec75811e0516408fc4732be701a61c6a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void use(String bundleType, String bundleId) throws TranslationBundleDoesNotExistsException,\n        TranslationBundleFactoryDoesNotExistsException\n    {\n        TranslationBundleFactory bundleFactory;\n        try {\n            bundleFactory = this.componentManager.get().getInstance(TranslationBundleFactory.class, bundleType);\n        } catch (ComponentLookupException e) {\n            throw new TranslationBundleFactoryDoesNotExistsException(String.format(\n                \"Failed to lookup BundleFactory for type [%s]\", bundleType), e);\n        }\n\n        TranslationBundle bundle = bundleFactory.getBundle(bundleId);\n\n        this.bundleContext.addBundle(bundle);\n    }","id":94417,"modified_method":"@Override\n    public void use(String bundleType, String bundleId) throws TranslationBundleDoesNotExistsException,\n        TranslationBundleFactoryDoesNotExistsException\n    {\n        if (this.componentManagerProvider.get().hasComponent(TranslationBundle.class, bundleType + ':' + bundleId)) {\n            try {\n                this.bundleContext.addBundle(this.componentManagerProvider.get().<TranslationBundle> getInstance(\n                    TranslationBundle.class, bundleType + ':' + bundleId));\n\n                return;\n            } catch (ComponentLookupException e) {\n                this.logger.error(\"Failed to lookup translation bundle with hint [{}] and type [{}].\", bundleId,\n                    bundleType, e);\n            }\n        }\n\n        TranslationBundleFactory bundleFactory;\n        try {\n            bundleFactory = this.componentManagerProvider.get().getInstance(TranslationBundleFactory.class, bundleType);\n        } catch (ComponentLookupException e) {\n            throw new TranslationBundleFactoryDoesNotExistsException(String.format(\n                \"Failed to lookup BundleFactory for type [%s]\", bundleType), e);\n        }\n\n        TranslationBundle bundle = bundleFactory.getBundle(bundleId);\n\n        this.bundleContext.addBundle(bundle);\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private DefaultDocumentTranslationBundle createDocumentBundle(XWikiDocument document)\n        throws TranslationBundleDoesNotExistsException\n    {\n        BaseObject translationObject = document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE);\n\n        if (translationObject == null) {\n            throw new TranslationBundleDoesNotExistsException(String.format(\"[%s] is not a translation document\",\n                document));\n        }\n\n        DefaultDocumentTranslationBundle documentBundle;\n        try {\n            documentBundle =\n                new DefaultDocumentTranslationBundle(document.getDocumentReference(), this.componentManager,\n                    this.translationParser);\n        } catch (ComponentLookupException e) {\n            throw new TranslationBundleDoesNotExistsException(\"Failed to create document bundle\", e);\n        }\n\n        return documentBundle;\n    }","id":94418,"modified_method":"private DefaultDocumentTranslationBundle createDocumentBundle(XWikiDocument document)\n        throws TranslationBundleDoesNotExistsException\n    {\n        BaseObject translationObject = document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE);\n\n        if (translationObject == null) {\n            throw new TranslationBundleDoesNotExistsException(String.format(\"[%s] is not a translation document\",\n                document));\n        }\n\n        DefaultDocumentTranslationBundle documentBundle;\n        try {\n            documentBundle =\n                new DefaultDocumentTranslationBundle(document.getDocumentReference(),\n                    this.componentManagerProvider.get(), this.translationParser);\n        } catch (ComponentLookupException e) {\n            throw new TranslationBundleDoesNotExistsException(\"Failed to create document bundle\", e);\n        }\n\n        return documentBundle;\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param document the translation document\n     * @throws TranslationBundleDoesNotExistsException when no translation bundle could be created from the provided\n     *             document\n     * @throws ComponentRepositoryException when the actual registration of the document bundle failed\n     * @throws AccessDeniedException when the document author does not have enough right to register the translation\n     *             bundle\n     */\n    private void registerTranslationBundle(XWikiDocument document) throws TranslationBundleDoesNotExistsException,\n        ComponentRepositoryException, AccessDeniedException\n    {\n        Scope scope = getScope(document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE));\n\n        if (scope != null) {\n            checkRegistrationAuthorization(document, scope);\n\n            DefaultDocumentTranslationBundle bundle = createDocumentBundle(document);\n\n            ComponentDescriptor<TranslationBundle> descriptor =\n                createComponentDescriptor(document.getDocumentReference());\n\n            getComponentManager(document, scope, true).registerComponent(descriptor, bundle);\n        }\n    }","id":94419,"modified_method":"/**\n     * @param document the translation document\n     * @throws TranslationBundleDoesNotExistsException when no translation bundle could be created from the provided\n     *             document\n     * @throws ComponentRepositoryException when the actual registration of the document bundle failed\n     * @throws AccessDeniedException when the document author does not have enough right to register the translation\n     *             bundle\n     */\n    private void registerTranslationBundle(XWikiDocument document) throws TranslationBundleDoesNotExistsException,\n        ComponentRepositoryException, AccessDeniedException\n    {\n        Scope scope = getScope(document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE));\n\n        if (scope != null && scope != Scope.ON_DEMAND) {\n            checkRegistrationAuthorization(document, scope);\n\n            DefaultDocumentTranslationBundle bundle = createDocumentBundle(document);\n\n            ComponentDescriptor<TranslationBundle> descriptor =\n                createComponentDescriptor(document.getDocumentReference());\n\n            getComponentManager(document, scope, true).registerComponent(descriptor, bundle);\n        }\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public TranslationBundle getBundle(String bundleId) throws TranslationBundleDoesNotExistsException\n    {\n        try {\n            return this.componentManager.getInstance(TranslationBundle.class,\n                AbstractDocumentTranslationBundle.ID_PREFIX + bundleId);\n        } catch (ComponentLookupException e) {\n            this.logger.debug(\"Failed to lookup component [{}] with hint [{}].\", TranslationBundle.class, bundleId, e);\n        }\n\n        if (bundleId.startsWith(AbstractDocumentTranslationBundle.ID_PREFIX)) {\n            String referenceString = bundleId.substring(AbstractDocumentTranslationBundle.ID_PREFIX.length());\n\n            return getDocumentBundle(this.currentResolver.resolve(referenceString));\n        }\n\n        throw new TranslationBundleDoesNotExistsException(String.format(\n            \"Unsupported bundle identifier [%s]. Should start with [%s]\", bundleId,\n            AbstractDocumentTranslationBundle.ID_PREFIX));\n    }","id":94420,"modified_method":"@Override\n    public TranslationBundle getBundle(String bundleId) throws TranslationBundleDoesNotExistsException\n    {\n        String id = AbstractDocumentTranslationBundle.ID_PREFIX + bundleId;\n\n        if (this.componentManagerProvider.get().hasComponent(TranslationBundle.class, id)) {\n            try {\n                return this.componentManagerProvider.get().getInstance(TranslationBundle.class, id);\n            } catch (ComponentLookupException e) {\n                this.logger.debug(\"Failed to lookup component [{}] with hint [{}].\", TranslationBundle.class, bundleId,\n                    e);\n            }\n        }\n\n        return getDocumentBundle(this.currentResolver.resolve(bundleId));\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param document the translation document\n     */\n    private void unregisterTranslationBundle(XWikiDocument document)\n    {\n        Scope scope = getScope(document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE));\n\n        if (scope != null) {\n            ComponentDescriptor<TranslationBundle> descriptor =\n                createComponentDescriptor(document.getDocumentReference());\n\n            getComponentManager(document, scope, true).unregisterComponent(descriptor);\n        }\n    }","id":94421,"modified_method":"/**\n     * @param document the translation document\n     */\n    private void unregisterTranslationBundle(XWikiDocument document)\n    {\n        Scope scope = getScope(document.getXObject(TranslationDocumentModel.TRANSLATIONCLASS_REFERENCE));\n\n        // Unregister component\n        if (scope != null && scope != Scope.ON_DEMAND) {\n            ComponentDescriptor<TranslationBundle> descriptor =\n                createComponentDescriptor(document.getDocumentReference());\n\n            getComponentManager(document, scope, true).unregisterComponent(descriptor);\n        }\n\n        // Remove from cache\n        this.bundlesCache.remove(this.uidSerializer.serialize(document.getDocumentReference()));\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public boolean updateDocument(XWikiDocument document)\n    {\n        boolean needsUpdate = false;\n\n        BaseClass bclass = document.getXClass();\n\n        needsUpdate |=\n            bclass\n                .addStaticListField(TranslationDocumentModel.TRANSLATIONCLASS_PROP_SCOPE, \"Scope\", \"GLOBAL|WIKI|USER\");\n\n        needsUpdate |= setClassDocumentFields(document, \"Translation Document Class\");\n\n        return needsUpdate;\n    }","id":94422,"modified_method":"@Override\n    public boolean updateDocument(XWikiDocument document)\n    {\n        boolean needsUpdate = false;\n\n        BaseClass bclass = document.getXClass();\n\n        needsUpdate |=\n            bclass.addStaticListField(TranslationDocumentModel.TRANSLATIONCLASS_PROP_SCOPE, \"Scope\",\n                \"GLOBAL|WIKI|USER|ON_DEMAND\");\n\n        needsUpdate |= setClassDocumentFields(document, \"Translation Document Class\");\n\n        return needsUpdate;\n    }","commit_id":"cc44a90e02be31fcd8eb0880f9ca2e03bbc9e706","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Retrieves all the {@link UIExtension}s for a given Extension Point.\n     *\n     * @param extensionPointId The ID of the Extension Point to retrieve the {@link UIExtension}s for\n     * @return the list of {@link UIExtension} for the given Extension Point\n     */\n    public List<UIExtension> getExtensions(String extensionPointId)\n    {\n        UIExtensionManager manager;\n\n        try {\n            // Look for a specific UI extension manager for the given extension point\n            manager = contextComponentManagerProvider.get().getInstance(UIExtensionManager.class, extensionPointId);\n        } catch (ComponentLookupException e) {\n            manager = uiExtensionManager;\n        }\n\n        return manager.get(extensionPointId);\n    }","id":94423,"modified_method":"/**\n     * Retrieves all the {@link UIExtension}s for a given Extension Point.\n     *\n     * @param extensionPointId The ID of the Extension Point to retrieve the {@link UIExtension}s for\n     * @return the list of {@link UIExtension} for the given Extension Point\n     */\n    public List<UIExtension> getExtensions(String extensionPointId)\n    {\n        UIExtensionManager manager = this.uiExtensionManager;\n\n        ComponentManager componentManager = contextComponentManagerProvider.get();\n        if (componentManager.hasComponent(UIExtensionManager.class, extensionPointId)) {\n            try {\n                // Look for a specific UI extension manager for the given extension point\n                manager = componentManager.getInstance(UIExtensionManager.class, extensionPointId);\n            } catch (ComponentLookupException e) {\n                this.logger.error(\"Failed to initialize UI extension manager\", e);\n            }\n        }\n\n        return manager.get(extensionPointId);\n    }","commit_id":"a6c096df51f0a1372178c8c260a101c2ec9e1739","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testRenegotiateWorks() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        if (!TesterSupport.isRenegotiationSupported(tomcat)) {\n            return;\n        }\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        TesterSupport.initSsl(tomcat);\n\n        tomcat.start();\n\n        SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n        sslCtx.init(null, TesterSupport.getTrustManagers(), null);\n        SSLSocketFactory socketFactory = sslCtx.getSocketFactory();\n        SSLSocket socket = (SSLSocket) socketFactory.createSocket(\"localhost\",\n                getPort());\n\n        OutputStream os = socket.getOutputStream();\n\n        os.write(\"GET /examples/servlets/servlet/HelloWorldExample HTTP/1.1\\n\".getBytes());\n        os.flush();\n\n        socket.startHandshake();\n\n        try {\n            os.write(\"Host: localhost\\n\\n\".getBytes());\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            fail(\"Re-negotiation failed\");\n        }\n\n        InputStream is = socket.getInputStream();\n        Reader r = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(r);\n        String line = br.readLine();\n        while (line != null) {\n            // For debugging System.out.println(line);\n            // Linux clients see a Connection Reset in some circumstances and a\n            // clean close in others.\n            try {\n                line = br.readLine();\n            } catch (IOException ioe) {\n                line = null;\n            }\n        }\n    }","id":94424,"modified_method":"@Test\n    public void testRenegotiateWorks() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        if (!TesterSupport.isRenegotiationSupported(tomcat)) {\n            return;\n        }\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        Context ctx = tomcat.addWebapp(null, \"/examples\",\n                appDir.getAbsolutePath());\n        ctx.addApplicationListener(WsListener.class.getName());\n\n        TesterSupport.initSsl(tomcat);\n\n        tomcat.start();\n\n        SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n        sslCtx.init(null, TesterSupport.getTrustManagers(), null);\n        SSLSocketFactory socketFactory = sslCtx.getSocketFactory();\n        SSLSocket socket = (SSLSocket) socketFactory.createSocket(\"localhost\",\n                getPort());\n\n        OutputStream os = socket.getOutputStream();\n\n        os.write(\"GET /examples/servlets/servlet/HelloWorldExample HTTP/1.1\\n\".getBytes());\n        os.flush();\n\n        socket.startHandshake();\n\n        try {\n            os.write(\"Host: localhost\\n\\n\".getBytes());\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            fail(\"Re-negotiation failed\");\n        }\n\n        InputStream is = socket.getInputStream();\n        Reader r = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(r);\n        String line = br.readLine();\n        while (line != null) {\n            // For debugging System.out.println(line);\n            // Linux clients see a Connection Reset in some circumstances and a\n            // clean close in others.\n            try {\n                line = br.readLine();\n            } catch (IOException ioe) {\n                line = null;\n            }\n        }\n    }","commit_id":"a49fc6c60b00c70e7822ae7489c016bda6cd8ec1","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testCustomSslImplementation() throws Exception {\n\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n        Connector connector = tomcat.getConnector();\n        if (connector.getProtocolHandlerClassName().contains(\"Apr\")) {\n            // This test is only for JSSE based SSL connectors\n            return;\n        }\n\n        connector.setProperty(\"sslImplementationName\",\n                \"org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl\");\n        connector.setProperty(TesterBug50640SslImpl.PROPERTY_NAME,\n                TesterBug50640SslImpl.PROPERTY_VALUE);\n\n        connector.setProperty(\"sslProtocol\", \"tls\");\n\n        File keystoreFile =\n            new File(\"test/org/apache/tomcat/util/net/localhost.jks\");\n        connector.setAttribute(\n                \"keystoreFile\", keystoreFile.getAbsolutePath());\n\n        connector.setSecure(true);\n        connector.setProperty(\"SSLEnabled\", \"true\");\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","id":94425,"modified_method":"@Test\n    public void testCustomSslImplementation() throws Exception {\n\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n        Connector connector = tomcat.getConnector();\n        if (connector.getProtocolHandlerClassName().contains(\"Apr\")) {\n            // This test is only for JSSE based SSL connectors\n            return;\n        }\n\n        connector.setProperty(\"sslImplementationName\",\n                \"org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl\");\n        connector.setProperty(TesterBug50640SslImpl.PROPERTY_NAME,\n                TesterBug50640SslImpl.PROPERTY_VALUE);\n\n        connector.setProperty(\"sslProtocol\", \"tls\");\n\n        File keystoreFile =\n            new File(\"test/org/apache/tomcat/util/net/localhost.jks\");\n        connector.setAttribute(\n                \"keystoreFile\", keystoreFile.getAbsolutePath());\n\n        connector.setSecure(true);\n        connector.setProperty(\"SSLEnabled\", \"true\");\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        Context ctxt  = tomcat.addWebapp(\n                null, \"/examples\", appDir.getAbsolutePath());\n        ctxt.addApplicationListener(WsListener.class.getName());\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"private FormAuthClient() throws Exception {\n            Tomcat tomcat = getTomcatInstance();\n            File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n            Context ctx = tomcat.addWebapp(null, \"/examples\",\n                    appDir.getAbsolutePath());\n\n            MapRealm realm = new MapRealm();\n            realm.addUser(\"tomcat\", \"tomcat\");\n            realm.addUserRole(\"tomcat\", \"tomcat\");\n            ctx.setRealm(realm);\n\n            tomcat.start();\n\n            // Port only known after Tomcat starts\n            setPort(getPort());\n        }","id":94426,"modified_method":"private FormAuthClient() throws Exception {\n            Tomcat tomcat = getTomcatInstance();\n            File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n            Context ctx = tomcat.addWebapp(null, \"/examples\",\n                    appDir.getAbsolutePath());\n            ctx.addApplicationListener(WsListener.class.getName());\n\n            MapRealm realm = new MapRealm();\n            realm.addUser(\"tomcat\", \"tomcat\");\n            realm.addUserRole(\"tomcat\", \"tomcat\");\n            ctx.setRealm(realm);\n\n            tomcat.start();\n\n            // Port only known after Tomcat starts\n            setPort(getPort());\n        }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testSimpleSsl() throws Exception {\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        TesterSupport.initSsl(tomcat);\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","id":94427,"modified_method":"@Test\n    public void testSimpleSsl() throws Exception {\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        org.apache.catalina.Context ctxt  = tomcat.addWebapp(\n                null, \"/examples\", appDir.getAbsolutePath());\n        ctxt.addApplicationListener(WsListener.class.getName());\n\n        TesterSupport.initSsl(tomcat);\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testKeyPass() throws Exception {\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        TesterSupport.initSsl(tomcat, \"localhost-copy1.jks\", \"changeit\",\n                \"tomcatpass\");\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","id":94428,"modified_method":"@Test\n    public void testKeyPass() throws Exception {\n        TesterSupport.configureClientSsl();\n\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        org.apache.catalina.Context ctxt  = tomcat.addWebapp(\n                null, \"/examples\", appDir.getAbsolutePath());\n        ctxt.addApplicationListener(WsListener.class.getName());\n\n        TesterSupport.initSsl(tomcat, \"localhost-copy1.jks\", \"changeit\",\n                \"tomcatpass\");\n\n        tomcat.start();\n        ByteChunk res = getUrl(\"https://localhost:\" + getPort() +\n            \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Test for https://issues.apache.org/bugzilla/show_bug.cgi?id=47866\n     */\n    @Test\n    public void testGetResource() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        String contextPath = \"/examples\";\n\n        File appDir = new File(getBuildDirectory(), \"webapps\" + contextPath);\n        // app dir is relative to server home\n        org.apache.catalina.Context ctx =\n            tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        Tomcat.addServlet(ctx, \"testGetResource\", new GetResource());\n        ctx.addServletMapping(\"/testGetResource\", \"testGetResource\");\n\n        tomcat.start();\n\n        ByteChunk res = new ByteChunk();\n\n        int rc =getUrl(\"http://localhost:\" + getPort() + contextPath +\n                \"/testGetResource\", res, null);\n        assertEquals(HttpServletResponse.SC_OK, rc);\n        assertTrue(res.toString().contains(\"<?xml version=\\\"1.0\\\" \"));\n    }","id":94429,"modified_method":"/**\n     * Test for https://issues.apache.org/bugzilla/show_bug.cgi?id=47866\n     */\n    @Test\n    public void testGetResource() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        String contextPath = \"/examples\";\n\n        File appDir = new File(getBuildDirectory(), \"webapps\" + contextPath);\n        // app dir is relative to server home\n        org.apache.catalina.Context ctx =\n            tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n        ctx.addApplicationListener(WsListener.class.getName());\n\n        Tomcat.addServlet(ctx, \"testGetResource\", new GetResource());\n        ctx.addServletMapping(\"/testGetResource\", \"testGetResource\");\n\n        tomcat.start();\n\n        ByteChunk res = new ByteChunk();\n\n        int rc =getUrl(\"http://localhost:\" + getPort() + contextPath +\n                \"/testGetResource\", res, null);\n        assertEquals(HttpServletResponse.SC_OK, rc);\n        assertTrue(res.toString().contains(\"<?xml version=\\\"1.0\\\" \"));\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testJsps() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        tomcat.start();\n\n        ByteChunk res = getUrl(\"http://localhost:\" + getPort() +\n                \"/examples/jsp/jsp2/el/basic-arithmetic.jsp\");\n        assertTrue(res.toString().indexOf(\"<td>${(1==2) ? 3 : 4}<\/td>\") > 0);\n    }","id":94430,"modified_method":"@Test\n    public void testJsps() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        org.apache.catalina.Context ctxt  = tomcat.addWebapp(\n                null, \"/examples\", appDir.getAbsolutePath());\n        ctxt.addApplicationListener(WsListener.class.getName());\n\n        tomcat.start();\n\n        ByteChunk res = getUrl(\"http://localhost:\" + getPort() +\n                \"/examples/jsp/jsp2/el/basic-arithmetic.jsp\");\n        assertTrue(res.toString().indexOf(\"<td>${(1==2) ? 3 : 4}<\/td>\") > 0);\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testSingleWebapp() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n\n        tomcat.start();\n\n        ByteChunk res = getUrl(\"http://localhost:\" + getPort() +\n                \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","id":94431,"modified_method":"@Test\n    public void testSingleWebapp() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n        // app dir is relative to server home\n        org.apache.catalina.Context ctxt  = tomcat.addWebapp(\n                null, \"/examples\", appDir.getAbsolutePath());\n        ctxt.addApplicationListener(WsListener.class.getName());\n        tomcat.start();\n\n        ByteChunk res = getUrl(\"http://localhost:\" + getPort() +\n                \"/examples/servlets/servlet/HelloWorldExample\");\n        assertTrue(res.toString().indexOf(\"<h1>Hello World!<\/h1>\") > 0);\n    }","commit_id":"ee88f0dafeffeead6f59b099d916bfcd0c8c4a3d","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n\t * Set whether to operate on a Hibernate-managed Session instead of a\n\t * Spring-managed Session, that is, whether to obtain the Session through\n\t * Hibernate's {@link org.hibernate.SessionFactory#getCurrentSession()}\n\t * instead of {@link org.hibernate.SessionFactory#openSession()} (with a Spring\n\t * {@link org.springframework.transaction.support.TransactionSynchronizationManager}\n\t * check preceding it).\n\t * <p>Default is \"false\", i.e. using a Spring-managed Session: taking the current\n\t * thread-bound Session if available (e.g. in an Open-Session-in-View scenario),\n\t * creating a new Session for the current transaction otherwise.\n\t * <p>Switch this flag to \"true\" in order to enforce use of a Hibernate-managed Session.\n\t * Note that this requires {@link org.hibernate.SessionFactory#getCurrentSession()}\n\t * to always return a proper Session when called for a Spring-managed transaction;\n\t * transaction begin will fail if the {@code getCurrentSession()} call fails.\n\t * <p>This mode will typically be used in combination with a custom Hibernate\n\t * {@link org.hibernate.context.CurrentSessionContext} implementation that stores\n\t * Sessions in a place other than Spring's TransactionSynchronizationManager.\n\t * It may also be used in combination with Spring's Open-Session-in-View support\n\t * (using Spring's default {@link SpringSessionContext}), in which case it subtly\n\t * differs from the Spring-managed Session mode: The pre-bound Session will <i>not<\/i>\n\t * receive a {@code clear()} call (on rollback) or a {@code disconnect()}\n\t * call (on transaction completion) in such a scenario; this is rather left up\n\t * to a custom CurrentSessionContext implementation (if desired).\n\t */\n\tpublic void setHibernateManagedSession(boolean hibernateManagedSession) {\n\t\tthis.hibernateManagedSession = hibernateManagedSession;\n\t}","id":94432,"modified_method":"/**\n\t * Set whether to operate on a Hibernate-managed Session instead of a\n\t * Spring-managed Session, that is, whether to obtain the Session through\n\t * Hibernate's {@link org.hibernate.SessionFactory#getCurrentSession()}\n\t * instead of {@link org.hibernate.SessionFactory#openSession()} (with a Spring\n\t * {@link org.springframework.transaction.support.TransactionSynchronizationManager}\n\t * check preceding it).\n\t * <p>Default is \"false\", i.e. using a Spring-managed Session: taking the current\n\t * thread-bound Session if available (e.g. in an Open-Session-in-View scenario),\n\t * creating a new Session for the current transaction otherwise.\n\t * <p>Switch this flag to \"true\" in order to enforce use of a Hibernate-managed Session.\n\t * Note that this requires {@link org.hibernate.SessionFactory#getCurrentSession()}\n\t * to always return a proper Session when called for a Spring-managed transaction;\n\t * transaction begin will fail if the {@code getCurrentSession()} call fails.\n\t * <p>This mode will typically be used in combination with a custom Hibernate\n\t * {@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores\n\t * Sessions in a place other than Spring's TransactionSynchronizationManager.\n\t * It may also be used in combination with Spring's Open-Session-in-View support\n\t * (using Spring's default {@link SpringSessionContext}), in which case it subtly\n\t * differs from the Spring-managed Session mode: The pre-bound Session will <i>not<\/i>\n\t * receive a {@code clear()} call (on rollback) or a {@code disconnect()}\n\t * call (on transaction completion) in such a scenario; this is rather left up\n\t * to a custom CurrentSessionContext implementation (if desired).\n\t */\n\tpublic void setHibernateManagedSession(boolean hibernateManagedSession) {\n\t\tthis.hibernateManagedSession = hibernateManagedSession;\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void afterPropertiesSet() {\n\t\tif (getSessionFactory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'sessionFactory' is required\");\n\t\t}\n\n\t\t// Check for SessionFactory's DataSource.\n\t\tif (this.autodetectDataSource && getDataSource() == null) {\n\t\t\tDataSource sfds = SessionFactoryUtils.getDataSource(getSessionFactory());\n\t\t\tif (sfds != null) {\n\t\t\t\t// Use the SessionFactory's DataSource for exposing transactions to JDBC code.\n\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\tlogger.info(\"Using DataSource [\" + sfds +\n\t\t\t\t\t\t\t\"] of Hibernate SessionFactory for HibernateTransactionManager\");\n\t\t\t\t}\n\t\t\t\tsetDataSource(sfds);\n\t\t\t}\n\t\t}\n\t}","id":94433,"modified_method":"public void afterPropertiesSet() {\n\t\tif (getSessionFactory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'sessionFactory' is required\");\n\t\t}\n\t\tif (this.entityInterceptor instanceof String && this.beanFactory == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'beanFactory' is required for 'entityInterceptorBeanName'\");\n\t\t}\n\n\t\t// Check for SessionFactory's DataSource.\n\t\tif (this.autodetectDataSource && getDataSource() == null) {\n\t\t\tDataSource sfds = SessionFactoryUtils.getDataSource(getSessionFactory());\n\t\t\tif (sfds != null) {\n\t\t\t\t// Use the SessionFactory's DataSource for exposing transactions to JDBC code.\n\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\tlogger.info(\"Using DataSource [\" + sfds +\n\t\t\t\t\t\t\t\"] of Hibernate SessionFactory for HibernateTransactionManager\");\n\t\t\t\t}\n\t\t\t\tsetDataSource(sfds);\n\t\t\t}\n\t\t}\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected void doBegin(Object transaction, TransactionDefinition definition) {\n\t\tHibernateTransactionObject txObject = (HibernateTransactionObject) transaction;\n\n\t\tif (txObject.hasConnectionHolder() && !txObject.getConnectionHolder().isSynchronizedWithTransaction()) {\n\t\t\tthrow new IllegalTransactionStateException(\n\t\t\t\t\t\"Pre-bound JDBC Connection found! HibernateTransactionManager does not support \" +\n\t\t\t\t\t\"running within DataSourceTransactionManager if told to manage the DataSource itself. \" +\n\t\t\t\t\t\"It is recommended to use a single HibernateTransactionManager for all transactions \" +\n\t\t\t\t\t\"on a single DataSource, no matter whether Hibernate or JDBC access.\");\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tif (txObject.getSessionHolder() == null || txObject.getSessionHolder().isSynchronizedWithTransaction()) {\n\t\t\t\tSession newSession = getSessionFactory().openSession();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Opened new Session [\" + newSession + \"] for Hibernate transaction\");\n\t\t\t\t}\n\t\t\t\ttxObject.setSession(newSession);\n\t\t\t}\n\n\t\t\tsession = txObject.getSessionHolder().getSession();\n\n\t\t\tif (this.prepareConnection && isSameConnectionForEntireSession(session)) {\n\t\t\t\t// We're allowed to change the transaction settings of the JDBC Connection.\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Preparing JDBC Connection of Hibernate Session [\" + session + \"]\");\n\t\t\t\t}\n\t\t\t\tConnection con = ((SessionImplementor) session).connection();\n\t\t\t\tInteger previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);\n\t\t\t\ttxObject.setPreviousIsolationLevel(previousIsolationLevel);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Not allowed to change the transaction settings of the JDBC Connection.\n\t\t\t\tif (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {\n\t\t\t\t\t// We should set a specific isolation level but are not allowed to...\n\t\t\t\t\tthrow new InvalidIsolationLevelException(\n\t\t\t\t\t\t\t\"HibernateTransactionManager is not allowed to support custom isolation levels: \" +\n\t\t\t\t\t\t\t\"make sure that its 'prepareConnection' flag is on (the default) and that the \" +\n\t\t\t\t\t\t\t\"Hibernate connection release mode is set to 'on_close' (SpringTransactionFactory's default).\");\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Not preparing JDBC Connection of Hibernate Session [\" + session + \"]\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (definition.isReadOnly() && txObject.isNewSession()) {\n\t\t\t\t// Just set to MANUAL in case of a new Session for this transaction.\n\t\t\t\tsession.setFlushMode(FlushMode.MANUAL);\n\t\t\t}\n\n\t\t\tif (!definition.isReadOnly() && !txObject.isNewSession()) {\n\t\t\t\t// We need AUTO or COMMIT for a non-read-only transaction.\n\t\t\t\tFlushMode flushMode = session.getFlushMode();\n\t\t\t\tif (FlushMode.isManualFlushMode(session.getFlushMode())) {\n\t\t\t\t\tsession.setFlushMode(FlushMode.AUTO);\n\t\t\t\t\ttxObject.getSessionHolder().setPreviousFlushMode(flushMode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTransaction hibTx;\n\n\t\t\t// Register transaction timeout.\n\t\t\tint timeout = determineTimeout(definition);\n\t\t\tif (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n\t\t\t\t// Use Hibernate's own transaction timeout mechanism on Hibernate 3.1+\n\t\t\t\t// Applies to all statements, also to inserts, updates and deletes!\n\t\t\t\thibTx = session.getTransaction();\n\t\t\t\thibTx.setTimeout(timeout);\n\t\t\t\thibTx.begin();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Open a plain Hibernate transaction without specified timeout.\n\t\t\t\thibTx = session.beginTransaction();\n\t\t\t}\n\n\t\t\t// Add the Hibernate transaction to the session holder.\n\t\t\ttxObject.getSessionHolder().setTransaction(hibTx);\n\n\t\t\t// Register the Hibernate Session's JDBC Connection for the DataSource, if set.\n\t\t\tif (getDataSource() != null) {\n\t\t\t\tConnection con = ((SessionImplementor) session).connection();\n\t\t\t\tConnectionHolder conHolder = new ConnectionHolder(con);\n\t\t\t\tif (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n\t\t\t\t\tconHolder.setTimeoutInSeconds(timeout);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Exposing Hibernate transaction as JDBC transaction [\" + con + \"]\");\n\t\t\t\t}\n\t\t\t\tTransactionSynchronizationManager.bindResource(getDataSource(), conHolder);\n\t\t\t\ttxObject.setConnectionHolder(conHolder);\n\t\t\t}\n\n\t\t\t// Bind the session holder to the thread.\n\t\t\tif (txObject.isNewSessionHolder()) {\n\t\t\t\tTransactionSynchronizationManager.bindResource(getSessionFactory(), txObject.getSessionHolder());\n\t\t\t}\n\t\t\ttxObject.getSessionHolder().setSynchronizedWithTransaction(true);\n\t\t}\n\n\t\tcatch (Exception ex) {\n\t\t\tif (txObject.isNewSession()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (session.getTransaction().isActive()) {\n\t\t\t\t\t\tsession.getTransaction().rollback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex2) {\n\t\t\t\t\tlogger.debug(\"Could not rollback Session after failed transaction begin\", ex);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tSessionFactoryUtils.closeSession(session);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new CannotCreateTransactionException(\"Could not open Hibernate Session for transaction\", ex);\n\t\t}\n\t}","id":94434,"modified_method":"@Override\n\tprotected void doBegin(Object transaction, TransactionDefinition definition) {\n\t\tHibernateTransactionObject txObject = (HibernateTransactionObject) transaction;\n\n\t\tif (txObject.hasConnectionHolder() && !txObject.getConnectionHolder().isSynchronizedWithTransaction()) {\n\t\t\tthrow new IllegalTransactionStateException(\n\t\t\t\t\t\"Pre-bound JDBC Connection found! HibernateTransactionManager does not support \" +\n\t\t\t\t\t\"running within DataSourceTransactionManager if told to manage the DataSource itself. \" +\n\t\t\t\t\t\"It is recommended to use a single HibernateTransactionManager for all transactions \" +\n\t\t\t\t\t\"on a single DataSource, no matter whether Hibernate or JDBC access.\");\n\t\t}\n\n\t\tSession session = null;\n\n\t\ttry {\n\t\t\tif (txObject.getSessionHolder() == null || txObject.getSessionHolder().isSynchronizedWithTransaction()) {\n\t\t\t\tInterceptor entityInterceptor = getEntityInterceptor();\n\t\t\t\tSession newSession = (entityInterceptor != null ?\n\t\t\t\t\t\tgetSessionFactory().withOptions().interceptor(entityInterceptor).openSession() :\n\t\t\t\t\t\tgetSessionFactory().openSession());\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Opened new Session [\" + newSession + \"] for Hibernate transaction\");\n\t\t\t\t}\n\t\t\t\ttxObject.setSession(newSession);\n\t\t\t}\n\n\t\t\tsession = txObject.getSessionHolder().getSession();\n\n\t\t\tif (this.prepareConnection && isSameConnectionForEntireSession(session)) {\n\t\t\t\t// We're allowed to change the transaction settings of the JDBC Connection.\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Preparing JDBC Connection of Hibernate Session [\" + session + \"]\");\n\t\t\t\t}\n\t\t\t\tConnection con = ((SessionImplementor) session).connection();\n\t\t\t\tInteger previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);\n\t\t\t\ttxObject.setPreviousIsolationLevel(previousIsolationLevel);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Not allowed to change the transaction settings of the JDBC Connection.\n\t\t\t\tif (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {\n\t\t\t\t\t// We should set a specific isolation level but are not allowed to...\n\t\t\t\t\tthrow new InvalidIsolationLevelException(\n\t\t\t\t\t\t\t\"HibernateTransactionManager is not allowed to support custom isolation levels: \" +\n\t\t\t\t\t\t\t\"make sure that its 'prepareConnection' flag is on (the default) and that the \" +\n\t\t\t\t\t\t\t\"Hibernate connection release mode is set to 'on_close' (SpringTransactionFactory's default).\");\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Not preparing JDBC Connection of Hibernate Session [\" + session + \"]\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (definition.isReadOnly() && txObject.isNewSession()) {\n\t\t\t\t// Just set to MANUAL in case of a new Session for this transaction.\n\t\t\t\tsession.setFlushMode(FlushMode.MANUAL);\n\t\t\t}\n\n\t\t\tif (!definition.isReadOnly() && !txObject.isNewSession()) {\n\t\t\t\t// We need AUTO or COMMIT for a non-read-only transaction.\n\t\t\t\tFlushMode flushMode = session.getFlushMode();\n\t\t\t\tif (FlushMode.isManualFlushMode(session.getFlushMode())) {\n\t\t\t\t\tsession.setFlushMode(FlushMode.AUTO);\n\t\t\t\t\ttxObject.getSessionHolder().setPreviousFlushMode(flushMode);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTransaction hibTx;\n\n\t\t\t// Register transaction timeout.\n\t\t\tint timeout = determineTimeout(definition);\n\t\t\tif (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n\t\t\t\t// Use Hibernate's own transaction timeout mechanism on Hibernate 3.1+\n\t\t\t\t// Applies to all statements, also to inserts, updates and deletes!\n\t\t\t\thibTx = session.getTransaction();\n\t\t\t\thibTx.setTimeout(timeout);\n\t\t\t\thibTx.begin();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Open a plain Hibernate transaction without specified timeout.\n\t\t\t\thibTx = session.beginTransaction();\n\t\t\t}\n\n\t\t\t// Add the Hibernate transaction to the session holder.\n\t\t\ttxObject.getSessionHolder().setTransaction(hibTx);\n\n\t\t\t// Register the Hibernate Session's JDBC Connection for the DataSource, if set.\n\t\t\tif (getDataSource() != null) {\n\t\t\t\tConnection con = ((SessionImplementor) session).connection();\n\t\t\t\tConnectionHolder conHolder = new ConnectionHolder(con);\n\t\t\t\tif (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n\t\t\t\t\tconHolder.setTimeoutInSeconds(timeout);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Exposing Hibernate transaction as JDBC transaction [\" + con + \"]\");\n\t\t\t\t}\n\t\t\t\tTransactionSynchronizationManager.bindResource(getDataSource(), conHolder);\n\t\t\t\ttxObject.setConnectionHolder(conHolder);\n\t\t\t}\n\n\t\t\t// Bind the session holder to the thread.\n\t\t\tif (txObject.isNewSessionHolder()) {\n\t\t\t\tTransactionSynchronizationManager.bindResource(getSessionFactory(), txObject.getSessionHolder());\n\t\t\t}\n\t\t\ttxObject.getSessionHolder().setSynchronizedWithTransaction(true);\n\t\t}\n\n\t\tcatch (Exception ex) {\n\t\t\tif (txObject.isNewSession()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (session.getTransaction().isActive()) {\n\t\t\t\t\t\tsession.getTransaction().rollback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex2) {\n\t\t\t\t\tlogger.debug(\"Could not rollback Session after failed transaction begin\", ex);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tSessionFactoryUtils.closeSession(session);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new CannotCreateTransactionException(\"Could not open Hibernate Session for transaction\", ex);\n\t\t}\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testParticipatingTransactionWithWithRequiresNew() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl session1Control = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session1 = (ImplementingSession) session1Control.getMock();\n\t\tMockControl session2Control = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session2 = (ImplementingSession) session2Control.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session1, 1);\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session2, 1);\n\t\tsession1.beginTransaction();\n\t\tsession1Control.setReturnValue(tx, 1);\n\t\tsession2.beginTransaction();\n\t\tsession2Control.setReturnValue(tx, 1);\n\t\tsession2.flush();\n\t\tsession2Control.setVoidCallable(1);\n\t\tsession1.close();\n\t\tsession1Control.setReturnValue(null, 1);\n\t\tsession2.close();\n\t\tsession2Control.setReturnValue(null, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(2);\n\t\tsession1.isConnected();\n\t\tsession1Control.setReturnValue(true, 1);\n\t\tsession1.connection();\n\t\tsession1Control.setReturnValue(con, 2);\n\t\tsession2.isConnected();\n\t\tsession2Control.setReturnValue(true, 1);\n\t\tsession2.connection();\n\t\tsession2Control.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 2);\n\n\t\tsfControl.replay();\n\t\tsession1Control.replay();\n\t\tsession2Control.replay();\n\t\tconControl.replay();\n\t\ttxControl.replay();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tfinal SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread session\", holder != null);\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tassertTrue(\"Not enclosing session\", session != holder.getSession());\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tassertTrue(\"Same thread session as before\",\n\t\t\t\t\t\tholder.getSession() == ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tsfControl.verify();\n\t\tsession1Control.verify();\n\t\tsession2Control.verify();\n\t\tconControl.verify();\n\t\ttxControl.verify();\n\t}","id":94435,"modified_method":"@Test\n\tpublic void testParticipatingTransactionWithRequiresNew() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session1 = mock(ImplementingSession.class);\n\t\tImplementingSession session2 = mock(ImplementingSession.class);\n\t\tConnection con = mock(Connection.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session1, session2);\n\t\tgiven(session1.beginTransaction()).willReturn(tx);\n\t\tgiven(session1.isOpen()).willReturn(true);\n\t\tgiven(session2.beginTransaction()).willReturn(tx);\n\t\tgiven(session2.isOpen()).willReturn(true);\n\t\tgiven(session2.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session1.isConnected()).willReturn(true);\n\t\tgiven(session1.connection()).willReturn(con);\n\t\tgiven(session2.isConnected()).willReturn(true);\n\t\tgiven(session2.connection()).willReturn(con);\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tfinal SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread session\", holder != null);\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tassertTrue(\"Not enclosing session\", session != holder.getSession());\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tassertTrue(\"Same thread session as before\",\n\t\t\t\t\t\tholder.getSession() == ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tverify(session2).flush();\n\t\tverify(session1).close();\n\t\tverify(session2).close();\n\t\tverify(tx, times(2)).commit();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionCommitWithFlushFailure() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\ttx.commit();\n\t\tSQLException sqlEx = new SQLException(\"argh\", \"27\");\n\t\tException rootCause = null;\n\t\tConstraintViolationException jdbcEx = new ConstraintViolationException(\"mymsg\", sqlEx, null);\n\t\ttxControl.setThrowable(jdbcEx, 1);\n\t\trootCause = jdbcEx;\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.rollback();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\t\tconControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\treturn l;\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown DataIntegrityViolationException\");\n\t\t}\n\t\tcatch (DataIntegrityViolationException ex) {\n\t\t\t// expected\n\t\t\tassertEquals(rootCause, ex.getCause());\n\t\t\tassertTrue(ex.getMessage().indexOf(\"mymsg\") != -1);\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t\tconControl.verify();\n\t}","id":94436,"modified_method":"@Test\n\tpublic void testTransactionCommitWithFlushFailure() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tSQLException sqlEx = new SQLException(\"argh\", \"27\");\n\t\tException rootCause = null;\n\t\tConstraintViolationException jdbcEx = new ConstraintViolationException(\"mymsg\", sqlEx, null);\n\t\trootCause = jdbcEx;\n\t\twillThrow(jdbcEx).given(tx).commit();\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\treturn l;\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown DataIntegrityViolationException\");\n\t\t}\n\t\tcatch (DataIntegrityViolationException ex) {\n\t\t\t// expected\n\t\t\tassertEquals(rootCause, ex.getCause());\n\t\t\tassertTrue(ex.getMessage().indexOf(\"mymsg\") != -1);\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(session).close();\n\t\tverify(tx).rollback();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionFlush() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.flush();\n\t\tsessionControl.setVoidCallable(1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\ttm.setPrepareConnection(false);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tstatus.flush();\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94437,"modified_method":"@Test\n\tpublic void testTransactionFlush() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal Session session = mock(Session.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\ttm.setPrepareConnection(false);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tstatus.flush();\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(session).flush();\n\t\tverify(tx).commit();\n\t\tverify(session).close();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private void doTestExistingTransactionWithPropagationNestedAndRollback(final boolean manualSavepoint)\n\t\t\tthrows Exception {\n\n\t\tMockControl dsControl = MockControl.createControl(DataSource.class);\n\t\tfinal DataSource ds = (DataSource) dsControl.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl mdControl = MockControl.createControl(DatabaseMetaData.class);\n\t\tDatabaseMetaData md = (DatabaseMetaData) mdControl.getMock();\n\t\tMockControl spControl = MockControl.createControl(Savepoint.class);\n\t\tSavepoint sp = (Savepoint) spControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\t\tMockControl queryControl = MockControl.createControl(Query.class);\n\t\tQuery query = (Query) queryControl.getMock();\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 3);\n\t\tmd.supportsSavepoints();\n\t\tmdControl.setReturnValue(true, 1);\n\t\tcon.getMetaData();\n\t\tconControl.setReturnValue(md, 1);\n\t\tcon.setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1);\n\t\tconControl.setReturnValue(sp, 1);\n\t\tcon.rollback(sp);\n\t\tconControl.setVoidCallable(1);\n\t\tsession.createQuery(\"some query string\");\n\t\tsessionControl.setReturnValue(query, 1);\n\t\tquery.list();\n\t\tqueryControl.setReturnValue(list, 1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\n\t\tdsControl.replay();\n\t\tconControl.replay();\n\t\tmdControl.replay();\n\t\tspControl.replay();\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\t\tqueryControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setNestedTransactionAllowed(true);\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tif (manualSavepoint) {\n\t\t\t\t\tObject savepoint = status.createSavepoint();\n\t\t\t\t\tstatus.rollbackToSavepoint(savepoint);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tdsControl.verify();\n\t\tconControl.verify();\n\t\tmdControl.verify();\n\t\tspControl.verify();\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t\tqueryControl.verify();\n\t}","id":94438,"modified_method":"private void doTestExistingTransactionWithPropagationNestedAndRollback(final boolean manualSavepoint)\n\t\t\tthrows Exception {\n\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tConnection con = mock(Connection.class);\n\t\tDatabaseMetaData md = mock(DatabaseMetaData.class);\n\t\tSavepoint sp = mock(Savepoint.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\t\tQuery query = mock(Query.class);\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.connection()).willReturn(con);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(md.supportsSavepoints()).willReturn(true);\n\t\tgiven(con.getMetaData()).willReturn(md);\n\t\tgiven(con.setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1)).willReturn(sp);\n\t\tgiven(session.createQuery(\"some query string\")).willReturn(query);\n\t\tgiven(query.list()).willReturn(list);\n\t\tgiven(session.isConnected()).willReturn(true);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setNestedTransactionAllowed(true);\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tif (manualSavepoint) {\n\t\t\t\t\tObject savepoint = status.createSavepoint();\n\t\t\t\t\tstatus.rollbackToSavepoint(savepoint);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(con).setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1);\n\t\tverify(con).rollback(sp);\n\t\tverify(session).close();\n\t\tverify(tx).commit();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionRollbackOnly() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.flush();\n\t\tsessionControl.setVoidCallable(1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.rollback();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tsession.flush();\n\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94439,"modified_method":"@Test\n\tpublic void testTransactionRollbackOnly() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tsession.flush();\n\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tverify(session).flush();\n\t\tverify(session).close();\n\t\tverify(tx).rollback();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionRollbackWithHibernateManagedSession() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl tx1Control = MockControl.createControl(Transaction.class);\n\t\tfinal Transaction tx1 = (Transaction) tx1Control.getMock();\n\t\tMockControl tx2Control = MockControl.createControl(Transaction.class);\n\t\tfinal Transaction tx2 = (Transaction) tx2Control.getMock();\n\n\t\tsf.getCurrentSession();\n\t\tsfControl.setReturnValue(session, 2);\n\t\tsession.getFlushMode();\n\t\tsessionControl.setReturnValue(FlushMode.AUTO, 4);\n\t\tsession.getTransaction();\n\t\tsessionControl.setReturnValue(tx1, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx1, 1);\n\t\ttx1.isActive();\n\t\ttx1Control.setReturnValue(false, 1);\n\t\ttx1.rollback();\n\t\ttx1Control.setVoidCallable(1);\n\t\tsession.getTransaction();\n\t\tsessionControl.setReturnValue(tx2, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx2, 1);\n\t\ttx2.isActive();\n\t\ttx2Control.setReturnValue(false, 1);\n\t\ttx2.commit();\n\t\ttx2Control.setVoidCallable(1);\n\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttx1Control.replay();\n\t\ttx2Control.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setPrepareConnection(false);\n\t\ttm.setHibernateManagedSession(true);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t@Override\n\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\t\tassertEquals(session, sess);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t}\n\t\t});\n\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttx1Control.verify();\n\t\ttx2Control.verify();\n\t}","id":94440,"modified_method":"@Test\n\tpublic void testTransactionRollbackWithHibernateManagedSession() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal Session session = mock(Session.class);\n\t\tfinal Transaction tx1 = mock(Transaction.class);\n\t\tfinal Transaction tx2 = mock(Transaction.class);\n\n\t\tgiven(sf.getCurrentSession()).willReturn(session);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getTransaction()).willReturn(tx1, tx2);\n\t\tgiven(session.beginTransaction()).willReturn(tx1, tx2);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.MANUAL);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setPrepareConnection(false);\n\t\ttm.setHibernateManagedSession(true);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t@Override\n\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\t\tassertEquals(session, sess);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t}\n\t\t});\n\n\t\tverify(tx1).rollback();\n\t\tverify(tx2).commit();\n\t\tInOrder ordered = inOrder(session);\n\t\tordered.verify(session).setFlushMode(FlushMode.AUTO);\n\t\tordered.verify(session).setFlushMode(FlushMode.MANUAL);\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testParticipatingTransactionWithRollback() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.rollback();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94441,"modified_method":"@Test\n\tpublic void testParticipatingTransactionWithRollback() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tverify(session).close();\n\t\tverify(tx).rollback();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionRollbackWithPreBound() throws Exception {\n\t\tMockControl dsControl = MockControl.createControl(DataSource.class);\n\t\tfinal DataSource ds = (DataSource) dsControl.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl tx1Control = MockControl.createControl(Transaction.class);\n\t\tfinal Transaction tx1 = (Transaction) tx1Control.getMock();\n\t\tMockControl tx2Control = MockControl.createControl(Transaction.class);\n\t\tfinal Transaction tx2 = (Transaction) tx2Control.getMock();\n\n\t\tsession.getFlushMode();\n\t\tsessionControl.setReturnValue(FlushMode.AUTO, 4);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx1, 1);\n\t\ttx1.rollback();\n\t\ttx1Control.setVoidCallable(1);\n\t\tsession.clear();\n\t\tsessionControl.setVoidCallable(1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx2, 1);\n\t\ttx2.commit();\n\t\ttx2Control.setVoidCallable(1);\n\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 2);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 6);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 2);\n\t\tsession.disconnect();\n\t\tsessionControl.setReturnValue(null, 2);\n\n\t\tdsControl.replay();\n\t\tconControl.replay();\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttx1Control.replay();\n\t\ttx2Control.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tTransactionSynchronizationManager.bindResource(sf, new SessionHolder(session));\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t@Override\n\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\t\tassertEquals(tx1, sessionHolder.getTransaction());\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\t\tassertEquals(session, sess);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tassertTrue(\"Not marked rollback-only\", !sessionHolder.isRollbackOnly());\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertEquals(tx2, sessionHolder.getTransaction());\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tTransactionSynchronizationManager.unbindResource(sf);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tdsControl.verify();\n\t\tconControl.verify();\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttx1Control.verify();\n\t\ttx2Control.verify();\n\t}","id":94442,"modified_method":"@Test\n\tpublic void testTransactionRollbackWithPreBound() throws Exception {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal ImplementingSession session = mock(ImplementingSession.class);\n\t\tfinal Transaction tx1 = mock(Transaction.class);\n\t\tfinal Transaction tx2 = mock(Transaction.class);\n\n\t\tgiven(session.beginTransaction()).willReturn(tx1, tx2);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.MANUAL);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tTransactionSynchronizationManager.bindResource(sf, new SessionHolder(session));\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t@Override\n\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\t\tassertEquals(tx1, sessionHolder.getTransaction());\n\t\t\t\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\t\tassertEquals(session, sess);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tassertTrue(\"Not marked rollback-only\", !sessionHolder.isRollbackOnly());\n\n\t\ttt.execute(new TransactionCallbackWithoutResult() {\n\t\t\t@Override\n\t\t\tpublic void doInTransactionWithoutResult(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertEquals(tx2, sessionHolder.getTransaction());\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tTransactionSynchronizationManager.unbindResource(sf);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(tx1).rollback();\n\t\tverify(tx2).commit();\n\t\tInOrder ordered = inOrder(session);\n\t\tordered.verify(session).clear();\n\t\tordered.verify(session).setFlushMode(FlushMode.AUTO);\n\t\tordered.verify(session).setFlushMode(FlushMode.MANUAL);\n\t\tordered.verify(session).disconnect();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionRollback() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.rollback();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94443,"modified_method":"@Test\n\tpublic void testTransactionRollback() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tverify(session).close();\n\t\tverify(tx).rollback();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testParticipatingTransactionWithCommit() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.flush();\n\t\tsessionControl.setVoidCallable(1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\treturn l;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == l);\n\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94444,"modified_method":"@Test\n\tpublic void testParticipatingTransactionWithCommit() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal ImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\treturn l;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == l);\n\n\t\tverify(session).flush();\n\t\tverify(session).close();\n\t\tverify(tx).commit();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected void tearDown() {\n\t\tassertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty());\n\t\tassertFalse(TransactionSynchronizationManager.isSynchronizationActive());\n\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t}","id":94445,"modified_method":"@After\n\tpublic void tearDown() {\n\t\tassertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty());\n\t\tassertFalse(TransactionSynchronizationManager.isSynchronizationActive());\n\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionCommitWithReadOnly() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\t\tMockControl queryControl = MockControl.createControl(Query.class);\n\t\tQuery query = (Query) queryControl.getMock();\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.setFlushMode(FlushMode.MANUAL);\n\t\tsessionControl.setVoidCallable(1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.setReadOnly(true);\n\t\tconControl.setVoidCallable(1);\n\t\tsession.createQuery(\"some query string\");\n\t\tsessionControl.setReturnValue(query, 1);\n\t\tquery.list();\n\t\tqueryControl.setReturnValue(list, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(true, 1);\n\t\tcon.setReadOnly(false);\n\t\tconControl.setVoidCallable(1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\n\t\tconControl.replay();\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\t\tqueryControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setReadOnly(true);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tconControl.verify();\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t\tqueryControl.verify();\n\t}","id":94446,"modified_method":"@Test\n\tpublic void testTransactionCommitWithReadOnly() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\t\tQuery query = mock(Query.class);\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.connection()).willReturn(con);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.createQuery(\"some query string\")).willReturn(query);\n\t\tgiven(query.list()).willReturn(list);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(con.isReadOnly()).willReturn(true);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setReadOnly(true);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(session).setFlushMode(FlushMode.MANUAL);\n\t\tverify(con).setReadOnly(true);\n\t\tverify(tx).commit();\n\t\tverify(con).setReadOnly(false);\n\t\tverify(session).close();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testParticipatingTransactionWithRollbackOnly() throws Exception {\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.rollback();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94447,"modified_method":"@Test\n\tpublic void testParticipatingTransactionWithRollbackOnly() throws Exception {\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\treturn tt.execute(new TransactionCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\t\tstatus.setRollbackOnly();\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown UnexpectedRollbackException\");\n\t\t}\n\t\tcatch (UnexpectedRollbackException ex) {\n\t\t\t// expected\n\t\t}\n\n\t\tverify(session).close();\n\t\tverify(tx).rollback();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionCommitWithPreBound() throws Exception {\n\t\tMockControl dsControl = MockControl.createControl(DataSource.class);\n\t\tfinal DataSource ds = (DataSource) dsControl.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsession.getFlushMode();\n\t\tsessionControl.setReturnValue(FlushMode.AUTO, 2);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 3);\n\t\tcon.getTransactionIsolation();\n\t\tconControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED);\n\t\tcon.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\t\tconControl.setVoidCallable(1);\n\t\tcon.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\t\tconControl.setVoidCallable(1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsession.disconnect();\n\t\tsessionControl.setReturnValue(null, 1);\n\n\t\tdsControl.replay();\n\t\tconControl.replay();\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tTransactionSynchronizationManager.bindResource(sf, new SessionHolder(session));\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread transaction\", sessionHolder.getTransaction() != null);\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == l);\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tTransactionSynchronizationManager.unbindResource(sf);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tdsControl.verify();\n\t\tconControl.verify();\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94448,"modified_method":"@Test\n\tpublic void testTransactionCommitWithPreBound() throws Exception {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal ImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.MANUAL);\n\t\tgiven(session.connection()).willReturn(con);\n\t\tgiven(con.getTransactionIsolation()).willReturn(Connection.TRANSACTION_READ_COMMITTED);\n\t\tgiven(session.isConnected()).willReturn(true);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sf);\n\t\ttm.setDataSource(ds);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\t\tfinal List l = new ArrayList();\n\t\tl.add(\"test\");\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tTransactionSynchronizationManager.bindResource(sf, new SessionHolder(session));\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread transaction\", sessionHolder.getTransaction() != null);\n\t\t\t\tSession sess = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\tassertEquals(session, sess);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == l);\n\n\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sf));\n\t\tSessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\tassertTrue(\"Hasn't thread transaction\", sessionHolder.getTransaction() == null);\n\t\tTransactionSynchronizationManager.unbindResource(sf);\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tInOrder ordered = inOrder(session, con);\n\t\tordered.verify(con).setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\t\tordered.verify(session).setFlushMode(FlushMode.AUTO);\n\t\tordered.verify(con).setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\t\tordered.verify(session).setFlushMode(FlushMode.MANUAL);\n\t\tverify(tx).commit();\n\t\tverify(session).disconnect();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionWithPropagationSupportsAndInnerTransaction() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl session1Control = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session1 = (ImplementingSession) session1Control.getMock();\n\t\tMockControl session2Control = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session2 = (ImplementingSession) session2Control.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session1, 1);\n\t\tsession1.flush();\n\t\tsession1Control.setVoidCallable(1);\n\t\tsession1.close();\n\t\tsession1Control.setReturnValue(null, 1);\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session2, 1);\n\t\tsession2.beginTransaction();\n\t\tsession2Control.setReturnValue(tx, 1);\n\t\tsession2.connection();\n\t\tsession2Control.setReturnValue(con, 2);\n\t\tsession2.flush();\n\t\tsession2Control.setVoidCallable(1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession2.isConnected();\n\t\tsession2Control.setReturnValue(true, 1);\n\t\tsession2.close();\n\t\tsession2Control.setReturnValue(null, 1);\n\t\tsfControl.replay();\n\t\tsession1Control.replay();\n\t\tsession2Control.replay();\n\t\ttxControl.replay();\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);\n\t\tfinal TransactionTemplate tt2 = new TransactionTemplate(tm);\n\t\ttt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Is not new transaction\", !status.isNewTransaction());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = sfProxy.openSession();\n\t\t\t\tassertSame(session1, session);\n\t\t\t\ttt2.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tassertSame(session2, session);\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsession.flush();\n\t\t\t\tsession.close();\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tsfControl.verify();\n\t\tsession1Control.verify();\n\t\tsession2Control.verify();\n\t\ttxControl.verify();\n\t}","id":94449,"modified_method":"@Test\n\tpublic void testTransactionWithPropagationSupportsAndInnerTransaction() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal ImplementingSession session1 = mock(ImplementingSession.class);\n\t\tfinal ImplementingSession session2 = mock(ImplementingSession.class);\n\t\tConnection con = mock(Connection.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session1, session2);\n\t\tgiven(session1.getSessionFactory()).willReturn(sf);\n\t\tgiven(session1.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session2.beginTransaction()).willReturn(tx);\n\t\tgiven(session2.connection()).willReturn(con);\n\t\tgiven(session2.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session2.isOpen()).willReturn(true);\n\t\tgiven(session2.isConnected()).willReturn(true);\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);\n\t\tfinal TransactionTemplate tt2 = new TransactionTemplate(tm);\n\t\ttt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Is not new transaction\", !status.isNewTransaction());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = sfProxy.openSession();\n\t\t\t\tassertSame(session1, session);\n\t\t\t\ttt2.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession();\n\t\t\t\t\t\tassertSame(session2, session);\n\t\t\t\t\t\tsession.flush();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsession.flush();\n\t\t\t\tsession.close();\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tverify(session1).flush();\n\t\tverify(session1).close();\n\t\tverify(session2).flush();\n\t\tverify(session2).close();\n\t\tverify(tx).commit();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testParticipatingTransactionWithWithNotSupported() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.beginTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 2);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\tconControl.replay();\n\t\ttxControl.replay();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tSessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread session\", holder != null);\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n\t\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tassertTrue(\"Same thread session as before\",\n\t\t\t\t\t\tholder.getSession() == ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t}","id":94450,"modified_method":"@Test\n\tpublic void testParticipatingTransactionWithNotSupported() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tImplementingSession session = mock(ImplementingSession.class);\n\t\tConnection con = mock(Connection.class);\n\t\tTransaction tx = mock(Transaction.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.getSessionFactory()).willReturn(sf);\n\t\tgiven(session.beginTransaction()).willReturn(tx);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.AUTO);\n\t\tgiven(session.isConnected()).willReturn(true);\n\t\tgiven(session.connection()).willReturn(con);\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager(sf);\n\t\tfinal TransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tSessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sf);\n\t\t\t\tassertTrue(\"Has thread session\", holder != null);\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n\t\t\t\ttt.execute(new TransactionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tassertTrue(\"Same thread session as before\",\n\t\t\t\t\t\tholder.getSession() == ((SessionHolder) TransactionSynchronizationManager.getResource(sf)).getSession());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sf));\n\n\t\tverify(session).close();\n\t\tverify(tx).commit();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionCommit() throws Exception {\n\t\tMockControl dsControl = MockControl.createControl(DataSource.class);\n\t\tfinal DataSource ds = (DataSource) dsControl.getMock();\n\t\tMockControl conControl = MockControl.createControl(Connection.class);\n\t\tConnection con = (Connection) conControl.getMock();\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\t\tMockControl txControl = MockControl.createControl(Transaction.class);\n\t\tTransaction tx = (Transaction) txControl.getMock();\n\t\tMockControl queryControl = MockControl.createControl(Query.class);\n\t\tQuery query = (Query) queryControl.getMock();\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tcon.getTransactionIsolation();\n\t\tconControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED);\n\t\tcon.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\t\tconControl.setVoidCallable(1);\n\t\tcon.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\t\tconControl.setVoidCallable(1);\n\t\tcon.isReadOnly();\n\t\tconControl.setReturnValue(false, 1);\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.getTransaction();\n\t\tsessionControl.setReturnValue(tx, 1);\n\t\ttx.setTimeout(10);\n\t\ttxControl.setVoidCallable(1);\n\t\ttx.begin();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.connection();\n\t\tsessionControl.setReturnValue(con, 3);\n\t\tsession.createQuery(\"some query string\");\n\t\tsessionControl.setReturnValue(query, 1);\n\t\tquery.list();\n\t\tqueryControl.setReturnValue(list, 1);\n\t\ttx.commit();\n\t\ttxControl.setVoidCallable(1);\n\t\tsession.isConnected();\n\t\tsessionControl.setReturnValue(true, 1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\n\t\tdsControl.replay();\n\t\tconControl.replay();\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\t\ttxControl.replay();\n\t\tqueryControl.replay();\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sfProxy);\n\t\ttm.setDataSource(ds);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\t\ttt.setTimeout(10);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sfProxy)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\t\tdsControl.verify();\n\t\tconControl.verify();\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t\ttxControl.verify();\n\t\tqueryControl.verify();\n\t}","id":94451,"modified_method":"@Test\n\tpublic void testTransactionCommit() throws Exception {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tConnection con = mock(Connection.class);\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal ImplementingSession session = mock(ImplementingSession.class);\n\t\tTransaction tx = mock(Transaction.class);\n\t\tQuery query = mock(Query.class);\n\n\t\tfinal List list = new ArrayList();\n\t\tlist.add(\"test\");\n\t\tgiven(con.getTransactionIsolation()).willReturn(Connection.TRANSACTION_READ_COMMITTED);\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.getTransaction()).willReturn(tx);\n\t\tgiven(session.connection()).willReturn(con);\n\t\tgiven(session.isOpen()).willReturn(true);\n\t\tgiven(session.createQuery(\"some query string\")).willReturn(query);\n\t\tgiven(query.list()).willReturn(list);\n\t\tgiven(session.isConnected()).willReturn(true);\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tHibernateTransactionManager tm = new HibernateTransactionManager();\n\t\ttm.setSessionFactory(sfProxy);\n\t\ttm.setDataSource(ds);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\t\ttt.setTimeout(10);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tObject result = tt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Has thread session\", TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Has thread connection\", TransactionSynchronizationManager.hasResource(ds));\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertTrue(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = ((SessionHolder) TransactionSynchronizationManager.getResource(sfProxy)).getSession();\n\t\t\t\treturn session.createQuery(\"some query string\").list();\n\t\t\t}\n\t\t});\n\t\tassertTrue(\"Correct result list\", result == list);\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tassertTrue(\"Hasn't thread connection\", !TransactionSynchronizationManager.hasResource(ds));\n\t\tassertTrue(\"JTA synchronizations not active\", !TransactionSynchronizationManager.isSynchronizationActive());\n\n\t\tverify(con).setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\t\tverify(con).setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\t\tverify(tx).setTimeout(10);\n\t\tverify(tx).begin();\n\t\tverify(tx).commit();\n\t\tverify(session).close();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public void testTransactionWithPropagationSupports() throws Exception {\n\t\tMockControl sfControl = MockControl.createControl(SessionFactory.class);\n\t\tfinal SessionFactory sf = (SessionFactory) sfControl.getMock();\n\t\tMockControl sessionControl = MockControl.createControl(ImplementingSession.class);\n\t\tfinal ImplementingSession session = (ImplementingSession) sessionControl.getMock();\n\n\t\tsf.openSession();\n\t\tsfControl.setReturnValue(session, 1);\n\t\tsession.flush();\n\t\tsessionControl.setVoidCallable(1);\n\t\tsession.close();\n\t\tsessionControl.setReturnValue(null, 1);\n\t\tsfControl.replay();\n\t\tsessionControl.replay();\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Is not new transaction\", !status.isNewTransaction());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = sf.openSession();\n\t\t\t\tsession.flush();\n\t\t\t\tsession.close();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tsfControl.verify();\n\t\tsessionControl.verify();\n\t}","id":94452,"modified_method":"@Test\n\tpublic void testTransactionWithPropagationSupports() throws Exception {\n\t\tfinal SessionFactory sf = mock(SessionFactory.class);\n\t\tfinal Session session = mock(Session.class);\n\n\t\tgiven(sf.openSession()).willReturn(session);\n\t\tgiven(session.getSessionFactory()).willReturn(sf);\n\t\tgiven(session.getFlushMode()).willReturn(FlushMode.MANUAL);\n\n\t\tLocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {\n\t\t\t@Override\n\t\t\tprotected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {\n\t\t\t\treturn sf;\n\t\t\t}\n\t\t};\n\t\tlsfb.afterPropertiesSet();\n\t\tfinal SessionFactory sfProxy = lsfb.getObject();\n\n\t\tPlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\ttt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\n\t\ttt.execute(new TransactionCallback() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\t\t\tassertTrue(\"Is not new transaction\", !status.isNewTransaction());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());\n\t\t\t\tassertFalse(TransactionSynchronizationManager.isActualTransactionActive());\n\t\t\t\tSession session = sf.openSession();\n\t\t\t\tsession.flush();\n\t\t\t\tsession.close();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tassertTrue(\"Hasn't thread session\", !TransactionSynchronizationManager.hasResource(sfProxy));\n\t\tInOrder ordered = inOrder(session);\n\t\tordered.verify(session).flush();\n\t\tordered.verify(session).close();\n\t}","commit_id":"096972d2b10d5a3df38c855f63a4e4340b1df136","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test(enabled = false)\n  public void testLogTwoCheckPointTruncationAllDropped() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(1, \"test\");\n    final int firstRecordsToWrite = (2048 - 2 * serializeSize(walRecord)) / serializeSize(setPageDataRecord);\n\n    for (int i = 0; i < firstRecordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    int recordsToWrite = 2 * (2048 / serializeSize(setPageDataRecord));\n\n    for (int i = 0; i < recordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstRecordsToWrite + 2, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite + 1).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), new OLogSequenceNumber(1, 0));\n  }","id":94453,"modified_method":"public void testLogTwoCheckPointTruncationAllDropped() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    long seed = System.currentTimeMillis();\n    System.out.println(\"testLogTwoCheckPointTruncationAllDropped seed \" + seed);\n\n    Random rnd = new Random(seed);\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    int firstSegmentIndex = -1;\n    int counter = 2;\n\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), writtenRecords.get(firstSegmentIndex + 1).getLsn());\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(enabled = false)\n  public void testLogOneCheckPointTruncation() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(256, \"test\");\n\n    final int recordsToWriteOneSegment = 2048 / serializeSize(setPageDataRecord);\n    final int recordsToWrite = 2 * recordsToWriteOneSegment;\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n\n    writtenRecords.add(walRecord);\n\n    final int firstRecordsToWrite = (2048 - serializeSize(walRecord)) / serializeSize(setPageDataRecord);\n\n    for (int i = 0; i < firstRecordsToWrite; i++) {\n      setPageDataRecord = new OUpdatePageRecord(256, \"test\");\n      writtenRecords.add(setPageDataRecord);\n\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    for (int i = 0; i < recordsToWrite; i++) {\n      setPageDataRecord = new OUpdatePageRecord(256, \"test\");\n      writtenRecords.add(setPageDataRecord);\n\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstRecordsToWrite + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite).getLsn()));\n    verify(paginatedStorage).scheduleCheckpoint();\n\n    Assert.assertEquals(writeAheadLog.begin(), new OLogSequenceNumber(1, 0));\n  }","id":94454,"modified_method":"public void testLogOneCheckPointTruncation() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n\n    writtenRecords.add(walRecord);\n\n    long seed = System.currentTimeMillis();\n    System.out.println(\"testLogOneCheckPointTruncation seed \" + seed);\n\n    Random rnd = new Random(seed);\n\n    int firstSegmentIndex = -1;\n    int counter = 1;\n\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n    verify(paginatedStorage).scheduleCheckpoint();\n\n    Assert.assertEquals(writeAheadLog.begin(), writtenRecords.get(firstSegmentIndex + 1).getLsn());\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(enabled = false)\n  public void testLogThreeCheckPointTruncationOneLeft() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(1, \"test\");\n    final int firstRecordsToWrite = (2048 - 2 * serializeSize(walRecord)) / serializeSize(setPageDataRecord);\n\n    for (int i = 0; i < firstRecordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    int recordsToWrite = 2 * (2048 / serializeSize(setPageDataRecord));\n\n    for (int i = 0; i < recordsToWrite - 1; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstRecordsToWrite + 2, writtenRecords.size()));\n    Assert.assertEquals(walRecord.getLsn(), writeAheadLog.getLastCheckpoint());\n\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite + 1).getLsn()));\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), new OLogSequenceNumber(1, 0));\n  }","id":94455,"modified_method":"public void testLogThreeCheckPointTruncationOneLeft() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    int firstSegmentIndex = -1;\n    int counter = 2;\n\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n    Assert.assertEquals(walRecord.getLsn(), writeAheadLog.getLastCheckpoint());\n\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), writtenRecords.get(firstSegmentIndex + 1).getLsn());\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(enabled = false)\n  public void testLogTruncation() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OUpdatePageRecord> writtenRecords = new ArrayList<OUpdatePageRecord>();\n    Random rnd = new Random();\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(1, \"test\");\n\n    int oneSegment = 2048 / serializeSize(setPageDataRecord);\n    int recordsToWrite = 3 * oneSegment;\n\n    for (int i = 0; i < recordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(oneSegment, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(oneSegment - 1).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n  }","id":94456,"modified_method":"public void testLogTruncation() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    long seed = System.currentTimeMillis();\n    System.out.println(\"testLogTruncation seed \" + seed);\n\n    Random rnd = new Random(seed);\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    int firstSegmentIndex = -1;\n    int counter = 0;\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      OWALRecord walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(enabled = false)\n  public void testLogTwoCheckPointTruncationOneLeft() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(1, \"test\");\n    final int firstRecordsToWrite = (2048 - serializeSize(walRecord)) / serializeSize(setPageDataRecord);\n\n    for (int i = 0; i < firstRecordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    int recordsToWrite = 2 * (2048 / serializeSize(setPageDataRecord));\n\n    for (int i = 0; i < recordsToWrite - 1; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n\n      writtenRecords.add(setPageDataRecord);\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstRecordsToWrite + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite).getLsn()));\n\n    Assert.assertEquals(writeAheadLog.getLastCheckpoint(), walRecord.getLsn());\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), new OLogSequenceNumber(1, 0));\n  }","id":94457,"modified_method":"@Test\n  public void testLogTwoCheckPointTruncationOneLeft() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    long seed = System.currentTimeMillis();\n    System.out.println(\"testLogTwoCheckPointTruncationOneLeft seed \" + seed);\n\n    Random rnd = new Random(seed);\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    int firstSegmentIndex = -1;\n    int counter = 1;\n\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n\n    Assert.assertEquals(writeAheadLog.getLastCheckpoint(), walRecord.getLsn());\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), writtenRecords.get(firstSegmentIndex + 1).getLsn());\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Test(enabled = false)\n  public void testLogThreeCheckPointTruncationAllDropped() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n    writeAheadLog = new OWriteAheadLog(1024, -1, 2048, 2 * 2048, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    OUpdatePageRecord setPageDataRecord = new OUpdatePageRecord(1, \"test\");\n    final int firstRecordsToWrite = (2048 - 3 * serializeSize(walRecord)) / (serializeSize(setPageDataRecord));\n\n    for (int i = 0; i < firstRecordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n      writtenRecords.add(setPageDataRecord);\n\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    final int recordsToWriteOneSegment = 2048 / serializeSize(setPageDataRecord);\n    final int recordsToWrite = 2 * recordsToWriteOneSegment;\n\n    for (int i = 0; i < recordsToWrite; i++) {\n      long pageIndex = rnd.nextLong();\n      setPageDataRecord = new OUpdatePageRecord(pageIndex, \"test\");\n      writtenRecords.add(setPageDataRecord);\n\n      writeAheadLog.logRecord(setPageDataRecord);\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstRecordsToWrite + 3, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstRecordsToWrite + 2).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), new OLogSequenceNumber(1, 0));\n  }","id":94458,"modified_method":"public void testLogThreeCheckPointTruncationAllDropped() throws Exception {\n    writeAheadLog.close();\n\n    OLocalPaginatedStorage paginatedStorage = mock(OLocalPaginatedStorage.class);\n    when(paginatedStorage.getName()).thenReturn(\"WriteAheadLogTest\");\n    when(paginatedStorage.getStoragePath()).thenReturn(testDir.getAbsolutePath());\n    writeAheadLog = new OWriteAheadLog(2, -1, 2 * OWALPage.PAGE_SIZE, 4 * OWALPage.PAGE_SIZE, paginatedStorage);\n\n    List<OWALRecord> writtenRecords = new ArrayList<OWALRecord>();\n    Random rnd = new Random();\n\n    OWALRecord walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    walRecord = new OFuzzyCheckpointStartRecord();\n    writeAheadLog.logRecord(walRecord);\n    writtenRecords.add(walRecord);\n\n    int firstSegmentIndex = -1;\n    int counter = 3;\n\n    long logSize = writeAheadLog.size() + 1;\n    long prevLogSize = 0;\n\n    while (logSize > prevLogSize) {\n      int contentSize = rnd.nextInt(OWALPage.PAGE_SIZE - 128) + 128;\n      walRecord = new TestRecord(contentSize);\n\n      writeAheadLog.logRecord(walRecord);\n      writtenRecords.add(walRecord);\n\n      prevLogSize = logSize;\n      logSize = writeAheadLog.size();\n\n      if (firstSegmentIndex < 0 && logSize > 2 * OWALPage.PAGE_SIZE)\n        firstSegmentIndex = counter;\n\n      counter++;\n    }\n\n    assertLogContent(writeAheadLog, writtenRecords.subList(firstSegmentIndex + 1, writtenRecords.size()));\n    Assert.assertNull(writeAheadLog.getLastCheckpoint());\n    Assert.assertNull(writeAheadLog.read(writtenRecords.get(firstSegmentIndex).getLsn()));\n\n    verify(paginatedStorage).scheduleCheckpoint();\n    Assert.assertEquals(writeAheadLog.begin(), writtenRecords.get(firstSegmentIndex + 1).getLsn());\n  }","commit_id":"0bb6db823d5d8e4963a31edb96c2e195a045abcb","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      final int start = Math.min(skip, tempResult.size());\r\n      final int tot = Math.min(limit + start, tempResult.size());\r\n      for (int i = start; i < tot; ++i)\r\n        newList.add(tempResult.get(i));\r\n\r\n      tempResult.clear();\r\n      tempResult = newList;\r\n    }\r\n  }","id":94459,"modified_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      if (tempResult instanceof List<?>) {\r\n        final List<OIdentifiable> t = (List<OIdentifiable>) tempResult;\r\n        final int start = Math.min(skip, t.size());\r\n        final int tot = Math.min(limit + start, t.size());\r\n        for (int i = start; i < tot; ++i)\r\n          newList.add(t.get(i));\r\n\r\n        t.clear();\r\n      }\r\n\r\n      tempResult = newList;\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort(tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","id":94460,"modified_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort((List<? extends OIdentifiable>) tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            tempResult.add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              tempResult.add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      final List<OIdentifiable> finalResult = new ArrayList<OIdentifiable>();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            for (Object o : ((Collection<?>) fieldValue)) {\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>) fieldValue).entrySet()) {\r\n              final Object o = entry.getValue();\r\n\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","id":94461,"modified_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      OFlattenIterator finalResult = new OFlattenIterator();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            finalResult.add((Collection<OIdentifiable>) fieldValue);\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            finalResult.add(((Map<?, OIdentifiable>) fieldValue).values());\r\n          } else if (fieldValue instanceof OFlattenIterator) {\r\n            finalResult = (OFlattenIterator) fieldValue;\r\n          } else if (fieldValue instanceof OIdentifiable)\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          tempResult.add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","id":94462,"modified_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          ((Collection<OIdentifiable>) tempResult).add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            tempResult.add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","id":94463,"modified_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            ((List<OIdentifiable>) tempResult).add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      tempResult.add(iRecord);\r\n    }\r\n  }","id":94464,"modified_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      ((Collection<OIdentifiable>) tempResult).add(iRecord);\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n  public boolean hasNext() {\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (subIterator.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","id":94465,"modified_method":"@Override\r\n  public boolean hasNext() {\r\n    if (internalCollections != null) {\r\n      // THE FIRST TIME CREATE THE ITERATOR\r\n      iteratorOfInternalCollections = internalCollections.iterator();\r\n      internalCollections = null;\r\n      getNextPartial();\r\n    }\r\n\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (iteratorOfInternalCollections.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean getNextPartial() {\r\n    if (subIterator != null)\r\n      while (subIterator.hasNext()) {\r\n        final Collection<OIdentifiable> next = subIterator.next();\r\n        if (next != null && !next.isEmpty()) {\r\n          partialIterator = next.iterator();\r\n          return true;\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","id":94466,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  protected boolean getNextPartial() {\r\n    if (iteratorOfInternalCollections != null)\r\n      while (iteratorOfInternalCollections.hasNext()) {\r\n        final Object next = iteratorOfInternalCollections.next();\r\n        if (next != null) {\r\n          if (next instanceof Iterator<?>) {\r\n            if (((Iterator<OIdentifiable>) next).hasNext()) {\r\n              partialIterator = (Iterator<OIdentifiable>) next;\r\n              return true;\r\n            }\r\n          } else if (next instanceof Collection<?>) {\r\n            if (!((Collection<OIdentifiable>) next).isEmpty()) {\r\n              partialIterator = ((Collection<OIdentifiable>) next).iterator();\r\n              return true;\r\n            }\r\n          } else if (next instanceof OIdentifiable) {\r\n            final List<OIdentifiable> list = new ArrayList<OIdentifiable>();\r\n            list.add((OIdentifiable) next);\r\n            partialIterator = list.iterator();\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    subIterator = iterator;\r\n    getNextPartial();\r\n  }","id":94467,"modified_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    iteratorOfInternalCollections = iterator;\r\n    getNextPartial();\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94468,"modified_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94469,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final HashSet<Object> result = new HashSet<Object>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          OMultiValue.add(result, value);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }","id":94470,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final List<Collection<OIdentifiable>> result = new ArrayList<Collection<OIdentifiable>>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          result.add((Collection<OIdentifiable>) value);\r\n        }\r\n      }\r\n\r\n      return new OFlattenIterator(result);\r\n    }\r\n  }","commit_id":"dfd06ef4ec4fa955fdfe1e122eae39ea670fad89","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      final int start = Math.min(skip, tempResult.size());\r\n      final int tot = Math.min(limit + start, tempResult.size());\r\n      for (int i = start; i < tot; ++i)\r\n        newList.add(tempResult.get(i));\r\n\r\n      tempResult.clear();\r\n      tempResult = newList;\r\n    }\r\n  }","id":94471,"modified_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      if (tempResult instanceof List<?>) {\r\n        final List<OIdentifiable> t = (List<OIdentifiable>) tempResult;\r\n        final int start = Math.min(skip, t.size());\r\n        final int tot = Math.min(limit + start, t.size());\r\n        for (int i = start; i < tot; ++i)\r\n          newList.add(t.get(i));\r\n\r\n        t.clear();\r\n      }\r\n\r\n      tempResult = newList;\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort(tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","id":94472,"modified_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort((List<? extends OIdentifiable>) tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      tempResult.add(iRecord);\r\n    }\r\n  }","id":94473,"modified_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      ((Collection<OIdentifiable>) tempResult).add(iRecord);\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          tempResult.add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","id":94474,"modified_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          ((Collection<OIdentifiable>) tempResult).add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            tempResult.add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              tempResult.add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      final List<OIdentifiable> finalResult = new ArrayList<OIdentifiable>();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            for (Object o : ((Collection<?>) fieldValue)) {\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>) fieldValue).entrySet()) {\r\n              final Object o = entry.getValue();\r\n\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","id":94475,"modified_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      OFlattenIterator finalResult = new OFlattenIterator();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            finalResult.add((Collection<OIdentifiable>) fieldValue);\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            finalResult.add(((Map<?, OIdentifiable>) fieldValue).values());\r\n          } else if (fieldValue instanceof OFlattenIterator) {\r\n            finalResult = (OFlattenIterator) fieldValue;\r\n          } else if (fieldValue instanceof OIdentifiable)\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            tempResult.add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","id":94476,"modified_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            ((List<OIdentifiable>) tempResult).add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n  public boolean hasNext() {\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (subIterator.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","id":94477,"modified_method":"@Override\r\n  public boolean hasNext() {\r\n    if (internalCollections != null) {\r\n      // THE FIRST TIME CREATE THE ITERATOR\r\n      iteratorOfInternalCollections = internalCollections.iterator();\r\n      internalCollections = null;\r\n      getNextPartial();\r\n    }\r\n\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (iteratorOfInternalCollections.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    subIterator = iterator;\r\n    getNextPartial();\r\n  }","id":94478,"modified_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    iteratorOfInternalCollections = iterator;\r\n    getNextPartial();\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean getNextPartial() {\r\n    if (subIterator != null)\r\n      while (subIterator.hasNext()) {\r\n        final Collection<OIdentifiable> next = subIterator.next();\r\n        if (next != null && !next.isEmpty()) {\r\n          partialIterator = next.iterator();\r\n          return true;\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","id":94479,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  protected boolean getNextPartial() {\r\n    if (iteratorOfInternalCollections != null)\r\n      while (iteratorOfInternalCollections.hasNext()) {\r\n        final Object next = iteratorOfInternalCollections.next();\r\n        if (next != null) {\r\n          if (next instanceof Iterator<?>) {\r\n            if (((Iterator<OIdentifiable>) next).hasNext()) {\r\n              partialIterator = (Iterator<OIdentifiable>) next;\r\n              return true;\r\n            }\r\n          } else if (next instanceof Collection<?>) {\r\n            if (!((Collection<OIdentifiable>) next).isEmpty()) {\r\n              partialIterator = ((Collection<OIdentifiable>) next).iterator();\r\n              return true;\r\n            }\r\n          } else if (next instanceof OIdentifiable) {\r\n            final List<OIdentifiable> list = new ArrayList<OIdentifiable>();\r\n            list.add((OIdentifiable) next);\r\n            partialIterator = list.iterator();\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94480,"modified_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94481,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final HashSet<Object> result = new HashSet<Object>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          OMultiValue.add(result, value);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }","id":94482,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final List<Collection<OIdentifiable>> result = new ArrayList<Collection<OIdentifiable>>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          result.add((Collection<OIdentifiable>) value);\r\n        }\r\n      }\r\n\r\n      return new OFlattenIterator(result);\r\n    }\r\n  }","commit_id":"20fee58f9e23e0baa98313e1702a5f76e92b443f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      final int start = Math.min(skip, tempResult.size());\r\n      final int tot = Math.min(limit + start, tempResult.size());\r\n      for (int i = start; i < tot; ++i)\r\n        newList.add(tempResult.get(i));\r\n\r\n      tempResult.clear();\r\n      tempResult = newList;\r\n    }\r\n  }","id":94483,"modified_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      if (tempResult instanceof List<?>) {\r\n        final List<OIdentifiable> t = (List<OIdentifiable>) tempResult;\r\n        final int start = Math.min(skip, t.size());\r\n        final int tot = Math.min(limit + start, t.size());\r\n        for (int i = start; i < tot; ++i)\r\n          newList.add(t.get(i));\r\n\r\n        t.clear();\r\n      }\r\n\r\n      tempResult = newList;\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort(tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","id":94484,"modified_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort((List<? extends OIdentifiable>) tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          tempResult.add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","id":94485,"modified_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          ((Collection<OIdentifiable>) tempResult).add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            tempResult.add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","id":94486,"modified_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            ((List<OIdentifiable>) tempResult).add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      tempResult.add(iRecord);\r\n    }\r\n  }","id":94487,"modified_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      ((Collection<OIdentifiable>) tempResult).add(iRecord);\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            tempResult.add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              tempResult.add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      final List<OIdentifiable> finalResult = new ArrayList<OIdentifiable>();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            for (Object o : ((Collection<?>) fieldValue)) {\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>) fieldValue).entrySet()) {\r\n              final Object o = entry.getValue();\r\n\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","id":94488,"modified_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      OFlattenIterator finalResult = new OFlattenIterator();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            finalResult.add((Collection<OIdentifiable>) fieldValue);\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            finalResult.add(((Map<?, OIdentifiable>) fieldValue).values());\r\n          } else if (fieldValue instanceof OFlattenIterator) {\r\n            finalResult = (OFlattenIterator) fieldValue;\r\n          } else if (fieldValue instanceof OIdentifiable)\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    subIterator = iterator;\r\n    getNextPartial();\r\n  }","id":94489,"modified_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    iteratorOfInternalCollections = iterator;\r\n    getNextPartial();\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n  public boolean hasNext() {\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (subIterator.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","id":94490,"modified_method":"@Override\r\n  public boolean hasNext() {\r\n    if (internalCollections != null) {\r\n      // THE FIRST TIME CREATE THE ITERATOR\r\n      iteratorOfInternalCollections = internalCollections.iterator();\r\n      internalCollections = null;\r\n      getNextPartial();\r\n    }\r\n\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (iteratorOfInternalCollections.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean getNextPartial() {\r\n    if (subIterator != null)\r\n      while (subIterator.hasNext()) {\r\n        final Collection<OIdentifiable> next = subIterator.next();\r\n        if (next != null && !next.isEmpty()) {\r\n          partialIterator = next.iterator();\r\n          return true;\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","id":94491,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  protected boolean getNextPartial() {\r\n    if (iteratorOfInternalCollections != null)\r\n      while (iteratorOfInternalCollections.hasNext()) {\r\n        final Object next = iteratorOfInternalCollections.next();\r\n        if (next != null) {\r\n          if (next instanceof Iterator<?>) {\r\n            if (((Iterator<OIdentifiable>) next).hasNext()) {\r\n              partialIterator = (Iterator<OIdentifiable>) next;\r\n              return true;\r\n            }\r\n          } else if (next instanceof Collection<?>) {\r\n            if (!((Collection<OIdentifiable>) next).isEmpty()) {\r\n              partialIterator = ((Collection<OIdentifiable>) next).iterator();\r\n              return true;\r\n            }\r\n          } else if (next instanceof OIdentifiable) {\r\n            final List<OIdentifiable> list = new ArrayList<OIdentifiable>();\r\n            list.add((OIdentifiable) next);\r\n            partialIterator = list.iterator();\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94492,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94493,"modified_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final HashSet<Object> result = new HashSet<Object>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          OMultiValue.add(result, value);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }","id":94494,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final List<Collection<OIdentifiable>> result = new ArrayList<Collection<OIdentifiable>>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          result.add((Collection<OIdentifiable>) value);\r\n        }\r\n      }\r\n\r\n      return new OFlattenIterator(result);\r\n    }\r\n  }","commit_id":"f7b0a93cf6788e821445a65cacd3e4560eff38d8","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      final int start = Math.min(skip, tempResult.size());\r\n      final int tot = Math.min(limit + start, tempResult.size());\r\n      for (int i = start; i < tot; ++i)\r\n        newList.add(tempResult.get(i));\r\n\r\n      tempResult.clear();\r\n      tempResult = newList;\r\n    }\r\n  }","id":94495,"modified_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      if (tempResult instanceof List<?>) {\r\n        final List<OIdentifiable> t = (List<OIdentifiable>) tempResult;\r\n        final int start = Math.min(skip, t.size());\r\n        final int tot = Math.min(limit + start, t.size());\r\n        for (int i = start; i < tot; ++i)\r\n          newList.add(t.get(i));\r\n\r\n        t.clear();\r\n      }\r\n\r\n      tempResult = newList;\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      tempResult.add(iRecord);\r\n    }\r\n  }","id":94496,"modified_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      ((Collection<OIdentifiable>) tempResult).add(iRecord);\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            tempResult.add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","id":94497,"modified_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            ((List<OIdentifiable>) tempResult).add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          tempResult.add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","id":94498,"modified_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          ((Collection<OIdentifiable>) tempResult).add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort(tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","id":94499,"modified_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort((List<? extends OIdentifiable>) tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            tempResult.add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              tempResult.add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      final List<OIdentifiable> finalResult = new ArrayList<OIdentifiable>();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            for (Object o : ((Collection<?>) fieldValue)) {\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>) fieldValue).entrySet()) {\r\n              final Object o = entry.getValue();\r\n\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","id":94500,"modified_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      OFlattenIterator finalResult = new OFlattenIterator();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            finalResult.add((Collection<OIdentifiable>) fieldValue);\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            finalResult.add(((Map<?, OIdentifiable>) fieldValue).values());\r\n          } else if (fieldValue instanceof OFlattenIterator) {\r\n            finalResult = (OFlattenIterator) fieldValue;\r\n          } else if (fieldValue instanceof OIdentifiable)\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean getNextPartial() {\r\n    if (subIterator != null)\r\n      while (subIterator.hasNext()) {\r\n        final Collection<OIdentifiable> next = subIterator.next();\r\n        if (next != null && !next.isEmpty()) {\r\n          partialIterator = next.iterator();\r\n          return true;\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","id":94501,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  protected boolean getNextPartial() {\r\n    if (iteratorOfInternalCollections != null)\r\n      while (iteratorOfInternalCollections.hasNext()) {\r\n        final Object next = iteratorOfInternalCollections.next();\r\n        if (next != null) {\r\n          if (next instanceof Iterator<?>) {\r\n            if (((Iterator<OIdentifiable>) next).hasNext()) {\r\n              partialIterator = (Iterator<OIdentifiable>) next;\r\n              return true;\r\n            }\r\n          } else if (next instanceof Collection<?>) {\r\n            if (!((Collection<OIdentifiable>) next).isEmpty()) {\r\n              partialIterator = ((Collection<OIdentifiable>) next).iterator();\r\n              return true;\r\n            }\r\n          } else if (next instanceof OIdentifiable) {\r\n            final List<OIdentifiable> list = new ArrayList<OIdentifiable>();\r\n            list.add((OIdentifiable) next);\r\n            partialIterator = list.iterator();\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n  public boolean hasNext() {\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (subIterator.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","id":94502,"modified_method":"@Override\r\n  public boolean hasNext() {\r\n    if (internalCollections != null) {\r\n      // THE FIRST TIME CREATE THE ITERATOR\r\n      iteratorOfInternalCollections = internalCollections.iterator();\r\n      internalCollections = null;\r\n      getNextPartial();\r\n    }\r\n\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (iteratorOfInternalCollections.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    subIterator = iterator;\r\n    getNextPartial();\r\n  }","id":94503,"modified_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    iteratorOfInternalCollections = iterator;\r\n    getNextPartial();\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94504,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94505,"modified_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final HashSet<Object> result = new HashSet<Object>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          OMultiValue.add(result, value);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }","id":94506,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final List<Collection<OIdentifiable>> result = new ArrayList<Collection<OIdentifiable>>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          result.add((Collection<OIdentifiable>) value);\r\n        }\r\n      }\r\n\r\n      return new OFlattenIterator(result);\r\n    }\r\n  }","commit_id":"0c806057e39e942fab0e4c170cf4a8151668686e","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      final int start = Math.min(skip, tempResult.size());\r\n      final int tot = Math.min(limit + start, tempResult.size());\r\n      for (int i = start; i < tot; ++i)\r\n        newList.add(tempResult.get(i));\r\n\r\n      tempResult.clear();\r\n      tempResult = newList;\r\n    }\r\n  }","id":94507,"modified_method":"protected void applyLimitAndSkip() {\r\n    if (tempResult != null && (limit > 0 || skip > 0)) {\r\n      final List<OIdentifiable> newList = new ArrayList<OIdentifiable>();\r\n\r\n      // APPLY LIMIT\r\n      if (tempResult instanceof List<?>) {\r\n        final List<OIdentifiable> t = (List<OIdentifiable>) tempResult;\r\n        final int start = Math.min(skip, t.size());\r\n        final int tot = Math.min(limit + start, t.size());\r\n        for (int i = start; i < tot; ++i)\r\n          newList.add(t.get(i));\r\n\r\n        t.clear();\r\n      }\r\n\r\n      tempResult = newList;\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      tempResult.add(iRecord);\r\n    }\r\n  }","id":94508,"modified_method":"protected void addResult(OIdentifiable iRecord) {\r\n    if (iRecord == null)\r\n      return;\r\n\r\n    if (projections != null || groupByFields != null && !groupByFields.isEmpty()) {\r\n      if (groupedResult == null) {\r\n        // APPLY PROJECTIONS IN LINE\r\n        iRecord = ORuntimeResult.getProjectionResult(resultCount, projections, context, iRecord);\r\n        if (iRecord == null)\r\n          return;\r\n      } else {\r\n        // AGGREGATION/GROUP BY\r\n        final ODocument doc = (ODocument) iRecord.getRecord();\r\n        Object fieldValue = null;\r\n        if (groupByFields != null && !groupByFields.isEmpty()) {\r\n          if (groupByFields.size() > 1) {\r\n            // MULTI-FIELD FROUP BY\r\n            final Object[] fields = new Object[groupByFields.size()];\r\n            for (int i = 0; i < groupByFields.size(); ++i)\r\n              fields[i] = doc.field(groupByFields.get(i));\r\n\r\n            fieldValue = fields;\r\n          } else\r\n            fieldValue = doc.field(groupByFields.get(0));\r\n        }\r\n\r\n        getProjectionGroup(fieldValue).applyRecord(iRecord);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (orderedFields == null && flattenTarget == null) {\r\n      // SEND THE RESULT INLINE\r\n      if (request.getResultListener() != null)\r\n        request.getResultListener().result(iRecord);\r\n\r\n    } else {\r\n\r\n      // COLLECT ALL THE RECORDS AND ORDER THEM AT THE END\r\n      if (tempResult == null)\r\n        tempResult = new ArrayList<OIdentifiable>();\r\n      ((Collection<OIdentifiable>) tempResult).add(iRecord);\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            tempResult.add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","id":94509,"modified_method":"private void handleGroupBy() {\r\n    if (groupedResult != null && tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n\r\n      for (Entry<Object, ORuntimeResult> g : groupedResult.entrySet()) {\r\n        if (g.getKey() != null || groupedResult.size() == 1) {\r\n          final ODocument doc = g.getValue().getResult();\r\n          if (doc != null && !doc.isEmpty())\r\n            ((List<OIdentifiable>) tempResult).add(doc);\r\n        }\r\n      }\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          tempResult.add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","id":94510,"modified_method":"protected boolean optimizeExecution() {\r\n    if ((compiledFilter == null || (compiledFilter != null && compiledFilter.getRootCondition() == null)) && groupByFields == null\r\n        && projections != null && projections.size() == 1) {\r\n      final Map.Entry<String, Object> entry = projections.entrySet().iterator().next();\r\n\r\n      if (entry.getValue() instanceof OSQLFunctionRuntime) {\r\n        final OSQLFunctionRuntime rf = (OSQLFunctionRuntime) entry.getValue();\r\n        if (rf.function instanceof OSQLFunctionCount && rf.configuredParameters.length == 1\r\n            && \"*\".equals(rf.configuredParameters[0])) {\r\n          long count = 0;\r\n\r\n          if (parsedTarget.getTargetClasses() != null) {\r\n            final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n            count = cls.count();\r\n          } else if (parsedTarget.getTargetClusters() != null) {\r\n            for (String cluster : parsedTarget.getTargetClusters().keySet()) {\r\n              count += getDatabase().countClusterElements(cluster);\r\n            }\r\n          } else if (parsedTarget.getTargetIndex() != null) {\r\n            count += getDatabase().getMetadata().getIndexManager().getIndex(parsedTarget.getTargetIndex()).getSize();\r\n          }\r\n\r\n          if (tempResult == null)\r\n            tempResult = new ArrayList<OIdentifiable>();\r\n          ((Collection<OIdentifiable>) tempResult).add(new ODocument().field(entry.getKey(), count));\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (orderedFields != null && !orderedFields.isEmpty()) {\r\n      if (parsedTarget.getTargetClasses() != null) {\r\n        final OClass cls = parsedTarget.getTargetClasses().keySet().iterator().next();\r\n        final OPair<String, String> orderByFirstField = orderedFields.iterator().next();\r\n        final OProperty p = cls.getProperty(orderByFirstField.getKey());\r\n        if (p != null) {\r\n          final Set<OIndex<?>> involvedIndexes = cls.getInvolvedIndexes(orderByFirstField.getKey());\r\n          if (involvedIndexes != null && !involvedIndexes.isEmpty()) {\r\n            for (OIndex<?> idx : involvedIndexes) {\r\n              if (idx.getKeyTypes().length == 1 && idx.supportsOrderedIterations()) {\r\n                if (orderByFirstField.getValue().equalsIgnoreCase(\"asc\"))\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesIterator();\r\n                else\r\n                  target = (Iterator<? extends OIdentifiable>) idx.valuesInverseIterator();\r\n                orderedFields = null;\r\n\r\n                fetchLimit = getQueryFetchLimit();\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort(tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","id":94511,"modified_method":"private void applyOrderBy() {\r\n    if (orderedFields == null)\r\n      return;\r\n\r\n    ODocumentHelper.sort((List<? extends OIdentifiable>) tempResult, orderedFields);\r\n    orderedFields.clear();\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            tempResult.add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              tempResult.add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      final List<OIdentifiable> finalResult = new ArrayList<OIdentifiable>();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            for (Object o : ((Collection<?>) fieldValue)) {\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            for (Map.Entry<?, ?> entry : ((Map<?, ?>) fieldValue).entrySet()) {\r\n              final Object o = entry.getValue();\r\n\r\n              if (o instanceof OIdentifiable)\r\n                finalResult.add(((OIdentifiable) o).getRecord());\r\n              else if (o instanceof List) {\r\n                List<OIdentifiable> list = (List<OIdentifiable>) o;\r\n                for (int i = 0; i < list.size(); i++)\r\n                  finalResult.add(list.get(i).getRecord());\r\n              }\r\n            }\r\n          } else\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","id":94512,"modified_method":"/**\r\n   * Extract the content of collections and/or links and put it as result\r\n   */\r\n  private void applyFlatten() {\r\n    if (flattenTarget == null)\r\n      return;\r\n\r\n    Object fieldValue;\r\n\r\n    if (tempResult == null) {\r\n      tempResult = new ArrayList<OIdentifiable>();\r\n      if (flattenTarget instanceof OSQLFilterItemVariable) {\r\n        Object r = ((OSQLFilterItemVariable) flattenTarget).getValue(null, context);\r\n        if (r != null) {\r\n          if (r instanceof OIdentifiable)\r\n            ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) r);\r\n          else if (OMultiValue.isMultiValue(r)) {\r\n            for (Object o : OMultiValue.getMultiValueIterable(r))\r\n              ((Collection<OIdentifiable>) tempResult).add((OIdentifiable) o);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      OFlattenIterator finalResult = new OFlattenIterator();\r\n      for (OIdentifiable id : tempResult) {\r\n        if (flattenTarget instanceof OSQLFilterItem)\r\n          fieldValue = ((OSQLFilterItem) flattenTarget).getValue(id.getRecord(), context);\r\n        else if (flattenTarget instanceof OSQLFunctionRuntime)\r\n          fieldValue = ((OSQLFunctionRuntime) flattenTarget).getResult();\r\n        else\r\n          fieldValue = flattenTarget.toString();\r\n\r\n        if (fieldValue != null)\r\n          if (fieldValue instanceof Collection<?>) {\r\n            finalResult.add((Collection<OIdentifiable>) fieldValue);\r\n          } else if (fieldValue instanceof Map<?, ?>) {\r\n            finalResult.add(((Map<?, OIdentifiable>) fieldValue).values());\r\n          } else if (fieldValue instanceof OFlattenIterator) {\r\n            finalResult = (OFlattenIterator) fieldValue;\r\n          } else if (fieldValue instanceof OIdentifiable)\r\n            finalResult.add((OIdentifiable) fieldValue);\r\n      }\r\n      tempResult = finalResult;\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n  public boolean hasNext() {\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (subIterator.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","id":94513,"modified_method":"@Override\r\n  public boolean hasNext() {\r\n    if (internalCollections != null) {\r\n      // THE FIRST TIME CREATE THE ITERATOR\r\n      iteratorOfInternalCollections = internalCollections.iterator();\r\n      internalCollections = null;\r\n      getNextPartial();\r\n    }\r\n\r\n    if (partialIterator == null)\r\n      return false;\r\n\r\n    if (partialIterator.hasNext())\r\n      return true;\r\n    else if (iteratorOfInternalCollections.hasNext())\r\n      return getNextPartial();\r\n\r\n    return false;\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    subIterator = iterator;\r\n    getNextPartial();\r\n  }","id":94514,"modified_method":"public OFlattenIterator(final Iterator<? extends Collection<OIdentifiable>> iterator) {\r\n    iteratorOfInternalCollections = iterator;\r\n    getNextPartial();\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"protected boolean getNextPartial() {\r\n    if (subIterator != null)\r\n      while (subIterator.hasNext()) {\r\n        final Collection<OIdentifiable> next = subIterator.next();\r\n        if (next != null && !next.isEmpty()) {\r\n          partialIterator = next.iterator();\r\n          return true;\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","id":94515,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  protected boolean getNextPartial() {\r\n    if (iteratorOfInternalCollections != null)\r\n      while (iteratorOfInternalCollections.hasNext()) {\r\n        final Object next = iteratorOfInternalCollections.next();\r\n        if (next != null) {\r\n          if (next instanceof Iterator<?>) {\r\n            if (((Iterator<OIdentifiable>) next).hasNext()) {\r\n              partialIterator = (Iterator<OIdentifiable>) next;\r\n              return true;\r\n            }\r\n          } else if (next instanceof Collection<?>) {\r\n            if (!((Collection<OIdentifiable>) next).isEmpty()) {\r\n              partialIterator = ((Collection<OIdentifiable>) next).iterator();\r\n              return true;\r\n            }\r\n          } else if (next instanceof OIdentifiable) {\r\n            final List<OIdentifiable> list = new ArrayList<OIdentifiable>();\r\n            list.add((OIdentifiable) next);\r\n            partialIterator = list.iterator();\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n    return false;\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94516,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n  public Iterator<OIdentifiable> valuesInverseIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(((OMVRBTree.Values) map.values()).inverseIterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator<OIdentifiable>(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","id":94517,"modified_method":"public Iterator<OIdentifiable> valuesIterator() {\r\n\r\n    acquireExclusiveLock();\r\n    try {\r\n\r\n      return new OFlattenIterator(map.values().iterator());\r\n\r\n    } finally {\r\n      releaseExclusiveLock();\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final HashSet<Object> result = new HashSet<Object>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          OMultiValue.add(result, value);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }","id":94518,"modified_method":"@SuppressWarnings(\"unchecked\")\r\n  public Object execute(final OIdentifiable iCurrentRecord, ODocument iCurrentResult, final Object[] iParameters,\r\n      OCommandContext iContext) {\r\n    if (iParameters.length == 1) {\r\n      // AGGREGATION MODE (STATEFULL)\r\n      Object value = iParameters[0];\r\n      if (value != null) {\r\n\r\n        if (value instanceof OSQLFilterItemVariable)\r\n          value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n        if (context == null)\r\n          context = new HashSet<Object>();\r\n\r\n        OMultiValue.add(context, value);\r\n      }\r\n\r\n      return context;\r\n    } else {\r\n      // IN-LINE MODE (STATELESS)\r\n      final List<Collection<OIdentifiable>> result = new ArrayList<Collection<OIdentifiable>>();\r\n      for (Object value : iParameters) {\r\n        if (value != null) {\r\n          if (value instanceof OSQLFilterItemVariable)\r\n            value = ((OSQLFilterItemVariable) value).getValue(iCurrentRecord, iContext);\r\n\r\n          result.add((Collection<OIdentifiable>) value);\r\n        }\r\n      }\r\n\r\n      return new OFlattenIterator(result);\r\n    }\r\n  }","commit_id":"ed5aa8d53111ccd26f99c75a148698587d074c15","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public boolean beforeCharTyped(final char c, final Project project, final Editor editor, final PsiFile editedFile, final FileType fileType) {\n    if (c == '>' && editedFile instanceof XmlFile) {\n      PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n      XmlFile file = (XmlFile)PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n      FileViewProvider provider = file.getViewProvider();\n      final int offset = editor.getCaretModel().getOffset();\n\n      PsiElement element;\n\n      if (offset < editor.getDocument().getTextLength()) {\n        element = provider.findElementAt(offset, XMLLanguage.class);\n        if (!(element instanceof PsiWhiteSpace)) {\n          boolean nonAcceptableDelimiter = true;\n\n          if (element instanceof XmlToken) {\n            IElementType tokenType = ((XmlToken)element).getTokenType();\n\n            if (tokenType == XmlTokenType.XML_START_TAG_START ||\n                tokenType == XmlTokenType.XML_END_TAG_START\n               ) {\n              if (offset > 0) {\n                PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class);\n\n                if (previousElement instanceof XmlToken) {\n                  tokenType = ((XmlToken)previousElement).getTokenType();\n                  element = previousElement;\n                  nonAcceptableDelimiter = false;\n                }\n              }\n            }\n\n            if (tokenType == XmlTokenType.XML_TAG_END ||\n                tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1\n               ) {\n              editor.getCaretModel().moveToOffset(offset + 1);\n              editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n              return true;\n            }\n          }\n          if (nonAcceptableDelimiter) return false;\n        } else {\n          // check if right after empty end\n          PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class);\n          if (previousElement instanceof XmlToken) {\n            final IElementType tokenType = ((XmlToken)previousElement).getTokenType();\n\n            if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) {\n              return true;\n            }\n          }\n        }\n\n        PsiElement parent = element.getParent();\n        if (parent instanceof XmlText) {\n          final String text = parent.getText();\n          // check /\n          final int index = offset - parent.getTextOffset() - 1;\n\n          if (index >= 0 && text.charAt(index)=='/') {\n            return false; // already seen /\n          }\n          element = parent.getPrevSibling();\n        } else if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag)) {\n          element = parent;\n        } else if (parent instanceof XmlAttributeValue) {\n          element = parent;\n        }\n      }\n      else {\n        element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class);\n        if (element == null) return false;\n        element = element.getParent();\n      }\n\n      if (element instanceof XmlAttributeValue) {\n        element = element.getParent().getParent();\n      }\n\n      while(element instanceof PsiWhiteSpace) element = element.getPrevSibling();\n      if (element == null) return false;\n      if (!(element instanceof XmlTag)) {\n        if (element instanceof XmlTokenImpl &&\n            element.getPrevSibling() !=null &&\n            element.getPrevSibling().getText().equals(\"<\")\n           ) {\n          // tag is started and there is another text in the end\n          editor.getDocument().insertString(offset, \"<\/\" + element.getText() + \">\");\n        }\n        return false;\n      }\n\n      XmlTag tag = (XmlTag)element;\n      if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_TAG_END) != null) return false;\n      if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_EMPTY_ELEMENT_END) != null) return false;\n      if (tag instanceof JspXmlTagBase) return false;\n\n      final String name = tag.getName();\n      if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name)) return false;\n      if (\"\".equals(name)) return false;\n\n      int tagOffset = tag.getTextRange().getStartOffset();\n      HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(tagOffset);\n      if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), fileType, iterator, true,true)) return false;\n\n      editor.getDocument().insertString(offset, \"<\/\" + name + \">\");\n    }\n    return false;\n  }","id":94519,"modified_method":"public boolean beforeCharTyped(final char c, final Project project, final Editor editor, final PsiFile editedFile, final FileType fileType) {\n    if (c == '>' && editedFile instanceof XmlFile) {\n      PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n      XmlFile file = (XmlFile)PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n      FileViewProvider provider = file.getViewProvider();\n      int offset = editor.getCaretModel().getOffset();\n\n      PsiElement element;\n\n      if (offset < editor.getDocument().getTextLength()) {\n        element = provider.findElementAt(offset, XMLLanguage.class);\n        if (!(element instanceof PsiWhiteSpace)) {\n          boolean nonAcceptableDelimiter = true;\n\n          if (element instanceof XmlToken) {\n            IElementType tokenType = ((XmlToken)element).getTokenType();\n\n            if (tokenType == XmlTokenType.XML_START_TAG_START ||\n                tokenType == XmlTokenType.XML_END_TAG_START\n               ) {\n              if (offset > 0) {\n                PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class);\n\n                if (previousElement instanceof XmlToken) {\n                  tokenType = ((XmlToken)previousElement).getTokenType();\n                  element = previousElement;\n                  nonAcceptableDelimiter = false;\n                }\n              }\n            }\n\n            if (tokenType == XmlTokenType.XML_TAG_END ||\n                tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1\n               ) {\n              editor.getCaretModel().moveToOffset(offset + 1);\n              editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n              return true;\n            }\n          }\n          if (nonAcceptableDelimiter) return false;\n        } else {\n          // check if right after empty end\n          PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class);\n          if (previousElement instanceof XmlToken) {\n            final IElementType tokenType = ((XmlToken)previousElement).getTokenType();\n\n            if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) {\n              return true;\n            }\n          }\n        }\n\n        PsiElement parent = element.getParent();\n        if (parent instanceof XmlText) {\n          final String text = parent.getText();\n          // check /\n          final int index = offset - parent.getTextOffset() - 1;\n\n          if (index >= 0 && text.charAt(index)=='/') {\n            return false; // already seen /\n          }\n          element = parent.getPrevSibling();\n        } else if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag)) {\n          element = parent;\n        } else if (parent instanceof XmlAttributeValue) {\n          element = parent;\n        }\n      }\n      else {\n        element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class);\n        if (element == null) return false;\n        element = element.getParent();\n      }\n\n      if (element instanceof XmlAttributeValue) {\n        element = element.getParent().getParent();\n      }\n\n      while(element instanceof PsiWhiteSpace) element = element.getPrevSibling();\n      if (element == null) return false;\n      if (!(element instanceof XmlTag)) {\n        if (element instanceof XmlTokenImpl &&\n            element.getPrevSibling() !=null &&\n            element.getPrevSibling().getText().equals(\"<\")\n           ) {\n          // tag is started and there is another text in the end\n          editor.getDocument().insertString(offset, \"<\/\" + element.getText() + \">\");\n        }\n        return false;\n      }\n\n      XmlTag tag = (XmlTag)element;\n      if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_TAG_END) != null) return false;\n      if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_EMPTY_ELEMENT_END) != null) return false;\n      if (tag instanceof JspXmlTagBase) return false;\n\n      final String name = tag.getName();\n      if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name)) return false;\n      if (\"\".equals(name)) return false;\n\n      int tagOffset = tag.getTextRange().getStartOffset();\n      HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(tagOffset);\n      if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), fileType, iterator, true,true)) return false;\n\n      boolean insertedCData = false;\n\n      if (name.indexOf(':') != -1) {  // optimization\n        final XmlElementDescriptor descriptor = tag.getDescriptor();\n\n        if (descriptor instanceof XmlElementDescriptorWithCDataContent) {\n          final XmlElementDescriptorWithCDataContent cDataContainer = (XmlElementDescriptorWithCDataContent)descriptor;\n\n          if (cDataContainer.requiresCdataBracesInContext(tag)) {\n            final String cDataStart = \"><![CDATA[\\n\";\n            final String inserted = cDataStart + \"\\n]]>\";\n            editor.getDocument().insertString(offset, inserted);\n            final int newoffset = offset + cDataStart.length();\n            editor.getCaretModel().moveToOffset(newoffset);\n            offset += inserted.length();\n            insertedCData = true;\n          }\n        }\n      }\n\n      editor.getDocument().insertString(offset, \"<\/\" + name + \">\");\n\n      if (insertedCData) {\n        PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());\n        try {\n          CodeStyleManager.getInstance(project).adjustLineIndent(file, editor.getCaretModel().getOffset());\n        }\n        catch (IncorrectOperationException e) {\n          LOG.error(e);\n        }\n      }\n      return insertedCData;\n    }\n    return false;\n  }","commit_id":"42b929f31d112895935f5b830d028adf26cf419b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void insertIncompleteTag(char completionChar, final Editor editor, Project project, XmlElementDescriptor descriptor, XmlTag tag) {\n    TemplateManager templateManager = TemplateManager.getInstance(project);\n    Template template = templateManager.createTemplate(\"\", \"\");\n\n    template.setToIndent(true);\n\n    // temp code\n    final Language language = tag.getContainingFile().getLanguage();\n    boolean htmlCode = language == StdLanguages.HTML || language == StdLanguages.XHTML;\n    boolean jspCode = language == StdLanguages.JSP || language == StdLanguages.JSPX;\n    Set<String> notRequiredAttributes = Collections.emptySet();\n\n    if (tag instanceof HtmlTag) {\n      final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);\n      LocalInspectionToolWrapper localInspectionToolWrapper = (LocalInspectionToolWrapper) profile.getInspectionTool(\n        RequiredAttributesInspection.SHORT_NAME);\n      RequiredAttributesInspection inspection = localInspectionToolWrapper != null ?\n        (RequiredAttributesInspection) localInspectionToolWrapper.getTool(): null;\n\n      if (inspection != null) {\n        StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries(0));\n        notRequiredAttributes = new HashSet<String>(1);\n\n        while(tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken());\n      }\n    }\n\n    boolean toReformat = true;\n    boolean weInsertedSomeCodeThatCouldBeInvalidated = false;\n    if (htmlCode || jspCode) {\n      toReformat = false;\n    }\n    template.setToReformat(toReformat);\n\n    XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors(tag);\n    StringBuilder indirectRequiredAttrs = null;\n\n    for (XmlAttributeDescriptor attributeDecl : attributes) {\n      String attributeName = attributeDecl.getName(tag);\n\n      if (attributeDecl.isRequired() && tag.getAttributeValue(attributeName) == null) {\n        if (!notRequiredAttributes.contains(attributeName)) {\n          if (!(attributeDecl instanceof TldAttributeDescriptor) || !((TldAttributeDescriptor)attributeDecl).isIndirectSyntax()) {\n            template.addTextSegment(\" \" + attributeName + \"=\\\"\");\n            Expression expression = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n            template.addVariable(attributeName, expression, expression, true);\n            template.addTextSegment(\"\\\"\");\n          } else {\n            if (indirectRequiredAttrs == null) indirectRequiredAttrs = new StringBuilder();\n            indirectRequiredAttrs.append(\"\\n<jsp:attribute name=\\\"\").append(attributeName).append(\"\\\"><\/jsp:attribute>\\n\");\n          }\n        }\n      }\n      else if (attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) {\n        template.addTextSegment(\" \" + attributeName + \"=\\\"\" + attributeDecl.getDefaultValue() + \"\\\"\");\n      }\n    }\n\n    if (completionChar == '>' || (completionChar == '/' && indirectRequiredAttrs != null)) {\n      template.addTextSegment(\">\");\n      if (indirectRequiredAttrs != null) template.addTextSegment(indirectRequiredAttrs.toString());\n      template.addEndVariable();\n\n      if (!(tag instanceof HtmlTag) || !HtmlUtil.isSingleHtmlTag(tag.getName())) {\n        template.addTextSegment(\"<\/\");\n        template.addTextSegment(descriptor.getName(tag));\n        template.addTextSegment(\">\");\n      }\n    }\n    else if (completionChar == '/') {\n      template.addTextSegment(\"/>\");\n    } else if (completionChar == ' ' && template.getSegmentsCount() == 0) {\n      template.addTextSegment(\" \");\n      if (!isTagFromHtml(tag) || !HtmlUtil.isTagWithoutAttributes(tag.getName())) {\n        final MacroCallNode completeAttrExpr = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n        template.addVariable(\"attrComplete\", completeAttrExpr,completeAttrExpr,true);\n        weInsertedSomeCodeThatCouldBeInvalidated = true;\n        template.addTextSegment(\"=\\\"\");\n        template.addEndVariable();\n        template.addTextSegment(\"\\\"\");\n      }\n    }\n\n    final boolean weInsertedSomeCodeThatCouldBeInvalidated1 = weInsertedSomeCodeThatCouldBeInvalidated;\n    templateManager.startTemplate(editor, template, new TemplateEditingListener() {\n      public void templateFinished(final Template template) {\n        final int offset = editor.getCaretModel().getOffset();\n\n        if (weInsertedSomeCodeThatCouldBeInvalidated1 &&\n            offset >= 3 &&\n            editor.getDocument().getCharsSequence().charAt(offset - 3) == '/') {\n          editor.getDocument().replaceString(offset - 2, offset + 1, \">\");\n        }\n      }\n\n      public void templateCancelled(final Template template) {\n        //final int offset = editor.getCaretModel().getOffset();\n        //if (weInsertedSomeCodeThatCouldBeInvalidated1) {}\n      }\n    });\n  }","id":94520,"modified_method":"private static void insertIncompleteTag(char completionChar, final Editor editor, Project project, XmlElementDescriptor descriptor, XmlTag tag) {\n    TemplateManager templateManager = TemplateManager.getInstance(project);\n    Template template = templateManager.createTemplate(\"\", \"\");\n\n    template.setToIndent(true);\n\n    // temp code\n    final Language language = tag.getContainingFile().getLanguage();\n    boolean htmlCode = language == StdLanguages.HTML || language == StdLanguages.XHTML;\n    boolean jspCode = language == StdLanguages.JSP || language == StdLanguages.JSPX;\n    Set<String> notRequiredAttributes = Collections.emptySet();\n\n    if (tag instanceof HtmlTag) {\n      final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);\n      LocalInspectionToolWrapper localInspectionToolWrapper = (LocalInspectionToolWrapper) profile.getInspectionTool(\n        RequiredAttributesInspection.SHORT_NAME);\n      RequiredAttributesInspection inspection = localInspectionToolWrapper != null ?\n        (RequiredAttributesInspection) localInspectionToolWrapper.getTool(): null;\n\n      if (inspection != null) {\n        StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries(0));\n        notRequiredAttributes = new HashSet<String>(1);\n\n        while(tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken());\n      }\n    }\n\n    boolean toReformat = true;\n    boolean weInsertedSomeCodeThatCouldBeInvalidated = false;\n    if (htmlCode || jspCode) {\n      toReformat = false;\n    }\n    template.setToReformat(toReformat);\n\n    XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors(tag);\n    StringBuilder indirectRequiredAttrs = null;\n\n    for (XmlAttributeDescriptor attributeDecl : attributes) {\n      String attributeName = attributeDecl.getName(tag);\n\n      if (attributeDecl.isRequired() && tag.getAttributeValue(attributeName) == null) {\n        if (!notRequiredAttributes.contains(attributeName)) {\n          if (!(attributeDecl instanceof TldAttributeDescriptor) || !((TldAttributeDescriptor)attributeDecl).isIndirectSyntax()) {\n            template.addTextSegment(\" \" + attributeName + \"=\\\"\");\n            Expression expression = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n            template.addVariable(attributeName, expression, expression, true);\n            template.addTextSegment(\"\\\"\");\n          } else {\n            if (indirectRequiredAttrs == null) indirectRequiredAttrs = new StringBuilder();\n            indirectRequiredAttrs.append(\"\\n<jsp:attribute name=\\\"\").append(attributeName).append(\"\\\"><\/jsp:attribute>\\n\");\n          }\n        }\n      }\n      else if (attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) {\n        template.addTextSegment(\" \" + attributeName + \"=\\\"\" + attributeDecl.getDefaultValue() + \"\\\"\");\n      }\n    }\n\n    if (completionChar == '>' || (completionChar == '/' && indirectRequiredAttrs != null)) {\n      boolean toInsertCDataEnd = false;\n\n      if (descriptor instanceof XmlElementDescriptorWithCDataContent) {\n        final XmlElementDescriptorWithCDataContent cDataContainer = (XmlElementDescriptorWithCDataContent)descriptor;\n\n        if (cDataContainer.requiresCdataBracesInContext(tag)) {\n          template.addTextSegment(\"<![CDATA[\\n\");\n          toInsertCDataEnd = true;\n        }\n      }\n\n      if (indirectRequiredAttrs != null) template.addTextSegment(indirectRequiredAttrs.toString());\n      template.addEndVariable();\n\n      if (toInsertCDataEnd) template.addTextSegment(\"\\n]]>\");\n\n      if (!(tag instanceof HtmlTag) || !HtmlUtil.isSingleHtmlTag(tag.getName())) {\n        template.addTextSegment(\"<\/\");\n        template.addTextSegment(descriptor.getName(tag));\n        template.addTextSegment(\">\");\n      }\n    }\n    else if (completionChar == '/') {\n      template.addTextSegment(\"/>\");\n    } else if (completionChar == ' ' && template.getSegmentsCount() == 0) {\n      template.addTextSegment(\" \");\n      if (!isTagFromHtml(tag) || !HtmlUtil.isTagWithoutAttributes(tag.getName())) {\n        final MacroCallNode completeAttrExpr = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n        template.addVariable(\"attrComplete\", completeAttrExpr,completeAttrExpr,true);\n        weInsertedSomeCodeThatCouldBeInvalidated = true;\n        template.addTextSegment(\"=\\\"\");\n        template.addEndVariable();\n        template.addTextSegment(\"\\\"\");\n      }\n    }\n\n    final boolean weInsertedSomeCodeThatCouldBeInvalidated1 = weInsertedSomeCodeThatCouldBeInvalidated;\n    templateManager.startTemplate(editor, template, new TemplateEditingListener() {\n      public void templateFinished(final Template template) {\n        final int offset = editor.getCaretModel().getOffset();\n\n        if (weInsertedSomeCodeThatCouldBeInvalidated1 &&\n            offset >= 3 &&\n            editor.getDocument().getCharsSequence().charAt(offset - 3) == '/') {\n          editor.getDocument().replaceString(offset - 2, offset + 1, \">\");\n        }\n      }\n\n      public void templateCancelled(final Template template) {\n        //final int offset = editor.getCaretModel().getOffset();\n        //if (weInsertedSomeCodeThatCouldBeInvalidated1) {}\n      }\n    });\n  }","commit_id":"42b929f31d112895935f5b830d028adf26cf419b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void invoke(final Project project, final Editor editor, PsiFile file) {\n    if (!CodeInsightUtil.prepareFileForWrite(file)) return;\n    ASTNode treeElement = SourceTreeToPsiMap.psiElementToTree(myTag);\n    PsiElement anchor = SourceTreeToPsiMap.treeElementToPsi(\n      XmlChildRole.EMPTY_TAG_END_FINDER.findChild(treeElement)\n    );\n\n    if (anchor == null) {\n      anchor = SourceTreeToPsiMap.treeElementToPsi(\n        XmlChildRole.START_TAG_END_FINDER.findChild(treeElement)\n      );\n    }\n\n    if (anchor == null) return;\n\n    final Template template = TemplateManager.getInstance(project).createTemplate(\"\", \"\");\n    template.addTextSegment(\" \" + myAttrName + \"=\\\"\");\n\n    Expression expression = new Expression() {\n      TextResult result = new TextResult(\"\");\n\n      public Result calculateResult(ExpressionContext context) {\n        return result;\n      }\n\n      public Result calculateQuickResult(ExpressionContext context) {\n        return null;\n      }\n\n      public LookupItem[] calculateLookupItems(ExpressionContext context) {\n        final LookupItem items[] = new LookupItem[myValues == null ? 0 : myValues.length];\n\n        if (myValues != null) {\n          for (int i = 0; i < items.length; i++) {\n            items[i] = LookupItemUtil.objectToLookupItem(myValues[i]);\n          }\n        }\n        return items;\n      }\n    };\n    template.addVariable(NAME_TEMPLATE_VARIABLE, expression, expression, true);\n    template.addTextSegment(\"\\\"\");\n\n    final PsiElement anchor1 = anchor;\n\n    final Runnable runnable = new Runnable() {\n      public void run() {\n        ApplicationManager.getApplication().runWriteAction(\n          new Runnable() {\n            public void run() {\n              int textOffset = anchor1.getTextOffset();\n              editor.getCaretModel().moveToOffset(textOffset);\n              TemplateManager.getInstance(project).startTemplate(editor, template, null);\n            }\n          }\n        );\n      }\n    };\n\n    if (!ApplicationManager.getApplication().isUnitTestMode()) {\n      Runnable commandRunnable = new Runnable() {\n        public void run() {\n          CommandProcessor.getInstance().executeCommand(\n            project,\n            runnable,\n            getText(),\n            getFamilyName()\n          );\n        }\n      };\n\n      ApplicationManager.getApplication().invokeLater(commandRunnable);\n    }\n    else {\n      runnable.run();\n    }\n  }","id":94521,"modified_method":"public void invoke(final Project project, final Editor editor, PsiFile file) {\n    if (!CodeInsightUtil.prepareFileForWrite(file)) return;\n    ASTNode treeElement = SourceTreeToPsiMap.psiElementToTree(myTag);\n    boolean indirectSyntax = false;\n\n    final XmlElementDescriptor descriptor = myTag.getDescriptor();\n    if (descriptor instanceof JspElementDescriptor) {\n      final XmlAttributeDescriptor attrDescriptor = descriptor.getAttributeDescriptor(myAttrName);\n      if (attrDescriptor instanceof TldAttributeDescriptor && ((TldAttributeDescriptor)attrDescriptor).isIndirectSyntax()) {\n        indirectSyntax = true;\n      }\n    }\n\n    PsiElement anchor = SourceTreeToPsiMap.treeElementToPsi(\n      XmlChildRole.EMPTY_TAG_END_FINDER.findChild(treeElement)\n    );\n\n    final boolean anchorIsEmptyTag = anchor != null;\n\n    if (anchor == null) {\n      anchor = SourceTreeToPsiMap.treeElementToPsi(\n        XmlChildRole.START_TAG_END_FINDER.findChild(treeElement)\n      );\n    }\n\n    if (anchor == null) return;\n\n    final Template template = TemplateManager.getInstance(project).createTemplate(\"\", \"\");\n    if (indirectSyntax) {\n      if (anchorIsEmptyTag) template.addTextSegment(\">\");\n      template.addTextSegment(\"<jsp:attribute name=\\\"\" + myAttrName + \"\\\">\");\n    } else {\n      template.addTextSegment(\" \" + myAttrName + \"=\\\"\");\n    }\n\n    Expression expression = new Expression() {\n      TextResult result = new TextResult(\"\");\n\n      public Result calculateResult(ExpressionContext context) {\n        return result;\n      }\n\n      public Result calculateQuickResult(ExpressionContext context) {\n        return null;\n      }\n\n      public LookupItem[] calculateLookupItems(ExpressionContext context) {\n        final LookupItem items[] = new LookupItem[myValues == null ? 0 : myValues.length];\n\n        if (myValues != null) {\n          for (int i = 0; i < items.length; i++) {\n            items[i] = LookupItemUtil.objectToLookupItem(myValues[i]);\n          }\n        }\n        return items;\n      }\n    };\n    template.addVariable(NAME_TEMPLATE_VARIABLE, expression, expression, true);\n    if (indirectSyntax) {\n      template.addTextSegment(\"<\/jsp:attribute>\");\n      template.addEndVariable();\n      if (anchorIsEmptyTag) template.addTextSegment(\"<\/\" + myTag.getName() + \">\");\n    } else {\n      template.addTextSegment(\"\\\"\");\n    }\n\n    final PsiElement anchor1 = anchor;\n\n    final boolean indirectSyntax1 = indirectSyntax;\n    final Runnable runnable = new Runnable() {\n      public void run() {\n        ApplicationManager.getApplication().runWriteAction(\n          new Runnable() {\n            public void run() {\n              int textOffset = anchor1.getTextOffset();\n              if (!anchorIsEmptyTag && indirectSyntax1) ++textOffset;\n              editor.getCaretModel().moveToOffset(textOffset);\n              if (anchorIsEmptyTag) {\n                editor.getDocument().deleteString(textOffset,textOffset + 2);\n              }\n              TemplateManager.getInstance(project).startTemplate(editor, template, null);\n            }\n          }\n        );\n      }\n    };\n\n    if (!ApplicationManager.getApplication().isUnitTestMode()) {\n      Runnable commandRunnable = new Runnable() {\n        public void run() {\n          CommandProcessor.getInstance().executeCommand(\n            project,\n            runnable,\n            getText(),\n            getFamilyName()\n          );\n        }\n      };\n\n      ApplicationManager.getApplication().invokeLater(commandRunnable);\n    }\n    else {\n      runnable.run();\n    }\n  }","commit_id":"c2145645c94487e1bf650780878a2a5fadff3d78","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Object[] getVariants() {\n      final List<String> variants = new ArrayList<String>();\n\n      final XmlElementDescriptor parentDescriptor = getParent().getDescriptor();\n      if (parentDescriptor != null){\n        final XmlTag declarationTag = getParent();\n        final XmlAttribute[] attributes = declarationTag.getAttributes();\n        XmlAttributeDescriptor[] descriptors = parentDescriptor.getAttributesDescriptors();\n\n        final XmlAttributeImpl context = XmlAttributeImpl.this;\n\n        descriptors = HtmlUtil.appendHtmlSpecificAttributeCompletions(declarationTag, descriptors, context);\n\n        outer:\n        for (XmlAttributeDescriptor descriptor : descriptors) {\n          for (final XmlAttribute attribute : attributes) {\n            if (attribute == context) continue;\n            final String name = attribute.getName();\n            if (name.equals(descriptor.getName())) continue outer;\n          }\n          variants.add(descriptor.getName());\n        }\n      }\n      return variants.toArray();\n    }","id":94522,"modified_method":"public Object[] getVariants() {\n      final List<String> variants = new ArrayList<String>();\n\n      final XmlElementDescriptor parentDescriptor = getParent().getDescriptor();\n      if (parentDescriptor != null){\n        final XmlTag declarationTag = getParent();\n        final XmlAttribute[] attributes = declarationTag.getAttributes();\n        XmlAttributeDescriptor[] descriptors = parentDescriptor.getAttributesDescriptors();\n\n        final XmlAttributeImpl context = XmlAttributeImpl.this;\n\n        descriptors = HtmlUtil.appendHtmlSpecificAttributeCompletions(declarationTag, descriptors, context);\n\n        outer:\n        for (XmlAttributeDescriptor descriptor : descriptors) {\n          if (descriptor instanceof TldAttributeDescriptor &&\n              ((TldAttributeDescriptor)descriptor).isIndirectSyntax()\n             ) {\n            continue;\n          }\n          \n          for (final XmlAttribute attribute : attributes) {\n            if (attribute == context) continue;\n            final String name = attribute.getName();\n            if (name.equals(descriptor.getName())) continue outer;\n          }\n          variants.add(descriptor.getName());\n        }\n      }\n      return variants.toArray();\n    }","commit_id":"c2145645c94487e1bf650780878a2a5fadff3d78","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void insertIncompleteTag(char completionChar, Editor editor, Project project, XmlElementDescriptor descriptor, XmlTag tag) {\n      TemplateManager templateManager = TemplateManager.getInstance(project);\n      Template template = templateManager.createTemplate(\"\", \"\");\n\n      template.setToIndent(true);\n\n      // temp code\n      FileType fileType = tag.getContainingFile().getFileType();\n      boolean htmlCode = fileType == StdFileTypes.HTML || fileType == StdFileTypes.XHTML;\n      boolean jspCode = fileType == StdFileTypes.JSP || fileType == StdFileTypes.JSPX;\n      Set<String> notRequiredAttributes = Collections.emptySet();\n\n      if (tag instanceof HtmlTag) {\n        final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);\n        LocalInspectionToolWrapper localInspectionToolWrapper = (LocalInspectionToolWrapper) profile.getInspectionTool(RequiredAttributesInspection.SHORT_NAME);\n        RequiredAttributesInspection inspection = localInspectionToolWrapper != null ?\n          (RequiredAttributesInspection) localInspectionToolWrapper.getTool(): null;\n\n        if (inspection != null) {\n          StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries(0));\n          notRequiredAttributes = new HashSet<String>(1);\n\n          while(tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken());\n        }\n      }\n\n      boolean toReformat = true;\n      if (htmlCode || jspCode) {\n        toReformat = false;\n      }\n      template.setToReformat(toReformat);\n\n      XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors();\n\n      for (XmlAttributeDescriptor attributeDecl : attributes) {\n        String attributeName = attributeDecl.getName(tag);\n\n        if (attributeDecl.isRequired()) {\n          if (!notRequiredAttributes.contains(attributeName)) {\n            template.addTextSegment(\" \" + attributeName + \"=\\\"\");\n            Expression expression = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n            template.addVariable(attributeName, expression, expression, true);\n            template.addTextSegment(\"\\\"\");\n          }\n        }\n        else if (attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) {\n          template.addTextSegment(\" \" + attributeName + \"=\\\"\" + attributeDecl.getDefaultValue() + \"\\\"\");\n        }\n      }\n\n      if (completionChar == '>') {\n        template.addTextSegment(\">\");\n        template.addEndVariable();\n\n        if (!(tag instanceof HtmlTag) || !HtmlUtil.isSingleHtmlTag(tag.getName())) {\n          template.addTextSegment(\"<\/\");\n          template.addTextSegment(descriptor.getName(tag));\n          template.addTextSegment(\">\");\n        }\n      }\n      else if (completionChar == '/') {\n        template.addTextSegment(\"/>\");\n      }\n      else if (completionChar == ' ') {\n        template.addTextSegment(\" \");\n        final MacroCallNode completeAttrExpr = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n        template.addVariable(\"attrComplete\", completeAttrExpr,completeAttrExpr,true);\n        //template.addEndVariable();\n      }\n\n      templateManager.startTemplate(editor, template);\n    }","id":94523,"modified_method":"private void insertIncompleteTag(char completionChar, Editor editor, Project project, XmlElementDescriptor descriptor, XmlTag tag) {\n      TemplateManager templateManager = TemplateManager.getInstance(project);\n      Template template = templateManager.createTemplate(\"\", \"\");\n\n      template.setToIndent(true);\n\n      // temp code\n      FileType fileType = tag.getContainingFile().getFileType();\n      boolean htmlCode = fileType == StdFileTypes.HTML || fileType == StdFileTypes.XHTML;\n      boolean jspCode = fileType == StdFileTypes.JSP || fileType == StdFileTypes.JSPX;\n      Set<String> notRequiredAttributes = Collections.emptySet();\n\n      if (tag instanceof HtmlTag) {\n        final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);\n        LocalInspectionToolWrapper localInspectionToolWrapper = (LocalInspectionToolWrapper) profile.getInspectionTool(RequiredAttributesInspection.SHORT_NAME);\n        RequiredAttributesInspection inspection = localInspectionToolWrapper != null ?\n          (RequiredAttributesInspection) localInspectionToolWrapper.getTool(): null;\n\n        if (inspection != null) {\n          StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries(0));\n          notRequiredAttributes = new HashSet<String>(1);\n\n          while(tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken());\n        }\n      }\n\n      boolean toReformat = true;\n      if (htmlCode || jspCode) {\n        toReformat = false;\n      }\n      template.setToReformat(toReformat);\n\n      XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors();\n      StringBuilder indirectRequiredAttrs = null;\n\n      for (XmlAttributeDescriptor attributeDecl : attributes) {\n        String attributeName = attributeDecl.getName(tag);\n\n        if (attributeDecl.isRequired()) {\n          if (!notRequiredAttributes.contains(attributeName)) {\n            if (!(attributeDecl instanceof TldAttributeDescriptor) || !((TldAttributeDescriptor)attributeDecl).isIndirectSyntax()) {\n              template.addTextSegment(\" \" + attributeName + \"=\\\"\");\n              Expression expression = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n              template.addVariable(attributeName, expression, expression, true);\n              template.addTextSegment(\"\\\"\");\n            } else {\n              if (indirectRequiredAttrs == null) indirectRequiredAttrs = new StringBuilder();\n              indirectRequiredAttrs.append(\"\\n<jsp:attribute name=\\\"\").append(attributeName).append(\"\\\"><\/jsp:attribute>\\n\");\n            }\n          }\n        }\n        else if (attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) {\n          template.addTextSegment(\" \" + attributeName + \"=\\\"\" + attributeDecl.getDefaultValue() + \"\\\"\");\n        }\n      }\n\n      if (completionChar == '>' || (completionChar == '/' && indirectRequiredAttrs != null)) {\n        template.addTextSegment(\">\");\n        if (indirectRequiredAttrs != null) template.addTextSegment(indirectRequiredAttrs.toString());\n        template.addEndVariable();\n\n        if (!(tag instanceof HtmlTag) || !HtmlUtil.isSingleHtmlTag(tag.getName())) {\n          template.addTextSegment(\"<\/\");\n          template.addTextSegment(descriptor.getName(tag));\n          template.addTextSegment(\">\");\n        }\n      }\n      else if (completionChar == '/') {\n        template.addTextSegment(\"/>\");\n      }\n      else if (completionChar == ' ') {\n        template.addTextSegment(\" \");\n        final MacroCallNode completeAttrExpr = new MacroCallNode(MacroFactory.createMacro(\"complete\"));\n        template.addVariable(\"attrComplete\", completeAttrExpr,completeAttrExpr,true);\n        //template.addEndVariable();\n      }\n\n      templateManager.startTemplate(editor, template);\n    }","commit_id":"c2145645c94487e1bf650780878a2a5fadff3d78","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void removeFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tif (!folderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t\t!folderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\t\tfolderName = MAIL_BOX_STYLE + folderName;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < DEFAULT_FOLDERS.length; i++) {\n\t\t\t\tif (DEFAULT_FOLDERS[i].equals(folderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + folderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tFolder folder = store.getFolder(folderName);\n\n\t\t\tif (!folder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + folderName + \" does not exist\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tfolder.delete(true);\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","id":94524,"modified_method":"public static void removeFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tfolderName = _getResolvedFolderName(folderName);\n\n\t\t\tfor (int i = 0; i < DEFAULT_FOLDERS.length; i++) {\n\t\t\t\tif (DEFAULT_FOLDERS[i].equals(folderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + folderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tFolder folder = store.getFolder(folderName);\n\n\t\t\tif (!folder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + folderName + \" does not exist\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tfolder.delete(true);\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static IMAPFolder _getFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tif (Validator.isNull(folderName)) {\n\t\t\t\tfolderName = MAIL_INBOX_NAME;\n\t\t\t}\n\t\t\telse if (!folderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t\t\t !folderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\t\tfolderName = MAIL_BOX_STYLE + folderName;\n\t\t\t}\n\n\t\t\tIMAPFolder folder = (IMAPFolder)ses.getAttribute(\n\t\t\t\tWebKeys.MAIL_FOLDER);\n\n\t\t\tif (folder != null) {\n\t\t\t\tif (!folder.getName().equals(folderName)) {\n\t\t\t\t\t_closeFolder(ses);\n\n\t\t\t\t\tfolder = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (folder == null) {\n\t\t\t\tStore store = _getStore(ses);\n\n\t\t\t\tfolder = (IMAPFolder)store.getFolder(folderName);\n\n\t\t\t\tfolder.open(IMAPFolder.READ_WRITE);\n\n\t\t\t\tses.setAttribute(WebKeys.MAIL_FOLDER, folder);\n\n\t\t\t\tses.removeAttribute(WebKeys.MAIL_MESSAGE_ID);\n\t\t\t}\n\n\t\t\treturn folder;\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","id":94525,"modified_method":"private static IMAPFolder _getFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tfolderName = _getResolvedFolderName(folderName);\n\n\t\t\tIMAPFolder folder = (IMAPFolder)ses.getAttribute(\n\t\t\t\tWebKeys.MAIL_FOLDER);\n\n\t\t\tif (folder != null) {\n\t\t\t\tString currFolderName =\n\t\t\t\t\t_getResolvedFolderName(folder.getName());\n\n\t\t\t\tif (!currFolderName.equals(folderName)) {\n\t\t\t\t\t_closeFolder(ses);\n\n\t\t\t\t\tfolder = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (folder == null) {\n\t\t\t\tStore store = _getStore(ses);\n\n\t\t\t\tfolder = (IMAPFolder)store.getFolder(folderName);\n\n\t\t\t\tfolder.open(IMAPFolder.READ_WRITE);\n\n\t\t\t\tses.setAttribute(WebKeys.MAIL_FOLDER, folder);\n\n\t\t\t\tses.removeAttribute(WebKeys.MAIL_MESSAGE_ID);\n\t\t\t}\n\n\t\t\treturn folder;\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void deleteMessages(HttpSession ses, long[] messageIds)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tif (!folder.getName().equals(MAIL_TRASH_NAME)) {\n\t\t\t\tmoveMessages(ses, messageIds, MAIL_TRASH_NAME);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tMessage[] messages = folder.getMessagesByUID(messageIds);\n\n\t\t\t\tfolder.setFlags(messages, new Flags(Flags.Flag.DELETED), true);\n\n\t\t\t\tfolder.expunge();\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t}\n\t}","id":94526,"modified_method":"public static void deleteMessages(HttpSession ses, long[] messageIds)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tString folderName = _getResolvedFolderName(folder.getName());\n\n\t\t\tif (!folderName.equals(MAIL_TRASH_NAME)) {\n\t\t\t\tmoveMessages(ses, messageIds, MAIL_TRASH_NAME);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tMessage[] messages = folder.getMessagesByUID(messageIds);\n\n\t\t\t\tfolder.setFlags(messages, new Flags(Flags.Flag.DELETED), true);\n\n\t\t\t\tfolder.expunge();\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void createFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\tFolder folder = null;\n\n\t\ttry {\n\t\t\tIterator itr = getFolders(ses).iterator();\n\n\t\t\twhile (itr.hasNext()) {\n\t\t\t\tMailFolder mailFolder = (MailFolder)itr.next();\n\n\t\t\t\tif (mailFolder.getName().equals(folderName)) {\n\t\t\t\t\tthrow new FolderException(\n\t\t\t\t\t\t\"Folder \" + folderName + \" already exists\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tif (!folderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t\t!folderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\t\tfolderName = MAIL_BOX_STYLE + folderName;\n\t\t\t}\n\n\t\t\tfolder = store.getFolder(folderName);\n\n\t\t\tfolder.create(Folder.HOLDS_MESSAGES);\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tif ((folder != null) && folder.isOpen()) {\n\t\t\t\t\tfolder.close(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\t}","id":94527,"modified_method":"public static void createFolder(HttpSession ses, String folderName)\n\t\tthrows FolderException, StoreException {\n\n\t\tFolder folder = null;\n\n\t\ttry {\n\t\t\tIterator itr = getFolders(ses).iterator();\n\n\t\t\twhile (itr.hasNext()) {\n\t\t\t\tMailFolder mailFolder = (MailFolder)itr.next();\n\n\t\t\t\tif (mailFolder.getName().equals(folderName)) {\n\t\t\t\t\tthrow new FolderException(\n\t\t\t\t\t\t\"Folder \" + folderName + \" already exists\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tfolderName = _getResolvedFolderName(folderName);\n\n\t\t\tfolder = store.getFolder(folderName);\n\n\t\t\tfolder.create(Folder.HOLDS_MESSAGES);\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tif ((folder != null) && folder.isOpen()) {\n\t\t\t\t\tfolder.close(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void moveMessages(\n\t\t\tHttpSession ses, long[] messageIds, String toFolderName)\n\t\tthrows FolderException, StoreException {\n\n\t\tIMAPFolder toFolder = null;\n\n\t\tif (!toFolderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t!toFolderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\ttoFolderName = MAIL_BOX_STYLE + toFolderName;\n\t\t}\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tif (folder.getName().equals(toFolderName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ((folder.getName().equals(MAIL_DRAFTS_NAME) ||\n\t\t\t\t\ttoFolderName.equals(MAIL_DRAFTS_NAME)) &&\n\t\t\t\t(!toFolderName.equals(MAIL_TRASH_NAME))) {\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\ttoFolder = (IMAPFolder)store.getFolder(toFolderName);\n\n\t\t\ttoFolder.open(IMAPFolder.READ_WRITE);\n\n\t\t\tMessage[] messages = folder.getMessagesByUID(messageIds);\n\n\t\t\tfolder.copyMessages(messages, toFolder);\n\n\t\t\tfolder.setFlags(messages, new Flags(Flags.Flag.DELETED), true);\n\n\t\t\tfolder.expunge();\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tif ((toFolder != null) && toFolder.isOpen()) {\n\t\t\t\t\ttoFolder.close(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t}\n\t}","id":94528,"modified_method":"public static void moveMessages(\n\t\t\tHttpSession ses, long[] messageIds, String toFolderName)\n\t\tthrows FolderException, StoreException {\n\n\t\tIMAPFolder toFolder = null;\n\n\t\ttoFolderName = _getResolvedFolderName(toFolderName);\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tString folderName = _getResolvedFolderName(folder.getName());\n\n\t\t\tif (folderName.equals(toFolderName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ((folderName.equals(MAIL_DRAFTS_NAME) ||\n\t\t\t\t\ttoFolderName.equals(MAIL_DRAFTS_NAME)) &&\n\t\t\t\t(!toFolderName.equals(MAIL_TRASH_NAME))) {\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\ttoFolder = (IMAPFolder)store.getFolder(toFolderName);\n\n\t\t\ttoFolder.open(IMAPFolder.READ_WRITE);\n\n\t\t\tMessage[] messages = folder.getMessagesByUID(messageIds);\n\n\t\t\tfolder.copyMessages(messages, toFolder);\n\n\t\t\tfolder.setFlags(messages, new Flags(Flags.Flag.DELETED), true);\n\n\t\t\tfolder.expunge();\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tif ((toFolder != null) && toFolder.isOpen()) {\n\t\t\t\t\ttoFolder.close(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t}\n\n\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void renameFolder(\n\t\t\tHttpSession ses, String oldFolderName, String newFolderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\tif (!oldFolderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t\t!oldFolderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\t\toldFolderName = MAIL_BOX_STYLE + oldFolderName;\n\t\t\t}\n\n\t\t\tif (!newFolderName.equals(MAIL_INBOX_NAME) &&\n\t\t\t\t!newFolderName.startsWith(MAIL_BOX_STYLE)) {\n\n\t\t\t\tnewFolderName = MAIL_BOX_STYLE + newFolderName;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < DEFAULT_FOLDERS.length; i++) {\n\t\t\t\tif (DEFAULT_FOLDERS[i].equals(oldFolderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + oldFolderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t\telse if (DEFAULT_FOLDERS[i].equals(newFolderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + newFolderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tFolder oldFolder = store.getFolder(oldFolderName);\n\t\t\tFolder newFolder = store.getFolder(newFolderName);\n\n\t\t\tif (!oldFolder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + oldFolderName + \" does not exist\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\t\t\telse if (newFolder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + newFolderName + \" already exists\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tif (!oldFolder.isOpen()) {\n\t\t\t\toldFolder.open(Folder.READ_WRITE);\n\t\t\t}\n\n\t\t\toldFolder.renameTo(newFolder);\n\n\t\t\ttry {\n\t\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\t\tFolder curFolder = _getFolder(ses);\n\n\t\t\t\tif (curFolder.getName().equals(oldFolderName)) {\n\t\t\t\t\tsetFolder(ses, newFolderName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","id":94529,"modified_method":"public static void renameFolder(\n\t\t\tHttpSession ses, String oldFolderName, String newFolderName)\n\t\tthrows FolderException, StoreException {\n\n\t\ttry {\n\t\t\toldFolderName = _getResolvedFolderName(oldFolderName);\n\t\t\tnewFolderName = _getResolvedFolderName(newFolderName);\n\n\t\t\tfor (int i = 0; i < DEFAULT_FOLDERS.length; i++) {\n\t\t\t\tif (DEFAULT_FOLDERS[i].equals(oldFolderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + oldFolderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t\telse if (DEFAULT_FOLDERS[i].equals(newFolderName)) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Folder \" + newFolderName +\n\t\t\t\t\t\t\t\" is a system folder and cannot be changed\");\n\n\t\t\t\t\tthrow new FolderException();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStore store = _getStore(ses);\n\n\t\t\tFolder oldFolder = store.getFolder(oldFolderName);\n\t\t\tFolder newFolder = store.getFolder(newFolderName);\n\n\t\t\tif (!oldFolder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + oldFolderName + \" does not exist\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\t\t\telse if (newFolder.exists()) {\n\t\t\t\t_log.error(\"Folder \" + newFolderName + \" already exists\");\n\n\t\t\t\tthrow new FolderException();\n\t\t\t}\n\n\t\t\tif (!oldFolder.isOpen()) {\n\t\t\t\toldFolder.open(Folder.READ_WRITE);\n\t\t\t}\n\n\t\t\toldFolder.renameTo(newFolder);\n\n\t\t\ttry {\n\t\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\t\tFolder curFolder = _getFolder(ses);\n\n\t\t\t\tString folderName = _getResolvedFolderName(curFolder.getName());\n\n\t\t\t\tif (folderName.equals(oldFolderName)) {\n\t\t\t\t\tsetFolder(ses, newFolderName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tMailSessionLock.unlock(ses.getId());\n\t\t\t}\n\t\t}\n\t\tcatch (MessagingException me) {\n\t\t\tthrow new FolderException(me);\n\t\t}\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Set getEnvelopes(HttpSession ses, Comparator comparator)\n\t\tthrows FolderException {\n\n\t\tSet envelopes = new TreeSet(comparator);\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tMessage[] messages = folder.getMessages();\n\n\t\t\tFetchProfile fetchProfile = new FetchProfile();\n\n\t\t\tfetchProfile.add(FetchProfile.Item.ENVELOPE);\n\t\t\tfetchProfile.add(FetchProfile.Item.FLAGS);\n\n\t\t\tfolder.fetch(messages, fetchProfile);\n\n\t\t\tfor (int i = 0; i < messages.length; i++) {\n\t\t\t\tMessage message = messages[i];\n\n\t\t\t\tif (message.isExpunged()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMailEnvelope mailEnvelope = new MailEnvelope();\n\n\t\t\t\tmailEnvelope.setMessageId(folder.getUID(message));\n\n\t\t\t\tif (MAIL_SENT_NAME.equals(folder.getName()) ||\n\t\t\t\t\tMAIL_DRAFTS_NAME.equals(folder.getName())) {\n\n\t\t\t    \tAddress[] recipients = message.getAllRecipients();\n\n\t\t\t    \tStringBuffer sb = new StringBuffer();\n\n\t\t\t    \tif (!Validator.isNull(recipients)) {\n\t\t\t\t    \tfor (int j = 0; j < recipients.length; j++) {\n\t\t\t\t    \t\tInternetAddress address =\n\t\t\t\t\t\t\t\t(InternetAddress)recipients[j];\n\n\t\t\t\t\t\t\tString recipient = GetterUtil.getString(\n\t\t\t\t\t\t\t\taddress.getPersonal(), address.getAddress());\n\n\t\t\t\t\t\t\tsb.append(recipient);\n\n\t\t\t\t    \t\tif (j < (recipients.length - 1)) {\n\t\t\t\t    \t\t\tsb.append(\", \");\n\t\t\t\t    \t\t}\n\t\t\t\t    \t}\n\t\t\t    \t}\n\n\t\t\t    \tif (sb.length() > 0) {\n\t\t\t    \t\tmailEnvelope.setRecipient(sb.toString());\n\t\t\t    \t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tAddress[] from = message.getFrom();\n\n\t\t\t\t\tif (from.length > 0) {\n\t\t\t\t\t\tInternetAddress address = (InternetAddress)from[0];\n\n\t\t\t\t\t\tString recipient = GetterUtil.getString(\n\t\t\t\t\t\t\taddress.getPersonal(), address.getAddress());\n\n\t\t\t\t\t\tmailEnvelope.setRecipient(recipient);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmailEnvelope.setSubject(message.getSubject());\n\t\t\t\tmailEnvelope.setDate(message.getSentDate());\n\t\t\t\tmailEnvelope.setRead(message.isSet(Flag.SEEN));\n\t\t\t\tmailEnvelope.setFlagged(message.isSet(Flag.FLAGGED));\n\t\t\t\tmailEnvelope.setAnswered(message.isSet(Flag.ANSWERED));\n\n\t\t\t\tenvelopes.add(mailEnvelope);\n\t\t\t}\n\n\t\t\treturn envelopes;\n\t\t}\n        catch (MessagingException me) {\n        \tthrow new FolderException(me);\n\t\t}\n        finally {\n\t\t\tMailSessionLock.unlock(ses.getId());\n        }\n\t}","id":94530,"modified_method":"public static Set getEnvelopes(HttpSession ses, Comparator comparator)\n\t\tthrows FolderException {\n\n\t\tSet envelopes = new TreeSet(comparator);\n\n\t\ttry {\n\t\t\tMailSessionLock.lock(ses.getId());\n\n\t\t\tIMAPFolder folder = _getFolder(ses);\n\n\t\t\tString folderName = _getResolvedFolderName(folder.getName());\n\n\t\t\tMessage[] messages = folder.getMessages();\n\n\t\t\tFetchProfile fetchProfile = new FetchProfile();\n\n\t\t\tfetchProfile.add(FetchProfile.Item.ENVELOPE);\n\t\t\tfetchProfile.add(FetchProfile.Item.FLAGS);\n\n\t\t\tfolder.fetch(messages, fetchProfile);\n\n\t\t\tfor (int i = 0; i < messages.length; i++) {\n\t\t\t\tMessage message = messages[i];\n\n\t\t\t\tif (message.isExpunged()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMailEnvelope mailEnvelope = new MailEnvelope();\n\n\t\t\t\tmailEnvelope.setMessageId(folder.getUID(message));\n\n\t\t\t\tif (MAIL_SENT_NAME.equals(folderName) ||\n\t\t\t\t\tMAIL_DRAFTS_NAME.equals(folderName)) {\n\n\t\t\t    \tAddress[] recipients = message.getAllRecipients();\n\n\t\t\t    \tStringBuffer sb = new StringBuffer();\n\n\t\t\t    \tif (!Validator.isNull(recipients)) {\n\t\t\t\t    \tfor (int j = 0; j < recipients.length; j++) {\n\t\t\t\t    \t\tInternetAddress address =\n\t\t\t\t\t\t\t\t(InternetAddress)recipients[j];\n\n\t\t\t\t\t\t\tString recipient = GetterUtil.getString(\n\t\t\t\t\t\t\t\taddress.getPersonal(), address.getAddress());\n\n\t\t\t\t\t\t\tsb.append(recipient);\n\n\t\t\t\t    \t\tif (j < (recipients.length - 1)) {\n\t\t\t\t    \t\t\tsb.append(\", \");\n\t\t\t\t    \t\t}\n\t\t\t\t    \t}\n\t\t\t    \t}\n\n\t\t\t    \tif (sb.length() > 0) {\n\t\t\t    \t\tmailEnvelope.setRecipient(sb.toString());\n\t\t\t    \t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tAddress[] from = message.getFrom();\n\n\t\t\t\t\tif (from.length > 0) {\n\t\t\t\t\t\tInternetAddress address = (InternetAddress)from[0];\n\n\t\t\t\t\t\tString recipient = GetterUtil.getString(\n\t\t\t\t\t\t\taddress.getPersonal(), address.getAddress());\n\n\t\t\t\t\t\tmailEnvelope.setRecipient(recipient);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmailEnvelope.setSubject(message.getSubject());\n\t\t\t\tmailEnvelope.setDate(message.getSentDate());\n\t\t\t\tmailEnvelope.setRead(message.isSet(Flag.SEEN));\n\t\t\t\tmailEnvelope.setFlagged(message.isSet(Flag.FLAGGED));\n\t\t\t\tmailEnvelope.setAnswered(message.isSet(Flag.ANSWERED));\n\n\t\t\t\tenvelopes.add(mailEnvelope);\n\t\t\t}\n\n\t\t\treturn envelopes;\n\t\t}\n        catch (MessagingException me) {\n        \tthrow new FolderException(me);\n\t\t}\n        finally {\n\t\t\tMailSessionLock.unlock(ses.getId());\n        }\n\t}","commit_id":"0765bc3688fbce706c1080ca464dc465567e3e67","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\t\r\n\t\tint col1 = 0;\r\n\t\tint col2 = layer.getWidth() - 1;\r\n\t\t\r\n\t\tint row1 = 0;\r\n\t\tint row2 = layer.getHeight() - 1;\r\n\t\t\r\n\t\tfloat tileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfloat tileHeight = layer.getTileHeight() * unitScale;\r\n\t\tfloat halfTileWidth = tileWidth * 0.5f;\r\n\t\tfloat halfTileHeight = tileHeight * 0.5f;\r\n\t\t\r\n\t\tfor (int row = row2; row >= row1; row--) {\r\n\t\t\tfor (int col = col1; col <= col2; col++) {\r\n\t\t\t\tfloat x = (col * halfTileWidth) + (row * halfTileWidth);\r\n\t\t\t\tfloat y = (row * halfTileHeight) - (col * halfTileHeight);\r\n\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = x;\r\n\t\t\t\t\tfloat y1 = y;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteBatch.draw(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":94531,"modified_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\t\r\n\t\tint col1 = 0;\r\n\t\tint col2 = layer.getWidth() - 1;\r\n\t\t\r\n\t\tint row1 = 0;\r\n\t\tint row2 = layer.getHeight() - 1;\r\n\t\t\r\n\t\tfloat tileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfloat tileHeight = layer.getTileHeight() * unitScale;\r\n\t\tfloat halfTileWidth = tileWidth * 0.5f;\r\n\t\tfloat halfTileHeight = tileHeight * 0.5f;\r\n\t\t\r\n\t\tfor (int row = row2; row >= row1; row--) {\r\n\t\t\tfor (int col = col1; col <= col2; col++) {\r\n\t\t\t\tfloat x = (col * halfTileWidth) + (row * halfTileWidth);\r\n\t\t\t\tfloat y = (row * halfTileHeight) - (col * halfTileHeight);\r\n\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tif(cell == null) continue;\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = x;\r\n\t\t\t\t\tfloat y1 = y;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteBatch.draw(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"public static void main (String[] argv) {\r\n\t\t// this is only here for me to debug native code faster\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-audio/libs/gdx-audio-natives.jar\").load(\"gdx-audio\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-image/libs/gdx-image-natives.jar\").load(\"gdx-image\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar\").load(\"gdx-freetype\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar\").load(\"gdx-controllers-desktop\");\r\n\t\tnew SharedLibraryLoader(\"../../gdx/libs/gdx-natives.jar\").load(\"gdx\");\r\n\r\n\t\tGdxTest test = new SuperKoalio();\r\n\t\tLwjglApplicationConfiguration config = new LwjglApplicationConfiguration();\r\n\t\tconfig.useGL20 = test.needsGL20();\r\n\t\tnew LwjglApplication(test, config);\r\n\t}","id":94532,"modified_method":"public static void main (String[] argv) {\r\n\t\t// this is only here for me to debug native code faster\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-audio/libs/gdx-audio-natives.jar\").load(\"gdx-audio\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-image/libs/gdx-image-natives.jar\").load(\"gdx-image\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar\").load(\"gdx-freetype\");\r\n\t\tnew SharedLibraryLoader(\"../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar\").load(\"gdx-controllers-desktop\");\r\n\t\tnew SharedLibraryLoader(\"../../gdx/libs/gdx-natives.jar\").load(\"gdx\");\r\n\r\n\t\tGdxTest test = new TideMapDirectLoaderTest();\r\n\t\tLwjglApplicationConfiguration config = new LwjglApplicationConfiguration();\r\n\t\tconfig.useGL20 = test.needsGL20();\r\n\t\tnew LwjglApplication(test, config);\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\t\t\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\t\r\n\t\tfinal int layerWidth = layer.getWidth();\r\n\t\tfinal int layerHeight = layer.getHeight();\r\n\t\t\r\n\t\tfinal float layerTileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfinal float layerTileHeight = layer.getTileHeight() * unitScale;\r\n\t\t\r\n\t\tfinal int col1 = Math.max(0, (int) (viewBounds.x / layerTileWidth));\r\n\t\tfinal int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth));\r\n\r\n\t\tfinal int row1 = Math.max(0, (int) (viewBounds.y / layerTileHeight));\r\n\t\tfinal int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\t\t\t\t\r\n\t\t\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n\t\t\tfor (int col = col1; col < col2; col++) {\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\tif (tile instanceof AnimatedTiledMapTile) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = col * layerTileWidth;\r\n\t\t\t\t\tfloat y1 = row * layerTileHeight;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteBatch.draw(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\t\r\n\t}","id":94533,"modified_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\t\t\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\t\r\n\t\tfinal int layerWidth = layer.getWidth();\r\n\t\tfinal int layerHeight = layer.getHeight();\r\n\t\t\r\n\t\tfinal float layerTileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfinal float layerTileHeight = layer.getTileHeight() * unitScale;\r\n\t\t\r\n\t\tfinal int col1 = Math.max(0, (int) (viewBounds.x / layerTileWidth));\r\n\t\tfinal int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth));\r\n\r\n\t\tfinal int row1 = Math.max(0, (int) (viewBounds.y / layerTileHeight));\r\n\t\tfinal int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\t\t\t\t\r\n\t\t\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n\t\t\tfor (int col = col1; col < col2; col++) {\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tif(cell == null) continue;\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\tif (tile instanceof AnimatedTiledMapTile) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = col * layerTileWidth;\r\n\t\t\t\t\tfloat y1 = row * layerTileHeight;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteBatch.draw(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\t\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\r\n\t\tfinal int layerWidth = layer.getWidth();\r\n\t\tfinal int layerHeight = layer.getHeight();\r\n\t\t\r\n\t\tfinal float layerTileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfinal float layerTileHeight = layer.getTileHeight() * unitScale;\r\n\t\t\r\n\t\tfinal int col1 = Math.max(0, (int) (viewBounds.x / layerTileWidth));\r\n\t\tfinal int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth));\r\n\r\n\t\tfinal int row1 = Math.max(0, (int) (viewBounds.y / layerTileHeight));\r\n\t\tfinal int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\t\t\t\t\r\n\t\t\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n\t\t\tfor (int col = col1; col < col2; col++) {\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = col * layerTileWidth;\r\n\t\t\t\t\tfloat y1 = row * layerTileHeight;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteCache.add(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":94534,"modified_method":"@Override\r\n\tpublic void renderTileLayer (TiledMapTileLayer layer) {\r\n\t\tfinal float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());\r\n\t\r\n\t\tfinal int layerWidth = layer.getWidth();\r\n\t\tfinal int layerHeight = layer.getHeight();\r\n\t\t\r\n\t\tfinal float layerTileWidth = layer.getTileWidth() * unitScale;\r\n\t\tfinal float layerTileHeight = layer.getTileHeight() * unitScale;\r\n\t\t\r\n\t\tfinal int col1 = Math.max(0, (int) (viewBounds.x / layerTileWidth));\r\n\t\tfinal int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth));\r\n\r\n\t\tfinal int row1 = Math.max(0, (int) (viewBounds.y / layerTileHeight));\r\n\t\tfinal int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\t\t\t\t\r\n\t\t\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n\t\t\tfor (int col = col1; col < col2; col++) {\r\n\t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r\n\t\t\t\tif(cell == null) continue;\r\n\t\t\t\tfinal TiledMapTile tile = cell.getTile();\r\n\t\t\t\tif (tile != null) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tfinal boolean flipX = cell.getFlipHorizontally();\r\n\t\t\t\t\tfinal boolean flipY = cell.getFlipVertically();\r\n\t\t\t\t\tfinal int rotations = cell.getRotation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextureRegion region = tile.getTextureRegion();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat x1 = col * layerTileWidth;\r\n\t\t\t\t\tfloat y1 = row * layerTileHeight;\r\n\t\t\t\t\tfloat x2 = x1 + region.getRegionWidth() * unitScale;\r\n\t\t\t\t\tfloat y2 = y1 + region.getRegionHeight() * unitScale;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfloat u1 = region.getU();\r\n\t\t\t\t\tfloat v1 = region.getV2();\r\n\t\t\t\t\tfloat u2 = region.getU2();\r\n\t\t\t\t\tfloat v2 = region.getV();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X1] = x1;\r\n\t\t\t\t\tvertices[Y1] = y1;\r\n\t\t\t\t\tvertices[C1] = color;\r\n\t\t\t\t\tvertices[U1] = u1;\r\n\t\t\t\t\tvertices[V1] = v1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X2] = x1;\r\n\t\t\t\t\tvertices[Y2] = y2;\r\n\t\t\t\t\tvertices[C2] = color;\r\n\t\t\t\t\tvertices[U2] = u1;\r\n\t\t\t\t\tvertices[V2] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X3] = x2;\r\n\t\t\t\t\tvertices[Y3] = y2;\r\n\t\t\t\t\tvertices[C3] = color;\r\n\t\t\t\t\tvertices[U3] = u2;\r\n\t\t\t\t\tvertices[V3] = v2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvertices[X4] = x2;\r\n\t\t\t\t\tvertices[Y4] = y1;\r\n\t\t\t\t\tvertices[C4] = color;\r\n\t\t\t\t\tvertices[U4] = u2;\r\n\t\t\t\t\tvertices[V4] = v1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flipX) {\r\n\t\t\t\t\t\tfloat temp = vertices[U1];\r\n\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\tvertices[U3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[U2];\r\n\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\tvertices[U4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flipY) {\r\n\t\t\t\t\t\tfloat temp = vertices[V1];\r\n\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\tvertices[V3] = temp;\r\n\t\t\t\t\t\ttemp = vertices[V2];\r\n\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\tvertices[V4] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rotations != 0) {\r\n\t\t\t\t\t\tswitch (rotations) {\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_90: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_180: {\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = tempU;\r\n\t\t\t\t\t\t\t\ttempU = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = tempV;\r\n\t\t\t\t\t\t\t\ttempV = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = tempV;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase Cell.ROTATE_270: {\r\n\t\t\t\t\t\t\t\tfloat tempV = vertices[V1];\r\n\t\t\t\t\t\t\t\tvertices[V1] = vertices[V4];\r\n\t\t\t\t\t\t\t\tvertices[V4] = vertices[V3];\r\n\t\t\t\t\t\t\t\tvertices[V3] = vertices[V2];\r\n\t\t\t\t\t\t\t\tvertices[V2] = tempV;\r\n\r\n\t\t\t\t\t\t\t\tfloat tempU = vertices[U1];\r\n\t\t\t\t\t\t\t\tvertices[U1] = vertices[U4];\r\n\t\t\t\t\t\t\t\tvertices[U4] = vertices[U3];\r\n\t\t\t\t\t\t\t\tvertices[U3] = vertices[U2];\r\n\t\t\t\t\t\t\t\tvertices[U2] = tempU;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspriteCache.add(region.getTexture(), vertices, 0, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void create () {\r\n\t\t// load the koala frames, split them, and assign them to Animations\r\n\t\tkoalaTexture = new Texture(\"data/maps/tiled/super-koalio/koalio.png\"); \r\n\t\tTextureRegion[] regions = TextureRegion.split(koalaTexture, 18, 26)[0];\r\n\t\tstand = new Animation(0, regions[0]);\r\n\t\tjump = new Animation(0, regions[1]);\r\n\t\twalk = new Animation(0.15f, regions[2], regions[3], regions[4]);\r\n\t\twalk.setPlayMode(Animation.LOOP_PINGPONG);\r\n\t\t\r\n\t\t// figure out the width and height of the koala for collision\r\n\t\t// detection and rendering by converting a koala frames pixel\r\n\t\t// size into world units (1 unit == 16 pixels)\r\n\t\tKoala.WIDTH = 1 / 16f * regions[0].getRegionWidth();\r\n\t\tKoala.HEIGHT = 1 / 16f * regions[0].getRegionHeight();\r\n\t\t\r\n\t\t// load the map, set the unit scale to 1/16 (1 unit == 16 pixels)\r\n\t\tmap = new TmxMapLoader().load(\"data/maps/tiled/super-koalio/level1.tmx\");\r\n\t\trenderer = new OrthogonalTiledMapRenderer(map, 1 / 16f);\r\n\t\t\r\n\t\t// create an orthographic camera, shows us 30x20 units of the world\r\n\t\tcamera = new OrthographicCamera();\r\n\t\tcamera.setToOrtho(false, 30, 20);\r\n\t\tcamera.update();\r\n\t\t\r\n\t\t// create the Koala we want to move around the world\r\n\t\tkoala = new Koala();\r\n\t\tkoala.position.set(10, 2);\r\n\t}","id":94535,"modified_method":"@Override\r\n\tpublic void create () {\r\n\t\t// load the koala frames, split them, and assign them to Animations\r\n\t\tkoalaTexture = new Texture(\"data/maps/tiled/super-koalio/koalio.png\"); \r\n\t\tTextureRegion[] regions = TextureRegion.split(koalaTexture, 18, 26)[0];\r\n\t\tstand = new Animation(0, regions[0]);\r\n\t\tjump = new Animation(0, regions[1]);\r\n\t\twalk = new Animation(0.15f, regions[2], regions[3], regions[4]);\r\n\t\twalk.setPlayMode(Animation.LOOP_PINGPONG);\r\n\t\t\r\n\t\t// figure out the width and height of the koala for collision\r\n\t\t// detection and rendering by converting a koala frames pixel\r\n\t\t// size into world units (1 unit == 16 pixels)\r\n\t\tKoala.WIDTH = 1 / 16f * regions[0].getRegionWidth();\r\n\t\tKoala.HEIGHT = 1 / 16f * regions[0].getRegionHeight();\r\n\t\t\r\n\t\t// load the map, set the unit scale to 1/16 (1 unit == 16 pixels)\r\n\t\tmap = new TmxMapLoader().load(\"data/maps/tiled/super-koalio/level1.tmx\");\r\n\t\trenderer = new OrthogonalTiledMapRenderer(map, 1 / 16f);\r\n\t\t\r\n\t\t// create an orthographic camera, shows us 30x20 units of the world\r\n\t\tcamera = new OrthographicCamera();\r\n\t\tcamera.setToOrtho(false, 30, 20);\r\n\t\tcamera.update();\r\n\t\t\r\n\t\t// create the Koala we want to move around the world\r\n\t\tkoala = new Koala();\r\n\t\tkoala.position.set(20, 20);\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"private void updateKoala(float deltaTime) {\r\n\t\tkoala.stateTime += deltaTime;\r\n\t\t\r\n\t\t// check input and apply to velocity & state\r\n\t\tif(Gdx.input.isKeyPressed(Keys.SPACE) & koala.grounded) {\r\n\t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n\t\t\tkoala.state = Koala.State.Jumping;\r\n\t\t\tkoala.grounded = false;\r\n\t\t}\r\n\t\t\r\n\t\tif(Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A)) {\r\n\t\t\tkoala.velocity.x -= Koala.WALK_VELOCITY;\r\n\t\t\tif(koala.state != Koala.State.Jumping) koala.state = Koala.State.Walking;\r\n\t\t\tkoala.facesRight = false;\r\n\t\t}\r\n\t\t\r\n\t\tif(Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D)) {\r\n\t\t\tkoala.velocity.x += Koala.WALK_VELOCITY;\r\n\t\t\tif(koala.state != Koala.State.Jumping) koala.state = Koala.State.Walking;\r\n\t\t\tkoala.facesRight = true;\r\n\t\t}\r\n\t\t\r\n\t\t// apply gravity if we are falling\r\n\t\tkoala.velocity.add(0, GRAVITY);\r\n\t\t\r\n\t\t// multiply by delta time so we know how far we go\r\n\t\t// in this frame\r\n\t\tkoala.velocity.mul(deltaTime);\r\n\t\t\r\n\t\t// perform collision detection & response based on the current\r\n\t\t// position and velocity. Collision detection will clamp the\r\n\t\t// velocity if necessary and move the koala out of tiles\r\n\t\tRectangle koalaRect = rectPool.obtain();\r\n\t\tRectangle intersect = rectPool.obtain();\r\n\t\ttmp.set(koala.position).add(koala.velocity);\r\n\t\t\r\n\t\tkoalaRect.set(tmp.x, tmp.y, Koala.WIDTH, Koala.HEIGHT);\r\n\t\tgetSurroundingTilesForPosition(tmp.set(koala.position).add(Koala.WIDTH / 2, Koala.HEIGHT / 2), (TiledMapTileLayer) map.getLayers().getLayer(1));\r\n\t\t\r\n\t\tTileData item = null;\r\n\t\t\r\n\t\titem = surroundingTiles[UP];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\t\t\t\t\r\n\t\t\t\tkoalaRect.y -= intersect.height;\r\n\t\t\t\tkoala.velocity.y = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\titem = surroundingTiles[DOWN];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tkoalaRect.y += intersect.height;\r\n\t\t\t\tkoala.velocity.y = 0;\r\n\t\t\t\tkoala.grounded = true;\r\n\t\t\t}\t\r\n\t\t}\r\n\t\titem = surroundingTiles[LEFT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tkoalaRect.x += intersect.width;\r\n\t\t\t}\r\n\t\t}\r\n\t\titem = surroundingTiles[RIGHT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tkoalaRect.x -= intersect.width;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\titem = surroundingTiles[UP_LEFT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tif (intersect.width > intersect.height) {\r\n\t\t\t\t\tkoalaRect.y -= intersect.height;\r\n\t\t\t\t\tkoala.velocity.y = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tkoalaRect.x += intersect.width;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\titem = surroundingTiles[UP_RIGHT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tif (intersect.width > intersect.height) {\r\n\t\t\t\t\tkoalaRect.y -= intersect.height;\r\n\t\t\t\t\tkoala.velocity.y = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tkoalaRect.x -= intersect.width;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\titem = surroundingTiles[DOWN_LEFT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tif (intersect.width > intersect.height) {\r\n\t\t\t\t\tkoalaRect.y += intersect.height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tkoalaRect.x += intersect.width;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\titem = surroundingTiles[DOWN_RIGHT];\r\n\t\tif (item.tile != null) {\r\n\t\t\tif (intersect(koalaRect, item.rectangle, intersect)) {\r\n\t\t\t\tif (intersect.width > intersect.height) {\r\n\t\t\t\t\tkoalaRect.y += intersect.height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tkoalaRect.x -= intersect.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tkoala.position.set(koalaRect.x, koalaRect.y);\r\n\t\t\r\n\t\t// unscale the velocity by the inverse delta time and set \r\n\t\t// the latest position\r\n\t\tkoala.velocity.mul(1/deltaTime);\r\n\t\t\r\n\t\t// free the koala rectangle\r\n\t\trectPool.free(koalaRect);\r\n\t\trectPool.free(intersect);\r\n\t\t\r\n\t\t// Apply damping to the velocity on the x-axis so we don't\r\n\t\t// walk infinitely once a key was pressed\r\n\t\tkoala.velocity.x *= Koala.DAMPING;\r\n\t}","id":94536,"modified_method":"private void updateKoala(float deltaTime) {\r\n\t\tkoala.stateTime += deltaTime;\r\n\t\t\r\n\t\t// check input and apply to velocity & state\r\n\t\tif(Gdx.input.isKeyPressed(Keys.SPACE) & koala.grounded) {\r\n\t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n\t\t\tkoala.state = Koala.State.Jumping;\r\n\t\t\tkoala.grounded = false;\r\n\t\t}\r\n\t\t\r\n\t\tif(Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A)) {\r\n\t\t\tkoala.velocity.x = -Koala.MAX_VELOCITY;\r\n\t\t\tif(koala.grounded) koala.state = Koala.State.Walking;\r\n\t\t\tkoala.facesRight = false;\r\n\t\t}\r\n\t\t\r\n\t\tif(Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D)) {\r\n\t\t\tkoala.velocity.x = Koala.MAX_VELOCITY;\r\n\t\t\tif(koala.grounded) koala.state = Koala.State.Walking;\r\n\t\t\tkoala.facesRight = true;\r\n\t\t}\r\n\t\t\r\n\t\t// apply gravity if we are falling\r\n\t\tkoala.velocity.add(0, GRAVITY);\r\n\t\t\r\n\t\t// clamp the velocity to the maximum, x-axis only\r\n\t\tif(Math.abs(koala.velocity.x) > Koala.MAX_VELOCITY) {\r\n\t\t\tkoala.velocity.x = Math.signum(koala.velocity.x) * Koala.MAX_VELOCITY;\r\n\t\t}\r\n\t\t\r\n\t\t// clamp the velocity to 0 if it's < 1, and set the state to standign\r\n\t\tif(Math.abs(koala.velocity.x) < 1) {\r\n\t\t\tkoala.velocity.x = 0;\r\n\t\t\tif(koala.grounded) koala.state = Koala.State.Standing;\r\n\t\t}\r\n\t\t\r\n\t\t// multiply by delta time so we know how far we go\r\n\t\t// in this frame\r\n\t\tkoala.velocity.mul(deltaTime);\r\n\t\t\r\n\t\t// perform collision detection & response, on each axis, separately\r\n\t\t// if the koala is moving right, check the tiles to the right of it's\r\n\t\t// right bounding box edge, otherwise check the ones to the left\r\n\t\tRectangle koalaRect = rectPool.obtain();\r\n\t\tkoalaRect.set(koala.position.x, koala.position.y, Koala.WIDTH, Koala.HEIGHT);\r\n\t\tint startX, startY, endX, endY;\r\n\t\tif(koala.velocity.x > 0) {\r\n\t\t\tstartX = endX = (int)(koala.position.x + Koala.WIDTH + koala.velocity.x);\r\n\t\t} else {\r\n\t\t\tstartX = endX = (int)(koala.position.x + koala.velocity.x);\r\n\t\t}\r\n\t\tstartY = (int)(koala.position.y);\r\n\t\tendY = (int)(koala.position.y + Koala.HEIGHT);\r\n\t\tgetTiles(startX, startY, endX, endY, tiles);\r\n\t\tkoalaRect.x += koala.velocity.x;\r\n\t\tfor(Rectangle tile: tiles) {\r\n\t\t\tif(koalaRect.overlaps(tile)) {\r\n\t\t\t\tkoala.velocity.x = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tkoalaRect.x = koala.position.x;\r\n\t\t\r\n\t\t// if the koala is moving upwards, check the tiles to the top of it's\r\n\t\t// top bounding box edge, otherwise check the ones to the bottom\r\n\t\tif(koala.velocity.y > 0) {\r\n\t\t\tstartY = endY = (int)(koala.position.y + Koala.HEIGHT + koala.velocity.y);\r\n\t\t} else {\r\n\t\t\tstartY = endY = (int)(koala.position.y + koala.velocity.y);\r\n\t\t}\r\n\t\tstartX = (int)(koala.position.x);\r\n\t\tendX = (int)(koala.position.x + Koala.WIDTH);\r\n\t\tgetTiles(startX, startY, endX, endY, tiles);\r\n\t\tkoalaRect.y += koala.velocity.y;\r\n\t\tfor(Rectangle tile: tiles) {\r\n\t\t\tif(koalaRect.overlaps(tile)) {\r\n\t\t\t\t// if we hit the ground with our feet, mark us as grounded\r\n\t\t\t\t// so we can jump.\r\n\t\t\t\tif(koala.velocity.y < 0) koala.grounded = true;\r\n\t\t\t\tkoala.velocity.y = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\trectPool.free(koalaRect);\r\n\t\t\r\n\t\t// unscale the velocity by the inverse delta time and set \r\n\t\t// the latest position\r\n\t\tkoala.position.add(koala.velocity);\r\n\t\tkoala.velocity.mul(1/deltaTime);\r\n\t\tSystem.out.println(koala.velocity);\r\n\t\t\r\n\t\t// Apply damping to the velocity on the x-axis so we don't\r\n\t\t// walk infinitely once a key was pressed\r\n\t\tkoala.velocity.x *= Koala.DAMPING;\r\n\t\t\r\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"private void loadLayer(TiledMap map, Element element) {\n\t\tif (element.getName().equals(\"Layer\")) {\n\t\t\tString id = element.getAttribute(\"Id\");\n\t\t\tString visible = element.getAttribute(\"Visible\");\n\t\t\t\n\t\t\tElement dimensions = element.getChildByName(\"Dimensions\");\n\t\t\tString layerSize = dimensions.getAttribute(\"LayerSize\");\n\t\t\tString tileSize = dimensions.getAttribute(\"TileSize\");\n\t\t\t\n\t\t\tString[] layerSizeParts = layerSize.split(\" x \");\n\t\t\tint layerSizeX = Integer.parseInt(layerSizeParts[0]);\n\t\t\tint layerSizeY = Integer.parseInt(layerSizeParts[1]);\n\t\t\t\n\t\t\tString[] tileSizeParts = tileSize.split(\" x \");\n\t\t\tint tileSizeX = Integer.parseInt(tileSizeParts[0]);\n\t\t\tint tileSizeY = Integer.parseInt(tileSizeParts[1]);\n\t\t\t\n\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(layerSizeX, layerSizeY, tileSizeX, tileSizeY);\n\t\t\tElement tileArray = element.getChildByName(\"TileArray\");\n\t\t\tArray<Element> rows = tileArray.getChildrenByName(\"Row\");\n\t\t\tTiledMapTileSets tilesets = map.getTileSets();\n\t\t\tTiledMapTileSet currentTileSet = null;\n\t\t\tint firstgid = 0;\n\t\t\tint x, y;\n\t\t\tfor (int row = 0, rowCount = rows.size; row < rowCount; row++) {\n\t\t\t\tElement currentRow = rows.get(row);\n\t\t\t\ty = rowCount -1 - row;\n\t\t\t\tx = 0;\n\t\t\t\tfor (int child = 0, childCount = currentRow.getChildCount(); child < childCount; child++) {\n\t\t\t\t\tElement currentChild = currentRow.getChild(child);\n\t\t\t\t\tString name = currentChild.getName();\n\t\t\t\t\tif (name.equals(\"TileSheet\")) {\n\t\t\t\t\t\tcurrentTileSet = tilesets.getTileSet(currentChild.getAttribute(\"Ref\"));\n\t\t\t\t\t\tfirstgid = currentTileSet.getProperties().get(\"firstgid\", Integer.class);\n\t\t\t\t\t} else if (name.equals(\"Null\")) {\n\t\t\t\t\t\tx += currentChild.getIntAttribute(\"Count\");\n\t\t\t\t\t} else if (name.equals(\"Static\")) {\n\t\t\t\t\t\tlayer.setCell(x++, y, currentTileSet.getTile(firstgid + currentChild.getIntAttribute(\"Index\")));\n\t\t\t\t\t} else if (name.equals(\"Animated\")) {\n\t\t\t\t\t\t// Create an AnimatedTile\n\t\t\t\t\t\tint interval = currentChild.getInt(\"Interval\");\n\t\t\t\t\t\tElement frames = currentChild.getChildByName(\"Frames\");\n\t\t\t\t\t\tArray<StaticTiledMapTile> frameTiles = new Array<StaticTiledMapTile>();\n\t\t\t\t\t\tfor (int frameChild = 0, frameChildCount = frames.getChildCount(); frameChild < frameChildCount; frameChild++) {\n\t\t\t\t\t\t\tElement frame = frames.getChild(frameChild);\n\t\t\t\t\t\t\tString frameName = frame.getName();\n\t\t\t\t\t\t\tif (frameName.equals(\"TileSheet\")) {\n\t\t\t\t\t\t\t\tcurrentTileSet = tilesets.getTileSet(frame.getAttribute(\"Ref\"));\n\t\t\t\t\t\t\t\tfirstgid = currentTileSet.getProperties().get(\"firstgid\", Integer.class);\n\t\t\t\t\t\t\t} else if (frameName.equals(\"Static\")) {\n\t\t\t\t\t\t\t\tframeTiles.add((StaticTiledMapTile) currentTileSet.getTile(firstgid + frame.getIntAttribute(\"Index\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlayer.setCell(x++, y, new AnimatedTiledMapTile(interval / 1000f, frameTiles)); //TODO: Reuse existing animated tiles\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmap.getLayers().addLayer(layer);\n\t\t}\n\t}","id":94537,"modified_method":"private void loadLayer(TiledMap map, Element element) {\n\t\tif (element.getName().equals(\"Layer\")) {\n\t\t\tString id = element.getAttribute(\"Id\");\n\t\t\tString visible = element.getAttribute(\"Visible\");\n\t\t\t\n\t\t\tElement dimensions = element.getChildByName(\"Dimensions\");\n\t\t\tString layerSize = dimensions.getAttribute(\"LayerSize\");\n\t\t\tString tileSize = dimensions.getAttribute(\"TileSize\");\n\t\t\t\n\t\t\tString[] layerSizeParts = layerSize.split(\" x \");\n\t\t\tint layerSizeX = Integer.parseInt(layerSizeParts[0]);\n\t\t\tint layerSizeY = Integer.parseInt(layerSizeParts[1]);\n\t\t\t\n\t\t\tString[] tileSizeParts = tileSize.split(\" x \");\n\t\t\tint tileSizeX = Integer.parseInt(tileSizeParts[0]);\n\t\t\tint tileSizeY = Integer.parseInt(tileSizeParts[1]);\n\t\t\t\n\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(layerSizeX, layerSizeY, tileSizeX, tileSizeY);\n\t\t\tElement tileArray = element.getChildByName(\"TileArray\");\n\t\t\tArray<Element> rows = tileArray.getChildrenByName(\"Row\");\n\t\t\tTiledMapTileSets tilesets = map.getTileSets();\n\t\t\tTiledMapTileSet currentTileSet = null;\n\t\t\tint firstgid = 0;\n\t\t\tint x, y;\n\t\t\tfor (int row = 0, rowCount = rows.size; row < rowCount; row++) {\n\t\t\t\tElement currentRow = rows.get(row);\n\t\t\t\ty = rowCount -1 - row;\n\t\t\t\tx = 0;\n\t\t\t\tfor (int child = 0, childCount = currentRow.getChildCount(); child < childCount; child++) {\n\t\t\t\t\tElement currentChild = currentRow.getChild(child);\n\t\t\t\t\tString name = currentChild.getName();\n\t\t\t\t\tif (name.equals(\"TileSheet\")) {\n\t\t\t\t\t\tcurrentTileSet = tilesets.getTileSet(currentChild.getAttribute(\"Ref\"));\n\t\t\t\t\t\tfirstgid = currentTileSet.getProperties().get(\"firstgid\", Integer.class);\n\t\t\t\t\t} else if (name.equals(\"Null\")) {\n\t\t\t\t\t\tx += currentChild.getIntAttribute(\"Count\");\n\t\t\t\t\t} else if (name.equals(\"Static\")) {\n\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\tcell.setTile(currentTileSet.getTile(firstgid + currentChild.getIntAttribute(\"Index\")));\n\t\t\t\t\t\tlayer.setCell(x++, y, cell);\n\t\t\t\t\t} else if (name.equals(\"Animated\")) {\n\t\t\t\t\t\t// Create an AnimatedTile\n\t\t\t\t\t\tint interval = currentChild.getInt(\"Interval\");\n\t\t\t\t\t\tElement frames = currentChild.getChildByName(\"Frames\");\n\t\t\t\t\t\tArray<StaticTiledMapTile> frameTiles = new Array<StaticTiledMapTile>();\n\t\t\t\t\t\tfor (int frameChild = 0, frameChildCount = frames.getChildCount(); frameChild < frameChildCount; frameChild++) {\n\t\t\t\t\t\t\tElement frame = frames.getChild(frameChild);\n\t\t\t\t\t\t\tString frameName = frame.getName();\n\t\t\t\t\t\t\tif (frameName.equals(\"TileSheet\")) {\n\t\t\t\t\t\t\t\tcurrentTileSet = tilesets.getTileSet(frame.getAttribute(\"Ref\"));\n\t\t\t\t\t\t\t\tfirstgid = currentTileSet.getProperties().get(\"firstgid\", Integer.class);\n\t\t\t\t\t\t\t} else if (frameName.equals(\"Static\")) {\n\t\t\t\t\t\t\t\tframeTiles.add((StaticTiledMapTile) currentTileSet.getTile(firstgid + frame.getIntAttribute(\"Index\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\tcell.setTile(new AnimatedTiledMapTile(interval / 1000f, frameTiles));\n\t\t\t\t\t\tlayer.setCell(x++, y, cell); //TODO: Reuse existing animated tiles\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmap.getLayers().addLayer(layer);\n\t\t}\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\n\tpublic void create() {\t\t\n\t\tfloat w = Gdx.graphics.getWidth();\n\t\tfloat h = Gdx.graphics.getHeight();\n\t\t\n\t\tcamera = new OrthographicCamera();\n\t\tcamera.setToOrtho(false, (w / h) * 320, 320);\n\t\tcamera.update();\n\t\t\n\t\tcameraController = new OrthoCamController(camera);\n\t\tGdx.input.setInputProcessor(cameraController);\n\t\n\t\tfont = new BitmapFont();\n\t\tbatch = new SpriteBatch();\n\t\t\n\t\t{\n\t\t\ttiles = new Texture(Gdx.files.internal(\"data/maps/tiled/tiles.png\"));\n\t\t\tTextureRegion[][] splitTiles = TextureRegion.split(tiles, 32, 32);\n\t\t\tmap = new TiledMap();\n\t\t\tMapLayers layers = map.getLayers();\n\t\t\tfor (int l = 0; l < 20; l++) {\n\t\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(150, 100, 32, 32);\n\t\t\t\tfor (int x = 0; x < 150; x++) {\n\t\t\t\t\tfor (int y = 0; y < 100; y++) {\n\t\t\t\t\t\tint ty = (int)(Math.random() * splitTiles.length);\n\t\t\t\t\t\tint tx = (int)(Math.random() * splitTiles[ty].length);\n\t\t\t\t\t\tlayer.setCell(x, y, new StaticTiledMapTile(splitTiles[ty][tx]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlayers.addLayer(layer);\n\t\t\t}\n\t\t}\n\t\t\n\t\trenderer = new OrthogonalTiledMapRenderer2(map);\n\n\t}","id":94538,"modified_method":"@Override\n\tpublic void create() {\t\t\n\t\tfloat w = Gdx.graphics.getWidth();\n\t\tfloat h = Gdx.graphics.getHeight();\n\t\t\n\t\tcamera = new OrthographicCamera();\n\t\tcamera.setToOrtho(false, (w / h) * 320, 320);\n\t\tcamera.update();\n\t\t\n\t\tcameraController = new OrthoCamController(camera);\n\t\tGdx.input.setInputProcessor(cameraController);\n\t\n\t\tfont = new BitmapFont();\n\t\tbatch = new SpriteBatch();\n\t\t\n\t\t{\n\t\t\ttiles = new Texture(Gdx.files.internal(\"data/maps/tiled/tiles.png\"));\n\t\t\tTextureRegion[][] splitTiles = TextureRegion.split(tiles, 32, 32);\n\t\t\tmap = new TiledMap();\n\t\t\tMapLayers layers = map.getLayers();\n\t\t\tfor (int l = 0; l < 20; l++) {\n\t\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(150, 100, 32, 32);\n\t\t\t\tfor (int x = 0; x < 150; x++) {\n\t\t\t\t\tfor (int y = 0; y < 100; y++) {\n\t\t\t\t\t\tint ty = (int)(Math.random() * splitTiles.length);\n\t\t\t\t\t\tint tx = (int)(Math.random() * splitTiles[ty].length);\n\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\tcell.setTile(new StaticTiledMapTile(splitTiles[ty][tx]));\n\t\t\t\t\t\tlayer.setCell(x, y, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlayers.addLayer(layer);\n\t\t\t}\n\t\t}\n\t\t\n\t\trenderer = new OrthogonalTiledMapRenderer2(map);\n\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\n\t * @param x\n\t * @param y \n\t * @return cell at (x, y)\n\t */\n\tpublic Cell getCell(int x, int y) {\n\t\treturn cells[x][y];\n\t}","id":94539,"modified_method":"/**\n\t * @param x\n\t * @param y \n\t * @return cell at (x, y)\n\t */\n\tpublic Cell getCell(int x, int y) {\n\t\tif(x < 0 || x >= width) return null;\n\t\tif(y < 0 || y >= height) return null;\n\t\treturn cells[x][y];\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\n\t * Creates TiledMap layer\n\t * \n\t * @param width layer width in tiles\n\t * @param height layer height in tiles\n\t * @param tileWidth tile width in pixels\n\t * @param tileHeight tile height in pixels \n\t */\n\tpublic TiledMapTileLayer(int width, int height, int tileWidth, int tileHeight) {\n\t\tsuper();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.tileWidth = tileWidth;\n\t\tthis.tileHeight = tileHeight;\n\t\tthis.cells = new Cell[width][height];\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\tcells[x][y] = new Cell();\n\t\t\t}\n\t\t}\n\t}","id":94540,"modified_method":"/**\n\t * Creates TiledMap layer\n\t * \n\t * @param width layer width in tiles\n\t * @param height layer height in tiles\n\t * @param tileWidth tile width in pixels\n\t * @param tileHeight tile height in pixels \n\t */\n\tpublic TiledMapTileLayer(int width, int height, int tileWidth, int tileHeight) {\n\t\tsuper();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.tileWidth = tileWidth;\n\t\tthis.tileHeight = tileHeight;\n\t\tthis.cells = new Cell[width][height];\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\n\t * Sets the tile which should be used for the cell in the given location.\n\t * \n\t * @param x\n\t * @param y\n\t * @param tile\n\t */\n\tpublic void setCell(int x, int y, TiledMapTile tile) {\n\t\tcells[x][y].setTile(tile);\n\t}","id":94541,"modified_method":"/**\n\t * Sets the {@link Cell} at the given coordinates.\n\t * @param x\n\t * @param y\n\t * @param cell\n\t */\n\tpublic void setCell(int x, int y, Cell cell) {\n\t\tif(x < 0 || x >= width) return;\n\t\tif(y < 0 || y >= height) return;\n\t\tcells[x][y] = cell;\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"private void loadTileLayer(TiledMap map, Element element) {\n\t\tif (element.getName().equals(\"layer\")) {\n\t\t\tString name = element.getAttribute(\"name\", null);\n\t\t\tint width = element.getIntAttribute(\"width\", 0);\n\t\t\tint height = element.getIntAttribute(\"height\", 0);\n\t\t\tint tileWidth = element.getParent().getIntAttribute(\"tilewidth\", 0);\n\t\t\tint tileHeight = element.getParent().getIntAttribute(\"tileheight\", 0);\n\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(width, height, tileWidth, tileHeight);\n\t\t\tlayer.setName(name);\n\t\t\t\n\t\t\tTiledMapTileSets tilesets = map.getTileSets();\n\t\t\t\n\t\t\tElement data = element.getChildByName(\"data\");\n\t\t\tString encoding = data.getAttribute(\"encoding\", null);\n\t\t\tString compression = data.getAttribute(\"compression\", null);\n\t\t\tif (encoding.equals(\"csv\")) {\n\t\t\t\tString[] array = data.getText().split(\",\");\n\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\tint id = (int) Long.parseLong(array[y * width + x].trim());\n\t\t\t\t\t\t\n\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\tCell cell = layer.getCell(x, height - 1 - y);\n\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(encoding.equals(\"base64\")) {\n\t\t\t\t\tbyte[] bytes = Base64Coder.decode(data.getText());\n\t\t\t\t\tif (compression == null) {\n\t\t\t\t\t\tint read = 0;\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 8 |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 16 |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 24;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\tCell cell = layer.getCell(x, height - 1 - y);\n\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compression.equals(\"gzip\")) {\n\t\t\t\t\t\tGZIPInputStream GZIS = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tGZIS = new GZIPInputStream(new ByteArrayInputStream(bytes), bytes.length);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data - IOException: \" + e.getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbyte[] temp = new byte[4];\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tGZIS.read(temp, 0, 4);\n\t\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[0]) |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[1]) << 8 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[2]) << 16 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[3]) << 24;\n\n\t\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\t\tCell cell = layer.getCell(x, height - 1 - y);\n\t\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data.\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compression.equals(\"zlib\")) {\n\t\t\t\t\t\tInflater zlib = new Inflater();\n\t\t\t\t\t\t\n\t\t\t\t\t\tbyte[] temp = new byte[4];\n\n\t\t\t\t\t\tzlib.setInput(bytes, 0, bytes.length);\n\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tzlib.inflate(temp, 0, 4);\n\t\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[0]) |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[1]) << 8 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[2]) << 16 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[3]) << 24;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\t\tCell cell = layer.getCell(x, height - 1 - y);\n\t\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(+90);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t\t\t\t} catch (DataFormatException e) {\n\t\t\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data.\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tElement properties = element.getChildByName(\"properties\");\n\t\t\tif (properties != null) {\n\t\t\t\tloadProperties(layer.getProperties(), properties);\n\t\t\t}\n\t\t\tmap.getLayers().addLayer(layer);\n\t\t}\t\t\n\t}","id":94542,"modified_method":"private void loadTileLayer(TiledMap map, Element element) {\n\t\tif (element.getName().equals(\"layer\")) {\n\t\t\tString name = element.getAttribute(\"name\", null);\n\t\t\tint width = element.getIntAttribute(\"width\", 0);\n\t\t\tint height = element.getIntAttribute(\"height\", 0);\n\t\t\tint tileWidth = element.getParent().getIntAttribute(\"tilewidth\", 0);\n\t\t\tint tileHeight = element.getParent().getIntAttribute(\"tileheight\", 0);\n\t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(width, height, tileWidth, tileHeight);\n\t\t\tlayer.setName(name);\n\t\t\t\n\t\t\tTiledMapTileSets tilesets = map.getTileSets();\n\t\t\t\n\t\t\tElement data = element.getChildByName(\"data\");\n\t\t\tString encoding = data.getAttribute(\"encoding\", null);\n\t\t\tString compression = data.getAttribute(\"compression\", null);\n\t\t\tif (encoding.equals(\"csv\")) {\n\t\t\t\tString[] array = data.getText().split(\",\");\n\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\tint id = (int) Long.parseLong(array[y * width + x].trim());\n\t\t\t\t\t\t\n\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(encoding.equals(\"base64\")) {\n\t\t\t\t\tbyte[] bytes = Base64Coder.decode(data.getText());\n\t\t\t\t\tif (compression == null) {\n\t\t\t\t\t\tint read = 0;\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 8 |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 16 |\n\t\t\t\t\t\t\t\tunsignedByteToInt(bytes[read++]) << 24;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compression.equals(\"gzip\")) {\n\t\t\t\t\t\tGZIPInputStream GZIS = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tGZIS = new GZIPInputStream(new ByteArrayInputStream(bytes), bytes.length);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data - IOException: \" + e.getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbyte[] temp = new byte[4];\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tGZIS.read(temp, 0, 4);\n\t\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[0]) |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[1]) << 8 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[2]) << 16 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[3]) << 24;\n\n\t\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data.\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compression.equals(\"zlib\")) {\n\t\t\t\t\t\tInflater zlib = new Inflater();\n\t\t\t\t\t\t\n\t\t\t\t\t\tbyte[] temp = new byte[4];\n\n\t\t\t\t\t\tzlib.setInput(bytes, 0, bytes.length);\n\n\t\t\t\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\t\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tzlib.inflate(temp, 0, 4);\n\t\t\t\t\t\t\t\t\tint id =\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[0]) |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[1]) << 8 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[2]) << 16 |\n\t\t\t\t\t\t\t\t\tunsignedByteToInt(temp[3]) << 24;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tfinal boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);\n\t\t\t\t\t\t\t\t\tfinal boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);\n\n\t\t\t\t\t\t\t\t\tid = id & ~MASK_CLEAR;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tTiledMapTile tile = tilesets.getTile(id);\n\t\t\t\t\t\t\t\t\tif (tile != null) {\n\t\t\t\t\t\t\t\t\t\tCell cell = new Cell();\n\t\t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n\t\t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(+90);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n\t\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(-90);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n\t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcell.setTile(tile);\n\t\t\t\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t\t\t\t} catch (DataFormatException e) {\n\t\t\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error Reading TMX Layer Data.\", e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tElement properties = element.getChildByName(\"properties\");\n\t\t\tif (properties != null) {\n\t\t\t\tloadProperties(layer.getProperties(), properties);\n\t\t\t}\n\t\t\tmap.getLayers().addLayer(layer);\n\t\t}\t\t\n\t}","commit_id":"1ab8a2c62465f79a661d142737d3f6a3706bbe62","url":"https://github.com/libgdx/libgdx"},{"original_method":"public HttpConnection getIdleConnection() throws IOException\n    {\n        synchronized (this)\n        {\n            long now = System.currentTimeMillis();\n            long idleTimeout = _client.getIdleTimeout();\n\n            // Find an idle connection\n            while (_idle.size() > 0)\n            {\n                HttpConnection connection = _idle.remove(_idle.size() - 1);\n                long last = connection.getLast();\n                if (connection.getEndPoint().isOpen() && (last == 0 || ((now - last) < idleTimeout)))\n                    return connection;\n                else\n                {\n                    _connections.remove(connection);\n                    connection.getEndPoint().close();\n                }\n            }\n\n            return null;\n        }\n    }","id":94543,"modified_method":"public HttpConnection getIdleConnection() throws IOException\n    {\n        long now = System.currentTimeMillis();\n        long idleTimeout=_client.getIdleTimeout();\n        HttpConnection connection = null;\n        while (true)\n        {\n            synchronized (this)\n            {\n                if (_idle.size() > 0)\n                    connection = _idle.remove(_idle.size()-1);\n            }\n            \n            if (connection==null)\n                return null;\n\n            long last = connection.getLast();\n            if (connection.getEndPoint().isOpen() && (last==0 || ((now-last)<idleTimeout)) )\n                return connection;\n\n            _connections.remove(connection);\n            connection.getEndPoint().close();\n            connection=null;\n        }\n    }","commit_id":"3ee44fd75753f4bf1b9ccaee572fe12656780717","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void testPerf() throws Exception\n    {\n        sender(1,false);\n        sender(1,true);\n        sender(10,false);\n        sender(10,true);\n        sender(100,false);\n        sender(100,true);\n        if (_stress)\n        {\n            sender(1000,false);\n            sender(1000,true);\n        }\n    }","id":94544,"modified_method":"public void testPerf() throws Exception\n    {\n        if (_stress)\n        {\n            sender(1,false);\n            sender(1,true);\n            sender(100,false);\n            sender(100,true);\n            sender(10000,false);\n            sender(10000,true);\n        }\n        else\n        {\n            sender(1,false);\n            sender(1,true);\n            sender(10,false);\n            sender(10,true);\n            sender(20,false);\n            sender(20,true);\n        }\n    }","commit_id":"3ee44fd75753f4bf1b9ccaee572fe12656780717","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void actionPerformed(java.awt.event.ActionEvent e)\n    {\n        TypeList typeList = new edu.tufts.vue.ontology.ui.TypeList();\n        DockWindow typeWindow = tufts.vue.gui.GUI.createDockWindow(\"Fedora Ontology: \" + (TypeList.count++),edu.tufts.vue.ontology.ui.TypeList.createTestPanel(typeList));\n        typeWindow.setLocation(200,100);\n        typeWindow.pack();\n        typeWindow.setVisible(true);\n    }","id":94545,"modified_method":"public void actionPerformed(java.awt.event.ActionEvent e)\n    {\n        TypeList typeList = new edu.tufts.vue.ontology.ui.TypeList();\n        //DockWindow typeWindow = tufts.vue.gui.GUI.createDockWindow(\"Fedora Ontology: \" + (TypeList.count++),edu.tufts.vue.ontology.ui.TypeList.createTestPanel(typeList));\n        //typeWindow.setLocation(200,100);\n        //typeWindow.pack();\n        //typeWindow.setVisible(true);\n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public java.awt.Component getListCellRendererComponent(JList jList, Object value, int i, boolean isSelected, boolean hasFocus) \n        {\n            JPanel p = new JPanel();\n            java.awt.GridLayout grid = new java.awt.GridLayout(1,2);\n            p.setLayout(grid);\n           // p.setLayout(new java.awt.BorderLayout());\n            \n            p.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200,200,200)));\n                    \n            if(value instanceof LWComponent)\n            {\n                LWComponent comp = (LWComponent)value;\n                LWComponent noLabelComp = (LWComponent)comp.duplicate();\n                if(comp instanceof LWNode)\n                  noLabelComp.setLabel(\"   \");\n                else\n                  noLabelComp.setLabel(\" \");\n                String truncatedLabel = comp.getLabel();\n                if(truncatedLabel.length() > 15)\n                {\n                    truncatedLabel = truncatedLabel.substring(0,15) + \"...\";\n                }\n                JLabel label = new JLabel(truncatedLabel);\n                //java.awt.Image im = comp.getAsImage();\n                java.awt.Image im = noLabelComp.getAsImage();\n                JLabel imageLabel = new JLabel(new javax.swing.ImageIcon(im));\n                p.add(imageLabel);\n                p.add(label);\n            }\n            \n            if(value == getSelectedValue())\n            {\n                p.setBackground(new java.awt.Color(230,230,230));\n            }\n            else\n                p.setBackground(new java.awt.Color(255,255,255));\n            return p;\n        }","id":94546,"modified_method":"public java.awt.Component getListCellRendererComponent(JList jList, Object value, int i, boolean isSelected, boolean hasFocus) \n        {\n            JPanel p = new JPanel();\n            java.awt.GridLayout grid = new java.awt.GridLayout(1,2);\n            p.setLayout(grid);\n           // p.setLayout(new java.awt.BorderLayout());\n            \n            p.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200,200,200)));\n                    \n            if(value instanceof OntType)\n            {\n                LWComponent noLabel = createLWComponent(value).duplicate();\n                noLabel.setLabel(\"\");\n                noLabel.setAutoSized(false);\n                noLabel.setSize(40,25);\n                //p.add(new JLabel(new javax.swing.ImageIcon(createLWComponent(value).getAsImage())));\n                p.add(new JLabel(new javax.swing.ImageIcon(noLabel.getAsImage())));\n                p.add(new JLabel(((OntType)(value)).getLabel()));\n            }\n            \n            if(value instanceof LWComponent)\n            {\n                LWComponent comp = (LWComponent)value;\n                LWComponent noLabelComp = (LWComponent)comp.duplicate();\n                if(comp instanceof LWNode)\n                  noLabelComp.setLabel(\"   \");\n                else\n                  noLabelComp.setLabel(\" \");\n                String truncatedLabel = comp.getLabel();\n                if(truncatedLabel.length() > 15)\n                {\n                    truncatedLabel = truncatedLabel.substring(0,15) + \"...\";\n                }\n                JLabel label = new JLabel(truncatedLabel);\n                //java.awt.Image im = comp.getAsImage();\n                java.awt.Image im = noLabelComp.getAsImage();\n                JLabel imageLabel = new JLabel(new javax.swing.ImageIcon(im));\n                p.add(imageLabel);\n                p.add(label);\n            }\n            \n            if(value == getSelectedValue())\n            {\n                p.setBackground(new java.awt.Color(230,230,230));\n            }\n            else\n                p.setBackground(new java.awt.Color(255,255,255));\n            return p;\n        }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"private void addNode(OntType ontType,Ontology ontology,Style style)\n    {         \n                LWNode node = new LWNode(ontType.getLabel());\n                  \n                //node.setLabel(ot.getLabel());\n\n                node.setAutoSized(false);\n                \n                node.setAbsoluteSize(25,25);\n                \n\n                NodeTool.SubTool st = NodeTool.getActiveSubTool();\n                node.setShape(st.getShape());\n                node.applyCSS(style);\n                addType(node);\n          \n    }","id":94547,"modified_method":"private void addNode(OntType ontType,Ontology ontology,Style style)\n    {         \n                LWNode node = new LWNode(ontType.getLabel());\n                  \n                //node.setLabel(ot.getLabel());\n\n                node.setAutoSized(false);\n                \n                node.setAbsoluteSize(25,25);\n                \n\n                NodeTool.SubTool st = NodeTool.getActiveSubTool();\n                node.setShape(st.getShape());\n                node.applyCSS(style);\n                //addType(node);\n          \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"private void addLink(OntType ontType,Ontology ontology, Style style)\n    {\n        \n              LWLink link = new LWLink();\n              link.setAutoSized(false);\n              link.setLabel(ontType.getLabel());\n              link.setHeadPoint(10,25);\n              link.setTailPoint(60,30);\n              link.setAbsoluteSize(100,50);\n              link.setStrokeWidth(4.0f);\n              link.setStrokeColor(java.awt.Color.RED);\n              //applyDefaultLinkStyle(link);\n              link.applyCSS(ontType.getStyle());\n              addType(link);\n        \n    }","id":94548,"modified_method":"private void addLink(OntType ontType,Ontology ontology, Style style)\n    {\n        \n              LWLink link = new LWLink();\n              link.setAutoSized(false);\n              link.setLabel(ontType.getLabel());\n              link.setHeadPoint(10,25);\n              link.setTailPoint(60,30);\n              link.setAbsoluteSize(100,50);\n              link.setStrokeWidth(4.0f);\n              link.setStrokeColor(java.awt.Color.RED);\n              //applyDefaultLinkStyle(link);\n              link.applyCSS(ontType.getStyle());\n              //addType(link);\n        \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public void loadOntology(URL ontologyURL,URL cssURL,org.osid.shared.Type ontType)\n    {\n        Ontology ontology = OntManager.getOntManager().readOntologyWithStyle(ontologyURL,\n                                                      cssURL,\n                                                      ontType);\n        \n        fillList(ontology);\n        \n    }","id":94549,"modified_method":"public void loadOntology(URL ontologyURL,URL cssURL,org.osid.shared.Type ontType)\n    {\n       ontology = OntManager.getOntManager().readOntologyWithStyle(ontologyURL,\n                                                      cssURL,\n                                                      ontType);\n        \n       setModel(new OntologyTypeListModel(ontology));\n       // fillList(ontology);\n        \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public void loadOntology(URL ontologyURL,URL cssURL,org.osid.shared.Type ontType,boolean fromFile)\n    {\n        Ontology ontology = OntManager.getOntManager().readOntologyWithStyle(ontologyURL,\n                                                      cssURL,\n                                                      ontType);\n        \n        //OntManager.getOntManager().getOntList().add(ontology);\n        //System.out.println(\"TypeList: ontology list size: \" + OntManager.getOntManager().getOntList().size());\n        \n        \n        \n        fillList(ontology);\n        \n    }","id":94550,"modified_method":"public void loadOntology(URL ontologyURL,URL cssURL,org.osid.shared.Type ontType,boolean fromFile)\n    {\n        ontology = OntManager.getOntManager().readOntologyWithStyle(ontologyURL,\n                                                      cssURL,\n                                                      ontType);\n        \n        //OntManager.getOntManager().getOntList().add(ontology);\n        //System.out.println(\"TypeList: ontology list size: \" + OntManager.getOntManager().getOntList().size());\n        \n        setModel(new OntologyTypeListModel(ontology));\n        \n        //fillList(ontology);\n        \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public void loadOntology(String ontologyLocation,String cssLocation,org.osid.shared.Type ontType,boolean fromFile)\n    {\n        Ontology ontology = OntManager.getOntManager().readOntologyWithStyle(VueResources.getURL(ontologyLocation),\n                                                      VueResources.getURL(cssLocation),\n                                                      ontType);\n        \n        //OntManager.getOntManager().getOntList().add(ontology);\n        \n        //System.out.println(\"TypeList: ontology list size: \" + OntManager.getOntManager().getOntList().size());\n        \n        fillList(ontology);\n        \n    }","id":94551,"modified_method":"public void loadOntology(String ontologyLocation,String cssLocation,org.osid.shared.Type ontType,boolean fromFile)\n    {\n        ontology = OntManager.getOntManager().readOntologyWithStyle(VueResources.getURL(ontologyLocation),\n                                                      VueResources.getURL(cssLocation),\n                                                      ontType);\n        \n        //OntManager.getOntManager().getOntList().add(ontology);\n        \n        //System.out.println(\"TypeList: ontology list size: \" + OntManager.getOntManager().getOntList().size());\n        \n        //fillList(ontology);\n        \n        setModel(new OntologyTypeListModel(ontology));\n        \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public TypeList() {\n        \n        mDataModel = new DefaultListModel();\n        setModel(mDataModel);\n        setCellRenderer(new TypeCellRenderer());\n        \n        javax.swing.DefaultListSelectionModel selectionModel = new javax.swing.DefaultListSelectionModel();\n        selectionModel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n        setSelectionModel(selectionModel);\n        selectionModel.addListSelectionListener(new javax.swing.event.ListSelectionListener() {\n            public void valueChanged(javax.swing.event.ListSelectionEvent e)\n            {\n                comp = ((LWComponent)getSelectedValue()).duplicate();\n                comp.setParentStyle(comp);\n                VUE.getSelection().setTo(comp);\n            }\n        });\n        \n        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {    \n                public void mouseDragged(java.awt.event.MouseEvent me) {\n                    System.out.println(\"TypeList: mouse dragged\");\n                    System.out.println(\"TypeList: selected label \" + ((LWComponent)(getSelectedValue())).getLabel());\n                    \n                    if(comp instanceof LWNode)\n                    {\n                      VueToolbarController vtc = VueToolbarController.getController();\n                      VueTool rTool = vtc.getTool(\"nodeTool\");\n                      //rTool.setSelectedSubTool(vtc.getTool(\"rect\"));\n                      VueToolbarController.getController().setSelectedTool(rTool);\n                    }\n;                    \n                    GUI.startLWCDrag(TypeList.this,\n                                     me,\n                                     comp,\n                                      VUE.getActiveViewer().getTransferableSelection());\n                 \n                }\n         });\n    \n    }","id":94552,"modified_method":"public TypeList() {\n        \n        //this.ontology = ontology;\n        \n        //mDataModel = new DefaultListModel();\n        /*mDataModel = new ListModel()\n        {\n            public Object getElementAt(int index)\n            {\n                if(ontology!=null)\n                  return ontology.getOntTypes().get(index);\n                else\n                  return null;\n            }\n            \n            public int getSize()\n            {\n                if(ontology!=null)\n                  return ontology.getOntTypes().size();\n                else\n                  return 0;\n            }\n            \n            public void addListDataListener(ListDataListener listener)\n            {\n\n            }\n            \n            public void removeListDataListener(ListDataListener listener)\n            {\n                \n            }\n        };*/\n        //setModel(mDataModel);\n        setCellRenderer(new TypeCellRenderer());\n        \n        javax.swing.DefaultListSelectionModel selectionModel = new javax.swing.DefaultListSelectionModel();\n        selectionModel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n        setSelectionModel(selectionModel);\n        selectionModel.addListSelectionListener(new javax.swing.event.ListSelectionListener() {\n            public void valueChanged(javax.swing.event.ListSelectionEvent e)\n            {\n                //comp = ((LWComponent)getSelectedValue()).duplicate();\n                comp = createLWComponent(getSelectedValue());\n                comp.setParentStyle(comp);\n                VUE.getSelection().setTo(comp);\n            }\n        });\n        \n        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {    \n                public void mouseDragged(java.awt.event.MouseEvent me) {\n                    System.out.println(\"TypeList: mouse dragged\");\n                    //System.out.println(\"TypeList: selected label \" + ((LWComponent)(getSelectedValue())).getLabel());\n                    \n                    if(comp instanceof LWNode)\n                    {\n                      VueToolbarController vtc = VueToolbarController.getController();\n                      VueTool rTool = vtc.getTool(\"nodeTool\");\n                      //rTool.setSelectedSubTool(vtc.getTool(\"rect\"));\n                      VueToolbarController.getController().setSelectedTool(rTool);\n                    }\n;                    \n                    GUI.startLWCDrag(TypeList.this,\n                                     me,\n                                     comp,\n                                      VUE.getActiveViewer().getTransferableSelection());\n                 \n                }\n         });\n    \n    }","commit_id":"a78ef60456e609c52341f0568f656ee33f4ab609","url":"https://github.com/VUE/VUE"},{"original_method":"public final AnalyzedSentence replace(final AnalyzedSentence text) throws IOException {\n\n    final AnalyzedTokenReadings[] tokens = text.getTokensWithoutWhitespace();\n    final AnalyzedTokenReadings[] whTokens = text.getTokens();\n    final int[] tokenPositions = new int[tokens.length + 1 ];\n\n    int tokenPos = 0;\n    int prevSkipNext = 0;\n    int skipNext = 0;\n    int matchPos = 0;\n    int skipShift = 0;\n    // this variable keeps the total number\n    // of tokens skipped - used to avoid\n    // that nextPos gets back to unmatched tokens...\n    int skipShiftTotal = 0;\n\n    int firstMatchToken = -1;\n    //int lastMatchToken = -1;\n    final int patternSize = patternElements.size();\n    Element elem = null, prevElement = null;\n    final boolean startWithSentStart = patternElements.get(0).isSentStart();\n\n    for (int i = 0; i < tokens.length; i++) {\n      boolean allElementsMatch = true;\n\n      //stop processing if rule is longer than the sentence\n      if (patternSize + i > tokens.length) {\n        allElementsMatch = false;\n        break;\n      }            \n\n      //stop looking for sent_start - it will never match any\n      //token except the first\n      if (startWithSentStart && i > 0) {\n        allElementsMatch = false;\n        break;\n      }\n\n      int matchingTokens = 0;\n      for (int k = 0; (k < patternSize); k++) {\n        if (elem != null) {\n          prevElement = elem;\n        }\n        elem = patternElements.get(k);\n        skipNext = elem.getSkipNext();\n        final int nextPos = tokenPos + k + skipShiftTotal;\n\n        if (nextPos >= tokens.length) {\n          allElementsMatch = false;\n          break;\n        }\n\n        boolean skipMatch = false, thisMatched = false, prevMatched = false;\n        boolean exceptionMatched = false;\n        if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) { // SENT_END?\n          prevSkipNext = tokens.length - (nextPos + 1);\n        }\n        for (int m = nextPos; m <= nextPos + prevSkipNext; m++) {          \n          boolean matched = false;\n          final int numberOfReadings = tokens[m].getReadingsLength();\n\n          for (int l = 0; l < numberOfReadings; l++) {\n            final AnalyzedToken matchToken = tokens[m].getAnalyzedToken(l);\n            if (prevSkipNext > 0 && prevElement != null\n                && prevElement.scopeNextExceptionMatch(matchToken)) {\n              exceptionMatched = true;\n              prevMatched = true;              \n            }\n            if (elem.referenceElement()\n                && (firstMatchToken + elem.getMatch().getTokenRef() \n                    < tokens.length)) {\n              elem.getMatch().setToken(tokens[firstMatchToken \n                                              + elem.getMatch().getTokenRef()]);\n              elem.getMatch().setSynthesizer(language.getSynthesizer());\n              elem.compile();              \n            }\n            if (elem.hasAndGroup()) {\n              for (final Element andElement : elem.getAndGroup()) {\n                if (andElement.referenceElement()\n                    && (firstMatchToken + andElement.getMatch().getTokenRef() \n                        < tokens.length)) {\n                  andElement.getMatch().setToken(tokens[firstMatchToken \n                                      + andElement.getMatch().getTokenRef()]);\n                  andElement.getMatch().setSynthesizer(language.getSynthesizer());\n                  andElement.compile();\n                }                               \n              }\n              if (l == 0) { \n                elem.setupAndGroup();\n              }\n            }\n            thisMatched |= elem.completeMatch(matchToken);\n\n            if (l + 1 == numberOfReadings && elem.hasAndGroup()) {\n              thisMatched &= elem.checkAndGroup(thisMatched);\n            }\n\n            exceptionMatched |= elem.completeExceptionMatch(matchToken);                \n            if (elem.hasPreviousException() && m > 0) {\n              final int numReadings = tokens[m - 1].getReadingsLength();\n              for (int p = 0; p < numReadings; p++) {\n                final AnalyzedToken matchExceptionToken = tokens[m - 1].getAnalyzedToken(p);\n                exceptionMatched |= elem.scopePreviousExceptionMatch(matchExceptionToken);\n              }\n            }            \n            // Logical OR (cannot be AND):\n            if (!(thisMatched || exceptionMatched)) {\n              matched |= false;\n            } else {\n              matched = true;\n              matchPos = m;\n              skipShift = matchPos - nextPos;              \n              tokenPositions[matchingTokens] = skipShift + 1;              \n            }\n            skipMatch = (skipMatch || matched) && !exceptionMatched;\n          }\n\n          //disallow exceptions that should match only current tokens          \n          if (!(thisMatched || prevMatched)) {\n            exceptionMatched = false;\n          }\n\n          if (skipMatch) {\n            break;\n          }\n\n        }\n        //disallow exceptions that should match only current tokens        \n        if (!(thisMatched || prevMatched)) {\n          skipMatch = false;\n        }\n        allElementsMatch = skipMatch;\n        if (skipMatch) {\n          prevSkipNext = skipNext;\n        } else {\n          prevSkipNext = 0;\n        }\n        if (allElementsMatch) {                              \n          matchingTokens++;\n          //  lastMatchToken = matchPos;           \n          if (firstMatchToken == -1) {\n            firstMatchToken = matchPos; \n          }\n          skipShiftTotal += skipShift;\n        } else {\n          skipShiftTotal = 0;\n          break;\n        }\n      }\n\n      tokenPos++;\n\n      if (allElementsMatch) {\n        int correctedStPos = 0;\n        if (startPositionCorrection > 0) {        \n          for (int l = 0; l <= startPositionCorrection; l++) {\n            correctedStPos +=  tokenPositions[l];\n          }\n          correctedStPos--;\n        }        \n\n        int correctedEndPos = 0;\n        if (endPositionCorrection < 0) {\n          int l = 0;\n          while (l > endPositionCorrection) {\n            correctedEndPos -= tokenPositions[matchingTokens + l - 1];\n            l--;\n          }\n        }         \n\n        final int fromPos = text.getOriginalPosition(firstMatchToken + correctedStPos);\n        //int toPos = lastMatchToken + correctedEndPos;\n        final int numRead = whTokens[fromPos].getReadingsLength();\n        if (matchToken == null) {\n          String lemma = \"\";\n          for (int l = 0; l < numRead; l++) {\n            if (whTokens[fromPos].getAnalyzedToken(l).getPOSTag() != null \n                && (whTokens[fromPos].getAnalyzedToken(l).getPOSTag().\n                    equals(disambiguatedPOS)\n                    && (whTokens[fromPos].getAnalyzedToken(l).getLemma() != null))) {\n              lemma = whTokens[fromPos].getAnalyzedToken(l).getLemma();                          \n            } \n          }\n          if ((\"\").equals(lemma)) {\n            lemma = whTokens[fromPos].getAnalyzedToken(0).getLemma();\n          }\n\n          final AnalyzedTokenReadings toReplace = new AnalyzedTokenReadings(\n              new AnalyzedToken(whTokens[fromPos].getToken(), disambiguatedPOS, lemma,\n                  whTokens[fromPos].getStartPos()));\n          whTokens[fromPos] = toReplace;\n        } else {\n          // using the match element\n          matchToken.setToken(whTokens[fromPos]);\n          whTokens[fromPos] = matchToken.filterReadings(whTokens[fromPos]);\n        }\n      } else {\n        firstMatchToken = -1;\n        //lastMatchToken = -1;\n        skipShiftTotal = 0;\n      }\n    }\n\n    return new AnalyzedSentence(whTokens);\n  }","id":94553,"modified_method":"public final AnalyzedSentence replace(final AnalyzedSentence text) throws IOException {\n\n    final AnalyzedTokenReadings[] tokens = text.getTokensWithoutWhitespace();\n    final AnalyzedTokenReadings[] whTokens = text.getTokens();\n    final int[] tokenPositions = new int[tokens.length + 1 ];\n\n    int tokenPos = 0;\n    int prevSkipNext = 0;\n    int skipNext = 0;\n    int matchPos = 0;\n    int skipShift = 0;\n    // this variable keeps the total number\n    // of tokens skipped - used to avoid\n    // that nextPos gets back to unmatched tokens...\n    int skipShiftTotal = 0;\n\n    int firstMatchToken = -1;\n    //int lastMatchToken = -1;\n    final int patternSize = patternElements.size();\n    Element elem = null, prevElement = null;\n    final boolean startWithSentStart = patternElements.get(0).isSentStart();\n\n    for (int i = 0; i < tokens.length; i++) {\n      boolean allElementsMatch = true;\n\n      //stop processing if rule is longer than the sentence\n      if (patternSize + i > tokens.length) {\n        allElementsMatch = false;\n        break;\n      }            \n\n      //stop looking for sent_start - it will never match any\n      //token except the first\n      if (startWithSentStart && i > 0) {\n        allElementsMatch = false;\n        break;\n      }\n\n      int matchingTokens = 0;\n      for (int k = 0; (k < patternSize); k++) {\n        if (elem != null) {\n          prevElement = elem;\n        }\n        elem = patternElements.get(k);\n        skipNext = elem.getSkipNext();\n        final int nextPos = tokenPos + k + skipShiftTotal;\n\n        if (nextPos >= tokens.length) {\n          allElementsMatch = false;\n          break;\n        }\n\n        boolean skipMatch = false, thisMatched = false, prevMatched = false;\n        boolean exceptionMatched = false;\n        if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) { // SENT_END?\n          prevSkipNext = tokens.length - (nextPos + 1);\n        }\n        for (int m = nextPos; m <= nextPos + prevSkipNext; m++) {          \n          boolean matched = false;\n          final int numberOfReadings = tokens[m].getReadingsLength();\n\n          for (int l = 0; l < numberOfReadings; l++) {\n            final AnalyzedToken matchToken = tokens[m].getAnalyzedToken(l);\n            if (prevSkipNext > 0 && prevElement != null\n                && prevElement.isMatchedByScopeNextException(matchToken)) {\n              exceptionMatched = true;\n              prevMatched = true;              \n            }\n            if (elem.isReferenceElement()\n                && (firstMatchToken + elem.getMatch().getTokenRef() \n                    < tokens.length)) {\n              elem.compile(tokens[firstMatchToken + \n                                  elem.getMatch().getTokenRef()],\n                                  language.getSynthesizer());\n\n            }\n            if (elem.hasAndGroup()) {\n              for (final Element andElement : elem.getAndGroup()) {\n                if (andElement.isReferenceElement()\n                    && (firstMatchToken + andElement.getMatch().getTokenRef() \n                        < tokens.length)) {\n                  andElement.compile(tokens[firstMatchToken \n                                            + andElement.getMatch().getTokenRef()],\n                                            language.getSynthesizer());                  \n                }                               \n              }\n              if (l == 0) { \n                elem.setupAndGroup();\n              }\n            }\n            thisMatched |= elem.isMatchedCompletely(matchToken);\n\n            if (l + 1 == numberOfReadings && elem.hasAndGroup()) {\n              thisMatched &= elem.checkAndGroup(thisMatched);\n            }\n\n            exceptionMatched |= elem.isExceptionMatchedCompletely(matchToken);                \n            if (elem.hasPreviousException() && m > 0) {\n              final int numReadings = tokens[m - 1].getReadingsLength();\n              for (int p = 0; p < numReadings; p++) {\n                final AnalyzedToken matchExceptionToken = tokens[m - 1].getAnalyzedToken(p);\n                exceptionMatched |= elem.isMatchedByScopePreviousException(matchExceptionToken);\n              }\n            }            \n            // Logical OR (cannot be AND):\n            if (thisMatched || exceptionMatched) {\n              matched = true;\n              matchPos = m;\n              skipShift = matchPos - nextPos;              \n              tokenPositions[matchingTokens] = skipShift + 1;\n            } else {\n              matched |= false;                            \n            }\n            skipMatch = (skipMatch || matched) && !exceptionMatched;\n          }\n\n          //disallow exceptions that should match only current tokens          \n          if (!(thisMatched || prevMatched)) {\n            exceptionMatched = false;\n            skipMatch = false;\n          }\n\n          if (skipMatch) {\n            break;\n          }\n\n        }\n        allElementsMatch = skipMatch;\n        if (skipMatch) {\n          prevSkipNext = skipNext;\n          matchingTokens++;\n          //  lastMatchToken = matchPos;           \n          if (firstMatchToken == -1) {\n            firstMatchToken = matchPos; \n          }\n          skipShiftTotal += skipShift;\n        } else {\n          prevSkipNext = 0;\n          skipShiftTotal = 0;\n          break;\n        }       \n      }\n\n      tokenPos++;\n\n      if (allElementsMatch) {\n        int correctedStPos = 0;\n        if (startPositionCorrection > 0) {        \n          for (int l = 0; l <= startPositionCorrection; l++) {\n            correctedStPos +=  tokenPositions[l];\n          }\n          correctedStPos--;\n        }        \n\n        int correctedEndPos = 0;\n        if (endPositionCorrection < 0) {\n          int l = 0;\n          while (l > endPositionCorrection) {\n            correctedEndPos -= tokenPositions[matchingTokens + l - 1];\n            l--;\n          }\n        }         \n\n        final int fromPos = text.getOriginalPosition(firstMatchToken + correctedStPos);\n        //int toPos = lastMatchToken + correctedEndPos;\n        final int numRead = whTokens[fromPos].getReadingsLength();\n        if (matchToken == null) {\n          String lemma = \"\";\n          for (int l = 0; l < numRead; l++) {\n            if (whTokens[fromPos].getAnalyzedToken(l).getPOSTag() != null \n                && (whTokens[fromPos].getAnalyzedToken(l).getPOSTag().\n                    equals(disambiguatedPOS)\n                    && (whTokens[fromPos].getAnalyzedToken(l).getLemma() != null))) {\n              lemma = whTokens[fromPos].getAnalyzedToken(l).getLemma();                          \n            } \n          }\n          if ((\"\").equals(lemma)) {\n            lemma = whTokens[fromPos].getAnalyzedToken(0).getLemma();\n          }\n\n          final AnalyzedTokenReadings toReplace = new AnalyzedTokenReadings(\n              new AnalyzedToken(whTokens[fromPos].getToken(), disambiguatedPOS, lemma,\n                  whTokens[fromPos].getStartPos()));\n          whTokens[fromPos] = toReplace;\n        } else {\n          // using the match element\n          matchToken.setToken(whTokens[fromPos]);\n          whTokens[fromPos] = matchToken.filterReadings(whTokens[fromPos]);\n        }\n      } else {\n        firstMatchToken = -1;\n        //lastMatchToken = -1;\n        skipShiftTotal = 0;\n      }\n    }\n\n    return new AnalyzedSentence(whTokens);\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Checks whether the rule element matches the token\n   * given as a parameter.\n   * @param token @AnalyzedToken to check matching against\n   * @return True if token matches, false otherwise.\n   */\n  public final boolean match(final AnalyzedToken token) {\n    boolean matched = false;\n    if (testString) {\n      matched = (matchStringToken(token) != negation) \n          && (matchPosToken(token) != posNegation);\n    } else {\n      matched = (!negation) && (matchPosToken(token) != posNegation);\n    }\n    \n    if (andGroupSet) {\n      andGroupCheck[0] |= matched;\n    }\n    \n    return matched;\n  }","id":94554,"modified_method":"/**\n   * Checks whether the rule element matches the token\n   * given as a parameter.\n   * @param token @AnalyzedToken to check matching against\n   * @return True if token matches, false otherwise.\n   */\n  public final boolean isMatched(final AnalyzedToken token) {\n    boolean matched = false;\n    if (testString) {\n      matched = (isStringTokenMatched(token) != negation) \n          && (isPosTokenMatched(token) != posNegation);\n    } else {\n      matched = (!negation) && (isPosTokenMatched(token) != posNegation);\n    }\n    \n    if (andGroupSet) {\n      andGroupCheck[0] |= matched;\n    }\n    \n    return matched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * This method checks exceptions both in AND-group and the token.\n   * Introduced to for clarity.\n   * @param token Token to match\n   * @return True if matched.\n   */\n  public final boolean completeExceptionMatch(final AnalyzedToken token) {\n    //note: short-circuiting possible\n    return exceptionMatch(token) \n        || andGroupExceptionMatch(token);\n  }","id":94555,"modified_method":"/**\n   * This method checks exceptions both in AND-group and the token.\n   * Introduced to for clarity.\n   * @param token Token to match\n   * @return True if matched.\n   */\n  public final boolean isExceptionMatchedCompletely(final AnalyzedToken token) {\n    //note: short-circuiting possible\n    return isExceptionMatched(token) \n        || isAndExceptionGroupMatched(token);\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Enables testing multiple conditions specified by\n   * multiple element exceptions.\n   * \n   * Works as logical AND operator.\n   * \n   * @param token AnalyzedToken - the token checked for exceptions. \n   * @return true if all conditions are met, false otherwise.\n   */\n  public final boolean andGroupExceptionMatch(final AnalyzedToken token) {\n    boolean andGroupExceptionMatched = false;\n    if (andGroupSet) {\n      for (final Element testAndGroup : andGroupList) {\n        andGroupExceptionMatched |= testAndGroup.exceptionMatch(token);\n        if (andGroupExceptionMatched) {\n          return andGroupExceptionMatched;\n        }\n      }\n    }\n    return andGroupExceptionMatched;\n  }","id":94556,"modified_method":"/**\n   * Enables testing multiple conditions specified by\n   * multiple element exceptions.\n   * \n   * Works as logical AND operator.\n   * \n   * @param token AnalyzedToken - the token checked for exceptions. \n   * @return true if all conditions are met, false otherwise.\n   */\n  public final boolean isAndExceptionGroupMatched(final AnalyzedToken token) {\n    boolean andGroupExceptionMatched = false;\n    if (andGroupSet) {\n      for (final Element testAndGroup : andGroupList) {\n        andGroupExceptionMatched |= testAndGroup.isExceptionMatched(token);\n        if (andGroupExceptionMatched) {\n          return andGroupExceptionMatched;\n        }\n      }\n    }\n    return andGroupExceptionMatched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * \n   * @return true when this element refers to another token.\n   */\n  public final boolean referenceElement() {\n    return containsMatches;\n  }","id":94557,"modified_method":"/**\n   * \n   * @return true when this element refers to another token.\n   */\n  public final boolean isReferenceElement() {\n    return containsMatches;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Tests whether the string token element matches a given token.\n   * @param token @AnalyzedToken to match against.\n   * @return True if matches.\n   */\n  final boolean matchStringToken(final AnalyzedToken token) {\n    String testToken = null;\n    // enables using words with lemmas and without lemmas\n    // in the same regexp with inflected=\"yes\"\n    if (inflected) {\n      testToken = token.getLemma();\n      if (testToken == null) {\n        testToken = token.getToken();\n      }\n    } else {\n      testToken = token.getToken();\n    }\n\n    if (stringRegExp) {\n      if (token.getToken() != null) {\n        if (m == null) {\n          m = p.matcher(testToken);\n        } else {\n          m.reset(testToken);\n        }\n        return m.matches();\n      }\n    } else {      \n      if (caseSensitive) {\n        return stringToken.equals(testToken);\n      } else {\n        return stringToken.equalsIgnoreCase(testToken);\n      }      \n    }\n\n    return false;\n  }","id":94558,"modified_method":"/**\n   * Tests whether the string token element matches a given token.\n   * @param token @AnalyzedToken to match against.\n   * @return True if matches.\n   */\n  final boolean isStringTokenMatched(final AnalyzedToken token) {\n    String testToken = null;\n    // enables using words with lemmas and without lemmas\n    // in the same regexp with inflected=\"yes\"\n    if (inflected) {\n      testToken = token.getLemma();\n      if (testToken == null) {\n        testToken = token.getToken();\n      }\n    } else {\n      testToken = token.getToken();\n    }\n\n    if (stringRegExp) {\n      if (token.getToken() != null) {\n        if (m == null) {\n          m = p.matcher(testToken);\n        } else {\n          m.reset(testToken);\n        }\n        return m.matches();\n      }\n    } else {      \n      if (caseSensitive) {\n        return stringToken.equals(testToken);\n      } else {\n        return stringToken.equalsIgnoreCase(testToken);\n      }      \n    }\n\n    return false;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Checks whether a previously set exception matches\n   * (in case the exception had scope == \"next\").\n   * @param token @AnalyzedToken to check matching against.\n   * @return True if any of the exceptions matches.\n   */\n  public final boolean scopeNextExceptionMatch(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionSet) {      \n      for (final Element testException : exceptionList) {\n        if (testException.exceptionValidNext) {\n          exceptionMatched |= testException.match(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","id":94559,"modified_method":"/**\n   * Checks whether a previously set exception matches\n   * (in case the exception had scope == \"next\").\n   * @param token @AnalyzedToken to check matching against.\n   * @return True if any of the exceptions matches.\n   */\n  public final boolean isMatchedByScopeNextException(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionSet) {      \n      for (final Element testException : exceptionList) {\n        if (testException.exceptionValidNext) {\n          exceptionMatched |= testException.isMatched(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Enables testing multiple conditions specified by\n   * different elements. Doesn't test exceptions.\n   * \n   * Works as logical AND operator only if preceded\n   * with setupAndGroup(), and followed by checkAndGroup().\n   * \n   * @param token AnalyzedToken - the token checked. \n   * @return true if any condition is met, false otherwise.\n   */\n  public final boolean andGroupMatch(final AnalyzedToken token) {\n    boolean andGroupMatched = false;\n    if (andGroupSet) {\n      for (int i = 0; i < andGroupList.size(); i++) {\n        if (!andGroupCheck[i + 1]) {\n        final Element testAndGroup = andGroupList.get(i);\n        if (testAndGroup.match(token)) {\n          andGroupMatched = true;\n          andGroupCheck[i + 1] = true;\n        }\n        }\n      }\n    }\n    return andGroupMatched;\n  }","id":94560,"modified_method":"/**\n   * Enables testing multiple conditions specified by\n   * different elements. Doesn't test exceptions.\n   * \n   * Works as logical AND operator only if preceded\n   * with {@link #setupAndGroup()}, and followed by {@link #checkAndGroup(boolean)}.\n   * \n   * @param token AnalyzedToken - the token checked. \n   * @return true if any condition is met, false otherwise.\n   */\n  public final boolean isAndGroupMatched(final AnalyzedToken token) {\n    boolean andGroupMatched = false;\n    if (andGroupSet) {\n      for (int i = 0; i < andGroupList.size(); i++) {\n        if (!andGroupCheck[i + 1]) {\n        final Element testAndGroup = andGroupList.get(i);\n        if (testAndGroup.isMatched(token)) {\n          andGroupMatched = true;\n          andGroupCheck[i + 1] = true;\n        }\n        }\n      }\n    }\n    return andGroupMatched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Checks whether an exception for a previous token matches\n   * (in case the exception had scope == \"previous\").\n   * @param token @AnalyzedToken to check matching against.\n   * @return True if any of the exceptions matches.\n   */\n  public final boolean scopePreviousExceptionMatch(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionValidPrevious) {      \n      for (final Element testException : previousExceptionList) {\n        if (!testException.exceptionValidNext) {\n          exceptionMatched |= testException.match(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","id":94561,"modified_method":"/**\n   * Checks whether an exception for a previous token matches\n   * (in case the exception had scope == \"previous\").\n   * @param token @AnalyzedToken to check matching against.\n   * @return True if any of the exceptions matches.\n   */\n  public final boolean isMatchedByScopePreviousException(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionValidPrevious) {      \n      for (final Element testException : previousExceptionList) {\n        if (!testException.exceptionValidNext) {\n          exceptionMatched |= testException.isMatched(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Checks whether an exception matches.\n   * @param token @AnalyzedToken to check matching against\n   * @return True if any of the exceptions matches (logical disjunction).\n   */\n  public final boolean exceptionMatch(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionSet) {\n      for (final Element testException : exceptionList) {\n        if (!testException.exceptionValidNext) {\n          exceptionMatched |= testException.match(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","id":94562,"modified_method":"/**\n   * Checks whether an exception matches.\n   * @param token @AnalyzedToken to check matching against\n   * @return True if any of the exceptions matches (logical disjunction).\n   */\n  public final boolean isExceptionMatched(final AnalyzedToken token) {\n    boolean exceptionMatched = false;\n    if (exceptionSet) {\n      for (final Element testException : exceptionList) {\n        if (!testException.exceptionValidNext) {\n          exceptionMatched |= testException.isMatched(token);\n        }\n        if (exceptionMatched) {\n          break;\n        }\n      }\n    }\n    return exceptionMatched;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * This method checks AND-group and the token.\n   * Introduced to for clarity.\n   * @param token Token to match\n   * @return True if matched.\n   */\n  public final boolean completeMatch(final AnalyzedToken token) {\n    //note: do not use \"||\" here, we need full evaluation, no short-circuiting\n    return match(token) | andGroupMatch(token);\n  }","id":94563,"modified_method":"/**\n   * This method checks AND-group and the token.\n   * Introduced to for clarity.\n   * @param token Token to match\n   * @return True if matched.\n   */\n  public final boolean isMatchedCompletely(final AnalyzedToken token) {\n    //note: do not use \"||\" here, we need full evaluation, no short-circuiting\n    return isMatched(token) | isAndGroupMatched(token);\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Tests if part of speech matches a given string.\n   * @param token Token to test.\n   * @return true if matches\n   * \n   * Special value UNKNOWN_TAG matches null POS tags.\n   * \n   */\n  final boolean matchPosToken(final AnalyzedToken token) {\n    // if no POS set\n    // defaulting to true\n    if (posToken == null) {\n      return true;\n    }\n    if (token.getPOSTag() == null) {\n      if (posRegExp) {\n        if (mPos == null) {\n          mPos = pPos.matcher(UNKNOWN_TAG);\n        } else {\n          mPos.reset(UNKNOWN_TAG);\n        }\n        return mPos.matches();\n      } else {\n        if (UNKNOWN_TAG.equals(posToken)) {\n          return true;\n        }\n      }        \n    }\n    boolean match = false;\n    if (posRegExp) {\n        if (mPos == null) {\n          mPos = pPos.matcher(token.getPOSTag());\n        } else {\n          mPos.reset(token.getPOSTag());\n        }\n        match = mPos.matches();                     \n    } else {\n      match = posToken.equals(token.getPOSTag());\n    }\n    return match;\n  }","id":94564,"modified_method":"/**\n   * Tests if part of speech matches a given string.\n   * @param token Token to test.\n   * @return true if matches\n   * \n   * Special value UNKNOWN_TAG matches null POS tags.\n   * \n   */\n  final boolean isPosTokenMatched(final AnalyzedToken token) {\n    // if no POS set\n    // defaulting to true\n    if (posToken == null) {\n      return true;\n    }\n    if (token.getPOSTag() == null) {\n      if (posRegExp) {\n        if (mPos == null) {\n          mPos = pPos.matcher(UNKNOWN_TAG);\n        } else {\n          mPos.reset(UNKNOWN_TAG);\n        }\n        return mPos.matches();\n      } else {\n        if (UNKNOWN_TAG.equals(posToken)) {\n          return true;\n        }\n      }        \n    }\n    boolean match = false;\n    if (posRegExp) {\n        if (mPos == null) {\n          mPos = pPos.matcher(token.getPOSTag());\n        } else {\n          mPos.reset(token.getPOSTag());\n        }\n        match = mPos.matches();                     \n    } else {\n      match = posToken.equals(token.getPOSTag());\n    }\n    return match;\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"@Override\n  public final RuleMatch[] match(final AnalyzedSentence text) throws IOException {\n            \n    final List<RuleMatch> ruleMatches = new ArrayList<RuleMatch>();    \n    final AnalyzedTokenReadings[] tokens = text.getTokensWithoutWhitespace();\n    final int[] tokenPositions = new int[tokens.length + 1 ];\n    \n    int tokenPos = 0;\n    int prevSkipNext = 0;\n    int skipNext = 0;\n    int matchPos = 0;\n    int skipShift = 0;\n    // this variable keeps the total number\n    // of tokens skipped - used to avoid\n    // that nextPos gets back to unmatched tokens...\n    int skipShiftTotal = 0;\n\n    int firstMatchToken = -1;\n    int lastMatchToken = -1;\n    final int patternSize = patternElements.size();\n    Element elem = null, prevElement = null;\n    final boolean startWithSentStart = patternElements.get(0).isSentStart();\n\n    for (int i = 0; i < tokens.length; i++) {\n      boolean allElementsMatch = true;\n\n      //stop processing if rule is longer than the sentence\n      if (patternSize + i > tokens.length) {\n        allElementsMatch = false;\n        break;\n      }\n\n      //stop looking for sent_start - it will never match any\n      //token except the first\n      if (startWithSentStart && i > 0) {\n        allElementsMatch = false;\n        break;\n      }\n\n      int matchingTokens = 0;\n      for (int k = 0; (k < patternSize); k++) {\n        if (elem != null) {\n          prevElement = elem;\n        }\n        elem = patternElements.get(k);        \n        skipNext = translateElementNo(elem.getSkipNext());\n        final int nextPos = tokenPos + k + skipShiftTotal;\n        if (nextPos >= tokens.length) {\n          allElementsMatch = false;\n          break;\n        }\n\n        boolean skipMatch = false, thisMatched = false, prevMatched = false;\n        boolean exceptionMatched = false;\n        if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) { // SENT_END?\n          prevSkipNext = tokens.length - (nextPos + 1);\n        }\n        for (int m = nextPos; m <= nextPos + prevSkipNext; m++) {\n          boolean matched = false;\n          final int numberOfReadings = tokens[m].getReadingsLength();\n\n          for (int l = 0; l < numberOfReadings; l++) {\n            final AnalyzedToken matchToken = tokens[m].getAnalyzedToken(l);\n            if (prevSkipNext > 0 && prevElement != null\n              && prevElement.scopeNextExceptionMatch(matchToken)) {\n                exceptionMatched = true;\n                prevMatched = true;              \n            }\n            if (elem.referenceElement()\n              && (firstMatchToken + elem.getMatch().getTokenRef() \n                  < tokens.length)) {\n                elem.getMatch().setToken(tokens[firstMatchToken \n                                       + elem.getMatch().getTokenRef()]);\n                elem.getMatch().setSynthesizer(language.getSynthesizer());\n                elem.compile();\n              }            \n            \n            if (elem.hasAndGroup()) {\n              for (final Element andElement : elem.getAndGroup()) {\n                if (andElement.referenceElement()\n                 && (firstMatchToken + andElement.getMatch().getTokenRef() \n                    < tokens.length)) {\n                  andElement.getMatch().setToken(tokens[firstMatchToken \n                                         + andElement.getMatch().getTokenRef()]);\n                  andElement.getMatch().setSynthesizer(language.getSynthesizer());\n                  andElement.compile();\n                }                \n               }              \n              if (l == 0) { \n                elem.setupAndGroup();\n              }\n            }\n                                    \n            thisMatched |= elem.completeMatch(matchToken);            \n            \n            if (l + 1 == numberOfReadings && elem.hasAndGroup()) {\n              thisMatched &= elem.checkAndGroup(thisMatched);\n            }                \n            exceptionMatched |= elem.completeExceptionMatch(matchToken);\n            if (!exceptionMatched && elem.hasPreviousException() && m > 0) {\n              final int numReadings = tokens[m - 1].getReadingsLength();\n              for (int p = 0; p < numReadings; p++) {             \n              exceptionMatched |= \n                elem.scopePreviousExceptionMatch(\n                    tokens[m - 1].getAnalyzedToken(p));\n            }\n            }\n            \n            // Logical OR (cannot be AND):\n            if (!(thisMatched || exceptionMatched)) {\n              matched |= false;\n            } else {\n              matched = true;\n              matchPos = m;\n              skipShift = matchPos - nextPos;              \n              tokenPositions[matchingTokens] = skipShift + 1;              \n            }\n            skipMatch = (skipMatch || matched) && !exceptionMatched;\n          }\n          \n          //disallow exceptions that should match only current tokens          \n          if (!(thisMatched || prevMatched)) {\n            exceptionMatched = false;\n          }\n                    \n          if (skipMatch) {\n            break;\n          }\n          \n        }\n        //disallow exceptions that should match only current tokens        \n        if (!(thisMatched || prevMatched)) {\n          skipMatch = false;\n        }\n        allElementsMatch = skipMatch;\n        if (skipMatch) {\n          prevSkipNext = skipNext;\n        } else {\n          prevSkipNext = 0;\n        }\n        if (allElementsMatch) {                              \n          matchingTokens++;\n          lastMatchToken = matchPos;          \n          if (firstMatchToken == -1) {\n            firstMatchToken = matchPos;\n          }\n          skipShiftTotal += skipShift;         \n        } else {\n          skipShiftTotal = 0;\n          break;\n        }\n      }\n      \n      tokenPos++;\n      \n      if (firstMatchToken + matchingTokens >= tokens.length) {\n        matchingTokens = tokens.length - firstMatchToken;\n      }\n      \n      if (firstMatchToken + skipShiftTotal + matchingTokens > tokens.length) {\n        allElementsMatch = false;\n      }\n      \n      if (allElementsMatch) {\n              \n        final String errMessage = formatMatches(tokens,\n            tokenPositions, firstMatchToken, message);\n                \n        int correctedStPos = 0;\n        if (startPositionCorrection > 0) {        \n        for (int l = 0; l <= startPositionCorrection; l++) {\n          correctedStPos +=  tokenPositions[l];\n        }\n        correctedStPos--;\n        }        \n        \n        int correctedEndPos = 0;\n        if (endPositionCorrection < 0) {\n          int l = 0;\n          while (l > endPositionCorrection) {\n            correctedEndPos -= tokenPositions[matchingTokens + l - 1];\n            l--;\n          }\n          }         \n        \n        AnalyzedTokenReadings firstMatchTokenObj = tokens[firstMatchToken + correctedStPos];\n        boolean startsWithUppercase = \n          StringTools.startsWithUppercase(firstMatchTokenObj.toString())\n          && !matchConvertsCase();\n        \n        if (firstMatchTokenObj.isSentStart() && tokens.length > firstMatchToken + correctedStPos + 1) {\n          // make uppercasing work also at sentence start: \n          firstMatchTokenObj = tokens[firstMatchToken + correctedStPos + 1];\n          startsWithUppercase = StringTools.startsWithUppercase(firstMatchTokenObj.toString());\n        }\n        int fromPos = tokens[firstMatchToken + correctedStPos]\n                             .getStartPos();\n//FIXME: this is fishy, assumes that comma should always come before whitespace        \n         if (errMessage.contains(SUGG_TAG + \",\") && firstMatchToken + correctedStPos >= 1) {\n            fromPos = tokens[firstMatchToken + correctedStPos - 1].getStartPos() \n                  + tokens[firstMatchToken + correctedStPos - 1].getToken().length();          \n        }\n        \n        final int toPos = tokens[lastMatchToken + correctedEndPos].getStartPos()\n        + tokens[lastMatchToken + correctedEndPos].getToken().length();\n        if (fromPos < toPos) { //this can happen with some skip=\"-1\" when the last token is not matched\n        final RuleMatch ruleMatch = new RuleMatch(this, fromPos, toPos, errMessage,\n            startsWithUppercase);        \n          ruleMatches.add(ruleMatch);        \n        }\n      } else {\n        firstMatchToken = -1;\n        lastMatchToken = -1;\n        skipShiftTotal = 0;\n      }\n    }\n\n    return ruleMatches.toArray(new RuleMatch[ruleMatches.size()]);\n  }","id":94565,"modified_method":"@Override\n  public final RuleMatch[] match(final AnalyzedSentence text) throws IOException {\n\n    final List<RuleMatch> ruleMatches = new ArrayList<RuleMatch>();    \n    final AnalyzedTokenReadings[] tokens = text.getTokensWithoutWhitespace();\n    final int[] tokenPositions = new int[tokens.length + 1 ];\n\n    int tokenPos = 0;\n    int prevSkipNext = 0;\n    int skipNext = 0;\n    int matchPos = 0;\n    int skipShift = 0;\n    // this variable keeps the total number\n    // of tokens skipped - used to avoid\n    // that nextPos gets back to unmatched tokens...\n    int skipShiftTotal = 0;\n\n    int firstMatchToken = -1;\n    int lastMatchToken = -1;\n    final int patternSize = patternElements.size();\n    Element elem = null, prevElement = null;\n    final boolean startWithSentStart = patternElements.get(0).isSentStart();\n\n    for (int i = 0; i < tokens.length; i++) {\n      boolean allElementsMatch = true;\n\n      //stop processing if rule is longer than the sentence\n      if (patternSize + i > tokens.length) {\n        allElementsMatch = false;\n        break;\n      }\n\n      //stop looking for sent_start - it will never match any\n      //token except the first\n      if (startWithSentStart && i > 0) {\n        allElementsMatch = false;\n        break;\n      }\n\n      int matchingTokens = 0;\n      for (int k = 0; (k < patternSize); k++) {\n        if (elem != null) {\n          prevElement = elem;\n        }\n        elem = patternElements.get(k);        \n        skipNext = translateElementNo(elem.getSkipNext());\n        final int nextPos = tokenPos + k + skipShiftTotal;\n        if (nextPos >= tokens.length) {\n          allElementsMatch = false;\n          break;\n        }\n\n        boolean skipMatch = false, thisMatched = false, prevMatched = false;\n        boolean exceptionMatched = false;\n        if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) { // SENT_END?\n          prevSkipNext = tokens.length - (nextPos + 1);\n        }\n        for (int m = nextPos; m <= nextPos + prevSkipNext; m++) {\n          boolean matched = false;\n          final int numberOfReadings = tokens[m].getReadingsLength();\n\n          for (int l = 0; l < numberOfReadings; l++) {\n            final AnalyzedToken matchToken = tokens[m].getAnalyzedToken(l);\n            if (prevSkipNext > 0 && prevElement != null\n                && prevElement.isMatchedByScopeNextException(matchToken)) {\n              exceptionMatched = true;\n              prevMatched = true;              \n            }\n            if (elem.isReferenceElement()\n                && (firstMatchToken + elem.getMatch().getTokenRef() \n                    < tokens.length)) {\n              elem.compile(tokens[firstMatchToken + \n                                  elem.getMatch().getTokenRef()],\n                                  language.getSynthesizer());\n            }            \n\n            if (elem.hasAndGroup()) {\n              for (final Element andElement : elem.getAndGroup()) {\n                if (andElement.isReferenceElement()\n                    && (firstMatchToken + andElement.getMatch().getTokenRef() \n                        < tokens.length)) {\n                  andElement.compile(tokens[firstMatchToken \n                                            + andElement.getMatch().getTokenRef()],\n                                            language.getSynthesizer());\n                }                \n              }              \n              if (l == 0) { \n                elem.setupAndGroup();\n              }\n            }\n\n            thisMatched |= elem.isMatchedCompletely(matchToken);            \n\n            if (l + 1 == numberOfReadings && elem.hasAndGroup()) {\n              thisMatched &= elem.checkAndGroup(thisMatched);\n            }                \n            exceptionMatched |= elem.isExceptionMatchedCompletely(matchToken);\n            if (!exceptionMatched && m > 0 && elem.hasPreviousException()) {\n              final int numReadings = tokens[m - 1].getReadingsLength();\n              for (int p = 0; p < numReadings; p++) {             \n                exceptionMatched |= \n                  elem.isMatchedByScopePreviousException(\n                      tokens[m - 1].getAnalyzedToken(p));\n              }\n            }\n\n            // Logical OR (cannot be AND):\n              if (thisMatched || exceptionMatched) {\n                matched = true;\n                matchPos = m;\n                skipShift = matchPos - nextPos;              \n                tokenPositions[matchingTokens] = skipShift + 1;\n              } else {\n                matched |= false;                            \n              }\n              skipMatch = (skipMatch || matched) && !exceptionMatched;\n          }\n\n          //disallow exceptions that should match only current tokens          \n          if (!(thisMatched || prevMatched)) {\n            exceptionMatched = false;\n            skipMatch = false;\n          }\n\n          if (skipMatch) {\n            break;\n          }\n\n        }\n        allElementsMatch = skipMatch;\n        if (skipMatch) {\n          prevSkipNext = skipNext;\n          matchingTokens++;\n          lastMatchToken = matchPos;          \n          if (firstMatchToken == -1) {\n            firstMatchToken = matchPos;\n          }\n          skipShiftTotal += skipShift;\n        } else {\n          prevSkipNext = 0;\n          skipShiftTotal = 0;\n          break;\n        }        \n      }\n\n      tokenPos++;\n\n      if (firstMatchToken + matchingTokens >= tokens.length) {\n        matchingTokens = tokens.length - firstMatchToken;\n      }\n\n      if (firstMatchToken + skipShiftTotal + matchingTokens > tokens.length) {\n        allElementsMatch = false;\n      }\n\n      if (allElementsMatch) {\n\n        final String errMessage = formatMatches(tokens,\n            tokenPositions, firstMatchToken, message);\n\n        int correctedStPos = 0;\n        if (startPositionCorrection > 0) {        \n          for (int l = 0; l <= startPositionCorrection; l++) {\n            correctedStPos +=  tokenPositions[l];\n          }\n          correctedStPos--;\n        }        \n\n        int correctedEndPos = 0;\n        if (endPositionCorrection < 0) {\n          int l = 0;\n          while (l > endPositionCorrection) {\n            correctedEndPos -= tokenPositions[matchingTokens + l - 1];\n            l--;\n          }\n        }         \n\n        AnalyzedTokenReadings firstMatchTokenObj = tokens[firstMatchToken + correctedStPos];\n        boolean startsWithUppercase = \n          StringTools.startsWithUppercase(firstMatchTokenObj.toString())\n          && !matchConvertsCase();\n\n        if (firstMatchTokenObj.isSentStart() && tokens.length > firstMatchToken + correctedStPos + 1) {\n          // make uppercasing work also at sentence start: \n          firstMatchTokenObj = tokens[firstMatchToken + correctedStPos + 1];\n          startsWithUppercase = StringTools.startsWithUppercase(firstMatchTokenObj.toString());\n        }\n        int fromPos = tokens[firstMatchToken + correctedStPos]\n                             .getStartPos();\n        //FIXME: this is fishy, assumes that comma should always come before whitespace        \n        if (errMessage.contains(SUGG_TAG + \",\") && firstMatchToken + correctedStPos >= 1) {\n          fromPos = tokens[firstMatchToken + correctedStPos - 1].getStartPos() \n          + tokens[firstMatchToken + correctedStPos - 1].getToken().length();          \n        }\n\n        final int toPos = tokens[lastMatchToken + correctedEndPos].getStartPos()\n        + tokens[lastMatchToken + correctedEndPos].getToken().length();\n        if (fromPos < toPos) { //this can happen with some skip=\"-1\" when the last token is not matched\n          final RuleMatch ruleMatch = new RuleMatch(this, fromPos, toPos, errMessage,\n              startsWithUppercase);        \n          ruleMatches.add(ruleMatch);        \n        }\n      } else {\n        firstMatchToken = -1;\n        lastMatchToken = -1;\n        skipShiftTotal = 0;\n      }\n    }\n\n    return ruleMatches.toArray(new RuleMatch[ruleMatches.size()]);\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Calculates the offset of the match reference (if any)\n   * in case the match element has been used in the group. \n   * @param elList Element list where the match element was used. \n   * It is directly changed.\n   */\n  private void processElement(ArrayList < Element > elList) {\n    int counter = 0;    \n    for (final Element elTest : elList) {\n      if (elTest.getPhraseName() != null && counter > 0) {\n        if (elTest.referenceElement()) {\n          final int tokRef = elTest.getMatch().getTokenRef();          \n          elTest.getMatch().setTokenRef(\n              tokRef + counter - 1);\n          final String offsetToken = \n            elTest.getString().\n            replace(\"\\\\\" + tokRef, \"\\\\\" + (tokRef + counter - 1));\n          elTest.setStringElement(offsetToken);\n          }        \n        }                           \n      counter++;\n    }\n  }","id":94566,"modified_method":"/**\n   * Calculates the offset of the match reference (if any)\n   * in case the match element has been used in the group. \n   * @param elList Element list where the match element was used. \n   * It is directly changed.\n   */\n  private void processElement(ArrayList < Element > elList) {\n    int counter = 0;    \n    for (final Element elTest : elList) {\n      if (elTest.getPhraseName() != null && counter > 0) {\n        if (elTest.isReferenceElement()) {\n          final int tokRef = elTest.getMatch().getTokenRef();          \n          elTest.getMatch().setTokenRef(\n              tokRef + counter - 1);\n          final String offsetToken = \n            elTest.getString().\n            replace(\"\\\\\" + tokRef, \"\\\\\" + (tokRef + counter - 1));\n          elTest.setStringElement(offsetToken);\n          }        \n        }                           \n      counter++;\n    }\n  }","commit_id":"b22518db55a03154d4aad5eef9ce70772df84509","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public Tab() {\n\t}","id":94567,"modified_method":"public Tab() {\n\t\tsetMoldSclass(\"z-tab\");\n\t\tUtils.updateMoldByTheme(this);\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the style class.\n\t * Note: \n\t * 1) if not specified (or setSclass(null))<br/>\n\t * 1.1) if not disabled ,\"tab\" is assumed; <br/>\n\t * 1.2) if disabled ,\"tabdis\" is assumed; <br/>\n\t * 2) if selected, it appends \"sel\" to step 1. <br/>\n\t */\n\tpublic String getSclass() {\n\t\tString scls = super.getSclass();\n\t\tif (scls == null) scls = \"tab\";\n\t\tif (isDisabled()) scls = scls+\"dis\";\n\t\treturn isSelected() ? scls + \"sel\": scls;\n\t}","id":94568,"modified_method":"/**\n\t * Returns the style class. Note: 1) if not specified (or\n\t * setSclass(null))<br/> 1.1) if not disabled ,\"tab\" is assumed; <br/> 1.2)\n\t * if disabled ,\"tabdis\" is assumed; <br/> 2) if selected, it appends \"sel\"\n\t * to step 1. <br/>\n\t */\n\tpublic String getRealSclass() {\n\t\tfinal String mold = super.getMold();\n\t\tString scls = null;\n\t\tif (mold.equals(\"v30\")) {\n\t\t\tscls = super.getSclass();\n\t\t\tif (scls == null)\n\t\t\t\tscls = \"tab\";\n\t\t\tif (isDisabled())\n\t\t\t\tscls = scls + \"dis\";\n\t\t\treturn isSelected() ? scls + \"sel\" : scls;\n\t\t} else {\n\t\t\tscls = super.getMoldSclass();\n\t\t\tif (scls == null)\n\t\t\t\tscls = \"z-tab\";\n\t\t\tif (isDisabled())\n\t\t\t\tscls = scls + \"dis\";\n\t\t\treturn isSelected() ? scls + \"sel\" : scls;\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public Tab(String label, String image) {\n\t\tsetLabel(label);\n\t\tsetImage(image);\n\t}","id":94569,"modified_method":"public Tab(String label, String image) {\n\t\tthis();\n\t\tsetLabel(label);\n\t\tsetImage(image);\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public Tab(String label) {\n\t\tsetLabel(label);\n\t}","id":94570,"modified_method":"public Tab(String label) {\n\t\tthis();\n\t\tsetLabel(label);\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void invalidate() {\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null && \"accordion\".equals(tabbox.getMold()))\n\t\t\ttabbox.invalidate();\n\t\telse\n\t\t\tsuper.invalidate();\n\t}","id":94571,"modified_method":"public void invalidate() {\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null && \n\t\t\t\t(\"accordion\".equals(tabbox.getMold())||\"accordion-lite\".equals(tabbox.getMold()))) {\n\t\t\ttabbox.invalidate();\t\t\t\n\t\t} else {\t\t\t\n\t\t\tsuper.invalidate();\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtab.render(comp, out);\n\t\t\treturn; //done\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\t\tfinal Tabpanel panel = self.getLinkedPanel();\n\n\t\tfinal int colspan = self.isClosable() ? 4 : 3;\n\t\twh.write(\"<td id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.write(\" z.sel=\\\"\").write(self.isSelected()).write(\"\\\" z.box=\\\"\")\n\t\t\t.write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(panel==null?\"\":panel.getUuid()).write(\"\\\" \")\n\t\t\t.write(\"z.disabled=\\\"\").write(self.isDisabled())\n\t\t\t.write(\"\\\">\");\n\n\t\twh.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan)\n\t\t\t.write(\"\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m');\n\t\tif (!Strings.isBlank(self.getHeight()))\n\t\t\twh.write(\"\\\" style=\\\"height:\").write(self.getHeight());\n\t\twh.writeln(\"\\\"><td class=\\\"\")\n\t\t\t.write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t.write(\"\\\"><a href=\\\"javascript:;\\\"\").write(\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\")\n\t\t\t.write(self.getImgTag());\n\t\tnew Out(self.getLabel()).render(out);\n\t\twh.writeln(\"<\/a><\/td>\");\n\n\t\tif (self.isClosable()) {\n\t\t\t// Bug 1780044: width cannot (and need not) be specified\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><img id=\\\"\")\n\t\t\t\t.write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\"))\n\t\t\t\t.writeln(\"\\\"/><\/td>\");\n\t\t}\n\n\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan).write(\"\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td><\/tr><\/table><\/td>\");\n\t}","id":94572,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tab self = (Tab) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtab.render(comp, out);\n\t\t\treturn; //done\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Execution exec = Executions.getCurrent();\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String suffix = self.isSelected() ? \"-sel\" : \"-uns\";\n\t\tfinal Tabpanel panel = self.getLinkedPanel();\n\t\tfinal int colspan = self.isClosable() ? 4 : 3;\n\t\tfinal String mold = self.getMold();\n\t\tif (mold.equals(\"v30\")){\n\t\twh.write(\"<td id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"Tab\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.write(\" z.sel=\\\"\").write(self.isSelected()).write(\"\\\" z.box=\\\"\")\n\t\t\t.write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t.write(panel==null?\"\":panel.getUuid()).write(\"\\\" \")\n\t\t\t.write(\"z.disabled=\\\"\").write(self.isDisabled())\n\t\t\t.write(\"\\\">\");\n\n\t\twh.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"tl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td colspan=\\\"\").write(colspan)\n\t\t\t.write(\"\\\" class=\\\"\").write(look).write(\"tm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).write(\"tr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\n\t\twh.write(\"<tr class=\\\"\").write(look).write('m');\n\t\tif (!Strings.isBlank(self.getHeight()))\n\t\t\t\twh.write(\"\\\" style=\\\"height:\").write(self.getHeight());\n\t\t\twh.writeln(\"\\\"><td class=\\\"\")\n\t\t\t\t.write(look).write(\"ml\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td align=\\\"center\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t.write(\"\\\"><a href=\\\"javascript:;\\\"\").write(\" id=\\\"\").write(self.getUuid()).write(\"!a\\\">\")\n\t\t\t\t.write(self.getImgTag());\n\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\twh.writeln(\"<\/a><\/td>\");\n\t\n\t\t\tif (self.isClosable()) {\n\t\t\t\t// Bug 1780044: width cannot (and need not) be specified\n\t\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(look).write(\"mm\").write(suffix)\n\t\t\t\t\t.write(\"\\\"><img id=\\\"\")\n\t\t\t\t\t.write(self.getUuid()).write(\"!close\\\" src=\\\"\")\n\t\t\t\t\t.write(exec.encodeURL(\"~./zul/img/close-off.gif\"))\n\t\t\t\t\t.writeln(\"\\\"/><\/td>\");\n\t\t\t}\n\t\n\t\t\twh.write(\"<td width=\\\"3\\\" class=\\\"\").write(look).write(\"mm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"mr\").write(suffix).writeln(\"\\\"><\/td><\/tr>\");\n\t\n\t\t\twh.write(\"<tr><td class=\\\"\").write(look).write(\"bl\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td colspan=\\\"\").write(colspan).write(\"\\\" class=\\\"\").write(look).write(\"bm\").write(suffix).writeln(\"\\\"><\/td>\")\n\t\t\t\t.write(\"<td class=\\\"\").write(look).write(\"br\").write(suffix).writeln(\"\\\"><\/td><\/tr><\/table><\/td>\");\n\t\t}else {\n\t\t\tString uuid = self.getUuid();\n\t\t\twh.write(\"<li id=\\\"\"+uuid+\"\\\"\"); \n\t\t\t\tif (!Strings.isBlank(self.getHeight())){\n\t\t\t\t\twh.write(\"style=\\\"height:\"+self.getHeight()+\";\\\"\");\n\t\t\t\t}\n\t\t\t\twh.write(\"z.type=\\\"Tab2\\\"\").write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t\t\t.write(\" z.sel=\\\"\").write(self.isSelected()).write(\"\\\" z.box=\\\"\")\n\t\t\t\t\t.write(tabbox.getUuid()).write(\"\\\" z.panel=\\\"\")\n\t\t\t\t\t.write(panel==null?\"\":panel.getUuid()).write(\"\\\" \")\n\t\t\t\t\t.write(\"z.disabled=\\\"\").write(self.isDisabled())\n\t\t\t\t\t.writeln(\"\\\">\");\t\n\t\t\t\tif(self.isClosable()){\t\t\t\t\n\t\t\t\t\twh.writeln(\"<a class=\\\"\"+look+\"close\\\" id=\\\"\"+uuid+\"!close\\\" onclick=\\\"return false;\\\"/>\");\n\t\t\t\t}\n\t\t\t\twh.writeln(\"<a class=\\\"\"+look+\"a\\\" id=\\\"\"+uuid+\"a\\\"  onclick=\\\"return false;\\\" href=\\\"#\\\">\");\n\t\t\t\t\twh.writeln(\"<em id=\\\"\"+uuid+\"\\\" class=\\\"\"+look+\"em\\\">\");\t\t\t\t\t\t\n\t\t\t\t\t\tif(self.isClosable()){\n\t\t\t\t\t\t\twh.writeln(\"<span id=\\\"\"+uuid+\"\\\" class=\\\"\"+look+\"inner\"+\" \"+look+\"innerclose\\\">\");\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\twh.writeln(\"<span id=\\\"\"+uuid+\"\\\" class=\\\"\"+look+\"inner\\\"\");\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\twh.write(\"<span class=\\\"\"+look+\"text\\\">\").write(self.getImgTag());\n\t\t\t\t\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\t\t\t\t\twh.writeln(\"<\/span>\");\n\t\t\t\t\t\twh.writeln(\"<\/span>\");\n\t\t\t\t\twh.writeln(\"<\/em>\");\n\t\t\t\twh.writeln(\"<\/a>\");\n\t\t\twh.writeln(\"<\/li>\");\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"private void init() {\n\t\t_listener = new Listener();\n\t}","id":94573,"modified_method":"private void init() {\n\t\tUtils.updateMoldByTheme(this);\n\t\t_listener = new Listener();\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the look of the {@link Tab} and {@link Tabbox}.\n\t * It is, in fact, a portion of the style class that are used to\n\t * generate the style of {@link Tabs} and {@link Tab}.\n\t *\n\t * <p>If the style class ({@link #getSclass}) of this tab box is not\n\t * defined and the mold is default,\n\t * \"tab-3d\" and \"tab-v3d\" are returned for horizontal and vertical\n\t * orient, respectively.\n\t * If the style class not defined and the mold is accordion,\n\t * \"tabaccd-3d\" and \"tabaccd-v3d\" returned (note: accordion doesn't support vertical yet).\n\t *\n\t * <p>If the style class is defined, say \"lite\",\n\t * then this method return \"tab-lite\" and \"tab-vlite\" for\n\t * horizontal and vertical orient, respectively, and \"tabacc-lite\" for horizontal accordion.\n\t *\n\t * <p>If the mold is not \"default\" nor \"accordion\", this method returns\n\t * \"tab\" + getMold() + \"-\" + (vertical ? 'v': '') + getSclass().\n\t *\n\t * <p>With this method, {@link Tab} and {@link Tabpanel} generate\n\t * the style class accordingly. For example, if the mold is \"default\"\n\t * and the style class not defined, then\n\t * \"tab-3d-tl-sel\" for the top-left corner of the selected tab,\n\t * \"tab-3d-tm-uns\" for the top-middle border of the\n\t * non-selected tab, and so on.\n\t *\n\t * @since 3.0,0\n\t */\n\tpublic String getTabLook() {\n\t\tfinal String mold = getMold();\n\t\tString prefix = \"default\".equals(mold) ? \"tab-\":\n\t\t\t\t\"accordion\".equals(mold) ? \"tabaccd-\": \"tab\" + mold + '-';\n\n\t\tif (\"vertical\".equals(_orient))\n\t\t\tprefix += 'v';\n\n\t\tfinal String scls = getSclass();\n\t\treturn scls != null && scls.length() > 0 ? prefix + scls: prefix + \"3d\";\n\t}","id":94574,"modified_method":"/**\n\t * Returns the look of the {@link Tab} and {@link Tabbox}. It is, in fact, a\n\t * portion of the style class that are used to generate the style of\n\t * {@link Tabs} and {@link Tab}.\n\t * \n\t * <p>\n\t * If the style class ({@link #getSclass}) of this tab box is not defined\n\t * and the mold is default, \"tab-3d\" and \"tab-v3d\" are returned for\n\t * horizontal and vertical orient, respectively. If the style class not\n\t * defined and the mold is accordion, \"tabaccd-3d\" and \"tabaccd-v3d\"\n\t * returned (note: accordion doesn't support vertical yet).\n\t * \n\t * <p>\n\t * If the style class is defined, say \"lite\", then this method return\n\t * \"tab-lite\" and \"tab-vlite\" for horizontal and vertical orient,\n\t * respectively, and \"tabacc-lite\" for horizontal accordion.\n\t * \n\t * <p>\n\t * If the mold is not \"default\" nor \"accordion\", this method returns \"tab\" +\n\t * getMold() + \"-\" + (vertical ? 'v': '') + getSclass().\n\t * \n\t * <p>\n\t * With this method, {@link Tab} and {@link Tabpanel} generate the style\n\t * class accordingly. For example, if the mold is \"default\" and the style\n\t * class not defined, then \"tab-3d-tl-sel\" for the top-left corner of the\n\t * selected tab, \"tab-3d-tm-uns\" for the top-middle border of the\n\t * non-selected tab, and so on.\n\t * \n\t * @since 3.0,0\n\t */\n\tpublic String getTabLook() {\n\t\tfinal String mold = getMold();\n\t\tString prefix = \"\";\n\t\tString scls = \"\";\n\t\tif (mold.equals(\"v30\")) {\n\t\t\tprefix = \"v30\".equals(mold) ? \"tab-\"\n\t\t\t\t\t: \"v30-accordion\".equals(mold) ? \"tabaccd-\" : \"tab\" + mold\n\t\t\t\t\t\t\t+ '-';\n\t\t\tif (\"v30-vertical\".equals(_orient))\n\t\t\t\tprefix += 'v';\n\t\t\tscls = getSclass();\n\t\t\treturn scls != null && scls.length() > 0 ? prefix + scls : prefix\n\t\t\t\t\t+ \"3d\";\n\t\t} else {\n\t\t\tprefix = \"vertical\".equals(_orient) ? \"v\" : \"\"\n\t\t\t\t\t+ (\"default\".equals(mold) ? \"\" : \"accordion\".equals(mold)\n\t\t\t\t\t\t\t|| \"accordion-lite\".equals(mold) ? \"\" : \"tab\"\n\t\t\t\t\t\t\t+ mold + '-');\n\t\t\tscls = getMoldSclass();\n\t\t\treturn prefix + scls ;\n\t\t}\n\t\t\n\t\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns whether it is in the accordion mold.\n\t */\n\t/*package*/ boolean inAccordionMold() {\n\t\treturn \"accordion\".equals(getMold());\n\t}","id":94575,"modified_method":"/**\n\t * Returns whether it is in the accordion mold.\n\t */\n\t/* package */boolean inAccordionMold() {\n\n\t\treturn (\"accordion\".equals(getMold())\n\t\t\t\t|| \"accordion-lite\".equals(getMold()) || \"v30-accordion\"\n\t\t\t\t.equals(getMold()));\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb =\n\t\t\tnew StringBuffer(64).append(super.getOuterAttrs());\n\t\tappendAsapAttr(sb, Events.ON_RIGHT_CLICK);\n\t\t\t//no z.dbclk/z.lfclk since it is covered by both Tab and Tabpanel\n\n\t\tif (isVertical())\n\t\t\tHTMLs.appendAttribute(sb, \"z.orient\", \"v\");\n\t\tif (_tabs != null && !inAccordionMold())\n\t\t\tHTMLs.appendAttribute(sb, \"z.tabs\", _tabs.getUuid());\n\t\treturn sb.toString();\n\t}","id":94576,"modified_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(64).append(super\n\t\t\t\t.getOuterAttrs());\n\t\tappendAsapAttr(sb, Events.ON_RIGHT_CLICK);\n\t\t// no z.dbclk/z.lfclk since it is covered by both Tab and Tabpanel\n\n\t\tif (isVertical())\n\t\t\tHTMLs.appendAttribute(sb, \"z.orient\", \"v\");\n\t\tif (_tabs != null && !inAccordionMold())\n\t\t\tHTMLs.appendAttribute(sb, \"z.tabs\", _tabs.getUuid());\n\t\tif (_tabscroll)\n\t\t\tHTMLs.appendAttribute(sb, \"z.tabscroll\", _tabscroll);\n\t\treturn sb.toString();\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public Tabbox() {\n\t\tinit();\n\t}","id":94577,"modified_method":"public Tabbox() {\t\t\t\t\n\t\tsetMoldSclass(\"z-tabbox\");\n\t\tinit();\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Tabbox self = (Tabbox) comp;\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.accd=\\\"true\\\">\")\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t}","id":94578,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Tabbox self = (Tabbox) comp;\n\t\tfinal String mold = self.getMold();\n\t\tif (mold.equals(\"v30-accordion\")){\t\t\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.accd=\\\"true\\\">\")\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t\t}else if(mold.equals(\"accordion\")||\n\t\t\t\tmold.equals(\"accordion-lite\")){\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.accd=\\\"true\\\" z.type=\\\"zul.tab2.Tabbox2\\\">\")\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t\t\t\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabbox self = (Tabbox) comp;\n\t\tif(\"vertical\".equals(self.getOrient())){\n\t\t\t_vtabbox.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Tabs tabs = self.getTabs();\n\t\t\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.type=\\\"zul.tab.Tabbox\\\">\")\n\t\t\t.writeln(tabs)\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t}","id":94579,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabbox self = (Tabbox) comp;\n\t\tif(\"vertical\".equals(self.getOrient())){\n\t\t\t_vtabbox.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Tabs tabs = self.getTabs();\n\t\tfinal String mold = self.getMold();\n\t\tif (mold.equals(\"v30\")){\n\t\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.type=\\\"zul.tab.Tabbox\\\">\")\n\t\t\t.writeln(tabs)\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t\t}else{\n\t\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs())\n\t\t\t.writeln(\" z.type=\\\"zul.tab2.Tabbox2\\\">\")\n\t\t\t.writeln(tabs)\n\t\t\t.writeln(self.getTabpanels())\n\t\t\t.write(\"<\/div>\");\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the style class.\n\t *\n\t * <p>The default style class, i.e., the style class is not defined (i.e.,\n\t * {@link #setSclass} is not called or called with null or empty):\n\t * <table border=\"1\" cellspacing=\"0\">\n\t * <tr>\n\t * <td>sclass<\/td><td>tabbox's mold<\/td>\n\t * <td>tabbox's orient {@link Tabbox#getOrient}<\/td>\n\t * <\/tr>\n\t * <tr><td>tabpanel<\/td><td>default<\/td><td>horizontal<\/td><\/tr>\n\t * <tr><td>tabpanel-<em>something<\/em><\/td><td><em>something<\/em><\/td><td>horizontal<\/td><\/tr>\n\t * <tr><td>vtabpanel<\/td><td>default<\/td><td>vertical<\/td><\/tr>\n\t * <tr><td>vtabpanel-<em>something<\/em><\/td><td><em>something<\/em><\/td><td>vertical<\/td><\/tr>\n\t * <\/table>\n\t *\n\t * <p>Note: prior to 3.0.3, the default style class doesn't depend on\n\t * the tabbox's orientation.\n\t */\n\tpublic String getSclass() {\n\t\tfinal String scls = super.getSclass();\n\t\tif (scls != null) return scls;\n\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tfinal boolean vert = tabbox != null && tabbox.isVertical();\n\t\tfinal String mold = tabbox != null ? tabbox.getMold(): null;\n\t\treturn mold == null || \"default\".equals(mold) ?\n\t\t\tvert ? \"vtabpanel\": \"tabpanel\":\n\t\t\t(vert ? \"vtabpanel-\": \"tabpanel-\")+mold;\n\t}","id":94580,"modified_method":"/** Returns the style class.\n\t *\n\t * <p>The default style class, i.e., the style class is not defined (i.e.,\n\t * {@link #setSclass} is not called or called with null or empty):\n\t * <table border=\"1\" cellspacing=\"0\">\n\t * <tr>\n\t * <td>sclass<\/td><td>tabbox's mold<\/td>\n\t * <td>tabbox's orient {@link Tabbox#getOrient}<\/td>\n\t * <\/tr>\n\t * <tr><td>tabpanel<\/td><td>default<\/td><td>horizontal<\/td><\/tr>\n\t * <tr><td>tabpanel-<em>something<\/em><\/td><td><em>something<\/em><\/td><td>horizontal<\/td><\/tr>\n\t * <tr><td>vtabpanel<\/td><td>default<\/td><td>vertical<\/td><\/tr>\n\t * <tr><td>vtabpanel-<em>something<\/em><\/td><td><em>something<\/em><\/td><td>vertical<\/td><\/tr>\n\t * <\/table>\n\t *\n\t * <p>Note: prior to 3.0.3, the default style class doesn't depend on\n\t * the tabbox's orientation.\n\t */\n\tpublic String getSclass() {\n\t\tString mold = super.getMold();\n\t\tString scls = null;\n\t\tif (mold.equals(\"v30\")){\n\t\t\tscls=super.getSclass();\n\t\t\tif (scls != null) return scls;\n\t\t\tfinal Tabbox tabbox = getTabbox();\n\t\t\tfinal boolean vert = tabbox != null && tabbox.isVertical();\n\t\t\tmold = tabbox != null ? tabbox.getMold(): null;\t\t\n\t\t\treturn mold == null || \"v30\".equals(mold) ?\n\t\t\t\tvert ? \"vtabpanel\": \"tabpanel\":\n\t\t\t\t(vert ? \"vtabpanel-\": \"tabpanel-\")+mold;\t\t\t\n\t\t}else{\n\t\t\tscls=super.getMoldSclass();\t\n\t\t\tif (scls != null) return scls;\n\t\t\tfinal Tabbox tabbox = getTabbox();\n\t\t\tfinal boolean vert = tabbox != null && tabbox.isVertical();\n\t\t\tmold = tabbox != null ? tabbox.getMold(): null;\t\t\n\t\t\treturn mold == null || \"default\".equals(mold) ?\n\t\t\t\tvert ? \"vtabpanel\": \"tabpanel\":\n\t\t\t\t(vert ? \"vtabpanel-\": \"tabpanel-\")+mold;\n\t\t}\n\t\t\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabpanel self = (Tabpanel) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"accordion\".equals(tabbox.getMold())) {\n\t\t\t_acdpanel.render(comp, out);\n\t\t\treturn;\n\t\t}\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vpanel.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write('\"')\n\t\t\t.write(self.getOuterAttrs()).write('>')\n\t\t\t.write(\"<div id=\\\"\").write(self.getUuid()).write(\"!real\\\" style=\\\"height:100%\\\"\")\n\t\t\t.write(self.getInnerAttrs()).write('>')\n\t\t\t.writeChildren(self)\n\t\t\t.writeln(\"<\/div><\/div>\");\n\t}","id":94581,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabpanel self = (Tabpanel) comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\t\tif (\"v30-accordion\".equals(tabbox.getMold())) {\n\t\t\t_acdpanel.render(comp, out);\n\t\t\treturn;\n\t\t}\n\t\tif (\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vpanel.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write('\"')\n\t\t\t.write(self.getOuterAttrs()).write('>')\n\t\t\t.write(\"<div id=\\\"\").write(self.getUuid()).write(\"!real\\\" style=\\\"height:100%\\\"\")\n\t\t\t.write(self.getInnerAttrs()).write('>')\n\t\t\t.writeChildren(self)\n\t\t\t.writeln(\"<\/div><\/div>\");\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public boolean insertBefore(Component child, Component insertBefore) {\n\t\tif (!(child instanceof Tab))\n\t\t\tthrow new UiException(\"Unsupported child for tabs: \"+child);\n\n\t\tboolean sel = getChildren().isEmpty(), desel = false;\n\t\tfinal Tab newtab = (Tab)child;\n\t\tif (!sel && newtab.isSelected()) {\n\t\t\tnewtab.setSelectedDirectly(false);\t//turn off first\n\t\t\tsel = desel = true;\t\t\t\t\t//trun on later\n\t\t}\n\n\t\tif (super.insertBefore(child, insertBefore)) {\n\t\t\tfinal Tabbox tabbox = getTabbox();\n\n\t\t\tif (sel)\n\t\t\t\tif (tabbox != null) {\n\t\t\t\t\ttabbox.setSelectedTab(newtab);\n\t\t\t\t} else {\n\t\t\t\t\tnewtab.setSelectedDirectly(true);\n\t\t\t\t\tif (desel)\n\t\t\t\t\t\tfor (Iterator it = getChildren().iterator(); it.hasNext();) {\n\t\t\t\t\t\t\tfinal Tab tab = (Tab)it.next();\n\t\t\t\t\t\t\tif (tab != newtab && tab.isSelected()) {\n\t\t\t\t\t\t\t\ttab.setSelectedDirectly(false);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tinvalidateIfAccordion(tabbox);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}","id":94582,"modified_method":"public boolean insertBefore(Component child, Component insertBefore) {\n\t\tif (!(child instanceof Tab))\n\t\t\tthrow new UiException(\"Unsupported child for tabs: \"+child);\n\n\t\tboolean sel = getChildren().isEmpty(), desel = false;\n\t\tif (sel) invalidate();\n\t\tfinal Tab newtab = (Tab)child;\n\t\tif (!sel && newtab.isSelected()) {\n\t\t\tnewtab.setSelectedDirectly(false);\t//turn off first\n\t\t\tsel = desel = true;\t\t\t\t\t//trun on later\n\t\t}\n\n\t\tif (super.insertBefore(child, insertBefore)) {\n\t\t\tfinal Tabbox tabbox = getTabbox();\n\n\t\t\tif (sel)\n\t\t\t\tif (tabbox != null) {\n\t\t\t\t\ttabbox.setSelectedTab(newtab);\n\t\t\t\t} else {\n\t\t\t\t\tnewtab.setSelectedDirectly(true);\n\t\t\t\t\tif (desel)\n\t\t\t\t\t\tfor (Iterator it = getChildren().iterator(); it.hasNext();) {\n\t\t\t\t\t\t\tfinal Tab tab = (Tab)it.next();\n\t\t\t\t\t\t\tif (tab != newtab && tab.isSelected()) {\n\t\t\t\t\t\t\t\ttab.setSelectedDirectly(false);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tinvalidateIfAccordion(tabbox);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void onChildAdded(Component child) {\n\t\tsuper.onChildAdded(child);\n\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null)\n\t\t\t((Tab)child).addEventListener(Events.ON_SELECT, tabbox._listener);\n\n\t\tif (tabbox == null || !tabbox.inAccordionMold())\n\t\t\tsmartUpdate(\"z.init\", true); //fixWidth\n\t}","id":94583,"modified_method":"public void onChildAdded(Component child) {\n\t\tsuper.onChildAdded(child);\n\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null)\n\t\t\t((Tab)child).addEventListener(Events.ON_SELECT, tabbox._listener);\n\t\t//\n\t\tif (tabbox == null || !tabbox.inAccordionMold() && getMold().equals(\"v30\") )\n\t\t\tsmartUpdate(\"z.init\", true); //fixWidth\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void onChildRemoved(Component child) {\n\t\tsuper.onChildRemoved(child);\n\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null)\n\t\t\t((Tab)child).removeEventListener(Events.ON_SELECT, tabbox._listener);\n\n\t\tif (tabbox == null || !tabbox.inAccordionMold())\n\t\t\tsmartUpdate(\"z.init\", true); //fixWidth\n\t}","id":94584,"modified_method":"public void onChildRemoved(Component child) {\n\t\tsuper.onChildRemoved(child);\n\n\t\tfinal Tabbox tabbox = getTabbox();\n\t\tif (tabbox != null)\n\t\t\t((Tab)child).removeEventListener(Events.ON_SELECT, tabbox._listener);\n\n\t\tif (tabbox == null && !tabbox.inAccordionMold() && getMold().equals(\"v30\"))\n\t\t\tsmartUpdate(\"z.init\", true); //fixWidth\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabs self = (Tabs)comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\n\t\tif(\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtabs.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\t\t\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"zul.tab.Tabs\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln('>')\n\t\t\t.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\")\n\t\t\t.write(\"<tr valign=\\\"bottom\\\">\");\n\t\t\n\t\t/* prefix column */\n\t\twh.writeln(\"<td><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\twh.write(\"<tr><td class=\\\"\").write(look).writeln(\"first1\\\"><\/td>\");\n\t\twh.write(\"<td class=\\\"\").write(look).write(\"first2\\\" id=\\\"\").write(self.getUuid())\n\t\t\t.write(\"!first\\\"><\/td><\/tr><\/table><\/td>\");\n\n\t\twh.writeChildren(self);\n\t\t\n\t\twh.write(\"<td style=\\\"display:none\\\" id=\\\"\")\n\t\t\t.write(self.getUuid()).writeln(\"!child\\\"><\/td>\"); //bookmark for adding children\n\t\t\n\t\t/* postfix column */\t\t\n\t\twh.writeln(\"<td><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\")\n\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"last1\\\" id=\\\"\")\n\t\t\t.write(self.getUuid()).writeln(\"!last\\\"><\/td>\")\n\t\t\t.write(\"<td class=\\\"\").write(look).writeln(\"last2\\\"><\/td>\")\n\t\t\t.writeln(\"<\/tr><\/table><\/td><\/tr><\/table><\/div>\");\n\t}","id":94585,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal Tabs self = (Tabs)comp;\n\t\tfinal Tabbox tabbox = self.getTabbox();\n\n\t\tif(\"vertical\".equals(tabbox.getOrient())) {\n\t\t\t_vtabs.render(comp, out);\n\t\t\treturn;\n\t\t}\n\n\t\tfinal SmartWriter wh = new SmartWriter(out);\t\t\n\t\tfinal String look = tabbox.getTabLook() + '-';\n\t\tfinal String mold = self.getMold();\n\t\tfinal String scroll = tabbox.isTabscroll() ? \"scrolltabs\" : \"tabs\" ;\n\t\tif (mold.equals(\"v30\")){\n\t\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write(\"\\\" z.type=\\\"zul.tab.Tabs\\\"\")\n\t\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln('>')\n\t\t\t\t.writeln(\"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\")\n\t\t\t\t.write(\"<tr valign=\\\"bottom\\\">\");\n\t\t\t\n\t\t\t/* prefix column */\n\t\t\twh.writeln(\"<td><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.write(\"<tr><td class=\\\"\").write(look).writeln(\"first1\\\"><\/td>\");\n\t\t\twh.write(\"<td class=\\\"\").write(look).write(\"first2\\\" id=\\\"\").write(self.getUuid())\n\t\t\t\t.write(\"!first\\\"><\/td><\/tr><\/table><\/td>\");\n\t\n\t\t\twh.writeChildren(self);\n\t\t\t\n\t\t\twh.write(\"<td style=\\\"display:none\\\" id=\\\"\")\n\t\t\t\t.write(self.getUuid()).writeln(\"!child\\\"><\/td>\"); //bookmark for adding children\n\t\t\t\n\t\t\t/* postfix column */\t\t\n\t\t\twh.writeln(\"<td><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\")\n\t\t\t\t.write(\"<tr><td class=\\\"\").write(look).write(\"last1\\\" id=\\\"\")\n\t\t\t\t.write(self.getUuid()).writeln(\"!last\\\"><\/td>\")\n\t\t\t\t.write(\"<td class=\\\"\").write(look).writeln(\"last2\\\"><\/td>\")\n\t\t\t\t.writeln(\"<\/tr><\/table><\/td><\/tr><\/table><\/div>\");\n\t\t}else {\t\t\t\t\t\t\n\t\t\tString uuid = self.getUuid();\n\t\t\twh.write(\"<div id=\\\"\"+uuid+\"\\\" class=\\\"\").write(look+scroll).write(\"\\\" z.type=\\\"zul.tab2.Tabs2\\\"\")\n\t\t\t    .write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln('>');\n\t\t\t    wh.write(\"<div id=\\\"\"+uuid+\"!right\").writeln(\"\\\" class=\\\"\" + look + \"scrollright\\\" ><\/div>\");\n\t\t\t\twh.write(\"<div id=\\\"\"+uuid+\"!left\").writeln(\"\\\" class=\\\"\" + look + \"scrollleft\\\" ><\/div>\");\n\t\t\t    wh.write(\"<div id=\\\"\"+uuid+\"!header\\\"\").writeln(\" class=\\\"\"+look+\"head\\\" >\");\n\t\t\t\t    wh.writeln(\"<ul id=\"+uuid+\"!cave\\\" class=\\\"\"+look+\"ul\\\" >\");\t\t\t\t\t\t\t    \t\n\t\t\t\t    \twh.writeChildren(self);\t\t\t    \t\n\t\t\t\t    \twh.writeln(\"<li id=\\\"\"+uuid+\"!edge\\\" class=\\\"\"+look+\"edge\\\" ><\/li>\");\n\t\t\t\t    \twh.writeln(\"<div id=\\\"\"+uuid+\"!clear\\\" class=\\\"\"+look+\"clear\\\"><\/div>\");\n\t\t\t\t    wh.writeln(\"<\/ul>\");\n\t\t\t    wh.writeln(\"<\/div>\");\n\t\t\t    wh.writeln(\"<div id=\\\"\"+uuid+\"!line\\\" class=\\\"\"+look+\"space\\\" ><\/div>\");\t\n\t\t\twh.writeln(\"<\/div>\");\n\t\t}\n\t}","commit_id":"2d8dcd47e9e3ca94ddda6af8499eb8845c0cc03f","url":"https://github.com/zkoss/zk"},{"original_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tContact contact = (Contact)obj;\n\n\t\tDocument document = getDocument(contact);\n\n\t\tSearchEngineUtil.updateDocument(\n\t\t\tgetSearchEngineId(), contact.getCompanyId(), document);\n\t}","id":94586,"modified_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tContact contact = (Contact)obj;\n\n\t\tDocument document = getDocument(contact);\n\n\t\tif (document != null) {\n\t\t\tSearchEngineUtil.updateDocument(\n\t\t\t\tgetSearchEngineId(), contact.getCompanyId(), document);\n\t\t}\n\t}","commit_id":"b002ece8202564a5ef863f0e593e1ffbe790c0a7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows SearchException {\n\n\t\tDocument doc = getFileDocument(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName);\n\n\t\tSearchEngineUtil.addDocument(companyId, doc);\n\t}","id":94587,"modified_method":"public static void addFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName)\n\t\tthrows SearchException {\n\n\t\tDocument doc = getFileDocument(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName);\n\n\t\tif (doc != null) {\n\t\t\tSearchEngineUtil.addDocument(companyId, doc);\n\t\t}\n\t}","commit_id":"655c9eb723050d7c8d9272da69e7586df64c059f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, String[] tagsEntries)\n\t\tthrows SearchException {\n\n\t\tDocument doc = getFileDocument(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName, fileEntryId,\n\t\t\tproperties, modifiedDate, tagsEntries);\n\n\t\tSearchEngineUtil.updateDocument(companyId, doc.get(Field.UID), doc);\n\t}","id":94588,"modified_method":"public static void updateFile(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString fileName, long fileEntryId, String properties,\n\t\t\tDate modifiedDate, String[] tagsEntries)\n\t\tthrows SearchException {\n\n\t\tDocument doc = getFileDocument(\n\t\t\tcompanyId, portletId, groupId, repositoryId, fileName, fileEntryId,\n\t\t\tproperties, modifiedDate, tagsEntries);\n\n\t\tif (doc != null) {\n\t\t\tSearchEngineUtil.updateDocument(companyId, doc.get(Field.UID), doc);\n\t\t}\n\t}","commit_id":"655c9eb723050d7c8d9272da69e7586df64c059f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)obj;\n\n\t\tDocument document = getDocument(assetVocabulary);\n\n\t\tSearchEngineUtil.updateDocument(\n\t\t\tgetSearchEngineId(), assetVocabulary.getCompanyId(), document);\n\t}","id":94589,"modified_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)obj;\n\n\t\tDocument document = getDocument(assetVocabulary);\n\n\t\tif (document != null) {\n\t\t\tSearchEngineUtil.updateDocument(\n\t\t\t\tgetSearchEngineId(), assetVocabulary.getCompanyId(), document);\n\t\t}\n\t}","commit_id":"daec80046d012601c5199d32197da4404fe40460","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doDelete(Object obj) throws Exception {\n\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)obj;\n\n\t\tdeleteDocument(\n\t\t\tassetVocabulary.getCompanyId(), assetVocabulary.getVocabularyId());\n\t}","id":94590,"modified_method":"@Override\n\tprotected void doDelete(Object obj) throws Exception {\n\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)obj;\n\n\t\tDocument document = new DocumentImpl();\n\n\t\tdocument.addUID(PORTLET_ID, assetVocabulary.getVocabularyId());\n\n\t\tSearchEngineUtil.deleteDocument(\n\t\t\tgetSearchEngineId(), assetVocabulary.getCompanyId(),\n\t\t\tdocument.get(Field.UID));\n\t}","commit_id":"daec80046d012601c5199d32197da4404fe40460","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doReindex(String className, long classPK) throws Exception {\n\t\tAssetVocabulary assetVocabulary =\n\t\t\tAssetVocabularyServiceUtil.getVocabulary(classPK);\n\n\t\tdoReindex(assetVocabulary);\n\t}","id":94591,"modified_method":"@Override\n\tprotected void doReindex(String className, long classPK) throws Exception {\n\t\tAssetVocabulary assetVocabulary =\n\t\t\tAssetVocabularyLocalServiceUtil.getVocabulary(classPK);\n\n\t\tdoReindex(assetVocabulary);\n\t}","commit_id":"daec80046d012601c5199d32197da4404fe40460","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexAssetVocabularies(long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfinal List<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew AssetVocabularyActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)object;\n\n\t\t\t\t\tDocument document = getDocument(assetVocabulary);\n\n\t\t\t\t\tdocuments.add(document);\n\t\t\t\t}\n\t\t\t};\n\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","id":94592,"modified_method":"protected void reindexAssetVocabularies(long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew AssetVocabularyActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tAssetVocabulary assetVocabulary = (AssetVocabulary)object;\n\n\t\t\t\t\tDocument document = getDocument(assetVocabulary);\n\n\t\t\t\tif (document != null) {\n\t\t\t\t\taddDocument(document);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setSearchEngineId(getSearchEngineId());\n\n\t\tactionableDynamicQuery.performActions();\n\t}","commit_id":"daec80046d012601c5199d32197da4404fe40460","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tAssetCategory assetCategory = (AssetCategory)obj;\n\n\t\tDocument document = getDocument(assetCategory);\n\n\t\tSearchEngineUtil.updateDocument(\n\t\t\tgetSearchEngineId(), assetCategory.getCompanyId(), document);\n\t}","id":94593,"modified_method":"@Override\n\tprotected void doReindex(Object obj) throws Exception {\n\t\tAssetCategory assetCategory = (AssetCategory)obj;\n\n\t\tDocument document = getDocument(assetCategory);\n\n\t\tif (document != null) {\n\t\t\tSearchEngineUtil.updateDocument(\n\t\t\t\tgetSearchEngineId(), assetCategory.getCompanyId(), document);\n\t\t}\n\t}","commit_id":"c719751813091a88ad1de78d6b74102ff456b9c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doReindex(String className, long classPK) throws Exception {\n\t\tAssetCategory assetCategory = AssetCategoryServiceUtil.getCategory(\n\t\t\tclassPK);\n\n\t\tdoReindex(assetCategory);\n\t}","id":94594,"modified_method":"@Override\n\tprotected void doReindex(String className, long classPK) throws Exception {\n\t\tAssetCategory assetCategory = AssetCategoryLocalServiceUtil.getCategory(\n\t\t\tclassPK);\n\n\t\tdoReindex(assetCategory);\n\t}","commit_id":"c719751813091a88ad1de78d6b74102ff456b9c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindexAssetCategories(long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tfinal List<Document> documents = new ArrayList<Document>();\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew AssetCategoryActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object)\n\t\t\t\tthrows PortalException, SystemException {\n\n\t\t\t\tAssetCategory assetCategory = (AssetCategory)object;\n\n\t\t\t\tDocument document = getDocument(assetCategory);\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\n\t\tactionableDynamicQuery.performActions();\n\n\t\tSearchEngineUtil.updateDocuments(\n\t\t\tgetSearchEngineId(), companyId, documents);\n\t}","id":94595,"modified_method":"protected void reindexAssetCategories(long companyId)\n\t\tthrows PortalException, SystemException {\n\n\t\tActionableDynamicQuery actionableDynamicQuery =\n\t\t\tnew AssetCategoryActionableDynamicQuery() {\n\n\t\t\t@Override\n\t\t\tprotected void performAction(Object object) throws PortalException {\n\t\t\t\tAssetCategory assetCategory = (AssetCategory)object;\n\n\t\t\t\tDocument document = getDocument(assetCategory);\n\n\t\t\t\tif (document != null) {\n\t\t\t\t\taddDocument(document);\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tactionableDynamicQuery.setCompanyId(companyId);\n\t\tactionableDynamicQuery.setSearchEngineId(getSearchEngineId());\n\n\t\tactionableDynamicQuery.performActions();\n\t}","commit_id":"c719751813091a88ad1de78d6b74102ff456b9c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doDelete(Object obj) throws Exception {\n\t\tAssetCategory assetCategory = (AssetCategory)obj;\n\n\t\tdeleteDocument(\n\t\t\tassetCategory.getCompanyId(), assetCategory.getCategoryId());\n\t}","id":94596,"modified_method":"@Override\n\tprotected void doDelete(Object obj) throws Exception {\n\t\tAssetCategory assetCategory = (AssetCategory)obj;\n\n\t\tDocument document = new DocumentImpl();\n\n\t\tdocument.addUID(PORTLET_ID, assetCategory.getCategoryId());\n\n\t\tSearchEngineUtil.deleteDocument(\n\t\t\tgetSearchEngineId(), assetCategory.getCompanyId(),\n\t\t\tdocument.get(Field.UID));\n\t}","commit_id":"c719751813091a88ad1de78d6b74102ff456b9c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void reindex(String[] ids) throws SearchException {\n\t\tlong companyId = GetterUtil.getLong(ids[0]);\n\t\tString portletId = ids[1];\n\t\tlong groupId = GetterUtil.getLong(ids[2]);\n\t\tlong repositoryId = GetterUtil.getLong(ids[3]);\n\n\t\tFile repositoryDir = getRepositoryDir(companyId, repositoryId);\n\n\t\tString[] fileNames = FileUtil.listDirs(repositoryDir);\n\n\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\treindex(\n\t\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\t\trepositoryDir.getPath() + StringPool.SLASH + fileNames[i]);\n\t\t}\n\t}","id":94597,"modified_method":"public void reindex(String[] ids) throws SearchException {\n\t\tlong companyId = GetterUtil.getLong(ids[0]);\n\t\tString portletId = ids[1];\n\t\tlong groupId = GetterUtil.getLong(ids[2]);\n\t\tlong repositoryId = GetterUtil.getLong(ids[3]);\n\n\t\tFile repositoryDir = getRepositoryDir(companyId, repositoryId);\n\n\t\tString[] fileNames = FileUtil.listDirs(repositoryDir);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\treindex(\n\t\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\t\trepositoryDir.getPath() + StringPool.SLASH + fileName);\n\t\t}\n\t}","commit_id":"9f3613cdcac0f7ca6db641809967703e1353f077","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void reindex(\n\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\tString folderName) throws SearchException {\n\n\t\tString shortFileName = FileUtil.getShortFileName(folderName);\n\n\t\tif (shortFileName.equals(\"DLFE\") ||\n\t\t\tValidator.isNumber(shortFileName)) {\n\n\t\t\tString[] fileNames = FileUtil.listDirs(folderName);\n\n\t\t\tfor (int i = 0; i < fileNames.length; i++) {\n\t\t\t\treindex(\n\t\t\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\t\t\tfolderName + StringPool.SLASH + fileNames[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\tFileModel.class);\n\n\t\t\t\tFileModel fileModel = new FileModel();\n\n\t\t\t\tif (shortFileName.endsWith(_HOOK_EXTENSION)) {\n\t\t\t\t\tshortFileName = FileUtil.stripExtension(shortFileName);\n\t\t\t\t}\n\n\t\t\t\tfileModel.setCompanyId(companyId);\n\t\t\t\tfileModel.setFileName(shortFileName);\n\t\t\t\tfileModel.setGroupId(groupId);\n\t\t\t\tfileModel.setPortletId(portletId);\n\t\t\t\tfileModel.setRepositoryId(repositoryId);\n\n\t\t\t\tDocument document = indexer.getDocument(fileModel);\n\n\t\t\t\tSearchEngineUtil.updateDocument(companyId, document);\n\t\t\t}\n\t\t\tcatch (SearchException se) {\n\t\t\t\tthrow se;\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(\"Reindexing \" + shortFileName, e);\n\t\t\t}\n\t\t}\n\t}","id":94598,"modified_method":"protected void reindex(\n\t\t\tlong companyId, String portletId, long groupId, long repositoryId,\n\t\t\tString dirName)\n\t\tthrows SearchException {\n\n\t\tString shortFileName = FileUtil.getShortFileName(dirName);\n\n\t\tif (shortFileName.equals(\"DLFE\") ||\n\t\t\tValidator.isNumber(shortFileName)) {\n\n\t\t\tString[] fileNames = FileUtil.listDirs(dirName);\n\n\t\t\tfor (String fileName : fileNames) {\n\t\t\t\treindex(\n\t\t\t\t\tcompanyId, portletId, groupId, repositoryId,\n\t\t\t\t\tdirName + StringPool.SLASH + fileName);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\tFileModel.class);\n\n\t\t\t\tFileModel fileModel = new FileModel();\n\n\t\t\t\tif (shortFileName.endsWith(_HOOK_EXTENSION)) {\n\t\t\t\t\tshortFileName = FileUtil.stripExtension(shortFileName);\n\t\t\t\t}\n\n\t\t\t\tfileModel.setCompanyId(companyId);\n\t\t\t\tfileModel.setFileName(shortFileName);\n\t\t\t\tfileModel.setGroupId(groupId);\n\t\t\t\tfileModel.setPortletId(portletId);\n\t\t\t\tfileModel.setRepositoryId(repositoryId);\n\n\t\t\t\tDocument document = indexer.getDocument(fileModel);\n\n\t\t\t\tif (document != null) {\n\t\t\t\t\tSearchEngineUtil.updateDocument(companyId, document);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(\"Reindexing \" + shortFileName, e);\n\t\t\t}\n\t\t}\n\t}","commit_id":"9f3613cdcac0f7ca6db641809967703e1353f077","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private <T extends Document> void updateDocument(Collection<T> collection, T document, Long oldmodcount) {\n        String tableName = getTable(collection);\n        try {\n            String data = asString(document);\n            Long modified = (Long) document.get(MODIFIED);\n            Long modcount = (Long) document.get(MODCOUNT);\n            dbUpdate(connection, tableName, document.getId(), modified, modcount, oldmodcount, data);\n            connection.commit();\n        } catch (SQLException ex) {\n            throw new MicroKernelException(ex);\n        }\n    }","id":94599,"modified_method":"private <T extends Document> boolean updateDocument(@Nonnull Collection<T> collection, @Nonnull T document, Long oldmodcount) {\n        String tableName = getTable(collection);\n        try {\n            String data = asString(document);\n            Long modified = (Long) document.get(MODIFIED);\n            Long modcount = (Long) document.get(MODCOUNT);\n            boolean success = dbUpdate(connection, tableName, document.getId(), modified, modcount, oldmodcount, data);\n            connection.commit();\n            return success;\n        } catch (SQLException ex) {\n            throw new MicroKernelException(ex);\n        }\n    }","commit_id":"6c8a45b193007cf6e58017fec7b33360b8b356bc","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@CheckForNull\n    private <T extends Document> T internalCreateOrUpdate(Collection<T> collection, UpdateOp update, boolean checkConditions) {\n        T oldDoc = readDocument(collection, update.getId());\n\n        T doc = collection.newDocument(this);\n        if (oldDoc == null) {\n            if (!update.isNew()) {\n                throw new MicroKernelException(\"Document does not exist: \" + update.getId());\n            }\n        } else {\n            oldDoc.deepCopy(doc);\n        }\n        if (checkConditions && !UpdateUtils.checkConditions(doc, update)) {\n            return null;\n        }\n        update.increment(MODCOUNT, 1);\n        UpdateUtils.applyChanges(doc, update, comparator);\n        doc.seal();\n        if (oldDoc == null)  {\n            insertDocument(collection, doc);\n        }\n        else {\n            updateDocument(collection, doc, oldDoc != null ? (Long) oldDoc.get(MODCOUNT) : null);\n        }\n\n        return oldDoc;\n    }","id":94600,"modified_method":"@CheckForNull\n    private <T extends Document> T internalCreateOrUpdate(Collection<T> collection, UpdateOp update, boolean allowCreate,\n            boolean checkConditions) {\n        T oldDoc = readDocument(collection, update.getId());\n\n        if (oldDoc == null) {\n            if (!update.isNew() || !allowCreate) {\n                throw new MicroKernelException(\"Document does not exist: \" + update.getId());\n            }\n            T doc = collection.newDocument(this);\n            if (checkConditions && !UpdateUtils.checkConditions(doc, update)) {\n                return null;\n            }\n            update.increment(MODCOUNT, 1);\n            UpdateUtils.applyChanges(doc, update, comparator);\n            doc.seal();\n            insertDocument(collection, doc);\n        } else {\n            T doc = applyChanges(collection, oldDoc, update, checkConditions);\n            if (doc == null) {\n                return null;\n            }\n\n            int retries = 5; // TODO\n            boolean success = false;\n\n            while (!success && retries > 0) {\n                success = updateDocument(collection, doc, (Long) oldDoc.get(MODCOUNT));\n                if (!success) {\n                    // retry with a fresh document\n                    retries -= 1;\n                    oldDoc = readDocument(collection, update.getId());\n                    doc = applyChanges(collection, oldDoc, update, checkConditions);\n                    if (doc == null) {\n                        return null;\n                    }\n                }\n            }\n\n            if (!success) {\n                throw new MicroKernelException(\"failed update (race?)\");\n            }\n        }\n\n        return oldDoc;\n    }","commit_id":"6c8a45b193007cf6e58017fec7b33360b8b356bc","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void dbUpdate(Connection connection, String tableName, String id, Long modified, Long modcount, Long oldmodcount,\n            String data) throws SQLException {\n        String t = \"update \" + tableName + \" set MODIFIED = ?, MODCOUNT = ?, DATA = ? where ID = ?\";\n        if (oldmodcount != null) {\n            t += \" and MODCOUNT = ?\";\n        }\n        PreparedStatement stmt = connection.prepareStatement(t);\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setString(si++, data);\n            stmt.setString(si++, id);\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                String message = \"update failed for key=\" + id + \", modCount=\" + modcount + \", oldmodcount=\" + oldmodcount;\n                LOG.error(message);\n                throw new MicroKernelException(message);\n            }\n        } finally {\n            stmt.close();\n        }\n    }","id":94601,"modified_method":"private boolean dbUpdate(Connection connection, String tableName, String id, Long modified, Long modcount, Long oldmodcount,\n            String data) throws SQLException {\n        String t = \"update \" + tableName + \" set MODIFIED = ?, MODCOUNT = ?, DATA = ? where ID = ?\";\n        if (oldmodcount != null) {\n            t += \" and MODCOUNT = ?\";\n        }\n        PreparedStatement stmt = connection.prepareStatement(t);\n        try {\n            int si = 1;\n            stmt.setObject(si++, modified, Types.BIGINT);\n            stmt.setObject(si++, modcount, Types.BIGINT);\n            stmt.setString(si++, data);\n            stmt.setString(si++, id);\n            if (oldmodcount != null) {\n                stmt.setObject(si++, oldmodcount, Types.BIGINT);\n            }\n            int result = stmt.executeUpdate();\n            if (result != 1) {\n                LOG.debug(\"DB update failed for \" + tableName + \"/\" + id + \" with oldmodcount=\" + oldmodcount);\n            }\n            return result == 1;\n        } finally {\n            stmt.close();\n        }\n    }","commit_id":"6c8a45b193007cf6e58017fec7b33360b8b356bc","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public <T extends Document> T createOrUpdate(Collection<T> collection, UpdateOp update) throws MicroKernelException {\n        return internalCreateOrUpdate(collection, update, false);\n    }","id":94602,"modified_method":"@Override\n    public <T extends Document> T createOrUpdate(Collection<T> collection, UpdateOp update) throws MicroKernelException {\n        return internalCreateOrUpdate(collection, update, true, false);\n    }","commit_id":"6c8a45b193007cf6e58017fec7b33360b8b356bc","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public <T extends Document> T findAndUpdate(Collection<T> collection, UpdateOp update) throws MicroKernelException {\n        return internalCreateOrUpdate(collection, update, true);\n    }","id":94603,"modified_method":"@Override\n    public <T extends Document> T findAndUpdate(Collection<T> collection, UpdateOp update) throws MicroKernelException {\n        return internalCreateOrUpdate(collection, update, false, true);\n    }","commit_id":"6c8a45b193007cf6e58017fec7b33360b8b356bc","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public void returnConnection(HttpConnection connection, boolean close) throws IOException\n    {\n        if (connection.isReserved())\n            connection.setReserved(false);\n\n        if (close)\n        {\n            try\n            {\n                connection.close();\n            }\n            catch (IOException e)\n            {\n                Log.ignore(e);\n            }\n        }\n\n        if (!_client.isStarted())\n            return;\n\n        if (!close && connection.getEndPoint().isOpen())\n        {\n            synchronized (this)\n            {\n                if (_queue.size() == 0)\n                {\n                    connection.setIdleTimeout();\n                    _idle.add(connection);\n                }\n                else\n                {\n                    HttpExchange ex = _queue.removeFirst();\n                    send(connection, ex);\n                }\n                this.notifyAll();\n            }\n        }\n        else\n        {\n            synchronized (this)\n            {\n                _connections.remove(connection);\n                if (!_queue.isEmpty())\n                    startNewConnection();\n            }\n        }\n    }","id":94604,"modified_method":"public void returnConnection(HttpConnection connection, boolean close) throws IOException\n    {\n        if (connection.isReserved())\n            connection.setReserved(false);\n\n        if (close)\n        {\n            try\n            {\n                connection.close();\n            }\n            catch (IOException e)\n            {\n                Log.ignore(e);\n            }\n        }\n\n        if (!_client.isStarted())\n            return;\n\n        if (!close && connection.getEndPoint().isOpen())\n        {\n            synchronized (this)\n            {\n                if (_queue.size() == 0)\n                {\n                    connection.setIdleTimeout();\n                    _idle.add(connection);\n                }\n                else\n                {\n                    HttpExchange ex = _queue.removeFirst();\n                    send(connection, ex);\n                }\n                this.notifyAll();\n            }\n        }\n        else\n        {\n            boolean startConnection = false;\n            synchronized (this)\n            {\n                _connections.remove(connection);\n                if (!_queue.isEmpty())\n                    startConnection = true;\n            }\n\n            if (startConnection)\n                startNewConnection();\n        }\n    }","commit_id":"8df474ea97552d96733e17366fe0e33d0ac85a74","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void returnIdleConnection(HttpConnection connection)\n    {\n        try\n        {\n            connection.close();\n        }\n        catch (IOException e)\n        {\n            Log.ignore(e);\n        }\n\n        synchronized (this)\n        {\n            _idle.remove(connection);\n            _connections.remove(connection);\n\n            if (!_queue.isEmpty() && _client.isStarted())\n                startNewConnection();\n        }\n    }","id":94605,"modified_method":"public void returnIdleConnection(HttpConnection connection)\n    {\n        try\n        {\n            connection.close();\n        }\n        catch (IOException e)\n        {\n            Log.ignore(e);\n        }\n\n        boolean startConnection = false;\n        synchronized (this)\n        {\n            _idle.remove(connection);\n            _connections.remove(connection);\n\n            if (!_queue.isEmpty() && _client.isStarted())\n                startConnection = true;\n        }\n\n        if (startConnection)\n            startNewConnection();\n    }","commit_id":"8df474ea97552d96733e17366fe0e33d0ac85a74","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void onConnectionFailed(Throwable throwable)\n    {\n        Throwable connect_failure = null;\n\n        synchronized (this)\n        {\n            _pendingConnections--;\n            if (_newConnection > 0)\n            {\n                connect_failure = throwable;\n                _newConnection--;\n            }\n            else if (_queue.size() > 0)\n            {\n                HttpExchange ex = _queue.removeFirst();\n                ex.setStatus(HttpExchange.STATUS_EXCEPTED);\n                ex.getEventListener().onConnectionFailed(throwable);\n\n                // Since an existing connection had failed, we need to create a\n                // connection if the  queue is not empty and client is running.\n                if (!_queue.isEmpty() && _client.isStarted())\n                    startNewConnection();\n            }\n        }\n\n        if (connect_failure != null)\n        {\n            try\n            {\n                _newQueue.put(connect_failure);\n            }\n            catch (InterruptedException e)\n            {\n                Log.ignore(e);\n            }\n        }\n    }","id":94606,"modified_method":"public void onConnectionFailed(Throwable throwable)\n    {\n        Throwable connect_failure = null;\n\n        boolean startConnection = false;\n        synchronized (this)\n        {\n            _pendingConnections--;\n            if (_newConnection > 0)\n            {\n                connect_failure = throwable;\n                _newConnection--;\n            }\n            else if (_queue.size() > 0)\n            {\n                HttpExchange ex = _queue.removeFirst();\n                ex.setStatus(HttpExchange.STATUS_EXCEPTED);\n                ex.getEventListener().onConnectionFailed(throwable);\n\n                // Since an existing connection had failed, we need to create a\n                // connection if the  queue is not empty and client is running.\n                if (!_queue.isEmpty() && _client.isStarted())\n                    startConnection = true;\n            }\n        }\n\n        if (startConnection)\n            startNewConnection();\n\n        if (connect_failure != null)\n        {\n            try\n            {\n                _newQueue.put(connect_failure);\n            }\n            catch (InterruptedException e)\n            {\n                Log.ignore(e);\n            }\n        }\n    }","commit_id":"8df474ea97552d96733e17366fe0e33d0ac85a74","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Get a connection. We either get an idle connection if one is available, or\n     * we make a new connection, if we have not yet reached maxConnections. If we\n     * have reached maxConnections, we wait until the number reduces.\n     * @param timeout max time prepared to block waiting to be able to get a connection\n     * @return\n     * @throws IOException\n     */\n    private HttpConnection getConnection(long timeout) throws IOException\n    {\n        HttpConnection connection = null;\n\n        while ((connection == null) && (connection = getIdleConnection()) == null && timeout>0)\n        {\n            boolean starting = false;\n            synchronized (this)\n            {\n                int totalConnections = _connections.size() + _pendingConnections;\n                if (totalConnections < _maxConnections)\n                {\n                    _newConnection++;\n                    startNewConnection();\n                    starting = true;\n                }\n            }\n\n            if (!starting)\n            {\n                try\n                {\n                    Thread.currentThread();\n                    Thread.sleep(200);\n                    timeout-=200;\n                }\n                catch (InterruptedException e)\n                {\n                    Log.ignore(e);\n                }\n            }\n            else\n            {\n               try\n               {\n                   Object o = _newQueue.take();\n                   if (o instanceof HttpConnection)\n                   {\n                       connection = (HttpConnection)o;\n                   }\n                   else\n                       throw (IOException)o;\n               }\n               catch (InterruptedException e)\n               {\n                   Log.ignore(e);\n               }\n           }\n        }\n        return connection;\n    }","id":94607,"modified_method":"/**\n     * Get a connection. We either get an idle connection if one is available, or\n     * we make a new connection, if we have not yet reached maxConnections. If we\n     * have reached maxConnections, we wait until the number reduces.\n     *\n     * @param timeout max time prepared to block waiting to be able to get a connection\n     * @return a HttpConnection for this destination\n     * @throws IOException if an I/O error occurs\n     */\n    private HttpConnection getConnection(long timeout) throws IOException\n    {\n        HttpConnection connection = null;\n\n        while ((connection == null) && (connection = getIdleConnection()) == null && timeout > 0)\n        {\n            boolean startConnection = false;\n            synchronized (this)\n            {\n                int totalConnections = _connections.size() + _pendingConnections;\n                if (totalConnections < _maxConnections)\n                {\n                    _newConnection++;\n                    startConnection = true;\n                }\n            }\n\n            if (startConnection)\n            {\n                startNewConnection();\n                try\n                {\n                    Object o = _newQueue.take();\n                    if (o instanceof HttpConnection)\n                    {\n                        connection = (HttpConnection)o;\n                    }\n                    else\n                        throw (IOException)o;\n                }\n                catch (InterruptedException e)\n                {\n                    Log.ignore(e);\n                }\n            }\n            else\n            {\n                try\n                {\n                    Thread.currentThread();\n                    Thread.sleep(200);\n                    timeout -= 200;\n                }\n                catch (InterruptedException e)\n                {\n                    Log.ignore(e);\n                }\n            }\n        }\n        return connection;\n    }","commit_id":"8df474ea97552d96733e17366fe0e33d0ac85a74","url":"https://github.com/eclipse/jetty.project"},{"original_method":"protected void doSend(HttpExchange ex) throws IOException\n    {\n        // add cookies\n        // TODO handle max-age etc.\n        if (_cookies != null)\n        {\n            StringBuilder buf = null;\n            for (HttpCookie cookie : _cookies)\n            {\n                if (buf == null)\n                    buf = new StringBuilder();\n                else\n                    buf.append(\"; \");\n                buf.append(cookie.getName()); // TODO quotes\n                buf.append(\"=\");\n                buf.append(cookie.getValue()); // TODO quotes\n            }\n            if (buf != null)\n                ex.addRequestHeader(HttpHeaders.COOKIE, buf.toString());\n        }\n\n        // Add any known authorizations\n        if (_authorizations != null)\n        {\n            Authentication auth = (Authentication)_authorizations.match(ex.getURI());\n            if (auth != null)\n                (auth).setCredentials(ex);\n        }\n\n        HttpConnection connection = getIdleConnection();\n        if (connection != null)\n        {\n            send(connection, ex);\n        }\n        else\n        {\n            synchronized (this)\n            {\n                _queue.add(ex);\n                if (_connections.size() + _pendingConnections < _maxConnections)\n                {\n                    startNewConnection();\n                }\n            }\n        }\n    }","id":94608,"modified_method":"protected void doSend(HttpExchange ex) throws IOException\n    {\n        // add cookies\n        // TODO handle max-age etc.\n        if (_cookies != null)\n        {\n            StringBuilder buf = null;\n            for (HttpCookie cookie : _cookies)\n            {\n                if (buf == null)\n                    buf = new StringBuilder();\n                else\n                    buf.append(\"; \");\n                buf.append(cookie.getName()); // TODO quotes\n                buf.append(\"=\");\n                buf.append(cookie.getValue()); // TODO quotes\n            }\n            if (buf != null)\n                ex.addRequestHeader(HttpHeaders.COOKIE, buf.toString());\n        }\n\n        // Add any known authorizations\n        if (_authorizations != null)\n        {\n            Authentication auth = (Authentication)_authorizations.match(ex.getURI());\n            if (auth != null)\n                (auth).setCredentials(ex);\n        }\n\n        HttpConnection connection = getIdleConnection();\n        if (connection != null)\n        {\n            send(connection, ex);\n        }\n        else\n        {\n            boolean startConnection = false;\n            synchronized (this)\n            {\n                _queue.add(ex);\n                if (_connections.size() + _pendingConnections < _maxConnections)\n                    startConnection = true;\n            }\n\n            if (startConnection)\n                startNewConnection();\n        }\n    }","commit_id":"8df474ea97552d96733e17366fe0e33d0ac85a74","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n\tpublic int deleteResource(WebDAVRequest webDavRequest)\n\t\tthrows WebDAVException {\n\n\t\ttry {\n\t\t\tResource resource = getResource(webDavRequest);\n\n\t\t\tif (resource == null) {\n\t\t\t\treturn HttpServletResponse.SC_NOT_FOUND;\n\t\t\t}\n\n\t\t\tObject model = resource.getModel();\n\n\t\t\tif (model instanceof DDMStructure) {\n\t\t\t\tDDMStructure structure = (DDMStructure)model;\n\n\t\t\t\tDDMStructureServiceUtil.deleteStructure(\n\t\t\t\t\tstructure.getStructureId());\n\n\t\t\t\treturn HttpServletResponse.SC_NO_CONTENT;\n\t\t\t}\n\t\t\telse if (model instanceof DDMTemplate) {\n\t\t\t\tDDMTemplate template = (DDMTemplate)model;\n\n\t\t\t\tDDMTemplateServiceUtil.deleteTemplate(template.getTemplateId());\n\n\t\t\t\treturn HttpServletResponse.SC_NO_CONTENT;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","id":94609,"modified_method":"public static int deleteResource(\n\t\t\tWebDAVRequest webDavRequest, String rootPath, String token,\n\t\t\tlong classNameId)\n\t\tthrows WebDAVException {\n\n\t\ttry {\n\t\t\tResource resource = getResource(\n\t\t\t\twebDavRequest, rootPath, token, classNameId);\n\n\t\t\tif (resource == null) {\n\t\t\t\treturn HttpServletResponse.SC_NOT_FOUND;\n\t\t\t}\n\n\t\t\tObject model = resource.getModel();\n\n\t\t\tif (model instanceof DDMStructure) {\n\t\t\t\tDDMStructure structure = (DDMStructure)model;\n\n\t\t\t\tDDMStructureServiceUtil.deleteStructure(\n\t\t\t\t\tstructure.getStructureId());\n\n\t\t\t\treturn HttpServletResponse.SC_NO_CONTENT;\n\t\t\t}\n\t\t\telse if (model instanceof DDMTemplate) {\n\t\t\t\tDDMTemplate template = (DDMTemplate)model;\n\n\t\t\t\tDDMTemplateServiceUtil.deleteTemplate(template.getTemplateId());\n\n\t\t\t\treturn HttpServletResponse.SC_NO_CONTENT;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic int putResource(WebDAVRequest webDavRequest) throws WebDAVException {\n\t\ttry {\n\t\t\tResource resource = getResource(webDavRequest);\n\n\t\t\tif (resource == null) {\n\t\t\t\treturn HttpServletResponse.SC_NOT_FOUND;\n\t\t\t}\n\n\t\t\tObject model = resource.getModel();\n\n\t\t\tif (model instanceof DDMStructure) {\n\t\t\t\tDDMStructure structure = (DDMStructure)model;\n\n\t\t\t\tHttpServletRequest request =\n\t\t\t\t\twebDavRequest.getHttpServletRequest();\n\n\t\t\t\tString xsd = StringUtil.read(request.getInputStream());\n\n\t\t\t\tDDMStructureServiceUtil.updateStructure(\n\t\t\t\t\tstructure.getStructureId(),\n\t\t\t\t\tstructure.getParentStructureId(), structure.getNameMap(),\n\t\t\t\t\tstructure.getDescriptionMap(), xsd, new ServiceContext());\n\n\t\t\t\treturn HttpServletResponse.SC_CREATED;\n\t\t\t}\n\t\t\telse if (model instanceof DDMTemplate) {\n\t\t\t\tDDMTemplate template = (DDMTemplate)model;\n\n\t\t\t\tHttpServletRequest request =\n\t\t\t\t\twebDavRequest.getHttpServletRequest();\n\n\t\t\t\tString script = StringUtil.read(request.getInputStream());\n\n\t\t\t\tDDMTemplateServiceUtil.updateTemplate(\n\t\t\t\t\ttemplate.getTemplateId(), template.getNameMap(),\n\t\t\t\t\ttemplate.getDescriptionMap(), template.getType(),\n\t\t\t\t\ttemplate.getMode(), template.getLanguage(), script,\n\t\t\t\t\ttemplate.isCacheable(), template.isSmallImage(),\n\t\t\t\t\ttemplate.getSmallImageURL(), null, new ServiceContext());\n\n\t\t\t\treturn HttpServletResponse.SC_CREATED;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","id":94610,"modified_method":"public static int putResource(\n\t\t\tWebDAVRequest webDavRequest, String rootPath, String token,\n\t\t\tlong classNameId)\n\t\tthrows WebDAVException {\n\n\t\ttry {\n\t\t\tResource resource = getResource(\n\t\t\t\twebDavRequest, rootPath, token, classNameId);\n\n\t\t\tif (resource == null) {\n\t\t\t\treturn HttpServletResponse.SC_NOT_FOUND;\n\t\t\t}\n\n\t\t\tObject model = resource.getModel();\n\n\t\t\tif (model instanceof DDMStructure) {\n\t\t\t\tDDMStructure ddmStructure = (DDMStructure)model;\n\n\t\t\t\tHttpServletRequest request =\n\t\t\t\t\twebDavRequest.getHttpServletRequest();\n\n\t\t\t\tString xsd = StringUtil.read(request.getInputStream());\n\n\t\t\t\tDDMStructureServiceUtil.updateStructure(\n\t\t\t\t\tddmStructure.getGroupId(),\n\t\t\t\t\tddmStructure.getParentStructureId(),\n\t\t\t\t\tddmStructure.getClassNameId(),\n\t\t\t\t\tddmStructure.getStructureKey(), ddmStructure.getNameMap(),\n\t\t\t\t\tddmStructure.getDescriptionMap(), xsd,\n\t\t\t\t\tnew ServiceContext());\n\n\t\t\t\treturn HttpServletResponse.SC_CREATED;\n\t\t\t}\n\t\t\telse if (model instanceof DDMTemplate) {\n\t\t\t\tDDMTemplate ddmTemplate = (DDMTemplate)model;\n\n\t\t\t\tHttpServletRequest request =\n\t\t\t\t\twebDavRequest.getHttpServletRequest();\n\n\t\t\t\tString script = StringUtil.read(request.getInputStream());\n\n\t\t\t\tDDMTemplateServiceUtil.updateTemplate(\n\t\t\t\t\tddmTemplate.getTemplateId(), ddmTemplate.getNameMap(),\n\t\t\t\t\tddmTemplate.getDescriptionMap(), ddmTemplate.getType(),\n\t\t\t\t\tddmTemplate.getMode(), ddmTemplate.getLanguage(), script,\n\t\t\t\t\tddmTemplate.isCacheable(), ddmTemplate.isSmallImage(),\n\t\t\t\t\tddmTemplate.getSmallImageURL(), null, new ServiceContext());\n\n\t\t\t\treturn HttpServletResponse.SC_CREATED;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t\t}\n\t\t}\n\t\tcatch (PortalException pe) {\n\t\t\treturn HttpServletResponse.SC_FORBIDDEN;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Resource getResource(WebDAVRequest webDavRequest) {\n\t\tString[] pathArray = webDavRequest.getPathArray();\n\n\t\tif (pathArray.length == 4) {\n\t\t\tString type = pathArray[2];\n\t\t\tString typeId = pathArray[3];\n\n\t\t\tif (type.equals(_TYPE_STRUCTURES)) {\n\t\t\t\ttry {\n\t\t\t\t\tDDMStructure structure =\n\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\tLong.valueOf(typeId));\n\n\t\t\t\t\treturn toResource(webDavRequest, structure, false);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type.equals(_TYPE_TEMPLATES)) {\n\t\t\t\ttry {\n\t\t\t\t\tDDMTemplate template =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.getTemplate(\n\t\t\t\t\t\t\tLong.valueOf(typeId));\n\n\t\t\t\t\treturn toResource(webDavRequest, template, false);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":94611,"modified_method":"public static Resource getResource(\n\t\t\tWebDAVRequest webDavRequest, String rootPath, String token,\n\t\t\tlong classNameId)\n\t\tthrows WebDAVException {\n\n\t\ttry {\n\t\t\tString[] pathArray = webDavRequest.getPathArray();\n\n\t\t\tif (pathArray.length == 2) {\n\t\t\t\tString path = rootPath + webDavRequest.getPath();\n\n\t\t\t\treturn new BaseResourceImpl(path, StringPool.BLANK, token);\n\t\t\t}\n\t\t\telse if (pathArray.length == 3) {\n\t\t\t\tString type = pathArray[2];\n\n\t\t\t\treturn toResource(webDavRequest, type, rootPath, false);\n\t\t\t}\n\t\t\telse if (pathArray.length == 4) {\n\t\t\t\tString type = pathArray[2];\n\t\t\t\tString typeId = pathArray[3];\n\n\t\t\t\tif (type.equals(TYPE_STRUCTURES)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDDMStructure ddmStructure = null;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tddmStructure =\n\t\t\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\t\tLong.valueOf(typeId));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (NumberFormatException nfe) {\n\t\t\t\t\t\t\tddmStructure =\n\t\t\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\t\twebDavRequest.getGroupId(), classNameId,\n\t\t\t\t\t\t\t\t\ttypeId);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn DDMWebDavUtil.toResource(\n\t\t\t\t\t\t\twebDavRequest, ddmStructure, rootPath, false);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchStructureException nsse) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (type.equals(TYPE_TEMPLATES)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDDMTemplate ddmTemplate = null;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tddmTemplate =\n\t\t\t\t\t\t\t\tDDMTemplateLocalServiceUtil.getTemplate(\n\t\t\t\t\t\t\t\t\tLong.valueOf(typeId));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (NumberFormatException nfe) {\n\t\t\t\t\t\t\tddmTemplate =\n\t\t\t\t\t\t\t\tDDMTemplateLocalServiceUtil.getTemplate(\n\t\t\t\t\t\t\t\t\twebDavRequest.getGroupId(), classNameId,\n\t\t\t\t\t\t\t\t\ttypeId);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn DDMWebDavUtil.toResource(\n\t\t\t\t\t\t\twebDavRequest, ddmTemplate, rootPath, false);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchTemplateException nste) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<Resource> getResources(WebDAVRequest webDavRequest)\n\t\tthrows WebDAVException {\n\n\t\ttry {\n\t\t\tString[] pathArray = webDavRequest.getPathArray();\n\n\t\t\tif (pathArray.length == 3) {\n\t\t\t\tString type = pathArray[2];\n\n\t\t\t\tif (type.equals(_TYPE_STRUCTURES)) {\n\t\t\t\t\treturn getStructures(webDavRequest);\n\t\t\t\t}\n\t\t\t\telse if (type.equals(_TYPE_TEMPLATES)) {\n\t\t\t\t\treturn getTemplates(webDavRequest);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new ArrayList<Resource>();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new WebDAVException(e);\n\t\t}\n\t}","id":94612,"modified_method":"public static Resource toResource(\n\t\tWebDAVRequest webDavRequest, String type, String rootPath,\n\t\tboolean appendPath) {\n\n\t\tString parentPath = rootPath + webDavRequest.getPath();\n\n\t\tString name = StringPool.BLANK;\n\n\t\tif (appendPath) {\n\t\t\tname = type;\n\t\t}\n\n\t\tResource resource = new BaseResourceImpl(parentPath, name, type);\n\n\t\tresource.setModel(type);\n\n\t\treturn resource;\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Resource toResource(\n\t\tWebDAVRequest webDavRequest, DDMTemplate template, boolean appendPath) {\n\n\t\tString parentPath = getRootPath() + webDavRequest.getPath();\n\n\t\tString name = StringPool.BLANK;\n\n\t\tif (appendPath) {\n\t\t\tname = template.getName();\n\t\t}\n\n\t\treturn new DDMTemplateResourceImpl(template, parentPath, name);\n\t}","id":94613,"modified_method":"public static Resource toResource(\n\t\tWebDAVRequest webDavRequest, DDMTemplate template, String rootPath,\n\t\tboolean appendPath) {\n\n\t\tString parentPath = rootPath + webDavRequest.getPath();\n\n\t\tString name = StringPool.BLANK;\n\n\t\tif (appendPath) {\n\t\t\tname = String.valueOf(template.getTemplateId());\n\t\t}\n\n\t\treturn new DDMTemplateResourceImpl(template, parentPath, name);\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Resource toResource(\n\t\tWebDAVRequest webDavRequest, DDMStructure structure,\n\t\tboolean appendPath) {\n\n\t\tString parentPath = getRootPath() + webDavRequest.getPath();\n\n\t\tString name = StringPool.BLANK;\n\n\t\tif (appendPath) {\n\t\t\tname = structure.getName();\n\t\t}\n\n\t\treturn new DDMStructureResourceImpl(structure, parentPath, name);\n\t}","id":94614,"modified_method":"public static Resource toResource(\n\t\tWebDAVRequest webDavRequest, DDMStructure structure, String rootPath,\n\t\tboolean appendPath) {\n\n\t\tString parentPath = rootPath + webDavRequest.getPath();\n\n\t\tString name = StringPool.BLANK;\n\n\t\tif (appendPath) {\n\t\t\tname = String.valueOf(structure.getStructureId());\n\t\t}\n\n\t\treturn new DDMStructureResourceImpl(structure, parentPath, name);\n\t}","commit_id":"2ba1a337e089bd9ae9b3bf35b88c04689e3e4028","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getMergedXsd() {\n\t\tString parentStructureId = getParentStructureId();\n\n\t\tString xsd = getXsd();\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn xsd;\n\t\t}\n\n\t\ttry {\n\t\t\tJournalStructure parentStructure =\n\t\t\t\tJournalStructureLocalServiceUtil.getStructure(\n\t\t\t\t\tgetGroupId(), parentStructureId);\n\n\t\t\tDocument doc = SAXReaderUtil.read(getXsd());\n\n\t\t\tElement root = doc.getRootElement();\n\n\t\t\tDocument parentDoc = SAXReaderUtil.read(\n\t\t\t\tparentStructure.getMergedXsd());\n\n\t\t\tElement parentRoot = parentDoc.getRootElement();\n\n\t\t\taddParentStructureId(parentRoot, parentStructureId);\n\n\t\t\troot.content().addAll(0, parentRoot.content());\n\n\t\t\txsd = root.asXML();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\n\t\treturn xsd;\n\t}","id":94615,"modified_method":"public String getMergedXsd() {\n\t\tString parentStructureId = getParentStructureId();\n\n\t\tString xsd = getXsd();\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn xsd;\n\t\t}\n\n\t\ttry {\n\t\t\tJournalStructure parentStructure = null;\n\n\t\t\ttry {\n\t\t\t\tparentStructure = JournalStructureLocalServiceUtil.getStructure(\n\t\t\t\t\tgetGroupId(), parentStructureId);\n\t\t\t}\n\t\t\tcatch (NoSuchStructureException nsse1) {\n\t\t\t\tlong groupId = getGroupId();\n\n\t\t\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\t\t\t\tGroup companyGroup = GroupLocalServiceUtil.getCompanyGroup(\n\t\t\t\t\tgroup.getCompanyId());\n\t\t\t\t\n\t\t\t\tif (groupId != companyGroup.getGroupId()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tparentStructure = JournalStructureLocalServiceUtil.\n\t\t\t\t\t\t\tgetStructure(\n\t\t\t\t\t\t\t\tcompanyGroup.getGroupId(), parentStructureId);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchStructureException nsse2) {\n\t\t\t\t\t\tthrow new Exception(\n\t\t\t\t\t\t\t\"No JournalStructure exists with the structure id \"\n\t\t\t\t\t\t\t\t+ parentStructureId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tDocument doc = SAXReaderUtil.read(getXsd());\n\n\t\t\tElement root = doc.getRootElement();\n\n\t\t\tDocument parentDoc = SAXReaderUtil.read(\n\t\t\t\tparentStructure.getMergedXsd());\n\n\t\t\tElement parentRoot = parentDoc.getRootElement();\n\n\t\t\taddParentStructureId(parentRoot, parentStructureId);\n\n\t\t\troot.content().addAll(0, parentRoot.content());\n\n\t\t\txsd = root.asXML();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\n\t\treturn xsd;\n\t}","commit_id":"cfb7219c009a21183b23c3951ffd7d40a5109ef6","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validateParentStructureId(\n\t\t\tlong groupId, String structureId, String parentStructureId)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parentStructureId.equals(structureId)) {\n\t\t\tthrow new StructureInheritanceException();\n\t\t}\n\n\t\tJournalStructure parentStructure =\n\t\t\tjournalStructurePersistence.fetchByG_S(groupId, parentStructureId);\n\n\t\twhile (parentStructure != null) {\n\t\t\tif ((parentStructure != null) &&\n\t\t\t\t(parentStructure.getStructureId().equals(structureId)) ||\n\t\t\t\t(parentStructure.getParentStructureId().equals(structureId))) {\n\n\t\t\t\tthrow new StructureInheritanceException();\n\t\t\t}\n\n\t\t\tparentStructure = journalStructurePersistence.fetchByG_S(\n\t\t\t\tgroupId, parentStructure.getParentStructureId());\n\t\t}\n\t}","id":94616,"modified_method":"protected void validateParentStructureId(\n\t\t\tlong groupId, String structureId, String parentStructureId)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (parentStructureId.equals(structureId)) {\n\t\t\tthrow new StructureInheritanceException();\n\t\t}\n\n\t\tJournalStructure parentStructure = getParentStructure(\n\t\t\tgroupId, parentStructureId);\n\n\t\twhile (parentStructure != null) {\n\t\t\tif ((parentStructure != null) &&\n\t\t\t\t(parentStructure.getStructureId().equals(structureId)) ||\n\t\t\t\t(parentStructure.getParentStructureId().equals(structureId))) {\n\n\t\t\t\tthrow new StructureInheritanceException();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tparentStructure = getParentStructure(\n\t\t\t\t\tgroupId, parentStructure.getParentStructureId());\n\t\t\t}\n\t\t\tcatch (NoSuchStructureException nsse) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}","commit_id":"cfb7219c009a21183b23c3951ffd7d40a5109ef6","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void appendParentStructureElements(\n\t\t\tlong groupId, String parentStructureId, List<Element> elements)\n\t\tthrows Exception {\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJournalStructure parentStructure =\n\t\t\tjournalStructurePersistence.findByG_S(groupId, parentStructureId);\n\n\t\tappendParentStructureElements(\n\t\t\tgroupId, parentStructure.getParentStructureId(), elements);\n\n\t\tDocument document = SAXReaderUtil.read(parentStructure.getXsd());\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\telements.addAll(rootElement.elements());\n\t}","id":94617,"modified_method":"protected void appendParentStructureElements(\n\t\t\tlong groupId, String parentStructureId, List<Element> elements)\n\t\tthrows Exception {\n\n\t\tif (Validator.isNull(parentStructureId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJournalStructure parentStructure = getParentStructure(\n\t\t\tgroupId, parentStructureId);\n\n\t\tappendParentStructureElements(\n\t\t\tgroupId, parentStructure.getParentStructureId(), elements);\n\n\t\tDocument document = SAXReaderUtil.read(parentStructure.getXsd());\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\telements.addAll(rootElement.elements());\n\t}","commit_id":"cfb7219c009a21183b23c3951ffd7d40a5109ef6","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Object[] updateArticle(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadPortletRequest =\n\t\t\tPortalUtil.getUploadPortletRequest(actionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadPortletRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(uploadPortletRequest, \"groupId\");\n\t\tlong folderId = ParamUtil.getLong(uploadPortletRequest, \"folderId\");\n\t\tlong classNameId = ParamUtil.getLong(\n\t\t\tuploadPortletRequest, \"classNameId\");\n\t\tlong classPK = ParamUtil.getLong(uploadPortletRequest, \"classPK\");\n\n\t\tString articleId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleId\");\n\n\t\tboolean autoArticleId = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"autoArticleId\");\n\t\tdouble version = ParamUtil.getDouble(uploadPortletRequest, \"version\");\n\t\tboolean localized = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"localized\");\n\n\t\tString defaultLanguageId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"defaultLanguageId\");\n\n\t\tLocale defaultLocale = LocaleUtil.fromLanguageId(defaultLanguageId);\n\n\t\tString toLanguageId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"toLanguageId\");\n\n\t\tLocale toLocale = null;\n\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\n\t\tif (Validator.isNull(toLanguageId)) {\n\t\t\ttitle = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"title_\" + defaultLanguageId);\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"description_\" + defaultLanguageId);\n\t\t}\n\t\telse {\n\t\t\ttoLocale = LocaleUtil.fromLanguageId(toLanguageId);\n\n\t\t\ttitle = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"title_\" + toLanguageId);\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"description_\" + toLanguageId);\n\t\t}\n\n\t\tString content = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleContent\");\n\n\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tJournalArticle.class.getName(), uploadPortletRequest);\n\n\t\tString structureId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"structureId\");\n\n\t\tif (Validator.isNotNull(structureId)) {\n\t\t\tString languageId = toLanguageId;\n\n\t\t\tif (Validator.isNull(languageId)) {\n\t\t\t\tlanguageId = defaultLanguageId;\n\t\t\t}\n\n\t\t\tLocale locale = LocaleUtil.fromLanguageId(languageId);\n\n\t\t\tObject[] contentAndImages = ActionUtil.getContentAndImages(\n\t\t\t\tgroupId, structureId, locale, serviceContext);\n\n\t\t\tcontent = (String)contentAndImages[0];\n\t\t\timages = (HashMap<String, byte[]>)contentAndImages[1];\n\t\t}\n\n\t\tBoolean fileItemThresholdSizeExceeded =\n\t\t\t(Boolean)uploadPortletRequest.getAttribute(\n\t\t\t\tWebKeys.FILE_ITEM_THRESHOLD_SIZE_EXCEEDED);\n\n\t\tif ((fileItemThresholdSizeExceeded != null) &&\n\t\t\tfileItemThresholdSizeExceeded.booleanValue()) {\n\n\t\t\tthrow new ArticleContentSizeException();\n\t\t}\n\n\t\tString type = ParamUtil.getString(uploadPortletRequest, \"type\");\n\t\tString templateId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"templateId\");\n\t\tString layoutUuid = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"layoutUuid\");\n\n\t\t// The target page and the article must belong to the same group\n\n\t\tLayout targetLayout =\n\t\t\tLayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(\n\t\t\t\tlayoutUuid, groupId, false);\n\n\t\tif (targetLayout == null) {\n\t\t\ttargetLayout = LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(\n\t\t\t\tlayoutUuid, groupId, true);\n\t\t}\n\n\t\tif (targetLayout == null) {\n\t\t\tlayoutUuid = null;\n\t\t}\n\n\t\tint displayDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateMonth\");\n\t\tint displayDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateDay\");\n\t\tint displayDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateYear\");\n\t\tint displayDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateHour\");\n\t\tint displayDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateMinute\");\n\t\tint displayDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateAmPm\");\n\n\t\tif (displayDateAmPm == Calendar.PM) {\n\t\t\tdisplayDateHour += 12;\n\t\t}\n\n\t\tint expirationDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateMonth\");\n\t\tint expirationDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateDay\");\n\t\tint expirationDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateYear\");\n\t\tint expirationDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateHour\");\n\t\tint expirationDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateMinute\");\n\t\tint expirationDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateAmPm\");\n\t\tboolean neverExpire = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"neverExpire\");\n\n\t\tif (expirationDateAmPm == Calendar.PM) {\n\t\t\texpirationDateHour += 12;\n\t\t}\n\n\t\tint reviewDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateMonth\");\n\t\tint reviewDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateDay\");\n\t\tint reviewDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateYear\");\n\t\tint reviewDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateHour\");\n\t\tint reviewDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateMinute\");\n\t\tint reviewDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateAmPm\");\n\t\tboolean neverReview = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"neverReview\");\n\n\t\tif (reviewDateAmPm == Calendar.PM) {\n\t\t\treviewDateHour += 12;\n\t\t}\n\n\t\tboolean indexable = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"indexable\");\n\n\t\tboolean smallImage = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"smallImage\");\n\t\tString smallImageURL = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"smallImageURL\");\n\t\tFile smallFile = uploadPortletRequest.getFile(\"smallFile\");\n\n\t\tString articleURL = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleURL\");\n\n\t\tserviceContext.setAttribute(\"defaultLanguageId\", defaultLanguageId);\n\n\t\tJournalArticle article = null;\n\t\tString oldUrlTitle = StringPool.BLANK;\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\t\t\tMap<Locale, String> titleMap = new HashMap<Locale, String>();\n\n\t\t\ttitleMap.put(defaultLocale, title);\n\n\t\t\tMap<Locale, String> descriptionMap = new HashMap<Locale, String>();\n\n\t\t\tdescriptionMap.put(defaultLocale, description);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\tStringPool.BLANK, \"static-content\", content,\n\t\t\t\t\tdefaultLanguageId, defaultLanguageId, true, localized);\n\t\t\t}\n\n\t\t\t// Add article\n\n\t\t\tarticle = JournalArticleServiceUtil.addArticle(\n\t\t\t\tgroupId, folderId, classNameId, classPK, articleId,\n\t\t\t\tautoArticleId, titleMap, descriptionMap, content, type,\n\t\t\t\tstructureId, templateId, layoutUuid, displayDateMonth,\n\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\tdisplayDateMinute, expirationDateMonth, expirationDateDay,\n\t\t\t\texpirationDateYear, expirationDateHour, expirationDateMinute,\n\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\tserviceContext);\n\n\t\t\tAssetPublisherUtil.addAndStoreSelection(\n\t\t\t\tactionRequest, JournalArticle.class.getName(),\n\t\t\t\tarticle.getResourcePrimKey(), -1);\n\t\t}\n\t\telse {\n\n\t\t\t// Merge current content with new content\n\n\t\t\tJournalArticle curArticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tif (!curArticle.isTemplateDriven()) {\n\t\t\t\t\tString curContent = StringPool.BLANK;\n\n\t\t\t\t\tcurContent = curArticle.getContent();\n\n\t\t\t\t\tif (cmd.equals(Constants.TRANSLATE)) {\n\t\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\t\tcurContent, \"static-content\", content, toLanguageId,\n\t\t\t\t\t\t\tdefaultLanguageId, true, true);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\t\tcurContent, \"static-content\", content,\n\t\t\t\t\t\t\tdefaultLanguageId, defaultLanguageId, true,\n\t\t\t\t\t\t\tlocalized);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (curArticle.isTemplateDriven()) {\n\t\t\t\t\tDDMStructure ddmStructure =\n\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\t\t\t\t\tstructureId);\n\n\t\t\t\t\tFields newFields = DDMUtil.getFields(\n\t\t\t\t\t\tddmStructure.getStructureId(), serviceContext);\n\n\t\t\t\t\tFields existingFields = JournalConverterUtil.getDDMFields(\n\t\t\t\t\t\tddmStructure, curArticle.getContent());\n\n\t\t\t\t\tFields mergedFields = DDMUtil.mergeFields(\n\t\t\t\t\t\tnewFields, existingFields);\n\n\t\t\t\t\tcontent = JournalConverterUtil.getContent(\n\t\t\t\t\t\tddmStructure, mergedFields);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update article\n\n\t\t\tarticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tMap<Locale, String> titleMap = article.getTitleMap();\n\t\t\tMap<Locale, String> descriptionMap = article.getDescriptionMap();\n\n\t\t\tString tempOldUrlTitle = article.getUrlTitle();\n\n\t\t\tif (cmd.equals(Constants.UPDATE)) {\n\t\t\t\ttitleMap.put(defaultLocale, title);\n\t\t\t\tdescriptionMap.put(defaultLocale, description);\n\n\t\t\t\tarticle = JournalArticleServiceUtil.updateArticle(\n\t\t\t\t\tgroupId, folderId, articleId, version, titleMap,\n\t\t\t\t\tdescriptionMap, content, type, structureId, templateId,\n\t\t\t\t\tlayoutUuid, displayDateMonth, displayDateDay,\n\t\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse if (cmd.equals(Constants.TRANSLATE)) {\n\t\t\t\tarticle = JournalArticleServiceUtil.updateArticleTranslation(\n\t\t\t\t\tgroupId, articleId, version, toLocale, title, description,\n\t\t\t\t\tcontent, images, serviceContext);\n\t\t\t}\n\n\t\t\tif (!tempOldUrlTitle.equals(article.getUrlTitle())) {\n\t\t\t\toldUrlTitle = tempOldUrlTitle;\n\t\t\t}\n\t\t}\n\n\t\t// Recent articles\n\n\t\tJournalUtil.addRecentArticle(actionRequest, article);\n\n\t\t// Journal content\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"portletResource\");\n\n\t\tif (Validator.isNotNull(portletResource)) {\n\t\t\tPortletPreferences portletPreferences =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\t\tuploadPortletRequest, portletResource);\n\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"groupId\", String.valueOf(article.getGroupId()));\n\t\t\tportletPreferences.setValue(\"articleId\", article.getArticleId());\n\n\t\t\tportletPreferences.store();\n\n\t\t\tupdateContentSearch(\n\t\t\t\tactionRequest, portletResource, article.getArticleId());\n\t\t}\n\n\t\treturn new Object[] {article, oldUrlTitle};\n\t}","id":94618,"modified_method":"protected Object[] updateArticle(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadPortletRequest =\n\t\t\tPortalUtil.getUploadPortletRequest(actionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadPortletRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(uploadPortletRequest, \"groupId\");\n\t\tlong folderId = ParamUtil.getLong(uploadPortletRequest, \"folderId\");\n\t\tlong classNameId = ParamUtil.getLong(\n\t\t\tuploadPortletRequest, \"classNameId\");\n\t\tlong classPK = ParamUtil.getLong(uploadPortletRequest, \"classPK\");\n\n\t\tString articleId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleId\");\n\n\t\tboolean autoArticleId = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"autoArticleId\");\n\t\tdouble version = ParamUtil.getDouble(uploadPortletRequest, \"version\");\n\t\tboolean localized = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"localized\");\n\n\t\tString defaultLanguageId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"defaultLanguageId\");\n\n\t\tLocale defaultLocale = LocaleUtil.fromLanguageId(defaultLanguageId);\n\n\t\tString toLanguageId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"toLanguageId\");\n\n\t\tLocale toLocale = null;\n\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\n\t\tif (Validator.isNull(toLanguageId)) {\n\t\t\ttitle = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"title_\" + defaultLanguageId);\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"description_\" + defaultLanguageId);\n\t\t}\n\t\telse {\n\t\t\ttoLocale = LocaleUtil.fromLanguageId(toLanguageId);\n\n\t\t\ttitle = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"title_\" + toLanguageId);\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tuploadPortletRequest, \"description_\" + toLanguageId);\n\t\t}\n\n\t\tString content = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleContent\");\n\n\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tJournalArticle.class.getName(), uploadPortletRequest);\n\n\t\tString structureId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"structureId\");\n\n\t\tif (Validator.isNotNull(structureId)) {\n\t\t\tString languageId = toLanguageId;\n\n\t\t\tif (Validator.isNull(languageId)) {\n\t\t\t\tlanguageId = defaultLanguageId;\n\t\t\t}\n\n\t\t\tLocale locale = LocaleUtil.fromLanguageId(languageId);\n\n\t\t\tObject[] contentAndImages = ActionUtil.getContentAndImages(\n\t\t\t\tgroupId, structureId, locale, serviceContext);\n\n\t\t\tcontent = (String)contentAndImages[0];\n\t\t\timages = (HashMap<String, byte[]>)contentAndImages[1];\n\t\t}\n\n\t\tBoolean fileItemThresholdSizeExceeded =\n\t\t\t(Boolean)uploadPortletRequest.getAttribute(\n\t\t\t\tWebKeys.FILE_ITEM_THRESHOLD_SIZE_EXCEEDED);\n\n\t\tif ((fileItemThresholdSizeExceeded != null) &&\n\t\t\tfileItemThresholdSizeExceeded.booleanValue()) {\n\n\t\t\tthrow new ArticleContentSizeException();\n\t\t}\n\n\t\tString type = ParamUtil.getString(uploadPortletRequest, \"type\");\n\t\tString templateId = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"templateId\");\n\t\tString layoutUuid = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"layoutUuid\");\n\n\t\t// The target page and the article must belong to the same group\n\n\t\tLayout targetLayout =\n\t\t\tLayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(\n\t\t\t\tlayoutUuid, groupId, false);\n\n\t\tif (targetLayout == null) {\n\t\t\ttargetLayout = LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(\n\t\t\t\tlayoutUuid, groupId, true);\n\t\t}\n\n\t\tif (targetLayout == null) {\n\t\t\tlayoutUuid = null;\n\t\t}\n\n\t\tint displayDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateMonth\");\n\t\tint displayDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateDay\");\n\t\tint displayDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateYear\");\n\t\tint displayDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateHour\");\n\t\tint displayDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateMinute\");\n\t\tint displayDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"displayDateAmPm\");\n\n\t\tif (displayDateAmPm == Calendar.PM) {\n\t\t\tdisplayDateHour += 12;\n\t\t}\n\n\t\tint expirationDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateMonth\");\n\t\tint expirationDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateDay\");\n\t\tint expirationDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateYear\");\n\t\tint expirationDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateHour\");\n\t\tint expirationDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateMinute\");\n\t\tint expirationDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"expirationDateAmPm\");\n\t\tboolean neverExpire = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"neverExpire\");\n\n\t\tif (expirationDateAmPm == Calendar.PM) {\n\t\t\texpirationDateHour += 12;\n\t\t}\n\n\t\tint reviewDateMonth = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateMonth\");\n\t\tint reviewDateDay = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateDay\");\n\t\tint reviewDateYear = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateYear\");\n\t\tint reviewDateHour = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateHour\");\n\t\tint reviewDateMinute = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateMinute\");\n\t\tint reviewDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadPortletRequest, \"reviewDateAmPm\");\n\t\tboolean neverReview = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"neverReview\");\n\n\t\tif (reviewDateAmPm == Calendar.PM) {\n\t\t\treviewDateHour += 12;\n\t\t}\n\n\t\tboolean indexable = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"indexable\");\n\n\t\tboolean smallImage = ParamUtil.getBoolean(\n\t\t\tuploadPortletRequest, \"smallImage\");\n\t\tString smallImageURL = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"smallImageURL\");\n\t\tFile smallFile = uploadPortletRequest.getFile(\"smallFile\");\n\n\t\tString articleURL = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"articleURL\");\n\n\t\tserviceContext.setAttribute(\"defaultLanguageId\", defaultLanguageId);\n\n\t\tJournalArticle article = null;\n\t\tString oldUrlTitle = StringPool.BLANK;\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\t\t\tMap<Locale, String> titleMap = new HashMap<Locale, String>();\n\n\t\t\ttitleMap.put(defaultLocale, title);\n\n\t\t\tMap<Locale, String> descriptionMap = new HashMap<Locale, String>();\n\n\t\t\tdescriptionMap.put(defaultLocale, description);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\tStringPool.BLANK, \"static-content\", content,\n\t\t\t\t\tdefaultLanguageId, defaultLanguageId, true, localized);\n\t\t\t}\n\n\t\t\t// Add article\n\n\t\t\tarticle = JournalArticleServiceUtil.addArticle(\n\t\t\t\tgroupId, folderId, classNameId, classPK, articleId,\n\t\t\t\tautoArticleId, titleMap, descriptionMap, content, type,\n\t\t\t\tstructureId, templateId, layoutUuid, displayDateMonth,\n\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\tdisplayDateMinute, expirationDateMonth, expirationDateDay,\n\t\t\t\texpirationDateYear, expirationDateHour, expirationDateMinute,\n\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\tserviceContext);\n\n\t\t\tAssetPublisherUtil.addAndStoreSelection(\n\t\t\t\tactionRequest, JournalArticle.class.getName(),\n\t\t\t\tarticle.getResourcePrimKey(), -1);\n\t\t}\n\t\telse {\n\n\t\t\t// Merge current content with new content\n\n\t\t\tJournalArticle curArticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tif (!curArticle.isTemplateDriven()) {\n\t\t\t\t\tString curContent = StringPool.BLANK;\n\n\t\t\t\t\tcurContent = curArticle.getContent();\n\n\t\t\t\t\tif (cmd.equals(Constants.TRANSLATE)) {\n\t\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\t\tcurContent, \"static-content\", content, toLanguageId,\n\t\t\t\t\t\t\tdefaultLanguageId, true, true);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\t\tcurContent, \"static-content\", content,\n\t\t\t\t\t\t\tdefaultLanguageId, defaultLanguageId, true,\n\t\t\t\t\t\t\tlocalized);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (curArticle.isTemplateDriven()) {\n\t\t\t\t\tDDMStructure ddmStructure = null;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tddmStructure =\n\t\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\t\t\t\t\t\tstructureId);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchStructureException nsse) {\n\t\t\t\t\t\tThemeDisplay themeDisplay =\n\t\t\t\t\t\t\t(ThemeDisplay)actionRequest.getAttribute(\n\t\t\t\t\t\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\t\t\t\t\tddmStructure =\n\t\t\t\t\t\t\tDDMStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\tthemeDisplay.getCompanyGroupId(),\n\t\t\t\t\t\t\t\tPortalUtil.getClassNameId(JournalArticle.class),\n\t\t\t\t\t\t\t\tstructureId);\n\t\t\t\t\t}\n\n\t\t\t\t\tFields newFields = DDMUtil.getFields(\n\t\t\t\t\t\tddmStructure.getStructureId(), serviceContext);\n\n\t\t\t\t\tFields existingFields = JournalConverterUtil.getDDMFields(\n\t\t\t\t\t\tddmStructure, curArticle.getContent());\n\n\t\t\t\t\tFields mergedFields = DDMUtil.mergeFields(\n\t\t\t\t\t\tnewFields, existingFields);\n\n\t\t\t\t\tcontent = JournalConverterUtil.getContent(\n\t\t\t\t\t\tddmStructure, mergedFields);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update article\n\n\t\t\tarticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tMap<Locale, String> titleMap = article.getTitleMap();\n\t\t\tMap<Locale, String> descriptionMap = article.getDescriptionMap();\n\n\t\t\tString tempOldUrlTitle = article.getUrlTitle();\n\n\t\t\tif (cmd.equals(Constants.UPDATE)) {\n\t\t\t\ttitleMap.put(defaultLocale, title);\n\t\t\t\tdescriptionMap.put(defaultLocale, description);\n\n\t\t\t\tarticle = JournalArticleServiceUtil.updateArticle(\n\t\t\t\t\tgroupId, folderId, articleId, version, titleMap,\n\t\t\t\t\tdescriptionMap, content, type, structureId, templateId,\n\t\t\t\t\tlayoutUuid, displayDateMonth, displayDateDay,\n\t\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse if (cmd.equals(Constants.TRANSLATE)) {\n\t\t\t\tarticle = JournalArticleServiceUtil.updateArticleTranslation(\n\t\t\t\t\tgroupId, articleId, version, toLocale, title, description,\n\t\t\t\t\tcontent, images, serviceContext);\n\t\t\t}\n\n\t\t\tif (!tempOldUrlTitle.equals(article.getUrlTitle())) {\n\t\t\t\toldUrlTitle = tempOldUrlTitle;\n\t\t\t}\n\t\t}\n\n\t\t// Recent articles\n\n\t\tJournalUtil.addRecentArticle(actionRequest, article);\n\n\t\t// Journal content\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tuploadPortletRequest, \"portletResource\");\n\n\t\tif (Validator.isNotNull(portletResource)) {\n\t\t\tPortletPreferences portletPreferences =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\t\tuploadPortletRequest, portletResource);\n\n\t\t\tportletPreferences.setValue(\n\t\t\t\t\"groupId\", String.valueOf(article.getGroupId()));\n\t\t\tportletPreferences.setValue(\"articleId\", article.getArticleId());\n\n\t\t\tportletPreferences.store();\n\n\t\t\tupdateContentSearch(\n\t\t\t\tactionRequest, portletResource, article.getArticleId());\n\t\t}\n\n\t\treturn new Object[] {article, oldUrlTitle};\n\t}","commit_id":"010bd387dec842fb8fc6ab4cff5887786835e68e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected JournalArticle updateArticle(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(\n\t\t\tactionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(uploadRequest, \"groupId\");\n\n\t\tString articleId = ParamUtil.getString(uploadRequest, \"articleId\");\n\t\tboolean autoArticleId = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"autoArticleId\");\n\n\t\tdouble version = ParamUtil.getDouble(uploadRequest, \"version\");\n\n\t\tString title = ParamUtil.getString(uploadRequest, \"title\");\n\t\tString description = ParamUtil.getString(uploadRequest, \"description\");\n\t\tString content = ParamUtil.getString(uploadRequest, \"content\");\n\t\tString type = ParamUtil.getString(uploadRequest, \"type\");\n\t\tString structureId = ParamUtil.getString(uploadRequest, \"structureId\");\n\t\tString templateId = ParamUtil.getString(uploadRequest, \"templateId\");\n\n\t\tString lastLanguageId = ParamUtil.getString(\n\t\t\tuploadRequest, \"lastLanguageId\");\n\t\tString defaultLanguageId = ParamUtil.getString(\n\t\t\tuploadRequest, \"defaultLanguageId\");\n\n\t\tint displayDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateMonth\");\n\t\tint displayDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateDay\");\n\t\tint displayDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateYear\");\n\t\tint displayDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateHour\");\n\t\tint displayDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateMinute\");\n\t\tint displayDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateAmPm\");\n\n\t\tif (displayDateAmPm == Calendar.PM) {\n\t\t\tdisplayDateHour += 12;\n\t\t}\n\n\t\tint expirationDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateMonth\");\n\t\tint expirationDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateDay\");\n\t\tint expirationDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateYear\");\n\t\tint expirationDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateHour\");\n\t\tint expirationDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateMinute\");\n\t\tint expirationDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateAmPm\");\n\t\tboolean neverExpire = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"neverExpire\");\n\n\t\tif (expirationDateAmPm == Calendar.PM) {\n\t\t\texpirationDateHour += 12;\n\t\t}\n\n\t\tint reviewDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateMonth\");\n\t\tint reviewDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateDay\");\n\t\tint reviewDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateYear\");\n\t\tint reviewDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateHour\");\n\t\tint reviewDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateMinute\");\n\t\tint reviewDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateAmPm\");\n\t\tboolean neverReview = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"neverReview\");\n\n\t\tif (reviewDateAmPm == Calendar.PM) {\n\t\t\treviewDateHour += 12;\n\t\t}\n\n\t\tboolean indexable = ParamUtil.getBoolean(uploadRequest, \"indexable\");\n\n\t\tboolean smallImage = ParamUtil.getBoolean(uploadRequest, \"smallImage\");\n\t\tString smallImageURL = ParamUtil.getString(\n\t\t\tuploadRequest, \"smallImageURL\");\n\t\tFile smallFile = uploadRequest.getFile(\"smallFile\");\n\n\t\tMap<String, byte[]> images = getImages(uploadRequest);\n\n\t\tString articleURL = ParamUtil.getString(uploadRequest, \"articleURL\");\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tJournalArticle.class.getName(), actionRequest);\n\n\t\tJournalArticle article = null;\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\tStringPool.BLANK, \"static-content\", content,\n\t\t\t\t\tlastLanguageId, defaultLanguageId, true);\n\t\t\t}\n\n\t\t\t// Add article\n\n\t\t\tarticle = JournalArticleServiceUtil.addArticle(\n\t\t\t\tgroupId, articleId, autoArticleId, title, description,\n\t\t\t\tcontent, type, structureId, templateId, displayDateMonth,\n\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\tdisplayDateMinute, expirationDateMonth, expirationDateDay,\n\t\t\t\texpirationDateYear, expirationDateHour, expirationDateMinute,\n\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\tserviceContext);\n\n\t\t\tAssetPublisherUtil.addAndStoreSelection(\n\t\t\t\tactionRequest, JournalArticle.class.getName(),\n\t\t\t\tarticle.getResourcePrimKey(), -1);\n\t\t}\n\t\telse {\n\n\t\t\t// Merge current content with new content\n\n\t\t\tJournalArticle curArticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tif (!curArticle.isTemplateDriven()) {\n\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\tcurArticle.getContent(), \"static-content\", content,\n\t\t\t\t\t\tlastLanguageId, defaultLanguageId, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (curArticle.isTemplateDriven()) {\n\t\t\t\t\tJournalStructure structure =\n\t\t\t\t\t\tJournalStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\tgroupId, structureId);\n\n\t\t\t\t\tcontent = JournalUtil.mergeArticleContent(\n\t\t\t\t\t\tcurArticle.getContent(), content);\n\t\t\t\t\tcontent = JournalUtil.removeOldContent(\n\t\t\t\t\t\tcontent, structure.getMergedXsd());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update article\n\n\t\t\tarticle = JournalArticleServiceUtil.updateArticle(\n\t\t\t\tgroupId, articleId, version, title, description, content, type,\n\t\t\t\tstructureId, templateId, displayDateMonth, displayDateDay,\n\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, neverReview, indexable, smallImage,\n\t\t\t\tsmallImageURL, smallFile, images, articleURL, serviceContext);\n\t\t}\n\n\t\t// Recent articles\n\n\t\tJournalUtil.addRecentArticle(actionRequest, article);\n\n\t\t// Journal content\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tuploadRequest, \"portletResource\");\n\n\t\tif (Validator.isNotNull(portletResource)) {\n\t\t\tPortletPreferences preferences =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\t\tuploadRequest, portletResource);\n\n\t\t\tpreferences.setValue(\n\t\t\t\t\"group-id\", String.valueOf(article.getGroupId()));\n\t\t\tpreferences.setValue(\"article-id\", article.getArticleId());\n\n\t\t\tpreferences.store();\n\n\t\t\tupdateContentSearch(\n\t\t\t\tactionRequest, portletResource, article.getArticleId());\n\t\t}\n\n\t\treturn article;\n\t}","id":94619,"modified_method":"protected JournalArticle updateArticle(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tUploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(\n\t\t\tactionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(uploadRequest, \"groupId\");\n\n\t\tString articleId = ParamUtil.getString(uploadRequest, \"articleId\");\n\t\tboolean autoArticleId = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"autoArticleId\");\n\n\t\tdouble version = ParamUtil.getDouble(uploadRequest, \"version\");\n\n\t\tString title = ParamUtil.getString(uploadRequest, \"title\");\n\t\tString description = ParamUtil.getString(uploadRequest, \"description\");\n\t\tString content = ParamUtil.getString(uploadRequest, \"content\");\n\t\tString type = ParamUtil.getString(uploadRequest, \"type\");\n\t\tString structureId = ParamUtil.getString(uploadRequest, \"structureId\");\n\t\tString templateId = ParamUtil.getString(uploadRequest, \"templateId\");\n\n\t\tString lastLanguageId = ParamUtil.getString(\n\t\t\tuploadRequest, \"lastLanguageId\");\n\t\tString defaultLanguageId = ParamUtil.getString(\n\t\t\tuploadRequest, \"defaultLanguageId\");\n\n\t\tint displayDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateMonth\");\n\t\tint displayDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateDay\");\n\t\tint displayDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateYear\");\n\t\tint displayDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateHour\");\n\t\tint displayDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateMinute\");\n\t\tint displayDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"displayDateAmPm\");\n\n\t\tif (displayDateAmPm == Calendar.PM) {\n\t\t\tdisplayDateHour += 12;\n\t\t}\n\n\t\tint expirationDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateMonth\");\n\t\tint expirationDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateDay\");\n\t\tint expirationDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateYear\");\n\t\tint expirationDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateHour\");\n\t\tint expirationDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateMinute\");\n\t\tint expirationDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"expirationDateAmPm\");\n\t\tboolean neverExpire = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"neverExpire\");\n\n\t\tif (expirationDateAmPm == Calendar.PM) {\n\t\t\texpirationDateHour += 12;\n\t\t}\n\n\t\tint reviewDateMonth = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateMonth\");\n\t\tint reviewDateDay = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateDay\");\n\t\tint reviewDateYear = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateYear\");\n\t\tint reviewDateHour = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateHour\");\n\t\tint reviewDateMinute = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateMinute\");\n\t\tint reviewDateAmPm = ParamUtil.getInteger(\n\t\t\tuploadRequest, \"reviewDateAmPm\");\n\t\tboolean neverReview = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"neverReview\");\n\n\t\tif (reviewDateAmPm == Calendar.PM) {\n\t\t\treviewDateHour += 12;\n\t\t}\n\n\t\tboolean indexable = ParamUtil.getBoolean(uploadRequest, \"indexable\");\n\n\t\tboolean smallImage = ParamUtil.getBoolean(uploadRequest, \"smallImage\");\n\t\tString smallImageURL = ParamUtil.getString(\n\t\t\tuploadRequest, \"smallImageURL\");\n\t\tFile smallFile = uploadRequest.getFile(\"smallFile\");\n\n\t\tMap<String, byte[]> images = getImages(uploadRequest);\n\n\t\tString articleURL = ParamUtil.getString(uploadRequest, \"articleURL\");\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tJournalArticle.class.getName(), actionRequest);\n\n\t\tJournalArticle article = null;\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\tStringPool.BLANK, \"static-content\", content,\n\t\t\t\t\tlastLanguageId, defaultLanguageId, true);\n\t\t\t}\n\n\t\t\t// Add article\n\n\t\t\tarticle = JournalArticleServiceUtil.addArticle(\n\t\t\t\tgroupId, articleId, autoArticleId, title, description,\n\t\t\t\tcontent, type, structureId, templateId, displayDateMonth,\n\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\tdisplayDateMinute, expirationDateMonth, expirationDateDay,\n\t\t\t\texpirationDateYear, expirationDateHour, expirationDateMinute,\n\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay, reviewDateYear,\n\t\t\t\treviewDateHour, reviewDateMinute, neverReview, indexable,\n\t\t\t\tsmallImage, smallImageURL, smallFile, images, articleURL,\n\t\t\t\tserviceContext);\n\n\t\t\tAssetPublisherUtil.addAndStoreSelection(\n\t\t\t\tactionRequest, JournalArticle.class.getName(),\n\t\t\t\tarticle.getResourcePrimKey(), -1);\n\t\t}\n\t\telse {\n\n\t\t\t// Merge current content with new content\n\n\t\t\tJournalArticle curArticle = JournalArticleServiceUtil.getArticle(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (Validator.isNull(structureId)) {\n\t\t\t\tif (!curArticle.isTemplateDriven()) {\n\t\t\t\t\tcontent = LocalizationUtil.updateLocalization(\n\t\t\t\t\t\tcurArticle.getContent(), \"static-content\", content,\n\t\t\t\t\t\tlastLanguageId, defaultLanguageId, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (curArticle.isTemplateDriven()) {\n\t\t\t\t\tJournalStructure structure = null;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstructure =\n\t\t\t\t\t\t\tJournalStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\tgroupId, structureId);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchStructureException nsse) {\n\t\t\t\t\t\tstructure =\n\t\t\t\t\t\t\tJournalStructureLocalServiceUtil.getStructure(\n\t\t\t\t\t\t\t\tthemeDisplay.getCompanyGroupId(), structureId);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = JournalUtil.mergeArticleContent(\n\t\t\t\t\t\tcurArticle.getContent(), content);\n\t\t\t\t\tcontent = JournalUtil.removeOldContent(\n\t\t\t\t\t\tcontent, structure.getMergedXsd());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update article\n\n\t\t\tarticle = JournalArticleServiceUtil.updateArticle(\n\t\t\t\tgroupId, articleId, version, title, description, content, type,\n\t\t\t\tstructureId, templateId, displayDateMonth, displayDateDay,\n\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, neverReview, indexable, smallImage,\n\t\t\t\tsmallImageURL, smallFile, images, articleURL, serviceContext);\n\t\t}\n\n\t\t// Recent articles\n\n\t\tJournalUtil.addRecentArticle(actionRequest, article);\n\n\t\t// Journal content\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tuploadRequest, \"portletResource\");\n\n\t\tif (Validator.isNotNull(portletResource)) {\n\t\t\tPortletPreferences preferences =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\t\tuploadRequest, portletResource);\n\n\t\t\tpreferences.setValue(\n\t\t\t\t\"group-id\", String.valueOf(article.getGroupId()));\n\t\t\tpreferences.setValue(\"article-id\", article.getArticleId());\n\n\t\t\tpreferences.store();\n\n\t\t\tupdateContentSearch(\n\t\t\t\tactionRequest, portletResource, article.getArticleId());\n\t\t}\n\n\t\treturn article;\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validate(\n\t\t\tlong groupId, String title, String content, String type,\n\t\t\tString structureId, String templateId, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, byte[] smallBytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (Validator.isNull(title)) {\n\t\t\tthrow new ArticleTitleException();\n\t\t}\n\t\telse if (Validator.isNull(content)) {\n\t\t\tthrow new ArticleContentException();\n\t\t}\n\t\telse if (Validator.isNull(type)) {\n\t\t\tthrow new ArticleTypeException();\n\t\t}\n\n\t\tif (Validator.isNotNull(structureId)) {\n\t\t\tjournalStructurePersistence.findByG_S(groupId, structureId);\n\n\t\t\tJournalTemplate template = journalTemplatePersistence.findByG_T(\n\t\t\t\tgroupId, templateId);\n\n\t\t\tif (!template.getStructureId().equals(structureId)) {\n\t\t\t\tthrow new NoSuchTemplateException();\n\t\t\t}\n\t\t}\n\n\t\tString[] imageExtensions = PrefsPropsUtil.getStringArray(\n\t\t\tPropsKeys.JOURNAL_IMAGE_EXTENSIONS, StringPool.COMMA);\n\n\t\tif (smallImage && Validator.isNull(smallImageURL) &&\n\t\t\tsmallFile != null && smallBytes != null) {\n\n\t\t\tString smallImageName = smallFile.getName();\n\n\t\t\tif (smallImageName != null) {\n\t\t\t\tboolean validSmallImageExtension = false;\n\n\t\t\t\tfor (String _imageExtension : imageExtensions) {\n\t\t\t\t\tif (StringPool.STAR.equals(_imageExtension) ||\n\t\t\t\t\t\tStringUtil.endsWith(smallImageName, _imageExtension)) {\n\n\t\t\t\t\t\tvalidSmallImageExtension = true;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!validSmallImageExtension) {\n\t\t\t\t\tthrow new ArticleSmallImageNameException(smallImageName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlong smallImageMaxSize = PrefsPropsUtil.getLong(\n\t\t\t\tPropsKeys.JOURNAL_IMAGE_SMALL_MAX_SIZE);\n\n\t\t\tif ((smallImageMaxSize > 0) &&\n\t\t\t\t((smallBytes == null) ||\n\t\t\t\t\t(smallBytes.length > smallImageMaxSize))) {\n\n\t\t\t\tthrow new ArticleSmallImageSizeException();\n\t\t\t}\n\t\t}\n\t}","id":94620,"modified_method":"protected void validate(\n\t\t\tlong companyId, long groupId, String title, String content,\n\t\t\tString type, String structureId, String templateId,\n\t\t\tboolean smallImage, String smallImageURL, File smallFile,\n\t\t\tbyte[] smallBytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (Validator.isNull(title)) {\n\t\t\tthrow new ArticleTitleException();\n\t\t}\n\t\telse if (Validator.isNull(content)) {\n\t\t\tthrow new ArticleContentException();\n\t\t}\n\t\telse if (Validator.isNull(type)) {\n\t\t\tthrow new ArticleTypeException();\n\t\t}\n\n\t\tif (Validator.isNotNull(structureId)) {\n\t\t\tGroup globalGroup = groupLocalService.getCompanyGroup(companyId);\n\n\t\t\ttry {\n\t\t\t\tjournalStructurePersistence.findByG_S(\n\t\t\t\t\tgroupId, structureId);\n\t\t\t}\n\t\t\tcatch (NoSuchStructureException nsse) {\n\t\t\t\tjournalStructurePersistence.findByG_S(\n\t\t\t\t\tglobalGroup.getGroupId(), structureId);\n\t\t\t}\n\n\t\t\tJournalTemplate template = null;\n\n\t\t\ttry {\n\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\tgroupId, templateId);\n\t\t\t}\n\t\t\tcatch (NoSuchTemplateException nste) {\n\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\tglobalGroup.getGroupId(), templateId);\n\t\t\t}\n\n\t\t\tif (!template.getStructureId().equals(structureId)) {\n\t\t\t\tthrow new NoSuchTemplateException();\n\t\t\t}\n\t\t}\n\n\t\tString[] imageExtensions = PrefsPropsUtil.getStringArray(\n\t\t\tPropsKeys.JOURNAL_IMAGE_EXTENSIONS, StringPool.COMMA);\n\n\t\tif (smallImage && Validator.isNull(smallImageURL) &&\n\t\t\tsmallFile != null && smallBytes != null) {\n\n\t\t\tString smallImageName = smallFile.getName();\n\n\t\t\tif (smallImageName != null) {\n\t\t\t\tboolean validSmallImageExtension = false;\n\n\t\t\t\tfor (String _imageExtension : imageExtensions) {\n\t\t\t\t\tif (StringPool.STAR.equals(_imageExtension) ||\n\t\t\t\t\t\tStringUtil.endsWith(smallImageName, _imageExtension)) {\n\n\t\t\t\t\t\tvalidSmallImageExtension = true;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!validSmallImageExtension) {\n\t\t\t\t\tthrow new ArticleSmallImageNameException(smallImageName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlong smallImageMaxSize = PrefsPropsUtil.getLong(\n\t\t\t\tPropsKeys.JOURNAL_IMAGE_SMALL_MAX_SIZE);\n\n\t\t\tif ((smallImageMaxSize > 0) &&\n\t\t\t\t((smallBytes == null) ||\n\t\t\t\t\t(smallBytes.length > smallImageMaxSize))) {\n\n\t\t\t\tthrow new ArticleSmallImageSizeException();\n\t\t\t}\n\t\t}\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalArticle addArticle(\n\t\t\tlong userId, long groupId, String articleId, boolean autoArticleId,\n\t\t\tdouble version, String title, String description, String content,\n\t\t\tString type, String structureId, String templateId,\n\t\t\tint displayDateMonth, int displayDateDay, int displayDateYear,\n\t\t\tint displayDateHour, int displayDateMinute, int expirationDateMonth,\n\t\t\tint expirationDateDay, int expirationDateYear,\n\t\t\tint expirationDateHour, int expirationDateMinute,\n\t\t\tboolean neverExpire, int reviewDateMonth, int reviewDateDay,\n\t\t\tint reviewDateYear, int reviewDateHour, int reviewDateMinute,\n\t\t\tboolean neverReview, boolean indexable, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, Map<String, byte[]> images,\n\t\t\tString articleURL, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Article\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tarticleId = articleId.trim().toUpperCase();\n\n\t\tDate displayDate = PortalUtil.getDate(\n\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\tdisplayDateHour, displayDateMinute, user.getTimeZone(),\n\t\t\tnew ArticleDisplayDateException());\n\n\t\tDate expirationDate = null;\n\n\t\tif (!neverExpire) {\n\t\t\texpirationDate = PortalUtil.getDate(\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleExpirationDateException());\n\t\t}\n\n\t\tDate reviewDate = null;\n\n\t\tif (!neverReview) {\n\t\t\treviewDate = PortalUtil.getDate(\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleReviewDateException());\n\t\t}\n\n\t\tbyte[] smallBytes = null;\n\n\t\ttry {\n\t\t\tsmallBytes = FileUtil.getBytes(smallFile);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tvalidate(\n\t\t\tgroupId, articleId, autoArticleId, version, title, content, type,\n\t\t\tstructureId, templateId, smallImage, smallImageURL, smallFile,\n\t\t\tsmallBytes);\n\n\t\tif (autoArticleId) {\n\t\t\tarticleId = String.valueOf(counterLocalService.increment());\n\t\t}\n\n\t\tlong id = counterLocalService.increment();\n\n\t\tlong resourcePrimKey =\n\t\t\tjournalArticleResourceLocalService.getArticleResourcePrimKey(\n\t\t\t\tgroupId, articleId);\n\n\t\tJournalArticle article = journalArticlePersistence.create(id);\n\n\t\tcontent = format(\n\t\t\tgroupId, articleId, version, false, content, structureId, images);\n\n\t\tarticle.setUuid(serviceContext.getUuid());\n\t\tarticle.setResourcePrimKey(resourcePrimKey);\n\t\tarticle.setGroupId(groupId);\n\t\tarticle.setCompanyId(user.getCompanyId());\n\t\tarticle.setUserId(user.getUserId());\n\t\tarticle.setUserName(user.getFullName());\n\t\tarticle.setCreateDate(serviceContext.getCreateDate(now));\n\t\tarticle.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tarticle.setArticleId(articleId);\n\t\tarticle.setVersion(version);\n\t\tarticle.setTitle(title);\n\t\tarticle.setUrlTitle(getUniqueUrlTitle(id, groupId, articleId, title));\n\t\tarticle.setDescription(description);\n\t\tarticle.setContent(content);\n\t\tarticle.setType(type);\n\t\tarticle.setStructureId(structureId);\n\t\tarticle.setTemplateId(templateId);\n\t\tarticle.setDisplayDate(displayDate);\n\n\t\tif ((expirationDate == null) || expirationDate.after(now)) {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\t\telse {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tarticle.setExpirationDate(expirationDate);\n\t\tarticle.setReviewDate(reviewDate);\n\t\tarticle.setIndexable(indexable);\n\t\tarticle.setSmallImage(smallImage);\n\t\tarticle.setSmallImageId(counterLocalService.increment());\n\t\tarticle.setSmallImageURL(smallImageURL);\n\n\t\tjournalArticlePersistence.update(article, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddArticleResources(\n\t\t\t\tarticle, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddArticleResources(\n\t\t\t\tarticle, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// Expando\n\n\t\tExpandoBridge expandoBridge = article.getExpandoBridge();\n\n\t\texpandoBridge.setAttributes(serviceContext);\n\n\t\t// Small image\n\n\t\tsaveImages(\n\t\t\tsmallImage, article.getSmallImageId(), smallFile, smallBytes);\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, article, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.JOURNAL_ARTICLE_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, article.getUserName(), groupId,\n\t\t\t\tJournalArticle.class.getName(), resourcePrimKey,\n\t\t\t\tWorkflowConstants.ACTION_PUBLISH);\n\t\t}\n\n\t\t// Email\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\ttry {\n\t\t\tsendEmail(article, articleURL, preferences, \"requested\");\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\t// Workflow\n\n\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\tJournalArticle.class.getName(), article.getResourcePrimKey(),\n\t\t\tarticle, serviceContext);\n\n\t\treturn article;\n\t}","id":94621,"modified_method":"public JournalArticle addArticle(\n\t\t\tlong userId, long groupId, String articleId, boolean autoArticleId,\n\t\t\tdouble version, String title, String description, String content,\n\t\t\tString type, String structureId, String templateId,\n\t\t\tint displayDateMonth, int displayDateDay, int displayDateYear,\n\t\t\tint displayDateHour, int displayDateMinute, int expirationDateMonth,\n\t\t\tint expirationDateDay, int expirationDateYear,\n\t\t\tint expirationDateHour, int expirationDateMinute,\n\t\t\tboolean neverExpire, int reviewDateMonth, int reviewDateDay,\n\t\t\tint reviewDateYear, int reviewDateHour, int reviewDateMinute,\n\t\t\tboolean neverReview, boolean indexable, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, Map<String, byte[]> images,\n\t\t\tString articleURL, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Article\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tarticleId = articleId.trim().toUpperCase();\n\n\t\tDate displayDate = PortalUtil.getDate(\n\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\tdisplayDateHour, displayDateMinute, user.getTimeZone(),\n\t\t\tnew ArticleDisplayDateException());\n\n\t\tDate expirationDate = null;\n\n\t\tif (!neverExpire) {\n\t\t\texpirationDate = PortalUtil.getDate(\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleExpirationDateException());\n\t\t}\n\n\t\tDate reviewDate = null;\n\n\t\tif (!neverReview) {\n\t\t\treviewDate = PortalUtil.getDate(\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleReviewDateException());\n\t\t}\n\n\t\tbyte[] smallBytes = null;\n\n\t\ttry {\n\t\t\tsmallBytes = FileUtil.getBytes(smallFile);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tvalidate(\n\t\t\tuser.getCompanyId(), groupId, articleId, autoArticleId, version,\n\t\t\ttitle, content, type, structureId, templateId, smallImage,\n\t\t\tsmallImageURL, smallFile, smallBytes);\n\n\t\tif (autoArticleId) {\n\t\t\tarticleId = String.valueOf(counterLocalService.increment());\n\t\t}\n\n\t\tlong id = counterLocalService.increment();\n\n\t\tlong resourcePrimKey =\n\t\t\tjournalArticleResourceLocalService.getArticleResourcePrimKey(\n\t\t\t\tgroupId, articleId);\n\n\t\tJournalArticle article = journalArticlePersistence.create(id);\n\n\t\tcontent = format(\n\t\t\tgroupId, articleId, version, false, content, structureId, images);\n\n\t\tarticle.setUuid(serviceContext.getUuid());\n\t\tarticle.setResourcePrimKey(resourcePrimKey);\n\t\tarticle.setGroupId(groupId);\n\t\tarticle.setCompanyId(user.getCompanyId());\n\t\tarticle.setUserId(user.getUserId());\n\t\tarticle.setUserName(user.getFullName());\n\t\tarticle.setCreateDate(serviceContext.getCreateDate(now));\n\t\tarticle.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tarticle.setArticleId(articleId);\n\t\tarticle.setVersion(version);\n\t\tarticle.setTitle(title);\n\t\tarticle.setUrlTitle(getUniqueUrlTitle(id, groupId, articleId, title));\n\t\tarticle.setDescription(description);\n\t\tarticle.setContent(content);\n\t\tarticle.setType(type);\n\t\tarticle.setStructureId(structureId);\n\t\tarticle.setTemplateId(templateId);\n\t\tarticle.setDisplayDate(displayDate);\n\n\t\tif ((expirationDate == null) || expirationDate.after(now)) {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\t\telse {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tarticle.setExpirationDate(expirationDate);\n\t\tarticle.setReviewDate(reviewDate);\n\t\tarticle.setIndexable(indexable);\n\t\tarticle.setSmallImage(smallImage);\n\t\tarticle.setSmallImageId(counterLocalService.increment());\n\t\tarticle.setSmallImageURL(smallImageURL);\n\n\t\tjournalArticlePersistence.update(article, false);\n\n\t\t// Resources\n\n\t\tif (serviceContext.getAddCommunityPermissions() ||\n\t\t\tserviceContext.getAddGuestPermissions()) {\n\n\t\t\taddArticleResources(\n\t\t\t\tarticle, serviceContext.getAddCommunityPermissions(),\n\t\t\t\tserviceContext.getAddGuestPermissions());\n\t\t}\n\t\telse {\n\t\t\taddArticleResources(\n\t\t\t\tarticle, serviceContext.getCommunityPermissions(),\n\t\t\t\tserviceContext.getGuestPermissions());\n\t\t}\n\n\t\t// Expando\n\n\t\tExpandoBridge expandoBridge = article.getExpandoBridge();\n\n\t\texpandoBridge.setAttributes(serviceContext);\n\n\t\t// Small image\n\n\t\tsaveImages(\n\t\t\tsmallImage, article.getSmallImageId(), smallFile, smallBytes);\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, article, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames());\n\n\t\t// Message boards\n\n\t\tif (PropsValues.JOURNAL_ARTICLE_COMMENTS_ENABLED) {\n\t\t\tmbMessageLocalService.addDiscussionMessage(\n\t\t\t\tuserId, article.getUserName(), groupId,\n\t\t\t\tJournalArticle.class.getName(), resourcePrimKey,\n\t\t\t\tWorkflowConstants.ACTION_PUBLISH);\n\t\t}\n\n\t\t// Email\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\ttry {\n\t\t\tsendEmail(article, articleURL, preferences, \"requested\");\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\t// Workflow\n\n\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\tJournalArticle.class.getName(), article.getResourcePrimKey(),\n\t\t\tarticle, serviceContext);\n\n\t\treturn article;\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void validate(\n\t\t\tlong groupId, String articleId, boolean autoArticleId,\n\t\t\tdouble version, String title, String content, String type,\n\t\t\tString structureId, String templateId, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, byte[] smallBytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!autoArticleId) {\n\t\t\tvalidate(articleId);\n\n\t\t\tJournalArticle article = journalArticlePersistence.fetchByG_A_V(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (article != null) {\n\t\t\t\tthrow new DuplicateArticleIdException();\n\t\t\t}\n\t\t}\n\n\t\tvalidate(\n\t\t\tgroupId, title, content, type, structureId, templateId,\n\t\t\tsmallImage, smallImageURL, smallFile, smallBytes);\n\t}","id":94622,"modified_method":"protected void validate(\n\t\t\tlong companyId, long groupId, String articleId,\n\t\t\tboolean autoArticleId, double version, String title, String content,\n\t\t\tString type, String structureId, String templateId,\n\t\t\tboolean smallImage, String smallImageURL, File smallFile,\n\t\t\tbyte[] smallBytes)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!autoArticleId) {\n\t\t\tvalidate(articleId);\n\n\t\t\tJournalArticle article = journalArticlePersistence.fetchByG_A_V(\n\t\t\t\tgroupId, articleId, version);\n\n\t\t\tif (article != null) {\n\t\t\t\tthrow new DuplicateArticleIdException();\n\t\t\t}\n\t\t}\n\n\t\tvalidate(\n\t\t\tcompanyId, groupId, title, content, type, structureId, templateId,\n\t\t\tsmallImage, smallImageURL, smallFile, smallBytes);\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalArticleDisplay getArticleDisplay(\n\t\t\tJournalArticle article, String templateId, String viewMode,\n\t\t\tString languageId, int page, String xmlRequest,\n\t\t\tThemeDisplay themeDisplay)\n\t\tthrows PortalException, SystemException {\n\n\t\tString content = null;\n\n\t\tif (page < 1) {\n\t\t\tpage = 1;\n\t\t}\n\n\t\tint numberOfPages = 1;\n\t\tboolean paginate = false;\n\t\tboolean pageFlow = false;\n\n\t\tboolean cacheable = true;\n\n\t\tif (Validator.isNull(xmlRequest)) {\n\t\t\txmlRequest = \"<request />\";\n\t\t}\n\n\t\tMap<String, String> tokens = JournalUtil.getTokens(\n\t\t\tarticle.getGroupId(), themeDisplay, xmlRequest);\n\n\t\ttokens.put(\n\t\t\t\"article_resource_pk\",\n\t\t\tString.valueOf(article.getResourcePrimKey()));\n\n\t\tString defaultTemplateId = article.getTemplateId();\n\n\t\tif (article.isTemplateDriven()) {\n\t\t\tif (Validator.isNull(templateId)) {\n\t\t\t\ttemplateId = defaultTemplateId;\n\t\t\t}\n\n\t\t\ttokens.put(\"structure_id\", article.getStructureId());\n\t\t\ttokens.put(\"template_id\", templateId);\n\t\t}\n\n\t\tString xml = article.getContent();\n\n\t\ttry {\n\t\t\tDocument doc = null;\n\n\t\t\tElement root = null;\n\n\t\t\tif (article.isTemplateDriven()) {\n\t\t\t\tdoc = SAXReaderUtil.read(xml);\n\n\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\tDocument request = SAXReaderUtil.read(xmlRequest);\n\n\t\t\t\tList<Element> pages = root.elements(\"page\");\n\n\t\t\t\tif (pages.size() > 0) {\n\t\t\t\t\tpageFlow = true;\n\n\t\t\t\t\tString targetPage = request.valueOf(\n\t\t\t\t\t\t\"/request/parameters/parameter[name='targetPage']/\" +\n\t\t\t\t\t\t\t\"value\");\n\n\t\t\t\t\tElement pageEl = null;\n\n\t\t\t\t\tif (Validator.isNotNull(targetPage)) {\n\t\t\t\t\t\tXPath xpathSelector = SAXReaderUtil.createXPath(\n\t\t\t\t\t\t\t\"/root/page[@id = '\" + targetPage + \"']\");\n\n\t\t\t\t\t\tpageEl = (Element)xpathSelector.selectSingleNode(doc);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pageEl != null) {\n\t\t\t\t\t\tdoc = SAXReaderUtil.createDocument(pageEl);\n\n\t\t\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\t\t\tnumberOfPages = pages.size();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (page > pages.size()) {\n\t\t\t\t\t\t\tpage = 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpageEl = pages.get(page - 1);\n\n\t\t\t\t\t\tdoc = SAXReaderUtil.createDocument(pageEl);\n\n\t\t\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\t\t\tnumberOfPages = pages.size();\n\t\t\t\t\t\tpaginate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\troot.add(request.getRootElement().createCopy());\n\n\t\t\t\tJournalUtil.addAllReservedEls(root, tokens, article);\n\n\t\t\t\txml = JournalUtil.formatXML(doc);\n\t\t\t}\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new SystemException(de);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\ttry {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Transforming \" + article.getArticleId() + \" \" +\n\t\t\t\t\t\tarticle.getVersion() + \" \" + languageId);\n\t\t\t}\n\n\t\t\tString script = null;\n\t\t\tString langType = null;\n\n\t\t\tif (article.isTemplateDriven()) {\n\n\t\t\t\t// Try with specified template first. If a template is not\n\t\t\t\t// specified, use the default one. If the specified template\n\t\t\t\t// does not exit, use the default one. If the default one does\n\t\t\t\t// not exist, throw an exception.\n\n\t\t\t\tJournalTemplate template = null;\n\n\t\t\t\ttry {\n\t\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\t\tarticle.getGroupId(), templateId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchTemplateException nste) {\n\t\t\t\t\tif (!defaultTemplateId.equals(templateId)) {\n\t\t\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\t\t\tarticle.getGroupId(), defaultTemplateId);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow nste;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tscript = template.getXsl();\n\t\t\t\tlangType = template.getLangType();\n\t\t\t\tcacheable = template.isCacheable();\n\t\t\t}\n\n\t\t\tcontent = JournalUtil.transform(\n\t\t\t\tthemeDisplay, tokens, viewMode, languageId, xml, script,\n\t\t\t\tlangType);\n\n\t\t\tif (!pageFlow) {\n\t\t\t\tString[] pieces = StringUtil.split(content, _TOKEN_PAGE_BREAK);\n\n\t\t\t\tif (pieces.length > 1) {\n\t\t\t\t\tif (page > pieces.length) {\n\t\t\t\t\t\tpage = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = pieces[page - 1];\n\t\t\t\t\tnumberOfPages = pieces.length;\n\t\t\t\t\tpaginate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\n\t\treturn new JournalArticleDisplayImpl(\n\t\t\tarticle.getCompanyId(), article.getId(),\n\t\t\tarticle.getResourcePrimKey(), article.getGroupId(),\n\t\t\tarticle.getUserId(), article.getArticleId(), article.getVersion(),\n\t\t\tarticle.getTitle(), article.getUrlTitle(), article.getDescription(),\n\t\t\tarticle.getAvailableLocales(), content, article.getType(),\n\t\t\tarticle.getStructureId(), templateId, article.isSmallImage(),\n\t\t\tarticle.getSmallImageId(), article.getSmallImageURL(),\n\t\t\tnumberOfPages, page, paginate, cacheable);\n\t}","id":94623,"modified_method":"public JournalArticleDisplay getArticleDisplay(\n\t\t\tJournalArticle article, String templateId, String viewMode,\n\t\t\tString languageId, int page, String xmlRequest,\n\t\t\tThemeDisplay themeDisplay)\n\t\tthrows PortalException, SystemException {\n\n\t\tString content = null;\n\n\t\tif (page < 1) {\n\t\t\tpage = 1;\n\t\t}\n\n\t\tint numberOfPages = 1;\n\t\tboolean paginate = false;\n\t\tboolean pageFlow = false;\n\n\t\tboolean cacheable = true;\n\n\t\tif (Validator.isNull(xmlRequest)) {\n\t\t\txmlRequest = \"<request />\";\n\t\t}\n\n\t\tMap<String, String> tokens = JournalUtil.getTokens(\n\t\t\tarticle.getGroupId(), themeDisplay, xmlRequest);\n\n\t\ttokens.put(\n\t\t\t\"article_resource_pk\",\n\t\t\tString.valueOf(article.getResourcePrimKey()));\n\n\t\tString defaultTemplateId = article.getTemplateId();\n\n\t\tif (article.isTemplateDriven()) {\n\t\t\tif (Validator.isNull(templateId)) {\n\t\t\t\ttemplateId = defaultTemplateId;\n\t\t\t}\n\n\t\t\ttokens.put(\"structure_id\", article.getStructureId());\n\t\t\ttokens.put(\"template_id\", templateId);\n\t\t}\n\n\t\tString xml = article.getContent();\n\n\t\ttry {\n\t\t\tDocument doc = null;\n\n\t\t\tElement root = null;\n\n\t\t\tif (article.isTemplateDriven()) {\n\t\t\t\tdoc = SAXReaderUtil.read(xml);\n\n\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\tDocument request = SAXReaderUtil.read(xmlRequest);\n\n\t\t\t\tList<Element> pages = root.elements(\"page\");\n\n\t\t\t\tif (pages.size() > 0) {\n\t\t\t\t\tpageFlow = true;\n\n\t\t\t\t\tString targetPage = request.valueOf(\n\t\t\t\t\t\t\"/request/parameters/parameter[name='targetPage']/\" +\n\t\t\t\t\t\t\t\"value\");\n\n\t\t\t\t\tElement pageEl = null;\n\n\t\t\t\t\tif (Validator.isNotNull(targetPage)) {\n\t\t\t\t\t\tXPath xpathSelector = SAXReaderUtil.createXPath(\n\t\t\t\t\t\t\t\"/root/page[@id = '\" + targetPage + \"']\");\n\n\t\t\t\t\t\tpageEl = (Element)xpathSelector.selectSingleNode(doc);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pageEl != null) {\n\t\t\t\t\t\tdoc = SAXReaderUtil.createDocument(pageEl);\n\n\t\t\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\t\t\tnumberOfPages = pages.size();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (page > pages.size()) {\n\t\t\t\t\t\t\tpage = 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpageEl = pages.get(page - 1);\n\n\t\t\t\t\t\tdoc = SAXReaderUtil.createDocument(pageEl);\n\n\t\t\t\t\t\troot = doc.getRootElement();\n\n\t\t\t\t\t\tnumberOfPages = pages.size();\n\t\t\t\t\t\tpaginate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\troot.add(request.getRootElement().createCopy());\n\n\t\t\t\tJournalUtil.addAllReservedEls(root, tokens, article);\n\n\t\t\t\txml = JournalUtil.formatXML(doc);\n\t\t\t}\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new SystemException(de);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\n\t\ttry {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\t\"Transforming \" + article.getArticleId() + \" \" +\n\t\t\t\t\t\tarticle.getVersion() + \" \" + languageId);\n\t\t\t}\n\n\t\t\tString script = null;\n\t\t\tString langType = null;\n\n\t\t\tif (article.isTemplateDriven()) {\n\n\t\t\t\t// Try with specified template first (in the current group and\n\t\t\t\t// the global group). If a template is not specified, use the \n\t\t\t\t// default one. If the specified template does not exit, use the\n\t\t\t\t// default one. If the default one does not exist, throw an\n\t\t\t\t// exception.\n\n\t\t\t\tJournalTemplate template = null;\n\n\t\t\t\ttry {\n\t\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\t\tarticle.getGroupId(), templateId);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchTemplateException nste1) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tGroup globalGroup = groupLocalService.getCompanyGroup(\n\t\t\t\t\t\t\tarticle.getCompanyId());\n\n\t\t\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\t\t\tglobalGroup.getGroupId(), templateId);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchTemplateException nste2) {\n\t\t\t\t\t\tif (!defaultTemplateId.equals(templateId)) {\n\t\t\t\t\t\t\ttemplate = journalTemplatePersistence.findByG_T(\n\t\t\t\t\t\t\t\tarticle.getGroupId(), defaultTemplateId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow nste1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tscript = template.getXsl();\n\t\t\t\tlangType = template.getLangType();\n\t\t\t\tcacheable = template.isCacheable();\n\t\t\t}\n\n\t\t\tcontent = JournalUtil.transform(\n\t\t\t\tthemeDisplay, tokens, viewMode, languageId, xml, script,\n\t\t\t\tlangType);\n\n\t\t\tif (!pageFlow) {\n\t\t\t\tString[] pieces = StringUtil.split(content, _TOKEN_PAGE_BREAK);\n\n\t\t\t\tif (pieces.length > 1) {\n\t\t\t\t\tif (page > pieces.length) {\n\t\t\t\t\t\tpage = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = pieces[page - 1];\n\t\t\t\t\tnumberOfPages = pieces.length;\n\t\t\t\t\tpaginate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(e);\n\t\t}\n\n\t\treturn new JournalArticleDisplayImpl(\n\t\t\tarticle.getCompanyId(), article.getId(),\n\t\t\tarticle.getResourcePrimKey(), article.getGroupId(),\n\t\t\tarticle.getUserId(), article.getArticleId(), article.getVersion(),\n\t\t\tarticle.getTitle(), article.getUrlTitle(), article.getDescription(),\n\t\t\tarticle.getAvailableLocales(), content, article.getType(),\n\t\t\tarticle.getStructureId(), templateId, article.isSmallImage(),\n\t\t\tarticle.getSmallImageId(), article.getSmallImageURL(),\n\t\t\tnumberOfPages, page, paginate, cacheable);\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public JournalArticle updateArticle(\n\t\t\tlong userId, long groupId, String articleId, double version,\n\t\t\tString title, String description, String content, String type,\n\t\t\tString structureId, String templateId, int displayDateMonth,\n\t\t\tint displayDateDay, int displayDateYear, int displayDateHour,\n\t\t\tint displayDateMinute, int expirationDateMonth,\n\t\t\tint expirationDateDay, int expirationDateYear,\n\t\t\tint expirationDateHour, int expirationDateMinute,\n\t\t\tboolean neverExpire, int reviewDateMonth, int reviewDateDay,\n\t\t\tint reviewDateYear, int reviewDateHour, int reviewDateMinute,\n\t\t\tboolean neverReview, boolean indexable, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, Map<String, byte[]> images,\n\t\t\tString articleURL, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Article\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tarticleId = articleId.trim().toUpperCase();\n\n\t\tDate displayDate = PortalUtil.getDate(\n\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\tdisplayDateHour, displayDateMinute, user.getTimeZone(),\n\t\t\tnew ArticleDisplayDateException());\n\n\t\tDate expirationDate = null;\n\n\t\tif (!neverExpire) {\n\t\t\texpirationDate = PortalUtil.getDate(\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleExpirationDateException());\n\t\t}\n\n\t\tDate reviewDate = null;\n\n\t\tif (!neverReview) {\n\t\t\treviewDate = PortalUtil.getDate(\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleReviewDateException());\n\t\t}\n\n\t\tbyte[] smallBytes = null;\n\n\t\ttry {\n\t\t\tsmallBytes = FileUtil.getBytes(smallFile);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tvalidate(\n\t\t\tgroupId, title, content, type, structureId, templateId, smallImage,\n\t\t\tsmallImageURL, smallFile, smallBytes);\n\n\t\tJournalArticle oldArticle = null;\n\t\tdouble oldVersion = 0;\n\n\t\tboolean incrementVersion = false;\n\n\t\tboolean imported = GetterUtil.getBoolean(\n\t\t\tserviceContext.getAttribute(\"imported\"));\n\n\t\tif (imported) {\n\t\t\toldArticle = getArticle(groupId, articleId, version);\n\t\t\toldVersion = version;\n\t\t}\n\t\telse {\n\t\t\toldArticle = getLatestArticle(\n\t\t\t\tgroupId, articleId, WorkflowConstants.STATUS_ANY);\n\n\t\t\toldVersion = oldArticle.getVersion();\n\n\t\t\tif ((version > 0) && (version != oldVersion)) {\n\t\t\t\tthrow new ArticleVersionException();\n\t\t\t}\n\n\t\t\tif (oldArticle.isApproved() || oldArticle.isExpired()) {\n\t\t\t\tincrementVersion = true;\n\t\t\t}\n\t\t}\n\n\t\tJournalArticle article = null;\n\n\t\tif (incrementVersion) {\n\t\t\tdouble newVersion = MathUtil.format(oldVersion + 0.1, 1, 1);\n\n\t\t\tlong id = counterLocalService.increment();\n\n\t\t\tarticle = journalArticlePersistence.create(id);\n\n\t\t\tarticle.setResourcePrimKey(oldArticle.getResourcePrimKey());\n\t\t\tarticle.setGroupId(oldArticle.getGroupId());\n\t\t\tarticle.setCompanyId(user.getCompanyId());\n\t\t\tarticle.setUserId(user.getUserId());\n\t\t\tarticle.setUserName(user.getFullName());\n\t\t\tarticle.setCreateDate(serviceContext.getModifiedDate(now));\n\t\t\tarticle.setArticleId(articleId);\n\t\t\tarticle.setVersion(newVersion);\n\t\t\tarticle.setSmallImageId(oldArticle.getSmallImageId());\n\t\t}\n\t\telse {\n\t\t\tarticle = oldArticle;\n\t\t}\n\n\t\tcontent = format(\n\t\t\tgroupId, articleId, article.getVersion(), incrementVersion,\n\t\t\tcontent, structureId, images);\n\n\t\tarticle.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tarticle.setTitle(title);\n\t\tarticle.setUrlTitle(\n\t\t\tgetUniqueUrlTitle(article.getId(), groupId, articleId, title));\n\t\tarticle.setDescription(description);\n\t\tarticle.setContent(content);\n\t\tarticle.setType(type);\n\t\tarticle.setStructureId(structureId);\n\t\tarticle.setTemplateId(templateId);\n\t\tarticle.setDisplayDate(displayDate);\n\n\t\tif (oldArticle.isPending()) {\n\t\t\tarticle.setStatus(oldArticle.getStatus());\n\t\t}\n\t\telse if ((expirationDate == null) || expirationDate.after(now)) {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\t\telse {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tarticle.setExpirationDate(expirationDate);\n\t\tarticle.setReviewDate(reviewDate);\n\t\tarticle.setIndexable(indexable);\n\t\tarticle.setSmallImage(smallImage);\n\n\t\tif (article.getSmallImageId() == 0) {\n\t\t\tarticle.setSmallImageId(counterLocalService.increment());\n\t\t}\n\n\t\tarticle.setSmallImageURL(smallImageURL);\n\n\t\tjournalArticlePersistence.update(article, false);\n\n\t\t// Asset\n\n\t\tlong[] assetCategoryIds = serviceContext.getAssetCategoryIds();\n\t\tString[] assetTagNames = serviceContext.getAssetTagNames();\n\n\t\tupdateAsset(userId, article, assetCategoryIds, assetTagNames);\n\n\t\t// Expando\n\n\t\tExpandoBridge expandoBridge = article.getExpandoBridge();\n\n\t\texpandoBridge.setAttributes(serviceContext);\n\n\t\t// Small image\n\n\t\tsaveImages(\n\t\t\tsmallImage, article.getSmallImageId(), smallFile, smallBytes);\n\n\t\t// Email\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.getWorkflowAction() ==\n\t\t\t\tWorkflowConstants.ACTION_PUBLISH) {\n\n\t\t\ttry {\n\t\t\t\tsendEmail(article, articleURL, preferences, \"requested\");\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\tthrow new SystemException(ioe);\n\t\t\t}\n\n\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\tJournalArticle.class.getName(), article.getResourcePrimKey(),\n\t\t\t\tarticle, serviceContext);\n\t\t}\n\n\t\treturn article;\n\t}","id":94624,"modified_method":"public JournalArticle updateArticle(\n\t\t\tlong userId, long groupId, String articleId, double version,\n\t\t\tString title, String description, String content, String type,\n\t\t\tString structureId, String templateId, int displayDateMonth,\n\t\t\tint displayDateDay, int displayDateYear, int displayDateHour,\n\t\t\tint displayDateMinute, int expirationDateMonth,\n\t\t\tint expirationDateDay, int expirationDateYear,\n\t\t\tint expirationDateHour, int expirationDateMinute,\n\t\t\tboolean neverExpire, int reviewDateMonth, int reviewDateDay,\n\t\t\tint reviewDateYear, int reviewDateHour, int reviewDateMinute,\n\t\t\tboolean neverReview, boolean indexable, boolean smallImage,\n\t\t\tString smallImageURL, File smallFile, Map<String, byte[]> images,\n\t\t\tString articleURL, ServiceContext serviceContext)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Article\n\n\t\tUser user = userPersistence.findByPrimaryKey(userId);\n\t\tarticleId = articleId.trim().toUpperCase();\n\n\t\tDate displayDate = PortalUtil.getDate(\n\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\tdisplayDateHour, displayDateMinute, user.getTimeZone(),\n\t\t\tnew ArticleDisplayDateException());\n\n\t\tDate expirationDate = null;\n\n\t\tif (!neverExpire) {\n\t\t\texpirationDate = PortalUtil.getDate(\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleExpirationDateException());\n\t\t}\n\n\t\tDate reviewDate = null;\n\n\t\tif (!neverReview) {\n\t\t\treviewDate = PortalUtil.getDate(\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, user.getTimeZone(),\n\t\t\t\tnew ArticleReviewDateException());\n\t\t}\n\n\t\tbyte[] smallBytes = null;\n\n\t\ttry {\n\t\t\tsmallBytes = FileUtil.getBytes(smallFile);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t}\n\n\t\tDate now = new Date();\n\n\t\tvalidate(\n\t\t\tuser.getCompanyId(), groupId, title, content, type, structureId,\n\t\t\ttemplateId, smallImage, smallImageURL, smallFile, smallBytes);\n\n\t\tJournalArticle oldArticle = null;\n\t\tdouble oldVersion = 0;\n\n\t\tboolean incrementVersion = false;\n\n\t\tboolean imported = GetterUtil.getBoolean(\n\t\t\tserviceContext.getAttribute(\"imported\"));\n\n\t\tif (imported) {\n\t\t\toldArticle = getArticle(groupId, articleId, version);\n\t\t\toldVersion = version;\n\t\t}\n\t\telse {\n\t\t\toldArticle = getLatestArticle(\n\t\t\t\tgroupId, articleId, WorkflowConstants.STATUS_ANY);\n\n\t\t\toldVersion = oldArticle.getVersion();\n\n\t\t\tif ((version > 0) && (version != oldVersion)) {\n\t\t\t\tthrow new ArticleVersionException();\n\t\t\t}\n\n\t\t\tif (oldArticle.isApproved() || oldArticle.isExpired()) {\n\t\t\t\tincrementVersion = true;\n\t\t\t}\n\t\t}\n\n\t\tJournalArticle article = null;\n\n\t\tif (incrementVersion) {\n\t\t\tdouble newVersion = MathUtil.format(oldVersion + 0.1, 1, 1);\n\n\t\t\tlong id = counterLocalService.increment();\n\n\t\t\tarticle = journalArticlePersistence.create(id);\n\n\t\t\tarticle.setResourcePrimKey(oldArticle.getResourcePrimKey());\n\t\t\tarticle.setGroupId(oldArticle.getGroupId());\n\t\t\tarticle.setCompanyId(user.getCompanyId());\n\t\t\tarticle.setUserId(user.getUserId());\n\t\t\tarticle.setUserName(user.getFullName());\n\t\t\tarticle.setCreateDate(serviceContext.getModifiedDate(now));\n\t\t\tarticle.setArticleId(articleId);\n\t\t\tarticle.setVersion(newVersion);\n\t\t\tarticle.setSmallImageId(oldArticle.getSmallImageId());\n\t\t}\n\t\telse {\n\t\t\tarticle = oldArticle;\n\t\t}\n\n\t\tcontent = format(\n\t\t\tgroupId, articleId, article.getVersion(), incrementVersion,\n\t\t\tcontent, structureId, images);\n\n\t\tarticle.setModifiedDate(serviceContext.getModifiedDate(now));\n\t\tarticle.setTitle(title);\n\t\tarticle.setUrlTitle(\n\t\t\tgetUniqueUrlTitle(article.getId(), groupId, articleId, title));\n\t\tarticle.setDescription(description);\n\t\tarticle.setContent(content);\n\t\tarticle.setType(type);\n\t\tarticle.setStructureId(structureId);\n\t\tarticle.setTemplateId(templateId);\n\t\tarticle.setDisplayDate(displayDate);\n\n\t\tif (oldArticle.isPending()) {\n\t\t\tarticle.setStatus(oldArticle.getStatus());\n\t\t}\n\t\telse if ((expirationDate == null) || expirationDate.after(now)) {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\t\telse {\n\t\t\tarticle.setStatus(WorkflowConstants.STATUS_EXPIRED);\n\t\t}\n\n\t\tarticle.setExpirationDate(expirationDate);\n\t\tarticle.setReviewDate(reviewDate);\n\t\tarticle.setIndexable(indexable);\n\t\tarticle.setSmallImage(smallImage);\n\n\t\tif (article.getSmallImageId() == 0) {\n\t\t\tarticle.setSmallImageId(counterLocalService.increment());\n\t\t}\n\n\t\tarticle.setSmallImageURL(smallImageURL);\n\n\t\tjournalArticlePersistence.update(article, false);\n\n\t\t// Asset\n\n\t\tlong[] assetCategoryIds = serviceContext.getAssetCategoryIds();\n\t\tString[] assetTagNames = serviceContext.getAssetTagNames();\n\n\t\tupdateAsset(userId, article, assetCategoryIds, assetTagNames);\n\n\t\t// Expando\n\n\t\tExpandoBridge expandoBridge = article.getExpandoBridge();\n\n\t\texpandoBridge.setAttributes(serviceContext);\n\n\t\t// Small image\n\n\t\tsaveImages(\n\t\t\tsmallImage, article.getSmallImageId(), smallFile, smallBytes);\n\n\t\t// Email\n\n\t\tPortletPreferences preferences =\n\t\t\tServiceContextUtil.getPortletPreferences(serviceContext);\n\n\t\t// Workflow\n\n\t\tif (serviceContext.getWorkflowAction() ==\n\t\t\t\tWorkflowConstants.ACTION_PUBLISH) {\n\n\t\t\ttry {\n\t\t\t\tsendEmail(article, articleURL, preferences, \"requested\");\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\tthrow new SystemException(ioe);\n\t\t\t}\n\n\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\tuser.getCompanyId(), groupId, userId,\n\t\t\t\tJournalArticle.class.getName(), article.getResourcePrimKey(),\n\t\t\t\tarticle, serviceContext);\n\t\t}\n\n\t\treturn article;\n\t}","commit_id":"291e088685e89078f98419b2ef736aff8b33b440","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void build(View view) {\n\n\t\tMapPoiTypes poiTypes = app.getPoiTypes();\n\t\tfor(Map.Entry<String, String> e : amenity.getAdditionalInfo().entrySet()) {\n\t\t\tint iconId;\n\t\t\tString key = e.getKey();\n\t\t\tString vl = e.getValue();\n\t\t\tif(key.startsWith(\"name:\")) {\n\t\t\t\tcontinue;\n\t\t\t} else if(Amenity.OPENING_HOURS.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_action_time;\n\t\t\t} else if(Amenity.PHONE.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_action_call_dark;\n\t\t\t} else if(Amenity.WEBSITE.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_world_globe_dark;\n\t\t\t} else {\n\t\t\t\tif (Amenity.DESCRIPTION.equals(key)) {\n\t\t\t\t\ticonId = R.drawable.ic_action_note_dark;\n\t\t\t\t} else {\n\t\t\t\t\ticonId = R.drawable.ic_action_info_dark;\n\t\t\t\t}\n\t\t\t\tAbstractPoiType pt = poiTypes.getAnyPoiAdditionalTypeByKey(e.getKey());\n\t\t\t\tif (pt != null) {\n\t\t\t\t\tif(pt instanceof PoiType && !((PoiType) pt).isText()) {\n\t\t\t\t\t\tvl = pt.getTranslation();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvl = pt.getTranslation() + \": \" + amenity.unzipContent(e.getValue());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvl = Algorithms.capitalizeFirstLetterAndLowercase(e.getKey()) +\n\t\t\t\t\t\t\t\": \" + amenity.unzipContent(e.getValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuildRow(view, iconId, vl);\n\t\t}\n\t}","id":94625,"modified_method":"@Override\n\tpublic void build(View view) {\n\n\t\tboolean firstRow = true;\n\n\t\tMapPoiTypes poiTypes = app.getPoiTypes();\n\t\tfor(Map.Entry<String, String> e : amenity.getAdditionalInfo().entrySet()) {\n\t\t\tint iconId;\n\t\t\tString key = e.getKey();\n\t\t\tString vl = e.getValue();\n\t\t\tif(key.startsWith(\"name:\")) {\n\t\t\t\tcontinue;\n\t\t\t} else if(Amenity.OPENING_HOURS.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_action_time;\n\t\t\t} else if(Amenity.PHONE.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_action_call_dark;\n\t\t\t} else if(Amenity.WEBSITE.equals(key)) {\n\t\t\t\ticonId = R.drawable.ic_world_globe_dark;\n\t\t\t} else {\n\t\t\t\tif (Amenity.DESCRIPTION.equals(key)) {\n\t\t\t\t\ticonId = R.drawable.ic_action_note_dark;\n\t\t\t\t} else {\n\t\t\t\t\ticonId = R.drawable.ic_action_info_dark;\n\t\t\t\t}\n\t\t\t\tAbstractPoiType pt = poiTypes.getAnyPoiAdditionalTypeByKey(e.getKey());\n\t\t\t\tif (pt != null) {\n\t\t\t\t\tif(pt instanceof PoiType && !((PoiType) pt).isText()) {\n\t\t\t\t\t\tvl = pt.getTranslation();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvl = pt.getTranslation() + \": \" + amenity.unzipContent(e.getValue());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvl = Algorithms.capitalizeFirstLetterAndLowercase(e.getKey()) +\n\t\t\t\t\t\t\t\": \" + amenity.unzipContent(e.getValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuildRow(view, iconId, vl, firstRow);\n\t\t\tfirstRow = false;\n\t\t}\n\t}","commit_id":"89186bd2b32b72e9e3409e03a916871ac98b2efe","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void buildRow(View view, int iconId, String text) {\n\t\tboolean light = app.getSettings().isLightContent();\n\n\t\tLinearLayout ll = new LinearLayout(view.getContext());\n\t\tll.setOrientation(LinearLayout.HORIZONTAL);\n\t\tLinearLayout.LayoutParams llParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT) ;\n\t\t//llParams.setMargins(0, dpToPx(14f), 0, dpToPx(14f));\n\t\tll.setLayoutParams(llParams);\n\n\t\t// Icon\n\t\tLinearLayout llIcon = new LinearLayout(view.getContext());\n\t\tllIcon.setOrientation(LinearLayout.HORIZONTAL);\n\t\tllIcon.setLayoutParams(new LinearLayout.LayoutParams(dpToPx(72f), dpToPx(48f)));\n\t\tllIcon.setGravity(Gravity.CENTER_VERTICAL);\n\t\tll.addView(llIcon);\n\n\t\tImageView icon = new ImageView(view.getContext());\n\t\tLinearLayout.LayoutParams llIconParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT) ;\n\t\tllIconParams.setMargins(dpToPx(16f), dpToPx(12f), dpToPx(32f), dpToPx(12f));\n\t\tllIconParams.gravity = Gravity.CENTER_VERTICAL;\n\t\ticon.setLayoutParams(llIconParams);\n\t\ticon.setScaleType(ImageView.ScaleType.CENTER);\n\t\ticon.setImageDrawable(getRowIcon(iconId));\n\t\tllIcon.addView(icon);\n\n\t\t// Text\n\t\tLinearLayout llText = new LinearLayout(view.getContext());\n\t\tllText.setOrientation(LinearLayout.VERTICAL);\n\t\tll.addView(llText);\n\n\t\tTextView textView  = new TextView(view.getContext());\n\t\tLinearLayout.LayoutParams llTextParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tllTextParams.setMargins(0, dpToPx(8f), 0, dpToPx(8f));\n\t\ttextView.setLayoutParams(llTextParams);\n\t\ttextView.setTextSize(18); // todo: create constant\n\t\ttextView.setTextColor(app.getResources().getColor(light ? R.color.ctx_menu_info_text_light : R.color.ctx_menu_info_text_dark));\n\n\t\tSpannableString spannable = new SpannableString(text);\n\t\tLinkify.addLinks(spannable, Linkify.ALL);\n\t\ttextView.setClickable(true);\n\t\ttextView.setMovementMethod(LinkMovementMethod.getInstance());\n\t\ttextView.setLinksClickable(true);\n\n\t\ttextView.setText(spannable);\n\t\t//textView.setText(\"sdf dsaf fsdasdfg adsf asdsfd asdf sdf adsfg asdf sdfa sdf dsf agsfdgd fgsfd sdf asdf adg adf sdf asdf dfgdfsg sdfg adsf asdf asdf sdf SDF ASDF ADSF ASDF ASDF DAF SDAF dfg dsfg dfg sdfg rg rth sfghs dfgs dfgsdfg adfg dfg sdfg dfs \");\n\n\t\tLinearLayout.LayoutParams llTextViewParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tllTextViewParams.setMargins(0, 0, dpToPx(10f), 0);\n\t\tllTextViewParams.gravity = Gravity.CENTER_VERTICAL;\n\t\tllText.setLayoutParams(llTextViewParams);\n\t\tllText.addView(textView);\n\n\t\t((LinearLayout)view).addView(ll);\n\n\t\tView horizontalLine = new View(view.getContext());\n\t\tLinearLayout.LayoutParams llHorLineParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, dpToPx(1f));\n\t\tllHorLineParams.gravity = Gravity.BOTTOM;\n\t\thorizontalLine.setLayoutParams(llHorLineParams);\n\n\t\thorizontalLine.setBackgroundColor(app.getResources().getColor(light ? R.color.ctx_menu_info_divider_light : R.color.ctx_menu_info_divider_dark));\n\n\t\t((LinearLayout)view).addView(horizontalLine);\n\t}","id":94626,"modified_method":"private void buildRow(View view, int iconId, String text, boolean firstRow) {\n\t\tboolean light = app.getSettings().isLightContent();\n\n\t\tLinearLayout ll = new LinearLayout(view.getContext());\n\t\tll.setOrientation(LinearLayout.HORIZONTAL);\n\t\tLinearLayout.LayoutParams llParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT) ;\n\t\t//llParams.setMargins(0, dpToPx(14f), 0, dpToPx(14f));\n\t\tll.setLayoutParams(llParams);\n\n\t\t// Icon\n\t\tLinearLayout llIcon = new LinearLayout(view.getContext());\n\t\tllIcon.setOrientation(LinearLayout.HORIZONTAL);\n\t\tllIcon.setLayoutParams(new LinearLayout.LayoutParams(dpToPx(72f), firstRow ? dpToPx(48f) - dpToPx(SHADOW_HEIGHT) : dpToPx(48f)));\n\t\tllIcon.setGravity(Gravity.CENTER_VERTICAL);\n\t\tll.addView(llIcon);\n\n\t\tImageView icon = new ImageView(view.getContext());\n\t\tLinearLayout.LayoutParams llIconParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT) ;\n\t\tllIconParams.setMargins(dpToPx(16f), firstRow ? dpToPx(12f) - dpToPx(SHADOW_HEIGHT) : dpToPx(12f), dpToPx(32f), dpToPx(12f));\n\t\tllIconParams.gravity = Gravity.CENTER_VERTICAL;\n\t\ticon.setLayoutParams(llIconParams);\n\t\ticon.setScaleType(ImageView.ScaleType.CENTER);\n\t\ticon.setImageDrawable(getRowIcon(iconId));\n\t\tllIcon.addView(icon);\n\n\t\t// Text\n\t\tLinearLayout llText = new LinearLayout(view.getContext());\n\t\tllText.setOrientation(LinearLayout.VERTICAL);\n\t\tll.addView(llText);\n\n\t\tTextView textView  = new TextView(view.getContext());\n\t\tLinearLayout.LayoutParams llTextParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tllTextParams.setMargins(0, firstRow ? dpToPx(8f) - dpToPx(SHADOW_HEIGHT) : dpToPx(8f), 0, dpToPx(8f));\n\t\ttextView.setLayoutParams(llTextParams);\n\t\ttextView.setTextSize(16); // todo: create constant\n\t\ttextView.setTextColor(app.getResources().getColor(light ? R.color.ctx_menu_info_text_light : R.color.ctx_menu_info_text_dark));\n\n\t\t//text = \"http://ru.wikipedia.org/wiki/Храм Святого Розария (Владимир)\";\n\n\t\t//SpannableString spannable = new SpannableString(text);\n\t\t//Linkify.addLinks(spannable, Linkify.ALL);\n\t\t//textView.setClickable(true);\n\t\t//textView.setMovementMethod(LinkMovementMethod.getInstance());\n\t\ttextView.setAutoLinkMask(Linkify.ALL);\n\t\t//textView.setSingleLine();\n\t\ttextView.setLinksClickable(true);\n\n\t\ttextView.setText(text);\n\t\t//textView.setText(\"sdf dsaf fsdasdfg adsf asdsfd asdf sdf adsfg asdf sdfa sdf dsf agsfdgd fgsfd sdf asdf adg adf sdf asdf dfgdfsg sdfg adsf asdf asdf sdf SDF ASDF ADSF ASDF ASDF DAF SDAF dfg dsfg dfg sdfg rg rth sfghs dfgs dfgsdfg adfg dfg sdfg dfs \");\n\n\t\tLinearLayout.LayoutParams llTextViewParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tllTextViewParams.setMargins(0, 0, dpToPx(10f), 0);\n\t\tllTextViewParams.gravity = Gravity.CENTER_VERTICAL;\n\t\tllText.setLayoutParams(llTextViewParams);\n\t\tllText.addView(textView);\n\n\t\t((LinearLayout)view).addView(ll);\n\n\t\tView horizontalLine = new View(view.getContext());\n\t\tLinearLayout.LayoutParams llHorLineParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, dpToPx(1f));\n\t\tllHorLineParams.gravity = Gravity.BOTTOM;\n\t\thorizontalLine.setLayoutParams(llHorLineParams);\n\n\t\thorizontalLine.setBackgroundColor(app.getResources().getColor(light ? R.color.ctx_menu_info_divider_light : R.color.ctx_menu_info_divider_dark));\n\n\t\t((LinearLayout)view).addView(horizontalLine);\n\t}","commit_id":"89186bd2b32b72e9e3409e03a916871ac98b2efe","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void doLayoutMenu() {\n\t\tint shadowViewHeight = 0;\n\t\tint bottomBorderHeight = 0;\n\n\t\tint menuState;\n\t\tif (menuController != null)\n\t\t\tmenuState = menuController.getCurrentMenuState();\n\t\telse\n\t\t\tmenuState = MenuController.MenuState.HEADER_ONLY;\n\n\t\tswitch (menuState) {\n\t\t\tcase MenuController.MenuState.HEADER_ONLY:\n\t\t\t\tshadowViewHeight = view.getHeight() - (menuFullHeight - menuBottomViewHeight);\n\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\tbreak;\n\t\t\tcase MenuController.MenuState.HALF_SCREEN:\n\t\t\t\tint maxHeight = (int)(menuController.getHalfScreenMaxHeightKoef() * view.getHeight());\n\t\t\t\tif (maxHeight > menuFullHeight) {\n\t\t\t\t\tshadowViewHeight = view.getHeight() - menuFullHeight;\n\t\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\t} else {\n\t\t\t\t\tshadowViewHeight = view.getHeight() - maxHeight;\n\t\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\t\tmainView.setY(shadowViewHeight);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MenuController.MenuState.FULL_SCREEN:\n\t\t\t\tshadowViewHeight = 0;\n\t\t\t\tbottomBorderHeight = view.getHeight() - menuFullHeight;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tViewGroup.LayoutParams lp = bottomBorder.getLayoutParams();\n\t\tlp.height = bottomBorderHeight + 10;\n\t\tbottomBorder.setLayoutParams(lp);\n\t\tbottomBorder.setY(view.getHeight() - bottomBorderHeight);\n\n\t\tlp = shadowView.getLayoutParams();\n\t\tlp.height = shadowViewHeight;\n\t\tshadowView.setLayoutParams(lp);\n\n\t\tlp = mainView.getLayoutParams();\n\t\tlp.height = menuFullHeight;\n\t\tmainView.setLayoutParams(lp);\n\n\t}","id":94627,"modified_method":"private void doLayoutMenu() {\n\t\tint shadowViewHeight = 0;\n\t\tint bottomBorderHeight = 0;\n\n\t\tint menuState;\n\t\tif (menuController != null)\n\t\t\tmenuState = menuController.getCurrentMenuState();\n\t\telse\n\t\t\tmenuState = MenuController.MenuState.HEADER_ONLY;\n\n\t\tswitch (menuState) {\n\t\t\tcase MenuController.MenuState.HEADER_ONLY:\n\t\t\t\tshadowViewHeight = view.getHeight() - (menuFullHeight - menuBottomViewHeight);\n\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\tbreak;\n\t\t\tcase MenuController.MenuState.HALF_SCREEN:\n\t\t\t\tint maxHeight = (int)(menuController.getHalfScreenMaxHeightKoef() * view.getHeight());\n\t\t\t\tif (maxHeight > menuFullHeight) {\n\t\t\t\t\tshadowViewHeight = view.getHeight() - menuFullHeight;\n\t\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\t} else {\n\t\t\t\t\tshadowViewHeight = view.getHeight() - maxHeight;\n\t\t\t\t\tbottomBorderHeight = 0;\n\t\t\t\t\tmainView.setY(shadowViewHeight);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MenuController.MenuState.FULL_SCREEN:\n\t\t\t\tshadowViewHeight = 0;\n\t\t\t\tbottomBorderHeight = view.getHeight() - menuFullHeight + menuTopShadowHeight;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tViewGroup.LayoutParams lp = bottomBorder.getLayoutParams();\n\t\tlp.height = bottomBorderHeight + 10;\n\t\tbottomBorder.setLayoutParams(lp);\n\t\tbottomBorder.setY(view.getHeight() - bottomBorderHeight);\n\n\t\tlp = shadowView.getLayoutParams();\n\t\tlp.height = shadowViewHeight;\n\t\tshadowView.setLayoutParams(lp);\n\n\t\tlp = mainView.getLayoutParams();\n\t\tlp.height = menuFullHeight;\n\t\tmainView.setLayoutParams(lp);\n\n\t\tmainView.bringToFront();\n\n\t}","commit_id":"89186bd2b32b72e9e3409e03a916871ac98b2efe","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\n\t\tViewTreeObserver vto = view.getViewTreeObserver();\n\t\tvto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onGlobalLayout() {\n\n\t\t\t\tmenuTopHeight = view.findViewById(R.id.context_menu_top_view).getHeight();\n\t\t\t\tmenuButtonsHeight = view.findViewById(R.id.context_menu_buttons).getHeight();\n\t\t\t\tmenuBottomViewHeight = view.findViewById(R.id.context_menu_bottom_view).getHeight();\n\t\t\t\tmenuFullHeight = view.findViewById(R.id.context_menu_main).getHeight();\n\n\t\t\t\tViewTreeObserver obs = view.getViewTreeObserver();\n\n\t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\t\t\t\tobs.removeOnGlobalLayoutListener(this);\n\t\t\t\t} else {\n\t\t\t\t\tobs.removeGlobalOnLayoutListener(this);\n\t\t\t\t}\n\n\t\t\t\tdoLayoutMenu();\n\t\t\t}\n\n\t\t});\n\n\t\tbottomBorder = view.findViewById(R.id.context_menu_bottom_border);\n\t\tbottomBorder.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tshadowView = view.findViewById(R.id.context_menu_shadow_view);\n\t\tshadowView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\tpublic boolean onTouch(View view, MotionEvent event) {\n\t\t\t\tdismissMenu();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\ttopView.setOnTouchListener(new View.OnTouchListener() {\n\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate int destinationState;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = mainView.getY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = mainView.getY() + (y - dy);\n\t\t\t\t\t\tmainView.setY(newY);\n\n\t\t\t\t\t\tViewGroup.LayoutParams lp = bottomBorder.getLayoutParams();\n\t\t\t\t\t\tlp.height = (int)(view.getHeight() - newY - menuFullHeight) + 10;\n\t\t\t\t\t\tbottomBorder.setLayoutParams(lp);\n\t\t\t\t\t\tbottomBorder.setY(newY + menuFullHeight);\n\t\t\t\t\t\tbottomBorder.requestLayout();\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tfloat vel = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (vel > velocityY)\n\t\t\t\t\t\t\tvelocityY = vel;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\n\t\t\t\t\t\tslidingUp = Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tif (menuController != null) {\n\t\t\t\t\t\t\tif (slidingUp) {\n\t\t\t\t\t\t\t\tmenuController.slideUp();\n\t\t\t\t\t\t\t} else if (slidingDown) {\n\t\t\t\t\t\t\t\tmenuController.slideDown();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdestinationState = menuController.getCurrentMenuState();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdestinationState = MenuController.MenuState.HEADER_ONLY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfloat posY = 0;\n\t\t\t\t\t\tswitch (destinationState) {\n\t\t\t\t\t\t\tcase MenuController.MenuState.HEADER_ONLY:\n\t\t\t\t\t\t\t\tposY = view.getHeight() - (menuFullHeight - menuBottomViewHeight);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MenuController.MenuState.HALF_SCREEN:\n\t\t\t\t\t\t\t\tposY = view.getHeight() - menuFullHeight;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MenuController.MenuState.FULL_SCREEN:\n\t\t\t\t\t\t\t\tposY = 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfloat minY = Math.min(posY, mainView.getY());\n\t\t\t\t\t\tlp = bottomBorder.getLayoutParams();\n\t\t\t\t\t\tlp.height = (int)(view.getHeight() - minY - menuFullHeight) + 10;\n\t\t\t\t\t\tif (lp.height < 0)\n\t\t\t\t\t\t\tlp.height = 0;\n\t\t\t\t\t\tbottomBorder.setLayoutParams(lp);\n\t\t\t\t\t\tbottomBorder.requestLayout();\n\n\t\t\t\t\t\tif (mainView.getY() != posY) {\n\t\t\t\t\t\t\tmainView.animate().y(posY).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();\n\t\t\t\t\t\t\tbottomBorder.animate().y(posY + menuFullHeight).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tlp = shadowView.getLayoutParams();\n\t\t\t\t\t\tlp.height = view.getHeight() - (int)posY;\n\t\t\t\t\t\tshadowView.setLayoutParams(lp);\n\t\t\t\t\t\tshadowView.requestLayout();\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\t// Left icon\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tint iconId = getCtxMenu().getLeftIconId();\n\n\t\tfinal View iconLayout = view.findViewById(R.id.context_menu_icon_layout);\n\t\tfinal ImageView iconView = (ImageView)view.findViewById(R.id.context_menu_icon_view);\n\t\tif (iconId == 0) {\n\t\t\ticonLayout.setVisibility(View.GONE);\n\t\t} else {\n\t\t\ticonView.setImageDrawable(iconsCache.getIcon(iconId,\n\t\t\t\t\tlight ? R.color.osmand_orange : R.color.osmand_orange_dark));\n\t\t}\n\n\t\t// Text line 1\n\t\tTextView line1 = (TextView) view.findViewById(R.id.context_menu_line1);\n\t\tline1.setText(getCtxMenu().getAddressStr());\n\n\t\t// Text line 2\n\t\tTextView line2 = (TextView) view.findViewById(R.id.context_menu_line2);\n\t\tline2.setText(getCtxMenu().getLocationStr(getMapActivity()));\n\n\t\t// Close button\n\t\tfinal ImageView closeButtonView = (ImageView)view.findViewById(R.id.context_menu_close_btn_view);\n\t\tcloseButtonView.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\tlight ? R.color.icon_color_light : R.color.dash_search_icon_dark));\n\t\tcloseButtonView.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\t((MapActivity) getActivity()).getMapLayers().getContextMenuLayer().hideMapContextMenuMarker();\n\t\t\t\tdismissMenu();\n\t\t\t}\n\t\t});\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonNavigate = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\tbuttonNavigate.setImageDrawable(iconsCache.getIcon(R.drawable.map_directions,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonNavigate.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonNavigatePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_fav_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonFavoritePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonSharePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonMorePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\t// Menu controller\n\t\tmenuController = getCtxMenu().getMenuController();\n\t\tbottomView = view.findViewById(R.id.context_menu_bottom_view);\n\t\tif (menuController != null) {\n\t\t\tbottomView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tmenuController.build(bottomView);\n\t\t}\n\n\t\treturn view;\n\t}","id":94628,"modified_method":"@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\n\t\tview = inflater.inflate(R.layout.map_context_menu_fragment, container, false);\n\n\t\tViewTreeObserver vto = view.getViewTreeObserver();\n\t\tvto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onGlobalLayout() {\n\n\t\t\t\tmenuTopHeight = view.findViewById(R.id.context_menu_top_view).getHeight();\n\t\t\t\tmenuTopShadowHeight = view.findViewById(R.id.context_menu_top_shadow).getHeight();\n\t\t\t\tmenuButtonsHeight = view.findViewById(R.id.context_menu_buttons).getHeight();\n\t\t\t\tmenuBottomViewHeight = view.findViewById(R.id.context_menu_bottom_view).getHeight();\n\t\t\t\tmenuFullHeight = view.findViewById(R.id.context_menu_main).getHeight();\n\n\t\t\t\tViewTreeObserver obs = view.getViewTreeObserver();\n\n\t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\t\t\t\tobs.removeOnGlobalLayoutListener(this);\n\t\t\t\t} else {\n\t\t\t\t\tobs.removeGlobalOnLayoutListener(this);\n\t\t\t\t}\n\n\t\t\t\tdoLayoutMenu();\n\t\t\t}\n\n\t\t});\n\n\t\tbottomBorder = view.findViewById(R.id.context_menu_bottom_border);\n\t\tbottomBorder.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tshadowView = view.findViewById(R.id.context_menu_shadow_view);\n\t\tshadowView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\tpublic boolean onTouch(View view, MotionEvent event) {\n\t\t\t\tdismissMenu();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tmainView = view.findViewById(R.id.context_menu_main);\n\n\t\tView.OnTouchListener slideTouchListener = new View.OnTouchListener() {\n\t\t\tprivate float dy;\n\t\t\tprivate float dyMain;\n\t\t\tprivate int destinationState;\n\t\t\tprivate VelocityTracker velocity;\n\t\t\tprivate boolean slidingUp;\n\t\t\tprivate boolean slidingDown;\n\n\t\t\tprivate float velocityY;\n\n\t\t\tprivate float startX;\n\t\t\tprivate float startY;\n\t\t\tprivate long lastTouchDown;\n\t\t\tprivate final int CLICK_ACTION_THRESHHOLD = 200;\n\n\t\t\tprivate boolean isClick(float endX, float endY) {\n\t\t\t\tfloat differenceX = Math.abs(startX - endX);\n\t\t\t\tfloat differenceY = Math.abs(startY - endY);\n\t\t\t\tif (differenceX > 3 || differenceY > 3 || System.currentTimeMillis() - lastTouchDown > CLICK_ACTION_THRESHHOLD) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\tstartX = event.getX();\n\t\t\t\t\t\tstartY = event.getY();\n\t\t\t\t\t\tlastTouchDown = System.currentTimeMillis();\n\n\t\t\t\t\t\tdy = event.getY();\n\t\t\t\t\t\tdyMain = mainView.getY();\n\t\t\t\t\t\tvelocity = VelocityTracker.obtain();\n\t\t\t\t\t\tvelocityY = 0;\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\tfloat y = event.getY();\n\t\t\t\t\t\tfloat newY = mainView.getY() + (y - dy);\n\t\t\t\t\t\tmainView.setY(newY);\n\n\t\t\t\t\t\tViewGroup.LayoutParams lp = bottomBorder.getLayoutParams();\n\t\t\t\t\t\tlp.height = (int)(view.getHeight() - newY - menuFullHeight) + 10;\n\t\t\t\t\t\tbottomBorder.setLayoutParams(lp);\n\t\t\t\t\t\tbottomBorder.setY(newY + menuFullHeight);\n\t\t\t\t\t\tbottomBorder.requestLayout();\n\n\t\t\t\t\t\tvelocity.addMovement(event);\n\t\t\t\t\t\tvelocity.computeCurrentVelocity(1000);\n\t\t\t\t\t\tfloat vel = Math.abs(velocity.getYVelocity());\n\t\t\t\t\t\tif (vel > velocityY)\n\t\t\t\t\t\t\tvelocityY = vel;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\t\tfloat endX = event.getX();\n\t\t\t\t\t\tfloat endY = event.getY();\n\n\t\t\t\t\t\tslidingUp = Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) < -50;\n\t\t\t\t\t\tslidingDown = Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) > 50;\n\n\t\t\t\t\t\tvelocity.recycle();\n\n\t\t\t\t\t\tif (menuController != null) {\n\t\t\t\t\t\t\tif (slidingUp) {\n\t\t\t\t\t\t\t\tmenuController.slideUp();\n\t\t\t\t\t\t\t} else if (slidingDown) {\n\t\t\t\t\t\t\t\tmenuController.slideDown();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdestinationState = menuController.getCurrentMenuState();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdestinationState = MenuController.MenuState.HEADER_ONLY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfloat posY = 0;\n\t\t\t\t\t\tswitch (destinationState) {\n\t\t\t\t\t\t\tcase MenuController.MenuState.HEADER_ONLY:\n\t\t\t\t\t\t\t\tposY = view.getHeight() - (menuFullHeight - menuBottomViewHeight);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MenuController.MenuState.HALF_SCREEN:\n\t\t\t\t\t\t\t\tposY = view.getHeight() - menuFullHeight;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase MenuController.MenuState.FULL_SCREEN:\n\t\t\t\t\t\t\t\tposY = -menuTopShadowHeight;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfloat minY = Math.min(posY, mainView.getY());\n\t\t\t\t\t\tlp = bottomBorder.getLayoutParams();\n\t\t\t\t\t\tlp.height = (int)(view.getHeight() - minY - menuFullHeight) + 10;\n\t\t\t\t\t\tif (lp.height < 0)\n\t\t\t\t\t\t\tlp.height = 0;\n\t\t\t\t\t\tbottomBorder.setLayoutParams(lp);\n\t\t\t\t\t\tbottomBorder.requestLayout();\n\n\t\t\t\t\t\tif (mainView.getY() != posY) {\n\t\t\t\t\t\t\tmainView.animate().y(posY).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();\n\t\t\t\t\t\t\tbottomBorder.animate().y(posY + menuFullHeight).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// OnClick event\n\t\t\t\t\t\tif (isClick(endX, endY)) {\n\t\t\t\t\t\t\tOsmandMapTileView mapView = getMapActivity().getMapView();\n\t\t\t\t\t\t\tmapView.getAnimatedDraggingThread().startMoving(getCtxMenu().getPointDescription().getLat(), getCtxMenu().getPointDescription().getLon(),\n\t\t\t\t\t\t\t\t\tmapView.getZoom(), true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tView topView = view.findViewById(R.id.context_menu_top_view);\n\t\ttopView.setOnTouchListener(slideTouchListener);\n\t\tView topShadowView = view.findViewById(R.id.context_menu_top_shadow);\n\t\ttopShadowView.setOnTouchListener(slideTouchListener);\n\n\t\t// Left icon\n\t\tIconsCache iconsCache = getMyApplication().getIconsCache();\n\t\tboolean light = getMyApplication().getSettings().isLightContent();\n\n\t\tint iconId = getCtxMenu().getLeftIconId();\n\n\t\tfinal View iconLayout = view.findViewById(R.id.context_menu_icon_layout);\n\t\tfinal ImageView iconView = (ImageView)view.findViewById(R.id.context_menu_icon_view);\n\t\tif (iconId == 0) {\n\t\t\ticonLayout.setVisibility(View.GONE);\n\t\t} else {\n\t\t\ticonView.setImageDrawable(iconsCache.getIcon(iconId,\n\t\t\t\t\tlight ? R.color.osmand_orange : R.color.osmand_orange_dark));\n\t\t}\n\n\t\t// Text line 1\n\t\tTextView line1 = (TextView) view.findViewById(R.id.context_menu_line1);\n\t\tline1.setText(getCtxMenu().getAddressStr());\n\n\t\t// Text line 2\n\t\tTextView line2 = (TextView) view.findViewById(R.id.context_menu_line2);\n\t\tline2.setText(getCtxMenu().getLocationStr(getMapActivity()));\n\n\t\t// Close button\n\t\tfinal ImageView closeButtonView = (ImageView)view.findViewById(R.id.context_menu_close_btn_view);\n\t\tcloseButtonView.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,\n\t\t\t\tlight ? R.color.icon_color_light : R.color.dash_search_icon_dark));\n\t\tcloseButtonView.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\t((MapActivity) getActivity()).getMapLayers().getContextMenuLayer().hideMapContextMenuMarker();\n\t\t\t\tdismissMenu();\n\t\t\t}\n\t\t});\n\n\t\t// Action buttons\n\t\tfinal ImageButton buttonNavigate = (ImageButton) view.findViewById(R.id.context_menu_route_button);\n\t\tbuttonNavigate.setImageDrawable(iconsCache.getIcon(R.drawable.map_directions,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonNavigate.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonNavigatePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonFavorite = (ImageButton) view.findViewById(R.id.context_menu_fav_button);\n\t\tbuttonFavorite.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_fav_dark,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonFavorite.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonFavoritePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonShare = (ImageButton) view.findViewById(R.id.context_menu_share_button);\n\t\tbuttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonShare.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonSharePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\tfinal ImageButton buttonMore = (ImageButton) view.findViewById(R.id.context_menu_more_button);\n\t\tbuttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,\n\t\t\t\tlight ? R.color.icon_color : R.color.dash_search_icon_dark));\n\t\tbuttonMore.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tgetCtxMenu().buttonMorePressed(getMapActivity());\n\t\t\t}\n\t\t});\n\n\t\t// Menu controller\n\t\tmenuController = getCtxMenu().getMenuController();\n\t\tbottomView = view.findViewById(R.id.context_menu_bottom_view);\n\t\tif (menuController != null) {\n\t\t\tbottomView.setOnTouchListener(new View.OnTouchListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tmenuController.build(bottomView);\n\t\t}\n\n\t\treturn view;\n\t}","commit_id":"89186bd2b32b72e9e3409e03a916871ac98b2efe","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n     * Starts a controller with the given subsystem xml and then checks that a second controller\n     * started with the operations from its describe action results in the same model\n     */\n    @Test\n    public void testDescribeHandler() throws Exception {\n       // Parse the subsystem xml and install into the first controller\n       KernelServices servicesA = super.installInController(getSubsystemXml());\n       // Get the model and the describe operations from the first controller\n       ModelNode modelA = servicesA.readWholeModel();\n       ModelNode describeOp = new ModelNode();\n       describeOp.get(OP).set(DESCRIBE);\n       describeOp.get(OP_ADDR).set(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, getMainSubsystemName())).toModelNode());\n       List<ModelNode> operations = super.checkResultAndGetContents(servicesA.executeOperation(describeOp)).asList();\n\n       // Install the describe options from the first controller into a second controller\n       KernelServices servicesB = super.installInController(operations);\n       ModelNode modelB = servicesB.readWholeModel();\n\n       // Make sure the models from the two controllers are identical\n       super.compare(modelA, modelB);\n\n    }","id":94629,"modified_method":"/**\n     * Starts a controller with the given subsystem xml and then checks that a second controller\n     * started with the operations from its describe action results in the same model\n     */\n    @Test\n    public void testDescribeHandler() throws Exception {\n       // Parse the subsystem xml and install into the first controller\n       KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(getSubsystemXml()).build();\n       // Get the model and the describe operations from the first controller\n       ModelNode modelA = servicesA.readWholeModel();\n       ModelNode describeOp = new ModelNode();\n       describeOp.get(OP).set(DESCRIBE);\n       describeOp.get(OP_ADDR).set(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, getMainSubsystemName())).toModelNode());\n       List<ModelNode> operations = super.checkResultAndGetContents(servicesA.executeOperation(describeOp)).asList();\n\n       // Install the describe options from the first controller into a second controller\n       KernelServices servicesB = super.installInController(operations);\n       ModelNode modelB = servicesB.readWholeModel();\n\n       // Make sure the models from the two controllers are identical\n       super.compare(modelA, modelB);\n\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Starts a controller with a given subsystem xml and then checks that a second controller\n     * started with the xml marshalled from the first one results in the same model\n     */\n    @Test\n    public void testParseAndMarshalModel() throws Exception {\n       // Parse the subsystem xml and install into the first controller\n\n       KernelServices servicesA = super.installInController(getSubsystemXml());\n\n       // Get the model and the persisted xml from the first controller\n       ModelNode modelA = servicesA.readWholeModel();\n       String marshalled = servicesA.getPersistedSubsystemXml();\n\n       // Install the persisted xml from the first controller into a second controller\n       KernelServices servicesB = super.installInController(marshalled);\n       ModelNode modelB = servicesB.readWholeModel();\n\n       // Make sure the models from the two controllers are identical\n       super.compare(modelA, modelB);\n    }","id":94630,"modified_method":"/**\n     * Starts a controller with a given subsystem xml and then checks that a second controller\n     * started with the xml marshalled from the first one results in the same model\n     */\n    @Test\n    public void testParseAndMarshalModel() throws Exception {\n       // Parse the subsystem xml and install into the first controller\n\n       KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(getSubsystemXml()).build();\n\n       // Get the model and the persisted xml from the first controller\n       ModelNode modelA = servicesA.readWholeModel();\n       String marshalled = servicesA.getPersistedSubsystemXml();\n\n       // Install the persisted xml from the first controller into a second controller\n       KernelServices servicesB = createKernelServicesBuilder(null).setSubsystemXml(marshalled).build();\n       ModelNode modelB = servicesB.readWholeModel();\n\n       // Make sure the models from the two controllers are identical\n       super.compare(modelA, modelB);\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Test that the model created from the xml looks as expected\n     */\n    @Test\n    public void testInstallIntoController() throws Exception {\n       // Parse the subsystem xml and install into the controller\n       KernelServices services = super.installInController(getSubsystemXml());\n\n       // Read the whole model and make sure it looks as expected\n       ModelNode model = services.readWholeModel();\n\n       // System.out.println(\"model = \" + model.asString());\n\n       Assert.assertTrue(model.get(SUBSYSTEM).hasDefined(getMainSubsystemName()));\n    }","id":94631,"modified_method":"/**\n     * Test that the model created from the xml looks as expected\n     */\n    @Test\n    public void testInstallIntoController() throws Exception {\n       // Parse the subsystem xml and install into the controller\n       KernelServices services = createKernelServicesBuilder(null).setSubsystemXml(getSubsystemXml()).build();\n\n       // Read the whole model and make sure it looks as expected\n       ModelNode model = services.readWholeModel();\n\n       // System.out.println(\"model = \" + model.asString());\n\n       Assert.assertTrue(model.get(SUBSYSTEM).hasDefined(getMainSubsystemName()));\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testLocalCacheAddRemoveAddSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        ModelNode addOp = getCacheAddOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeOp = getCacheRemoveOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a local cache\n        ModelNode result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same local cache\n        result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n    }","id":94632,"modified_method":"@Test\n    public void testLocalCacheAddRemoveAddSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        ModelNode addOp = getCacheAddOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeOp = getCacheRemoveOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a local cache\n        ModelNode result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same local cache\n        result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testCacheContainerRemoveRemoveSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeCacheOp = getCacheRemoveOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container again\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n    }","id":94633,"modified_method":"@Test\n    public void testCacheContainerRemoveRemoveSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeCacheOp = getCacheRemoveOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container again\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    @BMRule(name=\"Test remove rollback operation\",\n            targetClass=\"org.jboss.as.clustering.infinispan.subsystem.CacheContainerRemove\",\n            targetMethod=\"removeExistingCacheServices\",\n            targetLocation=\"AT ENTRY\",\n            action=\"$1.setRollbackOnly()\")\n    public void testCacheContainerRemoveRollback() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        // the remove has OperationContext.setRollbackOnly() injected\n        // and so is expected to fail\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n\n        // need to check that all services are correctly re-installed\n        ServiceName containerServiceName = EmbeddedCacheManagerService.getServiceName(\"maximal2\");\n\n        ServiceName cacheConfigurationServiceName = CacheConfigurationService.getServiceName(\"maximal2\", \"fred\");\n        ServiceName cacheServiceName = CacheService.getServiceName(\"maximal2\", \"fred\");\n\n        Assert.assertNotNull(\"cache container service not installed\", servicesA.getContainer().getService(containerServiceName));\n        Assert.assertNotNull(\"cache configuration service not installed\", servicesA.getContainer().getService(cacheConfigurationServiceName));\n        Assert.assertNotNull(\"cache service not installed\", servicesA.getContainer().getService(cacheServiceName));\n    }","id":94634,"modified_method":"@Test\n    @BMRule(name=\"Test remove rollback operation\",\n            targetClass=\"org.jboss.as.clustering.infinispan.subsystem.CacheContainerRemove\",\n            targetMethod=\"removeExistingCacheServices\",\n            targetLocation=\"AT ENTRY\",\n            action=\"$1.setRollbackOnly()\")\n    public void testCacheContainerRemoveRollback() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        // the remove has OperationContext.setRollbackOnly() injected\n        // and so is expected to fail\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n\n        // need to check that all services are correctly re-installed\n        ServiceName containerServiceName = EmbeddedCacheManagerService.getServiceName(\"maximal2\");\n\n        ServiceName cacheConfigurationServiceName = CacheConfigurationService.getServiceName(\"maximal2\", \"fred\");\n        ServiceName cacheServiceName = CacheService.getServiceName(\"maximal2\", \"fred\");\n\n        Assert.assertNotNull(\"cache container service not installed\", servicesA.getContainer().getService(containerServiceName));\n        Assert.assertNotNull(\"cache configuration service not installed\", servicesA.getContainer().getService(cacheConfigurationServiceName));\n        Assert.assertNotNull(\"cache service not installed\", servicesA.getContainer().getService(cacheServiceName));\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testLocalCacheRemoveRemoveSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        ModelNode addOp = getCacheAddOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeOp = getCacheRemoveOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a local cache\n        ModelNode result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the same local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n    }","id":94635,"modified_method":"@Test\n    public void testLocalCacheRemoveRemoveSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        ModelNode addOp = getCacheAddOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeOp = getCacheRemoveOperation(\"maximal\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a local cache\n        ModelNode result = servicesA.executeOperation(addOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the same local cache\n        result = servicesA.executeOperation(removeOp);\n        Assert.assertEquals(FAILED, result.get(OUTCOME).asString());\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testCacheContainerAddRemoveAddSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeCacheOp = getCacheRemoveOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same cache container\n        result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n    }","id":94636,"modified_method":"@Test\n    public void testCacheContainerAddRemoveAddSequence() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        ModelNode addContainerOp = getCacheContainerAddOperation(\"maximal2\");\n        ModelNode removeContainerOp = getCacheContainerRemoveOperation(\"maximal2\");\n        ModelNode addCacheOp = getCacheAddOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n        ModelNode removeCacheOp = getCacheRemoveOperation(\"maximal2\", \"fred\", ModelKeys.LOCAL_CACHE);\n\n        // add a cache container\n        ModelNode result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add a local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // remove the cache container\n        result = servicesA.executeOperation(removeContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same cache container\n        result = servicesA.executeOperation(addContainerOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        // add the same local cache\n        result = servicesA.executeOperation(addCacheOp);\n        Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testParseAndMarshallModel() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        // list the names of the services which have been installed\n        System.out.println(\"service names = \" + servicesA.getContainer().getServiceNames());\n\n        ModelNode modelA = servicesA.readWholeModel() ;\n        // print out the resulting model\n        String marshalled = servicesA.getPersistedSubsystemXml();\n        System.out.println(\"marshalled XML = \" + marshalled);\n\n        // install the persisted xml from the first controller into a second controller\n        KernelServices servicesB = super.installInController(marshalled) ;\n        ModelNode modelB = servicesB.readWholeModel() ;\n\n        // make sure the models are identical\n        super.compare(modelA, modelB);\n    }","id":94637,"modified_method":"@Test\n    public void testParseAndMarshallModel() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        // list the names of the services which have been installed\n        System.out.println(\"service names = \" + servicesA.getContainer().getServiceNames());\n\n        ModelNode modelA = servicesA.readWholeModel() ;\n        // print out the resulting model\n        String marshalled = servicesA.getPersistedSubsystemXml();\n        System.out.println(\"marshalled XML = \" + marshalled);\n\n        // install the persisted xml from the first controller into a second controller\n        KernelServices servicesB = createKernelServicesBuilder(null).setSubsystemXml(marshalled).build();\n        ModelNode modelB = servicesB.readWholeModel() ;\n\n        // make sure the models are identical\n        super.compare(modelA, modelB);\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testInstallIntoController() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices services = super.installInController(subsystemXml) ;\n\n        // print out the resulting model\n        ModelNode model = services.readWholeModel() ;\n        System.out.println(model);\n\n        // use some assertions here to check the correctness of the model\n        Assert.assertTrue(model.get(SUBSYSTEM).hasDefined(InfinispanExtension.SUBSYSTEM_NAME));\n\n        assertRemoveSubsystemResources(services);\n\n    }","id":94638,"modified_method":"@Test\n    public void testInstallIntoController() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices services = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        // print out the resulting model\n        ModelNode model = services.readWholeModel() ;\n        System.out.println(model);\n\n        // use some assertions here to check the correctness of the model\n        Assert.assertTrue(model.get(SUBSYSTEM).hasDefined(InfinispanExtension.SUBSYSTEM_NAME));\n\n        assertRemoveSubsystemResources(services);\n\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    @Ignore\n    public void testExecuteOperations() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = super.installInController(subsystemXml) ;\n\n        // list the names of the services which have been installed\n        System.out.println(\"service names = \" + servicesA.getContainer().getServiceNames());\n\n        // test an operation\n        PathAddress rpcManagerAddr = PathAddress.pathAddress(\n                PathElement.pathElement(SUBSYSTEM, InfinispanExtension.SUBSYSTEM_NAME),\n                PathElement.pathElement(\"cache-container\",\"maximal\"),\n                PathElement.pathElement(\"distributed-cache\", \"dist\"),\n                PathElement.pathElement(\"component\", \"rpc-manager\"));\n\n        ModelNode readAttributeOp = new ModelNode() ;\n        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n        readAttributeOp.get(OP_ADDR).set(rpcManagerAddr.toModelNode());\n        readAttributeOp.get(NAME).set(\"replication-count\");\n\n        ModelNode result = servicesA.executeOperation(readAttributeOp);\n        // Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        System.out.println(\"result = \" + result.toString());\n\n    }","id":94639,"modified_method":"@Test\n    @Ignore\n    public void testExecuteOperations() throws Exception {\n\n        // Parse and install the XML into the controller\n        String subsystemXml = getSubsystemXml() ;\n        KernelServices servicesA = createKernelServicesBuilder(null).setSubsystemXml(subsystemXml).build();\n\n        // list the names of the services which have been installed\n        System.out.println(\"service names = \" + servicesA.getContainer().getServiceNames());\n\n        // test an operation\n        PathAddress rpcManagerAddr = PathAddress.pathAddress(\n                PathElement.pathElement(SUBSYSTEM, InfinispanExtension.SUBSYSTEM_NAME),\n                PathElement.pathElement(\"cache-container\",\"maximal\"),\n                PathElement.pathElement(\"distributed-cache\", \"dist\"),\n                PathElement.pathElement(\"component\", \"rpc-manager\"));\n\n        ModelNode readAttributeOp = new ModelNode() ;\n        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n        readAttributeOp.get(OP_ADDR).set(rpcManagerAddr.toModelNode());\n        readAttributeOp.get(NAME).set(\"replication-count\");\n\n        ModelNode result = servicesA.executeOperation(readAttributeOp);\n        // Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString());\n\n        System.out.println(\"result = \" + result.toString());\n\n    }","commit_id":"76c0ab551b2fcdb5583db8921aff68d1d87d0d9c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\r\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\r\n        if (targets.choose(Outcome.Benefit, controllerId, sourceId, game)) {\r\n            convertedManaCosts = 0;\r\n            numberCardsRevealed = 0;\r\n            Player player = game.getPlayer(controllerId);\r\n            Cards cards = new CardsImpl();\r\n            for (UUID targetId: targets.get(0).getTargets()) {\r\n                Card card = player.getHand().get(targetId, game);\r\n                if (card == null)\r\n                    return false;\r\n                convertedManaCosts += card.getManaCost().convertedManaCost();\r\n                numberCardsRevealed++;\r\n                cards.add(card);                \r\n                paid = true;\r\n            }\r\n            player.revealCards(\"Revealed card\", cards, game); // this is not a boolean\r\n            return paid;\r\n        }\r\n        paid = false;\r\n        return paid;\r\n    }","id":94640,"modified_method":"@Override\r\n    public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana) {\r\n        if (targets.choose(Outcome.Benefit, controllerId, sourceId, game)) {\r\n            convertedManaCosts = 0;\r\n            numberCardsRevealed = 0;\r\n            Player player = game.getPlayer(controllerId);\r\n            Cards cards = new CardsImpl();\r\n            for (UUID targetId: targets.get(0).getTargets()) {\r\n                Card card = player.getHand().get(targetId, game);\r\n                if (card == null)\r\n                    return false;\r\n                convertedManaCosts += card.getManaCost().convertedManaCost();\r\n                numberCardsRevealed++;\r\n                cards.add(card);                \r\n                paid = true;\r\n            }\r\n            player.revealCards(\"card cost\", cards, game); // this is not a boolean\r\n            return paid;\r\n        }\r\n        paid = false;\r\n        return paid;\r\n    }","commit_id":"d2c2c9b4a4a841c46541a8aa8fb1841207983981","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null) { \r\n            if (player.chooseUse(Outcome.Benefit, \"Pay \" + cost.getText() /* + \" or sacrifice \" + permanent.getName() */ + \"?\", game)) {\r\n                cost.clearPaid();\r\n                if (cost.pay(source, game, source.getId(), source.getControllerId(), false))\r\n                    return true;\r\n            }\r\n            permanent.sacrifice(source.getSourceId(), game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":94641,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        Permanent permanent = game.getPermanent(source.getSourceId());\r\n        if (player != null && permanent != null) { \r\n            StringBuilder sb = new StringBuilder(cost.getText()).append(\"?\");\r\n            if (!sb.toString().toLowerCase().startsWith(\"exile \") && !sb.toString().toLowerCase().startsWith(\"return \") ) {\r\n                sb.insert(0, \"Pay \");\r\n            }\r\n            if (player.chooseUse(Outcome.Benefit, sb.toString(), game)) {\r\n                cost.clearPaid();\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false))\r\n                    return true;\r\n            }\r\n            permanent.sacrifice(source.getSourceId(), game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"d2c2c9b4a4a841c46541a8aa8fb1841207983981","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public String getText(Mode mode) {\r\n            StringBuilder sb = new StringBuilder(\"sacrifice {this} unless you \");\r\n            String costText = cost.getText();\r\n            if (costText.toLowerCase().startsWith(\"discard\") || costText.toLowerCase().startsWith(\"remove\") || costText.toLowerCase().startsWith(\"return\")) {\r\n                sb.append(costText.substring(0, 1).toLowerCase());\r\n                sb.append(costText.substring(1));\r\n            } \r\n            else {\r\n                sb.append(\"pay \").append(costText);\r\n            }\r\n\r\n            return sb.toString();\r\n\r\n    }","id":94642,"modified_method":"@Override\r\n    public String getText(Mode mode) {\r\n            StringBuilder sb = new StringBuilder(\"sacrifice {this} unless you \");\r\n            String costText = cost.getText();\r\n            if (costText.toLowerCase().startsWith(\"discard\") || costText.toLowerCase().startsWith(\"remove\") || costText.toLowerCase().startsWith(\"return\") || costText.toLowerCase().startsWith(\"exile\")) {\r\n                sb.append(costText.substring(0, 1).toLowerCase());\r\n                sb.append(costText.substring(1));\r\n            } \r\n            else {\r\n                sb.append(\"pay \").append(costText);\r\n            }\r\n\r\n            return sb.toString();\r\n\r\n    }","commit_id":"d2c2c9b4a4a841c46541a8aa8fb1841207983981","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player player = game.getPlayer(source.getControllerId());\n        Permanent permanent = game.getPermanent(source.getSourceId());\n        if (player != null && permanent != null) { \n            if (player.chooseUse(Outcome.Benefit, cost.getText() + \" or \" + permanent.getName() + \" comes into play tapped?\", game)) {\n                cost.clearPaid();\n                if (cost.pay(source, game, source.getId(), source.getControllerId(), false))\n                    return true;\n            }\n            permanent.tap(game);\n            return true;\n        }\n        return false;\n    }","id":94643,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player player = game.getPlayer(source.getControllerId());\n        Permanent permanent = game.getPermanent(source.getSourceId());\n        if (player != null && permanent != null) { \n            if (cost.canPay(source.getSourceId(), source.getControllerId(), game)\n                    && player.chooseUse(Outcome.Benefit, cost.getText() + \" or \" + permanent.getName() + \" comes into play tapped?\", game)) {\n                cost.clearPaid();\n                if (cost.pay(source, game, source.getId(), source.getControllerId(), false))\n                    return true;\n            }\n            permanent.tap(game);\n            return true;\n        }\n        return false;\n    }","commit_id":"d2c2c9b4a4a841c46541a8aa8fb1841207983981","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller != null) {\r\n            UUID creatureId = (UUID) this.getValue(\"creatureId\");\r\n            Permanent creature = game.getPermanentOrLKIBattlefield(creatureId);\r\n            if (creature != null) {\r\n                Player opponent = game.getPlayer(source.getFirstTarget());\r\n                boolean paid = false;\r\n                if (opponent != null) {\r\n                    if (opponent.chooseUse(outcome, new StringBuilder(\"Pay 3 live to prevent that \").append(creature.getName()).append(\" returns to \").append(controller.getName()).append(\"'s hand?\").toString(), game)) {\r\n                        Cost cost = new PayLifeCost(3);\r\n                        if (cost.pay(source, game, source.getSourceId(), opponent.getId(), false)) {\r\n                            paid = true;\r\n                        }\r\n                    }            \r\n                }\r\n                if (opponent == null || !paid) {\r\n                    if (game.getState().getZone(creature.getId()).equals(Zone.GRAVEYARD)) {\r\n                        controller.moveCardToHandWithInfo(creature, source.getSourceId(), game, Zone.GRAVEYARD);\r\n                    }\r\n                }                \r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":94644,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller != null) {\r\n            UUID creatureId = (UUID) this.getValue(\"creatureId\");\r\n            Permanent creature = game.getPermanentOrLKIBattlefield(creatureId);\r\n            if (creature != null) {\r\n                Player opponent = game.getPlayer(source.getFirstTarget());\r\n                boolean paid = false;\r\n                if (opponent != null) {\r\n                    Cost cost = new PayLifeCost(3);\r\n                    if (cost.canPay(source.getSourceId(), opponent.getId(), game)\r\n                            && opponent.chooseUse(outcome, new StringBuilder(\"Pay 3 live to prevent that \").append(creature.getLogName()).append(\" returns to \").append(controller.getName()).append(\"'s hand?\").toString(), game)) {\r\n                        if (cost.pay(source, game, source.getSourceId(), opponent.getId(), false)) {\r\n                            paid = true;\r\n                        }\r\n                    }            \r\n                }\r\n                if (opponent == null || !paid) {\r\n                    if (game.getState().getZone(creature.getId()).equals(Zone.GRAVEYARD)) {\r\n                        controller.moveCardToHandWithInfo(creature, source.getSourceId(), game, Zone.GRAVEYARD);\r\n                    }\r\n                }                \r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"bcf09b3cd068f2dfbf9f9547cd78304bed24723e","url":"https://github.com/magefree/mage"},{"original_method":"WallOfReverenceTriggeredEffect() {\n        super(Outcome.GainLife);\n        staticText = \"you may gain life equal to the power of target creature you control\";\n    }","id":94645,"modified_method":"WallOfReverenceTriggeredEffect() {\n        super(Outcome.GainLife);\n        staticText = \"gain life equal to the power of target creature you control\";\n    }","commit_id":"bcf09b3cd068f2dfbf9f9547cd78304bed24723e","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        MageObject mageObject = game.getObject(source.getSourceId());\r\n        if (player != null && mageObject != null) {\r\n            String message;\r\n            if (chooseUseText == null) {\r\n                message = new StringBuilder(getCostText()).append(\" and \").append(executingEffect.getText(source.getModes().getMode())).append(\"?\").toString();\r\n            } else {\r\n                message = chooseUseText;\r\n            }\r\n            message = CardUtil.replaceSourceName(message, mageObject.getName());\r\n            if (player.chooseUse(executingEffect.getOutcome(), message, game)) {\r\n                cost.clearPaid();\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    executingEffect.setTargetPointer(this.targetPointer);\r\n                    return executingEffect.apply(game, source);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":94646,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        MageObject mageObject = game.getObject(source.getSourceId());\r\n        if (player != null && mageObject != null) {\r\n            String message;\r\n            if (chooseUseText == null) {\r\n                message = new StringBuilder(getCostText()).append(\" and \").append(executingEffect.getText(source.getModes().getMode())).append(\"?\").toString();\r\n            } else {\r\n                message = chooseUseText;\r\n            }\r\n            message = CardUtil.replaceSourceName(message, mageObject.getName());\r\n            if (cost.canPay(source.getSourceId(), player.getId(), game) && player.chooseUse(executingEffect.getOutcome(), message, game)) {\r\n                cost.clearPaid();\r\n                if (cost.pay(source, game, source.getSourceId(), source.getControllerId(), false)) {\r\n                    executingEffect.setTargetPointer(this.targetPointer);\r\n                    return executingEffect.apply(game, source);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"63a083ef0d06df8aac1379ae285caceb92cc2353","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event instanceof DamagedPlayerEvent) {\r\n            DamagedPlayerEvent damageEvent = (DamagedPlayerEvent)event;\r\n            Permanent damageMakingCreature = game.getPermanent(event.getSourceId());\r\n            if (damageEvent.isCombatDamage() && damageMakingCreature != null && damageMakingCreature.getAttachments().contains(this.getSourceId())) {\r\n                Player controller = game.getPlayer(this.getControllerId());\r\n                Permanent sourceEnchantment = game.getPermanent(this.getSourceId());\r\n                if (controller != null && sourceEnchantment != null) {\r\n                    StringBuilder sb = new StringBuilder();\r\n                    sb.append(\"Do you wish to sacrifice \").append(sourceEnchantment.getName());\r\n                    sb.append(\" to destroy target enchantment?\");\r\n                    if (controller.chooseUse(Outcome.DestroyPermanent, sb.toString(), game)) {\r\n                        this.getTargets().clear();\r\n                        this.addTarget(new TargetEnchantmentPermanent(true));\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":94647,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event instanceof DamagedPlayerEvent) {\r\n            DamagedPlayerEvent damageEvent = (DamagedPlayerEvent)event;\r\n            Permanent damageMakingCreature = game.getPermanent(event.getSourceId());\r\n            if (damageEvent.isCombatDamage() && damageMakingCreature != null && damageMakingCreature.getAttachments().contains(this.getSourceId())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"63a083ef0d06df8aac1379ae285caceb92cc2353","url":"https://github.com/magefree/mage"},{"original_method":"public MortalObstinacyAbility() {\r\n        super(Zone.BATTLEFIELD, new DestroyTargetEffect());\r\n    }","id":94648,"modified_method":"public MortalObstinacyAbility() {\r\n        super(Zone.BATTLEFIELD, new DoIfCostPaid(new DestroyTargetEffect(), new SacrificeSourceCost()));\r\n        addTarget(new TargetEnchantmentPermanent(true));\r\n    }","commit_id":"63a083ef0d06df8aac1379ae285caceb92cc2353","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public String getRule() {\r\n        return \"Whenever enchanted creature deals combat damage to a player, you may sacrifice {this}. If you do, destroy target enchantment.\";\r\n    }","id":94649,"modified_method":"@Override\r\n    public String getRule() {\r\n        return new StringBuilder(\"Whenever enchanted creature deals combat damage to a player, \").append(super.getRule()).toString();\r\n    }","commit_id":"63a083ef0d06df8aac1379ae285caceb92cc2353","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean askToActivateAlternativeCosts(Ability ability, Game game) {\r\n        if (ability instanceof SpellAbility) {\r\n            Player player = game.getPlayer(ability.getControllerId());\r\n            if (player != null) {\r\n                if (player.chooseUse(Outcome.Detriment, alternateCosts.isEmpty() ? \"Cast without paying its mana cost?\":\"Pay alternative costs?\", game)) {\r\n                    ability.getManaCostsToPay().clear();\r\n                    ability.getCosts().clear();\r\n                    for (AlternativeCost2 alternateCost : alternateCosts) {\r\n                        alternateCost.activate();\r\n                        for (Iterator it = ((Costs) alternateCost).iterator(); it.hasNext();) {\r\n                            Cost cost = (Cost) it.next();\r\n                            if (cost instanceof ManaCost) {\r\n                                ability.getManaCostsToPay().add((ManaCost) cost.copy());\r\n                            } else {\r\n                                ability.getCosts().add(cost.copy());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isActivated(ability, game);\r\n    }","id":94650,"modified_method":"@Override\r\n    public boolean askToActivateAlternativeCosts(Ability ability, Game game) {\r\n        if (ability instanceof SpellAbility) {\r\n            Player player = game.getPlayer(ability.getControllerId());\r\n            if (player != null) {\r\n                if (alternateCosts.canPay(ability.getSourceId(), ability.getControllerId(), game) &&\r\n                        player.chooseUse(Outcome.Detriment, alternateCosts.isEmpty() ? \"Cast without paying its mana cost?\":\"Pay alternative costs?\", game)) {\r\n                    ability.getManaCostsToPay().clear();\r\n                    ability.getCosts().clear();\r\n                    for (Cost cost : alternateCosts) {\r\n                        AlternativeCost2 alternateCost = (AlternativeCost2) cost;\r\n                        alternateCost.activate();\r\n                        for (Iterator it = ((Costs) alternateCost).iterator(); it.hasNext();) {\r\n                            Cost costDeailed = (Cost) it.next();\r\n                            if (costDeailed instanceof ManaCost) {\r\n                                ability.getManaCostsToPay().add((ManaCost) costDeailed.copy());\r\n                            } else {\r\n                                ability.getCosts().add(costDeailed.copy());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isActivated(ability, game);\r\n    }","commit_id":"acd960343bc69abeda08d1742160258e27ebe9ef","url":"https://github.com/magefree/mage"},{"original_method":"/** Adds a listener class.\n\t */\n\tpublic void addListener(Class klass) throws Exception {\n\t\tif (Monitor.class.isAssignableFrom(klass)) {\n\t\t\tif (_monitor != null)\n\t\t\t\tthrow new UiException(\"Monitor listener can be assigned only once\");\n\t\t\t_monitor = (Monitor)klass.newInstance();\n\t\t}\n\n\t\tif (EventThreadInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtInits) {\n\t\t\t\t_evtInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtCleans) {\n\t\t\t\t_evtCleans.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadSuspend.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtSusps) {\n\t\t\t\t_evtSusps.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadResume.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtResus) {\n\t\t\t\t_evtResus.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (ApplicationInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_appInits) {\n\t\t\t\t_appInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (ApplicationCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_appCleans) {\n\t\t\t\t_appCleans.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (SessionInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_sessInits) {\n\t\t\t\t_sessInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (SessionCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_sessCleans) {\n\t\t\t\t_sessCleans.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (DesktopInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_dtInits) {\n\t\t\t\t_dtInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (DesktopCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_dtCleans) {\n\t\t\t\t_dtCleans.add(klass);\n\t\t\t}\n\t\t}\n\t}","id":94651,"modified_method":"/** Adds a listener class.\n\t */\n\tpublic void addListener(Class klass) throws Exception {\n\t\tif (Monitor.class.isAssignableFrom(klass)) {\n\t\t\tif (_monitor != null)\n\t\t\t\tthrow new UiException(\"Monitor listener can be assigned only once\");\n\t\t\t_monitor = (Monitor)klass.newInstance();\n\t\t}\n\n\t\tif (EventThreadInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtInits) {\n\t\t\t\t_evtInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtCleans) {\n\t\t\t\t_evtCleans.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadSuspend.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtSusps) {\n\t\t\t\t_evtSusps.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (EventThreadResume.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_evtResus) {\n\t\t\t\t_evtResus.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (ApplicationInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_appInits) {\n\t\t\t\t_appInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (ApplicationCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_appCleans) {\n\t\t\t\t_appCleans.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (SessionInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_sessInits) {\n\t\t\t\t_sessInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (SessionCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_sessCleans) {\n\t\t\t\t_sessCleans.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (DesktopInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_dtInits) {\n\t\t\t\t_dtInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (DesktopCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_dtCleans) {\n\t\t\t\t_dtCleans.add(klass);\n\t\t\t}\n\t\t}\n\n\t\tif (ExecutionInit.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_execInits) {\n\t\t\t\t_execInits.add(klass);\n\t\t\t}\n\t\t}\n\t\tif (ExecutionCleanup.class.isAssignableFrom(klass)) {\n\t\t\tsynchronized (_execCleans) {\n\t\t\t\t_execCleans.add(klass);\n\t\t\t}\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"/** Removes a listener class.\n\t */\n\tpublic void removeListener(Class klass) {\n\t\tsynchronized (_evtInits) {\n\t\t\t_evtInits.remove(klass);\n\t\t}\n\t\tsynchronized (_evtCleans) {\n\t\t\t_evtCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_evtSusps) {\n\t\t\t_evtSusps.remove(klass);\n\t\t}\n\t\tsynchronized (_evtResus) {\n\t\t\t_evtResus.remove(klass);\n\t\t}\n\n\t\tsynchronized (_appInits) {\n\t\t\t_appInits.remove(klass);\n\t\t}\n\t\tsynchronized (_appCleans) {\n\t\t\t_appCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_sessInits) {\n\t\t\t_sessInits.remove(klass);\n\t\t}\n\t\tsynchronized (_sessCleans) {\n\t\t\t_sessCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_dtInits) {\n\t\t\t_dtInits.remove(klass);\n\t\t}\n\t\tsynchronized (_dtCleans) {\n\t\t\t_dtCleans.remove(klass);\n\t\t}\n\t}","id":94652,"modified_method":"/** Removes a listener class.\n\t */\n\tpublic void removeListener(Class klass) {\n\t\tsynchronized (_evtInits) {\n\t\t\t_evtInits.remove(klass);\n\t\t}\n\t\tsynchronized (_evtCleans) {\n\t\t\t_evtCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_evtSusps) {\n\t\t\t_evtSusps.remove(klass);\n\t\t}\n\t\tsynchronized (_evtResus) {\n\t\t\t_evtResus.remove(klass);\n\t\t}\n\n\t\tsynchronized (_appInits) {\n\t\t\t_appInits.remove(klass);\n\t\t}\n\t\tsynchronized (_appCleans) {\n\t\t\t_appCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_sessInits) {\n\t\t\t_sessInits.remove(klass);\n\t\t}\n\t\tsynchronized (_sessCleans) {\n\t\t\t_sessCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_dtInits) {\n\t\t\t_dtInits.remove(klass);\n\t\t}\n\t\tsynchronized (_dtCleans) {\n\t\t\t_dtCleans.remove(klass);\n\t\t}\n\t\tsynchronized (_execInits) {\n\t\t\t_execInits.remove(klass);\n\t\t}\n\t\tsynchronized (_execCleans) {\n\t\t\t_execCleans.remove(klass);\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"/** Invokes {@link EventThreadSuspend#beforeSuspend} for each relevant\n\t * listener registered by {@link #addListener}.\n\t *\n\t * <p>An instance of {@link EventThreadSuspend} is constructed first,\n\t * and then invoke {@link EventThreadSuspend#beforeSuspend}.\n\t *\n\t * @param comp the component which the event is targeting\n\t * @param evt the event to process\n\t * @param obj which object that {@link com.potix.zk.ui.Executions#wait}\n\t * is called with.\n\t * @exception UiException to prevent a thread from suspending\n\t */\n\tpublic void invokeEventThreadSuspends(Component comp, Event evt, Object obj)\n\tthrows UiException {\n\t\tif (_evtSusps.isEmpty()) return;\n\t\t\t//it is OK to test LinkedList.isEmpty without synchronized\n\n\t\tsynchronized (_evtSusps) {\n\t\t\tfor (Iterator it = _evtSusps.iterator(); it.hasNext();) {\n\t\t\t\tfinal Class klass = (Class)it.next();\n\t\t\t\ttry {\n\t\t\t\t\t((EventThreadSuspend)klass.newInstance())\n\t\t\t\t\t\t.beforeSuspend(comp, evt, obj);\n\t\t\t\t} catch (Throwable ex) {\n\t\t\t\t\tthrow UiException.Aide.wrap(ex);\n\t\t\t\t\t//Don't intercept; to prevent the thread to suspend\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":94653,"modified_method":"/** Invokes {@link EventThreadSuspend#beforeSuspend} for each relevant\n\t * listener registered by {@link #addListener}.\n\t *\n\t * <p>An instance of {@link EventThreadSuspend} is constructed first,\n\t * and then invoke {@link EventThreadSuspend#beforeSuspend}.\n\t *\n\t * @param comp the component which the event is targeting\n\t * @param evt the event to process\n\t * @param obj which object that {@link Executions#wait}\n\t * is called with.\n\t * @exception UiException to prevent a thread from suspending\n\t */\n\tpublic void invokeEventThreadSuspends(Component comp, Event evt, Object obj)\n\tthrows UiException {\n\t\tif (_evtSusps.isEmpty()) return;\n\t\t\t//it is OK to test LinkedList.isEmpty without synchronized\n\n\t\tsynchronized (_evtSusps) {\n\t\t\tfor (Iterator it = _evtSusps.iterator(); it.hasNext();) {\n\t\t\t\tfinal Class klass = (Class)it.next();\n\t\t\t\ttry {\n\t\t\t\t\t((EventThreadSuspend)klass.newInstance())\n\t\t\t\t\t\t.beforeSuspend(comp, evt, obj);\n\t\t\t\t} catch (Throwable ex) {\n\t\t\t\t\tthrow UiException.Aide.wrap(ex);\n\t\t\t\t\t//Don't intercept; to prevent the thread to suspend\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"private void process(HttpServletRequest request,\n\tHttpServletResponse response, String content)\n\tthrows ServletException, IOException {\n\t\tif (log.debugable()) log.debug(\"Content to filter:\\n\"+content);\n\n\t\tfinal WebManager webman = WebManager.getWebManager(_ctx);\n\t\tfinal WebApp wapp = webman.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal Session sess = webman.getSession(_ctx, request);\n\t\tfinal Object old = I18Ns.setup(sess, request, response, _charset);\n\t\ttry {\n\t\t\tfinal Desktop desktop = webman.getDesktop(sess, request, null);\n\t\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\t\twapp, sess, desktop, request, null);\n\t\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\t\tfinal PageDefinition pagedef =\n\t\t\t\tuf.getPageDefinitionDirectly(ri, content, _ext);\n\t\t\tfinal Page page = uf.newPage(ri, pagedef, null);\n\t\t\tfinal Execution exec =\n\t\t\t\tnew ExecutionImpl(_ctx, request, response, desktop, page);\n\t\t\twappc.getUiEngine()\n\t\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t\t} finally {\n\t\t\tI18Ns.cleanup(request, old);\n\t\t}\n\t}","id":94654,"modified_method":"private void process(HttpServletRequest request,\n\tHttpServletResponse response, String content)\n\tthrows ServletException, IOException {\n\t\tif (log.debugable()) log.debug(\"Content to filter:\\n\"+content);\n\n\t\tfinal WebManager webman = WebManager.getWebManager(_ctx);\n\t\tfinal WebApp wapp = webman.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal Session sess = webman.getSession(_ctx, request);\n\t\tfinal Object old = I18Ns.setup(sess, request, response, _charset);\n\t\ttry {\n\t\t\tfinal Desktop desktop = webman.getDesktop(sess, request, null);\n\t\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\t\twapp, sess, desktop, request, null);\n\t\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\t\tfinal PageDefinition pagedef =\n\t\t\t\tuf.getPageDefinitionDirectly(ri, content, _ext);\n\n\t\t\tfinal Page page = uf.newPage(ri, pagedef, null);\n\t\t\tfinal Execution exec =\n\t\t\t\tnew ExecutionImpl(_ctx, request, response, desktop, page);\n\t\t\tfinal Configuration config = wapp.getConfiguration();\n\t\t\tconfig.invokeExecutionInits(exec);\n\t\t\ttry {\n\t\t\t\twappc.getUiEngine()\n\t\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t\t\t} finally {\n\t\t\t\tconfig.invokeExecutionCleanups(exec);\n\t\t\t}\n\t\t} finally {\n\t\t\tI18Ns.cleanup(request, old);\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"/** Process a portlet request.\n\t * @param path the path of the ZUML page to render. If null or not found,\n\t * an error page is rendered.\n\t */\n\tprivate void process(Session sess, RenderRequest request,\n\tRenderResponse response, String path)\n\tthrows PortletException, IOException {\n\t\tif (D.ON && log.debugable()) log.debug(\"Creates from \"+path);\n\t\tfinal WebApp wapp = getWebManager().getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\n\t\tfinal Desktop desktop = getDesktop(sess, request, path);\n\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\twapp, sess, desktop, request,\n\t\t\tPageDefinitions.getLocator(wapp, path));\n\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\tfinal PageDefinition pagedef = path != null ?\n\t\t\tuf.getPageDefinition(ri, path): null;\n\t\tif (pagedef == null) {\n\t\t\tfinal String msg = path != null ?\n\t\t\t\tMessages.get(MZk.PAGE_NOT_FOUND, new Object[] {path}):\n\t\t\t\tMessages.get(MZk.PORTLET_PAGE_REQUIRED);\n\t\t\tfinal Map attrs = new HashMap();\n\t\t\tattrs.put(Attributes.ALERT_TYPE, \"error\");\n\t\t\tattrs.put(Attributes.ALERT, msg);\n\t\t\tPortlets.include(_ctx, request, response,\n\t\t\t\t\"~./html/alert.dsp\", attrs, Portlets.OVERWRITE_URI);\n\t\t\t\t//Portlets doesn't support PASS_THRU_ATTR yet (because\n\t\t\t\t//protlet request will mangle attribute name)\n\t\t\treturn;\n\t\t}\n\n\t\tfinal Page page = uf.newPage(ri, pagedef, path);\n\t\tfinal Execution exec =\n\t\t\tnew ExecutionImpl((ServletContext)wapp.getNativeContext(),\n\t\t\t\tRenderHttpServletRequest.getInstance(request),\n\t\t\t\tRenderHttpServletResponse.getInstance(response),\n\t\t\t\tdesktop, page);\n\t\twappc.getUiEngine()\n\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t}","id":94655,"modified_method":"/** Process a portlet request.\n\t * @param path the path of the ZUML page to render. If null or not found,\n\t * an error page is rendered.\n\t */\n\tprivate void process(Session sess, RenderRequest request,\n\tRenderResponse response, String path)\n\tthrows PortletException, IOException {\n\t\tif (D.ON && log.debugable()) log.debug(\"Creates from \"+path);\n\t\tfinal WebApp wapp = getWebManager().getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\n\t\tfinal Desktop desktop = getDesktop(sess, request, path);\n\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\twapp, sess, desktop, request,\n\t\t\tPageDefinitions.getLocator(wapp, path));\n\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\tfinal PageDefinition pagedef = path != null ?\n\t\t\tuf.getPageDefinition(ri, path): null;\n\t\tif (pagedef == null) {\n\t\t\tfinal String msg = path != null ?\n\t\t\t\tMessages.get(MZk.PAGE_NOT_FOUND, new Object[] {path}):\n\t\t\t\tMessages.get(MZk.PORTLET_PAGE_REQUIRED);\n\t\t\tfinal Map attrs = new HashMap();\n\t\t\tattrs.put(Attributes.ALERT_TYPE, \"error\");\n\t\t\tattrs.put(Attributes.ALERT, msg);\n\t\t\tPortlets.include(_ctx, request, response,\n\t\t\t\t\"~./html/alert.dsp\", attrs, Portlets.OVERWRITE_URI);\n\t\t\t\t//Portlets doesn't support PASS_THRU_ATTR yet (because\n\t\t\t\t//protlet request will mangle attribute name)\n\t\t\treturn;\n\t\t}\n\n\t\tfinal Page page = uf.newPage(ri, pagedef, path);\n\t\tfinal Execution exec =\n\t\t\tnew ExecutionImpl((ServletContext)wapp.getNativeContext(),\n\t\t\t\tRenderHttpServletRequest.getInstance(request),\n\t\t\t\tRenderHttpServletResponse.getInstance(response),\n\t\t\t\tdesktop, page);\n\t\tfinal Configuration config = wapp.getConfiguration();\n\t\tconfig.invokeExecutionInits(exec);\n\t\ttry {\n\t\t\twappc.getUiEngine()\n\t\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t\t} finally {\n\t\t\tconfig.invokeExecutionCleanups(exec);\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"private void process(Session sess,\n\tHttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException {\n\t\tfinal String path = Https.getThisServletPath(request);\n\t\tif (D.ON && log.debugable()) log.debug(\"Creates from \"+path);\n\n\t\tfinal WebApp wapp = _webman.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal Desktop desktop = _webman.getDesktop(sess, request, path);\n\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\twapp, sess, desktop, request,\n\t\t\tPageDefinitions.getLocator(wapp, path));\n\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\tfinal PageDefinition pagedef = uf.getPageDefinition(ri, path);\n\t\tif (pagedef == null) {\n\t\t\tif (Servlets.isIncluded(request)) {\n\t\t\t\tfinal String msg = Messages.get(MZk.PAGE_NOT_FOUND,\n\t\t\t\t\tnew Object[] {path});\n\t\t\t\tfinal Map attrs = new HashMap();\n\t\t\t\tattrs.put(Attributes.ALERT_TYPE, \"error\");\n\t\t\t\tattrs.put(Attributes.ALERT, msg);\n\t\t\t\tServlets.include(_ctx, request, response,\n\t\t\t\t\t\"~./html/alert.dsp\", attrs, Servlets.PASS_THRU_ATTR);\n\t\t\t} else {\n\t\t\t\tresponse.sendError(HttpServletResponse.SC_NOT_FOUND);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tfinal Page page = uf.newPage(ri, pagedef, path);\n\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t_ctx, request, response, desktop, page);\n\t\twappc.getUiEngine()\n\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t}","id":94656,"modified_method":"private void process(Session sess,\n\tHttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException {\n\t\tfinal String path = Https.getThisServletPath(request);\n\t\tif (D.ON && log.debugable()) log.debug(\"Creates from \"+path);\n\n\t\tfinal WebApp wapp = _webman.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal Desktop desktop = _webman.getDesktop(sess, request, path);\n\t\tfinal RequestInfo ri = new RequestInfoImpl(\n\t\t\twapp, sess, desktop, request,\n\t\t\tPageDefinitions.getLocator(wapp, path));\n\t\tfinal UiFactory uf = wappc.getUiFactory();\n\t\tfinal PageDefinition pagedef = uf.getPageDefinition(ri, path);\n\t\tif (pagedef == null) {\n\t\t\tif (Servlets.isIncluded(request)) {\n\t\t\t\tfinal String msg = Messages.get(MZk.PAGE_NOT_FOUND,\n\t\t\t\t\tnew Object[] {path});\n\t\t\t\tfinal Map attrs = new HashMap();\n\t\t\t\tattrs.put(Attributes.ALERT_TYPE, \"error\");\n\t\t\t\tattrs.put(Attributes.ALERT, msg);\n\t\t\t\tServlets.include(_ctx, request, response,\n\t\t\t\t\t\"~./html/alert.dsp\", attrs, Servlets.PASS_THRU_ATTR);\n\t\t\t} else {\n\t\t\t\tresponse.sendError(HttpServletResponse.SC_NOT_FOUND);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tfinal Page page = uf.newPage(ri, pagedef, path);\n\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t_ctx, request, response, desktop, page);\n\t\tfinal Configuration config = wapp.getConfiguration();\n\t\tconfig.invokeExecutionInits(exec);\n\t\ttry {\n\t\t\twappc.getUiEngine()\n\t\t\t\t.execNewPage(exec, pagedef, page, response.getWriter());\n\t\t} finally {\n\t\t\tconfig.invokeExecutionCleanups(exec);\n\t\t}\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"/** Process update requests from the client. */\n\tprivate void process(Session sess,\n\tHttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException {\n\t\tfinal WebApp wapp = sess.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal UiEngine uieng = wappc.getUiEngine();\n\t\tfinal List aureqs = new LinkedList();\n\n\t\t//parse desktop ID\n\t\tfinal String dtid = request.getParameter(\"dtid\");\n\t\tif (dtid == null) {\n\t\t\tlog.error(\"dtid not found: QS=\"+request.getQueryString()+\", params=\"+request.getParameterMap().keySet());\n\t\t\tresponseError(uieng, response, \"Illegal request: dtid is required\");\n\t\t\treturn;\n\t\t}\n\t\tfinal Desktop desktop;\n\t\ttry {\n\t\t\tdesktop = wappc.getDesktopCache(sess).getDesktop(dtid);\n\t\t\tWebManager.setDesktop(request, desktop);\n\t\t\t\t//reason: a new page might be created (such as include)\n\t\t} catch (ComponentNotFoundException ex) {\n\t\t\tfinal StringWriter out = getXmlWriter();\n\n\t\t\tfinal String scmd = request.getParameter(\"cmd.0\");\n\t\t\tif (!\"rmDesktop\".equals(scmd) && !\"onRender\".equals(scmd)\n\t\t\t&& !\"onTimer\".equals(scmd)) {//possible in FF due to cache\n\t\t\t\tString uri = wapp.getConfiguration().getTimeoutURI();\n\t\t\t\tfinal AuResponse resp;\n\t\t\t\tif (uri != null) {\n\t\t\t\t\tif (uri.length() != 0)\n\t\t\t\t\t\turi = Encodes.encodeURL(_ctx, request, response, uri);\n\t\t\t\t\tresp = new AuSendRedirect(uri, null);\n\t\t\t\t} else {\n\t\t\t\t\tresp = new AuObsolete(\n\t\t\t\t\t\tdtid, Messages.get(MZk.UPDATE_OBSOLETE_PAGE, dtid));\n\t\t\t\t}\n\t\t\t\tuieng.response(resp, out);\n\t\t\t}\n\n\t\t\tflushXmlWriter(response, out);\n\t\t\treturn;\n\t\t}\n\n\t\t//parse commands\n\t\ttry {\n\t\t\tfor (int j = 0;; ++j) {\n\t\t\t\tfinal String scmd = request.getParameter(\"cmd.\"+j);\n\t\t\t\tif (scmd == null)\n\t\t\t\t\tbreak;\n\n\t\t\t\tfinal Command cmd = AuRequest.getCommand(scmd);\n\t\t\t\tfinal String uuid = request.getParameter(\"uuid.\"+j);\n\t\t\t\tfinal String[] data = request.getParameterValues(\"data.\"+j);\n\t\t\t\tif (data != null) {\n\t\t\t\t\tfor (int k = data.length; --k >= 0;)\n\t\t\t\t\t\tif (\"zk_null~q\".equals(data[k]))\n\t\t\t\t\t\t\tdata[k] = null;\n\t\t\t\t}\n\t\t\t\tif (uuid == null || uuid.length() == 0) {\n\t\t\t\t\taureqs.add(new AuRequest(desktop, cmd, data));\n\t\t\t\t} else {\n\t\t\t\t\taureqs.add(new AuRequest(desktop, uuid, cmd, data));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (aureqs.isEmpty()) {\n\t\t\t\tresponseError(uieng, response, \"Illegal request: cmd is required\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (CommandNotFoundException ex) {\n\t\t\tresponseError(uieng, response, Exceptions.getMessage(ex));\n\t\t\treturn;\n\t\t}\n\n\t\tif (log.debugable()) log.debug(\"AU request: \"+aureqs);\n\t\tfinal StringWriter out = getXmlWriter();\n\n\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t_ctx, request, response, desktop, null);\n\t\tuieng.execUpdate(exec, aureqs, out);\n\n\t\tflushXmlWriter(response, out);\n\t}","id":94657,"modified_method":"/** Process update requests from the client. */\n\tprivate void process(Session sess,\n\tHttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException {\n\t\tfinal WebApp wapp = sess.getWebApp();\n\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\tfinal UiEngine uieng = wappc.getUiEngine();\n\t\tfinal List aureqs = new LinkedList();\n\n\t\t//parse desktop ID\n\t\tfinal String dtid = request.getParameter(\"dtid\");\n\t\tif (dtid == null) {\n\t\t\tlog.error(\"dtid not found: QS=\"+request.getQueryString()+\", params=\"+request.getParameterMap().keySet());\n\t\t\tresponseError(uieng, response, \"Illegal request: dtid is required\");\n\t\t\treturn;\n\t\t}\n\t\tfinal Desktop desktop;\n\t\ttry {\n\t\t\tdesktop = wappc.getDesktopCache(sess).getDesktop(dtid);\n\t\t\tWebManager.setDesktop(request, desktop);\n\t\t\t\t//reason: a new page might be created (such as include)\n\t\t} catch (ComponentNotFoundException ex) {\n\t\t\tfinal StringWriter out = getXmlWriter();\n\n\t\t\tfinal String scmd = request.getParameter(\"cmd.0\");\n\t\t\tif (!\"rmDesktop\".equals(scmd) && !\"onRender\".equals(scmd)\n\t\t\t&& !\"onTimer\".equals(scmd)) {//possible in FF due to cache\n\t\t\t\tString uri = wapp.getConfiguration().getTimeoutURI();\n\t\t\t\tfinal AuResponse resp;\n\t\t\t\tif (uri != null) {\n\t\t\t\t\tif (uri.length() != 0)\n\t\t\t\t\t\turi = Encodes.encodeURL(_ctx, request, response, uri);\n\t\t\t\t\tresp = new AuSendRedirect(uri, null);\n\t\t\t\t} else {\n\t\t\t\t\tresp = new AuObsolete(\n\t\t\t\t\t\tdtid, Messages.get(MZk.UPDATE_OBSOLETE_PAGE, dtid));\n\t\t\t\t}\n\t\t\t\tuieng.response(resp, out);\n\t\t\t}\n\n\t\t\tflushXmlWriter(response, out);\n\t\t\treturn;\n\t\t}\n\n\t\t//parse commands\n\t\ttry {\n\t\t\tfor (int j = 0;; ++j) {\n\t\t\t\tfinal String scmd = request.getParameter(\"cmd.\"+j);\n\t\t\t\tif (scmd == null)\n\t\t\t\t\tbreak;\n\n\t\t\t\tfinal Command cmd = AuRequest.getCommand(scmd);\n\t\t\t\tfinal String uuid = request.getParameter(\"uuid.\"+j);\n\t\t\t\tfinal String[] data = request.getParameterValues(\"data.\"+j);\n\t\t\t\tif (data != null) {\n\t\t\t\t\tfor (int k = data.length; --k >= 0;)\n\t\t\t\t\t\tif (\"zk_null~q\".equals(data[k]))\n\t\t\t\t\t\t\tdata[k] = null;\n\t\t\t\t}\n\t\t\t\tif (uuid == null || uuid.length() == 0) {\n\t\t\t\t\taureqs.add(new AuRequest(desktop, cmd, data));\n\t\t\t\t} else {\n\t\t\t\t\taureqs.add(new AuRequest(desktop, uuid, cmd, data));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (aureqs.isEmpty()) {\n\t\t\t\tresponseError(uieng, response, \"Illegal request: cmd is required\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (CommandNotFoundException ex) {\n\t\t\tresponseError(uieng, response, Exceptions.getMessage(ex));\n\t\t\treturn;\n\t\t}\n\n\t\tif (log.debugable()) log.debug(\"AU request: \"+aureqs);\n\t\tfinal StringWriter out = getXmlWriter();\n\n\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t_ctx, request, response, desktop, null);\n\t\tfinal Configuration config = wapp.getConfiguration();\n\t\tconfig.invokeExecutionInits(exec);\n\t\ttry {\n\t\t\tuieng.execUpdate(exec, aureqs, out);\n\t\t} finally {\n\t\t\tconfig.invokeExecutionCleanups(exec);\n\t\t}\n\n\t\tflushXmlWriter(response, out);\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"/** Retrieves the response from {@link Viewable#getView}.\n\t */\n\tpublic static final void process(Session sess, ServletContext ctx,\n\tHttpServletRequest request, HttpServletResponse response, String pi)\n\tthrows ServletException, IOException {\n//\t\tif (D.ON && log.debugable()) log.debug(\"View \"+pi);\n\n\t\tif (pi.length() == 0 || pi.charAt(0) != '/')\n\t\t\tthrow new ServletException(\"Wrong path info: \"+pi);\n\t\tint j = pi.indexOf('/', 1);\n\t\tif (j < 0)\n\t\t\tthrow new ServletException(\"Wrong path info: \"+pi);\n\n\t\tfinal String dtid = pi.substring(1, j);\n\t\tfinal int k = pi.indexOf('/', ++j);\n\t\tfinal String uuid = k >= 0 ? pi.substring(j, k): pi.substring(j);\n\n\t\tfinal Media media;\n\t\ttry {\n\t\t\tfinal WebAppCtrl wappc = (WebAppCtrl)sess.getWebApp();\n\t\t\tfinal UiEngine uieng = wappc.getUiEngine();\n\t\t\tfinal Desktop desktop = wappc.getDesktopCache(sess).getDesktop(dtid);\n\n\t\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t\tctx, request, response, desktop, null);\n\t\t\tuieng.activate(exec);\n\t\t\ttry {\n\t\t\t\tfinal Component comp = desktop.getComponentByUuid(uuid);\n\t\t\t\tif (!(comp instanceof Viewable))\n\t\t\t\t\tthrow new ServletException(Viewable.class+\" must be implemented: \"+comp.getClass());\n\t\t\t\tmedia = ((Viewable)comp).getView(k >= 0 ? pi.substring(k): \"\");\n\t\t\t\tif (media == null) {\n\t\t\t\t\tresponse.sendError(response.SC_GONE, \"Media not found in \"+comp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tuieng.deactivate(exec);\n\t\t\t}\n\t\t} catch (ComponentNotFoundException ex) {\n\t\t\t//possible because view might be as late as origin comp is gone\n\t\t\tresponse.sendError(response.SC_GONE, Messages.get(MZk.UPDATE_OBSOLETE_PAGE, uuid));\n\t\t\treturn;\n\t\t}\n\n\t\t//reading an image and send it back to client\n\t\tfinal String ctype = media.getContentType();\n\t\tif (ctype != null)\n\t\t\tresponse.setContentType(ctype);\n\n\t\tif (!media.inMemory()) {\n\t\t\tif (media.isBinary()) {\n\t\t\t\tfinal ServletOutputStream out = response.getOutputStream();\n\t\t\t\tFiles.copy(out, media.getStreamData());\n\t\t\t\tout.flush();\n\t\t\t} else {\n\t\t\t\tfinal Writer out = response.getWriter();\n\t\t\t\tFiles.copy(out, media.getReaderData());\n\t\t\t\tout.flush();\n\t\t\t}\n\t\t\treturn; //done;\n\t\t}\n\n\t\tfinal ServletOutputStream out = response.getOutputStream();\n\t\tfinal byte[] data = media.isBinary() ? media.getByteData():\n\t\t\tmedia.getStringData().getBytes(\"UTF-8\");\n\t\tresponse.setContentLength(data.length);\n\t\tout.write(data);\n\t\tout.flush();\n\t\t//FUTURE: support last-modified\n\t}","id":94658,"modified_method":"/** Retrieves the response from {@link Viewable#getView}.\n\t */\n\tpublic static final void process(Session sess, ServletContext ctx,\n\tHttpServletRequest request, HttpServletResponse response, String pi)\n\tthrows ServletException, IOException {\n//\t\tif (D.ON && log.debugable()) log.debug(\"View \"+pi);\n\n\t\tif (pi.length() == 0 || pi.charAt(0) != '/')\n\t\t\tthrow new ServletException(\"Wrong path info: \"+pi);\n\t\tint j = pi.indexOf('/', 1);\n\t\tif (j < 0)\n\t\t\tthrow new ServletException(\"Wrong path info: \"+pi);\n\n\t\tfinal String dtid = pi.substring(1, j);\n\t\tfinal int k = pi.indexOf('/', ++j);\n\t\tfinal String uuid = k >= 0 ? pi.substring(j, k): pi.substring(j);\n\n\t\tfinal Media media;\n\t\ttry {\n\t\t\tfinal WebApp wapp = sess.getWebApp();\n\t\t\tfinal WebAppCtrl wappc = (WebAppCtrl)wapp;\n\t\t\tfinal UiEngine uieng = wappc.getUiEngine();\n\t\t\tfinal Desktop desktop = wappc.getDesktopCache(sess).getDesktop(dtid);\n\n\t\t\tfinal Execution exec = new ExecutionImpl(\n\t\t\t\tctx, request, response, desktop, null);\n\t\t\tfinal Configuration config = wapp.getConfiguration();\n\t\t\tconfig.invokeExecutionInits(exec);\n\t\t\tuieng.activate(exec);\n\t\t\ttry {\n\t\t\t\tfinal Component comp = desktop.getComponentByUuid(uuid);\n\t\t\t\tif (!(comp instanceof Viewable))\n\t\t\t\t\tthrow new ServletException(Viewable.class+\" must be implemented: \"+comp.getClass());\n\t\t\t\tmedia = ((Viewable)comp).getView(k >= 0 ? pi.substring(k): \"\");\n\t\t\t\tif (media == null) {\n\t\t\t\t\tresponse.sendError(response.SC_GONE, \"Media not found in \"+comp);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tuieng.deactivate(exec);\n\t\t\t\tconfig.invokeExecutionCleanups(exec);\n\t\t\t}\n\t\t} catch (ComponentNotFoundException ex) {\n\t\t\t//possible because view might be as late as origin comp is gone\n\t\t\tresponse.sendError(response.SC_GONE, Messages.get(MZk.UPDATE_OBSOLETE_PAGE, uuid));\n\t\t\treturn;\n\t\t}\n\n\t\t//reading an image and send it back to client\n\t\tfinal String ctype = media.getContentType();\n\t\tif (ctype != null)\n\t\t\tresponse.setContentType(ctype);\n\n\t\tif (!media.inMemory()) {\n\t\t\tif (media.isBinary()) {\n\t\t\t\tfinal ServletOutputStream out = response.getOutputStream();\n\t\t\t\tFiles.copy(out, media.getStreamData());\n\t\t\t\tout.flush();\n\t\t\t} else {\n\t\t\t\tfinal Writer out = response.getWriter();\n\t\t\t\tFiles.copy(out, media.getReaderData());\n\t\t\t\tout.flush();\n\t\t\t}\n\t\t\treturn; //done;\n\t\t}\n\n\t\tfinal ServletOutputStream out = response.getOutputStream();\n\t\tfinal byte[] data = media.isBinary() ? media.getByteData():\n\t\t\tmedia.getStringData().getBytes(\"UTF-8\");\n\t\tresponse.setContentLength(data.length);\n\t\tout.write(data);\n\t\tout.flush();\n\t\t//FUTURE: support last-modified\n\t}","commit_id":"acd28ab047f2cb97df8ead632b0db97406a1f8fa","url":"https://github.com/zkoss/zk"},{"original_method":"@Override\n        public void addOutgoingDependencies(ResolveData resolveData, ResolveState resolveState, List<ResolvePath> queue) {\n            ModuleDescriptor targetDescriptor = targetModuleRevision.descriptor;\n            if (targetDescriptor == null) {\n                throw new IllegalStateException(String.format(\"No descriptor for %s.\", targetModuleRevision));\n            }\n\n            IvyNode node = new IvyNode(resolveData, targetDescriptor);\n            Set<String> targets = new LinkedHashSet<String>();\n            for (String targetConfiguration : targetConfigurations) {\n                Collections.addAll(targets, node.getRealConfs(targetConfiguration));\n            }\n\n            for (String targetConfigurationName : targets) {\n                ConfigurationResolveState targetConfiguration = resolveState.getConfiguration(targetDescriptor, targetConfigurationName);\n                LOGGER.debug(\"{} is outgoing to {}.\", this, targetConfiguration);\n                targetConfiguration.addIncomingPath(this);\n                if (from.isTransitive() && dependency.isTransitive()) {\n                    targetConfiguration.addOutgoingDependencies(this, resolveState, queue);\n                }\n            }\n        }","id":94659,"modified_method":"@Override\n        public void addOutgoingDependencies(ResolveData resolveData, ResolveState resolveState, List<ResolvePath> queue) {\n            ModuleDescriptor targetDescriptor = targetModuleRevision.descriptor;\n            if (targetDescriptor == null) {\n                throw new IllegalStateException(String.format(\"No descriptor for %s.\", targetModuleRevision));\n            }\n\n            IvyNode node = new IvyNode(resolveData, targetDescriptor);\n            Set<String> targets = new LinkedHashSet<String>();\n            for (String targetConfiguration : targetConfigurations) {\n                Collections.addAll(targets, node.getRealConfs(targetConfiguration));\n            }\n\n            for (String targetConfigurationName : targets) {\n                // TODO - this is the wrong spot for this check\n                if (targetDescriptor.getConfiguration(targetConfigurationName) == null) {\n                    throw new RuntimeException(String.format(\"Module version group:%s, module:%s, version:%s, configuration:%s declares a dependency on configuration '%s' which is not declared in the module descriptor for group:%s, module:%s, version:%s\",\n                            from.moduleRevision.id.getOrganisation(), from.moduleRevision.id.getName(), from.moduleRevision.id.getRevision(), from.configurationName,\n                            targetConfigurationName, targetModuleRevision.id.getOrganisation(), targetModuleRevision.id.getName(), targetModuleRevision.id.getRevision()));\n                }\n                ConfigurationResolveState targetConfiguration = resolveState.getConfiguration(targetDescriptor, targetConfigurationName);\n                LOGGER.debug(\"{} is outgoing to {}.\", this, targetConfiguration);\n                targetConfiguration.addIncomingPath(this);\n                if (from.isTransitive() && dependency.isTransitive()) {\n                    targetConfiguration.addOutgoingDependencies(this, resolveState, queue);\n                }\n            }\n        }","commit_id":"9c57029a7af164867e9c25ca4f348fa15629b595","url":"https://github.com/gradle/gradle"},{"original_method":"private void checkDescriptor(ModuleDescriptor descriptor) {\n            if (!copy(descriptor.getModuleRevisionId()).equals(copy(dependencyDescriptor.getDependencyRevisionId()))) {\n                onUnexpectedModuleRevisionId(descriptor);\n            }\n        }","id":94660,"modified_method":"private void checkDescriptor(ModuleDescriptor descriptor) {\n            ModuleRevisionId id = descriptor.getModuleRevisionId();\n            if (!copy(id).equals(copy(dependencyDescriptor.getDependencyRevisionId()))) {\n                onUnexpectedModuleRevisionId(descriptor);\n            }\n            for (Configuration configuration : descriptor.getConfigurations()) {\n                for (String parent : configuration.getExtends()) {\n                    if (descriptor.getConfiguration(parent) == null) {\n                        throw new ModuleVersionResolveException(String.format(\"Configuration '%s' extends unknown configuration '%s' in module descriptor for group:%s, module:%s, version:%s.\",\n                                configuration.getName(), parent, id.getOrganisation(), id.getName(), id.getRevision()));\n                    }\n                }\n            }\n        }","commit_id":"9c57029a7af164867e9c25ca4f348fa15629b595","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\r\n        public boolean excludes(ModuleRevisionResolveState moduleRevision) {\r\n            String[] configurations = from.heirarchy.toArray(new String[from.heirarchy.size()]);\r\n            ArtifactId placeholderArtifact = new ArtifactId(moduleRevision.descriptor.getModuleRevisionId().getModuleId(), \"ivy\", \"ivy\", \"ivy\");\r\n            boolean excluded = dependency.descriptor.doesExclude(configurations, placeholderArtifact);\r\n            if (excluded) {\r\n                LOGGER.debug(\"{} is excluded by {}.\", moduleRevision, this);\r\n                return true;\r\n            }\r\n            excluded = from.descriptor.doesExclude(configurations, placeholderArtifact);\r\n            if (excluded) {\r\n                LOGGER.debug(\"{} is excluded by {}.\", moduleRevision, from);\r\n                return true;\r\n            }\r\n            return path.excludes(moduleRevision);\r\n        }","id":94661,"modified_method":"@Override\n        public boolean excludes(ModuleRevisionResolveState moduleRevision) {\n            String[] configurations = from.heirarchy.toArray(new String[from.heirarchy.size()]);\n            ArtifactId placeholderArtifact = new ArtifactId(moduleRevision.id.getModuleId(), \"ivy\", \"ivy\", \"ivy\");\n            boolean excluded = dependency.descriptor.doesExclude(configurations, placeholderArtifact);\n            if (excluded) {\n                LOGGER.debug(\"{} is excluded by {}.\", moduleRevision, this);\n                return true;\n            }\n            excluded = from.descriptor.doesExclude(configurations, placeholderArtifact);\n            if (excluded) {\n                LOGGER.debug(\"{} is excluded by {}.\", moduleRevision, from);\n                return true;\n            }\n            return path.excludes(moduleRevision);\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"private ModuleRevisionResolveState(ModuleDescriptor descriptor) {\r\n            this.descriptor = descriptor;\r\n        }","id":94662,"modified_method":"private ModuleRevisionResolveState(ModuleRevisionId id, ModuleDescriptor descriptor) {\n            this.id = id;\n            this.descriptor = descriptor;\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\r\n        public String toString() {\r\n            return String.format(\"%s(%s)\", descriptor.getModuleRevisionId(), configurationName);\r\n        }","id":94663,"modified_method":"@Override\n        public String toString() {\n            return String.format(\"%s(%s)\", moduleRevision, configurationName);\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"ConfigurationResolveState getConfiguration(ModuleDescriptor descriptor, String configurationName) {\r\n            ResolvedConfigurationIdentifier id = new ResolvedConfigurationIdentifier(descriptor.getModuleRevisionId(), configurationName);\r\n            ConfigurationResolveState configuration = configurations.get(id);\r\n            if (configuration == null) {\r\n                ModuleRevisionResolveState moduleRevision = getRevision(descriptor);\r\n                configuration = new ConfigurationResolveState(moduleRevision, descriptor, configurationName, this);\r\n                configurations.put(id, configuration);\r\n            }\r\n            return configuration;\r\n        }","id":94664,"modified_method":"ConfigurationResolveState getConfiguration(ModuleDescriptor descriptor, String configurationName) {\n            ModuleRevisionId original = descriptor.getModuleRevisionId();\n            ResolvedConfigurationIdentifier id = new ResolvedConfigurationIdentifier(original.getOrganisation(), original.getName(), original.getRevision(), configurationName);\n            ConfigurationResolveState configuration = configurations.get(id);\n            if (configuration == null) {\n                ModuleRevisionResolveState moduleRevision = getRevision(descriptor);\n                configuration = new ConfigurationResolveState(moduleRevision, descriptor, configurationName, this);\n                configurations.put(id, configuration);\n            }\n            return configuration;\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"ModuleRevisionResolveState getRevision(ModuleDescriptor descriptor) {\r\n            ModuleRevisionResolveState moduleRevision = revisions.get(descriptor.getModuleRevisionId());\r\n            if (moduleRevision == null) {\r\n                moduleRevision = new ModuleRevisionResolveState(descriptor);\r\n                revisions.put(descriptor.getModuleRevisionId(), moduleRevision);\r\n                ModuleId moduleId = descriptor.getModuleRevisionId().getModuleId();\r\n                modules.put(moduleId, moduleRevision);\r\n                Set<ModuleRevisionResolveState> revisionsForModule = modules.get(moduleId);\r\n                if (revisionsForModule.size() > 1) {\r\n                    for (ModuleRevisionResolveState revision : revisionsForModule) {\r\n                        revision.status = Status.Conflict;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return moduleRevision;\r\n        }","id":94665,"modified_method":"ModuleRevisionResolveState getRevision(ModuleDescriptor descriptor) {\n            ModuleRevisionId original = descriptor.getModuleRevisionId();\n            ModuleRevisionId id = new ModuleRevisionId(new ModuleId(original.getOrganisation(), original.getName()), original.getRevision());\n            ModuleRevisionResolveState moduleRevision = revisions.get(id);\n            if (moduleRevision == null) {\n                moduleRevision = new ModuleRevisionResolveState(id, descriptor);\n                revisions.put(id, moduleRevision);\n                ModuleId moduleId = id.getModuleId();\n                modules.put(moduleId, moduleRevision);\n                Set<ModuleRevisionResolveState> revisionsForModule = modules.get(moduleId);\n                if (revisionsForModule.size() > 1) {\n                    for (ModuleRevisionResolveState revision : revisionsForModule) {\n                        revision.status = Status.Conflict;\n                    }\n                }\n            }\n\n            return moduleRevision;\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultResolvedDependency getResult() {\r\n            if (result == null) {\r\n                result = new DefaultResolvedDependency(\r\n                        descriptor.getModuleRevisionId().getOrganisation(),\r\n                        descriptor.getModuleRevisionId().getName(),\r\n                        descriptor.getModuleRevisionId().getRevision(),\r\n                        configurationName);\r\n            }\r\n\r\n            return result;\r\n        }","id":94666,"modified_method":"public DefaultResolvedDependency getResult() {\n            if (result == null) {\n                result = new DefaultResolvedDependency(\n                        moduleRevision.id.getOrganisation(),\n                        moduleRevision.id.getName(),\n                        moduleRevision.id.getRevision(),\n                        configurationName);\n            }\n\n            return result;\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"public String getId() {\r\n            ModuleRevisionId id = descriptor.getModuleRevisionId();\r\n            return String.format(\"%s:%s:%s\", id.getOrganisation(), id.getName(), id.getRevision());\r\n        }","id":94667,"modified_method":"public String getId() {\n            return String.format(\"%s:%s:%s\", id.getOrganisation(), id.getName(), id.getRevision());\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"private void resolve(DependencyToModuleResolver resolver, ResolvedConfigurationImpl result, ConfigurationResolveState root, ResolveState resolveState, ResolveData resolveData, ArtifactToFileResolver artifactResolver, ModuleConflictResolver conflictResolver) {\r\n        LOGGER.debug(\"Resolving {}\", root);\r\n\r\n        SetMultimap<ModuleId, DependencyResolvePath> conflicts = LinkedHashMultimap.create();\r\n\r\n        List<DependencyResolvePath> queue = new ArrayList<DependencyResolvePath>();\r\n        root.addOutgoingDependencies(new RootPath(), queue);\r\n\r\n        while (!queue.isEmpty() || !conflicts.isEmpty()) {\r\n            if (queue.isEmpty()) {\r\n                ModuleId moduleId = conflicts.keySet().iterator().next();\r\n                Set<ModuleRevisionResolveState> candidates = resolveState.getRevisions(moduleId);\r\n                ModuleRevisionResolveState selected = conflictResolver.select(candidates, root.moduleRevision);\r\n                LOGGER.debug(\"Selected {} from conflicting modules {}.\", selected, candidates);\r\n                selected.status = Status.Include;\r\n                for (ModuleRevisionResolveState candidate : candidates) {\r\n                    if (candidate != selected) {\r\n                        candidate.status = Status.Evict;\r\n                        for (DependencyResolvePath path : new LinkedHashSet<DependencyResolvePath>(candidate.incomingPaths)) {\r\n                            path.restart(selected, queue);\r\n                        }\r\n                    }\r\n                }\r\n                Set<DependencyResolvePath> paths = conflicts.removeAll(moduleId);\r\n                for (DependencyResolvePath path : paths) {\r\n                    path.restart(selected, queue);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            DependencyResolvePath path = queue.remove(0);\r\n            LOGGER.debug(\"Visiting path {}.\", path);\r\n\r\n            try {\r\n                path.resolve(resolver, resolveState);\r\n            } catch (Throwable t) {\r\n                result.addUnresolvedDependency(path.dependency.descriptor, t);\r\n                continue;\r\n            }\r\n\r\n            if (path.targetModuleRevision.status == Status.Conflict) {\r\n                LOGGER.debug(\"Found a conflict. Park this path.\");\r\n                conflicts.put(path.targetModuleRevision.descriptor.getModuleRevisionId().getModuleId(), path);\r\n            } else {\r\n                path.addOutgoingDependencies(resolveData, resolveState, queue);\r\n            }\r\n        }\r\n\r\n        for (ConfigurationResolveState resolvedConfiguration : resolveState.getConfigurations()) {\r\n            resolvedConfiguration.attachToParents(resolvedArtifactFactory, artifactResolver, result);\r\n        }\r\n    }","id":94668,"modified_method":"private void resolve(DependencyToModuleResolver resolver, ResolvedConfigurationImpl result, ConfigurationResolveState root, ResolveState resolveState, ResolveData resolveData, ArtifactToFileResolver artifactResolver, ModuleConflictResolver conflictResolver) {\n        LOGGER.debug(\"Resolving {}\", root);\n\n        SetMultimap<ModuleId, DependencyResolvePath> conflicts = LinkedHashMultimap.create();\n\n        List<DependencyResolvePath> queue = new ArrayList<DependencyResolvePath>();\n        root.addOutgoingDependencies(new RootPath(), queue);\n\n        while (!queue.isEmpty() || !conflicts.isEmpty()) {\n            if (queue.isEmpty()) {\n                ModuleId moduleId = conflicts.keySet().iterator().next();\n                Set<ModuleRevisionResolveState> candidates = resolveState.getRevisions(moduleId);\n                ModuleRevisionResolveState selected = conflictResolver.select(candidates, root.moduleRevision);\n                LOGGER.debug(\"Selected {} from conflicting modules {}.\", selected, candidates);\n                selected.status = Status.Include;\n                for (ModuleRevisionResolveState candidate : candidates) {\n                    if (candidate != selected) {\n                        candidate.status = Status.Evict;\n                        for (DependencyResolvePath path : new LinkedHashSet<DependencyResolvePath>(candidate.incomingPaths)) {\n                            path.restart(selected, queue);\n                        }\n                    }\n                }\n                Set<DependencyResolvePath> paths = conflicts.removeAll(moduleId);\n                for (DependencyResolvePath path : paths) {\n                    path.restart(selected, queue);\n                }\n                continue;\n            }\n\n            DependencyResolvePath path = queue.remove(0);\n            LOGGER.debug(\"Visiting path {}.\", path);\n\n            try {\n                path.resolve(resolver, resolveState);\n            } catch (Throwable t) {\n                result.addUnresolvedDependency(path.dependency.descriptor, t);\n                continue;\n            }\n\n            if (path.targetModuleRevision.status == Status.Conflict) {\n                LOGGER.debug(\"Found a conflict. Park this path.\");\n                conflicts.put(path.targetModuleRevision.id.getModuleId(), path);\n            } else {\n                path.addOutgoingDependencies(resolveData, resolveState, queue);\n            }\n        }\n\n        for (ConfigurationResolveState resolvedConfiguration : resolveState.getConfigurations()) {\n            resolvedConfiguration.attachToParents(resolvedArtifactFactory, artifactResolver, result);\n        }\n    }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\r\n        public String toString() {\r\n            return descriptor.getModuleRevisionId().toString();\r\n        }","id":94669,"modified_method":"@Override\n        public String toString() {\n            return id.toString();\n        }","commit_id":"ea1efb16203888eb97671218e65bd1a01871fb37","url":"https://github.com/gradle/gradle"},{"original_method":"private static Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ) );\n    }","id":94670,"modified_method":"private Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ), this );\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n    }","id":94671,"modified_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n//        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n        this.storeDir = storeDir;\n        this.config = config;\n        this.brokerFactory = defaultBrokerFactory( storeDir, config );\n        this.machineId = getMachineIdFromConfig( config );\n        this.broker = brokerFactory.create();\n        reevaluateMyself();\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","id":94672,"modified_method":"private BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","id":94673,"modified_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            setMasterChangeWatcher( currentMasterId );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx )\n    {\n        this.servers = servers;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","id":94674,"modified_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx, ResponseReceiver receiver )\n    {\n        this.servers = servers;\n        this.receiver = receiver;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n    }","id":94675,"modified_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n        else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n        {\n            System.out.println( \"NodeDataChanged (most likely master-notify)\" );\n            receiver.somethingIsWrong( new Exception() );\n        }\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( \"wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","id":94676,"modified_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( this + \" wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx() );\n    }","id":94677,"modified_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers, ResponseReceiver receiver )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx(),\n                receiver );\n    }","commit_id":"f0c7b569848066075a264faf1b1f3768023392df","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n    }","id":94678,"modified_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n//        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n        this.storeDir = storeDir;\n        this.config = config;\n        this.brokerFactory = defaultBrokerFactory( storeDir, config );\n        this.machineId = getMachineIdFromConfig( config );\n        this.broker = brokerFactory.create();\n        reevaluateMyself();\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","id":94679,"modified_method":"private BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ) );\n    }","id":94680,"modified_method":"private Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ), this );\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","id":94681,"modified_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            setMasterChangeWatcher( currentMasterId );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx )\n    {\n        this.servers = servers;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","id":94682,"modified_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx, ResponseReceiver receiver )\n    {\n        this.servers = servers;\n        this.receiver = receiver;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( \"wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","id":94683,"modified_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( this + \" wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n    }","id":94684,"modified_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n        else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n        {\n            System.out.println( \"NodeDataChanged (most likely master-notify)\" );\n            receiver.somethingIsWrong( new Exception() );\n        }\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx() );\n    }","id":94685,"modified_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers, ResponseReceiver receiver )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx(),\n                receiver );\n    }","commit_id":"bf2747654b3933137b7b3d9e5895c09a033045c8","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","id":94686,"modified_method":"private BrokerFactory defaultBrokerFactory( final String storeDir,\n            final Map<String, String> config )\n    {\n        return new BrokerFactory()\n        {\n            public Broker create()\n            {\n                return instantiateBroker( storeDir, config );\n            }\n        };\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n    }","id":94687,"modified_method":"/**\n     * Will instantiate its own ZooKeeper broker\n     */\n    public HighlyAvailableGraphDatabase( String storeDir, Map<String, String> config )\n    {\n//        this( storeDir, config, defaultBrokerFactory( storeDir, config ) );\n        this.storeDir = storeDir;\n        this.config = config;\n        this.brokerFactory = defaultBrokerFactory( storeDir, config );\n        this.machineId = getMachineIdFromConfig( config );\n        this.broker = brokerFactory.create();\n        reevaluateMyself();\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ) );\n    }","id":94688,"modified_method":"private Broker instantiateBroker( String storeDir, Map<String, String> config )\n    {\n        return new ZooKeeperBroker( storeDir,\n                getMachineIdFromConfig( config ),\n                getZooKeeperServersFromConfig( config ),\n                getHaServersFromConfig( config ), this );\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","id":94689,"modified_method":"public synchronized int getMaster()\n    {\n        waitForSyncConnected();\n        try\n        {\n            Map<Integer, Pair<Integer, Long>> rawData = new HashMap<Integer, Pair<Integer,Long>>();\n            String root = getRoot();\n            List<String> children = zooKeeper.getChildren( root, false );\n            int currentMasterId = -1;\n            int lowestSeq = Integer.MAX_VALUE;\n            long highestTxId = -1;\n            for ( String child : children )\n            {\n                int index = child.indexOf( '_' );\n                int id = Integer.parseInt( child.substring( 0, index ) );\n                int seq = Integer.parseInt( child.substring( index + 1 ) );                \n                try\n                {\n                    byte[] data = zooKeeper.getData( root + \"/\" + child, false, \n                        null );\n                    ByteBuffer buf = ByteBuffer.wrap( data );\n                    long tx = buf.getLong();\n                    if ( rawData.put( id, new Pair<Integer, Long>( seq, tx ) ) != null )\n                    {\n                        System.out.println( \"warning: \" + id + \" found more than once\" );\n                    }\n                    if ( tx >= highestTxId )\n                    {\n                        if ( tx > highestTxId || seq < lowestSeq )\n                        {\n                            currentMasterId = id;\n                            lowestSeq = seq;\n                        }\n                        highestTxId = tx;\n                    }\n                }\n                catch ( KeeperException inner )\n                {\n                    if ( inner.code() != KeeperException.Code.NONODE )\n                    {\n                        throw new ZooKeeperException( \"Unabe to get master.\", \n                            inner );\n                    }\n                }\n            }\n            System.out.println( \"getMaster: \" + currentMasterId + \" based on \" + rawData );\n            setMasterChangeWatcher( currentMasterId );\n            return currentMasterId;\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to get master\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Interrupted.\", e );\n        }\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n    }","id":94690,"modified_method":"public void process( WatchedEvent event )\n    {\n        System.out.println( this + \", \" + new Date() + \" Got event: \" + event + \"(path=\" + event.getPath() + \")\" );\n        if ( event.getState() == Watcher.Event.KeeperState.Expired )\n        {\n            keeperState = KeeperState.Expired;\n            instantiateZooKeeper();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n        {\n            keeperState = KeeperState.SyncConnected;\n            sequenceNr = setup();\n        }\n        else if ( event.getState() == Watcher.Event.KeeperState.Disconnected )\n        {\n            keeperState = KeeperState.Disconnected;\n        }\n        else if ( event.getType() == Watcher.Event.EventType.NodeDataChanged )\n        {\n            System.out.println( \"NodeDataChanged (most likely master-notify)\" );\n            receiver.somethingIsWrong( new Exception() );\n        }\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx )\n    {\n        this.servers = servers;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","id":94691,"modified_method":"public ZooClient( String servers, int machineId, long storeCreationTime, \n        long storeId, long committedTx, ResponseReceiver receiver )\n    {\n        this.servers = servers;\n        this.receiver = receiver;\n        instantiateZooKeeper();\n        this.machineId = machineId;\n        this.storeCreationTime = storeCreationTime;\n        this.storeId = storeId;\n        this.committedTx = committedTx;\n        this.sequenceNr = \"not initialized yet\";\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( \"wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","id":94692,"modified_method":"private String setup()\n    {\n        try\n        {\n            cleanupChildren();\n            String root = getRoot();\n            String path = root + \"/\" + machineId + \"_\";\n            byte[] data = new byte[8];\n            ByteBuffer buf = ByteBuffer.wrap( data );\n            buf.putLong( committedTx );\n            String created = zooKeeper.create( path, data, \n                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL );\n            System.out.println( this + \" wrote \" + committedTx + \" to zookeeper\" );\n            return created.substring( created.lastIndexOf( \"_\" ) + 1 );\n        }\n        catch ( KeeperException e )\n        {\n            throw new ZooKeeperException( \"Unable to setup\", e );\n        }\n        catch ( InterruptedException e )\n        {\n            Thread.interrupted();\n            throw new ZooKeeperException( \"Setup got interrupted\", e );\n        }\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx() );\n    }","id":94693,"modified_method":"public ZooKeeperBroker( String storeDir, int machineId, String zooKeeperServers, \n            Map<Integer,String> haServers, ResponseReceiver receiver )\n    {\n        this.machineId = machineId;\n        this.haServers = haServers;\n        NeoStoreUtil store = new NeoStoreUtil( storeDir ); \n        this.zooClient = new ZooClient( zooKeeperServers, machineId, \n                store.getCreationTime(), store.getStoreId(), store.getLastCommittedTx(),\n                receiver );\n    }","commit_id":"021e8d466d3bc30b995903295f536ff2d81673d0","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Unlocks all resources in the folder\n     *\n     * @param cms The CmsObject for accessing system resources\n     * @param resource The resource to unlock\n     */\n    private void unlockResource(CmsObject cms, CmsResource resource) throws CmsException{\n        // if the folder itself is locked, all subresources are unlocked by unlocking the folder\n        if(resource.isLocked()){\n            // first lock resource to set locked by to the current user\n            cms.lockResource(resource.getAbsolutePath(),true);\n            cms.unlockResource(resource.getAbsolutePath());\n        } else {\n            // need to unlock each resource\n            Vector allFiles = cms.getFilesInFolder(resource.getAbsolutePath());\n            Vector allFolders = cms.getSubFolders(resource.getAbsolutePath());\n            // unlock the files\n            for(int i=0; i<allFiles.size(); i++){\n                CmsResource curFile = (CmsResource)allFiles.elementAt(i);\n                if(curFile.isLocked()){\n                    cms.unlockResource(curFile.getAbsolutePath());\n                }\n            }\n            // unlock the folders\n            for(int j=0; j<allFolders.size(); j++){\n                CmsResource curFolder = (CmsResource)allFolders.elementAt(j);\n                unlockResource(cms, curFolder);\n            }\n        }\n    }","id":94694,"modified_method":"/**\n     * Unlocks all resources in the folder\n     *\n     * @param cms The CmsObject for accessing system resources\n     * @param resource The resource to unlock\n     */\n    private void unlockResource(CmsObject cms, CmsResource resource) throws CmsException{\n        // if the folder itself is locked, all subresources are unlocked by unlocking the folder\n        if(resource.isLocked()){\n            // first lock resource to set locked by to the current user\n            if(resource.isLockedBy() != cms.getRequestContext().currentUser().getId()){\n                cms.lockResource(resource.getAbsolutePath(),true);\n            }\n            cms.unlockResource(resource.getAbsolutePath());\n        } else {\n            // need to unlock each resource\n            Vector allFiles = cms.getFilesInFolder(resource.getAbsolutePath());\n            Vector allFolders = cms.getSubFolders(resource.getAbsolutePath());\n            // unlock the files\n            for(int i=0; i<allFiles.size(); i++){\n                CmsResource curFile = (CmsResource)allFiles.elementAt(i);\n                if(curFile.isLocked()){\n                    if(resource.isLockedBy() != cms.getRequestContext().currentUser().getId()){\n                        cms.lockResource(curFile.getAbsolutePath(),true);\n                    }\n                    cms.unlockResource(curFile.getAbsolutePath());\n                }\n            }\n            // unlock the folders\n            for(int j=0; j<allFolders.size(); j++){\n                CmsResource curFolder = (CmsResource)allFolders.elementAt(j);\n                unlockResource(cms, curFolder);\n            }\n        }\n    }","commit_id":"86581625d01a7224c157506195210a33cbbfe7a2","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Changes the <code>\"ade.sitemap\"<\/code> property to use a configuration without an exportname.<p>\n     * \n     * @return true if the change was successful\n     * \n     * @throws Exception if something goes wrong\n     */\n    private boolean changeToNormal() throws Exception {\n\n        CmsObject adminCms = getCmsObject();\n        adminCms.getRequestContext().setSiteRoot(\"/\");\n        if (adminCms.getLock(adminCms.readResource(\"/sites/default/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/sites/default/\");\n            CmsProperty sitemapProp = new CmsProperty(\"ade.sitemap\", \"/_config/sitemap\", \"/_config/sitemap\", true);\n            adminCms.writePropertyObject(\"/sites/default/\", sitemapProp);\n            OpenCms.getPublishManager().publishProject(adminCms);\n            OpenCms.getPublishManager().waitWhileRunning();\n            OpenCms.getMemoryMonitor().clearCache();\n            return true;\n        }\n        return false;\n    }","id":94695,"modified_method":"/**\n     * Changes the <code>\"ade.sitemap\"<\/code> property to use a configuration without an exportname.<p>\n     * \n     * @return true if the change was successful\n     * \n     * @throws Exception if something goes wrong\n     */\n    private boolean changeToNormal() throws Exception {\n\n        boolean success = true;\n        CmsObject adminCms = getCmsObject();\n        adminCms.getRequestContext().setSiteRoot(\"/\");\n        if (adminCms.getLock(adminCms.readResource(\"/sites/default/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/sites/default/\");\n            CmsProperty sitemapProp = new CmsProperty(\"ade.sitemap\", \"/_config/sitemap\", \"/_config/sitemap\", true);\n            adminCms.writePropertyObject(\"/sites/default/\", sitemapProp);\n        } else {\n            success = false;\n        }\n        if (adminCms.getLock(adminCms.readResource(\"/system/modules/org.opencms.ade.sitemap/schemas/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/system/modules/org.opencms.ade.sitemap/schemas/\");\n            CmsProperty exportNameProp = new CmsProperty(\"exportname\", \"\", \"\", true);\n            adminCms.writePropertyObject(\"/system/modules/org.opencms.ade.sitemap/schemas/\", exportNameProp);\n        } else {\n            success = false;\n        }\n        OpenCms.getPublishManager().publishProject(adminCms);\n        OpenCms.getPublishManager().waitWhileRunning();\n        OpenCms.getMemoryMonitor().clearCache();\n        return success;\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests if the static export data object returned by the method \n     * {@link CmsStaticExportManager#getVfsNameInternal(CmsObject, String)}\n     * is identical to the expected data objects defined in the file\n     * <code>\"export-data.txt\"<\/code> in this package.<p>\n     * \n     * @throws Exception if something goes wrong\n     */\n    public void testVfsNameInternal() throws Exception {\n\n        echo(\"Testing get vfs name internal\");\n\n        if (changeToNormal()) {\n            createTmpFile();\n            // set the export mode to export immediately after publishing resources\n            OpenCms.getStaticExportManager().setHandler(\"org.opencms.staticexport.CmsOnDemandStaticExportHandler\");\n            CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserExport());\n            List<CmsSitemapEntry> rootEntries = OpenCms.getSitemapManager().getRootSitemapRootEntries(cms);\n            for (CmsSitemapEntry rootEntry : rootEntries) {\n                CmsInternalSitemapEntry entry = (CmsInternalSitemapEntry)rootEntry;\n                List<CmsInternalSitemapEntry> entries = entry.getSubEntries();\n                testEntries(entries);\n            }\n            File tobeExportDataFile = new File(getClass().getResource(\"export-data.txt\").getFile());\n            assertTrue(compareFiles(TMP_FILE, tobeExportDataFile));\n            deleteTmpFile();\n        } else {\n            assertTrue(false);\n        }\n    }","id":94696,"modified_method":"/**\n     * Tests if the static export data object returned by the method \n     * {@link CmsStaticExportManager#getVfsNameInternal(CmsObject, String)}\n     * is identical to the expected data objects defined in the file\n     * <code>\"export-data.txt\"<\/code> in this package.<p>\n     * \n     * @throws Exception if something goes wrong\n     */\n    public void testVfsNameInternal() throws Exception {\n\n        echo(\"Testing get vfs name internal\");\n\n        if (changeToNormal()) {\n            File tobeExportDataFile = new File(getClass().getResource(\"export-data.txt\").getFile());\n            testVfsInt(tobeExportDataFile, null);\n        } else {\n            assertTrue(false);\n        }\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Changes the <code>\"ade.sitemap\"<\/code> property to use a configuration with an exportname.<p>\n     * \n     * @return true if the change was successful\n     * \n     * @throws Exception if something goes wrong\n     */\n    private boolean changeToExportName() throws Exception {\n\n        CmsObject adminCms = getCmsObject();\n        adminCms.getRequestContext().setSiteRoot(\"/\");\n        if (adminCms.getLock(adminCms.readResource(\"/sites/default/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/sites/default/\");\n            CmsProperty sitemapProp = new CmsProperty(\n                \"ade.sitemap\",\n                \"/_config/sitemap_exportname\",\n                \"/_config/sitemap_exportname\",\n                true);\n            adminCms.writePropertyObject(\"/sites/default/\", sitemapProp);\n            OpenCms.getPublishManager().publishProject(adminCms);\n            OpenCms.getPublishManager().waitWhileRunning();\n            OpenCms.getMemoryMonitor().clearCache();\n            return true;\n        }\n        return false;\n    }","id":94697,"modified_method":"/**\n     * Changes the <code>\"ade.sitemap\"<\/code> property to use a configuration with an exportname.<p>\n     * \n     * @return true if the change was successful\n     * \n     * @throws Exception if something goes wrong\n     */\n    private boolean changeToExportName() throws Exception {\n\n        boolean success = true;\n        CmsObject adminCms = getCmsObject();\n        adminCms.getRequestContext().setSiteRoot(\"/\");\n        if (adminCms.getLock(adminCms.readResource(\"/sites/default/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/sites/default/\");\n            CmsProperty sitemapProp = new CmsProperty(\n                \"ade.sitemap\",\n                \"/_config/sitemap_exportname\",\n                \"/_config/sitemap_exportname\",\n                true);\n            adminCms.writePropertyObject(\"/sites/default/\", sitemapProp);\n        } else {\n            success = false;\n        }\n        if (adminCms.getLock(adminCms.readResource(\"/system/modules/org.opencms.ade.sitemap/schemas/\")).isLockableBy(\n            adminCms.getRequestContext().currentUser())) {\n            adminCms.lockResource(\"/system/modules/org.opencms.ade.sitemap/schemas/\");\n            CmsProperty exportNameProp = new CmsProperty(\"exportname\", \"sitemap-schemas\", \"sitemap-schemas\", true);\n            adminCms.writePropertyObject(\"/system/modules/org.opencms.ade.sitemap/schemas/\", exportNameProp);\n        } else {\n            success = false;\n        }\n        OpenCms.getPublishManager().publishProject(adminCms);\n        OpenCms.getPublishManager().waitWhileRunning();\n        OpenCms.getMemoryMonitor().clearCache();\n        return success;\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n\n        TestSuite suite = new TestSuite();\n        suite.setName(TestCmsStaticExportManagerWithSitemap.class.getName());\n\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testIsExportLink\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testRfsName\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testRfsNameWithExportName\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternal\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternalWithExportname\"));\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            @Override\n            protected void setUp() {\n\n                setupOpenCms(\"ade-modules\", \"/\");\n                importData(\"ade-content\", \"/\");\n            }\n\n            @Override\n            protected void tearDown() {\n\n                removeOpenCms();\n                try {\n                    deleteTmpFile();\n                } catch (Exception e) {\n                    System.out.println(e.getLocalizedMessage());\n                }\n            }\n        };\n        return wrapper;\n    }","id":94698,"modified_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n\n        TestSuite suite = new TestSuite();\n        suite.setName(TestCmsStaticExportManagerWithSitemap.class.getName());\n\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testIsExportLink\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testRfsName\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testRfsNameWithExportName\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternal\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternalWithExportname\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternalWithParameters\"));\n        suite.addTest(new TestCmsStaticExportManagerWithSitemap(\"testVfsNameInternalWithExportnameAndParameters\"));\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            @Override\n            protected void setUp() {\n\n                setupOpenCms(\"ade-modules\", \"/\");\n                importData(\"ade-content\", \"/\");\n            }\n\n            @Override\n            protected void tearDown() {\n\n                removeOpenCms();\n                try {\n                    deleteTmpFile();\n                } catch (Exception e) {\n                    System.out.println(e.getLocalizedMessage());\n                }\n            }\n        };\n        return wrapper;\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests if the static export data object returned by the method \n     * {@link CmsStaticExportManager#getVfsNameInternal(CmsObject, String)}\n     * is identical to the expected data objects defined in the file\n     * <code>\"export-data.txt\"<\/code> in this package.<p>\n     * \n     * @throws Exception throws an exception if something goes wrong\n     */\n    public void testVfsNameInternalWithExportname() throws Exception {\n\n        echo(\"Testing get vfs name internal with export name\");\n\n        if (changeToExportName()) {\n            createTmpFile();\n            // set the export mode to export immediately after publishing resources\n            OpenCms.getStaticExportManager().setHandler(\"org.opencms.staticexport.CmsOnDemandStaticExportHandler\");\n            CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserExport());\n            List<CmsSitemapEntry> rootEntries = OpenCms.getSitemapManager().getRootSitemapRootEntries(cms);\n            for (CmsSitemapEntry rootEntry : rootEntries) {\n                CmsInternalSitemapEntry entry = (CmsInternalSitemapEntry)rootEntry;\n                List<CmsInternalSitemapEntry> entries = entry.getSubEntries();\n                testEntries(entries);\n            }\n            File tobeExportDataFile = new File(getClass().getResource(\"export-data-exportname.txt\").getFile());\n            assertTrue(compareFiles(TMP_FILE, tobeExportDataFile));\n            deleteTmpFile();\n        } else {\n            assertTrue(false);\n        }\n    }","id":94699,"modified_method":"/**\n     * Tests if the static export data object returned by the method \n     * {@link CmsStaticExportManager#getVfsNameInternal(CmsObject, String)}\n     * is identical to the expected data objects defined in the file\n     * <code>\"export-data.txt\"<\/code> in this package.<p>\n     * \n     * @throws Exception throws an exception if something goes wrong\n     */\n    public void testVfsNameInternalWithExportname() throws Exception {\n\n        echo(\"Testing get vfs name internal with export name\");\n\n        if (changeToExportName()) {\n            File tobeExportDataFile = new File(getClass().getResource(\"export-data-exportname.txt\").getFile());\n            testVfsInt(tobeExportDataFile, null);\n        } else {\n            assertTrue(false);\n        }\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Goes over all sitemap entries and writes a temporary file with the\n     * information from the export data objects returned by the method\n     * {@link CmsStaticExportManager#getRfsExportData(CmsObject, String)}.<p>\n     * \n     * @param entries the root entries of all configured sitemaps\n     */\n    private void testEntries(List<CmsInternalSitemapEntry> entries) throws Exception {\n\n        CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserExport());\n        CmsStaticExportManager manager = OpenCms.getStaticExportManager();\n\n        for (CmsInternalSitemapEntry entry : entries) {\n\n            if (manager.isExportLink(cms, entry.getRootPath())) {\n\n                // get the rfsName for the current entry\n                String rfsName = manager.getRfsName(cms, entry.getRootPath());\n                // get the rfs prefix for the current entry\n                String rfsPrefix = OpenCms.getStaticExportManager().getRfsPrefixForRfsName(rfsName);\n                // substring the rfsName for the prefix\n                rfsName = rfsName.substring(rfsPrefix.length());\n\n                // execute the method to test\n                CmsStaticExportData data = manager.getVfsNameInternal(cms, rfsName);\n\n                // add the calculated rfs name to the data object\n                data.setRfsName(rfsName);\n\n                // write the object data to a pseudo xml file\n                if (TMP_FILE.exists()) {\n                    FileWriter fw = new FileWriter(TMP_FILE, true);\n                    PrintWriter out = new PrintWriter(fw);\n                    out.println(\"<exportdata>\");\n                    out.println(\"  <vfsName>\" + data.getVfsName() + \"<\/vfsName>\");\n                    out.println(\"  <rfsName>\" + data.getRfsName() + \"<\/rfsName>\");\n                    out.println(\"  <resName>\" + data.getResource().getRootPath() + \"<\/resName>\");\n                    out.println(\"  <parameters>\" + data.getParameters() + \"<\/parameters>\");\n                    out.println(\"<\/exportdata>\");\n                    out.close();\n                }\n            }\n            testEntries(entry.getSubEntries());\n        }\n    }","id":94700,"modified_method":"/**\n     * Goes over all sitemap entries and writes a temporary file with the\n     * information from the export data objects returned by the method\n     * {@link CmsStaticExportManager#getRfsExportData(CmsObject, String)}.<p>\n     * \n     * @param entries the root entries of all configured sitemaps\n     */\n    private void testEntries(List<CmsInternalSitemapEntry> entries, String parameters) throws Exception {\n\n        CmsObject cms = OpenCms.initCmsObject(OpenCms.getDefaultUsers().getUserExport());\n        CmsStaticExportManager manager = OpenCms.getStaticExportManager();\n\n        for (CmsInternalSitemapEntry entry : entries) {\n\n            CmsStaticExportData data;\n\n            // get the rfsName for the current entry\n            String rfsName = manager.getRfsName(cms, entry.getRootPath(), parameters);\n\n            // get the rfs prefix for the current entry\n            String rfsPrefix = OpenCms.getStaticExportManager().getRfsPrefixForRfsName(rfsName);\n            // substring the rfsName for the prefix\n            rfsName = rfsName.substring(rfsPrefix.length());\n            // execute the method to test\n            data = manager.getRfsExportData(cms, rfsName);\n            // add the calculated rfs name to the data object\n            data.setRfsName(rfsName);\n\n            // write the object data to a pseudo xml file\n            if (TMP_FILE.exists()) {\n                FileWriter fw = new FileWriter(TMP_FILE, true);\n                PrintWriter out = new PrintWriter(fw);\n                out.println(\"<exportdata>\");\n                out.println(\"  <vfsName>\" + data.getVfsName() + \"<\/vfsName>\");\n                out.println(\"  <rfsName>\" + data.getRfsName() + \"<\/rfsName>\");\n                out.println(\"  <resName>\" + data.getResource().getRootPath() + \"<\/resName>\");\n                out.println(\"  <parameters>\" + data.getParameters() + \"<\/parameters>\");\n                out.println(\"<\/exportdata>\");\n                out.close();\n            }\n\n            if (entry.isSitemap()) {\n                testEntries(entry.getSubEntries(), parameters);\n            }\n        }\n    }","commit_id":"dc3a5aa38c136c50fe12e6ff77d9fb489715f07a","url":"https://github.com/alkacon/opencms-core"},{"original_method":"@Override\n    public void render(Block html) {\n      Collection<FairSchedulerQueueInfo> subQueues = fsqinfo.qinfo.getChildQueues();\n      UL<Hamlet> ul = html.ul(\"#pq\");\n      for (FairSchedulerQueueInfo info : subQueues) {\n        float capacity = info.getMaxResourcesFraction();\n        float fairShare = info.getFairShareMemoryFraction();\n        float used = info.getUsedMemoryFraction();\n        LI<UL<Hamlet>> li = ul.\n          li().\n            a(_Q).$style(width(capacity * Q_MAX_WIDTH)).\n              $title(join(\"Fair Share:\", percent(fairShare))).\n              span().$style(join(Q_GIVEN, \";font-size:1px;\", width(fairShare/capacity))).\n                _('.')._().\n              span().$style(join(width(used/capacity),\n                \";font-size:1px;left:0%;\", used > fairShare ? Q_OVER : Q_UNDER)).\n                _('.')._().\n              span(\".q\", info.getQueueName())._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._();\n\n        fsqinfo.qinfo = info;\n        if (info instanceof FairSchedulerLeafQueueInfo) {\n          li.ul(\"#lq\").li()._(LeafQueueBlock.class)._()._();\n        } else {\n          li._(QueueBlock.class);\n        }\n        li._();\n      }\n\n      ul._();\n    }","id":94701,"modified_method":"@Override\n    public void render(Block html) {\n      Collection<FairSchedulerQueueInfo> subQueues = fsqinfo.qinfo.getChildQueues();\n      UL<Hamlet> ul = html.ul(\"#pq\");\n      for (FairSchedulerQueueInfo info : subQueues) {\n        float capacity = info.getMaxResourcesFraction();\n        float steadyFairShare = info.getSteadyFairShareMemoryFraction();\n        float instantaneousFairShare = info.getFairShareMemoryFraction();\n        float used = info.getUsedMemoryFraction();\n        LI<UL<Hamlet>> li = ul.\n          li().\n            a(_Q).$style(width(capacity * Q_MAX_WIDTH)).\n              $title(join(join(STEADY_FAIR_SHARE + \":\", percent(steadyFairShare)),\n                  join(\" \" + INSTANTANEOUS_FAIR_SHARE + \":\", percent(instantaneousFairShare)))).\n              span().$style(join(Q_GIVEN, \";font-size:1px;\", width(steadyFairShare / capacity))).\n                _('.')._().\n              span().$style(join(Q_INSTANTANEOUS_FS, \";font-size:1px;\",\n                  width(instantaneousFairShare/capacity))).\n                _('.')._().\n              span().$style(join(width(used/capacity),\n                \";font-size:1px;left:0%;\", used > instantaneousFairShare ? Q_OVER : Q_UNDER)).\n                _('.')._().\n              span(\".q\", info.getQueueName())._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._();\n\n        fsqinfo.qinfo = info;\n        if (info instanceof FairSchedulerLeafQueueInfo) {\n          li.ul(\"#lq\").li()._(LeafQueueBlock.class)._()._();\n        } else {\n          li._(QueueBlock.class);\n        }\n        li._();\n      }\n\n      ul._();\n    }","commit_id":"270a271f53f52a1f33e63a0520ae6032536dd4c6","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public void render(Block html) {\n      html._(MetricsOverviewTable.class);\n      UL<DIV<DIV<Hamlet>>> ul = html.\n        div(\"#cs-wrapper.ui-widget\").\n          div(\".ui-widget-header.ui-corner-top\").\n            _(\"Application Queues\")._().\n          div(\"#cs.ui-widget-content.ui-corner-bottom\").\n            ul();\n      if (fs == null) {\n        ul.\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              span().$style(Q_END)._(\"100% \")._().\n              span(\".q\", \"default\")._()._();\n      } else {\n        FairSchedulerInfo sinfo = new FairSchedulerInfo(fs);\n        fsqinfo.qinfo = sinfo.getRootQueueInfo();\n        float used = fsqinfo.qinfo.getUsedMemoryFraction();\n\n        ul.\n          li().$style(\"margin-bottom: 1em\").\n            span().$style(\"font-weight: bold\")._(\"Legend:\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_GIVEN).\n              _(\"Fair Share\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_UNDER).\n              _(\"Used\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_OVER).\n              _(\"Used (over fair share)\")._().\n            span().$class(\"qlegend ui-corner-all ui-state-default\").\n              _(\"Max Capacity\")._().\n        _().\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              span().$style(join(width(used), \";left:0%;\",\n                  used > 1 ? Q_OVER : Q_UNDER))._(\".\")._().\n              span(\".q\", \"root\")._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._().\n            _(QueueBlock.class)._();\n      }\n      ul._()._().\n      script().$type(\"text/javascript\").\n          _(\"$('#cs').hide();\")._()._().\n      _(FairSchedulerAppsBlock.class);\n    }","id":94702,"modified_method":"@Override\n    public void render(Block html) {\n      html._(MetricsOverviewTable.class);\n      UL<DIV<DIV<Hamlet>>> ul = html.\n        div(\"#cs-wrapper.ui-widget\").\n          div(\".ui-widget-header.ui-corner-top\").\n            _(\"Application Queues\")._().\n          div(\"#cs.ui-widget-content.ui-corner-bottom\").\n            ul();\n      if (fs == null) {\n        ul.\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              span().$style(Q_END)._(\"100% \")._().\n              span(\".q\", \"default\")._()._();\n      } else {\n        FairSchedulerInfo sinfo = new FairSchedulerInfo(fs);\n        fsqinfo.qinfo = sinfo.getRootQueueInfo();\n        float used = fsqinfo.qinfo.getUsedMemoryFraction();\n\n        ul.\n          li().$style(\"margin-bottom: 1em\").\n            span().$style(\"font-weight: bold\")._(\"Legend:\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_GIVEN).\n              $title(\"The steady fair shares consider all queues, \" +\n                  \"both active (with running applications) and inactive.\").\n              _(STEADY_FAIR_SHARE)._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_INSTANTANEOUS_FS).\n              $title(\"The instantaneous fair shares consider only active \" +\n                  \"queues (with running applications).\").\n              _(INSTANTANEOUS_FAIR_SHARE)._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_UNDER).\n              _(\"Used\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_OVER).\n              _(\"Used (over fair share)\")._().\n            span().$class(\"qlegend ui-corner-all ui-state-default\").\n              _(\"Max Capacity\")._().\n        _().\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              span().$style(join(width(used), \";left:0%;\",\n                  used > 1 ? Q_OVER : Q_UNDER))._(\".\")._().\n              span(\".q\", \"root\")._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._().\n            _(QueueBlock.class)._();\n      }\n      ul._()._().\n      script().$type(\"text/javascript\").\n          _(\"$('#cs').hide();\")._()._().\n      _(FairSchedulerAppsBlock.class);\n    }","commit_id":"270a271f53f52a1f33e63a0520ae6032536dd4c6","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    protected void render(Block html) {\n      ResponseInfo ri = info(\"\\'\" + qinfo.getQueueName() + \"\\' Queue Status\").\n          _(\"Used Resources:\", qinfo.getUsedResources().toString()).\n          _(\"Num Active Applications:\", qinfo.getNumActiveApplications()).\n          _(\"Num Pending Applications:\", qinfo.getNumPendingApplications()).\n          _(\"Min Resources:\", qinfo.getMinResources().toString()).\n          _(\"Max Resources:\", qinfo.getMaxResources().toString());\n      int maxApps = qinfo.getMaxApplications();\n      if (maxApps < Integer.MAX_VALUE) {\n          ri._(\"Max Running Applications:\", qinfo.getMaxApplications());\n      }\n      ri._(\"Fair Share:\", qinfo.getFairShare().toString());\n\n      html._(InfoBlock.class);\n\n      // clear the info contents so this queue's info doesn't accumulate into another queue's info\n      ri.clear();\n    }","id":94703,"modified_method":"@Override\n    protected void render(Block html) {\n      ResponseInfo ri = info(\"\\'\" + qinfo.getQueueName() + \"\\' Queue Status\").\n          _(\"Used Resources:\", qinfo.getUsedResources().toString()).\n          _(\"Num Active Applications:\", qinfo.getNumActiveApplications()).\n          _(\"Num Pending Applications:\", qinfo.getNumPendingApplications()).\n          _(\"Min Resources:\", qinfo.getMinResources().toString()).\n          _(\"Max Resources:\", qinfo.getMaxResources().toString());\n      int maxApps = qinfo.getMaxApplications();\n      if (maxApps < Integer.MAX_VALUE) {\n          ri._(\"Max Running Applications:\", qinfo.getMaxApplications());\n      }\n      ri._(STEADY_FAIR_SHARE + \":\", qinfo.getSteadyFairShare().toString());\n      ri._(INSTANTANEOUS_FAIR_SHARE + \":\", qinfo.getFairShare().toString());\n      html._(InfoBlock.class);\n\n      // clear the info contents so this queue's info doesn't accumulate into another queue's info\n      ri.clear();\n    }","commit_id":"270a271f53f52a1f33e63a0520ae6032536dd4c6","url":"https://github.com/apache/hadoop"},{"original_method":"public FairSchedulerQueueInfo(FSQueue queue, FairScheduler scheduler) {\n    AllocationConfiguration allocConf = scheduler.getAllocationConfiguration();\n    \n    queueName = queue.getName();\n    schedulingPolicy = queue.getPolicy().getName();\n    \n    clusterResources = new ResourceInfo(scheduler.getClusterResource());\n    \n    usedResources = new ResourceInfo(queue.getResourceUsage());\n    fractionMemUsed = (float)usedResources.getMemory() /\n        clusterResources.getMemory();\n    \n    fairResources = new ResourceInfo(queue.getFairShare());\n    minResources = new ResourceInfo(queue.getMinShare());\n    maxResources = new ResourceInfo(queue.getMaxShare());\n    maxResources = new ResourceInfo(\n        Resources.componentwiseMin(queue.getMaxShare(),\n            scheduler.getClusterResource()));\n    \n    fractionMemFairShare = (float)fairResources.getMemory() / clusterResources.getMemory();\n    fractionMemMinShare = (float)minResources.getMemory() / clusterResources.getMemory();\n    fractionMemMaxShare = (float)maxResources.getMemory() / clusterResources.getMemory();\n    \n    maxApps = allocConf.getQueueMaxApps(queueName);\n    \n    Collection<FSQueue> children = queue.getChildQueues();\n    childQueues = new ArrayList<FairSchedulerQueueInfo>();\n    for (FSQueue child : children) {\n      if (child instanceof FSLeafQueue) {\n        childQueues.add(new FairSchedulerLeafQueueInfo((FSLeafQueue)child, scheduler));\n      } else {\n        childQueues.add(new FairSchedulerQueueInfo(child, scheduler));\n      }\n    }\n  }","id":94704,"modified_method":"public FairSchedulerQueueInfo(FSQueue queue, FairScheduler scheduler) {\n    AllocationConfiguration allocConf = scheduler.getAllocationConfiguration();\n    \n    queueName = queue.getName();\n    schedulingPolicy = queue.getPolicy().getName();\n    \n    clusterResources = new ResourceInfo(scheduler.getClusterResource());\n    \n    usedResources = new ResourceInfo(queue.getResourceUsage());\n    fractionMemUsed = (float)usedResources.getMemory() /\n        clusterResources.getMemory();\n\n    steadyFairResources = new ResourceInfo(queue.getSteadyFairShare());\n    fairResources = new ResourceInfo(queue.getFairShare());\n    minResources = new ResourceInfo(queue.getMinShare());\n    maxResources = new ResourceInfo(queue.getMaxShare());\n    maxResources = new ResourceInfo(\n        Resources.componentwiseMin(queue.getMaxShare(),\n            scheduler.getClusterResource()));\n\n    fractionMemSteadyFairShare =\n        (float)steadyFairResources.getMemory() / clusterResources.getMemory();\n    fractionMemFairShare = (float) fairResources.getMemory()\n        / clusterResources.getMemory();\n    fractionMemMinShare = (float)minResources.getMemory() / clusterResources.getMemory();\n    fractionMemMaxShare = (float)maxResources.getMemory() / clusterResources.getMemory();\n    \n    maxApps = allocConf.getQueueMaxApps(queueName);\n    \n    Collection<FSQueue> children = queue.getChildQueues();\n    childQueues = new ArrayList<FairSchedulerQueueInfo>();\n    for (FSQueue child : children) {\n      if (child instanceof FSLeafQueue) {\n        childQueues.add(new FairSchedulerLeafQueueInfo((FSLeafQueue)child, scheduler));\n      } else {\n        childQueues.add(new FairSchedulerQueueInfo(child, scheduler));\n      }\n    }\n  }","commit_id":"270a271f53f52a1f33e63a0520ae6032536dd4c6","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public void render(Block html) {\n      html._(MetricsOverviewTable.class);\n      UL<DIV<DIV<Hamlet>>> ul = html.\n        div(\"#cs-wrapper.ui-widget\").\n          div(\".ui-widget-header.ui-corner-top\").\n            _(\"Application Queues\")._().\n          div(\"#cs.ui-widget-content.ui-corner-bottom\").\n            ul();\n      if (cs == null) {\n        ul.\n          li().\n            a(_Q).$style(width(WIDTH_F)).\n              span().$style(Q_END)._(\"100% \")._().\n              span(\".q\", \"default\")._()._();\n      } else {\n        CSQueue root = cs.getRootQueue();\n        CapacitySchedulerInfo sinfo = new CapacitySchedulerInfo(root);\n        csqinfo.csinfo = sinfo;\n        csqinfo.qinfo = null;\n\n        float used = sinfo.getUsedCapacity() / 100;\n        float set = sinfo.getCapacity() / 100;\n        float delta = Math.abs(set - used) + 0.001f;\n        ul.\n          li().\n            a(_Q).$style(width(WIDTH_F)).\n              $title(join(\"used:\", percent(used))).\n              span().$style(Q_END)._(\"100%\")._().\n              span().$style(join(width(delta), ';', used > set ? OVER : UNDER,\n                ';', used > set ? left(set) : left(used)))._(\".\")._().\n              span(\".q\", \"root\")._().\n            _(QueueBlock.class)._();\n      }\n      ul._()._().\n      script().$type(\"text/javascript\").\n          _(\"$('#cs').hide();\")._()._().\n      _(AppsBlock.class);\n    }","id":94705,"modified_method":"@Override\n    public void render(Block html) {\n      html._(MetricsOverviewTable.class);\n      UL<DIV<DIV<Hamlet>>> ul = html.\n        div(\"#cs-wrapper.ui-widget\").\n          div(\".ui-widget-header.ui-corner-top\").\n            _(\"Application Queues\")._().\n          div(\"#cs.ui-widget-content.ui-corner-bottom\").\n            ul();\n      if (cs == null) {\n        ul.\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              span().$style(Q_END)._(\"100% \")._().\n              span(\".q\", \"default\")._()._();\n      } else {\n        CSQueue root = cs.getRootQueue();\n        CapacitySchedulerInfo sinfo = new CapacitySchedulerInfo(root);\n        csqinfo.csinfo = sinfo;\n        csqinfo.qinfo = null;\n\n        float used = sinfo.getUsedCapacity() / 100;\n        ul.\n          li().$style(\"margin-bottom: 1em\").\n            span().$style(\"font-weight: bold\")._(\"Legend:\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_GIVEN).\n              _(\"Capacity\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_UNDER).\n              _(\"Used\")._().\n            span().$class(\"qlegend ui-corner-all\").$style(Q_OVER).\n              _(\"Used (over capacity)\")._().\n            span().$class(\"qlegend ui-corner-all ui-state-default\").\n              _(\"Max Capacity\")._().\n          _().\n          li().\n            a(_Q).$style(width(Q_MAX_WIDTH)).\n              $title(join(\"used:\", percent(used))).\n              span().$style(join(width(used), \";left:0%;\",\n                  used > 1 ? Q_OVER : Q_UNDER))._(\".\")._().\n              span(\".q\", \"root\")._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._().\n            _(QueueBlock.class)._();\n      }\n      ul._()._().\n      script().$type(\"text/javascript\").\n          _(\"$('#cs').hide();\")._()._().\n      _(AppsBlock.class);\n    }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"@Override protected void postHead(Page.HTML<_> html) {\n    html.\n      style().$type(\"text/css\").\n        _(\"#cs { padding: 0.5em 0 1em 0; margin-bottom: 1em; position: relative }\",\n          \"#cs ul { list-style: none }\",\n          \"#cs a { font-weight: normal; margin: 2px; position: relative }\",\n          \"#cs a span { font-weight: normal; font-size: 80% }\",\n          \"#cs-wrapper .ui-widget-header { padding: 0.2em 0.5em }\",\n          \"table.info tr th {width: 50%}\")._(). // to center info table\n      script(\"/static/jt/jquery.jstree.js\").\n      script().$type(\"text/javascript\").\n        _(\"$(function() {\",\n          \"  $('#cs a span').addClass('ui-corner-all').css('position', 'absolute');\",\n          \"  $('#cs').bind('loaded.jstree', function (e, data) {\",\n          \"    data.inst.open_all();\",\n          \"    data.inst.close_node('#lq', true);\",\n          \"   }).\",\n          \"    jstree({\",\n          \"    core: { animation: 188, html_titles: true },\",\n          \"    plugins: ['themeroller', 'html_data', 'ui'],\",\n          \"    themeroller: { item_open: 'ui-icon-minus',\",\n          \"      item_clsd: 'ui-icon-plus', item_leaf: 'ui-icon-gear'\",\n          \"    }\",\n          \"  });\",\n          \"  $('#cs').bind('select_node.jstree', function(e, data) {\",\n          \"    var q = $('.q', data.rslt.obj).first().text();\",\n          \"    if (q == 'root') q = '';\",\n          \"    else q = '^' + q.substr(q.lastIndexOf('.') + 1) + '$';\",\n          \"    $('#apps').dataTable().fnFilter(q, 3, true);\",\n          \"  });\",\n          \"  $('#cs').show();\",\n          \"});\")._();\n  }","id":94706,"modified_method":"@Override protected void postHead(Page.HTML<_> html) {\n    html.\n      style().$type(\"text/css\").\n        _(\"#cs { padding: 0.5em 0 1em 0; margin-bottom: 1em; position: relative }\",\n          \"#cs ul { list-style: none }\",\n          \"#cs a { font-weight: normal; margin: 2px; position: relative }\",\n          \"#cs a span { font-weight: normal; font-size: 80% }\",\n          \"#cs-wrapper .ui-widget-header { padding: 0.2em 0.5em }\",\n          \".qstats { font-weight: normal; font-size: 80%; position: absolute }\",\n          \".qlegend { font-weight: normal; padding: 0 1em; margin: 1em }\",\n          \"table.info tr th {width: 50%}\")._(). // to center info table\n      script(\"/static/jt/jquery.jstree.js\").\n      script().$type(\"text/javascript\").\n        _(\"$(function() {\",\n          \"  $('#cs a span').addClass('ui-corner-all').css('position', 'absolute');\",\n          \"  $('#cs').bind('loaded.jstree', function (e, data) {\",\n          \"    data.inst.open_all();\",\n          \"    data.inst.close_node('#lq', true);\",\n          \"   }).\",\n          \"    jstree({\",\n          \"    core: { animation: 188, html_titles: true },\",\n          \"    plugins: ['themeroller', 'html_data', 'ui'],\",\n          \"    themeroller: { item_open: 'ui-icon-minus',\",\n          \"      item_clsd: 'ui-icon-plus', item_leaf: 'ui-icon-gear'\",\n          \"    }\",\n          \"  });\",\n          \"  $('#cs').bind('select_node.jstree', function(e, data) {\",\n          \"    var q = $('.q', data.rslt.obj).first().text();\",\n          \"    if (q == 'root') q = '';\",\n          \"    else q = '^' + q.substr(q.lastIndexOf('.') + 1) + '$';\",\n          \"    $('#apps').dataTable().fnFilter(q, 3, true);\",\n          \"  });\",\n          \"  $('#cs').show();\",\n          \"});\")._();\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public void render(Block html) {\n      ArrayList<CapacitySchedulerQueueInfo> subQueues =\n          (csqinfo.qinfo == null) ? csqinfo.csinfo.getSubQueues()\n              : csqinfo.qinfo.getSubQueues();\n      UL<Hamlet> ul = html.ul();\n      for (CapacitySchedulerQueueInfo info : subQueues) {\n        float used = info.getUsedCapacity() / 100;\n        float set = info.getCapacity() / 100;\n        float delta = Math.abs(set - used) + 0.001f;\n        float max = info.getMaxCapacity() / 100;\n        LI<UL<Hamlet>> li = ul.\n          li().\n            a(_Q).$style(width(max * WIDTH_F)).\n              $title(join(\"used:\", percent(used), \" set:\", percent(set),\n                          \" max:\", percent(max))).\n              //span().$style(Q_END)._(absMaxPct)._().\n              span().$style(join(width(delta/max), ';',\n                used > set ? OVER : UNDER, ';',\n                used > set ? left(set/max) : left(used/max)))._('.')._().\n              span(\".q\", info.getQueuePath().substring(5))._();\n\n        csqinfo.qinfo = info;\n        if (info.getSubQueues() == null) {\n          li.ul(\"#lq\").li()._(LeafQueueInfoBlock.class)._()._();\n        } else {\n          li._(QueueBlock.class);\n        }\n        li._();\n      }\n\n      ul._();\n    }","id":94707,"modified_method":"@Override\n    public void render(Block html) {\n      ArrayList<CapacitySchedulerQueueInfo> subQueues =\n          (csqinfo.qinfo == null) ? csqinfo.csinfo.getSubQueues()\n              : csqinfo.qinfo.getSubQueues();\n      UL<Hamlet> ul = html.ul();\n      for (CapacitySchedulerQueueInfo info : subQueues) {\n        float used = info.getUsedCapacity() / 100;\n        float set = info.getCapacity() / 100;\n        float max = info.getMaxCapacity() / 100;\n        LI<UL<Hamlet>> li = ul.\n          li().\n            a(_Q).$style(width(max * Q_MAX_WIDTH)).\n              $title(join(\"capacity:\", percent(set), \" used:\", percent(used),\n                          \" max capacity:\", percent(max))).\n              span().$style(join(Q_GIVEN, \";font-size:1px;\", width(set/max))).\n                _('.')._().\n              span().$style(join(width(used*set/max),\n                \";font-size:1px;left:0%;\", used > 1 ? Q_OVER : Q_UNDER)).\n                _('.')._().\n              span(\".q\", info.getQueuePath().substring(5))._().\n            span().$class(\"qstats\").$style(left(Q_STATS_POS)).\n              _(join(percent(used), \" used\"))._();\n\n        csqinfo.qinfo = info;\n        if (info.getSubQueues() == null) {\n          li.ul(\"#lq\").li()._(LeafQueueInfoBlock.class)._()._();\n        } else {\n          li._(QueueBlock.class);\n        }\n        li._();\n      }\n\n      ul._();\n    }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"public String getQueueState() {\n    return this.state;\n  }","id":94708,"modified_method":"public String getQueueState() {\n    return this.state.toString();\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"CapacitySchedulerQueueInfo(CSQueue q) {\n    queuePath = q.getQueuePath();\n    capacity = q.getCapacity() * 100;\n    usedCapacity = q.getUsedCapacity() * 100;\n\n    maxCapacity = q.getMaximumCapacity();\n    if (maxCapacity < EPSILON || maxCapacity > 1f)\n      maxCapacity = 1f;\n    maxCapacity *= 100;\n\n    absoluteCapacity = cap(q.getAbsoluteCapacity(), 0f, 1f) * 100;\n    absoluteMaxCapacity = cap(q.getAbsoluteMaximumCapacity(), 0f, 1f) * 100;\n    utilization = q.getUtilization() * 100;\n    numApplications = q.getNumApplications();\n    usedResources = q.getUsedResources().toString();\n    queueName = q.getQueueName();\n    state = q.getState().toString();\n  }","id":94709,"modified_method":"CapacitySchedulerQueueInfo(CSQueue q) {\n    queuePath = q.getQueuePath();\n    capacity = q.getCapacity() * 100;\n    usedCapacity = q.getUsedCapacity() * 100;\n\n    maxCapacity = q.getMaximumCapacity();\n    if (maxCapacity < EPSILON || maxCapacity > 1f)\n      maxCapacity = 1f;\n    maxCapacity *= 100;\n\n    absoluteCapacity = cap(q.getAbsoluteCapacity(), 0f, 1f) * 100;\n    absoluteMaxCapacity = cap(q.getAbsoluteMaximumCapacity(), 0f, 1f) * 100;\n    utilization = q.getUtilization() * 100;\n    numApplications = q.getNumApplications();\n    usedResources = q.getUsedResources().toString();\n    queueName = q.getQueueName();\n    state = q.getState();\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"public void verifySubQueueXML(Element qElem, String q, float parentAbsCapacity)\n      throws Exception {\n    float absCapacity = WebServicesTestUtils.getXmlFloat(qElem, \"absoluteCapacity\");\n    verifySubQueueGeneric(q,\n        WebServicesTestUtils.getXmlFloat(qElem, \"usedCapacity\"),\n        WebServicesTestUtils.getXmlFloat(qElem, \"capacity\"),\n        WebServicesTestUtils.getXmlFloat(qElem, \"maxCapacity\"),\n        absCapacity,\n        WebServicesTestUtils.getXmlFloat(qElem, \"absoluteMaxCapacity\"),\n        parentAbsCapacity,\n        WebServicesTestUtils.getXmlString(qElem, \"queueName\"),\n        WebServicesTestUtils.getXmlString(qElem, \"state\"));\n\n    NodeList queues = qElem.getElementsByTagName(\"subQueues\");\n    if (queues != null) {\n      for (int j = 0; j < queues.getLength(); j++) {\n        Element subqElem = (Element) queues.item(j);\n        String qName = WebServicesTestUtils.getXmlString(subqElem, \"queueName\");\n        String q2 = q + \".\" + qName;\n        verifySubQueueXML(subqElem, q2, absCapacity);\n      }\n    } else {\n      verifyLeafQueueGeneric(q,\n          WebServicesTestUtils.getXmlInt(qElem, \"userLimit\"),\n          WebServicesTestUtils.getXmlFloat(qElem, \"userLimitFactor\"));\n    }\n  }","id":94710,"modified_method":"public void verifySubQueueXML(Element qElem, String q, float parentAbsCapacity)\n      throws Exception {\n    NodeList queues = qElem.getElementsByTagName(\"subQueues\");\n    QueueInfo qi = (queues != null) ? new QueueInfo() : new LeafQueueInfo();\n    qi.capacity = WebServicesTestUtils.getXmlFloat(qElem, \"capacity\");\n    qi.usedCapacity =\n        WebServicesTestUtils.getXmlFloat(qElem, \"usedCapacity\");\n    qi.maxCapacity = WebServicesTestUtils.getXmlFloat(qElem, \"maxCapacity\");\n    qi.absoluteCapacity = WebServicesTestUtils.getXmlFloat(qElem, \"absoluteCapacity\");\n    qi.absoluteMaxCapacity =\n        WebServicesTestUtils.getXmlFloat(qElem, \"absoluteMaxCapacity\");\n    qi.utilization = WebServicesTestUtils.getXmlFloat(qElem, \"utilization\");\n    qi.numApplications =\n        WebServicesTestUtils.getXmlInt(qElem, \"numApplications\");\n    qi.usedResources =\n        WebServicesTestUtils.getXmlString(qElem, \"usedResources\");\n    qi.queueName = WebServicesTestUtils.getXmlString(qElem, \"queueName\");\n    qi.state = WebServicesTestUtils.getXmlString(qElem, \"state\");\n    verifySubQueueGeneric(q, qi, parentAbsCapacity);\n\n    if (queues != null) {\n      for (int j = 0; j < queues.getLength(); j++) {\n        Element subqElem = (Element) queues.item(j);\n        String qName = WebServicesTestUtils.getXmlString(subqElem, \"queueName\");\n        String q2 = q + \".\" + qName;\n        verifySubQueueXML(subqElem, q2, qi.absoluteCapacity);\n      }\n    } else {\n      LeafQueueInfo lqi = (LeafQueueInfo) qi;\n      lqi.numActiveApplications =\n          WebServicesTestUtils.getXmlInt(qElem, \"numActiveApplications\");\n      lqi.numPendingApplications =\n          WebServicesTestUtils.getXmlInt(qElem, \"numPendingApplications\");\n      lqi.numContainers =\n          WebServicesTestUtils.getXmlInt(qElem, \"numContainers\");\n      lqi.maxApplications =\n          WebServicesTestUtils.getXmlInt(qElem, \"maxApplications\");\n      lqi.maxApplicationsPerUser =\n          WebServicesTestUtils.getXmlInt(qElem, \"maxApplicationsPerUser\");\n      lqi.maxActiveApplications =\n          WebServicesTestUtils.getXmlInt(qElem, \"maxActiveApplications\");\n      lqi.maxActiveApplicationsPerUser =\n          WebServicesTestUtils.getXmlInt(qElem, \"maxActiveApplicationsPerUser\");\n      lqi.userLimit = WebServicesTestUtils.getXmlInt(qElem, \"userLimit\");\n      lqi.userLimitFactor =\n          WebServicesTestUtils.getXmlFloat(qElem, \"userLimitFactor\");\n      verifyLeafQueueGeneric(q, lqi);\n    }\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"private void verifyLeafQueueGeneric(String q, int userLimit,\n      float userLimitFactor) throws Exception {\n    assertEquals(\"userLimit doesn't match\", csConf.getUserLimit(q), userLimit);\n    assertEquals(\"userLimitFactor doesn't match\",\n        csConf.getUserLimitFactor(q), userLimitFactor, 1e-3f);\n  }","id":94711,"modified_method":"private void verifyLeafQueueGeneric(String q, LeafQueueInfo info)\n      throws Exception {\n    assertEquals(\"numActiveApplications doesn't match\",\n        0, info.numActiveApplications);\n    assertEquals(\"numPendingApplications doesn't match\",\n        0, info.numPendingApplications);\n    assertEquals(\"numContainers doesn't match\",\n        0, info.numContainers);\n\n    int maxSystemApps = csConf.getMaximumSystemApplications();\n    int expectedMaxApps = (int)(maxSystemApps * (info.absoluteCapacity/100));\n    int expectedMaxAppsPerUser =\n      (int)(expectedMaxApps * (info.userLimit/100.0f) * info.userLimitFactor);\n\n    // TODO: would like to use integer comparisons here but can't due to\n    //       roundoff errors in absolute capacity calculations\n    assertEquals(\"maxApplications doesn't match\",\n        (float)expectedMaxApps, (float)info.maxApplications, 1.0f);\n    assertEquals(\"maxApplicationsPerUser doesn't match\",\n        (float)expectedMaxAppsPerUser,\n        (float)info.maxApplicationsPerUser, info.userLimitFactor);\n\n    assertTrue(\"maxActiveApplications doesn't match\",\n        info.maxActiveApplications > 0);\n    assertTrue(\"maxActiveApplicationsPerUser doesn't match\",\n        info.maxActiveApplicationsPerUser > 0);\n    assertEquals(\"userLimit doesn't match\", csConf.getUserLimit(q),\n        info.userLimit);\n    assertEquals(\"userLimitFactor doesn't match\",\n        csConf.getUserLimitFactor(q), info.userLimitFactor, 1e-3f);\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"private void verifySubQueue(JSONObject info, String q, float parentAbsCapacity)\n      throws JSONException, Exception {\n    int numExpectedElements = 11;\n    boolean isParentQueue = true;\n    if (!info.has(\"subQueues\")) {\n      numExpectedElements = 20;\n      isParentQueue = false;\n    }\n    assertEquals(\"incorrect number of elements\", numExpectedElements, info.length());\n\n    float absCapacity = (float) info.getDouble(\"absoluteCapacity\");\n\n    verifySubQueueGeneric(q, (float) info.getDouble(\"usedCapacity\"),\n        (float) info.getDouble(\"capacity\"),\n        (float) info.getDouble(\"maxCapacity\"),\n        absCapacity,\n        (float) info.getDouble(\"absoluteMaxCapacity\"),\n        parentAbsCapacity,\n        info.getString(\"queueName\"),\n        info.getString(\"state\"));\n\n    if (isParentQueue) {\n      JSONArray arr = info.getJSONArray(\"subQueues\");\n      // test subqueues\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        String q2 = q + \".\" + obj.getString(\"queueName\");\n        verifySubQueue(obj, q2, absCapacity);\n      }\n    } else {\n      verifyLeafQueueGeneric(q, info.getInt(\"userLimit\"),\n          (float) info.getDouble(\"userLimitFactor\"));\n    }\n  }","id":94712,"modified_method":"private void verifySubQueue(JSONObject info, String q, float parentAbsCapacity)\n      throws JSONException, Exception {\n    int numExpectedElements = 11;\n    boolean isParentQueue = true;\n    if (!info.has(\"subQueues\")) {\n      numExpectedElements = 20;\n      isParentQueue = false;\n    }\n    assertEquals(\"incorrect number of elements\", numExpectedElements, info.length());\n\n    QueueInfo qi = isParentQueue ? new QueueInfo() : new LeafQueueInfo();\n    qi.capacity = (float) info.getDouble(\"capacity\");\n    qi.usedCapacity = (float) info.getDouble(\"usedCapacity\");\n    qi.maxCapacity = (float) info.getDouble(\"maxCapacity\");\n    qi.absoluteCapacity = (float) info.getDouble(\"absoluteCapacity\");\n    qi.absoluteMaxCapacity = (float) info.getDouble(\"absoluteMaxCapacity\");\n    qi.utilization = (float) info.getDouble(\"utilization\");\n    qi.numApplications = info.getInt(\"numApplications\");\n    qi.usedResources = info.getString(\"usedResources\");\n    qi.queueName = info.getString(\"queueName\");\n    qi.state = info.getString(\"state\");\n\n    verifySubQueueGeneric(q, qi, parentAbsCapacity);\n\n    if (isParentQueue) {\n      JSONArray arr = info.getJSONArray(\"subQueues\");\n      // test subqueues\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        String q2 = q + \".\" + obj.getString(\"queueName\");\n        verifySubQueue(obj, q2, qi.absoluteCapacity);\n      }\n    } else {\n      LeafQueueInfo lqi = (LeafQueueInfo) qi;\n      lqi.numActiveApplications = info.getInt(\"numActiveApplications\");\n      lqi.numPendingApplications = info.getInt(\"numPendingApplications\");\n      lqi.numContainers = info.getInt(\"numContainers\");\n      lqi.maxApplications = info.getInt(\"maxApplications\");\n      lqi.maxApplicationsPerUser = info.getInt(\"maxApplicationsPerUser\");\n      lqi.maxActiveApplications = info.getInt(\"maxActiveApplications\");\n      lqi.maxActiveApplicationsPerUser = info.getInt(\"maxActiveApplicationsPerUser\");\n      lqi.userLimit = info.getInt(\"userLimit\");\n      lqi.userLimitFactor = (float) info.getDouble(\"userLimitFactor\");\n      verifyLeafQueueGeneric(q, lqi);\n    }\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"private void verifySubQueueGeneric(String q, float usedCapacity,\n      float capacity, float maxCapacity,\n      float absCapacity, float absMaxCapacity,\n      float parentAbsCapacity,\n      String qname, String state)\n      throws Exception {\n    String[] qArr = q.split(\"\\\\.\");\n    assertTrue(\"q name invalid: \" + q, qArr.length > 1);\n    String qshortName = qArr[qArr.length - 1];\n\n    assertEquals(\"usedCapacity doesn't match\", 0, usedCapacity, 1e-3f);\n    assertEquals(\"capacity doesn't match\", csConf.getCapacity(q), capacity,\n        1e-3f);\n    float expectCapacity = csConf.getMaximumCapacity(q);\n    float expectAbsMaxCapacity = parentAbsCapacity * (maxCapacity/100);\n    if (CapacitySchedulerConfiguration.UNDEFINED == expectCapacity) {\n      expectCapacity = 100;\n      expectAbsMaxCapacity = 100;\n    }\n    assertEquals(\"maxCapacity doesn't match\", expectCapacity, maxCapacity,\n        1e-3f);\n    assertEquals(\"absoluteCapacity doesn't match\",\n        parentAbsCapacity * (capacity/100), absCapacity, 1e-3f);\n    assertEquals(\"absoluteMaxCapacity doesn't match\",\n        expectAbsMaxCapacity, absMaxCapacity, 1e-3f);\n    assertTrue(\"queueName doesn't match, got: \" + qname + \" expected: \" + q,\n        qshortName.matches(qname));\n    assertTrue(\"state doesn't match\",\n        (csConf.getState(q).toString()).matches(state));\n\n  }","id":94713,"modified_method":"private void verifySubQueueGeneric(String q, QueueInfo info,\n      float parentAbsCapacity) throws Exception {\n    String[] qArr = q.split(\"\\\\.\");\n    assertTrue(\"q name invalid: \" + q, qArr.length > 1);\n    String qshortName = qArr[qArr.length - 1];\n\n    assertEquals(\"usedCapacity doesn't match\", 0, info.usedCapacity, 1e-3f);\n    assertEquals(\"capacity doesn't match\", csConf.getCapacity(q),\n        info.capacity, 1e-3f);\n    float expectCapacity = csConf.getMaximumCapacity(q);\n    float expectAbsMaxCapacity = parentAbsCapacity * (info.maxCapacity/100);\n    if (CapacitySchedulerConfiguration.UNDEFINED == expectCapacity) {\n      expectCapacity = 100;\n      expectAbsMaxCapacity = 100;\n    }\n    assertEquals(\"maxCapacity doesn't match\", expectCapacity,\n        info.maxCapacity, 1e-3f);\n    assertEquals(\"absoluteCapacity doesn't match\",\n        parentAbsCapacity * (info.capacity/100), info.absoluteCapacity, 1e-3f);\n    assertEquals(\"absoluteMaxCapacity doesn't match\",\n        expectAbsMaxCapacity, info.absoluteMaxCapacity, 1e-3f);\n    assertEquals(\"utilization doesn't match\", 0, info.utilization, 1e-3f);\n    assertEquals(\"numApplications doesn't match\", 0, info.numApplications);\n    assertTrue(\"usedResources doesn't match\",\n        info.usedResources.matches(\"memory: 0\"));\n    assertTrue(\"queueName doesn't match, got: \" + info.queueName\n        + \" expected: \" + q, qshortName.matches(info.queueName));\n    assertTrue(\"state doesn't match\",\n        (csConf.getState(q).toString()).matches(info.state));\n\n  }","commit_id":"0086014703db5f1299143103e92093c4e8cf92d7","url":"https://github.com/apache/hadoop"},{"original_method":"public void onTraversalDone(Integer finalReduce) {\n        if ( sampleNames == null )\n            sampleNames = new TreeSet<String>();\n\n        VCFWriter vcfWriter = new VCFWriter(out);\n\n        // set up the info and filter headers\n        Set<VCFHeaderLine> hInfo = new HashSet<VCFHeaderLine>();\n        hInfo.add(new VCFHeaderLine(\"source\", \"SequenomValidationConverter\"));\n        hInfo.add(new VCFHeaderLine(\"reference\", getToolkit().getArguments().referenceFile.getName()));\n        hInfo.add(new VCFInfoHeaderLine(\"NoCallPct\", 1, VCFHeaderLineType.Float, \"Percent of no-calls\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HomRefPct\", 1, VCFHeaderLineType.Float, \"Percent of homozygous reference genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HetPct\", 1, VCFHeaderLineType.Float, \"Percent of heterozygous genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HomVarPct\", 1, VCFHeaderLineType.Float, \"Percent homozygous variant genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HW\", 1, VCFHeaderLineType.Float, \"Phred-scaled Hardy-Weinberg violation p-value\"));\n        hInfo.add(new VCFInfoHeaderLine(VCFConstants.ALLELE_COUNT_KEY, 1, VCFHeaderLineType.Integer, \"Allele count in genotypes, for each ALT allele, in the same order as listed\"));\n        hInfo.add(new VCFInfoHeaderLine(VCFConstants.ALLELE_NUMBER_KEY, 1, VCFHeaderLineType.Integer, \"Total number of alleles in called genotypes\"));\n        hInfo.add(new VCFFilterHeaderLine(\"HardyWeinbergViolation\", \"The validation is in Hardy-Weinberg violation\"));\n        hInfo.add(new VCFFilterHeaderLine(\"HighNoCallRate\", \"The validation no-call rate is too high\"));\n        hInfo.add(new VCFFilterHeaderLine(\"TooManyHomVars\", \"The validation homozygous variant rate is too high\"));\n\n        // print out (and add to headers) the validation metrics\n        System.out.println(String.format(\"Total number of samples assayed:\\t\\t\\t%d\", sampleNames.size()));\n        hInfo.add(new VCFHeaderLine(\"ValidationMetrics_SamplesAssayed\", String.format(\"%d\", sampleNames.size())));\n        System.out.println(String.format(\"Total number of records processed:\\t\\t\\t%d\", numRecords));\n        hInfo.add(new VCFHeaderLine(\"ValidationMetrics_RecordsProcessed\", String.format(\"%d\", numRecords)));\n        if ( numRecords > 0 ) {\n            System.out.println(String.format(\"Number of Hardy-Weinberg violations:\\t\\t\\t%d (%d%%)\", numHWViolations, 100*numHWViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_HardyWeinbergViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numHWViolations, 100*numHWViolations/numRecords)));\n            System.out.println(String.format(\"Number of no-call violations:\\t\\t\\t\\t%d (%d%%)\", numNoCallViolations, 100*numNoCallViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_NoCallViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numNoCallViolations, 100*numNoCallViolations/numRecords)));\n            System.out.println(String.format(\"Number of homozygous variant violations:\\t\\t%d (%d%%)\", numHomVarViolations, 100*numHomVarViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_HomVarViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numHomVarViolations, 100*numHomVarViolations/numRecords)));\n            int goodRecords = numRecords - numHWViolations - numNoCallViolations - numHomVarViolations;\n            System.out.println(String.format(\"Number of records passing all filters:\\t\\t\\t%d (%d%%)\", goodRecords, 100*goodRecords/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_RecordsPassingFilters\", String.format(\"\\\"%d (%d%%)\\\"\", goodRecords, 100*goodRecords/numRecords)));\n            System.out.println(String.format(\"Number of passing records that are polymorphic:\\t\\t%d (%d%%)\", numTrueVariants, 100*numTrueVariants/goodRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_PolymorphicPassingRecords\", String.format(\"\\\"%d (%d%%)\\\"\", numTrueVariants, 100*numTrueVariants/goodRecords)));\n        }\n        \n        VCFHeader header = new VCFHeader(hInfo, sampleNames);\n        vcfWriter.writeHeader(header);\n\n        for ( Pair<VariantContext, Byte> record : records )\n            vcfWriter.add(record.first, new byte[]{record.second});\n        vcfWriter.close();\n    }","id":94714,"modified_method":"public void onTraversalDone(Integer finalReduce) {\n        if ( sampleNames == null )\n            sampleNames = new TreeSet<String>();\n\n        VCFWriter vcfWriter = new VCFWriter(out);\n\n        // set up the info and filter headers\n        Set<VCFHeaderLine> hInfo = new HashSet<VCFHeaderLine>();\n        hInfo.add(new VCFHeaderLine(\"source\", \"SequenomValidationConverter\"));\n        hInfo.add(new VCFHeaderLine(\"reference\", getToolkit().getArguments().referenceFile.getName()));\n        hInfo.add(new VCFInfoHeaderLine(\"NoCallPct\", 1, VCFHeaderLineType.Float, \"Percent of no-calls\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HomRefPct\", 1, VCFHeaderLineType.Float, \"Percent of homozygous reference genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HetPct\", 1, VCFHeaderLineType.Float, \"Percent of heterozygous genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HomVarPct\", 1, VCFHeaderLineType.Float, \"Percent homozygous variant genotypes\"));\n        hInfo.add(new VCFInfoHeaderLine(\"HW\", 1, VCFHeaderLineType.Float, \"Phred-scaled Hardy-Weinberg violation p-value\"));\n        hInfo.add(new VCFInfoHeaderLine(VCFConstants.ALLELE_COUNT_KEY, 1, VCFHeaderLineType.Integer, \"Allele count in genotypes, for each ALT allele, in the same order as listed\"));\n        hInfo.add(new VCFInfoHeaderLine(VCFConstants.ALLELE_NUMBER_KEY, 1, VCFHeaderLineType.Integer, \"Total number of alleles in called genotypes\"));\n        hInfo.add(new VCFFilterHeaderLine(\"HardyWeinbergViolation\", \"The validation is in Hardy-Weinberg violation\"));\n        hInfo.add(new VCFFilterHeaderLine(\"HighNoCallRate\", \"The validation no-call rate is too high\"));\n        hInfo.add(new VCFFilterHeaderLine(\"TooManyHomVars\", \"The validation homozygous variant rate is too high\"));\n\n        // print out (and add to headers) the validation metrics\n        System.out.println(String.format(\"Total number of samples assayed:\\t\\t\\t%d\", sampleNames.size()));\n        hInfo.add(new VCFHeaderLine(\"ValidationMetrics_SamplesAssayed\", String.format(\"%d\", sampleNames.size())));\n        System.out.println(String.format(\"Total number of records processed:\\t\\t\\t%d\", numRecords));\n        hInfo.add(new VCFHeaderLine(\"ValidationMetrics_RecordsProcessed\", String.format(\"%d\", numRecords)));\n        if ( numRecords > 0 ) {\n            System.out.println(String.format(\"Number of Hardy-Weinberg violations:\\t\\t\\t%d (%d%%)\", numHWViolations, 100*numHWViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_HardyWeinbergViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numHWViolations, 100*numHWViolations/numRecords)));\n            System.out.println(String.format(\"Number of no-call violations:\\t\\t\\t\\t%d (%d%%)\", numNoCallViolations, 100*numNoCallViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_NoCallViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numNoCallViolations, 100*numNoCallViolations/numRecords)));\n            System.out.println(String.format(\"Number of homozygous variant violations:\\t\\t%d (%d%%)\", numHomVarViolations, 100*numHomVarViolations/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_HomVarViolations\", String.format(\"\\\"%d (%d%%)\\\"\", numHomVarViolations, 100*numHomVarViolations/numRecords)));\n            int goodRecords = numRecords - numHWViolations - numNoCallViolations - numHomVarViolations;\n            System.out.println(String.format(\"Number of records passing all filters:\\t\\t\\t%d (%d%%)\", goodRecords, 100*goodRecords/numRecords));\n            hInfo.add(new VCFHeaderLine(\"ValidationMetrics_RecordsPassingFilters\", String.format(\"\\\"%d (%d%%)\\\"\", goodRecords, 100*goodRecords/numRecords)));\n            if ( goodRecords > 0 ) {\n                System.out.println(String.format(\"Number of passing records that are polymorphic:\\t\\t%d (%d%%)\", numTrueVariants, 100*numTrueVariants/goodRecords));\n                hInfo.add(new VCFHeaderLine(\"ValidationMetrics_PolymorphicPassingRecords\", String.format(\"\\\"%d (%d%%)\\\"\", numTrueVariants, 100*numTrueVariants/goodRecords)));\n            }\n        }\n        \n        VCFHeader header = new VCFHeader(hInfo, sampleNames);\n        vcfWriter.writeHeader(header);\n\n        for ( Pair<VariantContext, Byte> record : records )\n            vcfWriter.add(record.first, new byte[]{record.second});\n        vcfWriter.close();\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test\n    public void testIndels() {\n        String testPedFile = validationDataLocation + \"pilot2_indel_validation.renamed.ped\";\n        String testArgs = \"-R \"+oneKGLocation+\"reference/human_b36_both.fasta -T SequenomValidationConverter -B sequenom,Plink,\"+testPedFile+\" -o %s\";\n        WalkerTest.WalkerTestSpec spec = new WalkerTestSpec(testArgs, 1,\n                Arrays.asList(\"845b9a15ac947052ddded5b79228e5ec\"));\n        executeTest(\"Test Indels\", spec);\n    }","id":94715,"modified_method":"@Test\n    public void testIndels() {\n        String testPedFile = validationDataLocation + \"pilot2_indel_validation.renamed.ped\";\n        String testArgs = \"-R \"+oneKGLocation+\"reference/human_b36_both.fasta -T SequenomValidationConverter -B sequenom,Plink,\"+testPedFile+\" -o %s\";\n        WalkerTest.WalkerTestSpec spec = new WalkerTestSpec(testArgs, 1,\n                Arrays.asList(\"fad2dd71550dec064d458c4aa83e4de9\"));\n        executeTest(\"Test Indels\", spec);\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void addRecord(VCFRecord vcfRecord) {\n        mWriter.addRecord(vcfRecord, validationStringency);\n    }","id":94716,"modified_method":"public void addRecord(VCFRecord vcfRecord) {\n        mWriter.addRecord(vcfRecord);\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * create a VCF header, given a list of meta data and auxillary tags\n     *\n     * @param metaData            the meta data associated with this header\n     * @param genotypeSampleNames the genotype format field, and the sample names\n     */\n    public VCFHeader(Set<VCFHeaderLine> metaData, Set<String> genotypeSampleNames) {\n        mMetaData = new TreeSet<VCFHeaderLine>(metaData);\n        for (String col : genotypeSampleNames) {\n            if (!col.equals(\"FORMAT\"))\n                mGenotypeSampleNames.add(col);\n        }\n        if (genotypeSampleNames.size() > 0) hasGenotypingData = true;\n        loadVCFVersion();\n    }","id":94717,"modified_method":"/**\n     * create a VCF header, given a list of meta data and auxillary tags\n     *\n     * @param metaData            the meta data associated with this header\n     * @param genotypeSampleNames the genotype format field, and the sample names\n     */\n    public VCFHeader(Set<VCFHeaderLine> metaData, Set<String> genotypeSampleNames) {\n        mMetaData = new TreeSet<VCFHeaderLine>(metaData);\n        for (String col : genotypeSampleNames) {\n            if (!col.equals(\"FORMAT\"))\n                mGenotypeSampleNames.add(col);\n        }\n        if (genotypeSampleNames.size() > 0) hasGenotypingData = true;\n        loadVCFVersion();\n        loadMetaDataMaps();\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * create a VCF header, given a list of meta data and auxillary tags\n     *\n     * @param metaData     the meta data associated with this header\n     */\n    public VCFHeader(Set<VCFHeaderLine> metaData) {\n        mMetaData = new TreeSet<VCFHeaderLine>(metaData);\n        loadVCFVersion();\n    }","id":94718,"modified_method":"/**\n     * create a VCF header, given a list of meta data and auxillary tags\n     *\n     * @param metaData     the meta data associated with this header\n     */\n    public VCFHeader(Set<VCFHeaderLine> metaData) {\n        mMetaData = new TreeSet<VCFHeaderLine>(metaData);\n        loadVCFVersion();\n        loadMetaDataMaps();\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"private static String formatVCFField(String key, Object val) {\n        String result;\n        if ( val == null )\n            result = VCFGenotypeRecord.getMissingFieldValue(key);\n        else if ( val instanceof Double ) {\n            result = String.format(\"%.2f\", (Double)val);\n        }\n        else if ( val instanceof Boolean )\n            result = (Boolean)val ? \"\" : null; // empty string for true, null for false\n        else if ( val instanceof List ) {\n            List list = (List)val;\n            if ( list.size() == 0 )\n                return formatVCFField(key, null);\n            StringBuffer sb = new StringBuffer(formatVCFField(key, list.get(0)));\n            for ( int i = 1; i < list.size(); i++) {\n                sb.append(\",\");\n                sb.append(formatVCFField(key, list.get(i)));\n            }\n            result = sb.toString();\n        } else\n            result = val.toString();\n\n        return result;\n    }","id":94719,"modified_method":"private static String formatVCFField(Object val) {\n        String result;\n        if ( val == null )\n            result = VCFConstants.MISSING_VALUE_v4;\n        else if ( val instanceof Double )\n            result = String.format(VCFConstants.DOUBLE_PRECISION_FORMAT_STRING, (Double)val);\n        else if ( val instanceof Boolean )\n            result = (Boolean)val ? \"\" : null; // empty string for true, null for false\n        else if ( val instanceof List ) {\n            List list = (List)val;\n            if ( list.size() == 0 )\n                return formatVCFField(null);\n            StringBuffer sb = new StringBuffer(formatVCFField(list.get(0)));\n            for ( int i = 1; i < list.size(); i++) {\n                sb.append(\",\");\n                sb.append(formatVCFField(list.get(i)));\n            }\n            result = sb.toString();\n        } else\n            result = val.toString();\n\n        return result;\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void addRecord(VCFRecord record) {\n        addRecord(record, VCFGenotypeWriter.VALIDATION_STRINGENCY.STRICT);\n    }","id":94720,"modified_method":"/**\n     * output a record to the VCF file\n     *\n     * @param record                the record to output\n     */\n    @Deprecated\n    public void addRecord(VCFRecord record) {\n        if ( mHeader == null )\n            throw new IllegalStateException(\"The VCF Header must be written before records can be added\");\n\n        String vcfString = record.toStringEncoding(mHeader);\n        try {\n            mWriter.write(vcfString + \"\\n\");\n            mWriter.flush();  // necessary so that writing to an output stream will work\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to write the VCF object to a file\");\n        }\n\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void writeHeader(VCFHeader header) {\n        this.mHeader = header;\n\n        try {\n            // the file format field needs to be written first\n            mWriter.write(VCFHeader.METADATA_INDICATOR + VCFHeaderVersion.VCF4_0.getFormatString() + \"=\" + VCFHeaderVersion.VCF4_0.getVersionString() + \"\\n\");\n\n            for ( VCFHeaderLine line : header.getMetaData() ) {\n                    if ( line.getKey().equals(VCFHeaderVersion.VCF4_0.getFormatString()) ||\n                            line.getKey().equals(VCFHeaderVersion.VCF3_3.getFormatString()) ||\n                            line.getKey().equals(VCFHeaderVersion.VCF3_2.getFormatString()) )\n                        continue;\n\n                    // Record, if line corresponds to a FORMAT field, which type will be used for writing value\n                    if (line.getClass() == VCFFormatHeaderLine.class) {\n                        VCFFormatHeaderLine a = (VCFFormatHeaderLine)line;\n                        String key = a.getName();\n                        typeUsedForFormatString.put(key,a.getType());\n                        int num = a.getCount();\n                        numberUsedForFormatFields.put(key,num);\n                    } else if (line.getClass() == VCFInfoHeaderLine.class) {\n                        VCFInfoHeaderLine a = (VCFInfoHeaderLine)line;\n                        String key = a.getName();\n                        typeUsedForInfoFields.put(key,a.getType());\n                        int num = a.getCount();\n                        numberUsedForInfoFields.put(key, num);\n                    } else if (line.getClass() == VCFFilterHeaderLine.class) {\n                        filtersWereAppliedToContext = true;\n                    }\n\n                mWriter.write(VCFHeader.METADATA_INDICATOR + line.toString() + \"\\n\");\n            }\n\n            // write out the column line\n            StringBuilder b = new StringBuilder();\n            b.append(VCFHeader.HEADER_INDICATOR);\n            for (VCFHeader.HEADER_FIELDS field : header.getHeaderFields())\n                b.append(field + VCFConstants.FIELD_SEPARATOR);\n\n            if (header.hasGenotypingData()) {\n                b.append(\"FORMAT\" + VCFConstants.FIELD_SEPARATOR);\n                for (String field : header.getGenotypeSamples())\n                    b.append(field + VCFConstants.FIELD_SEPARATOR);\n            }\n            mWriter.write(b.toString() + \"\\n\");\n            mWriter.flush();  // necessary so that writing to an output stream will work\n        }\n        catch (IOException e) {\n            throw new RuntimeException(\"IOException writing the VCF header\", e);\n        }\n    }","id":94721,"modified_method":"public void writeHeader(VCFHeader header) {\n        this.mHeader = header;\n\n        try {\n            // the file format field needs to be written first\n            mWriter.write(VCFHeader.METADATA_INDICATOR + VCFHeaderVersion.VCF4_0.getFormatString() + \"=\" + VCFHeaderVersion.VCF4_0.getVersionString() + \"\\n\");\n\n            for ( VCFHeaderLine line : header.getMetaData() ) {\n                if ( line.getKey().equals(VCFHeaderVersion.VCF4_0.getFormatString()) ||\n                        line.getKey().equals(VCFHeaderVersion.VCF3_3.getFormatString()) ||\n                        line.getKey().equals(VCFHeaderVersion.VCF3_2.getFormatString()) )\n                    continue;\n\n                // are the records filtered (so we know what to put in the FILTER column of passing records) ?\n                if ( line instanceof VCFFilterHeaderLine )\n                    filtersWereAppliedToContext = true;\n\n                mWriter.write(VCFHeader.METADATA_INDICATOR);\n                mWriter.write(line.toString());\n                mWriter.write(\"\\n\");\n            }\n\n            // write out the column line\n            mWriter.write(VCFHeader.HEADER_INDICATOR);\n            for ( VCFHeader.HEADER_FIELDS field : header.getHeaderFields() ) {\n                mWriter.write(field.toString());\n                mWriter.write(VCFConstants.FIELD_SEPARATOR);\n            }\n\n            if ( header.hasGenotypingData() ) {\n                mWriter.write(\"FORMAT\");\n                mWriter.write(VCFConstants.FIELD_SEPARATOR);\n                for ( String sample : header.getGenotypeSamples() ) {\n                   mWriter.write(sample);\n                   mWriter.write(VCFConstants.FIELD_SEPARATOR);\n            }                                                       }\n\n            mWriter.write(\"\\n\");\n            mWriter.flush();  // necessary so that writing to an output stream will work\n        }\n        catch (IOException e) {\n            throw new RuntimeException(\"IOException writing the VCF header\", e);\n        }\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void add(VariantContext vc, byte[] refBases) {\n        if ( mHeader == null )\n            throw new IllegalStateException(\"The VCF Header must be written before records can be added\");\n\n        String vcfString = toStringEncoding(vc, mHeader, refBases);\n        try {\n            mWriter.write(vcfString + \"\\n\");\n            mWriter.flush();  // necessary so that writing to an output stream will work\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to write the VCF object to a file\");\n        }\n\n    }","id":94722,"modified_method":"public void add(VariantContext vc, byte[] refBases) {\n        if ( mHeader == null )\n            throw new IllegalStateException(\"The VCF Header must be written before records can be added\");\n        if ( refBases == null || refBases.length < 1 )\n            throw new IllegalArgumentException(\"The reference base must be provided to write VCF records\");\n\n        try {\n            GenomeLoc loc = vc.getLocation();\n            Map<Allele, String> alleleMap = new HashMap<Allele, String>(vc.getAlleles().size());\n            alleleMap.put(Allele.NO_CALL, VCFConstants.EMPTY_ALLELE); // convenience for lookup\n\n            // CHROM\n            mWriter.write(loc.getContig());\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // POS\n            // TODO -- Remove this off-by-one issue when positions are settled in the input\n            mWriter.write(String.valueOf(loc.getStart() - (vc.isIndel() ? 1 : 0)));\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // ID\n            String ID = vc.hasAttribute(\"ID\") ? vc.getAttributeAsString(\"ID\") : VCFConstants.EMPTY_ID_FIELD;\n            mWriter.write(ID);\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // REF\n            alleleMap.put(vc.getReference(), \"0\");\n            String refString = makeAlleleString(vc.getReference(), vc.isIndel(), refBases[0]);\n            mWriter.write(refString);\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // ALT\n            if ( vc.getAlternateAlleles().size() > 0 ) {\n                Allele altAllele = vc.getAlternateAllele(0);\n                alleleMap.put(altAllele, \"1\");\n                String alt = makeAlleleString(altAllele, vc.isIndel(), refBases[0]);\n                mWriter.write(alt);\n\n                for (int i = 1; i < vc.getAlternateAlleles().size(); i++) {\n                    altAllele = vc.getAlternateAllele(i);\n                    alleleMap.put(altAllele, String.valueOf(i+1));\n                    alt = makeAlleleString(altAllele, vc.isIndel(), refBases[0]);\n                    mWriter.write(\",\");\n                    mWriter.write(alt);\n                }\n            } else {\n                mWriter.write(VCFConstants.EMPTY_ALTERNATE_ALLELE_FIELD);\n            }\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // QUAL\n            if ( !vc.hasNegLog10PError() )\n                mWriter.write(VCFConstants.MISSING_VALUE_v4);\n            else\n                mWriter.write(String.format(VCFConstants.DOUBLE_PRECISION_FORMAT_STRING, vc.getPhredScaledQual()));\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // FILTER\n            String filters = vc.isFiltered() ? Utils.join(\";\", Utils.sorted(vc.getFilters())) : (filtersWereAppliedToContext ? VCFConstants.PASSES_FILTERS_v4 : VCFConstants.UNFILTERED);\n            mWriter.write(filters);\n            mWriter.write(VCFConstants.FIELD_SEPARATOR);\n\n            // INFO\n            Map<String, String> infoFields = new TreeMap<String, String>();\n            for ( Map.Entry<String, Object> field : vc.getAttributes().entrySet() ) {\n                String key = field.getKey();\n                if ( key.equals(\"ID\") )\n                    continue;\n\n                String outputValue = formatVCFField(field.getValue());\n                if ( outputValue != null )\n                    infoFields.put(key, outputValue);\n            }\n            writeInfoString(infoFields);\n\n            // FORMAT\n            List<String> genotypeAttributeKeys = new ArrayList<String>();\n            if ( vc.hasGenotypes() ) {\n                genotypeAttributeKeys.add(VCFConstants.GENOTYPE_KEY);\n                for ( String key : calcVCFGenotypeKeys(vc) ) {\n                    genotypeAttributeKeys.add(key);\n                }\n            } else if ( mHeader.hasGenotypingData() ) {\n                // this needs to be done in case all samples are no-calls\n                genotypeAttributeKeys.add(VCFConstants.GENOTYPE_KEY);\n            }\n\n            if ( genotypeAttributeKeys.size() > 0 ) {\n                String genotypeFormatString = Utils.join(VCFConstants.GENOTYPE_FIELD_SEPARATOR, genotypeAttributeKeys);\n                mWriter.write(VCFConstants.FIELD_SEPARATOR);\n                mWriter.write(genotypeFormatString);\n\n                addGenotypeData(vc, alleleMap, genotypeAttributeKeys);\n            }\n\n            mWriter.write(\"\\n\");\n            mWriter.flush();  // necessary so that writing to an output stream will work\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to write the VCF object to a file\");\n        }\n\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * create the info string\n     *\n     * @param infoFields a map of info fields\n     * @return a string representing the infomation fields\n     */\n    protected String createInfoString(Map<String,String> infoFields) {\n        StringBuffer info = new StringBuffer();\n        boolean isFirst = true;\n        for (Map.Entry<String, String> entry : infoFields.entrySet()) {\n            if ( isFirst )\n                isFirst = false;\n            else\n                info.append(VCFConstants.INFO_FIELD_SEPARATOR);\n\n            info.append(entry.getKey());\n\n            if ( entry.getValue() != null && !entry.getValue().equals(\"\") ) {\n                int numVals = 1;\n                String key = entry.getKey();\n                if (numberUsedForInfoFields.containsKey(key)) {\n                    numVals = numberUsedForInfoFields.get(key);\n                }\n\n                // take care of unbounded encoding\n                // TODO - workaround for \"-1\" in original INFO header structure\n                if (numVals == VCFInfoHeaderLine.UNBOUNDED || numVals < 0)\n                    numVals = 1;\n\n                if (numVals > 0) {\n                    info.append(\"=\");\n                    info.append(entry.getValue());\n                }\n            }\n        }\n        return info.length() == 0 ? VCFConstants.EMPTY_INFO_FIELD : info.toString();\n    }","id":94723,"modified_method":"/**\n     * create the info string; assumes that no values are null\n     *\n     * @param infoFields a map of info fields\n     * @throws IOException for writer\n     */\n    protected void writeInfoString(Map<String, String> infoFields) throws IOException {\n        if ( infoFields.isEmpty() ) {\n            mWriter.write(VCFConstants.EMPTY_INFO_FIELD);\n            return;\n        }\n\n        boolean isFirst = true;\n        for ( Map.Entry<String, String> entry : infoFields.entrySet() ) {\n            if ( isFirst )\n                isFirst = false;\n            else\n                mWriter.write(VCFConstants.INFO_FIELD_SEPARATOR);\n\n            String key = entry.getKey();\n            mWriter.write(key);\n\n            if ( !entry.getValue().equals(\"\") ) {\n                int numVals = 1;\n                VCFInfoHeaderLine metaData = mHeader.getInfoHeaderLine(key);\n                if ( metaData != null )\n                    numVals = metaData.getCount();\n\n                // take care of unbounded encoding\n                if ( numVals == VCFInfoHeaderLine.UNBOUNDED )\n                    numVals = 1;\n\n                if ( numVals > 0 ) {\n                    mWriter.write(\"=\");\n                    mWriter.write(entry.getValue());\n                }\n            }\n        }\n    }","commit_id":"693672a46132235590ccf482a5c418b03dc7ba21","url":"https://github.com/broadgsa/gatk"},{"original_method":"protected DefaultHttpResponse createHttpResponse(ObjectStorageDataGetResponseType reply) {\n        DefaultHttpResponse httpResponse = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n        long contentLength = reply.getSize();\n        String contentType = reply.getContentType();\n        String etag = reply.getEtag();\n        String contentDisposition = reply.getContentDisposition();\n        httpResponse.addHeader(HttpHeaders.Names.CONTENT_TYPE, contentType != null ? contentType : \"binary/octet-stream\");\n        if (etag != null) {\n            httpResponse.addHeader(HttpHeaders.Names.ETAG, \"\\\"\" + etag + \"\\\"\"); //etag in quotes, per s3-spec.\n        }\n        httpResponse.addHeader(HttpHeaders.Names.LAST_MODIFIED, DateFormatter.dateToHeaderFormattedString(reply.getLastModified()));\n\n        if (contentDisposition != null) {\n            httpResponse.addHeader(\"Content-Disposition\", contentDisposition);\n        }\n        httpResponse.addHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(contentLength));\n        String versionId = reply.getVersionId();\n        if (versionId != null && !ObjectStorageProperties.NULL_VERSION_ID.equals(versionId)) {\n            httpResponse.addHeader(ObjectStorageProperties.X_AMZ_VERSION_ID, versionId);\n        }\n        httpResponse.setHeader(HttpHeaders.Names.DATE, DateFormatter.dateToHeaderFormattedString(new Date()));\n\n        //Add user metadata\n        for (MetaDataEntry m : reply.getMetaData()) {\n            httpResponse.addHeader(ObjectStorageProperties.AMZ_META_HEADER_PREFIX + m.getName(), m.getValue());\n        }\n\n        // add copied headers\n        OSGUtil.addCopiedHeadersToResponse(httpResponse, reply);\n\n        //write extra headers\n        if (reply.getByteRangeEnd() != null) {\n            httpResponse.addHeader(\"Content-Range\", reply.getByteRangeStart() + \"-\" + reply.getByteRangeEnd() + \"/\" + reply.getSize());\n        }\n        overrideHeaders(reply, httpResponse);\n        return httpResponse;\n    }","id":94724,"modified_method":"protected DefaultHttpResponse createHttpResponse(ObjectStorageDataGetResponseType reply) {\n        DefaultHttpResponse httpResponse = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n        long contentLength = reply.getSize();\n        String contentType = reply.getContentType();\n        String etag = reply.getEtag();\n        String contentDisposition = reply.getContentDisposition();\n        httpResponse.addHeader(HttpHeaders.Names.CONTENT_TYPE, contentType != null ? contentType : \"binary/octet-stream\");\n        if (etag != null) {\n            httpResponse.addHeader(HttpHeaders.Names.ETAG, \"\\\"\" + etag + \"\\\"\"); //etag in quotes, per s3-spec.\n        }\n        httpResponse.addHeader(HttpHeaders.Names.LAST_MODIFIED, DateFormatter.dateToHeaderFormattedString(reply.getLastModified()));\n\n        if (contentDisposition != null) {\n            httpResponse.addHeader(\"Content-Disposition\", contentDisposition);\n        }\n        httpResponse.addHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(contentLength));\n        String versionId = reply.getVersionId();\n        if (versionId != null && !ObjectStorageProperties.NULL_VERSION_ID.equals(versionId)) {\n            httpResponse.addHeader(ObjectStorageProperties.X_AMZ_VERSION_ID, versionId);\n        }\n        httpResponse.setHeader(HttpHeaders.Names.DATE, DateFormatter.dateToHeaderFormattedString(new Date()));\n\n        //Add user metadata\n        for (MetaDataEntry m : reply.getMetaData()) {\n            httpResponse.addHeader(ObjectStorageProperties.AMZ_META_HEADER_PREFIX + m.getName(), m.getValue());\n        }\n\n        // add copied headers\n        OSGUtil.addCopiedHeadersToResponse(httpResponse, reply);\n\n        //write extra headers\n        if (reply.getByteRangeEnd() != null) {\n            httpResponse.addHeader(HttpHeaders.Names.CONTENT_RANGE, reply.getByteRangeStart() + \"-\" + reply.getByteRangeEnd() + \"/\" + reply.getSize());\n        }\n        overrideHeaders(reply, httpResponse);\n        return httpResponse;\n    }","commit_id":"366720bba23acef121461bdaa48509d29526797d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n\tpublic GetObjectExtendedResponseType getObjectExtended(GetObjectExtendedType request) throws S3Exception {\n        ObjectEntity objectEntity = getObjectEntityAndCheckPermissions(request, null);\n        \n        // Byte range computation\n        // Why do it here instead of delegating it to backends?\n        // 1. AWS SDK is used for GET requests to backends. SDK does not let you specify ranges like bytes=-400 or bytes=400-\n        // 2. Backends might not be compatible with S3/RFC behavior. Computing the simplified range unifies OSG behavior across backends while staying\n        // compatible with S3\n    \n        // Its safe to assume here that range will either be null or positive because of regex used for marshaling the header\n        Long objectSize = objectEntity.getSize();\n        Long lastIndex = (objectSize - 1) < 0 ? 0 : (objectSize - 1);\n        Long byteRangeStart = request.getByteRangeStart();\n        Long byteRangeEnd = request.getByteRangeEnd();\n    \n        if (byteRangeStart != null && byteRangeEnd != null) { // both start and end represent some value\n          if (byteRangeEnd < byteRangeStart) { // check if end is greater than start\n            // invalid byte range. ignore byte range by setting start to 0 and end to lastIndex\n            byteRangeStart = 0L;\n            byteRangeEnd = lastIndex;\n          }\n        } else if (byteRangeStart == null && byteRangeEnd == null) { // both start and end dont represent any value\n          // set start to 0 and end to lastIndex\n          byteRangeStart = 0L;\n          byteRangeEnd = lastIndex;\n        } else if (byteRangeStart != null) { // meaning from byteRangeStart to end. example: bytes=400-\n          if (objectSize == 0) {\n            // S3 throws invalid range error for bytes=x-y when size is 0\n            throw new InvalidRangeException(\"bytes=\" + request.getByteRangeStart() + \"-\" + request.getByteRangeEnd());\n          } else {\n            byteRangeEnd = lastIndex;\n          }\n        } else { // implies byteRangeEnd != null. meaning last byteRangeEnd number of bytes. example bytes=-400\n          if (byteRangeEnd == 0) {\n            // S3 throws invalid range error for bytes=-0\n            throw new InvalidRangeException(\"bytes=\" + request.getByteRangeStart() + \"-\" + request.getByteRangeEnd());\n          } else {\n            byteRangeStart = (objectSize - byteRangeEnd) > 0 ? (objectSize - byteRangeEnd) : 0;\n          }\n          // end is always object-size-1 as the start is null\n          byteRangeEnd = lastIndex;\n        }\n    \n        // Final checks\n        if (byteRangeStart > lastIndex) { // check if start byte position is out of range\n          throw new InvalidRangeException(\"bytes=\" + request.getByteRangeStart() + \"-\" + request.getByteRangeEnd()); // Throw error if it is out of range\n        }\n    \n        if (byteRangeEnd > lastIndex) { // check if start byte position is out of range\n          byteRangeEnd = lastIndex; // Set the end byte position to object-size-1\n        }\n        \n        request.setKey(objectEntity.getObjectUuid());\n        request.setBucket(objectEntity.getBucket().getBucketUuid());\n        request.setByteRangeStart(byteRangeStart);\n        request.setByteRangeEnd(byteRangeEnd);\n        try {\n            GetObjectExtendedResponseType response = ospClient.getObjectExtended(request);\n\n            response.setVersionId(objectEntity.getVersionId());\n            response.setLastModified(objectEntity.getObjectModifiedTimestamp());\n            populateStoredHeaders(response, objectEntity.getStoredHeaders());\n            response.setResponseHeaderOverrides(request.getResponseHeaderOverrides());\n            return response;\n        } catch(S3Exception e) {\n            LOG.warn(\"CorrelationId: \" + Contexts.lookup().getCorrelationId() + \" Responding to client with: \", e);\n            throw e;\n        } catch(Exception e) {\n        \t// Wrap the error from back-end with a 500 error\n            LOG.warn(\"CorrelationId: \" + Contexts.lookup().getCorrelationId() + \" Responding to client with 500 InternalError because of:\", e);\n            throw new InternalErrorException(request.getBucket() + \"/\" + request.getKey(), e);\n        }\n\t}","id":94725,"modified_method":"@Override\n\tpublic GetObjectExtendedResponseType getObjectExtended(GetObjectExtendedType request) throws S3Exception {\n        ObjectEntity objectEntity = getObjectEntityAndCheckPermissions(request, null);\n        \n        // Byte range computation\n        // Why do it here instead of delegating it to backends?\n        // 1. AWS SDK is used for GET requests to backends. SDK does not let you specify ranges like bytes=-400 or bytes=400-\n        // 2. Backends might not be compatible with S3/RFC behavior. Computing the simplified range unifies OSG behavior across backends while staying\n        // compatible with S3\n    \n        // Its safe to assume here that range will either be null or positive because of regex used for marshaling the header\n        Long objectSize = objectEntity.getSize();\n        Long lastIndex = (objectSize - 1) < 0 ? 0 : (objectSize - 1);\n        Long byteRangeStart = request.getByteRangeStart();\n        Long byteRangeEnd = request.getByteRangeEnd();\n    \n        if (byteRangeStart != null && byteRangeEnd != null) { // both start and end represent some value\n          if (byteRangeEnd < byteRangeStart) { // check if end is greater than start\n            // invalid byte range. ignore byte range by setting start and end to null\n            byteRangeStart = null;\n            byteRangeEnd = null;\n          }\n        } else if (byteRangeStart == null && byteRangeEnd == null) { // both start and end dont represent any value\n          // ignore byte range\n        } else if (byteRangeStart != null) { // meaning from byteRangeStart to end. example: bytes=400-\n          if (objectSize == 0) {\n            // S3 throws invalid range error for bytes=x-y when size is 0\n            throw new InvalidRangeException(\"bytes=\" + ObjectUtils.toString(request.getByteRangeStart()) + \"-\"\n                + ObjectUtils.toString(request.getByteRangeEnd()));\n          } else {\n            byteRangeEnd = lastIndex;\n          }\n        } else { // implies byteRangeEnd != null. meaning last byteRangeEnd number of bytes. example bytes=-400\n          if (byteRangeEnd == 0) {\n            // S3 throws invalid range error for bytes=-0\n            throw new InvalidRangeException(\"bytes=\" + ObjectUtils.toString(request.getByteRangeStart()) + \"-\"\n                + ObjectUtils.toString(request.getByteRangeEnd()));\n          } else {\n            byteRangeStart = (objectSize - byteRangeEnd) > 0 ? (objectSize - byteRangeEnd) : 0;\n          }\n          // end is always object-size-1 as the start is null\n          byteRangeEnd = lastIndex;\n        }\n    \n        // Final checks\n        if (byteRangeStart != null && byteRangeStart > lastIndex) { // check if start byte position is out of range\n          throw new InvalidRangeException(\"bytes=\" + ObjectUtils.toString(request.getByteRangeStart()) + \"-\"\n              + ObjectUtils.toString(request.getByteRangeEnd())); // Throw error if it is out of range\n        }\n    \n        if (byteRangeEnd != null && byteRangeEnd > lastIndex) { // check if start byte position is out of range\n          byteRangeEnd = lastIndex; // Set the end byte position to object-size-1\n        }\n        \n        request.setKey(objectEntity.getObjectUuid());\n        request.setBucket(objectEntity.getBucket().getBucketUuid());\n        request.setByteRangeStart(byteRangeStart); // Populate the computed byte range before firing request to backend\n        request.setByteRangeEnd(byteRangeEnd); // Populate the computed byte range before firing request to backend\n        try {\n            GetObjectExtendedResponseType response = ospClient.getObjectExtended(request);\n\n            response.setVersionId(objectEntity.getVersionId());\n            response.setLastModified(objectEntity.getObjectModifiedTimestamp());\n            populateStoredHeaders(response, objectEntity.getStoredHeaders());\n            response.setResponseHeaderOverrides(request.getResponseHeaderOverrides());\n            return response;\n        } catch(S3Exception e) {\n            LOG.warn(\"CorrelationId: \" + Contexts.lookup().getCorrelationId() + \" Responding to client with: \", e);\n            throw e;\n        } catch(Exception e) {\n        \t// Wrap the error from back-end with a 500 error\n            LOG.warn(\"CorrelationId: \" + Contexts.lookup().getCorrelationId() + \" Responding to client with 500 InternalError because of:\", e);\n            throw new InternalErrorException(request.getBucket() + \"/\" + request.getKey(), e);\n        }\n\t}","commit_id":"366720bba23acef121461bdaa48509d29526797d","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/** \n\t * @param flushLastBlock Do we flush a partially-filled last block in the current set\n\t *   of blocks? Not normally, we want to fill blocks. So if a user calls a manual\n\t *   flush(), we want to flush all full blocks, but not a last partial -- readers of\n\t *   this block-fragmented content (other streams make other sorts of fragments, this one\n\t *   is designed for files of same block size) expect all fragments but the last to be\n\t *   the same size. The only time we flush a last partial is on close(), when it is the\n\t *   last block of the data. This flag, passed in only by internal methods, tells us it's\n\t *   time to do that.\n\t * @throws InvalidKeyException\n\t * @throws SignatureException\n\t * @throws NoSuchAlgorithmException\n\t * @throws InterruptedException\n\t * @throws IOException\n\t * @throws InvalidAlgorithmParameterException \n\t */\n\tprotected void flushToNetwork(boolean flushLastBlock) throws InvalidKeyException, SignatureException, NoSuchAlgorithmException, InterruptedException, IOException, InvalidAlgorithmParameterException {\t\t\n\n\t\t/**\n\t\t * XXX - Can the blockbuffers have holes?\n\t\t *     DKS: no. The blockCount argument to putMerkleTree is intended to tell\n\t\t *     it how many of the blockBuffers array it should touch (are non-null).\n\t\t *     If there are holes, there are a bigger problem.\n\t\t */\n\n\t\t/**\n\t\t * Partial last block handling. If we are in the middle of writing a file, we only\n\t\t * flush complete blocks; up to _blockOffset % getBlockSize().\n\t\t */\n\t\tif (0 == _blockOffset) {\n\t\t\t// nothing to write\n\t\t\treturn;\n\t\t} else if ((_blockOffset <= getBlockSize()) && (!flushLastBlock)) {\n\t\t\t// Only a single block written. We don't put out partial blocks until\n\t\t\t// close is called (or otherwise have flushLastBlock=true), so it's\n\t\t\t// easy to understand holding in that case. However, if we want to \n\t\t\t// set finalBlockID, we can't do that till we know it -- till close is\n\t\t\t// called. So we should hold off on writing the last full block as well,\n\t\t\t// until we are closed. Unfortunately that means if you call flush()\n\t\t\t// right before close(), you'll tend to sign all but the last block,\n\t\t\t// and sign that last one separately when you actually flush it.\n\t\t\treturn;\n\t\t}\n\n\t\tif (null == _timestamp)\n\t\t\t_timestamp = SignedInfo.now();\n\n\t\t// Two cases: if we're flushing only a single block, we can put it out with a \n\t\t// straight signature without a Merkle Tree. The reading/verification code will\n\t\t// cope just fine with a single file written in a mix of MHT and straight signature\n\t\tboolean preservePartial = false;\n\t\tint saveBytes = 0;\n\t\t// verified blocks.\n\t\tif (_blockOffset <= getBlockSize()) {\n\t\t\t// Single block to write. If we get here, we are forcing a flush (see above\n\t\t\t// discussion about holding back partial or even a single full block till\n\t\t\t// forced flush/close in order to set finalBlockID).\n\n\t\t\tLibrary.logger().info(\"flush: asked to put a single block to the network.\");\n\n\t\t\t// DKS TODO -- think about types, freshness, fix markers for impending last block/first block\n\t\t\tif (_blockOffset < getBlockSize()) {\n\t\t\t\tLibrary.logger().warning(\"flush(): writing hanging partial last block of file: \" + _blockOffset + \" bytes, block total is \" + getBlockSize() + \", called by close().\");\n\t\t\t} else {\n\t\t\t\tLibrary.logger().warning(\"flush(): writing single full block of file: \" + _baseName);\n\t\t\t}\n\t\t\t_baseNameIndex = \n\t\t\t\t_segmenter.putFragment(_baseName, _baseNameIndex, \n\t\t\t\t\t_buffer, 0, _blockOffset, \n\t\t\t\t\t_type, _timestamp, null, _baseNameIndex, \n\t\t\t\t\t_locator, _publisher);\n\t\t} else {\n\t\t\t// Now, we have a partially or completely full buffer. Do we have a partial last block we want to preserve?\n\t\t\t// If we're not flushing, we want to save a final block (whole or partial) and move\n\t\t\t// it down.\n\t\t\tif (!flushLastBlock) {\n\t\t\t\tsaveBytes = _blockOffset % getBlockSize();\n\t\t\t\tif (0 == saveBytes) {\n\t\t\t\t\tsaveBytes = getBlockSize(); // full last block, save it anyway so can mark as last.\n\t\t\t\t}\n\t\t\t\tpreservePartial = true;\n\t\t\t} // otherwise saveBytes = 0, so ok\n\n\t\t\tLibrary.logger().info(\"flush: putting merkle tree to the network, \" + _blockOffset + \n\t\t\t\t\t\" bytes written, holding back \" + saveBytes + \" flushing final blocks? \" + flushLastBlock + \".\");\n\t\t\t// Generate Merkle tree (or other auth structure) and signedInfos and put contents.\n\t\t\t// We always flush all the blocks starting from 0, so the baseBlockIndex is always 0.\n\t\t\t// DKS TODO fix last block marking\n\t\t\t_baseNameIndex = \n\t\t\t\t_segmenter.fragmentedPut(_baseName, _baseNameIndex, _buffer, 0, _blockOffset-saveBytes, getBlockSize(),\n\t\t\t\t\t\t\t\t\t     _type, _timestamp, null, \n\t\t\t\t\t\t\t\t\t     (flushLastBlock ? CCNSegmenter.LAST_SEGMENT : null), \n\t\t\t\t\t\t\t\t\t     _locator, _publisher);\n\t\t}\n\n\t\tif (preservePartial) {\n\t\t\tSystem.arraycopy(_buffer, _blockOffset-saveBytes, _buffer, 0, saveBytes);\n\t\t\tArrays.fill(_buffer, saveBytes, _buffer.length, (byte)0);\n\t\t\t_blockOffset = saveBytes;\n\t\t} else {\n\t\t\t_blockOffset = 0;\n\t\t}\n\t}","id":94726,"modified_method":"/** \n\t * @param flushLastBlock Do we flush a partially-filled last block in the current set\n\t *   of blocks? Not normally, we want to fill blocks. So if a user calls a manual\n\t *   flush(), we want to flush all full blocks, but not a last partial -- readers of\n\t *   this block-fragmented content (other streams make other sorts of fragments, this one\n\t *   is designed for files of same block size) expect all fragments but the last to be\n\t *   the same size. The only time we flush a last partial is on close(), when it is the\n\t *   last block of the data. This flag, passed in only by internal methods, tells us it's\n\t *   time to do that.\n\t * @throws InvalidKeyException\n\t * @throws SignatureException\n\t * @throws NoSuchAlgorithmException\n\t * @throws InterruptedException\n\t * @throws IOException\n\t * @throws InvalidAlgorithmParameterException \n\t */\n\tprotected void flushToNetwork(boolean flushLastBlock) throws InvalidKeyException, SignatureException, NoSuchAlgorithmException, InterruptedException, IOException, InvalidAlgorithmParameterException {\t\t\n\n\t\t/**\n\t\t * XXX - Can the blockbuffers have holes?\n\t\t *     DKS: no. The blockCount argument to putMerkleTree is intended to tell\n\t\t *     it how many of the blockBuffers array it should touch (are non-null).\n\t\t *     If there are holes, there are a bigger problem.\n\t\t */\n\n\t\t/**\n\t\t * Partial last block handling. If we are in the middle of writing a file, we only\n\t\t * flush complete blocks; up to _blockOffset % getBlockSize().\n\t\t */\n\t\tif (0 == _blockOffset) {\n\t\t\t// nothing to write\n\t\t\treturn;\n\t\t} else if ((_blockOffset <= getBlockSize()) && (!flushLastBlock)) {\n\t\t\t// Only a single block written. We don't put out partial blocks until\n\t\t\t// close is called (or otherwise have flushLastBlock=true), so it's\n\t\t\t// easy to understand holding in that case. However, if we want to \n\t\t\t// set finalBlockID, we can't do that till we know it -- till close is\n\t\t\t// called. So we should hold off on writing the last full block as well,\n\t\t\t// until we are closed. Unfortunately that means if you call flush()\n\t\t\t// right before close(), you'll tend to sign all but the last block,\n\t\t\t// and sign that last one separately when you actually flush it.\n\t\t\treturn;\n\t\t}\n\n\t\tif (null == _timestamp)\n\t\t\t_timestamp = SignedInfo.now();\n\n\t\t// First, are we flushing dangling blocks (e.g. on close())? If not, we always\n\t\t// keep at least a partial block behind. There are two reasons for this; first to\n\t\t// ensure we always write full blocks until the end, and second, to allow us to\n\t\t// mark the last block as such. So adjust the number of blocks to write\n\t\t// accordingly. \n\t\tboolean preservePartial = false;\n\t\tint saveBytes = 0;\n\t\t\n\t\t// Now, we have a partially or completely full buffer. Do we have a partial last block we want to preserve?\n\t\t// If we're not flushing, we want to save a final block (whole or partial) and move\n\t\t// it down.\n\t\tif (!flushLastBlock) {\n\t\t\tsaveBytes = _blockOffset % getBlockSize();\n\t\t\tif (0 == saveBytes) {\n\t\t\t\tsaveBytes = getBlockSize(); // full last block, save it anyway so can mark as last.\n\t\t\t}\n\t\t\tpreservePartial = true;\n\t\t} // otherwise saveBytes = 0, so ok\n\t\t\n\t\t// Three cases -- \n\t\t// 1) we have nothing to flush (0 bytes or < a single block) (handled above)\n\t\t// 2) we're flushing a single block and can put it out with a straight signature\n\t\t// 3) we're flushing more than one block, and need to use a bulk signer.\n\t\t// The reading/verification code will\n\t\t// cope just fine with a single file written in a mix of bulk and straight signature\n\t\t// verified blocks.\n\t\tif ((_blockOffset - saveBytes) <= getBlockSize()) {\n\t\t\t// Single block to write. If we get here, we are forcing a flush (see above\n\t\t\t// discussion about holding back partial or even a single full block till\n\t\t\t// forced flush/close in order to set finalBlockID).\n\n\t\t\tLibrary.logger().info(\"flush: asked to put a single block to the network, are we finishing the file? \" + flushLastBlock + \".\");\n\n\t\t\t// DKS TODO -- think about types, freshness, fix markers for impending last block/first block\n\t\t\tif ((_blockOffset - saveBytes) < getBlockSize()) {\n\t\t\t\tLibrary.logger().warning(\"flush(): writing hanging partial last block of file: \" + (_blockOffset-saveBytes) + \" bytes, block total is \" + getBlockSize() + \", holding back \" + saveBytes + \" bytes, called by close? \" + flushLastBlock);\n\t\t\t} else {\n\t\t\t\tLibrary.logger().warning(\"flush(): writing single full block of file: \" + _baseName + \", holding back \" + saveBytes + \" bytes.\");\n\t\t\t}\n\t\t\t_baseNameIndex = \n\t\t\t\t_segmenter.putFragment(_baseName, _baseNameIndex, \n\t\t\t\t\t_buffer, 0, (_blockOffset-saveBytes), \n\t\t\t\t\t_type, _timestamp, null, (flushLastBlock ? _baseNameIndex : null), \n\t\t\t\t\t_locator, _publisher);\n\t\t} else {\n\t\t\tLibrary.logger().info(\"flush: putting merkle tree to the network, baseName \" + _baseName +\n\t\t\t\t\t\" basenameindex \" + ContentName.componentPrintURI(SegmentationProfile.getSegmentID(_baseNameIndex)) + \"; \" \n\t\t\t\t\t+ _blockOffset + \n\t\t\t\t\t\" bytes written, holding back \" + saveBytes + \" flushing final blocks? \" + flushLastBlock + \".\");\n\t\t\t// Generate Merkle tree (or other auth structure) and signedInfos and put contents.\n\t\t\t// We always flush all the blocks starting from 0, so the baseBlockIndex is always 0.\n\t\t\t// DKS TODO fix last block marking\n\t\t\t_baseNameIndex = \n\t\t\t\t_segmenter.fragmentedPut(_baseName, _baseNameIndex, _buffer, 0, _blockOffset-saveBytes, getBlockSize(),\n\t\t\t\t\t\t\t\t\t     _type, _timestamp, null, \n\t\t\t\t\t\t\t\t\t     (flushLastBlock ? CCNSegmenter.LAST_SEGMENT : null), \n\t\t\t\t\t\t\t\t\t     _locator, _publisher);\n\t\t}\n\n\t\tif (preservePartial) {\n\t\t\tSystem.arraycopy(_buffer, _blockOffset-saveBytes, _buffer, 0, saveBytes);\n\t\t\t_blockOffset = saveBytes;\n\t\t} else {\n\t\t\t_blockOffset = 0;\n\t\t}\n\t\t// zeroise unused bytes\n\t\tArrays.fill(_buffer, _blockOffset, _buffer.length, (byte)0);\n\t}","commit_id":"902875d4914d9ae1e0769968987a1792dc6b3e55","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public BloomFilter deserialize(DataInput dis) throws IOException\n    {\n        int hashes = dis.readInt();\n        int bitLength = dis.readInt();\n        long[] bits = new long[bitLength];\n        for (int i = 0; i < bitLength; i++)\n            bits[i] = dis.readLong();\n        OpenBitSet bs = new OpenBitSet(bits, bitLength);\n        return new BloomFilter(hashes, bs);\n    }","id":94727,"modified_method":"public BloomFilter deserialize(DataInput dis) throws IOException\n    {\n        int hashes = dis.readInt();\n        long bitLength = dis.readInt();\n        OpenBitSet bs = new OpenBitSet(bitLength << 6);\n        int pageSize = bs.getPageSize();\n        int pageCount = bs.getPageCount();\n\n        for (int p = 0; p < pageCount; p++)\n        {\n            long[] bits = bs.getPage(p);\n            for (int i = 0; i < pageSize && bitLength-- > 0; i++)\n                bits[i] = dis.readLong();\n        }\n\n        return new BloomFilter(hashes, bs);\n    }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Calculates a serialized size of the given Bloom Filter\n     * @see this.serialize(BloomFilter, DataOutput)\n     *\n     * @param bf Bloom filter to calculate serialized size\n     *\n     * @return serialized size of the given bloom filter\n     */\n    public long serializedSize(BloomFilter bf)\n    {\n        return DBConstants.intSize // hash count\n               + DBConstants.intSize // length\n               + bf.bitset.getBits().length * DBConstants.longSize; // buckets\n    }","id":94728,"modified_method":"/**\n     * Calculates a serialized size of the given Bloom Filter\n     * @see this.serialize(BloomFilter, DataOutput)\n     *\n     * @param bf Bloom filter to calculate serialized size\n     *\n     * @return serialized size of the given bloom filter\n     */\n    public long serializedSize(BloomFilter bf)\n    {\n        return DBConstants.intSize // hash count\n               + DBConstants.intSize // length\n               + bf.bitset.getNumWords() * DBConstants.longSize; // buckets\n    }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"public void serialize(BloomFilter bf, DataOutput dos) throws IOException\n    {\n        long[] bits = bf.bitset.getBits();\n        int bitLength = bits.length;\n\n        dos.writeInt(bf.getHashCount());\n        dos.writeInt(bitLength);\n\n        for (int i = 0; i < bitLength; i++)\n            dos.writeLong(bits[i]);\n    }","id":94729,"modified_method":"public void serialize(BloomFilter bf, DataOutput dos) throws IOException\n    {\n        int bitLength = bf.bitset.getNumWords();\n        int pageSize = bf.bitset.getPageSize();\n        int pageCount = bf.bitset.getPageCount();\n\n        dos.writeInt(bf.getHashCount());\n        dos.writeInt(bitLength);\n\n        for (int p = 0; p < pageCount; p++)\n        {\n            long[] bits = bf.bitset.getPage(p);\n            for (int i = 0; i < pageSize && bitLength-- > 0; i++)\n                dos.writeLong(bits[i]);\n        }\n    }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** sets a bit, expanding the set size if necessary */\n  public void set(long index) {\n    int wordNum = expandingWordNum(index);\n    int bit = (int)index & 0x3f;\n    long bitmask = 1L << bit;\n    bits[wordNum] |= bitmask;\n  }","id":94730,"modified_method":"/** sets a bit, expanding the set size if necessary */\n  public void set(long index) {\n    int wordNum = expandingWordNum(index);\n    int bit = (int)index & 0x3f;\n    long bitmask = 1L << bit;\n    bits[ wordNum / PAGE_SIZE ][ wordNum % PAGE_SIZE ] |= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** flips a bit and returns the resulting bit value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean flipAndGet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] ^= bitmask;\n    return (bits[wordNum] & bitmask) != 0;\n  }","id":94731,"modified_method":"/** flips a bit and returns the resulting bit value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean flipAndGet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] ^= bitmask;\n    return (bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"public int length() {\n    return bits.length << 6;\n  }","id":94732,"modified_method":"public long length() {\n    return capacity();\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(int index) {\n    int wordNum = index >> 6;\n    int bit = index & 0x03f;\n    long bitmask = 1L << bit;\n    bits[wordNum] &= ~bitmask;\n    // hmmm, it takes one more instruction to clear than it does to set... any\n    // way to work around this?  If there were only 63 bits per word, we could\n    // use a right shift of 10111111...111 in binary to position the 0 in the\n    // correct place (using sign extension).\n    // Could also use Long.rotateRight() or rotateLeft() *if* they were converted\n    // by the JVM into a native instruction.\n    // bits[word] &= Long.rotateLeft(0xfffffffe,bit);\n  }","id":94733,"modified_method":"/** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(int index) {\n    int wordNum = index >> 6;\n    int bit = index & 0x03f;\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] &= ~bitmask;\n    // hmmm, it takes one more instruction to clear than it does to set... any\n    // way to work around this?  If there were only 63 bits per word, we could\n    // use a right shift of 10111111...111 in binary to position the 0 in the\n    // correct place (using sign extension).\n    // Could also use Long.rotateRight() or rotateLeft() *if* they were converted\n    // by the JVM into a native instruction.\n    // bits[word] &= Long.rotateLeft(0xfffffffe,bit);\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns true or false for the specified bit index\n  */\n  public boolean get(long index) {\n    int i = (int)(index >> 6);             // div 64\n    if (i>=bits.length) return false;\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }","id":94734,"modified_method":"/** Returns true or false for the specified bit index\n  */\n  public boolean get(long index) {\n    int i = (int)(index >> 6);             // div 64\n    if (i>=wlen) return false;\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    // TODO perfectionist one can implement this using bit operations\n    return (bits[i / PAGE_SIZE][i % PAGE_SIZE ] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Constructs an OpenBitSet large enough to hold numBits.\n   *\n   * @param numBits\n   */\n  public OpenBitSet(long numBits) {\n    bits = new long[bits2words(numBits)];\n    wlen = bits.length;\n  }","id":94735,"modified_method":"/** Constructs an OpenBitSet large enough to hold numBits.\n   *\n   * @param numBits\n   */\n  public OpenBitSet(long numBits) \n  {\n      this(numBits,true);\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** flips a bit and returns the resulting bit value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean flipAndGet(long index) {\n    int wordNum = (int)(index >> 6);   // div 64\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] ^= bitmask;\n    return (bits[wordNum] & bitmask) != 0;\n  }","id":94736,"modified_method":"/** flips a bit and returns the resulting bit value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean flipAndGet(long index) {\n    int wordNum = (int)(index >> 6);   // div 64\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] ^= bitmask;\n    return (bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Sets a bit and returns the previous value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean getAndSet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] |= bitmask;\n    return val;\n  }","id":94737,"modified_method":"/** Sets a bit and returns the previous value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean getAndSet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] & bitmask) != 0;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] |= bitmask;\n    return val;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** clears a bit, allowing access beyond the current set size without changing the size.*/\n  public void clear(long index) {\n    int wordNum = (int)(index >> 6); // div 64\n    if (wordNum>=wlen) return;\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] &= ~bitmask;\n  }","id":94738,"modified_method":"/** clears a bit, allowing access beyond the current set size without changing the size.*/\n  public void clear(long index) {\n    int wordNum = (int)(index >> 6); // div 64\n    if (wordNum>=wlen) return;\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] &= ~bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(long index) {\n    int wordNum = (int)(index >> 6); // div 64\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] &= ~bitmask;\n  }","id":94739,"modified_method":"/** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(long index) {\n    int wordNum = (int)(index >> 6); // div 64\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] &= ~bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }","id":94740,"modified_method":"/** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i / PAGE_SIZE][ i % PAGE_SIZE] = ~bits[i / PAGE_SIZE][ i % PAGE_SIZE];\n    }\n\n    bits[endWord / PAGE_SIZE][endWord % PAGE_SIZE] ^= endmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n  public int hashCode() {\n    // Start with a zero hash and use a mix that results in zero if the input is zero.\n    // This effectively truncates trailing zeros without an explicit check.\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int)((h>>32) ^ h) + 0x98761234;\n  }","id":94741,"modified_method":"@Override\n  public int hashCode() {\n    // Start with a zero hash and use a mix that results in zero if the input is zero.\n    // This effectively truncates trailing zeros without an explicit check.\n    long h = 0;\n    for (int i = wlen; --i>=0;) {\n      h ^= bits[i / PAGE_SIZE][i % PAGE_SIZE];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int)((h>>32) ^ h) + 0x98761234;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** flips a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastFlip(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] ^= bitmask;\n  }","id":94742,"modified_method":"/** flips a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastFlip(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] ^= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    int i = (int)(index>>>6);\n    if (i>=wlen) return -1;\n    int subIndex = (int)index & 0x3f; // index within the word\n    long word = bits[i] >>> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (((long)i)<<6) + (subIndex + BitUtil.ntz(word));\n    }\n\n    while(++i < wlen) {\n      word = bits[i];\n      if (word!=0) return (((long)i)<<6) + BitUtil.ntz(word);\n    }\n\n    return -1;\n  }","id":94743,"modified_method":"/** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    int i = (int)(index>>>6);\n    if (i>=wlen) return -1;\n    int subIndex = (int)index & 0x3f; // index within the word\n    long word = bits[i / PAGE_SIZE][i % PAGE_SIZE] >>> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (((long)i)<<6) + (subIndex + BitUtil.ntz(word));\n    }\n\n    while(++i < wlen) {\n      word = bits[i / PAGE_SIZE][i % PAGE_SIZE];\n      if (word!=0) return (((long)i)<<6) + BitUtil.ntz(word);\n    }\n\n    return -1;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Sets the bit at the specified index.\n  * The index should be less than the OpenBitSet size.\n  */\n  public void fastSet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] |= bitmask;\n  }","id":94744,"modified_method":"/** Sets the bit at the specified index.\n  * The index should be less than the OpenBitSet size.\n  */\n  public void fastSet(int index) {\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    bits[ wordNum / PAGE_SIZE ][ wordNum % PAGE_SIZE ] |= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size\n   */\n  public boolean fastGet(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }","id":94745,"modified_method":"/** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size\n   */\n  public boolean fastGet(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    // TODO perfectionist one can implement this using bit operations\n    return (bits[i / PAGE_SIZE][i % PAGE_SIZE ] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Expand the long[] with the size given as a number of words (64 bit longs).\n   * getNumWords() is unchanged by this call.\n   */\n  public void ensureCapacityWords(int numWords) {\n    if (bits.length < numWords) {\n      bits = ArrayUtil.grow(bits, numWords);\n    }\n  }","id":94746,"modified_method":"/** Expand the long[] with the size given as a number of words (64 bit longs).\n   * getNumWords() is unchanged by this call.\n   */\n  public void ensureCapacityWords(int numWords) \n  {\n    assert numWords<=wlen : \"Growing of paged bitset is not supported\"; \n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(int startIndex, int endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = ((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }","id":94747,"modified_method":"/** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(int startIndex, int endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = ((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] &= (startmask | endmask);\n      return;\n    }\n    \n\n    bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE]  &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    if (startWord / PAGE_SIZE == middle / PAGE_SIZE)\n    {\n        Arrays.fill(bits[startWord/PAGE_SIZE], (startWord+1) % PAGE_SIZE, middle % PAGE_SIZE, 0L);\n    } else\n    {\n        while (++startWord<middle)\n            bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] = 0L;\n    }\n    if (endWord < wlen) {\n      bits[endWord / PAGE_SIZE][endWord % PAGE_SIZE] &= endmask;\n    }\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns the current capacity in bits (1 greater than the index of the last bit) */\n  public long capacity() { return bits.length << 6; }","id":94748,"modified_method":"/** Returns the current capacity in bits (1 greater than the index of the last bit) */\n  public long capacity() { return ((long)wlen) << 6; }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }","id":94749,"modified_method":"public OpenBitSet(long numBits, boolean allocatePages) \n  {\n    wlen= bits2words(numBits);    \n    \n    bits = new long[getPageCount()][];\n    \n    if (allocatePages)\n    {\n        for (int allocated=0,i=0;allocated<wlen;allocated+=PAGE_SIZE,i++)\n            bits[i]=new long[PAGE_SIZE];\n    }\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** @return the number of set bits */\n  public long cardinality() {\n    return BitUtil.pop_array(bits,0,wlen);\n  }","id":94750,"modified_method":"/** @return the number of set bits */\n  public long cardinality() \n  {\n    long bitCount = 0L;\n    for (int i=getPageCount();i-->0;)\n        bitCount+=BitUtil.pop_array(bits[i],0,wlen);\n    \n    return bitCount;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Sets a bit and returns the previous value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean getAndSet(long index) {\n    int wordNum = (int)(index >> 6);      // div 64\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] |= bitmask;\n    return val;\n  }","id":94751,"modified_method":"/** Sets a bit and returns the previous value.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean getAndSet(long index) {\n    int wordNum = (int)(index >> 6);      // div 64\n    int bit = (int)index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] & bitmask) != 0;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] |= bitmask;\n    return val;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Sets a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }","id":94752,"modified_method":"/** Sets a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] |= (startmask & endmask);\n      return;\n    }\n\n    assert startWord / PAGE_SIZE == endWord / PAGE_SIZE : \"cross page sets not suppotred at all - they are not used\";\n\n    bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] |= startmask;\n    Arrays.fill(bits[ startWord / PAGE_SIZE], (startWord+1) % PAGE_SIZE , endWord % PAGE_SIZE , -1L);\n    bits[endWord / PAGE_SIZE][endWord % PAGE_SIZE] |= endmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Lowers numWords, the number of words in use,\n   * by checking for trailing zero words.\n   */\n  public void trimTrailingZeros() {\n    int idx = wlen-1;\n    while (idx>=0 && bits[idx]==0) idx--;\n    wlen = idx+1;\n  }","id":94753,"modified_method":"/** Lowers numWords, the number of words in use,\n   * by checking for trailing zero words.\n   */\n  public void trimTrailingZeros() {\n    int idx = wlen-1;\n    while (idx>=0 && bits[idx / PAGE_SIZE][idx % PAGE_SIZE]==0) idx--;\n    wlen = idx+1;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }","id":94754,"modified_method":"/** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n    \n    int aPageSize = this.PAGE_SIZE;\n    int bPageSize = b.PAGE_SIZE;\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i/aPageSize][i % aPageSize]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i/aPageSize][i % aPageSize] != b.bits[i/bPageSize][i % bPageSize]) return false;\n    }\n\n    return true;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }","id":94755,"modified_method":"/** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    // TODO perfectionist one can implement this using bit operations\n    return (bits[i / PAGE_SIZE][i % PAGE_SIZE ] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** flips a bit, expanding the set size if necessary */\n  public void flip(long index) {\n    int wordNum = expandingWordNum(index);\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] ^= bitmask;\n  }","id":94756,"modified_method":"/** flips a bit, expanding the set size if necessary */\n  public void flip(long index) {\n    int wordNum = expandingWordNum(index);\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] ^= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }","id":94757,"modified_method":"/** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=wlen) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    // TODO perfectionist one can implement this using bit operations\n    return (bits[i / PAGE_SIZE ][i % PAGE_SIZE] & bitmask) != 0;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Sets the bit at the specified index.\n  * The index should be less than the OpenBitSet size.\n  */\n  public void fastSet(long index) {\n    int wordNum = (int)(index >> 6);\n    int bit = (int)index & 0x3f;\n    long bitmask = 1L << bit;\n    bits[wordNum] |= bitmask;\n  }","id":94758,"modified_method":"/** Sets the bit at the specified index.\n  * The index should be less than the OpenBitSet size.\n  */\n  public void fastSet(long index) {\n    int wordNum = (int)(index >> 6);\n    int bit = (int)index & 0x3f;\n    long bitmask = 1L << bit;\n    bits[ wordNum / PAGE_SIZE ][ wordNum % PAGE_SIZE ] |= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    int i = index>>6;\n    if (i>=wlen) return -1;\n    int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < wlen) {\n      word = bits[i];\n      if (word!=0) return (i<<6) + BitUtil.ntz(word);\n    }\n\n    return -1;\n  }","id":94759,"modified_method":"/** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int nextSetBit(int index) {\n    int i = index>>6;\n    if (i>=wlen) return -1;\n    int subIndex = index & 0x3f;      // index within the word\n    long word = bits[i / PAGE_SIZE][ i % PAGE_SIZE] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return (i<<6) + subIndex + BitUtil.ntz(word);\n    }\n\n    while(++i < wlen) {\n      word = bits[i / PAGE_SIZE][i % PAGE_SIZE];\n      if (word!=0) return (i<<6) + BitUtil.ntz(word);\n    }\n\n    return -1;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }","id":94760,"modified_method":"/** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n        bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] &= (startmask | endmask);\n        return;\n    }\n\n    bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE]  &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    if (startWord / PAGE_SIZE == middle / PAGE_SIZE)\n    {\n        Arrays.fill(bits[startWord/PAGE_SIZE], (startWord+1) % PAGE_SIZE, middle % PAGE_SIZE, 0L);\n    } else\n    {\n        while (++startWord<middle)\n            bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE] = 0L;\n    }\n    if (endWord < wlen) {\n        bits[endWord / PAGE_SIZE][endWord % PAGE_SIZE] &= endmask;\n    }\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** this = this AND other */\n  public void intersect(OpenBitSet other) {\n    int newLen= Math.min(this.wlen,other.wlen);\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    // testing against zero can be more efficient\n    int pos=newLen;\n    while(--pos>=0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (this.wlen > newLen) {\n      // fill zeros from the new shorter length to the old length\n      Arrays.fill(bits,newLen,this.wlen,0);\n    }\n    this.wlen = newLen;\n  }","id":94761,"modified_method":"/** this = this AND other */\n  public void intersect(OpenBitSet other) {\n    int newLen= Math.min(this.wlen,other.wlen);\n    long[][] thisArr = this.bits;\n    long[][] otherArr = other.bits;\n    int thisPageSize = this.PAGE_SIZE;\n    int otherPageSize = other.PAGE_SIZE;\n    // testing against zero can be more efficient\n    int pos=newLen;\n    while(--pos>=0) {\n      thisArr[pos / thisPageSize][ pos % thisPageSize] &= otherArr[pos / otherPageSize][pos % otherPageSize];\n    }\n    \n    if (this.wlen > newLen) {\n      // fill zeros from the new shorter length to the old length\n      for (pos=wlen;pos-->newLen;)\n          thisArr[pos / thisPageSize][ pos % thisPageSize] =0;\n    }\n    this.wlen = newLen;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** returns 1 if the bit is set, 0 if not.\n   * The index should be less than the OpenBitSet size\n   */\n  public int getBit(int index) {\n    int i = index >> 6;                // div 64\n    int bit = index & 0x3f;            // mod 64\n    return ((int)(bits[i]>>>bit)) & 0x01;\n  }","id":94762,"modified_method":"/** returns 1 if the bit is set, 0 if not.\n   * The index should be less than the OpenBitSet size\n   */\n  public int getBit(int index) {\n    int i = index >> 6;                // div 64\n    int bit = index & 0x3f;            // mod 64\n    return ((int)(bits[i / PAGE_SIZE][i % PAGE_SIZE ]>>>bit)) & 0x01;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"/** flips a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastFlip(long index) {\n    int wordNum = (int)(index >> 6);   // div 64\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum] ^= bitmask;\n  }","id":94763,"modified_method":"/** flips a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastFlip(long index) {\n    int wordNum = (int)(index >> 6);   // div 64\n    int bit = (int)index & 0x3f;       // mod 64\n    long bitmask = 1L << bit;\n    bits[wordNum / PAGE_SIZE][wordNum % PAGE_SIZE] ^= bitmask;\n  }","commit_id":"c8b6763b1d0377a9d42d0625792762f460185397","url":"https://github.com/apache/cassandra"},{"original_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize = attrCache.size();\n      int newCacheSize = updateAttrCache();\n      if (oldCacheSize < newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","id":94764,"modified_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","commit_id":"b36f29298247f6c5db9f6eff7c2f5177a0fe3de5","url":"https://github.com/apache/hadoop"},{"original_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize = attrCache.size();\n      int newCacheSize = updateAttrCache();\n      if (oldCacheSize < newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","id":94765,"modified_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","commit_id":"74f4d8590de85eaa92c711010bbc0ff0e33ee2e8","url":"https://github.com/apache/hadoop"},{"original_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize = attrCache.size();\n      int newCacheSize = updateAttrCache();\n      if (oldCacheSize < newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","id":94766,"modified_method":"private void updateJmxCache() {\n    boolean getAllMetrics = false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS >= jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS = Time.now() + jmxCacheTTL;\n        if (lastRecs == null) {\n          getAllMetrics = true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder = new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS = Time.now();\n      lastRecs = null;  // in case regular interval update is not running\n    }\n  }","commit_id":"fb41615887b6a92a1bf8d34f5fbe7779b090ec15","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Get/Put performance results\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" KV Store Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %,d operations were posted...\\n\" +\n                         \" - GETs: %,9d Operations (%,d Misses and %,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - PUTs: %,9d Operations (%,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - Total Network Throughput: %6.3f Gbps*\\n\\n\" +\n                         \"* Figure includes key & value traffic but not database protocol overhead.\\n\\n\";\n\n        double oneGigabit = (1024 * 1024 * 1024) / 8;\n        long oneMB = (1024 * 1024);\n        double getThroughput = networkGetData.get() + (successfulGets.get() * config.keysize);\n               getThroughput /= (oneGigabit * config.duration);\n        long totalPuts = successfulPuts.get() + failedPuts.get();\n        double putThroughput = networkGetData.get() + (totalPuts * config.keysize);\n               putThroughput /= (oneGigabit * config.duration);\n\n        System.out.printf(display,\n                stats.getInvocationsCompleted(),\n                successfulGets.get(), missedGets.get(), failedGets.get(),\n                networkGetData.get() / oneMB,\n                rawGetData.get() / oneMB,\n                getThroughput,\n                successfulPuts.get(), failedPuts.get(),\n                networkPutData.get() / oneMB,\n                rawPutData.get() / oneMB,\n                putThroughput,\n                getThroughput + putThroughput);\n\n        // 2. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        if (config.stats.length() > 0) {\n            client.writeSummaryCSV(config.stats);\n        }\n    }","id":94767,"modified_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Get/Put performance results\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" KV Store Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %,d operations were posted...\\n\" +\n                         \" - GETs: %,9d Operations (%,d Misses and %,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - PUTs: %,9d Operations (%,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - Total Network Throughput: %6.3f Gbps*\\n\\n\" +\n                         \"* Figure includes key & value traffic but not database protocol overhead.\\n\\n\";\n\n        double oneGigabit = (1024 * 1024 * 1024) / 8;\n        long oneMB = (1024 * 1024);\n        double getThroughput = networkGetData.get() + (successfulGets.get() * config.keysize);\n               getThroughput /= (oneGigabit * config.duration);\n        long totalPuts = successfulPuts.get() + failedPuts.get();\n        double putThroughput = networkGetData.get() + (totalPuts * config.keysize);\n               putThroughput /= (oneGigabit * config.duration);\n\n        System.out.printf(display,\n                stats.getInvocationsCompleted(),\n                successfulGets.get(), missedGets.get(), failedGets.get(),\n                networkGetData.get() / oneMB,\n                rawGetData.get() / oneMB,\n                getThroughput,\n                successfulPuts.get(), failedPuts.get(),\n                networkPutData.get() / oneMB,\n                rawPutData.get() / oneMB,\n                putThroughput,\n                getThroughput + putThroughput);\n\n        // 2. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        client.writeSummaryCSV(config.stats);\n    }","commit_id":"8b474694920105f7fdc8df7f389177baffbaf1f0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Voting Board statistics, Voting results and performance statistics\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" Voting Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %d votes were received...\\n\" +\n                         \" - %,9d Accepted\\n\" +\n                         \" - %,9d Rejected (Invalid Contestant)\\n\" +\n                         \" - %,9d Rejected (Maximum Vote Count Reached)\\n\" +\n                         \" - %,9d Failed (Transaction Error)\\n\\n\";\n        System.out.printf(display, stats.getInvocationsCompleted(),\n                acceptedVotes.get(), badContestantVotes.get(),\n                badVoteCountVotes.get(), failedVotes.get());\n\n        // 2. Voting results\n        VoltTable result = client.callProcedure(\"Results\").getResults()[0];\n\n        System.out.println(\"Contestant Name\\t\\tVotes Received\");\n        while(result.advanceRow()) {\n            System.out.printf(\"%s\\t\\t%,14d\\n\", result.getString(0), result.getLong(2));\n        }\n        System.out.printf(\"\\nThe Winner is: %s\\n\\n\", result.fetchRow(0).getString(0));\n\n        // 3. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        if (config.stats.length() > 0) {\n            client.writeSummaryCSV(config.stats);\n        }\n    }","id":94768,"modified_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Voting Board statistics, Voting results and performance statistics\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" Voting Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %d votes were received...\\n\" +\n                         \" - %,9d Accepted\\n\" +\n                         \" - %,9d Rejected (Invalid Contestant)\\n\" +\n                         \" - %,9d Rejected (Maximum Vote Count Reached)\\n\" +\n                         \" - %,9d Failed (Transaction Error)\\n\\n\";\n        System.out.printf(display, stats.getInvocationsCompleted(),\n                acceptedVotes.get(), badContestantVotes.get(),\n                badVoteCountVotes.get(), failedVotes.get());\n\n        // 2. Voting results\n        VoltTable result = client.callProcedure(\"Results\").getResults()[0];\n\n        System.out.println(\"Contestant Name\\t\\tVotes Received\");\n        while(result.advanceRow()) {\n            System.out.printf(\"%s\\t\\t%,14d\\n\", result.getString(0), result.getLong(2));\n        }\n        System.out.printf(\"\\nThe Winner is: %s\\n\\n\", result.fetchRow(0).getString(0));\n\n        // 3. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        client.writeSummaryCSV(config.stats);\n    }","commit_id":"8b474694920105f7fdc8df7f389177baffbaf1f0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public void writeSummaryCSV(String path) throws IOException {\n        ClientStats stats = getStats(false, true, true)[0];\n\n        FileWriter fw = new FileWriter(path);\n        fw.append(String.format(\"%d,%d,%d,%d,%d,%d,%d\\n\",\n                stats.since,\n                System.currentTimeMillis() - stats.since,\n                stats.invocationsCompleted,\n                stats.kPercentileLatency(0.0),\n                stats.maxRoundTripTime,\n                stats.kPercentileLatency(0.95),\n                stats.kPercentileLatency(0.99)));\n        fw.close();\n    }","id":94769,"modified_method":"@Override\n    public void writeSummaryCSV(String path) throws IOException {\n        // don't do anything (be silent) if empty path\n        if ((path == null) || (path.length() == 0)) {\n            return;\n        }\n\n        ClientStats stats = getStats(false, true, true)[0];\n\n        FileWriter fw = new FileWriter(path);\n        fw.append(String.format(\"%d,%d,%d,%d,%d,%d,%d\\n\",\n                stats.since,\n                System.currentTimeMillis() - stats.since,\n                stats.invocationsCompleted,\n                stats.kPercentileLatency(0.0),\n                stats.maxRoundTripTime,\n                stats.kPercentileLatency(0.95),\n                stats.kPercentileLatency(0.99)));\n        fw.close();\n    }","commit_id":"8b474694920105f7fdc8df7f389177baffbaf1f0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Voting Board statistics, Voting results and performance statistics\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" Voting Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %d votes were received...\\n\" +\n                         \" - %,9d Accepted\\n\" +\n                         \" - %,9d Rejected (Invalid Contestant)\\n\" +\n                         \" - %,9d Rejected (Maximum Vote Count Reached)\\n\" +\n                         \" - %,9d Failed (Transaction Error)\\n\\n\";\n        System.out.printf(display, stats.getInvocationsCompleted(),\n                acceptedVotes.get(), badContestantVotes.get(),\n                badVoteCountVotes.get(), failedVotes.get());\n\n        // 2. Voting results\n        VoltTable result = client.callProcedure(\"Results\").getResults()[0];\n\n        System.out.println(\"Contestant Name\\t\\tVotes Received\");\n        while(result.advanceRow()) {\n            System.out.printf(\"%s\\t\\t%,14d\\n\", result.getString(0), result.getLong(2));\n        }\n        System.out.printf(\"\\nThe Winner is: %s\\n\\n\", result.fetchRow(0).getString(0));\n\n        // 3. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        if (config.stats.length() > 0) {\n            client.writeSummaryCSV(config.stats);\n        }\n    }","id":94770,"modified_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Voting Board statistics, Voting results and performance statistics\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" Voting Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %d votes were received...\\n\" +\n                         \" - %,9d Accepted\\n\" +\n                         \" - %,9d Rejected (Invalid Contestant)\\n\" +\n                         \" - %,9d Rejected (Maximum Vote Count Reached)\\n\" +\n                         \" - %,9d Failed (Transaction Error)\\n\\n\";\n        System.out.printf(display, stats.getInvocationsCompleted(),\n                acceptedVotes.get(), badContestantVotes.get(),\n                badVoteCountVotes.get(), failedVotes.get());\n\n        // 2. Voting results\n        VoltTable result = client.callProcedure(\"Results\").getResults()[0];\n\n        System.out.println(\"Contestant Name\\t\\tVotes Received\");\n        while(result.advanceRow()) {\n            System.out.printf(\"%s\\t\\t%,14d\\n\", result.getString(0), result.getLong(2));\n        }\n        System.out.printf(\"\\nThe Winner is: %s\\n\\n\", result.fetchRow(0).getString(0));\n\n        // 3. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        client.writeSummaryCSV(config.stats);\n    }","commit_id":"8b474694920105f7fdc8df7f389177baffbaf1f0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Get/Put performance results\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" KV Store Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %,d operations were posted...\\n\" +\n                         \" - GETs: %,9d Operations (%,d Misses and %,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - PUTs: %,9d Operations (%,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - Total Network Throughput: %6.3f Gbps*\\n\\n\" +\n                         \"* Figure includes key & value traffic but not database protocol overhead.\\n\\n\";\n\n        double oneGigabit = (1024 * 1024 * 1024) / 8;\n        long oneMB = (1024 * 1024);\n        double getThroughput = networkGetData.get() + (successfulGets.get() * config.keysize);\n               getThroughput /= (oneGigabit * config.duration);\n        long totalPuts = successfulPuts.get() + failedPuts.get();\n        double putThroughput = networkGetData.get() + (totalPuts * config.keysize);\n               putThroughput /= (oneGigabit * config.duration);\n\n        System.out.printf(display,\n                stats.getInvocationsCompleted(),\n                successfulGets.get(), missedGets.get(), failedGets.get(),\n                networkGetData.get() / oneMB,\n                rawGetData.get() / oneMB,\n                getThroughput,\n                successfulPuts.get(), failedPuts.get(),\n                networkPutData.get() / oneMB,\n                rawPutData.get() / oneMB,\n                putThroughput,\n                getThroughput + putThroughput);\n\n        // 2. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        if (config.stats.length() > 0) {\n            client.writeSummaryCSV(config.stats);\n        }\n    }","id":94771,"modified_method":"/**\n     * Prints the results of the voting simulation and statistics\n     * about performance.\n     *\n     * @throws Exception if anything unexpected happens.\n     */\n    public synchronized void printResults() throws Exception {\n        ClientStats stats = client.getStats(false, true, true)[0];\n\n        // 1. Get/Put performance results\n        String display = \"\\n\" +\n                         HORIZONTAL_RULE +\n                         \" KV Store Results\\n\" +\n                         HORIZONTAL_RULE +\n                         \"\\nA total of %,d operations were posted...\\n\" +\n                         \" - GETs: %,9d Operations (%,d Misses and %,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - PUTs: %,9d Operations (%,d Failures)\\n\" +\n                         \"         %,9d MB in compressed store data\\n\" +\n                         \"         %,9d MB in uncompressed application data\\n\" +\n                         \"         Network Throughput: %6.3f Gbps*\\n\" +\n                         \" - Total Network Throughput: %6.3f Gbps*\\n\\n\" +\n                         \"* Figure includes key & value traffic but not database protocol overhead.\\n\\n\";\n\n        double oneGigabit = (1024 * 1024 * 1024) / 8;\n        long oneMB = (1024 * 1024);\n        double getThroughput = networkGetData.get() + (successfulGets.get() * config.keysize);\n               getThroughput /= (oneGigabit * config.duration);\n        long totalPuts = successfulPuts.get() + failedPuts.get();\n        double putThroughput = networkGetData.get() + (totalPuts * config.keysize);\n               putThroughput /= (oneGigabit * config.duration);\n\n        System.out.printf(display,\n                stats.getInvocationsCompleted(),\n                successfulGets.get(), missedGets.get(), failedGets.get(),\n                networkGetData.get() / oneMB,\n                rawGetData.get() / oneMB,\n                getThroughput,\n                successfulPuts.get(), failedPuts.get(),\n                networkPutData.get() / oneMB,\n                rawPutData.get() / oneMB,\n                putThroughput,\n                getThroughput + putThroughput);\n\n        // 2. Performance statistics\n        System.out.print(HORIZONTAL_RULE);\n        System.out.println(\" System Statistics\");\n        System.out.println(HORIZONTAL_RULE);\n\n        long now = System.currentTimeMillis();\n        System.out.printf(\"For %.1f seconds, an average throughput of %d txns/sec was sustained.\\n\",\n                (now - stats.getStartTimestamp()) / 1000.0, stats.getThroughput(now));\n        System.out.printf(\"Average latency was %d ms per procedure.\\n\", stats.getAverageLatency());\n        System.out.printf(\"Average internal latency, as reported by the server(s) was %d ms.\\n\",\n                stats.getAverageInternalLatency());\n        System.out.printf(\"Measured 95th and 99th percentile latencies were %d and %d ms respectively\\n\",\n                stats.kPercentileLatency(.95), stats.kPercentileLatency(.99));\n\n        // 4. Write stats to file if requested\n        client.writeSummaryCSV(config.stats);\n    }","commit_id":"8b474694920105f7fdc8df7f389177baffbaf1f0","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static Test suite() {\n      TestSuite suite = new TestSuite(\"Tests for org.eclipse.xtext.generator.tests\");\n      suite.addTestSuite(org.eclipse.xtext.EcoreUtil2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilGetReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.MweReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.XtextGrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.common.services.DefaultTerminalConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.concurrent.StateAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.GrammarParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ManifestMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ecore.Bug283278Test.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ElementFinderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.EmptyPackageAwareGrammarAccessFragmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.FragmentFakingEcoreResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.GrammarAccessUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.UnicodeCharacterDatabaseNamesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.resource.ResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.AnotherInheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Bug265111Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Inheritance2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.InheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.ToEcoreTrafoTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.Bug282355Test.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.IngoreCaseTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.LexerErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug266082Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988WithEagerLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.CrossRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.LinkingErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.PartialLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.SimpleAttributeResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.BasicLazyLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug281990Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug289059Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkingResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyURIEncoderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MetamodelRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MultiGenMMTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.PathTraverserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.ReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.UriBasedReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parseerrorhandling.ParseErrorHandlingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.AntlrDatatypeRuleTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.CrossContainmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.DefaultEcoreElementFactoryTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.OffsetInformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentMultiTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentSingleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserReplaceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPointerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextGrammarComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserBugsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289515Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.LexerProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.TokenAcceptorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug287184Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug288432Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.ParserBug281962Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.EFactoryValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.GrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.epatch.EpatchComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.GrammarAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PackratParserGenUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug292245Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug297105Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.DynamicChannelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.HiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.InterpreterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratHiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ASTChangeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.CommentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.EmptyModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.HiddenTokensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.InvalidTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.LengthOffsetLineTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeContentAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ParseTreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.SerializeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.FormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.XtextFormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilLinuxAndMacTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilWindowsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.Bug299395Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.ComplexReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationBug269362Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.WhitespacePreservingCallbackTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.XtextGrammarReconcilationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.transientvalues.TransientValuesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.unassignedtext.UnassignedTextTest.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.CommentOnEofBug_234135_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.LeafNodeBug_234132_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ClassloaderClasspathUriResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.EObjectHandleImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ExternalContentSupportTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ResourceSetReferencingResourceSetTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourcePerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ecore.EcoreResourceDescriptionManagerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultReferenceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescription2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionDeltaTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceDescriptionsBasedContainerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptionsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.DeclarativeScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.ProfilingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.QualifiedNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.SimpleNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.service.GenericModuleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.AutoBoxingDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ChainedIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.FilteringIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.LineFilterOutputStreamTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.MappingIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.OnChangeEvictingCacheAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.PolymorphicDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ReflectionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.SimpleCacheTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.StringsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TailWriterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TuplesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithoutEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcreteSyntaxValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcurrentValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.DeclarativeValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ImportUriValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidationHelperTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ResourceValidatorImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ValidatorTestingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313AntlrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313PackratTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.ParserComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug285605Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug290919Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.KeywordInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.OverriddenValueInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ResourceLoadTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.RuleWithoutInstantiationInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ValidEntryRuleInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextGrammarSerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextScopingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.MultiValueFeatureTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.UnassignedRuleCallTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.Xtext2EcoreTransformerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.parser.packrat.XtextPackratParserTest.class);\n      return suite;\n   }","id":94772,"modified_method":"public static Test suite() {\n      TestSuite suite = new TestSuite(\"Tests for org.eclipse.xtext.generator.tests\");\n      suite.addTestSuite(org.eclipse.xtext.EcoreUtil2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilGetReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.MweReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.XtextGrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.common.services.DefaultTerminalConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.concurrent.StateAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.GrammarParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ManifestMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ecore.Bug283278Test.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ElementFinderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.EmptyPackageAwareGrammarAccessFragmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.FragmentFakingEcoreResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.GrammarAccessUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.UnicodeCharacterDatabaseNamesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.resource.ResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.AnotherInheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Bug265111Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Inheritance2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.InheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.ToEcoreTrafoTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.Bug282355Test.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.IngoreCaseTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.LexerErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug266082Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988WithEagerLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.CrossRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.LinkingErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.PartialLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.SimpleAttributeResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.BasicLazyLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug281990Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug289059Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkingResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyURIEncoderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MetamodelRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MultiGenMMTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.PathTraverserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.ReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.UriBasedReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parseerrorhandling.ParseErrorHandlingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.AntlrDatatypeRuleTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.CrossContainmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.DefaultEcoreElementFactoryTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.OffsetInformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentMultiTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentSingleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserReplaceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPointerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextGrammarComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserBugsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289515Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.LexerProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.TokenAcceptorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug287184Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug288432Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.ParserBug281962Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.EFactoryValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.GrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.epatch.EpatchComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.GrammarAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PackratParserGenUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug292245Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug297105Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.DynamicChannelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.HiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.InterpreterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratHiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ASTChangeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.CommentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.EmptyModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.HiddenTokensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.InvalidTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.LengthOffsetLineTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeContentAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ParseTreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.SerializeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.FormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.XtextFormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilLinuxAndMacTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilWindowsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.Bug299395Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.ComplexReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationBug269362Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.WhitespacePreservingCallbackTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.XtextGrammarReconcilationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.transientvalues.TransientValuesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.unassignedtext.UnassignedTextTest.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.CommentOnEofBug_234135_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.LeafNodeBug_234132_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ClassloaderClasspathUriResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.EObjectHandleImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ExternalContentSupportTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ResourceSetReferencingResourceSetTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourcePerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ecore.EcoreResourceDescriptionManagerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultReferenceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescription2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionDeltaTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceDescriptionsBasedContainerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptionsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.DeclarativeScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.QualifiedNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.SimpleNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.service.GenericModuleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.AutoBoxingDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ChainedIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.FilteringIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.LineFilterOutputStreamTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.MappingIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.OnChangeEvictingCacheAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.PolymorphicDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ReflectionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.SimpleCacheTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.StringsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TailWriterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TuplesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithoutEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcreteSyntaxValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcurrentValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.DeclarativeValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ImportUriValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidationHelperTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ResourceValidatorImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ValidatorTestingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313AntlrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313PackratTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.ParserComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug285605Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug290919Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.KeywordInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.OverriddenValueInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ResourceLoadTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.RuleWithoutInstantiationInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ValidEntryRuleInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextGrammarSerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextScopingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.MultiValueFeatureTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.UnassignedRuleCallTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.Xtext2EcoreTransformerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.parser.packrat.XtextPackratParserTest.class);\n      return suite;\n   }","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public Manager getContainerManager() {\n\t\treturn delegate.getContainerManager();\n\t}","id":94773,"modified_method":"@Inject\n\tpublic DefaultResourceUIServiceProvider(IResourceServiceProvider delegate) {\n\t\tthis.delegate = delegate;\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public EcoreResourceUIServiceProviderImpl() {\n\t\t//setDelegate(new EcoreResourceServiceProviderImpl());\n\t}","id":94774,"modified_method":"public EcoreResourceUIServiceProviderImpl() {\n\t\tsuper(new EcoreResourceServiceProviderImpl());\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public java.lang.Void exec(XtextResource state) throws Exception {\n\t\t\tIParseResult parseResult = state.getParseResult();\n\t\t\tif (parseResult != null) {\n\t\t\t\tCompositeNode rootNode = parseResult.getRootNode();\n\t\t\t\tif (rootNode != null) {\n\t\t\t\t\tAbstractNode node = ParseTreeUtil.getCurrentOrFollowingNodeByOffset(rootNode, selection\n\t\t\t\t\t\t\t.getOffset());\n\t\t\t\t\tif (node != null) {\n\t\t\t\t\t\tEObject selectedElement = NodeUtil.getNearestSemanticObject(node);\n\t\t\t\t\t\tif (selectedElement != null) {\n\t\t\t\t\t\t\turi = EcoreUtil.getURI(selectedElement);\n\t\t\t\t\t\t\tname = qualifiedNameProvider.getQualifiedName(selectedElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":94775,"modified_method":"public IEObjectDescription exec(XtextResource state) throws Exception {\n\t\t\tIParseResult parseResult = state.getParseResult();\n\t\t\tif (parseResult != null && parseResult.getRootNode() != null) {\n\t\t\t\tAbstractNode node = ParseTreeUtil.getCurrentOrFollowingNodeByOffset(parseResult.getRootNode(),\n\t\t\t\t\t\tselection.getOffset());\n\t\t\t\twhile (node != null) {\n\t\t\t\t\tif (node.getGrammarElement() instanceof CrossReference) {\n\t\t\t\t\t\tEObject referenceOwner = NodeUtil.getNearestSemanticObject(node);\n\t\t\t\t\t\tEReference eReference = GrammarUtil.getReference((CrossReference) node.getGrammarElement(),\n\t\t\t\t\t\t\t\treferenceOwner.eClass());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tList<EObject> linkedEObjects = linkingService.getLinkedObjects(referenceOwner, eReference,\n\t\t\t\t\t\t\t\t\tnode);\n\t\t\t\t\t\t\tif (!linkedEObjects.isEmpty()) {\n\t\t\t\t\t\t\t\tIScope scope = scopeProvider.getScope(referenceOwner, eReference);\n\t\t\t\t\t\t\t\treturn scope.getContentByEObject(linkedEObjects.get(0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (IllegalNodeException ex) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (node.getElement() != null) {\n\t\t\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(state\n\t\t\t\t\t\t\t\t.getURI());\n\t\t\t\t\t\tIterator<IEObjectDescription> eObjectDescriptors = resourceDescription.getExportedObjectsForEObject(node.getElement()).iterator();\n\t\t\t\t\t\tif(eObjectDescriptors.hasNext()) {\n\t\t\t\t\t\t\treturn eObjectDescriptors.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.getParent();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public Object execute(ExecutionEvent event) throws ExecutionException {\n\t\ttry {\n\t\t\tXtextEditor editor = (XtextEditor) HandlerUtil.getActiveEditor(event);\n\t\t\tfinal ITextSelection selection = (ITextSelection) editor.getSelectionProvider().getSelection();\n\n\t\t\tEObjectResolver resolver = new EObjectResolver(selection);\n\t\t\teditor.getDocument().readOnly(resolver);\n\t\t\tNewSearchUI.activateSearchResultView();\n\t\t\tReferenceQuery referenceQuery = queryProvider.get();\t\t\t\n\t\t\tString label = \"Xtext References to \" + resolver.getName();\n\t\t\tIterator<IStorage> storages = storage2UriMapper.getStorages(resolver.getURI()).iterator();\n\t\t\tif(storages.hasNext()) {\n\t\t\t\tlabel += \" (\" + storages.next().getFullPath().toString() + \")\";\n\t\t\t}\n\t\t\treferenceQuery.init(resolver.getURI(), label);\n\t\t\tNewSearchUI.runQueryInBackground(referenceQuery);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error finding references\", e);\n\t\t}\n\t\treturn null;\n\t}","id":94776,"modified_method":"public Object execute(ExecutionEvent event) throws ExecutionException {\n\t\ttry {\n\t\t\tXtextEditor editor = (XtextEditor) HandlerUtil.getActiveEditor(event);\n\t\t\tfinal ITextSelection selection = (ITextSelection) editor.getSelectionProvider().getSelection();\n\n\t\t\tIEObjectDescription eObjectDescription = editor.getDocument().readOnly(new EObjectResolver(selection));\n\t\t\tif (eObjectDescription != null) {\n\t\t\t\tReferenceQuery referenceQuery = queryProvider.get();\n\t\t\t\tString label = \"Xtext References to \" + eObjectDescription.getQualifiedName();\n\t\t\t\tIterator<IStorage> storages = storage2UriMapper.getStorages(eObjectDescription.getEObjectURI()).iterator();\n\t\t\t\tif (storages.hasNext()) {\n\t\t\t\t\tlabel += \" (\" + storages.next().getFullPath().toString() + \")\";\n\t\t\t\t}\n\t\t\t\treferenceQuery.init(eObjectDescription.getEObjectURI(), label);\n\t\t\t\tNewSearchUI.activateSearchResultView();\n\t\t\t\tNewSearchUI.runQueryInBackground(referenceQuery);\n\t\t\t} \n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error finding references\", e);\n\t\t}\n\t\treturn null;\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean canRerun() {\n\t\treturn false;\n\t}","id":94777,"modified_method":"public boolean canRerun() {\n\t\treturn true;\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {\n\t\tif (newInput instanceof ReferenceSearchResult) {\n\t\t\tif (rootElements != null) {\n\t\t\t\trootElements.clear();\n\t\t\t}\n\t\t\tfor (IReferenceDescription referenceDescription : ((ReferenceSearchResult) newInput)\n\t\t\t\t\t.getMatchingReferences()) {\n\t\t\t\tURI containerEObjectURI = referenceDescription.getContainerEObjectURI();\n\t\t\t\tfinal URI eObjectURI = (containerEObjectURI == null) ? referenceDescription.getSourceEObjectUri()\n\t\t\t\t\t\t: containerEObjectURI;\n\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(eObjectURI\n\t\t\t\t\t\t.trimFragment());\n\t\t\t\tif (resourceDescription != null) {\n\t\t\t\t\tReferenceSearchViewTreeNode resourceNode = resourceNode(resourceDescription);\n\t\t\t\t\tfor (IEObjectDescription eObjectDescription : resourceDescription.getExportedObjects()) {\n\t\t\t\t\t\tif (eObjectDescription.getEObjectURI().equals(eObjectURI)) {\n\t\t\t\t\t\t\tnew ReferenceSearchViewTreeNode(resourceNode, eObjectURI, eObjectDescription);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewer.refresh();\n\t\t}\n\t}","id":94778,"modified_method":"public void inputChanged(final Viewer viewer, Object oldInput, Object newInput) {\n\t\tsynchronized (viewer) {\n\t\t\tif (rootElements != null) {\n\t\t\t\trootElements.clear();\n\t\t\t}\n\t\t\tif (newInput instanceof ReferenceSearchResult) {\n\t\t\t\tfor (IReferenceDescription referenceDescription : ((ReferenceSearchResult) newInput)\n\t\t\t\t\t\t.getMatchingReferences()) {\n\t\t\t\t\tURI containerEObjectURI = referenceDescription.getContainerEObjectURI();\n\t\t\t\t\tfinal URI eObjectURI = (containerEObjectURI == null) ? referenceDescription.getSourceEObjectUri()\n\t\t\t\t\t\t\t: containerEObjectURI;\n\t\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(eObjectURI\n\t\t\t\t\t\t\t.trimFragment());\n\t\t\t\t\tif (resourceDescription != null) {\n\t\t\t\t\t\tReferenceSearchViewTreeNode resourceNode = resourceNode(resourceDescription);\n\t\t\t\t\t\tfor (IEObjectDescription eObjectDescription : resourceDescription.getExportedObjects()) {\n\t\t\t\t\t\t\tif (eObjectDescription.getEObjectURI().equals(eObjectURI)) {\n\t\t\t\t\t\t\t\tnew ReferenceSearchViewTreeNode(resourceNode, eObjectURI, eObjectDescription);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewer.refresh();\n\t\t}\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public Object[] getElements(Object inputElement) {\n\t\tif (rootElements == null) {\n\t\t\treturn new Object[0];\n\t\t}\n\t\treturn Iterables.newArray(rootElements, ReferenceSearchViewTreeNode.class);\n\t}","id":94779,"modified_method":"public Object[] getElements(Object inputElement) {\n\t\tif (rootElements == null || rootElements.isEmpty()) {\n\t\t\treturn new Object[0];\n\t\t}\n\t\treturn Iterables.newArray(rootElements, ReferenceSearchViewTreeNode.class);\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setViewPart(ISearchResultViewPart part) {\n\t\t// TODO Auto-generated method stub\n\t}","id":94780,"modified_method":"public void setViewPart(ISearchResultViewPart part) {\n\t\tthis.part = part;\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public String getLabel() {\n\t\treturn searchResult.getLabel();\n\t}","id":94781,"modified_method":"public String getLabel() {\n\t\treturn searchResult == null ? \"\" : searchResult.getLabel();\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setInput(ISearchResult newSearchResult, Object uiState) {\n\t\tif (searchResult != null) {\n\t\t\tsearchResult.removeListener(this);\n\t\t}\n\t\tthis.searchResult = newSearchResult;\n\t\tthis.uiState = uiState;\n\t\tif (searchResult != null) {\n\t\t\tsearchResult.addListener(this);\n\t\t}\n\t}","id":94782,"modified_method":"public void setInput(ISearchResult newSearchResult, Object uiState) {\n\t\tsynchronized (viewer) {\n\t\t\tif (searchResult != null) {\n\t\t\t\tsearchResult.removeListener(this);\n\t\t\t}\n\t\t\tthis.searchResult = newSearchResult;\n\t\t\tthis.uiState = uiState;\n\t\t\tif (searchResult != null) {\n\t\t\t\tsearchResult.addListener(this);\n\t\t\t\tviewer.setInput(newSearchResult);\n\t\t\t\tif (uiState instanceof ISelection) {\n\t\t\t\t\tviewer.setSelection((ISelection) uiState);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart.updateLabel();\n\t\t}\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public void searchResultChanged(final SearchResultEvent e) {\n\t\tDisplay.getDefault().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tviewer.setInput(e.getSearchResult());\n\t\t\t}\n\t\t});\n\t}","id":94783,"modified_method":"public void searchResultChanged(final SearchResultEvent e) {\n\t\tDisplay.getDefault().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (viewer) {\n\t\t\t\t\tviewer.setInput(e.getSearchResult());\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}","commit_id":"998f3ca63f5a36540b65486249dc63f37deef2cc","url":"https://github.com/eclipse/xtext"},{"original_method":"public static Test suite() {\n      TestSuite suite = new TestSuite(\"Tests for org.eclipse.xtext.generator.tests\");\n      suite.addTestSuite(org.eclipse.xtext.EcoreUtil2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilGetReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.MweReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.XtextGrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.common.services.DefaultTerminalConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.concurrent.StateAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.GrammarParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ManifestMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ecore.Bug283278Test.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ElementFinderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.EmptyPackageAwareGrammarAccessFragmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.FragmentFakingEcoreResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.GrammarAccessUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.UnicodeCharacterDatabaseNamesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.resource.ResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.AnotherInheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Bug265111Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Inheritance2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.InheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.ToEcoreTrafoTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.Bug282355Test.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.IngoreCaseTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.LexerErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug266082Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988WithEagerLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.CrossRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.LinkingErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.PartialLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.SimpleAttributeResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.BasicLazyLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug281990Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug289059Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkingResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyURIEncoderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MetamodelRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MultiGenMMTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.PathTraverserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.ReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.UriBasedReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parseerrorhandling.ParseErrorHandlingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.AntlrDatatypeRuleTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.CrossContainmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.DefaultEcoreElementFactoryTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.OffsetInformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentMultiTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentSingleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserReplaceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPointerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextGrammarComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserBugsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289515Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.LexerProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.TokenAcceptorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug287184Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug288432Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.ParserBug281962Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.EFactoryValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.GrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.epatch.EpatchComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.GrammarAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PackratParserGenUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug292245Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug297105Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.DynamicChannelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.HiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.InterpreterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratHiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ASTChangeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.CommentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.EmptyModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.HiddenTokensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.InvalidTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.LengthOffsetLineTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeContentAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ParseTreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.SerializeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.FormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.XtextFormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilLinuxAndMacTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilWindowsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.Bug299395Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.ComplexReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationBug269362Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.WhitespacePreservingCallbackTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.XtextGrammarReconcilationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.transientvalues.TransientValuesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.unassignedtext.UnassignedTextTest.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.CommentOnEofBug_234135_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.LeafNodeBug_234132_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ClassloaderClasspathUriResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.EObjectHandleImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ExternalContentSupportTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ResourceSetReferencingResourceSetTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourcePerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ecore.EcoreResourceDescriptionManagerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultReferenceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescription2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionDeltaTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceDescriptionsBasedContainerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptionsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.DeclarativeScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.ProfilingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.QualifiedNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.SimpleNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.service.GenericModuleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.AutoBoxingDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ChainedIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.FilteringIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.LineFilterOutputStreamTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.MappingIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.OnChangeEvictingCacheAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.PolymorphicDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ReflectionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.SimpleCacheTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.StringsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TailWriterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TuplesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithoutEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcreteSyntaxValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcurrentValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.DeclarativeValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ImportUriValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidationHelperTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ResourceValidatorImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ValidatorTestingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313AntlrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313PackratTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.ParserComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug285605Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug290919Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.KeywordInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.OverriddenValueInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ResourceLoadTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.RuleWithoutInstantiationInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ValidEntryRuleInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextGrammarSerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextScopingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.MultiValueFeatureTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.UnassignedRuleCallTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.Xtext2EcoreTransformerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.parser.packrat.XtextPackratParserTest.class);\n      return suite;\n   }","id":94784,"modified_method":"public static Test suite() {\n      TestSuite suite = new TestSuite(\"Tests for org.eclipse.xtext.generator.tests\");\n      suite.addTestSuite(org.eclipse.xtext.EcoreUtil2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilGetReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.GrammarUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.MweReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.XtextGrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.actions.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.common.services.DefaultTerminalConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.concurrent.StateAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.GrammarParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratEnumAndReferenceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.enumrules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ManifestMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.ecore.Bug283278Test.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ElementFinderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.EmptyPackageAwareGrammarAccessFragmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.FragmentFakingEcoreResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.GrammarAccessUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.grammarAccess.UnicodeCharacterDatabaseNamesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.generator.resource.ResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.AnotherInheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Bug265111Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.Inheritance2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.InheritanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.grammarinheritance.ToEcoreTrafoTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.Bug282355Test.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.IngoreCaseTest.class);\n      suite.addTestSuite(org.eclipse.xtext.lexer.LexerErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug266082Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.Bug287988WithEagerLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.CrossRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.LinkingErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.PartialLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.SimpleAttributeResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.BasicLazyLinkingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug281990Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.Bug289059Test.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyLinkingResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.linking.lazy.LazyURIEncoderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MetamodelRefTest.class);\n      suite.addTestSuite(org.eclipse.xtext.metamodelreferencing.tests.MultiGenMMTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.PathTraverserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.ReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.mwe.UriBasedReaderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parseerrorhandling.ParseErrorHandlingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.AntlrDatatypeRuleTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.CrossContainmentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.DefaultEcoreElementFactoryTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.OffsetInformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentMultiTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserCrossContainmentSingleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserReplaceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.PartialParsingPointerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextGrammarComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserBugsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.XtextParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289515Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug289524Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889ExTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.Bug296889Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.LexerProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.antlr.TokenAcceptorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug287184Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.Bug288432Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.assignments.ParserBug281962Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.EFactoryValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.GrammarTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.MetamodelTransformationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.PartialParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.SerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.datatyperules.ValueConverterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.epatch.EpatchComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.AntlrParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.GrammarAccessTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.keywords.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PackratParserGenUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.packrat.PerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug292245Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.Bug297105Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.DynamicChannelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.HiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.InterpreterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratHiddensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.PackratParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parser.terminalrules.ParserTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ASTChangeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.CommentTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.EmptyModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.HiddenTokensTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.InvalidTokenTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.LengthOffsetLineTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeContentAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeModelTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.NodeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.ParseTreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.SerializeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.FormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.formatter.XtextFormatterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilLinuxAndMacTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.impl.ParsetreeUtilWindowsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.Bug299395Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.ComplexReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationBug269362Test.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SerializationErrorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.WhitespacePreservingCallbackTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.reconstr.XtextGrammarReconcilationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.transientvalues.TransientValuesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.parsetree.unassignedtext.UnassignedTextTest.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.CommentOnEofBug_234135_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.reference.LeafNodeBug_234132_Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ClassloaderClasspathUriResolverTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.EObjectHandleImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ExternalContentSupportTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ResourceSetReferencingResourceSetTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourcePerformanceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.XtextResourceTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.ecore.EcoreResourceDescriptionManagerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultReferenceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescription2Test.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionDeltaTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.DefaultResourceDescriptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceDescriptionsBasedContainerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptionsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopeTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.ScopesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.DeclarativeScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.QualifiedNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.scoping.impl.SimpleNameScopeProviderTest.class);\n      suite.addTestSuite(org.eclipse.xtext.service.GenericModuleTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.AutoBoxingDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ChainedIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.FilteringIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.LineFilterOutputStreamTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.MappingIteratorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.OnChangeEvictingCacheAdapterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.PolymorphicDispatcherTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.ReflectionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.SimpleCacheTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.StringsTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TailWriterTest.class);\n      suite.addTestSuite(org.eclipse.xtext.util.TuplesTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.CompositeValidatorWithoutEObjectValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcreteSyntaxValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ConcurrentValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.DeclarativeValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ImportUriValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidationHelperTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.NamesAreUniqueValidatorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ResourceValidatorImplTest.class);\n      suite.addTestSuite(org.eclipse.xtext.validation.ValidatorTestingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313AntlrTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.Bug250313PackratTest.class);\n      suite.addTestSuite(org.eclipse.xtext.valueconverter.ParserComparingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug285605Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.Bug290919Test.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ExceptionTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.KeywordInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.OverriddenValueInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ResourceLoadTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.RuleWithoutInstantiationInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ValidEntryRuleInspectorTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextGrammarSerializationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextLinkerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextScopingTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.XtextValidationTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.MultiValueFeatureTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.UnassignedRuleCallTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.ecoreInference.Xtext2EcoreTransformerTest.class);\n      suite.addTestSuite(org.eclipse.xtext.xtext.parser.packrat.XtextPackratParserTest.class);\n      return suite;\n   }","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Iterable<IReferenceDescription> getReferenceDescriptions() {\n\t\tif (referenceDescriptions == null) {\n\t\t\tIterable<IEObjectDescription> exportedObjects = getExportedObjects();\n\t\t\tthis.referenceDescriptions = Lists.newArrayList();\n\t\t\tTreeIterator<EObject> contents = EcoreUtil.getAllProperContents(this.resource, true);\n\t\t\twhile (contents.hasNext()) {\n\t\t\t\tEObject eObject = contents.next();\n\t\t\t\tEList<EReference> references = eObject.eClass().getEAllReferences();\n\t\t\t\tfor (EReference eReference : references) {\n\t\t\t\t\tif (!eReference.isContainment()) {\n\t\t\t\t\t\tObject val = eObject.eGet(eReference);\n\t\t\t\t\t\tif (val!=null) {\n\t\t\t\t\t\t\tif (eReference.isMany()) {\n\t\t\t\t\t\t\t\tList<EObject> list = (List<EObject>) val;\n\t\t\t\t\t\t\t\tfor(int i = 0;i<list.size();i++) {\n\t\t\t\t\t\t\t\t\tEObject to = list.get(i);\n\t\t\t\t\t\t\t\t\tif (isResolved(to)) {\n\t\t\t\t\t\t\t\t\t\treferenceDescriptions.add(new DefaultReferenceDescription(eObject,to,eReference,i, findContainerEObjectURI(eObject, exportedObjects)));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tEObject to = (EObject) val;\n\t\t\t\t\t\t\t\tif (isResolved(to)) {\n\t\t\t\t\t\t\t\t\treferenceDescriptions.add(new DefaultReferenceDescription(eObject,to,eReference,-1,findContainerEObjectURI(eObject, exportedObjects)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn referenceDescriptions;\n\t}","id":94785,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tpublic Iterable<IReferenceDescription> getReferenceDescriptions() {\n\t\tif (this.referenceDescriptions == null) {\n\t\t\tIterable<IEObjectDescription> exportedObjects = getExportedObjects();\n\t\t\tList<IReferenceDescription> referenceDescriptions = Lists.newArrayList();\n\t\t\tTreeIterator<EObject> contents = EcoreUtil.getAllProperContents(this.resource, true);\n\t\t\twhile (contents.hasNext()) {\n\t\t\t\tEObject eObject = contents.next();\n\t\t\t\tEList<EReference> references = eObject.eClass().getEAllReferences();\n\t\t\t\tfor (EReference eReference : references) {\n\t\t\t\t\tif (!eReference.isContainment()) {\n\t\t\t\t\t\tObject val = eObject.eGet(eReference);\n\t\t\t\t\t\tif (val!=null) {\n\t\t\t\t\t\t\tif (eReference.isMany()) {\n\t\t\t\t\t\t\t\tList<EObject> list = (List<EObject>) val;\n\t\t\t\t\t\t\t\tfor(int i = 0;i<list.size();i++) {\n\t\t\t\t\t\t\t\t\tEObject to = list.get(i);\n\t\t\t\t\t\t\t\t\tif (isResolved(to)) {\n\t\t\t\t\t\t\t\t\t\treferenceDescriptions.add(new DefaultReferenceDescription(eObject,to,eReference,i, findContainerEObjectURI(eObject, exportedObjects)));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tEObject to = (EObject) val;\n\t\t\t\t\t\t\t\tif (isResolved(to)) {\n\t\t\t\t\t\t\t\t\treferenceDescriptions.add(new DefaultReferenceDescription(eObject,to,eReference,-1,findContainerEObjectURI(eObject, exportedObjects)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.referenceDescriptions = referenceDescriptions;\n\t\t}\n\t\treturn referenceDescriptions;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public Manager getContainerManager() {\n\t\treturn delegate.getContainerManager();\n\t}","id":94786,"modified_method":"@Inject\n\tpublic DefaultResourceUIServiceProvider(IResourceServiceProvider delegate) {\n\t\tthis.delegate = delegate;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public IResourceValidator getResourceValidator() {\n\t\treturn null;\n\t}","id":94787,"modified_method":"public IResourceValidator getResourceValidator() {\n\t\treturn IResourceValidator.NULL;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public EcoreResourceUIServiceProviderImpl() {\n\t\t//setDelegate(new EcoreResourceServiceProviderImpl());\n\t}","id":94788,"modified_method":"public EcoreResourceUIServiceProviderImpl() {\n\t\tsuper(new EcoreResourceServiceProviderImpl());\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public Object execute(ExecutionEvent event) throws ExecutionException {\n\t\ttry {\n\t\t\tXtextEditor editor = (XtextEditor) HandlerUtil.getActiveEditor(event);\n\t\t\tfinal ITextSelection selection = (ITextSelection) editor.getSelectionProvider().getSelection();\n\n\t\t\tEObjectResolver resolver = new EObjectResolver(selection);\n\t\t\teditor.getDocument().readOnly(resolver);\n\t\t\tNewSearchUI.activateSearchResultView();\n\t\t\tReferenceQuery referenceQuery = queryProvider.get();\t\t\t\n\t\t\tString label = \"Xtext References to \" + resolver.getName();\n\t\t\tIterator<IStorage> storages = storage2UriMapper.getStorages(resolver.getURI()).iterator();\n\t\t\tif(storages.hasNext()) {\n\t\t\t\tlabel += \" (\" + storages.next().getFullPath().toString() + \")\";\n\t\t\t}\n\t\t\treferenceQuery.init(resolver.getURI(), label);\n\t\t\tNewSearchUI.runQueryInBackground(referenceQuery);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error finding references\", e);\n\t\t}\n\t\treturn null;\n\t}","id":94789,"modified_method":"public Object execute(ExecutionEvent event) throws ExecutionException {\n\t\ttry {\n\t\t\tXtextEditor editor = (XtextEditor) HandlerUtil.getActiveEditor(event);\n\t\t\tfinal ITextSelection selection = (ITextSelection) editor.getSelectionProvider().getSelection();\n\n\t\t\tIEObjectDescription eObjectDescription = editor.getDocument().readOnly(new EObjectResolver(selection));\n\t\t\tif (eObjectDescription != null) {\n\t\t\t\tReferenceQuery referenceQuery = queryProvider.get();\n\t\t\t\tString label = \"Xtext References to \" + eObjectDescription.getQualifiedName();\n\t\t\t\tIterator<IStorage> storages = storage2UriMapper.getStorages(eObjectDescription.getEObjectURI()).iterator();\n\t\t\t\tif (storages.hasNext()) {\n\t\t\t\t\tlabel += \" (\" + storages.next().getFullPath().toString() + \")\";\n\t\t\t\t}\n\t\t\t\treferenceQuery.init(eObjectDescription.getEObjectURI(), label);\n\t\t\t\tNewSearchUI.activateSearchResultView();\n\t\t\t\tNewSearchUI.runQueryInBackground(referenceQuery);\n\t\t\t} \n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error finding references\", e);\n\t\t}\n\t\treturn null;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public java.lang.Void exec(XtextResource state) throws Exception {\n\t\t\tIParseResult parseResult = state.getParseResult();\n\t\t\tif (parseResult != null) {\n\t\t\t\tCompositeNode rootNode = parseResult.getRootNode();\n\t\t\t\tif (rootNode != null) {\n\t\t\t\t\tAbstractNode node = ParseTreeUtil.getCurrentOrFollowingNodeByOffset(rootNode, selection\n\t\t\t\t\t\t\t.getOffset());\n\t\t\t\t\tif (node != null) {\n\t\t\t\t\t\tEObject selectedElement = NodeUtil.getNearestSemanticObject(node);\n\t\t\t\t\t\tif (selectedElement != null) {\n\t\t\t\t\t\t\turi = EcoreUtil.getURI(selectedElement);\n\t\t\t\t\t\t\tname = qualifiedNameProvider.getQualifiedName(selectedElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":94790,"modified_method":"public IEObjectDescription exec(XtextResource state) throws Exception {\n\t\t\tIParseResult parseResult = state.getParseResult();\n\t\t\tif (parseResult != null && parseResult.getRootNode() != null) {\n\t\t\t\tAbstractNode node = ParseTreeUtil.getCurrentOrFollowingNodeByOffset(parseResult.getRootNode(),\n\t\t\t\t\t\tselection.getOffset());\n\t\t\t\twhile (node != null) {\n\t\t\t\t\tif (node.getGrammarElement() instanceof CrossReference) {\n\t\t\t\t\t\tEObject referenceOwner = NodeUtil.getNearestSemanticObject(node);\n\t\t\t\t\t\tEReference eReference = GrammarUtil.getReference((CrossReference) node.getGrammarElement(),\n\t\t\t\t\t\t\t\treferenceOwner.eClass());\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tList<EObject> linkedEObjects = linkingService.getLinkedObjects(referenceOwner, eReference,\n\t\t\t\t\t\t\t\t\tnode);\n\t\t\t\t\t\t\tif (!linkedEObjects.isEmpty()) {\n\t\t\t\t\t\t\t\tIScope scope = scopeProvider.getScope(referenceOwner, eReference);\n\t\t\t\t\t\t\t\treturn scope.getContentByEObject(linkedEObjects.get(0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (IllegalNodeException ex) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (node.getElement() != null) {\n\t\t\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(state\n\t\t\t\t\t\t\t\t.getURI());\n\t\t\t\t\t\tIterator<IEObjectDescription> eObjectDescriptors = resourceDescription.getExportedObjectsForEObject(node.getElement()).iterator();\n\t\t\t\t\t\tif(eObjectDescriptors.hasNext()) {\n\t\t\t\t\t\t\treturn eObjectDescriptors.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.getParent();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void addMarkers(IFile file, Resource resource, final IProgressMonitor monitor) {\n\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, 2);\n\t\ttry {\n\t\t\tIResourceServiceProvider provider = resourceServiceProviderRegistry.getResourceServiceProvider(resource\n\t\t\t\t\t.getURI());\n\t\t\t\n\t\t\tList<Issue> list = provider.getResourceValidator().validate(resource, CheckMode.FAST_ONLY,\n\t\t\t\t\tgetCancelIndicator(subMonitor));\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn;\n\t\t\tfile.deleteMarkers(MarkerTypes.FAST_VALIDATION, true, 1);\n\t\t\tfor (Issue issue : list) {\n\t\t\t\tmarkerCreator.createMarker(issue, file, MarkerTypes.FAST_VALIDATION);\n\t\t\t}\n\t\t\tsubMonitor.worked(1);\n\t\t\t\n\t\t\tlist = provider.getResourceValidator().validate(resource, CheckMode.NORMAL_ONLY,\n\t\t\t\t\tgetCancelIndicator(monitor));\n\t\t\tsubMonitor.worked(1);\n\t\t\tfile.deleteMarkers(MarkerTypes.NORMAL_VALIDATION, true, 1);\n\t\t\tif (subMonitor.isCanceled())\n\t\t\t\treturn;\n\t\t\tfor (Issue issue : list) {\n\t\t\t\tmarkerCreator.createMarker(issue, file, MarkerTypes.NORMAL_VALIDATION);\n\t\t\t}\n\t\t} catch (CoreException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t} finally {\n\t\t\tsubMonitor.done();\n\t\t}\n\t}","id":94791,"modified_method":"protected void addMarkers(IFile file, Resource resource, final IProgressMonitor monitor) {\n\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, 2);\n\t\ttry {\n\t\t\tIResourceServiceProvider provider = resourceServiceProviderRegistry.getResourceServiceProvider(resource\n\t\t\t\t\t.getURI());\n\n\t\t\tIResourceValidator resourceValidator = provider.getResourceValidator();\n\t\t\tList<Issue> list = resourceValidator\n\t\t\t\t\t.validate(resource, CheckMode.FAST_ONLY, getCancelIndicator(subMonitor));\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn;\n\t\t\tfile.deleteMarkers(MarkerTypes.FAST_VALIDATION, true, 1);\n\t\t\tfor (Issue issue : list) {\n\t\t\t\tmarkerCreator.createMarker(issue, file, MarkerTypes.FAST_VALIDATION);\n\t\t\t}\n\t\t\tsubMonitor.worked(1);\n\n\t\t\tlist = resourceValidator.validate(resource, CheckMode.NORMAL_ONLY, getCancelIndicator(monitor));\n\t\t\tsubMonitor.worked(1);\n\t\t\tfile.deleteMarkers(MarkerTypes.NORMAL_VALIDATION, true, 1);\n\t\t\tif (subMonitor.isCanceled())\n\t\t\t\treturn;\n\t\t\tfor (Issue issue : list) {\n\t\t\t\tmarkerCreator.createMarker(issue, file, MarkerTypes.NORMAL_VALIDATION);\n\t\t\t}\n\t\t} catch (CoreException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t} finally {\n\t\t\tsubMonitor.done();\n\t\t}\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean canRerun() {\n\t\treturn false;\n\t}","id":94792,"modified_method":"public boolean canRerun() {\n\t\treturn true;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {\n\t\tif (newInput instanceof ReferenceSearchResult) {\n\t\t\tif (rootElements != null) {\n\t\t\t\trootElements.clear();\n\t\t\t}\n\t\t\tfor (IReferenceDescription referenceDescription : ((ReferenceSearchResult) newInput)\n\t\t\t\t\t.getMatchingReferences()) {\n\t\t\t\tURI containerEObjectURI = referenceDescription.getContainerEObjectURI();\n\t\t\t\tfinal URI eObjectURI = (containerEObjectURI == null) ? referenceDescription.getSourceEObjectUri()\n\t\t\t\t\t\t: containerEObjectURI;\n\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(eObjectURI\n\t\t\t\t\t\t.trimFragment());\n\t\t\t\tif (resourceDescription != null) {\n\t\t\t\t\tReferenceSearchViewTreeNode resourceNode = resourceNode(resourceDescription);\n\t\t\t\t\tfor (IEObjectDescription eObjectDescription : resourceDescription.getExportedObjects()) {\n\t\t\t\t\t\tif (eObjectDescription.getEObjectURI().equals(eObjectURI)) {\n\t\t\t\t\t\t\tnew ReferenceSearchViewTreeNode(resourceNode, eObjectURI, eObjectDescription);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewer.refresh();\n\t\t}\n\t}","id":94793,"modified_method":"public void inputChanged(final Viewer viewer, Object oldInput, Object newInput) {\n\t\tsynchronized (viewer) {\n\t\t\tif (rootElements != null) {\n\t\t\t\trootElements.clear();\n\t\t\t}\n\t\t\tif (newInput instanceof ReferenceSearchResult) {\n\t\t\t\tfor (IReferenceDescription referenceDescription : ((ReferenceSearchResult) newInput)\n\t\t\t\t\t\t.getMatchingReferences()) {\n\t\t\t\t\tURI containerEObjectURI = referenceDescription.getContainerEObjectURI();\n\t\t\t\t\tfinal URI eObjectURI = (containerEObjectURI == null) ? referenceDescription.getSourceEObjectUri()\n\t\t\t\t\t\t\t: containerEObjectURI;\n\t\t\t\t\tIResourceDescription resourceDescription = resourceDescriptions.getResourceDescription(eObjectURI\n\t\t\t\t\t\t\t.trimFragment());\n\t\t\t\t\tif (resourceDescription != null) {\n\t\t\t\t\t\tReferenceSearchViewTreeNode resourceNode = resourceNode(resourceDescription);\n\t\t\t\t\t\tfor (IEObjectDescription eObjectDescription : resourceDescription.getExportedObjects()) {\n\t\t\t\t\t\t\tif (eObjectDescription.getEObjectURI().equals(eObjectURI)) {\n\t\t\t\t\t\t\t\tnew ReferenceSearchViewTreeNode(resourceNode, eObjectURI, eObjectDescription);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewer.refresh();\n\t\t}\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public Object[] getElements(Object inputElement) {\n\t\tif (rootElements == null) {\n\t\t\treturn new Object[0];\n\t\t}\n\t\treturn Iterables.newArray(rootElements, ReferenceSearchViewTreeNode.class);\n\t}","id":94794,"modified_method":"public Object[] getElements(Object inputElement) {\n\t\tif (rootElements == null || rootElements.isEmpty()) {\n\t\t\treturn new Object[0];\n\t\t}\n\t\treturn Iterables.newArray(rootElements, ReferenceSearchViewTreeNode.class);\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setInput(ISearchResult newSearchResult, Object uiState) {\n\t\tif (searchResult != null) {\n\t\t\tsearchResult.removeListener(this);\n\t\t}\n\t\tthis.searchResult = newSearchResult;\n\t\tthis.uiState = uiState;\n\t\tif (searchResult != null) {\n\t\t\tsearchResult.addListener(this);\n\t\t}\n\t}","id":94795,"modified_method":"public void setInput(ISearchResult newSearchResult, Object uiState) {\n\t\tsynchronized (viewer) {\n\t\t\tif (searchResult != null) {\n\t\t\t\tsearchResult.removeListener(this);\n\t\t\t}\n\t\t\tthis.searchResult = newSearchResult;\n\t\t\tthis.uiState = uiState;\n\t\t\tif (searchResult != null) {\n\t\t\t\tsearchResult.addListener(this);\n\t\t\t\tviewer.setInput(newSearchResult);\n\t\t\t\tif (uiState instanceof ISelection) {\n\t\t\t\t\tviewer.setSelection((ISelection) uiState);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart.updateLabel();\n\t\t}\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public void searchResultChanged(final SearchResultEvent e) {\n\t\tDisplay.getDefault().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tviewer.setInput(e.getSearchResult());\n\t\t\t}\n\t\t});\n\t}","id":94796,"modified_method":"public void searchResultChanged(final SearchResultEvent e) {\n\t\tDisplay.getDefault().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (viewer) {\n\t\t\t\t\tviewer.setInput(e.getSearchResult());\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public String getLabel() {\n\t\treturn searchResult.getLabel();\n\t}","id":94797,"modified_method":"public String getLabel() {\n\t\treturn searchResult == null ? \"\" : searchResult.getLabel();\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public void setViewPart(ISearchResultViewPart part) {\n\t\t// TODO Auto-generated method stub\n\t}","id":94798,"modified_method":"public void setViewPart(ISearchResultViewPart part) {\n\t\tthis.part = part;\n\t}","commit_id":"cba1852e0ea0f170e52ec6b994321713ad8df232","url":"https://github.com/eclipse/xtext"},{"original_method":"public PackagingElementNode<?> getRootPackagingNode() {\n    return (PackagingElementNode<?>)getNodeFor(new TreePath(getRootNode()));\n  }","id":94799,"modified_method":"public PackagingElementNode<?> getRootPackagingNode() {\n    final DefaultMutableTreeNode rootNode = getRootNode();\n    if (rootNode == null) {\n      return null;\n    }\n    return (PackagingElementNode<?>)getNodeFor(new TreePath(rootNode));\n  }","commit_id":"47ea669ca231633aee46c6e4f1024f531b670f0e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void setDirectories(@NotNull List<String> strings, String directoryName) {\n    if (myDirectoryComboBox.getItemCount() > 0){\n      myReplaceComboBox.removeAllItems();\n    }\n    if (directoryName != null && !directoryName.isEmpty()){\n      if (strings.contains(directoryName)){\n        strings.remove(directoryName);\n      }\n      myDirectoryComboBox.addItem(directoryName);\n    }\n    for(int i = strings.size() - 1; i >= 0; i--){\n      myDirectoryComboBox.addItem(strings.get(i));\n    }\n    if (myDirectoryComboBox.getItemCount() == 0){\n      myDirectoryComboBox.addItem(\"\");\n    }\n  }","id":94800,"modified_method":"private void setDirectories(@NotNull List<String> strings, String directoryName) {\n    if (myDirectoryComboBox.getItemCount() > 0){\n      myReplaceComboBox.removeAllItems();\n    }\n    int ignoredIdx = -1;\n    if (directoryName != null && !directoryName.isEmpty()){\n      ignoredIdx = strings.indexOf(directoryName);\n      myDirectoryComboBox.addItem(directoryName);\n    }\n    for(int i = strings.size() - 1; i >= 0; i--){\n      if (i == ignoredIdx) continue;\n      myDirectoryComboBox.addItem(strings.get(i));\n    }\n    if (myDirectoryComboBox.getItemCount() == 0){\n      myDirectoryComboBox.addItem(\"\");\n    }\n  }","commit_id":"1376b4226571fb0bf520a82e14eb071c8238f582","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t *\n\t */\n\t@Test\n\tpublic void versionStringInResourceFilename()\n\t{\n\t\tfinal IStaticCacheableResource resource = new IStaticCacheableResource()\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Serializable getCacheKey()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic IResourceStream getCacheableResourceStream()\n\t\t\t{\n\t\t\t\treturn new StringResourceStream(\"foo-bar\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void respond(Attributes attributes)\n\t\t\t{\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isCachingEnabled()\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tfinal ResourceReference reference = new ResourceReference(getClass(), \"versioned\",\n\t\t\tLocale.ENGLISH, \"style\", null)\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic IResource getResource()\n\t\t\t{\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t};\n\n\t\tIResourceCachingStrategy strategy = new FilenameWithVersionResourceCachingStrategy(\n\t\t\t\"-version-\", new StaticResourceVersion(\"foobar\"));\n\n\t\tINamedParameters params = new PageParameters();\n\t\tResourceUrl url = new ResourceUrl(\"test.js\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-foobar.js\", url.getFileName());\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.js\", url.getFileName());\n\n\t\turl = new ResourceUrl(\"test\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-foobar\", url.getFileName());\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test\", url.getFileName());\n\n\t\t// this behavior is o.k. since a browser could request an\n\t\t// previous version of the resource. for example we\n\t\t// could first have 'test-alpha.txt' which would be later replaced\n\t\t// by 'test-beta.txt' but in any case will point to\n\t\t// internal resource 'test.txt'\n\t\turl = new ResourceUrl(\"test-version-older.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version-.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version--------\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version-1.0.3-alpha.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// check a version that contains a dot which also marks the filename\n\t\t// extension\n\t\tstrategy = new FilenameWithVersionResourceCachingStrategy(\"-version-\",\n\t\t\tnew StaticResourceVersion(\"1.0.4-beta\"));\n\t\turl = new ResourceUrl(\"test.txt\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-1.0.4-beta.txt\", url.getFileName());\n\t}","id":94801,"modified_method":"/**\n\t *\n\t */\n\t@Test\n\tpublic void versionStringInResourceFilename()\n\t{\n\t\tfinal IStaticCacheableResource resource = new IStaticCacheableResource()\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Serializable getCacheKey()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic IResourceStream getCacheableResourceStream()\n\t\t\t{\n\t\t\t\treturn new StringResourceStream(\"foo-bar\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void respond(Attributes attributes)\n\t\t\t{\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean isCachingEnabled()\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\tfinal ResourceReference reference = new ResourceReference(getClass(), \"versioned\",\n\t\t\tLocale.ENGLISH, \"style\", null)\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic IResource getResource()\n\t\t\t{\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t};\n\n\t\tIResourceCachingStrategy strategy = new FilenameWithVersionResourceCachingStrategy(\n\t\t\t\"-version-\", new AlphaDigitResourceVersion(\"foobar\"));\n\n\t\tINamedParameters params = new PageParameters();\n\t\tResourceUrl url = new ResourceUrl(\"test.js\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-foobar.js\", url.getFileName());\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.js\", url.getFileName());\n\n\t\turl = new ResourceUrl(\"test\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-foobar\", url.getFileName());\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test\", url.getFileName());\n\n\t\t// this behavior is o.k. since a browser could request an\n\t\t// previous version of the resource. for example we\n\t\t// could first have 'test-alpha.txt' which would be later replaced\n\t\t// by 'test-beta.txt' but in any case will point to\n\t\t// internal resource 'test.txt'\n\t\turl = new ResourceUrl(\"test-version-older.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version-.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version--------\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test\", url.getFileName());\n\n\t\t// weird but valid\n\t\turl = new ResourceUrl(\"test-version-1.0.3-alpha.txt\", params);\n\t\tstrategy.undecorateUrl(url);\n\t\tassertEquals(\"test.txt\", url.getFileName());\n\n\t\t// check a version that contains a dot which also marks the filename\n\t\t// extension\n\t\tstrategy = new FilenameWithVersionResourceCachingStrategy(\"-version-\",\n\t\t\tnew StaticResourceVersion(\"1.0.4-beta\"));\n\t\turl = new ResourceUrl(\"test.txt\", params);\n\t\tstrategy.decorateUrl(url, resource);\n\t\tassertEquals(\"test-version-1.0.4-beta.txt\", url.getFileName());\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\t@Test\n\tpublic void mapHandler()\n\t{\n\t\tContextRelativeResource resource = new ContextRelativeResource(\"/style.css\");\n\t\tinit(resource, \"/test/resource\");\n\n\t\tRequest request = createRequest(\"test/resource-version-4711?bla=123\");\n\t\tfinal IRequestHandler handler = tester.getApplication().getRootRequestMapper()\n\t\t\t.mapRequest(request);\n\t\tassertThat(handler, instanceOf(ResourceReferenceRequestHandler.class));\n\t\tassertEquals(((ResourceReferenceRequestHandler)handler).getResource(), resource);\n\t}","id":94802,"modified_method":"/**\n\t * \n\t */\n\t@Test\n\tpublic void mapHandler()\n\t{\n\t\tContextRelativeResource resource = new ContextRelativeResource(\"/style.css\");\n\t\tinit(resource, \"/test/resource\");\n\n\t\tRequest request = createRequest(\"test/resource-version-123?bla=4567\");\n\t\tfinal IRequestHandler handler = tester.getApplication().getRootRequestMapper()\n\t\t\t.mapRequest(request);\n\t\tassertThat(handler, instanceOf(ResourceReferenceRequestHandler.class));\n\t\tassertEquals(((ResourceReferenceRequestHandler)handler).getResource(), resource);\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\tpublic void decorateUrl(ResourceUrl url, IStaticCacheableResource resource)\n\t{\n\t\t// get version string for requested resource\n\t\tfinal String version = this.resourceVersion.getVersion(resource);\n\n\t\t// ignore resource if no version information is available\n\t\tif (version == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// get undecorated filename\n\t\tfinal String filename = url.getFileName();\n\n\t\tif (filename.contains(getVersionPrefix()))\n\t\t{\n\t\t\tLOG.error(\"A resource with name '{}' contains the version prefix '{}' so the un-decoration will not work.\" +\n\t\t\t\t\t\" Either use a different version prefix or rename this resource.\", filename, getVersionPrefix());\n\t\t}\n\n\t\t// check if resource name has extension\n\t\tfinal int extensionAt = filename.lastIndexOf('.');\n\n\t\t// create filename with version:\n\t\t//\n\t\t// filename :=\n\t\t// [basename][version-prefix][version](.extension)\n\t\t//\n\t\tfinal StringBuilder versionedFilename = new StringBuilder();\n\t\t\n\t\t// add filename\n\t\tif (extensionAt == -1)\n\t\t{\n\t\t\tversionedFilename.append(filename);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tversionedFilename.append(filename.substring(0, extensionAt));\n\t\t}\n\t\t// add version suffix\n\t\tversionedFilename.append(versionPrefix);\n\t\t\n\t\t// add version\n\t\tversionedFilename.append(version);\n\n\t\t// add extension if present\n\t\tif (extensionAt != -1)\n\t\t{\n\t\t\tversionedFilename.append(filename.substring(extensionAt));\n\t\t}\n\t\t// set versioned filename\n\t\turl.setFileName(versionedFilename.toString());\n\t}","id":94803,"modified_method":"@Override\n\tpublic void decorateUrl(ResourceUrl url, IStaticCacheableResource resource)\n\t{\n\t\t// get version string for requested resource\n\t\tfinal String version = this.resourceVersion.getVersion(resource);\n\n\t\t// ignore resource if no version information is available\n\t\tif (version == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// get undecorated filename\n\t\tfinal String filename = url.getFileName();\n\n\t\t// check if resource name has extension\n\t\tfinal int extensionAt = filename.lastIndexOf('.');\n\n\t\t// create filename with version:\n\t\t//\n\t\t// filename :=\n\t\t// [basename][version-prefix][version](.extension)\n\t\t//\n\t\tfinal StringBuilder versionedFilename = new StringBuilder();\n\t\t\n\t\t// add filename\n\t\tif (extensionAt == -1)\n\t\t{\n\t\t\tversionedFilename.append(filename);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tversionedFilename.append(filename.substring(0, extensionAt));\n\t\t}\n\n\t\tint pos = versionedFilename.indexOf(getVersionPrefix());\n\t\tif (pos != -1 && isVersion(versionedFilename.substring(pos + versionPrefix.length())))\n\t\t{\n\t\t\tLOG.error(\"A resource with name '{}' contains the version prefix '{}' so the un-decoration will not work.\" +\n\t\t\t\t\t\" Either use a different version prefix or rename this resource.\", filename, getVersionPrefix());\n\t\t}\n\n\t\t// add version suffix\n\t\tversionedFilename.append(versionPrefix);\n\t\t\n\t\t// add version\n\t\tversionedFilename.append(version);\n\n\t\t// add extension if present\n\t\tif (extensionAt != -1)\n\t\t{\n\t\t\tversionedFilename.append(filename.substring(extensionAt));\n\t\t}\n\t\t// set versioned filename\n\t\turl.setFileName(versionedFilename.toString());\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\tpublic void undecorateUrl(ResourceUrl url)\n\t{\n\t\tfinal String filename = url.getFileName();\n\t\t\n\t\t// check for extension\n\t\tint pos = filename.lastIndexOf('.');\n\n\t\t// get name of file without extension (but with version string)\n\t\tfinal String fullname = pos == -1 ? filename : filename.substring(0, pos);\n\t\t\n\t\t// get extension of file if present\n\t\tfinal String extension = pos == -1 ? null : filename.substring(pos);\n\n\t\t// get position of version string\n\t\tpos = fullname.lastIndexOf(versionPrefix);\n\n\t\t// remove version string if it exists\n\t\tif (pos != -1)\n\t\t{\n\t\t\t// get filename before version string\n\t\t\tfinal String basename = fullname.substring(0, pos);\n\n\t\t\t// create filename without version string \n\t\t\t// (required for working resource lookup)\n\t\t\turl.setFileName(extension == null? basename : basename + extension);\n\n\t\t\t// store the version in the request cycle\n\t\t\tRequestCycle requestCycle = RequestCycle.get();\n\t\t\tif (requestCycle != null)\n\t\t\t{\n\t\t\t\tint idx = fullname.indexOf(versionPrefix);\n\t\t\t\tString urlVersion = fullname.substring(idx + versionPrefix.length());\n\t\t\t\trequestCycle.setMetaData(URL_VERSION, urlVersion);\n\t\t\t}\n\t\t}\n\t}","id":94804,"modified_method":"@Override\n\tpublic void undecorateUrl(ResourceUrl url)\n\t{\n\t\tfinal String filename = url.getFileName();\n\t\t\n\t\t// check for extension\n\t\tint pos = filename.lastIndexOf('.');\n\n\t\t// get name of file without extension (but with version string)\n\t\tfinal String fullname = pos == -1 ? filename : filename.substring(0, pos);\n\t\t\n\t\t// get extension of file if present\n\t\tfinal String extension = pos == -1 ? null : filename.substring(pos);\n\n\t\t// get position of version string\n\t\tpos = fullname.lastIndexOf(versionPrefix);\n\n\t\t// remove version string if it exists\n\t\tif (pos != -1 && isVersion(fullname.substring(pos + versionPrefix.length())))\n\t\t{\n\t\t\t// get filename before version string\n\t\t\tfinal String basename = fullname.substring(0, pos);\n\n\t\t\t// create filename without version string \n\t\t\t// (required for working resource lookup)\n\t\t\turl.setFileName(extension == null? basename : basename + extension);\n\n\t\t\t// store the version in the request cycle\n\t\t\tRequestCycle requestCycle = RequestCycle.get();\n\t\t\tif (requestCycle != null)\n\t\t\t{\n\t\t\t\tint idx = fullname.indexOf(versionPrefix);\n\t\t\t\tString urlVersion = fullname.substring(idx + versionPrefix.length());\n\t\t\t\trequestCycle.setMetaData(URL_VERSION, urlVersion);\n\t\t\t}\n\t\t}\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"@Test\n\tpublic void testUndecorateUrl() throws Exception\n\t{\n\t\tResourceUrl resourceUrl = new ResourceUrl(\"some-resource--vers--\"+TEST_RESOURCE_VERSION+\".txt\", new PageParameters());\n\t\tstrategy.undecorateUrl(resourceUrl);\n\n\t\tassertEquals(\"some-resource.txt\", resourceUrl.getFileName());\n\t}","id":94805,"modified_method":"@Test\n\tpublic void testUndecorateUrl() throws Exception\n\t{\n\t\tResourceUrl resourceUrl = new ResourceUrl(\"some-resource--vers--\"+TEST_RESOURCE_VERSION+\".txt\", new PageParameters());\n\t\tstrategy.undecorateUrl(resourceUrl);\n\n\t\tassertEquals(\"some-resource.txt\", resourceUrl.getFileName());\n\n\t\t// test URL with versiton containing prefix in original\n\t\tresourceUrl = new ResourceUrl(\"some-resource--vers--with-prefix--vers--\"+TEST_RESOURCE_VERSION+\".txt\", new PageParameters());\n\t\tstrategy.undecorateUrl(resourceUrl);\n\n\t\tassertEquals(\"some-resource--vers--with-prefix.txt\", resourceUrl.getFileName());\n\n\t\t// test URL without version containing prefix\n\t\tresourceUrl = new ResourceUrl(\"some-resource--vers--without-version.txt\", new PageParameters());\n\t\tstrategy.undecorateUrl(resourceUrl);\n\n\t\tassertEquals(\"some-resource--vers--without-version.txt\", resourceUrl.getFileName());\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"@Test\n\tpublic void testDecorateUrl() throws Exception\n\t{\n\t\tResourceUrl resourceUrl = new ResourceUrl(\"some-resource.txt\", new PageParameters());\n\t\tstrategy.decorateUrl(resourceUrl, new TestResource());\n\n\t\tassertEquals(\"some-resource--vers--\"+TEST_RESOURCE_VERSION+\".txt\", resourceUrl.getFileName());\n\t}","id":94806,"modified_method":"@Test\n\tpublic void testDecorateUrl() throws Exception\n\t{\n\t\tResourceUrl resourceUrl = new ResourceUrl(\"some-resource.txt\", new PageParameters());\n\t\tstrategy.decorateUrl(resourceUrl, new TestResource());\n\n\t\tassertEquals(\"some-resource--vers--\"+TEST_RESOURCE_VERSION+\".txt\", resourceUrl.getFileName());\n\n\t\t// don't issue an error\n\t\tresourceUrl = new ResourceUrl(\"some-resource--vers--with-prefix.txt\", new PageParameters());\n\t\tstrategy.decorateUrl(resourceUrl, new TestResource());\n\n\t\tassertEquals(\"some-resource--vers--with-prefix--vers--\"+TEST_RESOURCE_VERSION+\".txt\", resourceUrl.getFileName());\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * create static version provider\n\t *\n\t * @param version\n\t *             static version string to deliver for all queries resources\n\t */\n\tpublic StaticResourceVersion(String version)\n\t{\n\t\tthis.version = Args.notNull(version, \"version\");\n\t}","id":94807,"modified_method":"/**\n\t * create static version provider\n\t *\n\t * @param version\n\t *             static version string to deliver for all queries resources\n\t */\n\tpublic StaticResourceVersion(String version)\n\t{\n\t\tthis.version = Args.notNull(version, \"version\");\n\t\tthis.pattern = Pattern.compile(Pattern.quote(version));\n\t}","commit_id":"2bd971ad723cd9ad2c10d868149d677dcb6abab3","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Convenience method for translating a <code>java.sql.ResultSet<\/code>\n     * containing notice information into an array of <code>Notification<\/code>\n     * objects.\n     *\n     * @param rs a {@link java.sql.ResultSet} object.\n     * @return an array of {@link org.opennms.web.notification.Notification} objects.\n     * @throws java.sql.SQLException if any.\n     */\n    protected static Notification[] rs2Notices(ResultSet rs, ServletContext servletContext) throws SQLException {\n        Notification[] notices = null;\n        Vector<Notification> vector = new Vector<Notification>();\n\n        while (rs.next()) {\n            Notification notice = new Notification();\n\n            Integer id = Integer.valueOf(rs.getInt(\"notifyid\"));\n            notice.m_notifyID = id.intValue();\n\n            Timestamp timestamp = rs.getTimestamp(\"pagetime\");\n            notice.m_timeSent = (timestamp != null) ? timestamp.getTime() : null;\n\n            timestamp = rs.getTimestamp(\"respondtime\");\n            notice.m_timeReply = (timestamp != null) ? timestamp.getTime() : null;\n\n            String str = rs.getString(\"textmsg\");\n            notice.m_txtMsg = str;\n\n            str = rs.getString(\"numericmsg\");\n            notice.m_numMsg = str;\n\n            str = rs.getString(\"answeredby\");\n            notice.m_responder = str;\n\n            id = Integer.valueOf(rs.getInt(\"nodeid\"));\n            notice.m_nodeID = id.intValue();\n\n            str = rs.getString(\"interfaceid\");\n            notice.m_interfaceID = str;\n\n            id = Integer.valueOf(rs.getInt(\"eventid\"));\n            notice.m_eventId = id.intValue();\n\n            id = Integer.valueOf(rs.getInt(\"serviceid\"));\n            if (id != null) {\n                notice.m_serviceId = id.intValue();\n                str = NetworkElementFactory.getInstance(servletContext).getServiceNameFromId(notice.m_serviceId);\n                notice.m_serviceName = str;\n            }\n\n            vector.addElement(notice);\n        }\n\n        notices = new Notification[vector.size()];\n\n        for (int i = 0; i < notices.length; i++) {\n            notices[i] = vector.elementAt(i);\n        }\n\n        return notices;\n    }","id":94808,"modified_method":"/**\n     * Convenience method for translating a <code>java.sql.ResultSet<\/code>\n     * containing notice information into an array of <code>Notification<\/code>\n     * objects.\n     *\n     * @param rs a {@link java.sql.ResultSet} object.\n     * @return an array of {@link org.opennms.web.notification.Notification} objects.\n     * @throws java.sql.SQLException if any.\n     */\n    // FIXME: Don't use the single variable \"element\" for different objects. - dj@opennms.org\n    protected static Notification[] rs2Notices(ResultSet rs, ServletContext servletContext) throws SQLException {\n        Notification[] notices = null;\n        Vector<Notification> vector = new Vector<Notification>();\n\n        while (rs.next()) {\n            Notification notice = new Notification();\n\n            Object element = Integer.valueOf(rs.getInt(\"notifyid\"));\n            notice.m_notifyID = ((Integer) element).intValue();\n\n            element = rs.getTimestamp(\"pagetime\");\n            if (element != null) {\n                notice.m_timeSent = ((Timestamp) element).getTime();\n            }\n\n            element = rs.getTimestamp(\"respondtime\");\n            if (element != null) {\n                notice.m_timeReply = ((Timestamp) element).getTime();\n            }\n\n            element = rs.getString(\"textmsg\");\n            notice.m_txtMsg = (String) element;\n\n            element = rs.getString(\"numericmsg\");\n            notice.m_numMsg = (String) element;\n\n            element = rs.getString(\"answeredby\");\n            notice.m_responder = (String) element;\n\n            element = Integer.valueOf(rs.getInt(\"nodeid\"));\n            notice.m_nodeID = ((Integer) element).intValue();\n\n            element = rs.getString(\"interfaceid\");\n            notice.m_interfaceID = (String) element;\n\n            element = Integer.valueOf(rs.getInt(\"eventid\"));\n            notice.m_eventId = ((Integer) element).intValue();\n\n            element = Integer.valueOf(rs.getInt(\"serviceid\"));\n            if (element != null) {\n                notice.m_serviceId = ((Integer) element).intValue();\n                element = NetworkElementFactory.getInstance(servletContext).getServiceNameFromId(notice.m_serviceId);\n                notice.m_serviceName = (String) element;\n            }\n\n            vector.addElement(notice);\n        }\n\n        notices = new Notification[vector.size()];\n\n        for (int i = 0; i < notices.length; i++) {\n            notices[i] = vector.elementAt(i);\n        }\n\n        return notices;\n    }","commit_id":"3fef4e93c26817f5c27abb18592d641123032d41","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Convenience method for translating a <code>java.sql.ResultSet<\/code>\n     * containing outage information into an array of <code>Outage<\/code>\n     * objects.\n     *\n     * @param rs a {@link java.sql.ResultSet} object.\n     * @return an array of {@link org.opennms.web.outage.Outage} objects.\n     * @throws java.sql.SQLException if any.\n     */\n    protected static Outage[] rs2Outages(ResultSet rs) throws SQLException {\n        Outage[] outages = null;\n        List<Outage> list = new ArrayList<Outage>();\n\n        while (rs.next()) {\n            Outage outage = new Outage();\n\n            // cannot be null\n            outage.outageId = rs.getInt(\"outageid\");\n            outage.nodeId = rs.getInt(\"nodeid\");\n            outage.ipAddress = rs.getString(\"ipaddr\");\n            outage.serviceId = rs.getInt(\"serviceid\");\n\n            // cannot be null\n            Timestamp timestamp = rs.getTimestamp(\"iflostservice\");\n            outage.lostServiceTime = new java.util.Date(timestamp.getTime());\n\n            // can be null\n            outage.hostname = rs.getString(\"iphostname\"); // from ipinterface\n                                                            // table\n\n            // can be null\n            outage.nodeLabel = rs.getString(\"nodelabel\"); // from node table\n\n            // can be null\n            outage.serviceName = rs.getString(\"servicename\"); // from service\n                                                                // table\n\n            // can be null\n            timestamp = rs.getTimestamp(\"ifregainedservice\");\n            outage.regainedServiceTime = (timestamp != null) ? new java.util.Date(timestamp.getTime()) : null;\n\n            // can be null\n            int intElement = rs.getInt(\"svcLostEventID\");\n            outage.lostServiceEventId = rs.wasNull() ? null : Integer.valueOf(intElement);\n\n            // can be null\n            intElement = rs.getInt(\"svcRegainedEventID\");\n            outage.regainedServiceEventId = rs.wasNull() ? null :Integer.valueOf(intElement);\n\n            // can be null\n            intElement = rs.getInt(\"notifyid\");\n            outage.lostServiceNotificationId = rs.wasNull() ? null : Integer.valueOf(intElement);\n\n            // can be null\n            outage.lostServiceNotificationAcknowledgedBy = rs.getString(\"answeredby\");\n\n            list.add(outage);\n        }\n\n        outages = list.toArray(new Outage[list.size()]);\n\n        return outages;\n    }","id":94809,"modified_method":"/**\n     * Convenience method for translating a <code>java.sql.ResultSet<\/code>\n     * containing outage information into an array of <code>Outage<\/code>\n     * objects.\n     *\n     * @param rs a {@link java.sql.ResultSet} object.\n     * @return an array of {@link org.opennms.web.outage.Outage} objects.\n     * @throws java.sql.SQLException if any.\n     */\n    protected static Outage[] rs2Outages(ResultSet rs) throws SQLException {\n        Outage[] outages = null;\n        List<Outage> list = new ArrayList<Outage>();\n\n        // FIXME: Don't reuse the \"element\" variable for multiple objects.\n        while (rs.next()) {\n            Outage outage = new Outage();\n\n            Object element = null;\n            int intElement = -1;\n\n            // cannot be null\n            outage.outageId = rs.getInt(\"outageid\");\n            outage.nodeId = rs.getInt(\"nodeid\");\n            outage.ipAddress = rs.getString(\"ipaddr\");\n            outage.serviceId = rs.getInt(\"serviceid\");\n\n            // cannot be null\n            element = rs.getTimestamp(\"iflostservice\");\n            outage.lostServiceTime = new java.util.Date(((Timestamp) element).getTime());\n\n            // can be null\n            outage.hostname = rs.getString(\"iphostname\"); // from ipinterface\n                                                            // table\n\n            // can be null\n            outage.nodeLabel = rs.getString(\"nodelabel\"); // from node table\n\n            // can be null\n            outage.serviceName = rs.getString(\"servicename\"); // from service\n                                                                // table\n\n            // can be null\n            element = rs.getTimestamp(\"ifregainedservice\");\n            if (element != null) {\n                outage.regainedServiceTime = new java.util.Date(((Timestamp) element).getTime());\n            }\n\n            // can be null\n            intElement = rs.getInt(\"svcLostEventID\");\n            if (!rs.wasNull()) {\n                outage.lostServiceEventId = Integer.valueOf(intElement);\n            }\n\n            // can be null\n            intElement = rs.getInt(\"svcRegainedEventID\");\n            if (!rs.wasNull()) {\n                outage.regainedServiceEventId = Integer.valueOf(intElement);\n            }\n\n            // can be null\n            intElement = rs.getInt(\"notifyid\");\n            if (!rs.wasNull()) {\n                outage.lostServiceNotificationId = Integer.valueOf(intElement);\n            }\n\n            // can be null\n            outage.lostServiceNotificationAcknowledgedBy = rs.getString(\"answeredby\");\n\n            list.add(outage);\n        }\n\n        outages = list.toArray(new Outage[list.size()]);\n\n        return outages;\n    }","commit_id":"3fef4e93c26817f5c27abb18592d641123032d41","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void upgradeOfNonCleanStoreShouldAlsoWork() throws Exception\n    {\n        File storeDir = copyResourceStore( \"unclean-1.5-store\" );\n        assertIndexContainsNode( storeDir, stringMap( Config.ALLOW_STORE_UPGRADE, \"true\" ) );\n    }","id":94810,"modified_method":"@Test\n    public void upgradeOfNonCleanStoreShouldAlsoWork() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"unclean-1.5-store.zip\" );\n        assertIndexContainsNode( storeDir, stringMap( Config.ALLOW_STORE_UPGRADE, \"true\" ) );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void upgradeShouldFailIfNotAllowed() throws Exception\n    {\n        File storeDir = copyResourceStore( \"1.5-store\" );\n        assertDisallowedUpgradeFails( storeDir );\n    }","id":94811,"modified_method":"@Test\n    public void upgradeShouldFailIfNotAllowed() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"1.5-store.zip\" );\n        assertDisallowedUpgradeFails( storeDir );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void upgradeOfNonCleanStoreWithoutAllowUpgradeShouldFail() throws Exception\n    {\n        File storeDir = copyResourceStore( \"unclean-1.5-store\" );\n        assertDisallowedUpgradeFails( storeDir );\n    }","id":94812,"modified_method":"@Test\n    public void upgradeOfNonCleanStoreWithoutAllowUpgradeShouldFail() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"unclean-1.5-store.zip\" );\n        assertDisallowedUpgradeFails( storeDir );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void upgradeThenUncleanShutdownShouldHaveUpgraded() throws Exception\n    {\n        // Upgrade, but shutdown unclean\n        File storeDir = copyResourceStore( \"1.5-store\" );\n        Process process = Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                StartAndKill.class.getName(), storeDir.getAbsolutePath(), \"-\" + Config.ALLOW_STORE_UPGRADE + \"=true\"\n        } );\n        new ProcessStreamHandler( process, true ).launch();\n        assertEquals( 1, process.waitFor() );\n        \n        // Start again w/o upgrade config set\n        assertIndexContainsNode( storeDir, stringMap() );\n    }","id":94813,"modified_method":"@Test\n    public void upgradeThenUncleanShutdownShouldHaveUpgraded() throws Exception\n    {\n        // Upgrade, but shutdown unclean\n        File storeDir = Unzip.unzip( getClass(), \"1.5-store.zip\" );\n        Process process = Runtime.getRuntime().exec( new String[] { \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                StartAndKill.class.getName(), storeDir.getAbsolutePath(), \"-\" + Config.ALLOW_STORE_UPGRADE + \"=true\"\n        } );\n        new ProcessStreamHandler( process, true ).launch();\n        assertEquals( 1, process.waitFor() );\n\n        // Start again w/o upgrade config set\n        assertIndexContainsNode( storeDir, stringMap() );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void upgradeShouldSucceedIfAllowed() throws Exception\n    {\n        File storeDir = copyResourceStore( \"1.5-store\" );\n        assertIndexContainsNode( storeDir, stringMap( Config.ALLOW_STORE_UPGRADE, \"true\" ) );\n        assertIndexContainsNode( storeDir, stringMap() );\n    }","id":94814,"modified_method":"@Test\n    public void upgradeShouldSucceedIfAllowed() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"1.5-store.zip\" );\n        assertIndexContainsNode( storeDir, stringMap( Config.ALLOW_STORE_UPGRADE, \"true\" ) );\n        assertIndexContainsNode( storeDir, stringMap() );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static File findOldFormatStoreDirectory()\n    {\n        URL legacyStoreResource = LegacyStore.class.getResource( \"exampledb/neostore\" );\n        return new File( legacyStoreResource.getFile() ).getParentFile();\n    }","id":94815,"modified_method":"public static File findOldFormatStoreDirectory() throws IOException\n    {\n        return Unzip.unzip( LegacyStore.class, \"exampledb.zip\" );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void upgradeOneFiveMilestoneTwoWhereStoreVersionRecordShouldBeAddedCorrectly() throws Exception\n    {\n        File storeDir = copyResourceStore( \"1.5.M02-store\" );\n        startAndShutdown( storeDir );\n        startAndKill( storeDir );\n        startAndShutdown( storeDir );\n    }","id":94816,"modified_method":"@Test\n    public void upgradeOneFiveMilestoneTwoWhereStoreVersionRecordShouldBeAddedCorrectly() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"1.5.M02-store.zip\" );\n        startAndShutdown( storeDir );\n        startAndKill( storeDir );\n        startAndShutdown( storeDir );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadPropertyIndexRecords() throws IOException\n    {\n        URL legacyStoreResource = getClass().getResource( \"exampledb/neostore\" );\n        LegacyStore legacyStore = new LegacyStore( fs, new File( legacyStoreResource.getFile() ) );\n\n        LegacyPropertyIndexStoreReader propertyIndexStoreReader = legacyStore.getPropertyIndexStoreReader();\n        assertEquals( 12, count( propertyIndexStoreReader.readPropertyIndexStore() ) );\n    }","id":94817,"modified_method":"@Test\n    public void shouldReadPropertyIndexRecords() throws IOException\n    {\n        LegacyStore legacyStore = new LegacyStore( fs, exampleDbStore( \"neostore\" ) );\n\n        LegacyPropertyIndexStoreReader propertyIndexStoreReader = legacyStore.getPropertyIndexStoreReader();\n        assertEquals( 12, count( propertyIndexStoreReader.readPropertyIndexStore() ) );\n        legacyStore.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadNodeRecords() throws IOException\n    {\n        URL nodeStoreFile = getClass().getResource( \"exampledb/neostore.nodestore.db\" );\n\n        LegacyNodeStoreReader nodeStoreReader = new LegacyNodeStoreReader( fs, new File( nodeStoreFile.getFile() ) );\n        assertEquals( 1001, nodeStoreReader.getMaxId() );\n        Iterable<NodeRecord> records = nodeStoreReader.readNodeStore();\n        int nodeCount = 0;\n        for ( NodeRecord record : records )\n        {\n            if ( record.inUse() )\n                nodeCount++;\n        }\n        assertEquals( 501, nodeCount );\n        nodeStoreReader.close();\n    }","id":94818,"modified_method":"@Test\n    public void shouldReadNodeRecords() throws IOException\n    {\n        File file = exampleDbStore( \"neostore.nodestore.db\" );\n\n        LegacyNodeStoreReader nodeStoreReader = new LegacyNodeStoreReader( fs, file );\n        assertEquals( 1001, nodeStoreReader.getMaxId() );\n        Iterable<NodeRecord> records = nodeStoreReader.readNodeStore();\n        int nodeCount = 0;\n        for ( NodeRecord record : records )\n        {\n            if ( record.inUse() )\n                nodeCount++;\n        }\n        assertEquals( 501, nodeCount );\n        nodeStoreReader.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadAnArrayPropertyRecordById() throws IOException\n    {\n        URL propertyStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db\" );\n        URL stringStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db.strings\" );\n        URL arrayStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db.arrays\" );\n\n        LegacyPropertyRecord propertyRecord2 = new LegacyPropertyStoreReader( fs,\n                new File( propertyStoreFile.getFile() ) ).readPropertyRecord( 32 );\n\n        int keyIndexId = propertyRecord2.getKeyIndexId();\n        assertEquals( 10, keyIndexId );\n        Object value = propertyRecord2.getType().getValue( propertyRecord2, new LegacyDynamicRecordFetcher( fs,\n                new File( stringStoreFile.getFile() ), new File( arrayStoreFile.getFile() ) ) );\n        assertArrayEquals( MigrationTestUtils.makeLongArray(), (int[]) value );\n    }","id":94819,"modified_method":"@Test\n    public void shouldReadAnArrayPropertyRecordById() throws IOException\n    {\n        File legacyStoreDir = exampleDbStore();\n        File propertyStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db\" );\n        File stringStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db.strings\" );\n        File arrayStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db.arrays\" );\n\n        LegacyPropertyStoreReader reader = new LegacyPropertyStoreReader( fs, propertyStoreFile );\n        LegacyPropertyRecord propertyRecord2 = reader.readPropertyRecord( 32 );\n\n        int keyIndexId = propertyRecord2.getKeyIndexId();\n        assertEquals( 10, keyIndexId );\n        LegacyDynamicRecordFetcher dynamicRecordReader = new LegacyDynamicRecordFetcher( fs,\n                stringStoreFile, arrayStoreFile );\n        Object value = propertyRecord2.getType().getValue( propertyRecord2, dynamicRecordReader );\n        assertArrayEquals( MigrationTestUtils.makeLongArray(), (int[]) value );\n        reader.close();\n        dynamicRecordReader.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadRelationshipRecords() throws IOException\n    {\n        URL nodeStoreFile = getClass().getResource( \"exampledb/neostore.relationshipstore.db\" );\n\n        LegacyRelationshipStoreReader relationshipStoreReader = new LegacyRelationshipStoreReader( fs,\n                new File( nodeStoreFile.getFile() ) );\n        assertEquals( 1500, relationshipStoreReader.getMaxId() );\n        Iterable<RelationshipRecord> records = relationshipStoreReader.readRelationshipStore();\n        int relationshipCount = 0;\n        for ( RelationshipRecord record : records )\n        {\n            if ( record.inUse() )\n                relationshipCount++;\n        }\n        assertEquals( 500, relationshipCount );\n        relationshipStoreReader.close();\n    }","id":94820,"modified_method":"@Test\n    public void shouldReadRelationshipRecords() throws IOException\n    {\n        File file = exampleDbStore( \"neostore.relationshipstore.db\" );\n\n        LegacyRelationshipStoreReader relationshipStoreReader = new LegacyRelationshipStoreReader( fs, file );\n        assertEquals( 1500, relationshipStoreReader.getMaxId() );\n        Iterable<RelationshipRecord> records = relationshipStoreReader.readRelationshipStore();\n        int relationshipCount = 0;\n        for ( RelationshipRecord record : records )\n        {\n            if ( record.inUse() )\n                relationshipCount++;\n        }\n        assertEquals( 500, relationshipCount );\n        relationshipStoreReader.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadRelationshipTypeRecords() throws IOException\n    {\n        URL legacyStoreResource = getClass().getResource( \"exampledb/neostore\" );\n        LegacyStore legacyStore = new LegacyStore( fs, new File( legacyStoreResource.getFile() ) );\n\n        LegacyRelationshipTypeStoreReader relationshipTypeStoreReader = legacyStore.getRelationshipTypeStoreReader();\n        assertEquals( 1000, count( relationshipTypeStoreReader.readRelationshipTypes() ) );\n    }","id":94821,"modified_method":"@Test\n    public void shouldReadRelationshipTypeRecords() throws IOException\n    {\n        LegacyStore legacyStore = new LegacyStore( fs, exampleDbStore( \"neostore\" ) );\n\n        LegacyRelationshipTypeStoreReader relationshipTypeStoreReader = legacyStore.getRelationshipTypeStoreReader();\n        assertEquals( 1000, count( relationshipTypeStoreReader.readRelationshipTypes() ) );\n        legacyStore.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadASimplePropertyRecordById() throws IOException\n    {\n        URL propertyStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db\" );\n\n        LegacyPropertyRecord propertyRecord = new LegacyPropertyStoreReader( fs,\n                new File( propertyStoreFile.getFile() ) ).readPropertyRecord( 24 );\n\n        int keyIndexId = propertyRecord.getKeyIndexId();\n        assertEquals( 2, keyIndexId );\n        Object value = propertyRecord.getType().getValue( propertyRecord, null );\n        assertEquals( Integer.MAX_VALUE, value );\n    }","id":94822,"modified_method":"@Test\n    public void shouldReadASimplePropertyRecordById() throws IOException\n    {\n        File file = exampleDbStore( \"neostore.propertystore.db\" );\n\n        LegacyPropertyStoreReader reader = new LegacyPropertyStoreReader( fs, file );\n        LegacyPropertyRecord propertyRecord = reader.readPropertyRecord( 24 );\n\n        int keyIndexId = propertyRecord.getKeyIndexId();\n        assertEquals( 2, keyIndexId );\n        Object value = propertyRecord.getType().getValue( propertyRecord, null );\n        assertEquals( Integer.MAX_VALUE, value );\n        reader.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldReadAStringPropertyRecordById() throws IOException\n    {\n        URL propertyStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db\" );\n        URL stringStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db.strings\" );\n        URL arrayStoreFile = getClass().getResource( \"exampledb/neostore.propertystore.db.arrays\" );\n\n        LegacyPropertyRecord propertyRecord = new LegacyPropertyStoreReader( fs,\n                new File( propertyStoreFile.getFile() ) ).readPropertyRecord( 25 );\n\n        int keyIndexId = propertyRecord.getKeyIndexId();\n        assertEquals( 3, keyIndexId );\n        Object value = propertyRecord.getType().getValue( propertyRecord, new LegacyDynamicRecordFetcher( fs,\n                new File( stringStoreFile.getFile() ), new File( arrayStoreFile.getFile() ) ) );\n        assertEquals( 1000, ((String) value).length() );\n    }","id":94823,"modified_method":"@Test\n    public void shouldReadAStringPropertyRecordById() throws IOException\n    {\n        File legacyStoreDir = exampleDbStore();\n        File propertyStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db\" );\n        File stringStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db.strings\" );\n        File arrayStoreFile = new File( legacyStoreDir, \"neostore.propertystore.db.arrays\" );\n\n        LegacyPropertyStoreReader reader = new LegacyPropertyStoreReader( fs, propertyStoreFile );\n        LegacyPropertyRecord propertyRecord = reader.readPropertyRecord( 25 );\n\n        int keyIndexId = propertyRecord.getKeyIndexId();\n        assertEquals( 3, keyIndexId );\n        LegacyDynamicRecordFetcher dynamicRecordReader = new LegacyDynamicRecordFetcher( fs,\n                stringStoreFile, arrayStoreFile );\n        Object value = propertyRecord.getType().getValue( propertyRecord, dynamicRecordReader );\n        assertEquals( 1000, ((String) value).length() );\n        reader.close();\n        dynamicRecordReader.close();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMigrate() throws IOException\n    {\n        URL legacyStoreResource = getClass().getResource( \"legacystore/exampledb/neostore\" );\n\n        LegacyStore legacyStore = new LegacyStore( fs, new File( legacyStoreResource.getFile() ),\n                StringLogger.DEV_NULL );\n\n        Config config = MigrationTestUtils.defaultConfig();\n        File outputDir = new File( \"target/outputDatabase\" );\n        FileUtils.deleteRecursively( outputDir );\n        assertTrue( outputDir.mkdirs() );\n\n        String storeFileName = \"target/outputDatabase/neostore\";\n        StoreFactory factory = new StoreFactory( config, new DefaultIdGeneratorFactory(),\n                new DefaultWindowPoolFactory(), fs, StringLogger.DEV_NULL, new DefaultTxHook() );\n        NeoStore neoStore = factory.createNeoStore( new File( storeFileName ));\n\n        ListAccumulatorMigrationProgressMonitor monitor = new ListAccumulatorMigrationProgressMonitor();\n\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n\n        verifyNeoStore( neoStore);\n\n        neoStore.close();\n\n        assertEquals( 100, monitor.events.size() );\n        assertTrue( monitor.started );\n        assertTrue( monitor.finished );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase(outputDir.getPath() );\n\n        DatabaseContentVerifier verifier = new DatabaseContentVerifier( database );\n        verifier.verifyNodes();\n        verifier.verifyRelationships();\n        verifier.verifyNodeIdsReused();\n        verifier.verifyRelationshipIdsReused();\n        verifier.verifyLegacyIndex();\n\n        database.shutdown();\n    }","id":94824,"modified_method":"@Test\n    public void shouldMigrate() throws IOException\n    {\n        MigrationTestUtils.prepareSampleLegacyDatabase( fs, directory.directory() );\n\n        LegacyStore legacyStore = new LegacyStore( fs, new File( directory.directory(), NeoStore.DEFAULT_NAME ),\n                StringLogger.DEV_NULL );\n\n        Config config = MigrationTestUtils.defaultConfig();\n        File outputDir = new File( \"target/outputDatabase\" );\n        FileUtils.deleteRecursively( outputDir );\n        assertTrue( outputDir.mkdirs() );\n\n        String storeFileName = \"target/outputDatabase/neostore\";\n        StoreFactory factory = new StoreFactory( config, new DefaultIdGeneratorFactory(),\n                new DefaultWindowPoolFactory(), fs, StringLogger.DEV_NULL, new DefaultTxHook() );\n        NeoStore neoStore = factory.createNeoStore( new File( storeFileName ));\n\n        ListAccumulatorMigrationProgressMonitor monitor = new ListAccumulatorMigrationProgressMonitor();\n\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n\n        verifyNeoStore( neoStore);\n\n        neoStore.close();\n\n        assertEquals( 100, monitor.events.size() );\n        assertTrue( monitor.started );\n        assertTrue( monitor.finished );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase(outputDir.getPath() );\n\n        DatabaseContentVerifier verifier = new DatabaseContentVerifier( database );\n        verifier.verifyNodes();\n        verifier.verifyRelationships();\n        verifier.verifyNodeIdsReused();\n        verifier.verifyRelationshipIdsReused();\n        verifier.verifyLegacyIndex();\n\n        database.shutdown();\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static File findOldFormatStoreDirectory()\n    {\n        URL legacyStoreResource = TestPerformUpgradeIfNecessary.class.getResource( \"legacystore/exampledb/neostore\" );\n        return new File( legacyStoreResource.getFile() ).getParentFile();\n    }","id":94825,"modified_method":"public static File findOldFormatStoreDirectory() throws IOException\n    {\n        return Unzip.unzip( TestPerformUpgradeIfNecessary.class, \"exampledb.zip\" );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test( expected=IllegalLogFormatException.class )\n    public void cannotRecoverNoncleanShutdownDbWithOlderLogFormat() throws Exception\n    {\n        copyRecursively( new File( TestUpgradeOneDotFourToFiveIT.class.getResource( \"non-clean-1.4.2-db/neostore\" ).getFile() ).getParentFile(), PATH );\n        KernelHealth kernelHealth = mock( KernelHealth.class );\n        XaLogicalLog log = new XaLogicalLog( resourceFile(), null, null, null,\n                defaultFileSystemAbstraction(), new Monitors(), new DevNullLoggingService(), LogPruneStrategies.NO_PRUNING,\n                TransactionStateFactory.noStateFactory( new DevNullLoggingService() ), kernelHealth, 25 * 1024 * 1024 );\n        log.open();\n        fail( \"Shouldn't be able to start\" );\n    }","id":94826,"modified_method":"@Test( expected=IllegalLogFormatException.class )\n    public void cannotRecoverNoncleanShutdownDbWithOlderLogFormat() throws Exception\n    {\n        File storeDir = Unzip.unzip( getClass(), \"non-clean-1.4.2-db.zip\" );\n        KernelHealth kernelHealth = mock( KernelHealth.class );\n        XaLogicalLog log = new XaLogicalLog( resourceFile( storeDir ), null, null, null,\n                defaultFileSystemAbstraction(), new Monitors(), new DevNullLoggingService(), LogPruneStrategies.NO_PRUNING,\n                TransactionStateFactory.noStateFactory( new DevNullLoggingService() ), kernelHealth, 25 * 1024 * 1024 );\n        log.open();\n        fail( \"Shouldn't be able to start\" );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected File resourceFile()\n    {\n        return new File( PATH, \"nioneo_logical.log\" );\n    }","id":94827,"modified_method":"protected File resourceFile( File storeDir )\n    {\n        return new File( storeDir, \"nioneo_logical.log\" );\n    }","commit_id":"2f54864047f1f57014298aae88f294f30414f794","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void startDatabase() throws IOException\n    {\n        String file = getClass().getResource( \"neostore\" ).getFile();\n        FileUtils.copyRecursively( new File( file ).getParentFile(), storeDir.directory() );\n\n        db = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir.directory().getPath() );\n    }","id":94828,"modified_method":"@Before\n    public void startDatabase() throws IOException\n    {\n        copyRecursively( unzip( getClass(), \"db.zip\" ), storeDir.directory() );\n\n        db = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir.directory().getPath() );\n    }","commit_id":"853d462b811ba34247e1f9fb4bab452404b05dd9","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static File findOldFormatStoreDirectory()\n    {\n        return findDatabaseDirectory( LegacyStore.class, \"exampledb\" );\n    }","id":94829,"modified_method":"public static File findOldFormatStoreDirectory() throws IOException\n    {\n        return Unzip.unzip( LegacyStore.class, \"exampledb.zip\" );\n    }","commit_id":"853d462b811ba34247e1f9fb4bab452404b05dd9","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldDedupUniquePropertyIndexKeys() throws Exception\n    {\n        // GIVEN\n        // a store that contains two nodes with property \"name\" of which there are two key tokens\n        // that should be merged in the store migration\n        LegacyStore legacyStore = new LegacyStore( fs,\n                new File( getClass().getResource( \"legacystore/propkeydupdb/neostore\" ).getFile() ) );\n        NeoStore neoStore = storeFactory.createNeoStore( storeFileName );\n\n        // WHEN\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n        legacyStore.close();\n\n        // THEN\n        // verify that the \"name\" property for both the involved nodes\n        GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir );\n        Node nodeA = getNodeWithName( db, \"A\" );\n        assertThat( nodeA, inTx( db, hasProperty( \"name\" ).withValue( \"A\" ) ) );\n\n        Node nodeB = getNodeWithName( db, \"B\" );\n        assertThat( nodeB, inTx( db, hasProperty( \"name\" ).withValue( \"B\" ) ) );\n\n        Node nodeC = getNodeWithName( db, \"C\" );\n        assertThat( nodeC, inTx( db, hasProperty( \"name\" ).withValue( \"C\" )  ) );\n        assertThat( nodeC, inTx( db, hasProperty( \"other\" ).withValue( \"a value\" ) ) );\n        assertThat( nodeC, inTx( db, hasProperty( \"third\" ).withValue( \"something\" ) ) );\n        db.shutdown();\n        \n        // THEN\n        // verify that there are no duplicate keys in the store\n        PropertyKeyTokenStore tokenStore =\n                storeFactory.newPropertyKeyTokenStore( new File( storeFileName + PROPERTY_KEY_TOKEN_STORE_NAME ) );\n        Token[] tokens = tokenStore.getTokens( MAX_VALUE );\n        tokenStore.close();\n        assertNuDuplicates( tokens );\n    }","id":94830,"modified_method":"@Test\n    public void shouldDedupUniquePropertyIndexKeys() throws Exception\n    {\n        // GIVEN\n        // a store that contains two nodes with property \"name\" of which there are two key tokens\n        // that should be merged in the store migration\n        File legacyStoreDir = Unzip.unzip( LegacyStore.class, \"propkeydupdb.zip\" );\n        LegacyStore legacyStore = new LegacyStore( fs, new File( legacyStoreDir, NeoStore.DEFAULT_NAME ) );\n        NeoStore neoStore = storeFactory.createNeoStore( storeFileName );\n\n        // WHEN\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n        legacyStore.close();\n\n        // THEN\n        // verify that the \"name\" property for both the involved nodes\n        GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir );\n        Node nodeA = getNodeWithName( db, \"A\" );\n        assertThat( nodeA, inTx( db, hasProperty( \"name\" ).withValue( \"A\" ) ) );\n\n        Node nodeB = getNodeWithName( db, \"B\" );\n        assertThat( nodeB, inTx( db, hasProperty( \"name\" ).withValue( \"B\" ) ) );\n\n        Node nodeC = getNodeWithName( db, \"C\" );\n        assertThat( nodeC, inTx( db, hasProperty( \"name\" ).withValue( \"C\" )  ) );\n        assertThat( nodeC, inTx( db, hasProperty( \"other\" ).withValue( \"a value\" ) ) );\n        assertThat( nodeC, inTx( db, hasProperty( \"third\" ).withValue( \"something\" ) ) );\n        db.shutdown();\n\n        // THEN\n        // verify that there are no duplicate keys in the store\n        PropertyKeyTokenStore tokenStore =\n                storeFactory.newPropertyKeyTokenStore( new File( storeFileName + PROPERTY_KEY_TOKEN_STORE_NAME ) );\n        Token[] tokens = tokenStore.getTokens( MAX_VALUE );\n        tokenStore.close();\n        assertNuDuplicates( tokens );\n    }","commit_id":"853d462b811ba34247e1f9fb4bab452404b05dd9","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldMigrate() throws IOException\n    {\n        // GIVEN\n        LegacyStore legacyStore = new LegacyStore( fs,\n                new File( getClass().getResource( \"legacystore/exampledb/neostore\" ).getFile() ) );\n        NeoStore neoStore = storeFactory.createNeoStore( storeFileName );\n\n        // WHEN\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n        legacyStore.close();\n        \n        // THEN\n        neoStore = storeFactory.newNeoStore( storeFileName );\n        verifyNeoStore( neoStore );\n        neoStore.close();\n\n        assertEquals( 100, monitor.events.size() );\n        assertTrue( monitor.started );\n        assertTrue( monitor.finished );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir );\n\n        DatabaseContentVerifier verifier = new DatabaseContentVerifier( database );\n        verifier.verifyNodes();\n        verifier.verifyRelationships();\n        verifier.verifyNodeIdsReused();\n        verifier.verifyRelationshipIdsReused();\n\n        // CLEANUP\n        database.shutdown();\n    }","id":94831,"modified_method":"@Test\n    public void shouldMigrate() throws IOException\n    {\n        // GIVEN\n        LegacyStore legacyStore = new LegacyStore( fs,\n                new File( MigrationTestUtils.findOldFormatStoreDirectory(), NeoStore.DEFAULT_NAME ) );\n        NeoStore neoStore = storeFactory.createNeoStore( storeFileName );\n\n        // WHEN\n        new StoreMigrator( monitor ).migrate( legacyStore, neoStore );\n        legacyStore.close();\n\n        // THEN\n        neoStore = storeFactory.newNeoStore( storeFileName );\n        verifyNeoStore( neoStore );\n        neoStore.close();\n\n        assertEquals( 100, monitor.events.size() );\n        assertTrue( monitor.started );\n        assertTrue( monitor.finished );\n\n        GraphDatabaseService database = new GraphDatabaseFactory().newEmbeddedDatabase( storeDir );\n\n        DatabaseContentVerifier verifier = new DatabaseContentVerifier( database );\n        verifier.verifyNodes();\n        verifier.verifyRelationships();\n        verifier.verifyNodeIdsReused();\n        verifier.verifyRelationshipIdsReused();\n\n        // CLEANUP\n        database.shutdown();\n    }","commit_id":"853d462b811ba34247e1f9fb4bab452404b05dd9","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void verifyNeoStore( NeoStore neoStore )\n    {\n        assertEquals( 1317392957120l, neoStore.getCreationTime() );\n        assertEquals( -472309512128245482l, neoStore.getRandomNumber() );\n        assertEquals( 1l, neoStore.getVersion() );\n        assertEquals( NeoStore.ALL_STORES_VERSION, NeoStore.versionLongToString( neoStore.getStoreVersion() ) );\n        assertEquals( 1004l, neoStore.getLastCommittedTx() );\n    }","id":94832,"modified_method":"private void verifyNeoStore( NeoStore neoStore )\n    {\n        assertEquals( 1317392957120l, neoStore.getCreationTime() );\n        assertEquals( -472309512128245482l, neoStore.getRandomNumber() );\n        assertEquals( 1l, neoStore.getVersion() );\n        assertEquals( CommonAbstractStore.ALL_STORES_VERSION, NeoStore.versionLongToString( neoStore.getStoreVersion() ) );\n        assertEquals( 1004l, neoStore.getLastCommittedTx() );\n    }","commit_id":"853d462b811ba34247e1f9fb4bab452404b05dd9","url":"https://github.com/neo4j/neo4j"},{"original_method":"void unregisterThreadContextMethodMetricsMBean(ThreadContextMethodMetrics threadMetrics) {\n    ObjectName objectName = objectNameMap.remove(threadMetrics);\n    if (objectName != null) {\n      try {\n        getMBeanServer().unregisterMBean(objectName);\n      } catch (Throwable e) {\n        LOG.error(\"Failed to unregister \" + threadMetrics, e);\n      }\n    }\n  }","id":94833,"modified_method":"void unregisterThreadContextMethodMetricsMBean(ThreadContextMethodMetrics threadMetrics) {\n    ObjectName objectName = objectNameMap.remove(threadMetrics);\n      MBeanServer beanServer = getMBeanServer();\n    if (objectName != null && beanServer != null && beanServer.isRegistered(objectName)) {\n      try {\n          beanServer.unregisterMBean(objectName);\n      } catch (Throwable e) {\n        LOG.error(\"Failed to unregister \" + threadMetrics, e);\n      }\n    }\n  }","commit_id":"bac21b5c2557ec8971bf9f50655c9ca717d8dd6f","url":"https://github.com/fabric8io/fabric8"},{"original_method":"void registerMethodMetricsMBean(MethodMetrics methodMetrics) {\n    Hashtable<String, String> properties = new Hashtable<>();\n    properties.put(\"type\", \"MethodMetrics\");\n    properties.put(\"name\", ObjectName.quote(methodMetrics.getName()));\n    //properties.put(\"methodId\", String.valueOf(System.identityHashCode(methodMetrics)));\n\n    try {\n      ObjectName objectName = new ObjectName(DEFAULT_DOMAIN, properties);\n      ObjectInstance objectInstance = getMBeanServer().registerMBean(methodMetrics, objectName);\n      objectNameMap.put(methodMetrics, objectInstance.getObjectName());\n    } catch (Throwable e) {\n      LOG.error(\"Failed to register mbean \" + methodMetrics.toString(), e);\n    }\n  }","id":94834,"modified_method":"void registerMethodMetricsMBean(MethodMetrics methodMetrics) {\n    try {\n      ObjectName objectName = new ObjectName(DEFAULT_DOMAIN + \":\" +\n        \"type=MethodMetrics\" +\n        \",name=\" + ObjectName.quote(methodMetrics.getName())\n        // \"methodId\" + System.identityHashCode(methodMetrics))\n      );\n      ObjectInstance objectInstance = getMBeanServer().registerMBean(methodMetrics, objectName);\n      objectNameMap.put(methodMetrics, objectInstance.getObjectName());\n    } catch (Throwable e) {\n      LOG.error(\"Failed to register mbean \" + methodMetrics.toString(), e);\n    }\n  }","commit_id":"bac21b5c2557ec8971bf9f50655c9ca717d8dd6f","url":"https://github.com/fabric8io/fabric8"},{"original_method":"void registerThreadContextMethodMetricsMBean(ThreadContextMethodMetrics threadMetrics) {\n    Hashtable<String, String> properties = new Hashtable<>();\n    properties.put(\"type\", \"threadContextMetrics\");\n    properties.put(\"name\", ObjectName.quote(threadMetrics.getName()));\n    properties.put(\"threadName\", ObjectName.quote(threadMetrics.getThreadName()));\n    properties.put(\"threadId\", String.valueOf(threadMetrics.getThreadId()));\n\n    try {\n      ObjectName objectName = new ObjectName(DEFAULT_DOMAIN, properties);\n      ObjectInstance objectInstance = getMBeanServer().registerMBean(threadMetrics, objectName);\n      objectNameMap.put(threadMetrics, objectInstance.getObjectName());\n    } catch (Throwable e) {\n      LOG.error(\"Failed to register mbean \" + threadMetrics.toString(), e);\n    }\n  }","id":94835,"modified_method":"void registerThreadContextMethodMetricsMBean(ThreadContextMethodMetrics threadMetrics) {\n    try {\n        ObjectName objectName = new ObjectName(DEFAULT_DOMAIN + \":\"\n                + \"type=ThreadContextMetrics\"\n                + \",name=\" + ObjectName.quote(threadMetrics.getName())\n                + \",threadName=\" + ObjectName.quote(threadMetrics.getThreadName())\n                // + \",threadId=\" + threadMetrics.getThreadId()\n        );\n      ObjectInstance objectInstance = getMBeanServer().registerMBean(threadMetrics, objectName);\n      objectNameMap.put(threadMetrics, objectInstance.getObjectName());\n    } catch (Throwable e) {\n      LOG.error(\"Failed to register mbean \" + threadMetrics.toString(), e);\n    }\n  }","commit_id":"bac21b5c2557ec8971bf9f50655c9ca717d8dd6f","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public static void copy(InputStream input, OutputStream output) {\n        try {\n            byte[] buf = new byte[1024];\n            int bytesRead = input.read(buf);\n            while (bytesRead != -1) {\n                output.write(buf, 0, bytesRead);\n                bytesRead = input.read(buf);\n            }\n            output.flush();\n        } catch (Exception e) {\n            Exceptions.propagate(e);\n        }\n    }","id":94836,"modified_method":"public static void copy(InputStream input, OutputStream output) {\n        try {\n            ByteStreams.copy(input, output);\n            output.flush();\n        } catch (IOException ioe) {\n            throw Exceptions.propagate(ioe);\n        }\n    }","commit_id":"6546db3e360d809cf2cc8fe204ad509ec08c9e7a","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"/** reads the input stream fully, returning a byte array; throws unchecked exception on failure;\n     *  to get a string, use <code>readFully(reader(is))<\/code> or <code>readFullyString(is)<\/code> */\n    public static byte[] readFully(InputStream is) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        copy(is, out);\n        return out.toByteArray();\n    }","id":94837,"modified_method":"/** reads the input stream fully, returning a byte array; throws unchecked exception on failure;\n     *  to get a string, use <code>readFully(reader(is))<\/code> or <code>readFullyString(is)<\/code> */\n    public static byte[] readFully(InputStream is) {\n        try {\n            return ByteStreams.toByteArray(is);\n        } catch (IOException ioe) {\n            throw Exceptions.propagate(ioe);\n        }\n    }","commit_id":"6546db3e360d809cf2cc8fe204ad509ec08c9e7a","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static String readFully(Reader is) {\n        StringWriter out = new StringWriter();\n        copy(is, out);\n        return out.toString();\n    }","id":94838,"modified_method":"public static String readFully(Reader is) {\n        try {\n            return CharStreams.toString(is);\n        } catch (IOException ioe) {\n            throw Exceptions.propagate(ioe);\n        }\n    }","commit_id":"6546db3e360d809cf2cc8fe204ad509ec08c9e7a","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static void copy(Reader input, Writer output) {\n        try {\n            char[] buf = new char[1024];\n            int bytesRead = input.read(buf);\n            while (bytesRead != -1) {\n                output.write(buf, 0, bytesRead);\n                bytesRead = input.read(buf);\n            }\n            output.flush();\n        } catch (Exception e) {\n            Exceptions.propagate(e);\n        }\n    }","id":94839,"modified_method":"public static void copy(Reader input, Writer output) {\n        try {\n            CharStreams.copy(input, output);\n            output.flush();\n        } catch (IOException ioe) {\n            throw Exceptions.propagate(ioe);\n        }\n    }","commit_id":"6546db3e360d809cf2cc8fe204ad509ec08c9e7a","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public static InputStream newInputStreamWithContents(String contents) {\n        try {\n            byte[] bytes = checkNotNull(contents, \"contents\").getBytes(Charsets.UTF_8);\n            InputSupplier<ByteArrayInputStream> supplier = ByteStreams.newInputStreamSupplier(bytes);\n            InputStream stream = supplier.getInput();\n            return stream;\n        } catch (IOException ioe) {\n            if (log.isDebugEnabled()) log.debug(\"Error creating InputStream from String: \" + ioe.getMessage());\n            throw Exceptions.propagate(ioe);\n        }\n    }","id":94840,"modified_method":"public static InputStream newInputStreamWithContents(String contents) {\n        byte[] bytes = checkNotNull(contents, \"contents\").getBytes(Charsets.UTF_8);\n        try {\n            return ByteSource.wrap(bytes).openStream();\n        } catch (IOException ioe) {\n            if (log.isDebugEnabled()) log.debug(\"Error creating InputStream from String: \" + ioe.getMessage());\n            throw Exceptions.propagate(ioe);\n        }\n    }","commit_id":"6546db3e360d809cf2cc8fe204ad509ec08c9e7a","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"/**\n   * Perform aggregation on the Streams described by the {@code streamIds}, and no other Streams.\n   * If aggregation was previously done on other Streams, those must be cancelled.\n   *\n   * @param streamIds Ids of the streams to perform data sizes aggregation on\n   */\n  private void aggregate(Set<Id.Stream> streamIds) {\n    Set<Id.Stream> existingAggregators = Sets.newHashSet(aggregators.keySet());\n    for (Id.Stream streamId : streamIds) {\n      if (existingAggregators.remove(streamId)) {\n        continue;\n      }\n\n      try {\n        StreamConfig config = streamAdmin.getConfig(streamId);\n        long filesSize = getStreamEventsSize(streamId);\n        LOG.debug(\"Size of the events already present for stream {}: {}\", streamId, filesSize);\n        createSizeAggregator(streamId, filesSize, config.getNotificationThresholdMB());\n      } catch (IOException e) {\n        LOG.error(\"Could not compute sizes of files for stream {}\", streamId);\n        Throwables.propagate(e);\n      }\n    }\n\n    // Stop aggregating the heartbeats we used to listen to before the call to that method,\n    // but don't anymore\n    for (Id.Stream outdatedStream : existingAggregators) {\n      // We need to first cancel the aggregator and then remove it from the map of aggregators,\n      // to avoid race conditions in createSizeAggregator\n      StreamSizeAggregator aggregator = aggregators.get(outdatedStream);\n      if (aggregator != null) {\n        aggregator.cancel();\n      }\n      aggregators.remove(outdatedStream);\n    }\n  }","id":94841,"modified_method":"/**\n   * Perform aggregation on the Streams described by the {@code streamIds}, and no other Streams.\n   * If aggregation was previously done on other Streams, those must be cancelled.\n   *\n   * @param streamIds Ids of the streams to perform data sizes aggregation on\n   */\n  private void aggregate(Set<Id.Stream> streamIds) {\n    Set<Id.Stream> existingAggregators = Sets.newHashSet(aggregators.keySet());\n    for (Id.Stream streamId : streamIds) {\n      if (existingAggregators.remove(streamId)) {\n        continue;\n      }\n\n      StreamConfig config;\n      long eventsSize;\n      while (true) {\n        try {\n          config = streamAdmin.getConfig(streamId);\n          eventsSize = getStreamEventsSize(streamId);\n          LOG.debug(\"Size of the events ingested in stream {}: {}\", streamId, eventsSize);\n          break;\n        } catch (IOException e) {\n          LOG.info(\"Could not compute sizes of files for stream {}. Retrying in 1 sec.\", streamId);\n          try {\n            TimeUnit.SECONDS.sleep(1);\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n            throw Throwables.propagate(ie);\n          }\n        }\n      }\n      createSizeAggregator(streamId, eventsSize, config.getNotificationThresholdMB());\n    }\n\n    // Stop aggregating the heartbeats we used to listen to before the call to that method,\n    // but don't anymore\n    for (Id.Stream outdatedStream : existingAggregators) {\n      // We need to first cancel the aggregator and then remove it from the map of aggregators,\n      // to avoid race conditions in createSizeAggregator\n      StreamSizeAggregator aggregator = aggregators.get(outdatedStream);\n      if (aggregator != null) {\n        aggregator.cancel();\n      }\n      aggregators.remove(outdatedStream);\n    }\n  }","commit_id":"977fc1f72850afea5c8149695e1f47faf61eed5c","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\r\n\tpublic Object getAdapter(Object adaptableObject, Class adapterType) {\r\n\t\tif (adapterType == IPropertySheetPage.class){\r\n\t\t\tif (adaptableObject instanceof BugExplorerView\r\n\t\t\t\t\t|| adaptableObject instanceof JavaEditor\r\n\t\t\t\t\t|| adaptableObject instanceof AbstractFindbugsView) {\r\n\t\t\t\treturn new BugPropertySheetPage();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (adapterType == IPropertySource.class) {\r\n\t\t\tif (adaptableObject instanceof BugPattern\r\n\t\t\t\t\t|| adaptableObject instanceof BugInstance\r\n\t\t\t\t\t|| adaptableObject instanceof BugInstance.XmlProps\r\n\t\t\t\t\t|| adaptableObject instanceof BugGroup\r\n\t\t\t\t\t|| adaptableObject instanceof BugAnnotation) {\r\n\t\t\t\treturn new PropertySource(adaptableObject);\r\n\t\t\t}\r\n\t\t\tIMarker marker = null;\r\n\t\t\tif (adaptableObject instanceof IMarker) {\r\n\t\t\t\tmarker = (IMarker) adaptableObject;\r\n\t\t\t} else if (adaptableObject instanceof IAdaptable) {\r\n\t\t\t\tmarker = (IMarker) ((IAdaptable) adaptableObject)\r\n\t\t\t\t\t\t.getAdapter(IMarker.class);\r\n\t\t\t}\r\n\t\t\tif (!MarkerUtil.isFindBugsMarker(marker)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn new MarkerPropertySource(marker);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","id":94842,"modified_method":"@SuppressWarnings(\"rawtypes\")\r\n\tpublic Object getAdapter(Object adaptableObject, Class adapterType) {\r\n\t\tif (adapterType == IPropertySheetPage.class){\r\n\t\t\tif (adaptableObject instanceof BugExplorerView\r\n\t\t\t\t\t|| adaptableObject instanceof JavaEditor\r\n\t\t\t\t\t|| adaptableObject instanceof AbstractFindbugsView) {\r\n\t\t\t\treturn new BugPropertySheetPage();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (adapterType == IPropertySource.class) {\r\n\t\t\tif (adaptableObject instanceof BugPattern\r\n\t\t\t\t\t|| adaptableObject instanceof BugInstance\r\n\t\t\t\t\t|| adaptableObject instanceof BugInstance.XmlProps\r\n\t\t\t\t\t|| adaptableObject instanceof BugGroup\r\n\t\t\t\t\t|| adaptableObject instanceof BugAnnotation) {\r\n\t\t\t\treturn new PropertySource(adaptableObject);\r\n\t\t\t}\r\n\t\t\tIMarker marker = Util.getAdapter(IMarker.class, adaptableObject);\r\n\t\t\tif (!MarkerUtil.isFindBugsMarker(marker)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn new MarkerPropertySource(marker);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","commit_id":"84793b7c97afc92e9dc5c9dc852cd2dab4c724c3","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private static Set<WorkItem> getResources(IWorkingSet wset) {\r\n\t\tSet<WorkItem> set = new HashSet<WorkItem>();\r\n\t\tboolean aggregateWorkingSet = wset.isAggregateWorkingSet();\r\n\t\t// IAggregateWorkingSet was introduced in Eclipse 3.5\r\n\t\tif(aggregateWorkingSet && wset instanceof IAggregateWorkingSet) {\r\n\t\t\tIAggregateWorkingSet aggr = (IAggregateWorkingSet) wset;\r\n\t\t\tIWorkingSet[] sets = aggr.getComponents();\r\n\t\t\tfor (IWorkingSet iWorkingSet : sets) {\r\n\t\t\t\tset.addAll(getResources(iWorkingSet));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tIAdaptable[] elements = wset.getElements();\r\n\t\t\tfor (IAdaptable iAdaptable : elements) {\r\n\t\t\t\tWorkItem item = getWorkItem(iAdaptable);\r\n\t\t\t\tif(item != null) {\r\n\t\t\t\t\tset.add(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn set;\r\n\t}","id":94843,"modified_method":"/**\r\n\t * @param wset non null working set\r\n\t * @return non null set with work items, which may be empty\r\n\t */\r\n\tpublic static Set<WorkItem> getResources(IWorkingSet wset) {\r\n\t\tSet<WorkItem> set = new HashSet<WorkItem>();\r\n\t\tboolean aggregateWorkingSet = wset.isAggregateWorkingSet();\r\n\t\t// IAggregateWorkingSet was introduced in Eclipse 3.5\r\n\t\tif(aggregateWorkingSet && wset instanceof IAggregateWorkingSet) {\r\n\t\t\tIAggregateWorkingSet aggr = (IAggregateWorkingSet) wset;\r\n\t\t\tIWorkingSet[] sets = aggr.getComponents();\r\n\t\t\tfor (IWorkingSet iWorkingSet : sets) {\r\n\t\t\t\tset.addAll(getResources(iWorkingSet));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tIAdaptable[] elements = wset.getElements();\r\n\t\t\tfor (IAdaptable iAdaptable : elements) {\r\n\t\t\t\tWorkItem item = getWorkItem(iAdaptable);\r\n\t\t\t\tif(item != null) {\r\n\t\t\t\t\tset.add(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn set;\r\n\t}","commit_id":"84793b7c97afc92e9dc5c9dc852cd2dab4c724c3","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\r\n\t * Convenient method to get resources from adaptables\r\n\t * @param element an IAdaptable object which may provide an adapter for IResource\r\n\t * @return resource object or null\r\n\t */\r\n\tpublic static IResource getResource(Object element) {\r\n\t\tif(element instanceof IResource) {\r\n\t\t\treturn (IResource) element;\r\n\t\t}\r\n\t\tif(element instanceof IJavaElement) {\r\n\t\t\treturn ((IJavaElement) element).getResource();\r\n\t\t}\r\n\r\n\t\tif(element instanceof IAdaptable) {\r\n\t\t\treturn (IResource) ((IAdaptable) element).getAdapter(IResource.class);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}","id":94844,"modified_method":"/**\r\n\t * Convenient method to get resources from adaptables\r\n\t * @param element an IAdaptable object which may provide an adapter for IResource\r\n\t * @return resource object or null\r\n\t */\r\n\t@javax.annotation.CheckForNull\r\n\tpublic static IResource getResource(Object element) {\r\n\t\tif(element instanceof IJavaElement) {\r\n\t\t\treturn ((IJavaElement) element).getResource();\r\n\t\t}\r\n\r\n\t\treturn Util.getAdapter(IResource.class, element);\r\n\t}","commit_id":"84793b7c97afc92e9dc5c9dc852cd2dab4c724c3","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\r\n\t * Collects and combines the selection which may contain sources from different\r\n\t * projects and / or multiple sources from same project.\r\n\t * <p>\r\n\t * If selection contains hierarchical data (like file and it's parent directory), the\r\n\t * only topmost element is returned (same for directories from projects).\r\n\t * <p>\r\n\t * The children from selected parents are not resolved, so that the return value\r\n\t * contains the 'highest' possible hierarchical elements without children.\r\n\t *\r\n\t * @param structuredSelection\r\n\t * @return a map with the project as a key and selected resources as value. If project\r\n\t *         itself was selected, then key is the same as value.\r\n\t */\r\n\tpublic static Map<IProject, List<WorkItem>> getResourcesPerProject(\r\n\t\t\tIStructuredSelection structuredSelection) {\r\n\t\tMap<IProject, List<WorkItem>> projectsMap = new HashMap<IProject, List<WorkItem>>();\r\n\t\tfor (Iterator<?> iter = structuredSelection.iterator(); iter.hasNext();) {\r\n\t\t\tObject element = iter.next();\r\n\t\t\tWorkItem workItem = getWorkItem(element);\r\n\t\t\tif (workItem == null) {\r\n\t\t\t\tIWorkingSet wset = getWorkingSet(element);\r\n\t\t\t\tif(wset != null) {\r\n\t\t\t\t\tmapResources(wset, projectsMap);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Support for active changesets\r\n\t\t\t\tChangeSet set = (ChangeSet) ((IAdaptable) element)\r\n\t\t\t\t\t\t.getAdapter(ChangeSet.class);\r\n\t\t\t\tfor (WorkItem change : getResources(set)) {\r\n\t\t\t\t\tmapResource(change, projectsMap, true);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tmapResource(workItem, projectsMap, false);\r\n\t\t}\r\n\t\treturn projectsMap;\r\n\t}","id":94845,"modified_method":"/**\r\n\t * Collects and combines the selection which may contain sources from different\r\n\t * projects and / or multiple sources from same project.\r\n\t * <p>\r\n\t * If selection contains hierarchical data (like file and it's parent directory), the\r\n\t * only topmost element is returned (same for directories from projects).\r\n\t * <p>\r\n\t * The children from selected parents are not resolved, so that the return value\r\n\t * contains the 'highest' possible hierarchical elements without children.\r\n\t *\r\n\t * @param structuredSelection\r\n\t * @return a map with the project as a key and selected resources as value. If project\r\n\t *         itself was selected, then key is the same as value.\r\n\t */\r\n\tpublic static Map<IProject, List<WorkItem>> getResourcesPerProject(\r\n\t\t\tIStructuredSelection structuredSelection) {\r\n\t\tMap<IProject, List<WorkItem>> projectsMap = new HashMap<IProject, List<WorkItem>>();\r\n\t\tfor (Iterator<?> iter = structuredSelection.iterator(); iter.hasNext();) {\r\n\t\t\tObject element = iter.next();\r\n\t\t\tWorkItem workItem = getWorkItem(element);\r\n\t\t\tif (workItem == null) {\r\n\t\t\t\tIWorkingSet wset = Util.getAdapter(IWorkingSet.class, element);\r\n\t\t\t\tif(wset != null) {\r\n\t\t\t\t\tmapResources(wset, projectsMap);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Support for active changesets\r\n\t\t\t\tChangeSet set = Util.getAdapter(ChangeSet.class, element);\r\n\t\t\t\tfor (WorkItem change : getResources(set)) {\r\n\t\t\t\t\tmapResource(change, projectsMap, true);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tmapResource(workItem, projectsMap, false);\r\n\t\t}\r\n\t\treturn projectsMap;\r\n\t}","commit_id":"84793b7c97afc92e9dc5c9dc852cd2dab4c724c3","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"public long count(Filter filter, NodeState indexMeta, final String indexStorageNodeName,\n            Set<String> values, int max) {\n        NodeState index = indexMeta.getChildNode(indexStorageNodeName);\n        int count = 0;\n        if (values == null) {\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);\n            if (ec != null) {\n                return ec.getValue(Type.LONG);\n            }\n            CountingNodeVisitor v = new CountingNodeVisitor(max);\n            v.visit(index);\n            count = v.getEstimatedCount();\n            if (count >= max) {\n                // \"is not null\" queries typically read more data\n                count *= 10;\n            }\n        } else {\n            int size = values.size();\n            if (size == 0) {\n                return 0;\n            }\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);       \n            if (ec != null) {\n                long entryCount = ec.getValue(Type.LONG);\n                // assume 10000 entries per key, so that this index is used\n                // instead of traversal, but not instead of a regular property index\n                long keyCount = entryCount / 10000;\n                ec = indexMeta.getProperty(KEY_COUNT_PROPERTY_NAME);\n                if (ec != null) {\n                    keyCount = ec.getValue(Type.LONG);\n                }\n                // cast to double to avoid overflow \n                // (entryCount could be Long.MAX_VALUE)\n                // the cost is not multiplied by the size, \n                // otherwise the traversing index might be used\n                keyCount = Math.max(1, keyCount);\n                return (long) ((double) entryCount / keyCount) + size;\n            }\n            max = Math.max(10, max / size);\n            int i = 0;\n            String filterRootPath = null;\n            if (filter != null &&\n                    filter.getPathRestriction().equals(Filter.PathRestriction.ALL_CHILDREN)) {\n                filterRootPath = filter.getPath();\n            }\n            for (String p : values) {\n                if (count > max && i > 3) {\n                    // the total count is extrapolated from the the number \n                    // of values counted so far to the total number of values\n                    count = count * size / i;\n                    break;\n                }\n                NodeState s = index.getChildNode(p);\n                if (filterRootPath != null && s.exists()) {\n                    // Descend directly to path restriction inside index tree\n                    for (String pathFragment : PathUtils\n                            .elements(filterRootPath)) {\n                        s = s.getChildNode(pathFragment);\n                        if (!s.exists()) {\n                            break;\n                        }\n                    }\n                }\n                if (s.exists()) {\n                    CountingNodeVisitor v = new CountingNodeVisitor(max);\n                    v.visit(s);\n                    count += v.getEstimatedCount();\n                }\n                i++;\n            }\n        }\n        return count;\n    }","id":94846,"modified_method":"public long count(Filter filter, NodeState indexMeta, final String indexStorageNodeName,\n            Set<String> values, int max) {\n        NodeState index = indexMeta.getChildNode(indexStorageNodeName);\n        long count = 0;\n        if (values == null) {\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);\n            if (ec != null) {\n                count = ec.getValue(Type.LONG);\n                if (count >= 0) {\n                    return count;\n                }\n            }\n            if (count == 0) {\n                PropertyState ap = index.getProperty(ApproximateCounter.COUNT_PROPERTY_NAME);\n                if (ap != null) {\n                    return ap.getValue(Type.LONG);\n                }\n            }\n            CountingNodeVisitor v = new CountingNodeVisitor(max);\n            v.visit(index);\n            count = v.getEstimatedCount();\n            if (count >= max) {\n                // \"is not null\" queries typically read more data\n                count *= 10;\n            }\n        } else {\n            int size = values.size();\n            if (size == 0) {\n                return 0;\n            }\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);       \n            if (ec != null) {\n                count = ec.getValue(Type.LONG);\n                if (count >= 0) {\n                    // assume 10000 entries per key, so that this index is used\n                    // instead of traversal, but not instead of a regular property index\n                    long keyCount = count / 10000;\n                    ec = indexMeta.getProperty(KEY_COUNT_PROPERTY_NAME);\n                    if (ec != null) {\n                        keyCount = ec.getValue(Type.LONG);\n                    }\n                    // cast to double to avoid overflow \n                    // (entryCount could be Long.MAX_VALUE)\n                    // the cost is not multiplied by the size, \n                    // otherwise the traversing index might be used              \n                    keyCount = Math.max(1, keyCount);\n                    return (long) ((double) count / keyCount) + size;\n                }\n            }\n            long approxMax = 0;\n            if (count == 0) {\n                PropertyState ap = index.getProperty(ApproximateCounter.COUNT_PROPERTY_NAME);\n                if (ap != null) {\n                    for (String p : values) {\n                        NodeState s = index.getChildNode(p);\n                        if (s.exists()) {\n                            ap = s.getProperty(ApproximateCounter.COUNT_PROPERTY_NAME);\n                            if (ap != null) {\n                                approxMax += ap.getValue(Type.LONG);\n                            }\n                        }\n                    }\n                }\n            }\n            count = 0;\n            max = Math.max(10, max / size);\n            int i = 0;\n            String filterRootPath = null;\n            if (filter != null &&\n                    filter.getPathRestriction().equals(Filter.PathRestriction.ALL_CHILDREN)) {\n                filterRootPath = filter.getPath();\n            }\n            if (filterRootPath == null && approxMax > 0) {\n                // we do have an approximation, and\n                // there is no path filter\n                return approxMax;\n            }\n            for (String p : values) {\n                if (count > max && i > 3) {\n                    // the total count is extrapolated from the the number \n                    // of values counted so far to the total number of values\n                    count = count * size / i;\n                    break;\n                }\n                NodeState s = index.getChildNode(p);\n                if (filterRootPath != null && s.exists()) {\n                    // Descend directly to path restriction inside index tree\n                    for (String pathFragment : PathUtils\n                            .elements(filterRootPath)) {\n                        s = s.getChildNode(pathFragment);\n                        if (!s.exists()) {\n                            break;\n                        }\n                    }\n                }\n                if (s.exists()) {\n                    CountingNodeVisitor v = new CountingNodeVisitor(max);\n                    v.visit(s);\n                    count += v.getEstimatedCount();\n                }\n                i++;\n            }\n            if (approxMax > 0 && approxMax > count) {\n                // we do have an approximation, and\n                // it is higher than what we counted\n                // (we don't count that far)\n                count = approxMax;\n            }\n        }\n        return count;\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public boolean testPath(String path) {\n        if (isAlwaysFalse()) {\n            return false;\n        }\n        switch (pathRestriction) {\n        case NO_RESTRICTION:\n            return true;\n        case EXACT:\n            return path.matches(this.path);\n        case PARENT:\n            return PathUtils.isAncestor(path, this.path);\n        case DIRECT_CHILDREN:\n            return PathUtils.getParentPath(path).equals(this.path);\n        case ALL_CHILDREN:\n            return PathUtils.isAncestor(this.path, path);\n        default:\n            throw new IllegalArgumentException(\"Unknown path restriction: \" + pathRestriction);\n        }\n    }","id":94847,"modified_method":"public boolean testPath(String path) {\n        if (isAlwaysFalse()) {\n            return false;\n        }\n        switch (pathRestriction) {\n        case NO_RESTRICTION:\n            return true;\n        case EXACT:\n            return path.matches(this.path);\n        case PARENT:\n            return PathUtils.getParentPath(this.path).equals(path);\n        case DIRECT_CHILDREN:\n            return PathUtils.getParentPath(path).equals(this.path);\n        case ALL_CHILDREN:\n            return PathUtils.isAncestor(this.path, path);\n        default:\n            throw new IllegalArgumentException(\"Unknown path restriction: \" + pathRestriction);\n        }\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public long getEstimatedNodeCount(String path) {\n        // check if there is a property in the node itself\n        // (for property index nodes)\n        NodeState s = child(store.getRoot(),\n                PathUtils.elements(path));\n        if (s == null) {\n            // node not found\n            return -1;\n        }\n        PropertyState p = s.getProperty(NodeCounterEditor.COUNT_PROPERTY_NAME);\n        if (p != null) {\n            return p.getValue(Type.LONG);\n        }\n        \n        // check in the counter index (if it exists)\n        s = child(store.getRoot(),\n                IndexConstants.INDEX_DEFINITIONS_NAME,\n                \"counter\",\n                NodeCounterEditor.DATA_NODE_NAME);\n        if (s == null) {\n            // no index\n            return -1;\n        }\n        s = child(s, PathUtils.elements(path));\n        if (s == null) {\n            // we have an index, but no data\n            return 0;\n        }\n        p = s.getProperty(NodeCounterEditor.COUNT_PROPERTY_NAME);\n        if (p == null) {\n            // we have an index, but no data\n            return 0;\n        }\n        return p.getValue(Type.LONG);\n    }","id":94848,"modified_method":"@Override\n    public long getEstimatedNodeCount(String path) {\n        return getEstimatedNodeCount(store.getRoot(), path, false);\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public String getPlan(Filter filter, NodeState root) {\n        return filter.toString();\n    }","id":94849,"modified_method":"@Override\n    public String getPlan(Filter filter, NodeState root) {\n        return \"nodeType \" + filter.toString();\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","id":94850,"modified_method":"@Test\n    public void testPropertyLookup() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        index.setProperty(\"entryCount\", -1);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\").setProperty(\"foo\", \"abc\");\n        builder.child(\"b\").setProperty(\"foo\", Arrays.asList(\"abc\", \"def\"),\n                Type.STRINGS);\n        // plus lots of dummy content to highlight the benefit of indexing\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"xyz\");\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        assertEquals(ImmutableSet.of(\"a\", \"b\"), find(lookup, \"foo\", \"abc\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"def\", f));\n        assertEquals(ImmutableSet.of(), find(lookup, \"foo\", \"ghi\", f));\n        assertEquals(MANY, find(lookup, \"foo\", \"xyz\", f).size());\n        assertEquals(MANY + 2, find(lookup, \"foo\", null, f).size());\n\n        double cost;\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"xyz\"));\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void costMaxEstimation() throws Exception {\n        NodeState root = EmptyNodeState.EMPTY_NODE;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // 100 nodes in the index:\n        // with a single level /content cost is 121\n        // adding a second level /content/data cost is133\n\n        // 101 nodes in the index:\n        // with a single level /content cost is 121\n        // adding a second level /content/data cost is 133\n\n        // 100 nodes, 12 levels deep, cost is 345\n        // 101 nodes, 12 levels deep, cost is 345\n\n        // threshold for estimation (PropertyIndexLookup.MAX_COST) is at 100\n        int nodes = 101;\n        int levels = 12;\n\n        NodeBuilder data = builder;\n        for (int i = 0; i < levels; i++) {\n            data = data.child(\"l\" + i);\n        }\n        for (int i = 0; i < nodes; i++) {\n            NodeBuilder c = data.child(\"c_\" + i);\n            c.setProperty(\"foo\", \"azerty\");\n        }\n        NodeState after = builder.getNodeState();\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost = lookup.getCost(f, \"foo\",\n                PropertyValues.newString(\"azerty\"));\n        double traversal = new TraversingIndex().getCost(f, indexed);\n\n        assertTrue(\"Estimated cost for \" + nodes\n                + \" nodes should not be higher than traversal (\" + cost + \")\",\n                cost < traversal);\n    }","id":94851,"modified_method":"@Test\n    public void costMaxEstimation() throws Exception {\n        NodeState root = EmptyNodeState.EMPTY_NODE;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // 100 nodes in the index:\n        // with a single level /content cost is 121\n        // adding a second level /content/data cost is133\n\n        // 101 nodes in the index:\n        // with a single level /content cost is 121\n        // adding a second level /content/data cost is 133\n\n        // 100 nodes, 12 levels deep, cost is 345\n        // 101 nodes, 12 levels deep, cost is 345\n\n        // threshold for estimation (PropertyIndexLookup.MAX_COST) is at 100\n        int nodes = 101;\n        int levels = 12;\n\n        NodeBuilder data = builder;\n        for (int i = 0; i < levels; i++) {\n            data = data.child(\"l\" + i);\n        }\n        for (int i = 0; i < nodes; i++) {\n            NodeBuilder c = data.child(\"c_\" + i);\n            c.setProperty(\"foo\", \"azerty\");\n        }\n        // add more nodes (to make traversal more expensive)\n        for (int i = 0; i < 10000; i++) {\n            data.child(\"cx_\" + i);\n        }\n        NodeState after = builder.getNodeState();\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost = lookup.getCost(f, \"foo\",\n                PropertyValues.newString(\"azerty\"));\n        double traversal = new TraversingIndex().getCost(f, indexed);\n\n        assertTrue(\"Estimated cost for \" + nodes\n                + \" nodes should not be higher than traversal (\" + cost + \" < \" + traversal + \")\",\n                cost < traversal);\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * This is essentially same test as {@link #costEstimation()} with one difference that it uses\n     * path constraint in query and creates similar trees under 2 branches {@code path1} and {@code path2}.\n     * The cost estimation is then verified to be same as that in {@code costEstimation} for query under {@code path1}\n     * @throws Exception\n     */\n    @Test\n    public void pathBasedCostEstimation() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        NodeBuilder path1 = builder.child(\"path1\");\n        NodeBuilder path2 = builder.child(\"path2\");\n        // Add some content and process it through the property index hook\n        for (int i = 0; i < MANY; i++) {\n            path1.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n            path2.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n        f.restrictPath(\"/path1\", Filter.PathRestriction.ALL_CHILDREN);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost;\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"x1\"));\n        assertTrue(\"cost: \" + cost, cost >= 6.5 && cost <= 7.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\")));\n        assertTrue(\"cost: \" + cost, cost >= 11.5 && cost <= 12.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")));\n        assertTrue(\"cost: \" + cost, cost >= 26.5 && cost <= 27.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\", \"x8\", \"x9\", \"x0\")));\n        assertTrue(\"cost: \" + cost, cost >= 51.5 && cost <= 52.5);\n\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","id":94852,"modified_method":"/**\n     * This is essentially same test as {@link #costEstimation()} with one difference that it uses\n     * path constraint in query and creates similar trees under 2 branches {@code path1} and {@code path2}.\n     * The cost estimation is then verified to be same as that in {@code costEstimation} for query under {@code path1}\n     * @throws Exception\n     */\n    @Test\n    public void pathBasedCostEstimation() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        // disable the estimation\n        index.setProperty(\"entryCount\", -1);\n        NodeState before = builder.getNodeState();\n\n        NodeBuilder path1 = builder.child(\"path1\");\n        NodeBuilder path2 = builder.child(\"path2\");\n        // Add some content and process it through the property index hook\n        for (int i = 0; i < MANY; i++) {\n            path1.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n            path2.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n        f.restrictPath(\"/path1\", Filter.PathRestriction.ALL_CHILDREN);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost;\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"x1\"));\n        assertTrue(\"cost: \" + cost, cost >= 6.5 && cost <= 7.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\")));\n        assertTrue(\"cost: \" + cost, cost >= 11.5 && cost <= 12.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")));\n        assertTrue(\"cost: \" + cost, cost >= 26.5 && cost <= 27.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\", \"x8\", \"x9\", \"x0\")));\n        assertTrue(\"cost: \" + cost, cost >= 51.5 && cost <= 52.5);\n\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void costEstimation() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost;\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"x1\"));\n        assertTrue(\"cost: \" + cost, cost >= 6.5 && cost <= 7.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\")));\n        assertTrue(\"cost: \" + cost, cost >= 11.5 && cost <= 12.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")));\n        assertTrue(\"cost: \" + cost, cost >= 26.5 && cost <= 27.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\", \"x8\", \"x9\", \"x0\")));\n        assertTrue(\"cost: \" + cost, cost >= 51.5 && cost <= 52.5);\n\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","id":94853,"modified_method":"@Test\n    public void costEstimation() throws Exception {\n        NodeState root = INITIAL_CONTENT;\n\n        // Add index definition\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), \"foo\",\n                true, false, ImmutableSet.of(\"foo\"), null);\n        // disable the estimation\n        index.setProperty(\"entryCount\", -1);        \n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        for (int i = 0; i < MANY; i++) {\n            builder.child(\"n\" + i).setProperty(\"foo\", \"x\" + i % 20);\n        }\n        NodeState after = builder.getNodeState();\n\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(indexed, NT_BASE);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        double cost;\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\"x1\"));\n        assertTrue(\"cost: \" + cost, cost >= 6.5 && cost <= 7.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\")));\n        assertTrue(\"cost: \" + cost, cost >= 11.5 && cost <= 12.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\")));\n        assertTrue(\"cost: \" + cost, cost >= 26.5 && cost <= 27.5);\n\n        cost = lookup.getCost(f, \"foo\", PropertyValues.newString(\n                Arrays.asList(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\", \"x8\", \"x9\", \"x0\")));\n        assertTrue(\"cost: \" + cost, cost >= 51.5 && cost <= 52.5);\n\n        cost = lookup.getCost(f, \"foo\", null);\n        assertTrue(\"cost: \" + cost, cost >= MANY);\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public double getCost(Filter filter, NodeState rootState) {\n        if (filter.getFullTextConstraint() != null) {\n            // not an appropriate index for full-text search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            // not an appropriate index for native search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.isAlwaysFalse()) {\n            return 0;\n        }\n        \n        // worst case 100 million nodes\n        double nodeCount = 100000000;\n        // worst case 100 thousand children\n        double nodeCountChildren = 100000;\n        \n        // if the path is from a join, then the depth is not correct\n        // (the path might be the root node), but that's OK\n        String path = filter.getPath();\n        PathRestriction restriction = filter.getPathRestriction();\n        switch (restriction) {\n        case NO_RESTRICTION:\n            break;\n        case EXACT:\n            nodeCount = 1;\n            break;\n        case ALL_CHILDREN:\n            if (!PathUtils.denotesRoot(path)) {\n                int depth = PathUtils.getDepth(path);\n                for (int i = depth; i > 0; i--) {\n                    // estimate 10 child nodes per node,\n                    // but higher than the cost for DIRECT_CHILDREN\n                    // (about 100'000)\n                    // in any case, the higher the depth of the path,\n                    // the lower the cost\n                    nodeCount = Math.max(nodeCountChildren * 2 - depth, nodeCount / 10);\n                }\n            }\n            break;\n        case PARENT:\n            if (PathUtils.denotesRoot(path)) {\n                nodeCount = 1;\n            } else {\n                nodeCount = PathUtils.getDepth(path);\n            }\n            break;\n        case DIRECT_CHILDREN:\n            // estimate 100'000 children for now, \n            // to ensure an index is used if there is one\n            // TODO we need to have better estimates, see also OAK-1898\n             nodeCount = nodeCountChildren;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown restriction: \" + restriction);\n        }        \n        return nodeCount;\n    }","id":94854,"modified_method":"@Override\n    public double getCost(Filter filter, NodeState rootState) {\n        if (filter.getFullTextConstraint() != null) {\n            // not an appropriate index for full-text search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            // not an appropriate index for native search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.isAlwaysFalse()) {\n            return 0;\n        }\n        // if the path is from a join, then the depth is not correct\n        // (the path might be the root node), but that's OK\n        String path = filter.getPath();\n        PathRestriction restriction = filter.getPathRestriction();\n        // the simple cases\n        switch (restriction) {\n        case EXACT:\n            return 1;\n        case PARENT:\n            if (PathUtils.denotesRoot(path)) {\n                return 0;\n            }\n            return 1;\n        case NO_RESTRICTION:\n        case ALL_CHILDREN:\n        case DIRECT_CHILDREN:\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown restriction: \" + restriction);\n        }\n        \n        if (!path.startsWith(JoinConditionImpl.SPECIAL_PATH_PREFIX)) {\n            String testPath = path;\n            if (restriction == PathRestriction.NO_RESTRICTION) {\n                testPath = \"/\";\n            }\n            long count = NodeCounter.getEstimatedNodeCount(rootState, testPath, true);\n            if (count >= 0) {\n                if (restriction == PathRestriction.DIRECT_CHILDREN) {\n                    count = count / 2;\n                }\n                return count;\n            }\n        }\n        \n        // worst case 100 million descendant nodes\n        double nodeCount = 100000000;\n        // worst case 100 thousand children\n        double nodeCountChildren = 100000;\n        switch (restriction) {\n        case NO_RESTRICTION:\n            break;\n        case ALL_CHILDREN:\n            if (!PathUtils.denotesRoot(path)) {\n                int depth = PathUtils.getDepth(path);\n                for (int i = depth; i > 0; i--) {\n                    // estimate 10 child nodes per node,\n                    // but higher than the cost for DIRECT_CHILDREN\n                    // (about 100'000)\n                    // in any case, the higher the depth of the path,\n                    // the lower the cost\n                    nodeCount = Math.max(nodeCountChildren * 2 - depth, nodeCount / 10);\n                }\n            }\n            break;\n        case DIRECT_CHILDREN:\n            // estimate 100'000 children for now, \n            // to ensure an index is used if there is one\n            // TODO we need to have better estimates, see also OAK-1898\n             nodeCount = nodeCountChildren;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown restriction: \" + restriction);\n        }        \n        return nodeCount;\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public long count(NodeState indexMeta, Set<String> values, int max) {\n        NodeState index = indexMeta.getChildNode(INDEX_CONTENT_NODE_NAME);\n        long count = 0;\n        if (values == null) {\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);\n            if (ec != null) {\n                return ec.getValue(Type.LONG);\n            }\n            count = 1 + index.getChildNodeCount(max);\n            // \"is not null\" queries typically read more data\n            count *= 10;\n        } else if (values.size() == 1) {\n            NodeState k = index.getChildNode(values.iterator().next());\n            if (k.exists()) {\n                count = k.getProperty(\"entry\").count();\n            } else {\n                count = 0;\n            }\n        } else {\n            count = values.size();\n        }\n        return count;\n    }","id":94855,"modified_method":"@Override\n    public long count(NodeState indexMeta, Set<String> values, int max) {\n        NodeState index = indexMeta.getChildNode(INDEX_CONTENT_NODE_NAME);\n        long count = 0;\n        if (values == null) {\n            PropertyState ec = indexMeta.getProperty(ENTRY_COUNT_PROPERTY_NAME);\n            if (ec != null) {\n                count = ec.getValue(Type.LONG);\n                if (count >= 0) {\n                    return count;\n                }\n            }\n            if (count == 0) {\n                PropertyState ap = index.getProperty(ApproximateCounter.COUNT_PROPERTY_NAME);\n                if (ap != null) {\n                    return ap.getValue(Type.LONG);\n                }\n            }\n            count = 1 + index.getChildNodeCount(max);\n            // \"is not null\" queries typically read more data\n            count *= 10;\n        } else if (values.size() == 1) {\n            NodeState k = index.getChildNode(values.iterator().next());\n            if (k.exists()) {\n                count = k.getProperty(\"entry\").count();\n            } else {\n                count = 0;\n            }\n        } else {\n            count = values.size();\n        }\n        return count;\n    }","commit_id":"49bf99679656e1656dc63b188b264f7284b98398","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"public static String getFilePathName(String first, String... more) {\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tPath filePath = fileSystem.getPath(first, more);\n\n\t\treturn filePath.toString();\n\t}","id":94856,"modified_method":"public static String getFilePathName(String first, String... more) {\n\t\tPath filePath = getFilePath(first, more);\n\n\t\treturn filePath.toString();\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRun() throws Exception {\n\t\tsetResponse(\"dependencies/get_all_sync_dl_objects.json\");\n\n\t\tMap<String, Object> parameters = new HashMap<String, Object>();\n\n\t\tparameters.put(\"companyId\", _syncSite.getCompanyId());\n\t\tparameters.put(\"lastAccessTime\", 0);\n\t\tparameters.put(\"repositoryId\", _syncSite.getGroupId());\n\t\tparameters.put(\"syncSite\", _syncSite);\n\n\t\tGetSyncDLObjectUpdateEvent getSyncDLObjectUpdateEvent =\n\t\t\tnew GetSyncDLObjectUpdateEvent(\n\t\t\t\tsyncAccount.getSyncAccountId(), parameters);\n\n\t\tgetSyncDLObjectUpdateEvent.run();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","id":94857,"modified_method":"@Test\n\tpublic void testRun() throws Exception {\n\t\tsetResponse(\"dependencies/get_all_sync_dl_objects.json\");\n\n\t\tMap<String, Object> parameters = new HashMap<String, Object>();\n\n\t\tparameters.put(\"companyId\", _syncSite.getCompanyId());\n\t\tparameters.put(\"lastAccessTime\", 0);\n\t\tparameters.put(\"repositoryId\", _syncSite.getGroupId());\n\t\tparameters.put(\"syncSite\", _syncSite);\n\n\t\tGetSyncDLObjectUpdateEvent getSyncDLObjectUpdateEvent =\n\t\t\tnew GetSyncDLObjectUpdateEvent(\n\t\t\t\tsyncAccount.getSyncAccountId(), parameters);\n\n\t\tgetSyncDLObjectUpdateEvent.run();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunRestoreFileFromTrash() throws Exception {\n\t\tsetResponse(\n\t\t\t\"dependencies/get_sync_dl_object_update_event_restore.json\");\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","id":94858,"modified_method":"@Test\n\tpublic void testRunRestoreFileFromTrash() throws Exception {\n\t\tsetResponse(\n\t\t\t\"dependencies/get_sync_dl_object_update_event_restore.json\");\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunAddFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_add.json\");\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","id":94859,"modified_method":"@Test\n\tpublic void testRunAddFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_add.json\");\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tAssert.assertTrue(Files.exists(filePath));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunMoveFileToTrash() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_trash.json\");\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tFiles.createFile(filePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tfilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(2, _syncFiles.size());\n\n\t\tAssert.assertFalse(Files.exists(filePath));\n\t}","id":94860,"modified_method":"@Test\n\tpublic void testRunMoveFileToTrash() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_trash.json\");\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tFiles.createFile(filePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tfilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(2, _syncFiles.size());\n\n\t\tAssert.assertFalse(Files.exists(filePath));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunUpdateFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_update.json\");\n\n\t\tPath sourceFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tFiles.createFile(sourceFilePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tsourceFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test2.txt\"));\n\n\t\tAssert.assertTrue(Files.exists(targetFilePath));\n\n\t\tSyncFile syncFile = SyncFileService.fetchSyncFile(\n\t\t\ttargetFilePath.toString());\n\n\t\tAssert.assertEquals(\"Updated Description\", syncFile.getDescription());\n\t}","id":94861,"modified_method":"@Test\n\tpublic void testRunUpdateFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_update.json\");\n\n\t\tPath sourceFilePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tFiles.createFile(sourceFilePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tsourceFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\n\t\tPath targetFilePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test2.txt\");\n\n\t\tAssert.assertTrue(Files.exists(targetFilePath));\n\n\t\tSyncFile syncFile = SyncFileService.fetchSyncFile(\n\t\t\ttargetFilePath.toString());\n\n\t\tAssert.assertEquals(\"Updated Description\", syncFile.getDescription());\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunMoveFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_move.json\");\n\n\t\tPath sourceFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\t_syncSite.getFilePathName(), \"Document_1.txt\"));\n\n\t\tFiles.createFile(sourceFilePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tsourceFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\tPath folderFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\t_syncSite.getFilePathName() + \"test-folder\"));\n\n\t\tFiles.createDirectory(folderFilePath);\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tfolderFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27488);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(4, _syncFiles.size());\n\n\t\tPath targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(folderFilePath.toString(), \"test.txt\"));\n\n\t\tAssert.assertTrue(Files.exists(targetFilePath));\n\t}","id":94862,"modified_method":"@Test\n\tpublic void testRunMoveFile() throws Exception {\n\t\tsetResponse(\"dependencies/get_sync_dl_object_update_event_move.json\");\n\n\t\tPath sourceFilePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"Document_1.txt\");\n\n\t\tFiles.createFile(sourceFilePath);\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tsourceFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27382);\n\n\t\tPath folderFilePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test-folder\");\n\n\t\tFiles.createDirectory(folderFilePath);\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tfolderFilePath.toString(), 0, _syncSite.getGroupId(),\n\t\t\tsyncAccount.getSyncAccountId(), 27488);\n\n\t\trun();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(4, _syncFiles.size());\n\n\t\tPath targetFilePath = FileUtil.getFilePath(\n\t\t\tfolderFilePath.toString(), \"test.txt\");\n\n\t\tAssert.assertTrue(Files.exists(targetFilePath));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public static Path getChecksumsFilePath(SyncFile syncFile) {\n\t\treturn Paths.get(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\tPropsValues.SYNC_CONFIGURATION_DIRECTORY, \"files\",\n\t\t\t\tString.valueOf(syncFile.getSyncFileId())));\n\t}","id":94863,"modified_method":"public static Path getChecksumsFilePath(SyncFile syncFile) {\n\t\treturn FileUtil.getFilePath(\n\t\t\tPropsValues.SYNC_CONFIGURATION_DIRECTORY, \"files\",\n\t\t\tString.valueOf(syncFile.getSyncFileId()));\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addFile(Path testFilePath, JsonNode stepJsonNode)\n\t\tthrows Exception {\n\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString dependency = getString(stepJsonNode, \"dependency\");\n\n\t\tPath dependencyFilePath = getDependencyFilePath(\n\t\t\ttestFilePath, dependency);\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tdependency = getString(\n\t\t\tstepJsonNode, \"target\",\n\t\t\tdependency.replace(\"common\" + fileSystem.getSeparator(), \"\"));\n\n\t\tPath targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), dependency));\n\n\t\tFiles.copy(dependencyFilePath, targetFilePath);\n\t}","id":94864,"modified_method":"protected void addFile(Path testFilePath, JsonNode stepJsonNode)\n\t\tthrows Exception {\n\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString dependency = getString(stepJsonNode, \"dependency\");\n\n\t\tPath dependencyFilePath = getDependencyFilePath(\n\t\t\ttestFilePath, dependency);\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tdependency = getString(\n\t\t\tstepJsonNode, \"target\",\n\t\t\tdependency.replace(\"common\" + fileSystem.getSeparator(), \"\"));\n\n\t\tPath targetFilePath = FileUtil.getFilePath(\n\t\t\tsyncSite.getFilePathName(), dependency);\n\n\t\tFiles.copy(dependencyFilePath, targetFilePath);\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void addFolder(Path testFilePath, JsonNode stepJsonNode)\n\t\tthrows Exception {\n\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString dependency = getString(stepJsonNode, \"dependency\");\n\n\t\tfinal Path dependencyFilePath = getDependencyFilePath(\n\t\t\ttestFilePath, dependency);\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tfinal Path targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\tsyncSite.getFilePathName(),\n\t\t\t\tdependency.replace(\"common\" + fileSystem.getSeparator(), \"\")));\n\n\t\tFiles.walkFileTree(\n\t\t\tdependencyFilePath,\n\t\t\tnew SimpleFileVisitor<Path>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult preVisitDirectory(\n\t\t\t\t\t\tPath filePath, BasicFileAttributes basicFileAttributes)\n\t\t\t\t\tthrows IOException {\n\n\t\t\t\t\tPath relativeFilePath = dependencyFilePath.relativize(\n\t\t\t\t\t\tfilePath);\n\n\t\t\t\t\tFiles.createDirectories(\n\t\t\t\t\t\ttargetFilePath.resolve(relativeFilePath));\n\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult visitFile(\n\t\t\t\t\t\tPath filePath, BasicFileAttributes basicFileAttributes)\n\t\t\t\t\tthrows IOException {\n\n\t\t\t\t\tPath relativeFilePath = dependencyFilePath.relativize(\n\t\t\t\t\t\tfilePath);\n\n\t\t\t\t\tFiles.copy(\n\t\t\t\t\t\tfilePath, targetFilePath.resolve(relativeFilePath));\n\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\n\t\t\t});\n\t}","id":94865,"modified_method":"protected void addFolder(Path testFilePath, JsonNode stepJsonNode)\n\t\tthrows Exception {\n\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString dependency = getString(stepJsonNode, \"dependency\");\n\n\t\tfinal Path dependencyFilePath = getDependencyFilePath(\n\t\t\ttestFilePath, dependency);\n\n\t\tFileSystem fileSystem = FileSystems.getDefault();\n\n\t\tfinal Path targetFilePath = FileUtil.getFilePath(\n\t\t\tsyncSite.getFilePathName(),\n\t\t\tdependency.replace(\"common\" + fileSystem.getSeparator(), \"\"));\n\n\t\tFiles.walkFileTree(\n\t\t\tdependencyFilePath,\n\t\t\tnew SimpleFileVisitor<Path>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult preVisitDirectory(\n\t\t\t\t\t\tPath filePath, BasicFileAttributes basicFileAttributes)\n\t\t\t\t\tthrows IOException {\n\n\t\t\t\t\tPath relativeFilePath = dependencyFilePath.relativize(\n\t\t\t\t\t\tfilePath);\n\n\t\t\t\t\tFiles.createDirectories(\n\t\t\t\t\t\ttargetFilePath.resolve(relativeFilePath));\n\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult visitFile(\n\t\t\t\t\t\tPath filePath, BasicFileAttributes basicFileAttributes)\n\t\t\t\t\tthrows IOException {\n\n\t\t\t\t\tPath relativeFilePath = dependencyFilePath.relativize(\n\t\t\t\t\t\tfilePath);\n\n\t\t\t\t\tFiles.copy(\n\t\t\t\t\t\tfilePath, targetFilePath.resolve(relativeFilePath));\n\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\n\t\t\t});\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void deleteFile(JsonNode stepJsonNode) throws Exception {\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString source = getString(stepJsonNode, \"source\");\n\n\t\tPath targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), source));\n\n\t\tFiles.deleteIfExists(targetFilePath);\n\t}","id":94866,"modified_method":"protected void deleteFile(JsonNode stepJsonNode) throws Exception {\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString source = getString(stepJsonNode, \"source\");\n\n\t\tPath targetFilePath = FileUtil.getFilePath(\n\t\t\tsyncSite.getFilePathName(), source);\n\n\t\tFiles.deleteIfExists(targetFilePath);\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void moveFile(JsonNode stepJsonNode) throws Exception {\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString source = getString(stepJsonNode, \"source\");\n\t\tString target = getString(stepJsonNode, \"target\");\n\n\t\tPath sourceFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), source));\n\t\tPath targetFilePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), target));\n\n\t\tFiles.move(sourceFilePath, targetFilePath);\n\t}","id":94867,"modified_method":"protected void moveFile(JsonNode stepJsonNode) throws Exception {\n\t\tSyncSite syncSite = getSyncSite(stepJsonNode);\n\n\t\tString source = getString(stepJsonNode, \"source\");\n\t\tString target = getString(stepJsonNode, \"target\");\n\n\t\tPath sourceFilePath = FileUtil.getFilePath(\n\t\t\tsyncSite.getFilePathName(), source);\n\t\tPath targetFilePath = FileUtil.getFilePath(\n\t\t\tsyncSite.getFilePathName(), target);\n\n\t\tFiles.move(sourceFilePath, targetFilePath);\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected Path getTargetFilePath(JsonNode jsonNode) {\n\t\tSyncSite syncSite = getSyncSite(jsonNode);\n\n\t\tString source = getString(jsonNode, \"source\");\n\n\t\treturn Paths.get(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), source));\n\t}","id":94868,"modified_method":"protected Path getTargetFilePath(JsonNode jsonNode) {\n\t\tSyncSite syncSite = getSyncSite(jsonNode);\n\n\t\tString source = getString(jsonNode, \"source\");\n\n\t\treturn FileUtil.getFilePath(syncSite.getFilePathName(), source);\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public static void upgrade() throws Exception {\n\t\tint buildNumber = SyncPropService.getInteger(\"buildNumber\");\n\n\t\tif (buildNumber == 0) {\n\t\t\tcreateTables();\n\n\t\t\tPath configurationFilePath = Paths.get(\n\t\t\t\tFileUtil.getFilePathName(\n\t\t\t\t\tPropsValues.SYNC_CONFIGURATION_DIRECTORY));\n\n\t\t\tFiles.createDirectories(configurationFilePath.resolve(\"files\"));\n\n\t\t\tPath loggerConfigurationFilePath = configurationFilePath.resolve(\n\t\t\t\tPropsValues.SYNC_LOGGER_CONFIGURATION_FILE);\n\n\t\t\tif (!Files.exists(loggerConfigurationFilePath)) {\n\t\t\t\tClassLoader classLoader = LoggerUtil.class.getClassLoader();\n\n\t\t\t\tInputStream inputStream = classLoader.getResourceAsStream(\n\t\t\t\t\tPropsValues.SYNC_LOGGER_CONFIGURATION_FILE);\n\n\t\t\t\tFiles.copy(inputStream, loggerConfigurationFilePath);\n\t\t\t}\n\t\t}\n\t\telse if (buildNumber == ReleaseInfo.getBuildNumber()) {\n\t\t\treturn;\n\t\t}\n\n\t\tSyncPropService.updateSyncProp(\n\t\t\t\"buildNumber\", ReleaseInfo.getBuildNumber());\n\t}","id":94869,"modified_method":"public static void upgrade() throws Exception {\n\t\tint buildNumber = SyncPropService.getInteger(\"buildNumber\");\n\n\t\tif (buildNumber == 0) {\n\t\t\tcreateTables();\n\n\t\t\tPath configurationFilePath = Paths.get(\n\t\t\t\tPropsValues.SYNC_CONFIGURATION_DIRECTORY);\n\n\t\t\tFiles.createDirectories(configurationFilePath.resolve(\"files\"));\n\n\t\t\tPath loggerConfigurationFilePath = configurationFilePath.resolve(\n\t\t\t\tPropsValues.SYNC_LOGGER_CONFIGURATION_FILE);\n\n\t\t\tif (!Files.exists(loggerConfigurationFilePath)) {\n\t\t\t\tClassLoader classLoader = LoggerUtil.class.getClassLoader();\n\n\t\t\t\tInputStream inputStream = classLoader.getResourceAsStream(\n\t\t\t\t\tPropsValues.SYNC_LOGGER_CONFIGURATION_FILE);\n\n\t\t\t\tFiles.copy(inputStream, loggerConfigurationFilePath);\n\t\t\t}\n\t\t}\n\t\telse if (buildNumber == ReleaseInfo.getBuildNumber()) {\n\t\t\treturn;\n\t\t}\n\n\t\tSyncPropService.updateSyncProp(\n\t\t\t\"buildNumber\", ReleaseInfo.getBuildNumber());\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunAddFile() throws Exception {\n\t\tsetResponse(\"dependencies/watcher_test_add_file.json\");\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tFiles.createFile(filePath);\n\n\t\tsleep();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\t}","id":94870,"modified_method":"@Test\n\tpublic void testRunAddFile() throws Exception {\n\t\tsetResponse(\"dependencies/watcher_test_add_file.json\");\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tFiles.createFile(filePath);\n\n\t\tsleep();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(3, _syncFiles.size());\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Test\n\tpublic void testRunAddFileToInactiveSite() throws Exception {\n\t\tsetResponse(\"dependencies/watcher_test_add_file.json\");\n\n\t\t_syncSite.setActive(false);\n\n\t\tSyncSiteService.update(_syncSite);\n\n\t\tPath filePath = Paths.get(\n\t\t\tFileUtil.getFilePathName(_syncSite.getFilePathName(), \"test.txt\"));\n\n\t\tFiles.createFile(filePath);\n\n\t\tsleep();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(2, _syncFiles.size());\n\t}","id":94871,"modified_method":"@Test\n\tpublic void testRunAddFileToInactiveSite() throws Exception {\n\t\tsetResponse(\"dependencies/watcher_test_add_file.json\");\n\n\t\t_syncSite.setActive(false);\n\n\t\tSyncSiteService.update(_syncSite);\n\n\t\tPath filePath = FileUtil.getFilePath(\n\t\t\t_syncSite.getFilePathName(), \"test.txt\");\n\n\t\tFiles.createFile(filePath);\n\n\t\tsleep();\n\n\t\t_syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(2, _syncFiles.size());\n\t}","commit_id":"6d5f7a86c49333b2234859f99425e1aa25c71fbe","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public static void importArticle(\n\t\t\tPortletDataContext context, Map<String, String> structureIds,\n\t\t\tMap<String, String> templateIds, Map<String, String> articleIds,\n\t\t\tElement articleEl)\n\t\tthrows Exception {\n\n\t\tString path = articleEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJournalArticle article = (JournalArticle)context.getZipEntryAsObject(\n\t\t\tpath);\n\n\t\tlong userId = context.getUserId(article.getUserUuid());\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tlong groupId = context.getGroupId();\n\n\t\tString articleId = article.getArticleId();\n\t\tboolean autoArticleId = false;\n\n\t\tif ((Validator.isNumber(articleId)) ||\n\t\t\t(JournalArticleUtil.fetchByG_A_V(\n\t\t\t\tgroupId, articleId,\n\t\t\t\t\tJournalArticleConstants.DEFAULT_VERSION) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tcontent = StringUtil.replace(\n\t\t\tcontent, \"@data_handler_group_id@\", String.valueOf(groupId));\n\n\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\tcontent = StringUtil.replace(\n\t\t\tcontent, \"@data_handler_group_friendly_url@\",\n\t\t\tgroup.getFriendlyURL());\n\n\t\tarticle.setContent(content);\n\n\t\tString parentStructureId = MapUtil.getString(\n\t\t\tstructureIds, article.getStructureId(), article.getStructureId());\n\t\tString parentTemplateId = MapUtil.getString(\n\t\t\ttemplateIds, article.getTemplateId(), article.getTemplateId());\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tif (Validator.isNotNull(article.getStructureId())) {\n\t\t\tJournalStructure structure = JournalStructureUtil.fetchByG_S(\n\t\t\t\tcontext.getGroupId(), article.getStructureId());\n\n\t\t\tif (structure == null) {\n\t\t\t\tString newStructureId =\n\t\t\t\t\tstructureIds.get(article.getStructureId());\n\n\t\t\t\tif (Validator.isNotNull(newStructureId)) {\n\t\t\t\t\tstructure = JournalStructureUtil.fetchByG_S(\n\t\t\t\t\t\tcontext.getGroupId(), String.valueOf(newStructureId));\n\t\t\t\t}\n\n                if (structure == null) {\n\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\t\"Structure \" + article.getStructureId() + \" is \" +\n\t\t\t\t\t\t\t\t\"missing for article \" +\n\t\t\t\t\t\t\t\tarticle.getArticleId() +\n\t\t\t\t\t\t\t\t\", skipping this article.\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n                }\n\t\t\t}\n\t\t}\n\n\t\tif (Validator.isNotNull(article.getTemplateId())) {\n\t\t\tJournalTemplate template = JournalTemplateUtil.fetchByG_T(\n\t\t\t\tcontext.getGroupId(), article.getTemplateId());\n\n\t\t\tif (template == null) {\n\t\t\t\tString newTemplateId =\n\t\t\t\t\ttemplateIds.get(article.getTemplateId());\n\n\t\t\t\tif (Validator.isNotNull(newTemplateId)) {\n\t\t\t\t\ttemplate = JournalTemplateUtil.fetchByG_T(\n\t\t\t\t\t\tcontext.getGroupId(), newTemplateId);\n\t\t\t\t}\n\n\t\t\t\tif (template == null) {\n\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\t\"Template \" + article.getTemplateId() +\n\t\t\t\t\t\t\t\t\" is missing \" + \"for article \" +\n\t\t\t\t\t\t\t\tarticle.getArticleId() +\n\t\t\t\t\t\t\t\t\", skipping this article.\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\tString smallImagePath = articleEl.attributeValue(\"small-image-path\");\n\n\t\tif (article.isSmallImage() && Validator.isNotNull(smallImagePath)) {\n\t\t\tbyte[] bytes = context.getZipEntryAsByteArray(smallImagePath);\n\n\t\t\tsmallFile = File.createTempFile(\n\t\t\t\tString.valueOf(article.getSmallImageId()),\n\t\t\t\tStringPool.PERIOD + article.getSmallImageType());\n\n\t\t\tFileUtil.write(smallFile, bytes);\n\t\t}\n\n\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"images\")) {\n\t\t\tString imagePath = articleEl.attributeValue(\"image-path\");\n\n\t\t\tList<String> imageFiles = context.getZipFolderEntries(imagePath);\n\n\t\t\tfor (String imageFile : imageFiles) {\n\t\t\t\tString fileName = imageFile;\n\n\t\t\t\tif (fileName.contains(StringPool.SLASH)) {\n\t\t\t\t\tfileName = fileName.substring(\n\t\t\t\t\t\tfileName.lastIndexOf(StringPool.SLASH) + 1);\n\t\t\t\t}\n\n\t\t\t\tif (fileName.endsWith(\".xml\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint pos = fileName.lastIndexOf(StringPool.PERIOD);\n\n\t\t\t\tif (pos != -1) {\n\t\t\t\t\tfileName = fileName.substring(0, pos);\n\t\t\t\t}\n\n\t\t\t\timages.put(fileName, context.getZipEntryAsByteArray(imageFile));\n\t\t\t}\n\t\t}\n\n\t\tString articleURL = null;\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey());\n\t\t}\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(context, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tcontext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tboolean addCommunityPermissions =\n\t\t\tcreationStrategy.addCommunityPermissions(context, article);\n\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\tcontext, article);\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(addCommunityPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(article.getCreateDate());\n\t\tserviceContext.setModifiedDate(article.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(groupId);\n\n\t\tif (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\tJournalArticle importedArticle = null;\n\n\t\tif (context.getDataStrategy().equals(\n\t\t\t\tPortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {\n\n\t\t\tJournalArticle existingArticle = JournalArticleUtil.fetchByUUID_G(\n\t\t\t\tarticle.getUuid(), groupId);\n\n\t\t\tif (existingArticle == null) {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tarticle.getUuid(), userId, groupId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitle(),\n\t\t\t\t\tarticle.getDescription(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentStructureId, parentTemplateId,\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\tuserId, existingArticle.getGroupId(),\n\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\texistingArticle.getVersion(), article.getTitle(),\n\t\t\t\t\tarticle.getDescription(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentStructureId, parentTemplateId,\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\tuserId, groupId, articleId, autoArticleId, article.getVersion(),\n\t\t\t\tarticle.getTitle(), article.getDescription(),\n\t\t\t\tarticle.getContent(), article.getType(), parentStructureId,\n\t\t\t\tparentTemplateId, displayDateMonth, displayDateDay,\n\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(), smallFile,\n\t\t\t\timages, articleURL, serviceContext);\n\t\t}\n\n\t\tcontext.importPermissions(\n\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\timportedArticle.getResourcePrimKey());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\tcontext.importComments(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\t\timportedArticle.getResourcePrimKey(), groupId);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\t\timportedArticle.getResourcePrimKey());\n\t\t}\n\n\t\tarticleIds.put(articleId, importedArticle.getArticleId());\n\n\t\tif (!articleId.equals(importedArticle.getArticleId())) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"An article with the ID \" + articleId + \" already \" +\n\t\t\t\t\t\t\"exists. The new generated ID is \" +\n\t\t\t\t\t\t\timportedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t}","id":94872,"modified_method":"public static void importArticle(\n\t\t\tPortletDataContext context, Map<String, String> structureIds,\n\t\t\tMap<String, String> templateIds, Map<String, String> articleIds,\n\t\t\tElement articleEl)\n\t\tthrows Exception {\n\n\t\tString path = articleEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tJournalArticle article = (JournalArticle)context.getZipEntryAsObject(\n\t\t\tpath);\n\n\t\tlong userId = context.getUserId(article.getUserUuid());\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tlong groupId = context.getGroupId();\n\n\t\tString articleId = article.getArticleId();\n\t\tboolean autoArticleId = false;\n\n\t\tif ((Validator.isNumber(articleId)) ||\n\t\t\t(JournalArticleUtil.fetchByG_A_V(\n\t\t\t\tgroupId, articleId,\n\t\t\t\t\tJournalArticleConstants.DEFAULT_VERSION) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tcontent = StringUtil.replace(\n\t\t\tcontent, \"@data_handler_group_id@\", String.valueOf(groupId));\n\n\t\tGroup group = GroupLocalServiceUtil.getGroup(groupId);\n\n\t\tcontent = StringUtil.replace(\n\t\t\tcontent, \"@data_handler_group_friendly_url@\",\n\t\t\tgroup.getFriendlyURL());\n\n\t\tarticle.setContent(content);\n\n\t\tString parentStructureId = MapUtil.getString(\n\t\t\tstructureIds, article.getStructureId(), article.getStructureId());\n\t\tString parentTemplateId = MapUtil.getString(\n\t\t\ttemplateIds, article.getTemplateId(), article.getTemplateId());\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tif (Validator.isNotNull(article.getStructureId())) {\n\t\t\tJournalStructure structure = JournalStructureUtil.fetchByG_S(\n\t\t\t\tcontext.getGroupId(), article.getStructureId());\n\n\t\t\tif (structure == null) {\n\t\t\t\tString newStructureId = structureIds.get(\n\t\t\t\t\tarticle.getStructureId());\n\n\t\t\t\tif (Validator.isNotNull(newStructureId)) {\n\t\t\t\t\tstructure = JournalStructureUtil.fetchByG_S(\n\t\t\t\t\t\tcontext.getGroupId(), String.valueOf(newStructureId));\n\t\t\t\t}\n\n                if (structure == null) {\n\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\tStringBunder sb = new StringBunder();\n\n\t\t\t\t\t\tsb.append(\"Structure \");\n\t\t\t\t\t\tsb.append(article.getStructureId());\n\t\t\t\t\t\tsb.append(\" is missing for article \");\n\t\t\t\t\t\tsb.append(article.getArticleId());\n\t\t\t\t\t\tsb.append(\", skipping this article.\");\n\n\t\t\t\t\t\t_log.warn(sb.toString());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n                }\n\t\t\t}\n\t\t}\n\n\t\tif (Validator.isNotNull(article.getTemplateId())) {\n\t\t\tJournalTemplate template = JournalTemplateUtil.fetchByG_T(\n\t\t\t\tcontext.getGroupId(), article.getTemplateId());\n\n\t\t\tif (template == null) {\n\t\t\t\tString newTemplateId =\n\t\t\t\t\ttemplateIds.get(article.getTemplateId());\n\n\t\t\t\tif (Validator.isNotNull(newTemplateId)) {\n\t\t\t\t\ttemplate = JournalTemplateUtil.fetchByG_T(\n\t\t\t\t\t\tcontext.getGroupId(), newTemplateId);\n\t\t\t\t}\n\n\t\t\t\tif (template == null) {\n\t\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t\tStringBunder sb = new StringBunder();\n\n\t\t\t\t\t\tsb.append(\"Template \");\n\t\t\t\t\t\tsb.append(article.getTemplateId());\n\t\t\t\t\t\tsb.append(\" is missing for article \");\n\t\t\t\t\t\tsb.append(article.getArticleId());\n\t\t\t\t\t\tsb.append(\", skipping this article.\");\n\n\t\t\t\t\t\t_log.warn(sb.toString());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\tString smallImagePath = articleEl.attributeValue(\"small-image-path\");\n\n\t\tif (article.isSmallImage() && Validator.isNotNull(smallImagePath)) {\n\t\t\tbyte[] bytes = context.getZipEntryAsByteArray(smallImagePath);\n\n\t\t\tsmallFile = File.createTempFile(\n\t\t\t\tString.valueOf(article.getSmallImageId()),\n\t\t\t\tStringPool.PERIOD + article.getSmallImageType());\n\n\t\t\tFileUtil.write(smallFile, bytes);\n\t\t}\n\n\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"images\")) {\n\t\t\tString imagePath = articleEl.attributeValue(\"image-path\");\n\n\t\t\tList<String> imageFiles = context.getZipFolderEntries(imagePath);\n\n\t\t\tfor (String imageFile : imageFiles) {\n\t\t\t\tString fileName = imageFile;\n\n\t\t\t\tif (fileName.contains(StringPool.SLASH)) {\n\t\t\t\t\tfileName = fileName.substring(\n\t\t\t\t\t\tfileName.lastIndexOf(StringPool.SLASH) + 1);\n\t\t\t\t}\n\n\t\t\t\tif (fileName.endsWith(\".xml\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint pos = fileName.lastIndexOf(StringPool.PERIOD);\n\n\t\t\t\tif (pos != -1) {\n\t\t\t\t\tfileName = fileName.substring(0, pos);\n\t\t\t\t}\n\n\t\t\t\timages.put(fileName, context.getZipEntryAsByteArray(imageFile));\n\t\t\t}\n\t\t}\n\n\t\tString articleURL = null;\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey());\n\t\t}\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(context, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tcontext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tboolean addCommunityPermissions =\n\t\t\tcreationStrategy.addCommunityPermissions(context, article);\n\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\tcontext, article);\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(addCommunityPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(article.getCreateDate());\n\t\tserviceContext.setModifiedDate(article.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(groupId);\n\n\t\tif (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\tJournalArticle importedArticle = null;\n\n\t\tif (context.getDataStrategy().equals(\n\t\t\t\tPortletDataHandlerKeys.DATA_STRATEGY_MIRROR)) {\n\n\t\t\tJournalArticle existingArticle = JournalArticleUtil.fetchByUUID_G(\n\t\t\t\tarticle.getUuid(), groupId);\n\n\t\t\tif (existingArticle == null) {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tarticle.getUuid(), userId, groupId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitle(),\n\t\t\t\t\tarticle.getDescription(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentStructureId, parentTemplateId,\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\tuserId, existingArticle.getGroupId(),\n\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\texistingArticle.getVersion(), article.getTitle(),\n\t\t\t\t\tarticle.getDescription(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentStructureId, parentTemplateId,\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\tuserId, groupId, articleId, autoArticleId, article.getVersion(),\n\t\t\t\tarticle.getTitle(), article.getDescription(),\n\t\t\t\tarticle.getContent(), article.getType(), parentStructureId,\n\t\t\t\tparentTemplateId, displayDateMonth, displayDateDay,\n\t\t\t\tdisplayDateYear, displayDateHour, displayDateMinute,\n\t\t\t\texpirationDateMonth, expirationDateDay, expirationDateYear,\n\t\t\t\texpirationDateHour, expirationDateMinute, neverExpire,\n\t\t\t\treviewDateMonth, reviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(), smallFile,\n\t\t\t\timages, articleURL, serviceContext);\n\t\t}\n\n\t\tcontext.importPermissions(\n\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\timportedArticle.getResourcePrimKey());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\tcontext.importComments(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\t\timportedArticle.getResourcePrimKey(), groupId);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tJournalArticle.class, article.getResourcePrimKey(),\n\t\t\t\timportedArticle.getResourcePrimKey());\n\t\t}\n\n\t\tarticleIds.put(articleId, importedArticle.getArticleId());\n\n\t\tif (!articleId.equals(importedArticle.getArticleId())) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"An article with the ID \" + articleId + \" already \" +\n\t\t\t\t\t\t\"exists. The new generated ID is \" +\n\t\t\t\t\t\t\timportedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t}","commit_id":"142d3723ddbc1731fd0fb34eb5768c2d37058a0a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    public void execute(final OperationContext context, final ModelNode operation) throws OperationFailedException {\n        context.acquireControllerLock();\n        // Setup\n        final PatchInfoService service = (PatchInfoService) context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();\n\n        // FIXME can we check whether the process is reload-required directly from the operation context?\n        if (service.requiresReload()) {\n            throw MESSAGES.serverRequiresReload();\n        }\n\n        final PatchInfo info = service.getPatchInfo();\n        final DirectoryStructure structure = service.getStructure();\n        final PatchingTaskRunner runner = new PatchingTaskRunner(info, structure);\n\n        final int index = operation.get(ModelDescriptionConstants.INPUT_STREAM_INDEX).asInt(0);\n        final InputStream is = context.getAttachmentStream(index);\n        try {\n            final PatchingResult result = runner.executeDirect(is);\n            if(result.hasFailures()) {\n                final ModelNode failureDescription = context.getFailureDescription();\n                failureDescription.get(\"content-items\").set(\"TODO\");\n                context.completeStep(OperationContext.ResultHandler.NOOP_RESULT_HANDLER);\n                return;\n            }\n            context.completeStep(new OperationContext.ResultHandler() {\n\n                @Override\n                public void handleResult(OperationContext.ResultAction resultAction, OperationContext context, ModelNode operation) {\n                    if(resultAction == OperationContext.ResultAction.KEEP) {\n                        result.commit();\n                        service.reloadRequired();\n                        context.reloadRequired();\n                    } else {\n                        result.rollback();\n                    }\n                }\n\n            });\n        } catch (PatchingException e) {\n            throw new OperationFailedException(e.getMessage(), e);\n        }\n    }","id":94873,"modified_method":"@Override\n    public void execute(final OperationContext context, final ModelNode operation) throws OperationFailedException {\n        context.acquireControllerLock();\n        // Setup\n        final PatchInfoService service = (PatchInfoService) context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();\n\n        // FIXME can we check whether the process is reload-required directly from the operation context?\n        if (service.requiresReload()) {\n            throw MESSAGES.serverRequiresReload();\n        }\n\n        final PatchInfo info = service.getPatchInfo();\n        final DirectoryStructure structure = service.getStructure();\n        final PatchingTaskRunner runner = new PatchingTaskRunner(info, structure);\n\n        final int index = operation.get(ModelDescriptionConstants.INPUT_STREAM_INDEX).asInt(0);\n        final InputStream is = context.getAttachmentStream(index);\n        try {\n            final PatchingResult result = runner.executeDirect(is);\n            context.completeStep(new OperationContext.ResultHandler() {\n\n                @Override\n                public void handleResult(OperationContext.ResultAction resultAction, OperationContext context, ModelNode operation) {\n                    if(resultAction == OperationContext.ResultAction.KEEP) {\n                        result.commit();\n                        service.reloadRequired();\n                        context.reloadRequired();\n                    } else {\n                        result.rollback();\n                    }\n                }\n\n            });\n        } catch (PatchingException e) {\n            if(e.hasConflicts()) {\n                // TODO report conflicting items\n            }\n            throw new OperationFailedException(e.getMessage(), e);\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(final OperationContext context, final ModelNode operation) throws OperationFailedException {\n        final String patchId = PATCH_ID.resolveModelAttribute(context, operation).asString();\n        final boolean overrideAll = OVERRIDE_ALL.resolveModelAttribute(context, operation).asBoolean();\n\n        // FIXME can we check whether the process is reload-required directly from the operation context?\n        context.acquireControllerLock();\n        final PatchInfoService service = (PatchInfoService) context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();\n        if (service.requiresReload()) {\n            throw MESSAGES.serverRequiresReload();\n        }\n\n        final PatchInfo info = service.getPatchInfo();\n        final DirectoryStructure structure = service.getStructure();\n        final PatchingTaskRunner taskRunner = new PatchingTaskRunner(info, structure);\n        try {\n            // Rollback\n            final PatchingResult result = taskRunner.rollback(patchId, overrideAll);\n            if(result.hasFailures()) {\n                final ModelNode failureDescription = context.getFailureDescription();\n                failureDescription.get(\"content-items\").set(\"TODO\");\n                context.completeStep(OperationContext.ResultHandler.NOOP_RESULT_HANDLER);\n                return;\n            }\n            context.completeStep(new OperationContext.ResultHandler() {\n\n                @Override\n                public void handleResult(OperationContext.ResultAction resultAction, OperationContext context, ModelNode operation) {\n                    if(resultAction == OperationContext.ResultAction.KEEP) {\n                        result.commit();\n                        service.reloadRequired();\n                        context.reloadRequired();\n                    } else {\n                        result.rollback();\n                    }\n                }\n\n            });\n        } catch (PatchingException e) {\n            throw new OperationFailedException(e.getMessage(), e);\n        } finally {\n            //\n        }\n    }","id":94874,"modified_method":"@Override\n    public void execute(final OperationContext context, final ModelNode operation) throws OperationFailedException {\n        final String patchId = PATCH_ID.resolveModelAttribute(context, operation).asString();\n        final boolean overrideAll = OVERRIDE_ALL.resolveModelAttribute(context, operation).asBoolean();\n\n        // FIXME can we check whether the process is reload-required directly from the operation context?\n        context.acquireControllerLock();\n        final PatchInfoService service = (PatchInfoService) context.getServiceRegistry(false).getRequiredService(PatchInfoService.NAME).getValue();\n        if (service.requiresReload()) {\n            throw MESSAGES.serverRequiresReload();\n        }\n\n        final PatchInfo info = service.getPatchInfo();\n        final DirectoryStructure structure = service.getStructure();\n        final PatchingTaskRunner taskRunner = new PatchingTaskRunner(info, structure);\n        try {\n            // Rollback\n            final PatchingResult result = taskRunner.rollback(patchId, overrideAll);\n            context.completeStep(new OperationContext.ResultHandler() {\n\n                @Override\n                public void handleResult(OperationContext.ResultAction resultAction, OperationContext context, ModelNode operation) {\n                    if(resultAction == OperationContext.ResultAction.KEEP) {\n                        result.commit();\n                        service.reloadRequired();\n                        context.reloadRequired();\n                    } else {\n                        result.rollback();\n                    }\n                }\n\n            });\n        } catch (PatchingException e) {\n            if(e.hasConflicts()) {\n                // TODO report conflicting items\n            }\n            throw new OperationFailedException(e.getMessage(), e);\n        } finally {\n            //\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void main(final String[] args) throws Exception {\n\n        Argument operation = null;\n        String param = null;\n        boolean overrideAll = false;\n\n        final int argsLength = args.length;\n        for (int i = 0; i < argsLength; i++) {\n            final String arg = args[i];\n            final Argument argument = Argument.forName(arg);\n            switch (argument) {\n                // process operation\n                case GC:\n                case PATCH:\n                case ROLLBACK:\n                    param = args[++i];\n                    operation = argument;\n                    break;\n                case OVERRIDE_ALL:\n                    overrideAll = true;\n                    break;\n                default:\n                    System.out.println(\"Illegal argument: \" + arg);\n                    printUsage(System.out);\n                    return;\n            }\n        }\n        if(operation == null || param == null) {\n            printUsage(System.out);\n            return;\n        }\n\n\n        final String home = System.getProperty(\"jboss.home.dir\", System.getenv(\"JBOSS_HOME\"));\n        final File jbossHome = home == null ? new File(\".\") : new File(home);\n        final DirectoryStructure structure = DirectoryStructure.createDefault(jbossHome.getAbsoluteFile());\n        final ModuleLoader loader = ModuleLoader.forClass(Main.class);\n        final ProductConfig config = new ProductConfig(loader, jbossHome.getAbsolutePath(), Collections.emptyMap());\n        final PatchInfo info = LocalPatchInfo.load(config, structure);\n\n        // Debug information\n        debug(info, structure);\n\n        final PatchTool tool = new PatchTool(info, structure);\n        final PatchingResult result;\n        // Rollback\n        if(operation == Argument.ROLLBACK) {\n            result = tool.rollback(param, overrideAll);\n        // Apply patch\n        } else if (operation == Argument.PATCH) {\n            final File file = new File(param);\n            assert file.exists();\n            final ContentVerificationPolicy policy = overrideAll ? ContentVerificationPolicy.OVERRIDE_ALL : ContentVerificationPolicy.STRICT;\n            result = tool.applyPatch(file, policy);\n        } else {\n            // TODO\n            return;\n        }\n        if(result.hasFailures()) {\n            log.errorf(\"Failed to complete operation for patch: \\\"%s\\\"\", result.getPatchId());\n            final Collection<ContentItem> problems = result.getProblems();\n            if(problems != null && ! problems.isEmpty()) {\n                log.errorf(\"Conflicting items are:\");\n                for(final ContentItem item : result.getProblems()) {\n                    log.error(item);\n                }\n                log.infof(\"Run with '--override-all' to force overriding all content conflicts.\");\n            }\n        } else {\n            result.commit();\n            log.infof(\"Operation completed successfully: %s\", result.getPatchId());\n        }\n    }","id":94875,"modified_method":"public static void main(final String[] args) throws Exception {\n\n        Argument operation = null;\n        String param = null;\n        boolean overrideAll = false;\n\n        final int argsLength = args.length;\n        for (int i = 0; i < argsLength; i++) {\n            final String arg = args[i];\n            final Argument argument = Argument.forName(arg);\n            switch (argument) {\n                // process operation\n                case GC:\n                case PATCH:\n                case ROLLBACK:\n                    param = args[++i];\n                    operation = argument;\n                    break;\n                case OVERRIDE_ALL:\n                    overrideAll = true;\n                    break;\n                default:\n                    System.out.println(\"Illegal argument: \" + arg);\n                    printUsage(System.out);\n                    return;\n            }\n        }\n        if(operation == null || param == null) {\n            printUsage(System.out);\n            return;\n        }\n\n\n        final String home = System.getProperty(\"jboss.home.dir\", System.getenv(\"JBOSS_HOME\"));\n        final File jbossHome = home == null ? new File(\".\") : new File(home);\n        final DirectoryStructure structure = DirectoryStructure.createDefault(jbossHome.getAbsoluteFile());\n        final ModuleLoader loader = ModuleLoader.forClass(Main.class);\n        final ProductConfig config = new ProductConfig(loader, jbossHome.getAbsolutePath(), Collections.emptyMap());\n        final PatchInfo info = LocalPatchInfo.load(config, structure);\n\n        // Debug information\n        debug(info, structure);\n\n        final PatchTool tool = new PatchTool(info, structure);\n        try {\n            final PatchingResult result;\n            // Rollback\n            if(operation == Argument.ROLLBACK) {\n                result = tool.rollback(param, overrideAll);\n            // Apply patch\n            } else if (operation == Argument.PATCH) {\n                final File file = new File(param);\n                assert file.exists();\n                final ContentVerificationPolicy policy = overrideAll ? ContentVerificationPolicy.OVERRIDE_ALL : ContentVerificationPolicy.STRICT;\n                result = tool.applyPatch(file, policy);\n            } else {\n                // TODO\n                return;\n            }\n            result.commit();\n            log.infof(\"Operation completed successfully: %s\", result.getPatchId());\n        } catch (PatchingException e) {\n            if(e.hasConflicts()) {\n                log.errorf(\"Failed to complete operation for patch.\");\n                log.errorf(\"Conflicting items are:\");\n                for(final ContentItem item : e.getConflicts()) {\n                    log.error(item);\n                }\n                log.infof(\"Run with '--override-all' to force overriding all content conflicts.\");\n            }\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void assertPatchHasNotBeenApplied(PatchingResult result, Patch patch, ContentItem problematicItem) {\n        assertTrue(\"patch should have failed\", result.hasFailures());\n        assertTrue(problematicItem + \" is not reported in the problemes \" + result.getProblems(), result.getProblems().contains(problematicItem));\n\n        assertDirDoesNotExist(result.getPatchInfo().getEnvironment().getPatchDirectory(patch.getPatchId()));\n        assertDirDoesNotExist(result.getPatchInfo().getEnvironment().getHistoryDir(patch.getPatchId()));\n    }","id":94876,"modified_method":"static void assertPatchHasNotBeenApplied(PatchingException result, Patch patch, ContentItem problematicItem, DirectoryStructure structure) {\n        assertFalse(\"patch should have failed\", result.getConflicts().isEmpty());\n        assertTrue(problematicItem + \" is not reported in the problems \" + result.getConflicts(), result.getConflicts().contains(problematicItem));\n\n        assertDirDoesNotExist(structure.getPatchDirectory(patch.getPatchId()));\n        assertDirDoesNotExist(structure.getHistoryDir(patch.getPatchId()));\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"public PatchingException(String message) {\n        super(message);\n    }","id":94877,"modified_method":"public PatchingException(String message) {\n        super(message);\n        this.conflicts = Collections.emptyList();\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"public PatchingException(Throwable cause) {\n        super(cause);\n    }","id":94878,"modified_method":"public PatchingException(Throwable cause) {\n        super(cause);\n        this.conflicts = Collections.emptyList();\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"public PatchingException() {\n    }","id":94879,"modified_method":"public PatchingException() {\n        conflicts = Collections.emptyList();\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"public PatchingException(String message, Throwable cause) {\n        super(message, cause);\n    }","id":94880,"modified_method":"public PatchingException(String message, Throwable cause) {\n        super(message, cause);\n        this.conflicts = Collections.emptyList();\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Rollback an active patch.\n     *\n     * @param patchId the patch id to rollback\n     * @param overrideAll override all conflicting files\n     * @return the result\n     * @throws PatchingException\n     */\n    public PatchingResult rollback(final String patchId, final boolean overrideAll) throws PatchingException {\n        // Check if the patch is currently active\n        final int index = patchInfo.getPatchIDs().indexOf(patchId);\n        if(index == -1 ) {\n            if(!patchInfo.getCumulativeID().equals(patchId)) {\n                PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);\n                return new FailedResult(patchId, patchInfo);\n            }\n        }\n\n        //\n        boolean rollbackTo = false; // TODO configure 'rollbackTo' somewhere?\n        final List<String> patches = new ArrayList<String>();\n        if(index == -1) {\n            // Means we rollback a CP and all it's one-off patches\n            patches.addAll(patchInfo.getPatchIDs());\n            patches.add(patchId);\n        } else if (index == 0) {\n            patches.add(patchId);\n        } else {\n            if (rollbackTo) {\n                final List<String> oneOffs = new ArrayList<String>();\n                for(int i = 0; i <= index; i++) {\n                    patches.add(oneOffs.get(i));\n                }\n            } else {\n                // TODO perhaps we can allow this as well?\n                PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);\n                return new FailedResult(patchId, patchInfo);\n            }\n        }\n\n        final File historyDir = structure.getHistoryDir(patchId);\n        if(! historyDir.exists()) {\n            PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);\n            return new FailedResult(patchId, patchInfo);\n        }\n        final File patchXml = new File(historyDir, PatchingContext.ROLLBACK_XML);\n        if(! patchXml.exists()) {\n            PatchLogger.ROOT_LOGGER.cannotRollbackPatch(patchId);\n            return new FailedResult(patchId, patchInfo);\n        }\n        File workDir = createTempDir();\n        try {\n            final InputStream is = new FileInputStream(patchXml);\n            try {\n                // Parse the rollback patch.xml\n                final Patch patch = PatchXml.parse(is);\n                // Check the consistency of the CP history\n                final File previousCP = new File(historyDir, DirectoryStructure.CUMULATIVE);\n                final String cumulative = PatchUtils.readRef(previousCP);\n\n                // Check the consistency of the patches history for cumulative patch\n                if (PatchType.CUMULATIVE == patch.getPatchType()) {\n                    final File cumulativeReferences = structure.getCumulativeRefs(cumulative);\n                    final File referencesHistory = new File(historyDir, DirectoryStructure.REFERENCES);\n                    final List<String> cumulativePatches = PatchUtils.readRefs(cumulativeReferences);\n                    final List<String> historyPatches = PatchUtils.readRefs(referencesHistory);\n                    if(! cumulativePatches.equals(historyPatches)) {\n                        // TODO perhaps just ignore or warn?\n                        throw new PatchingException(\"inconsistent patches for '%s' expected: %s, was: %s\", cumulative, historyDir, cumulativePatches);\n                    }\n                }\n\n                // Process potentially multiple rollbacks\n                final PatchingContext context = PatchingContext.createForRollback(patch, patchInfo, structure, overrideAll, workDir);\n                final Map<Location, PatchingTasks.ContentTaskDefinition> definitions = new LinkedHashMap<Location, PatchingTasks.ContentTaskDefinition>();\n                for(final String rollback : patches) {\n                    try {\n                        // Rollback one off patches\n                        context.recordRollback(rollback, definitions);\n                    } catch (Exception e) {\n                        throw new PatchingException(e);\n                    }\n                }\n                // Rollback\n                final PatchingContext.TaskFinishCallback task = new PatchingRollbackCallback(patchId, patch, patches, cumulative, structure);\n                return executeTasks(patch, task, definitions, context);\n\n            } finally {\n                PatchUtils.safeClose(is);\n            }\n        } catch (IOException e) {\n            throw new PatchingException(e);\n        } catch (XMLStreamException e) {\n            throw new PatchingException(e);\n        } finally {\n            if(workDir != null && ! recursiveDelete(workDir)) {\n                PatchLogger.ROOT_LOGGER.debugf(\"failed to remove work directory (%s)\", workDir);\n            }\n        }\n    }","id":94881,"modified_method":"/**\n     * Rollback an active patch.\n     *\n     * @param patchId the patch id to rollback\n     * @param overrideAll override all conflicting files\n     * @return the result\n     * @throws PatchingException\n     */\n    public PatchingResult rollback(final String patchId, final boolean overrideAll) throws PatchingException {\n        // Check if the patch is currently active\n        final int index = patchInfo.getPatchIDs().indexOf(patchId);\n        if(index == -1 ) {\n            if(!patchInfo.getCumulativeID().equals(patchId)) {\n                throw PatchMessages.MESSAGES.cannotRollbackPatch(patchId);\n            }\n        }\n\n        //\n        boolean rollbackTo = false; // TODO configure 'rollbackTo' somewhere?\n        final List<String> patches = new ArrayList<String>();\n        if(index == -1) {\n            // Means we rollback a CP and all it's one-off patches\n            patches.addAll(patchInfo.getPatchIDs());\n            patches.add(patchId);\n        } else if (index == 0) {\n            patches.add(patchId);\n        } else {\n            if (rollbackTo) {\n                final List<String> oneOffs = new ArrayList<String>();\n                for(int i = 0; i <= index; i++) {\n                    patches.add(oneOffs.get(i));\n                }\n            } else {\n                // TODO perhaps we can allow this as well?\n                throw PatchMessages.MESSAGES.cannotRollbackPatch(patchId);\n            }\n        }\n\n        final File historyDir = structure.getHistoryDir(patchId);\n        if(! historyDir.exists()) {\n            throw PatchMessages.MESSAGES.cannotRollbackPatch(patchId);\n        }\n        final File patchXml = new File(historyDir, PatchingContext.ROLLBACK_XML);\n        if(! patchXml.exists()) {\n            throw PatchMessages.MESSAGES.cannotRollbackPatch(patchId);\n        }\n        File workDir = createTempDir();\n        try {\n            final InputStream is = new FileInputStream(patchXml);\n            try {\n                // Parse the rollback patch.xml\n                final Patch patch = PatchXml.parse(is);\n                // Check the consistency of the CP history\n                final File previousCP = new File(historyDir, DirectoryStructure.CUMULATIVE);\n                final String cumulative = PatchUtils.readRef(previousCP);\n\n                // Check the consistency of the patches history for cumulative patch\n                if (PatchType.CUMULATIVE == patch.getPatchType()) {\n                    final File cumulativeReferences = structure.getCumulativeRefs(cumulative);\n                    final File referencesHistory = new File(historyDir, DirectoryStructure.REFERENCES);\n                    final List<String> cumulativePatches = PatchUtils.readRefs(cumulativeReferences);\n                    final List<String> historyPatches = PatchUtils.readRefs(referencesHistory);\n                    if(! cumulativePatches.equals(historyPatches)) {\n                        // TODO perhaps just ignore or warn?\n                        throw new PatchingException(\"inconsistent patches for '%s' expected: %s, was: %s\", cumulative, historyDir, cumulativePatches);\n                    }\n                }\n\n                // Process potentially multiple rollbacks\n                final PatchingContext context = PatchingContext.createForRollback(patch, patchInfo, structure, overrideAll, workDir);\n                final Map<Location, PatchingTasks.ContentTaskDefinition> definitions = new LinkedHashMap<Location, PatchingTasks.ContentTaskDefinition>();\n                for(final String rollback : patches) {\n                    try {\n                        // Rollback one off patches\n                        context.recordRollback(rollback, definitions);\n                    } catch (Exception e) {\n                        throw new PatchingException(e);\n                    }\n                }\n                // Rollback\n                final PatchingContext.TaskFinishCallback task = new PatchingRollbackCallback(patchId, patch, patches, cumulative, structure);\n                try {\n                    return executeTasks(task, definitions, context);\n                } catch (Exception e) {\n                    task.rollbackCallback();\n                    throw rethrowException(e);\n                }\n            } finally {\n                PatchUtils.safeClose(is);\n            }\n        } catch (IOException e) {\n            throw new PatchingException(e);\n        } catch (XMLStreamException e) {\n            throw new PatchingException(e);\n        } finally {\n            if(workDir != null && ! recursiveDelete(workDir)) {\n                PatchLogger.ROOT_LOGGER.debugf(\"failed to remove work directory (%s)\", workDir);\n            }\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Apply the patch.\n     *\n     * @param patch the patch\n     * @param context the patching context\n     * @return the patching result\n     * @throws PatchingException\n     */\n    private PatchingResult applyPatch(final Patch patch, final PatchingContext context, final PatchingContext.TaskFinishCallback finishTask) throws PatchingException {\n        // Rollback one-off patches\n        final List<String> rollbacks;\n        final Patch.PatchType type = patch.getPatchType();\n        if(type == Patch.PatchType.CUMULATIVE) {\n            rollbacks = patchInfo.getPatchIDs();\n        } else {\n            rollbacks = Collections.emptyList();\n        }\n        // Rollback one-off patches (if there are any to roll back)\n        final Map<Location, PatchingTasks.ContentTaskDefinition> definitions = new LinkedHashMap<Location, PatchingTasks.ContentTaskDefinition>();\n        for(final String oneOff : rollbacks) {\n            try {\n                // Rollback one off patches\n                context.recordRollback(oneOff, definitions);\n            } catch (Exception e) {\n                throw new PatchingException(e);\n            }\n        }\n        try {\n            // Apply the current patch\n            context.applyPatch(patch, definitions);\n        } catch (Exception e) {\n            throw new PatchingException(e);\n        }\n        // Process the resolved tasks\n        return executeTasks(patch, finishTask, definitions, context);\n    }","id":94882,"modified_method":"/**\n     * Apply the patch.\n     *\n     * @param patch the patch\n     * @param context the patching context\n     * @return the patching result\n     * @throws PatchingException\n     */\n    private PatchingResult applyPatch(final Patch patch, final PatchingContext context, final PatchingContext.TaskFinishCallback finishTask) throws PatchingException {\n        // Rollback one-off patches\n        final List<String> rollbacks;\n        final Patch.PatchType type = patch.getPatchType();\n        if(type == Patch.PatchType.CUMULATIVE) {\n            rollbacks = patchInfo.getPatchIDs();\n        } else {\n            rollbacks = Collections.emptyList();\n        }\n        // Rollback one-off patches (if there are any to roll back)\n        final Map<Location, PatchingTasks.ContentTaskDefinition> definitions = new LinkedHashMap<Location, PatchingTasks.ContentTaskDefinition>();\n        for(final String oneOff : rollbacks) {\n            try {\n                // Rollback one off patches\n                context.recordRollback(oneOff, definitions);\n            } catch (Exception e) {\n                throw new PatchingException(e);\n            }\n        }\n        try {\n            // Apply the current patch\n            context.applyPatch(patch, definitions);\n        } catch (Exception e) {\n            throw new PatchingException(e);\n        }\n        // Process the resolved tasks\n        return executeTasks(finishTask, definitions, context);\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * This will create and execute all the patching tasks based on the patch metadata.\n     *\n     * @param finishTask the finish Task\n     * @param context the context\n     * @return the result of the patching action\n     * @throws PatchingException\n     */\n    private PatchingResult executeTasks(final Patch patch, final PatchingContext.TaskFinishCallback finishTask, final Map<Location, PatchingTasks.ContentTaskDefinition> definitions, final PatchingContext context) throws PatchingException {\n        // Create the modification tasks\n        final List<PatchingTask> tasks = new ArrayList<PatchingTask>();\n        final List<ContentItem> problems = new ArrayList<ContentItem>();\n        // Process the consolidated modifications\n        for(final PatchingTasks.ContentTaskDefinition definition : definitions.values()) {\n            final PatchingTask task = context.createTask(definition);\n            try {\n                // backup and validate content\n                if(! task.prepare(context) || definition.hasConflicts()) {\n                    // Unless it a content item was manually ignored (or excluded)\n                    final ContentItem item = task.getContentItem();\n                    if(! context.isIgnored(item)) {\n                        problems.add(item);\n                    }\n                }\n                tasks.add(task);\n            } catch (IOException e) {\n                throw new PatchingException(e);\n            }\n        }\n        // If there were problems report them\n        if(! problems.isEmpty()) {\n            finishTask.rollbackCallback();\n            return new FailedResult(patch.getPatchId(), context.getPatchInfo(), problems);\n        }\n        //\n        try {\n            // Execute the tasks\n            for(final PatchingTask task : tasks) {\n                // Unless it's excluded by the user\n                final ContentItem item = task.getContentItem();\n                if(item != null && context.isExcluded(item)) {\n                    continue;\n                }\n                // Run the task\n                task.execute(context);\n            }\n        } catch (Exception e) {\n            throw rethrowException(e);\n        }\n        // Finish ...\n        return context.finish(finishTask);\n    }","id":94883,"modified_method":"/**\n     * This will create and execute all the patching tasks based on the patch metadata.\n     *\n     * @param finishTask the finish Task\n     * @param context the context\n     * @return the result of the patching action\n     * @throws PatchingException\n     */\n    private PatchingResult executeTasks(final PatchingContext.TaskFinishCallback finishTask, final Map<Location, PatchingTasks.ContentTaskDefinition> definitions, final PatchingContext context) throws PatchingException {\n        // Create the modification tasks\n        final List<PatchingTask> tasks = new ArrayList<PatchingTask>();\n        final List<ContentItem> problems = new ArrayList<ContentItem>();\n        // Process the consolidated modifications\n        for(final PatchingTasks.ContentTaskDefinition definition : definitions.values()) {\n            final PatchingTask task = context.createTask(definition);\n            try {\n                // backup and validate content\n                if(! task.prepare(context) || definition.hasConflicts()) {\n                    // Unless it a content item was manually ignored (or excluded)\n                    final ContentItem item = task.getContentItem();\n                    if(! context.isIgnored(item)) {\n                        problems.add(item);\n                    }\n                }\n                tasks.add(task);\n            } catch (IOException e) {\n                throw new PatchingException(e);\n            }\n        }\n        // If there were problems report them\n        if(! problems.isEmpty()) {\n            throw new PatchingException(problems);\n        }\n        try {\n            // Execute the tasks\n            for(final PatchingTask task : tasks) {\n                // Unless it's excluded by the user\n                final ContentItem item = task.getContentItem();\n                if(item != null && context.isExcluded(item)) {\n                    continue;\n                }\n                // Run the task\n                task.execute(context);\n            }\n        } catch (Exception e) {\n            throw rethrowException(e);\n        }\n        // Finish ...\n        return context.finish(finishTask);\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testRemoveModifiedFileWithSTRICT() throws Exception {\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasNotBeenApplied(result, patch, fileRemoved.getItem());\n\n        /// file has not been modified in the AS7 installation\n        assertFileExists(removedFile);\n        assertArrayEquals(expectedModifiedHash, calculateHash(removedFile));\n    }","id":94884,"modified_method":"@Test\n    public void testRemoveModifiedFileWithSTRICT() throws Exception {\n        try {\n            PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n        } catch (PatchingException e) {\n            assertPatchHasNotBeenApplied(e, patch, fileRemoved.getItem(), env);\n\n            /// file has not been modified in the AS7 installation\n            assertFileExists(removedFile);\n            assertArrayEquals(expectedModifiedHash, calculateHash(removedFile));\n        }\n\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testRemoveModifiedFileWithPRESERVE_ALL() throws Exception {\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.PRESERVE_ALL);\n\n        assertPatchHasNotBeenApplied(result, patch, fileRemoved.getItem());\n\n        /// file has not been modified in the AS7 installation\n        assertFileExists(removedFile);\n        assertArrayEquals(expectedModifiedHash, calculateHash(removedFile));\n    }","id":94885,"modified_method":"@Test\n    public void testRemoveModifiedFileWithPRESERVE_ALL() throws Exception {\n        try {\n            PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.PRESERVE_ALL);\n        } catch (PatchingException e) {\n            assertPatchHasNotBeenApplied(e, patch, fileRemoved.getItem(), env);\n\n            /// file has not been modified in the AS7 installation\n            assertFileExists(removedFile);\n            assertArrayEquals(expectedModifiedHash, calculateHash(removedFile));\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testUpdateModifiedFileWithPRESERVE_ALL() throws Exception {\n\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.PRESERVE_ALL);\n\n        assertPatchHasNotBeenApplied(result, patch, fileUpdated.getItem());\n\n        /// file has not been modified in the AS7 installation\n        assertFileExists(modifiedFile);\n        assertArrayEquals(expectedModifiedHash, calculateHash(modifiedFile));\n    }","id":94886,"modified_method":"@Test\n    public void testUpdateModifiedFileWithPRESERVE_ALL() throws Exception {\n        try {\n            runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.PRESERVE_ALL);\n        } catch (PatchingException e) {\n            assertPatchHasNotBeenApplied(e, patch, fileUpdated.getItem(), env);\n\n            /// file has not been modified in the AS7 installation\n            assertFileExists(modifiedFile);\n            assertArrayEquals(expectedModifiedHash, calculateHash(modifiedFile));\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testUpdateModifiedFileWithSTRICT() throws Exception {\n\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n\n        assertPatchHasNotBeenApplied(result, patch, fileUpdated.getItem());\n\n        /// file has not been modified in the AS7 installation\n        assertFileExists(modifiedFile);\n        assertArrayEquals(expectedModifiedHash, calculateHash(modifiedFile));\n    }","id":94887,"modified_method":"@Test\n    public void testUpdateModifiedFileWithSTRICT() throws Exception {\n        try {\n            runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n        } catch (PatchingException e) {\n            assertPatchHasNotBeenApplied(e, patch, fileUpdated.getItem(), env);\n\n            /// file has not been modified in the AS7 installation\n            assertFileExists(modifiedFile);\n            assertArrayEquals(expectedModifiedHash, calculateHash(modifiedFile));\n        }\n    }","commit_id":"abbcbdbd250e301d4400560e2ea9e1706cf68c68","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"CompleteTransactionTask:\");\n        sb.append(\"  TXN ID: \").append(getTxnId());\n        sb.append(\"  SP HANDLE: \").append(getSpHandle());\n        sb.append(\"  UNDO TOKEN: \").append(m_txn.getBeginUndoToken());\n        sb.append(\"  MSG: \").append(m_msg.toString());\n        return sb.toString();\n    }","id":94888,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"CompleteTransactionTask:\");\n        sb.append(\"  TXN ID: \").append(TxnEgo.txnIdToString(getTxnId()));\n        sb.append(\"  SP HANDLE: \").append(TxnEgo.txnIdToString(getSpHandle()));\n        sb.append(\"  UNDO TOKEN: \").append(m_txn.getBeginUndoToken());\n        sb.append(\"  MSG: \").append(m_msg.toString());\n        return sb.toString();\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"FragmentTask:\");\n        sb.append(\"  TXN ID: \").append(getTxnId());\n        sb.append(\"  SP HANDLE ID: \").append(getSpHandle());\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","id":94889,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"FragmentTask:\");\n        sb.append(\"  TXN ID: \").append(TxnEgo.txnIdToString(getTxnId()));\n        sb.append(\"  SP HANDLE ID: \").append(TxnEgo.txnIdToString(getSpHandle()));\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static String txnIdToString(long txnId)\n    {\n        if (txnId == Long.MIN_VALUE) {\n            return \"UNUSED\";\n        }\n        else {\n            return \"(\" + (TxnEgo.getSequence(txnId) - TxnEgo.SEQUENCE_ZERO) + \":\" +\n                TxnEgo.getPartitionId(txnId) + \")\";\n        }\n    }","id":94890,"modified_method":"private static String txnIdToString(long txnId)\n    {\n        if (txnId == Long.MIN_VALUE) {\n            return \"UNUSED\";\n        }\n        else {\n            return TxnEgo.txnIdToString(txnId);\n        }\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"MpProcedureTask:\");\n        sb.append(\"  TXN ID: \").append(getTxnId());\n        sb.append(\"  SP HANDLE ID: \").append(getSpHandle());\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","id":94891,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"MpProcedureTask:\");\n        sb.append(\"  TXN ID: \").append(TxnEgo.txnIdToString(getTxnId()));\n        sb.append(\"  SP HANDLE ID: \").append(TxnEgo.txnIdToString(getSpHandle()));\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/** Send missed-messages to survivors. Exciting! */\n    public void repairSurvivors()\n    {\n        // cancel() and repair() must be synchronized by the caller (the deliver lock,\n        // currently). If cancelled and the last repair message arrives, don't send\n        // out corrections!\n        if (this.m_promotionResult.isCancelled()) {\n            tmLog.debug(m_whoami + \"skipping repair message creation for cancelled Term.\");\n            return;\n        }\n\n        int queued = 0;\n        tmLog.info(m_whoami + \"received all repair logs and is repairing surviving replicas.\");\n        for (Iv2RepairLogResponseMessage li : m_repairLogUnion) {\n            // survivors that require a repair message for log entry li.\n            List<Long> needsRepair = new ArrayList<Long>(5);\n            for (Entry<Long, ReplicaRepairStruct> entry : m_replicaRepairStructs.entrySet()) {\n                if  (entry.getValue().needs(li.getTxnId())) {\n                    ++queued;\n                    tmLog.debug(m_whoami + \"repairing \" + entry.getKey() + \". Max seen \" +\n                            entry.getValue().m_maxHandleCompleted + \". Repairing with \" +\n                            li.getTxnId());\n                    needsRepair.add(entry.getKey());\n                }\n            }\n            if (!needsRepair.isEmpty()) {\n                m_mailbox.repairReplicasWith(needsRepair, createRepairMessage(li));\n            }\n        }\n        tmLog.info(m_whoami + \"finished queuing \" + queued + \" replica repair messages.\");\n\n        m_promotionResult.done(m_maxSeenTxnId);\n    }","id":94892,"modified_method":"/** Send missed-messages to survivors. Exciting! */\n    public void repairSurvivors()\n    {\n        // cancel() and repair() must be synchronized by the caller (the deliver lock,\n        // currently). If cancelled and the last repair message arrives, don't send\n        // out corrections!\n        if (this.m_promotionResult.isCancelled()) {\n            tmLog.debug(m_whoami + \"skipping repair message creation for cancelled Term.\");\n            return;\n        }\n\n        int queued = 0;\n        tmLog.info(m_whoami + \"received all repair logs and is repairing surviving replicas.\");\n        for (Iv2RepairLogResponseMessage li : m_repairLogUnion) {\n            // survivors that require a repair message for log entry li.\n            List<Long> needsRepair = new ArrayList<Long>(5);\n            for (Entry<Long, ReplicaRepairStruct> entry : m_replicaRepairStructs.entrySet()) {\n                if  (entry.getValue().needs(li.getTxnId())) {\n                    ++queued;\n                    tmLog.debug(m_whoami + \"repairing \" + CoreUtils.hsIdToString(entry.getKey()) +\n                            \". Max seen \" +\n                            TxnEgo.txnIdToString(entry.getValue().m_maxHandleCompleted) +\n                            \". Repairing with \" +\n                            TxnEgo.txnIdToString(li.getTxnId()));\n                    needsRepair.add(entry.getKey());\n                }\n            }\n            if (!needsRepair.isEmpty()) {\n                m_mailbox.repairReplicasWith(needsRepair, createRepairMessage(li));\n            }\n        }\n        tmLog.info(m_whoami + \"finished queuing \" + queued + \" replica repair messages.\");\n\n        m_promotionResult.done(m_maxSeenTxnId);\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"boolean needs(long handle)\n        {\n            if (m_minHandleSeen != Long.MAX_VALUE) {\n                // must repair if no transactions were completed.\n                if (m_maxHandleCompleted == Long.MAX_VALUE) {\n                    return true;\n                }\n                else if (handle > m_maxHandleCompleted) {\n                    return true;\n                }\n            }\n\n            tmLog.debug(\"Rejecting repair for \" + handle + \" minHandleSeen: \" + m_minHandleSeen +\n              \" maxHandleCompleted: \" + m_maxHandleCompleted);\n\n            return false;\n        }","id":94893,"modified_method":"boolean needs(long handle)\n        {\n            if (m_minHandleSeen != Long.MAX_VALUE) {\n                // must repair if no transactions were completed.\n                if (m_maxHandleCompleted == Long.MAX_VALUE) {\n                    return true;\n                }\n                else if (handle > m_maxHandleCompleted) {\n                    return true;\n                }\n            }\n\n            tmLog.debug(\"Rejecting repair for \" + TxnEgo.txnIdToString(handle) +\n                    \" minHandleSeen: \" + TxnEgo.txnIdToString(m_minHandleSeen) +\n              \" maxHandleCompleted: \" + TxnEgo.txnIdToString(m_maxHandleCompleted));\n\n            return false;\n        }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"SpProcedureTask:\");\n        sb.append(\"  TXN ID: \").append(getTxnId());\n        sb.append(\"  SP HANDLE ID: \").append(getSpHandle());\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","id":94894,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"SpProcedureTask:\");\n        sb.append(\"  TXN ID: \").append(TxnEgo.txnIdToString(getTxnId()));\n        sb.append(\"  SP HANDLE ID: \").append(TxnEgo.txnIdToString(getSpHandle()));\n        sb.append(\"  ON HSID: \").append(CoreUtils.hsIdToString(m_initiator.getHSId()));\n        return sb.toString();\n    }","commit_id":"b3bffae0a98eef8664f39a00cbaa424d3616598b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"/**\n     * The <code>endTransaction<\/code> method ends a transaction and\n     * translates any exceptions into\n     * TransactionRolledBack[Local]Exception or SystemException.\n     *\n     * @param tm a <code>TransactionManager<\/code> value\n     * @param tx a <code>Transaction<\/code> value\n     */\n    protected void endTransaction(TransactionManager tm, Transaction tx) {\n        try {\n            if (tx != tm.getTransaction()) {\n                throw EjbMessages.MESSAGES.wrongTxOnThread(tx, tm.getTransaction());\n            }\n\n            if (tx.getStatus() == Status.STATUS_MARKED_ROLLBACK) {\n                tm.rollback();\n            } else {\n                // Commit tx\n                // This will happen if\n                // a) everything goes well\n                // b) app. exception was thrown\n                tm.commit();\n            }\n        } catch (RollbackException e) {\n            handleEndTransactionException(e);\n        } catch (HeuristicMixedException e) {\n            handleEndTransactionException(e);\n        } catch (HeuristicRollbackException e) {\n            handleEndTransactionException(e);\n        } catch (SystemException e) {\n            handleEndTransactionException(e);\n        }\n    }","id":94895,"modified_method":"/**\n     * The <code>endTransaction<\/code> method ends a transaction and\n     * translates any exceptions into\n     * TransactionRolledBack[Local]Exception or SystemException.\n     *\n     * @param tm a <code>TransactionManager<\/code> value\n     * @param tx a <code>Transaction<\/code> value\n     */\n    protected void endTransaction(final TransactionManager tm, final Transaction tx) {\n        try {\n            if (tx != tm.getTransaction()) {\n                throw EjbMessages.MESSAGES.wrongTxOnThread(tx, tm.getTransaction());\n            }\n            final int txStatus = tx.getStatus();\n            if (txStatus == Status.STATUS_ACTIVE) {\n                // Commit tx\n                // This will happen if\n                // a) everything goes well\n                // b) app. exception was thrown\n                tm.commit();\n            } else if (txStatus == Status.STATUS_MARKED_ROLLBACK) {\n                tm.rollback();\n            } else if (txStatus == Status.STATUS_ROLLEDBACK) {\n                // handle reaper canceled (rolled back) tx case (see WFLY-1346)\n                // clear current tx state and throw RollbackException (EJBTransactionRolledbackException)\n                tm.suspend();\n                throw EjbMessages.MESSAGES.transactionAlreadyRolledBack(tx);\n            } else if (txStatus == Status.STATUS_UNKNOWN) {\n                // STATUS_UNKNOWN isn't expected to be reached here but if it does, we need to clear current thread tx.\n                // It is possible that calling tm.commit() could succeed but we call tm.rollback, since this is an unexpected\n                // tx state that are are handling.\n                tm.rollback();\n                // if the tm.rollback doesn't fail, we throw an EJBException to reflect the unexpected tx state.\n                throw EjbMessages.MESSAGES.transactionInUnexpectedState(tx, statusAsString(txStatus));\n            } else {\n                // logically, all of the following (unexpected) tx states are handled here:\n                //  Status.STATUS_PREPARED\n                //  Status.STATUS_PREPARING\n                //  Status.STATUS_ROLLING_BACK\n                //  Status.STATUS_NO_TRANSACTION\n                //  Status.STATUS_COMMITTED\n                tm.suspend();                       // clear current tx state and throw EJBException\n                throw EjbMessages.MESSAGES.transactionInUnexpectedState(tx, statusAsString(txStatus));\n            }\n        } catch (RollbackException e) {\n            handleEndTransactionException(e);\n        } catch (HeuristicMixedException e) {\n            handleEndTransactionException(e);\n        } catch (HeuristicRollbackException e) {\n            handleEndTransactionException(e);\n        } catch (SystemException e) {\n            handleEndTransactionException(e);\n        }\n    }","commit_id":"dc103a926d48145db2980b03a34333ce35b9038b","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            if (response.getStatus() != ClientResponse.SUCCESS) {\n                // Batch failed queue it for individual processing and find out which actually m_errored.\n                m_log.info(\"Unable to insert rows in a batch.  Attempting to insert them one-by-one.\");\n                m_log.info(\"Note: this will result in reduced insertion performance.\");\n                m_log.debug(\"Batch Failed Will be processed by Failure Processor: \" + response.getStatusString());\n                m_processor.m_partitionProcessedCount.addAndGet(-1 * m_batchList.size());\n                if (!m_processor.m_errored) {\n                    //If we have not reached the limit continue pushing to failure processor only if\n                    //failure processor is available.\n                    if (m_failedQueue != null) {\n                        m_failedQueue.addAll(m_batchList);\n                    }\n                }\n                m_batchWaitCount.decrementAndGet();\n                return;\n            }\n            //Successful invocations.\n            m_batchWaitCount.decrementAndGet();\n            long executed = response.getResults()[0].asScalarLong();\n            long currentCount = CSVPartitionProcessor.m_partitionAcknowledgedCount.addAndGet(executed);\n            int newMultiple = (int) currentCount / m_reportEveryNRows;\n            if (newMultiple != lastMultiple.get()) {\n                lastMultiple.set(newMultiple);\n                m_log.info(\"Inserted \" + currentCount + \" rows\");\n            }\n        }","id":94896,"modified_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            byte status = response.getStatus();\n            if (status > ClientResponse.OPERATIONAL_FAILURE && status < ClientResponse.UNEXPECTED_FAILURE) {\n                m_log.fatal(\"Fatal Response from server for batch. Please check health of the server. Status: \"\n                        + response.getStatusString());\n                System.out.println(\"Fatal Response from server for batch. Please check health of the server. Status: \"\n                        + response.getStatusString());\n                System.exit(1);\n            }\n            if (status != ClientResponse.SUCCESS) {\n                // Batch failed queue it for individual processing and find out which actually m_errored.\n                m_log.info(\"Unable to insert rows in a batch.  Attempting to insert them one-by-one.\");\n                m_log.info(\"Note: this will result in reduced insertion performance.\");\n                m_log.debug(\"Batch Failed Will be processed by Failure Processor: \" + response.getStatusString());\n                m_processor.m_partitionProcessedCount.addAndGet(-1 * m_batchList.size());\n                if (!m_processor.m_errored) {\n                    //If we have not reached the limit continue pushing to failure processor only if\n                    //failure processor is available.\n                    if (m_failedQueue != null) {\n                        m_failedQueue.addAll(m_batchList);\n                    }\n                }\n                m_batchWaitCount.decrementAndGet();\n                return;\n            }\n            //Successful invocations.\n            m_batchWaitCount.decrementAndGet();\n            long executed = response.getResults()[0].asScalarLong();\n            long currentCount = CSVPartitionProcessor.m_partitionAcknowledgedCount.addAndGet(executed);\n            int newMultiple = (int) currentCount / m_reportEveryNRows;\n            if (newMultiple != lastMultiple.get()) {\n                lastMultiple.set(newMultiple);\n                m_log.info(\"Inserted \" + currentCount + \" rows\");\n            }\n        }","commit_id":"69f85fba915536e86c4ad325acbcba4e8a4dd2f8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            //one insert at a time callback\n            if (response.getStatus() != ClientResponse.SUCCESS) {\n                String[] info = {m_csvLine.rawLine.toString(), response.getStatusString()};\n                if (CSVFileReader.synchronizeErrorInfo(m_csvLine.lineNumber, info)) {\n                    m_processor.m_errored = true;\n                    return;\n                }\n                m_log.error(response.getStatusString());\n                return;\n            }\n            long currentCount = CSVPartitionProcessor.m_partitionAcknowledgedCount.incrementAndGet();\n\n            if (currentCount % m_reportEveryNRows == 0) {\n                m_log.info(\"Inserted \" + currentCount + \" rows\");\n            }\n        }","id":94897,"modified_method":"@Override\n        public void clientCallback(ClientResponse response) throws Exception {\n            byte status = response.getStatus();\n            if (status > ClientResponse.OPERATIONAL_FAILURE && status < ClientResponse.UNEXPECTED_FAILURE) {\n                m_log.fatal(\"Fatal Response from server for: \" + response.getStatusString()\n                        + \" for: \" + m_csvLine.rawLine.toString());\n                System.out.println(\"Fatal Response from server for: \" + response.getStatusString()\n                        + \" for: \" + m_csvLine.rawLine.toString());\n                System.exit(1);\n            }\n            if (status == ClientResponse.RESPONSE_UNKNOWN) {\n                String[] info = {m_csvLine.rawLine.toString(), response.getStatusString()};\n                if (CSVFileReader.synchronizeErrorInfo(m_csvLine.lineNumber, info)) {\n                    m_processor.m_errored = true;\n                    return;\n                }\n                m_log.error(response.getStatusString());\n                return;\n            }\n            long currentCount = CSVPartitionProcessor.m_partitionAcknowledgedCount.incrementAndGet();\n\n            if (currentCount % m_reportEveryNRows == 0) {\n                m_log.info(\"Inserted \" + currentCount + \" rows\");\n            }\n        }","commit_id":"69f85fba915536e86c4ad325acbcba4e8a4dd2f8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public static List<SNode> replaceNodeMenu_InstanceMethodCall_getParameterObjects(SNode referenceNode) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode instance = SLinkOperations.getTarget(referenceNode, \"instance\", true);\n    if(instance == null) {\n      return result;\n    }\n    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);\n    if(instanceType == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope(instanceType, IClassifiersSearchScope.INSTANCE_FIELD);\n    result = (List)BaseLanguageSearchUtil.getFieldsExcludingOverridden(classHierarchy);\n    return result;\n  }","id":94898,"modified_method":"public static List<SNode> replaceNodeMenu_InstanceMethodCall_getParameterObjects(SNode referenceNode) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode instance = SLinkOperations.getTarget(referenceNode, \"instance\", true);\n    if(instance == null) {\n      return result;\n    }\n    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);\n    if(instanceType == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil_new.createClassifierHierarchyScope((jetbrains.mps.baseLanguage.structure.ClassifierType)BaseAdapter.fromNode(instanceType), IClassifiersSearchScope.INSTANCE_FIELD);\n    result = (List)BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getFieldsExcludingOverridden(classHierarchy));\n    return result;\n  }","commit_id":"3eec80d242159f5b34b53e9f3837bbe874aeabbc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<SNode> replaceNodeMenu_EnumConstantReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"enumClass\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);\n    List staticFields = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getFieldsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticFields);\n    List staticMethods = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticMethods);\n    return result;\n  }","id":94899,"modified_method":"public static List<SNode> replaceNodeMenu_EnumConstantReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"enumClass\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil_new.createClassifierHierarchyScope((Classifier)BaseAdapter.fromNode(classifier), IClassifiersSearchScope.STATIC_MEMBER);\n    List staticFields = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getFieldsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticFields);\n    List staticMethods = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticMethods);\n    return result;\n  }","commit_id":"3eec80d242159f5b34b53e9f3837bbe874aeabbc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<SNode> replaceNodeMenu_FieldReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode instance = SLinkOperations.getTarget(node, \"instance\", true);\n    if(instance == null) {\n      return result;\n    }\n    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);\n    if(instanceType == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope(instanceType, IClassifiersSearchScope.INSTANCE_METHOD);\n    result = (List)BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    return result;\n  }","id":94900,"modified_method":"public static List<SNode> replaceNodeMenu_FieldReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode instance = SLinkOperations.getTarget(node, \"instance\", true);\n    if(instance == null) {\n      return result;\n    }\n    ClassifierType instanceType = BaseLanguageTypesUtil.tryObtain_ClassifierType((Expression)instance);\n    if(instanceType == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil_new.createClassifierHierarchyScope((jetbrains.mps.baseLanguage.structure.ClassifierType)BaseAdapter.fromNode(instanceType), IClassifiersSearchScope.INSTANCE_METHOD);\n    result = (List)BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    return result;\n  }","commit_id":"3eec80d242159f5b34b53e9f3837bbe874aeabbc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<SNode> replaceNodeMenu_StaticFieldReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"classifier\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);\n    List staticMethods = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticMethods);\n    List<SNode> allStaticMembers = classHierarchy.getNodes();\n    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate(null, null)));\n    return result;\n  }","id":94901,"modified_method":"public static List<SNode> replaceNodeMenu_StaticFieldReference_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"classifier\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil_new.createClassifierHierarchyScope((Classifier)BaseAdapter.fromNode(classifier), IClassifiersSearchScope.STATIC_MEMBER);\n    List staticMethods = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getMethodsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticMethods);\n    List<SNode> allStaticMembers = classHierarchy.getNodes();\n    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate(null, null)));\n    return result;\n  }","commit_id":"3eec80d242159f5b34b53e9f3837bbe874aeabbc","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<SNode> replaceNodeMenu_StaticMethodCall_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"classConcept\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil.createClassifierHierarchyScope((Classifier)classifier, IClassifiersSearchScope.STATIC_MEMBER);\n    List staticFields = BaseLanguageSearchUtil.getFieldsExcludingOverridden(classHierarchy);\n    ListOperations.addAllElements(result, (List<SNode>)staticFields);\n    List<SNode> allStaticMembers = classHierarchy.getNodes();\n    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate1(null, null)));\n    return result;\n  }","id":94902,"modified_method":"public static List<SNode> replaceNodeMenu_StaticMethodCall_getParameterObjects(SNode node) {\n    List<SNode> result = new LinkedList<SNode>();\n    SNode classifier = SLinkOperations.getTarget(node, \"classConcept\", false);\n    if(classifier == null) {\n      return result;\n    }\n    ISearchScope classHierarchy = BaseLanguageSearchUtil_new.createClassifierHierarchyScope((Classifier)BaseAdapter.fromNode(classifier), IClassifiersSearchScope.STATIC_MEMBER);\n    List staticFields = BaseAdapter.toNodes(BaseLanguageSearchUtil_new.getFieldsExcludingOverridden(classHierarchy));\n    ListOperations.addAllElements(result, (List<SNode>)staticFields);\n    List<SNode> allStaticMembers = classHierarchy.getNodes();\n    ListOperations.addAllElements(result, SequenceOperations.where(allStaticMembers, new zPredicate1(null, null)));\n    return result;\n  }","commit_id":"3eec80d242159f5b34b53e9f3837bbe874aeabbc","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected void updateAssetClassTypeId() throws Exception {\n\t\tlong classNameId = PortalUtil.getClassNameId(JournalArticle.class);\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tString sql = SQLTransformer.transform(\n\t\t\t\t\"select resourcePrimKey, structureId from JournalArticle \" +\n\t\t\t\t\t\"where structureId != ''\");\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong resourcePrimKey = rs.getLong(\"resourcePrimKey\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\n\t\t\t\tlong journalStructureId = getJournalStructureId(structureId);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update AssetEntry set classTypeId = \" +\n\t\t\t\t\t\tjournalStructureId + \" where classNameId = \" +\n\t\t\t\t\t\t\tclassNameId + \" and classPK = \" + resourcePrimKey);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94903,"modified_method":"protected void updateAssetClassTypeId() throws Exception {\n\t\tlong classNameId = PortalUtil.getClassNameId(JournalArticle.class);\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select resourcePrimKey, structureId from JournalArticle \" +\n\t\t\t\t\t\"where structureId != ''\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong resourcePrimKey = rs.getLong(\"resourcePrimKey\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\n\t\t\t\tlong journalStructureId = getJournalStructureId(structureId);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update AssetEntry set classTypeId = \" +\n\t\t\t\t\t\tjournalStructureId + \" where classNameId = \" +\n\t\t\t\t\t\t\tclassNameId + \" and classPK = \" + resourcePrimKey);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateAssetClassTypeId() throws Exception {\n\t\tlong classNameId = PortalUtil.getClassNameId(JournalArticle.class);\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tString sql = SQLTransformer.transform(\n\t\t\t\t\"select resourcePrimKey, structureId from JournalArticle \" +\n\t\t\t\t\t\"where structureId != ''\");\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong resourcePrimKey = rs.getLong(\"resourcePrimKey\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\n\t\t\t\tlong journalStructureId = getJournalStructureId(structureId);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update AssetEntry set classTypeId = \" +\n\t\t\t\t\t\tjournalStructureId + \" where classNameId = \" +\n\t\t\t\t\t\t\tclassNameId + \" and classPK = \" + resourcePrimKey);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94904,"modified_method":"protected void updateAssetClassTypeId() throws Exception {\n\t\tlong classNameId = PortalUtil.getClassNameId(JournalArticle.class);\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select resourcePrimKey, structureId from JournalArticle \" +\n\t\t\t\t\t\"where structureId != ''\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong resourcePrimKey = rs.getLong(\"resourcePrimKey\");\n\t\t\t\tString structureId = rs.getString(\"structureId\");\n\n\t\t\t\tlong journalStructureId = getJournalStructureId(structureId);\n\n\t\t\t\trunSQL(\n\t\t\t\t\t\"update AssetEntry set classTypeId = \" +\n\t\t\t\t\t\tjournalStructureId + \" where classNameId = \" +\n\t\t\t\t\t\t\tclassNameId + \" and classPK = \" + resourcePrimKey);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateSourcePrototypeLayoutUuid() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\t// Get pages with a sourcePrototypeLayoutUuid that have a page\n\t\t\t// template. If the layoutUuid points to a page template, remove\n\t\t\t// it. Otherwise, it points to a site template page, so leave it.\n\n\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\tsb.append(\"select plid, layoutPrototypeUuid, \");\n\t\t\tsb.append(\"sourcePrototypeLayoutUuid from Layout where \");\n\t\t\tsb.append(\"layoutPrototypeUuid != '' and \");\n\t\t\tsb.append(\"sourcePrototypeLayoutUuid != ''\");\n\n\t\t\tString sql = sb.toString();\n\n\t\t\tsql = SQLTransformer.transform(sql);\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong plid = rs.getLong(\"plid\");\n\t\t\t\tString layoutPrototypeUuid = rs.getString(\n\t\t\t\t\t\"layoutPrototypeUuid\");\n\t\t\t\tString sourcePrototypeLayoutUuid = rs.getString(\n\t\t\t\t\t\"sourcePrototypeLayoutUuid\");\n\n\t\t\t\tlong groupId = getLayoutPrototypeGroupId(layoutPrototypeUuid);\n\n\t\t\t\tif (groupId == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (isGroupPrivateLayout(groupId, sourcePrototypeLayoutUuid)) {\n\t\t\t\t\trunSQL(\n\t\t\t\t\t\t\"update Layout set sourcePrototypeLayoutUuid = null \" +\n\t\t\t\t\t\t\t\"where plid = \" + plid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94905,"modified_method":"protected void updateSourcePrototypeLayoutUuid() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\t// Get pages with a sourcePrototypeLayoutUuid that have a page\n\t\t\t// template. If the layoutUuid points to a page template, remove\n\t\t\t// it. Otherwise, it points to a site template page, so leave it.\n\n\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\tsb.append(\"select plid, layoutPrototypeUuid, \");\n\t\t\tsb.append(\"sourcePrototypeLayoutUuid from Layout where \");\n\t\t\tsb.append(\"layoutPrototypeUuid != '' and \");\n\t\t\tsb.append(\"sourcePrototypeLayoutUuid != ''\");\n\n\t\t\tps = con.prepareStatement(sb.toString());\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong plid = rs.getLong(\"plid\");\n\t\t\t\tString layoutPrototypeUuid = rs.getString(\n\t\t\t\t\t\"layoutPrototypeUuid\");\n\t\t\t\tString sourcePrototypeLayoutUuid = rs.getString(\n\t\t\t\t\t\"sourcePrototypeLayoutUuid\");\n\n\t\t\t\tlong groupId = getLayoutPrototypeGroupId(layoutPrototypeUuid);\n\n\t\t\t\tif (groupId == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (isGroupPrivateLayout(groupId, sourcePrototypeLayoutUuid)) {\n\t\t\t\t\trunSQL(\n\t\t\t\t\t\t\"update Layout set sourcePrototypeLayoutUuid = null \" +\n\t\t\t\t\t\t\t\"where plid = \" + plid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void assignSingleApproverWorkflowRoles(\n\t\t\tlong companyId, long roleId, long groupId)\n\t\tthrows Exception {\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select classNameId from Group_ where groupId = ?\");\n\n\t\t\tps.setLong(1, groupId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tlong classNameId = 0;\n\n\t\t\tif (rs.next()) {\n\t\t\t\tclassNameId = rs.getLong(\"classNameId\");\n\t\t\t}\n\n\t\t\tString className = PortalUtil.getClassName(classNameId);\n\n\t\t\tlong communityContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_COMMUNITY_CONTENT_REVIEWER);\n\t\t\tlong organizationContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_ORGANIZATION_CONTENT_REVIEWER);\n\t\t\tlong portalContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_PORTAL_CONTENT_REVIEWER);\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"(select User_.* from User_, Users_Roles where \");\n\t\t\tsb.append(\"User_.userId = Users_Roles.userId and \");\n\t\t\tsb.append(\"Users_Roles.roleId = ?) union all (select User_.* \");\n\t\t\tsb.append(\"from User_, UserGroupRole where User_.userId = \");\n\t\t\tsb.append(\"UserGroupRole.userId and UserGroupRole.roleId = ?)\");\n\n\t\t\tString sql = sb.toString();\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\tps.setLong(1, roleId);\n\t\t\tps.setLong(2, roleId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\n\t\t\t\tif (className.equals(Company.class.getName())) {\n\t\t\t\t\taddUserRole(userId, portalContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t\telse if (className.equals(Group.class.getName())) {\n\t\t\t\t\taddUserGroupRole(\n\t\t\t\t\t\tuserId, groupId, communityContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t\telse if (className.equals(Organization.class.getName())) {\n\t\t\t\t\taddUserGroupRole(\n\t\t\t\t\t\tuserId, groupId, organizationContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94906,"modified_method":"protected void assignSingleApproverWorkflowRoles(\n\t\t\tlong companyId, long roleId, long groupId)\n\t\tthrows Exception {\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select classNameId from Group_ where groupId = ?\");\n\n\t\t\tps.setLong(1, groupId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tlong classNameId = 0;\n\n\t\t\tif (rs.next()) {\n\t\t\t\tclassNameId = rs.getLong(\"classNameId\");\n\t\t\t}\n\n\t\t\tString className = PortalUtil.getClassName(classNameId);\n\n\t\t\tlong communityContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_COMMUNITY_CONTENT_REVIEWER);\n\t\t\tlong organizationContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_ORGANIZATION_CONTENT_REVIEWER);\n\t\t\tlong portalContentReviewerRoleId = getRoleId(\n\t\t\t\tcompanyId, _ROLE_PORTAL_CONTENT_REVIEWER);\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"(select User_.* from User_, Users_Roles where \");\n\t\t\tsb.append(\"User_.userId = Users_Roles.userId and \");\n\t\t\tsb.append(\"Users_Roles.roleId = ?) union all (select User_.* \");\n\t\t\tsb.append(\"from User_, UserGroupRole where User_.userId = \");\n\t\t\tsb.append(\"UserGroupRole.userId and UserGroupRole.roleId = ?)\");\n\n\t\t\tps = con.prepareStatement(sb.toString());\n\n\t\t\tps.setLong(1, roleId);\n\t\t\tps.setLong(2, roleId);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong userId = rs.getLong(\"userId\");\n\n\t\t\t\tif (className.equals(Company.class.getName())) {\n\t\t\t\t\taddUserRole(userId, portalContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t\telse if (className.equals(Group.class.getName())) {\n\t\t\t\t\taddUserGroupRole(\n\t\t\t\t\t\tuserId, groupId, communityContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t\telse if (className.equals(Organization.class.getName())) {\n\t\t\t\t\taddUserGroupRole(\n\t\t\t\t\t\tuserId, groupId, organizationContentReviewerRoleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updatePermissions() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"select ResourcePermission.companyId, \");\n\t\t\tsb.append(\"ResourcePermission.roleId, ResourcePermission.primKey \");\n\t\t\tsb.append(\"from ResourcePermission, ResourceAction where \");\n\t\t\tsb.append(\"ResourceAction.name = 'com.liferay.portlet.journal' \");\n\t\t\tsb.append(\"and ResourceAction.name = ResourcePermission.name and \");\n\t\t\tsb.append(\"ResourceAction.actionId = 'APPROVE_ARTICLE' and \");\n\t\t\tsb.append(\"ResourcePermission.scope = 4 and \");\n\t\t\tsb.append(\"ResourcePermission.actionIds >= \");\n\t\t\tsb.append(\"ResourceAction.bitwiseValue and \");\n\t\t\tsb.append(\"mod((ResourcePermission.actionIds / \");\n\t\t\tsb.append(\"ResourceAction.bitwiseValue), 2) = 1\");\n\n\t\t\tString sql = sb.toString();\n\n\t\t\tsql = SQLTransformer.transform(sql);\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong roleId = rs.getLong(\"roleId\");\n\t\t\t\tlong groupId = GetterUtil.getLong(rs.getString(\"primKey\"));\n\n\t\t\t\tassignSingleApproverWorkflowRoles(companyId, roleId, groupId);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94907,"modified_method":"protected void updatePermissions() throws Exception {\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\tsb.append(\"select ResourcePermission.companyId, \");\n\t\t\tsb.append(\"ResourcePermission.roleId, ResourcePermission.primKey \");\n\t\t\tsb.append(\"from ResourcePermission, ResourceAction where \");\n\t\t\tsb.append(\"ResourceAction.name = 'com.liferay.portlet.journal' \");\n\t\t\tsb.append(\"and ResourceAction.name = ResourcePermission.name and \");\n\t\t\tsb.append(\"ResourceAction.actionId = 'APPROVE_ARTICLE' and \");\n\t\t\tsb.append(\"ResourcePermission.scope = 4 and \");\n\t\t\tsb.append(\"ResourcePermission.actionIds >= \");\n\t\t\tsb.append(\"ResourceAction.bitwiseValue and \");\n\t\t\tsb.append(\"mod((ResourcePermission.actionIds / \");\n\t\t\tsb.append(\"ResourceAction.bitwiseValue), 2) = 1\");\n\n\t\t\tps = con.prepareStatement(sb.toString());\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong companyId = rs.getLong(\"companyId\");\n\t\t\t\tlong roleId = rs.getLong(\"roleId\");\n\t\t\t\tlong groupId = GetterUtil.getLong(rs.getString(\"primKey\"));\n\n\t\t\t\tassignSingleApproverWorkflowRoles(companyId, roleId, groupId);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void verifyRecurrence() throws Exception {\n\t\tJSONSerializer jsonSerializer = new JSONSerializer();\n\n\t\tjsonSerializer.registerDefaultSerializers();\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tString sql = SQLTransformer.transform(\n\t\t\t\t\"select eventId, recurrence from CalEvent where (CAST_TEXT(\" +\n\t\t\t\t\t\"recurrence) != '') and recurrence not like \" +\n\t\t\t\t\t\t\"'%serializable%'\");\n\n\t\t\tps = con.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong eventId = rs.getLong(\"eventId\");\n\t\t\t\tString recurrence = rs.getString(\"recurrence\");\n\n\t\t\t\tTZSRecurrence recurrenceObj = null;\n\n\t\t\t\tif (Validator.isNotNull(recurrence)) {\n\t\t\t\t\trecurrenceObj = (TZSRecurrence)jsonSerializer.fromJSON(\n\t\t\t\t\t\trecurrence);\n\t\t\t\t}\n\n\t\t\t\tString newRecurrence = JSONFactoryUtil.serialize(recurrenceObj);\n\n\t\t\t\tupdateEvent(eventId, newRecurrence);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","id":94908,"modified_method":"protected void verifyRecurrence() throws Exception {\n\t\tJSONSerializer jsonSerializer = new JSONSerializer();\n\n\t\tjsonSerializer.registerDefaultSerializers();\n\n\t\tConnection con = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tcon = DataAccess.getUpgradeOptimizedConnection();\n\n\t\t\tps = con.prepareStatement(\n\t\t\t\t\"select eventId, recurrence from CalEvent where (CAST_TEXT(\" +\n\t\t\t\t\t\"recurrence) != '') and recurrence not like \" +\n\t\t\t\t\t\t\"'%serializable%'\");\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tlong eventId = rs.getLong(\"eventId\");\n\t\t\t\tString recurrence = rs.getString(\"recurrence\");\n\n\t\t\t\tTZSRecurrence recurrenceObj = null;\n\n\t\t\t\tif (Validator.isNotNull(recurrence)) {\n\t\t\t\t\trecurrenceObj = (TZSRecurrence)jsonSerializer.fromJSON(\n\t\t\t\t\t\trecurrence);\n\t\t\t\t}\n\n\t\t\t\tString newRecurrence = JSONFactoryUtil.serialize(recurrenceObj);\n\n\t\t\t\tupdateEvent(eventId, newRecurrence);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tDataAccess.cleanUp(con, ps, rs);\n\t\t}\n\t}","commit_id":"3fa301590e19119d17efda9706200305496230f3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tif (status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\tif (status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t}\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","id":94909,"modified_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tString storageType = ParameterMap.getKeyedString(parameters, \"response-type\", \"single\");\n\n\t\tif (storageType.equals(\"single\") && status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t} else if (storageType.equals(\"multi\") && status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\t\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","commit_id":"afe1d348a90cbe6f47e06eef46b55399d88d4779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tLong timestamp = System.currentTimeMillis();\n\n\t\tStatisticalArrayList<Long> sal = new StatisticalArrayList<Long>(responseTimes);\n\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add((new Integer(sal.countNull())).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(sal.median().toString());\n\t\t\n\t\tLong responseTime = 0L;\n\t\t\n\t\tfor (int i = 0; i < sal.size(); i++) {\n\t\t\tresponseTime = sal.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","id":94910,"modified_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add(new Long(CollectionMath.countNull(responseTimes)).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(CollectionMath.median(responseTimes).toString());\n\t\t\n\t\tArrayList<Long> al = new ArrayList<Long>(responseTimes);\n\t\tLong responseTime = -1L;\n\t\t\n\t\tfor (int i = 0; i < al.size(); i++) {\n\t\t\tresponseTime = al.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","commit_id":"afe1d348a90cbe6f47e06eef46b55399d88d4779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/recv) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availibility of the interface and if a transition event\n     *         should be supressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tStatisticalArrayList<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tint retries = ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries());\n\t\t\tlong timeout = ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout());\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(rtt.averageAsInt());\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","id":94911,"modified_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/receive) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availability of the interface and if a transition event\n     *         should be suppressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tCollection<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tpinger.setRetries(ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries()));\n\t\t\tpinger.setTimeout(ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout()));\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(CollectionMath.average(rtt));\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","commit_id":"afe1d348a90cbe6f47e06eef46b55399d88d4779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public StatisticalArrayList<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        StatisticalArrayList<Long> returnval = new StatisticalArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","id":94912,"modified_method":"public Collection<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        Collection<Long> returnval = new ArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","commit_id":"afe1d348a90cbe6f47e06eef46b55399d88d4779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tLong timestamp = System.currentTimeMillis();\n\n\t\tStatisticalArrayList<Long> sal = new StatisticalArrayList<Long>(responseTimes);\n\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add((new Integer(sal.countNull())).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(sal.median().toString());\n\t\t\n\t\tLong responseTime = 0L;\n\t\t\n\t\tfor (int i = 0; i < sal.size(); i++) {\n\t\t\tresponseTime = sal.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","id":94913,"modified_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add(new Long(CollectionMath.countNull(responseTimes)).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(CollectionMath.median(responseTimes).toString());\n\t\t\n\t\tArrayList<Long> al = new ArrayList<Long>(responseTimes);\n\t\tLong responseTime = -1L;\n\t\t\n\t\tfor (int i = 0; i < al.size(); i++) {\n\t\t\tresponseTime = al.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","commit_id":"6c8d71e8aca41b437bb6568329748cb6992b7ac3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tif (status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\tif (status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t}\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","id":94914,"modified_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tString storageType = ParameterMap.getKeyedString(parameters, \"response-type\", \"single\");\n\n\t\tif (storageType.equals(\"single\") && status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t} else if (storageType.equals(\"multi\") && status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\t\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","commit_id":"6c8d71e8aca41b437bb6568329748cb6992b7ac3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/recv) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availibility of the interface and if a transition event\n     *         should be supressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tStatisticalArrayList<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tint retries = ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries());\n\t\t\tlong timeout = ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout());\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(rtt.averageAsInt());\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","id":94915,"modified_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/receive) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availability of the interface and if a transition event\n     *         should be suppressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tCollection<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tpinger.setRetries(ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries()));\n\t\t\tpinger.setTimeout(ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout()));\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(CollectionMath.average(rtt));\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","commit_id":"6c8d71e8aca41b437bb6568329748cb6992b7ac3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public StatisticalArrayList<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        StatisticalArrayList<Long> returnval = new StatisticalArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","id":94916,"modified_method":"public Collection<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        Collection<Long> returnval = new ArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","commit_id":"6c8d71e8aca41b437bb6568329748cb6992b7ac3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tif (status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\tif (status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t}\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","id":94917,"modified_method":"public PollStatus poll(MonitoredService svc, Map parameters) {\n\t\tPollStatus status = m_serviceMonitor.poll(svc, parameters);\n\t\tString storageType = ParameterMap.getKeyedString(parameters, \"response-type\", \"single\");\n\n\t\tif (storageType.equals(\"single\") && status.getResponseTime() >= 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTime(), parameters);\n\t\t} else if (storageType.equals(\"multi\") && status.getResponseTimes() != null && status.getResponseTimes().size() > 0) {\n\t\t\tstoreResponseTime(svc, status.getResponseTimes(), parameters);\n\t\t}\n\t\t\n        if (\"true\".equals(ParameterMap.getKeyedString(parameters, \"invert-status\", \"false\"))) {\n            if (status.isAvailable()) {\n                return PollStatus.unavailable(\"This is an inverted service and the underlying service has started responding\");\n            } else {\n                return PollStatus.available();\n            }\n        }\n\t\treturn status;\n\t}","commit_id":"e7487a054c212f3b577d5e92b4cb745515afb7e9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tLong timestamp = System.currentTimeMillis();\n\n\t\tStatisticalArrayList<Long> sal = new StatisticalArrayList<Long>(responseTimes);\n\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add((new Integer(sal.countNull())).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(sal.median().toString());\n\t\t\n\t\tLong responseTime = 0L;\n\t\t\n\t\tfor (int i = 0; i < sal.size(); i++) {\n\t\t\tresponseTime = sal.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","id":94918,"modified_method":"private void storeResponseTime(MonitoredService svc, Collection<Long> responseTimes, Map parameters) {\n\t\tString rrdPath = ParameterMap.getKeyedString(parameters, \"rrd-repository\", null);\n\t\tString rrdBaseName = ParameterMap.getKeyedString(parameters, \"rrd-base-name\", DEFAULT_MULTI_BASENAME);\n\t\t\n\t\tif (rrdPath == null) {\n\t\t\tlog().info(\"storeResponseTime(multi): RRD repository not specified in parameters, latency data will not be stored.\");\n\t\t}\n\t\t\n\t\tList<String> dsNames = new ArrayList<String>();\n\t\tList<String> values  = new ArrayList<String>();\n\t\t\n\t\tdsNames.add(\"loss\");\n\t\tvalues.add(new Long(CollectionMath.countNull(responseTimes)).toString());\n\t\t\n\t\tdsNames.add(\"median\");\n\t\tvalues.add(CollectionMath.median(responseTimes).toString());\n\t\t\n\t\tArrayList<Long> al = new ArrayList<Long>(responseTimes);\n\t\tLong responseTime = -1L;\n\t\t\n\t\tfor (int i = 0; i < al.size(); i++) {\n\t\t\tresponseTime = al.get(i);\n\t\t\tdsNames.add(\"ping\" + (i + 1));\n\t\t\tif (responseTime == null) {\n\t\t\t\tvalues.add(\"\");\n\t\t\t} else {\n\t\t\t\tvalues.add(responseTime.toString());\n\t\t\t}\n\t\t}\n\t\tupdateRRD(rrdPath, svc.getAddress(), rrdBaseName, dsNames, values);\n\t}","commit_id":"e7487a054c212f3b577d5e92b4cb745515afb7e9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/recv) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availibility of the interface and if a transition event\n     *         should be supressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tStatisticalArrayList<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tint retries = ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries());\n\t\t\tlong timeout = ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout());\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(rtt.averageAsInt());\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","id":94919,"modified_method":"/**\n     * <P>\n     * Poll the specified address for ICMP service availability.\n     * <\/P>\n     * \n     * <P>\n     * The ICMP service monitor relies on Discovery for the actual generation of\n     * IMCP 'ping' requests. A JSDT session with two channels (send/receive) is\n     * utilized for passing poll requests and receiving poll replies from\n     * discovery. All exchanges are SOAP/XML compliant.\n     * <\/P>\n     * @param parameters\n     *            The package parameters (timeout, retry, etc...) to be used for\n     *            this poll.\n     * @param iface\n     *            The network interface to test the service on.\n     * @return The availability of the interface and if a transition event\n     *         should be suppressed.\n     * \n     */\n    public PollStatus poll(MonitoredService svc, Map parameters) {\n        NetworkInterface iface = svc.getNetInterface();\n\n        // Get interface address from NetworkInterface\n        //\n        if (iface.getType() != NetworkInterface.TYPE_IPV4)\n            throw new NetworkInterfaceNotSupportedException(\"Unsupported interface type, only TYPE_IPV4 currently supported\");\n\n        Category log = ThreadCategory.getInstance(this.getClass());\n        PollStatus serviceStatus = PollStatus.unavailable();\n\t\tInetAddress host = (InetAddress) iface.getAddress();\n\t\tCollection<Long> rtt = null;\n\t\t\n\t\ttry {\n\t\t\tPinger pinger = new Pinger();\n\t\t\t\n\t\t\t// get parameters\n\t\t\t//\n\t\t\tpinger.setRetries(ParameterMap.getKeyedInteger(parameters, \"retry\", pinger.getRetries()));\n\t\t\tpinger.setTimeout(ParameterMap.getKeyedLong(parameters, \"timeout\", pinger.getTimeout()));\n\t\t\tint count = ParameterMap.getKeyedInteger(parameters, \"pings\", DEFAULT_MULTI_PING_COUNT);\n\t\t\t\n\t\t\trtt = pinger.parallelPing(host, count);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\"failed to ping \" + host, e);\n\t\t}\n        \n        if (rtt != null) {\n        \tserviceStatus = PollStatus.available();\n        \tserviceStatus.setResponseTime(CollectionMath.average(rtt));\n        \tserviceStatus.setResponseTimes(rtt);\n        }\n        \n        return serviceStatus;\n    }","commit_id":"e7487a054c212f3b577d5e92b4cb745515afb7e9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public StatisticalArrayList<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        StatisticalArrayList<Long> returnval = new StatisticalArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","id":94920,"modified_method":"public Collection<Long> parallelPing(InetAddress host, int count) throws IOException {\n        Category log = ThreadCategory.getInstance(this.getClass());\n        Collection<Long> returnval = new ArrayList<Long>();\n        \n        Long tidKey = getTidKey();\n        ArrayList<PingRequest> requests = new ArrayList<PingRequest>();\n        parallelWaiting.put(tidKey, requests);\n        for (int i = 0; i < count; i++) {\n        \tshort sid = sequenceId++;\n        \tPingRequest reply = new PingRequest(host, sid);\n        \tlog.debug(\"sending packet with ID '\" + tidKey + \"' and sequence '\" + reply.getSequenceId());\n        \trequests.add(reply);\n        \tDatagramPacket pkt = getDatagram(host, tidKey, reply.getSequenceId());\n        \tsynchronized(reply) {\n        \t\tsendPacket(pkt);\n        \t}\n       \t\ttry {\n       \t\t\tThread.sleep(100);\n       \t\t} catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n       \t\t}\n        }\n        \n        try {\n            Thread.sleep(timeout);\n            synchronized(requests) {\n            \trequests.wait(1);\n            }\n        } catch (InterruptedException ex) {\n            // interrupted so return, reset interrupt.\n            Thread.currentThread().interrupt();\n        }\n        \n        for (PingRequest reply : requests) {\n        \tif (reply.isSignaled()) {\n        \t\tLong rtt = getRTT(reply);\n        \t\tif (rtt <= timeout * 1000) {\n        \t\t\treturnval.add(rtt);\n        \t\t} else {\n        \t\t\tlog.debug(\"a response came back, but it was too old: sid = \" + reply.getSequenceId() + \", rtt = \" + rtt);\n        \t\t\treturnval.add(null);\n        \t\t}\n    \t\t} else {\n    \t\t\tlog.debug(\"no response came back: sid = \" + reply.getSequenceId());\n    \t\t\treturnval.add(null);\n        \t}\n        }\n        \n        parallelWaiting.remove(tidKey);\n\n        return returnval;\n\t}","commit_id":"e7487a054c212f3b577d5e92b4cb745515afb7e9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public EntityTag getETag(HProjectIteration iteration, String id) {\n\t\tHDocument doc = getByDocId(iteration, id);\n\t\tif( doc == null ) \n\t\t\treturn null;\n\t\treturn EntityTag.valueOf( String.valueOf(doc.getRevision()) );\n\t}","id":94921,"modified_method":"public EntityTag getETag(HProjectIteration iteration, String id, StringSet extensions) {\n\t\tHDocument doc = getByDocId(iteration, id);\n\t\tif( doc == null ) \n\t\t\treturn null;\n\t\tInteger hashcode = 1;\n\t\thashcode += doc.getRevision() * 37;\n\t\t\n\t\tint extHash = 0;\n\t\tif( extensions.contains(PoHeader.ID) ) {\n\t\t\tHPoHeader header = doc.getPoHeader();\n\t\t\tif(header != null) {\n\t\t\t\textHash =  header.getVersionNum();\n\t\t\t}\n\t\t}\n\t\thashcode += extHash * 37;\n\t\t\n\t\treturn EntityTag.valueOf( String.valueOf( hashcode) );\n\t}","commit_id":"f4d9e7d66e508e87b99a24364b597590e2ef1622","url":"https://github.com/zanata/zanata-server"},{"original_method":"@POST\n\t@Restrict(\"#{identity.loggedIn}\")\n\tpublic Response doPost(InputStream messageBody) {\n\n\t\tHProjectIteration hProjectIteration = retrieveIteration();\n\n\t\tvalidateExtensions();\n\n\t\tSourceResource entity = unmarshallEntity(SourceResource.class, messageBody);\n\t\tRestUtils.validateEntity(entity);\n\n\t\t\n\t\tHDocument document = documentDAO.getByDocId(hProjectIteration, entity.getName()); \n\t\tif(document != null) {\n\t\t\tif( !document.isObsolete() ) {\n\t\t\t\t// updates happens through PUT on the actual resource\n\t\t\t\treturn Response.status(Status.CONFLICT)\n\t\t\t\t\t.entity(\"A document with name \" + entity.getName() +\" already exists.\")\n\t\t\t\t\t.build();\n\t\t\t}\n\t\t\t// a deleted document is being created again \n\t\t\tdocument.setObsolete(false);\n\t\t}\n\t\telse {\n\t\t\tdocument = new HDocument(entity.getName(),entity.getContentType());\n\t\t\tdocument.setProjectIteration(hProjectIteration);\n\t\t}\n\t\t\n\t\tdocumentUtils.transfer(entity, document);\n\n\t\tdocument = documentDAO.makePersistent(document);\n\t\tdocumentDAO.flush();\n\n\t\t// handle extensions\n\t\t\n\t\t// po header\n\t\tif( extensions.contains(PoHeader.ID) ) {\n\t\t\tPoHeader poHeaderExt = entity.getExtensions().findByType(PoHeader.class);\n\t\t\tif(poHeaderExt != null) {\n\t\t\t\tHPoHeader poHeader = new HPoHeader();\n\t\t\t\tpoHeader.setDocument(document);\n\t\t\t\tdocument.setPoHeader(poHeader);\n\t\t\t\tdocumentUtils.transfer(poHeaderExt, poHeader);\n\t\t\t\tdocumentDAO.flush();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// TODO include extensions in etag generation\n\t\tEntityTag etag = documentDAO.getETag(hProjectIteration, document.getDocId());\n\t\t\n\t\treturn Response.created(URI.create(\"r/\"+documentUtils.encodeDocId(document.getDocId())))\n\t\t\t.tag(etag).build();\n\t}","id":94922,"modified_method":"@POST\n\t@Restrict(\"#{identity.loggedIn}\")\n\tpublic Response doPost(InputStream messageBody) {\n\n\t\tHProjectIteration hProjectIteration = retrieveIteration();\n\n\t\tvalidateExtensions();\n\n\t\tSourceResource entity = unmarshallEntity(SourceResource.class, messageBody);\n\t\tRestUtils.validateEntity(entity);\n\n\t\t\n\t\tHDocument document = documentDAO.getByDocId(hProjectIteration, entity.getName()); \n\t\tif(document != null) {\n\t\t\tif( !document.isObsolete() ) {\n\t\t\t\t// updates happens through PUT on the actual resource\n\t\t\t\treturn Response.status(Status.CONFLICT)\n\t\t\t\t\t.entity(\"A document with name \" + entity.getName() +\" already exists.\")\n\t\t\t\t\t.build();\n\t\t\t}\n\t\t\t// a deleted document is being created again \n\t\t\tdocument.setObsolete(false);\n\t\t}\n\t\telse {\n\t\t\tdocument = new HDocument(entity.getName(),entity.getContentType());\n\t\t\tdocument.setProjectIteration(hProjectIteration);\n\t\t}\n\t\t\n\t\tdocumentUtils.transfer(entity, document);\n\n\t\tdocument = documentDAO.makePersistent(document);\n\t\tdocumentDAO.flush();\n\n\t\t// handle extensions\n\t\t\n\t\t// po header\n\t\tif ( documentUtils.transfer(entity.getExtensions(), document, extensions) ) {\n\t\t\tdocumentDAO.flush();\n\t\t}\n\t\t\n\t\t// TODO include extensions in etag generation\n\t\tEntityTag etag = documentDAO.getETag(hProjectIteration, document.getDocId(), extensions);\n\t\t\n\t\treturn Response.created(URI.create(\"r/\"+documentUtils.encodeDocId(document.getDocId())))\n\t\t\t.tag(etag).build();\n\t}","commit_id":"f4d9e7d66e508e87b99a24364b597590e2ef1622","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n     * returns the position in the data file to find the given key, or -1 if the key is not present\n     */\n    public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException\n    {\n        if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))\n            return null;\n        if (keyCache != null)\n        {\n            PositionSize cachedPosition = keyCache.get(decoratedKey);\n            if (cachedPosition != null)\n            {\n                return cachedPosition;\n            }\n        }\n        KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);\n        if (sampledPosition == null)\n        {\n            return null;\n        }\n        if (spannedIndexDataPositions != null)\n        {\n            PositionSize info = spannedIndexDataPositions.get(sampledPosition);\n            if (info != null)\n                return info;\n        }\n\n        FileDataInput input = new MappedFileDataInput(indexBuffer, indexFilename());\n        input.seek(sampledPosition.position);\n        int i = 0;\n        do\n        {\n            DecoratedKey indexDecoratedKey;\n            try\n            {\n                indexDecoratedKey = partitioner.convertFromDiskFormat(input.readUTF());\n            }\n            catch (EOFException e)\n            {\n                return null;\n            }\n            long position = input.readLong();\n            int v = indexDecoratedKey.compareTo(decoratedKey);\n            if (v == 0)\n            {\n                PositionSize info;\n                if (input.getFilePointer() < input.length())\n                {\n                    int utflen = input.readUnsignedShort();\n                    input.skipBytes(utflen);\n                    info = new PositionSize(position, input.readLong() - position);\n                }\n                else\n                {\n                    info = new PositionSize(position, length() - position);\n                }\n                if (keyCache != null)\n                    keyCache.put(decoratedKey, info);\n                return info;\n            }\n            if (v > 0)\n                return null;\n        } while  (++i < INDEX_INTERVAL);\n        return null;\n    }","id":94923,"modified_method":"/**\n     * returns the position in the data file to find the given key, or -1 if the key is not present\n     */\n    public PositionSize getPosition(DecoratedKey decoratedKey) throws IOException\n    {\n        if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))\n            return null;\n        if (keyCache != null)\n        {\n            PositionSize cachedPosition = keyCache.get(decoratedKey);\n            if (cachedPosition != null)\n            {\n                return cachedPosition;\n            }\n        }\n        KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);\n        if (sampledPosition == null)\n        {\n            return null;\n        }\n        if (spannedIndexDataPositions != null)\n        {\n            PositionSize info = spannedIndexDataPositions.get(sampledPosition);\n            if (info != null)\n                return info;\n        }\n\n        long p = sampledPosition.position;\n        FileDataInput input;\n        if (indexBuffers == null)\n        {\n            input = new BufferedRandomAccessFile(indexFilename(), \"r\");\n            input.seek(p);\n        }\n        else\n        {\n            input = new MappedFileDataInput(indexBuffers[bufferIndex(p)], indexFilename(), (int)(p % BUFFER_SIZE));\n        }\n        try\n        {\n            int i = 0;\n            do\n            {\n                DecoratedKey indexDecoratedKey;\n                try\n                {\n                    indexDecoratedKey = partitioner.convertFromDiskFormat(input.readUTF());\n                }\n                catch (EOFException e)\n                {\n                    return null;\n                }\n                long position = input.readLong();\n                int v = indexDecoratedKey.compareTo(decoratedKey);\n                if (v == 0)\n                {\n                    PositionSize info;\n                    if (input.getFilePointer() < input.length())\n                    {\n                        int utflen = input.readUnsignedShort();\n                        if (utflen != input.skipBytes(utflen))\n                            throw new EOFException();\n                        info = new PositionSize(position, input.readLong() - position);\n                    }\n                    else\n                    {\n                        info = new PositionSize(position, length() - position);\n                    }\n                    if (keyCache != null)\n                        keyCache.put(decoratedKey, info);\n                    return info;\n                }\n                if (v > 0)\n                    return null;\n            } while  (++i < INDEX_INTERVAL);\n        }\n        finally\n        {\n            input.close();\n        }\n        return null;\n    }","commit_id":"33acfcd657bfdd844960de2d6c816a9be1e6f0aa","url":"https://github.com/apache/cassandra"},{"original_method":"private static MappedByteBuffer mmap(String filename, int start, int size) throws IOException\n    {\n        RandomAccessFile raf;\n        try\n        {\n            raf = new RandomAccessFile(filename, \"r\");\n        }\n        catch (FileNotFoundException e)\n        {\n            throw new IOError(e);\n        }\n\n        if (size < 0)\n        {\n            if (raf.length() > Integer.MAX_VALUE)\n                throw new UnsupportedOperationException(\"File \" + filename + \" is too large to map in its entirety\");\n            size = (int) raf.length();\n        }\n        try\n        {\n            return raf.getChannel().map(FileChannel.MapMode.READ_ONLY, start, size);\n        }\n        finally\n        {\n            raf.close();\n        }\n    }","id":94924,"modified_method":"private static MappedByteBuffer mmap(String filename, long start, int size) throws IOException\n    {\n        RandomAccessFile raf;\n        try\n        {\n            raf = new RandomAccessFile(filename, \"r\");\n        }\n        catch (FileNotFoundException e)\n        {\n            throw new IOError(e);\n        }\n\n        try\n        {\n            return raf.getChannel().map(FileChannel.MapMode.READ_ONLY, start, size);\n        }\n        finally\n        {\n            raf.close();\n        }\n    }","commit_id":"33acfcd657bfdd844960de2d6c816a9be1e6f0aa","url":"https://github.com/apache/cassandra"},{"original_method":"SSTableReader(String filename,\n                  IPartitioner partitioner,\n                  List<KeyPosition> indexPositions, Map<KeyPosition, PositionSize> spannedIndexDataPositions,\n                  BloomFilter bloomFilter,\n                  ConcurrentLinkedHashMap<DecoratedKey, PositionSize> keyCache)\n            throws IOException\n    {\n        super(filename, partitioner);\n        indexBuffer = mmap(indexFilename());\n        if (DatabaseDescriptor.getDiskAccessMode() == DatabaseDescriptor.DiskAccessMode.mmap)\n        {\n            int bufferCount = 1 + (int) (new File(path).length() / BUFFER_SIZE);\n            buffers = new MappedByteBuffer[bufferCount];\n            long remaining = length();\n            for (int i = 0; i < bufferCount; i++)\n            {\n                buffers[i] = mmap(path, i * BUFFER_SIZE, (int) Math.min(remaining, BUFFER_SIZE));\n                remaining -= BUFFER_SIZE;\n            }\n        }\n        else\n        {\n            assert DatabaseDescriptor.getDiskAccessMode() == DatabaseDescriptor.DiskAccessMode.standard;\n            buffers = null;\n        }\n\n        this.indexPositions = indexPositions;\n        this.spannedIndexDataPositions = spannedIndexDataPositions;\n        this.bf = bloomFilter;\n        phantomReference = new FileDeletingReference(this, finalizerQueue);\n        finalizers.add(phantomReference);\n        openedFiles.put(filename, this);\n        this.keyCache = keyCache;\n    }","id":94925,"modified_method":"SSTableReader(String filename,\n                  IPartitioner partitioner,\n                  List<KeyPosition> indexPositions, Map<KeyPosition, PositionSize> spannedIndexDataPositions,\n                  BloomFilter bloomFilter,\n                  ConcurrentLinkedHashMap<DecoratedKey, PositionSize> keyCache)\n            throws IOException\n    {\n        super(filename, partitioner);\n\n        if (DatabaseDescriptor.getIndexAccessMode() == DatabaseDescriptor.DiskAccessMode.mmap)\n        {\n            long indexLength = new File(indexFilename()).length();\n            int bufferCount = 1 + (int) (indexLength / BUFFER_SIZE);\n            indexBuffers = new MappedByteBuffer[bufferCount];\n            long remaining = indexLength;\n            for (int i = 0; i < bufferCount; i++)\n            {\n                indexBuffers[i] = mmap(indexFilename(), i * BUFFER_SIZE, (int) Math.min(remaining, BUFFER_SIZE));\n                remaining -= BUFFER_SIZE;\n            }\n        }\n        else\n        {\n            assert DatabaseDescriptor.getIndexAccessMode() == DatabaseDescriptor.DiskAccessMode.standard;\n            indexBuffers = null;\n        }\n\n        if (DatabaseDescriptor.getDiskAccessMode() == DatabaseDescriptor.DiskAccessMode.mmap)\n        {\n            int bufferCount = 1 + (int) (new File(path).length() / BUFFER_SIZE);\n            buffers = new MappedByteBuffer[bufferCount];\n            long remaining = length();\n            for (int i = 0; i < bufferCount; i++)\n            {\n                buffers[i] = mmap(path, i * BUFFER_SIZE, (int) Math.min(remaining, BUFFER_SIZE));\n                remaining -= BUFFER_SIZE;\n            }\n        }\n        else\n        {\n            assert DatabaseDescriptor.getDiskAccessMode() == DatabaseDescriptor.DiskAccessMode.standard;\n            buffers = null;\n        }\n\n        this.indexPositions = indexPositions;\n        this.spannedIndexDataPositions = spannedIndexDataPositions;\n        this.bf = bloomFilter;\n        phantomReference = new FileDeletingReference(this, finalizerQueue);\n        finalizers.add(phantomReference);\n        openedFiles.put(filename, this);\n        this.keyCache = keyCache;\n    }","commit_id":"33acfcd657bfdd844960de2d6c816a9be1e6f0aa","url":"https://github.com/apache/cassandra"},{"original_method":"/** like getPosition, but if key is not found will return the location of the first key _greater_ than the desired one, or -1 if no such key exists. */\n    public long getNearestPosition(DecoratedKey decoratedKey) throws IOException\n    {\n        KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);\n        if (sampledPosition == null)\n        {\n            return 0;\n        }\n\n        // by default, we plan to start scanning at the nearest bsearched index entry\n        long start = sampledPosition.position;\n        if (spannedIndexDataPositions != null)\n        {\n            // check if the index entry spans a mmap segment boundary\n            PositionSize info = spannedIndexDataPositions.get(sampledPosition);\n            if (info != null)\n            {\n                // if the key matches the index entry we don't have to scan the index after all\n                if (sampledPosition.key.compareTo(decoratedKey) == 0)\n                    return info.position;\n                // otherwise, start scanning at the next entry (which won't span a boundary;\n                // if it did it would have been in the index sample and we would have started with that instead)\n                start = info.position + sampledPosition.key.serializedSize() + (Long.SIZE / 8);\n            }\n        }\n\n        BufferedRandomAccessFile input = new BufferedRandomAccessFile(indexFilename(path), \"r\");\n        input.seek(start);\n        try\n        {\n            while (true)\n            {\n                DecoratedKey indexDecoratedKey;\n                try\n                {\n                    indexDecoratedKey = partitioner.convertFromDiskFormat(input.readUTF());\n                }\n                catch (EOFException e)\n                {\n                    return -1;\n                }\n                long position = input.readLong();\n                int v = indexDecoratedKey.compareTo(decoratedKey);\n                if (v >= 0)\n                    return position;\n            }\n        }\n        finally\n        {\n            input.close();\n        }\n    }","id":94926,"modified_method":"/** like getPosition, but if key is not found will return the location of the first key _greater_ than the desired one, or -1 if no such key exists. */\n    public long getNearestPosition(DecoratedKey decoratedKey) throws IOException\n    {\n        KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);\n        if (sampledPosition == null)\n        {\n            return 0;\n        }\n\n        // can't use a MappedFileDataInput here, since we might cross a segment boundary while scanning\n        BufferedRandomAccessFile input = new BufferedRandomAccessFile(indexFilename(path), \"r\");\n        input.seek(sampledPosition.position);\n        try\n        {\n            while (true)\n            {\n                DecoratedKey indexDecoratedKey;\n                try\n                {\n                    indexDecoratedKey = partitioner.convertFromDiskFormat(input.readUTF());\n                }\n                catch (EOFException e)\n                {\n                    return -1;\n                }\n                long position = input.readLong();\n                int v = indexDecoratedKey.compareTo(decoratedKey);\n                if (v >= 0)\n                    return position;\n            }\n        }\n        finally\n        {\n            input.close();\n        }\n    }","commit_id":"33acfcd657bfdd844960de2d6c816a9be1e6f0aa","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n\t * Skip the index\n\t * @param file the data input from which the index should be skipped\n\t * @throws IOException\n\t */\n\tpublic static void skipIndex(DataInput file) throws IOException\n\t{\n        /* read only the column index list */\n        int columnIndexSize = file.readInt();\n        /* skip the column index data */\n        file.skipBytes(columnIndexSize);\n\t}","id":94927,"modified_method":"/**\n\t * Skip the index\n\t * @param file the data input from which the index should be skipped\n\t * @throws IOException\n\t */\n\tpublic static void skipIndex(DataInput file) throws IOException\n\t{\n        /* read only the column index list */\n        int columnIndexSize = file.readInt();\n        /* skip the column index data */\n        if (file.skipBytes(columnIndexSize) != columnIndexSize)\n            throw new EOFException();\n\t}","commit_id":"f82eb0bb54f8734ecd859b86cd4208dbe47b959f","url":"https://github.com/apache/cassandra"},{"original_method":"/**\n     * Skip the bloom filter\n     * @param in the data input from which the bloom filter should be skipped\n     * @throws IOException\n     */\n    public static void skipBloomFilter(DataInput in) throws IOException\n    {\n        /* size of the bloom filter */\n        int size = in.readInt();\n        /* skip the serialized bloom filter */\n        in.skipBytes(size);\n    }","id":94928,"modified_method":"/**\n     * Skip the bloom filter\n     * @param in the data input from which the bloom filter should be skipped\n     * @throws IOException\n     */\n    public static void skipBloomFilter(DataInput in) throws IOException\n    {\n        /* size of the bloom filter */\n        int size = in.readInt();\n        /* skip the serialized bloom filter */\n        if (in.skipBytes(size) != size)\n            throw new EOFException();\n    }","commit_id":"f82eb0bb54f8734ecd859b86cd4208dbe47b959f","url":"https://github.com/apache/cassandra"},{"original_method":"public void append(DecoratedKey decoratedKey, DataOutputBuffer buffer) throws IOException\n    {\n        long currentPosition = beforeAppend(decoratedKey);\n        dataFile.writeUTF(partitioner.convertToDiskFormat(decoratedKey));\n        int length = buffer.getLength();\n        dataFile.writeInt(length);\n        dataFile.write(buffer.getData(), 0, length);\n        afterAppend(decoratedKey, currentPosition);\n    }","id":94929,"modified_method":"public void append(DecoratedKey decoratedKey, DataOutputBuffer buffer) throws IOException\n    {\n        long currentPosition = beforeAppend(decoratedKey);\n        dataFile.writeUTF(partitioner.convertToDiskFormat(decoratedKey));\n        int length = buffer.getLength();\n        assert length > 0;\n        dataFile.writeInt(length);\n        dataFile.write(buffer.getData(), 0, length);\n        afterAppend(decoratedKey, currentPosition);\n    }","commit_id":"f82eb0bb54f8734ecd859b86cd4208dbe47b959f","url":"https://github.com/apache/cassandra"},{"original_method":"public void append(DecoratedKey decoratedKey, byte[] value) throws IOException\n    {\n        long currentPosition = beforeAppend(decoratedKey);\n        dataFile.writeUTF(partitioner.convertToDiskFormat(decoratedKey));\n        dataFile.writeInt(value.length);\n        dataFile.write(value);\n        afterAppend(decoratedKey, currentPosition);\n    }","id":94930,"modified_method":"public void append(DecoratedKey decoratedKey, byte[] value) throws IOException\n    {\n        long currentPosition = beforeAppend(decoratedKey);\n        dataFile.writeUTF(partitioner.convertToDiskFormat(decoratedKey));\n        assert value.length > 0;\n        dataFile.writeInt(value.length);\n        dataFile.write(value);\n        afterAppend(decoratedKey, currentPosition);\n    }","commit_id":"f82eb0bb54f8734ecd859b86cd4208dbe47b959f","url":"https://github.com/apache/cassandra"},{"original_method":"protected void refresh() {\n            HistoryOsmPrimitive p = getPrimitive();\n            HistoryOsmPrimitive  opposite = getOppositePrimitive();\n            if (p == null || ! ( p instanceof HistoryNode)) return;\n            if (opposite == null || ! (opposite instanceof HistoryNode)) return;\n            HistoryNode node = (HistoryNode)p;\n            HistoryNode oppositeNode = (HistoryNode) opposite;\n\n            // display the coordinates\n            //\n            lblLat.setText(node.getCoords().latToString(CoordinateFormat.DECIMAL_DEGREES));\n            lblLon.setText(node.getCoords().lonToString(CoordinateFormat.DECIMAL_DEGREES));\n\n            // update background color to reflect differences in the coordinates\n            //\n            if (node.getCoords().lat() == oppositeNode.getCoords().lat()) {\n                lblLat.setBackground(Color.WHITE);\n            } else {\n                lblLat.setBackground(BGCOLOR_DIFFERENCE);\n            }\n            if (node.getCoords().lon() == oppositeNode.getCoords().lon()) {\n                lblLon.setBackground(Color.WHITE);\n            } else {\n                lblLon.setBackground(BGCOLOR_DIFFERENCE);\n            }\n\n        }","id":94931,"modified_method":"protected void refresh() {\n            HistoryOsmPrimitive p = getPrimitive();\n            HistoryOsmPrimitive  opposite = getOppositePrimitive();\n            if (p == null || ! ( p instanceof HistoryNode)) return;\n            if (opposite == null || ! (opposite instanceof HistoryNode)) return;\n            HistoryNode node = (HistoryNode)p;\n            HistoryNode oppositeNode = (HistoryNode) opposite;\n\n            LatLon coord = node.getCoords();\n            LatLon oppositeCoord = oppositeNode.getCoords();\n            \n            // display the coordinates\n            //\n            lblLat.setText(coord != null ? coord.latToString(CoordinateFormat.DECIMAL_DEGREES) : tr(\"Deleted\"));\n            lblLon.setText(coord != null ? coord.lonToString(CoordinateFormat.DECIMAL_DEGREES) : tr(\"Deleted\"));\n\n            // update background color to reflect differences in the coordinates\n            //\n            if (coord == oppositeCoord || \n                    (coord != null && oppositeCoord != null && coord.lat() == oppositeCoord.lat())) {\n                lblLat.setBackground(Color.WHITE);\n            } else {\n                lblLat.setBackground(BGCOLOR_DIFFERENCE);\n            }\n            if (coord == oppositeCoord || \n                    (coord != null && oppositeCoord != null && coord.lon() == oppositeCoord.lon())) {\n                lblLon.setBackground(Color.WHITE);\n            } else {\n                lblLon.setBackground(BGCOLOR_DIFFERENCE);\n            }\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected void refresh() {\n            HistoryOsmPrimitive p = getPrimitive();\n            HistoryOsmPrimitive opposite = getOppositePrimitive();\n            if (p == null || ! ( p instanceof HistoryNode)) return;\n            if (opposite == null || ! (opposite instanceof HistoryNode)) return;\n            HistoryNode node = (HistoryNode) p;\n            HistoryNode oppositeNode = (HistoryNode) opposite;\n\n            // update distance\n            //\n            double distance = node.getCoords().greatCircleDistance(oppositeNode.getCoords());\n            if (distance > 0) {\n                lblDistance.setBackground(BGCOLOR_DIFFERENCE);\n            } else {\n                lblDistance.setBackground(Color.WHITE);\n            }\n            lblDistance.setText(NavigatableComponent.getDistText(distance));\n        }","id":94932,"modified_method":"protected void refresh() {\n            HistoryOsmPrimitive p = getPrimitive();\n            HistoryOsmPrimitive opposite = getOppositePrimitive();\n            if (p == null || ! ( p instanceof HistoryNode)) return;\n            if (opposite == null || ! (opposite instanceof HistoryNode)) return;\n            HistoryNode node = (HistoryNode) p;\n            HistoryNode oppositeNode = (HistoryNode) opposite;\n\n            LatLon coord = node.getCoords();\n            LatLon oppositeCoord = oppositeNode.getCoords();\n            \n            // update distance\n            //\n            if (coord != null && oppositeCoord != null) {\n                double distance = coord.greatCircleDistance(oppositeCoord);\n                if (distance > 0) {\n                    lblDistance.setBackground(BGCOLOR_DIFFERENCE);\n                } else {\n                    lblDistance.setBackground(Color.WHITE);\n                }\n                lblDistance.setText(NavigatableComponent.getDistText(distance));\n            } else {\n                lblDistance.setBackground(coord != oppositeCoord ? BGCOLOR_DIFFERENCE : Color.WHITE);\n                lblDistance.setText(tr(\"Deleted\"));\n            }\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n     * Formats a name for a history node\n     *\n     * @param node the node\n     * @return the name\n     */\n    public String format(HistoryNode node) {\n        StringBuilder sb = new StringBuilder();\n        String name;\n        if (Main.pref.getBoolean(\"osm-primitives.localize-name\", true)) {\n            name = node.getLocalName();\n        } else {\n            name = node.getName();\n        }\n        if (name == null) {\n            sb.append(node.getId());\n        } else {\n            sb.append(name);\n        }\n        sb.append(\" (\")\n        .append(node.getCoords().latToString(CoordinateFormat.getDefaultFormat()))\n        .append(\", \")\n        .append(node.getCoords().lonToString(CoordinateFormat.getDefaultFormat()))\n        .append(\")\");\n        decorateNameWithId(sb, node);\n        return sb.toString();\n    }","id":94933,"modified_method":"/**\n     * Formats a name for a history node\n     *\n     * @param node the node\n     * @return the name\n     */\n    public String format(HistoryNode node) {\n        StringBuilder sb = new StringBuilder();\n        String name;\n        if (Main.pref.getBoolean(\"osm-primitives.localize-name\", true)) {\n            name = node.getLocalName();\n        } else {\n            name = node.getName();\n        }\n        if (name == null) {\n            sb.append(node.getId());\n        } else {\n            sb.append(name);\n        }\n        LatLon coord = node.getCoords();\n        if (coord != null) {\n            sb.append(\" (\")\n            .append(coord.latToString(CoordinateFormat.getDefaultFormat()))\n            .append(\", \")\n            .append(coord.lonToString(CoordinateFormat.getDefaultFormat()))\n            .append(\")\");\n        }\n        decorateNameWithId(sb, node);\n        return sb.toString();\n    }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected  HistoryOsmPrimitive createPrimitive(Attributes atts, OsmPrimitiveType type) throws SAXException {\n            long id = getMandatoryAttributeLong(atts,\"id\");\n            long version = getMandatoryAttributeLong(atts,\"version\");\n            long changesetId = getMandatoryAttributeLong(atts,\"changeset\");\n            boolean visible= getMandatoryAttributeBoolean(atts, \"visible\");\n            \n            Long uid = getAttributeLong(atts, \"uid\");\n            String userStr = atts.getValue(\"user\");\n            User user;\n            if (userStr != null) {\n                if (uid != null) {\n                    user = User.createOsmUser(uid, userStr);\n                } else {\n                    user = User.createLocalUser(userStr);\n                }\n            } else {\n                user = User.getAnonymous();\n            }\n\n            String v = getMandatoryAttributeString(atts, \"timestamp\");\n            Date timestamp = DateUtils.fromString(v);\n            HistoryOsmPrimitive primitive = null;\n            if (type.equals(OsmPrimitiveType.NODE)) {\n                double lat = getMandatoryAttributeDouble(atts, \"lat\");\n                double lon = getMandatoryAttributeDouble(atts, \"lon\");\n                primitive = new HistoryNode(\n                        id,version,visible,user,changesetId,timestamp, new LatLon(lat,lon)\n                );\n\n            } else if (type.equals(OsmPrimitiveType.WAY)) {\n                primitive = new HistoryWay(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }if (type.equals(OsmPrimitiveType.RELATION)) {\n                primitive = new HistoryRelation(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }\n            return primitive;\n        }","id":94934,"modified_method":"protected  HistoryOsmPrimitive createPrimitive(Attributes atts, OsmPrimitiveType type) throws SAXException {\n            long id = getMandatoryAttributeLong(atts,\"id\");\n            long version = getMandatoryAttributeLong(atts,\"version\");\n            long changesetId = getMandatoryAttributeLong(atts,\"changeset\");\n            boolean visible= getMandatoryAttributeBoolean(atts, \"visible\");\n            \n            Long uid = getAttributeLong(atts, \"uid\");\n            String userStr = atts.getValue(\"user\");\n            User user;\n            if (userStr != null) {\n                if (uid != null) {\n                    user = User.createOsmUser(uid, userStr);\n                } else {\n                    user = User.createLocalUser(userStr);\n                }\n            } else {\n                user = User.getAnonymous();\n            }\n\n            String v = getMandatoryAttributeString(atts, \"timestamp\");\n            Date timestamp = DateUtils.fromString(v);\n            HistoryOsmPrimitive primitive = null;\n            if (type.equals(OsmPrimitiveType.NODE)) {\n                Double lat = getAttributeDouble(atts, \"lat\");\n                Double lon = getAttributeDouble(atts, \"lon\");\n                LatLon coor = (lat != null && lon != null) ? new LatLon(lat,lon) : null;\n                primitive = new HistoryNode(\n                        id,version,visible,user,changesetId,timestamp,coor\n                );\n\n            } else if (type.equals(OsmPrimitiveType.WAY)) {\n                primitive = new HistoryWay(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }if (type.equals(OsmPrimitiveType.RELATION)) {\n                primitive = new HistoryRelation(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }\n            return primitive;\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected Double getMandatoryAttributeDouble(Attributes attr, String name) throws SAXException{\n            String v = attr.getValue(name);\n            if (v == null) {\n                throwException(tr(\"Missing mandatory attribute ''{0}''.\", name));\n            }\n            double d = 0.0;\n            try {\n                d = Double.parseDouble(v);\n            } catch(NumberFormatException e) {\n                throwException(tr(\"Illegal value for mandatory attribute ''{0}'' of type double. Got ''{1}''.\", name, v));\n            }\n            return d;\n        }","id":94935,"modified_method":"protected Double getAttributeDouble(Attributes attr, String name) throws SAXException{\n            String v = attr.getValue(name);\n            if (v == null) {\n                return null;\n            }\n            double d = 0.0;\n            try {\n                d = Double.parseDouble(v);\n            } catch(NumberFormatException e) {\n                throwException(tr(\"Illegal value for attribute ''{0}'' of type double. Got ''{1}''.\", name, v));\n            }\n            return d;\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected  HistoryOsmPrimitive createPrimitive(Attributes atts, OsmPrimitiveType type) throws SAXException {\n            long id = getMandatoryAttributeLong(atts,\"id\");\n            long version = getMandatoryAttributeLong(atts,\"version\");\n            long changesetId = getMandatoryAttributeLong(atts,\"changeset\");\n            boolean visible= getMandatoryAttributeBoolean(atts, \"visible\");\n            Long uid = getAttributeLong(atts, \"uid\");\n            String userStr = atts.getValue(\"user\");\n            User user;\n            if (userStr != null) {\n                if (uid != null) {\n                    user = User.createOsmUser(uid, userStr);\n                } else {\n                    user = User.createLocalUser(userStr);\n                }\n            } else {\n                user = User.getAnonymous();\n            }\n            String v = getMandatoryAttributeString(atts, \"timestamp\");\n            Date timestamp = DateUtils.fromString(v);\n            HistoryOsmPrimitive primitive = null;\n            if (type.equals(OsmPrimitiveType.NODE)) {\n                double lat = getMandatoryAttributeDouble(atts, \"lat\");\n                double lon = getMandatoryAttributeDouble(atts, \"lon\");\n                primitive = new HistoryNode(\n                        id,version,visible,user,changesetId,timestamp, new LatLon(lat,lon)\n                );\n\n            } else if (type.equals(OsmPrimitiveType.WAY)) {\n                primitive = new HistoryWay(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }if (type.equals(OsmPrimitiveType.RELATION)) {\n                primitive = new HistoryRelation(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }\n            return primitive;\n        }","id":94936,"modified_method":"protected  HistoryOsmPrimitive createPrimitive(Attributes atts, OsmPrimitiveType type) throws SAXException {\n            long id = getMandatoryAttributeLong(atts,\"id\");\n            long version = getMandatoryAttributeLong(atts,\"version\");\n            long changesetId = getMandatoryAttributeLong(atts,\"changeset\");\n            boolean visible= getMandatoryAttributeBoolean(atts, \"visible\");\n            Long uid = getAttributeLong(atts, \"uid\");\n            String userStr = atts.getValue(\"user\");\n            User user;\n            if (userStr != null) {\n                if (uid != null) {\n                    user = User.createOsmUser(uid, userStr);\n                } else {\n                    user = User.createLocalUser(userStr);\n                }\n            } else {\n                user = User.getAnonymous();\n            }\n            String v = getMandatoryAttributeString(atts, \"timestamp\");\n            Date timestamp = DateUtils.fromString(v);\n            HistoryOsmPrimitive primitive = null;\n            if (type.equals(OsmPrimitiveType.NODE)) {\n                Double lat = getAttributeDouble(atts, \"lat\");\n                Double lon = getAttributeDouble(atts, \"lon\");\n                LatLon coord = (lat != null && lon != null) ? new LatLon(lat,lon) : null;\n                primitive = new HistoryNode(\n                        id,version,visible,user,changesetId,timestamp,coord\n                );\n\n            } else if (type.equals(OsmPrimitiveType.WAY)) {\n                primitive = new HistoryWay(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }if (type.equals(OsmPrimitiveType.RELATION)) {\n                primitive = new HistoryRelation(\n                        id,version,visible,user,changesetId,timestamp\n                );\n            }\n            return primitive;\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected Double getMandatoryAttributeDouble(Attributes attr, String name) throws SAXException{\n            String v = attr.getValue(name);\n            if (v == null) {\n                throwException(tr(\"Missing mandatory attribute ''{0}''.\", name));\n            }\n            double d = 0.0;\n            try {\n                d = Double.parseDouble(v);\n            } catch(NumberFormatException e) {\n                throwException(tr(\"Illegal value for mandatory attribute ''{0}'' of type double. Got ''{1}''.\", name, v));\n            }\n            return d;\n        }","id":94937,"modified_method":"protected Double getAttributeDouble(Attributes attr, String name) throws SAXException{\n            String v = attr.getValue(name);\n            if (v == null) {\n                return null;\n            }\n            double d = 0.0;\n            try {\n                d = Double.parseDouble(v);\n            } catch(NumberFormatException e) {\n                throwException(tr(\"Illegal value for attribute ''{0}'' of type double. Got ''{1}''.\", name, v));\n            }\n            return d;\n        }","commit_id":"254e17f3a275c1cc70300cbbf241ef2b831f7770","url":"https://github.com/openstreetmap/josm"},{"original_method":"protected void processSyncFile(SyncFile targetSyncFile) {\n\t\tSyncFile parentSyncFile = SyncFileService.fetchSyncFile(\n\t\t\ttargetSyncFile.getRepositoryId(), getSyncAccountId(),\n\t\t\ttargetSyncFile.getParentFolderId());\n\n\t\tif (parentSyncFile == null) {\n\t\t\tqueueSyncFile(targetSyncFile.getParentFolderId(), targetSyncFile);\n\n\t\t\treturn;\n\t\t}\n\n\t\tString filePathName = \"\";\n\n\t\ttry {\n\t\t\tfilePathName = FileUtil.getFilePathName(\n\t\t\t\tparentSyncFile.getFilePathName(),\n\t\t\t\tFileUtil.getSanitizedFileName(\n\t\t\t\t\ttargetSyncFile.getName(), targetSyncFile.getExtension()));\n\n\t\t\tSyncFile sourceSyncFile = SyncFileService.fetchSyncFile(\n\t\t\t\ttargetSyncFile.getRepositoryId(), getSyncAccountId(),\n\t\t\t\ttargetSyncFile.getTypePK());\n\n\t\t\tif (isIgnoredFilePath(sourceSyncFile, filePathName) ||\n\t\t\t\t((sourceSyncFile != null) &&\n\t\t\t\t (sourceSyncFile.getModifiedTime() ==\n\t\t\t\t\t targetSyncFile.getModifiedTime()))) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (sourceSyncFile != null) {\n\t\t\t\tsourceSyncFile.setState(SyncFile.STATE_IN_PROGRESS);\n\t\t\t}\n\n\t\t\ttargetSyncFile.setFilePathName(filePathName);\n\t\t\ttargetSyncFile.setState(SyncFile.STATE_IN_PROGRESS);\n\n\t\t\tString event = targetSyncFile.getEvent();\n\n\t\t\tif (event.equals(SyncFile.EVENT_ADD) ||\n\t\t\t\tevent.equals(SyncFile.EVENT_GET)) {\n\n\t\t\t\tif (sourceSyncFile != null) {\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\n\t\t\t\t\tprocessDependentSyncFiles(sourceSyncFile);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_DELETE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeleteFile(sourceSyncFile, targetSyncFile);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_MOVE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\n\t\t\t\t\tprocessDependentSyncFiles(targetSyncFile);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if (sourceSyncFile.getParentFolderId() ==\n\t\t\t\t\t\t\ttargetSyncFile.getParentFolderId()) {\n\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\n\t\t\t\t\tprocessDependentSyncFiles(targetSyncFile);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmoveFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_RESTORE)) {\n\t\t\t\tif (sourceSyncFile != null) {\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\n\t\t\t\t\tprocessDependentSyncFiles(sourceSyncFile);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if (isParentUnsynced(targetSyncFile)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetSyncFile.setLocalExtraSetting(\"restoreEvent\", true);\n\n\t\t\t\tSyncFileService.update(targetSyncFile);\n\n\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_TRASH)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeleteFile(sourceSyncFile, targetSyncFile);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_UPDATE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\n\t\t\t\t\tprocessDependentSyncFiles(targetSyncFile);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t}\n\n\t\t\tprocessDependentSyncFiles(targetSyncFile);\n\t\t}\n\t\tcatch (FileSystemException fse) {\n\t\t\tString message = fse.getMessage();\n\n\t\t\tif (message.contains(\"File name too long\")) {\n\t\t\t\ttargetSyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\t\ttargetSyncFile.setUiEvent(SyncFile.UI_EVENT_FILE_NAME_TOO_LONG);\n\n\t\t\t\tSyncFileService.update(targetSyncFile);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_logger.error(e.getMessage(), e);\n\t\t}\n\t}","id":94938,"modified_method":"protected void processSyncFile(SyncFile targetSyncFile) {\n\t\tSyncFile parentSyncFile = SyncFileService.fetchSyncFile(\n\t\t\ttargetSyncFile.getRepositoryId(), getSyncAccountId(),\n\t\t\ttargetSyncFile.getParentFolderId());\n\n\t\tif (parentSyncFile == null) {\n\t\t\tqueueSyncFile(targetSyncFile.getParentFolderId(), targetSyncFile);\n\n\t\t\treturn;\n\t\t}\n\n\t\tString filePathName = \"\";\n\n\t\ttry {\n\t\t\tfilePathName = FileUtil.getFilePathName(\n\t\t\t\tparentSyncFile.getFilePathName(),\n\t\t\t\tFileUtil.getSanitizedFileName(\n\t\t\t\t\ttargetSyncFile.getName(), targetSyncFile.getExtension()));\n\n\t\t\tSyncFile sourceSyncFile = SyncFileService.fetchSyncFile(\n\t\t\t\ttargetSyncFile.getRepositoryId(), getSyncAccountId(),\n\t\t\t\ttargetSyncFile.getTypePK());\n\n\t\t\tif (isIgnoredFilePath(sourceSyncFile, filePathName) ||\n\t\t\t\t((sourceSyncFile != null) &&\n\t\t\t\t (sourceSyncFile.getModifiedTime() ==\n\t\t\t\t\t targetSyncFile.getModifiedTime()))) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (sourceSyncFile != null) {\n\t\t\t\tsourceSyncFile.setState(SyncFile.STATE_IN_PROGRESS);\n\t\t\t}\n\n\t\t\ttargetSyncFile.setFilePathName(filePathName);\n\t\t\ttargetSyncFile.setState(SyncFile.STATE_IN_PROGRESS);\n\n\t\t\tString event = targetSyncFile.getEvent();\n\n\t\t\tif (event.equals(SyncFile.EVENT_ADD) ||\n\t\t\t\tevent.equals(SyncFile.EVENT_GET)) {\n\n\t\t\t\tif (sourceSyncFile != null) {\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_DELETE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeleteFile(sourceSyncFile, targetSyncFile);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_MOVE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t\telse if (sourceSyncFile.getParentFolderId() ==\n\t\t\t\t\t\t\ttargetSyncFile.getParentFolderId()) {\n\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmoveFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_RESTORE)) {\n\t\t\t\tif (sourceSyncFile != null) {\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t\telse if (isParentUnsynced(targetSyncFile)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttargetSyncFile.setLocalExtraSetting(\"restoreEvent\", true);\n\n\t\t\t\t\tSyncFileService.update(targetSyncFile);\n\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_TRASH)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdeleteFile(sourceSyncFile, targetSyncFile);\n\t\t\t}\n\t\t\telse if (event.equals(SyncFile.EVENT_UPDATE)) {\n\t\t\t\tif (sourceSyncFile == null) {\n\t\t\t\t\taddFile(targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tupdateFile(sourceSyncFile, targetSyncFile, filePathName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprocessDependentSyncFiles(targetSyncFile);\n\t\t}\n\t\tcatch (FileSystemException fse) {\n\t\t\tString message = fse.getMessage();\n\n\t\t\tif (message.contains(\"File name too long\")) {\n\t\t\t\ttargetSyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\t\ttargetSyncFile.setUiEvent(SyncFile.UI_EVENT_FILE_NAME_TOO_LONG);\n\n\t\t\t\tSyncFileService.update(targetSyncFile);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_logger.error(e.getMessage(), e);\n\t\t}\n\t}","commit_id":"e73252f5770c33c40d42867e30a394d071d40353","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private ModelNode getQueueOperation(String operationName) {\n        final ModelNode address = new ModelNode();\n        address.add(\"subsystem\", \"messaging\");\n        address.add(\"hornetq-server\", \"default\");\n        address.add(\"queue\", getQueueName());\n        return org.jboss.as.controller.operations.common.Util.getEmptyOperation(operationName, address);\n    }","id":94939,"modified_method":"private ModelNode getQueueOperation(String operationName) {\n        return getQueueOperation(operationName, getQueueName());\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Resource getChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            return hasAddressControl(element) ? new CoreAddressResource(element.getValue(), getManagementService()) : null;\n        } else {\n            return delegate.getChild(element);\n        }\n    }","id":94940,"modified_method":"@Override\n    public Resource getChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            return hasAddressControl(element) ? new CoreAddressResource(element.getValue(), getManagementService()) : null;\n        } else if (RUNTIME_QUEUE.equals(element.getKey())) {\n            return hasQueueControl(element.getValue()) ? PlaceholderResource.INSTANCE : null;\n        } else {\n            return delegate.getChild(element);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public boolean isRuntime() {\n        return false;\n    }","id":94941,"modified_method":"@Override\n    public boolean isRuntime() {\n        return delegate.isRuntime();\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Set<String> getChildTypes() {\n        Set<String> result = new HashSet<String>(delegate.getChildTypes());\n        result.add(CORE_ADDRESS);\n        return result;\n    }","id":94942,"modified_method":"@Override\n    public Set<String> getChildTypes() {\n        Set<String> result = new HashSet<String>(delegate.getChildTypes());\n        result.add(CORE_ADDRESS);\n        result.add(RUNTIME_QUEUE);\n        return result;\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Resource removeChild(PathElement address) {\n        if (CORE_ADDRESS.equals(address.getKey())) {\n            throw new UnsupportedOperationException(String.format(\"Resources of type %s cannot be removed\", CORE_ADDRESS));\n        } else {\n            return delegate.removeChild(address);\n        }\n    }","id":94943,"modified_method":"@Override\n    public Resource removeChild(PathElement address) {\n        String type = address.getKey();\n        if (CORE_ADDRESS.equals(type) ||\n                RUNTIME_QUEUE.equals(type)) {\n            throw MESSAGES.canNotRemoveResourceOfType(type);\n        } else {\n            return delegate.removeChild(address);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public boolean hasChildren(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            return getChildrenNames(CORE_ADDRESS).size() > 0;\n        } else {\n            return delegate.hasChildren(childType);\n        }\n    }","id":94944,"modified_method":"@Override\n    public boolean hasChildren(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            return getChildrenNames(CORE_ADDRESS).size() > 0;\n        } else if (RUNTIME_QUEUE.equals(childType)) {\n            return getChildrenNames(RUNTIME_QUEUE).size() > 0;\n        } else {\n            return delegate.hasChildren(childType);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Set<ResourceEntry> getChildren(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            Set<ResourceEntry> result = new HashSet<ResourceEntry>();\n            for (String name : getCoreAddressNames()) {\n                result.add(new CoreAddressResource.CoreAddressResourceEntry(name, getManagementService()));\n            }\n            return result;\n        } else {\n            return delegate.getChildren(childType);\n        }\n    }","id":94945,"modified_method":"@Override\n    public Set<ResourceEntry> getChildren(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            Set<ResourceEntry> result = new HashSet<ResourceEntry>();\n            for (String name : getCoreAddressNames()) {\n                result.add(new CoreAddressResource.CoreAddressResourceEntry(name, getManagementService()));\n            }\n            return result;\n        } else if (RUNTIME_QUEUE.equals(childType)) {\n            Set<ResourceEntry> result = new LinkedHashSet<ResourceEntry>();\n            for (String name : getCoreQueueNames()) {\n                result.add(new PlaceholderResource.PlaceholderResourceEntry(RUNTIME_QUEUE, name));\n            }\n            return result;\n        } else {\n            return delegate.getChildren(childType);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public boolean isProxy() {\n        return false;\n    }","id":94946,"modified_method":"@Override\n    public boolean isProxy() {\n        return delegate.isProxy();\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public boolean hasChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            return hasAddressControl(element);\n        } else {\n            return delegate.hasChild(element);\n        }\n    }","id":94947,"modified_method":"@Override\n    public boolean hasChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            return hasAddressControl(element);\n        } else if (RUNTIME_QUEUE.equals(element.getKey())) {\n            return hasQueueControl(element.getValue());\n        } else {\n            return delegate.hasChild(element);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerChild(PathElement address, Resource resource) {\n        if (CORE_ADDRESS.equals(address.getKey())) {\n            throw new UnsupportedOperationException(String.format(\"Resources of type %s cannot be registered\", CORE_ADDRESS));\n        } else {\n            delegate.registerChild(address, resource);\n        }\n    }","id":94948,"modified_method":"@Override\n    public void registerChild(PathElement address, Resource resource) {\n        String type = address.getKey();\n        if (CORE_ADDRESS.equals(type) ||\n                RUNTIME_QUEUE.equals(type)) {\n            throw MESSAGES.canNotRegisterResourceOfType(type);\n        } else {\n            delegate.registerChild(address, resource);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Resource navigate(PathAddress address) {\n        if (address.size() > 0 && CORE_ADDRESS.equals(address.getElement(0).getKey())) {\n            if (address.size() > 1) {\n                throw new NoSuchResourceException(address.getElement(1));\n            }\n            return new CoreAddressResource(address.getElement(0).getValue(), getManagementService());\n        } else {\n            return delegate.navigate(address);\n        }\n    }","id":94949,"modified_method":"@Override\n    public Resource navigate(PathAddress address) {\n        if (address.size() > 0 && CORE_ADDRESS.equals(address.getElement(0).getKey())) {\n            if (address.size() > 1) {\n                throw new NoSuchResourceException(address.getElement(1));\n            }\n            return new CoreAddressResource(address.getElement(0).getValue(), getManagementService());\n        } else if (address.size() > 0 && RUNTIME_QUEUE.equals(address.getElement(0).getKey())) {\n            if (address.size() > 1) {\n                throw new NoSuchResourceException(address.getElement(1));\n            }\n            return PlaceholderResource.INSTANCE;\n        } else {\n            return delegate.navigate(address);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Resource requireChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            if (hasAddressControl(element)) {\n                return new CoreAddressResource(element.getValue(), getManagementService());\n            }\n            throw new NoSuchResourceException(element);\n        } else {\n            return delegate.requireChild(element);\n        }\n    }","id":94950,"modified_method":"@Override\n    public Resource requireChild(PathElement element) {\n        if (CORE_ADDRESS.equals(element.getKey())) {\n            if (hasAddressControl(element)) {\n                return new CoreAddressResource(element.getValue(), getManagementService());\n            }\n            throw new NoSuchResourceException(element);\n        } else if (RUNTIME_QUEUE.equals(element.getKey())) {\n            if (hasQueueControl(element.getValue())) {\n                return PlaceholderResource.INSTANCE;\n            }\n            throw new NoSuchResourceException(element);\n        } else {\n            return delegate.requireChild(element);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Set<String> getChildrenNames(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            return getCoreAddressNames();\n        } else {\n            return delegate.getChildrenNames(childType);\n        }\n    }","id":94951,"modified_method":"@Override\n    public Set<String> getChildrenNames(String childType) {\n        if (CORE_ADDRESS.equals(childType)) {\n            return getCoreAddressNames();\n        } else if (RUNTIME_QUEUE.equals(childType)) {\n            return getCoreQueueNames();\n        } else {\n            return delegate.getChildrenNames(childType);\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME,\n                MANAGEMENT_API_MAJOR_VERSION,\n                MANAGEMENT_API_MINOR_VERSION,\n                MANAGEMENT_API_MICRO_VERSION);\n        subsystem.registerXMLElementWriter(MessagingXMLWriter.INSTANCE);\n\n        boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n\n        // Root resource\n        final ManagementResourceRegistration rootRegistration = subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);\n        rootRegistration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION, GenericSubsystemDescribeHandler.INSTANCE);\n\n        // HQ servers\n        final ManagementResourceRegistration serverRegistration = rootRegistration.registerSubModel(new HornetQServerResourceDefinition(registerRuntimeOnly));\n\n        // Runtime addresses\n        if (registerRuntimeOnly) {\n            final ManagementResourceRegistration coreAddress = serverRegistration.registerSubModel(new CoreAddressDefinition());\n            coreAddress.setRuntimeOnly(true);\n        }\n\n        // Address settings\n        serverRegistration.registerSubModel(new AddressSettingDefinition(registerRuntimeOnly));\n\n        // Broadcast groups\n        serverRegistration.registerSubModel(new BroadcastGroupDefinition(registerRuntimeOnly));\n        // getConnectorPairs, -- no, this is just the same as attribute connector-refs\n\n        // Discovery groups\n        serverRegistration.registerSubModel(new DiscoveryGroupDefinition(registerRuntimeOnly));\n\n        // Diverts\n        serverRegistration.registerSubModel(new DivertDefinition(registerRuntimeOnly));\n\n        // Core queues\n        serverRegistration.registerSubModel(new QueueDefinition(registerRuntimeOnly));\n        // getExpiryAddress, setExpiryAddress, getDeadLetterAddress, setDeadLetterAddress  -- no -- just toggle the 'queue-address', make this a mutable attr of address-setting\n\n        // Acceptors\n        serverRegistration.registerSubModel(GenericTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(RemoteTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(InVMTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n\n        // Connectors\n        serverRegistration.registerSubModel(GenericTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(RemoteTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(InVMTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n\n        // Bridges\n        serverRegistration.registerSubModel(new BridgeDefinition(registerRuntimeOnly));\n\n        // Cluster connections\n        serverRegistration.registerSubModel(new ClusterConnectionDefinition(registerRuntimeOnly));\n\n        // Grouping Handler\n        serverRegistration.registerSubModel(new GroupingHandlerDefinition(registerRuntimeOnly));\n\n        // Connector services\n        serverRegistration.registerSubModel(new ConnectorServiceDefinition(registerRuntimeOnly));\n\n        // Messaging paths\n        //todo, shouldn't we leverage Path service from AS? see: package org.jboss.as.controller.services.path\n        for (final String path : MessagingPathHandlers.PATHS.keySet()) {\n            ManagementResourceRegistration bindings = serverRegistration.registerSubModel(PathElement.pathElement(PATH, path),\n                    new MessagingSubsystemProviders.PathProvider(path));\n            MessagingPathHandlers.register(bindings, path);\n        }\n\n        // Connection factories\n        serverRegistration.registerSubModel(new ConnectionFactoryDefinition(registerRuntimeOnly));\n        // getJNDIBindings (no -- same as \"entries\")\n\n        // Resource Adapter Pooled connection factories\n        serverRegistration.registerSubModel(new PooledConnectionFactoryDefinition(registerRuntimeOnly));\n        // TODO how do ConnectionFactoryControl things relate?\n\n        // JMS Queues\n        serverRegistration.registerSubModel(new JMSQueueDefinition(registerRuntimeOnly));\n        // setExpiryAddress, setDeadLetterAddress  -- no -- just toggle the 'queue-address', make this a mutable attr of address-setting\n        // getJNDIBindings (no -- same as \"entries\")\n\n        // JMS Topics\n        serverRegistration.registerSubModel(new JMSTopicDefinition(registerRuntimeOnly));\n        // getJNDIBindings (no -- same as \"entries\")\n\n        serverRegistration.registerSubModel(new SecuritySettingDefinition(registerRuntimeOnly));\n\n        if (registerRuntimeOnly) {\n\n            ResourceDefinition deploymentsDef = new SimpleResourceDefinition(SUBSYSTEM_PATH, getResourceDescriptionResolver(\"deployed\"));\n            final ManagementResourceRegistration deploymentsRegistration = subsystem.registerDeploymentModel(deploymentsDef);\n            final ManagementResourceRegistration serverModel = deploymentsRegistration.registerSubModel(new HornetQServerResourceDefinition(true));\n\n            serverModel.registerSubModel(JMSQueueDefinition.newDeployedJMSQueueDefinition());\n            serverModel.registerSubModel(JMSTopicDefinition.newDeployedJMSTopicDefinition());\n        }\n\n        // JMS Bridges\n        rootRegistration.registerSubModel(new JMSBridgeDefinition());\n\n        registerTransformers_1_1_0(subsystem);\n    }","id":94952,"modified_method":"public void initialize(ExtensionContext context) {\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME,\n                MANAGEMENT_API_MAJOR_VERSION,\n                MANAGEMENT_API_MINOR_VERSION,\n                MANAGEMENT_API_MICRO_VERSION);\n        subsystem.registerXMLElementWriter(MessagingXMLWriter.INSTANCE);\n\n        boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n\n        // Root resource\n        final ManagementResourceRegistration rootRegistration = subsystem.registerSubsystemModel(MessagingSubsystemRootResourceDefinition.INSTANCE);\n        rootRegistration.registerOperationHandler(GenericSubsystemDescribeHandler.DEFINITION, GenericSubsystemDescribeHandler.INSTANCE);\n\n        // HQ servers\n        final ManagementResourceRegistration serverRegistration = rootRegistration.registerSubModel(new HornetQServerResourceDefinition(registerRuntimeOnly));\n\n        // Runtime addresses\n        if (registerRuntimeOnly) {\n            final ManagementResourceRegistration coreAddress = serverRegistration.registerSubModel(new CoreAddressDefinition());\n            coreAddress.setRuntimeOnly(true);\n        }\n\n        // Address settings\n        serverRegistration.registerSubModel(new AddressSettingDefinition(registerRuntimeOnly));\n\n        // Broadcast groups\n        serverRegistration.registerSubModel(new BroadcastGroupDefinition(registerRuntimeOnly));\n        // getConnectorPairs, -- no, this is just the same as attribute connector-refs\n\n        // Discovery groups\n        serverRegistration.registerSubModel(new DiscoveryGroupDefinition(registerRuntimeOnly));\n\n        // Diverts\n        serverRegistration.registerSubModel(new DivertDefinition(registerRuntimeOnly));\n\n        // Core queues\n        serverRegistration.registerSubModel(QueueDefinition.newQueueDefinition(registerRuntimeOnly));\n        // getExpiryAddress, setExpiryAddress, getDeadLetterAddress, setDeadLetterAddress  -- no -- just toggle the 'queue-address', make this a mutable attr of address-setting\n\n        // Runtime core queues\n        serverRegistration.registerSubModel(QueueDefinition.newRuntimeQueueDefinition(registerRuntimeOnly));\n\n        // Acceptors\n        serverRegistration.registerSubModel(GenericTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(RemoteTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(InVMTransportDefinition.createAcceptorDefinition(registerRuntimeOnly));\n\n        // Connectors\n        serverRegistration.registerSubModel(GenericTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(RemoteTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n        serverRegistration.registerSubModel(InVMTransportDefinition.createConnectorDefinition(registerRuntimeOnly));\n\n        // Bridges\n        serverRegistration.registerSubModel(new BridgeDefinition(registerRuntimeOnly));\n\n        // Cluster connections\n        serverRegistration.registerSubModel(new ClusterConnectionDefinition(registerRuntimeOnly));\n\n        // Grouping Handler\n        serverRegistration.registerSubModel(new GroupingHandlerDefinition(registerRuntimeOnly));\n\n        // Connector services\n        serverRegistration.registerSubModel(new ConnectorServiceDefinition(registerRuntimeOnly));\n\n        // Messaging paths\n        //todo, shouldn't we leverage Path service from AS? see: package org.jboss.as.controller.services.path\n        for (final String path : MessagingPathHandlers.PATHS.keySet()) {\n            ManagementResourceRegistration bindings = serverRegistration.registerSubModel(PathElement.pathElement(PATH, path),\n                    new MessagingSubsystemProviders.PathProvider(path));\n            MessagingPathHandlers.register(bindings, path);\n        }\n\n        // Connection factories\n        serverRegistration.registerSubModel(new ConnectionFactoryDefinition(registerRuntimeOnly));\n        // getJNDIBindings (no -- same as \"entries\")\n\n        // Resource Adapter Pooled connection factories\n        serverRegistration.registerSubModel(new PooledConnectionFactoryDefinition(registerRuntimeOnly));\n        // TODO how do ConnectionFactoryControl things relate?\n\n        // JMS Queues\n        serverRegistration.registerSubModel(new JMSQueueDefinition(registerRuntimeOnly));\n        // setExpiryAddress, setDeadLetterAddress  -- no -- just toggle the 'queue-address', make this a mutable attr of address-setting\n        // getJNDIBindings (no -- same as \"entries\")\n\n        // JMS Topics\n        serverRegistration.registerSubModel(new JMSTopicDefinition(registerRuntimeOnly));\n        // getJNDIBindings (no -- same as \"entries\")\n\n        serverRegistration.registerSubModel(new SecuritySettingDefinition(registerRuntimeOnly));\n\n        if (registerRuntimeOnly) {\n\n            ResourceDefinition deploymentsDef = new SimpleResourceDefinition(SUBSYSTEM_PATH, getResourceDescriptionResolver(\"deployed\"));\n            final ManagementResourceRegistration deploymentsRegistration = subsystem.registerDeploymentModel(deploymentsDef);\n            final ManagementResourceRegistration serverModel = deploymentsRegistration.registerSubModel(new HornetQServerResourceDefinition(true));\n\n            serverModel.registerSubModel(JMSQueueDefinition.newDeployedJMSQueueDefinition());\n            serverModel.registerSubModel(JMSTopicDefinition.newDeployedJMSTopicDefinition());\n        }\n\n        // JMS Bridges\n        rootRegistration.registerSubModel(new JMSBridgeDefinition());\n\n        registerTransformers_1_1_0(subsystem);\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static ServiceName getHornetQServiceName(PathAddress pathAddress) {\n         // We need to figure out what HornetQServer this operation is targeting.\n        // We can get that from the \"address\" element of the operation, as the \"hornetq-server=x\" part of\n        // the address will specify the name of the HornetQServer\n\n       // We are a handler for requests related to a jms-topic resource. Those reside on level below the hornetq-server\n        // resources in the resource tree. So we could look for the hornetq-server in the 2nd to last element\n        // in the PathAddress. But to be more generic and future-proof, we'll walk the tree looking\n        String hornetQServerName = null;\n        for (int i = pathAddress.size() - 1; i >=0; i--) {\n            PathElement pe = pathAddress.getElement(i);\n            if (CommonAttributes.HORNETQ_SERVER.equals(pe.getKey())) {\n                hornetQServerName = pe.getValue();\n                break;\n            }\n        }\n      return JBOSS_MESSAGING.append(hornetQServerName);\n   }","id":94953,"modified_method":"public static ServiceName getHornetQServiceName(PathAddress pathAddress) {\n         // We need to figure out what HornetQServer this operation is targeting.\n        // We can get that from the \"address\" element of the operation, as the \"hornetq-server=x\" part of\n        // the address will specify the name of the HornetQServer\n\n       // We are a handler for requests related to a jms-topic resource. Those reside on level below the hornetq-server\n        // resources in the resource tree. So we could look for the hornetq-server in the 2nd to last element\n        // in the PathAddress. But to be more generic and future-proof, we'll walk the tree looking\n       String hornetQServerName = null;\n       PathAddress hornetQServerPathAddress = getHornetQServerPathAddress(pathAddress);\n       if (hornetQServerPathAddress != null) {\n           hornetQServerName = hornetQServerPathAddress.getLastElement().getValue();\n       }\n       return JBOSS_MESSAGING.append(hornetQServerName);\n   }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        super.registerAttributes(registry);\n\n        for (AttributeDefinition attr : ATTRIBUTES) {\n            if (registerRuntimeOnly || !attr.getFlags().contains(AttributeAccess.Flag.STORAGE_RUNTIME)) {\n                registry.registerReadWriteAttribute(attr, null, QueueConfigurationWriteHandler.INSTANCE);\n            }\n        }\n\n        if (registerRuntimeOnly) {\n            for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n                registry.registerReadOnlyAttribute(attr, QueueReadAttributeHandler.INSTANCE);\n            }\n\n            for (AttributeDefinition metric : METRICS) {\n                registry.registerMetric(metric, QueueReadAttributeHandler.INSTANCE);\n            }\n        }\n    }","id":94954,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registry) {\n        super.registerAttributes(registry);\n\n        for (SimpleAttributeDefinition attr : ATTRIBUTES) {\n            if (registerRuntimeOnly || !attr.getFlags().contains(AttributeAccess.Flag.STORAGE_RUNTIME)) {\n                if (runtimeOnly) {\n                    AttributeDefinition readOnlyRuntimeAttr = create(attr)\n                            .setStorageRuntime()\n                            .build();\n                    registry.registerReadOnlyAttribute(readOnlyRuntimeAttr, QueueReadAttributeHandler.RUNTIME_INSTANCE);\n                } else {\n                    registry.registerReadWriteAttribute(attr, null, QueueConfigurationWriteHandler.INSTANCE);\n                }\n            }\n        }\n\n        if (registerRuntimeOnly) {\n            for (AttributeDefinition attr : READONLY_ATTRIBUTES) {\n                registry.registerReadOnlyAttribute(attr, QueueReadAttributeHandler.INSTANCE);\n            }\n\n            for (AttributeDefinition metric : METRICS) {\n                registry.registerMetric(metric, QueueReadAttributeHandler.INSTANCE);\n            }\n        }\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        validator.validate(operation);\n        final String attributeName = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        String queueName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n\n        final ServiceName hqServiceName = MessagingServices.getHornetQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        ServiceController<?> hqService = context.getServiceRegistry(false).getService(hqServiceName);\n        HornetQServer hqServer = HornetQServer.class.cast(hqService.getValue());\n        QueueControl control = QueueControl.class.cast(hqServer.getManagementService().getResource(ResourceNames.CORE_QUEUE + queueName));\n\n        if (MESSAGE_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessageCount());\n        } else if (SCHEDULED_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getScheduledCount());\n        } else if (CONSUMER_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getConsumerCount());\n        } else if (DELIVERING_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getDeliveringCount());\n        } else if (MESSAGES_ADDED.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessagesAdded());\n        } else if (ID.getName().equals(attributeName)) {\n            context.getResult().set(control.getID());\n        } else if (PAUSED.getName().equals(attributeName)) {\n            try {\n                context.getResult().set(control.isPaused());\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        } else if (TEMPORARY.getName().equals(attributeName)) {\n            context.getResult().set(control.isTemporary());\n        } else {\n            throw MESSAGES.unsupportedAttribute(attributeName);\n        }\n\n        context.stepCompleted();\n    }","id":94955,"modified_method":"@Override\n    public void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException {\n        validator.validate(operation);\n        final String attributeName = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        PathAddress address = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));\n        String queueName = address.getLastElement().getValue();\n\n        if (forwardToRuntimeQueue(context, operation, RUNTIME_INSTANCE)) {\n            context.stepCompleted();\n            return;\n        }\n\n        final ServiceName hqServiceName = MessagingServices.getHornetQServiceName(address);\n        ServiceController<?> hqService = context.getServiceRegistry(false).getService(hqServiceName);\n        HornetQServer hqServer = HornetQServer.class.cast(hqService.getValue());\n        QueueControl control = QueueControl.class.cast(hqServer.getManagementService().getResource(ResourceNames.CORE_QUEUE + queueName));\n\n        if (MESSAGE_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessageCount());\n        } else if (SCHEDULED_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getScheduledCount());\n        } else if (CONSUMER_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getConsumerCount());\n        } else if (DELIVERING_COUNT.getName().equals(attributeName)) {\n            context.getResult().set(control.getDeliveringCount());\n        } else if (MESSAGES_ADDED.getName().equals(attributeName)) {\n            context.getResult().set(control.getMessagesAdded());\n        } else if (ID.getName().equals(attributeName)) {\n            context.getResult().set(control.getID());\n        } else if (PAUSED.getName().equals(attributeName)) {\n            try {\n                context.getResult().set(control.isPaused());\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        } else if (TEMPORARY.getName().equals(attributeName)) {\n            context.getResult().set(control.isTemporary());\n        } else if (readStorageAttributes && getStorageAttributeNames().contains(attributeName)) {\n            if (ADDRESS.getName().equals(attributeName)) {\n                context.getResult().set(control.getAddress());\n            } else if (DURABLE.getName().equals(attributeName)) {\n                context.getResult().set(control.isDurable());\n            } else if (FILTER.getName().equals(attributeName)) {\n                ModelNode result = context.getResult();\n                String filter = control.getFilter();\n                if (filter != null) {\n                    result.set(filter);\n                }\n            }\n        } else {\n            throw MESSAGES.unsupportedAttribute(attributeName);\n        }\n\n        context.stepCompleted();\n    }","commit_id":"39a87271e06fe609617ac901bc1078e4e51fef01","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Creates a payload object with the information from the given exchange.\n     * Only marshal the Serializable object\n     *\n     * @param exchange the exchange\n     * @return the holder object with information copied form the exchange\n     */\n    public static DefaultExchangeHolder marshal(Exchange exchange) {\n        DefaultExchangeHolder payload = new DefaultExchangeHolder();\n\n        payload.inBody = checkSerializableObject(\"in body\", exchange, exchange.getIn().getBody());\n        payload.inHeaders.putAll(checkMapSerializableObjects(\"in headers\", exchange, exchange.getIn().getHeaders()));\n        if (exchange.hasOut()) {\n            payload.outBody = checkSerializableObject(\"out body\", exchange, exchange.getOut().getBody());\n            payload.outHeaders.putAll(checkMapSerializableObjects(\"out headers\", exchange, exchange.getOut().getHeaders()));\n            payload.outFaultFlag = exchange.getOut().isFault();\n        }\n        payload.properties.putAll(checkMapSerializableObjects(\"exchange properties\", exchange, exchange.getProperties()));\n        payload.exception = exchange.getException();\n\n        return payload;\n    }","id":94956,"modified_method":"/**\n     * Creates a payload object with the information from the given exchange.\n     * Only marshal the Serializable object\n     *\n     * @param exchange the exchange\n     * @return the holder object with information copied form the exchange\n     */\n    public static DefaultExchangeHolder marshal(Exchange exchange) {\n        return marshal(exchange, true);\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Transfers the information from the payload to the exchange.\n     *\n     * @param exchange the exchange to set values from the payload\n     * @param payload  the payload with the values\n     */\n    public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n        exchange.getIn().setBody(payload.inBody);\n        exchange.getIn().setHeaders(payload.inHeaders);\n        if (payload.outBody != null) {\n            exchange.getOut().setBody(payload.outBody);\n            exchange.getOut().setHeaders(payload.outHeaders);\n            exchange.getOut().setFault(payload.outFaultFlag.booleanValue());\n        }\n        for (String key : payload.properties.keySet()) {\n            exchange.setProperty(key, payload.properties.get(key));\n        }\n        exchange.setException(payload.exception);\n    }","id":94957,"modified_method":"/**\n     * Transfers the information from the payload to the exchange.\n     *\n     * @param exchange the exchange to set values from the payload\n     * @param payload  the payload with the values\n     */\n    public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n        exchange.getIn().setBody(payload.inBody);\n        if (payload.inHeaders != null) {\n            exchange.getIn().setHeaders(payload.inHeaders);\n        }\n        if (payload.outBody != null) {\n            exchange.getOut().setBody(payload.outBody);\n            if (payload.outHeaders != null) {\n                exchange.getOut().setHeaders(payload.outHeaders);\n            }\n            exchange.getOut().setFault(payload.outFaultFlag.booleanValue());\n        }\n        if (payload.properties != null) {\n            for (String key : payload.properties.keySet()) {\n                exchange.setProperty(key, payload.properties.get(key));\n            }\n        }\n        exchange.setException(payload.exception);\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"protected Exchange unmarshallExchange(Buffer buffer) throws IOException {\n        DataByteArrayInputStream bais = new DataByteArrayInputStream(buffer);\n        return exchangeMarshaller.readPayload(bais);\n    }","id":94958,"modified_method":"protected Exchange unmarshallExchange(Buffer buffer) throws IOException {\n        DataByteArrayInputStream bais = new DataByteArrayInputStream(buffer);\n\n        DefaultExchangeHolder pe = exchangeMarshaller.readPayload(bais);\n\n        // create a new dummy default exchange which the aggregator must\n        // set the CamelContext\n        Exchange answer = new DefaultExchange((CamelContext) null);\n        DefaultExchangeHolder.unmarshal(answer, pe);\n        return answer;\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"protected Buffer marshallExchange(Exchange exchange) throws IOException {\n        DataByteArrayOutputStream baos = new DataByteArrayOutputStream();\n        exchangeMarshaller.writePayload(exchange, baos);\n        return baos.toBuffer();\n    }","id":94959,"modified_method":"protected Buffer marshallExchange(Exchange exchange) throws IOException {\n        DataByteArrayOutputStream baos = new DataByteArrayOutputStream();\n        DefaultExchangeHolder pe = DefaultExchangeHolder.marshal(exchange, false);\n        exchangeMarshaller.writePayload(pe, baos);\n        return baos.toBuffer();\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"public void testOperations() {\n        \n        HawtDBAggregationRepository<String> repo = new HawtDBAggregationRepository<String>();\n        repo.setFile(hawtDBFile);\n        repo.setName(\"repo1\");\n        \n        // Can't get something we have not put in...\n        Exchange actual = repo.get(\"missing\");\n        assertEquals(null, actual);\n\n        // Store it..\n        Exchange exchange1 = new DefaultExchange(context);\n        exchange1.getIn().setBody(\"counter:1\");\n        actual = repo.add(\"foo\", exchange1);\n        assertEquals(null, actual);\n        \n        // Get it back..\n        actual = repo.get(\"foo\");\n        assertEquals(exchange1, actual);\n              \n        // Change it..\n        Exchange exchange2 = new DefaultExchange(context);\n        exchange2.getIn().setBody(\"counter:2\");\n        actual = repo.add(\"foo\", exchange2);\n        assertEquals(exchange1, actual);\n        \n        // Get it back..\n        actual = repo.get(\"foo\");\n        assertEquals(exchange2, actual);\n    }","id":94960,"modified_method":"@Test\n    public void testOperations() {\n        HawtDBAggregationRepository<String> repo = new HawtDBAggregationRepository<String>();\n        repo.setFile(hawtDBFile);\n        repo.setName(\"repo1\");\n\n        // Can't get something we have not put in...\n        Exchange actual = repo.get(\"missing\");\n        assertEquals(null, actual);\n\n        // Store it..\n        Exchange exchange1 = new DefaultExchange(context);\n        exchange1.getIn().setBody(\"counter:1\");\n        actual = repo.add(\"foo\", exchange1);\n        assertEquals(null, actual);\n\n        // Get it back..\n        actual = repo.get(\"foo\");\n        assertEquals(\"counter:1\", actual.getIn().getBody());\n\n        // Change it..\n        Exchange exchange2 = new DefaultExchange(context);\n        exchange2.getIn().setBody(\"counter:2\");\n        actual = repo.add(\"foo\", exchange2);\n        // the old one\n        assertEquals(\"counter:1\", actual.getIn().getBody());\n\n        // Get it back..\n        actual = repo.get(\"foo\");\n        assertEquals(\"counter:2\", actual.getIn().getBody());\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected void tearDown() throws Exception {\n        hawtDBFile.stop();\n    }","id":94961,"modified_method":"@Override\n    public void tearDown() throws Exception {\n        hawtDBFile.stop();\n        super.tearDown();\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        File file = new File(\"target/test-data/\"+getClass().getName()+\"-\"+getName());\n        hawtDBFile = new HawtDBFile();\n        hawtDBFile.setFile(file);\n        hawtDBFile.start();\n    }","id":94962,"modified_method":"@Override\n    public void setUp() throws Exception {\n        super.setUp();\n        deleteDirectory(\"target/data\");\n        File file = new File(\"target/data/hawtdb.dat\");\n        hawtDBFile = new HawtDBFile();\n        hawtDBFile.setFile(file);\n        hawtDBFile.start();\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"public void stop() {\n        close();\n        pageFile = null;\n    }","id":94963,"modified_method":"public void stop() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Stopping HawtDB using file: \" + getFile());\n        }\n\n        close();\n        pageFile = null;\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"public void start() {\n        final boolean initialize = !file.exists();\n        open();\n        pageFile = getConcurrentPageFile();\n        \n        execute(new Work<Boolean>() {\n            public Boolean execute(Transaction tx) {\n                if( initialize ) {\n                    int page = tx.allocator().alloc(1);\n                    // if we just created the file, first allocated page should be 0\n                    assert page == 0;\n                    indexesFactory.create(tx, 0);\n                    System.out.println(\"Aggregation repository data store created.\");\n                } else {\n                    Index<String, Integer> indexes = indexesFactory.open(tx, 0);\n                    System.out.println(\"You have \"+indexes.size()+\" aggregation repositories stored.\");\n                }\n                return true;\n            }\n        });\n    }","id":94964,"modified_method":"public void start() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Starting HawtDB using file: \" + getFile());\n        }\n\n        final boolean initialize = !file.exists();\n        open();\n        pageFile = getConcurrentPageFile();\n\n        execute(new Work<Boolean>() {\n            public Boolean execute(Transaction tx) {\n                if (initialize) {\n                    int page = tx.allocator().alloc(1);\n                    // if we just created the file, first allocated page should be 0\n                    assert page == 0;\n                    indexesFactory.create(tx, 0);\n                    LOG.info(\"Aggregation repository data store created using file: \" + getFile());\n                } else {\n                    Index<String, Integer> indexes = indexesFactory.open(tx, 0);\n                    LOG.info(\"Aggregation repository data store loaded using file: \" + getFile()\n                            + \" containing \" + indexes.size() + \" repositories.\");\n                }\n                return true;\n            }\n        });\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"public Index<Buffer, Buffer> getRepositoryIndex(Transaction tx, String name) {\n        Index<String, Integer> indexes = indexesFactory.open(tx, 0);\n        Integer location = indexes.get(name);\n        if( location == null ) {\n            // create it..\n            return indexFactory.create(tx, tx.allocator().alloc(1));\n        } else  {\n            return indexFactory.open(tx, location);\n        }\n    }","id":94965,"modified_method":"public Index<Buffer, Buffer> getRepositoryIndex(Transaction tx, String name) {\n        Index<String, Integer> indexes = indexesFactory.open(tx, 0);\n        Integer location = indexes.get(name);\n        if (location == null) {\n            // create it..\n            int page = tx.allocator().alloc(1);\n            Index<Buffer, Buffer> created = indexFactory.create(tx, page);\n\n            // add it to indexes so we can find it the next time\n            indexes.put(name, page);\n\n            return created;\n        } else {\n            return indexFactory.open(tx, location);\n        }\n    }","commit_id":"f946ea41c8e96f72748dfc2961edc66631f1382e","url":"https://github.com/apache/camel"},{"original_method":"private static Map<String, Object> checkMapSerializableObjects(Map<String, Object> map) {\n        if (map == null) {\n            return null;\n        }\n\n        Map<String, Object> result = new LinkedHashMap<String, Object>();\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n            if (entry.getValue() instanceof Serializable) {\n                result.put(entry.getKey(), entry.getValue());\n            } else {\n                LOG.warn(\"Object \" + entry.getValue() + \" of key \" + entry.getKey()\n                         + \" can't be serialized, it will be excluded by the MinaPayloadHolder\");\n            }\n        }\n        return result;\n\n    }","id":94966,"modified_method":"private static Map<String, Object> checkMapSerializableObjects(String type, Map<String, Object> map) {\n        if (map == null) {\n            return null;\n        }\n\n        Map<String, Object> result = new LinkedHashMap<String, Object>();\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\n            if (entry.getValue() instanceof Serializable) {\n                result.put(entry.getKey(), entry.getValue());\n            } else {\n                LOG.warn(type + \" containing object \" + entry.getValue() + \" of key \" + entry.getKey()\n                         + \" can not be serialized, it will be excluded by the MinaPayloadHolder\");\n            }\n        }\n\n        return result;\n    }","commit_id":"7fbbb698857bcd008b9acf7421f1ee621ff14462","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Transfers the information from the payload to the exchange.\n     *\n     * @param exchange   the exchange to set values from the payload\n     * @param payload    the payload with the values\n     */\n    public static void unmarshal(Exchange exchange, MinaPayloadHolder payload) {\n        exchange.getIn().setBody(payload.inBody);\n        exchange.getOut().setBody(payload.outBody);\n        exchange.getIn().setHeaders(payload.inHeaders);\n        exchange.getOut().setHeaders(payload.outHeaders);\n        if (payload.faultBody != null) {\n            exchange.getFault().setBody(payload.faultBody);\n            exchange.getFault().setHeaders(payload.faultHeaders);\n        }\n        for (String key : payload.properties.keySet()) {\n            exchange.setProperty(key, payload.properties.get(key));\n        }\n        exchange.setException(payload.exception);\n    }","id":94967,"modified_method":"/**\n     * Transfers the information from the payload to the exchange.\n     *\n     * @param exchange   the exchange to set values from the payload\n     * @param payload    the payload with the values\n     */\n    public static void unmarshal(Exchange exchange, MinaPayloadHolder payload) {\n        exchange.getIn().setBody(payload.inBody);\n        exchange.getIn().setHeaders(payload.inHeaders);\n        if (payload.outBody != null) {\n            exchange.getOut().setBody(payload.outBody);\n            exchange.getOut().setHeaders(payload.outHeaders);\n        }\n        if (payload.faultBody != null) {\n            exchange.getFault().setBody(payload.faultBody);\n            exchange.getFault().setHeaders(payload.faultHeaders);\n        }\n        for (String key : payload.properties.keySet()) {\n            exchange.setProperty(key, payload.properties.get(key));\n        }\n        exchange.setException(payload.exception);\n    }","commit_id":"7fbbb698857bcd008b9acf7421f1ee621ff14462","url":"https://github.com/apache/camel"},{"original_method":"private static Object checkSerializableObject(Object object) {\n        if (object instanceof Serializable) {\n            return object;\n        } else {\n            LOG.warn(\"Object \" + object + \" can't be serialized, it will be excluded by the MinaPayloadHolder\");\n            return null;\n        }\n    }","id":94968,"modified_method":"private static Object checkSerializableObject(String type, Object object) {\n        if (object instanceof Serializable) {\n            return object;\n        } else {\n            LOG.warn(type + \" containig object \" + object + \" can not be serialized, it will be excluded by the MinaPayloadHolder\");\n            return null;\n        }\n    }","commit_id":"7fbbb698857bcd008b9acf7421f1ee621ff14462","url":"https://github.com/apache/camel"},{"original_method":"public String toString() {\n        return \"MinaPayloadHolder{\" + \"inBody=\" + inBody + \", outBody=\" + outBody + \", inHeaders=\"\n               + inHeaders + \", outHeaders=\" + outHeaders + \", faultBody=\" + faultBody + \" , faultHeaders=\"\n               + faultHeaders + \", properties=\" + properties + \", exception=\" + exception + '}';\n    }","id":94969,"modified_method":"public String toString() {\n        return \"MinaPayloadHolder{\" + \"inBody=\" + inBody + \", outBody=\" + outBody + \", inHeaders=\"\n               + inHeaders + \", outHeaders=\" + outHeaders + \", faultBody=\" + faultBody + \", faultHeaders=\"\n               + faultHeaders + \", properties=\" + properties + \", exception=\" + exception + '}';\n    }","commit_id":"7fbbb698857bcd008b9acf7421f1ee621ff14462","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Creates a payload object with the information from the given exchange.\n     * Only marshal the Serializable object\n     *\n     * @param exchange     the exchange\n     * @return the holder object with information copied form the exchange\n     */\n    public static MinaPayloadHolder marshal(Exchange exchange) {\n        MinaPayloadHolder payload = new MinaPayloadHolder();\n\n        payload.inBody = checkSerializableObject(exchange.getIn().getBody());\n        if (exchange.getOut(false) != null) {\n            payload.outBody = checkSerializableObject(exchange.getOut().getBody());\n        }\n        payload.inHeaders.putAll(checkMapSerializableObjects(exchange.getIn().getHeaders()));\n        payload.outHeaders.putAll(checkMapSerializableObjects(exchange.getOut().getHeaders()));\n        payload.properties.putAll(checkMapSerializableObjects(exchange.getProperties()));\n        payload.exception = exchange.getException();\n        if (exchange.getFault(false) != null) {\n            payload.faultBody = exchange.getFault().getBody();\n            payload.faultHeaders.putAll(checkMapSerializableObjects(exchange.getFault().getHeaders()));\n        }\n\n        return payload;\n    }","id":94970,"modified_method":"/**\n     * Creates a payload object with the information from the given exchange.\n     * Only marshal the Serializable object\n     *\n     * @param exchange     the exchange\n     * @return the holder object with information copied form the exchange\n     */\n    public static MinaPayloadHolder marshal(Exchange exchange) {\n        MinaPayloadHolder payload = new MinaPayloadHolder();\n\n        payload.inBody = checkSerializableObject(\"in body\", exchange.getIn().getBody());\n        payload.inHeaders.putAll(checkMapSerializableObjects(\"in headers\", exchange.getIn().getHeaders()));\n        if (exchange.getOut(false) != null) {\n            payload.outBody = checkSerializableObject(\"out body\", exchange.getOut().getBody());\n            payload.outHeaders.putAll(checkMapSerializableObjects(\"out headers\", exchange.getOut().getHeaders()));\n        }\n        if (exchange.getFault(false) != null) {\n            payload.faultBody = checkSerializableObject(\"fault body\", exchange.getFault().getBody());\n            payload.faultHeaders.putAll(checkMapSerializableObjects(\"fault headers\", exchange.getFault().getHeaders()));\n        }\n        payload.properties.putAll(checkMapSerializableObjects(\"exchange properties\", exchange.getProperties()));\n        payload.exception = exchange.getException();\n\n        return payload;\n    }","commit_id":"7fbbb698857bcd008b9acf7421f1ee621ff14462","url":"https://github.com/apache/camel"},{"original_method":"public AceEditorWidget()\n   {\n      RStudioGinjector.INSTANCE.injectMembers(this);\n      initWidget(new HTML());\n      FontSizer.applyNormalFontSize(this);\n      setSize(\"100%\", \"100%\");\n\n      capturingHandlers_ = new HandlerManager(this);\n      addEventListener(getElement(), \"keydown\", capturingHandlers_);\n      addEventListener(getElement(), \"keyup\", capturingHandlers_);\n      addEventListener(getElement(), \"keypress\", capturingHandlers_);\n\n      addStyleName(\"loading\");\n\n      editor_ = AceEditorNative.createEditor(getElement());\n      editor_.manageDefaultKeybindings();\n      editor_.getRenderer().setHScrollBarAlwaysVisible(false);\n      editor_.getRenderer().setScrollPastEnd(true);\n      editor_.setShowPrintMargin(false);\n      editor_.setPrintMarginColumn(0);\n      editor_.setHighlightActiveLine(false);\n      editor_.setHighlightGutterLine(false);\n      editor_.delegateEventsTo(AceEditorWidget.this);\n      editor_.onChange(new CommandWithArg<AceDocumentChangeEventNative>()\n      {\n         public void execute(AceDocumentChangeEventNative event)\n         {\n            // Case 3815: It appears to be possible for change events to be\n            // fired recursively, which exhausts the stack. This shouldn't \n            // happen, but since it has in at least one setting, guard against\n            // recursion here.\n            if (inOnChangeHandler_)\n            {\n               Debug.log(\"Warning: ignoring recursive ACE change event\");\n               return;\n            }\n            inOnChangeHandler_ = true;\n            try\n            {\n               ValueChangeEvent.fire(AceEditorWidget.this, null);\n               AceEditorWidget.this.fireEvent(new DocumentChangedEvent(event));\n               \n               updateBreakpoints(event);\n               updateAnnotations(event);\n               \n               // Immediately re-render on change if we have markers, to\n               // ensure they're re-drawn in the correct locations.\n               if (editor_.getSession().getMarkers(true).size() > 0)\n               {\n                  Scheduler.get().scheduleDeferred(new ScheduledCommand()\n                  {\n                     @Override\n                     public void execute()\n                     {\n                        editor_.getRenderer().renderMarkers();\n                     }\n                  });\n               }\n            }\n            catch (Exception ex)\n            {\n               Debug.log(\"Exception occurred during ACE change event: \" + \n                         ex.getMessage());\n            }\n            inOnChangeHandler_ = false;\n         }\n\n      });\n      editor_.onChangeFold(new Command()\n      {\n         @Override\n         public void execute()\n         {\n            fireEvent(new FoldChangeEvent());\n         }\n      });\n      editor_.onGutterMouseDown(new CommandWithArg<AceMouseEventNative>()\n      {\n        @Override\n        public void execute(AceMouseEventNative arg)\n        {\n           // make sure the click is actually intended for the gutter\n           com.google.gwt.dom.client.Element targetElement = \n                 Element.as(arg.getNativeEvent().getEventTarget());\n           if (targetElement.getClassName().indexOf(\"ace_gutter-cell\") < 0)\n           {\n              return;\n           }\n           \n           NativeEvent evt = arg.getNativeEvent();\n           \n           // right-clicking shouldn't set a breakpoint\n           if (evt.getButton() != NativeEvent.BUTTON_LEFT) \n           {\n              return;\n           }\n           \n           // make sure that the click was in the left half of the element--\n           // clicking on the line number itself (or the gutter near the \n           // text) shouldn't set a breakpoint.\n           if (evt.getClientX() < \n               (targetElement.getAbsoluteLeft() + \n                     (targetElement.getClientWidth() / 2))) \n           {\n              toggleBreakpointAtPosition(arg.getDocumentPosition());            \n           }\n        }\n      });\n      editor_.getSession().getSelection().addCursorChangeHandler(new CommandWithArg<Position>()\n      {\n         public void execute(Position arg)\n         {\n            AceEditorWidget.this.fireEvent(new CursorChangedEvent(arg));\n         }\n      });\n      \n      aceEventHandlers_ = new ArrayList<HandlerRegistration>();\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"undo\",\n                  new CommandWithArg<Void>()\n                  {\n                     public void execute(Void arg)\n                     {\n                        fireEvent(new UndoRedoEvent(false));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"redo\",\n                  new CommandWithArg<Void>()\n                  {\n                     public void execute(Void arg)\n                     {\n                        fireEvent(new UndoRedoEvent(true));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"paste\",\n                  new CommandWithArg<String>()\n                  {\n                     public void execute(String text)\n                     {\n                        fireEvent(new PasteEvent(text));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"mousedown\",\n                  new CommandWithArg<AceMouseEventNative>()\n                  {\n                     @Override\n                     public void execute(AceMouseEventNative event)\n                     {\n                        fireEvent(new AceClickEvent(event));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n            editor_.getRenderer(),\n            \"afterRender\",\n            new CommandWithArg<Void>()\n            {\n               @Override\n               public void execute(Void event)\n               {\n                  fireEvent(new RenderFinishedEvent());\n                  isRendered_ = true;\n                  events_.fireEvent(new AfterAceRenderEvent(AceEditorWidget.this.getEditor()));\n               }\n            }));\n      \n      addAttachHandler(new AttachEvent.Handler()\n      {\n         @Override\n         public void onAttachOrDetach(AttachEvent event)\n         {\n            if (!event.isAttached())\n            {\n               for (HandlerRegistration registration : aceEventHandlers_)\n                  registration.removeHandler();\n               aceEventHandlers_.clear();\n            }\n         }\n      });\n      \n      events_.addHandler(\n            BeginPasteEvent.TYPE,\n            new BeginPasteEvent.Handler()\n            {\n               \n               @Override\n               public void onBeginPaste(BeginPasteEvent event)\n               {\n                  maybeUnmapCtrlV();\n               }\n            });\n      \n      events_.addHandler(\n            EndPasteEvent.TYPE,\n            new EndPasteEvent.Handler()\n            {\n               \n               @Override\n               public void onEndPaste(EndPasteEvent event)\n               {\n                  maybeRemapCtrlV();\n               }\n            });\n      \n      events_.addHandler(\n            RStudioCommandExecutedFromShortcutEvent.TYPE,\n            new RStudioCommandExecutedFromShortcutEvent.Handler()\n            {\n               @Override\n               public void onRStudioCommandExecutedFromShortcut(RStudioCommandExecutedFromShortcutEvent event)\n               {\n                  clearKeyBuffers(editor_);\n               }\n            });\n   }","id":94971,"modified_method":"public AceEditorWidget()\n   {\n      RStudioGinjector.INSTANCE.injectMembers(this);\n      initWidget(new HTML());\n      FontSizer.applyNormalFontSize(this);\n      setSize(\"100%\", \"100%\");\n\n      capturingHandlers_ = new HandlerManager(this);\n      addEventListener(getElement(), \"keydown\", capturingHandlers_);\n      addEventListener(getElement(), \"keyup\", capturingHandlers_);\n      addEventListener(getElement(), \"keypress\", capturingHandlers_);\n\n      addStyleName(\"loading\");\n\n      editor_ = AceEditorNative.createEditor(getElement());\n      editor_.manageDefaultKeybindings();\n      editor_.getRenderer().setHScrollBarAlwaysVisible(false);\n      editor_.getRenderer().setScrollPastEnd(true);\n      editor_.setShowPrintMargin(false);\n      editor_.setPrintMarginColumn(0);\n      editor_.setHighlightActiveLine(false);\n      editor_.setHighlightGutterLine(false);\n      editor_.delegateEventsTo(AceEditorWidget.this);\n      editor_.onChange(new CommandWithArg<AceDocumentChangeEventNative>()\n      {\n         public void execute(AceDocumentChangeEventNative event)\n         {\n            // Case 3815: It appears to be possible for change events to be\n            // fired recursively, which exhausts the stack. This shouldn't \n            // happen, but since it has in at least one setting, guard against\n            // recursion here.\n            if (inOnChangeHandler_)\n            {\n               Debug.log(\"Warning: ignoring recursive ACE change event\");\n               return;\n            }\n            inOnChangeHandler_ = true;\n            try\n            {\n               ValueChangeEvent.fire(AceEditorWidget.this, null);\n               AceEditorWidget.this.fireEvent(new DocumentChangedEvent(event));\n               \n               updateBreakpoints(event);\n               updateAnnotations(event);\n               \n               // Immediately re-render on change if we have markers, to\n               // ensure they're re-drawn in the correct locations.\n               if (editor_.getSession().getMarkers(true).size() > 0)\n               {\n                  Scheduler.get().scheduleDeferred(new ScheduledCommand()\n                  {\n                     @Override\n                     public void execute()\n                     {\n                        editor_.getRenderer().renderMarkers();\n                     }\n                  });\n               }\n            }\n            catch (Exception ex)\n            {\n               Debug.log(\"Exception occurred during ACE change event: \" + \n                         ex.getMessage());\n            }\n            inOnChangeHandler_ = false;\n         }\n\n      });\n      editor_.onChangeFold(new Command()\n      {\n         @Override\n         public void execute()\n         {\n            fireEvent(new FoldChangeEvent());\n         }\n      });\n      editor_.onGutterMouseDown(new CommandWithArg<AceMouseEventNative>()\n      {\n        @Override\n        public void execute(AceMouseEventNative arg)\n        {\n           // make sure the click is actually intended for the gutter\n           com.google.gwt.dom.client.Element targetElement = \n                 Element.as(arg.getNativeEvent().getEventTarget());\n           if (targetElement.getClassName().indexOf(\"ace_gutter-cell\") < 0)\n           {\n              return;\n           }\n           \n           NativeEvent evt = arg.getNativeEvent();\n           \n           // right-clicking shouldn't set a breakpoint\n           if (evt.getButton() != NativeEvent.BUTTON_LEFT) \n           {\n              return;\n           }\n           \n           // make sure that the click was in the left half of the element--\n           // clicking on the line number itself (or the gutter near the \n           // text) shouldn't set a breakpoint.\n           if (evt.getClientX() < \n               (targetElement.getAbsoluteLeft() + \n                     (targetElement.getClientWidth() / 2))) \n           {\n              toggleBreakpointAtPosition(arg.getDocumentPosition());            \n           }\n        }\n      });\n      editor_.getSession().getSelection().addCursorChangeHandler(new CommandWithArg<Position>()\n      {\n         public void execute(Position arg)\n         {\n            AceEditorWidget.this.fireEvent(new CursorChangedEvent(arg));\n         }\n      });\n      \n      aceEventHandlers_ = new ArrayList<HandlerRegistration>();\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"undo\",\n                  new CommandWithArg<Void>()\n                  {\n                     public void execute(Void arg)\n                     {\n                        fireEvent(new UndoRedoEvent(false));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"redo\",\n                  new CommandWithArg<Void>()\n                  {\n                     public void execute(Void arg)\n                     {\n                        fireEvent(new UndoRedoEvent(true));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"paste\",\n                  new CommandWithArg<String>()\n                  {\n                     public void execute(String text)\n                     {\n                        fireEvent(new PasteEvent(text));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n                  editor_,\n                  \"mousedown\",\n                  new CommandWithArg<AceMouseEventNative>()\n                  {\n                     @Override\n                     public void execute(AceMouseEventNative event)\n                     {\n                        fireEvent(new AceClickEvent(event));\n                     }\n                  }));\n      \n      aceEventHandlers_.add(AceEditorNative.addEventListener(\n            editor_.getRenderer(),\n            \"afterRender\",\n            new CommandWithArg<Void>()\n            {\n               @Override\n               public void execute(Void event)\n               {\n                  fireEvent(new RenderFinishedEvent());\n                  isRendered_ = true;\n                  events_.fireEvent(new AfterAceRenderEvent(AceEditorWidget.this.getEditor()));\n               }\n            }));\n      \n      addAttachHandler(new AttachEvent.Handler()\n      {\n         @Override\n         public void onAttachOrDetach(AttachEvent event)\n         {\n            if (!event.isAttached())\n            {\n               for (HandlerRegistration registration : aceEventHandlers_)\n                  registration.removeHandler();\n               aceEventHandlers_.clear();\n            }\n         }\n      });\n      \n      if (!hasPasteHandlers_)\n      {\n         events_.addHandler(BeginPasteEvent.TYPE, this);\n         events_.addHandler(EndPasteEvent.TYPE, this);\n         hasPasteHandlers_ = true;\n      }\n      \n      events_.addHandler(\n            RStudioCommandExecutedFromShortcutEvent.TYPE,\n            new RStudioCommandExecutedFromShortcutEvent.Handler()\n            {\n               @Override\n               public void onRStudioCommandExecutedFromShortcut(RStudioCommandExecutedFromShortcutEvent event)\n               {\n                  clearKeyBuffers(editor_);\n               }\n            });\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Handler\n   void onCopyDummy()\n   {\n      Desktop.getFrame().clipboardCopy();\n   }","id":94972,"modified_method":"@Handler\n   void onCopyDummy()\n   {\n      eventBus_.fireEvent(new BeginCopyEvent());\n      keyListener_ = Event.addNativePreviewHandler(new NativePreviewHandler()\n      {\n         @Override\n         public void onPreviewNativeEvent(NativePreviewEvent arg0)\n         {\n            Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  eventBus_.fireEvent(new EndCopyEvent());\n                  keyListener_.removeHandler();\n                  keyListener_ = null;\n               }\n            });\n         }\n      });\n      \n      Desktop.getFrame().clipboardCopy();\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void swallowEvents(Object object)\n   {\n      NativeEvent event = (NativeEvent) object;\n      \n      // If the keybuffer is a prefix key sequence, swallow\n      // the event. This ensures that the system doesn't 'beep'\n      // when seeing unhandled keys.\n      if (!keyBuffer_.isEmpty())\n      {\n         for (Map.Entry<KeyMapType, KeyMap> entry : keyMaps_.entrySet())\n         {\n            if (entry.getValue().isPrefix(keyBuffer_))\n            {\n               event.stopPropagation();\n               event.preventDefault();\n               return;\n            }\n         }\n      }\n      \n      // Suppress save / quit events from reaching the browser\n      KeyCombination keys = new KeyCombination(event);\n      int keyCode = keys.getKeyCode();\n      int modifiers = keys.getModifier();\n      \n      boolean isSaveQuitKey =\n            keyCode == KeyCodes.KEY_S ||\n            keyCode == KeyCodes.KEY_W;\n      \n      boolean isSaveQuitModifier = BrowseCap.isMacintosh() ?\n            modifiers == KeyboardShortcut.META :\n            modifiers == KeyboardShortcut.CTRL;\n      \n      if (isSaveQuitKey && isSaveQuitModifier)\n         event.preventDefault();\n   }","id":94973,"modified_method":"private void swallowEvents(Object object)\n   {\n      NativeEvent event = (NativeEvent) object;\n      \n      // Don't swallow copy events.\n      if (isCopyEvent_)\n         return;\n      \n      // If the keybuffer is a prefix key sequence, swallow\n      // the event. This ensures that the system doesn't 'beep'\n      // when seeing unhandled keys.\n      if (!keyBuffer_.isEmpty())\n      {\n         for (Map.Entry<KeyMapType, KeyMap> entry : keyMaps_.entrySet())\n         {\n            if (entry.getValue().isPrefix(keyBuffer_))\n            {\n               event.stopPropagation();\n               event.preventDefault();\n               return;\n            }\n         }\n      }\n      \n      // Suppress save / quit events from reaching the browser\n      KeyCombination keys = new KeyCombination(event);\n      int keyCode = keys.getKeyCode();\n      int modifiers = keys.getModifier();\n      \n      boolean isSaveQuitKey =\n            keyCode == KeyCodes.KEY_S ||\n            keyCode == KeyCodes.KEY_W;\n      \n      boolean isSaveQuitModifier = BrowseCap.isMacintosh() ?\n            modifiers == KeyboardShortcut.META :\n            modifiers == KeyboardShortcut.CTRL;\n      \n      if (isSaveQuitKey && isSaveQuitModifier)\n         event.preventDefault();\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"private boolean handleKeyDown(NativeEvent event)\n   {\n      // Bail if the shortcut manager is not enabled (e.g.\n      // we disable it temporarily when interacting with\n      // modal dialogs)\n      if (!isEnabled())\n         return false;\n      \n      // Don't dispatch on bare modifier keypresses.\n      if (KeyboardHelper.isModifierKey(event.getKeyCode()))\n         return false;\n      \n      // Escape key should always clear the keybuffer.\n      if (event.getKeyCode() == KeyCodes.KEY_ESCAPE)\n      {\n         keyBuffer_.clear();\n         return false;\n      }\n      \n      KeyCombination keyCombination = new KeyCombination(event);\n      keyBuffer_.add(keyCombination);\n      \n      // Loop through all active key maps, and attempt to find an active\n      // binding. 'pending' is used to indicate whether there are any bindings\n      // following the current state of the keybuffer.\n      boolean pending = false;\n      for (Map.Entry<KeyMapType, KeyMap> entry : keyMaps_.entrySet())\n      {\n         KeyMap map = entry.getValue();\n         CommandBinding binding = map.getActiveBinding(keyBuffer_);\n         if (binding != null)\n         {\n            keyBuffer_.clear();\n            event.stopPropagation();\n            binding.execute();\n            return true;\n         }\n         \n         if (map.isPrefix(keyBuffer_))\n            pending = true;\n      }\n      \n      if (!(pending || isPrefixForEditor(keyCombination)))\n         keyBuffer_.clear();\n      \n      // Assume that a keypress without a modifier key clears the keybuffer.\n      // This disallows binding of commands in a way like '<SPC> a a', which\n      // kind of stinks, but helps ensure that we don't get a stale keybuffer.\n      // This code could be removed if we could reliably detect whether an\n      // underlying editor instance handled the key combination, but there seem\n      // to be cased where Ace doesn't report handling a keypress (e.g. arrow keys,\n      // 'I', and some other cases)\n      if (!keyBuffer_.isEmpty())\n      {\n         KeyCombination keys = keyBuffer_.get(keyBuffer_.size() - 1);\n         if (keys.getModifier() == KeyboardShortcut.NONE)\n            keyBuffer_.clear();\n      }\n      \n      return false;\n   }","id":94974,"modified_method":"private boolean handleKeyDown(NativeEvent event)\n   {\n      // Bail if the shortcut manager is not enabled (e.g.\n      // we disable it temporarily when interacting with\n      // modal dialogs)\n      if (!isEnabled())\n         return false;\n      \n      // Don't dispatch on bare modifier keypresses.\n      if (KeyboardHelper.isModifierKey(event.getKeyCode()))\n         return false;\n      \n      // Escape key should always clear the keybuffer.\n      if (event.getKeyCode() == KeyCodes.KEY_ESCAPE)\n      {\n         keyBuffer_.clear();\n         return false;\n      }\n      \n      KeyCombination keyCombination = new KeyCombination(event);\n      keyBuffer_.add(keyCombination);\n      \n      // Loop through all active key maps, and attempt to find an active\n      // binding. 'pending' is used to indicate whether there are any bindings\n      // following the current state of the keybuffer.\n      boolean pending = false;\n      for (Map.Entry<KeyMapType, KeyMap> entry : keyMaps_.entrySet())\n      {\n         KeyMap map = entry.getValue();\n         CommandBinding binding = map.getActiveBinding(keyBuffer_);\n         if (binding != null)\n         {\n            keyBuffer_.clear();\n            event.stopPropagation();\n            binding.execute();\n            return true;\n         }\n         \n         if (map.isPrefix(keyBuffer_))\n            pending = true;\n      }\n      \n      if (!(pending || isPrefixForEditor(keyCombination, event)))\n         keyBuffer_.clear();\n      \n      // Assume that a keypress without a modifier key clears the keybuffer.\n      // This disallows binding of commands in a way like '<SPC> a a', which\n      // kind of stinks, but helps ensure that we don't get a stale keybuffer.\n      // This code could be removed if we could reliably detect whether an\n      // underlying editor instance handled the key combination, but there seem\n      // to be cased where Ace doesn't report handling a keypress (e.g. arrow keys,\n      // 'I', and some other cases)\n      if (!keyBuffer_.isEmpty())\n      {\n         KeyCombination keys = keyBuffer_.get(keyBuffer_.size() - 1);\n         if (keys.getModifier() == KeyboardShortcut.NONE)\n            keyBuffer_.clear();\n      }\n      \n      return false;\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"private boolean isPrefixForEditor(KeyCombination keys)\n   {\n      if (editorMode_ == KeyboardShortcut.MODE_EMACS)\n      {\n         if (keys.isCtrlPressed())\n         {\n            int keyCode = keys.getKeyCode();\n            return keyCode == KeyCodes.KEY_C ||\n                   keyCode == KeyCodes.KEY_X;\n         }\n      }\n      \n      return false;\n   }","id":94975,"modified_method":"private boolean isPrefixForEditor(KeyCombination keys, NativeEvent event)\n   {\n      // Check to see if the event target was Ace.\n      Element target = Element.as(event.getEventTarget());\n      if (target != null && target.hasClassName(\"ace_text-input\"))\n         return false;\n\n      // Ace was the target of this event -- swallow\n      // C-c and C-v.\n      if (editorMode_ == KeyboardShortcut.MODE_EMACS)\n      {\n         if (keys.isCtrlPressed())\n         {\n            int keyCode = keys.getKeyCode();\n            return keyCode == KeyCodes.KEY_C || keyCode == KeyCodes.KEY_X;\n         }\n      }\n      \n      return false;\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"private ShortcutManager()\n   {\n      keyBuffer_ = new KeySequence();\n      keyTimer_ = new Timer()\n      {\n         @Override\n         public void run()\n         {\n            keyBuffer_.clear();\n         }\n      };\n      \n      shortcutInfo_ = new ArrayList<ShortcutInfo>();\n      defaultBindings_ = new ArrayList<Pair<KeySequence, AppCommandBinding>>();\n      \n      // Initialize the key maps. We use a LinkedHashMap so that insertion\n      // order can be preserved.\n      keyMaps_ = new LinkedHashMap<KeyMapType, KeyMap>();\n      for (KeyMapType type : KeyMapType.values())\n         keyMaps_.put(type, new KeyMap());\n      \n      // Defer injection because the ShortcutManager is constructed\n      // very eagerly (to allow for codegen stuff in ShortcutsEmitter\n      // to work)\n      Scheduler.get().scheduleDeferred(new ScheduledCommand()\n      {\n         @Override\n         public void execute()\n         {\n            RStudioGinjector.INSTANCE.injectMembers(ShortcutManager.this);\n            events_.addHandler(\n                  AceKeyboardActivityEvent.TYPE,\n                  new AceKeyboardActivityEvent.Handler()\n                  {\n                     @Override\n                     public void onAceKeyboardActivity(AceKeyboardActivityEvent event)\n                     {\n                        if (!event.isChainEvent())\n                           keyBuffer_.clear();\n                     }\n                  });\n         }\n      });\n      \n      // NOTE: Because this class is used as a singleton and is never\n      // destroyed it's not necessary to manage lifetime of this event handler\n      Event.addNativePreviewHandler(this);\n      addPostViewHandler();\n   }","id":94976,"modified_method":"private ShortcutManager()\n   {\n      keyBuffer_ = new KeySequence();\n      keyTimer_ = new Timer()\n      {\n         @Override\n         public void run()\n         {\n            keyBuffer_.clear();\n         }\n      };\n      \n      shortcutInfo_ = new ArrayList<ShortcutInfo>();\n      defaultBindings_ = new ArrayList<Pair<KeySequence, AppCommandBinding>>();\n      \n      // Initialize the key maps. We use a LinkedHashMap so that insertion\n      // order can be preserved.\n      keyMaps_ = new LinkedHashMap<KeyMapType, KeyMap>();\n      for (KeyMapType type : KeyMapType.values())\n         keyMaps_.put(type, new KeyMap());\n      \n      // Defer injection because the ShortcutManager is constructed\n      // very eagerly (to allow for codegen stuff in ShortcutsEmitter\n      // to work)\n      Scheduler.get().scheduleDeferred(new ScheduledCommand()\n      {\n         @Override\n         public void execute()\n         {\n            RStudioGinjector.INSTANCE.injectMembers(ShortcutManager.this);\n            events_.addHandler(\n                  AceKeyboardActivityEvent.TYPE,\n                  new AceKeyboardActivityEvent.Handler()\n                  {\n                     @Override\n                     public void onAceKeyboardActivity(AceKeyboardActivityEvent event)\n                     {\n                        if (!event.isChainEvent())\n                           keyBuffer_.clear();\n                     }\n                  });\n            \n            events_.addHandler(BeginCopyEvent.TYPE, ShortcutManager.this);\n            events_.addHandler(EndCopyEvent.TYPE, ShortcutManager.this);\n         }\n      });\n      \n      // NOTE: Because this class is used as a singleton and is never\n      // destroyed it's not necessary to manage lifetime of this event handler\n      Event.addNativePreviewHandler(this);\n      addPostViewHandler();\n   }","commit_id":"de1c25be6c88180364c1d1d735b8f4f81eeef7e0","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public ValidationService(final EventBus eventBus, final TableEditorMessages messages, final ValidationMessages valMessages)\n   {\n      this.eventBus = eventBus;\n      this.messages = messages;\n\n      HtmlXmlTagValidation htmlxmlValidation = new HtmlXmlTagValidation(valMessages);\n      NewlineLeadTrailValidation newlineLeadTrailValidation = new NewlineLeadTrailValidation(valMessages);\n      JavaVariablesValidation javaVariablesValidation = new JavaVariablesValidation(valMessages);\n      XmlEntityValidation xmlEntityValidation = new XmlEntityValidation(valMessages);\n      PrintfVariablesValidation printfVariablesValidation = new PrintfVariablesValidation(valMessages);\n      PrintfXSIExtensionValidation positionalPrintfValidation = new PrintfXSIExtensionValidation(valMessages);\n      printfVariablesValidation.mutuallyExclusive(positionalPrintfValidation);\n      positionalPrintfValidation.mutuallyExclusive(printfVariablesValidation);\n\n      validationMap.put(htmlxmlValidation.getId(), htmlxmlValidation);\n      validationMap.put(newlineLeadTrailValidation.getId(), newlineLeadTrailValidation);\n      validationMap.put(printfVariablesValidation.getId(), printfVariablesValidation);\n      validationMap.put(positionalPrintfValidation.getId(), positionalPrintfValidation);\n      validationMap.put(javaVariablesValidation.getId(), javaVariablesValidation);\n      validationMap.put(xmlEntityValidation.getId(), xmlEntityValidation);\n\n      eventBus.addHandler(RunValidationEvent.getType(), new RunValidationEventHandler()\n      {\n         @Override\n         public void onValidate(RunValidationEvent event)\n         {\n            execute(event.getSourceContent(), event.getTarget(), event.isFireNotification(), event.getWidgetList());\n         }\n      });\n\n      eventBus.addHandler(TransUnitSelectionEvent.getType(), new TransUnitSelectionHandler()\n      {\n         @Override\n         public void onTransUnitSelected(TransUnitSelectionEvent event)\n         {\n            clearAllMessage();\n         }\n      });\n\n      eventBus.addHandler(DocumentSelectionEvent.getType(), new DocumentSelectionHandler()\n      {\n         @Override\n         public void onDocumentSelected(DocumentSelectionEvent event)\n         {\n            clearAllMessage();\n         }\n      });\n\n   }","id":94977,"modified_method":"@Inject\n   public ValidationService(final EventBus eventBus, final TableEditorMessages messages, final ValidationMessages valMessages)\n   {\n      this.eventBus = eventBus;\n      this.messages = messages;\n\n      HtmlXmlTagValidation htmlxmlValidation = new HtmlXmlTagValidation(valMessages);\n      NewlineLeadTrailValidation newlineLeadTrailValidation = new NewlineLeadTrailValidation(valMessages);\n      JavaVariablesValidation javaVariablesValidation = new JavaVariablesValidation(valMessages);\n      XmlEntityValidation xmlEntityValidation = new XmlEntityValidation(valMessages);\n      PrintfVariablesValidation printfVariablesValidation = new PrintfVariablesValidation(valMessages);\n      PrintfXSIExtensionValidation positionalPrintfValidation = new PrintfXSIExtensionValidation(valMessages);\n      printfVariablesValidation.mutuallyExclusive(positionalPrintfValidation);\n      positionalPrintfValidation.mutuallyExclusive(printfVariablesValidation);\n\n      validationMap.put(htmlxmlValidation.getId(), htmlxmlValidation);\n      validationMap.put(newlineLeadTrailValidation.getId(), newlineLeadTrailValidation);\n      validationMap.put(printfVariablesValidation.getId(), printfVariablesValidation);\n      validationMap.put(positionalPrintfValidation.getId(), positionalPrintfValidation);\n      validationMap.put(javaVariablesValidation.getId(), javaVariablesValidation);\n      validationMap.put(xmlEntityValidation.getId(), xmlEntityValidation);\n\n      eventBus.addHandler(RunValidationEvent.getType(), this);\n      eventBus.addHandler(TransUnitSelectionEvent.getType(), this);\n      eventBus.addHandler(DocumentSelectionEvent.getType(), this);\n   }","commit_id":"180df8169acda6334ceb3e16724a8f4e1b245dc9","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   protected void onBind()\n   {\n      validationOptionsPresenter.bind();\n      if (workspaceContext.isReadOnly())\n      {\n         setReadOnly(true);\n      }\n\n      registerHandler(display.getTranslatedChk().addValueChangeHandler(filterChangeHandler));\n      registerHandler(display.getNeedReviewChk().addValueChangeHandler(filterChangeHandler));\n      registerHandler(display.getUntranslatedChk().addValueChangeHandler(filterChangeHandler));\n\n      registerHandler(eventBus.addHandler(FilterViewEvent.getType(), new FilterViewEventHandler()\n      {\n         @Override\n         public void onFilterView(FilterViewEvent event)\n         {\n            // filter cancel will revert a checkbox value, so the checkboxes are\n            // updated to reflect this reversion\n            if (event.isCancelFilter())\n            {\n               display.getTranslatedChk().setValue(event.isFilterTranslated(), false);\n               display.getNeedReviewChk().setValue(event.isFilterNeedReview(), false);\n               display.getUntranslatedChk().setValue(event.isFilterUntranslated(), false);\n            }\n\n            // if filter view, hide modal navigation\n            // TODO remove this when modal navigation is updated to work with a\n            // filtered list\n            boolean showingFullList = (event.isFilterTranslated() == event.isFilterNeedReview()) && (event.isFilterTranslated() == event.isFilterUntranslated());\n            if (showingFullList)\n            {\n               display.setNavOptionVisible(true);\n            }\n            else\n            {\n               display.setNavOptionVisible(false);\n            }\n         }\n      }));\n\n      registerHandler(display.getEditorButtonsChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Show editor buttons: \" + event.getValue());\n            eventBus.fireEvent(new ButtonDisplayChangeEvent(event.getValue()));\n         }\n      }));\n\n      registerHandler(display.getEnterChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Enable 'Enter' Key to save and move to next string: \" + event.getValue());\n            configMap.put(EditorConfigConstants.BUTTON_ENTER, event.getValue());\n            eventBus.fireEvent(new UserConfigChangeEvent(configMap));\n         }\n      }));\n\n      registerHandler(display.getEscChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Enable 'Esc' Key to close editor: \" + event.getValue());\n            configMap.put(EditorConfigConstants.BUTTON_ESC, event.getValue());\n            eventBus.fireEvent(new UserConfigChangeEvent(configMap));\n         }\n      }));\n\n      // editor buttons always shown by default\n      display.getEditorButtonsChk().setValue(true, false);\n      display.getEnterChk().setValue(configMap.get(EditorConfigConstants.BUTTON_ENTER), false);\n      display.getEscChk().setValue(configMap.get(EditorConfigConstants.BUTTON_ESC), false);\n\n      registerHandler(display.getModalNavigationOptionsSelect().addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            String selectedOption = display.getSelectedFilter();\n            if (selectedOption.equals(Display.KEY_FUZZY_UNTRANSLATED))\n            {\n               configMap.put(EditorConfigConstants.BUTTON_UNTRANSLATED, true);\n               configMap.put(EditorConfigConstants.BUTTON_FUZZY, true);\n            }\n            else if (selectedOption.equals(Display.KEY_FUZZY))\n            {\n               configMap.put(EditorConfigConstants.BUTTON_FUZZY, true);\n               configMap.put(EditorConfigConstants.BUTTON_UNTRANSLATED, false);\n            }\n            else if (selectedOption.equals(Display.KEY_UNTRANSLATED))\n            {\n               configMap.put(EditorConfigConstants.BUTTON_FUZZY, false);\n               configMap.put(EditorConfigConstants.BUTTON_UNTRANSLATED, true);\n            }\n            eventBus.fireEvent(new UserConfigChangeEvent(configMap));\n         }\n      }));\n\n      registerHandler(eventBus.addHandler(WorkspaceContextUpdateEvent.getType(), new WorkspaceContextUpdateEventHandler()\n      {\n         @Override\n         public void onWorkspaceContextUpdated(WorkspaceContextUpdateEvent event)\n         {\n            setReadOnly(event.isReadOnly());\n         }\n      }));\n   }","id":94978,"modified_method":"@Override\n   protected void onBind()\n   {\n      validationOptionsPresenter.bind();\n      if (workspaceContext.isReadOnly())\n      {\n         setReadOnly(true);\n      }\n\n      registerHandler(display.getTranslatedChk().addValueChangeHandler(filterChangeHandler));\n      registerHandler(display.getNeedReviewChk().addValueChangeHandler(filterChangeHandler));\n      registerHandler(display.getUntranslatedChk().addValueChangeHandler(filterChangeHandler));\n\n      registerHandler(eventBus.addHandler(FilterViewEvent.getType(), new FilterViewEventHandler()\n      {\n         @Override\n         public void onFilterView(FilterViewEvent event)\n         {\n            // filter cancel will revert a checkbox value, so the checkboxes are\n            // updated to reflect this reversion\n            if (event.isCancelFilter())\n            {\n               display.getTranslatedChk().setValue(event.isFilterTranslated(), false);\n               display.getNeedReviewChk().setValue(event.isFilterNeedReview(), false);\n               display.getUntranslatedChk().setValue(event.isFilterUntranslated(), false);\n            }\n\n            // if filter view, hide modal navigation\n            // TODO remove this when modal navigation is updated to work with a\n            // filtered list\n            boolean showingFullList = (event.isFilterTranslated() == event.isFilterNeedReview()) && (event.isFilterTranslated() == event.isFilterUntranslated());\n            if (showingFullList)\n            {\n               display.setNavOptionVisible(true);\n            }\n            else\n            {\n               display.setNavOptionVisible(false);\n            }\n         }\n      }));\n\n      registerHandler(display.getEditorButtonsChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Show editor buttons: \" + event.getValue());\n            eventBus.fireEvent(new ButtonDisplayChangeEvent(event.getValue()));\n         }\n      }));\n\n      registerHandler(display.getEnterChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Enable 'Enter' Key to save and move to next string: \" + event.getValue());\n            configHolder.setButtonEnter(event.getValue());\n            eventBus.fireEvent(new UserConfigChangeEvent(configHolder.getConfigMap()));\n         }\n      }));\n\n      registerHandler(display.getEscChk().addValueChangeHandler(new ValueChangeHandler<Boolean>()\n      {\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            Log.info(\"Enable 'Esc' Key to close editor: \" + event.getValue());\n            configHolder.setButtonEsc(event.getValue());\n            eventBus.fireEvent(new UserConfigChangeEvent(configHolder.getConfigMap()));\n         }\n      }));\n\n      // editor buttons always shown by default\n      display.getEditorButtonsChk().setValue(true, false);\n      display.getEnterChk().setValue(configHolder.isButtonEnter(), false);\n      display.getEscChk().setValue(configHolder.isButtonEsc(), false);\n\n      registerHandler(display.getModalNavigationOptionsSelect().addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent event)\n         {\n            String selectedOption = display.getSelectedFilter();\n            if (selectedOption.equals(Display.KEY_FUZZY_UNTRANSLATED))\n            {\n               configHolder.setButtonUntranslated(true);\n               configHolder.setButtonFuzzy(true);\n            }\n            else if (selectedOption.equals(Display.KEY_FUZZY))\n            {\n               configHolder.setButtonFuzzy(true);\n               configHolder.setButtonUntranslated(false);\n            }\n            else if (selectedOption.equals(Display.KEY_UNTRANSLATED))\n            {\n               configHolder.setButtonFuzzy(false);\n               configHolder.setButtonUntranslated(true);\n            }\n            eventBus.fireEvent(new UserConfigChangeEvent(configHolder.getConfigMap()));\n         }\n      }));\n\n      registerHandler(eventBus.addHandler(WorkspaceContextUpdateEvent.getType(), new WorkspaceContextUpdateEventHandler()\n      {\n         @Override\n         public void onWorkspaceContextUpdated(WorkspaceContextUpdateEvent event)\n         {\n            setReadOnly(event.isReadOnly());\n         }\n      }));\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Inject\n   public OptionsPanelPresenter(final Display display, final EventBus eventBus, final ValidationOptionsPresenter validationDetailsPresenter, final WorkspaceContext workspaceContext)\n   {\n      super(display, eventBus);\n      this.validationOptionsPresenter = validationDetailsPresenter;\n      this.workspaceContext = workspaceContext;\n\n      configMap.put(EditorConfigConstants.BUTTON_ENTER, false);\n      configMap.put(EditorConfigConstants.BUTTON_ESC, false);\n      configMap.put(EditorConfigConstants.BUTTON_FUZZY, true);\n      configMap.put(EditorConfigConstants.BUTTON_UNTRANSLATED, true);\n   }","id":94979,"modified_method":"@Inject\n   public OptionsPanelPresenter(final Display display, final EventBus eventBus, final ValidationOptionsPresenter validationDetailsPresenter, final WorkspaceContext workspaceContext, UserConfigHolder configHolder)\n   {\n      super(display, eventBus);\n      this.validationOptionsPresenter = validationDetailsPresenter;\n      this.workspaceContext = workspaceContext;\n      this.configHolder = configHolder;\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * instantiate a new {@link OptionsPanelPresenter} using appropriate mocks\n    * \n    * @return newly constructed OptionsPanelPresenter\n    */\n   private OptionsPanelPresenter newOptionsPanelPresenter()\n   {\n      return new OptionsPanelPresenter(mockDisplay, mockEventBus, mockValidationDetailsPresenter, mockWorkspaceContext);\n   }","id":94980,"modified_method":"/**\n    * instantiate a new {@link OptionsPanelPresenter} using appropriate mocks\n    * \n    * @return newly constructed OptionsPanelPresenter\n    */\n   private OptionsPanelPresenter newOptionsPanelPresenter()\n   {\n      return new OptionsPanelPresenter(mockDisplay, mockEventBus, mockValidationDetailsPresenter, mockWorkspaceContext, new UserConfigHolder());\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Inject\n   public TargetContentsPresenter(Provider<TargetContentsDisplay> displayProvider, final EventBus eventBus, final TableEditorMessages messages, final SourceContentsPresenter sourceContentsPresenter)\n   {\n      this.displayProvider = displayProvider;\n      this.eventBus = eventBus;\n      this.messages = messages;\n      this.sourceContentsPresenter = sourceContentsPresenter;\n\n      validationMessagePanel = new ValidationMessagePanel(true, messages);\n\n      eventBus.addHandler(UpdateValidationWarningsEvent.getType(), new UpdateValidationWarningsEventHandler()\n      {\n         @Override\n         public void onUpdate(UpdateValidationWarningsEvent event)\n         {\n            validationMessagePanel.setContent(event.getErrors());\n         }\n      });\n\n      eventBus.addHandler(RequestValidationEvent.getType(), new RequestValidationEventHandler()\n      {\n         @Override\n         public void onRequestValidation(RequestValidationEvent event)\n         {\n            if (isEditing())\n            {\n               eventBus.fireEvent(new RunValidationEvent(sourceContentsPresenter.getSelectedSource(),\n                     getCurrentEditor().getText(), false));\n            }\n         }\n      });\n\n      eventBus.addHandler(InsertStringInEditorEvent.getType(), new InsertStringInEditorHandler()\n      {\n         @Override\n         public void onInsertString(InsertStringInEditorEvent event)\n         {\n            if (isEditing())\n            {\n               getCurrentEditor().insertTextInCursorPosition(event.getSuggestion());\n               eventBus.fireEvent(new NotificationEvent(Severity.Info, messages.notifyCopied()));\n            }\n            else\n            {\n               eventBus.fireEvent(new NotificationEvent(Severity.Error, messages.notifyUnopened()));\n            }\n         }\n      });\n\n      eventBus.addHandler(CopyDataToEditorEvent.getType(), new CopyDataToEditorHandler()\n      {\n         @Override\n         public void onTransMemoryCopy(CopyDataToEditorEvent event)\n         {\n            if (isEditing())\n            {\n               getCurrentEditor().setText(event.getTargetResult());\n               eventBus.fireEvent(new NotificationEvent(Severity.Info, messages.notifyCopied()));\n            }\n            else\n            {\n               eventBus.fireEvent(new NotificationEvent(Severity.Error, messages.notifyUnopened()));\n            }\n         }\n      });\n   }","id":94981,"modified_method":"@Inject\n   public TargetContentsPresenter(Provider<TargetContentsDisplay> displayProvider, final EventBus eventBus, \n                                  final TableEditorMessages messages, \n                                  final SourceContentsPresenter sourceContentsPresenter, UserConfigHolder configHolder,\n                                  NavigationMessages navMessages)\n   {\n      this.displayProvider = displayProvider;\n      this.eventBus = eventBus;\n      this.messages = messages;\n      this.sourceContentsPresenter = sourceContentsPresenter;\n      this.configHolder = configHolder;\n      this.navMessages = navMessages;\n\n      validationMessagePanel = new ValidationMessagePanel(true, messages);\n      eventBus.addHandler(UserConfigChangeEvent.getType(), this);\n      eventBus.addHandler(UpdateValidationWarningsEvent.getType(), this);\n      eventBus.addHandler(RequestValidationEvent.getType(), this);\n      eventBus.addHandler(InsertStringInEditorEvent.getType(), this);\n      eventBus.addHandler(CopyDataToEditorEvent.getType(), this);\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"public TargetContentsDisplay getNextTargetContentsDisplay(int rowIndex, TransUnit transUnit)\n   {\n      TargetContentsDisplay result = displayList.get(rowIndex);\n      if (currentDisplay != null && currentDisplay != result)\n      {\n         currentDisplay.setToView();\n      }\n     \n      result.setTargets(transUnit.getTargets());\n      return result;\n   }","id":94982,"modified_method":"public TargetContentsDisplay getNextTargetContentsDisplay(int rowIndex, TransUnit transUnit)\n   {\n      TargetContentsDisplay result = displayList.get(rowIndex);\n      if (currentDisplay != null && currentDisplay != result)\n      {\n         currentDisplay.setToView();\n      }\n     \n      result.setTargets(transUnit.getTargets());\n      result.setSaveButtonTitle(decideButtonTitle());\n      return result;\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void setTargets(List<String> targets)\n   {\n      editors.clear();\n      int size = (targets == null || targets.size() <= 0) ? 1 : targets.size();\n      editorGrid.resize(size, COLUMNS);\n\n      int rowIndex = 0;\n      if (targets == null || targets.size() == 0)\n      {\n         Editor editor = new Editor(\"\", findMessage, rowIndex, listener);\n         editor.setText(\"\");\n         editorGrid.setWidget(rowIndex, 0, editor);\n         editors.add(editor);\n         editor.setSaveButtonTitle(\"Save as approved\");\n      }\n      else\n      {\n         for (String target : targets)\n         {\n            Editor editor = new Editor(target, findMessage, rowIndex, listener);\n            editor.setText(target);\n            editorGrid.setWidget(rowIndex, 0, editor);\n            editors.add(editor);\n            rowIndex++;\n         }\n\n         // TODO last one has different title. The title should be in\n         // NavigationMessages not hardcoded string\n         editors.get(editors.size() - 1).setSaveButtonTitle(\"Save and go to next\");\n      }\n   }","id":94983,"modified_method":"@Override\n   public void setTargets(List<String> targets)\n   {\n      editors.clear();\n      int size = (targets == null || targets.size() <= 0) ? 1 : targets.size();\n      editorGrid.resize(size, COLUMNS);\n\n      int rowIndex = 0;\n      if (targets == null || targets.size() == 0)\n      {\n         Editor editor = new Editor(\"\", findMessage, rowIndex, listener);\n         editor.setText(\"\");\n         editorGrid.setWidget(rowIndex, 0, editor);\n         editors.add(editor);\n      }\n      else\n      {\n         for (String target : targets)\n         {\n            Editor editor = new Editor(target, findMessage, rowIndex, listener);\n            editor.setText(target);\n            editorGrid.setWidget(rowIndex, 0, editor);\n            editors.add(editor);\n            rowIndex++;\n         }\n      }\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"public UserConfigChangeEvent(Map<String, Boolean> configMap)\n   {\n      this.configMap = (HashMap<String, Boolean>) configMap;\n   }","id":94984,"modified_method":"public UserConfigChangeEvent(Map<String, Boolean> configMap)\n   {\n      //TODO instead of passing config map around, all receiver should directly reference UserConfigHolder to get value\n      this.configMap = configMap;\n   }","commit_id":"11ecdd94479051735784504bb206f547f2ba800a","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Inject\n   public PDFViewer(EventBus eventBus,\n                    final ApplicationServerOperations server,\n                    final GlobalDisplay display,\n                    final SatelliteManager satelliteManager)\n   {  \n      eventBus.addHandler(ShowPDFViewerEvent.TYPE, \n                          new ShowPDFViewerHandler() \n      {\n         @Override\n         public void onShowPDFViewer(ShowPDFViewerEvent event)\n         {\n         }\n      });\n\n      eventBus.addHandler(CompilePdfCompletedEvent.TYPE, \n            new CompilePdfCompletedEvent.Handler()\n      {\n         @Override\n         public void onCompilePdfCompleted(CompilePdfCompletedEvent event)\n         {\n            FileSystemItem pdf = FileSystemItem.createFile(\n                  event.getResult().getPdfPath());\n            String url = GWT.getHostPageBaseURL() + \n                  \"pdf_js/web/viewer.html?file=\" + \n                  server.getFileUrl(pdf);\n            display.openWindow(url);\n         }\n      });\n   }","id":94985,"modified_method":"@Inject\n   public PDFViewer(EventBus eventBus,\n                    final ApplicationServerOperations server,\n                    final GlobalDisplay display,\n                    final SatelliteManager satelliteManager)\n   {  \n      display_ = display;\n      server_ = server;\n      \n      eventBus.addHandler(ShowPDFViewerEvent.TYPE, this);\n      eventBus.addHandler(CompilePdfCompletedEvent.TYPE, this);\n   }","commit_id":"156ad4c78ea7c9253671f76ca344cd3821a445f5","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n\tpublic void populateObjectContextMenu(Object o, ContextMenuAdapter adapter) {\n\t\tif(o instanceof Amenity) {\n\t\t\tfinal Amenity a = (Amenity) o;\n\t\t\tOnContextMenuClick listener = new ContextMenuAdapter.OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif (itemId == R.string.poi_context_menu_call) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"tel:\"+a.getPhone())); //$NON-NLS-1$\n\t\t\t\t\t\t\tview.getContext().startActivity(intent);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\tlog.error(\"Failed to invoke call\", e); //$NON-NLS-1$\n\t\t\t\t\t\t\tAccessibleToast.makeText(view.getContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (itemId == R.string.poi_context_menu_website) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\t\t\tintent.setData(Uri.parse(a.getSite())); \n\t\t\t\t\t\t\tview.getContext().startActivity(intent);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\tlog.error(\"Failed to invoke call\", e); //$NON-NLS-1$\n\t\t\t\t\t\t\tAccessibleToast.makeText(view.getContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (itemId == R.string.poi_context_menu_showdescription) {\n\t\t\t\t\t\tshowDescriptionDialog(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif(a.getDescription() != null){\n\t\t\t\tadapter.item(R.string.poi_context_menu_showdescription)\n\t\t\t\t\t.icons(R.drawable.ic_action_note_dark,R.drawable.ic_action_note_light)\n\t\t\t\t\t.listen(listener).reg();\n\t\t\t}\n\t\t\tif(a.getPhone() != null){\n\t\t\t\tadapter.item(R.string.poi_context_menu_call).icons(R.drawable.ic_action_call_dark, R.drawable.ic_action_call_light).listen(listener).reg();\n\t\t\t}\n\t\t\tif(a.getSite() != null){\n\t\t\t\tadapter.item(R.string.poi_context_menu_website)\n\t\t\t\t\t.icons( R.drawable.ic_action_globus_dark, R.drawable.ic_action_globus_light).listen(listener).reg();\n\t\t\t}\n\t\t}\n\t}","id":94986,"modified_method":"@Override\n\tpublic void populateObjectContextMenu(Object o, ContextMenuAdapter adapter) {\n\t\tif(o instanceof Amenity) {\n\t\t\tfinal Amenity a = (Amenity) o;\n\t\t\tOnContextMenuClick listener = new ContextMenuAdapter.OnContextMenuClick() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onContextMenuClick(int itemId, int pos, boolean isChecked, DialogInterface dialog) {\n\t\t\t\t\tif (itemId == R.string.poi_context_menu_call) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"tel:\"+a.getPhone())); //$NON-NLS-1$\n\t\t\t\t\t\t\tview.getContext().startActivity(intent);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\tlog.error(\"Failed to invoke call\", e); //$NON-NLS-1$\n\t\t\t\t\t\t\tAccessibleToast.makeText(view.getContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (itemId == R.string.poi_context_menu_website) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\t\t\t\t\tintent.setData(Uri.parse(a.getSite())); \n\t\t\t\t\t\t\tview.getContext().startActivity(intent);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\tlog.error(\"Failed to invoke call\", e); //$NON-NLS-1$\n\t\t\t\t\t\t\tAccessibleToast.makeText(view.getContext(), e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (itemId == R.string.poi_context_menu_showdescription) {\n\t\t\t\t\t\tshowDescriptionDialog(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif(OsmAndFormatter.getAmenityDescriptionContent(view.getApplication(), a).length() > 0){\n\t\t\t\tadapter.item(R.string.poi_context_menu_showdescription)\n\t\t\t\t\t.icons(R.drawable.ic_action_note_dark,R.drawable.ic_action_note_light)\n\t\t\t\t\t.listen(listener).reg();\n\t\t\t}\n\t\t\tif(a.getPhone() != null){\n\t\t\t\tadapter.item(R.string.poi_context_menu_call).icons(R.drawable.ic_action_call_dark, R.drawable.ic_action_call_light).listen(listener).reg();\n\t\t\t}\n\t\t\tif(a.getSite() != null){\n\t\t\t\tadapter.item(R.string.poi_context_menu_website)\n\t\t\t\t\t.icons( R.drawable.ic_action_globus_dark, R.drawable.ic_action_globus_light).listen(listener).reg();\n\t\t\t}\n\t\t}\n\t}","commit_id":"a98c49e55961acf8c6f8b30af3e94dfacaaf9663","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void showDescriptionDialog(Amenity a) {\n\t\tBuilder bs = new AlertDialog.Builder(view.getContext());\n\t\tbs.setTitle(OsmAndFormatter.getPoiSimpleFormat(a, view.getApplication(), view.getSettings().USE_ENGLISH_NAMES.get()));\n\t\tbs.setMessage(a.getDescription());\n\t\tbs.show();\n\t}","id":94987,"modified_method":"private void showDescriptionDialog(Amenity a) {\n\t\tBuilder bs = new AlertDialog.Builder(view.getContext());\n\t\tbs.setTitle(OsmAndFormatter.getPoiSimpleFormat(a, view.getApplication(), view.getSettings().USE_ENGLISH_NAMES.get()));\n\t\tif(a.getType() == AmenityType.OSMWIKI) {\n\t\t\tbs.setMessage(a.getDescription());\n\t\t} else {\n\t\t\tbs.setMessage(OsmAndFormatter.getAmenityDescriptionContent(view.getApplication(), a));\n\t\t}\n\t\tbs.show();\n\t}","commit_id":"a98c49e55961acf8c6f8b30af3e94dfacaaf9663","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n   * Checks if the line is closed loop.\n   * That is, if the start Point is same with end Point.\n   * @param node xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln isClosed(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node,\n        Q_GML_LINEARRING, Q_GML_LINESTRING, Q_GML_MULTILINESTRING);\n    if(geom == null && gmlReader(node) != null)\n      throw GeoErrors.lineNeeded(node.qname().local());\n\n    return Bln.get(geom instanceof LineString ?\n       ((LineString) geom).isClosed() : geom instanceof LinearRing ?\n       ((LinearRing) geom).isClosed() :\n       ((MultiLineString) geom).isClosed());\n  }","id":94988,"modified_method":"/**\n   * Checks if the line is closed loop.\n   * That is, if the start Point is same with end Point.\n   * @param node xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln isClosed(final ANode node) throws QueryException {\n    final Geometry geo = geo(node,\n        Q_GML_LINEARRING, Q_GML_LINESTRING, Q_GML_MULTILINESTRING);\n    if(geo == null && checkGeo(node) != null)\n      throw GeoErrors.lineNeeded(node.qname().local());\n\n    return Bln.get(geo instanceof LineString ?\n       ((LineString) geo).isClosed() : geo instanceof LinearRing ?\n       ((LinearRing) geo).isClosed() :\n       ((MultiLineString) geo).isClosed());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a polygon that represents all Points whose distance from this\n   * geometric object is less than or equal to distance.\n   * The returned element must be either gml:Polygon, gml:LineString or gml:Point.\n   * @param node xml element containing gml object(s)\n   * @param distance specific distance from the $geometry (the buffer width)\n   * @return buffer geometry as gml element\n   * @throws QueryException query exception\n   */\n  public Value buffer(final ANode node, final Dbl distance) throws QueryException {\n    final Geometry geom = gmlReader(node);\n    return geom == null ? null : gmlWriter(geom.buffer(distance.dbl()));\n  }","id":94989,"modified_method":"/**\n   * Returns a polygon that represents all Points whose distance from this\n   * geometric object is less than or equal to distance.\n   * The returned element must be either gml:Polygon, gml:LineString or gml:Point.\n   * @param node xml element containing gml object(s)\n   * @param distance specific distance from the $geometry (the buffer width)\n   * @return buffer geometry as gml element\n   * @throws QueryException query exception\n   */\n  public Value buffer(final ANode node, final Dbl distance) throws QueryException {\n    final Geometry geo = checkGeo(node);\n    return gmlWriter(geo.buffer(distance.dbl()));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns the shortest distance in the units of the spatial reference system\n   * of geometry, between the geometries.\n   * The distance is the distance between a point on each of the geometries.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return distance double value\n   * @throws QueryException query exception\n   */\n  public Dbl distance(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geom1 = gmlReader(node1);\n    final Geometry geom2 = gmlReader(node2);\n    return geom1 == null || geom2 == null ? null : Dbl.get(geom1.distance(geom2));\n  }","id":94990,"modified_method":"/**\n   * Returns the shortest distance in the units of the spatial reference system\n   * of geometry, between the geometries.\n   * The distance is the distance between a point on each of the geometries.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return distance double value\n   * @throws QueryException query exception\n   */\n  public Dbl distance(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geo1 = checkGeo(node1);\n    final Geometry geo2 = checkGeo(node2);\n    return Dbl.get(geo1.distance(geo2));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a boolean value that shows if whether relationships between the boundaries,\n   * interiors and exteriors of two geometries match\n   * the pattern specified in intersection-matrix-pattern.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @param intersectionMatrix intersection matrix for two geometries\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln relate(final ANode node1, final ANode node2, final Str intersectionMatrix)\n      throws QueryException {\n\n    final Geometry geom1 = gmlReader(node1);\n    final Geometry geom2 = gmlReader(node2);\n    return geom1 == null || geom2 == null ? null :\n      Bln.get(geom1.relate(geom2, intersectionMatrix.toJava()));\n  }","id":94991,"modified_method":"/**\n   * Returns a boolean value that shows if whether relationships between the boundaries,\n   * interiors and exteriors of two geometries match\n   * the pattern specified in intersection-matrix-pattern.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @param intersectionMatrix intersection matrix for two geometries\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln relate(final ANode node1, final ANode node2, final Str intersectionMatrix)\n      throws QueryException {\n    final Geometry geo1 = checkGeo(node1);\n    final Geometry geo2 = checkGeo(node2);\n    return Bln.get(geo1.relate(geo2, intersectionMatrix.toJava()));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a boolean value that shows if this geometry contains the specified geometry.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln contains(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geom1 = gmlReader(node1);\n    final Geometry geom2 = gmlReader(node2);\n    return geom1 == null || geom2 == null ? null : Bln.get(geom1.contains(geom2));\n  }","id":94992,"modified_method":"/**\n   * Returns a boolean value that shows if this geometry contains the specified geometry.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln contains(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geo1 = checkGeo(node1);\n    final Geometry geo2 = checkGeo(node2);\n    return Bln.get(geo1.contains(geo2));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns number of geometries in a geometry collection,\n   * or 1 if the input is not a collection.\n   * @param node xml element containing gml object(s)\n   * @return integer value of number of geometries\n   * @throws QueryException query exception\n   */\n  public Int numGeometries(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node);\n    return geom == null ? null : Int.get(geom.getNumGeometries());\n  }","id":94993,"modified_method":"/**\n   * Returns number of geometries in a geometry collection,\n   * or 1 if the input is not a collection.\n   * @param node xml element containing gml object(s)\n   * @return integer value of number of geometries\n   * @throws QueryException query exception\n   */\n  public Int numGeometries(final ANode node) throws QueryException {\n    final Geometry geo = checkGeo(node);\n    return Int.get(geo.getNumGeometries());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a boolean value that shows if two geometries are equal or not.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln equals(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geom1 = gmlReader(node1);\n    final Geometry geom2 = gmlReader(node2);\n    return geom1 == null || geom2 == null ? null : Bln.get(geom1.equals(geom2));\n  }","id":94994,"modified_method":"/**\n   * Returns a boolean value that shows if two geometries are equal or not.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln equals(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geo1 = checkGeo(node1);\n    final Geometry geo2 = checkGeo(node2);\n    return Bln.get(geo1.equals(geo2));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns the outer ring of a polygon, in GML.\n   * @param node xml element containing gml object(s)\n   * @return exterior ring geometry (LineString) as a gml element\n   * @throws QueryException query exception\n   */\n  public Value exteriorRing(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node, Q_GML_POLYGON);\n    if(geom == null && gmlReader(node) != null)\n      throw GeoErrors.polygonNeeded(node.qname().local());\n\n    return gmlWriter(((Polygon) geom).getExteriorRing());\n  }","id":94995,"modified_method":"/**\n   * Returns the outer ring of a polygon, in GML.\n   * @param node xml element containing gml object(s)\n   * @return exterior ring geometry (LineString) as a gml element\n   * @throws QueryException query exception\n   */\n  public Value exteriorRing(final ANode node) throws QueryException {\n    final Geometry geo = geo(node, Q_GML_POLYGON);\n    if(geo == null && checkGeo(node) != null)\n      throw GeoErrors.polygonNeeded(node.qname().local());\n\n    return gmlWriter(((Polygon) geo).getExteriorRing());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns the mathematical centroid of the geometry as a gml:Point.\n   * The point is not guaranteed to be on the surface.\n   * @param node xml element containing gml object(s)\n   * @return centroid geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value centroid(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node);\n    return geom == null ? null : gmlWriter(geom.getCentroid());\n  }","id":94996,"modified_method":"/**\n   * Returns the mathematical centroid of the geometry as a gml:Point.\n   * The point is not guaranteed to be on the surface.\n   * @param node xml element containing gml object(s)\n   * @return centroid geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value centroid(final ANode node) throws QueryException {\n    final Geometry geo = checkGeo(node);\n    return gmlWriter(geo.getCentroid());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a boolean value which shows if the specified geometry is simple or not,\n   * which has no anomalous geometric points, such as self intersection or self tangency.\n   * @param node xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln isSimple(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node);\n    return geom == null ? null : Bln.get(geom.isSimple());\n  }","id":94997,"modified_method":"/**\n   * Returns a boolean value which shows if the specified geometry is simple or not,\n   * which has no anomalous geometric points, such as self intersection or self tangency.\n   * @param node xml element containing gml object(s)\n   * @return boolean value\n   * @throws QueryException query exception\n   */\n  public Bln isSimple(final ANode node) throws QueryException {\n    return Bln.get(checkGeo(node).isSimple());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a geometric object that represents the\n   * Point set difference of two geometries.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return difference geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value difference(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geom1 = gmlReader(node1);\n    final Geometry geom2 = gmlReader(node2);\n    return geom1 == null || geom2 == null ? null : gmlWriter(geom1.difference(geom2));\n  }","id":94998,"modified_method":"/**\n   * Returns a geometric object that represents the\n   * Point set difference of two geometries.\n   * @param node1 xml element containing gml object(s)\n   * @param node2 xml element containing gml object(s)\n   * @return difference geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value difference(final ANode node1, final ANode node2) throws QueryException {\n    final Geometry geo1 = checkGeo(node1);\n    final Geometry geo2 = checkGeo(node2);\n    return gmlWriter(geo1.difference(geo2));\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns the convex hull geometry of a geometry in GML, or the empty sequence.\n   * The returned element must be either gml:Polygon, gml:LineString or gml:Point.\n   * @param node xml element containing gml object(s)\n   * @return convex hull geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value convexHull(final ANode node) throws QueryException {\n    final Geometry geom = gmlReader(node);\n    return geom == null ? null : gmlWriter(geom.convexHull());\n  }","id":94999,"modified_method":"/**\n   * Returns the convex hull geometry of a geometry in GML, or the empty sequence.\n   * The returned element must be either gml:Polygon, gml:LineString or gml:Point.\n   * @param node xml element containing gml object(s)\n   * @return convex hull geometry as a gml element\n   * @throws QueryException query exception\n   */\n  public Value convexHull(final ANode node) throws QueryException {\n    final Geometry geo = checkGeo(node);\n    return gmlWriter(geo.convexHull());\n  }","commit_id":"003763b6ab59cb5fee5d1f059c1f20abcdb67a74","url":"https://github.com/BaseXdb/basex"}]